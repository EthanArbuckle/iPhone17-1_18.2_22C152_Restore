uint64_t getEnumTagSinglePayload for QueryConfiguration(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2) {
    return 0;
  }
  if (a2 >= 0x6F && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 111);
  }
  v3 = ((*(unsigned __int8 *)(a1 + 32) >> 3) & 0xFFFFFF9F | (32 * ((*(unsigned __int8 *)(a1 + 32) >> 1) & 3))) ^ 0x7F;
  if (v3 >= 0x6E) {
    v3 = -1;
  }
  return v3 + 1;
}

uint64_t destroy for QueryConfiguration(uint64_t a1)
{
  return sub_1C293FE60(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
}

ValueMetadata *type metadata accessor for QueryConfiguration()
{
  return &type metadata for QueryConfiguration;
}

ValueMetadata *type metadata accessor for StatisticsOption()
{
  return &type metadata for StatisticsOption;
}

uint64_t storeEnumTagSinglePayload for QueryConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x6E)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)result = a2 - 111;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x6F) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0x6F) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2)
    {
      *(_OWORD *)result = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(unsigned char *)(result + 32) = 2 * (((-a2 >> 5) & 3) - 4 * a2);
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for StatisticsQueryConfiguration()
{
  return &type metadata for StatisticsQueryConfiguration;
}

uint64_t sub_1C292D0C4(uint64_t a1, uint64_t a2, long long *a3)
{
  char v3 = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 40);
  uint64_t v5 = *((void *)a3 + 10);
  char v6 = *((unsigned char *)a3 + 88);
  long long v7 = *(_OWORD *)(a2 + 16);
  v36[0] = *(_OWORD *)a2;
  v36[1] = v7;
  char v37 = v3;
  uint64_t v38 = v4;
  long long v8 = a3[1];
  long long v29 = *a3;
  long long v30 = v8;
  long long v9 = a3[3];
  long long v31 = a3[2];
  long long v32 = v9;
  long long v33 = a3[4];
  uint64_t v34 = v5;
  char v35 = v6;
  sub_1C2930124((uint64_t)v36, (uint64_t)&v29, v39);
  uint64_t v10 = v40;
  uint64_t v11 = v41;
  __swift_project_boxed_opaque_existential_1(v39, v40);
  *(void *)&long long v29 = (*(double (**)(uint64_t, uint64_t))(v11 + 8))(v10, v11);
  *((void *)&v29 + 1) = v12;
  *(void *)&long long v30 = v13;
  *((void *)&v30 + 1) = v14;
  LOBYTE(v31) = 0;
  uint64_t v15 = v40;
  uint64_t v16 = v41;
  __swift_project_boxed_opaque_existential_1(v39, v40);
  double v17 = (*(double (**)(uint64_t, uint64_t))(v16 + 16))(v15, v16);
  double v19 = v18;
  double v21 = v20;
  double v23 = v22;
  uint64_t v24 = v40;
  uint64_t v25 = v41;
  __swift_project_boxed_opaque_existential_1(v39, v40);
  uint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 24))(v24, v25);
  sub_1C29347D0((uint64_t)&v29, v26, v27, v17, v19, v21, v23);
  swift_release();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
}

uint64_t sub_1C292D244(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 7496034 && a2 == 0xE300000000000000;
  if (v2 || (sub_1C2A9E8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x72656E6E6162 && a2 == 0xE600000000000000 || (sub_1C2A9E8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1701734764 && a2 == 0xE400000000000000 || (sub_1C2A9E8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x796C6E4F73697861 && a2 == 0xE800000000000000 || (sub_1C2A9E8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x7562697274736964 && a2 == 0xEC0000006E6F6974 || (sub_1C2A9E8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001C2ABAF90)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v6 = sub_1C2A9E8D8();
    swift_bridgeObjectRelease();
    if (v6) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

void *sub_1C292D4B4(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1C293A244(0, &qword_1EBB91210, MEMORY[0x1E4FBB3D0], MEMORY[0x1E4FBBE00]);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1C2941AD8(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

unint64_t sub_1C292D5E4(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1C2A9CFE8();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790]();
  uint64_t v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((sub_1C2A9DDD8() & 1) == 0 || (sub_1C2A9DDE8() & 1) == 0) {
    goto LABEL_13;
  }
  unint64_t v10 = sub_1C2A9DDA8();
  unint64_t result = sub_1C2A9DDA8();
  if (result >> 14 >= v10 >> 14)
  {
    uint64_t v12 = sub_1C2A9DE08();
    if (!((v12 ^ v13) >> 14))
    {
      swift_bridgeObjectRelease();
      return 64;
    }
    uint64_t v14 = MEMORY[0x1C8763C00]();
    uint64_t v16 = v15;
    swift_bridgeObjectRelease();
    if (*(void *)(a3 + 16))
    {
      unint64_t v17 = sub_1C295DDC8(v14, v16);
      if (v18)
      {
        a1 = *(void *)(*(void *)(a3 + 56) + 16 * v17);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        return a1;
      }
    }
    swift_bridgeObjectRelease();
    sub_1C2A9CFB8();
    swift_bridgeObjectRetain_n();
    double v19 = sub_1C2A9CFC8();
    os_log_type_t v20 = sub_1C2A9E088();
    if (os_log_type_enabled(v19, v20))
    {
      double v21 = (uint8_t *)swift_slowAlloc();
      uint64_t v22 = swift_slowAlloc();
      uint64_t v24 = v22;
      *(_DWORD *)double v21 = 136446210;
      v23[1] = v21 + 4;
      swift_bridgeObjectRetain();
      v23[2] = sub_1C2957168(a1, a2, &v24);
      sub_1C2A9E358();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1C292A000, v19, v20, "Localization: no substitution was found for '%{public}s'", v21, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C87656F0](v22, -1, -1);
      MEMORY[0x1C87656F0](v21, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
LABEL_13:
    swift_bridgeObjectRetain();
    return a1;
  }
  __break(1u);
  return result;
}

HealthVisualization::DiagramConfiguration::AxisLineWidth_optional __swiftcall DiagramConfiguration.AxisLineWidth.init(rawValue:)(Swift::String rawValue)
{
  BOOL v2 = v1;
  uint64_t v3 = sub_1C2A9E6E8();
  result.value = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *BOOL v2 = v5;
  return result;
}

uint64_t DiagramConfiguration.Axis.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = a2;
  sub_1C29367DC(0, &qword_1EBB927A8, (uint64_t (*)(void))sub_1C2943BF0, (uint64_t)&type metadata for DiagramConfiguration.Axis.CodingKeys, MEMORY[0x1E4FBBDC0]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v17 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1C2943BF0();
  sub_1C2A9EA08();
  if (!v2)
  {
    uint64_t v9 = v6;
    uint64_t v10 = v20;
    char v24 = 0;
    sub_1C29444DC();
    sub_1C2A9E758();
    int v18 = v23;
    int v11 = v22;
    uint64_t v19 = v21;
    char v24 = 1;
    sub_1C2A9E758();
    unint64_t v13 = v19 | ((unint64_t)(v11 | (v18 << 16)) << 32);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v8, v5);
    unsigned int v14 = v21;
    unsigned __int16 v15 = v22;
    unsigned __int8 v16 = v23;
    *(unsigned char *)(v10 + 6) = BYTE6(v13);
    *(_WORD *)(v10 + 4) = WORD2(v13);
    *(_DWORD *)uint64_t v10 = v13;
    *(unsigned char *)(v10 + 13) = v16;
    *(_WORD *)(v10 + 11) = v15;
    *(_DWORD *)(v10 + 7) = v14;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t DiagramAxis.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_1C292DC84()
{
  uint64_t result = sub_1C2A9C468();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t QuantityTypeIdentifiable.quantityTypeIdentifier.getter(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(void *)(a2 + 8) + 8))();
  uint64_t v2 = sub_1C2A9DCF8();
  swift_bridgeObjectRelease();
  return v2;
}

char *sub_1C292DD88(uint64_t a1, int64_t a2, uint64_t a3)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v5 = *(void **)v3;
  int64_t v6 = *(void *)(*(void *)v3 + 16);
  if (v6 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v10 > v5[3] >> 1)
  {
    if (v6 <= v10) {
      int64_t v13 = v6 + v9;
    }
    else {
      int64_t v13 = v6;
    }
    uint64_t v5 = sub_1C293A104(isUniquelyReferenced_nonNull_native, v13, 1, v5);
  }
  uint64_t v14 = (uint64_t)&v5[5 * a1 + 4];
  uint64_t result = (char *)swift_arrayDestroy();
  if (!v9) {
    goto LABEL_20;
  }
  uint64_t v16 = v5[2];
  BOOL v17 = __OFSUB__(v16, a2);
  uint64_t v18 = v16 - a2;
  if (v17) {
    goto LABEL_26;
  }
  if ((v18 & 0x8000000000000000) == 0)
  {
    uint64_t result = (char *)(v14 + 40);
    uint64_t v19 = (char *)&v5[5 * a2 + 4];
    size_t v20 = 40 * v18;
    if ((char *)(v14 + 40) != v19 || result >= &v19[v20]) {
      uint64_t result = (char *)memmove(result, v19, v20);
    }
    uint64_t v21 = v5[2];
    BOOL v17 = __OFADD__(v21, v9);
    uint64_t v22 = v21 + v9;
    if (!v17)
    {
      v5[2] = v22;
LABEL_20:
      long long v23 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)uint64_t v14 = *(_OWORD *)a3;
      *(_OWORD *)(v14 + 16) = v23;
      *(_DWORD *)(v14 + 32) = *(_DWORD *)(a3 + 32);
      *(void *)uint64_t v3 = v5;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = (char *)sub_1C2A9E6A8();
  __break(1u);
  return result;
}

uint64_t sub_1C292DF20()
{
  uint64_t result = sub_1C2A9C858();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1C292DFC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  uint64_t v9 = sub_1C2A9C868();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DiagramDateAxisMetricsCalculator.DateTickIntervalStrategy();
  MEMORY[0x1F4188790](v13 - 8);
  unsigned __int16 v15 = (char *)&v17 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C2A9C838();
  (*(void (**)(char *, uint64_t, uint64_t, void, double, double))(*(void *)v4 + 104))(v12, 8, 18, v4[16], a3, a4);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  sub_1C2938760(a1, v15, a2, a3, a4);
  return sub_1C2938674((uint64_t)v15);
}

void *sub_1C292E150@<X0>(unsigned char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_1C2A9CFE8();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = 63;
  switch(*a1)
  {
    case 1:
      uint64_t v11 = type metadata accessor for DiagramDateRangeAxisMetricsCalculator();
      uint64_t result = (void *)swift_allocObject();
      uint64_t v13 = &protocol witness table for DiagramDateRangeAxisMetricsCalculator;
      goto LABEL_27;
    case 2:
      uint64_t v14 = (objc_class *)MEMORY[0x1E4F67988];
      goto LABEL_6;
    case 3:
      uint64_t v14 = (objc_class *)MEMORY[0x1E4F67990];
LABEL_6:
      uint64_t result = objc_msgSend(objc_allocWithZone(v14), sel_init);
      goto LABEL_13;
    case 4:
      goto LABEL_12;
    case 5:
      uint64_t result = sub_1C29F3B68(70);
      if (!result) {
        goto LABEL_32;
      }
      goto LABEL_13;
    case 6:
      uint64_t result = sub_1C29F3B68(99);
      if (!result) {
        goto LABEL_32;
      }
      goto LABEL_13;
    case 7:
      uint64_t v9 = 79;
LABEL_12:
      uint64_t result = sub_1C29F3B68(v9);
      if (result) {
        goto LABEL_13;
      }
      goto LABEL_32;
    case 8:
      uint64_t result = sub_1C29F3B68(2);
      if (!result) {
        goto LABEL_32;
      }
LABEL_13:
      uint64_t v15 = (uint64_t)result;
      swift_unknownObjectRetain();
      uint64_t v16 = type metadata accessor for DiagramAxisMetricsCalculator();
      swift_getObjectType();
      uint64_t v17 = sub_1C299E0BC(v15, 3, (uint64_t)sub_1C299C4C0, 0);
      *(void *)(a2 + 24) = v16;
      *(void *)(a2 + 32) = &protocol witness table for DiagramAxisMetricsCalculator;
      uint64_t result = (void *)swift_unknownObjectRelease();
      *(void *)a2 = v17;
      return result;
    case 9:
      uint64_t v18 = *(void **)(v2 + 16);
      id v19 = objc_allocWithZone((Class)type metadata accessor for DiagramAxisMetricsCalculatorFactory.HiLoScalarAxisDimension());
      id v20 = v18;
      id v21 = sub_1C29F413C(173, v20);

      uint64_t v22 = type metadata accessor for DiagramAxisMetricsCalculator();
      uint64_t result = (void *)swift_allocObject();
      result[2] = v21;
      result[3] = 2;
      result[4] = sub_1C299C4C0;
      result[5] = 0;
      uint64_t v13 = &protocol witness table for DiagramAxisMetricsCalculator;
      *(void *)(a2 + 24) = v22;
      goto LABEL_28;
    case 0xB:
      id v23 = (id)HKDateFormatterFromTemplate();
      uint64_t v24 = type metadata accessor for DiagramDateAxisMetricsCalculator();
      uint64_t result = (void *)swift_allocObject();
      *((unsigned char *)result + 16) = 0;
      result[3] = v23;
      uint64_t v13 = &protocol witness table for DiagramDateAxisMetricsCalculator;
      *(void *)(a2 + 24) = v24;
      goto LABEL_28;
    case 0xC:
      uint64_t v10 = type metadata accessor for DiagramWeekdayAxisMetricsCalculator();
      goto LABEL_19;
    case 0xD:
      uint64_t v11 = type metadata accessor for DiagramMultiDayDateAxisMetricsCalculator();
      uint64_t result = (void *)swift_allocObject();
      uint64_t v25 = *MEMORY[0x1E4F296E8];
      if ((unint64_t)(*MEMORY[0x1E4F296E8] - 0x2000000000000000) >> 62 != 3)
      {
        __break(1u);
        goto LABEL_34;
      }
      *((double *)result + 4) = (double)(4 * v25);
      if ((unsigned __int128)(v25 * (__int128)10) >> 64 != (10 * v25) >> 63)
      {
LABEL_34:
        __break(1u);
        goto LABEL_35;
      }
      *((double *)result + 5) = (double)(10 * v25);
      uint64_t v26 = (unsigned __int128)(v25 * (__int128)20) >> 64;
      uint64_t v27 = 20 * v25;
      if (v26 != v27 >> 63)
      {
LABEL_35:
        __break(1u);
        return result;
      }
      *((double *)result + 6) = (double)v27;
LABEL_24:
      *((unsigned char *)result + 16) = 0;
LABEL_26:
      result[3] = 0;
      uint64_t v13 = &protocol witness table for DiagramDateAxisMetricsCalculator;
LABEL_27:
      *(void *)(a2 + 24) = v11;
LABEL_28:
      *(void *)(a2 + 32) = v13;
      *(void *)a2 = result;
      return result;
    case 0xE:
      uint64_t v11 = type metadata accessor for DiagramDateAxisMetricsCalculator();
      uint64_t result = (void *)swift_allocObject();
      *((unsigned char *)result + 16) = 1;
      goto LABEL_26;
    case 0xF:
      sub_1C2A9CF98();
      v28 = sub_1C2A9CFC8();
      os_log_type_t v29 = sub_1C2A9E0A8();
      if (os_log_type_enabled(v28, v29))
      {
        long long v30 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)long long v30 = 0;
        _os_log_impl(&dword_1C292A000, v28, v29, "Diagram custom axis type specified but did not provide custom Axis Metrics Provider implementation; no axis will be rendered.",
          v30,
          2u);
        MEMORY[0x1C87656F0](v30, -1, -1);
      }

      uint64_t result = (void *)(*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
LABEL_32:
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    default:
      uint64_t v10 = type metadata accessor for DiagramDateAxisMetricsCalculator();
LABEL_19:
      uint64_t v11 = v10;
      uint64_t result = (void *)swift_allocObject();
      goto LABEL_24;
  }
}

uint64_t sub_1C292E56C(uint64_t result, uint64_t *a2, double a3, double a4)
{
  uint64_t v5 = *(void *)(v4 + 64);
  if ((v5 & 0xFF00000000) != 0x300000000)
  {
    uint64_t v7 = (CGContext *)result;
    uint64_t v8 = *a2;
    uint64_t v9 = a2[1];
    uint64_t v10 = a2[2];
    uint64_t v11 = a2[3];
    uint64_t v12 = a2[4];
    uint64_t v13 = a2[5];
    uint64_t v14 = a2[6];
    unint64_t v15 = *(unsigned int *)(v4 + 72) | ((unint64_t)*(unsigned __int16 *)(v4 + 76) << 32);
    if ((v5 & 0xFF00000000) != 0x200000000)
    {
      uint64_t v16 = *(void *)(v4 + 16);
      if (v16)
      {
        uint64_t v27 = *a2;
        uint64_t v28 = v9;
        uint64_t v29 = v10;
        uint64_t v30 = v11;
        uint64_t v31 = v12;
        uint64_t v32 = v13;
        uint64_t v33 = v14;
        *(_WORD *)uint64_t v22 = v5;
        v22[2] = BYTE2(v5);
        char v23 = BYTE3(v5);
        char v24 = BYTE4(v5) & 1;
        char v25 = BYTE5(v5);
        char v26 = BYTE6(v5);
        uint64_t v20 = v16;
        long long v21 = *(_OWORD *)(v4 + 24);
        swift_bridgeObjectRetain();
        sub_1C293A2D8(v7, (double *)&v27, v22, (CGFloat *)&v20, a3);
        uint64_t result = swift_bridgeObjectRelease();
      }
    }
    if ((v15 & 0xFF000000) != 0x2000000)
    {
      uint64_t v18 = *(void *)(v4 + 40);
      if (v18)
      {
        uint64_t v27 = v8;
        uint64_t v28 = v9;
        uint64_t v29 = v10;
        uint64_t v30 = v11;
        uint64_t v31 = v12;
        uint64_t v32 = v13;
        uint64_t v33 = v14;
        v22[0] = HIBYTE(v5);
        *(_WORD *)&v22[1] = v15;
        char v23 = BYTE2(v15);
        char v24 = BYTE3(v15) & 1;
        char v25 = BYTE4(v15);
        char v26 = BYTE5(v15);
        uint64_t v20 = v18;
        long long v21 = *(_OWORD *)(v4 + 48);
        swift_bridgeObjectRetain();
        sub_1C2A065F8(v7, (double *)&v27, v22, &v20, v19, a4);
        return swift_bridgeObjectRelease();
      }
    }
  }
  return result;
}

uint64_t sub_1C292E718(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + OBJC_IVAR____TtC19HealthVisualization16DiagramImageView_delegate;
  swift_beginAccess();
  *(void *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

uint64_t sub_1C292E784@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = sub_1C2A9CFE8();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790]();
  uint64_t v9 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = sub_1C293B10C(64, 0xE100000000000000, a1, a2);
  if (v11)
  {
LABEL_9:
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v40 = 0;
    uint64_t v43 = 0;
    unint64_t v42 = 0xE000000000000000;
    unint64_t v45 = 0xE000000000000000;
    goto LABEL_10;
  }
  unint64_t v12 = v10;
  uint64_t v53 = v7;
  unint64_t v13 = sub_1C2A9DDA8();
  swift_bridgeObjectRetain();
  unint64_t v14 = sub_1C295D6A8(v13, a1, a2);
  unint64_t v16 = v15;
  swift_bridgeObjectRelease();
  unint64_t v17 = sub_1C295D52C(64, 0xE100000000000000, v14, v16);
  LOBYTE(v16) = v18;
  swift_bridgeObjectRelease();
  if (v16)
  {
    sub_1C2A9CFB8();
    swift_bridgeObjectRetain_n();
    v46 = sub_1C2A9CFC8();
    os_log_type_t v47 = sub_1C2A9E088();
    if (os_log_type_enabled(v46, v47))
    {
      v48 = (uint8_t *)swift_slowAlloc();
      uint64_t v49 = swift_slowAlloc();
      uint64_t v55 = v49;
      *(_DWORD *)v48 = 136446210;
      v52 = v48 + 4;
      swift_bridgeObjectRetain();
      uint64_t v54 = sub_1C2957168(a1, a2, &v55);
      sub_1C2A9E358();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1C292A000, v46, v47, "Localization: potentially mismatched @ phrase: '%{public}s'", v48, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C87656F0](v49, -1, -1);
      MEMORY[0x1C87656F0](v48, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v53 + 8))(v9, v6);
    goto LABEL_9;
  }
  uint64_t result = sub_1C2A9DDA8();
  if (v17 >> 14 >= v12 >> 14)
  {
    unint64_t v20 = result;
    swift_bridgeObjectRetain();
    sub_1C2A9DD98();
    uint64_t v21 = sub_1C2A9DE08();
    v52 = v22;
    uint64_t v53 = v21;
    uint64_t v51 = v23;
    uint64_t v25 = v24;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    unint64_t v26 = sub_1C295D6A8(v20, a1, a2);
    uint64_t v50 = v27;
    uint64_t v29 = v28;
    uint64_t v31 = v30;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    uint64_t v32 = sub_1C2A9DE08();
    uint64_t v34 = v33;
    uint64_t v36 = v35;
    uint64_t v38 = v37;
    swift_bridgeObjectRelease();
    a1 = MEMORY[0x1C8763C00](v32, v34, v36, v38);
    a2 = v39;
    swift_bridgeObjectRelease();
    uint64_t v40 = MEMORY[0x1C8763C00](v53, v52, v51, v25);
    unint64_t v42 = v41;
    swift_bridgeObjectRelease();
    uint64_t v43 = MEMORY[0x1C8763C00](v26, v50, v29, v31);
    unint64_t v45 = v44;
    uint64_t result = swift_bridgeObjectRelease();
LABEL_10:
    *a3 = a1;
    a3[1] = a2;
    a3[2] = v40;
    a3[3] = v42;
    a3[4] = v43;
    a3[5] = v45;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_1C292EB80()
{
  return sub_1C2A9DE58();
}

unint64_t sub_1C292EBE0()
{
  unint64_t result = qword_1EBB925E8;
  if (!qword_1EBB925E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB925E8);
  }
  return result;
}

HealthVisualization::DiagramConfiguration::AxisType_optional __swiftcall DiagramConfiguration.AxisType.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v2 = v1;
  unint64_t v3 = sub_1C2A9E6E8();
  result.value = swift_bridgeObjectRelease();
  char v5 = 16;
  if (v3 < 0x10) {
    char v5 = v3;
  }
  *uint64_t v2 = v5;
  return result;
}

uint64_t DiagramData.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v18 = a2;
  sub_1C2937FF0(0, &qword_1EBB92788, (uint64_t (*)(void))sub_1C2945288, (uint64_t)&type metadata for DiagramData.CodingKeys, MEMORY[0x1E4FBBDC0]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v16 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1C2945288();
  sub_1C2A9EA08();
  if (!v2)
  {
    uint64_t v9 = v6;
    uint64_t v10 = v18;
    type metadata accessor for CGRect(0);
    char v25 = 0;
    sub_1C293A290(&qword_1EBB92768, type metadata accessor for CGRect);
    sub_1C2A9E758();
    uint64_t v11 = v20;
    uint64_t v12 = v21;
    uint64_t v16 = v22;
    uint64_t v17 = v19;
    int v24 = v23;
    sub_1C2938118(0, &qword_1EBB92748, (uint64_t (*)(uint64_t))sub_1C2943230, MEMORY[0x1E4FBB320]);
    char v25 = 1;
    sub_1C2942F28();
    sub_1C2A9E7A8();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v8, v5);
    uint64_t v14 = v19;
    *(void *)uint64_t v10 = v17;
    *(void *)(v10 + 8) = v11;
    uint64_t v15 = v16;
    *(void *)(v10 + 16) = v12;
    *(void *)(v10 + 24) = v15;
    *(unsigned char *)(v10 + 32) = v24;
    *(void *)(v10 + 40) = v14;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1C292EF34()
{
  return sub_1C2A9DE58();
}

unint64_t sub_1C292EF94()
{
  unint64_t result = qword_1EBB92628;
  if (!qword_1EBB92628)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB92628);
  }
  return result;
}

uint64_t sub_1C292EFE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DiagramDateAxisMetricsCalculator.DateTickIntervalStrategy();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C292F04C(uint64_t a1, uint64_t a2)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = MEMORY[0x1E4FBC860];
  if (v2)
  {
    long long v16 = *(_OWORD *)(a2 + 16);
    long long v17 = *(_OWORD *)a2;
    char v6 = *(unsigned char *)(a2 + 32);
    uint64_t v7 = *(void *)(a2 + 40);
    uint64_t v18 = MEMORY[0x1E4FBC860];
    sub_1C29419CC(0, v2, 0);
    uint64_t v3 = v18;
    uint64_t v8 = (char *)(a1 + 40);
    char v9 = v6 & 1;
    do
    {
      char v11 = *v8;
      v8 += 32;
      char v10 = v11;
      sub_1C292F15C(a2);
      unint64_t v13 = *(void *)(v18 + 16);
      unint64_t v12 = *(void *)(v18 + 24);
      if (v13 >= v12 >> 1) {
        sub_1C29419CC(v12 > 1, v13 + 1, 1);
      }
      *(void *)(v18 + 16) = v13 + 1;
      uint64_t v14 = v18 + 56 * v13;
      *(_OWORD *)(v14 + 32) = v17;
      *(_OWORD *)(v14 + 48) = v16;
      *(unsigned char *)(v14 + 64) = v9;
      *(void *)(v14 + 72) = v7;
      *(unsigned char *)(v14 + 80) = v10;
      --v2;
    }
    while (v2);
  }
  return v3;
}

uint64_t sub_1C292F15C(uint64_t a1)
{
  return a1;
}

unint64_t sub_1C292F188(unsigned __int8 a1)
{
  sub_1C2A9E9B8();
  sub_1C2A9DD78();
  swift_bridgeObjectRelease();
  uint64_t v2 = sub_1C2A9E9E8();
  return sub_1C2941698(a1, v2);
}

uint64_t sub_1C292F2C8@<X0>(char *a1@<X8>)
{
  unint64_t v2 = sub_1C2A9E6E8();
  uint64_t result = swift_bridgeObjectRelease();
  char v4 = 3;
  if (v2 < 3) {
    char v4 = v2;
  }
  *a1 = v4;
  return result;
}

uint64_t type metadata accessor for Localization()
{
  return self;
}

unint64_t sub_1C292F344(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    unint64_t v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  sub_1C2941944(0, &qword_1EBB8FFD0, (void (*)(void))sub_1C29610EC);
  unint64_t v2 = (void *)sub_1C2A9E688();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  char v4 = (_OWORD *)(a1 + 56);
  while (1)
  {
    unsigned __int8 v5 = *((unsigned char *)v4 - 24);
    uint64_t v6 = *((void *)v4 - 2);
    char v7 = *((unsigned char *)v4 - 8);
    long long v14 = *v4;
    unint64_t result = sub_1C292F188(v5);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(unsigned char *)(v2[6] + result) = v5;
    uint64_t v10 = v2[7] + 32 * result;
    *(void *)uint64_t v10 = v6;
    *(unsigned char *)(v10 + 8) = v7;
    *(_OWORD *)(v10 + 16) = v14;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    char v4 = (_OWORD *)((char *)v4 + 40);
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1C292F494()
{
  return sub_1C2A9DE58();
}

unint64_t sub_1C292F4F4()
{
  unint64_t result = qword_1EBB92608;
  if (!qword_1EBB92608)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB92608);
  }
  return result;
}

uint64_t DiagramLine.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_1C292F598(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1C293BDB0(0, &qword_1EBB91BE0, MEMORY[0x1E4FBB550], MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  long long v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_1C2A9E6A8();
  __break(1u);
  return result;
}

uint64_t DiagramConfiguration.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1C29367DC(0, &qword_1EBB92798, (uint64_t (*)(void))sub_1C29448C8, (uint64_t)&type metadata for DiagramConfiguration.CodingKeys, MEMORY[0x1E4FBBDC0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v28 - v8;
  uint64_t v10 = a1[3];
  uint64_t v29 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v10);
  sub_1C29448C8();
  sub_1C2A9EA08();
  if (v2)
  {
    uint64_t v26 = (uint64_t)v29;
    return __swift_destroy_boxed_opaque_existential_1(v26);
  }
  uint64_t v11 = sub_1C2A9E7B8();
  uint64_t v12 = *(void *)(v11 + 16);
  if (v12)
  {
    uint64_t v13 = *(unsigned __int8 *)(v12 + v11 + 31);
    swift_bridgeObjectRelease();
    switch(v13)
    {
      case 1:
        char v40 = 1;
        sub_1C2A8BBB8();
        sub_1C2A9E7A8();
        (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
        uint64_t v19 = 0;
        uint64_t v14 = 0;
        uint64_t v15 = 0;
        uint64_t v16 = 0;
        unint64_t v22 = *((void *)&v30 + 1);
        unint64_t v18 = v30;
        unsigned long long v21 = 0uLL;
        unint64_t v20 = v31;
        char v17 = 32;
        long long v23 = 0uLL;
        break;
      case 2:
        char v40 = 2;
        sub_1C2943934();
        sub_1C2A9E7A8();
        (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
        uint64_t v14 = 0;
        uint64_t v15 = 0;
        uint64_t v16 = 0;
        unint64_t v22 = *((void *)&v30 + 1);
        unint64_t v18 = v30;
        unint64_t v20 = v31 | ((unint64_t)WORD2(v31) << 32);
        uint64_t v19 = v32;
        long long v23 = 0uLL;
        unsigned long long v21 = v33 | (unsigned __int128)((unint64_t)BYTE1(v33) << 8);
        char v17 = 64;
        break;
      case 3:
        char v40 = 3;
        sub_1C2A8BB64();
        sub_1C2A9E7A8();
        (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
        uint64_t v19 = 0;
        uint64_t v14 = 0;
        uint64_t v15 = 0;
        uint64_t v16 = 0;
        unint64_t v18 = v30 | ((unint64_t)(WORD2(v30) | (BYTE6(v30) << 16)) << 32) | ((unint64_t)*(unsigned int *)((char *)&v30 + 7) << 56);
        unint64_t v22 = ((unint64_t)BYTE14(v30) << 48) | ((*(unsigned int *)((char *)&v30 + 7) | ((unint64_t)(*(unsigned __int16 *)((char *)&v30 + 11) | (BYTE13(v30) << 16)) << 32)) >> 8) | ((unint64_t)HIBYTE(v30) << 56);
        uint64_t v25 = 0x10000;
        if (!BYTE2(v31)) {
          uint64_t v25 = 0;
        }
        unint64_t v20 = (unsigned __int16)v31 | (unint64_t)v25;
        unsigned long long v21 = 0uLL;
        char v17 = 96;
        long long v23 = 0uLL;
        break;
      case 4:
        char v40 = 4;
        sub_1C2A8BB10();
        sub_1C2A9E7A8();
        (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
        unint64_t v22 = *((void *)&v30 + 1);
        unint64_t v18 = v30;
        unint64_t v20 = (unsigned __int16)v31 | ((unint64_t)BYTE2(v31) << 16);
        uint64_t v19 = v32;
        unsigned long long v21 = v33;
        long long v23 = *(_OWORD *)v34;
        uint64_t v16 = v38;
        uint64_t v14 = *(long long *)&v34[9] >> 56;
        *((void *)&v24 + 1) = v35 | ((unint64_t)v36 << 32);
        *(void *)&long long v24 = *(void *)&v34[17];
        uint64_t v15 = (v24 >> 56) | ((unint64_t)v37 << 56);
        char v17 = v39 | 0x80;
        break;
      case 5:
        char v40 = 5;
        sub_1C2A8BABC();
        sub_1C2A9E7A8();
        (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
        unint64_t v22 = 0;
        unint64_t v20 = 0;
        uint64_t v19 = 0;
        uint64_t v14 = 0;
        uint64_t v15 = 0;
        uint64_t v16 = 0;
        unint64_t v18 = v30;
        unsigned long long v21 = 0uLL;
        long long v23 = 0uLL;
        char v17 = -96;
        break;
      default:
        char v40 = 0;
        sub_1C2A8BC0C();
        sub_1C2A9E7A8();
        (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
        uint64_t v14 = 0;
        uint64_t v15 = 0;
        uint64_t v16 = 0;
        char v17 = 0;
        unint64_t v18 = v30;
        unint64_t v20 = v31;
        uint64_t v19 = v32;
        unsigned long long v21 = v33 | ((unint64_t)WORD2(v33) << 32) | (unsigned __int128)((unint64_t)BYTE6(v33) << 48);
        unint64_t v22 = WORD4(v30);
        long long v23 = 0uLL;
        break;
    }
    uint64_t v26 = (uint64_t)v29;
    *(void *)a2 = v18;
    *(void *)(a2 + 8) = v22;
    *(void *)(a2 + 16) = v20;
    *(void *)(a2 + 24) = v19;
    *(_OWORD *)(a2 + 32) = v21;
    *(_OWORD *)(a2 + 48) = v23;
    *(void *)(a2 + 64) = v14;
    *(void *)(a2 + 72) = v15;
    *(void *)(a2 + 80) = v16;
    *(unsigned char *)(a2 + 88) = v17;
    return __swift_destroy_boxed_opaque_existential_1(v26);
  }
  uint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

id sub_1C292FC78()
{
  type metadata accessor for Localization();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id result = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  qword_1EBB919B8 = (uint64_t)result;
  return result;
}

uint64_t sub_1C292FCCC(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1C293BDB0(0, (unint64_t *)&qword_1EBB90DD0, (uint64_t)&type metadata for DiagramAxisLabel, MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  size_t v14 = 40 * v8;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v12, v13, v14);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_1C2A9E6A8();
  __break(1u);
  return result;
}

Swift::Void __swiftcall UnitChangeObserving.registerForUnitChanges()()
{
  id v1 = objc_msgSend(self, sel_defaultCenter);
  objc_msgSend(v1, sel_addObserver_selector_name_object_, v0, sel_unitDidChange, *MEMORY[0x1E4F67970], 0);
}

Swift::Void __swiftcall SignificantTimeChangeObserving.registerForSignificantTimeChanges()()
{
  id v1 = objc_msgSend(self, sel_defaultCenter);
  objc_msgSend(v1, sel_addObserver_selector_name_object_, v0, sel_significantTimeChangeDidOccur, *MEMORY[0x1E4FB2708], 0);
}

uint64_t sub_1C292FF5C(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1C293EC40(0, &qword_1EBB90DC8, (uint64_t (*)(uint64_t))sub_1C293FD2C, MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 56);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 4;
  uint64_t v13 = a4 + 4;
  size_t v14 = 7 * v8;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v10 + 4, a4 + 4, v14 * 8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    sub_1C293FD2C();
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_1C2A9E6A8();
  __break(1u);
  return result;
}

uint64_t sub_1C2930124@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)a1;
  unint64_t v6 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  char v9 = *(unsigned char *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)a2;
  unint64_t v12 = *(void *)(a2 + 8);
  uint64_t v14 = *(void *)(a2 + 16);
  uint64_t v13 = *(void *)(a2 + 24);
  uint64_t v16 = *(void *)(a2 + 32);
  uint64_t v15 = *(void *)(a2 + 40);
  uint64_t v18 = *(void *)(a2 + 48);
  uint64_t v17 = *(void *)(a2 + 56);
  uint64_t v19 = *(void *)(a2 + 64);
  unint64_t v20 = *(void *)(a2 + 72);
  unsigned int v21 = *(unsigned __int8 *)(a2 + 88);
  uint64_t v22 = *(void *)(a2 + 80);
  switch(v21 >> 5)
  {
    case 1u:
      uint64_t v53 = *(void *)(a2 + 56);
      uint64_t v55 = *(void *)(a2 + 40);
      uint64_t v47 = v7;
      uint64_t v49 = *(void *)(a2 + 24);
      unint64_t v44 = v6;
      uint64_t v45 = v8;
      uint64_t v43 = v5;
      uint64_t v51 = *(void *)(a2 + 48);
      char v46 = v9;
      uint64_t v27 = v10;
      uint64_t v28 = type metadata accessor for DiagramBanner();
      uint64_t v29 = swift_allocObject();
      *(void *)(v29 + 16) = v11;
      *(void *)(v29 + 24) = v12;
      *(unsigned char *)(v29 + 32) = v14;
      *(void *)(v29 + 40) = v43;
      *(void *)(v29 + 48) = v44;
      *(void *)(v29 + 56) = v45;
      *(void *)(v29 + 64) = v47;
      *(unsigned char *)(v29 + 72) = v46;
      *(void *)(v29 + 80) = v27;
      a3[3] = v28;
      a3[4] = (uint64_t)&protocol witness table for DiagramBanner;
      *a3 = v29;
      swift_bridgeObjectRetain();
      return sub_1C293834C(v11, v12, v14, v49, v16, v55, v51, v53, v19, v20, v22, v21);
    case 2u:
      *(void *)&long long v58 = *(void *)a2;
      *((void *)&v58 + 1) = v12;
      LODWORD(v59) = v14;
      WORD2(v59) = WORD2(v14);
      uint64_t v60 = v13;
      LOWORD(v61) = v16 & 0xFF01;
      uint64_t v68 = v5;
      unint64_t v69 = v6;
      uint64_t v70 = v8;
      uint64_t v71 = v7;
      LOBYTE(v72) = v9;
      uint64_t v73 = v10;
      uint64_t v50 = *(void **)(v4 + 16);
      uint64_t v52 = v18;
      uint64_t v54 = v17;
      uint64_t v56 = v15;
      uint64_t v30 = v13;
      uint64_t v48 = type metadata accessor for DiagramLine();
      long long v64 = 0u;
      long long v65 = 0u;
      uint64_t v66 = 0;
      swift_allocObject();
      swift_bridgeObjectRetain();
      sub_1C293834C(v11, v12, v14, v30, v16, v56, v52, v54, v19, v20, v22, v21);
      uint64_t result = DiagramLine.init(lineDiagramConfig:diagramData:hbxViewControllerFactory:axisMetricsFactory:)((uint64_t)&v58, &v68, v50, (uint64_t)&v64);
      uint64_t v26 = &protocol witness table for DiagramLine;
      unint64_t v31 = a3;
      a3[3] = v48;
      goto LABEL_8;
    case 3u:
      LODWORD(v58) = *(void *)a2;
      BYTE6(v58) = BYTE6(v11);
      WORD2(v58) = WORD2(v11);
      BYTE13(v58) = BYTE5(v12);
      *((void *)&v32 + 1) = v12;
      *(void *)&long long v32 = v11;
      *(_WORD *)((char *)&v58 + 11) = v12 >> 24;
      *(_DWORD *)((char *)&v58 + 7) = v32 >> 56;
      BYTE14(v58) = BYTE6(v12);
      HIBYTE(v58) = HIBYTE(v12);
      LOWORD(v59) = v14;
      BYTE2(v59) = BYTE2(v14) & 1;
      uint64_t v68 = v5;
      unint64_t v69 = v6;
      uint64_t v70 = v8;
      uint64_t v71 = v7;
      LOBYTE(v72) = v9;
      uint64_t v73 = v10;
      unsigned long long v33 = *(void **)(v4 + 16);
      uint64_t v24 = type metadata accessor for DiagramAxisOnly();
      long long v64 = 0u;
      long long v65 = 0u;
      uint64_t v66 = 0;
      swift_allocObject();
      swift_bridgeObjectRetain();
      uint64_t result = DiagramAxisOnly.init(config:data:hbxViewControllerFactory:customMetricsFactory:)((unsigned int *)&v58, (uint64_t)&v68, v33, (uint64_t)&v64);
      uint64_t v26 = &protocol witness table for DiagramAxisOnly;
      goto LABEL_7;
    case 4u:
      uint64_t v68 = *(void *)a2;
      unint64_t v69 = v12;
      LOWORD(v70) = v14;
      BYTE2(v70) = BYTE2(v14);
      *((void *)&v34 + 1) = v20;
      *(void *)&long long v34 = v19;
      uint64_t v71 = v13;
      uint64_t v72 = v16;
      uint64_t v73 = v15;
      uint64_t v74 = v18;
      uint64_t v75 = v17;
      char v76 = v19;
      uint64_t v77 = v34 >> 8;
      __int16 v79 = HIDWORD(v20) >> 8;
      int v78 = v20 >> 8;
      char v80 = HIBYTE(v20);
      uint64_t v81 = v22;
      char v82 = v21 & 1;
      *(void *)&long long v64 = v5;
      *((void *)&v64 + 1) = v6;
      *(void *)&long long v65 = v8;
      *((void *)&v65 + 1) = v7;
      LOBYTE(v66) = v9;
      uint64_t v67 = v10;
      unsigned int v35 = *(void **)(v4 + 16);
      uint64_t v24 = type metadata accessor for DiagramDistribution();
      swift_allocObject();
      swift_bridgeObjectRetain();
      uint64_t result = DiagramDistribution.init(distributionConfiguration:distributionData:hbxViewControllerFactory:)((char *)&v68, (uint64_t)&v64, v35);
      uint64_t v26 = &protocol witness table for DiagramDistribution;
      goto LABEL_7;
    case 5u:
      uint64_t v36 = v7;
      uint64_t v37 = v8;
      unint64_t v38 = v6;
      uint64_t v39 = v5;
      uint64_t v40 = v10;
      uint64_t v41 = type metadata accessor for DiagramHeartRateRecovery();
      uint64_t v42 = swift_allocObject();
      *(void *)(v42 + 72) = 0;
      *(void *)(v42 + 80) = 0;
      *(_WORD *)(v42 + 16) = v11;
      *(unsigned char *)(v42 + 18) = BYTE2(v11);
      *(unsigned char *)(v42 + 19) = BYTE3(v11);
      *(void *)(v42 + 24) = v39;
      *(void *)(v42 + 32) = v38;
      *(void *)(v42 + 40) = v37;
      *(void *)(v42 + 48) = v36;
      *(unsigned char *)(v42 + 56) = v9;
      *(void *)(v42 + 64) = v40;
      a3[3] = v41;
      a3[4] = (uint64_t)&protocol witness table for DiagramHeartRateRecovery;
      *a3 = v42;
      return swift_bridgeObjectRetain();
    default:
      *(void *)&long long v58 = *(void *)a2;
      WORD4(v58) = v12;
      uint64_t v59 = v14;
      uint64_t v60 = v13;
      int v61 = v16;
      __int16 v62 = WORD2(v16);
      char v63 = BYTE6(v16);
      uint64_t v68 = v5;
      unint64_t v69 = v6;
      uint64_t v70 = v8;
      uint64_t v71 = v7;
      LOBYTE(v72) = v9;
      uint64_t v73 = v10;
      long long v23 = *(void **)(v4 + 16);
      uint64_t v24 = type metadata accessor for DiagramBar();
      long long v64 = 0u;
      long long v65 = 0u;
      uint64_t v66 = 0;
      swift_allocObject();
      swift_bridgeObjectRetain();
      uint64_t result = DiagramBar.init(barDiagramConfig:barData:hbxViewControllerFactory:customMetricsFactory:)((uint64_t)&v58, (uint64_t)&v68, v23, (uint64_t)&v64);
      uint64_t v26 = &protocol witness table for DiagramBar;
LABEL_7:
      unint64_t v31 = a3;
      a3[3] = v24;
LABEL_8:
      v31[4] = (uint64_t)v26;
      *unint64_t v31 = result;
      return result;
  }
}

double sub_1C2930664(uint64_t a1)
{
  int64_t v1 = *(void *)(*(void *)a1 + 16);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (v1)
  {
    uint64_t v14 = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRetain();
    sub_1C2932680(0, v1, 0);
    uint64_t v3 = 32;
    uint64_t v2 = v14;
    do
    {
      double v4 = DiagramConfiguration.LineWidth.toPoints()();
      unint64_t v6 = *(void *)(v14 + 16);
      unint64_t v5 = *(void *)(v14 + 24);
      if (v6 >= v5 >> 1) {
        sub_1C2932680(v5 > 1, v6 + 1, 1);
      }
      *(void *)(v14 + 16) = v6 + 1;
      *(double *)(v14 + 8 * v6 + 32) = v4 * 0.5;
      v3 += 32;
      --v1;
    }
    while (v1);
    swift_bridgeObjectRelease();
  }
  uint64_t v7 = *(void *)(v2 + 16);
  if (v7)
  {
    double v8 = *(double *)(v2 + 32);
    uint64_t v9 = v7 - 1;
    if (v9)
    {
      uint64_t v10 = (double *)(v2 + 40);
      do
      {
        double v11 = *v10++;
        double v12 = v11;
        if (v8 < v11) {
          double v8 = v12;
        }
        --v9;
      }
      while (v9);
    }
  }
  else
  {
    double v8 = 0.0;
  }
  swift_bridgeObjectRelease();
  return v8;
}

double sub_1C2930798(uint64_t a1)
{
  int64_t v1 = *(void *)(*(void *)a1 + 16);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (v1)
  {
    uint64_t v14 = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRetain();
    sub_1C2932680(0, v1, 0);
    uint64_t v3 = 35;
    uint64_t v2 = v14;
    do
    {
      double v4 = DiagramConfiguration.LineRadius.toFloat()();
      unint64_t v6 = *(void *)(v14 + 16);
      unint64_t v5 = *(void *)(v14 + 24);
      if (v6 >= v5 >> 1) {
        sub_1C2932680(v5 > 1, v6 + 1, 1);
      }
      *(void *)(v14 + 16) = v6 + 1;
      *(double *)(v14 + 8 * v6 + 32) = v4;
      v3 += 32;
      --v1;
    }
    while (v1);
    swift_bridgeObjectRelease();
  }
  uint64_t v7 = *(void *)(v2 + 16);
  if (v7)
  {
    double v8 = *(double *)(v2 + 32);
    uint64_t v9 = v7 - 1;
    if (v9)
    {
      uint64_t v10 = (double *)(v2 + 40);
      do
      {
        double v11 = *v10++;
        double v12 = v11;
        if (v8 < v11) {
          double v8 = v12;
        }
        --v9;
      }
      while (v9);
    }
  }
  else
  {
    double v8 = 0.0;
  }
  swift_bridgeObjectRelease();
  return v8;
}

double sub_1C29308C4()
{
  uint64_t v1 = *(void *)(v0 + 104);
  double v2 = 0.0;
  if ((*(unsigned char *)(v1 + 144) & 1) == 0) {
    double v2 = *(double *)(v1 + 112);
  }
  uint64_t v3 = *(void *)(v1 + 40);
  if (v3
    && (unint64_t)*(unsigned __int8 *)(v1 + 68) << 32 != 0x300000000
    && (*(_DWORD *)(v1 + 72) & 0xFF000000) != 0x2000000)
  {
    swift_bridgeObjectRetain();
    DiagramConfiguration.TextAttributes.toTextAttributes()();
    uint64_t v4 = sub_1C295AEB0(v3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1C295AE6C(v4);
    swift_bridgeObjectRelease();
  }
  if ((*(void *)(v1 + 64) & 0xFE00000000 | 0x100000000) != 0x300000000)
  {
    DiagramConfiguration.TextAttributes.toTextAttributes()();
    unint64_t v5 = (void *)sub_1C2A9DCF8();
    type metadata accessor for Key(0);
    sub_1C2942D7C();
    unint64_t v6 = (void *)sub_1C2A9DC58();
    swift_bridgeObjectRelease();
    objc_msgSend(v5, sel_sizeWithAttributes_, v6);
  }
  return v2;
}

uint64_t DiagramConfiguration.Line.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1C29367DC(0, &qword_1EBB92518, (uint64_t (*)(void))sub_1C2943A38, (uint64_t)&type metadata for DiagramConfiguration.Line.CodingKeys, MEMORY[0x1E4FBBDC0]);
  uint64_t v21 = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  double v8 = (char *)&v18 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1C2943A38();
  sub_1C2A9EA08();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v9 = v6;
  sub_1C2943078();
  char v26 = 0;
  sub_1C294300C(&qword_1EBB924F8, (void (*)(void))sub_1C294436C);
  uint64_t v10 = v21;
  sub_1C2A9E7A8();
  uint64_t v11 = v22;
  char v26 = 1;
  sub_1C2943AEC();
  swift_bridgeObjectRetain();
  sub_1C2A9E758();
  uint64_t v19 = v24;
  uint64_t v20 = v22;
  uint64_t v12 = v23;
  char v26 = 2;
  sub_1C2943D2C();
  sub_1C2A9E7A8();
  uint64_t v18 = v12;
  uint64_t v13 = v22;
  int v25 = v23;
  char v26 = 3;
  sub_1C2943868();
  sub_1C2A9E7A8();
  uint64_t v15 = v18 | (v19 << 32);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v8, v10);
  char v16 = v22;
  uint64_t v17 = v20;
  *(void *)a2 = v11;
  *(void *)(a2 + 8) = v17;
  *(_WORD *)(a2 + 20) = WORD2(v15);
  *(_DWORD *)(a2 + 16) = v15;
  *(void *)(a2 + 24) = v13;
  *(unsigned char *)(a2 + 32) = v25;
  *(unsigned char *)(a2 + 33) = v16;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C2930E18()
{
  return sub_1C2A9DE58();
}

unint64_t sub_1C2930E78()
{
  unint64_t result = qword_1EBB92490;
  if (!qword_1EBB92490)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB92490);
  }
  return result;
}

uint64_t DiagramLine.init(lineDiagramConfig:diagramData:hbxViewControllerFactory:axisMetricsFactory:)(uint64_t a1, uint64_t *a2, void *a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v7 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  __int16 v8 = *(_WORD *)(a1 + 20);
  int v9 = *(_DWORD *)(a1 + 16);
  uint64_t v10 = *(void *)(a1 + 24);
  char v11 = *(unsigned char *)(a1 + 32);
  char v12 = *(unsigned char *)(a1 + 33);
  uint64_t v13 = *a2;
  uint64_t v14 = a2[1];
  uint64_t v16 = a2[2];
  uint64_t v15 = a2[3];
  char v17 = *((unsigned char *)a2 + 32);
  uint64_t v18 = a2[5];
  *(void *)(v4 + 16) = *(void *)a1;
  *(void *)(v4 + 24) = v6;
  __int16 v41 = v8;
  uint64_t v42 = v6;
  uint64_t v39 = v10;
  int v40 = v9;
  *(_DWORD *)(v4 + 32) = v9;
  uint64_t v45 = (int *)(v4 + 32);
  *(_WORD *)(v4 + 36) = v8;
  *(void *)(v4 + 40) = v10;
  char v38 = v11;
  *(unsigned char *)(v4 + 48) = v11;
  *(unsigned char *)(v4 + 49) = v12;
  *(void *)(v4 + 56) = v13;
  *(void *)(v4 + 64) = v14;
  *(void *)(v4 + 72) = v16;
  *(void *)(v4 + 80) = v15;
  *(unsigned char *)(v4 + 88) = v17;
  *(void *)(v4 + 96) = v18;
  *(void *)&long long v61 = v7;
  *((void *)&v61 + 1) = v6;
  WORD2(v62) = v8;
  LODWORD(v62) = v9;
  *((void *)&v62 + 1) = v10;
  char v63 = v11;
  char v64 = v12;
  uint64_t v48 = 0x404030100080700;
  LOWORD(v49) = 258;
  uint64_t v50 = 0;
  BYTE2(v51) = -2;
  LOWORD(v51) = -7968;
  swift_bridgeObjectRetain();
  uint64_t v19 = swift_bridgeObjectRetain();
  *(void *)(v4 + 160) = sub_1C2931978(v19, (uint64_t *)&v61, (uint64_t)&v48);
  *(void *)&long long v61 = v13;
  *((void *)&v61 + 1) = v14;
  *(void *)&long long v62 = v16;
  *((void *)&v62 + 1) = v15;
  char v63 = v17;
  uint64_t v65 = v18;
  __C::CGRect v66 = DiagramData.diagramBounds(forceNonZeroSize:)(1);
  double y = v66.origin.y;
  double x = v66.origin.x;
  double width = v66.size.width;
  double height = v66.size.height;
  *(void *)&long long v61 = v13;
  *((void *)&v61 + 1) = v14;
  *(void *)&long long v62 = v16;
  *((void *)&v62 + 1) = v15;
  char v63 = v17;
  uint64_t v65 = v18;
  uint64_t v48 = v7;
  uint64_t v49 = v42;
  WORD2(v50) = v41;
  LODWORD(v50) = v40;
  uint64_t v51 = v39;
  LOBYTE(v52) = v38;
  BYTE1(v52) = v12;
  uint64_t v22 = sub_1C29342CC((uint64_t)&v61, &v48);
  swift_bridgeObjectRelease();
  uint64_t v54 = v7;
  uint64_t v55 = v42;
  __int16 v57 = v41;
  int v56 = v40;
  uint64_t v58 = v39;
  char v59 = v38;
  char v60 = v12;
  char v23 = *(unsigned char *)(v5 + 88);
  uint64_t v24 = *(void *)(v5 + 96);
  long long v25 = *(_OWORD *)(v5 + 72);
  long long v61 = *(_OWORD *)(v5 + 56);
  long long v62 = v25;
  char v63 = v23;
  uint64_t v65 = v24;
  uint64_t v26 = *(void *)(v5 + 160);
  swift_bridgeObjectRetain();
  sub_1C2933BE0(&v54, &v61, v26, (double *)&v48);
  uint64_t v27 = v48;
  uint64_t v28 = v49;
  uint64_t v29 = v50;
  uint64_t v30 = v51;
  uint64_t v31 = v52;
  uint64_t v32 = v53;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)(v5 + 112) = v27;
  *(void *)(v5 + 120) = v28;
  *(void *)(v5 + 128) = v29;
  *(void *)(v5 + 136) = v30;
  *(void *)(v5 + 144) = v31;
  *(void *)(v5 + 152) = v32;
  int v33 = *v45;
  __int16 v34 = *((_WORD *)v45 + 2);
  uint64_t v54 = *(void *)(v5 + 24);
  WORD2(v55) = v34;
  LODWORD(v55) = v33;
  uint64_t v48 = v27;
  uint64_t v49 = v28;
  uint64_t v50 = v29;
  uint64_t v51 = v30;
  LOBYTE(v52) = 0;
  sub_1C2932CE8(a4, (uint64_t)&v61);
  type metadata accessor for DiagramAxis();
  swift_allocObject();
  sub_1C2932820(&v54, (uint64_t)&v48, v22, 0, v31, v32, 0, a3, x, y, width, height, (uint64_t)&v61);
  uint64_t v36 = v35;
  sub_1C29433A8(a4);
  *(void *)(v5 + 104) = v36;
  return v5;
}

uint64_t sub_1C2931190()
{
  return sub_1C2A9DE58();
}

unint64_t sub_1C29311F0()
{
  unint64_t result = qword_1EBB924E0;
  if (!qword_1EBB924E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB924E0);
  }
  return result;
}

uint64_t sub_1C2931244()
{
  return sub_1C2A9DE58();
}

unint64_t sub_1C29312A4()
{
  unint64_t result = qword_1EBB92560;
  if (!qword_1EBB92560)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB92560);
  }
  return result;
}

uint64_t sub_1C29312F8@<X0>(char *a1@<X8>)
{
  unint64_t v2 = sub_1C2A9E6E8();
  uint64_t result = swift_bridgeObjectRelease();
  char v4 = 4;
  if (v2 < 4) {
    char v4 = v2;
  }
  *a1 = v4;
  return result;
}

uint64_t sub_1C2931350(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      unint64_t v3 = 0xD000000000000012;
    }
    else {
      unint64_t v3 = 0x636E657265666552;
    }
    if (v2 == 1) {
      unint64_t v4 = 0x80000001C2AB5170;
    }
    else {
      unint64_t v4 = 0xED0000656E694C65;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        unint64_t v6 = 0xD000000000000012;
      }
      else {
        unint64_t v6 = 0x636E657265666552;
      }
      if (v5 == 1) {
        unint64_t v7 = 0x80000001C2AB5170;
      }
      else {
        unint64_t v7 = 0xED0000656E694C65;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v4 = 0xE700000000000000;
    unint64_t v3 = 0x746E65746E6F43;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  unint64_t v7 = 0xE700000000000000;
  if (v3 != 0x746E65746E6F43)
  {
LABEL_21:
    char v8 = sub_1C2A9E8D8();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

HealthVisualization::DiagramConfiguration::TextAttributes_optional __swiftcall DiagramConfiguration.TextAttributes.init(rawValue:)(Swift::String rawValue)
{
  int v2 = v1;
  uint64_t v3 = sub_1C2A9E908();
  result.value = swift_bridgeObjectRelease();
  char v5 = 0;
  char v6 = 7;
  switch(v3)
  {
    case 0:
      goto LABEL_9;
    case 1:
      char v5 = 1;
      goto LABEL_9;
    case 2:
      char v5 = 2;
      goto LABEL_9;
    case 3:
      char v5 = 3;
      goto LABEL_9;
    case 4:
      char v5 = 4;
      goto LABEL_9;
    case 5:
      char v5 = 5;
      goto LABEL_9;
    case 6:
      char v5 = 6;
LABEL_9:
      char v6 = v5;
      break;
    case 7:
      break;
    case 8:
      char v6 = 8;
      break;
    case 9:
      char v6 = 9;
      break;
    case 10:
      char v6 = 10;
      break;
    case 11:
      char v6 = 11;
      break;
    case 12:
      char v6 = 12;
      break;
    case 13:
      char v6 = 13;
      break;
    case 14:
      char v6 = 14;
      break;
    case 15:
      char v6 = 15;
      break;
    case 16:
      char v6 = 16;
      break;
    case 17:
      char v6 = 17;
      break;
    case 18:
      char v6 = 18;
      break;
    case 19:
      char v6 = 19;
      break;
    case 20:
      char v6 = 20;
      break;
    case 21:
      char v6 = 21;
      break;
    case 22:
      char v6 = 22;
      break;
    case 23:
      char v6 = 23;
      break;
    case 24:
      char v6 = 24;
      break;
    default:
      char v6 = 25;
      break;
  }
  *int v2 = v6;
  return result;
}

uint64_t DiagramConfiguration.AxisProperties.init(from:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  sub_1C29367DC(0, &qword_1EBB927A0, (uint64_t (*)(void))sub_1C29445E0, (uint64_t)&type metadata for DiagramConfiguration.AxisProperties.CodingKeys, MEMORY[0x1E4FBBDC0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  int v9 = (char *)&v20 - v8;
  uint64_t v10 = a1[3];
  uint64_t v24 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v10);
  sub_1C29445E0();
  sub_1C2A9EA08();
  if (!v2)
  {
    uint64_t v11 = v7;
    char v37 = 0;
    sub_1C2943754();
    uint64_t v12 = v6;
    sub_1C2A9E7A8();
    char v13 = v38;
    char v35 = 1;
    sub_1C2936000();
    sub_1C2A9E7A8();
    int v15 = v36;
    char v33 = 2;
    sub_1C2935F58();
    sub_1C2A9E7A8();
    int v23 = v15;
    int v16 = v34;
    char v31 = 3;
    sub_1C2A9E7A8();
    int v22 = v16;
    int v17 = v32;
    char v29 = 4;
    sub_1C29446A0();
    sub_1C2A9E7A8();
    int v21 = v17;
    int v18 = v30;
    char v27 = 5;
    sub_1C2944470();
    sub_1C2A9E7A8();
    int v20 = v18;
    LOBYTE(v18) = v28;
    char v25 = 6;
    sub_1C2A9E7A8();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v12);
    char v19 = v26;
    *a2 = v13;
    a2[1] = v23;
    a2[2] = v22;
    a2[3] = v21;
    a2[4] = v20;
    a2[5] = v18;
    a2[6] = v19;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
}

uint64_t sub_1C2931978(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return MEMORY[0x1E4FBC860];
  }
  uint64_t v4 = a1;
  char v21 = *((unsigned char *)a2 + 32);
  uint64_t v5 = *a2;
  int v25 = *(unsigned __int16 *)(a3 + 24) | (*(unsigned __int8 *)(a3 + 26) << 16);
  uint64_t v26 = *(void *)(a3 + 16);
  unsigned int v27 = *(unsigned __int8 *)(a3 + 9);
  uint64_t v22 = a2[3];
  unint64_t v23 = *(void *)(*a2 + 16);
  uint64_t result = swift_bridgeObjectRetain();
  unint64_t v7 = 0;
  uint64_t v20 = v5;
  uint64_t v8 = (unsigned __int16 *)(v5 + 56);
  uint64_t v24 = (void *)MEMORY[0x1E4FBC860];
  uint64_t v18 = v3;
  uint64_t v19 = result;
  while (1)
  {
    uint64_t v10 = *(void *)(v4 + 8 * v7 + 32);
    if (v7 >= v23) {
      goto LABEL_9;
    }
    if (v7 >= *(void *)(v20 + 16)) {
      break;
    }
    unsigned int v27 = *((unsigned __int8 *)v8 - 15);
    uint64_t v26 = *((void *)v8 - 1);
    int v25 = *v8 | (*((unsigned __int8 *)v8 + 2) << 16);
LABEL_9:
    swift_bridgeObjectRetain();
    sub_1C2931B88(v27, v26, v25, v22, v21, v10, (uint64_t)v28);
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v11 = v28[0];
    uint64_t v12 = v28[1];
    uint64_t v14 = v28[2];
    uint64_t v13 = v28[3];
    if (v28[0])
    {
      if (v28[0] == 1) {
        goto LABEL_5;
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      int v15 = v24;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        int v15 = sub_1C299D51C(0, v24[2] + 1, 1, v24);
      }
      unint64_t v17 = v15[2];
      unint64_t v16 = v15[3];
      uint64_t v24 = v15;
      if (v17 >= v16 >> 1) {
        uint64_t v24 = sub_1C299D51C((void *)(v16 > 1), v17 + 1, 1, v15);
      }
      v24[2] = v17 + 1;
      int v9 = &v24[3 * v17];
      v9[4] = v11;
      v9[5] = v12;
      v9[6] = v14;
      uint64_t v3 = v18;
      uint64_t v4 = v19;
    }
    uint64_t result = sub_1C2A0F044(v11, v12, v14, v13);
LABEL_5:
    ++v7;
    v8 += 16;
    if (v3 == v7)
    {
      swift_bridgeObjectRelease();
      return (uint64_t)v24;
    }
  }
  __break(1u);
  return result;
}

unint64_t sub_1C2931B88@<X0>(unint64_t result@<X0>, __int16 a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  if ((a3 & 0x800000) == 0) {
    goto LABEL_36;
  }
  if ((a3 & 0xFEE0E0) == 0xFEE0E0) {
    goto LABEL_36;
  }
  if (!*(void *)(a6 + 16)) {
    goto LABEL_36;
  }
  uint64_t result = sub_1C293DDF4(result);
  if ((v12 & 1) == 0) {
    goto LABEL_36;
  }
  uint64_t v13 = *(void *)(*(void *)(a6 + 56) + 40 * result);
  swift_bridgeObjectRetain();
  if (a2 == 25) {
    unint64_t v14 = 0;
  }
  else {
    unint64_t v14 = DiagramConfiguration.TextAttributes.toTextAttributes()();
  }
  if (HIBYTE(a2) != 25)
  {
    unint64_t v15 = DiagramConfiguration.TextAttributes.toTextAttributes()();
    if (v14 | v15) {
      goto LABEL_10;
    }
    goto LABEL_35;
  }
  unint64_t v15 = 0;
  if (!v14)
  {
LABEL_35:
    uint64_t result = swift_bridgeObjectRelease();
LABEL_36:
    *(void *)a7 = 1;
    *(_OWORD *)(a7 + 8) = 0u;
    *(_OWORD *)(a7 + 24) = 0u;
    *(void *)(a7 + 40) = 0;
    return result;
  }
LABEL_10:
  uint64_t v16 = *(void *)(v13 + 16);
  if (!v16)
  {
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v20 = (void *)MEMORY[0x1E4FBC860];
    unint64_t v23 = (void *)MEMORY[0x1E4FBC860];
    __asm { FMOV            V0.2D, #6.0 }
    if (v14) {
      goto LABEL_32;
    }
    goto LABEL_38;
  }
  unint64_t v68 = v15;
  unint64_t v67 = v14;
  double v18 = *(double *)(v13 + 32);
  double v17 = *(double *)(v13 + 40);
  uint64_t v19 = v16 - 1;
  if (v16 == 1)
  {
    uint64_t v20 = (void *)MEMORY[0x1E4FBC860];
    double v21 = *(double *)(v13 + 40);
    double v22 = *(double *)(v13 + 32);
    unint64_t v23 = (void *)MEMORY[0x1E4FBC860];
LABEL_13:
    swift_bridgeObjectRelease();
    uint64_t v24 = (void *)sub_1C2A9C8D8();
    Swift::String_optional v25 = DiagramConfiguration.ValueFormatter.format(value:)((NSNumber)v24);
    object = v25.value._object;

    if (v25.value._object) {
      uint64_t countAndFlagsBits = v25.value._countAndFlagsBits;
    }
    else {
      uint64_t countAndFlagsBits = 1701736270;
    }
    if (!v25.value._object) {
      object = (void *)0xE400000000000000;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v20 = sub_1C299CC08(0, v20[2] + 1, 1, v20);
    }
    unint64_t v14 = v67;
    unint64_t v29 = v20[2];
    unint64_t v28 = v20[3];
    if (v29 >= v28 >> 1) {
      uint64_t v20 = sub_1C299CC08((void *)(v28 > 1), v29 + 1, 1, v20);
    }
    v20[2] = v29 + 1;
    unsigned __int8 v30 = (double *)&v20[4 * v29];
    *((void *)v30 + 4) = countAndFlagsBits;
    *((void *)v30 + 5) = object;
    v30[6] = v22;
    v30[7] = v21;
    char v31 = (void *)sub_1C2A9C8D8();
    Swift::String_optional v32 = DiagramConfiguration.ValueFormatter.format(value:)((NSNumber)v31);
    char v33 = v32.value._object;

    if (v32.value._object) {
      uint64_t v34 = v32.value._countAndFlagsBits;
    }
    else {
      uint64_t v34 = 1701736270;
    }
    if (!v32.value._object) {
      char v33 = (void *)0xE400000000000000;
    }
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (unint64_t)sub_1C299CC08(0, v23[2] + 1, 1, v23);
      unint64_t v23 = (void *)result;
    }
    unint64_t v36 = v23[2];
    unint64_t v35 = v23[3];
    if (v36 >= v35 >> 1)
    {
      uint64_t result = (unint64_t)sub_1C299CC08((void *)(v35 > 1), v36 + 1, 1, v23);
      unint64_t v23 = (void *)result;
    }
    v23[2] = v36 + 1;
    char v37 = (double *)&v23[4 * v36];
    *((void *)v37 + 4) = v34;
    *((void *)v37 + 5) = v33;
    v37[6] = v18;
    v37[7] = v17;
    unint64_t v15 = v68;
    __asm { FMOV            V0.2D, #6.0 }
    if (v67)
    {
LABEL_32:
      *((void *)&v43 + 1) = *((void *)&_Q0 + 1);
      *(void *)&long long v43 = v20;
      if (v15)
      {
LABEL_33:
        *(void *)&_Q0 = v23;
LABEL_40:
        *(_OWORD *)a7 = v43;
        *(void *)(a7 + 16) = v14;
        *(_OWORD *)(a7 + 24) = _Q0;
        *(void *)(a7 + 40) = v15;
        return result;
      }
LABEL_39:
      long long v69 = v43;
      uint64_t result = swift_bridgeObjectRelease();
      long long v43 = v69;
      _Q0 = 0uLL;
      goto LABEL_40;
    }
LABEL_38:
    uint64_t v71 = *((void *)&_Q0 + 1);
    uint64_t result = swift_bridgeObjectRelease();
    *((void *)&_Q0 + 1) = v71;
    long long v43 = 0uLL;
    if (v15) {
      goto LABEL_33;
    }
    goto LABEL_39;
  }
  unint64_t v44 = (double *)(v13 + 56);
  uint64_t v20 = (void *)MEMORY[0x1E4FBC860];
  double v45 = *(double *)(v13 + 40);
  double v46 = *(double *)(v13 + 32);
  double v21 = v45;
  double v22 = v46;
  unint64_t v23 = (void *)MEMORY[0x1E4FBC860];
  char v70 = a5;
  while (1)
  {
    double v18 = *(v44 - 1);
    double v17 = *v44;
    if (vabdd_f64(v18, v22) < 0.000001)
    {
      if (v17 > v21) {
        double v21 = *v44;
      }
      if (v45 < v17) {
        double v17 = v45;
      }
      double v18 = v46;
      goto LABEL_47;
    }
    uint64_t v47 = (void *)sub_1C2A9C8D8();
    if ((a5 & 1) == 0)
    {
      uint64_t result = (unint64_t)(id)HKNumberFormatterWithDecimalPrecision();
      if (!result) {
        goto LABEL_58;
      }
      goto LABEL_55;
    }
    if (a4)
    {
      id v48 = objc_msgSend(self, sel_hk_percentNumberFormatter);
      id v49 = objc_msgSend(v48, sel_stringFromNumber_, v47);
      goto LABEL_56;
    }
    uint64_t result = (unint64_t)(id)HKIntegerFormatter();
    if (!result) {
      break;
    }
LABEL_55:
    id v48 = (id)result;
    id v49 = objc_msgSend((id)result, sel_stringFromNumber_, v47);
LABEL_56:
    id v50 = v49;

    if (v50)
    {
      uint64_t v51 = sub_1C2A9DD28();
      unint64_t v53 = v52;

      goto LABEL_59;
    }
LABEL_58:

    unint64_t v53 = 0xE400000000000000;
    uint64_t v51 = 1701736270;
LABEL_59:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v20 = sub_1C299CC08(0, v20[2] + 1, 1, v20);
    }
    unint64_t v55 = v20[2];
    unint64_t v54 = v20[3];
    if (v55 >= v54 >> 1) {
      uint64_t v20 = sub_1C299CC08((void *)(v54 > 1), v55 + 1, 1, v20);
    }
    v20[2] = v55 + 1;
    int v56 = (double *)&v20[4 * v55];
    *((void *)v56 + 4) = v51;
    *((void *)v56 + 5) = v53;
    v56[6] = v22;
    v56[7] = v21;
    __int16 v57 = (void *)sub_1C2A9C8D8();
    if (v70)
    {
      if (a4)
      {
        id v58 = objc_msgSend(self, sel_hk_percentNumberFormatter);
        id v59 = objc_msgSend(v58, sel_stringFromNumber_, v57);
        goto LABEL_70;
      }
      uint64_t result = (unint64_t)(id)HKIntegerFormatter();
      if (!result) {
        goto LABEL_79;
      }
    }
    else
    {
      uint64_t result = (unint64_t)(id)HKNumberFormatterWithDecimalPrecision();
      if (!result) {
        goto LABEL_72;
      }
    }
    id v58 = (id)result;
    id v59 = objc_msgSend((id)result, sel_stringFromNumber_, v57);
LABEL_70:
    id v60 = v59;

    if (!v60)
    {
LABEL_72:

      unint64_t v63 = 0xE400000000000000;
      uint64_t v61 = 1701736270;
      goto LABEL_73;
    }
    uint64_t v61 = sub_1C2A9DD28();
    unint64_t v63 = v62;

LABEL_73:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v23 = sub_1C299CC08(0, v23[2] + 1, 1, v23);
    }
    unint64_t v65 = v23[2];
    unint64_t v64 = v23[3];
    if (v65 >= v64 >> 1) {
      unint64_t v23 = sub_1C299CC08((void *)(v64 > 1), v65 + 1, 1, v23);
    }
    v23[2] = v65 + 1;
    __C::CGRect v66 = (double *)&v23[4 * v65];
    *((void *)v66 + 4) = v61;
    *((void *)v66 + 5) = v63;
    v66[6] = v46;
    v66[7] = v45;
    double v21 = v17;
    double v22 = v18;
    double v46 = v18;
    a5 = v70;
LABEL_47:
    v44 += 2;
    double v45 = v17;
    if (!--v19) {
      goto LABEL_13;
    }
  }
  __break(1u);
LABEL_79:
  __break(1u);
  return result;
}

void sub_1C2932204(void *a1, uint64_t a2, void (*a3)(id, id *, double, double), CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, double a8, double a9, double a10, double a11, double a12, double a13)
{
  uint64_t v23 = a2 + 16;
  id v24 = objc_msgSend(a1, sel_CGContext);
  double v25 = UIEdgeInsetsInsetRect(a8, a9, a10, a11, a12, a13);
  CGFloat v27 = v26;
  CGFloat v29 = v28;
  CGFloat v31 = v30;
  id v32 = v24;
  sub_1C293249C(&v53, a4, a5, a6, a7, v25, v27, v29, v31);
  long long v33 = v53;
  uint64_t v34 = v54;
  uint64_t v35 = v55;
  uint64_t v36 = v56;
  uint64_t v37 = v57;
  swift_beginAccess();
  uint64_t v38 = MEMORY[0x1C87657D0](v23);
  if (v38)
  {
    uint64_t v39 = (void *)v38;
    uint64_t v40 = v38 + OBJC_IVAR____TtC19HealthVisualization16DiagramImageView_lastUsedTransformer;
    swift_beginAccess();
    __int16 v41 = *(void **)v40;
    *(void *)uint64_t v40 = v24;
    *(_OWORD *)(v40 + 8) = v33;
    *(void *)(v40 + 24) = v34;
    *(void *)(v40 + 32) = v35;
    *(void *)(v40 + 40) = v36;
    *(void *)(v40 + 48) = v37;
    id v42 = v32;
    sub_1C2944A80(v41);
  }
  id v47 = v24;
  long long v48 = v33;
  uint64_t v49 = v34;
  uint64_t v50 = v35;
  uint64_t v51 = v36;
  uint64_t v52 = v37;
  a3(v32, &v47, a10, a11);
}

uint64_t sub_1C29323E8()
{
  return sub_1C2A9DE58();
}

unint64_t sub_1C2932448()
{
  unint64_t result = qword_1EBB92668;
  if (!qword_1EBB92668)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB92668);
  }
  return result;
}

CGAffineTransform *sub_1C293249C@<X0>(long long *a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>, CGFloat a6@<D4>, CGFloat a7@<D5>, CGFloat a8@<D6>, CGFloat a9@<D7>)
{
  unint64_t result = (CGAffineTransform *)CGRectIsEmpty(*(CGRect *)&a2);
  if (result)
  {
    long long v19 = xmmword_1C2A9FD40;
    long long v20 = xmmword_1C2AA0120;
    long long v21 = 0uLL;
  }
  else
  {
    CGAffineTransformMakeTranslation(&t1, -a2, -a3);
    long long v34 = *(_OWORD *)&t1.c;
    long long v35 = *(_OWORD *)&t1.a;
    tdouble y = t1.ty;
    tdouble x = t1.tx;
    v39.origin.double x = a6;
    v39.origin.double y = a7;
    v39.size.double width = a8;
    v39.size.double height = a9;
    CGFloat Height = CGRectGetHeight(v39);
    CGAffineTransformMakeTranslation(&t1, 0.0, Height);
    CGAffineTransformTranslate(&t2, &t1, a6, a7);
    long long v30 = *(_OWORD *)&t2.c;
    long long v31 = *(_OWORD *)&t2.a;
    CGFloat v28 = t2.ty;
    CGFloat v29 = t2.tx;
    v40.origin.double x = a6;
    v40.origin.double y = a7;
    v40.size.double width = a8;
    v40.size.double height = a9;
    CGFloat rect = a9;
    double Width = CGRectGetWidth(v40);
    v41.origin.double x = a2;
    v41.origin.double y = a3;
    v41.size.double width = a4;
    v41.size.double height = a5;
    CGFloat v24 = Width / CGRectGetWidth(v41);
    v42.origin.double x = a6;
    v42.origin.double y = a7;
    v42.size.double width = a8;
    v42.size.double height = rect;
    CGFloat v25 = -CGRectGetHeight(v42);
    v43.origin.double x = a2;
    v43.origin.double y = a3;
    v43.size.double width = a4;
    v43.size.double height = a5;
    CGFloat v26 = CGRectGetHeight(v43);
    *(_OWORD *)&t1.a = v31;
    *(_OWORD *)&t1.c = v30;
    t1.tdouble x = v29;
    t1.tdouble y = v28;
    CGAffineTransformScale(&t2, &t1, v24, v25 / v26);
    *(_OWORD *)&t1.a = v35;
    *(_OWORD *)&t1.c = v34;
    t1.tdouble x = tx;
    t1.tdouble y = ty;
    unint64_t result = CGAffineTransformConcat(&v36, &t1, &t2);
    long long v20 = *(_OWORD *)&v36.a;
    long long v19 = *(_OWORD *)&v36.c;
    long long v21 = *(_OWORD *)&v36.tx;
  }
  *a1 = v20;
  a1[1] = v19;
  a1[2] = v21;
  return result;
}

uint64_t sub_1C2932680(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1C29326A0(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1C29326A0(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1C293BDB0(0, &qword_1EBB90DC0, MEMORY[0x1E4FBC958], MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_1C2A9E6A8();
  __break(1u);
  return result;
}

void sub_1C2932820(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, void *a8, double a9, double a10, double a11, double a12, uint64_t a13)
{
  uint64_t v14 = v13;
  uint64_t v20 = *a1;
  __int16 v21 = *((_WORD *)a1 + 6);
  int v22 = *((_DWORD *)a1 + 2);
  *(_OWORD *)(v14 + 16) = 0u;
  *(_OWORD *)(v14 + 32) = 0u;
  *(_OWORD *)(v14 + 48) = 0u;
  *(void *)(v14 + 64) = v20;
  *(_WORD *)(v14 + 76) = v21;
  *(_DWORD *)(v14 + 72) = v22;
  *(double *)(v14 + 80) = a9;
  *(double *)(v14 + 88) = a10;
  *(double *)(v14 + 96) = a11;
  *(double *)(v14 + 104) = a12;
  sub_1C2942DD4(a2, v14 + 112);
  *(void *)(v14 + 152) = a5;
  *(void *)(v14 + 160) = a6;
  *(unsigned char *)(v14 + 168) = a7 & 1;
  sub_1C2932CE8(a13, (uint64_t)&v57);
  if (v58)
  {
    sub_1C2943434(&v57, (uint64_t)v60);
  }
  else
  {
    uint64_t v23 = type metadata accessor for DiagramAxisMetricsCalculatorFactory();
    uint64_t v24 = swift_allocObject();
    *(void *)(v24 + 16) = a8;
    uint64_t v61 = v23;
    unint64_t v62 = &protocol witness table for DiagramAxisMetricsCalculatorFactory;
    v60[0] = v24;
    id v25 = a8;
    sub_1C2932C8C((uint64_t)&v57, &qword_1EBB912C0, (unint64_t *)&qword_1EBB912B8);
  }
  if ((v20 & 0xFF00000000) == 0x300000000)
  {

    swift_bridgeObjectRelease();
LABEL_14:
    swift_bridgeObjectRelease();
    uint64_t v37 = &qword_1EBB912C0;
    uint64_t v38 = (unint64_t *)&qword_1EBB912B8;
    CGRect v39 = (long long *)a13;
LABEL_15:
    sub_1C2932C8C((uint64_t)v39, v37, v38);
LABEL_16:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v60);
    return;
  }
  if ((v20 & 0xFF00000000) == 0x200000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v26 = v61;
    CGFloat v27 = v62;
    __swift_project_boxed_opaque_existential_1(v60, v61);
    char v53 = v20;
    char v52 = 0;
    ((void (*)(long long *__return_ptr, char *, char *, uint64_t, _UNKNOWN **))v27[1])(&v54, &v53, &v52, v26, v27);
    if (v56)
    {
      sub_1C2943434(&v54, (uint64_t)&v57);
      uint64_t v28 = v58;
      uint64_t v29 = v59;
      __swift_project_boxed_opaque_existential_1(&v57, v58);
      CGFloat v30 = *(double *)(v14 + 80);
      CGFloat v31 = *(double *)(v14 + 88);
      CGFloat v32 = *(double *)(v14 + 96);
      CGFloat v33 = *(double *)(v14 + 104);
      v63.origin.double x = v30;
      v63.origin.double y = v31;
      v63.size.double width = v32;
      v63.size.double height = v33;
      double MinX = CGRectGetMinX(v63);
      v64.origin.double x = v30;
      v64.origin.double y = v31;
      v64.size.double width = v32;
      v64.size.double height = v33;
      double MaxX = CGRectGetMaxX(v64);
      if (MinX > MaxX)
      {
        __break(1u);
        goto LABEL_22;
      }
      (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t, double, double))(v29 + 8))(&v54, a3, v28, v29, MinX, MaxX);
      swift_bridgeObjectRelease();
      uint64_t v36 = v55;
      *(_OWORD *)(v14 + 16) = v54;
      *(void *)(v14 + 32) = v36;
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v57);
    }
    else
    {
      swift_bridgeObjectRelease();
      sub_1C2932C8C((uint64_t)&v54, &qword_1EA31EB38, &qword_1EBB90980);
    }
  }
  if ((v22 & 0xFF000000) == 0x2000000)
  {

    goto LABEL_14;
  }
  uint64_t v40 = v61;
  CGRect v41 = v62;
  __swift_project_boxed_opaque_existential_1(v60, v61);
  char v53 = HIBYTE(v20);
  char v52 = 1;
  ((void (*)(long long *__return_ptr, char *, char *, uint64_t, _UNKNOWN **))v41[1])(&v54, &v53, &v52, v40, v41);
  if (!v56)
  {

    swift_bridgeObjectRelease();
    sub_1C2932C8C(a13, &qword_1EBB912C0, (unint64_t *)&qword_1EBB912B8);
    uint64_t v37 = &qword_1EA31EB38;
    uint64_t v38 = &qword_1EBB90980;
    CGRect v39 = &v54;
    goto LABEL_15;
  }
  sub_1C2943434(&v54, (uint64_t)&v57);
  uint64_t v42 = v58;
  uint64_t v43 = v59;
  __swift_project_boxed_opaque_existential_1(&v57, v58);
  CGFloat v44 = *(double *)(v14 + 80);
  CGFloat v45 = *(double *)(v14 + 88);
  CGFloat v46 = *(double *)(v14 + 96);
  CGFloat v47 = *(double *)(v14 + 104);
  v65.origin.double x = v44;
  v65.origin.double y = v45;
  v65.size.double width = v46;
  v65.size.double height = v47;
  double MinY = CGRectGetMinY(v65);
  v66.origin.double x = v44;
  v66.origin.double y = v45;
  v66.size.double width = v46;
  v66.size.double height = v47;
  double MaxY = CGRectGetMaxY(v66);
  if (MinY <= MaxY)
  {
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t, double, double))(v43 + 8))(&v54, a4, v42, v43, MinY, MaxY);

    swift_bridgeObjectRelease();
    sub_1C2932C8C(a13, &qword_1EBB912C0, (unint64_t *)&qword_1EBB912B8);
    uint64_t v50 = v55;
    *(_OWORD *)(v14 + 40) = v54;
    *(void *)(v14 + 56) = v50;
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v57);
    goto LABEL_16;
  }
LABEL_22:
  __break(1u);
}

uint64_t sub_1C2932C8C(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  sub_1C2932D64(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_1C2932CE8(uint64_t a1, uint64_t a2)
{
  sub_1C2932D64(0, &qword_1EBB912C0, (unint64_t *)&qword_1EBB912B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1C2932D64(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  if (!*a2)
  {
    sub_1C29415E4(255, a3);
    unint64_t v4 = sub_1C2A9E328();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

id DiagramImageView.init(frame:)(double a1, double a2, double a3, double a4)
{
  *(void *)&v4[OBJC_IVAR____TtC19HealthVisualization16DiagramImageView_imageRenderer] = 0;
  *(void *)&v4[OBJC_IVAR____TtC19HealthVisualization16DiagramImageView_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  uint64_t v9 = &v4[OBJC_IVAR____TtC19HealthVisualization16DiagramImageView_lastUsedTransformer];
  *(void *)uint64_t v9 = 1;
  *(_OWORD *)(v9 + 40) = 0u;
  *(_OWORD *)(v9 + 24) = 0u;
  *(_OWORD *)(v9 + 8) = 0u;
  uint64_t v10 = &v4[OBJC_IVAR____TtC19HealthVisualization16DiagramImageView_lastUsedModelSpace];
  *(_OWORD *)uint64_t v10 = 0u;
  *((_OWORD *)v10 + 1) = 0u;
  v10[32] = 1;
  v20.receiver = v4;
  v20.super_class = (Class)type metadata accessor for DiagramImageView();
  id v11 = objc_msgSendSuper2(&v20, sel_initWithFrame_, a1, a2, a3, a4);
  objc_msgSend(v11, sel_frame);
  sub_1C2938480(v12, v13);
  objc_msgSend(v11, sel_setIsAccessibilityElement_, 1);
  long long v18 = 0u;
  long long v19 = 0u;
  uint64_t v14 = qword_1EBB92310;
  id v15 = v11;
  if (v14 != -1) {
    swift_once();
  }
  sub_1C2934FE8(0xD000000000000025, 0x80000001C2AB6E60, 0, (uint64_t)&v18, 0, 0);
  sub_1C2935868((uint64_t)&v18);
  uint64_t v16 = (void *)sub_1C2A9DCF8();
  swift_bridgeObjectRelease();
  objc_msgSend(v15, sel_setAccessibilityLabel_, v16, v18, v19);

  return v15;
}

id sub_1C2932F80(uint64_t a1, void *a2)
{
  uint64_t v3 = *(uint64_t (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  uint64_t v5 = (void *)v3();
  swift_release();

  return v5;
}

id sub_1C2932FE8(void *a1)
{
  uint64_t v2 = *(void **)(v1 + 16);
  uint64_t v3 = *(void **)(v1 + 24);
  if (objc_msgSend(a1, sel_userInterfaceStyle) == (id)2) {
    id v4 = v2;
  }
  else {
    id v4 = v3;
  }
  return v4;
}

void sub_1C2933030(unsigned char *a1, uint64_t a2, double a3, double a4)
{
  uint64_t v69 = a2;
  uint64_t v7 = sub_1C2A9C7B8();
  uint64_t v70 = *(void *)(v7 - 8);
  uint64_t v71 = v7;
  MEMORY[0x1F4188790](v7);
  unint64_t v68 = (char *)v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = sub_1C2A9C7C8();
  uint64_t v66 = *(void *)(v76 - 8);
  MEMORY[0x1F4188790](v76);
  unint64_t v67 = (char *)v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_1C2A9C778();
  uint64_t v74 = *(char **)(v10 - 8);
  uint64_t v75 = v10;
  MEMORY[0x1F4188790](v10);
  CGRect v64 = (char *)v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = (int *)sub_1C2A9C468();
  uint64_t v12 = *((void *)v73 - 1);
  MEMORY[0x1F4188790](v73);
  uint64_t v14 = (char *)v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = sub_1C2A9C6E8();
  uint64_t v72 = *(void *)(v65 - 8);
  MEMORY[0x1F4188790](v65);
  uint64_t v16 = (char *)v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for DiagramDateAxisMetricsCalculator.DateTickIntervalStrategy();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(void *)(v18 + 64);
  uint64_t v20 = MEMORY[0x1F4188790](v17);
  __int16 v21 = (char *)v61 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)v61 - v22;
  sub_1C2933844((uint64_t)a1, (uint64_t)v61 - v22);
  sub_1C2933844((uint64_t)v23, (uint64_t)v21);
  unint64_t v24 = (*(unsigned __int8 *)(v18 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  uint64_t v25 = swift_allocObject();
  sub_1C292EFE8((uint64_t)v23, v25 + v24);
  uint64_t v26 = MEMORY[0x1E4FBC860];
  uint64_t v78 = MEMORY[0x1E4FBC860];
  if (*a1)
  {
    uint64_t v77 = 0;
    CGRect v63 = v16;
    sub_1C2A9C5E8();
    CGFloat v27 = &a1[*(int *)(v17 + 20)];
    uint64_t v62 = v12;
    uint64_t v28 = v14;
    (*(void (**)(char *, unsigned char *, int *))(v12 + 16))(v14, v27, v73);
    uint64_t v29 = v64;
    uint64_t v30 = (*((uint64_t (**)(char *, void, uint64_t))v74 + 13))(v64, *MEMORY[0x1E4F27B68], v75);
    v61[1] = v61;
    MEMORY[0x1F4188790](v30);
    *(double *)&v61[-8] = a3;
    *(double *)&v61[-7] = a4;
    v61[-6] = &v77;
    v61[-5] = a1;
    v61[-4] = sub_1C2939F0C;
    v61[-3] = v25;
    v61[-2] = &v78;
    uint64_t v31 = v66;
    CGFloat v32 = v67;
    (*(void (**)(char *, void, uint64_t))(v66 + 104))(v67, *MEMORY[0x1E4F27BA8], v76);
    uint64_t v33 = *MEMORY[0x1E4F27B80];
    v61[0] = v25;
    uint64_t v35 = v70;
    uint64_t v34 = v71;
    uint64_t v36 = v68;
    (*(void (**)(char *, uint64_t, uint64_t))(v70 + 104))(v68, v33, v71);
    sub_1C2A9C798();
    swift_release();
    sub_1C2938674((uint64_t)v21);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v36, v34);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v32, v76);
    (*((void (**)(char *, uint64_t))v74 + 1))(v29, v75);
    (*(void (**)(char *, int *))(v62 + 8))(v28, v73);
    (*(void (**)(char *, uint64_t))(v72 + 8))(v63, v65);
  }
  else
  {
    uint64_t v37 = v72;
    uint64_t v73 = (int *)v17;
    uint64_t v74 = v21;
    uint64_t v38 = (void *)sub_1C2A9C3B8();
    objc_msgSend(v38, sel_hk_approximateDuration);
    double v40 = v39;

    if (v40 == 0.0)
    {
      __break(1u);
LABEL_20:
      __break(1u);
    }
    else
    {
      uint64_t v41 = sub_1C2A93748(a3, a4, v40);
      int64_t v42 = *(void *)(v41 + 16);
      if (v42)
      {
        uint64_t v77 = v26;
        swift_retain();
        sub_1C297891C(0, v42, 0);
        uint64_t v43 = v77;
        uint64_t v44 = v37;
        unint64_t v45 = (*(unsigned __int8 *)(v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80);
        uint64_t v71 = v41;
        unint64_t v46 = v41 + v45;
        LODWORD(v76) = v74[v73[7]];
        uint64_t v75 = *(void *)(v44 + 72);
        do
        {
          if (v76)
          {
            if (v74[v73[10]] == 1)
            {
              CGFloat v47 = (void *)sub_1C2A9C658();
              sub_1C2A9549C();
              long long v48 = (void *)sub_1C2A9DFF8();
              id v49 = (id)HKRelativeMonthDateYearText();

              if (!v49) {
                goto LABEL_20;
              }
            }
            else
            {
              char v53 = *(void **)&v74[v73[8]];
              long long v54 = (void *)sub_1C2A9C658();
              id v49 = objc_msgSend(v53, sel_stringFromDate_, v54);
            }
            uint64_t v50 = sub_1C2A9DD28();
            uint64_t v51 = v55;

            uint64_t v52 = 1;
          }
          else
          {
            uint64_t v50 = 0;
            uint64_t v51 = 0;
            uint64_t v52 = 2;
          }
          sub_1C2A9C5F8();
          uint64_t v57 = v56;
          uint64_t v77 = v43;
          unint64_t v59 = *(void *)(v43 + 16);
          unint64_t v58 = *(void *)(v43 + 24);
          if (v59 >= v58 >> 1)
          {
            sub_1C297891C(v58 > 1, v59 + 1, 1);
            uint64_t v43 = v77;
          }
          *(void *)(v43 + 16) = v59 + 1;
          uint64_t v60 = v43 + 40 * v59;
          *(void *)(v60 + 32) = v50;
          *(void *)(v60 + 40) = v51;
          *(void *)(v60 + 48) = v57;
          *(void *)(v60 + 56) = v52;
          *(_DWORD *)(v60 + 64) = 1144750080;
          v46 += v75;
          --v42;
        }
        while (v42);
        swift_bridgeObjectRelease();
        swift_release_n();
      }
      else
      {
        swift_release();
        swift_bridgeObjectRelease();
      }
      sub_1C2938674((uint64_t)v74);
      swift_bridgeObjectRelease();
    }
  }
}

uint64_t sub_1C2933844(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DiagramDateAxisMetricsCalculator.DateTickIntervalStrategy();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unsigned char *initializeWithCopy for DiagramDateAxisMetricsCalculator.DateTickIntervalStrategy(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = sub_1C2A9C468();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  uint64_t v10 = a3[7];
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  a1[v10] = a2[v10];
  uint64_t v11 = a3[8];
  uint64_t v12 = a3[9];
  uint64_t v13 = *(void **)&a2[v11];
  *(void *)&a1[v11] = v13;
  uint64_t v14 = *(void **)&a2[v12];
  *(void *)&a1[v12] = v14;
  a1[a3[10]] = a2[a3[10]];
  id v15 = v13;
  id v16 = v14;
  return a1;
}

HealthVisualization::DiagramDataKey_optional __swiftcall DiagramDataKey.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v2 = v1;
  unint64_t v3 = sub_1C2A9E6E8();
  result.value = swift_bridgeObjectRelease();
  char v5 = 3;
  if (v3 < 3) {
    char v5 = v3;
  }
  *uint64_t v2 = v5;
  return result;
}

uint64_t sub_1C29339CC(void *a1)
{
  id v3 = objc_msgSend(v1, sel_traitCollection);
  id v4 = objc_msgSend(v3, sel_userInterfaceStyle);

  if (a1) {
    BOOL v5 = v4 != objc_msgSend(a1, sel_userInterfaceStyle);
  }
  else {
    BOOL v5 = 1;
  }
  id v6 = objc_msgSend(v1, sel_traitCollection);
  id v7 = objc_msgSend(v6, sel_preferredContentSizeCategory);

  if (!a1)
  {

LABEL_13:
    id v16 = &v1[OBJC_IVAR____TtC19HealthVisualization16DiagramImageView_delegate];
    swift_beginAccess();
    uint64_t result = MEMORY[0x1C87657D0](v16);
    if (result)
    {
      uint64_t v17 = *(void **)&v1[OBJC_IVAR____TtC19HealthVisualization16DiagramImageView_imageRenderer];
      if (v17)
      {
        uint64_t v18 = *((void *)v16 + 1);
        uint64_t ObjectType = swift_getObjectType();
        id v20 = objc_msgSend(v17, sel_format);
        objc_msgSend(v20, sel_bounds);
        double v22 = v21;
        double v24 = v23;

        (*(void (**)(char *, uint64_t, uint64_t, double, double))(v18 + 16))(v1, ObjectType, v18, v22, v24);
        return swift_unknownObjectRelease();
      }
      else
      {
        __break(1u);
      }
    }
    return result;
  }
  id v8 = objc_msgSend(a1, sel_preferredContentSizeCategory);
  uint64_t v9 = sub_1C2A9DD28();
  uint64_t v11 = v10;
  if (v9 == sub_1C2A9DD28() && v11 == v12) {
    int v14 = 0;
  }
  else {
    int v14 = sub_1C2A9E8D8() ^ 1;
  }

  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v5 | v14)) {
    goto LABEL_13;
  }
  return result;
}

uint64_t sub_1C2933BE0@<X0>(uint64_t *a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X2>, double *a4@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  unsigned __int16 v7 = *((_WORD *)a1 + 10);
  int v8 = *((_DWORD *)a1 + 4);
  uint64_t v9 = a1[3];
  char v10 = *((unsigned char *)a1 + 32);
  uint64_t v11 = *((char *)a1 + 33);
  long long v12 = a2[1];
  v76[0] = *a2;
  v76[1] = v12;
  v76[2] = a2[2];
  uint64_t v69 = v5;
  uint64_t v70 = v6;
  int v71 = v8;
  unsigned __int16 v64 = v7;
  unsigned __int16 v13 = v7;
  unsigned __int16 v72 = v7;
  uint64_t v73 = v9;
  char v74 = v10;
  char v75 = v11;
  double v14 = sub_1C2930664((uint64_t)&v69);
  uint64_t v69 = v5;
  uint64_t v70 = v6;
  int v65 = v8;
  uint64_t v66 = v6;
  unsigned __int16 v72 = v13;
  int v71 = v8;
  uint64_t v73 = v9;
  char v74 = v10;
  char v75 = v11;
  double v15 = sub_1C2930798((uint64_t)&v69);
  if (v14 > v15) {
    double v16 = v14;
  }
  else {
    double v16 = v15;
  }
  double v17 = dbl_1C2AACB58[v11];
  double v18 = dbl_1C2AACB78[v11];
  sub_1C292F15C((uint64_t)v76);
  uint64_t v19 = swift_bridgeObjectRetain();
  uint64_t v20 = sub_1C292F04C(v19, (uint64_t)v76);
  sub_1C2945194((uint64_t)v76);
  swift_bridgeObjectRelease();
  uint64_t v21 = *(void *)(v5 + 16);
  if (!v21)
  {
LABEL_14:
    swift_bridgeObjectRelease();
    BOOL v27 = 0;
    double v28 = v18;
    goto LABEL_22;
  }
  swift_bridgeObjectRetain();
  uint64_t v22 = 37;
  uint64_t v23 = v21;
  while (2)
  {
    switch(*(unsigned char *)(v5 + v22))
    {
      case 1:
      case 2:
      case 3:
        char v24 = sub_1C2A9E8D8();
        swift_bridgeObjectRelease();
        if (v24) {
          goto LABEL_16;
        }
        v22 += 32;
        if (--v23) {
          continue;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        uint64_t v25 = 37;
        break;
      default:
        swift_bridgeObjectRelease();
LABEL_16:
        swift_bridgeObjectRelease();
        double v29 = COERCE_DOUBLE(sub_1C293D564(v20));
        char v31 = v30;
        swift_bridgeObjectRelease();
        BOOL v27 = (v31 & 1) == 0;
        double v28 = v18;
        if ((v31 & 1) == 0) {
          double v18 = v18 + v29;
        }
        goto LABEL_22;
    }
    break;
  }
  while (2)
  {
    switch(*(unsigned char *)(v5 + v25))
    {
      case 1:
        swift_bridgeObjectRelease();
        goto LABEL_19;
      default:
        char v26 = sub_1C2A9E8D8();
        swift_bridgeObjectRelease();
        if ((v26 & 1) == 0)
        {
          v25 += 32;
          if (!--v21)
          {
            swift_bridgeObjectRelease();
            goto LABEL_14;
          }
          continue;
        }
LABEL_19:
        swift_bridgeObjectRelease();
        double v32 = COERCE_DOUBLE(sub_1C293D564(v20));
        char v34 = v33;
        swift_bridgeObjectRelease();
        BOOL v27 = (v34 & 1) == 0;
        if (v34) {
          double v28 = v18;
        }
        else {
          double v28 = v18 + v32;
        }
LABEL_22:
        uint64_t result = a3;
        uint64_t v36 = *(void *)(a3 + 16);
        if (!v36)
        {
          double v40 = 0.0;
          double v39 = 0.0;
LABEL_44:
          if ((v66 & 0xFF00000000) == 0x300000000)
          {
            double v18 = v18 + 0.0;
            double v28 = v28 + v40;
          }
          else
          {
            if ((v65 & 0xFF000000) == 0x2000000)
            {
              double v56 = 0.0;
              double v18 = v18 + 0.0;
              double v28 = v28 + v40;
            }
            else
            {
              if (v27) {
                goto LABEL_61;
              }
              double v57 = 0.0;
              if ((((unint64_t)v64 << 32) & 0xFF00000000) == 0) {
                double v57 = 3.5;
              }
              double v56 = v57 + v16;
            }
            if ((v66 & 0xFF00000000) != 0x200000000)
            {
              double v60 = 0.0;
              if ((v66 & 0xFF0000000000) == 0) {
                double v60 = 3.5;
              }
              double v59 = v60 + v16 + 2.0;
              double v58 = v17;
              goto LABEL_57;
            }
          }
          double v58 = v16 + v17;
          double v56 = 0.0;
          double v59 = 0.0;
LABEL_57:
          *a4 = v16 + v17 + v39;
          a4[1] = v16 + v18;
          a4[2] = v58;
          a4[3] = v16 + v28;
          a4[4] = v56;
          a4[5] = v59;
          return result;
        }
        BOOL v61 = v27;
        double v62 = v17;
        CGRect v63 = a4;
        uint64_t v37 = swift_bridgeObjectRetain() + 48;
        uint64_t v38 = 1 - v36;
        double v39 = 0.0;
        do
        {
          uint64_t v41 = *(void *)(v37 - 16);
          unint64_t v42 = *(void *)(v41 + 16);
          if (v42)
          {
            uint64_t v68 = v37;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            uint64_t v43 = (void *)sub_1C2A9DCF8();
            swift_bridgeObjectRelease();
            type metadata accessor for Key(0);
            sub_1C2942D7C();
            uint64_t v44 = (void *)sub_1C2A9DC58();
            objc_msgSend(v43, sel_sizeWithAttributes_, v44);
            double v46 = v45;

            if (v42 > *(void *)(v41 + 16)) {
              goto LABEL_59;
            }
            swift_bridgeObjectRetain();
            CGFloat v47 = (void *)sub_1C2A9DCF8();
            swift_bridgeObjectRelease();
            long long v48 = (void *)sub_1C2A9DC58();
            objc_msgSend(v47, sel_sizeWithAttributes_, v48);
            double v50 = v49;

            if (!*(void *)(v41 + 16)) {
              goto LABEL_60;
            }
            double v51 = v46 * 0.5;
            double v40 = v50 * 0.5;
            swift_bridgeObjectRetain();
            uint64_t v52 = (void *)sub_1C2A9DCF8();
            swift_bridgeObjectRelease();
            char v53 = (void *)sub_1C2A9DC58();
            objc_msgSend(v52, sel_sizeWithAttributes_, v53);
            double v55 = v54;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            if (v39 <= v55) {
              double v39 = v55;
            }
            if (v51 >= 0.0)
            {
              if (v51 > v40) {
                double v40 = v51;
              }
              uint64_t v37 = v68;
LABEL_40:
              if (!v38) {
                goto LABEL_43;
              }
              goto LABEL_27;
            }
            uint64_t v37 = v68;
            if (v40 >= 0.0) {
              goto LABEL_40;
            }
            if (!v38)
            {
              double v40 = 0.0;
LABEL_43:
              uint64_t result = swift_bridgeObjectRelease();
              a4 = v63;
              double v17 = v62;
              BOOL v27 = v61;
              goto LABEL_44;
            }
          }
          else
          {
            double v40 = 0.0;
            if (v39 <= 0.0) {
              double v39 = 0.0;
            }
            if (!v38) {
              goto LABEL_43;
            }
          }
LABEL_27:
          v37 += 24;
          ++v38;
        }
        while (v38 != 1);
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        uint64_t result = sub_1C2A9E628();
        __break(1u);
        return result;
    }
  }
}

uint64_t sub_1C29342CC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = *(void *)(*a2 + 16);
  if (v3 && (uint64_t v4 = *(void *)(a1 + 40), (v5 = *(void *)(v4 + 16)) != 0))
  {
    uint64_t v6 = v4 + 32;
    uint64_t result = swift_bridgeObjectRetain();
    unint64_t v8 = 0;
    uint64_t v9 = (void *)MEMORY[0x1E4FBC860];
    uint64_t v23 = v5;
    while (v8 < *(void *)(v4 + 16))
    {
      uint64_t v10 = *(void *)(v6 + 8 * v8);
      unint64_t v11 = *(void *)(v2 + 16);
      if (v8 >= v3)
      {
        uint64_t v12 = v2 + 32 * v3;
        if (v3 > v11) {
          goto LABEL_30;
        }
      }
      else
      {
        if (v8 >= v11) {
          goto LABEL_29;
        }
        uint64_t v12 = v2 + 32 + 32 * v8;
      }
      if (*(void *)(v10 + 16))
      {
        uint64_t v13 = *(unsigned __int8 *)(v12 + 5);
        swift_bridgeObjectRetain();
        unint64_t v14 = sub_1C293DDF4(2u);
        if (v15)
        {
          uint64_t v16 = *(void *)(*(void *)(v10 + 56) + 40 * v14);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          switch(v13)
          {
            case 3:
              swift_bridgeObjectRelease();
              goto LABEL_17;
            default:
              char v17 = sub_1C2A9E8D8();
              swift_bridgeObjectRelease();
              if (v17)
              {
LABEL_17:
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t v18 = *(void *)(v16 + 16);
                if (v18)
                {
                  uint64_t v19 = 32;
                  do
                  {
                    uint64_t v20 = *(void *)(v16 + v19);
                    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                      uint64_t v9 = sub_1C292D4B4(0, v9[2] + 1, 1, v9);
                    }
                    unint64_t v22 = v9[2];
                    unint64_t v21 = v9[3];
                    if (v22 >= v21 >> 1) {
                      uint64_t v9 = sub_1C292D4B4((void *)(v21 > 1), v22 + 1, 1, v9);
                    }
                    v9[2] = v22 + 1;
                    v9[v22 + 4] = v20;
                    v19 += 16;
                    --v18;
                  }
                  while (v18);
                }
              }
              else
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
              }
              uint64_t result = swift_bridgeObjectRelease();
              uint64_t v6 = v4 + 32;
              uint64_t v5 = v23;
              break;
          }
        }
        else
        {
          uint64_t result = swift_bridgeObjectRelease();
        }
      }
      if (++v8 == v5)
      {
        swift_bridgeObjectRelease();
        return (uint64_t)v9;
      }
    }
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E4FBC860];
  }
  return result;
}

HealthVisualization::DiagramConfiguration::Color_optional __swiftcall DiagramConfiguration.Color.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v2 = v1;
  uint64_t v3 = sub_1C2A9E908();
  result.value = swift_bridgeObjectRelease();
  char v5 = 0;
  char v6 = 17;
  switch(v3)
  {
    case 0:
      goto LABEL_19;
    case 1:
      char v5 = 1;
      goto LABEL_19;
    case 2:
      char v5 = 2;
      goto LABEL_19;
    case 3:
      char v5 = 3;
      goto LABEL_19;
    case 4:
      char v5 = 4;
      goto LABEL_19;
    case 5:
      char v5 = 5;
      goto LABEL_19;
    case 6:
      char v5 = 6;
      goto LABEL_19;
    case 7:
      char v5 = 7;
      goto LABEL_19;
    case 8:
      char v5 = 8;
      goto LABEL_19;
    case 9:
      char v5 = 9;
      goto LABEL_19;
    case 10:
      char v5 = 10;
      goto LABEL_19;
    case 11:
      char v5 = 11;
      goto LABEL_19;
    case 12:
      char v5 = 12;
      goto LABEL_19;
    case 13:
      char v5 = 13;
      goto LABEL_19;
    case 14:
      char v5 = 14;
      goto LABEL_19;
    case 15:
      char v5 = 15;
      goto LABEL_19;
    case 16:
      char v5 = 16;
LABEL_19:
      char v6 = v5;
      break;
    case 17:
      break;
    case 18:
      char v6 = 18;
      break;
    case 19:
      char v6 = 19;
      break;
    case 20:
      char v6 = 20;
      break;
    case 21:
      char v6 = 21;
      break;
    case 22:
      char v6 = 22;
      break;
    case 23:
      char v6 = 23;
      break;
    case 24:
      char v6 = 24;
      break;
    case 25:
      char v6 = 25;
      break;
    case 26:
      char v6 = 26;
      break;
    case 27:
      char v6 = 27;
      break;
    case 28:
      char v6 = 28;
      break;
    case 29:
      char v6 = 29;
      break;
    case 30:
      char v6 = 30;
      break;
    case 31:
      char v6 = 31;
      break;
    case 32:
      char v6 = 32;
      break;
    case 33:
      char v6 = 33;
      break;
    case 34:
      char v6 = 34;
      break;
    default:
      char v6 = 35;
      break;
  }
  *uint64_t v2 = v6;
  return result;
}

uint64_t sub_1C2934738@<X0>(char *a1@<X8>)
{
  unint64_t v2 = sub_1C2A9E6E8();
  uint64_t result = swift_bridgeObjectRelease();
  char v4 = 6;
  if (v2 < 6) {
    char v4 = v2;
  }
  *a1 = v4;
  return result;
}

uint64_t initializeWithCopy for DiagramAxisLabel(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  return a1;
}

void sub_1C29347D0(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6, double a7)
{
  sub_1C2934C44(a1, (uint64_t)v59);
  double v11 = *(double *)v59;
  double v12 = *(double *)&v59[1];
  double v13 = *(double *)&v59[2];
  double v14 = *(double *)&v59[3];
  objc_msgSend(v7, sel_bounds);
  double v16 = v15;
  double v18 = v17;
  double v20 = v19;
  double v22 = v21;
  sub_1C2934C44(a1, (uint64_t)v60);
  if (v60[32])
  {
    double v11 = v16;
    double v12 = v18;
    double v13 = v20;
    double v14 = v22;
  }
  v63.origin.double x = 0.0;
  v63.origin.double y = 0.0;
  v63.size.double width = 0.0;
  v63.size.double height = 0.0;
  v62.origin.double x = v16;
  v62.origin.double y = v18;
  v62.size.double width = v20;
  v62.size.double height = v22;
  if (CGRectEqualToRect(v62, v63))
  {
    objc_msgSend(v7, sel_setImage_, 0);
    return;
  }
  uint64_t v23 = self;
  id v24 = objc_msgSend(v23, sel__currentTraitCollection);
  id v25 = objc_msgSend(v7, sel_traitCollection);
  objc_msgSend(v23, sel__setCurrentTraitCollection_, v25);

  char v26 = *(void **)&v7[OBJC_IVAR____TtC19HealthVisualization16DiagramImageView_imageRenderer];
  if (!v26) {
    goto LABEL_11;
  }
  uint64_t v27 = (uint64_t)&v7[OBJC_IVAR____TtC19HealthVisualization16DiagramImageView_lastUsedModelSpace];
  swift_beginAccess();
  *(double *)uint64_t v27 = v11;
  *(double *)(v27 + 8) = v12;
  *(double *)(v27 + 16) = v13;
  *(double *)(v27 + 24) = v14;
  *(unsigned char *)(v27 + 32) = 0;
  uint64_t v28 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v29 = swift_allocObject();
  *(double *)(v29 + 16) = v11;
  *(double *)(v29 + 24) = v12;
  *(double *)(v29 + 32) = v13;
  *(double *)(v29 + 40) = v14;
  *(double *)(v29 + 48) = v16;
  *(double *)(v29 + 56) = v18;
  *(double *)(v29 + 64) = v20;
  *(double *)(v29 + 72) = v22;
  *(double *)(v29 + 80) = a4;
  *(double *)(v29 + 88) = a5;
  *(double *)(v29 + 96) = a6;
  *(double *)(v29 + 104) = a7;
  *(void *)(v29 + 112) = v28;
  *(void *)(v29 + 120) = a2;
  *(void *)(v29 + 128) = a3;
  uint64_t v30 = swift_allocObject();
  *(void *)(v30 + 16) = sub_1C2944A90;
  *(void *)(v30 + 24) = v29;
  double v56 = sub_1C2942C70;
  uint64_t v57 = v30;
  aBlock = (void *)MEMORY[0x1E4F143A8];
  uint64_t v53 = 1107296256;
  double v54 = sub_1C2942CA0;
  double v55 = &block_descriptor_0;
  char v31 = _Block_copy(&aBlock);
  swift_retain();
  id v32 = v26;
  swift_release();
  id v33 = objc_msgSend(v32, sel_imageWithActions_, v31);
  _Block_release(v31);
  LOBYTE(v31) = swift_isEscapingClosureAtFileLocation();

  swift_release();
  swift_release();
  if (v31)
  {
    __break(1u);
LABEL_11:
    __break(1u);
    return;
  }
  objc_msgSend(v7, sel_setImage_, v33);
  objc_msgSend(v23, sel__setCurrentTraitCollection_, v24);
  char v34 = &v7[OBJC_IVAR____TtC19HealthVisualization16DiagramImageView_delegate];
  swift_beginAccess();
  if (MEMORY[0x1C87657D0](v34))
  {
    uint64_t v35 = *((void *)v34 + 1);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v36 = &v7[OBJC_IVAR____TtC19HealthVisualization16DiagramImageView_lastUsedTransformer];
    swift_beginAccess();
    CGFloat v47 = v33;
    double v49 = v24;
    uint64_t v37 = *(void **)v36;
    uint64_t v38 = *((void *)v36 + 1);
    double v39 = (void (*)(uint64_t, void *))*((void *)v36 + 2);
    double v40 = (void *)*((void *)v36 + 3);
    uint64_t v41 = (uint64_t (*)())*((void *)v36 + 4);
    uint64_t v42 = *((void *)v36 + 5);
    uint64_t v43 = *((void *)v36 + 6);
    aBlock = v37;
    uint64_t v53 = v38;
    double v54 = v39;
    double v55 = v40;
    double v56 = v41;
    uint64_t v57 = v42;
    uint64_t v58 = v43;
    sub_1C2934C44(v27, (uint64_t)v61);
    uint64_t v44 = *(void (**)(char *, void **, unsigned char *, uint64_t, uint64_t))(v35 + 8);
    sub_1C2944A70(v37);
    v44(v7, &aBlock, v61, ObjectType, v35);

    swift_unknownObjectRelease();
    sub_1C2944A80(v37);
  }
  else
  {
  }
}

uint64_t sub_1C2934C44(uint64_t a1, uint64_t a2)
{
  sub_1C2934CA8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1C2934CA8()
{
  if (!qword_1EBB92470)
  {
    type metadata accessor for CGRect(255);
    unint64_t v0 = sub_1C2A9E328();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EBB92470);
    }
  }
}

id DisplayCategoryProviding.displayCategory.getter(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = (void *)(*(uint64_t (**)(void))(*(void *)(a2 + 8) + 16))();
  id v3 = objc_msgSend(v2, sel_categoryIdentifier);

  id result = objc_msgSend(self, sel_categoryWithID_, v3);
  if (!result)
  {
    id result = (id)sub_1C2A9E628();
    __break(1u);
  }
  return result;
}

uint64_t DisplayTypeProviding.displayType.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](a1);
  unint64_t v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = (uint64_t)DisplayTypeProviding.maybeDisplayType.getter(v6, v9);
  if (!result)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v2, a1);
    unint64_t v12 = 0;
    unint64_t v13 = 0xE000000000000000;
    sub_1C2A9E4D8();
    swift_bridgeObjectRelease();
    unint64_t v12 = 0xD000000000000024;
    unint64_t v13 = 0x80000001C2AB7DD0;
    v11[1] = ObjectTypeIdentifiable.objectType.getter(a1, *(void *)(a2 + 8));
    sub_1C29ACA2C();
    sub_1C2A9DD58();
    sub_1C2A9DDB8();
    swift_bridgeObjectRelease();
    uint64_t result = sub_1C2A9E628();
    __break(1u);
  }
  return result;
}

uint64_t sub_1C2934F48(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (qword_1EBB92310 != -1) {
    swift_once();
  }
  return sub_1C2934FE8(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_1C2934FE8(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = sub_1C2A9CFE8();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790]();
  double v15 = (char *)v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_1C29353AC(a1, a2, a4, a5, a6);
  uint64_t v18 = HIBYTE(v17) & 0xF;
  if ((v17 & 0x2000000000000000) == 0) {
    uint64_t v18 = v16 & 0xFFFFFFFFFFFFLL;
  }
  if (v18)
  {
    a1 = sub_1C2935268(v16, v17, a3);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_1C2A9CFB8();
    swift_bridgeObjectRetain_n();
    double v19 = sub_1C2A9CFC8();
    os_log_type_t v20 = sub_1C2A9E088();
    if (os_log_type_enabled(v19, v20))
    {
      double v21 = (uint8_t *)swift_slowAlloc();
      uint64_t v22 = swift_slowAlloc();
      uint64_t v25 = v22;
      *(_DWORD *)double v21 = 136446210;
      v24[1] = v21 + 4;
      swift_bridgeObjectRetain();
      v24[2] = sub_1C2957168(a1, a2, &v25);
      sub_1C2A9E358();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1C292A000, v19, v20, "Localization: no localization found for '%{public}s'", v21, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C87656F0](v22, -1, -1);
      MEMORY[0x1C87656F0](v21, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1C2935268(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3 = a2;
  uint64_t v4 = a1;
  if (a3)
  {
    uint64_t v19 = 0;
    unint64_t v20 = 0xE000000000000000;
    if ((a2 & 0x2000000000000000) != 0) {
      uint64_t v6 = HIBYTE(a2) & 0xF;
    }
    else {
      uint64_t v6 = a1 & 0xFFFFFFFFFFFFLL;
    }
    swift_bridgeObjectRetain();
    if (v6)
    {
      do
      {
        sub_1C292E784(v4, v3, &v13);
        uint64_t v8 = v13;
        uint64_t v7 = v14;
        uint64_t v9 = v15;
        unint64_t v10 = v16;
        uint64_t v4 = v17;
        unint64_t v3 = v18;
        swift_bridgeObjectRelease();
        sub_1C292D5E4(v9, v10, a3);
        swift_bridgeObjectRelease();
        uint64_t v13 = v8;
        uint64_t v14 = v7;
        swift_bridgeObjectRetain();
        sub_1C2A9DDB8();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1C2A9DDB8();
        swift_bridgeObjectRelease();
        uint64_t v11 = HIBYTE(v3) & 0xF;
        if ((v3 & 0x2000000000000000) == 0) {
          uint64_t v11 = v4 & 0xFFFFFFFFFFFFLL;
        }
      }
      while (v11);
      uint64_t v4 = v19;
    }
    else
    {
      uint64_t v4 = 0;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_1C29353AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = sub_1C2A9CFE8();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790]();
  uint64_t v11 = (char *)v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C29358EC(a3, (uint64_t)&v37);
  if (!v38)
  {
    sub_1C2935868((uint64_t)&v37);
    if (a5) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  sub_1C2937880(&v37, &v39);
  __swift_project_boxed_opaque_existential_1(&v39, v40);
  uint64_t DynamicType = swift_getDynamicType();
  if (swift_isClassType()) {
    uint64_t v13 = DynamicType;
  }
  else {
    uint64_t v13 = 0;
  }
  if (v13)
  {
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    id v15 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
    if (v15)
    {
      unint64_t v16 = v15;
      if (a5)
      {
        uint64_t v17 = sub_1C2A9C518();

LABEL_24:
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v39);
        return v17;
      }
      swift_beginAccess();
      if (*(void *)(*(void *)(v5 + 16) + 16))
      {
        id v19 = v16;
        swift_bridgeObjectRetain();
        sub_1C295DD78((uint64_t)v19);
        if (v20)
        {
          swift_bridgeObjectRetain();

          swift_bridgeObjectRelease();
          uint64_t v17 = sub_1C2A9C518();

          swift_bridgeObjectRelease();
          goto LABEL_24;
        }

        swift_bridgeObjectRelease();
      }
      sub_1C2A9CFB8();
      double v21 = v16;
      uint64_t v22 = sub_1C2A9CFC8();
      os_log_type_t v23 = sub_1C2A9E088();
      int v24 = v23;
      if (os_log_type_enabled(v22, v23))
      {
        uint64_t v35 = v21;
        uint64_t v25 = swift_slowAlloc();
        int v33 = v24;
        char v26 = (uint8_t *)v25;
        char v34 = (void *)swift_slowAlloc();
        id v32 = v26;
        *(_DWORD *)char v26 = 138543362;
        uint64_t v36 = v35;
        v31[1] = &v37;
        v31[2] = v26 + 4;
        uint64_t v27 = v35;
        sub_1C2A9E358();
        *char v34 = v16;

        double v21 = v35;
        uint64_t v28 = v32;
        _os_log_impl(&dword_1C292A000, v22, (os_log_type_t)v33, "Localization: no localization file registered for %{public}@", v32, 0xCu);
        sub_1C2960D30(0, &qword_1EBB8FDC0, &qword_1EBB923A0, 0x1E4FBA8A8, MEMORY[0x1E4FBB718]);
        uint64_t v29 = v34;
        swift_arrayDestroy();
        MEMORY[0x1C87656F0](v29, -1, -1);
        MEMORY[0x1C87656F0](v28, -1, -1);
      }
      else
      {

        uint64_t v22 = v21;
      }

      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      uint64_t v17 = sub_1C2A9C518();

      goto LABEL_24;
    }
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v39);
  if (!a5) {
LABEL_12:
  }
    swift_bridgeObjectRetain();
LABEL_13:
  uint64_t v18 = qword_1EBB92378;
  swift_bridgeObjectRetain();
  if (v18 != -1) {
    swift_once();
  }
  uint64_t v17 = sub_1C2A9C518();
  swift_bridgeObjectRelease();
  return v17;
}

uint64_t sub_1C2935868(uint64_t a1)
{
  sub_1C29359AC(0, (unint64_t *)&qword_1EBB927B0, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1C29358EC(uint64_t a1, uint64_t a2)
{
  sub_1C2935950();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1C2935950()
{
  if (!qword_1EBB927B0)
  {
    unint64_t v0 = sub_1C2A9E328();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EBB927B0);
    }
  }
}

void sub_1C29359AC(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t sub_1C29359F8@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return DiagramConfiguration.LineProperties.init(from:)(a1, a2);
}

uint64_t DiagramConfiguration.LineProperties.init(from:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  sub_1C29367DC(0, &qword_1EBB92510, (uint64_t (*)(void))sub_1C2936054, (uint64_t)&type metadata for DiagramConfiguration.LineProperties.CodingKeys, MEMORY[0x1E4FBBDC0]);
  uint64_t v30 = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v21 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1C2936054();
  sub_1C2A9EA08();
  if (!v2)
  {
    uint64_t v28 = a2;
    uint64_t v29 = v6;
    char v35 = 0;
    sub_1C2935F04();
    sub_1C2A9E7A8();
    int v9 = v31;
    char v35 = 1;
    unint64_t v10 = sub_1C2935F58();
    sub_1C2A9E7A8();
    int v34 = v9;
    int v11 = v31;
    char v35 = 2;
    sub_1C2A9E7A8();
    unint64_t v27 = v10;
    LOBYTE(v10) = v31;
    char v35 = 3;
    sub_1C29360A8();
    sub_1C2A9E7A8();
    int v13 = v31;
    char v35 = 4;
    sub_1C2A9E7A8();
    int v26 = v13;
    int v14 = v31;
    char v35 = 5;
    sub_1C2935FAC();
    sub_1C2A9E7A8();
    int v25 = v31;
    char v35 = 6;
    sub_1C2A9E7A8();
    LODWORD(v27) = v14;
    LOBYTE(v14) = v10;
    LODWORD(v10) = v31;
    char v35 = 7;
    sub_1C2A9E7A8();
    char v15 = v31;
    char v35 = 8;
    sub_1C2936000();
    sub_1C2A9E7A8();
    int v23 = v10;
    int v24 = v11;
    int v22 = v31;
    char v35 = 9;
    sub_1C2936150();
    sub_1C2A9E7A8();
    char v16 = v31;
    char v35 = 10;
    sub_1C29360FC();
    sub_1C2A9E758();
    (*(void (**)(char *, uint64_t))(v29 + 8))(v8, v30);
    uint64_t v17 = v31;
    __int16 v18 = v32;
    char v19 = v33;
    char v20 = v28;
    unsigned char *v28 = v34;
    v20[1] = v24;
    v20[2] = v14;
    v20[3] = v26;
    v20[4] = v27;
    v20[5] = v25;
    v20[6] = v23;
    v20[7] = v15;
    v20[8] = v22;
    v20[9] = v16;
    *((void *)v20 + 2) = v17;
    v20[26] = v19;
    *((_WORD *)v20 + 12) = v18;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

unint64_t sub_1C2935F04()
{
  unint64_t result = qword_1EBB924E8;
  if (!qword_1EBB924E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB924E8);
  }
  return result;
}

unint64_t sub_1C2935F58()
{
  unint64_t result = qword_1EBB92670;
  if (!qword_1EBB92670)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB92670);
  }
  return result;
}

unint64_t sub_1C2935FAC()
{
  unint64_t result = qword_1EBB92630;
  if (!qword_1EBB92630)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB92630);
  }
  return result;
}

unint64_t sub_1C2936000()
{
  unint64_t result = qword_1EBB92610;
  if (!qword_1EBB92610)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB92610);
  }
  return result;
}

unint64_t sub_1C2936054()
{
  unint64_t result = qword_1EBB924A0;
  if (!qword_1EBB924A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB924A0);
  }
  return result;
}

unint64_t sub_1C29360A8()
{
  unint64_t result = qword_1EBB92498;
  if (!qword_1EBB92498)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB92498);
  }
  return result;
}

unint64_t sub_1C29360FC()
{
  unint64_t result = qword_1EBB92598;
  if (!qword_1EBB92598)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB92598);
  }
  return result;
}

unint64_t sub_1C2936150()
{
  unint64_t result = qword_1EBB92568;
  if (!qword_1EBB92568)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB92568);
  }
  return result;
}

uint64_t DiagramConfiguration.ValueFormatter.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v38 = a2;
  unint64_t v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBBDC0];
  sub_1C29367DC(0, &qword_1EBB91410, (uint64_t (*)(void))sub_1C2943F34, (uint64_t)&type metadata for DiagramConfiguration.ValueFormatter.PercentCodingKeys, MEMORY[0x1E4FBBDC0]);
  uint64_t v36 = v4;
  uint64_t v34 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v42 = (char *)&v32 - v5;
  sub_1C29367DC(0, &qword_1EBB91408, (uint64_t (*)(void))sub_1C2944038, (uint64_t)&type metadata for DiagramConfiguration.ValueFormatter.DecimalCodingKeys, v3);
  uint64_t v35 = v6;
  uint64_t v37 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v41 = (char *)&v32 - v7;
  sub_1C29367DC(0, &qword_1EBB91418, (uint64_t (*)(void))sub_1C2943E30, (uint64_t)&type metadata for DiagramConfiguration.ValueFormatter.StandardCodingKeys, v3);
  uint64_t v9 = v8;
  uint64_t v40 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  int v11 = (char *)&v32 - v10;
  sub_1C29367DC(0, &qword_1EBB91400, (uint64_t (*)(void))sub_1C29441C0, (uint64_t)&type metadata for DiagramConfiguration.ValueFormatter.CodingKeys, v3);
  uint64_t v13 = v12;
  uint64_t v39 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  char v15 = (char *)&v32 - v14;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1C29441C0();
  char v16 = v43;
  sub_1C2A9EA08();
  if (!v16)
  {
    uint64_t v33 = v9;
    uint64_t v17 = v40;
    __int16 v18 = v41;
    char v19 = v42;
    uint64_t v43 = a1;
    uint64_t v20 = sub_1C2A9E7B8();
    if (*(void *)(v20 + 16) == 1)
    {
      if (*(unsigned char *)(v20 + 32))
      {
        if (*(unsigned char *)(v20 + 32) == 1)
        {
          char v45 = 1;
          sub_1C2944038();
          sub_1C2A9E6F8();
          uint64_t v21 = v35;
          uint64_t v22 = sub_1C2A9E798();
          uint64_t v23 = v39;
          uint64_t v30 = v22;
          (*(void (**)(char *, uint64_t))(v37 + 8))(v18, v21);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v23 + 8))(v15, v13);
          char v31 = 0;
          goto LABEL_17;
        }
        char v46 = 2;
        sub_1C2943F34();
        sub_1C2A9E6F8();
        (*(void (**)(char *, uint64_t))(v34 + 8))(v19, v36);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v39 + 8))(v15, v13);
        uint64_t v30 = 1;
      }
      else
      {
        char v44 = 0;
        sub_1C2943E30();
        sub_1C2A9E6F8();
        (*(void (**)(char *, uint64_t))(v17 + 8))(v11, v33);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v39 + 8))(v15, v13);
        uint64_t v30 = 0;
      }
      char v31 = 1;
LABEL_17:
      uint64_t v29 = v38;
      *uint64_t v38 = v30;
      *((unsigned char *)v29 + 8) = v31;
      uint64_t v27 = (uint64_t)v43;
      return __swift_destroy_boxed_opaque_existential_1(v27);
    }
    uint64_t v24 = sub_1C2A9E538();
    swift_allocError();
    int v26 = v25;
    sub_1C2A8B814();
    *int v26 = &type metadata for DiagramConfiguration.ValueFormatter;
    sub_1C2A9E708();
    sub_1C2A9E518();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v24 - 8) + 104))(v26, *MEMORY[0x1E4FBBA70], v24);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v39 + 8))(v15, v13);
    a1 = v43;
  }
  uint64_t v27 = (uint64_t)a1;
  return __swift_destroy_boxed_opaque_existential_1(v27);
}

void sub_1C29367DC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

unint64_t DiagramConfiguration.TextAttributes.toTextAttributes()()
{
  switch(*v0)
  {
    case 1:
      uint64_t v2 = sub_1C29376D4(0, (unint64_t *)&qword_1EBB91BA8);
      unint64_t v3 = (void *)sub_1C2A9E258();
      sub_1C2937710();
      uint64_t v4 = swift_allocObject();
      uint64_t v5 = (void **)MEMORY[0x1E4FB06F8];
      *(_OWORD *)(v4 + 16) = xmmword_1C2AA8230;
      uint64_t v6 = *v5;
      *(void *)(v4 + 32) = *v5;
      *(void *)(v4 + 40) = v3;
      uint64_t v7 = (void *)*MEMORY[0x1E4FB0700];
      *(void *)(v4 + 64) = v2;
      *(void *)(v4 + 72) = v7;
      uint64_t v8 = self;
      id v9 = v6;
      id v10 = v3;
      id v11 = v7;
      id v12 = objc_msgSend(v8, sel_whiteColor);
      *(void *)(v4 + 104) = sub_1C29376D4(0, (unint64_t *)&qword_1EBB90D88);
      *(void *)(v4 + 80) = v12;
      goto LABEL_14;
    case 2:
    case 3:
      uint64_t v13 = sub_1C29376D4(0, (unint64_t *)&qword_1EBB91BA8);
      uint64_t v14 = (void *)sub_1C2A9E258();
      sub_1C2937710();
      uint64_t v4 = swift_allocObject();
      *(_OWORD *)(v4 + 16) = xmmword_1C2AA8230;
      char v15 = (void *)*MEMORY[0x1E4FB06F8];
      *(void *)(v4 + 32) = *MEMORY[0x1E4FB06F8];
      *(void *)(v4 + 40) = v14;
      char v16 = (void *)*MEMORY[0x1E4FB0700];
      *(void *)(v4 + 64) = v13;
      *(void *)(v4 + 72) = v16;
      id v17 = v15;
      id v10 = v14;
      id v18 = v16;
      goto LABEL_13;
    case 4:
      unsigned int v19 = objc_msgSend(self, sel_hk_currentDeviceHas4InchScreen);
      uint64_t v20 = (id *)MEMORY[0x1E4FB27C0];
      if (!v19) {
        uint64_t v20 = (id *)MEMORY[0x1E4FB27B8];
      }
      id v21 = *v20;
      uint64_t v22 = sub_1C29376D4(0, (unint64_t *)&qword_1EBB91BA8);
      id v23 = v21;
      uint64_t v24 = (void *)sub_1C2A9E258();

      sub_1C2937710();
      uint64_t v25 = swift_allocObject();
      *(_OWORD *)(v25 + 16) = xmmword_1C2AA8230;
      int v26 = (void *)*MEMORY[0x1E4FB06F8];
      *(void *)(v25 + 32) = *MEMORY[0x1E4FB06F8];
      *(void *)(v25 + 40) = v24;
      uint64_t v27 = (void *)*MEMORY[0x1E4FB0700];
      *(void *)(v25 + 64) = v22;
      *(void *)(v25 + 72) = v27;
      goto LABEL_11;
    case 6:
      unsigned int v28 = objc_msgSend(self, sel_hk_currentDeviceHas4InchScreen);
      uint64_t v29 = (id *)MEMORY[0x1E4FB27C0];
      if (!v28) {
        uint64_t v29 = (id *)MEMORY[0x1E4FB27B8];
      }
      id v30 = *v29;
      uint64_t v31 = sub_1C29376D4(0, (unint64_t *)&qword_1EBB91BA8);
      id v23 = v30;
      uint64_t v24 = (void *)sub_1C2A9E258();

      sub_1C2937710();
      uint64_t v25 = swift_allocObject();
      *(_OWORD *)(v25 + 16) = xmmword_1C2AA8230;
      int v26 = (void *)*MEMORY[0x1E4FB06F8];
      uint64_t v32 = (void **)MEMORY[0x1E4FB0700];
      *(void *)(v25 + 32) = *MEMORY[0x1E4FB06F8];
      *(void *)(v25 + 40) = v24;
      uint64_t v27 = *v32;
      *(void *)(v25 + 64) = v31;
      *(void *)(v25 + 72) = v27;
LABEL_11:
      id v33 = v26;
      id v34 = v24;
      id v35 = v27;
      Class isa = DiagramConfiguration.Color.toColor()().super.isa;
      *(void *)(v25 + 104) = sub_1C29376D4(0, (unint64_t *)&qword_1EBB90D88);
      *(void *)(v25 + 80) = isa;
      unint64_t v37 = sub_1C2937768(v25);

      goto LABEL_15;
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x11:
      uint64_t v47 = sub_1C29376D4(0, (unint64_t *)&qword_1EBB91BA8);
      long long v48 = (void *)sub_1C2A9E258();
      sub_1C2937710();
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1C2AA8230;
      double v50 = (void *)*MEMORY[0x1E4FB06F8];
      double v51 = (void **)MEMORY[0x1E4FB0700];
      *(void *)(inited + 32) = *MEMORY[0x1E4FB06F8];
      *(void *)(inited + 40) = v48;
      uint64_t v52 = *v51;
      *(void *)(inited + 64) = v47;
      *(void *)(inited + 72) = v52;
      id v53 = v50;
      id v54 = v48;
      id v55 = v52;
      Class v56 = DiagramConfiguration.Color.toColor()().super.isa;
      *(void *)(inited + 104) = sub_1C29376D4(0, (unint64_t *)&qword_1EBB90D88);
      *(void *)(inited + 80) = v56;
      unint64_t v57 = sub_1C2937768(inited);

      return v57;
    case 0x12:
    case 0x13:
    case 0x14:
    case 0x15:
      sub_1C2937710();
      uint64_t v58 = swift_initStackObject();
      *(_OWORD *)(v58 + 16) = xmmword_1C2AA8230;
      double v59 = (void *)*MEMORY[0x1E4FB06F8];
      *(void *)(v58 + 32) = *MEMORY[0x1E4FB06F8];
      uint64_t v60 = sub_1C29376D4(0, (unint64_t *)&qword_1EBB91BA8);
      id v61 = v59;
      uint64_t v62 = sub_1C2A9E258();
      CGRect v63 = (void **)MEMORY[0x1E4FB0700];
      *(void *)(v58 + 40) = v62;
      unsigned __int16 v64 = *v63;
      *(void *)(v58 + 64) = v60;
      *(void *)(v58 + 72) = v64;
      id v65 = v64;
      Class v66 = DiagramConfiguration.Color.toColor()().super.isa;
      *(void *)(v58 + 104) = sub_1C29376D4(0, (unint64_t *)&qword_1EBB90D88);
      *(void *)(v58 + 80) = v66;
      return sub_1C2937768(v58);
    case 0x16:
    case 0x17:
      double v1 = 11.0;
      goto LABEL_19;
    case 0x18:
      double v1 = 20.0;
LABEL_19:
      unint64_t result = sub_1C2A86858(v1);
      break;
    default:
      uint64_t v38 = sub_1C29376D4(0, (unint64_t *)&qword_1EBB91BA8);
      uint64_t v39 = (void *)sub_1C2A9E258();
      sub_1C2937710();
      uint64_t v4 = swift_allocObject();
      *(_OWORD *)(v4 + 16) = xmmword_1C2AA8230;
      uint64_t v40 = (void *)*MEMORY[0x1E4FB06F8];
      uint64_t v41 = (void **)MEMORY[0x1E4FB0700];
      *(void *)(v4 + 32) = *MEMORY[0x1E4FB06F8];
      *(void *)(v4 + 40) = v39;
      uint64_t v42 = *v41;
      *(void *)(v4 + 64) = v38;
      *(void *)(v4 + 72) = v42;
      id v43 = v40;
      id v10 = v39;
      id v44 = v42;
LABEL_13:
      Class v45 = DiagramConfiguration.Color.toColor()().super.isa;
      *(void *)(v4 + 104) = sub_1C29376D4(0, (unint64_t *)&qword_1EBB90D88);
      *(void *)(v4 + 80) = v45;
LABEL_14:
      unint64_t v37 = sub_1C2937768(v4);

LABEL_15:
      unint64_t result = v37;
      break;
  }
  return result;
}

uint64_t sub_1C29376D4(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

void sub_1C2937710()
{
  if (!qword_1EBB90DD8)
  {
    sub_1C2937B00();
    unint64_t v0 = sub_1C2A9E8A8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EBB90DD8);
    }
  }
}

unint64_t sub_1C2937768(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    unint64_t v3 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  sub_1C2937B6C();
  uint64_t v2 = sub_1C2A9E688();
  unint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1C2937A9C(v6, (uint64_t)&v13);
    uint64_t v7 = v13;
    unint64_t result = sub_1C2937890(v13);
    if (v9) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(void *)(v3[6] + 8 * result) = v7;
    unint64_t result = (unint64_t)sub_1C2937880(&v14, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v10 = v3[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v3[2] = v12;
    v6 += 40;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

_OWORD *sub_1C2937880(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

unint64_t sub_1C2937890(uint64_t a1)
{
  sub_1C2A9DD28();
  sub_1C2A9E9B8();
  sub_1C2A9DD78();
  uint64_t v2 = sub_1C2A9E9E8();
  swift_bridgeObjectRelease();
  return sub_1C2937924(a1, v2);
}

unint64_t sub_1C2937924(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = sub_1C2A9DD28();
    uint64_t v8 = v7;
    if (v6 == sub_1C2A9DD28() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    char v11 = sub_1C2A9E8D8();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      uint64_t v12 = ~v4;
      unint64_t v5 = (v5 + 1) & v12;
      if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
      {
        while (1)
        {
          uint64_t v13 = sub_1C2A9DD28();
          uint64_t v15 = v14;
          if (v13 == sub_1C2A9DD28() && v15 == v16) {
            break;
          }
          char v18 = sub_1C2A9E8D8();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            unint64_t v5 = (v5 + 1) & v12;
            if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5)) {
              continue;
            }
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

uint64_t sub_1C2937A9C(uint64_t a1, uint64_t a2)
{
  sub_1C2937B00();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1C2937B00()
{
  if (!qword_1EBB90D70)
  {
    type metadata accessor for Key(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EBB90D70);
    }
  }
}

void sub_1C2937B6C()
{
  if (!qword_1EBB91BB8)
  {
    type metadata accessor for Key(255);
    sub_1C2942D7C();
    unint64_t v0 = sub_1C2A9E698();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EBB91BB8);
    }
  }
}

uint64_t sub_1C2937BDC()
{
  return sub_1C2A9E9E8();
}

uint64_t sub_1C2937C8C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return DiagramDataGroup.init(from:)(a1, a2);
}

uint64_t DiagramDataGroup.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  sub_1C2937FF0(0, &qword_1EBB92790, (uint64_t (*)(void))sub_1C293817C, (uint64_t)&type metadata for DiagramDataGroup.CodingKeys, MEMORY[0x1E4FBBDC0]);
  uint64_t v24 = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v22 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1C293817C();
  sub_1C2A9EA08();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v9 = v6;
  sub_1C2938118(0, &qword_1EBB92758, (uint64_t (*)(uint64_t))type metadata accessor for CGPoint, MEMORY[0x1E4FBB320]);
  char v27 = 0;
  sub_1C2938058(&qword_1EBB92760, &qword_1EBB92778);
  uint64_t v10 = v24;
  sub_1C2A9E7A8();
  uint64_t v11 = v28;
  char v26 = 1;
  swift_bridgeObjectRetain();
  uint64_t v12 = sub_1C2A9E718();
  uint64_t v14 = v13;
  uint64_t v22 = v12;
  char v25 = 2;
  swift_bridgeObjectRetain();
  uint64_t v23 = v14;
  uint64_t v15 = sub_1C2A9E718();
  uint64_t v17 = v16;
  uint64_t v18 = v15;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v8, v10);
  swift_bridgeObjectRetain();
  uint64_t v19 = v22;
  uint64_t v20 = v23;
  *a2 = v11;
  a2[1] = v19;
  a2[2] = v20;
  a2[3] = v18;
  a2[4] = v17;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void sub_1C2937FF0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t sub_1C2938058(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1C2938118(255, &qword_1EBB92758, (uint64_t (*)(uint64_t))type metadata accessor for CGPoint, MEMORY[0x1E4FBB320]);
    sub_1C293A290(a2, type metadata accessor for CGPoint);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1C2938118(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

unint64_t sub_1C293817C()
{
  unint64_t result = qword_1EBB92570;
  if (!qword_1EBB92570)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB92570);
  }
  return result;
}

uint64_t destroy for DiagramConfiguration(uint64_t a1)
{
  return sub_1C293821C(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(unsigned char *)(a1 + 88));
}

uint64_t sub_1C293821C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned __int8 a12)
{
  int v12 = a12 >> 5;
  if (v12 == 1 || v12 == 2) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for DiagramData(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t initializeWithCopy for DiagramConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 56);
  uint64_t v11 = *(void *)(a2 + 64);
  uint64_t v13 = *(void *)(a2 + 72);
  uint64_t v14 = *(void *)(a2 + 80);
  unsigned __int8 v15 = *(unsigned char *)(a2 + 88);
  sub_1C293834C(*(void *)a2, v4, v5, v6, v7, v8, v9, v10, v11, v13, v14, v15);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 72) = v13;
  *(void *)(a1 + 80) = v14;
  *(unsigned char *)(a1 + 88) = v15;
  return a1;
}

uint64_t sub_1C293834C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned __int8 a12)
{
  int v12 = a12 >> 5;
  if (v12 == 1 || v12 == 2) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

void sub_1C2938374(void *a1, double a2, double a3, double a4, double a5, uint64_t a6, const char **a7, SEL *a8)
{
  v18.receiver = a1;
  v18.super_class = (Class)type metadata accessor for DiagramImageView();
  uint64_t v14 = *a7;
  id v15 = v18.receiver;
  objc_msgSendSuper2(&v18, v14, a2, a3, a4, a5);
  objc_msgSend(v15, *a8, v18.receiver, v18.super_class);
  sub_1C2938480(v16, v17);
}

id sub_1C293841C(void *a1, uint64_t a2, SEL *a3)
{
  v5.receiver = a1;
  v5.super_class = (Class)type metadata accessor for DiagramImageView();
  return objc_msgSendSuper2(&v5, *a3);
}

uint64_t type metadata accessor for DiagramImageView()
{
  return self;
}

void sub_1C2938480(double a1, double a2)
{
  uint64_t v5 = OBJC_IVAR____TtC19HealthVisualization16DiagramImageView_imageRenderer;
  uint64_t v6 = *(void **)(v2 + OBJC_IVAR____TtC19HealthVisualization16DiagramImageView_imageRenderer);
  if (!v6) {
    goto LABEL_6;
  }
  id v7 = v6;
  id v8 = objc_msgSend(v7, sel_format);
  objc_msgSend(v8, sel_bounds);
  double v10 = v9;
  double v12 = v11;

  if (v10 != a1 || v12 != a2)
  {
LABEL_6:
    id v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB17D8]), sel_initWithSize_, a1, a2);
    id v15 = *(void **)(v2 + v5);
    *(void *)(v2 + v5) = v14;

    uint64_t v16 = v2 + OBJC_IVAR____TtC19HealthVisualization16DiagramImageView_delegate;
    swift_beginAccess();
    if (MEMORY[0x1C87657D0](v16))
    {
      uint64_t v17 = *(void *)(v16 + 8);
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t, uint64_t, double, double))(v17 + 16))(v2, ObjectType, v17, a1, a2);
      swift_unknownObjectRelease();
    }
  }
}

uint64_t initializeWithCopy for TrendConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  unsigned __int8 v8 = *(unsigned char *)(a2 + 32);
  sub_1C29402B8(*(void *)a2, v5, v6, v7, v8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(unsigned char *)(a1 + 32) = v8;
  uint64_t v9 = *(void *)(a2 + 40);
  if (v9 != 1) {
    uint64_t v9 = swift_bridgeObjectRetain();
  }
  uint64_t v10 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = v9;
  *(void *)(a1 + 48) = v10;
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v11 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v11;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1C2938674(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DiagramDateAxisMetricsCalculator.DateTickIntervalStrategy();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void destroy for DiagramDateAxisMetricsCalculator.DateTickIntervalStrategy(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = sub_1C2A9C468();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);

  uint64_t v6 = *(void **)(a1 + a2[9]);
}

void sub_1C2938760(uint64_t a1@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  uint64_t v59 = sub_1C2A9C6E8();
  uint64_t v10 = *(void *)(v59 - 8);
  MEMORY[0x1F4188790](v59);
  double v12 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_1C2A9C868();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C2A9C838();
  id v55 = v16;
  sub_1C2933030(a2, (uint64_t)v16, a4, a5);
  uint64_t v62 = v17;
  if (a1)
  {
    uint64_t v58 = *(void *)(a1 + 16);
    if (v58)
    {
      uint64_t v52 = v14;
      uint64_t v53 = v13;
      uint64_t v54 = a3;
      uint64_t v56 = type metadata accessor for DiagramDateAxisMetricsCalculator.DateTickIntervalStrategy();
      uint64_t v57 = *(int *)(v56 + 40);
      objc_super v18 = (void (**)(char *, uint64_t))(v10 + 8);
      swift_bridgeObjectRetain();
      uint64_t v19 = 0;
      do
      {
        sub_1C2A9C5E8();
        if (a2[v57] == 1)
        {
          uint64_t v20 = (void *)sub_1C2A9C658();
          sub_1C2A9549C();
          id v21 = (void *)sub_1C2A9DFF8();
          id v22 = (id)HKRelativeMonthDateYearText();

          if (!v22)
          {
            __break(1u);
            return;
          }
        }
        else
        {
          uint64_t v23 = *(void **)&a2[*(int *)(v56 + 32)];
          uint64_t v24 = (void *)sub_1C2A9C658();
          id v22 = objc_msgSend(v23, sel_stringFromDate_, v24);
        }
        uint64_t v25 = sub_1C2A9DD28();
        uint64_t v27 = v26;

        sub_1C2A9C5F8();
        uint64_t v29 = v28;
        id v30 = v62;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          id v30 = sub_1C293A104(0, v30[2] + 1, 1, v30);
        }
        unint64_t v32 = v30[2];
        unint64_t v31 = v30[3];
        if (v32 >= v31 >> 1) {
          id v30 = sub_1C293A104((void *)(v31 > 1), v32 + 1, 1, v30);
        }
        ++v19;
        v30[2] = v32 + 1;
        id v33 = &v30[5 * v32];
        v33[4] = v25;
        v33[5] = v27;
        v33[6] = v29;
        v33[7] = 1;
        *((_DWORD *)v33 + 16) = 1148846080;
        uint64_t v62 = v30;
        (*v18)(v12, v59);
      }
      while (v58 != v19);
      swift_bridgeObjectRelease();
      a3 = v54;
      uint64_t v13 = v53;
      uint64_t v14 = v52;
    }
    sub_1C294313C(&v62);
  }
  if ((a2[*(int *)(type metadata accessor for DiagramDateAxisMetricsCalculator.DateTickIntervalStrategy() + 28)] & 1) == 0)
  {
    uint64_t v34 = v14;
    uint64_t v35 = v13;
    uint64_t v36 = a3;
    sub_1C2938C38(a2, (uint64_t)&v63);
    uint64_t v38 = v63;
    uint64_t v37 = v64;
    uint64_t v39 = v65;
    uint64_t v40 = v66;
    int v41 = v67;
    sub_1C2938C38(a2, (uint64_t)v60);
    uint64_t v42 = v60[0];
    uint64_t v43 = v60[1];
    uint64_t v44 = v60[2];
    uint64_t v45 = v60[3];
    int v46 = v61;
    uint64_t v63 = v38;
    uint64_t v64 = v37;
    uint64_t v65 = v39;
    uint64_t v66 = v40;
    int v67 = v41;
    swift_bridgeObjectRetain();
    sub_1C292DD88(0, 0, (uint64_t)&v63);
    swift_bridgeObjectRelease();
    uint64_t v47 = v62;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v47 = sub_1C293A104(0, v47[2] + 1, 1, v47);
    }
    unint64_t v49 = v47[2];
    unint64_t v48 = v47[3];
    uint64_t v14 = v34;
    if (v49 >= v48 >> 1) {
      uint64_t v47 = sub_1C293A104((void *)(v48 > 1), v49 + 1, 1, v47);
    }
    v47[2] = v49 + 1;
    double v50 = &v47[5 * v49];
    v50[4] = v42;
    v50[5] = v43;
    v50[6] = v44;
    v50[7] = v45;
    *((_DWORD *)v50 + 16) = v46;
    uint64_t v62 = v47;
    a3 = v36;
    uint64_t v13 = v35;
  }
  (*(void (**)(char *, uint64_t))(v14 + 8))(v55, v13);
  *(void *)a3 = v62;
  *(double *)(a3 + 8) = a4;
  *(double *)(a3 + 16) = a5;
}

uint64_t sub_1C2938C38@<X0>(unsigned char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_1C2A9C6E8();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C2A9C5E8();
  uint64_t v8 = type metadata accessor for DiagramDateAxisMetricsCalculator.DateTickIntervalStrategy();
  if (a1[*(int *)(v8 + 40)] != 1) {
    goto LABEL_4;
  }
  uint64_t v9 = (void *)sub_1C2A9C658();
  sub_1C2A9549C();
  uint64_t v10 = (void *)sub_1C2A9DFF8();
  a1 = (id)HKRelativeMonthDateYearText();

  if (!a1)
  {
    __break(1u);
LABEL_4:
    uint64_t v11 = *(void **)&a1[*(int *)(v8 + 36)];
    double v12 = (void *)sub_1C2A9C658();
    a1 = objc_msgSend(v11, sel_stringFromDate_, v12);
  }
  uint64_t v13 = sub_1C2A9DD28();
  uint64_t v15 = v14;

  sub_1C2A9C5F8();
  uint64_t v17 = v16;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  *(void *)a2 = v13;
  *(void *)(a2 + 8) = v15;
  *(void *)(a2 + 16) = v17;
  *(void *)(a2 + 24) = 1;
  *(_DWORD *)(a2 + 32) = 1144750080;
  return result;
}

char *sub_1C2938DF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>, double a6@<D0>, double a7@<D1>)
{
  v96 = (unsigned char *)a5;
  uint64_t v94 = a2;
  double v12 = (int *)type metadata accessor for DiagramDateAxisMetricsCalculator.DateTickIntervalStrategy();
  uint64_t v13 = MEMORY[0x1F4188790](v12);
  v89 = (char *)&v87 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  v91 = (char *)&v87 - v16;
  MEMORY[0x1F4188790](v15);
  v92 = (char *)&v87 - v17;
  sub_1C2939D3C(0, (unint64_t *)&qword_1EBB92530, MEMORY[0x1E4F27D68]);
  MEMORY[0x1F4188790](v18 - 8);
  v98 = (char *)&v87 - v19;
  sub_1C2939D3C(0, &qword_1EBB92528, MEMORY[0x1E4F27CA0]);
  MEMORY[0x1F4188790](v20 - 8);
  v100 = (char *)&v87 - v21;
  uint64_t v95 = sub_1C2A9C468();
  uint64_t v22 = *(void *)(v95 - 8);
  uint64_t v23 = MEMORY[0x1F4188790](v95);
  v87 = (char *)&v87 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = MEMORY[0x1F4188790](v23);
  v88 = (char *)&v87 - v26;
  uint64_t v27 = MEMORY[0x1F4188790](v25);
  v90 = (char *)&v87 - v28;
  MEMORY[0x1F4188790](v27);
  v93 = (char *)&v87 - v29;
  uint64_t v30 = sub_1C2A9C6E8();
  uint64_t v31 = *(void *)(v30 - 8);
  uint64_t v32 = MEMORY[0x1F4188790](v30);
  uint64_t v34 = (char *)&v87 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = (char *)MEMORY[0x1F4188790](v32);
  uint64_t v37 = (char *)&v87 - v36;
  double v38 = (double)a3 * 60.0;
  uint64_t v99 = a1;
  if (a4)
  {
    sub_1C2A9C5E8();
    sub_1C2A9C5E8();
    char v39 = sub_1C2A9C828();
    uint64_t v40 = *(void (**)(char *, uint64_t))(v31 + 8);
    v40(v34, v30);
    uint64_t result = (char *)((uint64_t (*)(char *, uint64_t))v40)(v37, v30);
    char v41 = v39 ^ 1;
  }
  else
  {
    char v41 = 0;
  }
  double v42 = a7 - a6;
  if (v42 <= v38)
  {
    sub_1C2A947B8(v94, a3, v42);
    uint64_t v57 = sub_1C2A9C868();
    uint64_t v58 = *(void *)(v57 - 8);
    uint64_t v59 = v100;
    (*(void (**)(char *, uint64_t, uint64_t))(v58 + 16))(v100, v99, v57);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v58 + 56))(v59, 0, 1, v57);
    uint64_t v60 = sub_1C2A9C8B8();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v60 - 8) + 56))(v98, 1, 1, v60);
    int v61 = v93;
    sub_1C2A9C438();
    uint64_t v62 = *(void **)(v97 + 24);
    if (v62)
    {
      uint64_t v63 = *(void **)(v97 + 24);
    }
    else
    {
      uint64_t result = (char *)(id)HKDateFormatterFromTemplate();
      uint64_t v63 = result;
      if (!result)
      {
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
        goto LABEL_61;
      }
    }
    id v71 = v62;
    if (v41) {
      id v72 = (id)HKDateFormatterFromTemplate();
    }
    else {
      id v72 = 0;
    }
    uint64_t v73 = v92;
    (*(void (**)(char *, char *, uint64_t))(v22 + 32))(&v92[v12[5]], v61, v95);
    *(void *)&v73[v12[6]] = 1;
    v73[v12[7]] = 0;
    *(void *)&v73[v12[8]] = v63;
    if (!v72) {
      id v72 = v63;
    }
    *(void *)&v73[v12[9]] = v72;
    goto LABEL_41;
  }
  uint64_t v43 = *MEMORY[0x1E4F296F0];
  if ((unint64_t)(*MEMORY[0x1E4F296F0] - 0x1000000000000000) >> 61 != 7)
  {
    __break(1u);
    goto LABEL_56;
  }
  double v44 = (double)(8 * v43);
  if (v38 > v44)
  {
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  if (v38 <= v42 && v42 <= v44)
  {
    sub_1C2A947B8(v94, a3, v42 / 60.0);
    uint64_t v64 = sub_1C2A9C868();
    uint64_t v65 = *(void *)(v64 - 8);
    uint64_t v66 = v100;
    (*(void (**)(char *, uint64_t, uint64_t))(v65 + 16))(v100, v99, v64);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v65 + 56))(v66, 0, 1, v64);
    uint64_t v67 = sub_1C2A9C8B8();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v67 - 8) + 56))(v98, 1, 1, v67);
    uint64_t v68 = v90;
    sub_1C2A9C438();
    uint64_t v69 = *(void **)(v97 + 24);
    if (v69)
    {
      uint64_t v70 = *(void **)(v97 + 24);
LABEL_35:
      id v77 = v69;
      if (v41) {
        id v78 = (id)HKDateFormatterFromTemplate();
      }
      else {
        id v78 = 0;
      }
      uint64_t v73 = v91;
      (*(void (**)(char *, char *, uint64_t))(v22 + 32))(&v91[v12[5]], v68, v95);
      *(void *)&v73[v12[6]] = 1;
      v73[v12[7]] = 0;
      *(void *)&v73[v12[8]] = v70;
      if (!v78) {
        id v78 = v70;
      }
      *(void *)&v73[v12[9]] = v78;
LABEL_41:
      *uint64_t v73 = 0;
      v73[v12[10]] = 0;
      __int16 v79 = v73;
      return (char *)sub_1C292EFE8((uint64_t)v79, (uint64_t)v96);
    }
    uint64_t result = (char *)(id)HKDateFormatterFromTemplate();
    uint64_t v70 = result;
    if (result) {
      goto LABEL_35;
    }
    goto LABEL_60;
  }
  BOOL v46 = __OFADD__(*MEMORY[0x1E4F296E8], v43);
  uint64_t v47 = *MEMORY[0x1E4F296E8] + v43;
  uint64_t v48 = v99;
  unint64_t v49 = v100;
  if (v46) {
    goto LABEL_57;
  }
  double v50 = (double)v47;
  if (v44 > (double)v47)
  {
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  uint64_t v51 = sub_1C2A9C868();
  uint64_t v52 = *(void *)(v51 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v52 + 16))(v49, v48, v51);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v52 + 56))(v49, 0, 1, v51);
  uint64_t v53 = sub_1C2A9C8B8();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v53 - 8) + 56))(v98, 1, 1, v53);
  if (v42 >= v44 && v42 <= v50)
  {
    char v74 = v88;
    sub_1C2A9C438();
    char v75 = *(void **)(v97 + 24);
    if (v75)
    {
      uint64_t v76 = *(void **)(v97 + 24);
    }
    else
    {
      uint64_t result = (char *)(id)HKDateFormatterFromTemplate();
      uint64_t v76 = result;
      if (!result)
      {
LABEL_62:
        __break(1u);
        return result;
      }
    }
    id v84 = v75;
    if (v41) {
      id v85 = (id)HKDateFormatterFromTemplate();
    }
    else {
      id v85 = 0;
    }
    v86 = v89;
    (*(void (**)(char *, char *, uint64_t))(v22 + 32))(&v89[v12[5]], v74, v95);
    *(void *)&v86[v12[6]] = 1;
    v86[v12[7]] = 0;
    *(void *)&v86[v12[8]] = v76;
    if (!v85) {
      id v85 = v76;
    }
    __int16 v79 = v89;
    *(void *)&v89[v12[9]] = v85;
    *__int16 v79 = 1;
    v79[v12[10]] = 0;
    return (char *)sub_1C292EFE8((uint64_t)v79, (uint64_t)v96);
  }
  id v55 = v87;
  sub_1C2A9C438();
  uint64_t v56 = *(void **)(v97 + 24);
  if (v56)
  {
    v100 = *(char **)(v97 + 24);
  }
  else
  {
    uint64_t result = (char *)(id)HKDateFormatterFromTemplate();
    if (!result)
    {
LABEL_61:
      __break(1u);
      goto LABEL_62;
    }
    uint64_t v56 = 0;
    v100 = result;
  }
  char v80 = v96;
  (*(void (**)(unsigned char *, char *, uint64_t))(v22 + 32))(&v96[v12[5]], v55, v95);
  *(void *)&v80[v12[6]] = 12;
  v80[v12[7]] = 0;
  uint64_t v81 = v100;
  *(void *)&v80[v12[8]] = v100;
  *(void *)&v80[v12[9]] = v81;
  *char v80 = 1;
  v80[v12[10]] = 1;
  id v82 = v56;
  v83 = v100;
  return v83;
}

uint64_t sub_1C29399F4(uint64_t a1, double a2, double a3, uint64_t a4, unsigned char *a5, uint64_t *a6, uint64_t a7, void (*a8)(void *__return_ptr, char *), uint64_t a9, uint64_t *a10)
{
  uint64_t v33 = a10;
  sub_1C2939D3C(0, &qword_1EBB92520, MEMORY[0x1E4F27928]);
  MEMORY[0x1F4188790]();
  uint64_t v19 = (char *)&v34[-1] - v18;
  uint64_t v20 = sub_1C2A9C6E8();
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790]();
  uint64_t v23 = (char *)&v34[-1] - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C2939D90(a1, (uint64_t)v19);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20) == 1) {
    return sub_1C296B074((uint64_t)v19);
  }
  (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v23, v19, v20);
  sub_1C2A9C5F8();
  if (v25 < a3)
  {
    uint64_t v26 = *a6 + 1;
    if (__OFADD__(*a6, 1))
    {
      __break(1u);
    }
    else
    {
      *a6 = v26;
      uint64_t v27 = *(void *)(a7
                      + *(int *)(type metadata accessor for DiagramDateAxisMetricsCalculator.DateTickIntervalStrategy()
                               + 24));
      if (v27)
      {
        if (v26 != 0x8000000000000000 || v27 != -1)
        {
          if (v26 % v27) {
            return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v23, v20);
          }
          a8(v34, v23);
          a9 = v34[0];
          a7 = v34[1];
          a3 = *(double *)&v34[2];
          a5 = (unsigned char *)v34[3];
          int v10 = v35;
          uint64_t v28 = v33;
          uint64_t v26 = *v33;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t *v28 = v26;
          if (isUniquelyReferenced_nonNull_native)
          {
LABEL_10:
            unint64_t v31 = *(void *)(v26 + 16);
            unint64_t v30 = *(void *)(v26 + 24);
            if (v31 >= v30 >> 1)
            {
              uint64_t v26 = (uint64_t)sub_1C293A104((void *)(v30 > 1), v31 + 1, 1, (void *)v26);
              *uint64_t v33 = v26;
            }
            *(void *)(v26 + 16) = v31 + 1;
            uint64_t v32 = v26 + 40 * v31;
            *(void *)(v32 + 32) = a9;
            *(void *)(v32 + 40) = a7;
            *(double *)(v32 + 48) = a3;
            *(void *)(v32 + 56) = a5;
            *(_DWORD *)(v32 + 64) = v10;
            return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v23, v20);
          }
LABEL_18:
          uint64_t v26 = (uint64_t)sub_1C293A104(0, *(void *)(v26 + 16) + 1, 1, (void *)v26);
          *uint64_t v33 = v26;
          goto LABEL_10;
        }
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
    }
    __break(1u);
    goto LABEL_17;
  }
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v23, v20);
  *a5 = 1;
  return result;
}

void sub_1C2939CE8(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_1C2A9E328();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_1C2939D3C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_1C2A9E328();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_1C2939D90(uint64_t a1, uint64_t a2)
{
  sub_1C2939E10(0, &qword_1EBB92520, MEMORY[0x1E4F27928]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1C2939E10(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_1C2A9E328();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_1C2939E64(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_1C2A9E328();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_1C2939EB8(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_1C2A9E328();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_1C2939F0C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for DiagramDateAxisMetricsCalculator.DateTickIntervalStrategy() - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  return sub_1C2939FD8(v4, a1);
}

uint64_t type metadata accessor for DiagramDateAxisMetricsCalculator.DateTickIntervalStrategy()
{
  uint64_t result = qword_1EBB90A38;
  if (!qword_1EBB90A38) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1C2939FD8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = (int *)type metadata accessor for DiagramDateAxisMetricsCalculator.DateTickIntervalStrategy();
  if (*(unsigned char *)(a1 + v4[7]) != 1) {
    goto LABEL_5;
  }
  if (*(unsigned char *)(a1 + v4[10]) != 1)
  {
    uint64_t v11 = *(void **)(a1 + v4[8]);
    double v12 = (void *)sub_1C2A9C658();
    id v7 = objc_msgSend(v11, sel_stringFromDate_, v12);

    goto LABEL_7;
  }
  uint64_t v5 = (void *)sub_1C2A9C658();
  sub_1C2A9549C();
  uint64_t v6 = (void *)sub_1C2A9DFF8();
  id v7 = (id)HKRelativeMonthDateYearText();

  if (v7)
  {
LABEL_7:
    uint64_t v8 = sub_1C2A9DD28();
    uint64_t v9 = v13;

    uint64_t v10 = 1;
    goto LABEL_8;
  }
  __break(1u);
LABEL_5:
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 2;
LABEL_8:
  uint64_t result = sub_1C2A9C5F8();
  *(void *)a2 = v8;
  *(void *)(a2 + 8) = v9;
  *(void *)(a2 + 16) = v15;
  *(void *)(a2 + 24) = v10;
  *(_DWORD *)(a2 + 32) = 1144750080;
  return result;
}

void *sub_1C293A104(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1C293A244(0, (unint64_t *)&qword_1EBB90DD0, (uint64_t)&type metadata for DiagramAxisLabel, MEMORY[0x1E4FBBE00]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      double v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4]) {
          memmove(v12, a4 + 4, 40 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      double v12 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_1C2941BC4(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void sub_1C293A244(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t sub_1C293A290(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1C293A2D8(CGContext *a1, double *a2, unsigned __int8 *a3, CGFloat *a4, double a5)
{
  CGFloat v8 = a2[1];
  CGFloat v9 = a2[2];
  CGFloat v10 = a2[3];
  CGFloat v11 = a2[4];
  CGFloat v12 = a2[5];
  CGFloat v13 = a2[6];
  uint64_t v71 = *a3;
  unsigned __int8 v14 = a3[1];
  unsigned __int8 v15 = a3[3];
  int v16 = a3[4];
  uint64_t v17 = (char)a3[5];
  int v18 = (char)a3[6];
  CGFloat v19 = *a4;
  sub_1C293CBC4();
  v97.CGFloat a = v8;
  v97.b = v9;
  double v72 = v11;
  double v73 = v10;
  v97.c = v10;
  v97.d = v11;
  CGFloat v81 = v13;
  CGFloat v82 = v12;
  v97.tdouble x = v12;
  v97.tdouble y = v13;
  double v20 = 0.0;
  v98.double x = 0.0;
  double y = CGPointApplyAffineTransform(v98, &v97).y;
  if ((*(unsigned char *)(v5 + 168) & 1) == 0) {
    double v20 = *(double *)(v5 + 160);
  }
  if (v17 && v17 != 1) {
    char v78 = 1;
  }
  else {
    char v78 = sub_1C2A9E8D8();
  }
  swift_bridgeObjectRelease();
  double v74 = v9;
  double v75 = v8;
  if (v18 && v18 != 1) {
    char v70 = 1;
  }
  else {
    char v70 = sub_1C2A9E8D8();
  }
  swift_bridgeObjectRelease();
  float v22 = -2.0;
  if (v16) {
    float v22 = -1.0;
  }
  float v23 = flt_1C2AAC964[v17] + v22;
  if (v23 < 0.0) {
    float v24 = 0.0;
  }
  else {
    float v24 = v23 * 0.5;
  }
  LOBYTE(v97.a) = v14;
  DiagramConfiguration.TextAttributes.toTextAttributes()();
  Mutable = CGPathCreateMutable();
  v97.CGFloat a = v19;
  swift_bridgeObjectRetain_n();
  sub_1C29430D0((uint64_t *)&v97);
  int v67 = v16;
  unsigned __int8 v68 = v15;
  c = a1;
  swift_bridgeObjectRelease();
  CGFloat a = v97.a;
  uint64_t v80 = *(void *)(*(void *)&v97.a + 16);
  if (!v80)
  {
    swift_release();
    goto LABEL_55;
  }
  uint64_t v76 = Mutable;
  unint64_t v27 = 0;
  uint64_t v79 = *(void *)&v97.a + 32;
  uint64_t v28 = (double *)MEMORY[0x1E4FBC860];
  recCGAffineTransform t1 = y + v20 + v24 + 2.0;
  CGFloat v77 = v97.a;
  CGFloat v30 = v74;
  CGFloat v29 = v8;
  CGFloat v32 = v72;
  CGFloat v31 = v73;
  while (1)
  {
    if (v27 >= *(void *)(*(void *)&a + 16)) {
      goto LABEL_61;
    }
    uint64_t v33 = v79 + 40 * v27;
    uint64_t v34 = *(void *)(v33 + 8);
    unint64_t v35 = *(void *)(v33 + 24);
    v99.double x = *(CGFloat *)(v33 + 16);
    v84.CGFloat a = v29;
    v84.b = v30;
    v84.c = v31;
    v84.d = v32;
    v84.tdouble x = v82;
    v84.tdouble y = v81;
    v99.double y = 0.0;
    *(void *)&double v36 = *(_OWORD *)&CGPointApplyAffineTransform(v99, &v84);
    if (v35 >= 2)
    {
      if (v35 != 2) {
        goto LABEL_62;
      }
      if ((v70 & 1) == 0)
      {
        v97.b = 0.0;
        v97.c = 0.0;
        v97.CGFloat a = 1.0;
        v97.d = 1.0;
        v97.tdouble x = 0.0;
        v97.tdouble y = 0.0;
        swift_bridgeObjectRetain();
        sub_1C2A9E0F8();
        sub_1C2A9E118();
        if (!v34) {
          goto LABEL_19;
        }
        goto LABEL_35;
      }
LABEL_27:
      swift_bridgeObjectRetain();
      if (!v34) {
        goto LABEL_19;
      }
      goto LABEL_35;
    }
    if (v78) {
      goto LABEL_27;
    }
    switch(v71)
    {
      case 1:
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        goto LABEL_32;
      default:
        char v37 = sub_1C2A9E8D8();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        if (v37)
        {
LABEL_32:
          uint64_t v86 = 0;
          uint64_t v87 = 0;
          uint64_t v85 = 0x3FF0000000000000;
          uint64_t v88 = 0x3FF0000000000000;
          uint64_t v89 = 0;
          uint64_t v90 = 0;
          sub_1C2A9E0F8();
          sub_1C2A9E118();
          if (!v34) {
            goto LABEL_19;
          }
        }
        else
        {
          uint64_t v92 = 0;
          uint64_t v93 = 0;
          uint64_t v91 = 0x3FF0000000000000;
          uint64_t v94 = 0x3FF0000000000000;
          uint64_t v95 = 0;
          uint64_t v96 = 0;
          sub_1C2A9E0F8();
          sub_1C2A9E118();
          if (!v34) {
            goto LABEL_19;
          }
        }
        break;
    }
LABEL_35:
    double v38 = (void *)sub_1C2A9DCF8();
    type metadata accessor for Key(0);
    sub_1C293B0B0((unint64_t *)&qword_1EBB91B90, type metadata accessor for Key);
    char v39 = (void *)sub_1C2A9DC58();
    objc_msgSend(v38, sel_sizeWithAttributes_, v39);
    double v41 = v40;
    CGFloat v43 = v42;

    double v44 = v36 - v41 * 0.5;
    double v45 = v36 + v41 * 0.5;
    if (v44 >= 0.0)
    {
      double v46 = 0.0;
      if (v45 <= a5) {
        goto LABEL_40;
      }
    }
    else if (v45 <= a5)
    {
      double v46 = 0.0 - v44;
      goto LABEL_40;
    }
    double v46 = a5 - v45;
LABEL_40:
    double v47 = v44 + v46;
    uint64_t v48 = *((void *)v28 + 2);
    if (!v48) {
      goto LABEL_48;
    }
    double v49 = a5;
    CGFloat v51 = v28[4];
    CGFloat v50 = v28[5];
    CGFloat v53 = v28[6];
    CGFloat v52 = v28[7];
    swift_bridgeObjectRetain();
    v100.origin.double x = v47;
    v100.origin.double y = rect1;
    v100.size.double width = v41;
    v100.size.double height = v43;
    v102.origin.double x = v51;
    v102.origin.double y = v50;
    v102.size.double width = v53;
    v102.size.double height = v52;
    if (!CGRectIntersectsRect(v100, v102)) {
      break;
    }
LABEL_18:

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    a5 = v49;
    CGFloat v30 = v74;
    CGFloat v29 = v75;
    CGFloat v32 = v72;
    CGFloat v31 = v73;
    CGFloat a = v77;
LABEL_19:
    if (++v27 == v80)
    {
      swift_release();
      Mutable = v76;
LABEL_55:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!CGPathIsEmpty(Mutable))
      {
        CGContextSetBlendMode(c, kCGBlendModeNormal);
        CGContextSetLineCap(c, kCGLineCapRound);
        double v64 = 2.0;
        if (v67) {
          double v64 = 1.0;
        }
        CGContextSetLineWidth(c, v64);
        LOBYTE(v84.a) = v68;
        Class isa = DiagramConfiguration.Color.toColor()().super.isa;
        uint64_t v66 = (CGColor *)[(objc_class *)isa CGColor];

        CGContextSetStrokeColorWithColor(c, v66);
        CGContextAddPath(c, Mutable);
        CGContextStrokePath(c);
      }

      return;
    }
  }
  uint64_t v54 = 0;
  id v55 = v28 + 11;
  uint64_t v56 = v48 - 1;
  while (1)
  {
    if (v56 == v54)
    {
      swift_bridgeObjectRelease();
      a5 = v49;
      CGFloat v30 = v74;
      CGFloat v29 = v75;
      CGFloat v32 = v72;
      CGFloat v31 = v73;
LABEL_48:
      uint64_t v59 = (void *)sub_1C2A9DCF8();
      swift_bridgeObjectRelease();
      uint64_t v60 = (void *)sub_1C2A9DC58();
      objc_msgSend(v59, sel_drawAtPoint_withAttributes_, v60, v47, rect1);

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v28 = (double *)sub_1C293AD70(0, *((void *)v28 + 2) + 1, 1, v28);
      }
      CGFloat a = v77;
      unint64_t v62 = *((void *)v28 + 2);
      unint64_t v61 = *((void *)v28 + 3);
      if (v62 >= v61 >> 1) {
        uint64_t v28 = (double *)sub_1C293AD70((void *)(v61 > 1), v62 + 1, 1, v28);
      }
      *((void *)v28 + 2) = v62 + 1;
      uint64_t v63 = &v28[4 * v62];
      v63[4] = v47;
      v63[5] = rect1;
      v63[6] = v41;
      v63[7] = v43;

      goto LABEL_19;
    }
    if ((unint64_t)++v54 >= *((void *)v28 + 2)) {
      break;
    }
    uint64_t v57 = v55 + 4;
    v101.origin.double x = v47;
    v101.origin.double y = rect1;
    v101.size.double width = v41;
    v101.size.double height = v43;
    BOOL v58 = CGRectIntersectsRect(v101, *(CGRect *)(v55 - 3));
    id v55 = v57;
    if (v58) {
      goto LABEL_18;
    }
  }
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  sub_1C2A9E628();
  __break(1u);
  swift_release();
  __break(1u);
}

void type metadata accessor for Key(uint64_t a1)
{
}

void *sub_1C293AD70(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1C293AEAC(0, &qword_1EBB90DE0, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, MEMORY[0x1E4FBBE00]);
      CGFloat v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      CGFloat v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      CGFloat v10 = (void *)MEMORY[0x1E4FBC860];
      CGFloat v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1C29419EC(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void sub_1C293AEAC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_1C293AF10(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v6 = result;
    uint64_t v7 = *a4;
    uint64_t v8 = *a4 + 40 * a3 - 40;
LABEL_5:
    uint64_t v9 = v6;
    uint64_t v10 = v8;
    while (1)
    {
      if (*(float *)(v10 + 72) == *(float *)(v10 + 32))
      {
        if (*(double *)(v10 + 56) >= *(double *)(v10 + 16)) {
          goto LABEL_4;
        }
      }
      else
      {
        type metadata accessor for UILayoutPriority(0);
        sub_1C293B0B0(&qword_1EBB8FAB8, type metadata accessor for UILayoutPriority);
        uint64_t result = sub_1C2A9DCB8();
        if ((result & 1) == 0) {
          goto LABEL_4;
        }
      }
      if (!v7) {
        break;
      }
      uint64_t v11 = v10 + 40;
      uint64_t v12 = *(void *)(v10 + 56);
      uint64_t v13 = *(void *)(v10 + 64);
      int v14 = *(_DWORD *)(v10 + 72);
      long long v15 = *(_OWORD *)(v10 + 40);
      long long v16 = *(_OWORD *)(v10 + 16);
      *(_OWORD *)(v10 + 40) = *(_OWORD *)v10;
      *(_OWORD *)(v10 + 56) = v16;
      uint64_t v17 = *(void *)(v10 + 32);
      *(_OWORD *)uint64_t v10 = v15;
      *(void *)(v10 + 16) = v12;
      *(void *)(v10 + 24) = v13;
      *(_DWORD *)(v10 + 32) = v14;
      v10 -= 40;
      ++v9;
      *(void *)(v11 + 32) = v17;
      if (v4 == v9)
      {
LABEL_4:
        ++v4;
        v8 += 40;
        if (v4 == a2) {
          return result;
        }
        goto LABEL_5;
      }
    }
    __break(1u);
  }
  return result;
}

void sub_1C293B068(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    ForeignTypeMetadatCGFloat a = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t sub_1C293B0B0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for UILayoutPriority(uint64_t a1)
{
}

unint64_t sub_1C293B10C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    uint64_t v4 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v4) {
    return 0;
  }
  uint64_t v7 = 4 * v4;
  unint64_t v8 = 15;
  while (sub_1C2A9DDF8() != a1 || v9 != a2)
  {
    char v10 = sub_1C2A9E8D8();
    swift_bridgeObjectRelease();
    if (v10) {
      return v8;
    }
    unint64_t v8 = sub_1C2A9DD98();
    if (v7 == v8 >> 14) {
      return 0;
    }
  }
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t static TrendConfiguration.configurations(for:)(void *a1)
{
  id v1 = objc_msgSend(a1, sel_code);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  switch((unint64_t)v1)
  {
    case 3uLL:
      sub_1C293BDFC(0, &qword_1EBB8FAE8);
      uint64_t v4 = swift_allocObject();
      uint64_t v2 = v4;
      *(_OWORD *)(v4 + 16) = xmmword_1C2AA6B00;
      *(void *)(v4 + 32) = 5;
      *(void *)(v4 + 40) = &unk_1F1DEABE0;
      *(_OWORD *)(v4 + 48) = xmmword_1C2AAE420;
      *(unsigned char *)(v4 + 64) = 0;
      *(void *)(v4 + 72) = 1;
      *(void *)(v4 + 80) = &unk_1F1DEAC08;
      char v5 = &unk_1F1DEAC30;
      goto LABEL_32;
    case 4uLL:
    case 5uLL:
    case 6uLL:
    case 9uLL:
    case 0xBuLL:
    case 0xDuLL:
    case 0x10uLL:
    case 0x11uLL:
    case 0x12uLL:
    case 0x13uLL:
    case 0x14uLL:
    case 0x15uLL:
    case 0x16uLL:
    case 0x17uLL:
    case 0x18uLL:
    case 0x19uLL:
    case 0x1AuLL:
    case 0x1BuLL:
    case 0x1CuLL:
    case 0x1DuLL:
    case 0x1EuLL:
    case 0x1FuLL:
    case 0x20uLL:
    case 0x21uLL:
    case 0x22uLL:
    case 0x23uLL:
    case 0x24uLL:
    case 0x25uLL:
    case 0x26uLL:
    case 0x27uLL:
    case 0x28uLL:
    case 0x29uLL:
    case 0x2AuLL:
    case 0x2BuLL:
    case 0x2CuLL:
    case 0x2DuLL:
    case 0x2EuLL:
    case 0x2FuLL:
    case 0x30uLL:
    case 0x31uLL:
    case 0x32uLL:
    case 0x33uLL:
    case 0x34uLL:
    case 0x35uLL:
    case 0x36uLL:
    case 0x37uLL:
    case 0x38uLL:
    case 0x39uLL:
    case 0x3AuLL:
    case 0x3BuLL:
    case 0x3CuLL:
    case 0x40uLL:
    case 0x41uLL:
    case 0x42uLL:
    case 0x43uLL:
    case 0x44uLL:
    case 0x45uLL:
    case 0x47uLL:
    case 0x48uLL:
    case 0x49uLL:
    case 0x4AuLL:
    case 0x4CuLL:
    case 0x4DuLL:
    case 0x4EuLL:
    case 0x50uLL:
    case 0x51uLL:
    case 0x52uLL:
    case 0x53uLL:
    case 0x54uLL:
    case 0x55uLL:
    case 0x56uLL:
    case 0x57uLL:
    case 0x58uLL:
    case 0x59uLL:
    case 0x5AuLL:
    case 0x5BuLL:
    case 0x5CuLL:
    case 0x5DuLL:
    case 0x5EuLL:
    case 0x5FuLL:
    case 0x60uLL:
    case 0x61uLL:
    case 0x62uLL:
    case 0x64uLL:
    case 0x66uLL:
    case 0x67uLL:
    case 0x68uLL:
    case 0x69uLL:
    case 0x6AuLL:
    case 0x6BuLL:
    case 0x6CuLL:
    case 0x6DuLL:
    case 0x6EuLL:
    case 0x6FuLL:
    case 0x70uLL:
    case 0x72uLL:
    case 0x73uLL:
    case 0x74uLL:
    case 0x75uLL:
    case 0x77uLL:
    case 0x78uLL:
    case 0x79uLL:
    case 0x7AuLL:
    case 0x7BuLL:
    case 0x7EuLL:
    case 0x7FuLL:
    case 0x80uLL:
    case 0x81uLL:
    case 0x82uLL:
    case 0x83uLL:
    case 0x84uLL:
    case 0x85uLL:
    case 0x86uLL:
    case 0x87uLL:
    case 0x88uLL:
      return v2;
    case 7uLL:
      sub_1C293BDFC(0, &qword_1EBB8FAE8);
      uint64_t v4 = swift_allocObject();
      uint64_t v2 = v4;
      *(_OWORD *)(v4 + 16) = xmmword_1C2AA6B00;
      *(void *)(v4 + 32) = 5;
      *(void *)(v4 + 40) = &unk_1F1DEB1A0;
      *(_OWORD *)(v4 + 48) = xmmword_1C2AAE420;
      *(unsigned char *)(v4 + 64) = 0;
      *(void *)(v4 + 72) = 1;
      *(void *)(v4 + 80) = &unk_1F1DEB1C8;
      *(unsigned char *)(v4 + 88) = 0;
      *(void *)(v4 + 96) = &unk_1F1DEB1F0;
      long long v6 = xmmword_1C2AAE460;
      goto LABEL_34;
    case 8uLL:
      sub_1C293BDFC(0, &qword_1EBB8FAE8);
      uint64_t v4 = swift_allocObject();
      uint64_t v2 = v4;
      *(_OWORD *)(v4 + 16) = xmmword_1C2AA6B00;
      *(void *)(v4 + 32) = 5;
      *(void *)(v4 + 40) = &unk_1F1DEACD0;
      *(_OWORD *)(v4 + 48) = xmmword_1C2AAE420;
      *(unsigned char *)(v4 + 64) = 0;
      *(void *)(v4 + 72) = 1;
      *(void *)(v4 + 80) = &unk_1F1DEACF8;
      *(unsigned char *)(v4 + 88) = 0;
      *(void *)(v4 + 96) = &unk_1F1DEAD20;
      long long v6 = xmmword_1C2AAE4F0;
      goto LABEL_34;
    case 0xAuLL:
      sub_1C293BDFC(0, &qword_1EBB8FAE8);
      uint64_t v4 = swift_allocObject();
      uint64_t v2 = v4;
      *(_OWORD *)(v4 + 16) = xmmword_1C2AA6B00;
      *(void *)(v4 + 32) = 5;
      *(void *)(v4 + 40) = &unk_1F1DEA9D8;
      *(_OWORD *)(v4 + 48) = xmmword_1C2AAE420;
      *(unsigned char *)(v4 + 64) = 0;
      *(void *)(v4 + 72) = 1;
      *(void *)(v4 + 80) = &unk_1F1DEAA00;
      *(unsigned char *)(v4 + 88) = 0;
      *(void *)(v4 + 96) = &unk_1F1DEAA28;
      long long v6 = xmmword_1C2AAE530;
      goto LABEL_34;
    case 0xCuLL:
      sub_1C293BDFC(0, &qword_1EBB8FAE8);
      uint64_t v4 = swift_allocObject();
      uint64_t v2 = v4;
      *(_OWORD *)(v4 + 16) = xmmword_1C2AA6B00;
      *(void *)(v4 + 32) = 5;
      *(void *)(v4 + 40) = &unk_1F1DEADC0;
      *(_OWORD *)(v4 + 48) = xmmword_1C2AAE420;
      *(unsigned char *)(v4 + 64) = 0;
      *(void *)(v4 + 72) = 1;
      *(void *)(v4 + 80) = &unk_1F1DEADE8;
      *(unsigned char *)(v4 + 88) = 0;
      *(void *)(v4 + 96) = &unk_1F1DEAE10;
      long long v6 = xmmword_1C2AAE4E0;
      goto LABEL_34;
    case 0xEuLL:
      sub_1C293BDFC(0, &qword_1EBB8FAE8);
      uint64_t v4 = swift_allocObject();
      uint64_t v2 = v4;
      *(_OWORD *)(v4 + 16) = xmmword_1C2AA6B00;
      *(void *)(v4 + 32) = 5;
      *(void *)(v4 + 40) = &unk_1F1DEAFE8;
      *(_OWORD *)(v4 + 48) = xmmword_1C2AAE420;
      *(unsigned char *)(v4 + 64) = 0;
      *(void *)(v4 + 72) = 1;
      *(void *)(v4 + 80) = &unk_1F1DEB010;
      *(unsigned char *)(v4 + 88) = 0;
      *(void *)(v4 + 96) = &unk_1F1DEB038;
      long long v6 = xmmword_1C2AAE4B0;
      goto LABEL_34;
    case 0xFuLL:
      sub_1C293BDFC(0, &qword_1EBB8FAE8);
      uint64_t v4 = swift_allocObject();
      uint64_t v2 = v4;
      *(_OWORD *)(v4 + 16) = xmmword_1C2AA6B00;
      *(void *)(v4 + 32) = 5;
      *(void *)(v4 + 40) = &unk_1F1DEAB68;
      *(_OWORD *)(v4 + 48) = xmmword_1C2AAE420;
      *(unsigned char *)(v4 + 64) = 0;
      *(void *)(v4 + 72) = 1;
      *(void *)(v4 + 80) = &unk_1F1DEAB90;
      uint64_t v7 = &unk_1F1DEABB8;
      goto LABEL_26;
    case 0x3DuLL:
      sub_1C293BDFC(0, &qword_1EBB8FAE8);
      uint64_t v4 = swift_allocObject();
      uint64_t v2 = v4;
      *(_OWORD *)(v4 + 16) = xmmword_1C2AA6B00;
      *(void *)(v4 + 32) = 5;
      *(void *)(v4 + 40) = &unk_1F1DEB060;
      *(_OWORD *)(v4 + 48) = xmmword_1C2AAE420;
      *(unsigned char *)(v4 + 64) = 0;
      *(void *)(v4 + 72) = 1;
      *(void *)(v4 + 80) = &unk_1F1DEB088;
      *(unsigned char *)(v4 + 88) = 0;
      *(void *)(v4 + 96) = &unk_1F1DEB0B0;
      long long v6 = xmmword_1C2AAE4A0;
      goto LABEL_34;
    case 0x3EuLL:
      sub_1C293BDFC(0, &qword_1EBB8FAE8);
      uint64_t v4 = swift_allocObject();
      uint64_t v2 = v4;
      *(_OWORD *)(v4 + 16) = xmmword_1C2AA6B00;
      *(void *)(v4 + 32) = 5;
      *(void *)(v4 + 40) = &unk_1F1DEAC58;
      *(_OWORD *)(v4 + 48) = xmmword_1C2AAE420;
      *(unsigned char *)(v4 + 64) = 0;
      *(void *)(v4 + 72) = 1;
      *(void *)(v4 + 80) = &unk_1F1DEAC80;
      *(unsigned char *)(v4 + 88) = 0;
      *(void *)(v4 + 96) = &unk_1F1DEACA8;
      long long v6 = xmmword_1C2AAE500;
      goto LABEL_34;
    case 0x3FuLL:
      sub_1C293BDFC(0, &qword_1EBB8FAE8);
      uint64_t v8 = swift_allocObject();
      *(_OWORD *)(v8 + 16) = xmmword_1C2AA6B00;
      uint64_t v9 = sub_1C2A9E248();
      int64_t v10 = *(void *)(v9 + 16);
      if (v10)
      {
        uint64_t v23 = v8;
        sub_1C29419AC(0, v10, 0);
        uint64_t v11 = v2;
        uint64_t result = sub_1C2942E88(v9);
        int64_t v13 = result;
        int v15 = v14;
        char v17 = v16 & 1;
        do
        {
          if (v13 < 0 || v13 >= 1 << *(unsigned char *)(v9 + 32))
          {
            __break(1u);
LABEL_39:
            __break(1u);
LABEL_40:
            __break(1u);
            return result;
          }
          if (((*(void *)(v9 + 56 + (((unint64_t)v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v13) & 1) == 0) {
            goto LABEL_39;
          }
          if (*(_DWORD *)(v9 + 36) != v15) {
            goto LABEL_40;
          }
          uint64_t v18 = *(void *)(*(void *)(v9 + 48) + 8 * v13);
          unint64_t v20 = *(void *)(v11 + 16);
          unint64_t v19 = *(void *)(v11 + 24);
          if (v20 >= v19 >> 1) {
            sub_1C29419AC(v19 > 1, v20 + 1, 1);
          }
          *(void *)(v11 + 16) = v20 + 1;
          *(void *)(v11 + 8 * v20 + 32) = v18;
          uint64_t result = sub_1C293BE44(v13, v15, v17 & 1, v9);
          int64_t v13 = result;
          int v15 = v21;
          char v17 = v22 & 1;
          --v10;
        }
        while (v10);
        sub_1C2942E7C(result, v21, v22 & 1);
        swift_bridgeObjectRelease();
        uint64_t v8 = v23;
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v11 = MEMORY[0x1E4FBC860];
      }
      *(_OWORD *)(v8 + 32) = xmmword_1C2AAE470;
      *(unsigned char *)(v8 + 64) = 16;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(void *)(v8 + 72) = v11;
      *(void *)(v8 + 80) = &unk_1F1DEB150;
      *(unsigned char *)(v8 + 88) = 0;
      *(void *)(v8 + 96) = &unk_1F1DEB178;
      *(_OWORD *)(v8 + 104) = xmmword_1C2AAE480;
      *(unsigned char *)(v8 + 120) = 0;
      return v8;
    case 0x46uLL:
      sub_1C293BDFC(0, &qword_1EBB8FAE8);
      uint64_t v4 = swift_allocObject();
      uint64_t v2 = v4;
      *(_OWORD *)(v4 + 16) = xmmword_1C2AA6B00;
      *(void *)(v4 + 32) = 5;
      *(void *)(v4 + 40) = &unk_1F1DEAAC8;
      *(_OWORD *)(v4 + 48) = xmmword_1C2AAE420;
      *(unsigned char *)(v4 + 64) = 0;
      *(void *)(v4 + 72) = &unk_1F1DEAAF0;
      *(void *)(v4 + 80) = &unk_1F1DEAB18;
      *(unsigned char *)(v4 + 88) = 0;
      *(void *)(v4 + 96) = &unk_1F1DEAB40;
      long long v6 = xmmword_1C2AAE520;
      goto LABEL_34;
    case 0x4BuLL:
      sub_1C293BDFC(0, &qword_1EBB8FAE8);
      uint64_t v4 = swift_allocObject();
      uint64_t v2 = v4;
      *(_OWORD *)(v4 + 16) = xmmword_1C2AA6B00;
      *(void *)(v4 + 32) = 5;
      *(void *)(v4 + 40) = &unk_1F1DEAA50;
      *(_OWORD *)(v4 + 48) = xmmword_1C2AAE420;
      *(unsigned char *)(v4 + 64) = 0;
      *(void *)(v4 + 72) = 1;
      *(void *)(v4 + 80) = &unk_1F1DEAA78;
      uint64_t v7 = &unk_1F1DEAAA0;
LABEL_26:
      *(unsigned char *)(v4 + 88) = 0;
      *(void *)(v4 + 96) = v7;
      long long v6 = xmmword_1C2AAE510;
      goto LABEL_34;
    case 0x4FuLL:
      sub_1C293BDFC(0, &qword_1EBB8FAE8);
      uint64_t v4 = swift_allocObject();
      uint64_t v2 = v4;
      *(_OWORD *)(v4 + 16) = xmmword_1C2AA6B00;
      *(void *)(v4 + 32) = 5;
      *(void *)(v4 + 40) = &unk_1F1DEB308;
      *(_OWORD *)(v4 + 48) = xmmword_1C2AAE420;
      *(unsigned char *)(v4 + 64) = 0;
      *(void *)(v4 + 72) = 1;
      *(void *)(v4 + 80) = &unk_1F1DEB330;
      *(unsigned char *)(v4 + 88) = 0;
      *(void *)(v4 + 96) = &unk_1F1DEB358;
      long long v6 = xmmword_1C2AAE430;
      goto LABEL_34;
    case 0x63uLL:
      sub_1C293BDFC(0, &qword_1EBB8FAE8);
      uint64_t v4 = swift_allocObject();
      uint64_t v2 = v4;
      *(_OWORD *)(v4 + 16) = xmmword_1C2AA6B00;
      *(void *)(v4 + 32) = 5;
      *(void *)(v4 + 40) = &unk_1F1DEAF70;
      *(_OWORD *)(v4 + 48) = xmmword_1C2AAE420;
      *(unsigned char *)(v4 + 64) = 0;
      *(void *)(v4 + 72) = 1;
      *(void *)(v4 + 80) = &unk_1F1DEAF98;
      *(unsigned char *)(v4 + 88) = 0;
      *(void *)(v4 + 96) = &unk_1F1DEAFC0;
      long long v6 = xmmword_1C2AAE4C0;
      goto LABEL_34;
    case 0x65uLL:
    case 0x71uLL:
      sub_1C293BDFC(0, &qword_1EBB8FAE8);
      uint64_t v2 = swift_allocObject();
      *(_OWORD *)(v2 + 16) = xmmword_1C2AA6B00;
      *(void *)(v2 + 32) = 5;
      *(void *)(v2 + 40) = &unk_1F1DEAD48;
      *(_OWORD *)(v2 + 48) = xmmword_1C2AAE420;
      *(unsigned char *)(v2 + 64) = 0;
      *(void *)(v2 + 72) = 1;
      *(void *)(v2 + 80) = &unk_1F1DEAD70;
      *(unsigned char *)(v2 + 88) = 0;
      *(void *)(v2 + 104) = 0;
      *(void *)(v2 + 112) = 0;
      *(void *)(v2 + 96) = &unk_1F1DEAD98;
      *(unsigned char *)(v2 + 120) = 1;
      return v2;
    case 0x76uLL:
      sub_1C293BDFC(0, &qword_1EBB8FAE8);
      uint64_t v4 = swift_allocObject();
      uint64_t v2 = v4;
      *(_OWORD *)(v4 + 16) = xmmword_1C2AA6B00;
      *(void *)(v4 + 32) = 5;
      *(void *)(v4 + 40) = &unk_1F1DEB0D8;
      *(_OWORD *)(v4 + 48) = xmmword_1C2AAE420;
      *(unsigned char *)(v4 + 64) = 0;
      *(void *)(v4 + 72) = 1;
      *(void *)(v4 + 80) = &unk_1F1DEB100;
      *(unsigned char *)(v4 + 88) = 0;
      *(void *)(v4 + 96) = &unk_1F1DEB128;
      long long v6 = xmmword_1C2AAE490;
      goto LABEL_34;
    case 0x7CuLL:
      sub_1C293BDFC(0, &qword_1EBB8FAE8);
      uint64_t v4 = swift_allocObject();
      uint64_t v2 = v4;
      *(_OWORD *)(v4 + 16) = xmmword_1C2AA6B00;
      *(void *)(v4 + 32) = 5;
      *(void *)(v4 + 40) = &unk_1F1DEB218;
      *(_OWORD *)(v4 + 48) = xmmword_1C2AAE420;
      *(unsigned char *)(v4 + 64) = 0;
      *(void *)(v4 + 72) = 1;
      *(void *)(v4 + 80) = &unk_1F1DEB240;
      *(unsigned char *)(v4 + 88) = 0;
      *(void *)(v4 + 96) = &unk_1F1DEB268;
      long long v6 = xmmword_1C2AAE450;
      goto LABEL_34;
    case 0x7DuLL:
      sub_1C293BDFC(0, &qword_1EBB8FAE8);
      uint64_t v4 = swift_allocObject();
      uint64_t v2 = v4;
      *(_OWORD *)(v4 + 16) = xmmword_1C2AA6B00;
      *(void *)(v4 + 32) = 5;
      *(void *)(v4 + 40) = &unk_1F1DEAEF8;
      *(_OWORD *)(v4 + 48) = xmmword_1C2AAE420;
      *(unsigned char *)(v4 + 64) = 0;
      *(void *)(v4 + 72) = 1;
      *(void *)(v4 + 80) = &unk_1F1DEAF20;
      char v5 = &unk_1F1DEAF48;
LABEL_32:
      *(unsigned char *)(v4 + 88) = 0;
      *(void *)(v4 + 96) = v5;
      long long v6 = xmmword_1C2AAE4D0;
      goto LABEL_34;
    case 0x89uLL:
      sub_1C293BDFC(0, &qword_1EBB8FAE8);
      uint64_t v4 = swift_allocObject();
      uint64_t v2 = v4;
      *(_OWORD *)(v4 + 16) = xmmword_1C2AA6B00;
      *(void *)(v4 + 32) = 5;
      *(void *)(v4 + 40) = &unk_1F1DEB290;
      *(_OWORD *)(v4 + 48) = xmmword_1C2AAE420;
      *(unsigned char *)(v4 + 64) = 0;
      *(void *)(v4 + 72) = 1;
      *(void *)(v4 + 80) = &unk_1F1DEB2B8;
      *(unsigned char *)(v4 + 88) = 0;
      *(void *)(v4 + 96) = &unk_1F1DEB2E0;
      long long v6 = xmmword_1C2AAE440;
LABEL_34:
      *(_OWORD *)(v4 + 104) = v6;
      *(unsigned char *)(v4 + 120) = 0;
      return v2;
    default:
      if (v1 == (id)266)
      {
        sub_1C293BDFC(0, &qword_1EBB8FAE8);
        uint64_t v2 = swift_allocObject();
        *(_OWORD *)(v2 + 16) = xmmword_1C2AA6B00;
        unint64_t v3 = sub_1C292F344((uint64_t)&unk_1F1DEAEB0);
        *(void *)(v2 + 32) = 5;
        *(void *)(v2 + 40) = &unk_1F1DEAE38;
        *(_OWORD *)(v2 + 48) = xmmword_1C2AAE420;
        *(unsigned char *)(v2 + 64) = 0;
        *(void *)(v2 + 72) = 1;
        *(void *)(v2 + 80) = &unk_1F1DEAE60;
        *(unsigned char *)(v2 + 88) = 0;
        *(void *)(v2 + 96) = &unk_1F1DEAE88;
        *(void *)(v2 + 104) = v3;
        *(void *)(v2 + 112) = 0x401C000000000000;
        *(unsigned char *)(v2 + 120) = 0;
      }
      return v2;
  }
}

void sub_1C293BDB0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void sub_1C293BDFC(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = sub_1C2A9E8A8();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

int64_t sub_1C293BE44(int64_t result, int a2, char a3, uint64_t a4)
{
  if (a3) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (uint64_t result = 1 << *(unsigned char *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  unint64_t v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  }
  unint64_t v9 = v5 + 1;
  unint64_t v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    unint64_t v11 = *(void *)(v6 + 8 * v9);
    if (v11) {
      return __clz(__rbit64(v11)) + (v9 << 6);
    }
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      unint64_t v11 = *(void *)(v6 + 8 * v9);
      if (v11) {
        return __clz(__rbit64(v11)) + (v9 << 6);
      }
      while (v10 - 3 != v5)
      {
        unint64_t v11 = *(void *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C293BF28(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xEF65676172657641;
  unint64_t v3 = 0x6574657263736964;
  uint64_t v4 = a1;
  unint64_t v5 = 0x6574657263736964;
  unint64_t v6 = 0xEF65676172657641;
  switch(v4)
  {
    case 1:
      unsigned int v7 = 1768843597;
      goto LABEL_4;
    case 2:
      unsigned int v7 = 1769496909;
LABEL_4:
      unint64_t v6 = v7 | 0xEF6D756D00000000;
      break;
    case 3:
      unint64_t v5 = 0x6974616C756D7563;
      unint64_t v6 = 0xED00006D75536576;
      break;
    case 4:
      unint64_t v5 = 0x6563655274736F6DLL;
      unint64_t v6 = 0xEA0000000000746ELL;
      break;
    case 5:
      unint64_t v6 = 0xE800000000000000;
      unint64_t v5 = 0x6E6F697461727564;
      break;
    case 6:
      unint64_t v5 = 0x4465676172657661;
      unint64_t v6 = 0xEF6E6F6974617275;
      break;
    case 7:
      unint64_t v6 = 0xE800000000000000;
      unint64_t v5 = 0x65636E6573657270;
      break;
    case 8:
      unint64_t v5 = 0xD00000000000001ALL;
      unint64_t v6 = 0x80000001C2AB52A0;
      break;
    case 9:
      unint64_t v6 = 0x80000001C2AB52C0;
      unint64_t v5 = 0xD000000000000019;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      unsigned int v8 = 1768843597;
      goto LABEL_15;
    case 2:
      unsigned int v8 = 1769496909;
LABEL_15:
      unint64_t v2 = v8 | 0xEF6D756D00000000;
      if (v5 != 0x6574657263736964) {
        goto LABEL_32;
      }
      goto LABEL_29;
    case 3:
      unint64_t v2 = 0xED00006D75536576;
      if (v5 != 0x6974616C756D7563) {
        goto LABEL_32;
      }
      goto LABEL_29;
    case 4:
      unint64_t v2 = 0xEA0000000000746ELL;
      if (v5 != 0x6563655274736F6DLL) {
        goto LABEL_32;
      }
      goto LABEL_29;
    case 5:
      unint64_t v2 = 0xE800000000000000;
      if (v5 != 0x6E6F697461727564) {
        goto LABEL_32;
      }
      goto LABEL_29;
    case 6:
      unint64_t v2 = 0xEF6E6F6974617275;
      if (v5 != 0x4465676172657661) {
        goto LABEL_32;
      }
      goto LABEL_29;
    case 7:
      unint64_t v2 = 0xE800000000000000;
      if (v5 != 0x65636E6573657270) {
        goto LABEL_32;
      }
      goto LABEL_29;
    case 8:
      unint64_t v3 = 0xD00000000000001ALL;
      unint64_t v2 = 0x80000001C2AB52A0;
      goto LABEL_28;
    case 9:
      unint64_t v2 = 0x80000001C2AB52C0;
      if (v5 != 0xD000000000000019) {
        goto LABEL_32;
      }
      goto LABEL_29;
    default:
LABEL_28:
      if (v5 != v3) {
        goto LABEL_32;
      }
LABEL_29:
      if (v6 == v2) {
        char v9 = 1;
      }
      else {
LABEL_32:
      }
        char v9 = sub_1C2A9E8D8();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v9 & 1;
  }
}

uint64_t sub_1C293C224(uint64_t result, uint64_t a2, unsigned char *a3)
{
  uint64_t v63 = *(void *)(a2 + 16);
  if (!v63) {
    return result;
  }
  uint64_t v4 = a2;
  CGFloat v52 = *(double *)result;
  CGFloat v58 = *(double *)(result + 40);
  CGFloat v59 = *(double *)(result + 32);
  CGFloat v56 = *(double *)(result + 56);
  CGFloat v57 = *(double *)(result + 48);
  CGFloat v54 = *(double *)(result + 72);
  CGFloat v55 = *(double *)(result + 64);
  char v61 = a3[8];
  char v5 = a3[7];
  char v64 = a3[6];
  char v6 = a3[5];
  unsigned int v7 = *(CGContext **)(result + 16);
  uint64_t v8 = *(void *)(v3 + 16);
  unint64_t v62 = *(void *)(v8 + 16);
  id v51 = *(id *)(result + 24);
  swift_bridgeObjectRetain();
  unint64_t v9 = 0;
  uint64_t v60 = v8;
  unint64_t v10 = (char *)(v8 + 40);
  uint64_t v53 = v4;
  while (1)
  {
    uint64_t v11 = *(void *)(v4 + 8 * v9 + 32);
    if (v9 >= v62) {
      goto LABEL_8;
    }
    if (v9 >= *(void *)(v60 + 16)) {
      break;
    }
    char v6 = *(v10 - 3);
    char v64 = *(v10 - 2);
    char v5 = *(v10 - 1);
    char v61 = *v10;
LABEL_8:
    uint64_t v12 = *(void *)(v11 + 16);
    swift_bridgeObjectRetain();
    if (v12)
    {
      unint64_t v13 = sub_1C293DDF4(2u);
      uint64_t v14 = MEMORY[0x1E4FBC860];
      if (v15)
      {
        uint64_t v14 = *(void *)(*(void *)(v11 + 56) + 40 * v13);
        swift_bridgeObjectRetain();
      }
    }
    else
    {
      uint64_t v14 = MEMORY[0x1E4FBC860];
    }
    ++v9;
    LOBYTE(v65.a) = v64;
    v16.super.Class isa = DiagramConfiguration.Color.toColor()().super.isa;
    LOBYTE(v65.a) = v5;
    double v17 = DiagramConfiguration.LineWidth.toPoints()();
    switch(v6)
    {
      case 1:
        swift_bridgeObjectRelease();
        if (!*(void *)(v11 + 16)) {
          goto LABEL_3;
        }
        unint64_t v28 = sub_1C293DDF4(2u);
        if ((v29 & 1) == 0) {
          goto LABEL_3;
        }
        CGFloat v30 = (uint64_t *)(*(void *)(v11 + 56) + 40 * v28);
        uint64_t v31 = *v30;
        uint64_t v32 = v30[2];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        if (!*(void *)(v31 + 16)) {
          goto LABEL_30;
        }
        CGFloat v33 = *(double *)(v31 + 40);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v65.CGFloat a = v59;
        v65.b = v58;
        v65.c = v57;
        v65.d = v56;
        v65.tdouble x = v55;
        v65.tCGFloat y = v54;
        v77.double x = 0.0;
        v77.CGFloat y = v33;
        CGPointApplyAffineTransform(v77, &v65);
        v65.CGFloat a = v59;
        v65.b = v58;
        v65.c = v57;
        v65.d = v56;
        v65.tdouble x = v55;
        v65.tCGFloat y = v54;
        v78.double x = 0.0;
        v78.CGFloat y = v33;
        CGFloat y = CGPointApplyAffineTransform(v78, &v65).y;
        uint64_t v4 = v53;
        if (!v32) {
          goto LABEL_25;
        }
        LOBYTE(v65.a) = v61;
        swift_bridgeObjectRetain();
        static DiagramGenerator.computeRightMarginAnnotationBounds(at:annotation:textAttributes:)(v32, (char *)&v65, (uint64_t)v68, v52, y);
        swift_bridgeObjectRelease();
        sub_1C2934C44((uint64_t)v68, (uint64_t)&v73);
        if (v74 == 1)
        {
          swift_bridgeObjectRelease();
LABEL_25:
          CGContextSetLineWidth(v7, v17);
          CGContextSetLineCap(v7, kCGLineCapRound);
          unint64_t v35 = (CGColor *)[(objc_class *)v16.super.isa CGColor];
          CGContextSetStrokeColorWithColor(v7, v35);

          sub_1C2A9E028();
LABEL_28:
          sub_1C2A9E038();
          CGContextStrokePath(v7);
        }
        else
        {
          double x = v73.origin.x;
          double v42 = v73.origin.y;
          CGRectGetWidth(v73);
          CGContextSetLineWidth(v7, v17);
          CGContextSetLineCap(v7, kCGLineCapRound);
          CGFloat v43 = (CGColor *)[(objc_class *)v16.super.isa CGColor];
          CGContextSetStrokeColorWithColor(v7, v43);

          sub_1C2A9E028();
          sub_1C2A9E038();
          CGContextStrokePath(v7);
          double v44 = (void *)sub_1C2A9DCF8();
          swift_bridgeObjectRelease();
          LOBYTE(v65.a) = v61;
          DiagramConfiguration.TextAttributes.toTextAttributes()();
          type metadata accessor for Key(0);
          sub_1C2942D7C();
          double v45 = (void *)sub_1C2A9DC58();
          swift_bridgeObjectRelease();
          objc_msgSend(v44, sel_drawAtPoint_withAttributes_, v45, x, v42);

          uint64_t v4 = v53;
        }
        goto LABEL_4;
      case 2:
        goto LABEL_44;
      case 3:
        swift_bridgeObjectRelease();
        if (!*(void *)(v14 + 16)) {
          goto LABEL_3;
        }
        CGFloat v36 = *(double *)(v14 + 32);
        swift_bridgeObjectRelease();
        v81.origin.double x = sub_1C293CBC4();
        v79.CGFloat y = CGRectGetMinY(v81);
        v65.CGFloat a = v59;
        v65.b = v58;
        v65.c = v57;
        v65.d = v56;
        v65.tdouble x = v55;
        v65.tCGFloat y = v54;
        v79.double x = v36;
        CGPointApplyAffineTransform(v79, &v65);
        v82.origin.double x = sub_1C293CBC4();
        v80.CGFloat y = CGRectGetMaxY(v82);
        v65.CGFloat a = v59;
        v65.b = v58;
        v65.c = v57;
        v65.d = v56;
        v65.tdouble x = v55;
        v65.tCGFloat y = v54;
        v80.double x = v36;
        CGPointApplyAffineTransform(v80, &v65);
        CGContextSetLineWidth(v7, v17);
        CGContextSetLineCap(v7, kCGLineCapRound);
        char v37 = (CGColor *)[(objc_class *)v16.super.isa CGColor];
        CGContextSetStrokeColorWithColor(v7, v37);

        sub_1C2A9E028();
        goto LABEL_28;
      default:
        swift_bridgeObjectRelease();
        if (!*(void *)(v11 + 16) || (unint64_t v18 = sub_1C293DDF4(2u), (v19 & 1) == 0))
        {
LABEL_3:

          swift_bridgeObjectRelease();
          goto LABEL_4;
        }
        unint64_t v20 = (uint64_t *)(*(void *)(v11 + 56) + 40 * v18);
        uint64_t v21 = *v20;
        uint64_t v22 = v20[2];
        uint64_t v23 = v20[4];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        if (!*(void *)(v21 + 16))
        {
LABEL_30:

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_37:
          swift_bridgeObjectRelease();
          uint64_t v4 = v53;
          goto LABEL_4;
        }
        CGFloat v24 = *(double *)(v21 + 40);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v65.CGFloat a = v59;
        v65.b = v58;
        v65.c = v57;
        v65.d = v56;
        v65.tdouble x = v55;
        v65.tCGFloat y = v54;
        v75.double x = 0.0;
        v75.CGFloat y = v24;
        CGPoint v25 = CGPointApplyAffineTransform(v75, &v65);
        v65.CGFloat a = v59;
        v65.b = v58;
        v65.c = v57;
        v65.d = v56;
        v65.tdouble x = v55;
        v65.tCGFloat y = v54;
        v76.double x = 0.0;
        v76.CGFloat y = v24;
        CGPointApplyAffineTransform(v76, &v65);
        CGContextSetLineWidth(v7, v17);
        CGContextSetLineCap(v7, kCGLineCapRound);
        uint64_t v26 = (CGColor *)[(objc_class *)v16.super.isa CGColor];
        CGContextSetStrokeColorWithColor(v7, v26);

        sub_1C2A9E028();
        sub_1C2A9E038();
        CGContextStrokePath(v7);
        char v27 = v61;
        if (v22)
        {
          LOBYTE(v65.a) = v61;
          swift_bridgeObjectRetain();
          static DiagramGenerator.computeLeftMarginAnnotationBounds(at:annotation:above:textAttributes:)(v22, 1, (char *)&v65, (uint64_t)v66, 0.0, v25.y);
          sub_1C2934C44((uint64_t)v66, (uint64_t)v71);
          if (v72 == 1)
          {
            swift_bridgeObjectRelease();
          }
          else
          {
            double v38 = *(double *)v71;
            double v39 = *(double *)&v71[1];
            id v50 = (id)sub_1C2A9DCF8();
            swift_bridgeObjectRelease();
            LOBYTE(v65.a) = v61;
            DiagramConfiguration.TextAttributes.toTextAttributes()();
            type metadata accessor for Key(0);
            sub_1C2942D7C();
            double v40 = (void *)sub_1C2A9DC58();
            swift_bridgeObjectRelease();
            objc_msgSend(v50, sel_drawAtPoint_withAttributes_, v40, v38, v39);
          }
          char v27 = v61;
        }
        if (!v23)
        {

          goto LABEL_37;
        }
        LOBYTE(v65.a) = v27;
        static DiagramGenerator.computeLeftMarginAnnotationBounds(at:annotation:above:textAttributes:)(v22, 0, (char *)&v65, (uint64_t)v67, 0.0, v25.y);
        swift_bridgeObjectRelease();
        sub_1C2934C44((uint64_t)v67, (uint64_t)v69);
        if (v70)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          double v46 = *(double *)v69;
          double v47 = *(double *)&v69[1];
          uint64_t v48 = (void *)sub_1C2A9DCF8();
          swift_bridgeObjectRelease();
          LOBYTE(v65.a) = v27;
          DiagramConfiguration.TextAttributes.toTextAttributes()();
          type metadata accessor for Key(0);
          sub_1C2942D7C();
          double v49 = (void *)sub_1C2A9DC58();
          swift_bridgeObjectRelease();
          objc_msgSend(v48, sel_drawAtPoint_withAttributes_, v49, v46, v47);
        }
        uint64_t v4 = v53;
LABEL_4:
        v10 += 32;
        if (v63 == v9)
        {

          return swift_bridgeObjectRelease();
        }
        break;
    }
  }
  __break(1u);
LABEL_44:
  uint64_t result = sub_1C2A9E628();
  __break(1u);
  return result;
}

double sub_1C293CBC4()
{
  uint64_t v1 = *(void *)(v0 + 16);
  double v2 = 0.0;
  if (v1) {
    double v2 = *(double *)(v0 + 24);
  }
  uint64_t v3 = *(void *)(v0 + 40);
  double v5 = *(double *)(v0 + 80);
  CGFloat v4 = *(double *)(v0 + 88);
  CGFloat v7 = *(double *)(v0 + 96);
  CGFloat v6 = *(double *)(v0 + 104);
  if (v1)
  {
    if (v2 >= v5) {
      double v8 = *(double *)(v0 + 80);
    }
    else {
      double v8 = v2;
    }
    CGRectGetMaxX(*(CGRect *)(v0 + 80));
    if (v3) {
      goto LABEL_8;
    }
LABEL_10:
    v11.origin.double x = v5;
    v11.origin.CGFloat y = v4;
    v11.size.double width = v7;
    v11.size.double height = v6;
    CGRectGetHeight(v11);
    return v8;
  }
  CGRectGetWidth(*(CGRect *)(v0 + 80));
  double v8 = v5;
  if (!v3) {
    goto LABEL_10;
  }
LABEL_8:
  v10.origin.double x = v5;
  v10.origin.CGFloat y = v4;
  v10.size.double width = v7;
  v10.size.double height = v6;
  CGRectGetMaxY(v10);
  return v8;
}

void sub_1C293CCD4(void *a1, uint64_t a2, uint64_t a3, CGFloat a4, CGFloat a5)
{
  uint64_t v5 = a3;
  CGFloat v6 = *(void **)a2;
  double v8 = *(double *)(a2 + 8);
  double v7 = *(double *)(a2 + 16);
  double v10 = *(double *)(a2 + 24);
  double v9 = *(double *)(a2 + 32);
  double v11 = *(double *)(a2 + 40);
  double v12 = *(double *)(a2 + 48);
  uint64_t v13 = *(void *)(a3 + 16);
  uint64_t v92 = *(void *)(v13 + 16);
  CGFloat v96 = v7;
  CGFloat v97 = v8;
  CGFloat v94 = v9;
  CGFloat v95 = v10;
  CGFloat v93 = v11;
  CGFloat v116 = v12;
  if (v92)
  {
    CGFloat v105 = *(double *)(a3 + 64);
    CGFloat v106 = *(double *)(a3 + 56);
    CGFloat v103 = *(double *)(a3 + 80);
    CGFloat v104 = *(double *)(a3 + 72);
    char v102 = *(unsigned char *)(a3 + 88);
    CGFloat v14 = *(double *)(a3 + 96);
    uint64_t v117 = *(void *)(*(void *)&v14 + 16);
    uint64_t v91 = v13 + 32;
    double v15 = *(double *)(MEMORY[0x1E4F1DB20] + 8);
    double v110 = *MEMORY[0x1E4F1DB20];
    double v17 = *(double *)(MEMORY[0x1E4F1DB20] + 16);
    double v16 = *(double *)(MEMORY[0x1E4F1DB20] + 24);
    CGAffineTransform v84 = *(void **)a2;
    id v18 = v6;
    swift_bridgeObjectRetain();
    unint64_t v19 = 0;
    CGFloat v20 = v15;
    double v108 = v17;
    double v109 = v15;
    CGFloat v21 = v17;
    CGFloat v22 = v16;
    double v107 = v16;
    uint64_t v89 = v13;
    id v90 = v18;
    while (v19 < *(void *)(v13 + 16))
    {
      uint64_t v28 = v91 + 32 * v19;
      uint64_t v113 = *(unsigned __int8 *)(v28 + 5);
      char rect_8 = *(unsigned char *)(v28 + 8);
      t1.CGFloat a = v106;
      t1.CGFloat b = v105;
      t1.CGFloat c = v104;
      t1.CGFloat d = v103;
      LOBYTE(t1.tx) = v102;
      t1.tCGFloat y = v14;
      swift_bridgeObjectRetain();
      __C::CGRect v126 = DiagramData.diagramBounds(forceNonZeroSize:)(1);
      CGFloat x = v110;
      double v30 = v110;
      CGFloat y = v20;
      CGFloat v32 = v21;
      CGFloat height = v22;
      if (v117)
      {
        CGFloat width = v126.size.width;
        unint64_t rect = v19;
        swift_bridgeObjectRetain();
        uint64_t v35 = 0;
        CGFloat y = v20;
        CGFloat v32 = v21;
        CGFloat height = v22;
        uint64_t v36 = v117;
        while (1)
        {
          uint64_t v37 = *(void *)(*(void *)&v14 + 8 * v35 + 32);
          if (*(void *)(v37 + 16))
          {
            swift_bridgeObjectRetain();
            unint64_t v38 = sub_1C293DDF4(2u);
            if (v39)
            {
              double v40 = *(double **)(*(void *)(v37 + 56) + 40 * v38);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
              uint64_t v41 = *((void *)v40 + 2);
              if (v41)
              {
                CGFloat v43 = v40[4];
                CGFloat v42 = v40[5];
                if (v41 == 1)
                {
                  uint64_t v44 = 0;
                }
                else
                {
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  uint64_t v44 = (uint64_t)v40;
                }
                v130.size.CGFloat height = 0.0;
                v127.origin.CGFloat x = x;
                v127.origin.CGFloat y = y;
                v127.size.CGFloat width = v32;
                v127.size.CGFloat height = height;
                v130.origin.CGFloat x = v43;
                v130.origin.CGFloat y = v42;
                v130.size.CGFloat width = width;
                CGRect v128 = CGRectUnion(v127, v130);
                CGFloat x = v128.origin.x;
                CGFloat y = v128.origin.y;
                CGFloat v32 = v128.size.width;
                CGFloat height = v128.size.height;
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                sub_1C293D518(v44);
                uint64_t v36 = v117;
                goto LABEL_8;
              }
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            swift_bridgeObjectRelease();
          }
LABEL_8:
          if (v36 == ++v35)
          {
            swift_bridgeObjectRelease();
            uint64_t v13 = v89;
            id v18 = v90;
            CGFloat v21 = v108;
            CGFloat v20 = v109;
            CGFloat v22 = v107;
            unint64_t v19 = rect;
            double v30 = x;
            CGFloat x = v110;
            break;
          }
        }
      }
      rectCGFloat a = v30;
      CGFloat v45 = y;
      CGFloat v46 = v32;
      CGFloat v47 = height;
      v131.origin.CGFloat x = x;
      v131.origin.CGFloat y = v20;
      v131.size.CGFloat width = v21;
      v131.size.CGFloat height = v22;
      BOOL v48 = CGRectEqualToRect(*(CGRect *)&v30, v131);
      CGFloat a = v97;
      CGFloat b = v96;
      CGFloat c = v95;
      CGFloat d = v94;
      CGFloat v53 = v93;
      CGFloat v54 = v116;
      if (!v48)
      {
        sub_1C293D4B4(0, &qword_1EBB90DC8, (uint64_t (*)(uint64_t))sub_1C293FD2C, MEMORY[0x1E4FBBE00]);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1C2AA6B00;
        *(CGFloat *)(inited + 32) = v106;
        *(CGFloat *)(inited + 40) = v105;
        *(CGFloat *)(inited + 48) = v104;
        *(CGFloat *)(inited + 56) = v103;
        *(unsigned char *)(inited + 64) = v102;
        *(CGFloat *)(inited + 72) = v14;
        *(unsigned char *)(inited + 80) = rect_8;
        swift_bridgeObjectRetain();
        sub_1C293D564(inited);
        double v57 = v56;
        char v59 = v58;
        swift_setDeallocating();
        sub_1C293FD2C();
        swift_arrayDestroy();
        CGFloat a = v97;
        CGFloat b = v96;
        CGFloat c = v95;
        CGFloat d = v94;
        CGFloat v53 = v93;
        CGFloat v54 = v116;
        if ((v59 & 1) == 0)
        {
          v129.origin.CGFloat x = recta;
          v129.origin.CGFloat y = y;
          v129.size.CGFloat width = v32;
          v129.size.CGFloat height = height;
          v125.CGFloat y = CGRectGetMaxY(v129);
          t1.CGFloat a = v97;
          t1.CGFloat b = v96;
          t1.CGFloat c = v95;
          t1.CGFloat d = v94;
          t1.tCGFloat x = v93;
          t1.tCGFloat y = v116;
          v125.CGFloat x = 0.0;
          CGPoint v60 = CGPointApplyAffineTransform(v125, &t1);
          double v61 = v57;
          switch(v113)
          {
            case 1:
              double v61 = v57 * 0.5;
              break;
            case 3:
              double v61 = 0.0;
              break;
            default:
              break;
          }
          CGFloat a = v97;
          CGFloat b = v96;
          CGFloat c = v95;
          CGFloat d = v94;
          CGFloat v53 = v93;
          CGFloat v54 = v116;
          if (v60.y < v61)
          {
            CGFloat a = v97;
            CGFloat b = v96;
            CGFloat c = v95;
            CGFloat d = v94;
            CGFloat v53 = v93;
            CGFloat v54 = v116;
            if (a5 >= 0.0)
            {
              CGFloat v62 = a5 / (v61 - v60.y + a5);
              CGFloat v63 = (v61 - v60.y) * v62;
              CGAffineTransformMakeScale(&t1, 1.0, v62);
              long long v114 = *(_OWORD *)&t1.a;
              rect_8CGFloat a = *(_OWORD *)&t1.c;
              tCGFloat x = t1.tx;
              tCGFloat y = t1.ty;
              CGAffineTransformMakeTranslation(&t1, 0.0, v63);
              long long v66 = *(_OWORD *)&t1.a;
              long long v67 = *(_OWORD *)&t1.c;
              long long v68 = *(_OWORD *)&t1.tx;
              *(_OWORD *)&t1.CGFloat a = v114;
              *(_OWORD *)&t1.CGFloat c = rect_8a;
              t1.tCGFloat x = tx;
              t1.tCGFloat y = ty;
              *(_OWORD *)&t2.CGFloat a = v66;
              *(_OWORD *)&t2.CGFloat c = v67;
              *(_OWORD *)&t2.tCGFloat x = v68;
              CGAffineTransformConcat(&v118, &t1, &t2);
              t1.CGFloat a = v97;
              t1.CGFloat b = v96;
              t1.CGFloat c = v95;
              t1.CGFloat d = v94;
              t1.tCGFloat x = v93;
              t1.tCGFloat y = v116;
              CGAffineTransform t2 = v118;
              CGAffineTransformConcat(&v118, &t1, &t2);
              CGFloat a = v118.a;
              CGFloat b = v118.b;
              CGFloat c = v118.c;
              CGFloat d = v118.d;
              CGFloat v53 = v118.tx;
              CGFloat v54 = v118.ty;
            }
          }
        }
      }
      CGFloat v112 = v54;
      CGFloat v23 = v53;
      CGFloat v24 = d;
      CGFloat v25 = c;
      double v26 = b;
      double v27 = a;
      ++v19;
      swift_bridgeObjectRelease();
      CGFloat v21 = v108;
      CGFloat v20 = v109;
      CGFloat v22 = v107;
      if (v19 == v92)
      {
        swift_bridgeObjectRelease();
        CGFloat v6 = v84;
        uint64_t v5 = a3;
        id v69 = v18;
        CGFloat v70 = v27;
        CGFloat v71 = v26;
        double v72 = v25;
        CGFloat v73 = v24;
        CGFloat v74 = v23;
        CGFloat v75 = v112;
        goto LABEL_28;
      }
    }
    __break(1u);
  }
  else
  {
    id v69 = v6;
    CGFloat v70 = v8;
    CGFloat v71 = v7;
    double v72 = v10;
    CGFloat v73 = v9;
    CGFloat v74 = v11;
    CGFloat v75 = v12;
LABEL_28:
    CGFloat v115 = v75;
    uint64_t v76 = *(void *)(v5 + 96);
    t1.CGFloat a = a4;
    t1.CGFloat b = a5;
    *(void *)&t1.CGFloat c = a1;
    *(void *)&t1.CGFloat d = v6;
    t1.tCGFloat x = v70;
    t1.tCGFloat y = v71;
    CGFloat v121 = v72;
    CGFloat v122 = v73;
    CGFloat v123 = v74;
    CGFloat v124 = v75;
    t2.CGFloat a = 2.56684058e-289;
    LOWORD(t2.b) = 258;
    t2.CGFloat c = 0.0;
    BYTE2(t2.d) = -2;
    LOWORD(t2.d) = -7968;
    CGFloat v77 = v70;
    CGFloat v78 = v71;
    CGFloat v111 = v71;
    double v79 = v72;
    CGFloat v80 = v74;
    CGFloat v81 = v73;
    id v82 = a1;
    id v83 = v69;
    sub_1C293C224((uint64_t)&t1, v76, &t2);
    t1.CGFloat a = a4;
    t1.CGFloat b = a5;
    *(void *)&t1.CGFloat c = v82;
    *(void *)&t1.CGFloat d = v6;
    t1.tCGFloat x = v77;
    t1.tCGFloat y = v78;
    CGFloat v121 = v79;
    CGFloat v122 = v81;
    CGFloat v123 = v80;
    CGFloat v124 = v115;
    t2.CGFloat a = 2.56684058e-289;
    LOWORD(t2.b) = 258;
    t2.CGFloat c = 0.0;
    BYTE2(t2.d) = -2;
    LOWORD(t2.d) = -7968;
    sub_1C293D968((uint64_t)&t1, 0, (char *)&t2);
    t1.CGFloat a = a4;
    t1.CGFloat b = a5;
    *(void *)&t1.CGFloat c = v82;
    *(void *)&t1.CGFloat d = v6;
    t1.tCGFloat x = v77;
    t1.tCGFloat y = v111;
    CGFloat v121 = v79;
    CGFloat v122 = v81;
    CGFloat v123 = v80;
    CGFloat v124 = v115;
    t2.CGFloat a = 2.56684058e-289;
    LOWORD(t2.b) = 258;
    t2.CGFloat c = 0.0;
    BYTE2(t2.d) = -2;
    LOWORD(t2.d) = -7968;
    sub_1C293D968((uint64_t)&t1, 1, (char *)&t2);
    t1.CGFloat a = a4;
    t1.CGFloat b = a5;
    *(void *)&t1.CGFloat c = v82;
    *(void *)&t1.CGFloat d = v6;
    t1.tCGFloat x = v77;
    t1.tCGFloat y = v111;
    CGFloat v121 = v79;
    CGFloat v122 = v81;
    CGFloat v123 = v80;
    CGFloat v124 = v115;
    sub_1C2944E30((uint64_t)&t1);
    *(void *)&t1.CGFloat a = v6;
    t1.CGFloat b = v97;
    t1.CGFloat c = v96;
    t1.CGFloat d = v95;
    t1.tCGFloat x = v94;
    t1.tCGFloat y = v93;
    CGFloat v121 = v116;
    sub_1C292E56C((uint64_t)v82, (uint64_t *)&t1, a4, a5);
  }
}

void sub_1C293D4B4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_1C293D518(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1C293D564(uint64_t a1)
{
  CGFloat v1 = *MEMORY[0x1E4F1DB20];
  CGFloat v2 = *(double *)(MEMORY[0x1E4F1DB20] + 8);
  CGFloat v3 = *(double *)(MEMORY[0x1E4F1DB20] + 16);
  double v4 = *(double *)(MEMORY[0x1E4F1DB20] + 24);
  CGFloat x = *MEMORY[0x1E4F1DB20];
  CGFloat y = v2;
  CGFloat width = v3;
  CGFloat height = v4;
  uint64_t v35 = *(void *)(a1 + 16);
  recCGAffineTransform t2 = v4;
  if (!v35) {
    goto LABEL_19;
  }
  uint64_t v34 = a1 + 32;
  swift_bridgeObjectRetain();
  uint64_t v9 = 0;
  CGFloat x = v1;
  CGFloat y = v2;
  CGFloat width = v3;
  CGFloat height = v4;
  double v32 = v2;
  double v33 = v1;
  double v31 = v3;
  do
  {
    uint64_t v10 = v34 + 56 * v9;
    uint64_t v11 = *(void *)(v10 + 40);
    uint64_t v12 = *(void *)(v11 + 16);
    if (v12)
    {
      uint64_t v36 = v9;
      char v37 = *(unsigned char *)(v10 + 48);
      swift_bridgeObjectRetain_n();
      uint64_t v13 = 0;
      while (1)
      {
        uint64_t v14 = *(void *)(v11 + 8 * v13 + 32);
        if (!*(void *)(v14 + 16)) {
          goto LABEL_8;
        }
        swift_bridgeObjectRetain();
        unint64_t v15 = sub_1C293DDF4(2u);
        if ((v16 & 1) == 0) {
          goto LABEL_7;
        }
        double v17 = (uint64_t *)(*(void *)(v14 + 56) + 40 * v15);
        uint64_t v18 = *v17;
        uint64_t v19 = v17[2];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v20 = *(void *)(v18 + 16);
        if (!v20) {
          break;
        }
        if (v20 == 1)
        {
          uint64_t v21 = 0;
          if (!v19) {
            goto LABEL_17;
          }
        }
        else
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v21 = v18;
          if (!v19)
          {
LABEL_17:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            sub_1C293D518(v21);
            goto LABEL_8;
          }
        }
        uint64_t v38 = v21;
        CGFloat v22 = (void *)sub_1C2A9DCF8();
        LOBYTE(v40.a) = v37;
        DiagramConfiguration.TextAttributes.toTextAttributes()();
        type metadata accessor for Key(0);
        sub_1C2942D7C();
        CGFloat v23 = (void *)sub_1C2A9DC58();
        swift_bridgeObjectRelease();
        objc_msgSend(v22, sel_sizeWithAttributes_, v23);
        CGFloat v25 = v24;
        double v27 = v26;

        CGAffineTransformMakeTranslation(&v40, 0.0, -(v27 + 5.0));
        v41.CGFloat x = 0.0;
        v41.CGFloat y = 0.0;
        CGPoint v28 = CGPointApplyAffineTransform(v41, &v40);

        v42.origin.CGFloat x = x;
        v42.origin.CGFloat y = y;
        v42.size.CGFloat width = width;
        v42.size.CGFloat height = height;
        v47.origin.CGFloat x = v28.x;
        v47.origin.CGFloat y = v28.y;
        v47.size.CGFloat width = v25;
        v47.size.CGFloat height = v27;
        CGRect v43 = CGRectUnion(v42, v47);
        CGFloat x = v43.origin.x;
        CGFloat y = v43.origin.y;
        CGFloat width = v43.size.width;
        CGFloat height = v43.size.height;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1C293D518(v38);
LABEL_8:
        if (v12 == ++v13)
        {
          swift_bridgeObjectRelease_n();
          CGFloat v2 = v32;
          CGFloat v1 = v33;
          CGFloat v3 = v31;
          uint64_t v9 = v36;
          goto LABEL_4;
        }
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_7:
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
LABEL_4:
    ++v9;
  }
  while (v9 != v35);
  swift_bridgeObjectRelease();
LABEL_19:
  v44.origin.CGFloat x = x;
  v44.origin.CGFloat y = y;
  v44.size.CGFloat width = width;
  v44.size.CGFloat height = height;
  CGFloat v39 = CGRectGetWidth(v44);
  v45.origin.CGFloat x = x;
  v45.origin.CGFloat y = y;
  v45.size.CGFloat width = width;
  v45.size.CGFloat height = height;
  CGRectGetHeight(v45);
  v46.origin.CGFloat x = x;
  v46.origin.CGFloat y = y;
  v46.size.CGFloat width = width;
  v46.size.CGFloat height = height;
  v48.origin.CGFloat x = v1;
  v48.origin.CGFloat y = v2;
  v48.size.CGFloat width = v3;
  v48.size.CGFloat height = rect2;
  if (CGRectEqualToRect(v46, v48)) {
    return 0;
  }
  else {
    return *(void *)&v39;
  }
}

void sub_1C293D968(uint64_t a1, char a2, char *a3)
{
  uint64_t v4 = *(void *)(v3 + 96);
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    CGFloat v7 = *(double *)(a1 + 32);
    CGFloat v8 = *(double *)(a1 + 40);
    CGFloat v9 = *(double *)(a1 + 48);
    CGFloat v10 = *(double *)(a1 + 56);
    CGFloat v12 = *(double *)(a1 + 64);
    CGFloat v11 = *(double *)(a1 + 72);
    char v55 = a3[4];
    char v56 = a3[3];
    char v57 = a3[2];
    char v58 = a3[1];
    char v59 = *a3;
    uint64_t v13 = *(CGContext **)(a1 + 16);
    uint64_t v14 = *(void *)(v3 + 16);
    uint64_t v15 = v4 + 32;
    uint64_t v50 = v14 + 32;
    uint64_t v51 = v14;
    unint64_t v54 = *(void *)(v14 + 16);
    id v49 = *(id *)(a1 + 24);
    swift_bridgeObjectRetain();
    unint64_t v16 = 0;
    char v48 = a2;
    CGRect v46 = v13;
    uint64_t v47 = v5;
    double v53 = v7;
    uint64_t v52 = v4 + 32;
    while (1)
    {
      uint64_t v17 = *(void *)(v15 + 8 * v16);
      if (v16 < v54)
      {
        if (v16 >= *(void *)(v51 + 16))
        {
          __break(1u);
          return;
        }
        uint64_t v18 = (char *)(v50 + 32 * v16);
        char v58 = v18[1];
        char v59 = *v18;
        char v56 = v18[3];
        char v57 = v18[2];
        char v55 = v18[4];
      }
      uint64_t v19 = *(void *)(v17 + 16);
      swift_bridgeObjectRetain();
      if (!v19)
      {
        uint64_t v21 = MEMORY[0x1E4FBC860];
        uint64_t v22 = MEMORY[0x1E4FBC860];
        goto LABEL_26;
      }
      unint64_t v20 = sub_1C293DDF4(0);
      uint64_t v21 = MEMORY[0x1E4FBC860];
      uint64_t v22 = MEMORY[0x1E4FBC860];
      if ((v23 & 1) == 0) {
        goto LABEL_17;
      }
      uint64_t v24 = *(void *)(*(void *)(v17 + 56) + 40 * v20);
      int64_t v25 = *(void *)(v24 + 16);
      if (v25) {
        break;
      }
      uint64_t v22 = MEMORY[0x1E4FBC860];
      uint64_t v15 = v52;
      if (!*(void *)(v17 + 16)) {
        goto LABEL_26;
      }
LABEL_18:
      unint64_t v31 = sub_1C293DDF4(1u);
      if (v32)
      {
        uint64_t v33 = *(void *)(*(void *)(v17 + 56) + 40 * v31);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        int64_t v34 = *(void *)(v33 + 16);
        if (v34)
        {
          uint64_t v61 = MEMORY[0x1E4FBC860];
          id v35 = v49;
          sub_1C293EA94(0, v34, 0);
          uint64_t v36 = v61;
          uint64_t v37 = v33 + 40;
          do
          {
            CGPoint v63 = *(CGPoint *)(v37 - 8);
            v60.CGFloat a = v7;
            v60.CGFloat b = v8;
            v60.CGFloat c = v9;
            v60.CGFloat d = v10;
            v60.tCGFloat x = v12;
            v60.tCGFloat y = v11;
            CGPoint v38 = CGPointApplyAffineTransform(v63, &v60);
            uint64_t v61 = v36;
            unint64_t v40 = *(void *)(v36 + 16);
            unint64_t v39 = *(void *)(v36 + 24);
            if (v40 >= v39 >> 1)
            {
              sub_1C293EA94(v39 > 1, v40 + 1, 1);
              uint64_t v36 = v61;
            }
            *(void *)(v36 + 16) = v40 + 1;
            *(CGPoint *)(v36 + 16 * v40 + 32) = v38;
            v37 += 16;
            --v34;
          }
          while (v34);
          swift_bridgeObjectRelease();

          a2 = v48;
          uint64_t v13 = v46;
          uint64_t v5 = v47;
        }
        else
        {
          swift_bridgeObjectRelease();
          uint64_t v36 = MEMORY[0x1E4FBC860];
        }
        uint64_t v15 = v52;
        goto LABEL_27;
      }
LABEL_26:
      swift_bridgeObjectRelease();
      uint64_t v36 = v21;
LABEL_27:
      LOBYTE(v60.a) = v59;
      double v41 = DiagramConfiguration.LineWidth.toPoints()();
      LOBYTE(v60.a) = v55;
      double v42 = DiagramConfiguration.LineRadius.toFloat()();
      LOBYTE(v60.a) = v56;
      double v43 = DiagramConfiguration.LineRadius.toFloat()();
      LOBYTE(v60.a) = v58;
      v44.super.Class isa = DiagramConfiguration.Color.toColor()().super.isa;
      LOBYTE(v60.a) = v57;
      v45.super.Class isa = DiagramConfiguration.Color.toColor()().super.isa;
      swift_bridgeObjectRelease();
      if (a2)
      {
        sub_1C293F6D8((uint64_t)v13, v36, v45.super.isa, v43, v41 * 0.8);
        swift_bridgeObjectRelease();
      }
      else
      {
        sub_1C293ECA4(v13, v22, v44.super.isa, v41, v42);

        swift_bridgeObjectRelease();
      }
      CGFloat v7 = v53;
      ++v16;

      if (v16 == v5)
      {

        swift_bridgeObjectRelease();
        return;
      }
    }
    uint64_t v61 = MEMORY[0x1E4FBC860];
    id v26 = v49;
    swift_bridgeObjectRetain();
    sub_1C293EA94(0, v25, 0);
    uint64_t v22 = v61;
    uint64_t v27 = v24 + 40;
    do
    {
      CGPoint v62 = *(CGPoint *)(v27 - 8);
      v60.CGFloat a = v7;
      v60.CGFloat b = v8;
      v60.CGFloat c = v9;
      v60.CGFloat d = v10;
      v60.tCGFloat x = v12;
      v60.tCGFloat y = v11;
      CGPoint v28 = CGPointApplyAffineTransform(v62, &v60);
      uint64_t v61 = v22;
      unint64_t v30 = *(void *)(v22 + 16);
      unint64_t v29 = *(void *)(v22 + 24);
      if (v30 >= v29 >> 1)
      {
        sub_1C293EA94(v29 > 1, v30 + 1, 1);
        uint64_t v22 = v61;
      }
      *(void *)(v22 + 16) = v30 + 1;
      *(CGPoint *)(v22 + 16 * v30 + 32) = v28;
      v27 += 16;
      --v25;
    }
    while (v25);
    swift_bridgeObjectRelease();

    a2 = v48;
    uint64_t v13 = v46;
    uint64_t v5 = v47;
    uint64_t v15 = v52;
    uint64_t v21 = MEMORY[0x1E4FBC860];
LABEL_17:
    if (!*(void *)(v17 + 16)) {
      goto LABEL_26;
    }
    goto LABEL_18;
  }
}

unint64_t sub_1C293DDF4(unsigned __int8 a1)
{
  sub_1C2A9E9B8();
  sub_1C2A9DD78();
  swift_bridgeObjectRelease();
  uint64_t v2 = sub_1C2A9E9E8();
  return sub_1C293DECC(a1, v2);
}

unint64_t sub_1C293DECC(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v6 = ~v3;
    while (1)
    {
      if (*(unsigned char *)(*(void *)(v2 + 48) + v4))
      {
        if (*(unsigned char *)(*(void *)(v2 + 48) + v4) == 1)
        {
          unint64_t v7 = 0x80000001C2AB5170;
          unint64_t v8 = 0xD000000000000012;
          int v9 = a1;
          if (!a1) {
            goto LABEL_17;
          }
        }
        else
        {
          unint64_t v8 = 0x636E657265666552;
          unint64_t v7 = 0xED0000656E694C65;
          int v9 = a1;
          if (!a1)
          {
LABEL_17:
            unint64_t v11 = 0xE700000000000000;
            if (v8 != 0x746E65746E6F43) {
              goto LABEL_19;
            }
            goto LABEL_18;
          }
        }
      }
      else
      {
        unint64_t v7 = 0xE700000000000000;
        unint64_t v8 = 0x746E65746E6F43;
        int v9 = a1;
        if (!a1) {
          goto LABEL_17;
        }
      }
      if (v9 == 1) {
        unint64_t v10 = 0xD000000000000012;
      }
      else {
        unint64_t v10 = 0x636E657265666552;
      }
      if (v9 == 1) {
        unint64_t v11 = 0x80000001C2AB5170;
      }
      else {
        unint64_t v11 = 0xED0000656E694C65;
      }
      if (v8 != v10) {
        goto LABEL_19;
      }
LABEL_18:
      if (v7 == v11)
      {
        swift_bridgeObjectRelease_n();
        return v4;
      }
LABEL_19:
      char v12 = sub_1C2A9E8D8();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v12 & 1) == 0)
      {
        unint64_t v4 = (v4 + 1) & v6;
        if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4)) {
          continue;
        }
      }
      return v4;
    }
  }
  return v4;
}

double DiagramConfiguration.LineRadius.toFloat()()
{
  double result = 4.0;
  switch(*v0)
  {
    case 1:
      double result = DiagramConfiguration.LineRadius.toFloat()(4.0) * 0.5;
      break;
    case 2:
      double result = 0.0;
      break;
    case 3:
      double result = 3.5;
      break;
    case 4:
      double result = DiagramConfiguration.LineRadius.toFloat()(4.0) * 3.0 * 0.25;
      break;
    case 5:
      double result = DiagramConfiguration.LineRadius.toFloat()(4.0) * 4.0 / 3.0;
      break;
    default:
      return result;
  }
  return result;
}

UIColor __swiftcall DiagramConfiguration.Color.toColor()()
{
  switch(*v0)
  {
    case 1:
      id v7 = objc_msgSend(self, sel_secondaryLabelColor);
      goto LABEL_36;
    case 2:
      id v7 = objc_msgSend(self, sel_tertiaryLabelColor);
      goto LABEL_36;
    case 3:
    case 6:
    case 8:
      id v7 = objc_msgSend(self, sel_hk_chartGrayGraphColor);
      goto LABEL_36;
    case 4:
      id v7 = objc_msgSend(self, sel_quaternaryLabelColor);
      goto LABEL_36;
    case 5:
      id v7 = objc_msgSend(self, sel_hk_chartInactiveSeriesColor);
      goto LABEL_36;
    case 7:
      unint64_t v8 = self;
      id v2 = objc_msgSend(v8, sel_systemGray3Color);
      id v3 = objc_msgSend(v8, sel_hk_chartInactiveSeriesColor);
      uint64_t v9 = swift_allocObject();
      *(void *)(v9 + 16) = v2;
      *(void *)(v9 + 24) = v3;
      id v5 = objc_allocWithZone(MEMORY[0x1E4FB1618]);
      CGPoint v28 = sub_1C293302C;
      uint64_t v29 = v9;
      uint64_t v24 = MEMORY[0x1E4F143A8];
      uint64_t v25 = 1107296256;
      uint64_t v6 = &block_descriptor_21_0;
      goto LABEL_15;
    case 9:
      id v7 = objc_msgSend(self, sel_hk_randomColor);
      goto LABEL_36;
    case 0xA:
      Class isa = (Class)objc_msgSend(self, sel_whiteColor);
      id v11 = [(objc_class *)isa colorWithAlphaComponent:0.0];
      goto LABEL_32;
    case 0xB:
      Class isa = (Class)objc_msgSend(self, sel_blackColor);
      id v11 = [(objc_class *)isa colorWithAlphaComponent:0.0];
      goto LABEL_32;
    case 0xC:
      char v12 = self;
      id v2 = objc_msgSend(v12, sel_systemGray4Color);
      id v3 = objc_msgSend(v12, sel_systemGray6Color);
      uint64_t v13 = swift_allocObject();
      *(void *)(v13 + 16) = v2;
      *(void *)(v13 + 24) = v3;
      id v5 = objc_allocWithZone(MEMORY[0x1E4FB1618]);
      CGPoint v28 = sub_1C293302C;
      uint64_t v29 = v13;
      uint64_t v24 = MEMORY[0x1E4F143A8];
      uint64_t v25 = 1107296256;
      uint64_t v6 = &block_descriptor_14_0;
      goto LABEL_15;
    case 0xD:
      uint64_t v14 = self;
      id v2 = objc_msgSend(v14, sel_systemGrayColor);
      id v3 = objc_msgSend(v14, sel_systemLightMidGrayColor);
      uint64_t v15 = swift_allocObject();
      *(void *)(v15 + 16) = v2;
      *(void *)(v15 + 24) = v3;
      id v5 = objc_allocWithZone(MEMORY[0x1E4FB1618]);
      CGPoint v28 = sub_1C293302C;
      uint64_t v29 = v15;
      uint64_t v24 = MEMORY[0x1E4F143A8];
      uint64_t v25 = 1107296256;
      uint64_t v6 = &block_descriptor_7;
      goto LABEL_15;
    case 0xE:
      unint64_t v16 = self;
      id v2 = objc_msgSend(v16, sel_systemBlackColor);
      id v3 = objc_msgSend(v16, sel_systemWhiteColor);
      uint64_t v17 = swift_allocObject();
      *(void *)(v17 + 16) = v2;
      *(void *)(v17 + 24) = v3;
      id v5 = objc_allocWithZone(MEMORY[0x1E4FB1618]);
      CGPoint v28 = sub_1C293302C;
      uint64_t v29 = v17;
      uint64_t v24 = MEMORY[0x1E4F143A8];
      uint64_t v25 = 1107296256;
      uint64_t v6 = &block_descriptor_16;
      goto LABEL_15;
    case 0xF:
    case 0x18:
      id v7 = objc_msgSend(self, sel_hk_vitalsKeyColor);
      goto LABEL_36;
    case 0x10:
      id v7 = objc_msgSend(self, sel_hk_activityKeyColor);
      goto LABEL_36;
    case 0x11:
      id v7 = objc_msgSend(self, sel_hk_bodyMeasurementsKeyColor);
      goto LABEL_36;
    case 0x12:
      id v7 = objc_msgSend(self, sel_hk_mindfulnessKeyColor);
      goto LABEL_36;
    case 0x13:
      id v7 = objc_msgSend(self, sel_hk_nutritionKeyColor);
      goto LABEL_36;
    case 0x14:
      id v7 = objc_msgSend(self, sel_hk_reproductiveHealthKeyColor);
      goto LABEL_36;
    case 0x15:
      id v7 = objc_msgSend(self, sel_hk_sleepKeyColor);
      goto LABEL_36;
    case 0x16:
      id v7 = objc_msgSend(self, sel_hk_respiratoryKeyColor);
      goto LABEL_36;
    case 0x17:
      id v7 = objc_msgSend(self, sel_hk_workoutKeyColor);
      goto LABEL_36;
    case 0x19:
      id v7 = objc_msgSend(self, sel_hk_hearingHealthKeyColor);
      goto LABEL_36;
    case 0x1A:
      id v7 = objc_msgSend(self, sel_hk_otherKeyColor);
      goto LABEL_36;
    case 0x1B:
      id v7 = objc_msgSend(self, sel_hk_defaultSecondaryTextColor);
      goto LABEL_36;
    case 0x1C:
      id v7 = objc_msgSend(self, sel_hk_defaultTertiaryTextColor);
      goto LABEL_36;
    case 0x1D:
      id v7 = objc_msgSend(self, sel_hk_defaultQuaternaryTextColor);
      goto LABEL_36;
    case 0x1E:
      id v7 = objc_msgSend(self, sel_systemGray4Color);
      goto LABEL_36;
    case 0x1F:
      LOBYTE(v24) = 30;
      Class isa = DiagramConfiguration.Color.toColor()().super.isa;
      id v11 = -[objc_class colorWithAlphaComponent:](isa, sel_colorWithAlphaComponent_, 0.0, v24);
LABEL_32:
      id v23 = v11;

      return (UIColor)v23;
    case 0x20:
      id v7 = objc_msgSend(self, sel_systemLightGrayColor);
      goto LABEL_36;
    case 0x21:
      id v7 = objc_msgSend(self, sel_systemDarkGrayColor);
      goto LABEL_36;
    case 0x22:
      id v7 = objc_msgSend(self, sel_systemDarkYellowColor);
LABEL_36:
      result.super.Class isa = (Class)v7;
      break;
    default:
      CGFloat v1 = self;
      id v2 = objc_msgSend(v1, sel_systemGray3Color);
      id v3 = objc_msgSend(v1, sel_systemGray4Color);
      uint64_t v4 = swift_allocObject();
      *(void *)(v4 + 16) = v2;
      *(void *)(v4 + 24) = v3;
      id v5 = objc_allocWithZone(MEMORY[0x1E4FB1618]);
      CGPoint v28 = sub_1C293302C;
      uint64_t v29 = v4;
      uint64_t v24 = MEMORY[0x1E4F143A8];
      uint64_t v25 = 1107296256;
      uint64_t v6 = &block_descriptor_28;
LABEL_15:
      id v26 = sub_1C2932F80;
      uint64_t v27 = v6;
      uint64_t v18 = _Block_copy(&v24);
      id v19 = v2;
      id v20 = v3;
      uint64_t v21 = (objc_class *)objc_msgSend(v5, sel_initWithDynamicProvider_, v18, v24, v25);
      _Block_release(v18);

      swift_release();
      result.super.Class isa = v21;
      break;
  }
  return result;
}

double DiagramConfiguration.LineWidth.toPoints()()
{
  double result = 3.0;
  switch(*v0)
  {
    case 1:
      return 0.5;
    case 2:
      double v2 = DiagramConfiguration.LineWidth.toPoints()(3.0);
      double v3 = 3.0;
      goto LABEL_8;
    case 3:
      return DiagramConfiguration.LineWidth.toPoints()(3.0) * 0.5;
    case 4:
      double v2 = DiagramConfiguration.LineWidth.toPoints()(3.0);
      goto LABEL_7;
    case 5:
      double v4 = DiagramConfiguration.LineWidth.toPoints()(3.0);
      double v2 = v4 + v4;
LABEL_7:
      double v3 = 1.5;
LABEL_8:
      double result = v2 / v3;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1C293EA94(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1C293EAB4(a1, a2, a3, *v3);
  *double v3 = (char *)result;
  return result;
}

uint64_t sub_1C293EAB4(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1C293EC40(0, &qword_1EBB92478, (uint64_t (*)(uint64_t))type metadata accessor for CGPoint, MEMORY[0x1E4FBBE00]);
    unint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    unint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    memcpy(v13, v14, 16 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_1C2A9E6A8();
  __break(1u);
  return result;
}

void sub_1C293EC40(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_1C293ECA4(CGContext *a1, uint64_t a2, void *a3, CGFloat a4, double a5)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a2 + 16);
  if (v5)
  {
    if (a5 <= 0.0)
    {
      swift_bridgeObjectRetain();
      Mutable = CGPathCreateMutable();
      swift_bridgeObjectRetain();
      sub_1C2A9E0F8();
      uint64_t v14 = v5 - 1;
      if (v14)
      {
        uint64_t v15 = a2 + 56;
        do
        {
          *(void *)&v18[16] = 0;
          *(_OWORD *)uint64_t v18 = 0x3FF0000000000000uLL;
          *(void *)&v18[24] = 0x3FF0000000000000;
          *(void *)&v18[32] = 0;
          uint64_t v19 = 0;
          sub_1C2A9E118();
          v15 += 16;
          --v14;
        }
        while (v14);
      }
    }
    else
    {
      sub_1C293D4B4(0, &qword_1EBB92478, (uint64_t (*)(uint64_t))type metadata accessor for CGPoint, MEMORY[0x1E4FBBE00]);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1C2AA6B00;
      *(void *)(inited + 32) = 0;
      *(void *)(inited + 40) = 0;
      *(void *)uint64_t v18 = a2;
      *(void *)&v18[8] = a2 + 32;
      *(void *)&v18[16] = 1;
      *(void *)&v18[24] = (2 * v5) | 1;
      swift_bridgeObjectRetain();
      sub_1C293EF20(inited);
      swift_setDeallocating();
      long long v11 = *(_OWORD *)&v18[16];
      long long v17 = *(_OWORD *)v18;
      *(void *)uint64_t v18 = a2;
      *(_OWORD *)&v18[8] = v17;
      *(_OWORD *)&v18[24] = v11;
      swift_bridgeObjectRetain();
      CGMutablePathRef v12 = CGPathCreateMutable();
      swift_bridgeObjectRetain();
      Mutable = (const CGPath *)sub_1C293F4F0((uint64_t)v12, v18, a2);
      swift_unknownObjectRelease();
    }
    swift_bridgeObjectRelease_n();
    CGContextSetLineWidth(a1, a4);
    CGContextSetLineJoin(a1, kCGLineJoinRound);
    CGContextSetLineCap(a1, kCGLineCapRound);
    CGContextSetBlendMode(a1, kCGBlendModeNormal);
    unint64_t v16 = (CGColor *)objc_msgSend(a3, sel_CGColor);
    CGContextSetStrokeColorWithColor(a1, v16);

    CGContextAddPath(a1, Mutable);
    CGContextStrokePath(a1);
  }
}

uint64_t sub_1C293EF20(uint64_t a1)
{
  uint64_t v3 = v1[2];
  unint64_t v2 = v1[3];
  uint64_t v4 = (v2 >> 1) - v3;
  if (__OFSUB__(v2 >> 1, v3))
  {
    __break(1u);
    goto LABEL_36;
  }
  int64_t v6 = *(void *)(a1 + 16);
  if ((v2 & 1) == 0) {
    goto LABEL_7;
  }
  uint64_t v7 = v1[1];
  sub_1C2A9E8F8();
  swift_unknownObjectRetain();
  uint64_t v8 = swift_dynamicCastClass();
  if (!v8)
  {
    swift_unknownObjectRelease();
    uint64_t v8 = MEMORY[0x1E4FBC860];
  }
  uint64_t v9 = *(void *)(v8 + 16);
  if (v7 + 16 * v3 + 16 * v4 != v8 + 16 * v9 + 32)
  {
    swift_release();
LABEL_7:
    uint64_t v10 = v4;
    goto LABEL_9;
  }
  unint64_t v11 = *(void *)(v8 + 24);
  swift_release();
  uint64_t v12 = (v11 >> 1) - v9;
  BOOL v13 = __OFADD__(v4, v12);
  uint64_t v10 = v4 + v12;
  if (v13)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
LABEL_9:
  uint64_t v14 = v4 + v6;
  if (__OFADD__(v4, v6))
  {
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  if (v10 < v14)
  {
    if (v10 + 0x4000000000000000 < 0)
    {
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
    uint64_t v15 = 2 * v10;
    if (v15 > v14) {
      uint64_t v14 = v15;
    }
  }
  uint64_t result = sub_1C293F254(v14);
  uint64_t v18 = v1[2];
  unint64_t v17 = v1[3];
  uint64_t v19 = (v17 >> 1) - v18;
  if (__OFSUB__(v17 >> 1, v18)) {
    goto LABEL_37;
  }
  uint64_t v20 = (char *)(v1[1] + 16 * v18 + 16 * v19);
  if ((v17 & 1) == 0)
  {
LABEL_20:
    uint64_t v23 = v19;
    goto LABEL_22;
  }
  sub_1C2A9E8F8();
  swift_unknownObjectRetain();
  uint64_t v21 = swift_dynamicCastClass();
  if (!v21)
  {
    swift_unknownObjectRelease();
    uint64_t v21 = MEMORY[0x1E4FBC860];
  }
  uint64_t v22 = *(void *)(v21 + 16);
  if (v20 != (char *)(v21 + 16 * v22 + 32))
  {
    uint64_t result = swift_release();
    goto LABEL_20;
  }
  unint64_t v24 = *(void *)(v21 + 24);
  uint64_t result = swift_release();
  uint64_t v25 = (v24 >> 1) - v22;
  BOOL v13 = __OFADD__(v19, v25);
  uint64_t v23 = v19 + v25;
  if (v13)
  {
LABEL_43:
    __break(1u);
LABEL_44:
    uint64_t result = sub_1C2A9E6A8();
    __break(1u);
    return result;
  }
LABEL_22:
  int64_t v26 = v23 - v19;
  if (__OFSUB__(v23, v19))
  {
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  if (!v6) {
    goto LABEL_30;
  }
  if (v26 < v6) {
    goto LABEL_39;
  }
  uint64_t v27 = (char *)(a1 + 32);
  size_t v28 = 16 * v6;
  if (a1 + 32 < (unint64_t)&v20[16 * v6] && v20 < &v27[v28]) {
    goto LABEL_44;
  }
  uint64_t result = (uint64_t)memcpy(v20, v27, v28);
  if (v6 <= 0) {
    goto LABEL_30;
  }
  if (__OFADD__(v19, v6)) {
    goto LABEL_41;
  }
  uint64_t result = sub_1C293F19C(v19 + v6);
LABEL_30:
  if (v6 == v26)
  {
    return sub_1C2A0EC40(a1, v6);
  }
  return result;
}

uint64_t sub_1C293F19C(uint64_t result)
{
  uint64_t v2 = *(void *)(v1 + 16);
  unint64_t v3 = *(void *)(v1 + 24);
  unint64_t v4 = v3 >> 1;
  BOOL v5 = __OFSUB__(v3 >> 1, v2);
  uint64_t v6 = (v3 >> 1) - v2;
  if (v5)
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v7 = result - v6;
  if (__OFSUB__(result, v6))
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!v7) {
    return result;
  }
  sub_1C2A9E8F8();
  swift_unknownObjectRetain();
  uint64_t result = swift_dynamicCastClass();
  if (!result)
  {
    swift_unknownObjectRelease();
    uint64_t result = MEMORY[0x1E4FBC860];
  }
  uint64_t v8 = *(void *)(result + 16);
  BOOL v5 = __OFADD__(v8, v7);
  uint64_t v9 = v8 + v7;
  if (v5) {
    goto LABEL_13;
  }
  *(void *)(result + 16) = v9;
  uint64_t result = swift_release();
  uint64_t v10 = v4 + v7;
  if (__OFADD__(v4, v7))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v10 < 0)
  {
LABEL_15:
    __break(1u);
    return result;
  }
  *(void *)(v1 + 24) = v3 & 1 | (2 * v10);
  return result;
}

uint64_t sub_1C293F254(uint64_t result)
{
  uint64_t v2 = result;
  unint64_t v3 = *(void *)(v1 + 24);
  unint64_t v4 = *(void **)v1;
  int64_t v5 = v3 >> 1;
  if ((v3 & 1) == 0 || (uint64_t result = swift_isUniquelyReferenced_nonNull(), *(void *)v1 = v4, (result & 1) == 0))
  {
    uint64_t v9 = v4;
    goto LABEL_9;
  }
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = v5 - v6;
  if (__OFSUB__(v5, v6))
  {
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v8 = *(void *)(v1 + 8);
  sub_1C2A9E8F8();
  swift_unknownObjectRetain();
  uint64_t result = swift_dynamicCastClass();
  if (!result)
  {
    swift_unknownObjectRelease();
    uint64_t result = MEMORY[0x1E4FBC860];
  }
  uint64_t v9 = *(void **)(result + 16);
  if (v8 + 16 * v6 + 16 * v7 == result + 16 * (void)v9 + 32) {
    goto LABEL_31;
  }
  uint64_t result = swift_release();
  while (1)
  {
    if (v7 >= v2) {
      goto LABEL_28;
    }
    uint64_t v9 = *(void **)v1;
LABEL_9:
    uint64_t v7 = *(void *)(v1 + 16);
    uint64_t v10 = v5 - v7;
    if (__OFSUB__(v5, v7))
    {
      __break(1u);
      goto LABEL_35;
    }
    uint64_t v11 = *(void *)(v1 + 8);
    if (v10 <= v2 ? v2 : v5 - v7) {
      break;
    }
    unint64_t v4 = (void *)MEMORY[0x1E4FBC860];
    if (v5 >= v7) {
      goto LABEL_17;
    }
LABEL_30:
    __break(1u);
LABEL_31:
    unint64_t v19 = *(void *)(result + 24);
    uint64_t result = swift_release();
    unint64_t v20 = (v19 >> 1) - (void)v9;
    BOOL v21 = __OFADD__(v7, v20);
    v7 += v20;
    if (v21) {
      goto LABEL_40;
    }
  }
  sub_1C293D4B4(0, &qword_1EBB92478, (uint64_t (*)(uint64_t))type metadata accessor for CGPoint, MEMORY[0x1E4FBBE00]);
  unint64_t v4 = (void *)swift_allocObject();
  uint64_t result = _swift_stdlib_malloc_size(v4);
  uint64_t v13 = result - 32;
  if (result < 32) {
    uint64_t v13 = result - 17;
  }
  v4[2] = v10;
  v4[3] = 2 * (v13 >> 4);
  if (v5 < v7) {
    goto LABEL_30;
  }
LABEL_17:
  if ((v10 & 0x8000000000000000) == 0)
  {
    unint64_t v14 = (unint64_t)(v4 + 4);
    uint64_t v15 = (void *)(v11 + 16 * v7);
    if (v15 >= &v4[2 * v10 + 4] || v14 >= (unint64_t)&v15[2 * v10])
    {
      memcpy(v4 + 4, v15, 16 * v10);
      if (!__OFSUB__(0, v7))
      {
        uint64_t v17 = v4[2];
        uint64_t v18 = v7 + v17;
        if (!__OFADD__(v7, v17))
        {
          if (v18 >= v7)
          {
            uint64_t result = swift_unknownObjectRelease();
            if ((v18 & 0x8000000000000000) == 0)
            {
              *(void *)(v1 + 8) = v14 - 16 * v7;
              *(void *)(v1 + 16) = v7;
              *(void *)(v1 + 24) = (2 * v18) | 1;
LABEL_28:
              *(void *)uint64_t v1 = v4;
              return result;
            }
            goto LABEL_38;
          }
LABEL_37:
          __break(1u);
LABEL_38:
          __break(1u);
          goto LABEL_39;
        }
LABEL_36:
        __break(1u);
        goto LABEL_37;
      }
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
  }
LABEL_41:
  uint64_t result = sub_1C2A9E6A8();
  __break(1u);
  return result;
}

uint64_t sub_1C293F4F0(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *(void *)(*a2 + 16);
  if (!v5 || (v7 = a2[3], unint64_t v6 = a2[4], v8 = v6 >> 1, v7 == v6 >> 1))
  {
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
LABEL_4:
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    return a1;
  }
  uint64_t v10 = a2[2];
  if (v7 <= v8) {
    unint64_t v11 = v6 >> 1;
  }
  else {
    unint64_t v11 = a2[3];
  }
  swift_bridgeObjectRetain();
  uint64_t result = swift_unknownObjectRetain();
  if (v11 != v7)
  {
    uint64_t result = sub_1C2A9E0F8();
    if (v5 == 1 || v7 + 1 == v8) {
      goto LABEL_4;
    }
    unint64_t v13 = v11;
    uint64_t v14 = 0;
    uint64_t v15 = v10;
    uint64_t v16 = v4 + 56;
    uint64_t v17 = ~v7;
    uint64_t v18 = ~v7 + v8;
    uint64_t v19 = v5 - 2;
    uint64_t v20 = v15 + 16 * v7 + 24;
    unint64_t v21 = v17 + v13;
    while (v21 != v14)
    {
      if (v14 + 1 >= *(void *)(a3 + 16) - 1)
      {
        uint64_t result = sub_1C2A9E118();
        if (v19 == v14) {
          goto LABEL_4;
        }
      }
      else
      {
        uint64_t result = sub_1C2A9E108();
        if (v19 == v14) {
          goto LABEL_4;
        }
      }
      ++v14;
      v20 += 16;
      v16 += 16;
      if (v18 == v14) {
        goto LABEL_4;
      }
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1C293F6D8(uint64_t result, uint64_t a2, void *a3, double a4, double a5)
{
  int64_t v5 = *(void *)(a2 + 16);
  if (v5)
  {
    uint64_t v9 = (CGContext *)result;
    uint64_t v29 = MEMORY[0x1E4FBC860];
    sub_1C293F8E8(0, v5, 0);
    uint64_t v10 = (float64x2_t *)(a2 + 32);
    unint64_t v11 = *(void *)(v29 + 16);
    int64x2_t v12 = vdupq_lane_s64(COERCE__INT64(a4 + a4), 0);
    float64x2_t v13 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a4, 0);
    uint64_t v14 = 32 * v11;
    do
    {
      float64x2_t v15 = *v10;
      unint64_t v16 = *(void *)(v29 + 24);
      unint64_t v17 = v11 + 1;
      if (v11 >= v16 >> 1)
      {
        float64x2_t v26 = v13;
        int64x2_t v28 = v12;
        float64x2_t v25 = *v10;
        sub_1C293F8E8(v16 > 1, v11 + 1, 1);
        float64x2_t v15 = v25;
        float64x2_t v13 = v26;
        int64x2_t v12 = v28;
      }
      *(void *)(v29 + 16) = v17;
      uint64_t v18 = v29 + v14;
      *(float64x2_t *)(v18 + 32) = vsubq_f64(v15, v13);
      *(int64x2_t *)(v18 + 48) = v12;
      v14 += 32;
      ++v10;
      unint64_t v11 = v17;
      --v5;
    }
    while (v5);
    uint64_t v19 = (CGColor *)objc_msgSend(a3, sel_CGColor);
    CGContextSetFillColorWithColor(v9, v19);

    if (a5 > 0.0)
    {
      CGContextSetBlendMode(v9, kCGBlendModeClear);
      uint64_t v20 = *(void *)(v29 + 16);
      if (v20)
      {
        double v21 = -a5;
        swift_retain();
        uint64_t v22 = v29 + 56;
        do
        {
          CGRect v31 = CGRectInset(*(CGRect *)(v22 - 24), v21, v21);
          CGContextFillEllipseInRect(v9, v31);
          v22 += 32;
          --v20;
        }
        while (v20);
        swift_release();
      }
    }
    CGContextSetBlendMode(v9, kCGBlendModeNormal);
    uint64_t v23 = *(void *)(v29 + 16);
    if (v23)
    {
      swift_retain();
      uint64_t v24 = v29 + 56;
      do
      {
        CGContextFillEllipseInRect(v9, *(CGRect *)(v24 - 24));
        v24 += 32;
        --v23;
      }
      while (v23);
      swift_release();
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_1C293F8E8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1C293F908(a1, a2, a3, *v3);
  *unint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1C293F908(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1C293EC40(0, &qword_1EBB90DE0, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  float64x2_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    memcpy(v13, v14, 32 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_1C2A9E6A8();
  __break(1u);
  return result;
}

__C::CGRect __swiftcall DiagramData.diagramBounds(forceNonZeroSize:)(Swift::Bool forceNonZeroSize)
{
  if ((*(unsigned char *)(v1 + 32) & 1) == 0)
  {
    double v8 = *(double *)(v1 + 16);
    double v9 = *(double *)(v1 + 24);
    double v6 = *(double *)v1;
    double v7 = *(double *)(v1 + 8);
    if (v8 != 0.0) {
      goto LABEL_22;
    }
    goto LABEL_19;
  }
  uint64_t v3 = *(void *)(*(void *)(v1 + 40) + 16);
  if (v3)
  {
    uint64_t v27 = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRetain_n();
    for (uint64_t i = 0; i != v3; ++i)
    {
      uint64_t v5 = swift_bridgeObjectRetain();
      sub_1C29A6954(v5);
    }
    swift_bridgeObjectRelease_n();
    double v6 = *MEMORY[0x1E4F1DB20];
    double v7 = *(double *)(MEMORY[0x1E4F1DB20] + 8);
    double v8 = *(double *)(MEMORY[0x1E4F1DB20] + 16);
    double v9 = *(double *)(MEMORY[0x1E4F1DB20] + 24);
    uint64_t v10 = *(void *)(v27 + 16);
    if (v10)
    {
      swift_bridgeObjectRetain();
      uint64_t v11 = 0;
      double v25 = v7;
      double v26 = v6;
      double v23 = v9;
      double v24 = v8;
      do
      {
        uint64_t v12 = *(void *)(v27 + 32 + 48 * v11 + 8);
        uint64_t v13 = *(void *)(v12 + 16);
        CGFloat x = 0.0;
        CGFloat y = 0.0;
        CGFloat width = 0.0;
        CGFloat height = 0.0;
        if (v13)
        {
          swift_bridgeObjectRetain();
          uint64_t v18 = (CGFloat *)(v12 + 40);
          CGFloat y = v25;
          CGFloat x = v26;
          CGFloat height = v23;
          CGFloat width = v24;
          do
          {
            v34.origin.CGFloat x = *(v18 - 1);
            v34.origin.CGFloat y = *v18;
            v34.size.CGFloat width = 0.0;
            v34.size.CGFloat height = 0.0;
            v30.origin.CGFloat x = x;
            v30.origin.CGFloat y = y;
            v30.size.CGFloat width = width;
            v30.size.CGFloat height = height;
            CGRect v31 = CGRectUnion(v30, v34);
            CGFloat x = v31.origin.x;
            CGFloat y = v31.origin.y;
            CGFloat width = v31.size.width;
            CGFloat height = v31.size.height;
            v18 += 2;
            --v13;
          }
          while (v13);
          swift_bridgeObjectRelease();
        }
        ++v11;
        v28.origin.CGFloat x = v6;
        v28.origin.CGFloat y = v7;
        v28.size.CGFloat width = v8;
        v28.size.CGFloat height = v9;
        v33.origin.CGFloat x = x;
        v33.origin.CGFloat y = y;
        v33.size.CGFloat width = width;
        v33.size.CGFloat height = height;
        CGRect v29 = CGRectUnion(v28, v33);
        double v6 = v29.origin.x;
        double v7 = v29.origin.y;
        double v8 = v29.size.width;
        double v9 = v29.size.height;
      }
      while (v11 != v10);
      swift_bridgeObjectRelease_n();
      if (v8 != 0.0) {
        goto LABEL_22;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      if (v8 != 0.0) {
        goto LABEL_22;
      }
    }
LABEL_19:
    if (v9 == 0.0 && forceNonZeroSize)
    {
      swift_beginAccess();
      double v8 = *(double *)&qword_1EA31E598;
      double v9 = unk_1EA31E5A0;
      double v6 = v6 - *(double *)&qword_1EA31E598 * 0.5;
      double v7 = v7 - unk_1EA31E5A0 * 0.5;
    }
    goto LABEL_22;
  }
  double v6 = 0.0;
  double v7 = 0.0;
  double v8 = 0.0;
  double v9 = 0.0;
  if (forceNonZeroSize)
  {
    swift_beginAccess();
    double v8 = *(double *)&qword_1EA31E598;
    double v9 = unk_1EA31E5A0;
    double v6 = 0.0 - *(double *)&qword_1EA31E598 * 0.5;
    double v7 = 0.0 - unk_1EA31E5A0 * 0.5;
  }
LABEL_22:
  double v19 = v6;
  double v20 = v7;
  double v21 = v8;
  double v22 = v9;
  result.size.CGFloat height = v22;
  result.size.CGFloat width = v21;
  result.origin.CGFloat y = v20;
  result.origin.CGFloat x = v19;
  return result;
}

void sub_1C293FD2C()
{
  if (!qword_1EBB90568)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EBB90568);
    }
  }
}

uint64_t HKObjectType.canBeOngoing.getter()
{
  uint64_t v1 = (char *)objc_msgSend(v0, sel_code) - 6;
  uint64_t result = 1;
  switch((unint64_t)v1)
  {
    case 0uLL:
    case 5uLL:
    case 0x35uLL:
    case 0x3AuLL:
    case 0x3BuLL:
    case 0x3CuLL:
    case 0x3FuLL:
    case 0x44uLL:
    case 0x4CuLL:
    case 0x4EuLL:
    case 0x4FuLL:
    case 0x50uLL:
    case 0x52uLL:
    case 0x57uLL:
    case 0x58uLL:
    case 0x59uLL:
    case 0x61uLL:
    case 0x64uLL:
    case 0x67uLL:
    case 0x6DuLL:
    case 0x6FuLL:
    case 0x72uLL:
    case 0x73uLL:
    case 0x74uLL:
    case 0x75uLL:
    case 0x81uLL:
    case 0x82uLL:
    case 0x8CuLL:
    case 0x8EuLL:
    case 0xA8uLL:
    case 0xA9uLL:
    case 0xAAuLL:
    case 0xABuLL:
    case 0xAFuLL:
    case 0xB2uLL:
    case 0xB3uLL:
    case 0xB9uLL:
    case 0xBAuLL:
    case 0xBBuLL:
    case 0xCAuLL:
    case 0xD1uLL:
    case 0xD4uLL:
    case 0xDDuLL:
    case 0xDEuLL:
    case 0xE8uLL:
    case 0xE9uLL:
    case 0xF1uLL:
    case 0xFBuLL:
    case 0xFFuLL:
    case 0x109uLL:
    case 0x110uLL:
    case 0x11DuLL:
    case 0x11EuLL:
    case 0x12CuLL:
    case 0x133uLL:
    case 0x134uLL:
      return result;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t destroy for TrendConfiguration(uint64_t a1)
{
  sub_1C293FE60(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
  if (*(void *)(a1 + 40) != 1) {
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C293FE60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  switch(a5 >> 3)
  {
    case 0:
    case 7:
    case 16:
      goto LABEL_3;
    case 1:
    case 4:
    case 8:
      swift_bridgeObjectRelease();
LABEL_3:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

id DisplayTypeProviding.maybeDisplayType.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)(*(uint64_t (**)(void))(a2 + 24))();
  id v5 = objc_msgSend(v4, sel_displayTypeController);

  if (v5
    || (id result = objc_msgSend(self, sel_sharedInstance),
        (id v5 = result) != 0))
  {
    id v7 = ObjectTypeIdentifiable.objectType.getter(a1, *(void *)(a2 + 8));
    id v8 = objc_msgSend(v5, sel_displayTypeForObjectType_, v7);

    return v8;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id HKObjectType.currentValueQueryConfiguration.getter@<X0>(int64x2_t *a1@<X8>)
{
  id result = objc_msgSend(v1, sel_code);
  switch((unint64_t)result)
  {
    case 0uLL:
    case 1uLL:
    case 2uLL:
    case 3uLL:
    case 4uLL:
    case 0x12uLL:
    case 0x13uLL:
    case 0x3AuLL:
    case 0x3EuLL:
    case 0x47uLL:
    case 0x48uLL:
    case 0x49uLL:
    case 0x59uLL:
    case 0x5AuLL:
    case 0x72uLL:
    case 0x76uLL:
    case 0x89uLL:
    case 0x8BuLL:
    case 0x102uLL:
    case 0x103uLL:
    case 0x104uLL:
    case 0x10AuLL:
    case 0x10EuLL:
    case 0x112uLL:
    case 0x118uLL:
    case 0x119uLL:
    case 0x11AuLL:
    case 0x11BuLL:
    case 0x12DuLL:
    case 0x12EuLL:
    case 0x12FuLL:
      uint64_t v4 = &unk_1F1DEA350;
      goto LABEL_26;
    case 5uLL:
    case 0xEuLL:
    case 0x3DuLL:
    case 0xB6uLL:
    case 0xBCuLL:
    case 0xC3uLL:
    case 0xC4uLL:
    case 0x110uLL:
    case 0x11EuLL:
      uint64_t v4 = &unk_1F1DEA430;
      goto LABEL_26;
    case 7uLL:
    case 8uLL:
    case 9uLL:
    case 0xAuLL:
    case 0xCuLL:
    case 0xDuLL:
    case 0x14uLL:
    case 0x15uLL:
    case 0x16uLL:
    case 0x17uLL:
    case 0x18uLL:
    case 0x19uLL:
    case 0x1AuLL:
    case 0x1BuLL:
    case 0x1CuLL:
    case 0x1DuLL:
    case 0x1EuLL:
    case 0x1FuLL:
    case 0x20uLL:
    case 0x21uLL:
    case 0x22uLL:
    case 0x23uLL:
    case 0x24uLL:
    case 0x25uLL:
    case 0x26uLL:
    case 0x27uLL:
    case 0x28uLL:
    case 0x29uLL:
    case 0x2AuLL:
    case 0x2BuLL:
    case 0x2CuLL:
    case 0x2DuLL:
    case 0x2EuLL:
    case 0x2FuLL:
    case 0x30uLL:
    case 0x31uLL:
    case 0x32uLL:
    case 0x33uLL:
    case 0x34uLL:
    case 0x35uLL:
    case 0x36uLL:
    case 0x37uLL:
    case 0x38uLL:
    case 0x39uLL:
    case 0x3CuLL:
    case 0x4BuLL:
    case 0x4EuLL:
    case 0x53uLL:
    case 0x57uLL:
    case 0x65uLL:
    case 0x6EuLL:
    case 0x6FuLL:
    case 0x71uLL:
    case 0x7DuLL:
    case 0x8AuLL:
    case 0xB3uLL:
    case 0xBAuLL:
    case 0xFBuLL:
    case 0x117uLL:
    case 0x126uLL:
    case 0x127uLL:
    case 0x128uLL:
    case 0x129uLL:
      uint64_t v4 = &unk_1F1DEA300;
      goto LABEL_26;
    case 0xFuLL:
    case 0xB7uLL:
    case 0xBBuLL:
    case 0xC2uLL:
      uint64_t v4 = &unk_1F1DEA378;
      goto LABEL_26;
    case 0x3FuLL:
      *a1 = vdupq_n_s64(3uLL);
      a1[1].i64[0] = 0;
      a1[1].i64[1] = 0;
      char v5 = 16;
      goto LABEL_31;
    case 0x46uLL:
      *a1 = 0u;
      a1[1] = 0u;
      char v5 = 80;
      goto LABEL_31;
    case 0x4FuLL:
    case 0x63uLL:
    case 0xBDuLL:
      *a1 = 0u;
      a1[1] = 0u;
      char v5 = 24;
      goto LABEL_31;
    case 0x50uLL:
      a1->i64[0] = (uint64_t)&unk_1F1DEA3A0;
      a1->i64[1] = 2;
      a1[1].i64[0] = (uint64_t)&unk_1F1DEA3E0;
      a1[1].i64[1] = 256;
      char v5 = 8;
      goto LABEL_31;
    case 0x5BuLL:
    case 0x5CuLL:
    case 0x5FuLL:
    case 0x61uLL:
    case 0x90uLL:
    case 0x9DuLL:
    case 0x9EuLL:
    case 0x9FuLL:
    case 0xA0uLL:
    case 0xA1uLL:
    case 0xA2uLL:
    case 0xA3uLL:
    case 0xA4uLL:
    case 0xA5uLL:
    case 0xA6uLL:
    case 0xA7uLL:
    case 0xA8uLL:
    case 0xA9uLL:
    case 0xAAuLL:
    case 0xABuLL:
    case 0xE5uLL:
    case 0xE6uLL:
    case 0xE7uLL:
    case 0xE8uLL:
    case 0xE9uLL:
    case 0xEAuLL:
    case 0xEBuLL:
    case 0xF3uLL:
    case 0xF4uLL:
    case 0xF9uLL:
    case 0x11FuLL:
    case 0x120uLL:
    case 0x139uLL:
    case 0x13AuLL:
      *a1 = 0u;
      a1[1] = 0u;
      char v5 = 33;
      goto LABEL_31;
    case 0x60uLL:
      a1->i64[0] = 0xD00000000000001CLL;
      a1->i64[1] = 0x80000001C2AB8420;
      a1[1].i64[0] = 0;
      a1[1].i64[1] = 0;
      char v5 = 33;
      goto LABEL_31;
    case 0x64uLL:
      *a1 = 0u;
      a1[1] = 0u;
      char v5 = 48;
      goto LABEL_31;
    case 0x7CuLL:
      *a1 = 0u;
      a1[1] = 0u;
      char v5 = 104;
      goto LABEL_31;
    case 0x8CuLL:
    case 0x93uLL:
    case 0x9CuLL:
    case 0xB2uLL:
    case 0xC7uLL:
    case 0xECuLL:
    case 0xFAuLL:
    case 0x114uLL:
      *a1 = 0u;
      a1[1] = 0u;
      char v5 = 72;
      goto LABEL_31;
    case 0x91uLL:
      *a1 = 0u;
      a1[1] = 0u;
      char v5 = 65;
      goto LABEL_31;
    case 0xACuLL:
      double v6 = &unk_1F1DEA408;
      goto LABEL_22;
    case 0xADuLL:
      double v6 = &unk_1F1DEA480;
LABEL_22:
      a1->i64[0] = 3;
      a1->i64[1] = (uint64_t)v6;
      a1[1] = (int64x2_t)xmmword_1C2AAA190;
      char v5 = 56;
      goto LABEL_31;
    case 0xBFuLL:
    case 0xC0uLL:
    case 0xC1uLL:
      *a1 = 0u;
      a1[1] = 0u;
      char v5 = 88;
      goto LABEL_31;
    case 0xC9uLL:
    case 0xCAuLL:
    case 0xCBuLL:
    case 0xCCuLL:
    case 0xCDuLL:
    case 0xCEuLL:
    case 0xCFuLL:
    case 0xDCuLL:
    case 0xDDuLL:
    case 0xDEuLL:
    case 0xDFuLL:
    case 0xE0uLL:
    case 0xE1uLL:
    case 0xE2uLL:
    case 0xF0uLL:
    case 0xF1uLL:
    case 0xF2uLL:
    case 0x113uLL:
    case 0x11CuLL:
      *a1 = 0u;
      a1[1] = 0u;
      char v5 = 32;
      goto LABEL_31;
    case 0xEDuLL:
      uint64_t v4 = &unk_1F1DEA458;
      goto LABEL_26;
    case 0xF8uLL:
      *a1 = 0u;
      a1[1] = 0u;
      char v5 = 112;
      goto LABEL_31;
    case 0x100uLL:
      uint64_t v4 = &unk_1F1DEA328;
LABEL_26:
      a1->i64[0] = 2;
      a1->i64[1] = (uint64_t)v4;
      a1[1] = (int64x2_t)xmmword_1C2AAA180;
      a1[2].i8[0] = 0;
      return result;
    case 0x101uLL:
      *a1 = 0u;
      a1[1] = 0u;
      char v5 = 120;
      goto LABEL_31;
    case 0x106uLL:
    case 0x107uLL:
    case 0x108uLL:
    case 0x109uLL:
      a1->i64[0] = 0xD000000000000010;
      a1->i64[1] = 0x80000001C2AB8440;
      a1[1].i64[0] = 0;
      a1[1].i64[1] = 0;
      char v5 = 32;
      goto LABEL_31;
    case 0x10DuLL:
      a1->i64[0] = 2;
      a1->i64[1] = (uint64_t)&unk_1F1DEA4A8;
      a1[1] = (int64x2_t)xmmword_1C2AAA180;
      char v5 = 0x80;
      goto LABEL_31;
    case 0x115uLL:
      a1->i64[0] = 65538;
      a1->i64[1] = 0;
      a1[1].i64[0] = 0;
      a1[1].i64[1] = 0;
      char v5 = 40;
      goto LABEL_31;
    case 0x131uLL:
      *a1 = 0u;
      a1[1] = 0u;
      char v5 = -120;
      goto LABEL_31;
    default:
      *a1 = 0u;
      a1[1] = 0u;
      char v5 = -2;
LABEL_31:
      a1[2].i8[0] = v5;
      return result;
  }
}

uint64_t initializeWithCopy for QueryConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  unsigned __int8 v7 = *(unsigned char *)(a2 + 32);
  sub_1C29402B8(*(void *)a2, v4, v5, v6, v7);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  return a1;
}

uint64_t sub_1C29402B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  switch(a5 >> 3)
  {
    case 0:
    case 7:
    case 16:
      goto LABEL_3;
    case 1:
    case 4:
    case 8:
      swift_bridgeObjectRetain();
LABEL_3:
      uint64_t result = swift_bridgeObjectRetain();
      break;
    default:
      return result;
  }
  return result;
}

id ObjectTypeIdentifiable.objectType.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = self;
  (*(void (**)(uint64_t, uint64_t))(a2 + 8))(a1, a2);
  uint64_t v5 = (void *)sub_1C2A9DCF8();
  swift_bridgeObjectRelease();
  id v6 = objc_msgSend(v4, sel__typeWithIdentifier_, v5);

  return v6;
}

uint64_t DisplayTypeProviding.healthStore.getter()
{
  return 0;
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

double UIEdgeInsetsInsetRect(double a1, double a2, double a3, double a4, double a5, double a6)
{
  return a1 + a6;
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t sub_1C2940490(unsigned __int8 *a1)
{
  return *a1;
}

ValueMetadata *type metadata accessor for DiagramConfiguration()
{
  return &type metadata for DiagramConfiguration;
}

ValueMetadata *type metadata accessor for DiagramData()
{
  return &type metadata for DiagramData;
}

uint64_t sub_1C29404B8(unsigned __int8 *a1, char *a2)
{
  return sub_1C293BF28(*a1, *a2);
}

uint64_t destroy for DiagramConfiguration.Banner()
{
  return swift_bridgeObjectRelease();
}

unsigned char *sub_1C29404CC(unsigned char *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

uint64_t sub_1C29404D4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32) >> 3;
}

uint64_t StatisticsQueryConfiguration.statisticsOptions.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1C29404E8(uint64_t result)
{
  *(unsigned char *)(result + 32) &= 7u;
  return result;
}

uint64_t destroy for DiagramData()
{
  return swift_bridgeObjectRelease();
}

ValueMetadata *type metadata accessor for TrendConfiguration()
{
  return &type metadata for TrendConfiguration;
}

unint64_t sub_1C2940510()
{
  return sub_1C2940518(*v0);
}

unint64_t sub_1C2940518(char a1)
{
  unint64_t result = 0x74646957656E696CLL;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6F6C6F43656E696CLL;
      break;
    case 2:
    case 6:
    case 7:
      unint64_t result = 0xD000000000000012;
      break;
    case 3:
      unint64_t result = 0x6E696F50656E696CLL;
      break;
    case 4:
      unint64_t result = 0xD000000000000010;
      break;
    case 5:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 8:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 9:
      unint64_t result = 0xD000000000000017;
      break;
    case 10:
      unint64_t result = 0x62614C746E696F70;
      break;
    default:
      return result;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for DiagramConfiguration.LineProperties.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 10 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 10) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF6) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF5)
  {
    unsigned int v6 = ((a2 - 246) >> 8) + 1;
    *unint64_t result = a2 + 10;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 10;
        break;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ActivitySnidgetCurrentValueVisualizationView.ViewModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF6) {
    goto LABEL_17;
  }
  if (a2 + 10 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 10) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 10;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 10;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 10;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xB;
  int v8 = v6 - 11;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t sub_1C29407B8(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  return sub_1C29399F4(a1, *(double *)(v3 + 16), *(double *)(v3 + 24), a2, a3, *(uint64_t **)(v3 + 32), *(void *)(v3 + 40), *(void (**)(void *__return_ptr, char *))(v3 + 48), *(void *)(v3 + 56), *(uint64_t **)(v3 + 64));
}

uint64_t TrendConfiguration.analysisKinds.getter()
{
  return swift_bridgeObjectRetain();
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_1C29407E8()
{
  unint64_t v1 = 0x697461746F6E6E61;
  if (*v0 != 1) {
    unint64_t v1 = 0xD000000000000017;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x73746E696F70;
  }
}

uint64_t getEnumTagSinglePayload for ParameterOverrides.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t getEnumTagSinglePayload for DateRange(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v8 = v6 - 6;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t getEnumTagSinglePayload for DiagramConfiguration.Color(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xDE) {
    goto LABEL_17;
  }
  if (a2 + 34 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 34) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 34;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 34;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 34;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x23;
  int v8 = v6 - 35;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

HealthVisualization::DiagramConfiguration::Color_optional sub_1C2940A0C(Swift::String *a1)
{
  return DiagramConfiguration.Color.init(rawValue:)(*a1);
}

uint64_t getEnumTagSinglePayload for TimeBasedDistributionChartPoint.PointKind(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

HealthVisualization::DiagramDataKey_optional sub_1C2940AB8(Swift::String *a1)
{
  return DiagramDataKey.init(rawValue:)(*a1);
}

uint64_t type metadata accessor for TimeBasedDistribution()
{
  uint64_t result = qword_1EBB915E8;
  if (!qword_1EBB915E8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

HealthVisualization::DiagramConfiguration::LineWidth_optional sub_1C2940B10(Swift::String *a1)
{
  return DiagramConfiguration.LineWidth.init(rawValue:)(*a1);
}

HealthVisualization::DiagramConfiguration::LineWidth_optional __swiftcall DiagramConfiguration.LineWidth.init(rawValue:)(Swift::String rawValue)
{
  return (HealthVisualization::DiagramConfiguration::LineWidth_optional)sub_1C2934738(v1);
}

unsigned char *storeEnumTagSinglePayload for DiagramConfiguration.AxisProperties.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *uint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

uint64_t sub_1C2940BF4()
{
  return sub_1C2940BFC(*v0);
}

uint64_t sub_1C2940BFC(char a1)
{
  uint64_t result = 0x6570795473697861;
  switch(a1)
  {
    case 1:
      uint64_t result = 0xD000000000000013;
      break;
    case 2:
      uint64_t result = 0x6C6F436C6562616CLL;
      break;
    case 3:
    case 4:
      uint64_t result = 0x656E694C64697267;
      break;
    case 5:
      unsigned int v3 = 1869242733;
      goto LABEL_7;
    case 6:
      unsigned int v3 = 1869506925;
LABEL_7:
      uint64_t result = v3 | 0x6369547200000000;
      break;
    default:
      return result;
  }
  return result;
}

HealthVisualization::DiagramConfiguration::LineRadius_optional sub_1C2940CD4(Swift::String *a1)
{
  return DiagramConfiguration.LineRadius.init(rawValue:)(*a1);
}

HealthVisualization::DiagramConfiguration::LineRadius_optional __swiftcall DiagramConfiguration.LineRadius.init(rawValue:)(Swift::String rawValue)
{
  return (HealthVisualization::DiagramConfiguration::LineRadius_optional)sub_1C2934738(v1);
}

uint64_t getEnumTagSinglePayload for TrendConfiguration.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFA) {
    goto LABEL_17;
  }
  if (a2 + 6 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 6) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 6;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v8 = v6 - 7;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s19HealthVisualization14DiagramDataKeyOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

__n128 __swift_memcpy18_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u16[0] = a2[1].n128_u16[0];
  *a1 = result;
  return result;
}

unsigned char *_s19HealthVisualization20DiagramConfigurationO8BarWidthOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *__n128 result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 3;
        break;
    }
  }
  return result;
}

uint64_t sub_1C2940F30()
{
  uint64_t result = 0x706F7250656E696CLL;
  switch(*v0)
  {
    case 1:
      uint64_t result = 1936291937;
      break;
    case 2:
      uint64_t result = 0x726F4665756C6176;
      break;
    case 3:
      uint64_t result = 0x736E49726574756FLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t _s19HealthVisualization20DiagramConfigurationO14TextAttributesOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xE8) {
    goto LABEL_17;
  }
  if (a2 + 24 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 24) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 24;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 24;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 24;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x19;
  int v8 = v6 - 25;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

HealthVisualization::DiagramConfiguration::TextAttributes_optional sub_1C294105C(Swift::String *a1)
{
  return DiagramConfiguration.TextAttributes.init(rawValue:)(*a1);
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for SupplementaryLabelConfiguration(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t dispatch thunk of DisplayCategoryProviding.displayCategory.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t sub_1C2941120()
{
  if (*v0) {
    return 0x6C61636974726576;
  }
  else {
    return 0x746E6F7A69726F68;
  }
}

HealthVisualization::DiagramConfiguration::ReferenceAnnotationPosition_optional sub_1C2941160(Swift::String *a1)
{
  return DiagramConfiguration.ReferenceAnnotationPosition.init(rawValue:)(*a1);
}

HealthVisualization::DiagramConfiguration::ReferenceAnnotationPosition_optional __swiftcall DiagramConfiguration.ReferenceAnnotationPosition.init(rawValue:)(Swift::String rawValue)
{
  return (HealthVisualization::DiagramConfiguration::ReferenceAnnotationPosition_optional)sub_1C29312F8(v1);
}

HealthVisualization::DiagramConfiguration::AxisTickLength_optional sub_1C2941178(Swift::String *a1)
{
  return DiagramConfiguration.AxisTickLength.init(rawValue:)(*a1);
}

HealthVisualization::DiagramConfiguration::AxisTickLength_optional __swiftcall DiagramConfiguration.AxisTickLength.init(rawValue:)(Swift::String rawValue)
{
  return (HealthVisualization::DiagramConfiguration::AxisTickLength_optional)sub_1C292F2C8(v1);
}

uint64_t storeEnumTagSinglePayload for DiagramConfiguration.AxisProperties(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 6) = 0;
    *(_WORD *)(result + 4) = 0;
    *(_DWORD *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 7) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 7) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 4) = a2 + 1;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for DiagramConfiguration.PointLabelConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x1FFE)
  {
    *(unsigned char *)(result + 10) = 0;
    *(_WORD *)(result + 8) = 0;
    *(void *)__n128 result = a2 - 0x1FFF;
    if (a3 >= 0x1FFF) {
      *(unsigned char *)(result + 11) = 1;
    }
  }
  else
  {
    if (a3 >= 0x1FFF) {
      *(unsigned char *)(result + 11) = 0;
    }
    if (a2)
    {
      unsigned int v3 = ((-a2 >> 1) & 0xFFF) - (a2 << 12);
      *(void *)__n128 result = 0;
      *(unsigned char *)(result + 10) = (v3 >> 5) & 0xFE;
      *(_WORD *)(result + 8) = ((_WORD)v3 << 10) & 0xE000 | (32 * (v3 & 7));
    }
  }
  return result;
}

uint64_t sub_1C2941268(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1C2931350(*a1, *a2);
}

uint64_t dispatch thunk of static Localization.localize(_:substitutions:mySelf:tableName:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

unsigned char *storeEnumTagSinglePayload for DiagramData.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t sub_1C2941354()
{
  if (*v0) {
    return 0x756F724761746164;
  }
  else {
    return 0x65646F4D61746164;
  }
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

uint64_t block_destroy_helper_4()
{
  return swift_release();
}

uint64_t block_destroy_helper_5()
{
  return swift_release();
}

uint64_t block_destroy_helper_6()
{
  return swift_release();
}

uint64_t block_destroy_helper_7()
{
  return swift_release();
}

uint64_t block_destroy_helper_8()
{
  return swift_release();
}

uint64_t block_destroy_helper_9()
{
  return swift_release();
}

uint64_t block_destroy_helper_10()
{
  return swift_release();
}

uint64_t block_destroy_helper_11()
{
  return swift_release();
}

uint64_t block_destroy_helper_12()
{
  return swift_release();
}

uint64_t block_destroy_helper_13()
{
  return swift_release();
}

uint64_t block_destroy_helper_14()
{
  return swift_release();
}

uint64_t block_destroy_helper_15()
{
  return swift_release();
}

uint64_t block_destroy_helper_16()
{
  return swift_release();
}

uint64_t block_destroy_helper_17()
{
  return swift_release();
}

uint64_t block_destroy_helper_18()
{
  return swift_release();
}

__n128 __swift_memcpy27_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 11) = *(_OWORD *)(a2 + 11);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_5(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_6(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_7(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_9(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_10(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_11(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_12(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_13(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_14(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_15(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_16(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_17(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_18(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

__n128 __swift_memcpy89_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t sub_1C29415E4(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    uint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, a2);
  }
  return result;
}

void sub_1C2941634(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

unint64_t sub_1C2941698(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    uint64_t v6 = a1;
    while (1)
    {
      unint64_t v7 = 0xEB00000000646569;
      uint64_t v8 = 0x6669636570736E75;
      switch(*(unsigned char *)(*(void *)(v2 + 48) + v4))
      {
        case 1:
          unint64_t v7 = 0xE700000000000000;
          uint64_t v8 = 0x656D69546C6C61;
          break;
        case 2:
          unint64_t v7 = 0xE500000000000000;
          uint64_t v8 = 0x7961646F74;
          break;
        case 3:
          uint64_t v8 = 0x57676E696C6C6F72;
          unint64_t v7 = 0xEB000000006B6565;
          break;
        case 4:
          uint64_t v8 = 0x4D676E696C6C6F72;
          unint64_t v7 = 0xEC00000068746E6FLL;
          break;
        case 5:
          uint64_t v8 = 0x48676E696C6C6F72;
          unint64_t v7 = 0xEF72616559666C61;
          break;
        default:
          break;
      }
      uint64_t v9 = 0x6669636570736E75;
      unint64_t v10 = 0xEB00000000646569;
      switch(v6)
      {
        case 1:
          unint64_t v10 = 0xE700000000000000;
          if (v8 == 0x656D69546C6C61) {
            goto LABEL_18;
          }
          goto LABEL_19;
        case 2:
          unint64_t v10 = 0xE500000000000000;
          if (v8 != 0x7961646F74) {
            goto LABEL_19;
          }
          goto LABEL_18;
        case 3:
          unint64_t v10 = 0xEB000000006B6565;
          if (v8 != 0x57676E696C6C6F72) {
            goto LABEL_19;
          }
          goto LABEL_18;
        case 4:
          uint64_t v9 = 0x4D676E696C6C6F72;
          unint64_t v10 = 0xEC00000068746E6FLL;
          goto LABEL_17;
        case 5:
          unint64_t v10 = 0xEF72616559666C61;
          if (v8 != 0x48676E696C6C6F72) {
            goto LABEL_19;
          }
          goto LABEL_18;
        default:
LABEL_17:
          if (v8 != v9) {
            goto LABEL_19;
          }
LABEL_18:
          if (v7 == v10)
          {
            swift_bridgeObjectRelease_n();
            return v4;
          }
LABEL_19:
          char v11 = sub_1C2A9E8D8();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v11) {
            return v4;
          }
          unint64_t v4 = (v4 + 1) & v5;
          if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) == 0) {
            return v4;
          }
          break;
      }
    }
  }
  return v4;
}

uint64_t sub_1C2941930(uint64_t a1)
{
  return sub_1C292FCCC(0, *(void *)(a1 + 16), 0, (char *)a1);
}

void sub_1C2941944(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = sub_1C2A9E698();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_1C29419AC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1C292F598(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1C29419CC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1C292FF5C(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

char *sub_1C29419EC(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 32 * a1 + 32);
    size_t v6 = 32 * v4;
    unint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)sub_1C2A9E6A8();
  __break(1u);
  return result;
}

char *sub_1C2941AD8(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 8 * a1 + 32);
    size_t v6 = 8 * v4;
    unint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)sub_1C2A9E6A8();
  __break(1u);
  return result;
}

uint64_t sub_1C2941BC4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_1C2A9E6A8();
  __break(1u);
  return result;
}

uint64_t sub_1C2941CBC(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  uint64_t result = sub_1C2A9E888();
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_137;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v92 = *a1;
      uint64_t v93 = -1;
      uint64_t v94 = 1;
      uint64_t v95 = *a1;
      do
      {
        uint64_t v96 = v93;
        uint64_t v97 = v95;
        do
        {
          double v98 = *(double *)(v97 + 56);
          if (v98 >= *(double *)(v97 + 16)) {
            break;
          }
          if (!v92) {
            goto LABEL_141;
          }
          uint64_t v99 = v97 + 40;
          uint64_t v100 = *(void *)(v97 + 64);
          int v101 = *(_DWORD *)(v97 + 72);
          long long v102 = *(_OWORD *)(v97 + 40);
          long long v103 = *(_OWORD *)(v97 + 16);
          *(_OWORD *)(v97 + 40) = *(_OWORD *)v97;
          *(_OWORD *)(v97 + 56) = v103;
          uint64_t v104 = *(void *)(v97 + 32);
          *(_OWORD *)uint64_t v97 = v102;
          *(double *)(v97 + 16) = v98;
          *(void *)(v97 + 24) = v100;
          *(_DWORD *)(v97 + 32) = v101;
          v97 -= 40;
          *(void *)(v99 + 32) = v104;
        }
        while (!__CFADD__(v96++, 1));
        ++v94;
        v95 += 40;
        --v93;
      }
      while (v94 != v3);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_146;
  }
  uint64_t v6 = result;
  CGFloat v115 = a1;
  if (v3 < 2)
  {
    uint64_t v9 = MEMORY[0x1E4FBC860];
    __dst = (double *)(MEMORY[0x1E4FBC860] + 32);
    if (v3 != 1)
    {
      unint64_t v13 = *(void *)(MEMORY[0x1E4FBC860] + 16);
      uint64_t v12 = (char *)MEMORY[0x1E4FBC860];
LABEL_103:
      CGFloat v106 = v12;
      uint64_t v118 = v9;
      if (v13 >= 2)
      {
        uint64_t v107 = *v115;
        do
        {
          unint64_t v108 = v13 - 2;
          if (v13 < 2) {
            goto LABEL_132;
          }
          if (!v107) {
            goto LABEL_145;
          }
          double v109 = v106;
          uint64_t v110 = *(void *)&v106[16 * v108 + 32];
          uint64_t v111 = *(void *)&v106[16 * v13 + 24];
          sub_1C2A94378((double *)(v107 + 40 * v110), (double *)(v107 + 40 * *(void *)&v106[16 * v13 + 16]), v107 + 40 * v111, __dst);
          if (v1) {
            break;
          }
          if (v111 < v110) {
            goto LABEL_133;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            double v109 = sub_1C2A073DC((uint64_t)v109);
          }
          if (v108 >= *((void *)v109 + 2)) {
            goto LABEL_134;
          }
          CGFloat v112 = &v109[16 * v108 + 32];
          *(void *)CGFloat v112 = v110;
          *((void *)v112 + 1) = v111;
          unint64_t v113 = *((void *)v109 + 2);
          if (v13 > v113) {
            goto LABEL_135;
          }
          memmove(&v109[16 * v13 + 16], &v109[16 * v13 + 32], 16 * (v113 - v13));
          CGFloat v106 = v109;
          *((void *)v109 + 2) = v113 - 1;
          unint64_t v13 = v113 - 1;
        }
        while (v113 > 2);
      }
LABEL_93:
      swift_bridgeObjectRelease();
      *(void *)(v118 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v118 = MEMORY[0x1E4FBC860];
  }
  else
  {
    uint64_t v7 = v5 >> 1;
    uint64_t v8 = sub_1C2A9DED8();
    *(void *)(v8 + 16) = v7;
    uint64_t v118 = v8;
    __dst = (double *)(v8 + 32);
  }
  uint64_t v10 = 0;
  uint64_t v11 = *a1;
  uint64_t v116 = *a1 + 56;
  uint64_t v117 = *a1 + 16;
  uint64_t v114 = *a1 - 40;
  uint64_t v12 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v119 = v6;
  uint64_t v120 = v3;
  uint64_t v121 = v11;
  while (1)
  {
    uint64_t v14 = v10++;
    if (v10 < v3)
    {
      double v15 = *(double *)(v117 + 40 * v10);
      double v16 = *(double *)(v117 + 40 * v14);
      uint64_t v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        unint64_t v17 = (double *)(v116 + 40 * v14);
        while (v15 < v16 != v17[5] >= *v17)
        {
          ++v10;
          v17 += 5;
          if (v3 == v10)
          {
            uint64_t v10 = v3;
            break;
          }
        }
      }
      if (v15 < v16)
      {
        if (v10 < v14) {
          goto LABEL_138;
        }
        if (v14 < v10)
        {
          uint64_t v18 = 40 * v10;
          uint64_t v19 = 40 * v14;
          uint64_t v20 = v10;
          uint64_t v21 = v14;
          do
          {
            if (v21 != --v20)
            {
              if (!v11) {
                goto LABEL_144;
              }
              uint64_t v22 = v11 + v19;
              uint64_t v23 = *(void *)(v11 + v19 + 16);
              uint64_t v24 = v11 + v18;
              uint64_t v25 = *(void *)(v11 + v19 + 24);
              int v26 = *(_DWORD *)(v11 + v19 + 32);
              long long v27 = *(_OWORD *)(v11 + v19);
              uint64_t v28 = *(void *)(v11 + v18 - 8);
              long long v29 = *(_OWORD *)(v11 + v18 - 24);
              *(_OWORD *)uint64_t v22 = *(_OWORD *)(v11 + v18 - 40);
              *(_OWORD *)(v22 + 16) = v29;
              *(void *)(v22 + 32) = v28;
              *(_OWORD *)(v24 - 40) = v27;
              *(void *)(v24 - 24) = v23;
              *(void *)(v24 - 16) = v25;
              *(_DWORD *)(v24 - 8) = v26;
            }
            ++v21;
            v18 -= 40;
            v19 += 40;
          }
          while (v21 < v20);
        }
      }
    }
    if (v10 >= v3) {
      goto LABEL_46;
    }
    if (__OFSUB__(v10, v14)) {
      goto LABEL_136;
    }
    if (v10 - v14 >= v6) {
      goto LABEL_46;
    }
    uint64_t v30 = v14 + v6;
    if (__OFADD__(v14, v6)) {
      goto LABEL_139;
    }
    if (v30 >= v3) {
      uint64_t v30 = v3;
    }
    if (v30 < v14) {
      break;
    }
    if (v10 != v30)
    {
      uint64_t v31 = v114 + 40 * v10;
      do
      {
        uint64_t v32 = v14;
        uint64_t v33 = v31;
        do
        {
          double v34 = *(double *)(v33 + 56);
          if (v34 >= *(double *)(v33 + 16)) {
            break;
          }
          if (!v11) {
            goto LABEL_142;
          }
          uint64_t v35 = v33 + 40;
          uint64_t v36 = *(void *)(v33 + 64);
          int v37 = *(_DWORD *)(v33 + 72);
          long long v38 = *(_OWORD *)(v33 + 40);
          long long v39 = *(_OWORD *)(v33 + 16);
          *(_OWORD *)(v33 + 40) = *(_OWORD *)v33;
          *(_OWORD *)(v33 + 56) = v39;
          uint64_t v40 = *(void *)(v33 + 32);
          *(_OWORD *)uint64_t v33 = v38;
          *(double *)(v33 + 16) = v34;
          *(void *)(v33 + 24) = v36;
          *(_DWORD *)(v33 + 32) = v37;
          v33 -= 40;
          ++v32;
          *(void *)(v35 + 32) = v40;
        }
        while (v10 != v32);
        ++v10;
        v31 += 40;
      }
      while (v10 != v30);
      uint64_t v10 = v30;
    }
LABEL_46:
    if (v10 < v14) {
      goto LABEL_131;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v12 = sub_1C2A06F98(0, *((void *)v12 + 2) + 1, 1, v12);
    }
    unint64_t v42 = *((void *)v12 + 2);
    unint64_t v41 = *((void *)v12 + 3);
    unint64_t v13 = v42 + 1;
    uint64_t v11 = v121;
    if (v42 >= v41 >> 1)
    {
      uint64_t v91 = sub_1C2A06F98((char *)(v41 > 1), v42 + 1, 1, v12);
      uint64_t v11 = v121;
      uint64_t v12 = v91;
    }
    *((void *)v12 + 2) = v13;
    double v43 = v12 + 32;
    UIColor v44 = &v12[16 * v42 + 32];
    *(void *)UIColor v44 = v14;
    *((void *)v44 + 1) = v10;
    if (v42)
    {
      while (1)
      {
        unint64_t v45 = v13 - 1;
        if (v13 >= 4)
        {
          uint64_t v50 = &v43[16 * v13];
          uint64_t v51 = *((void *)v50 - 8);
          uint64_t v52 = *((void *)v50 - 7);
          BOOL v56 = __OFSUB__(v52, v51);
          uint64_t v53 = v52 - v51;
          if (v56) {
            goto LABEL_120;
          }
          uint64_t v55 = *((void *)v50 - 6);
          uint64_t v54 = *((void *)v50 - 5);
          BOOL v56 = __OFSUB__(v54, v55);
          uint64_t v48 = v54 - v55;
          char v49 = v56;
          if (v56) {
            goto LABEL_121;
          }
          unint64_t v57 = v13 - 2;
          char v58 = &v43[16 * v13 - 32];
          uint64_t v60 = *(void *)v58;
          uint64_t v59 = *((void *)v58 + 1);
          BOOL v56 = __OFSUB__(v59, v60);
          uint64_t v61 = v59 - v60;
          if (v56) {
            goto LABEL_123;
          }
          BOOL v56 = __OFADD__(v48, v61);
          uint64_t v62 = v48 + v61;
          if (v56) {
            goto LABEL_126;
          }
          if (v62 >= v53)
          {
            CGFloat v80 = &v43[16 * v45];
            uint64_t v82 = *(void *)v80;
            uint64_t v81 = *((void *)v80 + 1);
            BOOL v56 = __OFSUB__(v81, v82);
            uint64_t v83 = v81 - v82;
            if (v56) {
              goto LABEL_130;
            }
            BOOL v73 = v48 < v83;
            goto LABEL_83;
          }
        }
        else
        {
          if (v13 != 3)
          {
            uint64_t v74 = *((void *)v12 + 4);
            uint64_t v75 = *((void *)v12 + 5);
            BOOL v56 = __OFSUB__(v75, v74);
            uint64_t v67 = v75 - v74;
            char v68 = v56;
            goto LABEL_77;
          }
          uint64_t v47 = *((void *)v12 + 4);
          uint64_t v46 = *((void *)v12 + 5);
          BOOL v56 = __OFSUB__(v46, v47);
          uint64_t v48 = v46 - v47;
          char v49 = v56;
        }
        if (v49) {
          goto LABEL_122;
        }
        unint64_t v57 = v13 - 2;
        CGPoint v63 = &v43[16 * v13 - 32];
        uint64_t v65 = *(void *)v63;
        uint64_t v64 = *((void *)v63 + 1);
        BOOL v66 = __OFSUB__(v64, v65);
        uint64_t v67 = v64 - v65;
        char v68 = v66;
        if (v66) {
          goto LABEL_125;
        }
        id v69 = &v43[16 * v45];
        uint64_t v71 = *(void *)v69;
        uint64_t v70 = *((void *)v69 + 1);
        BOOL v56 = __OFSUB__(v70, v71);
        uint64_t v72 = v70 - v71;
        if (v56) {
          goto LABEL_128;
        }
        if (__OFADD__(v67, v72)) {
          goto LABEL_129;
        }
        if (v67 + v72 >= v48)
        {
          BOOL v73 = v48 < v72;
LABEL_83:
          if (v73) {
            unint64_t v45 = v57;
          }
          goto LABEL_85;
        }
LABEL_77:
        if (v68) {
          goto LABEL_124;
        }
        uint64_t v76 = &v43[16 * v45];
        uint64_t v78 = *(void *)v76;
        uint64_t v77 = *((void *)v76 + 1);
        BOOL v56 = __OFSUB__(v77, v78);
        uint64_t v79 = v77 - v78;
        if (v56) {
          goto LABEL_127;
        }
        if (v79 < v67) {
          goto LABEL_15;
        }
LABEL_85:
        unint64_t v84 = v45 - 1;
        if (v45 - 1 >= v13)
        {
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }
        if (!v11) {
          goto LABEL_143;
        }
        uint64_t v85 = v12;
        uint64_t v86 = &v43[16 * v84];
        uint64_t v87 = *(void *)v86;
        uint64_t v88 = &v43[16 * v45];
        uint64_t v89 = *((void *)v88 + 1);
        sub_1C2A94378((double *)(v11 + 40 * *(void *)v86), (double *)(v11 + 40 * *(void *)v88), v11 + 40 * v89, __dst);
        if (v1) {
          goto LABEL_93;
        }
        if (v89 < v87) {
          goto LABEL_117;
        }
        if (v45 > *((void *)v85 + 2)) {
          goto LABEL_118;
        }
        *(void *)uint64_t v86 = v87;
        *(void *)&v43[16 * v84 + 8] = v89;
        unint64_t v90 = *((void *)v85 + 2);
        if (v45 >= v90) {
          goto LABEL_119;
        }
        uint64_t v12 = v85;
        unint64_t v13 = v90 - 1;
        memmove(&v43[16 * v45], v88 + 16, 16 * (v90 - 1 - v45));
        *((void *)v85 + 2) = v90 - 1;
        uint64_t v11 = v121;
        if (v90 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v13 = 1;
LABEL_15:
    uint64_t v6 = v119;
    uint64_t v3 = v120;
    if (v10 >= v120)
    {
      uint64_t v9 = v118;
      goto LABEL_103;
    }
  }
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  uint64_t result = sub_1C2A9E618();
  __break(1u);
  return result;
}

uint64_t sub_1C2942408(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  uint64_t result = sub_1C2A9E888();
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_141;
    }
    if (v3) {
      return sub_1C293AF10(0, v3, 1, a1);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_149;
  }
  uint64_t v104 = result;
  int v101 = a1;
  if (v3 < 2)
  {
    uint64_t v8 = MEMORY[0x1E4FBC860];
    __dst = (double *)(MEMORY[0x1E4FBC860] + 32);
    if (v3 != 1)
    {
      unint64_t v12 = *(void *)(MEMORY[0x1E4FBC860] + 16);
      uint64_t v11 = (char *)MEMORY[0x1E4FBC860];
LABEL_107:
      uint64_t v92 = v11;
      uint64_t v103 = v8;
      if (v12 >= 2)
      {
        uint64_t v93 = *v101;
        do
        {
          unint64_t v94 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_136;
          }
          if (!v93) {
            goto LABEL_148;
          }
          uint64_t v95 = v92;
          uint64_t v96 = *(void *)&v92[16 * v94 + 32];
          uint64_t v97 = *(void *)&v92[16 * v12 + 24];
          sub_1C2A06C00((char *)(v93 + 40 * v96), (double *)(v93 + 40 * *(void *)&v92[16 * v12 + 16]), (char *)(v93 + 40 * v97), __dst);
          if (v1) {
            break;
          }
          if (v97 < v96) {
            goto LABEL_137;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v95 = sub_1C2A073DC((uint64_t)v95);
          }
          if (v94 >= *((void *)v95 + 2)) {
            goto LABEL_138;
          }
          double v98 = &v95[16 * v94 + 32];
          *(void *)double v98 = v96;
          *((void *)v98 + 1) = v97;
          unint64_t v99 = *((void *)v95 + 2);
          if (v12 > v99) {
            goto LABEL_139;
          }
          memmove(&v95[16 * v12 + 16], &v95[16 * v12 + 32], 16 * (v99 - v12));
          uint64_t v92 = v95;
          *((void *)v95 + 2) = v99 - 1;
          unint64_t v12 = v99 - 1;
        }
        while (v99 > 2);
      }
LABEL_104:
      swift_bridgeObjectRelease();
      *(void *)(v103 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v103 = MEMORY[0x1E4FBC860];
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    uint64_t v7 = sub_1C2A9DED8();
    *(void *)(v7 + 16) = v6;
    uint64_t v103 = v7;
    __dst = (double *)(v7 + 32);
  }
  uint64_t v9 = 0;
  uint64_t v10 = *a1;
  uint64_t v102 = *a1 + 112;
  uint64_t v100 = *a1 - 40;
  uint64_t v11 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v105 = v3;
  uint64_t v107 = *a1;
  while (1)
  {
    uint64_t v13 = v9++;
    if (v9 < v3)
    {
      uint64_t v14 = v10 + 40 * v9;
      uint64_t v15 = v10 + 40 * v13;
      if (*(float *)(v14 + 32) == *(float *)(v15 + 32))
      {
        int v16 = *(double *)(v14 + 16) < *(double *)(v15 + 16);
      }
      else
      {
        type metadata accessor for UILayoutPriority(0);
        sub_1C293B0B0(&qword_1EBB8FAB8, type metadata accessor for UILayoutPriority);
        int v16 = sub_1C2A9DCB8();
      }
      uint64_t v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        unint64_t v17 = (float *)(v102 + 40 * v13);
        do
        {
          if (*v17 == *(v17 - 10))
          {
            if ((v16 ^ (*((double *)v17 - 2) < *((double *)v17 - 7)))) {
              goto LABEL_28;
            }
          }
          else
          {
            type metadata accessor for UILayoutPriority(0);
            sub_1C293B0B0(&qword_1EBB8FAB8, type metadata accessor for UILayoutPriority);
            if ((v16 ^ sub_1C2A9DCB8())) {
              goto LABEL_28;
            }
          }
          ++v9;
          v17 += 10;
        }
        while (v3 != v9);
        uint64_t v9 = v3;
      }
LABEL_28:
      if (v16)
      {
        if (v9 < v13) {
          goto LABEL_142;
        }
        if (v13 < v9)
        {
          uint64_t v18 = 40 * v9;
          uint64_t v19 = 40 * v13;
          uint64_t v20 = v9;
          uint64_t v21 = v13;
          do
          {
            if (v21 != --v20)
            {
              if (!v10) {
                goto LABEL_147;
              }
              uint64_t v22 = v10 + v19;
              uint64_t v23 = *(void *)(v10 + v19 + 16);
              uint64_t v24 = v10 + v18;
              uint64_t v25 = *(void *)(v10 + v19 + 24);
              int v26 = *(_DWORD *)(v10 + v19 + 32);
              long long v27 = *(_OWORD *)(v10 + v19);
              uint64_t v28 = *(void *)(v10 + v18 - 8);
              long long v29 = *(_OWORD *)(v10 + v18 - 24);
              *(_OWORD *)uint64_t v22 = *(_OWORD *)(v10 + v18 - 40);
              *(_OWORD *)(v22 + 16) = v29;
              *(void *)(v22 + 32) = v28;
              *(_OWORD *)(v24 - 40) = v27;
              *(void *)(v24 - 24) = v23;
              *(void *)(v24 - 16) = v25;
              *(_DWORD *)(v24 - 8) = v26;
            }
            ++v21;
            v18 -= 40;
            v19 += 40;
          }
          while (v21 < v20);
        }
      }
    }
    if (v9 >= v3) {
      goto LABEL_56;
    }
    if (__OFSUB__(v9, v13)) {
      goto LABEL_140;
    }
    if (v9 - v13 >= v104) {
      goto LABEL_56;
    }
    if (__OFADD__(v13, v104)) {
      goto LABEL_143;
    }
    uint64_t v30 = v13 + v104 >= v3 ? v3 : v13 + v104;
    if (v30 < v13) {
      break;
    }
    if (v9 != v30)
    {
      uint64_t v106 = v13;
      uint64_t v31 = v100 + 40 * v9;
      do
      {
        uint64_t v32 = v106;
        uint64_t v33 = v31;
        do
        {
          if (*(float *)(v33 + 72) == *(float *)(v33 + 32))
          {
            if (*(double *)(v33 + 56) >= *(double *)(v33 + 16)) {
              break;
            }
          }
          else
          {
            type metadata accessor for UILayoutPriority(0);
            sub_1C293B0B0(&qword_1EBB8FAB8, type metadata accessor for UILayoutPriority);
            if ((sub_1C2A9DCB8() & 1) == 0) {
              break;
            }
          }
          if (!v10) {
            goto LABEL_145;
          }
          uint64_t v34 = v33 + 40;
          uint64_t v35 = *(void *)(v33 + 56);
          uint64_t v36 = *(void *)(v33 + 64);
          int v37 = *(_DWORD *)(v33 + 72);
          long long v38 = *(_OWORD *)(v33 + 40);
          long long v39 = *(_OWORD *)(v33 + 16);
          *(_OWORD *)(v33 + 40) = *(_OWORD *)v33;
          *(_OWORD *)(v33 + 56) = v39;
          uint64_t v40 = *(void *)(v33 + 32);
          *(_OWORD *)uint64_t v33 = v38;
          *(void *)(v33 + 16) = v35;
          *(void *)(v33 + 24) = v36;
          *(_DWORD *)(v33 + 32) = v37;
          v33 -= 40;
          ++v32;
          *(void *)(v34 + 32) = v40;
        }
        while (v9 != v32);
        ++v9;
        v31 += 40;
      }
      while (v9 != v30);
      uint64_t v9 = v30;
      uint64_t v13 = v106;
    }
LABEL_56:
    if (v9 < v13) {
      goto LABEL_135;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v11 = sub_1C2A06F98(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    unint64_t v42 = *((void *)v11 + 2);
    unint64_t v41 = *((void *)v11 + 3);
    unint64_t v12 = v42 + 1;
    if (v42 >= v41 >> 1) {
      uint64_t v11 = sub_1C2A06F98((char *)(v41 > 1), v42 + 1, 1, v11);
    }
    *((void *)v11 + 2) = v12;
    double v43 = v11 + 32;
    UIColor v44 = &v11[16 * v42 + 32];
    *(void *)UIColor v44 = v13;
    *((void *)v44 + 1) = v9;
    if (v42)
    {
      uint64_t v10 = v107;
      while (1)
      {
        unint64_t v45 = v12 - 1;
        if (v12 >= 4)
        {
          uint64_t v50 = &v43[16 * v12];
          uint64_t v51 = *((void *)v50 - 8);
          uint64_t v52 = *((void *)v50 - 7);
          BOOL v56 = __OFSUB__(v52, v51);
          uint64_t v53 = v52 - v51;
          if (v56) {
            goto LABEL_124;
          }
          uint64_t v55 = *((void *)v50 - 6);
          uint64_t v54 = *((void *)v50 - 5);
          BOOL v56 = __OFSUB__(v54, v55);
          uint64_t v48 = v54 - v55;
          char v49 = v56;
          if (v56) {
            goto LABEL_125;
          }
          unint64_t v57 = v12 - 2;
          char v58 = &v43[16 * v12 - 32];
          uint64_t v60 = *(void *)v58;
          uint64_t v59 = *((void *)v58 + 1);
          BOOL v56 = __OFSUB__(v59, v60);
          uint64_t v61 = v59 - v60;
          if (v56) {
            goto LABEL_127;
          }
          BOOL v56 = __OFADD__(v48, v61);
          uint64_t v62 = v48 + v61;
          if (v56) {
            goto LABEL_130;
          }
          if (v62 >= v53)
          {
            CGFloat v80 = &v43[16 * v45];
            uint64_t v82 = *(void *)v80;
            uint64_t v81 = *((void *)v80 + 1);
            BOOL v56 = __OFSUB__(v81, v82);
            uint64_t v83 = v81 - v82;
            if (v56) {
              goto LABEL_134;
            }
            BOOL v73 = v48 < v83;
            goto LABEL_94;
          }
        }
        else
        {
          if (v12 != 3)
          {
            uint64_t v74 = *((void *)v11 + 4);
            uint64_t v75 = *((void *)v11 + 5);
            BOOL v56 = __OFSUB__(v75, v74);
            uint64_t v67 = v75 - v74;
            char v68 = v56;
            goto LABEL_88;
          }
          uint64_t v47 = *((void *)v11 + 4);
          uint64_t v46 = *((void *)v11 + 5);
          BOOL v56 = __OFSUB__(v46, v47);
          uint64_t v48 = v46 - v47;
          char v49 = v56;
        }
        if (v49) {
          goto LABEL_126;
        }
        unint64_t v57 = v12 - 2;
        CGPoint v63 = &v43[16 * v12 - 32];
        uint64_t v65 = *(void *)v63;
        uint64_t v64 = *((void *)v63 + 1);
        BOOL v66 = __OFSUB__(v64, v65);
        uint64_t v67 = v64 - v65;
        char v68 = v66;
        if (v66) {
          goto LABEL_129;
        }
        id v69 = &v43[16 * v45];
        uint64_t v71 = *(void *)v69;
        uint64_t v70 = *((void *)v69 + 1);
        BOOL v56 = __OFSUB__(v70, v71);
        uint64_t v72 = v70 - v71;
        if (v56) {
          goto LABEL_132;
        }
        if (__OFADD__(v67, v72)) {
          goto LABEL_133;
        }
        if (v67 + v72 >= v48)
        {
          BOOL v73 = v48 < v72;
LABEL_94:
          if (v73) {
            unint64_t v45 = v57;
          }
          goto LABEL_96;
        }
LABEL_88:
        if (v68) {
          goto LABEL_128;
        }
        uint64_t v76 = &v43[16 * v45];
        uint64_t v78 = *(void *)v76;
        uint64_t v77 = *((void *)v76 + 1);
        BOOL v56 = __OFSUB__(v77, v78);
        uint64_t v79 = v77 - v78;
        if (v56) {
          goto LABEL_131;
        }
        if (v79 < v67) {
          goto LABEL_15;
        }
LABEL_96:
        unint64_t v84 = v45 - 1;
        if (v45 - 1 >= v12)
        {
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
          goto LABEL_144;
        }
        if (!v10) {
          goto LABEL_146;
        }
        uint64_t v85 = v11;
        uint64_t v86 = v10;
        uint64_t v87 = &v43[16 * v84];
        uint64_t v88 = *(void *)v87;
        uint64_t v89 = &v43[16 * v45];
        uint64_t v90 = *((void *)v89 + 1);
        sub_1C2A06C00((char *)(v86 + 40 * *(void *)v87), (double *)(v86 + 40 * *(void *)v89), (char *)(v86 + 40 * v90), __dst);
        if (v1) {
          goto LABEL_104;
        }
        if (v90 < v88) {
          goto LABEL_121;
        }
        if (v45 > *((void *)v85 + 2)) {
          goto LABEL_122;
        }
        *(void *)uint64_t v87 = v88;
        *(void *)&v43[16 * v84 + 8] = v90;
        unint64_t v91 = *((void *)v85 + 2);
        if (v45 >= v91) {
          goto LABEL_123;
        }
        uint64_t v11 = v85;
        unint64_t v12 = v91 - 1;
        memmove(&v43[16 * v45], v89 + 16, 16 * (v91 - 1 - v45));
        *((void *)v85 + 2) = v91 - 1;
        BOOL v73 = v91 > 2;
        uint64_t v10 = v107;
        if (!v73) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v12 = 1;
    uint64_t v10 = v107;
LABEL_15:
    uint64_t v3 = v105;
    if (v9 >= v105)
    {
      uint64_t v8 = v103;
      goto LABEL_107;
    }
  }
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  uint64_t result = sub_1C2A9E618();
  __break(1u);
  return result;
}

void type metadata accessor for CGPoint(uint64_t a1)
{
}

void type metadata accessor for CGRect(uint64_t a1)
{
}

uint64_t sub_1C2942C70()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1C2942C98(uint64_t a1)
{
  return sub_1C2988C08(a1, *(uint64_t (**)(void))(v1 + 16));
}

void sub_1C2942CA0(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void (**)(void))(a1 + 32);
  id v3 = a2;
  v2();
}

uint64_t sub_1C2942CEC()
{
  return sub_1C2942D34(&qword_1EBB91B98, type metadata accessor for Key);
}

uint64_t sub_1C2942D34(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1C2942D7C()
{
  unint64_t result = qword_1EBB91B90;
  if (!qword_1EBB91B90)
  {
    type metadata accessor for Key(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB91B90);
  }
  return result;
}

uint64_t sub_1C2942DD4(uint64_t a1, uint64_t a2)
{
  sub_1C2941634(0, &qword_1EBB90D58, (uint64_t (*)(uint64_t))type metadata accessor for UIEdgeInsets, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for UIEdgeInsets(uint64_t a1)
{
}

uint64_t sub_1C2942E7C(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1C2942E88(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3) {
    unint64_t v7 = 3;
  }
  unint64_t v8 = v7 - 3;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 128;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

unint64_t sub_1C2942F28()
{
  unint64_t result = qword_1EBB92750;
  if (!qword_1EBB92750)
  {
    sub_1C2938118(255, &qword_1EBB92748, (uint64_t (*)(uint64_t))sub_1C2943230, MEMORY[0x1E4FBB320]);
    sub_1C29431AC(&qword_1EBB92740, (void (*)(void))sub_1C2936150, (void (*)(void))sub_1C2944AD8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB92750);
  }
  return result;
}

uint64_t sub_1C294300C(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1C2943078();
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1C2943078()
{
  if (!qword_1EBB924F0)
  {
    unint64_t v0 = sub_1C2A9DEF8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EBB924F0);
    }
  }
}

uint64_t sub_1C29430D0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_1C2941930(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  uint64_t result = sub_1C2942408(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_1C294313C(void **a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_1C2A94350(v2);
  }
  uint64_t v3 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v3;
  uint64_t result = sub_1C2941CBC(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_1C29431AC(unint64_t *a1, void (*a2)(void), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1C2943230();
    a2();
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1C2943230()
{
  if (!qword_1EBB92738)
  {
    sub_1C2944CC0();
    unint64_t v0 = sub_1C2A9DC78();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EBB92738);
    }
  }
}

unint64_t sub_1C2943294(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  sub_1C2961190();
  uint64_t v2 = (void *)sub_1C2A9E688();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 1);
    uint64_t v6 = *v4;
    id v7 = (id)*(v4 - 2);
    swift_bridgeObjectRetain();
    unint64_t result = sub_1C295DD78((uint64_t)v7);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(void *)(v2[6] + 8 * result) = v7;
    unint64_t v10 = (void *)(v2[7] + 16 * result);
    *unint64_t v10 = v5;
    v10[1] = v6;
    uint64_t v11 = v2[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v4 += 3;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1C29433A8(uint64_t a1)
{
  sub_1C293D4B4(0, &qword_1EBB912C0, (uint64_t (*)(uint64_t))sub_1C2A0EA1C, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1C2943434(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t DiagramAxisMetricsCalculatorFactory.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DiagramAxisMetricsCalculatorFactory()
{
  return self;
}

void *sub_1C29434A8@<X0>(unsigned char *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1C292E150(a1, a2);
}

uint64_t DiagramDateAxisMetricsCalculator.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DiagramDateAxisMetricsCalculator()
{
  return self;
}

uint64_t sub_1C2943528()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 120))();
}

uint64_t sub_1C2943570@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return DiagramConfiguration.init(from:)(a1, a2);
}

unsigned char *_s19HealthVisualization20DiagramConfigurationO9LineWidthOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for DiagramConfiguration.AxisType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF1) {
    goto LABEL_17;
  }
  if (a2 + 15 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 15) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 15;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 15;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 15;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x10;
  int v8 = v6 - 16;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t sub_1C29436E8()
{
  return sub_1C2A9DE58();
}

HealthVisualization::DiagramConfiguration::AxisType_optional sub_1C2943748(Swift::String *a1)
{
  return DiagramConfiguration.AxisType.init(rawValue:)(*a1);
}

unint64_t sub_1C2943754()
{
  unint64_t result = qword_1EBB92690;
  if (!qword_1EBB92690)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB92690);
  }
  return result;
}

unint64_t sub_1C29437A8()
{
  unint64_t result = qword_1EBB92688;
  if (!qword_1EBB92688)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB92688);
  }
  return result;
}

uint64_t sub_1C29437FC()
{
  return sub_1C2A9DE58();
}

HealthVisualization::DiagramConfiguration::Insets_optional sub_1C294385C(Swift::String *a1)
{
  return DiagramConfiguration.Insets.init(rawValue:)(*a1);
}

unint64_t sub_1C2943868()
{
  unint64_t result = qword_1EBB92680;
  if (!qword_1EBB92680)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB92680);
  }
  return result;
}

unint64_t sub_1C29438BC()
{
  unint64_t result = qword_1EBB92678;
  if (!qword_1EBB92678)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB92678);
  }
  return result;
}

HealthVisualization::DiagramConfiguration::Insets_optional __swiftcall DiagramConfiguration.Insets.init(rawValue:)(Swift::String rawValue)
{
  return (HealthVisualization::DiagramConfiguration::Insets_optional)sub_1C29312F8(v1);
}

uint64_t sub_1C294391C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return DiagramConfiguration.Line.init(from:)(a1, a2);
}

unint64_t sub_1C2943934()
{
  unint64_t result = qword_1EBB924D8;
  if (!qword_1EBB924D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB924D8);
  }
  return result;
}

unint64_t sub_1C2943990()
{
  unint64_t result = qword_1EBB924D0;
  if (!qword_1EBB924D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB924D0);
  }
  return result;
}

unint64_t sub_1C29439E4()
{
  unint64_t result = qword_1EBB924C8;
  if (!qword_1EBB924C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB924C8);
  }
  return result;
}

unint64_t sub_1C2943A38()
{
  unint64_t result = qword_1EBB924C0;
  if (!qword_1EBB924C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB924C0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for DiagramConfiguration.Axis(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_WORD *)(result + 12) = 0;
    *(_DWORD *)(result + 8) = 0;
    *(void *)unint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 14) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 14) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 4) = a2 + 2;
    }
  }
  return result;
}

uint64_t sub_1C2943AD4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return DiagramConfiguration.Axis.init(from:)(a1, a2);
}

unint64_t sub_1C2943AEC()
{
  unint64_t result = qword_1EBB92650;
  if (!qword_1EBB92650)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB92650);
  }
  return result;
}

unint64_t sub_1C2943B48()
{
  unint64_t result = qword_1EBB92648;
  if (!qword_1EBB92648)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB92648);
  }
  return result;
}

unint64_t sub_1C2943B9C()
{
  unint64_t result = qword_1EBB92640;
  if (!qword_1EBB92640)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB92640);
  }
  return result;
}

unint64_t sub_1C2943BF0()
{
  unint64_t result = qword_1EBB92638;
  if (!qword_1EBB92638)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB92638);
  }
  return result;
}

unsigned char *_s19HealthVisualization20DiagramConfigurationO10CornerSizeOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t sub_1C2943D14@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return DiagramConfiguration.ValueFormatter.init(from:)(a1, a2);
}

unint64_t sub_1C2943D2C()
{
  unint64_t result = qword_1EBB92618;
  if (!qword_1EBB92618)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB92618);
  }
  return result;
}

unint64_t sub_1C2943D88()
{
  unint64_t result = qword_1EBB91350;
  if (!qword_1EBB91350)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB91350);
  }
  return result;
}

unint64_t sub_1C2943DDC()
{
  unint64_t result = qword_1EBB91348;
  if (!qword_1EBB91348)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB91348);
  }
  return result;
}

unint64_t sub_1C2943E30()
{
  unint64_t result = qword_1EBB91340;
  if (!qword_1EBB91340)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB91340);
  }
  return result;
}

unint64_t sub_1C2943E8C()
{
  unint64_t result = qword_1EBB912F8;
  if (!qword_1EBB912F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB912F8);
  }
  return result;
}

unint64_t sub_1C2943EE0()
{
  unint64_t result = qword_1EBB91338;
  if (!qword_1EBB91338)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB91338);
  }
  return result;
}

unint64_t sub_1C2943F34()
{
  unint64_t result = qword_1EBB91330;
  if (!qword_1EBB91330)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB91330);
  }
  return result;
}

unint64_t sub_1C2943F90()
{
  unint64_t result = qword_1EBB91328;
  if (!qword_1EBB91328)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB91328);
  }
  return result;
}

unint64_t sub_1C2943FE4()
{
  unint64_t result = qword_1EBB91320;
  if (!qword_1EBB91320)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB91320);
  }
  return result;
}

unint64_t sub_1C2944038()
{
  unint64_t result = qword_1EBB91318;
  if (!qword_1EBB91318)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB91318);
  }
  return result;
}

uint64_t sub_1C294408C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1C2944214(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1C29440B4()
{
  uint64_t v1 = 0x6C616D69636564;
  if (*v0 != 1) {
    uint64_t v1 = 0x746E6563726570;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x647261646E617473;
  }
}

unint64_t sub_1C2944118()
{
  unint64_t result = qword_1EBB91310;
  if (!qword_1EBB91310)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB91310);
  }
  return result;
}

unint64_t sub_1C294416C()
{
  unint64_t result = qword_1EBB91308;
  if (!qword_1EBB91308)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB91308);
  }
  return result;
}

unint64_t sub_1C29441C0()
{
  unint64_t result = qword_1EBB91300;
  if (!qword_1EBB91300)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB91300);
  }
  return result;
}

uint64_t sub_1C2944214(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x647261646E617473 && a2 == 0xE800000000000000;
  if (v2 || (sub_1C2A9E8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C616D69636564 && a2 == 0xE700000000000000 || (sub_1C2A9E8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x746E6563726570 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = sub_1C2A9E8D8();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

unint64_t sub_1C294436C()
{
  unint64_t result = qword_1EBB924B8;
  if (!qword_1EBB924B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB924B8);
  }
  return result;
}

unint64_t sub_1C29443C8()
{
  unint64_t result = qword_1EBB924B0;
  if (!qword_1EBB924B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB924B0);
  }
  return result;
}

unint64_t sub_1C294441C()
{
  unint64_t result = qword_1EBB924A8;
  if (!qword_1EBB924A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB924A8);
  }
  return result;
}

unint64_t sub_1C2944470()
{
  unint64_t result = qword_1EBB925F0;
  if (!qword_1EBB925F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB925F0);
  }
  return result;
}

uint64_t sub_1C29444C4@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return DiagramConfiguration.AxisProperties.init(from:)(a1, a2);
}

unint64_t sub_1C29444DC()
{
  unint64_t result = qword_1EBB925E0;
  if (!qword_1EBB925E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB925E0);
  }
  return result;
}

unint64_t sub_1C2944538()
{
  unint64_t result = qword_1EBB925D8;
  if (!qword_1EBB925D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB925D8);
  }
  return result;
}

unint64_t sub_1C294458C()
{
  unint64_t result = qword_1EBB925D0;
  if (!qword_1EBB925D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB925D0);
  }
  return result;
}

unint64_t sub_1C29445E0()
{
  unint64_t result = qword_1EBB925C8;
  if (!qword_1EBB925C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB925C8);
  }
  return result;
}

uint64_t sub_1C2944634()
{
  return sub_1C2A9DE58();
}

HealthVisualization::DiagramConfiguration::AxisLineWidth_optional sub_1C2944694(Swift::String *a1)
{
  return DiagramConfiguration.AxisLineWidth.init(rawValue:)(*a1);
}

unint64_t sub_1C29446A0()
{
  unint64_t result = qword_1EBB925C0;
  if (!qword_1EBB925C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB925C0);
  }
  return result;
}

unint64_t sub_1C29446F4()
{
  unint64_t result = qword_1EBB925B8;
  if (!qword_1EBB925B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB925B8);
  }
  return result;
}

uint64_t sub_1C2944748@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1C292D244(a1, a2);
  *a3 = result;
  return result;
}

unint64_t sub_1C2944770()
{
  unint64_t result = 7496034;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x72656E6E6162;
      break;
    case 2:
      unint64_t result = 1701734764;
      break;
    case 3:
      unint64_t result = 0x796C6E4F73697861;
      break;
    case 4:
      unint64_t result = 0x7562697274736964;
      break;
    case 5:
      unint64_t result = 0xD000000000000011;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1C2944820()
{
  unint64_t result = qword_1EBB925B0;
  if (!qword_1EBB925B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB925B0);
  }
  return result;
}

unint64_t sub_1C2944874()
{
  unint64_t result = qword_1EBB925A8;
  if (!qword_1EBB925A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB925A8);
  }
  return result;
}

unint64_t sub_1C29448C8()
{
  unint64_t result = qword_1EBB925A0;
  if (!qword_1EBB925A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB925A0);
  }
  return result;
}

unsigned char *_s19HealthVisualization20DiagramConfigurationO13AxisLineWidthOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t dispatch thunk of DiagramImageView.delegate.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x90))();
}

id sub_1C2944A70(id result)
{
  if (result != (id)1) {
    return result;
  }
  return result;
}

void sub_1C2944A80(id a1)
{
  if (a1 != (id)1) {
}
  }

void sub_1C2944A90(void *a1)
{
  sub_1C2932204(a1, *(void *)(v1 + 112), *(void (**)(id, id *, double, double))(v1 + 120), *(CGFloat *)(v1 + 16), *(CGFloat *)(v1 + 24), *(CGFloat *)(v1 + 32), *(CGFloat *)(v1 + 40), *(double *)(v1 + 48), *(double *)(v1 + 56), *(double *)(v1 + 64), *(double *)(v1 + 72), *(double *)(v1 + 80), *(double *)(v1 + 88));
}

unint64_t sub_1C2944AD8()
{
  unint64_t result = qword_1EBB92588;
  if (!qword_1EBB92588)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB92588);
  }
  return result;
}

unint64_t sub_1C2944B34()
{
  unint64_t result = qword_1EBB92580;
  if (!qword_1EBB92580)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB92580);
  }
  return result;
}

unint64_t sub_1C2944B88()
{
  unint64_t result = qword_1EBB92578;
  if (!qword_1EBB92578)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB92578);
  }
  return result;
}

uint64_t DiagramFactory.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DiagramFactory()
{
  return self;
}

uint64_t dispatch thunk of DiagramFactory.drawDiagram(diagramImageView:diagramData:configuration:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t DiagramFactory.init(hbxViewControllerFactory:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return v1;
}

unint64_t sub_1C2944C6C()
{
  unint64_t result = qword_1EBB92558;
  if (!qword_1EBB92558)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB92558);
  }
  return result;
}

unint64_t sub_1C2944CC0()
{
  unint64_t result = qword_1EBB92550;
  if (!qword_1EBB92550)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB92550);
  }
  return result;
}

unint64_t sub_1C2944D14()
{
  type metadata accessor for Localization();
  uint64_t v0 = (void *)swift_allocObject();
  unint64_t result = sub_1C2943294(MEMORY[0x1E4FBC860]);
  v0[2] = result;
  v0[3] = 0x617A696C61636F4CLL;
  v0[4] = 0xEB00000000656C62;
  qword_1EBB919C0 = (uint64_t)v0;
  return result;
}

uint64_t type metadata accessor for DiagramLine()
{
  return self;
}

double sub_1C2944DA0()
{
  return sub_1C29308C4();
}

void (*sub_1C2944DC4())(void *a1, uint64_t a2, CGFloat a3, CGFloat a4)
{
  return sub_1C294518C;
}

double sub_1C2944E08()
{
  return sub_1C293CBC4();
}

void sub_1C2944E30(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 160);
  uint64_t v25 = *(void *)(v2 + 16);
  if (v25)
  {
    uint64_t v27 = *(void *)(a1 + 16);
    long long v29 = *(_OWORD *)(a1 + 48);
    long long v30 = *(_OWORD *)(a1 + 32);
    uint64_t v24 = v2 + 32;
    long long v28 = *(_OWORD *)(a1 + 64);
    swift_bridgeObjectRetain();
    unint64_t v3 = 0;
    uint64_t v23 = v2;
    while (1)
    {
      if (v3 >= *(void *)(v2 + 16))
      {
        __break(1u);
        goto LABEL_13;
      }
      unsigned int v4 = (double *)(v24 + 24 * v3);
      uint64_t v5 = *(void *)v4;
      uint64_t v6 = *(void *)(*(void *)v4 + 16);
      if (v6) {
        break;
      }
LABEL_3:
      if (++v3 == v25)
      {
        swift_bridgeObjectRelease();
        return;
      }
    }
    unint64_t v26 = v3;
    double v7 = v4[1];
    id v31 = self;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    uint64_t v8 = v5 + 56;
    while (1)
    {
      uint64_t v32 = v6;
      CGPoint v34 = *(CGPoint *)(v8 - 8);
      *(_OWORD *)&v33.CGFloat a = v30;
      *(_OWORD *)&v33.CGFloat c = v29;
      *(_OWORD *)&v33.tCGFloat x = v28;
      CGPoint v9 = CGPointApplyAffineTransform(v34, &v33);
      swift_bridgeObjectRetain();
      unint64_t v10 = (void *)sub_1C2A9DCF8();
      type metadata accessor for Key(0);
      sub_1C2942D7C();
      uint64_t v11 = (void *)sub_1C2A9DC58();
      objc_msgSend(v10, sel_sizeWithAttributes_, v11);
      double v13 = v12;
      double v15 = v14;

      sub_1C296B238();
      uint64_t v16 = swift_allocObject();
      *(_OWORD *)(v16 + 16) = xmmword_1C2AA7730;
      id v17 = objc_allocWithZone(MEMORY[0x1E4F67C60]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v18 = (void *)sub_1C2A9DCF8();
      swift_bridgeObjectRelease();
      uint64_t v19 = (void *)sub_1C2A9DC58();
      swift_bridgeObjectRelease();
      id v20 = objc_msgSend(v17, sel_initWithText_inRect_withAttributes_, v18, v19, v9.x + v13 * -0.5, v9.y - v7 - v15, v13, v15);

      if (!v20) {
        break;
      }
      *(void *)(v16 + 32) = v20;
      *(void *)&v33.CGFloat a = v16;
      sub_1C2A9DEA8();
      sub_1C2A0EB0C();
      uint64_t v21 = (void *)sub_1C2A9DE88();
      swift_bridgeObjectRelease();
      id v22 = objc_msgSend(self, sel_clearColor);
      objc_msgSend(v31, sel_drawStrings_outlineWidth_outlineColor_context_, v21, v22, v27, 8.0);
      swift_bridgeObjectRelease();

      v8 += 32;
      uint64_t v6 = v32 - 1;
      if (v32 == 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        uint64_t v2 = v23;
        unint64_t v3 = v26;
        goto LABEL_3;
      }
    }
LABEL_13:
    __break(1u);
  }
}

void sub_1C294518C(void *a1, uint64_t a2, CGFloat a3, CGFloat a4)
{
  sub_1C293CCD4(a1, a2, v4, a3, a4);
}

uint64_t sub_1C2945194(uint64_t a1)
{
  return a1;
}

uint64_t sub_1C29451C0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return DiagramData.init(from:)(a1, a2);
}

unint64_t sub_1C29451E0()
{
  unint64_t result = qword_1EBB92548;
  if (!qword_1EBB92548)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB92548);
  }
  return result;
}

unint64_t sub_1C2945234()
{
  unint64_t result = qword_1EBB92540;
  if (!qword_1EBB92540)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB92540);
  }
  return result;
}

unint64_t sub_1C2945288()
{
  unint64_t result = qword_1EBB92538;
  if (!qword_1EBB92538)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB92538);
  }
  return result;
}

uint64_t type metadata accessor for DiagramAxis()
{
  return self;
}

double StudentsCDF(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  double v9 = a2;
  double v10 = a1;
  if (a2 <= 0.0) {
    boost::math::policies::detail::raise_error<std::domain_error,double>("boost::math::students_t_distribution<%1%>::students_t_distribution", "Degrees of freedom argument is %1%, but must be > 0 !");
  }
  return boost::math::cdf<double,boost::math::policies::policy<boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(&v9, &v10, a1, a2, a3, a4, a5, a6, a7, a8);
}

double boost::math::cdf<double,boost::math::policies::policy<boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(double *a1, double *a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  double v10 = *a1;
  double v19 = v10;
  if (v10 <= 0.0) {
    boost::math::policies::detail::raise_error<std::domain_error,double>("boost::math::cdf(const students_t_distribution<%1%>&, %1%)", "Degrees of freedom argument is %1%, but must be > 0 !");
  }
  *(double *)&long long v18 = *a2;
  double result = 0.5;
  if (*(double *)&v18 != 0.0)
  {
    if (fabs(*(double *)&v18) == INFINITY)
    {
      double result = 1.0;
      if (*(double *)&v18 < 0.0) {
        return 0.0;
      }
    }
    else if (v10 <= 4.50359963e15)
    {
      double v13 = *(double *)&v18 * *(double *)&v18;
      double v14 = v13 + v13;
      double v15 = *(double *)&v18 * *(double *)&v18 + v10;
      double v16 = v10 * 0.5;
      if (v10 <= v13 + v13) {
        double v17 = boost::math::ibeta<double,double,double,boost::math::policies::policy<boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v16, 0.5, v10 / v15, v16, v14, a8, a9, a10);
      }
      else {
        double v17 = boost::math::ibetac<double,double,double,boost::math::policies::policy<boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(0.5, v10 * 0.5, v13 / v15, v16, v14, a8, a9, a10);
      }
      double result = v17 * 0.5;
      if (*a2 > 0.0) {
        return 1.0 - result;
      }
    }
    else
    {
      long long v18 = xmmword_1C2A9FD40;
      boost::math::cdf<double,boost::math::policies::policy<boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>((double *)&v18, a2);
    }
  }
  return result;
}

void HypergeometricPDF(double a1, double a2, double a3, double a4)
{
  v10[0] = a3;
  v10[1] = a4;
  v10[2] = a2;
  double v12 = 0.0;
  boost::math::hypergeometric_distribution<double,boost::math::policies::policy<boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>::check_params(v10, (char *)boost::math::hypergeometric_distribution<double,boost::math::policies::policy<boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>::hypergeometric_distribution(unsigned int,unsigned int,unsigned int)::function);
  double v12 = a1;
  if ((*(void *)&a1 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL) {
    goto LABEL_9;
  }
  double v6 = floor(a1);
  double v7 = ceil(a1);
  if (a1 < 0.0) {
    double v6 = v7;
  }
  if (v6 > 2147483650.0 || v6 < -2147483650.0)
  {
LABEL_9:
    if (a1 <= 0.0) {
      unsigned int v9 = 0x80000000;
    }
    else {
      unsigned int v9 = 0x7FFFFFFF;
    }
  }
  else
  {
    unsigned int v9 = (int)v6;
  }
  unsigned int v11 = v9;
  if ((double)v9 != a1) {
    boost::math::policies::detail::raise_error<std::domain_error,double>((char *)boost::math::pdf<double,boost::math::policies::policy<boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>,double>(boost::math::hypergeometric_distribution<double,boost::math::policies::policy<boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>> const&,double const&)::function, "Random variable out of range: must be an integer but got %1%");
  }
  boost::math::pdf<double,boost::math::policies::policy<boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v10, &v11);
}

void boost::math::policies::detail::raise_error<std::domain_error,double>(char *a1, char *a2)
{
  uint64_t v2 = "Unknown function operating on type %1%";
  if (a1) {
    uint64_t v2 = a1;
  }
  if (a2) {
    unint64_t v3 = a2;
  }
  else {
    unint64_t v3 = "Cause unknown: error caused by bad argument with value %1%";
  }
  std::string::basic_string[abi:ne180100]<0>(&v14, v2);
  std::string::basic_string[abi:ne180100]<0>(&v13, v3);
  std::string::basic_string[abi:ne180100]<0>(&v12, "Error in function ");
  boost::math::policies::detail::replace_all_in_string(&v14, "%1%", "double");
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v4 = &v14;
  }
  else {
    uint64_t v4 = (std::string *)v14.__r_.__value_.__r.__words[0];
  }
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v14.__r_.__value_.__l.__size_;
  }
  std::string::append(&v12, (const std::string::value_type *)v4, size);
  std::string::append(&v12, ": ", 2uLL);
  boost::math::policies::detail::prec_format<double>(v10);
  if (v11 >= 0) {
    double v6 = (const char *)v10;
  }
  else {
    double v6 = (const char *)v10[0];
  }
  boost::math::policies::detail::replace_all_in_string(&v13, "%1%", v6);
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    double v7 = &v13;
  }
  else {
    double v7 = (std::string *)v13.__r_.__value_.__r.__words[0];
  }
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v8 = HIBYTE(v13.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v8 = v13.__r_.__value_.__l.__size_;
  }
  std::string::append(&v12, (const std::string::value_type *)v7, v8);
  std::logic_error::logic_error(&v9, &v12);
  v9.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
  boost::throw_exception<std::domain_error>(&v9);
}

uint64_t boost::math::policies::detail::replace_all_in_string(std::string *a1, char *__s, const char *a3)
{
  size_t v6 = strlen(__s);
  size_t v7 = strlen(a3);
  int v8 = SHIBYTE(a1->__r_.__value_.__r.__words[2]);
  if (v8 >= 0) {
    std::logic_error v9 = (uint64_t *)a1;
  }
  else {
    std::logic_error v9 = (uint64_t *)a1->__r_.__value_.__r.__words[0];
  }
  if (v8 >= 0) {
    std::string::size_type size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = a1->__r_.__value_.__l.__size_;
  }
  uint64_t result = strlen(__s);
  int64_t v12 = result;
  std::string::size_type v13 = 0;
  while (!v12)
  {
LABEL_18:
    if (v13 != -1)
    {
      size_t v19 = strlen(a3);
      std::string::replace(a1, v13, v6, a3, v19);
      v13 += v7;
      int v20 = SHIBYTE(a1->__r_.__value_.__r.__words[2]);
      std::logic_error v9 = v20 >= 0 ? (uint64_t *)a1 : (uint64_t *)a1->__r_.__value_.__r.__words[0];
      std::string::size_type size = v20 >= 0 ? HIBYTE(a1->__r_.__value_.__r.__words[2]) : a1->__r_.__value_.__l.__size_;
      uint64_t result = strlen(__s);
      int64_t v12 = result;
      if (size >= v13) {
        continue;
      }
    }
    return result;
  }
  uint64_t result = (uint64_t)v9 + v13;
  std::string::size_type v14 = (std::string::size_type)v9 + size;
  int64_t v15 = size - v13;
  if ((uint64_t)(size - v13) >= v12)
  {
    int v16 = *__s;
    do
    {
      int64_t v17 = v15 - v12;
      if (v17 == -1) {
        break;
      }
      uint64_t result = (uint64_t)memchr((void *)result, v16, v17 + 1);
      if (!result) {
        break;
      }
      uint64_t v18 = result;
      uint64_t result = memcmp((const void *)result, __s, v12);
      if (!result)
      {
        if (v18 == v14) {
          return result;
        }
        std::string::size_type v13 = v18 - (void)v9;
        goto LABEL_18;
      }
      uint64_t result = v18 + 1;
      int64_t v15 = v14 - (v18 + 1);
    }
    while (v15 >= v12);
  }
  return result;
}

uint64_t boost::math::policies::detail::prec_format<double>@<X0>(void *a1@<X8>)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v4);
  *(void *)((char *)&v6[1] + *(void *)(v5 - 24)) = 17;
  std::ostream::operator<<();
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v6, a1);
  v4[0] = *MEMORY[0x1E4FBA408];
  uint64_t v2 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v4 + *(void *)(v4[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  uint64_t v5 = v2;
  v6[0] = MEMORY[0x1E4FBA470] + 16;
  if (v7 < 0) {
    operator delete((void *)v6[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C8764E10](&v8);
}

void sub_1C2945A20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void boost::throw_exception<std::domain_error>(const std::logic_error *a1)
{
  exception = __cxa_allocate_exception(0x40uLL);
  boost::wrapexcept<std::domain_error>::wrapexcept((uint64_t)exception, a1);
}

void sub_1C2945A7C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *std::string::basic_string[abi:ne180100]<0>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    size_t v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    size_t v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

void std::string::__throw_length_error[abi:ne180100]()
{
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E645A008, MEMORY[0x1E4FBA1C8]);
}

void sub_1C2945BA4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D0] + 16);
  return result;
}

void __clang_call_terminate(void *a1)
{
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA488] + 104;
  *(void *)(a1 + 128) = MEMORY[0x1E4FBA488] + 104;
  uint64_t v3 = a1 + 16;
  uint64_t v4 = MEMORY[0x1E4FBA488] + 64;
  *(void *)(a1 + 16) = MEMORY[0x1E4FBA488] + 64;
  size_t v5 = (void *)MEMORY[0x1E4FBA408];
  uint64_t v6 = *(void *)(MEMORY[0x1E4FBA408] + 24);
  uint64_t v7 = *(void *)(MEMORY[0x1E4FBA408] + 16);
  *(void *)a1 = v7;
  *(void *)(a1 + *(void *)(v7 - 24)) = v6;
  *(void *)(a1 + 8) = 0;
  uint64_t v8 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  uint64_t v9 = MEMORY[0x1E4FBA488] + 24;
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  uint64_t v10 = v5[5];
  uint64_t v11 = v5[4];
  *(void *)(a1 + 16) = v11;
  *(void *)(v3 + *(void *)(v11 - 24)) = v10;
  uint64_t v12 = v5[1];
  *(void *)a1 = v12;
  *(void *)(a1 + *(void *)(v12 - 24)) = v5[6];
  *(void *)a1 = v9;
  *(void *)(a1 + 128) = v2;
  *(void *)(a1 + 16) = v4;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 24) = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_1C2945EB0(_Unwind_Exception *a1)
{
  std::iostream::~basic_iostream();
  MEMORY[0x1C8764E10](v1);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA408];
  uint64_t v3 = *MEMORY[0x1E4FBA408];
  *(void *)a1 = *MEMORY[0x1E4FBA408];
  uint64_t v4 = *(void *)(v2 + 72);
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 64);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = MEMORY[0x1E4FBA470] + 16;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1C8764E10](a1 + 128);
  return a1;
}

uint64_t std::stringbuf::str[abi:ne180100]<std::allocator<char>>@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = std::stringbuf::view[abi:ne180100](a1);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = (const void *)result;
  size_t v6 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v9 = operator new(v7 + 1);
    a2[1] = v6;
    a2[2] = v8 | 0x8000000000000000;
    *a2 = v9;
    a2 = v9;
  }
  else
  {
    *((unsigned char *)a2 + 23) = v4;
    if (!v4) {
      goto LABEL_9;
    }
  }
  uint64_t result = (uint64_t)memmove(a2, v5, v6);
LABEL_9:
  *((unsigned char *)a2 + v6) = 0;
  return result;
}

uint64_t std::stringbuf::view[abi:ne180100](uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 96);
  if ((v1 & 0x10) != 0)
  {
    unint64_t v3 = *(void *)(a1 + 48);
    if (*(void *)(a1 + 88) < v3) {
      *(void *)(a1 + 88) = v3;
    }
    return *(void *)(a1 + 40);
  }
  else if ((v1 & 8) != 0)
  {
    return *(void *)(a1 + 16);
  }
  else
  {
    return 0;
  }
}

uint64_t boost::wrapexcept<std::domain_error>::wrapexcept(uint64_t a1, const std::logic_error *a2)
{
  *(void *)a1 = &unk_1F1DE9C68;
  std::logic_error::logic_error((std::logic_error *)(a1 + 8), a2);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  *(void *)a1 = &unk_1F1DE9BF0;
  *(void *)(a1 + 8) = &unk_1F1DE9C20;
  *(void *)(a1 + 24) = &unk_1F1DE9C48;
  return a1;
}

uint64_t boost::wrapexcept<std::domain_error>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_1F1DE9C98;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  MEMORY[0x1C8764D20](a1 + 8);
  return a1;
}

void boost::wrapexcept<std::domain_error>::clone()
{
}

void sub_1C29463C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a9);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a10);
  (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<std::domain_error>::rethrow(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x40uLL);
  boost::wrapexcept<std::domain_error>::wrapexcept((uint64_t)exception, a1);
}

void sub_1C2946488(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<std::domain_error>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_1F1DE9C98;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  MEMORY[0x1C8764D20](a1 + 8);
  JUMPOUT(0x1C8764E40);
}

void non-virtual thunk to'boost::wrapexcept<std::domain_error>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 16) = &unk_1F1DE9C98;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  JUMPOUT(0x1C8764D20);
}

{
  uint64_t vars8;

  *(void *)(a1 + 16) = &unk_1F1DE9C98;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  MEMORY[0x1C8764D20](a1);
  JUMPOUT(0x1C8764E40);
}

void non-virtual thunk to'boost::wrapexcept<std::domain_error>::~wrapexcept(void *a1)
{
  *a1 = &unk_1F1DE9C98;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  JUMPOUT(0x1C8764D20);
}

{
  uint64_t vars8;

  *a1 = &unk_1F1DE9C98;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  MEMORY[0x1C8764D20](a1 - 2);
  JUMPOUT(0x1C8764E40);
}

uint64_t *boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2 && (*(unsigned int (**)(uint64_t))(*(void *)v2 + 32))(v2)) {
    *a1 = 0;
  }
  return a1;
}

uint64_t boost::wrapexcept<std::domain_error>::wrapexcept(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F1DE9C68;
  std::logic_error::logic_error((std::logic_error *)(a1 + 8), (const std::logic_error *)(a2 + 8));
  *(void *)(a1 + 8) = MEMORY[0x1E4FBA4C8] + 16;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = &unk_1F1DE9C98;
  *(void *)(a1 + 32) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(void *)a1 = &unk_1F1DE9BF0;
  *(void *)(a1 + 8) = &unk_1F1DE9C20;
  *(void *)(a1 + 24) = &unk_1F1DE9C48;
  return a1;
}

uint64_t boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 32))(result);
  }
  *a1 = a2;
  if (a2)
  {
    long long v5 = *(uint64_t (**)(uint64_t))(*(void *)a2 + 24);
    return v5(a2);
  }
  return result;
}

void boost::math::cdf<double,boost::math::policies::policy<boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(double *a1, double *a2)
{
  double v3 = *a1;
  double v2 = a1[1];
  if (v2 <= 0.0 || (*(void *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    long long v5 = "Scale parameter is %1%, but must be > 0 !";
    goto LABEL_6;
  }
  if ((*(void *)&v3 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    long long v5 = "Location parameter is %1%, but must be finite!";
    goto LABEL_6;
  }
  double v6 = *a2;
  if (fabs(*a2) == INFINITY) {
    return;
  }
  if ((*(void *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    long long v5 = "Random variate x is %1%, but must be finite!";
LABEL_6:
    boost::math::policies::detail::raise_error<std::domain_error,double>((char *)boost::math::cdf<double,boost::math::policies::policy<boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(boost::math::normal_distribution<double,boost::math::policies::policy<boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>> const&,double const&)::function, v5);
  }
  if (fabs(boost::math::detail::erf_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(1, (v6 - v3) / (v2 * -1.41421356))) > 1.79769313e308)boost::math::policies::detail::raise_error<std::overflow_error,double>("boost::math::erfc<%1%>(%1%, %1%)", "numeric overflow"); {
}
  }

double boost::math::ibetac<double,double,double,boost::math::policies::policy<boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  double v8 = boost::math::detail::ibeta_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>((uint64_t)&v10, 1u, 1, 0, a1, a2, a3, a4, a5, a6, a7, a8);
  if (fabs(v8) > 1.79769313e308) {
    boost::math::policies::detail::raise_error<std::overflow_error,double>("boost::math::ibetac<%1%>(%1%,%1%,%1%)", "numeric overflow");
  }
  return v8;
}

double boost::math::ibeta<double,double,double,boost::math::policies::policy<boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  double v8 = boost::math::detail::ibeta_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>((uint64_t)&v10, 0, 1, 0, a1, a2, a3, a4, a5, a6, a7, a8);
  if (fabs(v8) > 1.79769313e308) {
    boost::math::policies::detail::raise_error<std::overflow_error,double>("boost::math::ibeta<%1%>(%1%,%1%,%1%)", "numeric overflow");
  }
  return v8;
}

double boost::math::detail::erf_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(int a1, long double a2)
{
  int v3 = a1;
  if (a2 < 0.0)
  {
    if ((a1 & 1) == 0) {
      return -boost::math::detail::erf_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(0, -a2);
    }
    double v4 = -a2;
    if (a2 >= -0.5) {
      return boost::math::detail::erf_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(0, v4)+ 1.0;
    }
    else {
      return 2.0
    }
           - boost::math::detail::erf_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(1, v4);
  }
  if (a2 < 0.5)
  {
    if (a2 >= 1.0e-10)
    {
      float64x2_t v8 = vaddq_f64(vmulq_n_f64(vmlaq_n_f64((float64x2_t)xmmword_1C2A9FE80, (float64x2_t)xmmword_1C2A9FE70, a2 * a2 * (a2 * a2)), a2 * a2), vaddq_f64(vmulq_n_f64(vmlaq_n_f64((float64x2_t)xmmword_1C2A9FE60, (float64x2_t)xmmword_1C2A9FE50, a2 * a2 * (a2 * a2)), a2 * a2 * (a2 * a2)), (float64x2_t)xmmword_1C2A9FE90));
      double v6 = (vdivq_f64(v8, (float64x2_t)vdupq_laneq_s64((int64x2_t)v8, 1)).f64[0] + 1.04494858) * a2;
    }
    else
    {
      double v6 = 0.0;
      if (a2 != 0.0) {
        double v6 = a2 * 0.0033791671 + a2 * 1.125;
      }
    }
    goto LABEL_25;
  }
  if (a1) {
    double v7 = 28.0;
  }
  else {
    double v7 = 5.92999983;
  }
  int v3 = a1 ^ 1;
  if (a2 >= v7)
  {
    double v6 = 0.0;
    goto LABEL_25;
  }
  if (a2 < 1.5)
  {
    long double v9 = a2 + -0.5;
    v10.f64[0] = v9 * v9 * 0.0195049001 + 0.191003696;
    v10.f64[1] = v9 * v9 * (v9 * v9 * 0.00000337511472 + 0.123850975) + 1.42628005;
    float64x2_t v11 = vaddq_f64(vaddq_f64(vmulq_n_f64(v10, v9 * v9), (float64x2_t)xmmword_1C2A9FE40), vmulq_n_f64(vaddq_f64(vmulq_n_f64(vmlaq_n_f64((float64x2_t)xmmword_1C2A9FE20, (float64x2_t)xmmword_1C2A9FE10, v9 * v9), v9 * v9), (float64x2_t)xmmword_1C2A9FE30), a2 + -0.5));
    double v6 = exp(-(a2 * a2)) / a2 * (vdivq_f64(v11, (float64x2_t)vdupq_laneq_s64((int64x2_t)v11, 1)).f64[0] + 0.405935764);
    goto LABEL_25;
  }
  if (a2 < 2.5)
  {
    long double v12 = a2 + -1.5;
    float64x2_t v13 = vaddq_f64(vaddq_f64(vmulq_n_f64(vmlaq_n_f64((float64x2_t)xmmword_1C2A9FDE0, (float64x2_t)xmmword_1C2A9FDD0, v12 * v12), v12 * v12), (float64x2_t)xmmword_1C2A9FE00), vmulq_n_f64(vaddq_f64(vmulq_n_f64(vmlaq_n_f64((float64x2_t)xmmword_1C2A9FDC0, (float64x2_t)xmmword_1C2A9FDB0, v12 * v12), v12 * v12), (float64x2_t)xmmword_1C2A9FDF0), a2 + -1.5));
    double v14 = vdivq_f64(v13, (float64x2_t)vdupq_laneq_s64((int64x2_t)v13, 1)).f64[0] + 0.506728172;
    long double v15 = frexp(a2, &__e);
    int v16 = __e;
LABEL_23:
    double v19 = ldexp(v15, 26);
    long double v20 = ldexp(floor(v19), v16 - 26);
    long double v21 = a2 - v20;
    long double v22 = v20 * v20 - a2 * a2 + (v20 + v20) * (a2 - v20);
    double v23 = exp(-(a2 * a2));
    double v6 = v14 * (v23 * exp(-(v22 + v21 * v21)) / a2);
    goto LABEL_25;
  }
  if (a2 < 4.5)
  {
    long double v17 = a2 + -3.5;
    float64x2_t v18 = vaddq_f64(vaddq_f64(vmulq_n_f64(vmlaq_n_f64((float64x2_t)xmmword_1C2A9FD80, (float64x2_t)xmmword_1C2A9FD70, v17 * v17), v17 * v17), (float64x2_t)xmmword_1C2A9FDA0), vmulq_n_f64(vaddq_f64(vmulq_n_f64(vmlaq_n_f64((float64x2_t)xmmword_1C2A9FD60, (float64x2_t)xmmword_1C2A9FD50, v17 * v17), v17 * v17), (float64x2_t)xmmword_1C2A9FD90), a2 + -3.5));
    double v14 = vdivq_f64(v18, (float64x2_t)vdupq_laneq_s64((int64x2_t)v18, 1)).f64[0] + 0.540575027;
    long double v15 = frexp(a2, &v35);
    int v16 = v35;
    goto LABEL_23;
  }
  double v38 = 1.0 / a2;
  double v24 = boost::math::tools::evaluate_polynomial<7ul,long double,long double>(boost::math::detail::erf_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(long double,BOOL,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy> const&,std::integral_constant<int,53> const&)::P, &v38);
  double v37 = 1.0 / a2;
  double v25 = v24
      / boost::math::tools::evaluate_polynomial<7ul,long double,long double>(boost::math::detail::erf_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(long double,BOOL,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy> const&,std::integral_constant<int,53> const&)::Q, &v37)+ 0.557909012;
  long double v26 = frexp(a2, &v36);
  int v27 = v36;
  double v28 = ldexp(v26, 26);
  long double v29 = ldexp(floor(v28), v27 - 26);
  long double v30 = a2 - v29;
  long double v31 = v29 * v29 - a2 * a2 + (v29 + v29) * (a2 - v29);
  double v32 = exp(-(a2 * a2));
  double v6 = v32 * exp(-(v31 + v30 * v30)) / a2 * v25;
LABEL_25:
  if (v3) {
    return 1.0 - v6;
  }
  else {
    return v6;
  }
}

void boost::math::policies::detail::raise_error<std::overflow_error,double>(char *a1, const char *a2)
{
  double v2 = "Unknown function operating on type %1%";
  if (a1) {
    double v2 = a1;
  }
  if (a2) {
    int v3 = a2;
  }
  else {
    int v3 = "Cause unknown";
  }
  std::string::basic_string[abi:ne180100]<0>(&v9, v2);
  std::string::basic_string[abi:ne180100]<0>(&v8, "Error in function ");
  boost::math::policies::detail::replace_all_in_string(&v9, "%1%", "double");
  if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    double v4 = &v9;
  }
  else {
    double v4 = (std::string *)v9.__r_.__value_.__r.__words[0];
  }
  if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v9.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v9.__r_.__value_.__l.__size_;
  }
  std::string::append(&v8, (const std::string::value_type *)v4, size);
  std::string::append(&v8, ": ", 2uLL);
  size_t v6 = strlen(v3);
  std::string::append(&v8, v3, v6);
  std::runtime_error::runtime_error(&v7, &v8);
  v7.__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E4FBA4E0] + 16);
  boost::throw_exception<std::overflow_error>(&v7);
}

void sub_1C2947008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

void boost::throw_exception<std::overflow_error>(const std::runtime_error *a1)
{
  exception = __cxa_allocate_exception(0x40uLL);
  boost::wrapexcept<std::overflow_error>::wrapexcept((uint64_t)exception, a1);
}

void sub_1C2947098(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::wrapexcept<std::overflow_error>::wrapexcept(uint64_t a1, const std::runtime_error *a2)
{
  *(void *)a1 = &unk_1F1DE9C68;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), a2);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  *(void *)a1 = &unk_1F1DE9D00;
  *(void *)(a1 + 8) = &unk_1F1DE9D30;
  *(void *)(a1 + 24) = &unk_1F1DE9D58;
  return a1;
}

uint64_t boost::wrapexcept<std::overflow_error>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_1F1DE9C98;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  return a1;
}

void boost::wrapexcept<std::overflow_error>::clone()
{
}

void sub_1C2947378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a9);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a10);
  (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<std::overflow_error>::rethrow(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x40uLL);
  boost::wrapexcept<std::overflow_error>::wrapexcept((uint64_t)exception, a1);
}

void sub_1C2947438(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<std::overflow_error>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_1F1DE9C98;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  JUMPOUT(0x1C8764E40);
}

void non-virtual thunk to'boost::wrapexcept<std::overflow_error>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 16) = &unk_1F1DE9C98;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
}

{
  uint64_t vars8;

  *(void *)(a1 + 16) = &unk_1F1DE9C98;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
  JUMPOUT(0x1C8764E40);
}

void non-virtual thunk to'boost::wrapexcept<std::overflow_error>::~wrapexcept(void *a1)
{
  *a1 = &unk_1F1DE9C98;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::runtime_error::~runtime_error((std::runtime_error *)a1 - 1);
}

{
  uint64_t vars8;

  *a1 = &unk_1F1DE9C98;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::runtime_error::~runtime_error((std::runtime_error *)a1 - 1);
  JUMPOUT(0x1C8764E40);
}

uint64_t boost::wrapexcept<std::overflow_error>::wrapexcept(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F1DE9C68;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), (const std::runtime_error *)(a2 + 8));
  *(void *)(a1 + 8) = MEMORY[0x1E4FBA4E0] + 16;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = &unk_1F1DE9C98;
  *(void *)(a1 + 32) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(void *)a1 = &unk_1F1DE9D00;
  *(void *)(a1 + 8) = &unk_1F1DE9D30;
  *(void *)(a1 + 24) = &unk_1F1DE9D58;
  return a1;
}

void sub_1C2947788(_Unwind_Exception *a1)
{
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

double boost::math::tools::evaluate_polynomial<7ul,long double,long double>(double *a1, double *a2)
{
  double v2 = *a2;
  return v2 * v2 * (v2 * v2 * (a1[4] + a1[6] * (v2 * v2)) + a1[2])
       + *a1
       + *a2 * (v2 * v2 * (a1[3] + a1[5] * (v2 * v2)) + a1[1]);
}

double boost::math::detail::ibeta_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(uint64_t a1, unsigned int a2, int a3, double *a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11, double a12)
{
  int v14 = a2;
  double v16 = a7;
  double v17 = a6;
  double v18 = a5;
  double v136 = a6;
  double v137 = a5;
  double v135 = a7;
  if (a4 && (a3 & 1) == 0) {
    boost::math::detail::ibeta_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>();
  }
  if (a4) {
    *a4 = -1.0;
  }
  double v19 = 1.0;
  if (a7 < 0.0 || a7 > 1.0)
  {
    long double v21 = (char *)boost::math::detail::ibeta_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(long double,long double,long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy> const&,BOOL,BOOL,long double*)::function;
    long double v22 = "Parameter x outside the range [0,1] in the incomplete beta function (got x=%1%).";
    goto LABEL_33;
  }
  if (a3)
  {
    if (v18 < 0.0)
    {
      long double v21 = (char *)boost::math::detail::ibeta_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(long double,long double,long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy> const&,BOOL,BOOL,long double*)::function;
      long double v22 = "The argument a to the incomplete beta function must be >= zero (got a=%1%).";
      goto LABEL_33;
    }
    if (a6 < 0.0)
    {
      long double v21 = (char *)boost::math::detail::ibeta_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(long double,long double,long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy> const&,BOOL,BOOL,long double*)::function;
      long double v22 = "The argument b to the incomplete beta function must be >= zero (got b=%1%).";
      goto LABEL_33;
    }
    if (v18 == 0.0)
    {
      if (a6 == 0.0)
      {
        long double v21 = (char *)boost::math::detail::ibeta_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(long double,long double,long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy> const&,BOOL,BOOL,long double*)::function;
        long double v22 = "The arguments a and b to the incomplete beta function cannot both be zero, with x=%1%.";
LABEL_33:
        boost::math::policies::detail::raise_error<std::domain_error,long double>(v21, v22);
      }
      if (a6 > 0.0) {
        return (double)(a2 ^ 1);
      }
    }
    else if (v18 > 0.0 && a6 == 0.0)
    {
      return (double)a2;
    }
  }
  else
  {
    if (v18 <= 0.0)
    {
      long double v21 = (char *)boost::math::detail::ibeta_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(long double,long double,long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy> const&,BOOL,BOOL,long double*)::function;
      long double v22 = "The argument a to the incomplete beta function must be greater than zero (got a=%1%).";
      goto LABEL_33;
    }
    if (a6 <= 0.0)
    {
      long double v21 = (char *)boost::math::detail::ibeta_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(long double,long double,long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy> const&,BOOL,BOOL,long double*)::function;
      long double v22 = "The argument b to the incomplete beta function must be greater than zero (got b=%1%).";
      goto LABEL_33;
    }
  }
  if (a7 == 0.0)
  {
    if (a4)
    {
      double v23 = 4.45014772e-308;
      a7 = 8.98846567e307;
      if (v18 < 1.0) {
        double v23 = 8.98846567e307;
      }
      if (v18 != 1.0) {
        double v19 = v23;
      }
      *a4 = v19;
    }
    if (a2) {
      double v24 = 1.0;
    }
    else {
      double v24 = 0.0;
    }
    if (a2 && (a3 & 1) == 0)
    {
      boost::math::detail::beta_imp<long double,boost::math::lanczos::lanczos13m53,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v18, v17, a7, a8, a9, a10, a11, a12);
      double v24 = v25;
      if (fabs(v25) > 1.79769313e308) {
        boost::math::policies::detail::raise_error<std::overflow_error,long double>("boost::math::beta<%1%>(%1%,%1%)", "numeric overflow");
      }
    }
    return v24;
  }
  if (a7 != 1.0)
  {
    double v28 = 1.0 - a7;
    if (v18 == 0.5 && a6 == 0.5)
    {
      if (a4) {
        *a4 = sqrt(v28 * a7) * 0.318309886;
      }
      if (a2) {
        double v29 = 1.0 - a7;
      }
      else {
        double v29 = a7;
      }
      double v30 = asinl(sqrt(v29)) / 1.57079633;
      if (a3) {
        return v30;
      }
      else {
        return v30 * 3.14159265;
      }
    }
    if (v18 == 1.0)
    {
      int v14 = a2 ^ 1;
      double v31 = a7;
      goto LABEL_72;
    }
    if (a6 == 1.0)
    {
      double v31 = 1.0 - a7;
      double v17 = v18;
      double v28 = a7;
LABEL_72:
      if (v17 == 1.0)
      {
        if (a4) {
          *a4 = 1.0;
        }
        if (v14) {
          return v31;
        }
        else {
          return v28;
        }
      }
      if (a4) {
        *a4 = v17 * pow(v28, v17 + -1.0);
      }
      if (v31 >= 0.5)
      {
        if (v14)
        {
          double v33 = boost::math::detail::powm1_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(a1, v28, v17);
          goto LABEL_85;
        }
        double v38 = pow(v28, v17);
      }
      else
      {
        double v32 = v17
            * boost::math::log1p<boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(-v31);
        if (v14)
        {
          double v33 = boost::math::expm1<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v32);
LABEL_85:
          double v24 = -v33;
          goto LABEL_98;
        }
        double v38 = exp(v32);
      }
      double v24 = v38;
LABEL_98:
      if ((a3 & 1) == 0) {
        return v24 / v17;
      }
      return v24;
    }
    if (a6 >= v18) {
      double v34 = v18;
    }
    else {
      double v34 = a6;
    }
    if (v34 > 1.0)
    {
      double v35 = -(a6 - (a6 + v18) * v28);
      if (v18 < a6) {
        double v35 = v18 - (a6 + v18) * a7;
      }
      if (v35 >= 0.0)
      {
        double v36 = a7;
        double v37 = v18;
        double v18 = a6;
        double v16 = 1.0 - a7;
      }
      else
      {
        double v136 = v18;
        double v137 = a6;
        int v14 = a2 ^ 1;
        double v36 = 1.0 - a7;
        double v37 = a6;
        double v135 = 1.0 - a7;
      }
      if (v18 >= 40.0)
      {
        long double v53 = v37;
        long double v54 = v18;
        long double v55 = v36;
        double v56 = v16;
        char v57 = a3;
LABEL_125:
        double v24 = boost::math::detail::ibeta_fraction2<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(a1, v57, a4, v53, v54, v55, v56, a9, a10, a11, a12);
LABEL_184:
        if (a4)
        {
          double v128 = *a4;
          double v42 = v135;
          if (*a4 < 0.0)
          {
            boost::math::detail::ibeta_power_terms<long double,boost::math::lanczos::lanczos13m53,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v137, v136, v135, v16, 1.0, v45, v46, v47, (uint64_t)&v134, 1, a1, "boost::math::ibeta<%1%>(%1%, %1%, %1%)");
            *a4 = v128;
            double v42 = v135;
          }
          if (v128 != 0.0)
          {
            double v129 = v16 * v42;
            double v42 = v16 * v42 * 1.79769313e308;
            double v130 = v128 / v129;
            BOOL v131 = v42 < v128;
            double v132 = 8.98846567e307;
            if (!v131) {
              double v132 = v130;
            }
            *a4 = v132;
          }
        }
        if (v14)
        {
          double v133 = 1.0;
          if ((a3 & 1) == 0) {
            double v133 = boost::math::beta<long double,long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v137, v136, v42, v43, v44, v45, v46, v47);
          }
          return v133 - v24;
        }
        return v24;
      }
      double v41 = floor(v18);
      if (v41 == v18 && floor(v37) == v37 && v37 < 2147483550.0 && v16 != 1.0)
      {
        double v24 = boost::math::detail::binomial_ccdf<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v18 + v37 + -1.0, v37 + -1.0, v36, v16);
        if ((a3 & 1) == 0) {
          double v24 = v24
        }
              * boost::math::beta<long double,long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v37, v18, v42, v43, v44, v45, v46, v47);
        goto LABEL_184;
      }
      if (v18 * v36 > 0.7)
      {
        if (v37 > 15.0)
        {
          double v134 = v41;
          int v67 = boost::math::itrunc<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(&v134);
          int v72 = v67 - (v136 == (double)v67);
          double v73 = v136 - (double)v72;
          double v74 = 1.0;
          if ((a3 & 1) == 0 && v72 >= 1)
          {
            double v75 = 0.0;
            int v76 = v72;
            do
            {
              double v69 = v73 + v75;
              double v68 = (v73 + v137 + v75) / (v73 + v75);
              double v74 = v74 * v68;
              double v75 = v75 + 1.0;
              --v76;
            }
            while (v76);
          }
          boost::math::detail::ibeta_a_step<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v72, a1, a3, 0, v136 - (double)v72, v137, v16, v135, v68, v69, v70, v71);
          double v24 = boost::math::detail::beta_small_b_large_a_series<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(a1, a3, v137, v73, v135, v16, v77, 1.0)/ v74;
          goto LABEL_184;
        }
        if (a3)
        {
          double v134 = v41;
          int v85 = boost::math::itrunc<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(&v134);
          double v90 = v136 - (double)v85;
          if (v90 > 0.0) {
            double v91 = v136 - (double)v85;
          }
          else {
            double v91 = v90 + 1.0;
          }
          boost::math::detail::ibeta_a_step<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v85 - (v90 <= 0.0), a1, 1, 0, v91, v137, v16, v135, v86, v87, v88, v89);
          double v93 = v92;
          boost::math::detail::ibeta_a_step<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(20, a1, 1, 0, v137, v91, v135, v16, v94, v95, v96, v97);
          double v99 = v93 + v98;
          if (v14) {
            double v100 = v99 + -1.0;
          }
          else {
            double v100 = v99;
          }
          double v101 = boost::math::detail::beta_small_b_large_a_series<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(a1, 1, v137 + 20.0, v91, v135, v16, v100, 1.0);
          if (v14) {
            double v24 = -v101;
          }
          else {
            double v24 = v101;
          }
          goto LABEL_166;
        }
        long double v53 = v37;
        long double v54 = v18;
        long double v55 = v36;
        double v56 = v16;
        char v57 = 0;
        goto LABEL_125;
      }
      if (v14)
      {
        double v82 = 1.0;
        if ((a3 & 1) == 0) {
          double v82 = boost::math::beta<long double,long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v37, v18, 0.7, a8, a9, a10, a11, a12);
        }
        double v63 = -v82;
        long double v64 = v37;
        long double v65 = v18;
        long double v66 = v36;
LABEL_150:
        int v14 = 0;
        double v24 = -boost::math::detail::ibeta_series<long double,boost::math::lanczos::lanczos13m53,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v64, v65, v66, v63, v16, a10, a11, a12, (uint64_t)&v134, a3, a4);
        goto LABEL_184;
      }
      long double v78 = v37;
      long double v79 = v18;
      long double v80 = v36;
      goto LABEL_165;
    }
    if (a7 <= 0.5)
    {
      double v39 = a7;
      double v40 = v18;
      double v18 = a6;
      double v16 = 1.0 - a7;
    }
    else
    {
      double v136 = v18;
      double v137 = a6;
      int v14 = a2 ^ 1;
      double v39 = 1.0 - a7;
      double v40 = a6;
      double v135 = 1.0 - a7;
    }
    if (v40 >= v18) {
      double v48 = v40;
    }
    else {
      double v48 = v18;
    }
    if (v48 <= 1.0)
    {
      double v58 = pow(v39, v40);
      if (v40 < fmin(v18, 0.2) && v58 > 0.9)
      {
        double v136 = v40;
        double v137 = v18;
        double v135 = v16;
        if (v39 < 0.3)
        {
          if ((a3 & 1) == 0)
          {
            double v102 = 0.0;
            int v103 = 20;
            double v51 = 1.0;
            do
            {
              double v52 = v18 + v102;
              double v51 = v51 * ((v18 + v40 + v102) / (v18 + v102));
              double v102 = v102 + 1.0;
              --v103;
            }
            while (v103);
            goto LABEL_169;
          }
LABEL_130:
          boost::math::detail::ibeta_a_step<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(20, a1, 1, a4, v18, v40, v16, v39, a9, a10, a11, a12);
          double v60 = v59;
          double v51 = 1.0;
          double v61 = 1.0;
          if (v14)
          {
LABEL_170:
            double v111 = v18 + 20.0;
            long double v112 = v40;
            long double v113 = v16;
            double v114 = v39;
            double v115 = v60;
            uint64_t v116 = a1;
            int v117 = a3;
            double v118 = v51;
LABEL_173:
            double v81 = boost::math::detail::beta_small_b_large_a_series<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v116, v117, v111, v112, v113, v114, v115, v118);
            goto LABEL_174;
          }
          goto LABEL_177;
        }
LABEL_144:
        if (v14)
        {
          double v81 = boost::math::detail::ibeta_series<long double,boost::math::lanczos::lanczos13m53,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v18, v40, v16, 0.0, v39, a10, a11, a12, (uint64_t)&v134, a3, a4);
LABEL_174:
          double v24 = v81;
          int v14 = 0;
LABEL_183:
          double v16 = v39;
          goto LABEL_184;
        }
        double v83 = 1.0;
        if ((a3 & 1) == 0) {
          double v83 = boost::math::beta<long double,long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v18, v40, a7, a8, a9, a10, a11, a12);
        }
        double v84 = boost::math::detail::ibeta_series<long double,boost::math::lanczos::lanczos13m53,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v18, v40, v16, -v83, v39, a10, a11, a12, (uint64_t)&v134, a3, a4);
LABEL_182:
        int v14 = 0;
        double v24 = -v84;
        goto LABEL_183;
      }
    }
    else if (v18 > 1.0 && (v39 >= 0.1 || pow(v18 * v39, v40) > 0.7))
    {
      double v136 = v40;
      double v137 = v18;
      double v135 = v16;
      if (v39 < 0.3)
      {
        if (v18 >= 15.0)
        {
          if (v14)
          {
            double v115 = 0.0;
            double v118 = 1.0;
            double v111 = v18;
            long double v112 = v40;
            long double v113 = v16;
            double v114 = v39;
            uint64_t v116 = a1;
            int v117 = a3;
            goto LABEL_173;
          }
          double v127 = 1.0;
          if ((a3 & 1) == 0) {
            double v127 = boost::math::beta<long double,long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v18, v40, a7, a8, a9, a10, a11, a12);
          }
          double v119 = -v127;
          double v126 = 1.0;
          double v120 = v18;
          long double v121 = v40;
          long double v122 = v16;
          double v123 = v39;
          uint64_t v124 = a1;
          int v125 = a3;
          goto LABEL_181;
        }
        if ((a3 & 1) == 0)
        {
          double v49 = 0.0;
          int v50 = 20;
          double v51 = 1.0;
          do
          {
            double v52 = v18 + v49;
            double v51 = v51 * ((v18 + v40 + v49) / (v18 + v49));
            double v49 = v49 + 1.0;
            --v50;
          }
          while (v50);
LABEL_169:
          boost::math::detail::ibeta_a_step<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(20, a1, 0, a4, v18, v40, v16, v39, v52, a10, a11, a12);
          double v60 = v110;
          if (v14) {
            goto LABEL_170;
          }
          double v61 = boost::math::beta<long double,long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v18, v40, v104, v105, v106, v107, v108, v109);
LABEL_177:
          double v119 = v60 - v61;
          double v120 = v18 + 20.0;
          long double v121 = v40;
          long double v122 = v16;
          double v123 = v39;
          uint64_t v124 = a1;
          int v125 = a3;
          double v126 = v51;
LABEL_181:
          double v84 = boost::math::detail::beta_small_b_large_a_series<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v124, v125, v120, v121, v122, v123, v119, v126);
          goto LABEL_182;
        }
        goto LABEL_130;
      }
      goto LABEL_144;
    }
    if (v14)
    {
      double v62 = 1.0;
      if ((a3 & 1) == 0) {
        double v62 = boost::math::beta<long double,long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v40, v18, a7, a8, a9, a10, a11, a12);
      }
      double v63 = -v62;
      long double v64 = v40;
      long double v65 = v18;
      long double v66 = v39;
      goto LABEL_150;
    }
    long double v78 = v40;
    long double v79 = v18;
    long double v80 = v39;
LABEL_165:
    double v24 = boost::math::detail::ibeta_series<long double,boost::math::lanczos::lanczos13m53,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v78, v79, v80, 0.0, v16, a10, a11, a12, (uint64_t)&v134, a3, a4);
LABEL_166:
    int v14 = 0;
    goto LABEL_184;
  }
  if (a4)
  {
    double v27 = 4.45014772e-308;
    a7 = 8.98846567e307;
    if (v17 < 1.0) {
      double v27 = 8.98846567e307;
    }
    if (v17 != 1.0) {
      double v19 = v27;
    }
    *a4 = v19;
  }
  if (a2) {
    double v24 = 0.0;
  }
  else {
    double v24 = 1.0;
  }
  if (a2 & 1) != 0 || (a3) {
    return v24;
  }
  return boost::math::beta<long double,long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v18, v17, a7, a8, a9, a10, a11, a12);
}

double boost::math::beta<long double,long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  boost::math::detail::beta_imp<long double,boost::math::lanczos::lanczos13m53,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(a1, a2, a3, a4, a5, a6, a7, a8);
  if (fabs(result) > 1.79769313e308) {
    boost::math::policies::detail::raise_error<std::overflow_error,long double>("boost::math::beta<%1%>(%1%,%1%)", "numeric overflow");
  }
  return result;
}

double boost::math::expm1<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(double a1)
{
  double v1 = boost::math::detail::expm1_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(a1);
  if (fabs(v1) > 1.79769313e308) {
    boost::math::policies::detail::raise_error<std::overflow_error,long double>("boost::math::expm1<%1%>(%1%)", "numeric overflow");
  }
  return v1;
}

double boost::math::log1p<boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(long double a1)
{
  if (a1 < -1.0) {
    boost::math::policies::detail::raise_error<std::domain_error,long double>("log1p<%1%>(%1%)", "log1p(x) requires x > -1, but got CGFloat x = %1%.");
  }
  if (a1 == -1.0) {
    boost::math::policies::detail::raise_error<std::overflow_error,long double>("log1p<%1%>(%1%)", "Overflow Error");
  }
  return log1pl(a1);
}

double boost::math::detail::ibeta_series<long double,boost::math::lanczos::lanczos13m53,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(long double a1, long double a2, long double a3, double a4, long double a5, double a6, double a7, double a8, uint64_t a9, int a10, long double *a11)
{
  double v14 = a1;
  __CGFloat y = a2;
  double v63 = a1;
  if (a11 && (a10 & 1) == 0) {
    boost::math::detail::ibeta_series<long double,boost::math::lanczos::lanczos13m53,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>();
  }
  if (!a10)
  {
    double v44 = pow(a3, a1);
LABEL_14:
    double v48 = v44;
    goto LABEL_15;
  }
  double v64 = a1 + a2;
  double v15 = a1 + 6.02468004 + -0.5;
  double v16 = a2 + 6.02468004;
  double v17 = v16 + -0.5;
  double v18 = v64 + 6.02468004 + -0.5;
  double v19 = boost::math::tools::detail::evaluate_rational_c_imp<long double,unsigned int,long double>((uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum_expG_scaled<long double>(long double const&)::num, (uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum_expG_scaled<long double>(long double const&)::denom, &v64, v64 + 6.02468004, v16, 6.02468004, a1 + 6.02468004, a5, a6, a7, a8);
  double v27 = boost::math::tools::detail::evaluate_rational_c_imp<long double,unsigned int,long double>((uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum_expG_scaled<long double>(long double const&)::num, (uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum_expG_scaled<long double>(long double const&)::denom, &v63, v19, v20, v21, v22, v23, v24, v25, v26);
  __CGFloat x = v19
      / (v27
       * boost::math::tools::detail::evaluate_rational_c_imp<long double,unsigned int,long double>((uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum_expG_scaled<long double>(long double const&)::num, (uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum_expG_scaled<long double>(long double const&)::denom, &__y, v27, v28, v29, v30, v31, v32, v33, v34));
  double v57 = v18 / v17;
  double v58 = v17;
  long double v35 = log(v18 / v17);
  double v36 = __y;
  double v37 = __y + -0.5;
  double v38 = v35 * (__y + -0.5);
  double v61 = v15;
  double v39 = v18 * a3 / v15;
  long double v40 = log(v39);
  double v14 = v63;
  double v41 = v40 * v63;
  if (v38 <= -708.0 || v38 >= 709.0 || v41 <= -708.0 || v41 >= 709.0)
  {
    long double v45 = v41 + log(__x) + v38;
    long double v46 = (log(v61) + -1.0) * 0.5 + v45;
    if (a11)
    {
      long double v47 = log(a5);
      *a11 = exp(v46 + v36 * v47);
    }
    double v44 = exp(v46);
    goto LABEL_14;
  }
  if (v36 * v63 >= v58 * 10.0)
  {
    double v43 = pow(v57, v37);
  }
  else
  {
    double v42 = boost::math::log1p<boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v63 / v58);
    double v43 = exp(v37 * v42);
    double v14 = v63;
  }
  double v48 = sqrt(v61 / 2.71828183) * (__x * v43 * pow(v39, v14));
  if (a11)
  {
    long double v56 = v48 * pow(a5, __y);
    *a11 = v56;
    if (v56 < 0.0) {
      boost::math::detail::ibeta_series<long double,boost::math::lanczos::lanczos13m53,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>();
    }
  }
LABEL_15:
  if (v48 >= 2.22507386e-308)
  {
    double v49 = 1.0 - __y;
    int v50 = 1;
    uint64_t v51 = 1000000;
    do
    {
      a4 = v48 / v14 + a4;
      if (fabs(a4 * 2.22044605e-16) >= fabs(v48 / v14)) {
        break;
      }
      long double v52 = v49 * a3;
      double v49 = v49 + 1.0;
      double v53 = (double)v50++;
      double v48 = v48 * (v52 / v53);
      double v14 = v14 + 1.0;
      --v51;
    }
    while (v51);
    unint64_t v54 = 1000000 - v51;
    if (v54 >= 0xF4240)
    {
      double v64 = (double)v54;
      boost::math::policies::detail::raise_error<boost::math::evaluation_error,long double>("boost::math::ibeta<%1%>(%1%, %1%, %1%) in ibeta_series (with lanczos)", "Series evaluation exceeded %1% iterations, giving up now.");
    }
  }
  return a4;
}

void boost::math::detail::ibeta_a_step<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(int a1, uint64_t a2, char a3, double *a4, long double a5, long double a6, long double a7, double a8, double a9, double a10, double a11, double a12)
{
  boost::math::detail::ibeta_power_terms<long double,boost::math::lanczos::lanczos13m53,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(a5, a6, a7, a8, 1.0, a10, a11, a12, (uint64_t)&v22, a3, a2, "boost::math::ibeta<%1%>(%1%, %1%, %1%)");
  if (a4)
  {
    *a4 = v17;
    if (v17 < 0.0) {
      boost::math::detail::ibeta_a_step<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>();
    }
  }
  if (v17 / a5 != 0.0)
  {
    double v18 = 1.0;
    if (a1 >= 2)
    {
      int v19 = a1 - 1;
      double v20 = 0.0;
      double v21 = 1.0;
      do
      {
        double v21 = v21 * ((a5 + a6 + v20) * a7 / (v20 + a5 + 1.0));
        double v18 = v18 + v21;
        double v20 = v20 + 1.0;
        --v19;
      }
      while (v19);
    }
  }
}

double boost::math::detail::beta_small_b_large_a_series<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(uint64_t a1, int a2, double a3, long double a4, long double a5, double a6, double a7, double a8)
{
  uint64_t v82 = *MEMORY[0x1E4F143B8];
  double v14 = a4 + -1.0;
  double v15 = (a4 + -1.0) * 0.5 + a3;
  if (a6 >= 0.35)
  {
    double v16 = log(a5);
  }
  else
  {
    double v56 = -a6;
    if (a6 > 1.0) {
      boost::math::policies::detail::raise_error<std::domain_error,long double>("log1p<%1%>(%1%)", "log1p(x) requires x > -1, but got CGFloat x = %1%.");
    }
    if (a6 == 1.0) {
      boost::math::policies::detail::raise_error<std::overflow_error,long double>("log1p<%1%>(%1%)", "Overflow Error");
    }
    double v16 = log1pl(-a6);
  }
  double v54 = v16;
  double v17 = -(v15 * v16);
  double v24 = boost::math::detail::regularised_gamma_prefix<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>,boost::math::lanczos::lanczos13m53>(a1, (uint64_t)&v56, a4, v17);
  if (v24 > 2.22507386e-308)
  {
    if (a2)
    {
      double v25 = boost::math::detail::tgamma_delta_ratio_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(a3, a4, v18, v19, v20, v21, v22, v23);
      if (fabs(v25) > 1.79769313e308) {
        boost::math::policies::detail::raise_error<std::overflow_error,long double>("boost::math::tgamma_delta_ratio<%1%>(%1%, %1%)", "numeric overflow");
      }
      double v26 = v24 / v25;
    }
    else
    {
      boost::math::detail::full_igamma_prefix<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(a4, v17);
      double v26 = v27;
    }
    long double v28 = pow(v15, a4);
    long long v79 = 0u;
    long long v80 = 0u;
    long long v77 = 0u;
    long long v78 = 0u;
    long long v75 = 0u;
    long long v76 = 0u;
    long long v73 = 0u;
    long long v74 = 0u;
    uint64_t v81 = 0;
    long long v72 = 0u;
    long long v71 = 0u;
    long long v70 = 0u;
    long long v69 = 0u;
    long long v68 = 0u;
    long long v67 = 0u;
    long long v66 = 0u;
    long long v65 = 0u;
    double v29 = v26 / v28 * a8;
    long long v63 = 0u;
    long long v64 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    long long v57 = 0u;
    long long v58 = 0u;
    double v56 = 1.0;
    double v36 = boost::math::detail::gamma_incomplete_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(1, 1, (uint64_t)&v55, 0, a4, (__n128)*(unint64_t *)&v17, v30, v31, v32, v33, v34, v35);
    if (fabs(v36) > 1.79769313e308) {
      boost::math::policies::detail::raise_error<std::overflow_error,long double>("gamma_q<%1%>(%1%, %1%)", "numeric overflow");
    }
    uint64_t v37 = 0;
    double v38 = v36 / v24;
    a7 = a7 + v29 * (v36 / v24);
    uint64_t v39 = 1;
    unint64_t v40 = 1;
    double v41 = a4;
    double v42 = 1.0;
    do
    {
      *(&v56 + v40) = 0.0;
      double v43 = (double)v40;
      double v44 = 0.0;
      if (v40 >= 2)
      {
        unsigned int v45 = 1;
        uint64_t v46 = v37;
        long double v47 = (double *)&qword_1C2AA0780;
        do
        {
          double v48 = *v47;
          v47 += 2;
          double v44 = v44 + ((double)v45 * a4 - v43) * *(&v56 + v46) / v48;
          *(&v56 + v40) = v44;
          ++v45;
          --v46;
        }
        while (v46);
      }
      v39 += 2;
      double v49 = v44 / v43 + v14 / dbl_1C2AA0768[v39];
      *(&v56 + v40) = v49;
      double v38 = (v42 * (v17 + v41 + 1.0) + v41 * (v41 + 1.0) * v38) / (v15 * (v15 * 4.0));
      double v50 = v38 * (v29 * v49);
      a7 = a7 + v50;
      if (v50 <= 1.0)
      {
        double v51 = fabs(v50 * 4.50359963e15);
        double v52 = fabs(a7);
      }
      else
      {
        double v51 = fabs(v50);
        double v52 = fabs(a7 * 2.22044605e-16);
      }
      if (v51 < v52) {
        break;
      }
      double v42 = v54 * 0.5 * (v54 * 0.5) * v42;
      double v41 = v41 + 2.0;
      ++v40;
      ++v37;
    }
    while (v40 != 50);
  }
  return a7;
}

double boost::math::detail::binomial_ccdf<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(double a1, double a2, long double a3, long double a4)
{
  double v8 = pow(a3, a1);
  if (v8 <= 2.22507386e-308)
  {
    double v16 = a1 * a3;
    if (COERCE__INT64(fabs(a1 * a3)) >= 0x7FF0000000000000) {
      boost::math::policies::detail::raise_error<boost::math::rounding_error,long double>("boost::math::trunc<%1%>(%1%)", "Value %1% can not be represented in the target integer type.");
    }
    double v17 = floor(v16);
    double v18 = ceil(v16);
    if (v16 < 0.0) {
      double v17 = v18;
    }
    if (v17 > 2147483650.0 || v17 < -2147483650.0) {
      boost::math::policies::detail::raise_error<boost::math::rounding_error,long double>("boost::math::itrunc<%1%>(%1%)", "Value %1% can not be represented in the target integer type.");
    }
    signed int v24 = (int)v17;
    if (a2 + 1.0 >= (double)v24)
    {
      double v25 = a2 + 2.0;
      double v26 = fabs(a2 + 2.0);
      if ((unint64_t)(*(void *)&v26 - 0x10000000000000) >> 53 >= 0x3FF
        && (unint64_t)(*(void *)&v26 - 1) >= 0xFFFFFFFFFFFFFLL
        && COERCE__INT64(a2 + 2.0) != 0)
      {
        boost::math::policies::detail::raise_error<boost::math::rounding_error,long double>("boost::math::trunc<%1%>(%1%)", "Value %1% can not be represented in the target integer type.");
      }
      double v29 = floor(v25);
      double v30 = ceil(v25);
      if (v25 < 0.0) {
        double v29 = v30;
      }
      if (v29 > 2147483650.0 || v29 < -2147483650.0) {
        boost::math::policies::detail::raise_error<boost::math::rounding_error,long double>("boost::math::itrunc<%1%>(%1%)", "Value %1% can not be represented in the target integer type.");
      }
      signed int v24 = (int)v29;
    }
    double v32 = pow(a3, (double)v24);
    double v39 = v32 * pow(a4, a1 - (double)v24);
    if ((*(void *)&a1 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000) {
      boost::math::policies::detail::raise_error<boost::math::rounding_error,long double>("boost::math::trunc<%1%>(%1%)", "Value %1% can not be represented in the target integer type.");
    }
    double v40 = floor(a1);
    double v41 = ceil(a1);
    if (a1 < 0.0) {
      double v40 = v41;
    }
    if (v40 > 2147483650.0 || v40 < -2147483650.0) {
      boost::math::policies::detail::raise_error<boost::math::rounding_error,long double>("boost::math::itrunc<%1%>(%1%)", "Value %1% can not be represented in the target integer type.");
    }
    boost::math::binomial_coefficient<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>((int)v40, v24, v40, -2147483650.0, v33, v34, v35, v36, v37, v38);
    double v23 = v39 * v43;
    double v44 = (double)(v24 - 1);
    if (v23 == 0.0)
    {
      if (v44 > a2)
      {
        double v45 = floor(a1);
        double v46 = ceil(a1);
        if (a1 >= 0.0) {
          double v46 = v45;
        }
        double v66 = v46;
        BOOL v47 = v46 < -2147483650.0 || v46 > 2147483650.0;
        unsigned int v48 = v24 - 2;
        do
        {
          double v49 = pow(a3, (double)(int)(v48 + 1));
          double v57 = pow(a4, a1 - v44);
          if ((*(void *)&a1 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000) {
            boost::math::policies::detail::raise_error<boost::math::rounding_error,long double>("boost::math::trunc<%1%>(%1%)", "Value %1% can not be represented in the target integer type.");
          }
          if (v47) {
            boost::math::policies::detail::raise_error<boost::math::rounding_error,long double>("boost::math::itrunc<%1%>(%1%)", "Value %1% can not be represented in the target integer type.");
          }
          if (((v48 + 1) & 0x80000000) != 0) {
            boost::math::policies::detail::raise_error<boost::math::rounding_error,double>("boost::math::itrunc<%1%>(%1%)", "Value %1% can not be represented in the target integer type.");
          }
          boost::math::binomial_coefficient<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>((int)v66, v48 + 1, v66, v50, v51, v52, v53, v54, v55, v56);
          double v23 = v23 + v49 * v57 * v58;
          double v44 = (double)v48--;
        }
        while (v44 > a2);
      }
    }
    else
    {
      double v59 = v23;
      if (v44 > a2)
      {
        unsigned int v60 = v24;
        double v61 = v23;
        double v59 = v23;
        do
        {
          double v61 = v61 * ((double)v60 * a4 / ((a1 - v44) * a3));
          double v59 = v59 + v61;
          double v44 = (double)(v60 - 2);
          --v60;
        }
        while (v44 > a2);
      }
      double v62 = (double)(v24 + 1);
      if (v62 <= a1)
      {
        unsigned int v63 = v24 + 2;
        double v64 = v23;
        double v23 = v59;
        do
        {
          double v64 = v64 * ((a1 - v62 + 1.0) * a3 / (v62 * a4));
          double v23 = v23 + v64;
          double v62 = (double)v63++;
        }
        while (v62 <= a1);
      }
      else
      {
        return v59;
      }
    }
  }
  else
  {
    double v9 = a1 + -1.0;
    double v10 = fabs(a1 + -1.0);
    if ((unint64_t)(*(void *)&v10 - 0x10000000000000) >> 53 >= 0x3FF
      && (unint64_t)(*(void *)&v10 - 1) >= 0xFFFFFFFFFFFFFLL
      && COERCE__INT64(a1 + -1.0) != 0)
    {
      boost::math::policies::detail::raise_error<boost::math::rounding_error,long double>("boost::math::trunc<%1%>(%1%)", "Value %1% can not be represented in the target integer type.");
    }
    double v13 = floor(v9);
    double v14 = ceil(v9);
    if (v9 < 0.0) {
      double v13 = v14;
    }
    if (v13 > 2147483650.0 || v13 < -2147483650.0) {
      boost::math::policies::detail::raise_error<boost::math::rounding_error,long double>("boost::math::itrunc<%1%>(%1%)", "Value %1% can not be represented in the target integer type.");
    }
    unsigned int v20 = (int)v13;
    double v21 = (double)v20;
    if ((double)v20 <= a2)
    {
      return v8;
    }
    else
    {
      unsigned int v22 = v20 + 1;
      double v23 = v8;
      do
      {
        double v8 = v8 * ((double)v22 * a4 / ((a1 - v21) * a3));
        double v23 = v23 + v8;
        double v21 = (double)(v22 - 2);
        --v22;
      }
      while (v21 > a2);
    }
  }
  return v23;
}

uint64_t boost::math::itrunc<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(double *a1)
{
  double v1 = *a1;
  if ((*(void *)a1 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000) {
    boost::math::policies::detail::raise_error<boost::math::rounding_error,long double>("boost::math::trunc<%1%>(%1%)", "Value %1% can not be represented in the target integer type.");
  }
  double v2 = floor(v1);
  double v3 = ceil(v1);
  if (v1 < 0.0) {
    double v2 = v3;
  }
  if (v2 > 2147483650.0 || v2 < -2147483650.0) {
    boost::math::policies::detail::raise_error<boost::math::rounding_error,long double>("boost::math::itrunc<%1%>(%1%)", "Value %1% can not be represented in the target integer type.");
  }
  return (int)v2;
}

double boost::math::detail::ibeta_fraction2<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(uint64_t a1, char a2, double *a3, long double a4, long double a5, long double a6, double a7, double a8, double a9, double a10, double a11)
{
  boost::math::detail::ibeta_power_terms<long double,boost::math::lanczos::lanczos13m53,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(a4, a5, a6, a7, 1.0, a9, a10, a11, (uint64_t)v29, a2, a1, "boost::math::ibeta<%1%>(%1%, %1%, %1%)");
  double v17 = v16;
  if (a3)
  {
    *a3 = v16;
    if (v16 < 0.0) {
      boost::math::detail::ibeta_fraction2<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>();
    }
  }
  if (v16 != 0.0)
  {
    *(long double *)double v29 = a4;
    *(long double *)&v29[1] = a5;
    *(long double *)&v29[2] = a6;
    *(double *)&v29[3] = a7;
    int v30 = 0;
    boost::math::detail::ibeta_fraction2_t<long double>::operator()((uint64_t)v29);
    if (v18 == 0.0) {
      double v19 = 3.56011817e-307;
    }
    else {
      double v19 = v18;
    }
    double v20 = 0.0;
    uint64_t v21 = 2;
    double v22 = v19;
    do
    {
      double v23 = boost::math::detail::ibeta_fraction2_t<long double>::operator()((uint64_t)v29);
      double v25 = v24 + v23 * v20;
      double v26 = v24 + v23 / v22;
      if (v26 == 0.0) {
        double v22 = 3.56011817e-307;
      }
      else {
        double v22 = v26;
      }
      if (v25 == 0.0) {
        double v20 = 2.80889552e306;
      }
      else {
        double v20 = 1.0 / v25;
      }
      double v19 = v19 * (v20 * v22);
    }
    while (fabs(v20 * v22 + -1.0) > 2.22044605e-16 && v21++ != 0);
    return v17 / v19;
  }
  return v17;
}

void boost::math::detail::ibeta_power_terms<long double,boost::math::lanczos::lanczos13m53,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(long double a1, long double a2, long double a3, double a4, double a5, double a6, double a7, double a8, uint64_t a9, char a10, uint64_t a11, char *a12)
{
  double v92 = a2;
  long double v93 = a1;
  if ((a10 & 1) == 0)
  {
    pow(a3, a1);
    double v48 = a4;
    long double v49 = a2;
LABEL_15:
    pow(v48, v49);
    return;
  }
  double v91 = a1 + a2;
  double v17 = a1 + 6.02468004 + -0.5;
  double v18 = a2 + 6.02468004 + -0.5;
  double v19 = a1 + a2 + 6.02468004 + -0.5;
  double v20 = boost::math::tools::detail::evaluate_rational_c_imp<long double,unsigned int,long double>((uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum_expG_scaled<long double>(long double const&)::num, (uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum_expG_scaled<long double>(long double const&)::denom, &v91, a1 + a2 + 6.02468004, a2 + 6.02468004, 6.02468004, -0.5, a5, a6, a7, a8);
  double v28 = boost::math::tools::detail::evaluate_rational_c_imp<long double,unsigned int,long double>((uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum_expG_scaled<long double>(long double const&)::num, (uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum_expG_scaled<long double>(long double const&)::denom, &v93, v20, v21, v22, v23, v24, v25, v26, v27);
  double v36 = boost::math::tools::detail::evaluate_rational_c_imp<long double,unsigned int,long double>((uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum_expG_scaled<long double>(long double const&)::num, (uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum_expG_scaled<long double>(long double const&)::denom, &v92, v28, v29, v30, v31, v32, v33, v34, v35);
  double v37 = v19;
  double v38 = sqrt(v17 / v19) * (sqrt(v18 / 2.71828183) * (v20 / (v28 * v36) * a5));
  long double v40 = v92;
  long double v39 = v93;
  double v41 = (a3 * v92 - v17 * a4) / v17;
  double v42 = fabs(v41);
  double v43 = (a4 * v93 - v18 * a3) / v18;
  double v44 = fabs(v43);
  if (v44 >= v42) {
    double v45 = v42;
  }
  else {
    double v45 = v44;
  }
  if (v45 >= 0.2)
  {
    __CGFloat x = v38;
    double v50 = v37 * a3 / v17;
    double v51 = v37 * a4 / v18;
    double v52 = log(v50);
    double v53 = v52 * v39;
    double v54 = log(v51);
    double v55 = v54 * v40;
    if (v52 * v39 < 709.0 && v53 > -708.0 && v55 < 709.0 && v55 > -708.0)
    {
      pow(v50, v39);
      pow(v51, v40);
      return;
    }
    if (v39 >= v40)
    {
      long double v62 = pow(v50, v39 / v40);
      double v63 = v40 * (v54 + log(v62));
      if (v63 < 709.0 && v63 > -708.0)
      {
        double v48 = v51 * v62;
        long double v49 = v40;
        goto LABEL_15;
      }
    }
    else
    {
      long double v56 = pow(v51, v40 / v39);
      double v57 = v39 * (v52 + log(v56));
      if (v57 < 709.0 && v57 > -708.0)
      {
        double v48 = v50 * v56;
        long double v49 = v39;
        goto LABEL_15;
      }
    }
    long double v64 = v54 * v40 + v53 + log(__x);
    if (v64 >= 709.0) {
      goto LABEL_65;
    }
    goto LABEL_40;
  }
  if (v41 * v43 <= 0.0)
  {
    double v46 = v92 >= v93 ? v93 : v92;
    if (v46 >= 1.0)
    {
      if (v42 >= v44) {
        double v60 = v42;
      }
      else {
        double v60 = v44;
      }
      if (v60 < 0.5)
      {
        double v61 = v92 / v93;
        if ((v93 >= v92 || v61 * v43 >= 0.1) && (v93 < v92 || v41 / v61 <= 0.1))
        {
          long double v78 = v41;
          double v79 = v43;
          double v80 = boost::math::log1p<boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v78);
          double v81 = boost::math::expm1<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v80 / v61);
          long double v82 = v79 + v81 + v81 * v79;
          double v83 = v92;
          double v84 = boost::math::log1p<boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v82);
        }
        else
        {
          double v94 = v43;
          if (v43 < -1.0) {
            boost::math::policies::detail::raise_error<std::domain_error,long double>("log1p<%1%>(%1%)", "log1p(x) requires x > -1, but got CGFloat x = %1%.");
          }
          if (v43 == -1.0) {
            boost::math::policies::detail::raise_error<std::overflow_error,long double>("log1p<%1%>(%1%)", "Overflow Error");
          }
          long double v86 = log1pl(v43);
          double v87 = boost::math::detail::expm1_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v61 * v86);
          if (fabs(v87) > 1.79769313e308) {
            boost::math::policies::detail::raise_error<std::overflow_error,long double>("boost::math::expm1<%1%>(%1%)", "numeric overflow");
          }
          double v88 = v41 + v87 + v87 * v41;
          double v83 = v93;
          double v94 = v88;
          if (v88 < -1.0) {
            boost::math::policies::detail::raise_error<std::domain_error,long double>("log1p<%1%>(%1%)", "log1p(x) requires x > -1, but got CGFloat x = %1%.");
          }
          if (v88 == -1.0) {
            boost::math::policies::detail::raise_error<std::overflow_error,long double>("log1p<%1%>(%1%)", "Overflow Error");
          }
          double v84 = log1pl(v88);
        }
        double v77 = v83 * v84;
        goto LABEL_74;
      }
      if (v42 >= v44)
      {
        double v73 = v38;
        double v74 = v37;
        double v75 = boost::math::log1p<boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v43);
        double v76 = v93;
        long double v70 = log(v74 * a3 / v17) * v76 + v40 * v75;
        if (v70 > -708.0 && v70 < 709.0)
        {
          double v77 = v70;
LABEL_74:
          exp(v77);
          return;
        }
        long double v85 = v73;
      }
      else
      {
        double v66 = v38;
        double v67 = v37;
        double v68 = boost::math::log1p<boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v41);
        double v69 = v92;
        long double v70 = log(v67 * a4 / v18) * v69 + v39 * v68;
        if (v70 > -708.0 && v70 < 709.0)
        {
          exp(v70);
          return;
        }
        long double v85 = v66;
      }
      long double v64 = log(v85) + v70;
      if (v64 >= 709.0) {
LABEL_65:
      }
        boost::math::policies::detail::raise_error<std::overflow_error,long double>(a12, "Overflow Error");
LABEL_40:
      exp(v64);
      return;
    }
  }
  double v89 = v37;
  if (v42 >= 0.1)
  {
    double v58 = (a4 * v93 - v18 * a3) / v18;
    pow(v37 * a3 / v17, v93);
    double v59 = v58;
  }
  else
  {
    double v94 = (a3 * v92 - v17 * a4) / v17;
    double v47 = (a4 * v93 - v18 * a3) / v18;
    if (v41 < -1.0) {
      boost::math::policies::detail::raise_error<std::domain_error,long double>("log1p<%1%>(%1%)", "log1p(x) requires x > -1, but got CGFloat x = %1%.");
    }
    if (v41 == -1.0) {
      boost::math::policies::detail::raise_error<std::overflow_error,long double>("log1p<%1%>(%1%)", "Overflow Error");
    }
    long double v71 = log1pl(v41);
    exp(v39 * v71);
    double v59 = v47;
  }
  if (v44 >= 0.1)
  {
    long double v49 = v92;
    double v48 = v89 * a4 / v18;
    goto LABEL_15;
  }
  double v65 = v92;
  double v94 = v59;
  if (v59 < -1.0) {
    boost::math::policies::detail::raise_error<std::domain_error,long double>("log1p<%1%>(%1%)", "log1p(x) requires x > -1, but got CGFloat x = %1%.");
  }
  if (v59 == -1.0) {
    boost::math::policies::detail::raise_error<std::overflow_error,long double>("log1p<%1%>(%1%)", "Overflow Error");
  }
  long double v72 = log1pl(v59);
  exp(v65 * v72);
}

void boost::math::policies::detail::raise_error<std::domain_error,long double>(char *a1, char *a2)
{
  double v2 = "Unknown function operating on type %1%";
  if (a1) {
    double v2 = a1;
  }
  if (a2) {
    double v3 = a2;
  }
  else {
    double v3 = "Cause unknown: error caused by bad argument with value %1%";
  }
  std::string::basic_string[abi:ne180100]<0>(&v14, v2);
  std::string::basic_string[abi:ne180100]<0>(&v13, v3);
  std::string::basic_string[abi:ne180100]<0>(&v12, "Error in function ");
  boost::math::policies::detail::replace_all_in_string(&v14, "%1%", "long double");
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v4 = &v14;
  }
  else {
    uint64_t v4 = (std::string *)v14.__r_.__value_.__r.__words[0];
  }
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v14.__r_.__value_.__l.__size_;
  }
  std::string::append(&v12, (const std::string::value_type *)v4, size);
  std::string::append(&v12, ": ", 2uLL);
  boost::math::policies::detail::prec_format<long double>(v10);
  if (v11 >= 0) {
    size_t v6 = (const char *)v10;
  }
  else {
    size_t v6 = (const char *)v10[0];
  }
  boost::math::policies::detail::replace_all_in_string(&v13, "%1%", v6);
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::runtime_error v7 = &v13;
  }
  else {
    std::runtime_error v7 = (std::string *)v13.__r_.__value_.__r.__words[0];
  }
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v8 = HIBYTE(v13.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v8 = v13.__r_.__value_.__l.__size_;
  }
  std::string::append(&v12, (const std::string::value_type *)v7, v8);
  std::logic_error::logic_error(&v9, &v12);
  v9.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
  boost::throw_exception<std::domain_error>(&v9);
}

uint64_t boost::math::policies::detail::prec_format<long double>@<X0>(void *a1@<X8>)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v4);
  *(void *)((char *)&v6[1] + *(void *)(v5 - 24)) = 17;
  std::ostream::operator<<();
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v6, a1);
  v4[0] = *MEMORY[0x1E4FBA408];
  uint64_t v2 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v4 + *(void *)(v4[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  uint64_t v5 = v2;
  v6[0] = MEMORY[0x1E4FBA470] + 16;
  if (v7 < 0) {
    operator delete((void *)v6[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C8764E10](&v8);
}

void sub_1C2949C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void boost::math::detail::beta_imp<long double,boost::math::lanczos::lanczos13m53,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  __CGFloat y = a2;
  double v39 = a1;
  if (a1 <= 0.0)
  {
    double v10 = "The arguments to the beta function must be greater than zero (got a=%1%).";
    goto LABEL_12;
  }
  if (a2 <= 0.0)
  {
    double v10 = "The arguments to the beta function must be greater than zero (got b=%1%).";
LABEL_12:
    boost::math::policies::detail::raise_error<std::domain_error,long double>("boost::math::beta<%1%>(%1%,%1%)", v10);
  }
  double v8 = a1 + a2;
  double v37 = a1 + a2;
  BOOL v9 = a2 < 2.22044605e-16 && v8 == a1;
  if (!v9 && (a1 >= 2.22044605e-16 || v8 != a2) && a2 != 1.0 && a1 != 1.0 && v8 >= 2.22044605e-16)
  {
    if (a1 >= a2)
    {
      double v11 = a2;
      a2 = a1;
    }
    else
    {
      __CGFloat y = a1;
      double v39 = a2;
      double v11 = a1;
    }
    double v12 = a2 + 6.02468004;
    double v13 = v12 + -0.5;
    double v14 = v11 + 6.02468004;
    double v15 = v8 + 6.02468004 + -0.5;
    double v16 = boost::math::tools::detail::evaluate_rational_c_imp<long double,unsigned int,long double>((uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum_expG_scaled<long double>(long double const&)::num, (uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum_expG_scaled<long double>(long double const&)::denom, &v39, v8 + 6.02468004, v12, v8, v11, a5, a6, a7, a8);
    double v24 = boost::math::tools::detail::evaluate_rational_c_imp<long double,unsigned int,long double>((uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum_expG_scaled<long double>(long double const&)::num, (uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum_expG_scaled<long double>(long double const&)::denom, &__y, v16, v17, v18, v19, v20, v21, v22, v23);
    boost::math::tools::detail::evaluate_rational_c_imp<long double,unsigned int,long double>((uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum_expG_scaled<long double>(long double const&)::num, (uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum_expG_scaled<long double>(long double const&)::denom, &v37, v24, v25, v26, v27, v28, v29, v30, v31);
    double v32 = v39 + -0.5 - __y;
    if (fabs(__y * v32) >= v15 * 100.0 || v39 <= 100.0)
    {
      pow(v13 / v15, v39 + -0.5 - __y);
    }
    else
    {
      double v34 = boost::math::log1p<boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(-__y / v15);
      exp(v32 * v34);
    }
    double v35 = v14 + -0.5;
    if (v15 <= 1.0e10) {
      double v36 = v13 * v35 / (v15 * v15);
    }
    else {
      double v36 = v13 / v15 * (v35 / v15);
    }
    pow(v36, __y);
  }
}

void boost::math::policies::detail::raise_error<std::overflow_error,long double>(char *a1, const char *a2)
{
  uint64_t v2 = "Unknown function operating on type %1%";
  if (a1) {
    uint64_t v2 = a1;
  }
  if (a2) {
    double v3 = a2;
  }
  else {
    double v3 = "Cause unknown";
  }
  std::string::basic_string[abi:ne180100]<0>(&v9, v2);
  std::string::basic_string[abi:ne180100]<0>(&v8, "Error in function ");
  boost::math::policies::detail::replace_all_in_string(&v9, "%1%", "long double");
  if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v4 = &v9;
  }
  else {
    uint64_t v4 = (std::string *)v9.__r_.__value_.__r.__words[0];
  }
  if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v9.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v9.__r_.__value_.__l.__size_;
  }
  std::string::append(&v8, (const std::string::value_type *)v4, size);
  std::string::append(&v8, ": ", 2uLL);
  size_t v6 = strlen(v3);
  std::string::append(&v8, v3, v6);
  std::runtime_error::runtime_error(&v7, &v8);
  v7.__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E4FBA4E0] + 16);
  boost::throw_exception<std::overflow_error>(&v7);
}

void sub_1C2949FBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

double boost::math::tools::detail::evaluate_rational_c_imp<long double,unsigned int,long double>(uint64_t a1, uint64_t a2, double *a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11)
{
  double v13 = *a3;
  v14.f64[0] = v13 * v13;
  if (*a3 <= 1.0)
  {
    double v37 = *(double *)(a1 + 88);
    double v38 = *(double *)(a1 + 72) + v37 * v14.f64[0];
    LODWORD(a11) = *(_DWORD *)(a2 + 44);
    LODWORD(v37) = *(_DWORD *)(a2 + 48);
    LODWORD(a10) = *(_DWORD *)(a2 + 40);
    double v39 = (double)*(unint64_t *)&a10 + (double)*(unint64_t *)&v37 * v14.f64[0];
    double v40 = (double)*(unint64_t *)&a11;
    LODWORD(v11) = *(_DWORD *)(a2 + 32);
    LODWORD(a11) = *(_DWORD *)(a2 + 36);
    v41.f64[0] = v14.f64[0] * (*(double *)(a1 + 80) + *(double *)(a1 + 96) * v14.f64[0]) + *(double *)(a1 + 64);
    v42.f64[0] = v14.f64[0] * v39 + (double)v11;
    v41.f64[1] = v38;
    float64x2_t v43 = vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(v41, v14.f64[0]), *(float64x2_t *)(a1 + 48)), v14.f64[0]), *(float64x2_t *)(a1 + 32)), v14.f64[0]), *(float64x2_t *)(a1 + 16)), v14.f64[0]), *(float64x2_t *)a1);
    v42.f64[1] = (double)*(unint64_t *)&a11 + v40 * v14.f64[0];
    float64x2_t v44 = vmulq_n_f64(v42, v14.f64[0]);
    uint64_t v45 = *(void *)(a2 + 16);
    v42.f64[0] = *(float64_t *)(a2 + 24);
    v46.i64[0] = LODWORD(v42.f64[0]);
    v46.i64[1] = HIDWORD(v42.f64[0]);
    float64x2_t v47 = vmulq_n_f64(vaddq_f64(v44, vcvtq_f64_u64(v46)), v14.f64[0]);
    v46.i64[0] = v45;
    v46.i64[1] = HIDWORD(v45);
    float64x2_t v48 = vmulq_n_f64(vaddq_f64(v47, vcvtq_f64_u64(v46)), v14.f64[0]);
    v42.f64[0] = *(float64_t *)(a2 + 8);
    v46.i64[0] = LODWORD(v42.f64[0]);
    v46.i64[1] = HIDWORD(v42.f64[0]);
    float64x2_t v49 = vmulq_n_f64(vaddq_f64(v48, vcvtq_f64_u64(v46)), v14.f64[0]);
    v46.i64[0] = *(void *)a2;
    v46.i64[1] = HIDWORD(*(void *)a2);
    float64x2_t v50 = vaddq_f64(v49, vcvtq_f64_u64(v46));
    return (vmuld_lane_f64(v13, v43, 1) + v43.f64[0]) / (vmuld_lane_f64(v13, v50, 1) + v50.f64[0]);
  }
  else
  {
    LODWORD(v12) = *(_DWORD *)(a2 + 48);
    v14.f64[1] = *a3;
    __asm { FMOV            V0.2D, #1.0 }
    float64x2_t v20 = vdivq_f64(_Q0, v14);
    v21.f64[0] = vmlad_n_f64(*(double *)(a1 + 24), *(double *)(a1 + 8), v20.f64[0]);
    uint64_t v22 = *(void *)(a2 + 8);
    v23.i64[0] = *(void *)a2;
    v23.i64[1] = HIDWORD(*(void *)a2);
    float64x2_t v24 = vcvtq_f64_u64(v23);
    v23.i64[0] = v22;
    v23.i64[1] = HIDWORD(v22);
    float64x2_t v25 = vmulq_n_f64(vmlaq_n_f64(vcvtq_f64_u64(v23), v24, v20.f64[0]), v20.f64[0]);
    uint64_t v26 = *(void *)(a2 + 16);
    uint64_t v27 = *(void *)(a2 + 24);
    v23.i64[0] = v26;
    v23.i64[1] = HIDWORD(v26);
    float64x2_t v28 = vmulq_n_f64(vaddq_f64(v25, vcvtq_f64_u64(v23)), v20.f64[0]);
    v23.i64[0] = v27;
    v23.i64[1] = HIDWORD(v27);
    float64x2_t v29 = vmulq_n_f64(vaddq_f64(v28, vcvtq_f64_u64(v23)), v20.f64[0]);
    uint64_t v30 = *(void *)(a2 + 32);
    uint64_t v31 = *(void *)(a2 + 40);
    v23.i64[0] = v30;
    v23.i64[1] = HIDWORD(v30);
    float64x2_t v32 = vmulq_n_f64(vaddq_f64(v29, vcvtq_f64_u64(v23)), v20.f64[0]);
    v23.i64[0] = v31;
    v23.i64[1] = HIDWORD(v31);
    v21.f64[1] = vmlad_n_f64(*(double *)(a1 + 16), *(double *)a1, v20.f64[0]) * v20.f64[0] + *(double *)(a1 + 32);
    float64x2_t v33 = vaddq_f64(v32, vcvtq_f64_u64(v23));
    float64x2_t v34 = vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(v21, v20.f64[0]), *(float64x2_t *)(a1 + 40)), v20.f64[0]), *(float64x2_t *)(a1 + 56)), v20.f64[0]), *(float64x2_t *)(a1 + 72)), v20.f64[0]), *(float64x2_t *)(a1 + 88));
    float64x2_t v35 = vmulq_f64(v20, v33);
    return vaddq_f64(vmulq_laneq_f64(v34, v20, 1), (float64x2_t)vdupq_laneq_s64((int64x2_t)v34, 1)).f64[0]
         / (v35.f64[1] + v35.f64[0] + (double)v12);
  }
}

double boost::math::detail::expm1_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(double result)
{
  double v1 = fabs(result);
  if (v1 <= 0.5)
  {
    if (v1 >= 2.22044605e-16)
    {
      float64x2_t v2 = vaddq_f64(vaddq_f64(vmulq_n_f64(vmlaq_n_f64((float64x2_t)xmmword_1C2A9FED0, (float64x2_t)xmmword_1C2A9FEC0, result * result), result * result), (float64x2_t)xmmword_1C2A9FEF0), vmulq_n_f64(vaddq_f64(vmulq_n_f64(vmlaq_n_f64((float64x2_t)xmmword_1C2A9FEB0, (float64x2_t)xmmword_1C2A9FEA0, result * result), result * result), (float64x2_t)xmmword_1C2A9FEE0), result));
      return result * v2.f64[0] / v2.f64[1] + result * 1.02812767;
    }
  }
  else if (v1 >= 709.0)
  {
    BOOL v3 = result <= 0.0;
    double result = -1.0;
    if (!v3) {
      boost::math::policies::detail::raise_error<std::overflow_error,long double>("boost::math::expm1<%1%>(%1%)", "Overflow Error");
    }
  }
  else
  {
    return exp(result) + -1.0;
  }
  return result;
}

double boost::math::detail::powm1_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(uint64_t a1, long double a2, double a3)
{
  if (a2 <= 0.0)
  {
    if ((*(void *)&a3 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000) {
      boost::math::policies::detail::raise_error<boost::math::rounding_error,long double>("boost::math::trunc<%1%>(%1%)", "Value %1% can not be represented in the target integer type.");
    }
    double v9 = ceil(a3);
    double v10 = floor(a3);
    if (a3 >= 0.0) {
      double v9 = v10;
    }
    if (v9 != a3) {
      boost::math::policies::detail::raise_error<std::domain_error,long double>((char *)boost::math::detail::powm1_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(long double,long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy> const&)::function, "For non-integral exponent, expected base > 0 but got %1%");
    }
    double v11 = a3 * 0.5;
    if (COERCE__INT64(fabs(a3 * 0.5)) >= 0x7FF0000000000000) {
      boost::math::policies::detail::raise_error<boost::math::rounding_error,long double>("boost::math::trunc<%1%>(%1%)", "Value %1% can not be represented in the target integer type.");
    }
    if (v11 >= 0.0) {
      double v12 = floor(v11);
    }
    else {
      double v12 = ceil(v11);
    }
    if (v12 != v11) {
      return pow(a2, a3) + -1.0;
    }
    return boost::math::detail::powm1_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(a1, -a2, a3);
  }
  else
  {
    double v5 = fabs((a2 + -1.0) * a3);
    if (fabs(a3) >= 0.2 && v5 >= 0.5) {
      return pow(a2, a3) + -1.0;
    }
    double v7 = log(a2) * a3;
    if (v7 >= 0.5)
    {
      if (v7 > 709.0) {
        boost::math::policies::detail::raise_error<std::overflow_error,long double>((char *)boost::math::detail::powm1_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(long double,long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy> const&)::function, "Overflow Error");
      }
      return pow(a2, a3) + -1.0;
    }
    double v8 = boost::math::detail::expm1_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v7);
    if (fabs(v8) > 1.79769313e308) {
      boost::math::policies::detail::raise_error<std::overflow_error,long double>("boost::math::expm1<%1%>(%1%)", "numeric overflow");
    }
  }
  return v8;
}

void boost::math::policies::detail::raise_error<boost::math::rounding_error,long double>(char *a1, char *a2)
{
  float64x2_t v2 = "Unknown function operating on type %1%";
  if (a1) {
    float64x2_t v2 = a1;
  }
  if (a2) {
    BOOL v3 = a2;
  }
  else {
    BOOL v3 = "Cause unknown: error caused by bad argument with value %1%";
  }
  std::string::basic_string[abi:ne180100]<0>(&v14, v2);
  std::string::basic_string[abi:ne180100]<0>(&v13, v3);
  std::string::basic_string[abi:ne180100]<0>(&v12, "Error in function ");
  boost::math::policies::detail::replace_all_in_string(&v14, "%1%", "long double");
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v4 = &v14;
  }
  else {
    uint64_t v4 = (std::string *)v14.__r_.__value_.__r.__words[0];
  }
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v14.__r_.__value_.__l.__size_;
  }
  std::string::append(&v12, (const std::string::value_type *)v4, size);
  std::string::append(&v12, ": ", 2uLL);
  boost::math::policies::detail::prec_format<long double>(v10);
  if (v11 >= 0) {
    size_t v6 = (const char *)v10;
  }
  else {
    size_t v6 = (const char *)v10[0];
  }
  boost::math::policies::detail::replace_all_in_string(&v13, "%1%", v6);
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    double v7 = &v13;
  }
  else {
    double v7 = (std::string *)v13.__r_.__value_.__r.__words[0];
  }
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v8 = HIBYTE(v13.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v8 = v13.__r_.__value_.__l.__size_;
  }
  std::string::append(&v12, (const std::string::value_type *)v7, v8);
  std::runtime_error::runtime_error(&v9, &v12);
  v9.__vftable = (std::runtime_error_vtbl *)&unk_1F1DE9D78;
  boost::throw_exception<boost::math::rounding_error>(&v9);
}

void sub_1C294A5F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  std::runtime_error::~runtime_error(&a9);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (*(char *)(v27 - 17) < 0) {
    operator delete(*(void **)(v27 - 40));
  }
  _Unwind_Resume(a1);
}

void boost::throw_exception<boost::math::rounding_error>(const std::runtime_error *a1)
{
  exception = __cxa_allocate_exception(0x40uLL);
  boost::wrapexcept<boost::math::rounding_error>::wrapexcept((uint64_t)exception, a1);
}

void sub_1C294A6BC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::math::rounding_error::~rounding_error(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x1C8764E40);
}

uint64_t boost::wrapexcept<boost::math::rounding_error>::wrapexcept(uint64_t a1, const std::runtime_error *a2)
{
  *(void *)a1 = &unk_1F1DE9C68;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), a2);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  *(void *)a1 = &unk_1F1DE9E00;
  *(void *)(a1 + 8) = &unk_1F1DE9E30;
  *(void *)(a1 + 24) = &unk_1F1DE9E58;
  return a1;
}

uint64_t boost::wrapexcept<boost::math::rounding_error>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_1F1DE9C98;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  return a1;
}

void boost::wrapexcept<boost::math::rounding_error>::clone()
{
}

void sub_1C294A9D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a9);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a10);
  (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::math::rounding_error>::rethrow(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x40uLL);
  boost::wrapexcept<boost::math::rounding_error>::wrapexcept((uint64_t)exception, a1);
}

void sub_1C294AA98(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::math::rounding_error>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_1F1DE9C98;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  JUMPOUT(0x1C8764E40);
}

void non-virtual thunk to'boost::wrapexcept<boost::math::rounding_error>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 16) = &unk_1F1DE9C98;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
}

{
  uint64_t vars8;

  *(void *)(a1 + 16) = &unk_1F1DE9C98;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
  JUMPOUT(0x1C8764E40);
}

void non-virtual thunk to'boost::wrapexcept<boost::math::rounding_error>::~wrapexcept(void *a1)
{
  *a1 = &unk_1F1DE9C98;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::runtime_error::~runtime_error((std::runtime_error *)a1 - 1);
}

{
  uint64_t vars8;

  *a1 = &unk_1F1DE9C98;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::runtime_error::~runtime_error((std::runtime_error *)a1 - 1);
  JUMPOUT(0x1C8764E40);
}

uint64_t boost::wrapexcept<boost::math::rounding_error>::wrapexcept(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F1DE9C68;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), (const std::runtime_error *)(a2 + 8));
  *(void *)(a1 + 8) = &unk_1F1DE9D78;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = &unk_1F1DE9C98;
  *(void *)(a1 + 32) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(void *)a1 = &unk_1F1DE9E00;
  *(void *)(a1 + 8) = &unk_1F1DE9E30;
  *(void *)(a1 + 24) = &unk_1F1DE9E58;
  return a1;
}

void sub_1C294ADE8(_Unwind_Exception *a1)
{
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

void boost::math::policies::detail::raise_error<boost::math::evaluation_error,long double>(char *a1, char *a2)
{
  float64x2_t v2 = "Unknown function operating on type %1%";
  if (a1) {
    float64x2_t v2 = a1;
  }
  if (a2) {
    BOOL v3 = a2;
  }
  else {
    BOOL v3 = "Cause unknown: error caused by bad argument with value %1%";
  }
  std::string::basic_string[abi:ne180100]<0>(&v14, v2);
  std::string::basic_string[abi:ne180100]<0>(&v13, v3);
  std::string::basic_string[abi:ne180100]<0>(&v12, "Error in function ");
  boost::math::policies::detail::replace_all_in_string(&v14, "%1%", "long double");
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v4 = &v14;
  }
  else {
    uint64_t v4 = (std::string *)v14.__r_.__value_.__r.__words[0];
  }
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v14.__r_.__value_.__l.__size_;
  }
  std::string::append(&v12, (const std::string::value_type *)v4, size);
  std::string::append(&v12, ": ", 2uLL);
  boost::math::policies::detail::prec_format<long double>(v10);
  if (v11 >= 0) {
    size_t v6 = (const char *)v10;
  }
  else {
    size_t v6 = (const char *)v10[0];
  }
  boost::math::policies::detail::replace_all_in_string(&v13, "%1%", v6);
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    double v7 = &v13;
  }
  else {
    double v7 = (std::string *)v13.__r_.__value_.__r.__words[0];
  }
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v8 = HIBYTE(v13.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v8 = v13.__r_.__value_.__l.__size_;
  }
  std::string::append(&v12, (const std::string::value_type *)v7, v8);
  std::runtime_error::runtime_error(&v9, &v12);
  v9.__vftable = (std::runtime_error_vtbl *)&unk_1F1DE9E78;
  boost::throw_exception<boost::math::evaluation_error>(&v9);
}

void sub_1C294AF38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  std::runtime_error::~runtime_error(&a9);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (*(char *)(v27 - 17) < 0) {
    operator delete(*(void **)(v27 - 40));
  }
  _Unwind_Resume(a1);
}

void boost::throw_exception<boost::math::evaluation_error>(const std::runtime_error *a1)
{
  exception = __cxa_allocate_exception(0x40uLL);
  boost::wrapexcept<boost::math::evaluation_error>::wrapexcept((uint64_t)exception, a1);
}

void sub_1C294AFFC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::math::evaluation_error::~evaluation_error(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x1C8764E40);
}

uint64_t boost::wrapexcept<boost::math::evaluation_error>::wrapexcept(uint64_t a1, const std::runtime_error *a2)
{
  *(void *)a1 = &unk_1F1DE9C68;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), a2);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  *(void *)a1 = &unk_1F1DE9F00;
  *(void *)(a1 + 8) = &unk_1F1DE9F30;
  *(void *)(a1 + 24) = &unk_1F1DE9F58;
  return a1;
}

uint64_t boost::wrapexcept<boost::math::evaluation_error>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_1F1DE9C98;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  return a1;
}

void boost::wrapexcept<boost::math::evaluation_error>::clone()
{
}

void sub_1C294B318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a9);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a10);
  (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::math::evaluation_error>::rethrow(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x40uLL);
  boost::wrapexcept<boost::math::evaluation_error>::wrapexcept((uint64_t)exception, a1);
}

void sub_1C294B3D8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::math::evaluation_error>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_1F1DE9C98;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  JUMPOUT(0x1C8764E40);
}

void non-virtual thunk to'boost::wrapexcept<boost::math::evaluation_error>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 16) = &unk_1F1DE9C98;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
}

{
  uint64_t vars8;

  *(void *)(a1 + 16) = &unk_1F1DE9C98;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
  JUMPOUT(0x1C8764E40);
}

void non-virtual thunk to'boost::wrapexcept<boost::math::evaluation_error>::~wrapexcept(void *a1)
{
  *a1 = &unk_1F1DE9C98;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::runtime_error::~runtime_error((std::runtime_error *)a1 - 1);
}

{
  uint64_t vars8;

  *a1 = &unk_1F1DE9C98;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::runtime_error::~runtime_error((std::runtime_error *)a1 - 1);
  JUMPOUT(0x1C8764E40);
}

uint64_t boost::wrapexcept<boost::math::evaluation_error>::wrapexcept(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F1DE9C68;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), (const std::runtime_error *)(a2 + 8));
  *(void *)(a1 + 8) = &unk_1F1DE9E78;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = &unk_1F1DE9C98;
  *(void *)(a1 + 32) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(void *)a1 = &unk_1F1DE9F00;
  *(void *)(a1 + 8) = &unk_1F1DE9F30;
  *(void *)(a1 + 24) = &unk_1F1DE9F58;
  return a1;
}

void sub_1C294B728(_Unwind_Exception *a1)
{
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

double boost::math::detail::regularised_gamma_prefix<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>,boost::math::lanczos::lanczos13m53>(uint64_t a1, uint64_t a2, double a3, long double a4)
{
  v62[0] = a3;
  double result = 0.0;
  if (a4 >= 1.79769313e308) {
    return result;
  }
  if (a3 >= 1.0)
  {
    double v20 = a3 + 6.02468004 + -0.5;
    if (a3 > 150.0)
    {
      double v21 = (a4 - a3 + -6.02468004 + 0.5) / v20;
      if (fabs(v21 * v21 * a3) <= 100.0)
      {
        v62[1] = (a4 - a3 + -6.02468004 + 0.5) / v20;
        if (v21 < -1.0) {
          boost::math::policies::detail::raise_error<std::domain_error,long double>((char *)boost::math::log1pmx<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy> const&)::function, "log1pmx(x) requires x > -1, but got CGFloat x = %1%.");
        }
        if (v21 == -1.0) {
          boost::math::policies::detail::raise_error<std::overflow_error,long double>((char *)boost::math::log1pmx<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy> const&)::function, "Overflow Error");
        }
        double v56 = fabs(v21);
        if (v56 <= 0.949999988)
        {
          double v58 = -v21;
          if (v56 >= 2.22044605e-16)
          {
            double v57 = 0.0;
            int v59 = 2;
            uint64_t v60 = 1000000;
            do
            {
              double v21 = v21 * v58;
              double v61 = v21 / (double)v59;
              double v57 = v57 + v61;
              if (fabs(v57 * 2.22044605e-16) >= fabs(v61)) {
                break;
              }
              ++v59;
              --v60;
            }
            while (v60);
            if ((unint64_t)(1000000 - v60) >= 0xF4240)
            {
              v62[2] = (double)(unint64_t)(1000000 - v60);
              boost::math::policies::detail::raise_error<boost::math::evaluation_error,long double>((char *)boost::math::log1pmx<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy> const&)::function, "Series evaluation exceeded %1% iterations, giving up now.");
            }
          }
          else
          {
            double v57 = v21 * v58 * 0.5;
          }
        }
        else
        {
          double v57 = log(v21 + 1.0) - v21;
        }
        double v52 = a4 * -5.52468004 / v20 + a3 * v57;
        goto LABEL_38;
      }
    }
    double v31 = a4 / v20;
    double v32 = log(a4 / v20);
    double v33 = v32 * a3;
    double v34 = a3 - a4;
    if (a3 - a4 >= v32 * a3) {
      double v35 = v32 * a3;
    }
    else {
      double v35 = a3 - a4;
    }
    if (v35 <= -708.0 || (v33 >= v34 ? (double v36 = v33) : (double v36 = a3 - a4), v36 >= 709.0))
    {
      if (v35 * 0.5 <= -708.0 || (v33 >= v34 ? (double v46 = v33) : (double v46 = a3 - a4), v46 * 0.5 >= 709.0))
      {
        if (v35 * 0.25 <= -708.0 || (v33 >= v34 ? (double v49 = v33) : (double v49 = a3 - a4), a3 >= a4 || v49 * 0.25 >= 709.0))
        {
          double v54 = v34 / a3;
          if (v34 / a3 > -708.0 && v54 < 709.0)
          {
            long double v55 = exp(v54);
            double v53 = pow(v55 * a4 / v20, a3);
            goto LABEL_39;
          }
          double v52 = v34 + v33;
LABEL_38:
          double v53 = exp(v52);
LABEL_39:
          double v45 = v53;
          return v45
               * (sqrt(v20 / 2.71828183)
                / boost::math::tools::detail::evaluate_rational_c_imp<long double,unsigned int,long double>((uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum_expG_scaled<long double>(long double const&)::num, (uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum_expG_scaled<long double>(long double const&)::denom, v62, v20 / 2.71828183, v38, v39, v40, v41, v42, v43, v44));
        }
        double v50 = pow(v31, a3 * 0.25);
        long double v51 = exp(v34 * 0.25);
        double v48 = v50 * v51 * (v50 * v51);
      }
      else
      {
        double v47 = pow(v31, a3 * 0.5);
        double v48 = v47 * exp(v34 * 0.5);
      }
      double v45 = v48 * v48;
    }
    else
    {
      double v37 = pow(a4 / v20, a3);
      double v45 = exp(v34) * v37;
    }
    return v45
         * (sqrt(v20 / 2.71828183)
          / boost::math::tools::detail::evaluate_rational_c_imp<long double,unsigned int,long double>((uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum_expG_scaled<long double>(long double const&)::num, (uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum_expG_scaled<long double>(long double const&)::denom, v62, v20 / 2.71828183, v38, v39, v40, v41, v42, v43, v44));
  }
  double v9 = -a4;
  if (a4 <= -708.0)
  {
    long double v22 = a3 * log(a4) - a4;
    double v30 = v22
        - boost::math::detail::lgamma_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>,boost::math::lanczos::lanczos13m53>(a1, a2, 0, a3, v23, v24, v25, v26, v27, v28, v29);
    return exp(v30);
  }
  else
  {
    double v10 = pow(a4, a3);
    long double v11 = v10 * exp(v9);
    boost::math::detail::gamma_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>,boost::math::lanczos::lanczos13m53>(a3, v12, v13, v14, v15, v16, v17, v18);
    return v11 / v19;
  }
}

void boost::math::detail::full_igamma_prefix<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(long double a1, long double a2)
{
  if (a2 <= 1.79769313e308)
  {
    double v4 = log(a2) * a1;
    if (a2 >= 1.0)
    {
      if (a2 < 708.0 && v4 < 709.0)
      {
        long double v7 = -a2;
        double v8 = pow(a2, a1);
        double v6 = v8 * exp(v7);
        goto LABEL_13;
      }
      if (a1 >= 1.0)
      {
        double v9 = a2 / a1;
LABEL_11:
        long double v10 = exp(v9);
        double v6 = pow(a2 / v10, a1);
        goto LABEL_13;
      }
    }
    else
    {
      if (v4 > -708.0)
      {
        double v5 = pow(a2, a1);
        double v6 = v5 * exp(-a2);
        goto LABEL_13;
      }
      double v9 = a2 / a1;
      if (a2 / a1 < 709.0) {
        goto LABEL_11;
      }
    }
    double v6 = exp(v4 - a2);
LABEL_13:
    if (fabs(v6) == INFINITY) {
      boost::math::policies::detail::raise_error<std::overflow_error,long double>("boost::math::detail::full_igamma_prefix<%1%>(%1%, %1%)", "Result of incomplete gamma function is too large to represent.");
    }
  }
}

double boost::math::detail::lgamma_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>,boost::math::lanczos::lanczos13m53>(uint64_t a1, uint64_t a2, int *a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11)
{
  double v35 = a4;
  if (a4 <= -0.0000000149011612)
  {
    if (floor(a4) == a4)
    {
      double v15 = (char *)boost::math::detail::lgamma_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>,boost::math::lanczos::lanczos13m53>(long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy> const&,boost::math::lanczos::lanczos13m53 const&,int *)::function;
      double v16 = "Evaluation of lgamma at a negative integer %1%.";
LABEL_7:
      boost::math::policies::detail::raise_error<std::domain_error,long double>(v15, v16);
    }
    double v18 = boost::math::detail::sinpx<long double>(a4);
    double v19 = -a4;
    if (v18 < 0.0) {
      int v20 = 1;
    }
    else {
      int v20 = -1;
    }
    if (v18 >= 0.0) {
      double v21 = v18;
    }
    else {
      double v21 = -v18;
    }
    double v22 = 1.14472989
        - boost::math::detail::lgamma_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>,boost::math::lanczos::lanczos13m53>(a1, a2, 0, v19);
    double v23 = v22 - log(v21);
    if (a3) {
      goto LABEL_29;
    }
    return v23;
  }
  if (a4 >= 0.0000000149011612)
  {
    if (a4 >= 15.0)
    {
      if (a4 < 3.0 || a4 >= 100.0)
      {
        double v23 = (a4 + -0.5) * (log(a4 + 6.02468004 + -0.5) + -1.0);
        if (v23 * 2.22044605e-16 < 20.0)
        {
          double v31 = boost::math::tools::detail::evaluate_rational_c_imp<long double,unsigned int,long double>((uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum_expG_scaled<long double>(long double const&)::num, (uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum_expG_scaled<long double>(long double const&)::denom, &v35, v23 * 2.22044605e-16, 20.0, v25, v26, v27, v28, v29, v30);
          double v23 = v23 + log(v31);
        }
        goto LABEL_28;
      }
      boost::math::detail::gamma_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>,boost::math::lanczos::lanczos13m53>(a4, a5, a6, a7, a8, a9, a10, a11);
      double v17 = log(v33);
    }
    else
    {
      boost::math::detail::lgamma_small_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>,boost::math::lanczos::lanczos13m53>(a4, a4 + -1.0, a4 + -2.0);
    }
    double v23 = v17;
    goto LABEL_28;
  }
  if (a4 == 0.0)
  {
    double v15 = (char *)boost::math::detail::lgamma_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>,boost::math::lanczos::lanczos13m53>(long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy> const&,boost::math::lanczos::lanczos13m53 const&,int *)::function;
    double v16 = "Evaluation of lgamma at %1%.";
    goto LABEL_7;
  }
  double v32 = fabs(a4);
  if (v32 * 4.0 >= 2.22044605e-16) {
    double v23 = log(fabs(1.0 / a4 + -0.577215665));
  }
  else {
    double v23 = -log(v32);
  }
  if (a4 < 0.0)
  {
    int v20 = -1;
    if (!a3) {
      return v23;
    }
    goto LABEL_29;
  }
LABEL_28:
  int v20 = 1;
  if (a3) {
LABEL_29:
  }
    *a3 = v20;
  return v23;
}

void boost::math::detail::gamma_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>,boost::math::lanczos::lanczos13m53>(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  double v8 = a1;
  double v22 = a1;
  double v9 = 1.0;
  if (a1 <= 0.0)
  {
    if (floor(a1) == a1) {
      boost::math::policies::detail::raise_error<std::domain_error,long double>((char *)boost::math::detail::gamma_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>,boost::math::lanczos::lanczos13m53>(long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy> const&,boost::math::lanczos::lanczos13m53 const&)::function, "Evaluation of tgamma at a negative integer %1%.");
    }
    if (a1 <= -20.0)
    {
      double v18 = boost::math::detail::gamma_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>,boost::math::lanczos::lanczos13m53>(-a1);
      double v19 = fabs(v18 * boost::math::detail::sinpx<long double>(v8));
      if (v19 < 1.0 && v19 * 1.79769313e308 < 3.14159265) {
        boost::math::policies::detail::raise_error<std::overflow_error,long double>((char *)boost::math::detail::gamma_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>,boost::math::lanczos::lanczos13m53>(long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy> const&,boost::math::lanczos::lanczos13m53 const&)::function, "Result of tgamma is too large to represent.");
      }
      return;
    }
    if (a1 < 0.0)
    {
      do
      {
        double v9 = v9 / v8;
        double v8 = v8 + 1.0;
      }
      while (v8 < 0.0);
    }
    double v22 = v8;
  }
  double v10 = floor(v8);
  if (v8 < 170.0 && v10 == v8)
  {
    if ((*(void *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      double v23 = v8;
      boost::math::policies::detail::raise_error<boost::math::rounding_error,long double>("boost::math::trunc<%1%>(%1%)", "Value %1% can not be represented in the target integer type.");
    }
    double v12 = ceil(v8);
    if (v8 < 0.0) {
      double v10 = v12;
    }
    if (v10 > 2147483650.0 || v10 < -2147483650.0)
    {
      double v23 = v8;
      boost::math::policies::detail::raise_error<boost::math::rounding_error,long double>("boost::math::itrunc<%1%>(%1%)", "Value %1% can not be represented in the target integer type.");
    }
  }
  else
  {
    if (v8 >= 0.0000000149011612)
    {
      double v21 = v9
          * boost::math::tools::detail::evaluate_rational_c_imp<long double,unsigned int,long double>((uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum<long double>(long double const&)::num, (uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum<long double>(long double const&)::denom, &v22, 0.0000000149011612, 170.0, a3, a4, a5, a6, a7, a8);
      double v14 = v22;
      double v15 = v22 + 6.02468004 + -0.5;
      double v16 = v14 * log(v15);
      if (v16 <= 709.0)
      {
        pow(v15, v14 + -0.5);
        exp(v15);
        return;
      }
      if (v16 * 0.5 <= 709.0)
      {
        double v20 = pow(v15, v14 * 0.5 + -0.25);
        if (1.79769313e308 / v20 >= v21 * (v20 / exp(v15))) {
          return;
        }
        double v17 = (char *)boost::math::detail::gamma_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>,boost::math::lanczos::lanczos13m53>(long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy> const&,boost::math::lanczos::lanczos13m53 const&)::function;
      }
      else
      {
        double v17 = (char *)boost::math::detail::gamma_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>,boost::math::lanczos::lanczos13m53>(long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy> const&,boost::math::lanczos::lanczos13m53 const&)::function;
      }
      boost::math::policies::detail::raise_error<std::overflow_error,long double>(v17, "Result of tgamma is too large to represent.");
    }
    if (v8 < COERCE_DOUBLE(0x4000000000000)) {
      boost::math::policies::detail::raise_error<std::overflow_error,long double>((char *)boost::math::detail::gamma_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>,boost::math::lanczos::lanczos13m53>(long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy> const&,boost::math::lanczos::lanczos13m53 const&)::function, "Overflow Error");
    }
  }
}

void sub_1C294C26C()
{
}

long double boost::math::detail::sinpx<long double>(double a1)
{
  if (a1 < 0.0) {
    a1 = -a1;
  }
  char v1 = vcvtmd_s64_f64(a1);
  double v2 = floor(a1);
  double v3 = v2 + 1.0;
  if (v1) {
    double v4 = v2 + 1.0;
  }
  else {
    double v4 = v2;
  }
  if (v4 < 0.0) {
    boost::math::detail::sinpx<long double>();
  }
  double v5 = a1 - v2;
  double v6 = v3 - a1;
  if (v1)
  {
    double v5 = v6;
    double v7 = -a1;
  }
  else
  {
    double v7 = a1;
  }
  if (v5 <= 0.5) {
    double v8 = v5;
  }
  else {
    double v8 = 1.0 - v5;
  }
  return v7 * sin(v8 * 3.14159265);
}

void boost::math::detail::lgamma_small_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>,boost::math::lanczos::lanczos13m53>(long double a1, double a2, double a3)
{
  double v3 = a1;
  if (a1 < 2.22044605e-16)
  {
LABEL_9:
    log(a1);
    return;
  }
  if (a2 == 0.0 || a3 == 0.0) {
    return;
  }
  if (a1 <= 2.0)
  {
    if (a1 >= 1.0) {
      return;
    }
    goto LABEL_9;
  }
  double v4 = 0.0;
  if (a1 >= 3.0)
  {
    do
    {
      double v3 = v3 + -1.0;
      double v4 = v4 + log(v3);
    }
    while (v3 >= 3.0);
  }
}

double boost::math::detail::tgamma_delta_ratio_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  double v8 = a1 + a2;
  if (a1 <= 0.0 || v8 <= 0.0)
  {
    boost::math::detail::gamma_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>,boost::math::lanczos::lanczos13m53>(a1, a2, a3, a4, a5, a6, a7, a8);
    double v21 = v20;
    if (fabs(v20) > 1.79769313e308) {
      boost::math::policies::detail::raise_error<std::overflow_error,long double>("boost::math::tgamma<%1%>(%1%)", "numeric overflow");
    }
    boost::math::detail::gamma_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>,boost::math::lanczos::lanczos13m53>(v8, 1.79769313e308, v14, v15, v16, v17, v18, v19);
    if (fabs(v22) > 1.79769313e308) {
      boost::math::policies::detail::raise_error<std::overflow_error,long double>("boost::math::tgamma<%1%>(%1%)", "numeric overflow");
    }
    return v21 / v22;
  }
  else
  {
    double v9 = floor(a2);
    if (v9 != a2) {
      goto LABEL_31;
    }
    double v10 = floor(a1);
    BOOL v11 = a1 <= 170.0 && v10 == a1;
    if (v11 && v8 <= 170.0)
    {
      if ((*(void *)&a1 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000) {
        boost::math::policies::detail::raise_error<boost::math::rounding_error,long double>("boost::math::trunc<%1%>(%1%)", "Value %1% can not be represented in the target integer type.");
      }
      double v12 = ceil(a1);
      if (a1 >= 0.0) {
        double v12 = v10;
      }
      if (v12 > 2147483650.0 || v12 < -2147483650.0) {
        boost::math::policies::detail::raise_error<boost::math::rounding_error,long double>("boost::math::itrunc<%1%>(%1%)", "Value %1% can not be represented in the target integer type.");
      }
      double v27 = dbl_1C2AA0768[(int)v12 - 1];
      if ((*(void *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000) {
        boost::math::policies::detail::raise_error<boost::math::rounding_error,long double>("boost::math::trunc<%1%>(%1%)", "Value %1% can not be represented in the target integer type.");
      }
      double v28 = floor(v8);
      double v29 = ceil(v8);
      if (v8 < 0.0) {
        double v28 = v29;
      }
      if (v28 > 2147483650.0 || v28 < -2147483650.0) {
        boost::math::policies::detail::raise_error<boost::math::rounding_error,long double>("boost::math::itrunc<%1%>(%1%)", "Value %1% can not be represented in the target integer type.");
      }
      return v27 / dbl_1C2AA0768[(int)v28 - 1];
    }
    double v9 = fabs(a2);
    a4 = 20.0;
    if (v9 >= 20.0)
    {
LABEL_31:
      boost::math::detail::tgamma_delta_ratio_imp_lanczos<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>,boost::math::lanczos::lanczos13m53>(a1, a2, v9, a4, a5, a6, a7, a8);
      return v26;
    }
    double i = 1.0;
    if (a2 != 0.0)
    {
      if (a2 >= 0.0)
      {
        double v32 = a2 + -1.0;
        for (double i = 1.0 / a1; v32 != 0.0; double i = i / a1)
        {
          a1 = a1 + 1.0;
          double v32 = v32 + -1.0;
        }
      }
      else
      {
        double i = a1 + -1.0;
        double v24 = a2 + 1.0;
        if (v24 != 0.0)
        {
          double v25 = a1 + -1.0;
          do
          {
            double v25 = v25 + -1.0;
            double i = v25 * i;
            double v24 = v24 + 1.0;
          }
          while (v24 != 0.0);
        }
      }
    }
  }
  return i;
}

double boost::math::tgamma<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  boost::math::detail::gamma_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>,boost::math::lanczos::lanczos13m53>(a1, a2, a3, a4, a5, a6, a7, a8);
  if (fabs(result) > 1.79769313e308) {
    boost::math::policies::detail::raise_error<std::overflow_error,long double>("boost::math::tgamma<%1%>(%1%)", "numeric overflow");
  }
  return result;
}

void boost::math::detail::tgamma_delta_ratio_imp_lanczos<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>,boost::math::lanczos::lanczos13m53>(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  double v28 = a1;
  if (a1 >= 2.22044605e-16)
  {
    double v9 = a1 + 6.02468004 + -0.5;
    if (a1 + a2 == a1)
    {
      if (fabs(a2 / v9) < 2.22044605e-16) {
        exp(-a2);
      }
    }
    else
    {
      if (fabs(a2) >= 10.0)
      {
        double v12 = pow(v9 / (v9 + a2), a1 + -0.5);
      }
      else
      {
        double v11 = 0.5 - a1;
        double v29 = a2 / v9;
        if (a2 / v9 < -1.0) {
          boost::math::policies::detail::raise_error<std::domain_error,long double>("log1p<%1%>(%1%)", "log1p(x) requires x > -1, but got CGFloat x = %1%.");
        }
        if (a2 / v9 == -1.0) {
          boost::math::policies::detail::raise_error<std::overflow_error,long double>("log1p<%1%>(%1%)", "Overflow Error");
        }
        long double v20 = log1pl(a2 / v9);
        double v12 = exp(v11 * v20);
      }
      boost::math::tools::detail::evaluate_rational_c_imp<long double,unsigned int,long double>((uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum<long double>(long double const&)::num, (uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum<long double>(long double const&)::denom, &v28, v12, v13, v14, v15, v16, v17, v18, v19);
      double v29 = v28 + a2;
      boost::math::tools::detail::evaluate_rational_c_imp<long double,unsigned int,long double>((uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum<long double>(long double const&)::num, (uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum<long double>(long double const&)::denom, &v29, v28 + a2, v21, v22, v23, v24, v25, v26, v27);
    }
    pow(2.71828183 / (v9 + a2), a2);
  }
  else if (a2 <= 170.0)
  {
    boost::math::detail::gamma_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>,boost::math::lanczos::lanczos13m53>(a1 + a2, a2, a3, a4, a5, a6, a7, a8);
    if (fabs(v10) > 1.79769313e308) {
      boost::math::policies::detail::raise_error<std::overflow_error,long double>("boost::math::tgamma<%1%>(%1%)", "numeric overflow");
    }
  }
  else
  {
    boost::math::detail::tgamma_delta_ratio_imp_lanczos<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>,boost::math::lanczos::lanczos13m53>(a2, 170.0 - a2);
  }
}

double boost::math::detail::gamma_incomplete_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(int a1, int a2, uint64_t a3, double *a4, double a5, __n128 a6, double a7, double a8, double a9, double a10, double a11, double a12)
{
  double v84 = a6.n128_f64[0];
  double v85 = a5;
  if (a5 <= 0.0)
  {
    double v13 = (char *)boost::math::detail::gamma_incomplete_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(long double,long double,BOOL,BOOL,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy> const&,long double*)::function;
    double v14 = "Argument a to the incomplete gamma function must be greater than zero (got a=%1%).";
LABEL_5:
    boost::math::policies::detail::raise_error<std::domain_error,long double>(v13, v14);
  }
  double v12 = a6.n128_f64[0];
  if (a6.n128_f64[0] < 0.0)
  {
    double v13 = (char *)boost::math::detail::gamma_incomplete_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(long double,long double,BOOL,BOOL,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy> const&,long double*)::function;
    double v14 = "Argument x to the incomplete gamma function must be >= 0 (got x=%1%).";
    goto LABEL_5;
  }
  int v18 = a2;
  double v20 = a5;
  if (a5 < 170.0 || (a1 & 1) != 0)
  {
    if (a4 && (a1 & 1) == 0) {
      boost::math::detail::gamma_incomplete_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>();
    }
    double v26 = a6.n128_f64[0] + 1.0;
    double v27 = 30.0;
    if (v12 < 709.0 && a5 < 30.0 && v26 >= a5)
    {
      double v30 = floor(a5);
      if (v30 == a5)
      {
        double v26 = 0.6;
        if (v12 > 0.6)
        {
          double v38 = boost::math::detail::finite_gamma_q<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(a5, v12, a3, a4);
          if ((a1 & 1) == 0)
          {
            double v39 = v38
                * boost::math::tgamma<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v20, v31, v32, v33, v34, v35, v36, v37);
            if (v18) {
              goto LABEL_159;
            }
            goto LABEL_156;
          }
          goto LABEL_149;
        }
      }
      else
      {
        double v26 = vabdd_f64(v30, a5);
        double v27 = 0.5;
        if (v12 > 0.2 && v26 == 0.5)
        {
          double v38 = boost::math::detail::finite_half_gamma_q<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(a4, a5, v12);
          if ((a1 & 1) == 0) {
            double v38 = v38
          }
                * boost::math::tgamma<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v20, v31, v32, v33, v34, v35, v36, v37);
          if (!a4 || *a4 != 0.0)
          {
            v18 ^= 1u;
            goto LABEL_150;
          }
          double v58 = boost::math::detail::regularised_gamma_prefix<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>,boost::math::lanczos::lanczos13m53>(a3, (uint64_t)&v83, v20, v12);
          *a4 = v58;
          double v31 = 1.0;
          if ((a1 & (v38 > 1.0)) != 0) {
            double v39 = 1.0;
          }
          else {
            double v39 = v38;
          }
          if (v18) {
            goto LABEL_161;
          }
          goto LABEL_154;
        }
      }
    }
    if (a5 > 1.0 && v12 < 0.0000000149011612)
    {
      if (a1)
      {
        double v55 = boost::math::tgamma<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(a5 + 1.0, v26, v27, a8, a9, a10, a11, a12);
        double v32 = pow(v12, v20) / v55;
      }
      else
      {
        double v32 = pow(v12, a5) / a5;
      }
      double v31 = v84;
      double v34 = v85 + 1.0;
      double v33 = 1.0 - v85 * v84 / (v85 + 1.0);
      double v38 = v32 * v33;
      if (a4)
      {
        double v58 = boost::math::detail::regularised_gamma_prefix<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>,boost::math::lanczos::lanczos13m53>(a3, (uint64_t)&v83, v85, v84);
        *a4 = v58;
        if ((a1 & (v38 > 1.0)) != 0) {
          double v39 = 1.0;
        }
        else {
          double v39 = v38;
        }
        if ((v18 & 1) == 0) {
          goto LABEL_161;
        }
        goto LABEL_154;
      }
LABEL_150:
      if ((a1 & (v38 > 1.0)) != 0) {
        double v39 = 1.0;
      }
      else {
        double v39 = v38;
      }
      if (!v18) {
        goto LABEL_159;
      }
      goto LABEL_154;
    }
    if (v12 > 1000.0 && (a5 < v12 || fabs(a5 + -50.0) / v12 < 1.0))
    {
      if (a1) {
        double v56 = boost::math::detail::regularised_gamma_prefix<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>,boost::math::lanczos::lanczos13m53>(a3, (uint64_t)&v83, a5, v12);
      }
      else {
        boost::math::detail::full_igamma_prefix<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(a5, v12);
      }
      if (a4) {
        *a4 = v56;
      }
      double v31 = v84;
      double v38 = v56 / v84;
      if (v56 / v84 != 0.0)
      {
        double v69 = boost::math::detail::incomplete_tgamma_large_x<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(&v85, &v84);
        goto LABEL_102;
      }
      goto LABEL_149;
    }
    if (v12 < 0.5)
    {
      double v57 = -0.4 / log(v12);
      goto LABEL_83;
    }
    if (v12 < 1.1)
    {
      double v57 = v12 * 0.75;
LABEL_83:
      if (v57 >= v20)
      {
        double v83 = 0.0;
        boost::math::detail::tgamma_small_upper_part<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(a3, &v83, v18 ^ 1, a4, v20, v12, v27, a8, a9, a10, a11, a12);
        if (a1) {
          double v68 = v68 / v83;
        }
        goto LABEL_131;
      }
LABEL_84:
      if (a1) {
        double v67 = boost::math::detail::regularised_gamma_prefix<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>,boost::math::lanczos::lanczos13m53>(a3, (uint64_t)&v83, v20, v12);
      }
      else {
        boost::math::detail::full_igamma_prefix<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v20, v12);
      }
      double v38 = v67;
      if (a4) {
        *a4 = v67;
      }
      if (v67 == 0.0) {
        goto LABEL_150;
      }
      if (v18)
      {
        if (a1)
        {
          double v73 = v85;
          double v74 = 1.0 / v38;
        }
        else
        {
          double v77 = boost::math::tgamma<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v85, v31, v32, v33, v34, v35, v36, v37);
          double v75 = 0.0;
          double v73 = v85;
          if (v38 < 1.0 && v38 * 1.79769313e308 <= v77 || (double v74 = v77 / v38, v85 >= 1.0) && 1.79769313e308 / v85 <= v74)
          {
            char v76 = 0;
            goto LABEL_129;
          }
        }
        double v75 = -(v73 * v74);
        char v76 = 1;
      }
      else
      {
        char v76 = 0;
        double v75 = 0.0;
        double v73 = v85;
      }
LABEL_129:
      double v78 = boost::math::detail::lower_gamma_series<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v73, v84, v75);
      double v31 = v85;
      double v79 = v78 / v85;
      if ((v76 & 1) == 0)
      {
        double v38 = v38 * v79;
        goto LABEL_150;
      }
      double v68 = -(v38 * v79);
LABEL_131:
      if ((a1 & (v68 > 1.0)) != 0) {
        double v39 = 1.0;
      }
      else {
        double v39 = v68;
      }
      goto LABEL_159;
    }
    if (a5 > 20.0 && a1)
    {
      double v71 = (v12 - a5) / a5;
      if (v20 > 200.0)
      {
        if (20.0 / v20 <= v71 * v71) {
          goto LABEL_111;
        }
        goto LABEL_136;
      }
      if (fabs(v71) < 0.4)
      {
LABEL_136:
        double v38 = boost::math::detail::igamma_temme_large<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v20, v12);
        if (v12 >= v20) {
          v18 ^= 1u;
        }
        if (!a4) {
          goto LABEL_150;
        }
        double v58 = boost::math::detail::regularised_gamma_prefix<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>,boost::math::lanczos::lanczos13m53>(a3, (uint64_t)&v83, v20, v12);
        *a4 = v58;
        double v31 = 1.0;
        if (v38 <= 1.0) {
          double v39 = v38;
        }
        else {
          double v39 = 1.0;
        }
        if ((v18 & 1) == 0) {
          goto LABEL_161;
        }
LABEL_154:
        double v80 = 1.0;
        if (a1)
        {
LABEL_158:
          double v39 = v80 - v39;
LABEL_159:
          if (!a4) {
            return v39;
          }
          double v58 = *a4;
LABEL_161:
          double v82 = v84;
          if (v84 < 1.0 && v84 * 1.79769313e308 < v58)
          {
            *a4 = 8.98846567e307;
            double v58 = 8.98846567e307;
          }
          *a4 = v58 / v82;
          return v39;
        }
        double v20 = v85;
LABEL_156:
        boost::math::detail::gamma_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>,boost::math::lanczos::lanczos13m53>(v20, v31, v32, v33, v34, v35, v36, v37);
        double v80 = v81;
        if (fabs(v81) > 1.79769313e308) {
          boost::math::policies::detail::raise_error<std::overflow_error,long double>("boost::math::tgamma<%1%>(%1%)", "numeric overflow");
        }
        goto LABEL_158;
      }
    }
LABEL_111:
    if (v12 + -1.0 / (v12 * 3.0) >= v20)
    {
      if (a1) {
        double v72 = boost::math::detail::regularised_gamma_prefix<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>,boost::math::lanczos::lanczos13m53>(a3, (uint64_t)&v83, v20, v12);
      }
      else {
        boost::math::detail::full_igamma_prefix<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v20, v12);
      }
      double v38 = v72;
      if (a4) {
        *a4 = v72;
      }
      if (v72 != 0.0)
      {
        double v69 = boost::math::detail::upper_gamma_fraction<long double>(v85, v84, 2.22044605e-16);
LABEL_102:
        double v70 = v38 * v69;
        double v31 = 1.0;
        if ((a1 & (v70 > 1.0)) != 0) {
          double v39 = 1.0;
        }
        else {
          double v39 = v70;
        }
        if (v18) {
          goto LABEL_159;
        }
        goto LABEL_154;
      }
LABEL_149:
      v18 ^= 1u;
      goto LABEL_150;
    }
    goto LABEL_84;
  }
  BOOL v21 = a5 * 4.0 >= a6.n128_f64[0] || a2 == 0;
  if (v21)
  {
    if (a2)
    {
      double v22 = boost::math::detail::gamma_incomplete_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(1, 1, a3, a4, a5, a6);
      if (v22 == 0.0)
      {
        long double v23 = log(1.0 / (v20 * 12.0) + 1.0 + 1.0 / (v20 * 288.0 * v20)) - v20;
        double v24 = v23 + (v20 + -0.5) * log(v20) + 0.918938533;
        if (a4)
        {
          long double v25 = log(v12);
          *a4 = exp(-(v12 - v20 * v25));
        }
        goto LABEL_53;
      }
    }
    else if (a6.n128_f64[0] * 4.0 < a5 {
           || (double v22 = boost::math::detail::gamma_incomplete_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(1, 0, a3, a4, a5, a6), v22 == 0.0))
    }
    {
      double v53 = log(v12);
      double v41 = -(v12 - v20 * v53);
      if (a4) {
        *a4 = exp(-(v12 - v20 * v53));
      }
      double v52 = boost::math::detail::lower_gamma_series<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v20, v12, 0.0)/ v20;
      goto LABEL_52;
    }
    double v59 = log(v22);
    double v24 = v59
        + boost::math::lgamma<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v20, v60, v61, v62, v63, v64, v65, v66);
    goto LABEL_53;
  }
  double v40 = log(a6.n128_f64[0]);
  double v41 = -(v12 - v20 * v40);
  if (a4) {
    *a4 = exp(-(v12 - v20 * v40));
  }
  double v42 = v12 - v20 + 1.0;
  double v43 = v42 + 2.0;
  double v44 = 3.56011817e-307;
  if (v42 + 2.0 != 0.0) {
    double v44 = v42 + 2.0;
  }
  double v45 = 0.0;
  uint64_t v46 = 2;
  double v47 = v44;
  do
  {
    double v43 = v43 + 2.0;
    double v48 = (v20 - (double)(int)v46) * (double)(int)v46;
    double v49 = v43 + v48 * v45;
    double v50 = 1.0 / v49;
    double v47 = v43 + v48 / v47;
    if (v47 == 0.0) {
      double v47 = 3.56011817e-307;
    }
    BOOL v21 = v49 == 0.0;
    double v45 = 2.80889552e306;
    if (!v21) {
      double v45 = v50;
    }
    double v44 = v44 * (v45 * v47);
  }
  while (fabs(v45 * v47 + -1.0) > 2.22044605e-16 && v46++ != 0);
  double v52 = 1.0 / (v42 + (v20 + -1.0) / v44);
LABEL_52:
  double v24 = v41 + log(v52);
LABEL_53:
  if (v24 > 709.0) {
    boost::math::policies::detail::raise_error<std::overflow_error,long double>((char *)boost::math::detail::gamma_incomplete_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(long double,long double,BOOL,BOOL,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy> const&,long double*)::function, "Overflow Error");
  }
  return exp(v24);
}

double boost::math::detail::upper_gamma_fraction<long double>(double a1, double a2, double a3)
{
  double v3 = a2 - a1 + 1.0;
  double v4 = fabs(a3);
  double v5 = v3 + 2.0;
  double v6 = 3.56011817e-307;
  if (v3 + 2.0 != 0.0) {
    double v6 = v3 + 2.0;
  }
  double v7 = 0.0;
  uint64_t v8 = 2;
  double v9 = v6;
  do
  {
    double v5 = v5 + 2.0;
    double v10 = (a1 - (double)(int)v8) * (double)(int)v8;
    double v11 = v5 + v10 * v7;
    double v12 = 1.0 / v11;
    double v9 = v5 + v10 / v9;
    if (v9 == 0.0) {
      double v9 = 3.56011817e-307;
    }
    BOOL v13 = v11 == 0.0;
    double v7 = 2.80889552e306;
    if (!v13) {
      double v7 = v12;
    }
    double v6 = v6 * (v7 * v9);
    BOOL v13 = fabs(v7 * v9 + -1.0) <= v4 || v8++ == 0;
  }
  while (!v13);
  return 1.0 / (v3 + (a1 + -1.0) / v6);
}

double boost::math::detail::lower_gamma_series<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(double a1, double a2, double a3)
{
  double v4 = 1.0;
  uint64_t v5 = 1000000;
  do
  {
    a3 = v4 + a3;
    if (fabs(a3 * 2.22044605e-16) >= fabs(v4)) {
      break;
    }
    a1 = a1 + 1.0;
    double v4 = v4 * (a2 / a1);
    --v5;
  }
  while (v5);
  if ((unint64_t)(1000000 - v5) >= 0xF4240) {
    boost::math::policies::detail::raise_error<boost::math::evaluation_error,long double>("boost::math::detail::lower_gamma_series<%1%>(%1%)", "Series evaluation exceeded %1% iterations, giving up now.");
  }
  return a3;
}

double boost::math::lgamma<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  double v8 = boost::math::detail::lgamma_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>,boost::math::lanczos::lanczos13m53>((uint64_t)&v11, (uint64_t)&v10, 0, a1, a2, a3, a4, a5, a6, a7, a8);
  if (fabs(v8) > 1.79769313e308) {
    boost::math::policies::detail::raise_error<std::overflow_error,long double>("boost::math::lgamma<%1%>(%1%)", "numeric overflow");
  }
  return v8;
}

double boost::math::detail::finite_gamma_q<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(long double a1, long double a2, uint64_t a3, double *a4)
{
  double v7 = exp(-a2);
  double v8 = 1.0;
  if (v7 == 0.0 || a1 <= 1.0)
  {
    double v12 = v7;
  }
  else
  {
    unsigned int v10 = 2;
    double v11 = v7;
    double v12 = v7;
    do
    {
      double v11 = v11 / v8 * a2;
      double v12 = v12 + v11;
      double v8 = (double)v10++;
    }
    while (v8 < a1);
  }
  if (a4)
  {
    double v13 = v7 * pow(a2, a1);
    double v14 = a1 + -1.0;
    double v15 = fabs(a1 + -1.0);
    if ((unint64_t)(*(void *)&v15 - 0x10000000000000) >> 53 >= 0x3FF
      && (unint64_t)(*(void *)&v15 - 1) >= 0xFFFFFFFFFFFFFLL
      && COERCE__INT64(a1 + -1.0) != 0)
    {
      boost::math::policies::detail::raise_error<boost::math::rounding_error,long double>("boost::math::trunc<%1%>(%1%)", "Value %1% can not be represented in the target integer type.");
    }
    double v18 = floor(v14);
    double v19 = ceil(v14);
    if (v14 < 0.0) {
      double v18 = v19;
    }
    if (v18 > 2147483650.0 || v18 < -2147483650.0) {
      boost::math::policies::detail::raise_error<boost::math::rounding_error,long double>("boost::math::itrunc<%1%>(%1%)", "Value %1% can not be represented in the target integer type.");
    }
    *a4 = v13 / dbl_1C2AA0768[(int)v18];
  }
  return v12;
}

double boost::math::detail::finite_half_gamma_q<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(double *a1, double a2, double a3)
{
  double v6 = sqrt(a3);
  double v7 = boost::math::detail::erf_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(1, v6);
  if (fabs(v7) > 1.79769313e308) {
    boost::math::policies::detail::raise_error<std::overflow_error,long double>("boost::math::erfc<%1%>(%1%, %1%)", "numeric overflow");
  }
  if (a2 <= 1.0 || v7 == 0.0)
  {
    if (!a1) {
      return v7;
    }
    double v14 = v6 * exp(-a3) / 1.77245385;
LABEL_12:
    *a1 = v14;
    return v7;
  }
  long double v8 = exp(-a3);
  double v9 = sqrt(a3 * 3.14159265);
  double v10 = v8 / v9 * a3 + v8 / v9 * a3;
  double v11 = 2.0;
  if (a2 > 2.0)
  {
    unsigned int v12 = 3;
    double v13 = v10;
    do
    {
      double v13 = v13 / (v11 + -0.5) * a3;
      double v10 = v10 + v13;
      double v11 = (double)v12++;
    }
    while (v11 < a2);
  }
  double v7 = v7 + v10;
  double v14 = 0.0;
  if (a1) {
    goto LABEL_12;
  }
  return v7;
}

void boost::math::detail::tgamma_small_upper_part<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(uint64_t a1, double *a2, int a3, long double *a4, double a5, long double a6, double a7, double a8, double a9, double a10, double a11, double a12)
{
  double v17 = a5;
  double v18 = boost::math::detail::tgammap1m1_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>,boost::math::lanczos::lanczos13m53>(a5, a6, a7, a8, a9, a10, a11, a12);
  if (fabs(v18) > 1.79769313e308) {
    boost::math::policies::detail::raise_error<std::overflow_error,long double>("boost::math::tgamma1pm1<%!%>(%1%)", "numeric overflow");
  }
  if (a2) {
    *a2 = (v18 + 1.0) / v17;
  }
  double v19 = boost::math::detail::powm1_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(a1, a6, v17);
  double v20 = v18 - v19;
  double v21 = v19 + 1.0;
  if (a4)
  {
    double v22 = *a2;
    *a4 = v21 / (exp(a6) * v22);
  }
  double v23 = 0.0;
  if (a3) {
    double v23 = *a2;
  }
  double v24 = -a6;
  double v25 = v23 - v20 / v17;
  int v26 = 2;
  double v27 = -a6;
  uint64_t v28 = 999990;
  double v29 = v25 / v21;
  do
  {
    double v17 = v17 + 1.0;
    double v29 = v27 / v17 + v29;
    if (fabs(v29 * 2.22044605e-16) >= fabs(v27 / v17)) {
      break;
    }
    double v27 = v27 * v24 / (double)v26++;
    --v28;
  }
  while (v28);
  if ((unint64_t)(999990 - v28) >= 0xF4240) {
    boost::math::policies::detail::raise_error<boost::math::evaluation_error,long double>("boost::math::tgamma_small_upper_part<%1%>(%1%, %1%)", "Series evaluation exceeded %1% iterations, giving up now.");
  }
}

double boost::math::detail::igamma_temme_large<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(double a1, double a2)
{
  double v4 = (a2 - a1) / a1;
  if (v4 < -1.0) {
    boost::math::policies::detail::raise_error<std::domain_error,long double>((char *)boost::math::log1pmx<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy> const&)::function, "log1pmx(x) requires x > -1, but got CGFloat x = %1%.");
  }
  if (v4 == -1.0) {
    boost::math::policies::detail::raise_error<std::overflow_error,long double>((char *)boost::math::log1pmx<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy> const&)::function, "Overflow Error");
  }
  double v25 = fabs(v4);
  if (v25 <= 0.949999988)
  {
    double v27 = -v4;
    if (v25 >= 2.22044605e-16)
    {
      double v26 = 0.0;
      int v28 = 2;
      uint64_t v29 = 1000000;
      do
      {
        double v4 = v4 * v27;
        double v30 = v4 / (double)v28;
        double v26 = v26 + v30;
        if (fabs(v26 * 2.22044605e-16) >= fabs(v30)) {
          break;
        }
        ++v28;
        --v29;
      }
      while (v29);
      if ((unint64_t)(1000000 - v29) >= 0xF4240) {
        boost::math::policies::detail::raise_error<boost::math::evaluation_error,long double>((char *)boost::math::log1pmx<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy> const&)::function, "Series evaluation exceeded %1% iterations, giving up now.");
      }
    }
    else
    {
      double v26 = v4 * v27 * 0.5;
    }
  }
  else
  {
    double v26 = log(v4 + 1.0) - v4;
  }
  double v5 = -(v26 * a1);
  double v6 = boost::math::detail::erf_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(1, sqrt(v5));
  if (fabs(v6) > 1.79769313e308) {
    boost::math::policies::detail::raise_error<std::overflow_error,long double>("boost::math::erfc<%1%>(%1%, %1%)", "numeric overflow");
  }
  double v7 = sqrt(v26 * -2.0);
  double v8 = exp(-v5);
  if (a2 >= a1) {
    double v9 = v7;
  }
  else {
    double v9 = -v7;
  }
  v10.f64[0] = v9 * v9 * -0.000109765822 + -0.000334931611;
  v11.f64[0] = v9 * v9 * 0.000281269515 + 0.0000517179091;
  v12.f64[0] = v9 * v9 * (v9 * v9 * -0.00000229148118 + -0.0000135940482) + 0.0000679778048;
  v13.f64[0] = v9 * v9 * (v9 * v9 * 0.00000801847026 + 0.000000141906292) + -0.000199325705;
  v14.f64[0] = v9 * v9 * 0.00000142309007 + 0.0000110826541;
  v15.f64[0] = v9 * v9 * -0.00000567495283 + -0.000000239650511;
  v16.f64[0] = v9 * v9 * 0.0000000119516286 + 0.000000137863345;
  v17.f64[0] = v9 * v9 * -0.000000057525456 + 0.0000000046471278;
  v10.f64[1] = v9 * v9 * (v9 * v9 * -0.0000183291166 + -0.0000815396937) + 0.00027087821;
  v11.f64[1] = v9 * v9 * (v9 * v9 * 0.0000561168275 + 0.000000790235323) + -0.000592166437;
  double v18 = (const double *)&unk_1C2AA0470;
  *(void *)&v19.f64[0] = *(_OWORD *)&vld1q_dup_f64(v18);
  float64x2_t v20 = vaddq_f64(vmulq_n_f64(v11, v9), vaddq_f64(vmulq_n_f64(v10, v9 * v9), (float64x2_t)xmmword_1C2AA0000));
  v19.f64[1] = 1.0 / a1 * (1.0 / a1);
  v10.f64[0] = v19.f64[1];
  v10.f64[1] = (v9 * -0.000438297099 + 0.000839498721) * v9 + -0.000652623919;
  v12.f64[1] = v9 * v9 * 0.000011375727 + 0.0000664149822;
  v13.f64[1] = v9 * v9 * -0.0000396836505 + -0.00000146384526;
  v14.f64[1] = v9 * v9 * (v9 * v9 * 0.000000142806142 + 0.00000137219573) + -0.0000127606352;
  v15.f64[1] = v9 * v9 * (v9 * v9 * -0.000000629899214 + 0.0000000342357873) + 0.0000529234488;
  v16.f64[1] = v9 * v9 * (v9 * v9 * 9.14769958e-10 + 0.0000000102618098) + -0.000000176659527;
  v17.f64[1] = v9 * v9 * (v9 * v9 * -0.00000000438203602 + 0.00000000670785354) + 0.000000829671134;
  float64x2_t v21 = vaddq_f64(vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(v15, v9 * v9), (float64x2_t)xmmword_1C2AA0070), v9 * v9), (float64x2_t)xmmword_1C2AA0080), v9), vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(v14, v9 * v9), (float64x2_t)xmmword_1C2AA0040), v9 * v9), (float64x2_t)xmmword_1C2AA0050), v9 * v9), (float64x2_t)xmmword_1C2AA0060)), vmulq_n_f64(vaddq_f64(vmulq_n_f64(vmlaq_f64(v20, v19, v10), v19.f64[1]), vaddq_f64(
                    vmulq_n_f64(vaddq_f64(vmulq_n_f64(v13, v9 * v9), (float64x2_t)xmmword_1C2AA0030), v9),
                    vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(v12, v9 * v9), (float64x2_t)xmmword_1C2AA0010), v9 * v9), (float64x2_t)xmmword_1C2AA0020))), v19.f64[1])), v19.f64[1]), vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(v17, v9 * v9), (float64x2_t)xmmword_1C2AA00E0), v9 * v9), (float64x2_t)xmmword_1C2AA00F0), v9 * v9), (float64x2_t)xmmword_1C2AA0100), v9 * v9), (float64x2_t)xmmword_1C2AA0110), v9), vaddq_f64(
              vmulq_n_f64(vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(v16, v9 * v9), (float64x2_t)xmmword_1C2AA0090), v9 * v9), (float64x2_t)xmmword_1C2AA00A0), v9 * v9), (float64x2_t)xmmword_1C2AA00B0), v9 * v9), (float64x2_t)xmmword_1C2AA00C0), v9 * v9), (float64x2_t)xmmword_1C2AA00D0)));
  double v22 = v8 / sqrt(a1 * 6.28318531) * (1.0 / a1 * v21.f64[0] + v21.f64[1]);
  double v23 = -v22;
  if (a2 >= a1) {
    double v23 = v22;
  }
  return v6 * 0.5 + v23;
}

double boost::math::detail::incomplete_tgamma_large_x<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(double *a1, double *a2)
{
  double v2 = *a1;
  double v3 = 0.0;
  double v4 = 1.0;
  uint64_t v5 = 1000000;
  do
  {
    double v3 = v4 + v3;
    if (fabs(v3 * 2.22044605e-16) >= fabs(v4)) {
      break;
    }
    double v2 = v2 + -1.0;
    double v4 = v4 * (v2 / *a2);
    --v5;
  }
  while (v5);
  if ((unint64_t)(1000000 - v5) >= 0xF4240) {
    boost::math::policies::detail::raise_error<boost::math::evaluation_error,long double>("boost::math::tgamma<%1%>(%1%,%1%)", "Series evaluation exceeded %1% iterations, giving up now.");
  }
  return v3;
}

double boost::math::detail::tgammap1m1_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>,boost::math::lanczos::lanczos13m53>(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  if (a1 >= 0.0)
  {
    double v9 = a1 + 1.0;
    a2 = 2.0;
    if (a1 >= 2.0) {
      goto LABEL_6;
    }
    boost::math::detail::lgamma_small_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>,boost::math::lanczos::lanczos13m53>(v9, a1, a1 + -1.0);
  }
  else
  {
    if (a1 < -0.5)
    {
      double v9 = a1 + 1.0;
LABEL_6:
      boost::math::detail::gamma_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>,boost::math::lanczos::lanczos13m53>(v9, a2, a3, a4, a5, a6, a7, a8);
      if (fabs(v11) > 1.79769313e308) {
        boost::math::policies::detail::raise_error<std::overflow_error,long double>("boost::math::tgamma<%1%>(%1%)", "numeric overflow");
      }
      return v11 + -1.0;
    }
    if (a1 < -1.0) {
      boost::math::policies::detail::raise_error<std::domain_error,long double>("log1p<%1%>(%1%)", "log1p(x) requires x > -1, but got CGFloat x = %1%.");
    }
    if (a1 == -1.0) {
      boost::math::policies::detail::raise_error<std::overflow_error,long double>("log1p<%1%>(%1%)", "Overflow Error");
    }
    double v15 = log1pl(a1);
    boost::math::detail::lgamma_small_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>,boost::math::lanczos::lanczos13m53>(a1 + 2.0, a1 + 1.0, a1);
    double v10 = v13 - v15;
  }
  double v12 = boost::math::detail::expm1_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v10);
  if (fabs(v12) > 1.79769313e308) {
    boost::math::policies::detail::raise_error<std::overflow_error,long double>("boost::math::expm1<%1%>(%1%)", "numeric overflow");
  }
  return v12;
}

void boost::math::binomial_coefficient<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(unsigned int a1, unsigned int a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  if (a1 < a2) {
    boost::math::policies::detail::raise_error<std::domain_error,long double>((char *)boost::math::binomial_coefficient<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(unsigned int,unsigned int,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy> const&)::function, "The binomial coefficient is undefined for k > n, but got k = %1%.");
  }
  if (a2)
  {
    unsigned int v10 = a1 - a2;
    if (a1 != a2 && a2 != 1 && a1 - 1 != a2 && a1 > 0xAA)
    {
      if (v10 <= a2)
      {
        double v11 = (double)v10;
        double v13 = (double)(a2 + 1);
        double v12 = (double)v10;
      }
      else
      {
        double v11 = (double)a2;
        double v12 = (double)(v10 + 1);
        double v13 = (double)a2;
      }
      boost::math::detail::beta_imp<long double,boost::math::lanczos::lanczos13m53,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v13, v12, a5, a6, a7, a8, a9, a10);
      if (fabs(v14) > 1.79769313e308) {
        boost::math::policies::detail::raise_error<std::overflow_error,long double>("boost::math::beta<%1%>(%1%,%1%)", "numeric overflow");
      }
      if (v14 * v11 == 0.0) {
        boost::math::policies::detail::raise_error<std::overflow_error,long double>((char *)boost::math::binomial_coefficient<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(unsigned int,unsigned int,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy> const&)::function, "Overflow Error");
      }
    }
  }
}

void boost::math::policies::detail::raise_error<boost::math::rounding_error,double>(char *a1, char *a2)
{
  double v2 = "Unknown function operating on type %1%";
  if (a1) {
    double v2 = a1;
  }
  if (a2) {
    double v3 = a2;
  }
  else {
    double v3 = "Cause unknown: error caused by bad argument with value %1%";
  }
  std::string::basic_string[abi:ne180100]<0>(&v14, v2);
  std::string::basic_string[abi:ne180100]<0>(&v13, v3);
  std::string::basic_string[abi:ne180100]<0>(&v12, "Error in function ");
  boost::math::policies::detail::replace_all_in_string(&v14, "%1%", "double");
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    double v4 = &v14;
  }
  else {
    double v4 = (std::string *)v14.__r_.__value_.__r.__words[0];
  }
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v14.__r_.__value_.__l.__size_;
  }
  std::string::append(&v12, (const std::string::value_type *)v4, size);
  std::string::append(&v12, ": ", 2uLL);
  boost::math::policies::detail::prec_format<double>(v10);
  if (v11 >= 0) {
    double v6 = (const char *)v10;
  }
  else {
    double v6 = (const char *)v10[0];
  }
  boost::math::policies::detail::replace_all_in_string(&v13, "%1%", v6);
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    double v7 = &v13;
  }
  else {
    double v7 = (std::string *)v13.__r_.__value_.__r.__words[0];
  }
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v8 = HIBYTE(v13.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v8 = v13.__r_.__value_.__l.__size_;
  }
  std::string::append(&v12, (const std::string::value_type *)v7, v8);
  std::runtime_error::runtime_error(&v9, &v12);
  v9.__vftable = (std::runtime_error_vtbl *)&unk_1F1DE9D78;
  boost::throw_exception<boost::math::rounding_error>(&v9);
}

void sub_1C294E3E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  std::runtime_error::~runtime_error(&a9);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (*(char *)(v27 - 17) < 0) {
    operator delete(*(void **)(v27 - 40));
  }
  _Unwind_Resume(a1);
}

double boost::math::detail::ibeta_fraction2_t<long double>::operator()(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 32);
  double result = *(double *)(a1 + 16)
         * (*(double *)(a1 + 16)
          * ((*(double *)(a1 + 8) - (double)v1)
           * ((*(double *)a1 + (double)v1 + -1.0)
            * (*(double *)a1 + *(double *)(a1 + 8) + (double)v1 + -1.0)
            * (double)v1)))
         / ((*(double *)a1 + (double)(2 * v1) + -1.0)
          * (*(double *)a1 + (double)(2 * v1) + -1.0));
  *(_DWORD *)(a1 + 32) = v1 + 1;
  return result;
}

uint64_t boost::math::hypergeometric_distribution<double,boost::math::policies::policy<boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>::check_params(unsigned int *a1, char *a2)
{
  unsigned int v2 = a1[1];
  if (a1[2] > v2)
  {
    double v3 = "Parameter r out of range: must be <= N but got %1%";
    goto LABEL_5;
  }
  if (*a1 > v2)
  {
    double v3 = "Parameter n out of range: must be <= N but got %1%";
LABEL_5:
    boost::math::policies::detail::raise_error<std::domain_error,double>(a2, v3);
  }
  return 1;
}

double boost::math::pdf<double,boost::math::policies::policy<boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(unsigned int *a1, unsigned int *a2)
{
  if ((boost::math::hypergeometric_distribution<double,boost::math::policies::policy<boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>::check_params(a1, (char *)boost::math::pdf<double,boost::math::policies::policy<boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(boost::math::hypergeometric_distribution<double,boost::math::policies::policy<boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>> const&,unsigned int const&)::function) & 1) == 0|| (boost::math::hypergeometric_distribution<double,boost::math::policies::policy<boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>::check_x(a1, *a2, (char *)boost::math::pdf<double,boost::math::policies::policy<boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(boost::math::hypergeometric_distribution<double,boost::math::policies::policy<boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>> const&,unsigned int const&)::function) & 1) == 0)
  {
    return 0.0;
  }
  unsigned int v4 = *a2;
  unsigned int v6 = a1[1];
  unsigned int v5 = a1[2];
  unsigned int v7 = *a1;
  if (v6 > 0xAA)
  {
    if (v6 <= 0x19913)
    {
      long long v13 = xmmword_1C2AA0120;
      v11[0] = v4;
      v11[1] = v5;
      void v11[2] = v7;
      v11[3] = v6;
      uint64_t v12 = 0x200000000;
      boost::math::detail::hypergeometric_pdf_prime_loop_imp<long double>(v11, (uint64_t)&v13);
    }
    else
    {
      boost::math::detail::hypergeometric_pdf_lanczos_imp<long double,boost::math::lanczos::lanczos13m53,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v4, v5, v7, v6);
    }
  }
  else
  {
    double v8 = boost::math::detail::hypergeometric_pdf_factorial_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v4, v5, v7, v6);
  }
  if (v8 > 1.0) {
    double v8 = 1.0;
  }
  if (v8 >= 0.0) {
    double v9 = v8;
  }
  else {
    double v9 = 0.0;
  }
  if (fabs(v9) > 1.79769313e308) {
    boost::math::policies::detail::raise_error<std::overflow_error,double>("boost::math::hypergeometric_pdf<%1%>(%1%,%1%,%1%,%1%)", "numeric overflow");
  }
  return v9;
}

uint64_t boost::math::hypergeometric_distribution<double,boost::math::policies::policy<boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>::check_x(unsigned int *a1, unsigned int a2, char *a3)
{
  unsigned int v3 = a1[2];
  unsigned int v4 = *a1;
  if (((v3 + v4 - a1[1]) & ~((int)(v3 + v4 - a1[1]) >> 31)) > a2)
  {
    unsigned int v5 = "Random variable out of range: must be > 0 and > m + r - N but got %1%";
    goto LABEL_7;
  }
  if (v4 < v3) {
    unsigned int v3 = *a1;
  }
  if (v3 < a2)
  {
    unsigned int v5 = "Random variable out of range: must be less than both n and r but got %1%";
LABEL_7:
    boost::math::policies::detail::raise_error<std::domain_error,double>(a3, v5);
  }
  return 1;
}

double boost::math::detail::hypergeometric_pdf_factorial_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(int a1, int a2, int a3, unsigned int a4)
{
  v13[3] = *MEMORY[0x1E4F143B8];
  if (a4 >= 0xAB) {
    boost::math::detail::hypergeometric_pdf_factorial_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>();
  }
  LODWORD(v4) = 0;
  LODWORD(v5) = 0;
  double v6 = dbl_1C2AA0768[a4 - a2];
  double v7 = dbl_1C2AA0768[a4 - a3];
  *(double *)long long v13 = dbl_1C2AA0768[a2];
  *(double *)&v13[1] = v7;
  *(double *)&v13[2] = v6;
  double v8 = dbl_1C2AA0768[a1];
  *(double *)uint64_t v12 = dbl_1C2AA0768[a4];
  *(double *)&v12[1] = v8;
  double v9 = dbl_1C2AA0768[a2 - a1];
  *(double *)&v12[2] = dbl_1C2AA0768[a3 - a1];
  *(double *)&v12[3] = v9;
  *(double *)&v12[4] = dbl_1C2AA0768[a1 - a2 + a4 - a3];
  double result = dbl_1C2AA0768[a3];
  do
  {
    if ((int)v4 > 4)
    {
LABEL_8:
      if ((int)v5 > 2) {
        continue;
      }
    }
    else
    {
      uint64_t v4 = (int)v4;
      while ((int)v5 > 2 || result >= 1.0)
      {
        double v11 = *(double *)&v12[v4++];
        double result = result / v11;
        if (v4 == 5) {
          goto LABEL_8;
        }
      }
    }
    uint64_t v5 = (int)v5;
    do
    {
      if ((int)v4 <= 4 && result > 1.0) {
        break;
      }
      double result = result * *(double *)&v13[v5++];
    }
    while (v5 != 3);
  }
  while ((int)v5 < 3 || (int)v4 < 5);
  return result;
}

void boost::math::detail::hypergeometric_pdf_lanczos_imp<long double,boost::math::lanczos::lanczos13m53,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  v121[9] = *(double *)MEMORY[0x1E4F143B8];
  v121[0] = (double)a3 + 6.02468004 + 0.5;
  v121[1] = (double)a2 + 6.02468004 + 0.5;
  double v8 = (double)(a4 - a3);
  unsigned int v9 = a4 - a2;
  v121[2] = v8 + 6.02468004 + 0.5;
  v121[3] = (double)(a4 - a2) + 6.02468004 + 0.5;
  v121[4] = 1.0 / ((double)a4 + 6.02468004 + 0.5);
  v121[5] = 1.0 / ((double)a1 + 6.02468004 + 0.5);
  unsigned int v10 = a3 - a1;
  unsigned int v11 = a2 - a1;
  v121[6] = 1.0 / ((double)(a3 - a1) + 6.02468004 + 0.5);
  v121[7] = 1.0 / ((double)(a2 - a1) + 6.02468004 + 0.5);
  unsigned int v105 = a4 - a3;
  unsigned int v12 = a4 - a3 - a2 + a1;
  v121[8] = 1.0 / ((double)v12 + 6.02468004 + 0.5);
  v120[0] = (double)a3 + 0.5;
  v120[1] = (double)a2 + 0.5;
  v120[2] = v8 + 0.5;
  v120[3] = (double)(a4 - a2) + 0.5;
  v120[4] = (double)a4 + 0.5;
  v120[5] = (double)a1 + 0.5;
  v120[6] = (double)(a3 - a1) + 0.5;
  v120[7] = (double)(a2 - a1) + 0.5;
  v120[8] = (double)v12 + 0.5;
  int v119 = 1;
  v118[0] = xmmword_1C2AA5AAC;
  v118[1] = unk_1C2AA5ABC;
  int v116 = 8;
  v115[0] = xmmword_1C2AA5AD0;
  v115[1] = unk_1C2AA5AE0;
  double v114 = COERCE_DOUBLE(v120);
  std::__introsort<std::_ClassicAlgPolicy,boost::math::detail::sort_functor<long double> &,int *,false>((uint64_t)v115, v117, (uint64_t *)&v114, 6, 1);
  int v13 = DWORD1(v115[0]);
  double v14 = v120[SDWORD1(v115[0])];
  while (1)
  {
    uint64_t v15 = SLODWORD(v115[0]);
    v120[SLODWORD(v115[0])] = v120[SLODWORD(v115[0])] - v14;
    uint64_t v16 = v13;
    double v17 = v121[v15] * v121[v13];
    v121[v13] = v17;
    if (v17 < 2.22507386e-308 && v120[v13] != 0.0) {
      break;
    }
    uint64_t v18 = 0;
    *((_DWORD *)v118 + v16) += *((_DWORD *)v118 + v15);
    do
    {
      uint64_t v19 = *(int *)((char *)v115 + v18);
      uint64_t v20 = *(int *)((char *)v115 + v18 + 4);
      if (v120[v19] > v120[v20]) {
        break;
      }
      *(_DWORD *)((char *)v115 + v18) = v20;
      *(_DWORD *)((char *)v115 + v18 + 4) = v19;
      v18 += 4;
    }
    while (v18 != 32);
    int v13 = DWORD1(v115[0]);
    double v14 = v120[SDWORD1(v115[0])];
    if (v14 <= 1.0)
    {
      uint64_t v21 = 8;
      do
        double v22 = v120[*((int *)v115 + v21--)];
      while (v22 == 0.0);
      unsigned int v104 = v11;
      if (v21 != -1)
      {
        LODWORD(v23) = v21 + 1;
        do
        {
          uint64_t v23 = (int)v23;
          do
          {
            uint64_t v24 = v23 - 1;
            uint64_t v25 = *((int *)v115 + v23 - 1);
            uint64_t v26 = *((int *)v115 + v23);
            if (v120[v25] != v120[v26]) {
              break;
            }
            v121[v25] = v121[v26] * v121[v25];
            v120[v26] = 0.0;
            *((_DWORD *)v118 + v25) += *((_DWORD *)v118 + v26);
            while (v23 != 8)
            {
              uint64_t v27 = (int *)v115 + v23;
              uint64_t v28 = *v27;
              uint64_t v29 = v27[1];
              if (v120[v28] > v120[v29]) {
                break;
              }
              *((_DWORD *)v115 + v23) = v29;
              v27[1] = v28;
              ++v23;
            }
            uint64_t v23 = v24;
          }
          while (v24);
          LODWORD(v23) = v23 - 1;
        }
        while (v23);
      }
      uint64_t v30 = SLODWORD(v115[0]);
      double v31 = v121[SLODWORD(v115[0])];
      long double v32 = exp((double)*((int *)v118 + SLODWORD(v115[0])));
      double v40 = pow(v31 * v32, v120[v30]);
      for (uint64_t i = 0; i != 32; i += 4)
      {
        uint64_t v42 = *(int *)((char *)v115 + i + 4);
        double v43 = v120[v42];
        if (v43 <= 0.0) {
          break;
        }
        if (v40 < 2.22507386e-308) {
          return;
        }
        if (v43 == 1.0)
        {
          double v44 = v121[v42];
          double v45 = v44 * exp((double)*((int *)v118 + v42));
        }
        else
        {
          double v46 = v121[v42];
          long double v47 = v46 * exp((double)*((int *)v118 + v42));
          double v45 = v43 == 0.5 ? sqrt(v47) : pow(v47, v43);
        }
        double v40 = v40 * v45;
      }
      double v114 = (double)(a3 + 1);
      boost::math::tools::detail::evaluate_rational_c_imp<long double,unsigned int,long double>((uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum_expG_scaled<long double>(long double const&)::num, (uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum_expG_scaled<long double>(long double const&)::denom, &v114, v114, v33, v34, v35, v36, v37, v38, v39);
      double v113 = (double)(a2 + 1);
      boost::math::tools::detail::evaluate_rational_c_imp<long double,unsigned int,long double>((uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum_expG_scaled<long double>(long double const&)::num, (uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum_expG_scaled<long double>(long double const&)::denom, &v113, v113, v48, v49, v50, v51, v52, v53, v54);
      double v112 = (double)(v105 + 1);
      boost::math::tools::detail::evaluate_rational_c_imp<long double,unsigned int,long double>((uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum_expG_scaled<long double>(long double const&)::num, (uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum_expG_scaled<long double>(long double const&)::denom, &v112, v112, v55, v56, v57, v58, v59, v60, v61);
      double v111 = (double)(v9 + 1);
      boost::math::tools::detail::evaluate_rational_c_imp<long double,unsigned int,long double>((uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum_expG_scaled<long double>(long double const&)::num, (uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum_expG_scaled<long double>(long double const&)::denom, &v111, v111, v62, v63, v64, v65, v66, v67, v68);
      double v110 = (double)(a4 + 1);
      boost::math::tools::detail::evaluate_rational_c_imp<long double,unsigned int,long double>((uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum_expG_scaled<long double>(long double const&)::num, (uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum_expG_scaled<long double>(long double const&)::denom, &v110, v110, v69, v70, v71, v72, v73, v74, v75);
      double v109 = (double)(a1 + 1);
      boost::math::tools::detail::evaluate_rational_c_imp<long double,unsigned int,long double>((uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum_expG_scaled<long double>(long double const&)::num, (uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum_expG_scaled<long double>(long double const&)::denom, &v109, v109, v76, v77, v78, v79, v80, v81, v82);
      double v108 = (double)(v10 + 1);
      boost::math::tools::detail::evaluate_rational_c_imp<long double,unsigned int,long double>((uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum_expG_scaled<long double>(long double const&)::num, (uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum_expG_scaled<long double>(long double const&)::denom, &v108, v108, v83, v84, v85, v86, v87, v88, v89);
      double v107 = (double)(v104 + 1);
      boost::math::tools::detail::evaluate_rational_c_imp<long double,unsigned int,long double>((uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum_expG_scaled<long double>(long double const&)::num, (uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum_expG_scaled<long double>(long double const&)::denom, &v107, v107, v90, v91, v92, v93, v94, v95, v96);
      boost::math::tools::detail::evaluate_rational_c_imp<long double,unsigned int,long double>((uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum_expG_scaled<long double>(long double const&)::num, (uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum_expG_scaled<long double>(long double const&)::denom, (double *)&v106, (double)(v12 + 1), v97, v98, v99, v100, v101, v102, v103);
      return;
    }
  }
}

uint64_t boost::math::prime<boost::math::policies::policy<boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(unsigned int a1)
{
  if (a1 <= 0x35) {
    return byte_1C2AA0CC0[a1];
  }
  if (a1 >> 1 <= 0xCC6) {
    return word_1C2AA0CF6[a1 - 54];
  }
  if (a1 >> 4 >= 0x271) {
    boost::math::policies::detail::raise_error<std::domain_error,unsigned int>("boost::math::prime<%1%>", "Argument n out of range: got %1%");
  }
  return word_1C2AA3FA6[a1 - 6542] + 0xFFFF;
}

void boost::math::policies::detail::raise_error<std::domain_error,unsigned int>(char *a1, char *a2)
{
  unsigned int v2 = "Unknown function operating on type %1%";
  if (a1) {
    unsigned int v2 = a1;
  }
  if (a2) {
    unsigned int v3 = a2;
  }
  else {
    unsigned int v3 = "Cause unknown: error caused by bad argument with value %1%";
  }
  std::string::basic_string[abi:ne180100]<0>(&v14, v2);
  std::string::basic_string[abi:ne180100]<0>(&v13, v3);
  std::string::basic_string[abi:ne180100]<0>(&v12, "Error in function ");
  boost::math::policies::detail::replace_all_in_string(&v14, "%1%", (const char *)(*(void *)(MEMORY[0x1E4FBA3B0] + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v4 = &v14;
  }
  else {
    uint64_t v4 = (std::string *)v14.__r_.__value_.__r.__words[0];
  }
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v14.__r_.__value_.__l.__size_;
  }
  std::string::append(&v12, (const std::string::value_type *)v4, size);
  std::string::append(&v12, ": ", 2uLL);
  boost::math::policies::detail::prec_format<unsigned int>(v10);
  if (v11 >= 0) {
    double v6 = (const char *)v10;
  }
  else {
    double v6 = (const char *)v10[0];
  }
  boost::math::policies::detail::replace_all_in_string(&v13, "%1%", v6);
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    double v7 = &v13;
  }
  else {
    double v7 = (std::string *)v13.__r_.__value_.__r.__words[0];
  }
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v8 = HIBYTE(v13.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v8 = v13.__r_.__value_.__l.__size_;
  }
  std::string::append(&v12, (const std::string::value_type *)v7, v8);
  std::logic_error::logic_error(&v9, &v12);
  v9.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
  boost::throw_exception<std::domain_error>(&v9);
}

uint64_t boost::math::policies::detail::prec_format<unsigned int>@<X0>(void *a1@<X8>)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v4);
  *(void *)((char *)&v6[1] + *(void *)(v5 - 24)) = 11;
  std::ostream::operator<<();
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v6, a1);
  v4[0] = *MEMORY[0x1E4FBA408];
  uint64_t v2 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v4 + *(void *)(v4[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  uint64_t v5 = v2;
  v6[0] = MEMORY[0x1E4FBA470] + 16;
  if (v7 < 0) {
    operator delete((void *)v6[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C8764E10](&v8);
}

void sub_1C294F1FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t boost::math::detail::hypergeometric_pdf_prime_loop_imp<long double>(_DWORD *a1, uint64_t a2)
{
  uint64_t result = a1[5];
  for (unsigned int i = a1[3]; result <= i; unsigned int i = a1[3])
  {
    unsigned int v6 = 0;
    unsigned int v9 = result;
    do
    {
      unsigned int v7 = a1[2];
      unsigned int v8 = a1[1];
      unsigned int v6 = v7 / v9
         + v6
         + v8 / v9
         + (i - v7) / v9
         + (i - v8) / v9
         - (i / v9
          + *a1 / v9
          + (v7 - *a1) / v9
          + (v8 - *a1) / v9
          + (i - v7 - v8 + *a1) / v9);
      v9 *= result;
    }
    while (v9 <= i);
    if (v6)
    {
      v19[0] = (double)result;
      double v10 = boost::math::detail::integer_power<long double>(v19, v6);
      double v11 = *(double *)a2;
      if (v10 > 1.0 && 1.79769313e308 / v10 < v11 || v10 < 1.0 && 2.22507386e-308 / v10 > v11)
      {
        v19[0] = v10;
        *(void *)&v19[1] = a2;
        unsigned int v18 = a1[4] + 1;
        a1[4] = v18;
        a1[5] = boost::math::prime<boost::math::policies::policy<boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v18);
        return boost::math::detail::hypergeometric_pdf_prime_loop_imp<long double>(a1, v19);
      }
      *(double *)a2 = v10 * v11;
    }
    unsigned int v12 = a1[4] + 1;
    a1[4] = v12;
    uint64_t result = boost::math::prime<boost::math::policies::policy<boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v12);
    a1[5] = result;
  }
  uint64_t v13 = a2;
  do
  {
    if (*(double *)v13 >= 1.0) {
      break;
    }
    uint64_t v13 = *(void *)(v13 + 8);
  }
  while (v13);
  do
  {
    if (*(double *)a2 < 1.0) {
      goto LABEL_18;
    }
    a2 = *(void *)(a2 + 8);
  }
  while (a2);
  if (v13)
  {
    a2 = 0;
LABEL_18:
    double v14 = 1.0;
    while (1)
    {
      if (!v13) {
        goto LABEL_29;
      }
      if (!a2 || v14 <= 1.0) {
        break;
      }
      int v15 = 0;
LABEL_30:
      if (v14 >= 1.0) {
        int v16 = 1;
      }
      else {
        int v16 = v15;
      }
      if (a2 && v16)
      {
LABEL_35:
        double v14 = v14 * *(double *)a2;
        while (1)
        {
          a2 = *(void *)(a2 + 8);
          if (!a2) {
            break;
          }
          if (*(double *)a2 < 1.0)
          {
            if (v14 >= 1.0) {
              char v17 = 1;
            }
            else {
              char v17 = v15;
            }
            if (v17) {
              goto LABEL_35;
            }
            break;
          }
        }
      }
      if (!(v13 | a2)) {
        return result;
      }
    }
LABEL_23:
    double v14 = v14 * *(double *)v13;
    while (1)
    {
      uint64_t v13 = *(void *)(v13 + 8);
      if (!v13) {
        break;
      }
      if (*(double *)v13 >= 1.0)
      {
        if (!a2) {
          goto LABEL_23;
        }
        int v15 = 0;
        if (v14 <= 1.0) {
          goto LABEL_23;
        }
        goto LABEL_30;
      }
    }
LABEL_29:
    int v15 = 1;
    goto LABEL_30;
  }
  return result;
}

double boost::math::detail::integer_power<long double>(double *a1, int a2)
{
  if (a2 < 0) {
    return 1.0 / boost::math::detail::integer_power<long double>(a1, -a2);
  }
  double result = 1.0;
  switch(a2)
  {
    case 0:
      return result;
    case 1:
      return *a1;
    case 2:
      double v4 = *a1;
      goto LABEL_17;
    case 3:
      return *a1 * (*a1 * *a1);
    case 4:
      double v5 = *a1;
      goto LABEL_16;
    case 5:
      double v6 = *a1;
      double v7 = v6 * v6;
      goto LABEL_14;
    case 6:
      double v4 = *a1 * (*a1 * *a1);
      goto LABEL_17;
    case 7:
      double v6 = *a1;
      double v7 = v6 * (v6 * v6);
LABEL_14:
      double result = v7 * (v6 * v7);
      break;
    case 8:
      double v5 = *a1 * *a1;
LABEL_16:
      double v4 = v5 * v5;
LABEL_17:
      double result = v4 * v4;
      break;
    default:
      long double v3 = *a1;
      double result = pow(v3, (double)a2);
      break;
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,boost::math::detail::sort_functor<long double> &,int *,false>(uint64_t result, int *a2, uint64_t *a3, uint64_t a4, char a5)
{
  double v10 = (int *)result;
LABEL_2:
  double v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    double v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = a2 - v11;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t v22 = *(a2 - 1);
          uint64_t v23 = *v11;
          if (*(double *)(*a3 + 8 * v22) > *(double *)(*a3 + 8 * v23))
          {
            *double v11 = v22;
            *(a2 - 1) = v23;
          }
          break;
        case 3uLL:
          double result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,boost::math::detail::sort_functor<long double> &,int *>(v11, v11 + 1, a2 - 1, a3);
          break;
        case 4uLL:
          double result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,boost::math::detail::sort_functor<long double> &,int *>(v11, v11 + 1, v11 + 2, a2 - 1, a3);
          break;
        case 5uLL:
          double result = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,boost::math::detail::sort_functor<long double> &,int *>(v11, v11 + 1, v11 + 2, v11 + 3, a2 - 1, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 95) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,boost::math::detail::sort_functor<long double> &,int *,int *>(v11, a2, a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    char v17 = &v11[v15 >> 1];
    if ((unint64_t)v14 >= 0x201)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,boost::math::detail::sort_functor<long double> &,int *>(v11, &v11[v15 >> 1], a2 - 1, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,boost::math::detail::sort_functor<long double> &,int *>(v11 + 1, v17 - 1, a2 - 2, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,boost::math::detail::sort_functor<long double> &,int *>(v11 + 2, &v11[v16 + 1], a2 - 3, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,boost::math::detail::sort_functor<long double> &,int *>(v17 - 1, v17, &v11[v16 + 1], a3);
      int v18 = *v11;
      *double v11 = *v17;
      *char v17 = v18;
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,boost::math::detail::sort_functor<long double> &,int *>(&v11[v15 >> 1], v11, a2 - 1, a3);
      if (a5) {
        goto LABEL_14;
      }
    }
    if (*(double *)(*a3 + 8 * *(v11 - 1)) <= *(double *)(*a3 + 8 * *v11))
    {
      double result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,int *,boost::math::detail::sort_functor<long double> &>(v11, a2, a3);
      double v11 = (int *)result;
      goto LABEL_19;
    }
LABEL_14:
    uint64_t v19 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,int *,boost::math::detail::sort_functor<long double> &>(v11, a2, a3);
    if ((v20 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,boost::math::detail::sort_functor<long double> &,int *>(v11, v19, a3);
    double v11 = v19 + 1;
    double result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,boost::math::detail::sort_functor<long double> &,int *>(v19 + 1, a2, a3);
    if (result)
    {
      a4 = -v13;
      a2 = v19;
      if (v21) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v21)
    {
LABEL_17:
      double result = std::__introsort<std::_ClassicAlgPolicy,boost::math::detail::sort_functor<long double> &,int *,false>(v10, v19, a3, -v13, a5 & 1);
      double v11 = v19 + 1;
LABEL_19:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,boost::math::detail::sort_functor<long double> &,int *>(v11, a2, a3);
  }
  else
  {
    return (uint64_t)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,boost::math::detail::sort_functor<long double> &,int *>(v11, a2, a3);
  }
}

int *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,boost::math::detail::sort_functor<long double> &,int *>(int *result, int *a2, uint64_t *a3)
{
  if (result != a2)
  {
    long double v3 = result + 1;
    if (result + 1 != a2)
    {
      uint64_t v4 = 0;
      uint64_t v5 = *a3;
      char v6 = result;
      do
      {
        uint64_t v8 = *v6;
        uint64_t v7 = v6[1];
        char v6 = v3;
        double v9 = *(double *)(v5 + 8 * v7);
        if (v9 > *(double *)(v5 + 8 * v8))
        {
          uint64_t v10 = v4;
          while (1)
          {
            *(int *)((char *)result + v10 + 4) = v8;
            if (!v10) {
              break;
            }
            uint64_t v8 = *(int *)((char *)result + v10 - 4);
            v10 -= 4;
            if (v9 <= *(double *)(v5 + 8 * v8))
            {
              double v11 = (int *)((char *)result + v10 + 4);
              goto LABEL_10;
            }
          }
          double v11 = result;
LABEL_10:
          *double v11 = v7;
        }
        long double v3 = v6 + 1;
        v4 += 4;
      }
      while (v6 + 1 != a2);
    }
  }
  return result;
}

int *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,boost::math::detail::sort_functor<long double> &,int *>(int *result, int *a2, uint64_t *a3)
{
  if (result != a2)
  {
    long double v3 = result + 1;
    if (result + 1 != a2)
    {
      uint64_t v4 = *a3;
      do
      {
        uint64_t v6 = *result;
        uint64_t v5 = result[1];
        double result = v3;
        double v7 = *(double *)(v4 + 8 * v5);
        if (v7 > *(double *)(v4 + 8 * v6))
        {
          do
          {
            *long double v3 = v6;
            uint64_t v6 = *(v3 - 2);
            --v3;
          }
          while (v7 > *(double *)(v4 + 8 * v6));
          *long double v3 = v5;
        }
        long double v3 = result + 1;
      }
      while (result + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,boost::math::detail::sort_functor<long double> &,int *>(int *a1, int *a2, int *a3, uint64_t *a4)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  uint64_t v6 = *a4;
  double v7 = *(double *)(*a4 + 8 * v4);
  double v8 = *(double *)(*a4 + 8 * v5);
  uint64_t v9 = *a3;
  double v10 = *(double *)(*a4 + 8 * v9);
  if (v7 > v8)
  {
    if (v10 > v7)
    {
      *a1 = v9;
      *a3 = v5;
      return 1;
    }
    *a1 = v4;
    *a2 = v5;
    uint64_t v13 = *a3;
    if (*(double *)(v6 + 8 * v13) <= v8) {
      return 1;
    }
    *a2 = v13;
    *a3 = v5;
    return 2;
  }
  if (v10 > v7)
  {
    *a2 = v9;
    *a3 = v4;
    uint64_t v11 = *a2;
    uint64_t v12 = *a1;
    if (*(double *)(v6 + 8 * v11) <= *(double *)(v6 + 8 * v12)) {
      return 1;
    }
    *a1 = v11;
    *a2 = v12;
    return 2;
  }
  return 0;
}

int *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,int *,boost::math::detail::sort_functor<long double> &>(int *a1, int *a2, uint64_t *a3)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a3;
  double v5 = *(double *)(*a3 + 8 * v3);
  if (v5 <= *(double *)(*a3 + 8 * *(a2 - 1)))
  {
    double v8 = a1 + 1;
    do
    {
      uint64_t v6 = v8;
      if (v8 >= a2) {
        break;
      }
      ++v8;
    }
    while (v5 <= *(double *)(v4 + 8 * *v6));
  }
  else
  {
    uint64_t v6 = a1;
    do
    {
      uint64_t v7 = v6[1];
      ++v6;
    }
    while (v5 <= *(double *)(v4 + 8 * v7));
  }
  if (v6 < a2)
  {
    do
      uint64_t v9 = *--a2;
    while (v5 > *(double *)(v4 + 8 * v9));
  }
  if (v6 < a2)
  {
    int v10 = *v6;
    int v11 = *a2;
    do
    {
      *uint64_t v6 = v11;
      *a2 = v10;
      do
      {
        uint64_t v12 = v6[1];
        ++v6;
        int v10 = v12;
      }
      while (v5 <= *(double *)(v4 + 8 * v12));
      do
      {
        uint64_t v13 = *--a2;
        int v11 = v13;
      }
      while (v5 > *(double *)(v4 + 8 * v13));
    }
    while (v6 < a2);
  }
  if (v6 - 1 != a1) {
    *a1 = *(v6 - 1);
  }
  *(v6 - 1) = v3;
  return v6;
}

int *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,int *,boost::math::detail::sort_functor<long double> &>(int *a1, int *a2, uint64_t *a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = *a1;
  uint64_t v5 = *a3;
  double v6 = *(double *)(*a3 + 8 * v4);
  do
    uint64_t v7 = a1[++v3];
  while (*(double *)(v5 + 8 * v7) > v6);
  double v8 = &a1[v3];
  uint64_t v9 = &a1[v3 - 1];
  if (v3 == 1)
  {
    do
    {
      if (v8 >= a2) {
        break;
      }
      uint64_t v11 = *--a2;
    }
    while (*(double *)(v5 + 8 * v11) <= v6);
  }
  else
  {
    do
      uint64_t v10 = *--a2;
    while (*(double *)(v5 + 8 * v10) <= v6);
  }
  if (v8 < a2)
  {
    int v12 = *a2;
    int v13 = v7;
    uint64_t v14 = v8;
    unint64_t v15 = a2;
    do
    {
      *uint64_t v14 = v12;
      *unint64_t v15 = v13;
      do
      {
        uint64_t v16 = v14[1];
        ++v14;
        int v13 = v16;
      }
      while (*(double *)(v5 + 8 * v16) > v6);
      do
      {
        uint64_t v17 = *--v15;
        int v12 = v17;
      }
      while (*(double *)(v5 + 8 * v17) <= v6);
    }
    while (v14 < v15);
    uint64_t v9 = v14 - 1;
  }
  if (v9 != a1) {
    *a1 = *v9;
  }
  *uint64_t v9 = v4;
  return v9;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,boost::math::detail::sort_functor<long double> &,int *>(int *a1, int *a2, uint64_t *a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = *(a2 - 1);
      uint64_t v9 = *a1;
      if (*(double *)(*a3 + 8 * v8) > *(double *)(*a3 + 8 * v9))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,boost::math::detail::sort_functor<long double> &,int *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,boost::math::detail::sort_functor<long double> &,int *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,boost::math::detail::sort_functor<long double> &,int *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      uint64_t v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,boost::math::detail::sort_functor<long double> &,int *>(a1, a1 + 1, a1 + 2, a3);
      uint64_t v11 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v12 = 0;
      uint64_t v13 = *a3;
      uint64_t v14 = 12;
      break;
  }
  while (1)
  {
    uint64_t v15 = *v11;
    uint64_t v16 = *v10;
    double v17 = *(double *)(v13 + 8 * v15);
    if (v17 > *(double *)(v13 + 8 * v16))
    {
      uint64_t v18 = v14;
      while (1)
      {
        *(int *)((char *)a1 + v18) = v16;
        uint64_t v19 = v18 - 4;
        if (v18 == 4) {
          break;
        }
        uint64_t v16 = *(int *)((char *)a1 + v18 - 8);
        v18 -= 4;
        if (v17 <= *(double *)(v13 + 8 * v16))
        {
          char v20 = (int *)((char *)a1 + v19);
          goto LABEL_12;
        }
      }
      char v20 = a1;
LABEL_12:
      *char v20 = v15;
      if (++v12 == 8) {
        return v11 + 1 == a2;
      }
    }
    uint64_t v10 = v11;
    v14 += 4;
    if (++v11 == a2) {
      return 1;
    }
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,boost::math::detail::sort_functor<long double> &,int *>(int *a1, int *a2, int *a3, int *a4, uint64_t *a5)
{
  uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,boost::math::detail::sort_functor<long double> &,int *>(a1, a2, a3, a5);
  uint64_t v11 = *a4;
  uint64_t v12 = *a3;
  uint64_t v13 = *a5;
  if (*(double *)(*a5 + 8 * v11) > *(double *)(*a5 + 8 * v12))
  {
    *a3 = v11;
    *a4 = v12;
    uint64_t v14 = *a3;
    uint64_t v15 = *a2;
    if (*(double *)(v13 + 8 * v14) > *(double *)(v13 + 8 * v15))
    {
      *a2 = v14;
      *a3 = v15;
      uint64_t v16 = *a2;
      uint64_t v17 = *a1;
      if (*(double *)(v13 + 8 * v16) > *(double *)(v13 + 8 * v17))
      {
        *a1 = v16;
        *a2 = v17;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,boost::math::detail::sort_functor<long double> &,int *>(int *a1, int *a2, int *a3, int *a4, int *a5, uint64_t *a6)
{
  uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,boost::math::detail::sort_functor<long double> &,int *>(a1, a2, a3, a4, a6);
  uint64_t v13 = *a5;
  uint64_t v14 = *a4;
  uint64_t v15 = *a6;
  if (*(double *)(*a6 + 8 * v13) > *(double *)(*a6 + 8 * v14))
  {
    *a4 = v13;
    *a5 = v14;
    uint64_t v16 = *a4;
    uint64_t v17 = *a3;
    if (*(double *)(v15 + 8 * v16) > *(double *)(v15 + 8 * v17))
    {
      *a3 = v16;
      *a4 = v17;
      uint64_t v18 = *a3;
      uint64_t v19 = *a2;
      if (*(double *)(v15 + 8 * v18) > *(double *)(v15 + 8 * v19))
      {
        *a2 = v18;
        *a3 = v19;
        uint64_t v20 = *a2;
        uint64_t v21 = *a1;
        if (*(double *)(v15 + 8 * v20) > *(double *)(v15 + 8 * v21))
        {
          *a1 = v20;
          *a2 = v21;
        }
      }
    }
  }
  return result;
}

int *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,boost::math::detail::sort_functor<long double> &,int *,int *>(int *a1, int *a2, int *a3, uint64_t *a4)
{
  if (a1 != a2)
  {
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 5)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,boost::math::detail::sort_functor<long double> &,int *>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = a2;
    if (a2 != a3)
    {
      uint64_t v14 = a2;
      do
      {
        uint64_t v15 = *v14;
        uint64_t v16 = *a1;
        if (*(double *)(*a4 + 8 * v15) > *(double *)(*a4 + 8 * v16))
        {
          *uint64_t v14 = v16;
          *a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,boost::math::detail::sort_functor<long double> &,int *>((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 5)
    {
      uint64_t v17 = (unint64_t)v8 >> 2;
      uint64_t v18 = a2 - 1;
      do
      {
        int v19 = *a1;
        uint64_t v20 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,boost::math::detail::sort_functor<long double> &,int *>(a1, a4, v17);
        if (v18 == v20)
        {
          *uint64_t v20 = v19;
        }
        else
        {
          *uint64_t v20 = *v18;
          *uint64_t v18 = v19;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,boost::math::detail::sort_functor<long double> &,int *>((uint64_t)a1, (uint64_t)(v20 + 1), a4, v20 + 1 - a1);
        }
        --v18;
      }
      while (v17-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,boost::math::detail::sort_functor<long double> &,int *>(uint64_t result, uint64_t *a2, uint64_t a3, int *a4)
{
  if (a3 >= 2)
  {
    int64_t v4 = (unint64_t)(a3 - 2) >> 1;
    if (v4 >= ((uint64_t)a4 - result) >> 2)
    {
      uint64_t v5 = ((uint64_t)a4 - result) >> 1;
      uint64_t v6 = v5 + 1;
      uint64_t v7 = (int *)(result + 4 * (v5 + 1));
      uint64_t v8 = v5 + 2;
      uint64_t v9 = *a2;
      if (v8 < a3 && *(double *)(v9 + 8 * *v7) > *(double *)(v9 + 8 * v7[1]))
      {
        ++v7;
        uint64_t v6 = v8;
      }
      uint64_t v10 = *v7;
      uint64_t v11 = *a4;
      double v12 = *(double *)(v9 + 8 * v11);
      if (*(double *)(v9 + 8 * v10) <= v12)
      {
        do
        {
          uint64_t v13 = v7;
          *a4 = v10;
          if (v4 < v6) {
            break;
          }
          uint64_t v14 = 2 * v6;
          uint64_t v6 = (2 * v6) | 1;
          uint64_t v7 = (int *)(result + 4 * v6);
          uint64_t v15 = v14 + 2;
          if (v15 < a3 && *(double *)(v9 + 8 * *v7) > *(double *)(v9 + 8 * v7[1]))
          {
            ++v7;
            uint64_t v6 = v15;
          }
          uint64_t v10 = *v7;
          a4 = v13;
        }
        while (*(double *)(v9 + 8 * v10) <= v12);
        *uint64_t v13 = v11;
      }
    }
  }
  return result;
}

int *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,boost::math::detail::sort_functor<long double> &,int *>(int *result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = a3 - 2;
  if (a3 < 2) {
    uint64_t v4 = a3 - 1;
  }
  uint64_t v5 = v4 >> 1;
  uint64_t v6 = *a2;
  do
  {
    uint64_t v7 = result;
    result += v3 + 1;
    uint64_t v8 = 2 * v3;
    uint64_t v3 = (2 * v3) | 1;
    uint64_t v9 = v8 + 2;
    if (v9 < a3 && *(double *)(v6 + 8 * *result) > *(double *)(v6 + 8 * result[1]))
    {
      ++result;
      uint64_t v3 = v9;
    }
    *uint64_t v7 = *result;
  }
  while (v3 <= v5);
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,boost::math::detail::sort_functor<long double> &,int *>(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    unint64_t v4 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v5 = (int *)(result + 4 * v4);
    uint64_t v6 = *v5;
    uint64_t v9 = *(int *)(a2 - 4);
    uint64_t v7 = (_DWORD *)(a2 - 4);
    int v8 = v9;
    uint64_t v10 = *a3;
    double v11 = *(double *)(*a3 + 8 * v9);
    if (*(double *)(*a3 + 8 * v6) > v11)
    {
      do
      {
        double v12 = v5;
        *uint64_t v7 = v6;
        if (!v4) {
          break;
        }
        unint64_t v4 = (v4 - 1) >> 1;
        uint64_t v5 = (int *)(result + 4 * v4);
        uint64_t v6 = *v5;
        uint64_t v7 = v12;
      }
      while (*(double *)(v10 + 8 * v6) > v11);
      *double v12 = v8;
    }
  }
  return result;
}

uint64_t CoreChartTrendDistributionSeries.init(dataViewModel:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_1C2950CA8(a1, a2, type metadata accessor for CoreChartTrendViewModel);
  int v4 = *(unsigned __int8 *)(a1 + 16);
  sub_1C2951E18(a1, type metadata accessor for CoreChartTrendViewModel);
  uint64_t v5 = a2 + *(int *)(type metadata accessor for CoreChartTrendDistributionSeries() + 20);
  switch(v4)
  {
    case 2:
      uint64_t v6 = (unsigned int *)MEMORY[0x1E4F27C10];
      break;
    case 5:
      uint64_t v6 = (unsigned int *)MEMORY[0x1E4F27BC0];
      break;
    default:
      uint64_t v6 = (unsigned int *)MEMORY[0x1E4F27BF0];
      break;
  }
  uint64_t v7 = *v6;
  uint64_t v8 = sub_1C2A9C858();
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 104);
  return v9(v5, v7, v8);
}

uint64_t type metadata accessor for CoreChartTrendDistributionSeries()
{
  uint64_t result = qword_1EBB8E6F8;
  if (!qword_1EBB8E6F8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t CoreChartTrendDistributionSeries.distributionSeries.getter()
{
  uint64_t v1 = type metadata accessor for CoreChartTrendDistributionSeries();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(void *)(v2 + 64);
  MEMORY[0x1F4188790](v1 - 8);
  v7[1] = *(void *)(v0 + *(int *)(type metadata accessor for CoreChartTrendViewModel(0) + 36));
  sub_1C2950CA8(v0, (uint64_t)v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for CoreChartTrendDistributionSeries);
  unint64_t v4 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v5 = swift_allocObject();
  sub_1C2950F24((uint64_t)v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v5 + v4);
  sub_1C2953D74(0, &qword_1EA31DCB8, type metadata accessor for CoreChartTrendDataElement, MEMORY[0x1E4FBB320]);
  sub_1C2A9C6E8();
  sub_1C2953D74(0, &qword_1EA31DCC0, (uint64_t (*)(uint64_t))sub_1C2951008, MEMORY[0x1E4FBB718]);
  sub_1C2951154();
  sub_1C29511DC();
  sub_1C2942D34(&qword_1EA31DCE8, (void (*)(uint64_t))type metadata accessor for CoreChartTrendDataElement);
  swift_bridgeObjectRetain();
  return sub_1C2A9DB88();
}

uint64_t sub_1C2950648@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v43 = a2;
  uint64_t v49 = a3;
  sub_1C2953D14();
  uint64_t v5 = MEMORY[0x1F4188790](v4 - 8);
  uint64_t v7 = (char *)v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  long double v47 = (char *)v39 - v8;
  sub_1C2953D74(0, &qword_1EBB92528, MEMORY[0x1E4F27CA0], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v9 - 8);
  double v11 = (char *)v39 - v10;
  sub_1C2953DD8();
  MEMORY[0x1F4188790](v12 - 8);
  double v48 = (char *)v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_1C2A9D338();
  uint64_t v45 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C29510D0();
  uint64_t v18 = v17;
  uint64_t v19 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  double v44 = (char *)v39 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C2951008();
  uint64_t v22 = v21;
  uint64_t v50 = *(void *)(v21 - 8);
  MEMORY[0x1F4188790](v21);
  double v46 = (char *)v39 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for CoreChartTrendDataElement(0);
  uint64_t v25 = (uint64_t *)(a1 + *(int *)(v24 + 24));
  if (v25[1])
  {
    uint64_t v26 = v49;
    uint64_t v27 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v50 + 56);
    return v27(v26, 1, 1, v22);
  }
  else
  {
    uint64_t v29 = v24;
    uint64_t v40 = v19;
    uint64_t v41 = v18;
    uint64_t v42 = v22;
    uint64_t v30 = *v25;
    sub_1C2A9D708();
    v39[1] = v7;
    type metadata accessor for CoreChartTrendDistributionSeries();
    uint64_t v31 = sub_1C2A9C868();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v11, 1, 1, v31);
    sub_1C2A9D158();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1C2953E38((uint64_t)v11);
    sub_1C2A9D708();
    v54[0] = *(void *)(a1 + *(int *)(v29 + 20));
    sub_1C2A9D168();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1C2A9D708();
    v54[0] = v30;
    sub_1C2A9D168();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1C2A9C6E8();
    sub_1C2A9D318();
    sub_1C2A9D538();
    uint64_t v32 = MEMORY[0x1E4F19498];
    double v33 = v44;
    sub_1C2A9D0D8();
    sub_1C2953EC4((uint64_t)v54);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v16, v14);
    double v34 = v33;
    if (qword_1EBB8E3E8 != -1) {
      swift_once();
    }
    uint64_t v52 = v32;
    uint64_t v53 = qword_1EBB9EF68;
    uint64_t v51 = v14;
    swift_getOpaqueTypeConformance2();
    double v35 = v46;
    uint64_t v36 = v41;
    sub_1C2A9D088();
    (*(void (**)(char *, uint64_t))(v40 + 8))(v34, v36);
    uint64_t v37 = v49;
    uint64_t v38 = v42;
    (*(void (**)(uint64_t, char *, uint64_t))(v50 + 32))(v49, v35, v42);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v50 + 56))(v37, 0, 1, v38);
  }
}

uint64_t sub_1C2950CA8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1C2950D10()
{
  uint64_t v1 = type metadata accessor for CoreChartTrendDistributionSeries();
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v13 = *(void *)(*(void *)(v1 - 8) + 64);

  uint64_t v4 = type metadata accessor for CoreChartTrendViewModel(0);
  uint64_t v5 = v0 + v3 + *(int *)(v4 + 28);
  uint64_t v6 = sub_1C2A9C398();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
  v7(v5, v6);
  uint64_t v8 = type metadata accessor for CoreChartTrendLineViewModel(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = v0 + v3 + *(int *)(v4 + 32);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v9, 1, v8))
  {
    v7(v9, v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  uint64_t v10 = v0 + v3 + *(int *)(v1 + 20);
  uint64_t v11 = sub_1C2A9C858();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  return MEMORY[0x1F4186498](v0, v3 + v13, v2 | 7);
}

uint64_t sub_1C2950F24(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CoreChartTrendDistributionSeries();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C2950F88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for CoreChartTrendDistributionSeries() - 8);
  uint64_t v6 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  return sub_1C2950648(a1, v6, a2);
}

void sub_1C2951008()
{
  if (!qword_1EA31DCC8)
  {
    sub_1C29510D0();
    sub_1C2A9D338();
    swift_getOpaqueTypeConformance2();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_1EA31DCC8);
    }
  }
}

void sub_1C29510D0()
{
  if (!qword_1EA31DCD0)
  {
    sub_1C2A9D338();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_1EA31DCD0);
    }
  }
}

unint64_t sub_1C2951154()
{
  unint64_t result = qword_1EA31DCD8;
  if (!qword_1EA31DCD8)
  {
    sub_1C2953D74(255, &qword_1EA31DCB8, type metadata accessor for CoreChartTrendDataElement, MEMORY[0x1E4FBB320]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA31DCD8);
  }
  return result;
}

unint64_t sub_1C29511DC()
{
  unint64_t result = qword_1EA31DCE0;
  if (!qword_1EA31DCE0)
  {
    sub_1C2953D74(255, &qword_1EA31DCC0, (uint64_t (*)(uint64_t))sub_1C2951008, MEMORY[0x1E4FBB718]);
    sub_1C29510D0();
    sub_1C2A9D338();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA31DCE0);
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for CoreChartTrendDistributionSeries(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v29 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v29 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    uint64_t v6 = (void *)a2[1];
    *(void *)(a1 + 8) = v6;
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    uint64_t v7 = type metadata accessor for CoreChartTrendViewModel(0);
    uint64_t v8 = *(int *)(v7 + 28);
    uint64_t v9 = (char *)v4 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = sub_1C2A9C398();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    id v13 = v6;
    uint64_t v45 = v12;
    v12(v9, v10, v11);
    uint64_t v14 = (int *)type metadata accessor for CoreChartTrendLineViewModel(0);
    *(void *)&v9[v14[5]] = *(void *)&v10[v14[5]];
    uint64_t v15 = v14[6];
    uint64_t v16 = &v9[v15];
    uint64_t v17 = &v10[v15];
    uint64_t v18 = *((void *)v17 + 1);
    *(void *)uint64_t v16 = *(void *)v17;
    *((void *)v16 + 1) = v18;
    uint64_t v19 = v14[7];
    uint64_t v20 = &v9[v19];
    uint64_t v21 = &v10[v19];
    uint64_t v22 = *((void *)v21 + 1);
    *(void *)uint64_t v20 = *(void *)v21;
    *((void *)v20 + 1) = v22;
    uint64_t v46 = v7;
    uint64_t v23 = *(int *)(v7 + 32);
    uint64_t v24 = (char *)v4 + v23;
    uint64_t v25 = (char *)a2 + v23;
    uint64_t v26 = *((void *)v14 - 1);
    uint64_t v27 = *(unsigned int (**)(char *, uint64_t, int *))(v26 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v27(v25, 1, v14))
    {
      sub_1C2953D74(0, &qword_1EBB91398, type metadata accessor for CoreChartTrendLineViewModel, MEMORY[0x1E4FBB718]);
      memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
    }
    else
    {
      v45(v24, v25, v11);
      *(void *)&v24[v14[5]] = *(void *)&v25[v14[5]];
      uint64_t v30 = v14[6];
      uint64_t v31 = &v24[v30];
      uint64_t v32 = &v25[v30];
      uint64_t v33 = *((void *)v32 + 1);
      *(void *)uint64_t v31 = *(void *)v32;
      *((void *)v31 + 1) = v33;
      uint64_t v34 = v14[7];
      double v35 = &v24[v34];
      uint64_t v36 = &v25[v34];
      uint64_t v37 = *((void *)v36 + 1);
      *(void *)double v35 = *(void *)v36;
      *((void *)v35 + 1) = v37;
      uint64_t v38 = *(void (**)(char *, void, uint64_t, int *))(v26 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v38(v24, 0, 1, v14);
    }
    *(void *)((char *)v4 + *(int *)(v46 + 36)) = *(uint64_t *)((char *)a2 + *(int *)(v46 + 36));
    uint64_t v39 = *(int *)(a3 + 20);
    uint64_t v40 = (char *)v4 + v39;
    uint64_t v41 = (uint64_t)a2 + v39;
    uint64_t v42 = sub_1C2A9C858();
    uint64_t v43 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v42 - 8) + 16);
    swift_bridgeObjectRetain();
    v43(v40, v41, v42);
  }
  return v4;
}

uint64_t destroy for CoreChartTrendDistributionSeries(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CoreChartTrendViewModel(0);
  uint64_t v5 = a1 + *(int *)(v4 + 28);
  uint64_t v6 = sub_1C2A9C398();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
  v7(v5, v6);
  uint64_t v8 = type metadata accessor for CoreChartTrendLineViewModel(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = a1 + *(int *)(v4 + 32);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v9, 1, v8))
  {
    v7(v9, v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  uint64_t v10 = a1 + *(int *)(a2 + 20);
  uint64_t v11 = sub_1C2A9C858();
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8);
  return v12(v10, v11);
}

uint64_t initializeWithCopy for CoreChartTrendDistributionSeries(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v5 = *(void **)(a2 + 8);
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = type metadata accessor for CoreChartTrendViewModel(0);
  uint64_t v7 = *(int *)(v6 + 28);
  uint64_t v8 = (char *)(a1 + v7);
  uint64_t v9 = (char *)(a2 + v7);
  uint64_t v10 = sub_1C2A9C398();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  id v12 = v5;
  uint64_t v43 = v11;
  v11(v8, v9, v10);
  id v13 = (int *)type metadata accessor for CoreChartTrendLineViewModel(0);
  *(void *)&v8[v13[5]] = *(void *)&v9[v13[5]];
  uint64_t v14 = v13[6];
  uint64_t v15 = &v8[v14];
  uint64_t v16 = &v9[v14];
  uint64_t v17 = *((void *)v16 + 1);
  *(void *)uint64_t v15 = *(void *)v16;
  *((void *)v15 + 1) = v17;
  uint64_t v18 = v13[7];
  uint64_t v19 = &v8[v18];
  uint64_t v20 = &v9[v18];
  uint64_t v21 = *((void *)v20 + 1);
  *(void *)uint64_t v19 = *(void *)v20;
  *((void *)v19 + 1) = v21;
  uint64_t v44 = v6;
  uint64_t v22 = *(int *)(v6 + 32);
  uint64_t v23 = (char *)(a1 + v22);
  uint64_t v24 = (char *)(a2 + v22);
  uint64_t v25 = *((void *)v13 - 1);
  uint64_t v26 = *(unsigned int (**)(char *, uint64_t, int *))(v25 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v26(v24, 1, v13))
  {
    sub_1C2953D74(0, &qword_1EBB91398, type metadata accessor for CoreChartTrendLineViewModel, MEMORY[0x1E4FBB718]);
    memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64));
  }
  else
  {
    v43(v23, v24, v10);
    *(void *)&v23[v13[5]] = *(void *)&v24[v13[5]];
    uint64_t v28 = v13[6];
    uint64_t v29 = &v23[v28];
    uint64_t v30 = &v24[v28];
    uint64_t v31 = *((void *)v30 + 1);
    *(void *)uint64_t v29 = *(void *)v30;
    *((void *)v29 + 1) = v31;
    uint64_t v32 = v13[7];
    uint64_t v33 = &v23[v32];
    uint64_t v34 = &v24[v32];
    uint64_t v35 = *((void *)v34 + 1);
    *(void *)uint64_t v33 = *(void *)v34;
    *((void *)v33 + 1) = v35;
    uint64_t v36 = *(void (**)(char *, void, uint64_t, int *))(v25 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v36(v23, 0, 1, v13);
  }
  *(void *)(a1 + *(int *)(v44 + 36)) = *(void *)(a2 + *(int *)(v44 + 36));
  uint64_t v37 = *(int *)(a3 + 20);
  uint64_t v38 = a1 + v37;
  uint64_t v39 = a2 + v37;
  uint64_t v40 = sub_1C2A9C858();
  uint64_t v41 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 16);
  swift_bridgeObjectRetain();
  v41(v38, v39, v40);
  return a1;
}

uint64_t assignWithCopy for CoreChartTrendDistributionSeries(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v5 = *(void **)(a2 + 8);
  uint64_t v6 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v5;
  id v7 = v5;

  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v8 = type metadata accessor for CoreChartTrendViewModel(0);
  uint64_t v9 = *(int *)(v8 + 28);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = sub_1C2A9C398();
  uint64_t v46 = *(void *)(v12 - 8);
  long double v47 = *(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 24);
  v47(v10, v11, v12);
  id v13 = (int *)type metadata accessor for CoreChartTrendLineViewModel(0);
  *(void *)(v10 + v13[5]) = *(void *)(v11 + v13[5]);
  uint64_t v14 = v13[6];
  uint64_t v15 = (void *)(v10 + v14);
  uint64_t v16 = (void *)(v11 + v14);
  *uint64_t v15 = *v16;
  v15[1] = v16[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v17 = v13[7];
  uint64_t v18 = (void *)(v10 + v17);
  uint64_t v19 = (void *)(v11 + v17);
  *uint64_t v18 = *v19;
  v18[1] = v19[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v48 = v8;
  uint64_t v20 = *(int *)(v8 + 32);
  uint64_t v21 = (char *)(a1 + v20);
  uint64_t v50 = a2;
  uint64_t v22 = (char *)(a2 + v20);
  uint64_t v23 = *((void *)v13 - 1);
  uint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v23 + 48);
  int v25 = v24(a1 + v20, 1, v13);
  int v26 = v24((uint64_t)v22, 1, v13);
  if (!v25)
  {
    if (!v26)
    {
      v47((uint64_t)v21, (uint64_t)v22, v12);
      *(void *)&v21[v13[5]] = *(void *)&v22[v13[5]];
      uint64_t v40 = v13[6];
      uint64_t v41 = &v21[v40];
      uint64_t v42 = &v22[v40];
      *(void *)uint64_t v41 = *(void *)v42;
      *((void *)v41 + 1) = *((void *)v42 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v43 = v13[7];
      uint64_t v44 = &v21[v43];
      uint64_t v45 = &v22[v43];
      *(void *)uint64_t v44 = *(void *)v45;
      *((void *)v44 + 1) = *((void *)v45 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
    sub_1C2951E18((uint64_t)v21, type metadata accessor for CoreChartTrendLineViewModel);
    goto LABEL_6;
  }
  if (v26)
  {
LABEL_6:
    sub_1C2953D74(0, &qword_1EBB91398, type metadata accessor for CoreChartTrendLineViewModel, MEMORY[0x1E4FBB718]);
    memcpy(v21, v22, *(void *)(*(void *)(v34 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v21, v22, v12);
  *(void *)&v21[v13[5]] = *(void *)&v22[v13[5]];
  uint64_t v27 = v13[6];
  uint64_t v28 = &v21[v27];
  uint64_t v29 = &v22[v27];
  *(void *)uint64_t v28 = *(void *)v29;
  *((void *)v28 + 1) = *((void *)v29 + 1);
  uint64_t v30 = v13[7];
  uint64_t v31 = &v21[v30];
  uint64_t v32 = &v22[v30];
  *(void *)uint64_t v31 = *(void *)v32;
  *((void *)v31 + 1) = *((void *)v32 + 1);
  uint64_t v33 = *(void (**)(char *, void, uint64_t, int *))(v23 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v33(v21, 0, 1, v13);
LABEL_7:
  *(void *)(a1 + *(int *)(v48 + 36)) = *(void *)(v50 + *(int *)(v48 + 36));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v35 = *(int *)(a3 + 20);
  uint64_t v36 = a1 + v35;
  uint64_t v37 = v50 + v35;
  uint64_t v38 = sub_1C2A9C858();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 24))(v36, v37, v38);
  return a1;
}

uint64_t sub_1C2951E18(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t initializeWithTake for CoreChartTrendDistributionSeries(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v5 = (int *)type metadata accessor for CoreChartTrendViewModel(0);
  uint64_t v6 = v5[7];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = sub_1C2A9C398();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  uint64_t v11 = (int *)type metadata accessor for CoreChartTrendLineViewModel(0);
  *(void *)(v7 + v11[5]) = *(void *)(v8 + v11[5]);
  *(_OWORD *)(v7 + v11[6]) = *(_OWORD *)(v8 + v11[6]);
  *(_OWORD *)(v7 + v11[7]) = *(_OWORD *)(v8 + v11[7]);
  uint64_t v12 = v5[8];
  id v13 = (char *)(a1 + v12);
  uint64_t v14 = (char *)(a2 + v12);
  uint64_t v15 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(uint64_t, uint64_t, int *))(v15 + 48))(a2 + v12, 1, v11))
  {
    sub_1C2953D74(0, &qword_1EBB91398, type metadata accessor for CoreChartTrendLineViewModel, MEMORY[0x1E4FBB718]);
    memcpy(v13, v14, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    v10((uint64_t)v13, (uint64_t)v14, v9);
    *(void *)&v13[v11[5]] = *(void *)&v14[v11[5]];
    *(_OWORD *)&v13[v11[6]] = *(_OWORD *)&v14[v11[6]];
    *(_OWORD *)&v13[v11[7]] = *(_OWORD *)&v14[v11[7]];
    (*(void (**)(char *, void, uint64_t, int *))(v15 + 56))(v13, 0, 1, v11);
  }
  *(void *)(a1 + v5[9]) = *(void *)(a2 + v5[9]);
  uint64_t v17 = *(int *)(a3 + 20);
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  uint64_t v20 = sub_1C2A9C858();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 32))(v18, v19, v20);
  return a1;
}

uint64_t assignWithTake for CoreChartTrendDistributionSeries(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v5 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);

  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = type metadata accessor for CoreChartTrendViewModel(0);
  uint64_t v7 = *(int *)(v6 + 28);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v46 = sub_1C2A9C398();
  uint64_t v44 = *(void *)(v46 - 8);
  uint64_t v45 = *(void (**)(uint64_t, uint64_t))(v44 + 40);
  v45(v8, v9);
  uint64_t v10 = (int *)type metadata accessor for CoreChartTrendLineViewModel(0);
  *(void *)(v8 + v10[5]) = *(void *)(v9 + v10[5]);
  uint64_t v11 = v10[6];
  uint64_t v12 = (void *)(v8 + v11);
  id v13 = (uint64_t *)(v9 + v11);
  uint64_t v15 = *v13;
  uint64_t v14 = v13[1];
  *uint64_t v12 = v15;
  v12[1] = v14;
  swift_bridgeObjectRelease();
  uint64_t v16 = v10[7];
  uint64_t v17 = (void *)(v8 + v16);
  uint64_t v18 = (uint64_t *)(v9 + v16);
  uint64_t v20 = *v18;
  uint64_t v19 = v18[1];
  *uint64_t v17 = v20;
  v17[1] = v19;
  swift_bridgeObjectRelease();
  uint64_t v47 = v6;
  uint64_t v21 = *(int *)(v6 + 32);
  uint64_t v22 = (char *)(a1 + v21);
  uint64_t v23 = (char *)(a2 + v21);
  uint64_t v24 = *((void *)v10 - 1);
  int v25 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v24 + 48);
  int v26 = v25(a1 + v21, 1, v10);
  int v27 = v25((uint64_t)v23, 1, v10);
  if (!v26)
  {
    if (!v27)
    {
      ((void (*)(char *, char *, uint64_t))v45)(v22, v23, v46);
      *(void *)&v22[v10[5]] = *(void *)&v23[v10[5]];
      uint64_t v34 = v10[6];
      uint64_t v35 = &v22[v34];
      uint64_t v36 = &v23[v34];
      uint64_t v38 = *(void *)v36;
      uint64_t v37 = *((void *)v36 + 1);
      *(void *)uint64_t v35 = v38;
      *((void *)v35 + 1) = v37;
      swift_bridgeObjectRelease();
      uint64_t v39 = v10[7];
      uint64_t v40 = &v22[v39];
      uint64_t v41 = &v23[v39];
      uint64_t v43 = *(void *)v41;
      uint64_t v42 = *((void *)v41 + 1);
      *(void *)uint64_t v40 = v43;
      *((void *)v40 + 1) = v42;
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
    sub_1C2951E18((uint64_t)v22, type metadata accessor for CoreChartTrendLineViewModel);
    goto LABEL_6;
  }
  if (v27)
  {
LABEL_6:
    sub_1C2953D74(0, &qword_1EBB91398, type metadata accessor for CoreChartTrendLineViewModel, MEMORY[0x1E4FBB718]);
    memcpy(v22, v23, *(void *)(*(void *)(v28 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v22, v23, v46);
  *(void *)&v22[v10[5]] = *(void *)&v23[v10[5]];
  *(_OWORD *)&v22[v10[6]] = *(_OWORD *)&v23[v10[6]];
  *(_OWORD *)&v22[v10[7]] = *(_OWORD *)&v23[v10[7]];
  (*(void (**)(char *, void, uint64_t, int *))(v24 + 56))(v22, 0, 1, v10);
LABEL_7:
  *(void *)(a1 + *(int *)(v47 + 36)) = *(void *)(a2 + *(int *)(v47 + 36));
  swift_bridgeObjectRelease();
  uint64_t v29 = *(int *)(a3 + 20);
  uint64_t v30 = a1 + v29;
  uint64_t v31 = a2 + v29;
  uint64_t v32 = sub_1C2A9C858();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 40))(v30, v31, v32);
  return a1;
}

uint64_t getEnumTagSinglePayload for CoreChartTrendDistributionSeries(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C295244C);
}

uint64_t sub_1C295244C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CoreChartTrendViewModel(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = sub_1C2A9C858();
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 20);
    return v11(v13, a2, v12);
  }
}

uint64_t storeEnumTagSinglePayload for CoreChartTrendDistributionSeries(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C2952558);
}

uint64_t sub_1C2952558(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for CoreChartTrendViewModel(0);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    uint64_t v12 = sub_1C2A9C858();
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 20);
    return v13(v15, a2, a2, v14);
  }
}

uint64_t sub_1C295265C()
{
  uint64_t result = type metadata accessor for CoreChartTrendViewModel(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = sub_1C2A9C858();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

unint64_t sub_1C2952728()
{
  unint64_t result = qword_1EA31DCF0;
  if (!qword_1EA31DCF0)
  {
    sub_1C2952798();
    sub_1C29511DC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA31DCF0);
  }
  return result;
}

void sub_1C2952798()
{
  if (!qword_1EA31DCF8)
  {
    sub_1C2953D74(255, &qword_1EA31DCB8, type metadata accessor for CoreChartTrendDataElement, MEMORY[0x1E4FBB320]);
    sub_1C2A9C6E8();
    sub_1C2953D74(255, &qword_1EA31DCC0, (uint64_t (*)(uint64_t))sub_1C2951008, MEMORY[0x1E4FBB718]);
    sub_1C2951154();
    sub_1C2942D34(&qword_1EA31DD00, MEMORY[0x1E4F27928]);
    unint64_t v0 = sub_1C2A9DB98();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EA31DCF8);
    }
  }
}

void type metadata accessor for HKCodableSummaryTrendTileViewModel_TrendDiagramStyle(uint64_t a1)
{
}

void type metadata accessor for HKFeatureAvailabilityContext(uint64_t a1)
{
}

void type metadata accessor for HKTimeScope(uint64_t a1)
{
}

void type metadata accessor for UIContentSizeCategory(uint64_t a1)
{
}

void type metadata accessor for HKAxisLabelType(uint64_t a1)
{
}

uint64_t sub_1C2952930(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1C2952950(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 48) = v3;
  return result;
}

void type metadata accessor for CGAffineTransform(uint64_t a1)
{
}

void type metadata accessor for QualityOfService(uint64_t a1)
{
}

void type metadata accessor for _HKQuantityDistributionStyle(uint64_t a1)
{
}

void type metadata accessor for HKQuantityTypeIdentifier(uint64_t a1)
{
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

void type metadata accessor for HKFeatureIdentifier(uint64_t a1)
{
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void type metadata accessor for CGContext(uint64_t a1)
{
}

uint64_t getEnumTagSinglePayload for LevelView.LayoutConfiguration(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for LevelView.LayoutConfiguration(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for DiagramConfiguration.Distribution(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for ParameterOverrides(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ParameterOverrides(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 32) = v3;
  return result;
}

void type metadata accessor for HKElectrocardiogramAlgorithmVersion(uint64_t a1)
{
}

void type metadata accessor for HKSleepDaySummaryQueryOptions(uint64_t a1)
{
}

uint64_t sub_1C2952B30@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v7 = *v5++;
      uint64_t v6 = v7;
      if ((v7 & ~v4) == 0) {
        uint64_t v6 = 0;
      }
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t sub_1C2952B88(uint64_t a1, uint64_t a2)
{
  return sub_1C2953788(a1, a2, MEMORY[0x1E4F27EB8]);
}

void *sub_1C2952BB8@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

void sub_1C2952BC8(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_1C2952BD4()
{
  return MEMORY[0x1F40E63F0](*v0);
}

uint64_t sub_1C2952BDC(uint64_t a1, uint64_t a2)
{
  int v6 = 0;
  char v7 = 1;
  uint64_t result = MEMORY[0x1C8763DE0](a1, &v6);
  char v4 = v7;
  int v5 = v6;
  if (v7) {
    int v5 = 0;
  }
  *(_DWORD *)a2 = v5;
  *(unsigned char *)(a2 + 4) = v4;
  return result;
}

uint64_t sub_1C2952C30(uint64_t a1, uint64_t a2)
{
  int v7 = 0;
  char v8 = 1;
  char v3 = MEMORY[0x1C8763DF0](a1, &v7);
  char v4 = v8;
  int v5 = v7;
  if (v8) {
    int v5 = 0;
  }
  *(_DWORD *)a2 = v5;
  *(unsigned char *)(a2 + 4) = v4;
  return v3 & 1;
}

void sub_1C2952C88(float *a1@<X8>)
{
  *a1 = MEMORY[0x1C8763E00]();
}

float sub_1C2952CB0@<S0>(_DWORD *a1@<X8>)
{
  float result = *v1;
  *a1 = *(_DWORD *)v1;
  return result;
}

uint64_t sub_1C2952CBC(uint64_t a1, id *a2)
{
  uint64_t result = sub_1C2A9DD08();
  *a2 = 0;
  return result;
}

uint64_t sub_1C2952D34(uint64_t a1, id *a2)
{
  char v3 = sub_1C2A9DD18();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_1C2952DB4@<X0>(uint64_t *a1@<X8>)
{
  sub_1C2A9DD28();
  uint64_t v2 = sub_1C2A9DCF8();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

void sub_1C2952DF8(void *a1@<X8>)
{
  *a1 = 0;
}

void *sub_1C2952E00@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

void *sub_1C2952E14@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

void *sub_1C2952E28@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_1C2952E54@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = *v2;
  *v2 |= *result;
  uint64_t v5 = v4 & v3;
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + 8) = v5 == 0;
  return result;
}

void *sub_1C2952E78(void *result)
{
  *v1 ^= *result;
  return result;
}

void *sub_1C2952E8C@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_1C2952EA0(void *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL sub_1C2952EB4(void *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL sub_1C2952EC8(void *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL sub_1C2952EDC()
{
  return *v0 == 0;
}

uint64_t sub_1C2952EEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1F4184B08](a1, a4, a2, a5, a3);
}

void *sub_1C2952F04(void *result)
{
  *v1 &= ~*result;
  return result;
}

_DWORD *sub_1C2952F18@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(unsigned char *)(a2 + 4) = 0;
  return result;
}

void sub_1C2952F28(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

void *sub_1C2952F34@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

BOOL sub_1C2952F48(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

void *sub_1C2952F78(void *result)
{
  *v1 |= *result;
  return result;
}

void *sub_1C2952F8C(void *result)
{
  *v1 &= *result;
  return result;
}

BOOL sub_1C2952FA4(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1C2952FB8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = sub_1C2953CDC(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t sub_1C2952FF8()
{
  return sub_1C2942D34(&qword_1EA31DDC0, type metadata accessor for HKSleepDaySummaryQueryOptions);
}

uint64_t sub_1C2953040()
{
  return sub_1C2942D34(&qword_1EA31DDC8, type metadata accessor for HKSleepDaySummaryQueryOptions);
}

uint64_t sub_1C2953088()
{
  return sub_1C2942D34(&qword_1EA31DDD0, type metadata accessor for HKSleepDaySummaryQueryOptions);
}

uint64_t sub_1C29530D0()
{
  return sub_1C2942D34(&qword_1EA31DDD8, type metadata accessor for HKSleepDaySummaryQueryOptions);
}

void *sub_1C2953118@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1C2953124()
{
  sub_1C2942D34((unint64_t *)&qword_1EBB91B90, type metadata accessor for Key);
  sub_1C2942D34(&qword_1EA31DEB8, type metadata accessor for Key);
  return sub_1C2A9E6C8();
}

uint64_t sub_1C29531E0()
{
  return sub_1C2942D34(&qword_1EA31DDE0, type metadata accessor for Key);
}

uint64_t sub_1C2953228()
{
  return sub_1C2942D34(&qword_1EA31DDE8, type metadata accessor for Key);
}

uint64_t sub_1C2953270()
{
  sub_1C2942D34(&qword_1EA31DE98, type metadata accessor for HKQuantityTypeIdentifier);
  sub_1C2942D34(&qword_1EA31DEA0, type metadata accessor for HKQuantityTypeIdentifier);
  return sub_1C2A9E6C8();
}

uint64_t sub_1C295332C()
{
  sub_1C2942D34(&qword_1EA31DE78, type metadata accessor for UIContentSizeCategory);
  sub_1C2942D34(&qword_1EA31DE80, type metadata accessor for UIContentSizeCategory);
  return sub_1C2A9E6C8();
}

uint64_t sub_1C29533E8()
{
  return sub_1C2A9E6C8();
}

uint64_t sub_1C29534A4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1C2A9DD28();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1C29534D0()
{
  sub_1C2942D34(&qword_1EA31DEA8, type metadata accessor for HKFeatureIdentifier);
  sub_1C2942D34(&qword_1EA31DEB0, type metadata accessor for HKFeatureIdentifier);
  return sub_1C2A9E6C8();
}

uint64_t sub_1C295358C()
{
  return sub_1C2942D34(&qword_1EA31DDF0, type metadata accessor for HKFeatureIdentifier);
}

uint64_t sub_1C29535D4()
{
  return sub_1C2942D34(&qword_1EA31DDF8, type metadata accessor for HKFeatureIdentifier);
}

uint64_t sub_1C295361C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_1C2A9DCF8();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1C2953664()
{
  sub_1C2942D34(&qword_1EA31DE68, type metadata accessor for HKFeatureAvailabilityContext);
  sub_1C2942D34(&qword_1EA31DE70, type metadata accessor for HKFeatureAvailabilityContext);
  return sub_1C2A9E6C8();
}

uint64_t sub_1C2953720()
{
  return MEMORY[0x1F41840D0](*v0);
}

uint64_t sub_1C2953728()
{
  return sub_1C2A9E9D8();
}

void sub_1C295375C()
{
}

uint64_t sub_1C2953770(uint64_t a1, uint64_t a2)
{
  return sub_1C2953788(a1, a2, MEMORY[0x1E4FBB198]);
}

uint64_t sub_1C2953788(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = sub_1C2A9DD28();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_1C29537CC()
{
  sub_1C2A9DD28();
  sub_1C2A9DD78();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C2953820()
{
  sub_1C2A9DD28();
  sub_1C2A9E9B8();
  sub_1C2A9DD78();
  uint64_t v0 = sub_1C2A9E9E8();
  swift_bridgeObjectRelease();
  return v0;
}

BOOL sub_1C2953894(float *a1, float *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1C29538A8()
{
  return sub_1C2942D34(&qword_1EA31DE00, type metadata accessor for HKFeatureIdentifier);
}

uint64_t sub_1C29538F0()
{
  return sub_1C2942D34(&qword_1EA31DE08, type metadata accessor for HKQuantityTypeIdentifier);
}

uint64_t sub_1C2953938()
{
  return sub_1C2942D34(&qword_1EA31DE10, type metadata accessor for HKQuantityTypeIdentifier);
}

uint64_t sub_1C2953980()
{
  return sub_1C2942D34(&qword_1EA31DE18, type metadata accessor for HKQuantityTypeIdentifier);
}

uint64_t sub_1C29539C8()
{
  return sub_1C2942D34(&qword_1EA31DE20, type metadata accessor for UILayoutPriority);
}

uint64_t sub_1C2953A10()
{
  return sub_1C2942D34(&qword_1EA31DE28, type metadata accessor for UILayoutPriority);
}

uint64_t sub_1C2953A58()
{
  return sub_1C2942D34(&qword_1EA31DE30, type metadata accessor for UILayoutPriority);
}

uint64_t sub_1C2953AA0()
{
  return sub_1C2942D34(&qword_1EA31DE38, type metadata accessor for UIContentSizeCategory);
}

uint64_t sub_1C2953AE8()
{
  return sub_1C2942D34(&qword_1EA31DE40, type metadata accessor for UIContentSizeCategory);
}

uint64_t sub_1C2953B30()
{
  return sub_1C2942D34(&qword_1EA31DE48, type metadata accessor for UIContentSizeCategory);
}

uint64_t sub_1C2953B78()
{
  return sub_1C2942D34(&qword_1EA31DE50, type metadata accessor for HKFeatureAvailabilityContext);
}

uint64_t sub_1C2953BC0()
{
  return sub_1C2942D34(&qword_1EA31DE58, type metadata accessor for HKFeatureAvailabilityContext);
}

uint64_t sub_1C2953C08()
{
  uint64_t v0 = sub_1C2A9DD28();
  uint64_t v2 = v1;
  if (v0 == sub_1C2A9DD28() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = sub_1C2A9E8D8();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_1C2953C94()
{
  return sub_1C2942D34(&qword_1EA31DE60, type metadata accessor for HKFeatureAvailabilityContext);
}

uint64_t sub_1C2953CDC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v4 = (uint64_t *)(a1 + 32);
  do
  {
    uint64_t v6 = *v4++;
    uint64_t v5 = v6;
    if ((v6 & ~result) == 0) {
      uint64_t v5 = 0;
    }
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

void sub_1C2953D14()
{
  if (!qword_1EA31DEC0)
  {
    unint64_t v0 = sub_1C2A9D178();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EA31DEC0);
    }
  }
}

void sub_1C2953D74(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_1C2953DD8()
{
  if (!qword_1EA31DEC8)
  {
    sub_1C2A9C6E8();
    unint64_t v0 = sub_1C2A9D178();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EA31DEC8);
    }
  }
}

uint64_t sub_1C2953E38(uint64_t a1)
{
  sub_1C2953D74(0, &qword_1EBB92528, MEMORY[0x1E4F27CA0], MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1C2953EC4(uint64_t a1)
{
  return a1;
}

void type metadata accessor for HKDisplayTypeIdentifier(uint64_t a1)
{
}

void type metadata accessor for CGColor(uint64_t a1)
{
}

BOOL static SupplementaryLabelConfiguration.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t SupplementaryLabelConfiguration.hash(into:)()
{
  return sub_1C2A9E9C8();
}

uint64_t SupplementaryLabelConfiguration.hashValue.getter()
{
  return sub_1C2A9E9E8();
}

BOOL sub_1C2953FE8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_1C2954000()
{
  return sub_1C2A9E9E8();
}

uint64_t sub_1C2954048()
{
  return sub_1C2A9E9C8();
}

uint64_t sub_1C2954074()
{
  return sub_1C2A9E9E8();
}

unint64_t sub_1C29540BC()
{
  unint64_t result = qword_1EA31DEE0;
  if (!qword_1EA31DEE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA31DEE0);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for SupplementaryLabelConfiguration(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C29541DCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *sub_1C2954208(unsigned char *result, char a2)
{
  *unint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for SupplementaryLabelConfiguration()
{
  return &type metadata for SupplementaryLabelConfiguration;
}

uint64_t SleepQueryConfiguration.dateRange.getter()
{
  return *v0;
}

uint64_t SleepQueryConfiguration.queryOptions.getter()
{
  return *(void *)(v0 + 8);
}

HealthVisualization::SleepQueryConfiguration __swiftcall SleepQueryConfiguration.init(dateRange:queryOptions:)(HealthVisualization::DateRange dateRange, __C::HKSleepDaySummaryQueryOptions queryOptions)
{
  *(unsigned char *)uint64_t v2 = dateRange;
  *(__C::HKSleepDaySummaryQueryOptions *)(v2 + 8) = queryOptions;
  result.queryOptions = queryOptions;
  result.dateRange = dateRange;
  return result;
}

BOOL static SleepQueryConfiguration.== infix(_:_:)(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t v2 = 0xEB00000000646569;
  uint64_t v3 = 0x6669636570736E75;
  uint64_t v4 = *a1;
  uint64_t v5 = *((void *)a1 + 1);
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = 0x6669636570736E75;
  unint64_t v8 = 0xEB00000000646569;
  switch(v4)
  {
    case 1:
      unint64_t v8 = 0xE700000000000000;
      uint64_t v7 = 0x656D69546C6C61;
      break;
    case 2:
      unint64_t v8 = 0xE500000000000000;
      uint64_t v7 = 0x7961646F74;
      break;
    case 3:
      uint64_t v7 = 0x57676E696C6C6F72;
      unint64_t v8 = 0xEB000000006B6565;
      break;
    case 4:
      uint64_t v7 = 0x4D676E696C6C6F72;
      unint64_t v8 = 0xEC00000068746E6FLL;
      break;
    case 5:
      uint64_t v7 = 0x48676E696C6C6F72;
      unint64_t v8 = 0xEF72616559666C61;
      break;
    default:
      break;
  }
  switch(*(unsigned char *)a2)
  {
    case 1:
      unint64_t v2 = 0xE700000000000000;
      if (v7 == 0x656D69546C6C61) {
        goto LABEL_16;
      }
      goto LABEL_19;
    case 2:
      unint64_t v2 = 0xE500000000000000;
      if (v7 != 0x7961646F74) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 3:
      unint64_t v2 = 0xEB000000006B6565;
      if (v7 != 0x57676E696C6C6F72) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 4:
      uint64_t v3 = 0x4D676E696C6C6F72;
      unint64_t v2 = 0xEC00000068746E6FLL;
      goto LABEL_15;
    case 5:
      unint64_t v2 = 0xEF72616559666C61;
      if (v7 != 0x48676E696C6C6F72) {
        goto LABEL_19;
      }
      goto LABEL_16;
    default:
LABEL_15:
      if (v7 != v3) {
        goto LABEL_19;
      }
LABEL_16:
      if (v8 == v2)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
LABEL_19:
        char v9 = sub_1C2A9E8D8();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        BOOL result = 0;
        if ((v9 & 1) == 0) {
          return result;
        }
      }
      return v5 == v6;
  }
}

uint64_t sub_1C29544B0(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xEB00000000646569;
  uint64_t v3 = 0x6669636570736E75;
  uint64_t v4 = a1;
  uint64_t v5 = 0x6669636570736E75;
  unint64_t v6 = 0xEB00000000646569;
  switch(v4)
  {
    case 1:
      unint64_t v6 = 0xE700000000000000;
      uint64_t v5 = 0x656D69546C6C61;
      break;
    case 2:
      unint64_t v6 = 0xE500000000000000;
      uint64_t v5 = 0x7961646F74;
      break;
    case 3:
      uint64_t v5 = 0x57676E696C6C6F72;
      unint64_t v6 = 0xEB000000006B6565;
      break;
    case 4:
      uint64_t v5 = 0x4D676E696C6C6F72;
      unint64_t v6 = 0xEC00000068746E6FLL;
      break;
    case 5:
      uint64_t v5 = 0x48676E696C6C6F72;
      unint64_t v6 = 0xEF72616559666C61;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      unint64_t v2 = 0xE700000000000000;
      if (v5 == 0x656D69546C6C61) {
        goto LABEL_16;
      }
      goto LABEL_19;
    case 2:
      unint64_t v2 = 0xE500000000000000;
      if (v5 != 0x7961646F74) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 3:
      unint64_t v2 = 0xEB000000006B6565;
      if (v5 != 0x57676E696C6C6F72) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 4:
      uint64_t v3 = 0x4D676E696C6C6F72;
      unint64_t v2 = 0xEC00000068746E6FLL;
      goto LABEL_15;
    case 5:
      unint64_t v2 = 0xEF72616559666C61;
      if (v5 != 0x48676E696C6C6F72) {
        goto LABEL_19;
      }
      goto LABEL_16;
    default:
LABEL_15:
      if (v5 != v3) {
        goto LABEL_19;
      }
LABEL_16:
      if (v6 == v2) {
        char v7 = 1;
      }
      else {
LABEL_19:
      }
        char v7 = sub_1C2A9E8D8();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_1C29546FC(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xEC0000007961646FLL;
  uint64_t v3 = 0x54664F7472617473;
  uint64_t v4 = a1;
  unint64_t v5 = 0x54664F7472617473;
  unint64_t v6 = 0xEC0000007961646FLL;
  switch(v4)
  {
    case 1:
      unint64_t v6 = 0x80000001C2AB52F0;
      unint64_t v5 = 0xD000000000000010;
      break;
    case 2:
      unint64_t v5 = 0x57664F7472617473;
      uint64_t v7 = 7038309;
      goto LABEL_6;
    case 3:
      unint64_t v5 = 0x4D664F7472617473;
      unint64_t v6 = 0xEC00000068746E6FLL;
      break;
    case 4:
      unint64_t v5 = 0x59664F7472617473;
      uint64_t v7 = 7496037;
LABEL_6:
      unint64_t v6 = v7 & 0xFFFFFFFFFFFFLL | 0xEB00000000000000;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      unint64_t v2 = 0x80000001C2AB52F0;
      if (v5 == 0xD000000000000010) {
        goto LABEL_16;
      }
      goto LABEL_18;
    case 2:
      uint64_t v8 = 0x57664F7472617473;
      uint64_t v9 = 7038309;
      goto LABEL_15;
    case 3:
      uint64_t v3 = 0x4D664F7472617473;
      unint64_t v2 = 0xEC00000068746E6FLL;
      goto LABEL_12;
    case 4:
      uint64_t v8 = 0x59664F7472617473;
      uint64_t v9 = 7496037;
LABEL_15:
      unint64_t v2 = v9 & 0xFFFFFFFFFFFFLL | 0xEB00000000000000;
      if (v5 == v8) {
        goto LABEL_16;
      }
      goto LABEL_18;
    default:
LABEL_12:
      if (v5 != v3) {
        goto LABEL_18;
      }
LABEL_16:
      if (v6 == v2) {
        char v10 = 1;
      }
      else {
LABEL_18:
      }
        char v10 = sub_1C2A9E8D8();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v10 & 1;
  }
}

uint64_t sub_1C2954904(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 0x72756F48656E6FLL;
  unint64_t v3 = 0xE700000000000000;
  uint64_t v4 = a1;
  uint64_t v5 = 0x72756F48656E6FLL;
  switch(v4)
  {
    case 1:
      unint64_t v3 = 0xE600000000000000;
      uint64_t v5 = 0x796144656E6FLL;
      break;
    case 2:
      uint64_t v5 = 0x6B656557656E6FLL;
      break;
    case 3:
      unint64_t v3 = 0xE800000000000000;
      uint64_t v5 = 0x68746E6F4D656E6FLL;
      break;
    case 4:
      uint64_t v5 = 0x72616559656E6FLL;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE700000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xE600000000000000;
      if (v5 == 0x796144656E6FLL) {
        goto LABEL_13;
      }
      goto LABEL_16;
    case 2:
      if (v5 != 0x6B656557656E6FLL) {
        goto LABEL_16;
      }
      goto LABEL_13;
    case 3:
      unint64_t v6 = 0xE800000000000000;
      uint64_t v2 = 0x68746E6F4D656E6FLL;
      goto LABEL_12;
    case 4:
      if (v5 != 0x72616559656E6FLL) {
        goto LABEL_16;
      }
      goto LABEL_13;
    default:
LABEL_12:
      if (v5 != v2) {
        goto LABEL_16;
      }
LABEL_13:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_16:
      }
        char v7 = sub_1C2A9E8D8();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_1C2954AB8(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xD000000000000011;
  unint64_t v3 = 0x80000001C2AB5360;
  uint64_t v4 = a1;
  unint64_t v5 = 0xD000000000000011;
  switch(v4)
  {
    case 1:
      unint64_t v5 = 0xD000000000000017;
      unint64_t v6 = "audioExposureBucketSize";
      goto LABEL_4;
    case 2:
      unint64_t v5 = 0xD000000000000013;
      unint64_t v6 = "heartRateBucketSize";
LABEL_4:
      unint64_t v3 = (unint64_t)(v6 - 32) | 0x8000000000000000;
      break;
    case 3:
      unint64_t v5 = 0x756C47646F6F6C62;
      unint64_t v3 = 0xEC00000065736F63;
      break;
    case 4:
      unint64_t v5 = 0x7461726970736572;
      unint64_t v3 = 0xEF6574615279726FLL;
      break;
    default:
      break;
  }
  unint64_t v7 = 0x80000001C2AB5360;
  switch(a2)
  {
    case 1:
      unint64_t v8 = 0xD000000000000017;
      uint64_t v9 = "audioExposureBucketSize";
      goto LABEL_10;
    case 2:
      unint64_t v8 = 0xD000000000000013;
      uint64_t v9 = "heartRateBucketSize";
LABEL_10:
      unint64_t v7 = (unint64_t)(v9 - 32) | 0x8000000000000000;
      if (v5 != v8) {
        goto LABEL_17;
      }
      goto LABEL_14;
    case 3:
      unint64_t v2 = 0x756C47646F6F6C62;
      unint64_t v7 = 0xEC00000065736F63;
      goto LABEL_13;
    case 4:
      unint64_t v7 = 0xEF6574615279726FLL;
      if (v5 != 0x7461726970736572) {
        goto LABEL_17;
      }
      goto LABEL_14;
    default:
LABEL_13:
      if (v5 != v2) {
        goto LABEL_17;
      }
LABEL_14:
      if (v3 == v7) {
        char v10 = 1;
      }
      else {
LABEL_17:
      }
        char v10 = sub_1C2A9E8D8();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v10 & 1;
  }
}

uint64_t sub_1C2954C90(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 0x6573696372657845;
    }
    else {
      uint64_t v3 = 0x646E617453;
    }
    if (v2 == 1) {
      unint64_t v4 = 0xE800000000000000;
    }
    else {
      unint64_t v4 = 0xE500000000000000;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        uint64_t v6 = 0x6573696372657845;
      }
      else {
        uint64_t v6 = 0x646E617453;
      }
      if (v5 == 1) {
        unint64_t v7 = 0xE800000000000000;
      }
      else {
        unint64_t v7 = 0xE500000000000000;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v4 = 0xE400000000000000;
    uint64_t v3 = 1702260557;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  unint64_t v7 = 0xE400000000000000;
  if (v3 != 1702260557)
  {
LABEL_21:
    char v8 = sub_1C2A9E8D8();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1C2954D94(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x6967676F4C746F6ELL;
  }
  else {
    uint64_t v3 = 0x676E6967676F6CLL;
  }
  if (v2) {
    unint64_t v4 = 0xE700000000000000;
  }
  else {
    unint64_t v4 = 0xEA0000000000676ELL;
  }
  if (a2) {
    uint64_t v5 = 0x6967676F4C746F6ELL;
  }
  else {
    uint64_t v5 = 0x676E6967676F6CLL;
  }
  if (a2) {
    unint64_t v6 = 0xEA0000000000676ELL;
  }
  else {
    unint64_t v6 = 0xE700000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = sub_1C2A9E8D8();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1C2954E40(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 0x65756C615670;
  unint64_t v3 = 0xE600000000000000;
  uint64_t v4 = a1;
  uint64_t v5 = 0x65756C615670;
  switch(v4)
  {
    case 1:
      uint64_t v5 = 0x6953746365666665;
      unint64_t v3 = 0xEA0000000000657ALL;
      break;
    case 2:
      uint64_t v5 = 0x6D726F4E326CLL;
      break;
    case 3:
      uint64_t v5 = 0x7473697461745374;
      unint64_t v3 = 0xEA00000000006369;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE600000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xEA0000000000657ALL;
      if (v5 == 0x6953746365666665) {
        goto LABEL_12;
      }
      goto LABEL_14;
    case 2:
      uint64_t v2 = 0x6D726F4E326CLL;
      goto LABEL_9;
    case 3:
      unint64_t v6 = 0xEA00000000006369;
      if (v5 == 0x7473697461745374) {
        goto LABEL_12;
      }
      goto LABEL_14;
    default:
LABEL_9:
      if (v5 != v2) {
        goto LABEL_14;
      }
LABEL_12:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_14:
      }
        char v7 = sub_1C2A9E8D8();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_1C2954FD0(uint64_t a1, uint64_t a2)
{
  return sub_1C29556E4(a1, a2, (uint64_t (*)(void))DiagramConfiguration.TextAttributes.rawValue.getter);
}

uint64_t sub_1C2954FE8(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xEC00000068746469;
  uint64_t v3 = 0x57746C7561666564;
  uint64_t v4 = a1;
  uint64_t v5 = 0x57746C7561666564;
  unint64_t v6 = 0xEC00000068746469;
  switch(v4)
  {
    case 1:
      uint64_t v5 = 0x656E696C72696168;
      goto LABEL_4;
    case 2:
      uint64_t v5 = 0x6472696854656E6FLL;
LABEL_4:
      unint64_t v6 = 0xED00006874646957;
      break;
    case 3:
      uint64_t v5 = 0x74646957666C6168;
      unint64_t v6 = 0xE900000000000068;
      break;
    case 4:
      uint64_t v5 = 0x64726968546F7774;
      unint64_t v6 = 0xEE00687464695773;
      break;
    case 5:
      uint64_t v5 = 0x7269685472756F66;
      unint64_t v6 = 0xEF68746469577364;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      uint64_t v7 = 0x656E696C72696168;
      goto LABEL_11;
    case 2:
      uint64_t v7 = 0x6472696854656E6FLL;
LABEL_11:
      unint64_t v2 = 0xED00006874646957;
      if (v5 != v7) {
        goto LABEL_20;
      }
      goto LABEL_17;
    case 3:
      unint64_t v2 = 0xE900000000000068;
      if (v5 != 0x74646957666C6168) {
        goto LABEL_20;
      }
      goto LABEL_17;
    case 4:
      uint64_t v3 = 0x64726968546F7774;
      unint64_t v2 = 0xEE00687464695773;
      goto LABEL_16;
    case 5:
      unint64_t v2 = 0xEF68746469577364;
      if (v5 != 0x7269685472756F66) {
        goto LABEL_20;
      }
      goto LABEL_17;
    default:
LABEL_16:
      if (v5 != v3) {
        goto LABEL_20;
      }
LABEL_17:
      if (v6 == v2) {
        char v8 = 1;
      }
      else {
LABEL_20:
      }
        char v8 = sub_1C2A9E8D8();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v8 & 1;
  }
}

uint64_t sub_1C2955244(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2 = 0xEC0000007465736ELL;
  uint64_t v3 = 0x49746C7561666564;
  int v4 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v5 = 0x65736E4965646977;
    }
    else {
      uint64_t v5 = 0x7465736E496F6ELL;
    }
    if (v4 == 1) {
      unint64_t v6 = 0xE900000000000074;
    }
    else {
      unint64_t v6 = 0xE700000000000000;
    }
    int v7 = a2;
    if (!a2) {
      goto LABEL_15;
    }
    goto LABEL_9;
  }
  uint64_t v5 = 0x49746C7561666564;
  unint64_t v6 = 0xEC0000007465736ELL;
  int v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1) {
      uint64_t v3 = 0x65736E4965646977;
    }
    else {
      uint64_t v3 = 0x7465736E496F6ELL;
    }
    if (v7 == 1) {
      unint64_t v2 = 0xE900000000000074;
    }
    else {
      unint64_t v2 = 0xE700000000000000;
    }
  }
LABEL_15:
  if (v5 == v3 && v6 == v2) {
    char v8 = 1;
  }
  else {
    char v8 = sub_1C2A9E8D8();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1C2955370(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xE900000000000068;
  uint64_t v3 = 0x7464695772756F68;
  uint64_t v4 = a1;
  uint64_t v5 = 0x7464695772756F68;
  unint64_t v6 = 0xE900000000000068;
  switch(v4)
  {
    case 1:
      unint64_t v6 = 0xE800000000000000;
      uint64_t v5 = 0x6874646957796164;
      break;
    case 2:
      uint64_t v5 = 0x746469576B656577;
      break;
    case 3:
      uint64_t v5 = 0x5774686769736E69;
      unint64_t v6 = 0xEC00000068746469;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      unint64_t v2 = 0xE800000000000000;
      if (v5 == 0x6874646957796164) {
        goto LABEL_12;
      }
      goto LABEL_14;
    case 2:
      uint64_t v3 = 0x746469576B656577;
      goto LABEL_9;
    case 3:
      unint64_t v2 = 0xEC00000068746469;
      if (v5 == 0x5774686769736E69) {
        goto LABEL_12;
      }
      goto LABEL_14;
    default:
LABEL_9:
      if (v5 != v3) {
        goto LABEL_14;
      }
LABEL_12:
      if (v6 == v2) {
        char v7 = 1;
      }
      else {
LABEL_14:
      }
        char v7 = sub_1C2A9E8D8();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_1C2955510(uint64_t a1, uint64_t a2)
{
  return sub_1C29556E4(a1, a2, (uint64_t (*)(void))DiagramConfiguration.AxisType.rawValue.getter);
}

uint64_t sub_1C2955528(char a1, char a2)
{
  unint64_t v3 = 0xD000000000000019;
  unint64_t v4 = 0x80000001C2AB5CB0;
  switch(a1)
  {
    case 1:
      unint64_t v4 = 0x80000001C2AB5CD0;
      unint64_t v3 = 0xD000000000000010;
      break;
    case 2:
      unint64_t v3 = 0xD000000000000011;
      unint64_t v4 = 0x80000001C2AB5CF0;
      break;
    case 3:
      unint64_t v3 = 0x65736E496F72657ALL;
      unint64_t v4 = 0xEA00000000007374;
      break;
    default:
      break;
  }
  unint64_t v5 = 0xD000000000000019;
  unint64_t v6 = 0x80000001C2AB5CB0;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0x80000001C2AB5CD0;
      if (v3 == 0xD000000000000010) {
        goto LABEL_12;
      }
      goto LABEL_14;
    case 2:
      unint64_t v5 = 0xD000000000000011;
      unint64_t v6 = 0x80000001C2AB5CF0;
      goto LABEL_9;
    case 3:
      unint64_t v6 = 0xEA00000000007374;
      if (v3 == 0x65736E496F72657ALL) {
        goto LABEL_12;
      }
      goto LABEL_14;
    default:
LABEL_9:
      if (v3 != v5) {
        goto LABEL_14;
      }
LABEL_12:
      if (v4 == v6) {
        char v7 = 1;
      }
      else {
LABEL_14:
      }
        char v7 = sub_1C2A9E8D8();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_1C29556CC(uint64_t a1, uint64_t a2)
{
  return sub_1C29556E4(a1, a2, DiagramConfiguration.Color.rawValue.getter);
}

uint64_t sub_1C29556E4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v4 = a3();
  uint64_t v6 = v5;
  if (v4 == a3() && v6 == v7) {
    char v9 = 1;
  }
  else {
    char v9 = sub_1C2A9E8D8();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

uint64_t sub_1C2955788(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2 = 0xD000000000000011;
  unint64_t v3 = 0x80000001C2AB5840;
  int v4 = a1;
  if (a1)
  {
    if (a1 == 1) {
      unint64_t v5 = 0x6E726F436F72657ALL;
    }
    else {
      unint64_t v5 = 0xD000000000000012;
    }
    if (v4 == 1) {
      unint64_t v6 = 0xEE00657A69537265;
    }
    else {
      unint64_t v6 = 0x80000001C2AB5870;
    }
    int v7 = a2;
    if (!a2) {
      goto LABEL_15;
    }
    goto LABEL_9;
  }
  unint64_t v5 = 0xD000000000000011;
  unint64_t v6 = 0x80000001C2AB5840;
  int v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1) {
      unint64_t v2 = 0x6E726F436F72657ALL;
    }
    else {
      unint64_t v2 = 0xD000000000000012;
    }
    if (v7 == 1) {
      unint64_t v3 = 0xEE00657A69537265;
    }
    else {
      unint64_t v3 = 0x80000001C2AB5870;
    }
  }
LABEL_15:
  if (v5 == v2 && v6 == v3) {
    char v8 = 1;
  }
  else {
    char v8 = sub_1C2A9E8D8();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1C29558A0(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xEA00000000006E69;
  uint64_t v3 = 0x6772614D7466656CLL;
  uint64_t v4 = a1;
  uint64_t v5 = 0x6772614D7466656CLL;
  unint64_t v6 = 0xEA00000000006E69;
  switch(v4)
  {
    case 1:
      uint64_t v5 = 0x72614D7468676972;
      unint64_t v6 = 0xEB000000006E6967;
      break;
    case 2:
      unint64_t v6 = 0xE600000000000000;
      uint64_t v5 = 0x7265746E6563;
      break;
    case 3:
      uint64_t v5 = 0x614D6D6F74746F62;
      unint64_t v6 = 0xEC0000006E696772;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      unint64_t v2 = 0xEB000000006E6967;
      if (v5 == 0x72614D7468676972) {
        goto LABEL_12;
      }
      goto LABEL_14;
    case 2:
      unint64_t v2 = 0xE600000000000000;
      uint64_t v3 = 0x7265746E6563;
      goto LABEL_9;
    case 3:
      unint64_t v2 = 0xEC0000006E696772;
      if (v5 == 0x614D6D6F74746F62) {
        goto LABEL_12;
      }
      goto LABEL_14;
    default:
LABEL_9:
      if (v5 != v3) {
        goto LABEL_14;
      }
LABEL_12:
      if (v6 == v2) {
        char v7 = 1;
      }
      else {
LABEL_14:
      }
        char v7 = sub_1C2A9E8D8();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_1C2955A50(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2 = 0xEB00000000676E69;
  unint64_t v3 = 0x646461506F72657ALL;
  int v4 = a1;
  if (a1)
  {
    if (a1 == 1) {
      unint64_t v5 = 0xD00000000000001ALL;
    }
    else {
      unint64_t v5 = 0xD00000000000001CLL;
    }
    if (v4 == 1) {
      unint64_t v6 = 0x80000001C2AB55F0;
    }
    else {
      unint64_t v6 = 0x80000001C2AB5610;
    }
    int v7 = a2;
    if (!a2) {
      goto LABEL_15;
    }
    goto LABEL_9;
  }
  unint64_t v5 = 0x646461506F72657ALL;
  unint64_t v6 = 0xEB00000000676E69;
  int v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1) {
      unint64_t v3 = 0xD00000000000001ALL;
    }
    else {
      unint64_t v3 = 0xD00000000000001CLL;
    }
    if (v7 == 1) {
      unint64_t v2 = 0x80000001C2AB55F0;
    }
    else {
      unint64_t v2 = 0x80000001C2AB5610;
    }
  }
LABEL_15:
  if (v5 == v3 && v6 == v2) {
    char v8 = 1;
  }
  else {
    char v8 = sub_1C2A9E8D8();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1C2955B64(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xED00007375696461;
  unint64_t v3 = 0x52746C7561666564;
  uint64_t v4 = a1;
  uint64_t v5 = 0x52746C7561666564;
  unint64_t v6 = 0xED00007375696461;
  switch(v4)
  {
    case 1:
      unsigned int v7 = 1718378856;
      goto LABEL_4;
    case 2:
      unsigned int v7 = 1869768058;
LABEL_4:
      uint64_t v5 = v7 | 0x6964615200000000;
      unint64_t v6 = 0xEA00000000007375;
      break;
    case 3:
      uint64_t v5 = 0xD00000000000001ALL;
      char v8 = "heartRateRecoveryDotRadius";
      goto LABEL_7;
    case 4:
      uint64_t v5 = 0xD000000000000012;
      char v8 = "threeFourthsRadius";
LABEL_7:
      unint64_t v6 = (unint64_t)(v8 - 32) | 0x8000000000000000;
      break;
    case 5:
      unint64_t v6 = 0x80000001C2AB54F0;
      uint64_t v5 = 0xD000000000000010;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      unsigned int v9 = 1718378856;
      goto LABEL_12;
    case 2:
      unsigned int v9 = 1869768058;
LABEL_12:
      unint64_t v2 = 0xEA00000000007375;
      if (v5 != (v9 | 0x6964615200000000)) {
        goto LABEL_21;
      }
      goto LABEL_18;
    case 3:
      unint64_t v3 = 0xD00000000000001ALL;
      char v10 = "heartRateRecoveryDotRadius";
      goto LABEL_16;
    case 4:
      unint64_t v3 = 0xD000000000000012;
      char v10 = "threeFourthsRadius";
LABEL_16:
      unint64_t v2 = (unint64_t)(v10 - 32) | 0x8000000000000000;
      goto LABEL_17;
    case 5:
      unint64_t v2 = 0x80000001C2AB54F0;
      if (v5 != 0xD000000000000010) {
        goto LABEL_21;
      }
      goto LABEL_18;
    default:
LABEL_17:
      if (v5 != v3) {
        goto LABEL_21;
      }
LABEL_18:
      if (v6 == v2) {
        char v11 = 1;
      }
      else {
LABEL_21:
      }
        char v11 = sub_1C2A9E8D8();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v11 & 1;
  }
}

uint64_t sub_1C2955D88(char a1, char a2)
{
  unint64_t v3 = 0xD000000000000018;
  unint64_t v4 = 0x80000001C2AB5510;
  switch(a1)
  {
    case 1:
      unint64_t v4 = 0x80000001C2AB5530;
      unint64_t v3 = 0xD000000000000015;
      break;
    case 2:
      unint64_t v3 = 0xD000000000000021;
      uint64_t v5 = "workoutHeartRateDistributionWidth";
      goto LABEL_7;
    case 3:
      unint64_t v3 = 0xD00000000000001FLL;
      uint64_t v5 = "alertHeartRateDistributionWidth";
      goto LABEL_7;
    case 4:
      unint64_t v3 = 0xD00000000000001ELL;
      uint64_t v5 = "audioExposureDistributionWidth";
      goto LABEL_7;
    case 5:
      unint64_t v3 = 0xD00000000000001BLL;
      uint64_t v5 = "audioAlertDistributionWidth";
LABEL_7:
      unint64_t v4 = (unint64_t)(v5 - 32) | 0x8000000000000000;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xD000000000000018;
  unint64_t v7 = 0x80000001C2AB5510;
  switch(a2)
  {
    case 1:
      unint64_t v7 = 0x80000001C2AB5530;
      unint64_t v6 = 0xD000000000000015;
      break;
    case 2:
      unint64_t v6 = 0xD000000000000021;
      char v8 = "workoutHeartRateDistributionWidth";
      goto LABEL_14;
    case 3:
      unint64_t v6 = 0xD00000000000001FLL;
      char v8 = "alertHeartRateDistributionWidth";
      goto LABEL_14;
    case 4:
      unint64_t v6 = 0xD00000000000001ELL;
      char v8 = "audioExposureDistributionWidth";
      goto LABEL_14;
    case 5:
      unint64_t v6 = 0xD00000000000001BLL;
      char v8 = "audioAlertDistributionWidth";
LABEL_14:
      unint64_t v7 = (unint64_t)(v8 - 32) | 0x8000000000000000;
      break;
    default:
      break;
  }
  if (v3 == v6 && v4 == v7) {
    char v9 = 1;
  }
  else {
    char v9 = sub_1C2A9E8D8();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

uint64_t sub_1C2955F50(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2 = 0xD000000000000012;
  unint64_t v3 = 0x80000001C2AB5630;
  int v4 = a1;
  if (a1)
  {
    if (a1 == 1) {
      unint64_t v5 = 0xD000000000000012;
    }
    else {
      unint64_t v5 = 0x676E654C6F72657ALL;
    }
    if (v4 == 1) {
      unint64_t v6 = 0x80000001C2AB5650;
    }
    else {
      unint64_t v6 = 0xEA00000000006874;
    }
    int v7 = a2;
    if (!a2) {
      goto LABEL_12;
    }
  }
  else
  {
    unint64_t v5 = 0xD000000000000012;
    unint64_t v6 = 0x80000001C2AB5630;
    int v7 = a2;
    if (!a2) {
      goto LABEL_12;
    }
  }
  if (v7 == 1)
  {
    unint64_t v3 = 0x80000001C2AB5650;
  }
  else
  {
    unint64_t v2 = 0x676E654C6F72657ALL;
    unint64_t v3 = 0xEA00000000006874;
  }
LABEL_12:
  if (v5 == v2 && v6 == v3) {
    char v8 = 1;
  }
  else {
    char v8 = sub_1C2A9E8D8();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1C2956058(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x74646957666C6168;
  }
  else {
    uint64_t v3 = 0x57746C7561666564;
  }
  if (v2) {
    unint64_t v4 = 0xEC00000068746469;
  }
  else {
    unint64_t v4 = 0xE900000000000068;
  }
  if (a2) {
    uint64_t v5 = 0x74646957666C6168;
  }
  else {
    uint64_t v5 = 0x57746C7561666564;
  }
  if (a2) {
    unint64_t v6 = 0xE900000000000068;
  }
  else {
    unint64_t v6 = 0xEC00000068746469;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = sub_1C2A9E8D8();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1C295615C(char a1, char a2)
{
  if (a1) {
    uint64_t v2 = 0x6973616572636564;
  }
  else {
    uint64_t v2 = 0x6973616572636E69;
  }
  if (a2) {
    uint64_t v3 = 0x6973616572636564;
  }
  else {
    uint64_t v3 = 0x6973616572636E69;
  }
  if (v2 == v3) {
    char v4 = 1;
  }
  else {
    char v4 = sub_1C2A9E8D8();
  }
  swift_bridgeObjectRelease_n();
  return v4 & 1;
}

uint64_t sub_1C29561DC()
{
  if (*v0) {
    return 0x74704F7972657571;
  }
  else {
    return 0x676E615265746164;
  }
}

uint64_t sub_1C2956224@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1C2956B6C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1C295624C()
{
  return 0;
}

void sub_1C2956258(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_1C2956264(uint64_t a1)
{
  unint64_t v2 = sub_1C2956728();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1C29562A0(uint64_t a1)
{
  unint64_t v2 = sub_1C2956728();
  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t SleepQueryConfiguration.encode(to:)(void *a1)
{
  sub_1C29567D0(0, &qword_1EBB8E3C8, MEMORY[0x1E4FBBDE0]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  char v8 = (char *)v11 - v7;
  char v9 = *v1;
  v11[0] = *((void *)v1 + 1);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1C2956728();
  sub_1C2A9EA18();
  char v14 = v9;
  char v13 = 0;
  sub_1C295677C();
  sub_1C2A9E868();
  if (!v2)
  {
    v11[1] = v11[0];
    char v12 = 1;
    type metadata accessor for HKSleepDaySummaryQueryOptions(0);
    sub_1C2956888(&qword_1EBB8FFB8);
    sub_1C2A9E868();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t SleepQueryConfiguration.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1C29567D0(0, &qword_1EBB92180, MEMORY[0x1E4FBBDC0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  char v9 = (char *)v13 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1C2956728();
  sub_1C2A9EA08();
  if (!v2)
  {
    char v15 = 0;
    sub_1C2956834();
    sub_1C2A9E7A8();
    char v10 = v16;
    type metadata accessor for HKSleepDaySummaryQueryOptions(0);
    char v14 = 1;
    sub_1C2956888(&qword_1EA31DEE8);
    sub_1C2A9E7A8();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    uint64_t v12 = v13[1];
    *(unsigned char *)a2 = v10;
    *(void *)(a2 + 8) = v12;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1C29566BC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return SleepQueryConfiguration.init(from:)(a1, a2);
}

uint64_t sub_1C29566D4(void *a1)
{
  return SleepQueryConfiguration.encode(to:)(a1);
}

uint64_t sub_1C29566EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  return sub_1C29544B0(*(unsigned char *)a1, *(unsigned char *)a2) & (v2 == v3);
}

unint64_t sub_1C2956728()
{
  unint64_t result = qword_1EBB91DD8;
  if (!qword_1EBB91DD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB91DD8);
  }
  return result;
}

unint64_t sub_1C295677C()
{
  unint64_t result = qword_1EBB8F748;
  if (!qword_1EBB8F748)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB8F748);
  }
  return result;
}

void sub_1C29567D0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = sub_1C2956728();
    unint64_t v7 = a3(a1, &type metadata for SleepQueryConfiguration.CodingKeys, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

unint64_t sub_1C2956834()
{
  unint64_t result = qword_1EBB92068;
  if (!qword_1EBB92068)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB92068);
  }
  return result;
}

uint64_t sub_1C2956888(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for HKSleepDaySummaryQueryOptions(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SleepQueryConfiguration(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFB && a1[16]) {
    return (*(_DWORD *)a1 + 251);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 6;
  int v5 = v3 - 6;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for SleepQueryConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFA)
  {
    *(void *)uint64_t result = a2 - 251;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFB) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFB) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(unsigned char *)uint64_t result = a2 + 5;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SleepQueryConfiguration()
{
  return &type metadata for SleepQueryConfiguration;
}

unsigned char *storeEnumTagSinglePayload for SleepQueryConfiguration.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C2956A2CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SleepQueryConfiguration.CodingKeys()
{
  return &type metadata for SleepQueryConfiguration.CodingKeys;
}

unint64_t sub_1C2956A68()
{
  unint64_t result = qword_1EA31DEF0;
  if (!qword_1EA31DEF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA31DEF0);
  }
  return result;
}

unint64_t sub_1C2956AC0()
{
  unint64_t result = qword_1EBB91DE8;
  if (!qword_1EBB91DE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB91DE8);
  }
  return result;
}

unint64_t sub_1C2956B18()
{
  unint64_t result = qword_1EBB91DE0;
  if (!qword_1EBB91DE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB91DE0);
  }
  return result;
}

uint64_t sub_1C2956B6C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x676E615265746164 && a2 == 0xE900000000000065;
  if (v2 || (sub_1C2A9E8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x74704F7972657571 && a2 == 0xEC000000736E6F69)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_1C2A9E8D8();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

Swift::Void __swiftcall NSOperation.logLifeCycleEvent(_:withPrivateInfo:)(Swift::String _, Swift::String withPrivateInfo)
{
}

Swift::Void __swiftcall NSOperation.logRunning(withInfo:)(Swift::String withInfo)
{
  v2._uint64_t countAndFlagsBits = 0x676E696E6E7572;
  v2._object = (void *)0xE700000000000000;
  NSOperation.logLifeCycleEvent(_:withPrivateInfo:)(v2, withInfo);
}

Swift::Void __swiftcall NSOperation.logCancelled(withInfo:)(Swift::String withInfo)
{
  v2._uint64_t countAndFlagsBits = 0x656C6C65636E6163;
  v2._object = (void *)0xE900000000000064;
  NSOperation.logLifeCycleEvent(_:withPrivateInfo:)(v2, withInfo);
}

Swift::Void __swiftcall NSOperation.logCleanUp(withInfo:)(Swift::String withInfo)
{
  v2._uint64_t countAndFlagsBits = 0x676E696E61656C63;
  v2._object = (void *)0xEB00000000707520;
  NSOperation.logLifeCycleEvent(_:withPrivateInfo:)(v2, withInfo);
}

Swift::Void __swiftcall NSOperation.logFinished(withInfo:)(Swift::String withInfo)
{
  v2._uint64_t countAndFlagsBits = 0x64656873696E6966;
  v2._object = (void *)0xE800000000000000;
  NSOperation.logLifeCycleEvent(_:withPrivateInfo:)(v2, withInfo);
}

Swift::Void __swiftcall NSOperation.logAbortingDueToCancellation(withInfo:)(Swift::String withInfo)
{
  v2._object = (void *)0x80000001C2AB6030;
  v2._uint64_t countAndFlagsBits = 0xD00000000000002DLL;
  NSOperation.logLifeCycleEvent(_:withPrivateInfo:)(v2, withInfo);
}

uint64_t NSOperation.logError(_:withInfo:)(uint64_t a1, uint64_t a2, void *a3)
{
  swift_getErrorValue();
  v5._uint64_t countAndFlagsBits = sub_1C2A9E938();
  v6._uint64_t countAndFlagsBits = a2;
  v6._object = a3;
  NSOperation.logErrorString(_:withInfo:)(v5, v6);
  return swift_bridgeObjectRelease();
}

Swift::Void __swiftcall NSOperation.logErrorString(_:withInfo:)(Swift::String _, Swift::String withInfo)
{
}

uint64_t sub_1C2956DE8(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t (*a5)(void), const char *a6)
{
  uint64_t v36 = a1;
  uint64_t v37 = a3;
  uint64_t v11 = sub_1C2A9CFE8();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  char v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C2A9CF68();
  id v15 = v6;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  id v16 = v15;
  uint64_t v17 = sub_1C2A9CFC8();
  int v18 = a5();
  if (os_log_type_enabled(v17, (os_log_type_t)v18))
  {
    int v32 = v18;
    uint64_t v33 = a6;
    uint64_t v34 = v12;
    uint64_t v35 = v11;
    uint64_t v19 = swift_slowAlloc();
    uint64_t v31 = swift_slowAlloc();
    uint64_t v40 = v31;
    *(_DWORD *)uint64_t v19 = 136446723;
    id v20 = v16;
    id v21 = objc_msgSend(v20, sel_description);
    uint64_t v22 = sub_1C2A9DD28();
    unint64_t v24 = v23;

    uint64_t v38 = sub_1C2957168(v22, v24, &v40);
    sub_1C2A9E358();

    swift_bridgeObjectRelease();
    *(_WORD *)(v19 + 12) = 2082;
    swift_bridgeObjectRetain();
    uint64_t v38 = sub_1C2957168(v36, a2, &v40);
    sub_1C2A9E358();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v19 + 22) = 2081;
    uint64_t v25 = HIBYTE(a4) & 0xF;
    if ((a4 & 0x2000000000000000) == 0) {
      uint64_t v25 = v37 & 0xFFFFFFFFFFFFLL;
    }
    if (v25)
    {
      uint64_t v38 = 0x203A6F666E692820;
      unint64_t v39 = 0xE800000000000000;
      sub_1C2A9DDB8();
      sub_1C2A9DDB8();
      uint64_t v26 = v38;
      unint64_t v27 = v39;
    }
    else
    {
      uint64_t v26 = 0;
      unint64_t v27 = 0xE000000000000000;
    }
    uint64_t v29 = v33;
    uint64_t v38 = sub_1C2957168(v26, v27, &v40);
    sub_1C2A9E358();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C292A000, v17, (os_log_type_t)v32, v29, (uint8_t *)v19, 0x20u);
    uint64_t v30 = v31;
    swift_arrayDestroy();
    MEMORY[0x1C87656F0](v30, -1, -1);
    MEMORY[0x1C87656F0](v19, -1, -1);

    return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v14, v35);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();

    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
}

uint64_t sub_1C2957168(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_1C295723C(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_1C29577B8((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = MEMORY[0x1E4FBB9B0];
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_1C29577B8((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v7;
}

uint64_t sub_1C295723C(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_1C2A9E368();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = sub_1C29573F8(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = sub_1C2A9E558();
  if (!v8)
  {
    sub_1C2A9E618();
    __break(1u);
LABEL_17:
    uint64_t result = sub_1C2A9E6A8();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t sub_1C29573F8(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = sub_1C2957490(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_1C295766C(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_1C295766C(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_1C2957490(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_1C2957608(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = sub_1C2A9E4E8();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return (uint64_t)v4;
      }
      sub_1C2A9E618();
      __break(1u);
LABEL_10:
      uint64_t v2 = sub_1C2A9DDC8();
      if (!v2) {
        return MEMORY[0x1E4FBC860];
      }
    }
    sub_1C2A9E6A8();
    __break(1u);
LABEL_14:
    uint64_t result = sub_1C2A9E618();
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E4FBC860];
  }
  return result;
}

void *sub_1C2957608(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  sub_1C2957814();
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  void v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_1C295766C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_1C2957814();
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_1C2A9E6A8();
  __break(1u);
  return result;
}

uint64_t sub_1C29577B8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void sub_1C2957814()
{
  if (!qword_1EBB8FA00)
  {
    unint64_t v0 = sub_1C2A9E8A8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EBB8FA00);
    }
  }
}

Swift::Int __swiftcall _HKQuantityDistributionData.sampleCount()()
{
  id v1 = objc_msgSend(v0, sel_histogramCounts);
  sub_1C2957998();
  unint64_t v2 = sub_1C2A9DE98();

  if (v2 >> 62) {
    goto LABEL_12;
  }
  Swift::Int v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  Swift::Int result = swift_bridgeObjectRetain();
  if (v3)
  {
    while (v3 >= 1)
    {
      uint64_t v5 = 0;
      Swift::Int v6 = 0;
      while (1)
      {
        id v7 = (v2 & 0xC000000000000001) != 0 ? (id)MEMORY[0x1C8764390](v5, v2) : *(id *)(v2 + 8 * v5 + 32);
        int64_t v8 = v7;
        id v9 = objc_msgSend(v7, sel_integerValue);

        BOOL v10 = __OFADD__(v6, v9);
        v6 += (Swift::Int)v9;
        if (v10) {
          break;
        }
        if (v3 == ++v5) {
          goto LABEL_14;
        }
      }
      __break(1u);
LABEL_12:
      swift_bridgeObjectRetain();
      Swift::Int result = sub_1C2A9E648();
      Swift::Int v3 = result;
      if (!result) {
        goto LABEL_13;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_13:
    Swift::Int v6 = 0;
LABEL_14:
    swift_bridgeObjectRelease_n();
    return v6;
  }
  return result;
}

unint64_t sub_1C2957998()
{
  unint64_t result = qword_1EBB92158;
  if (!qword_1EBB92158)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EBB92158);
  }
  return result;
}

uint64_t Collection<>.histogramSampleCount()()
{
  char v0 = sub_1C2A9DFD8();
  uint64_t result = 0;
  if ((v0 & 1) == 0)
  {
    sub_1C2A9DE28();
    return v2;
  }
  return result;
}

Swift::Int sub_1C2957A5C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  Swift::Int result = _HKQuantityDistributionData.sampleCount()();
  if (__OFADD__(v3, result)) {
    __break(1u);
  }
  else {
    *a2 = v3 + result;
  }
  return result;
}

double Collection<>.histogramSamplesPerMinute(startDate:endDate:)()
{
  uint64_t v0 = Collection<>.histogramSampleCount()();
  sub_1C2A9C628();
  double v2 = v1;
  double result = 0.0;
  if (v0 >= 1)
  {
    double v4 = v2 / 60.0;
    if (v4 > 0.0) {
      return (double)v0 / v4;
    }
  }
  return result;
}

double sub_1C2957B1C(uint64_t a1)
{
  sub_1C2A9C628();
  double v3 = v2;
  double result = 0.0;
  if (a1 >= 1)
  {
    double v5 = v3 / 60.0;
    if (v5 > 0.0) {
      return (double)a1 / v5;
    }
  }
  return result;
}

uint64_t HistogramUtilities.deinit()
{
  return v0;
}

uint64_t HistogramUtilities.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for HistogramUtilities()
{
  return self;
}

uint64_t method lookup function for HistogramUtilities(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for HistogramUtilities);
}

uint64_t dispatch thunk of static HistogramUtilities.histogramSamplesPerMinute(sampleCount:startDate:endDate:)()
{
  return (*(uint64_t (**)(void))(v0 + 80))();
}

int *ValueHistogramCollectionQueryConfiguration.init(dateInterval:anchorDate:statisticsInterval:quantityRanges:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  char v9 = *a2;
  uint64_t v10 = sub_1C2A9C398();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(a5, a1, v10);
  double result = (int *)type metadata accessor for ValueHistogramCollectionQueryConfiguration();
  *(unsigned char *)(a5 + result[5]) = v9;
  *(unsigned char *)(a5 + result[6]) = a3;
  *(void *)(a5 + result[7]) = a4;
  return result;
}

uint64_t type metadata accessor for ValueHistogramCollectionQueryConfiguration()
{
  uint64_t result = qword_1EBB8E278;
  if (!qword_1EBB8E278) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for ValueHistogramCollectionQueryConfiguration(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (void *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_1C2A9C398();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *((unsigned char *)a1 + a3[5]) = *((unsigned char *)a2 + a3[5]);
    *((unsigned char *)a1 + v8) = *((unsigned char *)a2 + v8);
    *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for ValueHistogramCollectionQueryConfiguration(uint64_t a1)
{
  uint64_t v2 = sub_1C2A9C398();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ValueHistogramCollectionQueryConfiguration(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1C2A9C398();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(unsigned char *)(a1 + v7) = *(unsigned char *)(a2 + v7);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ValueHistogramCollectionQueryConfiguration(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1C2A9C398();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for ValueHistogramCollectionQueryConfiguration(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1C2A9C398();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(unsigned char *)(a1 + v7) = *(unsigned char *)(a2 + v7);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithTake for ValueHistogramCollectionQueryConfiguration(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_1C2A9C398();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(unsigned char *)(a1 + a3[5]) = *(unsigned char *)(a2 + a3[5]);
  *(unsigned char *)(a1 + v7) = *(unsigned char *)(a2 + v7);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ValueHistogramCollectionQueryConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C2958090);
}

uint64_t sub_1C2958090(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1C2A9C398();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 28));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for ValueHistogramCollectionQueryConfiguration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C2958164);
}

uint64_t sub_1C2958164(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_1C2A9C398();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 28)) = (a2 - 1);
  }
  return result;
}

uint64_t sub_1C2958220()
{
  uint64_t result = sub_1C2A9C398();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void sub_1C29582C4()
{
  qword_1EBB9EEA0 = 0x4000000000000000;
}

double sub_1C29582D4()
{
  return sub_1C293CBC4();
}

double sub_1C29582F8()
{
  uint64_t v1 = *(void *)(v0 + 440);
  double v2 = 0.0;
  if ((*(unsigned char *)(v1 + 144) & 1) == 0) {
    double v2 = *(double *)(v1 + 112);
  }
  uint64_t v3 = *(void *)(v1 + 40);
  if (v3
    && (unint64_t)*(unsigned __int8 *)(v1 + 68) << 32 != 0x300000000
    && (*(_DWORD *)(v1 + 72) & 0xFF000000) != 0x2000000)
  {
    swift_bridgeObjectRetain();
    DiagramConfiguration.TextAttributes.toTextAttributes()();
    uint64_t v4 = sub_1C295AEB0(v3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v5 = *(void *)(v4 + 16);
    if (v5)
    {
      double v6 = *(double *)(v4 + 32);
      uint64_t v7 = v5 - 1;
      if (v7)
      {
        uint64_t v8 = (double *)(v4 + 40);
        do
        {
          double v9 = *v8++;
          double v10 = v9;
          if (v6 < v9) {
            double v6 = v10;
          }
          --v7;
        }
        while (v7);
      }
    }
    swift_bridgeObjectRelease();
  }
  if ((*(void *)(v1 + 64) & 0xFE00000000 | 0x100000000) != 0x300000000)
  {
    DiagramConfiguration.TextAttributes.toTextAttributes()();
    size_t v11 = (void *)sub_1C2A9DCF8();
    type metadata accessor for Key(0);
    sub_1C2942D7C();
    uint64_t v12 = (void *)sub_1C2A9DC58();
    swift_bridgeObjectRelease();
    objc_msgSend(v11, sel_sizeWithAttributes_, v12);
  }
  return v2;
}

void (*sub_1C2958518())(CGContext *a1, uint64_t a2, double a3, double a4)
{
  uint64_t v1 = *v0;
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = v0;
  *(void *)(v2 + 24) = v1;
  swift_retain();
  return sub_1C295B054;
}

void sub_1C29585A4(CGContext *a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  long long v9 = *(_OWORD *)(a2 + 16);
  v121[0] = *(_OWORD *)a2;
  v121[1] = v9;
  v121[2] = *(_OWORD *)(a2 + 32);
  uint64_t v122 = *(void *)(a2 + 48);
  long long v10 = *(_OWORD *)(a3 + 128);
  v123[0] = *(_OWORD *)(a3 + 112);
  v123[1] = v10;
  v123[2] = *(_OWORD *)(a3 + 144);
  uint64_t v11 = *(unsigned __int8 *)(a3 + 22);
  char v12 = *(unsigned char *)(a3 + 21);
  sub_1C292F15C((uint64_t)v123);
  sub_1C295931C((uint64_t *)v121, v123, v11, v12, (uint64_t)&v104, a5);
  sub_1C2945194((uint64_t)v123);
  *(CGAffineTransform *)double v120 = v104;
  *(void *)&v120[48] = v105;
  LOBYTE(v104.a) = *(unsigned char *)(a3 + 20);
  v97.super.Class isa = DiagramConfiguration.Color.toColor()().super.isa;
  CGAffineTransform v104 = *(CGAffineTransform *)v120;
  uint64_t v105 = *(void *)&v120[48];
  sub_1C292E56C((uint64_t)a1, (uint64_t *)&v104, a4, a5);
  int v96 = v11;
  switch(v11)
  {
    case 1:
    case 2:
    case 3:
      char v14 = sub_1C2A9E8D8();
      uint64_t v13 = swift_bridgeObjectRelease();
      if (v14) {
        goto LABEL_4;
      }
      break;
    default:
      uint64_t v13 = swift_bridgeObjectRelease();
LABEL_4:
      LOBYTE(v104.a) = 2;
      MEMORY[0x1F4188790](v13);
      sub_1C295ABEC((unsigned __int8 *)&v104, (void (*)(double *, double *, void *, double, double))sub_1C295CBC0);
      break;
  }
  double v15 = dbl_1C2AA6BD0[*(char *)(a3 + 16)];
  LOBYTE(v104.a) = *(unsigned char *)(a3 + 18);
  v16.super.Class isa = DiagramConfiguration.Color.toColor()().super.isa;
  Class isa = v16.super.isa;
  if (*(unsigned char *)(a3 + 40) == 35) {
    goto LABEL_14;
  }
  char v17 = *(unsigned char *)(a3 + 80);
  uint64_t v19 = *(void *)(a3 + 64);
  CGFloat v18 = *(double *)(a3 + 72);
  CGFloat v20 = *(double *)(a3 + 56);
  CGFloat v21 = *(double *)(a3 + 48);
  LOBYTE(v104.a) = *(unsigned char *)(a3 + 40);
  v104.CGFloat b = v21;
  v104.CGFloat c = v20;
  LOBYTE(v104.d) = v19 & 1;
  v104.tCGFloat x = v18;
  LOBYTE(v104.ty) = v17 & 1;
  v16.super.Class isa = sub_1C295B314((uint64_t)&v104, v16.super.isa);
  if (!v16.super.isa)
  {
LABEL_14:
    LOBYTE(v104.a) = 0;
    MEMORY[0x1F4188790](v16.super.isa);
    sub_1C295AA44((unsigned __int8 *)&v104, sub_1C295CB48);
  }
  else
  {
    Class v22 = v16.super.isa;
    v126.origin.CGFloat x = sub_1C293CBC4();
    CGAffineTransform v104 = *(CGAffineTransform *)&v120[8];
    CGRect v127 = CGRectApplyAffineTransform(v126, &v104);
    uint64_t v23 = 0;
    if (v17) {
      double y = 0.0;
    }
    else {
      double y = v127.origin.y;
    }
    double v25 = v127.origin.y + v127.size.height;
    if (v19) {
      double v26 = 0.0;
    }
    else {
      double v26 = v25;
    }
    double v27 = v26 - y;
    double v28 = y;
    double v29 = a4;
    CGContextClipToRect(a1, *(CGRect *)&v23);
    CGContextSetLineWidth(a1, v15);
    CGContextSetLineCap(a1, kCGLineCapRound);
    LOBYTE(v104.a) = 0;
    MEMORY[0x1F4188790](v30);
    sub_1C295AA44((unsigned __int8 *)&v104, (uint64_t (*)(void))sub_1C295CBB0);
  }
  LOBYTE(v104.a) = *(unsigned char *)(a3 + 19);
  v31.super.Class isa = DiagramConfiguration.Color.toColor()().super.isa;
  LOBYTE(v104.a) = 1;
  MEMORY[0x1F4188790](v31.super.isa);
  double v94 = v32;
  sub_1C295AA44((unsigned __int8 *)&v104, sub_1C295CB48);
  uint64_t v33 = MEMORY[0x1E4FBB718];
  sub_1C295CA58(a3 + 160, (uint64_t)v103, (uint64_t)&unk_1EBB906C8, (uint64_t)&type metadata for DiagramDistribution.DiagramDistributionMinMax, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1C29359AC);
  sub_1C295CA58((uint64_t)v103, (uint64_t)&v104, (uint64_t)&unk_1EBB906C8, (uint64_t)&type metadata for DiagramDistribution.DiagramDistributionMinMax, v33, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1C29359AC);
  if (sub_1C295CA40((uint64_t)&v104) != 1)
  {
    double v34 = dbl_1C2AA6C30[*(char *)(a3 + 17)];
    if ((v114 & 1) == 0)
    {
      CGAffineTransform v102 = *(CGAffineTransform *)&v120[8];
      CGPoint v35 = CGPointApplyAffineTransform(v113, &v102);
      double v36 = v107;
      CGFloat v37 = v35.x - v106 * 0.5;
      uint64_t v38 = (void *)sub_1C2A9DCF8();
      type metadata accessor for Key(0);
      sub_1C2942D7C();
      unint64_t v39 = (void *)sub_1C2A9DC58();
      objc_msgSend(v38, sel_drawAtPoint_withAttributes_, v39, v37, v34 + v35.y + 2.0);

      CGFloat v40 = v35.x - v110 * 0.5;
      uint64_t v41 = (void *)sub_1C2A9DCF8();
      uint64_t v42 = (void *)sub_1C2A9DC58();
      objc_msgSend(v41, sel_drawAtPoint_withAttributes_, v42, v40, v34 + v35.y + 2.0 + v36);
    }
    if ((v116 & 1) == 0)
    {
      CGAffineTransform v102 = *(CGAffineTransform *)&v120[8];
      CGPoint v43 = CGPointApplyAffineTransform(v115, &v102);
      CGFloat v44 = v43.x - v111 * 0.5;
      CGFloat v45 = v43.y + -2.0 - v112;
      uint64_t v46 = (void *)sub_1C2A9DCF8();
      type metadata accessor for Key(0);
      sub_1C2942D7C();
      uint64_t v47 = (void *)sub_1C2A9DC58();
      objc_msgSend(v46, sel_drawAtPoint_withAttributes_, v47, v44, v45 - v34);

      CGFloat v48 = v43.x - v108 * 0.5;
      CGFloat v49 = v45 - v109 - v34;
      uint64_t v50 = (void *)sub_1C2A9DCF8();
      uint64_t v51 = (void *)sub_1C2A9DC58();
      objc_msgSend(v50, sel_drawAtPoint_withAttributes_, v51, v48, v49);
    }
    if (v119 == 1)
    {
      if (qword_1EBB8E120 != -1) {
        swift_once();
      }
      CGFloat v52 = v15 - (*(double *)&qword_1EBB9EEA0 + *(double *)&qword_1EBB9EEA0);
      CGFloat v53 = *(double *)&v120[8];
      long long v54 = *(_OWORD *)&v120[16];
      long long v55 = *(_OWORD *)&v120[32];
      CGFloat v56 = *(double *)&v120[48];
      CGAffineTransform v102 = *(CGAffineTransform *)&v120[8];
      CGPoint v57 = CGPointApplyAffineTransform(v117, &v102);
      CGContextSaveGState(a1);
      CGContextSetBlendMode(a1, kCGBlendModeClear);
      double v58 = self;
      id v59 = objc_msgSend(v58, sel_blackColor);
      double v60 = (CGColor *)objc_msgSend(v59, sel_CGColor);

      CGContextSetFillColorWithColor(a1, v60);
      v128.origin.CGFloat x = v57.x - v52 * 0.5;
      v128.origin.double y = v57.y - v52 * 0.5;
      v128.size.CGFloat width = v52;
      v128.size.CGFloat height = v52;
      CGContextFillEllipseInRect(a1, v128);
      CGContextRestoreGState(a1);
      v102.CGFloat a = v53;
      *(_OWORD *)&v102.CGFloat b = v54;
      *(_OWORD *)&v102.CGFloat d = v55;
      v102.tdouble y = v56;
      CGPoint v61 = CGPointApplyAffineTransform(v118, &v102);
      CGContextSaveGState(a1);
      CGContextSetBlendMode(a1, kCGBlendModeClear);
      id v62 = objc_msgSend(v58, sel_blackColor);
      double v63 = (CGColor *)objc_msgSend(v62, sel_CGColor);

      CGContextSetFillColorWithColor(a1, v63);
      v129.origin.CGFloat x = v61.x - v52 * 0.5;
      v129.origin.double y = v61.y - v52 * 0.5;
      v129.size.CGFloat width = v52;
      v129.size.CGFloat height = v52;
      CGContextFillEllipseInRect(a1, v129);
      CGContextRestoreGState(a1);
    }
  }
  uint64_t v64 = *(void *)(a3 + 392);
  if (v64)
  {
    uint64_t v65 = *(void *)(v64 + 16);
    if (v65)
    {
      CGFloat v98 = *(double *)&v120[8];
      double v100 = *(double *)(a3 + 400);
      long long v66 = *(_OWORD *)&v120[16];
      long long v67 = *(_OWORD *)&v120[32];
      CGFloat v68 = *(double *)&v120[48];
      uint64_t v69 = swift_bridgeObjectRetain() + 56;
      do
      {
        CGPoint v124 = *(CGPoint *)(v69 - 8);
        v102.CGFloat a = v98;
        *(_OWORD *)&v102.CGFloat b = v66;
        *(_OWORD *)&v102.CGFloat d = v67;
        v102.tdouble y = v68;
        CGPoint v70 = CGPointApplyAffineTransform(v124, &v102);
        swift_bridgeObjectRetain();
        double v71 = (void *)sub_1C2A9DCF8();
        type metadata accessor for Key(0);
        sub_1C2942D7C();
        double v72 = (void *)sub_1C2A9DC58();
        objc_msgSend(v71, sel_sizeWithAttributes_, v72);
        double v74 = v73;
        double v76 = v75;

        double v77 = (void *)sub_1C2A9DCF8();
        double v78 = (void *)sub_1C2A9DC58();
        objc_msgSend(v77, sel_drawAtPoint_withAttributes_, v78, v70.x + v74 * -0.5, v70.y - v100 - v76);
        swift_bridgeObjectRelease();

        v69 += 32;
        --v65;
      }
      while (v65);
      swift_bridgeObjectRelease();
    }
  }
  uint64_t v79 = *(void *)(a3 + 416);
  if (v79)
  {
    uint64_t v80 = *(void *)(v79 + 16);
    if (v80)
    {
      CGFloat v99 = *(double *)&v120[8];
      double v101 = *(double *)(a3 + 424);
      long long v81 = *(_OWORD *)&v120[16];
      long long v82 = *(_OWORD *)&v120[32];
      CGFloat v83 = *(double *)&v120[48];
      uint64_t v84 = swift_bridgeObjectRetain() + 56;
      do
      {
        CGPoint v125 = *(CGPoint *)(v84 - 8);
        v102.CGFloat a = v99;
        *(_OWORD *)&v102.CGFloat b = v81;
        *(_OWORD *)&v102.CGFloat d = v82;
        v102.tdouble y = v83;
        CGPoint v85 = CGPointApplyAffineTransform(v125, &v102);
        swift_bridgeObjectRetain();
        double v86 = (void *)sub_1C2A9DCF8();
        type metadata accessor for Key(0);
        sub_1C2942D7C();
        double v87 = (void *)sub_1C2A9DC58();
        objc_msgSend(v86, sel_sizeWithAttributes_, v87);
        double v89 = v88;

        double v90 = (void *)sub_1C2A9DCF8();
        double v91 = (void *)sub_1C2A9DC58();
        objc_msgSend(v90, sel_drawAtPoint_withAttributes_, v91, v85.x + v89 * -0.5, v101 + v85.y);
        swift_bridgeObjectRelease();

        v84 += 32;
        --v80;
      }
      while (v80);
      swift_bridgeObjectRelease();
    }
  }
  switch(v96)
  {
    case 1:
    case 2:
    case 3:
      char v92 = sub_1C2A9E8D8();
      uint64_t v93 = swift_bridgeObjectRelease();
      if (v92) {
        goto LABEL_37;
      }
      LOBYTE(v102.a) = 2;
      MEMORY[0x1F4188790](v93);
      sub_1C295ABEC((unsigned __int8 *)&v102, (void (*)(double *, double *, void *, double, double))sub_1C295CB74);

      sub_1C295CB84((id *)v120);
      break;
    default:
      swift_bridgeObjectRelease();
LABEL_37:
      sub_1C295CB84((id *)v120);

      break;
  }
}

id *sub_1C295931C@<X0>(uint64_t *a1@<X0>, _OWORD *a2@<X1>, char a3@<W2>, char a4@<W3>, uint64_t a5@<X8>, double a6@<D1>)
{
  sub_1C295B080((uint64_t)a2, 2u, (uint64_t)v50);
  sub_1C295CA58((uint64_t)v50, (uint64_t)v51, (uint64_t)&qword_1EBB92470, (uint64_t)type metadata accessor for CGRect, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1C295CBD4);
  if (v52) {
    goto LABEL_10;
  }
  CGFloat v12 = *(double *)v51;
  CGFloat v13 = *(double *)&v51[1];
  CGFloat v14 = *(double *)&v51[2];
  CGFloat v15 = *(double *)&v51[3];
  sub_1C295CBD4(0, &qword_1EBB90DC8, (uint64_t (*)(uint64_t))sub_1C293FD2C, MEMORY[0x1E4FBBE00]);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C2AA6B00;
  long long v18 = a2[1];
  long long v17 = a2[2];
  *(_OWORD *)(inited + 32) = *a2;
  *(_OWORD *)(inited + 48) = v18;
  *(_OWORD *)(inited + 64) = v17;
  *(unsigned char *)(inited + 80) = a4;
  sub_1C292F15C((uint64_t)a2);
  sub_1C2A0E2F4(inited);
  double v20 = v19;
  char v22 = v21;
  swift_setDeallocating();
  sub_1C293FD2C();
  swift_arrayDestroy();
  if (v22)
  {
LABEL_10:
    long long v42 = *((_OWORD *)a1 + 1);
    *(_OWORD *)a5 = *(_OWORD *)a1;
    *(_OWORD *)(a5 + 16) = v42;
    *(_OWORD *)(a5 + 32) = *((_OWORD *)a1 + 2);
    *(void *)(a5 + 48) = a1[6];
  }
  else
  {
    double v23 = v20;
    v54.origin.CGFloat x = v12;
    v54.origin.double y = v13;
    v54.size.CGFloat width = v14;
    v54.size.CGFloat height = v15;
    v53.double y = CGRectGetMaxY(v54);
    CGFloat v24 = *((double *)a1 + 1);
    CGFloat v25 = *((double *)a1 + 2);
    CGFloat v26 = *((double *)a1 + 3);
    CGFloat v27 = *((double *)a1 + 4);
    CGFloat v28 = *((double *)a1 + 5);
    CGFloat v29 = *((double *)a1 + 6);
    t1.CGFloat a = v24;
    t1.CGFloat b = v25;
    t1.CGFloat c = v26;
    t1.CGFloat d = v27;
    t1.tCGFloat x = v28;
    t1.tdouble y = v29;
    v53.CGFloat x = 0.0;
    CGPoint v30 = CGPointApplyAffineTransform(v53, &t1);
    switch(a3)
    {
      case 1:
        double v23 = v20 * 0.5;
        goto LABEL_5;
      case 3:
        double v23 = 0.0;
        if (v30.y >= 0.0) {
          goto LABEL_10;
        }
        goto LABEL_8;
      default:
LABEL_5:
        if (v30.y >= v23) {
          goto LABEL_10;
        }
LABEL_8:
        if (a6 < 0.0) {
          goto LABEL_10;
        }
        CGFloat v31 = a6 / (v23 - v30.y + a6);
        CGFloat v32 = (v23 - v30.y) * v31;
        CGAffineTransformMakeScale(&t1, 1.0, v31);
        long long v44 = *(_OWORD *)&t1.c;
        long long v45 = *(_OWORD *)&t1.a;
        CGFloat v46 = v24;
        tCGFloat x = t1.tx;
        tdouble y = t1.ty;
        CGAffineTransformMakeTranslation(&t1, 0.0, v32);
        long long v35 = *(_OWORD *)&t1.a;
        long long v36 = *(_OWORD *)&t1.c;
        long long v37 = *(_OWORD *)&t1.tx;
        *(_OWORD *)&t1.CGFloat a = v45;
        *(_OWORD *)&t1.CGFloat c = v44;
        t1.tCGFloat x = tx;
        t1.tdouble y = ty;
        *(_OWORD *)&t2.CGFloat a = v35;
        *(_OWORD *)&t2.CGFloat c = v36;
        *(_OWORD *)&t2.tCGFloat x = v37;
        CGAffineTransformConcat(&v47, &t1, &t2);
        uint64_t v38 = *a1;
        t1.CGFloat a = v46;
        t1.CGFloat b = v25;
        t1.CGFloat c = v26;
        t1.CGFloat d = v27;
        t1.tCGFloat x = v28;
        t1.tdouble y = v29;
        CGAffineTransform t2 = v47;
        CGAffineTransformConcat(&v47, &t1, &t2);
        long long v39 = *(_OWORD *)&v47.a;
        long long v40 = *(_OWORD *)&v47.c;
        long long v41 = *(_OWORD *)&v47.tx;
        *(void *)a5 = v38;
        *(_OWORD *)(a5 + 8) = v39;
        *(_OWORD *)(a5 + 24) = v40;
        *(_OWORD *)(a5 + 40) = v41;
        break;
    }
  }
  return sub_1C295CC38((id *)a1);
}

void sub_1C2959628(double a1, CGFloat a2, uint64_t a3, uint64_t a4, uint64_t a5, CGFloat *a6, uint64_t a7, CGContext *a8, void *a9)
{
  CGFloat v15 = a6[2];
  CGFloat v16 = a6[3];
  CGFloat v17 = a6[4];
  CGFloat v19 = a6[5];
  CGFloat v18 = a6[6];
  v28.CGFloat a = a6[1];
  CGFloat a = v28.a;
  v28.double b = v15;
  v28.CGFloat c = v16;
  v28.CGFloat d = v17;
  v28.tCGFloat x = v19;
  v28.tCGFloat y = v18;
  uint64_t v20 = 0;
  CGFloat y = CGPointApplyAffineTransform(*(CGPoint *)(&a2 + -8), &v28).y;
  v28.CGFloat a = a;
  v28.double b = v15;
  v28.CGFloat c = v16;
  v28.CGFloat d = v17;
  v28.tCGFloat x = v19;
  v28.tCGFloat y = v18;
  v30.CGFloat x = 0.0;
  v30.CGFloat y = a2;
  CGPointApplyAffineTransform(v30, &v28);
  LOBYTE(v28.a) = 2;
  double v22 = DiagramConfiguration.LineWidth.toPoints()();
  CGContextSetLineWidth(a8, v22);
  CGContextSetLineCap(a8, kCGLineCapRound);
  double v23 = (CGColor *)objc_msgSend(a9, sel_CGColor);
  CGContextSetStrokeColorWithColor(a8, v23);

  sub_1C2A9E028();
  sub_1C2A9E038();
  CGContextStrokePath(a8);
  if (a4)
  {
    LOBYTE(v28.a) = *(unsigned char *)(a7 + 21);
    static DiagramGenerator.computeLeftMarginAnnotationBounds(at:annotation:above:textAttributes:)(a4, 1, (char *)&v28, (uint64_t)v29, 0.0, y);
    sub_1C295CA58((uint64_t)v29, (uint64_t)&v28, (uint64_t)&qword_1EBB92470, (uint64_t)type metadata accessor for CGRect, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1C295CBD4);
    if ((LOBYTE(v28.tx) & 1) == 0)
    {
      double v24 = v28.a;
      double b = v28.b;
      CGFloat v26 = (void *)sub_1C2A9DCF8();
      DiagramConfiguration.TextAttributes.toTextAttributes()();
      type metadata accessor for Key(0);
      sub_1C2942D7C();
      CGFloat v27 = (void *)sub_1C2A9DC58();
      swift_bridgeObjectRelease();
      objc_msgSend(v26, sel_drawAtPoint_withAttributes_, v27, v24, b);
    }
  }
}

void sub_1C2959874(CGFloat *a1, CGContext *a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, uint64_t a9, CGGradient *a10)
{
  CGFloat v27 = a7;
  CGFloat v28 = a8;
  v26.CGFloat x = a5;
  v26.CGFloat y = a6;
  uint64_t v15 = sub_1C2A9C8C8();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  CGFloat v18 = (char *)&v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  CGFloat v20 = a1[2];
  CGFloat v21 = a1[3];
  CGFloat v22 = a1[4];
  CGFloat v23 = a1[5];
  CGFloat v24 = a1[6];
  v29.CGFloat a = a1[1];
  CGFloat a = v29.a;
  v29.double b = v20;
  v29.CGFloat c = v21;
  v29.CGFloat d = v22;
  v29.tCGFloat x = v23;
  v29.tCGFloat y = v24;
  v30.CGFloat x = a3;
  v30.CGFloat y = a4;
  *(void *)&CGFloat v25 = *(_OWORD *)&CGPointApplyAffineTransform(v30, &v29);
  v29.CGFloat a = a;
  v29.double b = v20;
  v29.CGFloat c = v21;
  v29.CGFloat d = v22;
  v29.tCGFloat x = v23;
  v29.tCGFloat y = v24;
  CGPointApplyAffineTransform(v26, &v29);
  sub_1C2A9E028();
  sub_1C2A9E038();
  CGContextReplacePathWithStrokedPath(a2);
  CGContextSaveGState(a2);
  (*(void (**)(char *, void, uint64_t))(v16 + 104))(v18, *MEMORY[0x1E4F1DA40], v15);
  sub_1C2A9E018();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  v31.CGFloat x = v25;
  v31.CGFloat y = v27;
  v32.CGFloat y = v28;
  v32.CGFloat x = v25;
  CGContextDrawLinearGradient(a2, a10, v31, v32, 0);
  CGContextRestoreGState(a2);
}

void sub_1C2959A40(CGFloat *a1, double a2, double a3, CGFloat a4, CGFloat a5, CGFloat a6, uint64_t a7, CGContext *a8, void *a9)
{
  CGFloat v14 = a1[2];
  CGFloat v16 = a1[3];
  CGFloat v15 = a1[4];
  CGFloat v18 = a1[5];
  CGFloat v17 = a1[6];
  v21.CGFloat a = a1[1];
  CGFloat a = v21.a;
  v21.double b = v14;
  v21.CGFloat c = v16;
  v21.CGFloat d = v15;
  v21.tCGFloat x = v18;
  v21.tCGFloat y = v17;
  CGPointApplyAffineTransform(*(CGPoint *)&a2, &v21);
  v21.CGFloat a = a;
  v21.double b = v14;
  v21.CGFloat c = v16;
  v21.CGFloat d = v15;
  v21.tCGFloat x = v18;
  v21.tCGFloat y = v17;
  v22.CGFloat x = a4;
  v22.CGFloat y = a5;
  CGPointApplyAffineTransform(v22, &v21);
  CGContextSetLineWidth(a8, a6);
  CGContextSetLineCap(a8, kCGLineCapRound);
  CGFloat v19 = (CGColor *)objc_msgSend(a9, sel_CGColor);
  CGContextSetStrokeColorWithColor(a8, v19);

  sub_1C2A9E028();
  sub_1C2A9E038();
  CGContextStrokePath(a8);
}

uint64_t sub_1C2959B40(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (*a3)
  {
    uint64_t v14 = *a3;
    long long v11 = *(_OWORD *)(a3 + 3);
    long long v15 = *(_OWORD *)(a3 + 1);
    long long v16 = v11;
    double v12 = DiagramConfiguration.LineWidth.toPoints()();
    return sub_1C2A12EC8(a5, a6, &v14, a7, *(unsigned __int8 *)(a4 + 21), v12, -2.0, -8.0, -2.0, -8.0, 1.0, 1.0);
  }
  return result;
}

uint64_t DiagramDistribution.__allocating_init(distributionConfiguration:distributionData:hbxViewControllerFactory:)(char *a1, uint64_t a2, void *a3)
{
  uint64_t v6 = swift_allocObject();
  DiagramDistribution.init(distributionConfiguration:distributionData:hbxViewControllerFactory:)(a1, a2, a3);
  return v6;
}

uint64_t DiagramDistribution.init(distributionConfiguration:distributionData:hbxViewControllerFactory:)(char *a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  char v5 = *a1;
  char v6 = a1[1];
  char v67 = v6;
  char v7 = a1[2];
  char v51 = v7;
  char v8 = a1[3];
  char v65 = v8;
  char v9 = a1[4];
  char v63 = v9;
  char v10 = a1[5];
  char v61 = v10;
  char v11 = a1[6];
  char v12 = a1[7];
  char v49 = v12;
  unsigned __int8 v13 = a1[18];
  unsigned __int16 v14 = *((_WORD *)a1 + 8);
  unsigned __int16 v46 = v14;
  int v42 = v14 | (v13 << 16);
  uint64_t v15 = *((void *)a1 + 3);
  uint64_t v44 = *((void *)a1 + 4);
  double v58 = *((double *)a1 + 5);
  uint64_t v59 = *((void *)a1 + 1);
  uint64_t v71 = *((void *)a1 + 6);
  double v72 = *((double *)a1 + 7);
  char v16 = a1[64];
  char v73 = v16;
  unsigned __int16 v17 = *(_WORD *)(a1 + 77);
  unsigned int v18 = *(_DWORD *)(a1 + 73);
  unint64_t v57 = v18 | ((unint64_t)v17 << 32);
  char v19 = a1[79];
  uint64_t v20 = *((void *)a1 + 10);
  char v47 = a1[88];
  uint64_t v74 = *(void *)(a2 + 8);
  uint64_t v75 = *(void *)(a1 + 65);
  uint64_t v21 = *(void *)(a2 + 24);
  uint64_t v69 = *(void *)(a2 + 16);
  char v22 = *(unsigned char *)(a2 + 32);
  char v54 = v22;
  uint64_t v55 = *(void *)a2;
  uint64_t v56 = *(void *)(a2 + 40);
  *(unsigned char *)(v4 + 16) = *a1;
  *(unsigned char *)(v4 + 17) = v6;
  *(unsigned char *)(v4 + 18) = v7;
  *(unsigned char *)(v4 + 19) = v8;
  *(unsigned char *)(v4 + 20) = v9;
  *(unsigned char *)(v4 + 21) = v10;
  *(unsigned char *)(v4 + 22) = v11;
  char v23 = v11;
  char v50 = v11;
  *(unsigned char *)(v4 + 23) = v12;
  *(void *)(v4 + 24) = v59;
  unsigned __int8 v45 = v13;
  *(unsigned char *)(v4 + 34) = v13;
  *(_WORD *)(v4 + 32) = v14;
  uint64_t v70 = v15;
  *(void *)(v4 + 40) = v15;
  *(void *)(v4 + 48) = v44;
  *(double *)(v4 + 56) = v58;
  *(void *)(v4 + 64) = v71;
  *(double *)(v4 + 72) = v72;
  *(unsigned char *)(v4 + 80) = v16;
  *(void *)(v4 + 81) = v75;
  *(_DWORD *)(v4 + 89) = v18;
  *(_WORD *)(v4 + 93) = v17;
  *(unsigned char *)(v4 + 95) = v19;
  uint64_t v48 = v20;
  *(void *)(v4 + 96) = v20;
  *(unsigned char *)(v4 + 104) = v47;
  *(void *)(v4 + 112) = v55;
  *(void *)(v4 + 120) = v74;
  *(void *)(v4 + 128) = v69;
  *(void *)(v4 + 136) = v21;
  uint64_t v68 = v21;
  *(unsigned char *)(v4 + 144) = v22;
  *(void *)(v4 + 152) = v56;
  type metadata accessor for DiagramDistribution();
  char v104 = v5;
  char v105 = v67;
  char v106 = v51;
  char v107 = v65;
  char v108 = v63;
  char v109 = v61;
  char v110 = v23;
  char v111 = v49;
  uint64_t v112 = v59;
  unsigned __int8 v114 = v45;
  unsigned __int16 v113 = v46;
  uint64_t v115 = v15;
  uint64_t v116 = v44;
  double v117 = v58;
  uint64_t v118 = v71;
  double v119 = v72;
  char v120 = v16;
  uint64_t v121 = v75;
  unsigned __int16 v123 = v17;
  unsigned int v122 = v18;
  char v124 = v19;
  uint64_t v125 = v20;
  char v126 = v47;
  *(void *)&long long v84 = v55;
  *((void *)&v84 + 1) = v74;
  *(void *)&long long v85 = v69;
  *((void *)&v85 + 1) = v21;
  LOBYTE(v86) = v54;
  uint64_t v87 = v56;
  swift_bridgeObjectRetain();
  sub_1C295B5FC((uint64_t)&v104, &v84, (uint64_t)v103);
  sub_1C295CA58((uint64_t)v103, v4 + 160, (uint64_t)&unk_1EBB906C8, (uint64_t)&type metadata for DiagramDistribution.DiagramDistributionMinMax, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1C29359AC);
  char v104 = v5;
  char v105 = v67;
  char v106 = v51;
  char v107 = v65;
  char v108 = v63;
  char v109 = v61;
  char v110 = v50;
  char v111 = v49;
  uint64_t v112 = v59;
  unsigned __int8 v114 = v45;
  unsigned __int16 v113 = v46;
  uint64_t v115 = v15;
  uint64_t v116 = v44;
  double v117 = v58;
  uint64_t v118 = v71;
  double v119 = v72;
  char v120 = v16;
  uint64_t v121 = v75;
  unsigned __int16 v123 = v17;
  unsigned int v122 = v18;
  char v124 = v19;
  uint64_t v125 = v20;
  char v126 = v47;
  uint64_t v97 = v55;
  uint64_t v98 = v74;
  uint64_t v99 = v69;
  uint64_t v100 = v21;
  char v101 = v54;
  uint64_t v102 = v56;
  sub_1C295A330((uint64_t)&v104, (uint64_t)&v97, (uint64_t)&v84);
  uint64_t v24 = v84;
  if ((void)v84 == 1)
  {
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    *(void *)(v4 + 392) = 0;
    *(void *)(v4 + 400) = 0;
    *(void *)(v4 + 408) = 0;
  }
  else
  {
    uint64_t v28 = *((void *)&v84 + 1);
    uint64_t v25 = *((void *)&v85 + 1);
    uint64_t v29 = v85;
    uint64_t v26 = v86;
    uint64_t v27 = v87;
    sub_1C295C3CC(v84);
    sub_1C295C3CC(v25);
    sub_1C295C40C(v25);
    *(void *)(v4 + 392) = v24;
    *(void *)(v4 + 400) = v28;
    *(void *)(v4 + 408) = v29;
    sub_1C295C40C(v24);
  }
  *(void *)(v4 + 416) = v25;
  *(void *)(v4 + 424) = v26;
  *(void *)(v4 + 432) = v27;
  LOBYTE(v84) = v5;
  BYTE1(v84) = v67;
  BYTE2(v84) = v51;
  BYTE3(v84) = v65;
  BYTE4(v84) = v63;
  BYTE5(v84) = v61;
  BYTE6(v84) = v50;
  BYTE7(v84) = v49;
  *((void *)&v84 + 1) = v59;
  BYTE2(v85) = BYTE2(v42);
  LOWORD(v85) = v42;
  *((void *)&v85 + 1) = v70;
  uint64_t v86 = v44;
  uint64_t v87 = *(void *)&v58;
  uint64_t v88 = v71;
  double v89 = v72;
  char v90 = v73;
  uint64_t v91 = v75;
  __int16 v93 = WORD2(v57);
  int v92 = v57;
  char v94 = v19;
  uint64_t v95 = v48;
  char v96 = v47;
  sub_1C295CA58(v4 + 160, (uint64_t)&v104, (uint64_t)&unk_1EBB906C8, (uint64_t)&type metadata for DiagramDistribution.DiagramDistributionMinMax, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1C29359AC);
  uint64_t v30 = *(void *)(v4 + 392);
  uint64_t v31 = *(void *)(v4 + 400);
  uint64_t v32 = *(void *)(v4 + 408);
  v83[0] = v30;
  v83[1] = v31;
  v83[2] = v32;
  v82[0] = v25;
  v82[1] = v26;
  v82[2] = v27;
  uint64_t v97 = v55;
  uint64_t v98 = v74;
  uint64_t v99 = v69;
  uint64_t v100 = v68;
  char v101 = v54;
  uint64_t v102 = v56;
  sub_1C295C3CC(v30);
  sub_1C295C3CC(v25);
  sub_1C295BCF0((char *)&v84, (uint64_t)&v104, v83, v82, &v97, (double *)&v76);
  uint64_t v60 = v77;
  uint64_t v62 = v76;
  uint64_t v52 = v79;
  uint64_t v53 = v78;
  uint64_t v64 = v81;
  uint64_t v66 = v80;
  sub_1C295C40C(v25);
  sub_1C295C40C(v30);
  *(void *)&long long v84 = v55;
  *((void *)&v84 + 1) = v74;
  *(void *)&long long v85 = v69;
  *((void *)&v85 + 1) = v68;
  LOBYTE(v86) = v54;
  uint64_t v87 = v56;
  __C::CGRect v127 = DiagramData.diagramBounds(forceNonZeroSize:)(1);
  double x = v127.origin.x;
  double y = v127.origin.y;
  double width = v127.size.width;
  double height = v127.size.height;
  swift_bridgeObjectRelease();
  if (v70 != 35)
  {
    double v37 = y - v58;
    if (v71) {
      double v37 = -0.0;
    }
    double v38 = height + v37;
    if ((v71 & 1) == 0) {
      double y = v58;
    }
    double v39 = v72 - (y + v38);
    if (v73) {
      double v39 = -0.0;
    }
    double height = v38 + v39;
  }
  uint64_t v76 = v75;
  LODWORD(v77) = v57;
  WORD2(v77) = WORD2(v57);
  uint64_t v97 = v62;
  uint64_t v98 = v60;
  uint64_t v99 = v53;
  uint64_t v100 = v52;
  char v101 = 0;
  type metadata accessor for DiagramAxis();
  long long v84 = 0u;
  long long v85 = 0u;
  uint64_t v86 = 0;
  swift_allocObject();
  sub_1C2932820(&v76, (uint64_t)&v97, 0, 0, v66, v64, 0, a3, x, y, width, height, (uint64_t)&v84);
  *(void *)(v4 + 440) = v40;
  return v4;
}

uint64_t sub_1C295A330@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4 = *(unsigned __int16 *)(result + 16) | (*(unsigned __int8 *)(result + 18) << 16);
  if ((v4 & 0x800000) == 0) {
    goto LABEL_12;
  }
  if ((v4 & 0xFEE0E0) == 0xFEE0E0) {
    goto LABEL_12;
  }
  uint64_t v5 = *(char *)result;
  uint64_t v6 = *(char *)(result + 1);
  uint64_t v75 = *(void *)(result + 80);
  int v74 = *(unsigned __int8 *)(result + 88);
  uint64_t v7 = *(void *)(a2 + 40);
  char v8 = *(unsigned char *)(a2 + 32);
  uint64_t v9 = *(void *)(result + 8);
  v79[0] = *(unsigned char *)(result + 7);
  long long v10 = *(_OWORD *)(a2 + 16);
  v76[0] = *(_OWORD *)a2;
  v76[1] = v10;
  char v77 = v8;
  uint64_t v78 = v7;
  uint64_t result = sub_1C295B4C0(v79, (uint64_t)v76);
  if (!result) {
    goto LABEL_12;
  }
  uint64_t v11 = result;
  if (v9 == 25)
  {
    unint64_t v12 = 0;
  }
  else
  {
    LOBYTE(v76[0]) = v9;
    unint64_t v12 = DiagramConfiguration.TextAttributes.toTextAttributes()();
  }
  if (BYTE1(v9) == 25)
  {
    unint64_t v13 = 0;
  }
  else
  {
    LOBYTE(v76[0]) = BYTE1(v9);
    unint64_t v13 = DiagramConfiguration.TextAttributes.toTextAttributes()();
  }
  unint64_t v73 = v13;
  if (!(v12 | v13))
  {
    uint64_t result = swift_bridgeObjectRelease();
LABEL_12:
    *(void *)a3 = 1;
    *(_OWORD *)(a3 + 8) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    *(void *)(a3 + 40) = 0;
    return result;
  }
  uint64_t v14 = *(void *)(v11 + 16);
  if (!v14)
  {
    uint64_t result = swift_bridgeObjectRelease();
    unsigned int v18 = (void *)MEMORY[0x1E4FBC860];
    uint64_t v21 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_36;
  }
  uint64_t v71 = v5;
  uint64_t v72 = v6;
  unint64_t v70 = v12;
  double v16 = *(double *)(v11 + 32);
  double v15 = *(double *)(v11 + 40);
  uint64_t v17 = v14 - 1;
  if (v14 == 1)
  {
    unsigned int v18 = (void *)MEMORY[0x1E4FBC860];
    double v19 = v15;
    double v20 = v16;
    uint64_t v21 = (void *)MEMORY[0x1E4FBC860];
LABEL_16:
    swift_bridgeObjectRelease();
    *(void *)&v76[0] = v75;
    BYTE8(v76[0]) = v74;
    char v22 = (void *)sub_1C2A9C8D8();
    Swift::String_optional v23 = DiagramConfiguration.ValueFormatter.format(value:)((NSNumber)v22);
    object = v23.value._object;

    if (v23.value._object) {
      uint64_t countAndFlagsBits = v23.value._countAndFlagsBits;
    }
    else {
      uint64_t countAndFlagsBits = 1701736270;
    }
    if (!v23.value._object) {
      object = (void *)0xE400000000000000;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unsigned int v18 = sub_1C299CC08(0, v18[2] + 1, 1, v18);
    }
    unint64_t v12 = v70;
    unint64_t v27 = v18[2];
    unint64_t v26 = v18[3];
    if (v27 >= v26 >> 1) {
      unsigned int v18 = sub_1C299CC08((void *)(v26 > 1), v27 + 1, 1, v18);
    }
    v18[2] = v27 + 1;
    uint64_t v28 = (double *)&v18[4 * v27];
    *((void *)v28 + 4) = countAndFlagsBits;
    *((void *)v28 + 5) = object;
    v28[6] = v20;
    v28[7] = v19;
    *(void *)&v76[0] = v75;
    BYTE8(v76[0]) = v74;
    uint64_t v29 = (void *)sub_1C2A9C8D8();
    Swift::String_optional v30 = DiagramConfiguration.ValueFormatter.format(value:)((NSNumber)v29);
    uint64_t v31 = v30.value._object;

    if (v30.value._object) {
      uint64_t v32 = v30.value._countAndFlagsBits;
    }
    else {
      uint64_t v32 = 1701736270;
    }
    if (!v30.value._object) {
      uint64_t v31 = (void *)0xE400000000000000;
    }
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_1C299CC08(0, v21[2] + 1, 1, v21);
      uint64_t v21 = (void *)result;
    }
    unint64_t v34 = v21[2];
    unint64_t v33 = v21[3];
    if (v34 >= v33 >> 1)
    {
      uint64_t result = (uint64_t)sub_1C299CC08((void *)(v33 > 1), v34 + 1, 1, v21);
      uint64_t v21 = (void *)result;
    }
    v21[2] = v34 + 1;
    long long v35 = (double *)&v21[4 * v34];
    *((void *)v35 + 4) = v32;
    *((void *)v35 + 5) = v31;
    v35[6] = v16;
    v35[7] = v15;
    uint64_t v5 = v71;
    uint64_t v6 = v72;
LABEL_36:
    double v36 = dbl_1C2AA6C00[v5];
    double v37 = dbl_1C2AA6C30[v6];
    double v38 = v36 + v37;
    if (v12)
    {
      double v39 = v36 + v37;
      unint64_t v40 = v73;
      if (v73)
      {
LABEL_39:
        *(void *)a3 = v18;
        *(double *)(a3 + 8) = v39;
        *(void *)(a3 + 16) = v12;
        *(void *)(a3 + 24) = v21;
        *(double *)(a3 + 32) = v38;
        *(void *)(a3 + 40) = v40;
        return result;
      }
    }
    else
    {
      uint64_t result = swift_bridgeObjectRelease();
      unsigned int v18 = 0;
      double v39 = 0.0;
      unint64_t v40 = v73;
      if (v73) {
        goto LABEL_39;
      }
    }
    uint64_t result = swift_bridgeObjectRelease();
    unint64_t v40 = v73;
    uint64_t v21 = 0;
    double v38 = 0.0;
    goto LABEL_39;
  }
  long long v41 = (double *)(v11 + 56);
  unsigned int v18 = (void *)MEMORY[0x1E4FBC860];
  double v42 = v15;
  double v43 = v16;
  double v19 = v15;
  double v20 = v16;
  uint64_t v21 = (void *)MEMORY[0x1E4FBC860];
  while (1)
  {
    double v16 = *(v41 - 1);
    double v15 = *v41;
    if (vabdd_f64(v16, v20) < 0.000001)
    {
      if (v15 > v19) {
        double v19 = *v41;
      }
      if (v42 < v15) {
        double v15 = v42;
      }
      double v16 = v43;
      goto LABEL_48;
    }
    uint64_t v44 = (void *)sub_1C2A9C8D8();
    if (!v74)
    {
      id v47 = (id)HKNumberFormatterWithDecimalPrecision();
      if (v47)
      {
        uint64_t v48 = v47;
        id v46 = objc_msgSend(v47, sel_stringFromNumber_, v44);

        if (v46)
        {
LABEL_56:
          uint64_t v49 = sub_1C2A9DD28();
          unint64_t v51 = v50;

          goto LABEL_61;
        }
      }
      goto LABEL_60;
    }
    if (v75)
    {
      id v45 = objc_msgSend(self, sel_hk_percentNumberFormatter);
      id v46 = objc_msgSend(v45, sel_stringFromNumber_, v44);

      if (v46) {
        goto LABEL_56;
      }
      goto LABEL_60;
    }
    uint64_t result = (uint64_t)(id)HKIntegerFormatter();
    if (!result) {
      break;
    }
    uint64_t v52 = (void *)result;
    id v53 = objc_msgSend((id)result, sel_stringFromNumber_, v44);

    if (v53)
    {
      uint64_t v49 = sub_1C2A9DD28();
      unint64_t v51 = v54;

      goto LABEL_61;
    }
LABEL_60:

    unint64_t v51 = 0xE400000000000000;
    uint64_t v49 = 1701736270;
LABEL_61:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unsigned int v18 = sub_1C299CC08(0, v18[2] + 1, 1, v18);
    }
    unint64_t v56 = v18[2];
    unint64_t v55 = v18[3];
    if (v56 >= v55 >> 1) {
      unsigned int v18 = sub_1C299CC08((void *)(v55 > 1), v56 + 1, 1, v18);
    }
    v18[2] = v56 + 1;
    unint64_t v57 = (double *)&v18[4 * v56];
    *((void *)v57 + 4) = v49;
    *((void *)v57 + 5) = v51;
    v57[6] = v20;
    v57[7] = v19;
    double v58 = (void *)sub_1C2A9C8D8();
    if (v74)
    {
      if (v75)
      {
        id v59 = objc_msgSend(self, sel_hk_percentNumberFormatter);
        id v60 = objc_msgSend(v59, sel_stringFromNumber_, v58);

        if (!v60) {
          goto LABEL_74;
        }
        uint64_t v61 = sub_1C2A9DD28();
        unint64_t v63 = v62;

        goto LABEL_75;
      }
      uint64_t result = (uint64_t)(id)HKIntegerFormatter();
      if (!result) {
        goto LABEL_81;
      }
    }
    else
    {
      uint64_t result = (uint64_t)(id)HKNumberFormatterWithDecimalPrecision();
      if (!result) {
        goto LABEL_74;
      }
    }
    uint64_t v64 = (void *)result;
    id v65 = objc_msgSend((id)result, sel_stringFromNumber_, v58);

    if (!v65)
    {
LABEL_74:

      unint64_t v63 = 0xE400000000000000;
      uint64_t v61 = 1701736270;
      goto LABEL_75;
    }
    uint64_t v61 = sub_1C2A9DD28();
    unint64_t v63 = v66;

LABEL_75:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v21 = sub_1C299CC08(0, v21[2] + 1, 1, v21);
    }
    unint64_t v68 = v21[2];
    unint64_t v67 = v21[3];
    if (v68 >= v67 >> 1) {
      uint64_t v21 = sub_1C299CC08((void *)(v67 > 1), v68 + 1, 1, v21);
    }
    v21[2] = v68 + 1;
    uint64_t v69 = (double *)&v21[4 * v68];
    *((void *)v69 + 4) = v61;
    *((void *)v69 + 5) = v63;
    v69[6] = v43;
    v69[7] = v42;
    double v19 = v15;
    double v20 = v16;
    double v43 = v16;
LABEL_48:
    v41 += 2;
    double v42 = v15;
    if (!--v17) {
      goto LABEL_16;
    }
  }
  __break(1u);
LABEL_81:
  __break(1u);
  return result;
}

unsigned __int8 *sub_1C295AA44(unsigned __int8 *result, uint64_t (*a2)(void))
{
  uint64_t v3 = *(void *)(v2 + 152);
  uint64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    unsigned __int8 v6 = *result;
    uint64_t v7 = v3 + 32;
    uint64_t result = (unsigned __int8 *)swift_bridgeObjectRetain();
    unint64_t v8 = 0;
    unsigned __int8 v18 = v6;
    do
    {
      if (v8 >= *(void *)(v3 + 16)) {
        goto LABEL_23;
      }
      uint64_t v9 = *(void *)(v7 + 8 * v8);
      if (*(void *)(v9 + 16))
      {
        swift_bridgeObjectRetain();
        unint64_t v10 = sub_1C293DDF4(v6);
        if (v11)
        {
          uint64_t v12 = *(void *)(*(void *)(v9 + 56) + 40 * v10);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          uint64_t result = (unsigned __int8 *)swift_bridgeObjectRelease();
          unint64_t v13 = *(void *)(v12 + 16);
          if (v13)
          {
            uint64_t v14 = v12 + 56;
            unint64_t v15 = 1;
            while (1)
            {
              unint64_t v17 = *(void *)(v12 + 16);
              if (v15 - 1 >= v17) {
                break;
              }
              if (v15 < v13 && v15 >= v17) {
                goto LABEL_22;
              }
              uint64_t result = (unsigned __int8 *)a2();
              unint64_t v16 = v15 + 1;
              v15 += 2;
              v14 += 32;
              if (v16 >= v13)
              {
                unsigned __int8 v6 = v18;
                uint64_t v7 = v3 + 32;
                goto LABEL_4;
              }
            }
            __break(1u);
LABEL_22:
            __break(1u);
LABEL_23:
            __break(1u);
            return result;
          }
        }
LABEL_4:
        uint64_t result = (unsigned __int8 *)swift_bridgeObjectRelease();
      }
      ++v8;
    }
    while (v8 != v4);
    return (unsigned __int8 *)swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1C295ABEC(unsigned __int8 *a1, void (*a2)(double *, double *, void *, double, double))
{
  unsigned __int8 v4 = *a1;
  char v5 = *(unsigned char *)(v2 + 144);
  uint64_t v6 = *(void *)(v2 + 152);
  long long v7 = *(_OWORD *)(v2 + 128);
  v10[0] = *(_OWORD *)(v2 + 112);
  v10[1] = v7;
  char v11 = v5;
  uint64_t v12 = v6;
  unsigned __int8 v9 = v4;
  swift_bridgeObjectRetain();
  sub_1C29F49E4((uint64_t)v10, &v9, a2);
  return swift_bridgeObjectRelease();
}

uint64_t DiagramDistribution.deinit()
{
  swift_bridgeObjectRelease();
  sub_1C295CA58(v0 + 160, (uint64_t)v2, (uint64_t)&unk_1EBB906C8, (uint64_t)&type metadata for DiagramDistribution.DiagramDistributionMinMax, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1C29359AC);
  sub_1C295C44C(v2);
  sub_1C295C40C(*(void *)(v0 + 392));
  sub_1C295C40C(*(void *)(v0 + 416));
  swift_release();
  return v0;
}

uint64_t DiagramDistribution.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  sub_1C295CA58(v0 + 160, (uint64_t)v2, (uint64_t)&unk_1EBB906C8, (uint64_t)&type metadata for DiagramDistribution.DiagramDistributionMinMax, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1C29359AC);
  sub_1C295C44C(v2);
  sub_1C295C40C(*(void *)(v0 + 392));
  sub_1C295C40C(*(void *)(v0 + 416));
  swift_release();
  return swift_deallocClassInstance();
}

double sub_1C295ADE8()
{
  return sub_1C293CBC4();
}

double sub_1C295AE10()
{
  return sub_1C29582F8();
}

void (*sub_1C295AE34())(CGContext *a1, uint64_t a2, double a3, double a4)
{
  return sub_1C295B054;
}

uint64_t sub_1C295AE6C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  double v2 = *(double *)(a1 + 32);
  uint64_t v3 = v1 - 1;
  if (v1 != 1)
  {
    unsigned __int8 v4 = (double *)(a1 + 40);
    do
    {
      double v5 = *v4++;
      double v6 = v5;
      if (v2 < v5) {
        double v2 = v6;
      }
      --v3;
    }
    while (v3);
  }
  return *(void *)&v2;
}

uint64_t sub_1C295AEB0(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (v1)
  {
    sub_1C2932680(0, v1, 0);
    uint64_t v2 = v12;
    unsigned __int8 v4 = (void *)(a1 + 40);
    do
    {
      if (*v4)
      {
        swift_bridgeObjectRetain();
        double v5 = (void *)sub_1C2A9DCF8();
        type metadata accessor for Key(0);
        sub_1C2942D7C();
        double v6 = (void *)sub_1C2A9DC58();
        objc_msgSend(v5, sel_sizeWithAttributes_, v6);
        uint64_t v8 = v7;
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v8 = 0;
      }
      unint64_t v10 = *(void *)(v12 + 16);
      unint64_t v9 = *(void *)(v12 + 24);
      if (v10 >= v9 >> 1) {
        sub_1C2932680(v9 > 1, v10 + 1, 1);
      }
      *(void *)(v12 + 16) = v10 + 1;
      *(void *)(v12 + 8 * v10 + 32) = v8;
      v4 += 5;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_1C295B01C()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 32, 7);
}

void sub_1C295B054(CGContext *a1, uint64_t a2, double a3, double a4)
{
  sub_1C29585A4(a1, a2, *(void *)(v4 + 16), a3, a4);
}

uint64_t type metadata accessor for DiagramDistribution()
{
  return self;
}

BOOL sub_1C295B080@<W0>(uint64_t a1@<X0>, unsigned __int8 a2@<W1>, uint64_t a3@<X8>)
{
  CGFloat v6 = *MEMORY[0x1E4F1DB20];
  CGFloat v7 = *(double *)(MEMORY[0x1E4F1DB20] + 8);
  CGFloat v8 = *(double *)(MEMORY[0x1E4F1DB20] + 16);
  CGFloat v9 = *(double *)(MEMORY[0x1E4F1DB20] + 24);
  __C::CGRect v39 = DiagramData.diagramBounds(forceNonZeroSize:)(1);
  uint64_t v10 = a1;
  CGFloat r2 = v39.size.width;
  uint64_t v11 = *(void *)(a1 + 40);
  uint64_t v12 = *(void *)(v11 + 16);
  double x = v6;
  double y = v7;
  double width = v8;
  double height = v9;
  if (!v12) {
    goto LABEL_14;
  }
  uint64_t v33 = v10;
  uint64_t v34 = a3;
  unint64_t v17 = (uint64_t *)(v11 + 32);
  sub_1C292F15C(v10);
  double x = v6;
  double y = v7;
  double width = v8;
  double height = v9;
  unsigned __int8 v37 = a2;
  double v35 = v8;
  double v36 = v9;
  do
  {
    uint64_t v18 = *v17;
    if (*(void *)(*v17 + 16))
    {
      swift_bridgeObjectRetain();
      unint64_t v19 = sub_1C293DDF4(a2);
      if ((v20 & 1) == 0) {
        goto LABEL_3;
      }
      uint64_t v21 = *(double **)(*(void *)(v18 + 56) + 40 * v19);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v22 = *((void *)v21 + 2);
      if (!v22)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_3:
        swift_bridgeObjectRelease();
        goto LABEL_4;
      }
      double v23 = v7;
      double v24 = v6;
      CGFloat v25 = v21[4];
      CGFloat v26 = v21[5];
      if (v22 == 1)
      {
        uint64_t v27 = 0;
      }
      else
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v27 = (uint64_t)v21;
      }
      v43.size.double height = 0.0;
      v40.origin.double x = x;
      v40.origin.double y = y;
      v40.size.double width = width;
      v40.size.double height = height;
      v43.origin.double x = v25;
      v43.origin.double y = v26;
      v43.size.double width = r2;
      CGRect v41 = CGRectUnion(v40, v43);
      double x = v41.origin.x;
      double y = v41.origin.y;
      double width = v41.size.width;
      double height = v41.size.height;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1C293D518(v27);
      CGFloat v6 = v24;
      CGFloat v7 = v23;
      CGFloat v8 = v35;
      CGFloat v9 = v36;
      a2 = v37;
    }
LABEL_4:
    ++v17;
    --v12;
  }
  while (v12);
  sub_1C2945194(v33);
  a3 = v34;
LABEL_14:
  v42.origin.double x = x;
  v42.origin.double y = y;
  v42.size.double width = width;
  v42.size.double height = height;
  v44.origin.double x = v6;
  v44.origin.double y = v7;
  v44.size.double width = v8;
  v44.size.double height = v9;
  BOOL result = CGRectEqualToRect(v42, v44);
  double v29 = 0.0;
  if (result) {
    double v30 = 0.0;
  }
  else {
    double v30 = x;
  }
  if (result) {
    double v31 = 0.0;
  }
  else {
    double v31 = y;
  }
  if (result) {
    double v32 = 0.0;
  }
  else {
    double v32 = width;
  }
  if (!result) {
    double v29 = height;
  }
  *(double *)a3 = v30;
  *(double *)(a3 + 8) = v31;
  *(double *)(a3 + 16) = v32;
  *(double *)(a3 + 24) = v29;
  *(unsigned char *)(a3 + 32) = result;
  return result;
}

CGGradientRef sub_1C295B314(uint64_t a1, void *a2)
{
  double v3 = *(double *)(a1 + 8);
  int v4 = *(unsigned __int8 *)(a1 + 24);
  int v5 = *(unsigned __int8 *)(a1 + 40);
  CGColorSpaceRef DeviceRGB = CGColorSpaceCreateDeviceRGB();
  Class isa = DiagramConfiguration.Color.toColor()().super.isa;
  id v8 = [(objc_class *)isa CGColor];

  id v9 = objc_msgSend(a2, sel_CGColor);
  sub_1C29359AC(0, (unint64_t *)&qword_1EBB91978, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_1C2AA6B10;
  *(void *)(v10 + 32) = v8;
  *(void *)(v10 + 40) = v9;
  *(void *)(v10 + 48) = v9;
  *(void *)(v10 + 56) = v8;
  *(void *)&v20[4] = v10;
  sub_1C2A9DEA8();
  double v11 = 0.0;
  if (!v5) {
    double v11 = v3;
  }
  double v12 = 1.0;
  if (!v4) {
    double v12 = 1.0 - v3;
  }
  v20[0] = 0.0;
  v20[1] = v11;
  v20[2] = v12;
  v20[3] = 1.0;
  type metadata accessor for CGColor(0);
  id v13 = v8;
  id v14 = v9;
  id v15 = v13;
  unint64_t v16 = DeviceRGB;
  CFArrayRef v17 = (const __CFArray *)sub_1C2A9DE88();
  swift_bridgeObjectRelease();
  CGGradientRef v18 = CGGradientCreateWithColors(v16, v17, v20);

  return v18;
}

uint64_t sub_1C295B4C0(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  uint64_t v3 = *(void *)(v2 + 16);
  if (!v3) {
    return 0;
  }
  unsigned __int8 v4 = *a1;
  swift_bridgeObjectRetain();
  uint64_t v5 = 0;
  for (uint64_t i = 0; i != v3; ++i)
  {
    uint64_t v7 = *(void *)(v2 + 8 * i + 32);
    if (*(void *)(v7 + 16))
    {
      swift_bridgeObjectRetain();
      unint64_t v8 = sub_1C293DDF4(v4);
      if (v9)
      {
        uint64_t v10 = *(void *)(*(void *)(v7 + 56) + 40 * v8);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        if (v5)
        {
          uint64_t v11 = swift_bridgeObjectRetain();
          sub_1C29A6E40(v11);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v5 = v10;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
  }
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_1C295B5FC@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6 = *(unsigned __int16 *)(a1 + 16) | (*(unsigned __int8 *)(a1 + 18) << 16);
  if ((v6 & 0x800000) != 0) {
    goto LABEL_25;
  }
  uint64_t v7 = &v107;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 80);
  uint64_t v10 = *(unsigned __int8 *)(a1 + 88);
  uint64_t v11 = *((void *)a2 + 5);
  char v12 = *((unsigned char *)a2 + 32);
  LOBYTE(v95[0]) = *(unsigned char *)(a1 + 7);
  long long v13 = a2[1];
  long long v107 = *a2;
  long long v108 = v13;
  char v109 = v12;
  uint64_t v110 = v11;
  uint64_t v14 = sub_1C295B4C0((unsigned __int8 *)v95, (uint64_t)&v107);
  if (!v14) {
    goto LABEL_25;
  }
  uint64_t object = v14;
  uint64_t v16 = *(void *)(v14 + 16);
  if (!v16) {
    goto LABEL_24;
  }
  double v17 = *(double *)(v14 + 32);
  double v18 = *(double *)(v14 + 40);
  if (v16 != 1)
  {
    uint64_t v21 = (double *)(v14 + 56);
    uint64_t v22 = 1;
    double v23 = *(double *)(v14 + 40);
    do
    {
      if (*v21 < v23)
      {
        double v17 = *(v21 - 1);
        double v18 = *v21;
        double v23 = *v21;
      }
      ++v22;
      v21 += 2;
    }
    while (v16 != v22);
    uint64_t v24 = v14 + 32 + 16 * (v16 - 1);
    double v19 = *(double *)v24;
    double v20 = *(double *)(v24 + 8);
    CGFloat v25 = (double *)(v14 + 16 * v16 + 8);
    uint64_t v26 = v16 - 2;
    double v27 = v20;
    while (v26 < v16)
    {
      if (v27 < *v25)
      {
        double v19 = *(v25 - 1);
        double v20 = *v25;
        double v27 = *v25;
      }
      v25 -= 2;
      if (--v26 == -1) {
        goto LABEL_15;
      }
    }
    __break(1u);
    goto LABEL_28;
  }
  double v19 = *(double *)(v14 + 32);
  double v20 = *(double *)(v14 + 40);
LABEL_15:
  swift_bridgeObjectRelease();
  *(void *)&long long v107 = v9;
  BYTE8(v107) = v10;
  uint64_t v28 = (void *)sub_1C2A9C8D8();
  Swift::String_optional v29 = DiagramConfiguration.ValueFormatter.format(value:)((NSNumber)v28);
  uint64_t countAndFlagsBits = v29.value._countAndFlagsBits;
  uint64_t object = (uint64_t)v29.value._object;

  if (v29.value._object)
  {
    *(void *)&long long v107 = v9;
    BYTE8(v107) = v10;
    double v30 = (void *)sub_1C2A9C8D8();
    Swift::String_optional v31 = DiagramConfiguration.ValueFormatter.format(value:)((NSNumber)v30);

    __int16 v93 = v31.value._object;
    if (v31.value._object)
    {
      uint64_t v87 = v8;
      char v89 = BYTE1(v6);
      int v80 = v6 & 0x10000;
      long long v107 = 0u;
      long long v108 = 0u;
      if (qword_1EBB92310 != -1) {
        swift_once();
      }
      uint64_t v32 = sub_1C2934FE8(0xD000000000000018, 0x80000001C2AB63E0, 0, (uint64_t)&v107, 0, 0);
      uint64_t v34 = v33;
      sub_1C2935868((uint64_t)&v107);
      *(void *)&long long v107 = v32;
      *((void *)&v107 + 1) = v34;
      sub_1C295CAF4();
      uint64_t v35 = sub_1C2A9E378();
      uint64_t v37 = v36;
      swift_bridgeObjectRelease();
      long long v107 = 0u;
      long long v108 = 0u;
      uint64_t v38 = sub_1C2934FE8(0xD000000000000018, 0x80000001C2AB6400, 0, (uint64_t)&v107, 0, 0);
      uint64_t v40 = v39;
      sub_1C2935868((uint64_t)&v107);
      *(void *)&long long v107 = v38;
      *((void *)&v107 + 1) = v40;
      uint64_t v41 = sub_1C2A9E378();
      uint64_t v91 = v42;
      uint64_t v92 = v41;
      swift_bridgeObjectRelease();
      LOBYTE(v107) = v6;
      unint64_t v43 = DiagramConfiguration.TextAttributes.toTextAttributes()();
      LOBYTE(v107) = v89;
      unint64_t v90 = DiagramConfiguration.TextAttributes.toTextAttributes()();
      uint64_t v88 = v35;
      uint64_t v86 = v37;
      CGRect v44 = (void *)sub_1C2A9DCF8();
      type metadata accessor for Key(0);
      sub_1C2942D7C();
      id v45 = (void *)sub_1C2A9DC58();
      objc_msgSend(v44, sel_sizeWithAttributes_, v45);
      uint64_t v83 = v47;
      uint64_t v84 = v46;

      uint64_t v48 = (void *)sub_1C2A9DCF8();
      unint64_t v85 = v43;
      unint64_t v6 = v90;
      uint64_t v49 = (void *)sub_1C2A9DC58();
      objc_msgSend(v48, sel_sizeWithAttributes_, v49);
      uint64_t v81 = v51;
      uint64_t v82 = v50;

      uint64_t v52 = (void *)sub_1C2A9DCF8();
      id v53 = (void *)sub_1C2A9DC58();
      objc_msgSend(v52, sel_sizeWithAttributes_, v53);
      uint64_t v78 = v55;
      uint64_t v79 = v54;

      uint64_t v10 = v31.value._countAndFlagsBits;
      unint64_t v56 = (void *)sub_1C2A9DCF8();
      unint64_t v57 = (void *)sub_1C2A9DC58();
      objc_msgSend(v56, sel_sizeWithAttributes_, v57);
      uint64_t v3 = v58;
      uint64_t v4 = v59;

      double v60 = v20;
      double v61 = v18;
      BYTE2(v9) = BYTE2(v80);
      uint64_t v8 = v87;
      if (!v80) {
        goto LABEL_47;
      }
      uint64_t v7 = (long long *)MEMORY[0x1E4FBC860];
      *(void *)&long long v107 = MEMORY[0x1E4FBC860];
      uint64_t v62 = *(void *)(v11 + 16);
      if (v62)
      {
        swift_bridgeObjectRetain_n();
        for (uint64_t i = 0; i != v62; ++i)
        {
          uint64_t v64 = swift_bridgeObjectRetain();
          sub_1C29A6F88(v64);
        }
        swift_bridgeObjectRelease_n();
        id v65 = (long long *)v107;
        unint64_t v6 = v90;
LABEL_29:
        *(void *)&long long v107 = v7;
        uint64_t v67 = *((void *)v65 + 2);
        if (v67)
        {
          swift_bridgeObjectRetain();
          uint64_t v68 = 32;
          do
          {
            uint64_t v69 = swift_bridgeObjectRetain();
            sub_1C29A6E40(v69);
            v68 += 40;
            --v67;
          }
          while (v67);
          swift_bridgeObjectRelease_n();
          uint64_t v70 = v107;
        }
        else
        {
          swift_bridgeObjectRelease();
          uint64_t v70 = MEMORY[0x1E4FBC860];
        }
        uint64_t v71 = *(void *)(v70 + 16);
        double v60 = v20;
        double v61 = v18;
        if (v71)
        {
          uint64_t v72 = (double *)(v70 + 40);
          double v60 = v20;
          double v61 = v18;
          do
          {
            double v73 = *(v72 - 1);
            double v74 = *v72;
            if (v61 >= *v72) {
              double v75 = *v72;
            }
            else {
              double v75 = v61;
            }
            if (v73 == v17) {
              double v61 = v75;
            }
            if (v74 <= v60) {
              double v74 = v60;
            }
            if (v73 == v19) {
              double v60 = v74;
            }
            v72 += 2;
            --v71;
          }
          while (v71);
        }
        swift_bridgeObjectRelease();
LABEL_47:
        uint64_t v76 = v8 << 63 >> 63;
        v95[0] = v88;
        v95[1] = v86;
        uint64_t v77 = v8 << 62 >> 63;
        v95[2] = v92;
        v95[3] = v91;
        v95[4] = countAndFlagsBits;
        v95[5] = object;
        v95[6] = v10;
        v95[7] = v93;
        v95[8] = v84;
        v95[9] = v83;
        v95[10] = v82;
        v95[11] = v81;
        v95[12] = v79;
        v95[13] = v78;
        v95[14] = v3;
        v95[15] = v4;
        v95[16] = v76 & *(void *)&v17;
        v95[17] = v76 & *(void *)&v61;
        BOOL v96 = (v8 & 1) == 0;
        uint64_t v97 = v77 & *(void *)&v19;
        uint64_t v98 = v77 & *(void *)&v60;
        BOOL v99 = (v8 & 2) == 0;
        double v100 = v17;
        double v101 = v18;
        double v102 = v19;
        double v103 = v20;
        char v104 = BYTE2(v9);
        unint64_t v105 = v85;
        unint64_t v106 = v6;
        nullsub_1(v95);
        goto LABEL_26;
      }
LABEL_28:
      id v65 = v7;
      goto LABEL_29;
    }
LABEL_24:
    swift_bridgeObjectRelease();
  }
LABEL_25:
  sub_1C295CACC((uint64_t)v95);
LABEL_26:
  sub_1C295CA58((uint64_t)v95, (uint64_t)&v107, (uint64_t)&unk_1EBB906C8, (uint64_t)&type metadata for DiagramDistribution.DiagramDistributionMinMax, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1C29359AC);
  return sub_1C295CA58((uint64_t)&v107, a3, (uint64_t)&unk_1EBB906C8, (uint64_t)&type metadata for DiagramDistribution.DiagramDistributionMinMax, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1C29359AC);
}

uint64_t sub_1C295BCF0@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, double *a6@<X8>)
{
  char v71 = a1[5];
  int v7 = a1[6];
  uint64_t v62 = *(void *)(a1 + 65);
  int v8 = *(_DWORD *)(a1 + 73);
  uint64_t v9 = *a3;
  uint64_t v10 = a3[1];
  uint64_t v11 = a3[2];
  uint64_t v12 = *a4;
  uint64_t v60 = a4[1];
  uint64_t v13 = a4[2];
  uint64_t v70 = *a5;
  uint64_t v69 = a5[1];
  uint64_t v67 = a5[2];
  uint64_t v68 = a5[3];
  uint64_t v14 = 8 * a1[79];
  double v15 = *(double *)((char *)&unk_1C2AA6C48 + v14);
  char v65 = *((unsigned char *)a5 + 32);
  uint64_t v66 = a5[5];
  double v72 = *(double *)((char *)&unk_1C2AA6C68 + v14);
  double v73 = dbl_1C2AA6C00[*a1];
  double v16 = dbl_1C2AA6C30[a1[1]];
  sub_1C295CA58(a2, (uint64_t)v81, (uint64_t)&unk_1EBB906C8, (uint64_t)&type metadata for DiagramDistribution.DiagramDistributionMinMax, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1C29359AC);
  int v17 = sub_1C295CA40((uint64_t)v81);
  double v18 = 0.0;
  double v19 = 0.0;
  double v20 = 0.0;
  if (v17 != 1)
  {
    v102[3] = v90;
    v102[4] = v91;
    uint64_t v103 = v92;
    long long v101 = v86;
    v102[0] = v87;
    v102[1] = v88;
    v102[2] = v89;
    long long v97 = v82;
    long long v98 = v83;
    long long v99 = v84;
    long long v100 = v85;
    long long v93 = v81[0];
    long long v94 = v81[1];
    long long v95 = v81[2];
    long long v96 = v81[3];
    double v21 = v16 + *((double *)&v82 + 1) + *((double *)&v84 + 1) + 2.0;
    uint64_t v22 = MEMORY[0x1E4FBB718];
    sub_1C295CA58((uint64_t)&v101, (uint64_t)v105, (uint64_t)&unk_1EBB90D80, (uint64_t)type metadata accessor for CGPoint, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1C295CBD4);
    sub_1C295CA58((uint64_t)v105, (uint64_t)v106, (uint64_t)&unk_1EBB90D80, (uint64_t)type metadata accessor for CGPoint, v22, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1C295CBD4);
    if (v106[16]) {
      double v19 = 0.0;
    }
    else {
      double v19 = v21;
    }
    sub_1C295CA58((uint64_t)v102 + 8, (uint64_t)v104, (uint64_t)&unk_1EBB90D80, (uint64_t)type metadata accessor for CGPoint, v22, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1C295CBD4);
    sub_1C295CA58((uint64_t)v104, (uint64_t)v107, (uint64_t)&unk_1EBB90D80, (uint64_t)type metadata accessor for CGPoint, v22, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1C295CBD4);
    if (v107[16]) {
      double v20 = 0.0;
    }
    else {
      double v20 = v21;
    }
  }
  double v64 = v20;
  double v23 = 0.0;
  double v24 = 0.0;
  if (v9)
  {
    if (*(void *)(v9 + 16))
    {
      int v25 = v7;
      swift_bridgeObjectRetain();
      uint64_t v26 = (void *)sub_1C2A9DCF8();
      swift_bridgeObjectRelease();
      type metadata accessor for Key(0);
      sub_1C2942D7C();
      double v27 = (void *)sub_1C2A9DC58();
      objc_msgSend(v26, sel_sizeWithAttributes_, v27);
      double v24 = v28;

      int v7 = v25;
    }
    double v24 = v16 + v24;
    uint64_t v74 = v9;
    uint64_t v75 = v10;
    uint64_t v76 = v11;
    DiagramPointAnnotations.horizontalInsets()();
    double v23 = v29;
    double v18 = v30;
  }
  double v61 = v24;
  double v59 = v18;
  double v31 = v73 + v15;
  double v32 = 0.0;
  double v33 = 0.0;
  double v34 = 0.0;
  double v35 = 0.0;
  if (v12)
  {
    if (*(void *)(v12 + 16))
    {
      swift_bridgeObjectRetain();
      uint64_t v36 = (void *)sub_1C2A9DCF8();
      swift_bridgeObjectRelease();
      type metadata accessor for Key(0);
      sub_1C2942D7C();
      uint64_t v37 = (void *)sub_1C2A9DC58();
      objc_msgSend(v36, sel_sizeWithAttributes_, v37);
      double v33 = v38;
    }
    double v35 = v16 + v33;
    uint64_t v74 = v12;
    uint64_t v75 = v60;
    uint64_t v76 = v13;
    DiagramPointAnnotations.horizontalInsets()();
    double v34 = v39;
    double v33 = v40;
  }
  uint64_t v41 = v62 & 0xFE00000000 | 0x100000000;
  double v42 = 3.5;
  if ((v62 & 0xFF0000000000) != 0) {
    double v42 = 0.0;
  }
  double v43 = v42 + v73 + v19 + v35 + 2.0;
  if (v41 == 0x300000000) {
    double v44 = v31 + v19 + v35;
  }
  else {
    double v44 = v31;
  }
  if (v41 == 0x300000000) {
    double v45 = 0.0;
  }
  else {
    double v45 = v43;
  }
  sub_1C295CA58(a2, (uint64_t)&v74, (uint64_t)&unk_1EBB906C8, (uint64_t)&type metadata for DiagramDistribution.DiagramDistributionMinMax, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1C29359AC);
  if (sub_1C295CA40((uint64_t)&v74) != 1)
  {
    double v46 = v77;
    if (v77 <= v78) {
      double v46 = v78;
    }
    if (v46 <= v79) {
      double v46 = v79;
    }
    if (v46 <= v80) {
      double v46 = v80;
    }
    double v32 = v46 * 0.5 + 2.0;
  }
  sub_1C295CBD4(0, &qword_1EBB90DC8, (uint64_t (*)(uint64_t))sub_1C293FD2C, MEMORY[0x1E4FBBE00]);
  uint64_t v47 = swift_allocObject();
  *(_OWORD *)(v47 + 16) = xmmword_1C2AA6B00;
  *(void *)(v47 + 32) = v70;
  *(void *)(v47 + 40) = v69;
  *(void *)(v47 + 48) = v67;
  *(void *)(v47 + 56) = v68;
  *(unsigned char *)(v47 + 64) = v65;
  *(void *)(v47 + 72) = v66;
  *(unsigned char *)(v47 + 80) = v71;
  swift_bridgeObjectRetain();
  *(double *)&uint64_t v48 = COERCE_DOUBLE(sub_1C2A0E2F4(v47));
  int v50 = v49 & 1 | v7;
  swift_setDeallocating();
  sub_1C293FD2C();
  swift_arrayDestroy();
  uint64_t result = swift_deallocClassInstance();
  if ((v62 & 0xFF00000000) == 0x300000000 || (v8 & 0xFF000000) == 0x2000000)
  {
    double v55 = *(double *)&v48;
    if (v50) {
      double v55 = -0.0;
    }
    double v52 = v72;
    double v56 = v72 + v55;
    if (v34 > v23) {
      double v57 = v34;
    }
    else {
      double v57 = v23;
    }
    double v54 = v57 + v32 + v56;
    double v58 = v59;
    if (v33 > v59) {
      double v58 = v33;
    }
    double v32 = v58 + v32;
    double v53 = 0.0;
    goto LABEL_44;
  }
  double v52 = v72;
  if (v50)
  {
    double v53 = v73 + v32 + 15.0;
    double v54 = v72;
LABEL_44:
    *a6 = v31 + v64 + v61;
    a6[1] = v54;
    a6[2] = v44;
    a6[3] = v52 + v32;
    a6[4] = v53;
    a6[5] = v45;
    return result;
  }
  uint64_t result = sub_1C2A9E628();
  __break(1u);
  return result;
}

uint64_t sub_1C295C3CC(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1C295C40C(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t *sub_1C295C44C(uint64_t *a1)
{
  return a1;
}

uint64_t sub_1C295C4C0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t method lookup function for DiagramDistribution(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for DiagramDistribution);
}

uint64_t dispatch thunk of DiagramDistribution.modelSpace.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of DiagramDistribution.screenInsets.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of DiagramDistribution.drawingBlock.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of DiagramDistribution.__allocating_init(distributionConfiguration:distributionData:hbxViewControllerFactory:)()
{
  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t destroy for DiagramDistribution.DiagramDistributionMinMax()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DiagramDistribution.DiagramDistributionMinMax(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  long long v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  long long v8 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  long long v9 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v9;
  *(unsigned char *)(a1 + 208) = *(unsigned char *)(a2 + 208);
  uint64_t v10 = *(void *)(a2 + 224);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(void *)(a1 + 224) = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DiagramDistribution.DiagramDistributionMinMax(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  long long v4 = *(_OWORD *)(a2 + 128);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = v4;
  long long v5 = *(_OWORD *)(a2 + 152);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = v5;
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(unsigned char *)(a1 + 208) = *(unsigned char *)(a2 + 208);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy232_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  long long v4 = a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  long long v7 = a2[7];
  long long v8 = a2[8];
  long long v9 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  __n128 result = (__n128)a2[11];
  long long v11 = a2[12];
  long long v12 = a2[13];
  *(void *)(a1 + 224) = *((void *)a2 + 28);
  *(_OWORD *)(a1 + 192) = v11;
  *(_OWORD *)(a1 + 208) = v12;
  *(__n128 *)(a1 + 176) = result;
  return result;
}

uint64_t assignWithTake for DiagramDistribution.DiagramDistributionMinMax(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  swift_bridgeObjectRelease();
  long long v8 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v8;
  long long v9 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v9;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  long long v10 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v10;
  *(unsigned char *)(a1 + 208) = *(unsigned char *)(a2 + 208);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DiagramDistribution.DiagramDistributionMinMax(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 232)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DiagramDistribution.DiagramDistributionMinMax(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 232) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 232) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DiagramDistribution.DiagramDistributionMinMax()
{
  return &type metadata for DiagramDistribution.DiagramDistributionMinMax;
}

uint64_t sub_1C295CA40(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

uint64_t sub_1C295CA58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8 = a6(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(a2, a1, v8);
  return a2;
}

double sub_1C295CACC(uint64_t a1)
{
  *(void *)(a1 + 224) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

unint64_t sub_1C295CAF4()
{
  unint64_t result = qword_1EBB90D48;
  if (!qword_1EBB90D48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB90D48);
  }
  return result;
}

void sub_1C295CB4C(double a1, double a2, CGFloat a3, CGFloat a4)
{
  sub_1C2959A40(*(CGFloat **)(v4 + 16), a1, a2, a3, a4, *(CGFloat *)(v4 + 40), *(void *)(v4 + 24), *(CGContext **)(v4 + 32), *(void **)(v4 + 48));
}

uint64_t sub_1C295CB74(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_1C2959B40(a1, a2, a3, v3[2], v3[3], v3[6], v3[7]);
}

id *sub_1C295CB84(id *a1)
{
  return a1;
}

void sub_1C295CBB0(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  sub_1C2959874(*(CGFloat **)(v4 + 16), *(CGContext **)(v4 + 24), a1, a2, a3, a4, *(CGFloat *)(v4 + 48), *(CGFloat *)(v4 + 56), *(void *)(v4 + 32), *(CGGradient **)(v4 + 40));
}

void sub_1C295CBC0(uint64_t a1, uint64_t a2, uint64_t a3, double a4, CGFloat a5)
{
  sub_1C2959628(a4, a5, a1, a2, a3, *(CGFloat **)(v5 + 16), *(void *)(v5 + 40), *(CGContext **)(v5 + 48), *(void **)(v5 + 56));
}

void sub_1C295CBD4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

id *sub_1C295CC38(id *a1)
{
  id v2 = *a1;
  return a1;
}

uint64_t sub_1C295CC64(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  if (qword_1EBB92310 != -1) {
    swift_once();
  }
  return sub_1C2934FE8(a1, a2, a3, a4, 0, 0);
}

uint64_t sub_1C295CCF4(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (qword_1EBB92310 != -1) {
    swift_once();
  }
  return sub_1C295D284(a1, a2, a3, a4, a5, a6, a7);
}

void sub_1C295CD9C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (qword_1EBB92310 != -1) {
    swift_once();
  }
  sub_1C295CE70(a1, a2, a3);
}

id static Localization.defaultLocalizationBundle.getter()
{
  if (qword_1EBB92378 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_1EBB919B8;
  return v0;
}

void sub_1C295CE70(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = sub_1C2A9CFE8();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  long long v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v12 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v31 = *(void *)(v4 + 16);
  *(void *)(v4 + 16) = 0x8000000000000000;
  uint64_t v14 = sub_1C295E2F4(a2, a3, v12, isUniquelyReferenced_nonNull_native);
  unint64_t v16 = v15;
  *(void *)(v4 + 16) = v31;
  swift_bridgeObjectRelease();
  swift_endAccess();
  if (!v16) {
    goto LABEL_6;
  }
  if (v14 == a2 && v16 == a3 || (sub_1C2A9E8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
LABEL_6:

    return;
  }
  sub_1C2A9CFB8();
  swift_bridgeObjectRetain_n();
  id v17 = v12;
  swift_bridgeObjectRetain();
  double v18 = sub_1C2A9CFC8();
  os_log_type_t v19 = sub_1C2A9E088();
  int v20 = v19;
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v21 = swift_slowAlloc();
    int v29 = v20;
    uint64_t v22 = v21;
    double v28 = (void *)swift_slowAlloc();
    uint64_t v30 = swift_slowAlloc();
    v32[0] = v30;
    *(_DWORD *)uint64_t v22 = 136446722;
    os_log_t v27 = v18;
    swift_bridgeObjectRetain();
    uint64_t v31 = sub_1C2957168(v14, v16, v32);
    sub_1C2A9E358();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v22 + 12) = 2082;
    swift_bridgeObjectRetain();
    uint64_t v31 = sub_1C2957168(a2, a3, v32);
    sub_1C2A9E358();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v22 + 22) = 2114;
    uint64_t v31 = (uint64_t)v17;
    id v23 = v17;
    sub_1C2A9E358();
    double v24 = v28;
    void *v28 = v17;

    os_log_t v25 = v27;
    _os_log_impl(&dword_1C292A000, v27, (os_log_type_t)v29, "Localization: replacing previously registered localization file %{public}s with %{public}s for bundle %{public}@", (uint8_t *)v22, 0x20u);
    sub_1C2960D30(0, &qword_1EBB8FDC0, &qword_1EBB923A0, 0x1E4FBA8A8, MEMORY[0x1E4FBB718]);
    swift_arrayDestroy();
    MEMORY[0x1C87656F0](v24, -1, -1);
    uint64_t v26 = v30;
    swift_arrayDestroy();
    MEMORY[0x1C87656F0](v26, -1, -1);
    MEMORY[0x1C87656F0](v22, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_1C295D284(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = sub_1C2A9CFE8();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  double v28 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_1C29353AC(a1, a2, a5, a6, a7);
  uint64_t v18 = HIBYTE(v17) & 0xF;
  if ((v17 & 0x2000000000000000) == 0) {
    uint64_t v18 = v16 & 0xFFFFFFFFFFFFLL;
  }
  if (v18)
  {
    uint64_t v19 = sub_1C2A9DD38();
    unint64_t v21 = v20;
    swift_bridgeObjectRelease();
    a1 = sub_1C2935268(v19, v21, a4);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v27 = v14;
    swift_bridgeObjectRelease();
    sub_1C2A9CF98();
    swift_bridgeObjectRetain_n();
    uint64_t v22 = sub_1C2A9CFC8();
    os_log_type_t v23 = sub_1C2A9E0A8();
    if (os_log_type_enabled(v22, v23))
    {
      double v24 = (uint8_t *)swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      uint64_t v30 = v25;
      *(_DWORD *)double v24 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v29 = sub_1C2957168(a1, a2, &v30);
      sub_1C2A9E358();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1C292A000, v22, v23, "Localization: no localization found for '%{public}s'", v24, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C87656F0](v25, -1, -1);
      MEMORY[0x1C87656F0](v24, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v27 + 8))(v28, v13);
    swift_bridgeObjectRetain();
  }
  return a1;
}

unint64_t sub_1C295D52C(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v14 = a4 >> 14;
  if (a4 >> 14 == a3 >> 14) {
    return 0;
  }
  if (sub_1C2A9E348() == a1 && v8 == a2)
  {
    unint64_t v4 = a3;
LABEL_6:
    swift_bridgeObjectRelease();
  }
  else
  {
    char v9 = sub_1C2A9E8D8();
    swift_bridgeObjectRelease();
    if (v9)
    {
      return a3;
    }
    else
    {
      while (1)
      {
        unint64_t v11 = sub_1C2A9E338();
        if (v11 >> 14 == v14) {
          return 0;
        }
        unint64_t v4 = v11;
        if (sub_1C2A9E348() == a1 && v12 == a2) {
          goto LABEL_6;
        }
        char v10 = sub_1C2A9E8D8();
        swift_bridgeObjectRelease();
        if (v10) {
          return v4;
        }
      }
    }
  }
  return v4;
}

unint64_t sub_1C295D6A8(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0) {
    uint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (4 * v3 >= result >> 14) {
    return sub_1C2A9DE08();
  }
  __break(1u);
  return result;
}

uint64_t Localization.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t Localization.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t static Localization.localize(_:replacements:mySelf:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v61 = a4;
  uint64_t v55 = a1;
  unint64_t v56 = a2;
  sub_1C2960D30(0, &qword_1EA31DEF8, &qword_1EA31DF00, 0x1E4F29148, MEMORY[0x1E4F26DB0]);
  uint64_t v63 = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  double v59 = (char *)&v55 - v7;
  id v60 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28E30]), sel_init);
  if (!a3)
  {
    uint64_t v13 = (void *)MEMORY[0x1E4FBC868];
LABEL_44:
    if (qword_1EBB92310 != -1) {
      goto LABEL_50;
    }
    goto LABEL_45;
  }
  uint64_t v8 = a3 + 64;
  uint64_t v9 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & *(void *)(a3 + 64);
  int64_t v64 = (unint64_t)(v9 + 63) >> 6;
  double v57 = (void (**)(char *, uint64_t))(v6 + 8);
  swift_bridgeObjectRetain();
  int64_t v12 = 0;
  uint64_t v13 = (void *)MEMORY[0x1E4FBC868];
  uint64_t v58 = a3 + 64;
  while (1)
  {
    if (v11)
    {
      uint64_t v65 = (v11 - 1) & v11;
      int64_t v66 = v12;
      unint64_t v15 = __clz(__rbit64(v11)) | (v12 << 6);
    }
    else
    {
      int64_t v16 = v12 + 1;
      if (__OFADD__(v12, 1)) {
        goto LABEL_48;
      }
      if (v16 >= v64)
      {
LABEL_42:
        swift_release();
        goto LABEL_44;
      }
      unint64_t v17 = *(void *)(v8 + 8 * v16);
      int64_t v18 = v12 + 1;
      if (!v17)
      {
        int64_t v18 = v12 + 2;
        if (v12 + 2 >= v64) {
          goto LABEL_42;
        }
        unint64_t v17 = *(void *)(v8 + 8 * v18);
        if (!v17)
        {
          int64_t v18 = v12 + 3;
          if (v12 + 3 >= v64) {
            goto LABEL_42;
          }
          unint64_t v17 = *(void *)(v8 + 8 * v18);
          if (!v17)
          {
            uint64_t v19 = v12 + 4;
            if (v12 + 4 >= v64) {
              goto LABEL_42;
            }
            unint64_t v17 = *(void *)(v8 + 8 * v19);
            if (!v17)
            {
              while (1)
              {
                int64_t v18 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_49;
                }
                if (v18 >= v64) {
                  goto LABEL_42;
                }
                unint64_t v17 = *(void *)(v8 + 8 * v18);
                ++v19;
                if (v17) {
                  goto LABEL_22;
                }
              }
            }
            int64_t v18 = v12 + 4;
          }
        }
      }
LABEL_22:
      uint64_t v65 = (v17 - 1) & v17;
      int64_t v66 = v18;
      unint64_t v15 = __clz(__rbit64(v17)) + (v18 << 6);
    }
    uint64_t v20 = *(void *)(a3 + 56);
    unint64_t v21 = (uint64_t *)(*(void *)(a3 + 48) + 16 * v15);
    uint64_t v22 = v21[1];
    uint64_t v67 = *v21;
    uint64_t v23 = v20 + 32 * v15;
    uint64_t v25 = *(void *)v23;
    unint64_t v24 = *(void *)(v23 + 8);
    uint64_t v26 = *(void *)(v23 + 16);
    int v27 = *(unsigned __int8 *)(v23 + 24);
    if (v27)
    {
      if (v27 == 1)
      {
        swift_bridgeObjectRetain();
        sub_1C2960A0C(v25, v24, v26, 1u);
        unint64_t v28 = v24;
        goto LABEL_31;
      }
      id v31 = objc_allocWithZone(MEMORY[0x1E4F29148]);
      swift_bridgeObjectRetain();
      sub_1C2960A0C(v25, v24, v26, 2u);
      double v32 = (void *)sub_1C2A9DCF8();
      id v33 = objc_msgSend(v31, sel_initWithSymbol_, v32, v55, v56);

      sub_1C29376D4(0, &qword_1EA31DF00);
      id v62 = v33;
      double v34 = v59;
      sub_1C2A9C308();
      double v35 = (void *)sub_1C2A9C2F8();
      uint64_t v36 = a3;
      id v37 = objc_msgSend(v60, sel_stringFromMeasurement_, v35);

      uint64_t v29 = sub_1C2A9DD28();
      unint64_t v28 = v38;

      a3 = v36;
      uint64_t v8 = v58;
      sub_1C2960A2C(v25, v24, v26, 2u);

      (*v57)(v34, v63);
    }
    else
    {
      swift_bridgeObjectRetain();
      sub_1C2960A0C(v25, v24, v26, 0);
      if (qword_1EBB92310 != -1) {
        swift_once();
      }
      uint64_t v29 = sub_1C2934FE8(v25, v24, 0, v61, 0, 0);
      unint64_t v28 = v30;
      sub_1C2960A2C(v25, v24, v26, 0);
    }
    uint64_t v25 = v29;
LABEL_31:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v68 = v13;
    unint64_t v41 = sub_1C295DDC8(v67, v22);
    uint64_t v42 = v13[2];
    BOOL v43 = (v40 & 1) == 0;
    uint64_t v44 = v42 + v43;
    if (__OFADD__(v42, v43)) {
      break;
    }
    char v45 = v40;
    if (v13[3] >= v44)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        uint64_t v13 = v68;
        if (v40) {
          goto LABEL_5;
        }
      }
      else
      {
        sub_1C295FD34();
        uint64_t v13 = v68;
        if (v45) {
          goto LABEL_5;
        }
      }
    }
    else
    {
      sub_1C295E730(v44, isUniquelyReferenced_nonNull_native);
      unint64_t v46 = sub_1C295DDC8(v67, v22);
      if ((v45 & 1) != (v47 & 1))
      {
        sub_1C2A9E928();
        __break(1u);
        JUMPOUT(0x1C295DD60);
      }
      unint64_t v41 = v46;
      uint64_t v13 = v68;
      if (v45)
      {
LABEL_5:
        unint64_t v14 = (uint64_t *)(v13[7] + 16 * v41);
        swift_bridgeObjectRelease();
        *unint64_t v14 = v25;
        v14[1] = v28;
        goto LABEL_6;
      }
    }
    v13[(v41 >> 6) + 8] |= 1 << v41;
    uint64_t v48 = (void *)(v13[6] + 16 * v41);
    void *v48 = v67;
    v48[1] = v22;
    char v49 = (uint64_t *)(v13[7] + 16 * v41);
    *char v49 = v25;
    v49[1] = v28;
    uint64_t v50 = v13[2];
    BOOL v51 = __OFADD__(v50, 1);
    uint64_t v52 = v50 + 1;
    if (v51) {
      goto LABEL_47;
    }
    void v13[2] = v52;
    swift_bridgeObjectRetain();
LABEL_6:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v11 = v65;
    int64_t v12 = v66;
  }
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  swift_once();
LABEL_45:
  uint64_t v53 = sub_1C2934FE8(v55, v56, (uint64_t)v13, v61, 0, 0);
  swift_bridgeObjectRelease();

  return v53;
}

unint64_t sub_1C295DD78(uint64_t a1)
{
  uint64_t v2 = sub_1C2A9E2A8();
  return sub_1C295E140(a1, v2, &qword_1EBB91BB0);
}

unint64_t sub_1C295DDC8(uint64_t a1, uint64_t a2)
{
  sub_1C2A9E9B8();
  sub_1C2A9DD78();
  uint64_t v4 = sub_1C2A9E9E8();
  return sub_1C295DFC0(a1, a2, v4);
}

unint64_t sub_1C295DE40(uint64_t a1)
{
  uint64_t v2 = sub_1C2A9E9A8();
  return sub_1C295E0A4(a1, v2);
}

unint64_t sub_1C295DE84(uint64_t a1)
{
  uint64_t v2 = sub_1C2A9E2A8();
  return sub_1C295E140(a1, v2, (unint64_t *)&qword_1EBB92468);
}

unint64_t sub_1C295DED4(uint64_t a1)
{
  uint64_t v2 = sub_1C2A9E2A8();
  return sub_1C295E140(a1, v2, (unint64_t *)&qword_1EBB92500);
}

unint64_t sub_1C295DF24(unsigned __int8 a1)
{
  sub_1C2A9E9B8();
  sub_1C2A9E9C8();
  uint64_t v2 = sub_1C2A9E9E8();
  return sub_1C295E254(a1, v2);
}

unint64_t sub_1C295DFC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_1C2A9E8D8() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_1C2A9E8D8() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_1C295E0A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_1C295E140(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t i = a2 & ~v5;
  if ((*(void *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    sub_1C29376D4(0, a3);
    id v7 = *(id *)(*(void *)(v3 + 48) + 8 * i);
    char v8 = sub_1C2A9E2B8();

    if ((v8 & 1) == 0)
    {
      uint64_t v9 = ~v5;
      for (unint64_t i = (i + 1) & v9; ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v9)
      {
        id v10 = *(id *)(*(void *)(v3 + 48) + 8 * i);
        char v11 = sub_1C2A9E2B8();

        if (v11) {
          break;
        }
      }
    }
  }
  return i;
}

unint64_t sub_1C295E254(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(unsigned __int8 *)(v7 + result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(unsigned __int8 *)(v7 + result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C295E2F4(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_1C295DD78((uint64_t)a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1C295FB80();
LABEL_7:
    int64_t v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = (uint64_t *)(v18[7] + 16 * v12);
      uint64_t result = *v19;
      *uint64_t v19 = a1;
      v19[1] = a2;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    *(void *)(v18[6] + 8 * v12) = a3;
    uint64_t v23 = (uint64_t *)(v18[7] + 16 * v12);
    *uint64_t v23 = a1;
    v23[1] = a2;
    uint64_t v24 = v18[2];
    BOOL v25 = __OFADD__(v24, 1);
    uint64_t v26 = v24 + 1;
    if (!v25)
    {
      v18[2] = v26;
      id v27 = a3;
      return 0;
    }
    goto LABEL_14;
  }
  sub_1C295E44C(v15, a4 & 1);
  unint64_t v21 = sub_1C295DD78((uint64_t)a3);
  if ((v16 & 1) == (v22 & 1))
  {
    unint64_t v12 = v21;
    int64_t v18 = (void *)*v5;
    if (v16) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  sub_1C29376D4(0, &qword_1EBB91BB0);
  uint64_t result = sub_1C2A9E928();
  __break(1u);
  return result;
}

uint64_t sub_1C295E44C(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_1C2961190();
  char v38 = a2;
  uint64_t v6 = sub_1C2A9E668();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v2;
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11) {
      break;
    }
    uint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v37 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v37 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v36;
          if ((v38 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v37 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    unint64_t v30 = *(void **)(*(void *)(v5 + 48) + 8 * v21);
    id v31 = (uint64_t *)(*(void *)(v5 + 56) + 16 * v21);
    uint64_t v32 = *v31;
    uint64_t v33 = v31[1];
    if ((v38 & 1) == 0)
    {
      id v34 = v30;
      swift_bridgeObjectRetain();
    }
    uint64_t result = sub_1C2A9E2A8();
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(void *)(*(void *)(v7 + 48) + 8 * v18) = v30;
    uint64_t v19 = (void *)(*(void *)(v7 + 56) + 16 * v18);
    *uint64_t v19 = v32;
    v19[1] = v33;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v36;
  uint64_t v23 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v23 = -1 << v35;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_1C295E730(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_1C2961140(0, (unint64_t *)&qword_1EBB923A8);
  char v42 = a2;
  uint64_t v6 = sub_1C2A9E668();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v41 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  double v39 = v2;
  int64_t v40 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v40) {
      break;
    }
    unint64_t v24 = (void *)(v5 + 64);
    unint64_t v25 = *(void *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      int64_t v13 = v23 + 1;
      if (v23 + 1 >= v40) {
        goto LABEL_33;
      }
      unint64_t v25 = *(void *)(v41 + 8 * v13);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v39;
          if ((v42 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v25 = *(void *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v13 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v40) {
              goto LABEL_33;
            }
            unint64_t v25 = *(void *)(v41 + 8 * v13);
            ++v26;
            if (v25) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v26;
      }
    }
LABEL_30:
    unint64_t v10 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    uint64_t v31 = 16 * v22;
    uint64_t v32 = (uint64_t *)(*(void *)(v5 + 48) + v31);
    uint64_t v34 = *v32;
    uint64_t v33 = v32[1];
    uint64_t v35 = (uint64_t *)(*(void *)(v5 + 56) + v31);
    uint64_t v36 = *v35;
    uint64_t v37 = v35[1];
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_1C2A9E9B8();
    sub_1C2A9DD78();
    uint64_t result = sub_1C2A9E9E8();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v29 = v16 == v28;
        if (v16 == v28) {
          unint64_t v16 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      unint64_t v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = 16 * v17;
    uint64_t v19 = (void *)(*(void *)(v7 + 48) + v18);
    *uint64_t v19 = v34;
    v19[1] = v33;
    unint64_t v20 = (void *)(*(void *)(v7 + 56) + v18);
    *unint64_t v20 = v36;
    v20[1] = v37;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v39;
  unint64_t v24 = (void *)(v5 + 64);
  if ((v42 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v38 = 1 << *(unsigned char *)(v5 + 32);
  if (v38 >= 64) {
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v24 = -1 << v38;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

void sub_1C295EA70(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_1C2961084(0, &qword_1EA31DF10, (void (*)(void))sub_1C29610EC);
  uint64_t v6 = (void *)sub_1C2A9E668();
  if (*(void *)(v5 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v8 = (void *)(v5 + 64);
    uint64_t v9 = -1;
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v11 = (unint64_t)(v7 + 63) >> 6;
    swift_retain();
    int64_t v12 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v13 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v14 = v13 | (v12 << 6);
      }
      else
      {
        int64_t v17 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
          __break(1u);
LABEL_27:
          __break(1u);
          return;
        }
        if (v17 >= v11) {
          goto LABEL_20;
        }
        unint64_t v18 = v8[v17];
        ++v12;
        if (!v18)
        {
          int64_t v12 = v17 + 1;
          if (v17 + 1 >= v11) {
            goto LABEL_20;
          }
          unint64_t v18 = v8[v12];
          if (!v18)
          {
            int64_t v19 = v17 + 2;
            if (v19 >= v11)
            {
LABEL_20:
              swift_release();
              if (a2)
              {
                uint64_t v20 = 1 << *(unsigned char *)(v5 + 32);
                if (v20 > 63) {
                  bzero((void *)(v5 + 64), ((unint64_t)(v20 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v8 = -1 << v20;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v18 = v8[v19];
            if (!v18)
            {
              while (1)
              {
                int64_t v12 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_27;
                }
                if (v12 >= v11) {
                  goto LABEL_20;
                }
                unint64_t v18 = v8[v12];
                ++v19;
                if (v18) {
                  goto LABEL_19;
                }
              }
            }
            int64_t v12 = v19;
          }
        }
LABEL_19:
        unint64_t v10 = (v18 - 1) & v18;
        unint64_t v14 = __clz(__rbit64(v18)) + (v12 << 6);
      }
      uint64_t v15 = *(void *)(v5 + 56) + 216 * v14;
      long long v31 = *(_OWORD *)(v15 + 176);
      long long v32 = *(_OWORD *)(v15 + 192);
      char v33 = *(unsigned char *)(v15 + 208);
      long long v27 = *(_OWORD *)(v15 + 96);
      long long v28 = *(_OWORD *)(v15 + 112);
      long long v29 = *(_OWORD *)(v15 + 128);
      long long v30 = *(_OWORD *)(v15 + 144);
      long long v23 = *(_OWORD *)(v15 + 32);
      long long v24 = *(_OWORD *)(v15 + 48);
      long long v25 = *(_OWORD *)(v15 + 64);
      long long v26 = *(_OWORD *)(v15 + 80);
      long long v21 = *(_OWORD *)v15;
      long long v22 = *(_OWORD *)(v15 + 16);
      char v16 = *(unsigned char *)(*(void *)(v5 + 48) + v14);
      v34[10] = *(_OWORD *)(v15 + 160);
      v34[11] = v31;
      v34[12] = v32;
      char v35 = v33;
      v34[6] = v27;
      v34[7] = v28;
      v34[8] = v29;
      v34[9] = v30;
      v34[2] = v23;
      v34[3] = v24;
      void v34[4] = v25;
      v34[5] = v26;
      v34[0] = v21;
      v34[1] = v22;
      sub_1C295F938(v16, (uint64_t)v34, v6);
    }
  }
  swift_release();
  *uint64_t v3 = v6;
}

uint64_t sub_1C295ECF4(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_1C2961140(0, (unint64_t *)&qword_1EA31DF08);
  char v38 = a2;
  uint64_t result = sub_1C2A9E668();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v37 = (uint64_t *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v33 = -1 << v9;
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
    char v35 = v3;
    int64_t v36 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v19 = v18 | (v8 << 6);
      }
      else
      {
        int64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v20 >= v36) {
          goto LABEL_33;
        }
        unint64_t v21 = v37[v20];
        ++v8;
        if (!v21)
        {
          int64_t v8 = v20 + 1;
          if (v20 + 1 >= v36) {
            goto LABEL_33;
          }
          unint64_t v21 = v37[v8];
          if (!v21)
          {
            int64_t v22 = v20 + 2;
            if (v22 >= v36)
            {
LABEL_33:
              if ((v38 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v35;
                goto LABEL_40;
              }
              if (v34 >= 64) {
                bzero(v37, 8 * v36);
              }
              else {
                *uint64_t v37 = v33;
              }
              uint64_t v3 = v35;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v21 = v37[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v36) {
                  goto LABEL_33;
                }
                unint64_t v21 = v37[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v22;
          }
        }
LABEL_30:
        unint64_t v11 = (v21 - 1) & v21;
        unint64_t v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      uint64_t v27 = *(void *)(*(void *)(v5 + 48) + 8 * v19);
      uint64_t v28 = *(void *)(v5 + 56) + 40 * v19;
      long long v39 = *(_OWORD *)v28;
      uint64_t v29 = *(void *)(v28 + 16);
      char v30 = *(unsigned char *)(v28 + 24);
      char v31 = *(unsigned char *)(v28 + 25);
      uint64_t v32 = *(void *)(v28 + 32);
      if ((v38 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      uint64_t result = sub_1C2A9E9A8();
      uint64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v25 = v15 == v24;
          if (v15 == v24) {
            unint64_t v15 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        unint64_t v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(void *)(*(void *)(v7 + 48) + 8 * v16) = v27;
      uint64_t v17 = *(void *)(v7 + 56) + 40 * v16;
      *(_OWORD *)uint64_t v17 = v39;
      *(void *)(v17 + 16) = v29;
      *(unsigned char *)(v17 + 24) = v30;
      *(unsigned char *)(v17 + 25) = v31;
      *(void *)(v17 + 32) = v32;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_1C295F008(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_1C2937B6C();
  char v35 = a2;
  uint64_t v6 = sub_1C2A9E668();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v34 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v33 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v15 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v16 = v15 | (v13 << 6);
      goto LABEL_22;
    }
    int64_t v17 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v17 >= v33) {
      break;
    }
    unint64_t v18 = (void *)(v5 + 64);
    unint64_t v19 = *(void *)(v34 + 8 * v17);
    ++v13;
    if (!v19)
    {
      int64_t v13 = v17 + 1;
      if (v17 + 1 >= v33) {
        goto LABEL_34;
      }
      unint64_t v19 = *(void *)(v34 + 8 * v13);
      if (!v19)
      {
        int64_t v20 = v17 + 2;
        if (v20 >= v33)
        {
LABEL_34:
          swift_release();
          if ((v35 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v19 = *(void *)(v34 + 8 * v20);
        if (!v19)
        {
          while (1)
          {
            int64_t v13 = v20 + 1;
            if (__OFADD__(v20, 1)) {
              goto LABEL_43;
            }
            if (v13 >= v33) {
              goto LABEL_34;
            }
            unint64_t v19 = *(void *)(v34 + 8 * v13);
            ++v20;
            if (v19) {
              goto LABEL_21;
            }
          }
        }
        int64_t v13 = v20;
      }
    }
LABEL_21:
    unint64_t v10 = (v19 - 1) & v19;
    unint64_t v16 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_22:
    unint64_t v21 = *(void **)(*(void *)(v5 + 48) + 8 * v16);
    int64_t v22 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v16);
    if (v35)
    {
      sub_1C2937880(v22, v36);
    }
    else
    {
      sub_1C29577B8((uint64_t)v22, (uint64_t)v36);
      id v23 = v21;
    }
    sub_1C2A9DD28();
    sub_1C2A9E9B8();
    sub_1C2A9DD78();
    uint64_t v24 = sub_1C2A9E9E8();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v26 = v24 & ~v25;
    unint64_t v27 = v26 >> 6;
    if (((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6))) != 0)
    {
      unint64_t v14 = __clz(__rbit64((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v28 = 0;
      unint64_t v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v30 = v27 == v29;
        if (v27 == v29) {
          unint64_t v27 = 0;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v11 + 8 * v27);
      }
      while (v31 == -1);
      unint64_t v14 = __clz(__rbit64(~v31)) + (v27 << 6);
    }
    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(void *)(*(void *)(v7 + 48) + 8 * v14) = v21;
    uint64_t result = (uint64_t)sub_1C2937880(v36, (_OWORD *)(*(void *)(v7 + 56) + 32 * v14));
    ++*(void *)(v7 + 16);
  }
  swift_release();
  unint64_t v18 = (void *)(v5 + 64);
  if ((v35 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
  if (v32 >= 64) {
    bzero(v18, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v18 = -1 << v32;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_1C295F340(uint64_t a1, char a2)
{
  return sub_1C295F370(a1, a2, (void (*)(void))sub_1C2960AA0);
}

uint64_t sub_1C295F358(uint64_t a1, char a2)
{
  return sub_1C295F370(a1, a2, (void (*)(void))sub_1C2960F78);
}

uint64_t sub_1C295F370(uint64_t a1, char a2, void (*a3)(void))
{
  uint64_t v4 = v3;
  uint64_t v6 = *v3;
  a3(0);
  uint64_t v7 = sub_1C2A9E668();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_40;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v37 = v3;
  uint64_t v38 = v6 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v6 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v15 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v22 = v21 | (v15 << 6);
      goto LABEL_31;
    }
    int64_t v23 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v12) {
      break;
    }
    uint64_t v24 = (void *)(v6 + 64);
    unint64_t v25 = *(void *)(v38 + 8 * v23);
    ++v15;
    if (!v25)
    {
      int64_t v15 = v23 + 1;
      if (v23 + 1 >= v12) {
        goto LABEL_33;
      }
      unint64_t v25 = *(void *)(v38 + 8 * v15);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v12)
        {
LABEL_33:
          swift_release();
          uint64_t v4 = v37;
          if ((a2 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v25 = *(void *)(v38 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v15 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_42;
            }
            if (v15 >= v12) {
              goto LABEL_33;
            }
            unint64_t v25 = *(void *)(v38 + 8 * v15);
            ++v26;
            if (v25) {
              goto LABEL_30;
            }
          }
        }
        int64_t v15 = v26;
      }
    }
LABEL_30:
    unint64_t v11 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_31:
    uint64_t v31 = 8 * v22;
    uint64_t v32 = *(void **)(*(void *)(v6 + 48) + v31);
    int64_t v33 = *(void **)(*(void *)(v6 + 56) + v31);
    if ((a2 & 1) == 0)
    {
      id v34 = v32;
      id v35 = v33;
    }
    uint64_t result = sub_1C2A9E2A8();
    uint64_t v16 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v17 = result & ~v16;
    unint64_t v18 = v17 >> 6;
    if (((-1 << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      unint64_t v19 = __clz(__rbit64((-1 << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v29 = v18 == v28;
        if (v18 == v28) {
          unint64_t v18 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      unint64_t v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    uint64_t v20 = 8 * v19;
    *(void *)(*(void *)(v8 + 48) + v20) = v32;
    *(void *)(*(void *)(v8 + 56) + v20) = v33;
    ++*(void *)(v8 + 16);
  }
  swift_release();
  uint64_t v4 = v37;
  uint64_t v24 = (void *)(v6 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v36 = 1 << *(unsigned char *)(v6 + 32);
  if (v36 >= 64) {
    bzero(v24, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v24 = -1 << v36;
  }
  *(void *)(v6 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v4 = v8;
  return result;
}

uint64_t sub_1C295F644(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_1C2961084(0, &qword_1EBB90DA8, (void (*)(void))sub_1C2960CDC);
  uint64_t result = sub_1C2A9E668();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    char v31 = a2;
    int64_t v8 = 0;
    uint64_t v9 = (void *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v17 = v16 | (v8 << 6);
      }
      else
      {
        int64_t v18 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v18 >= v13) {
          goto LABEL_31;
        }
        unint64_t v19 = v9[v18];
        ++v8;
        if (!v19)
        {
          int64_t v8 = v18 + 1;
          if (v18 + 1 >= v13) {
            goto LABEL_31;
          }
          unint64_t v19 = v9[v8];
          if (!v19)
          {
            int64_t v20 = v18 + 2;
            if (v20 >= v13)
            {
LABEL_31:
              if ((v31 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_38;
              }
              uint64_t v30 = 1 << *(unsigned char *)(v5 + 32);
              if (v30 >= 64) {
                bzero((void *)(v5 + 64), ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v9 = -1 << v30;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v19 = v9[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v8 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v13) {
                  goto LABEL_31;
                }
                unint64_t v19 = v9[v8];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v20;
          }
        }
LABEL_21:
        unint64_t v12 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      char v21 = *(unsigned char *)(*(void *)(v5 + 48) + v17);
      uint64_t v22 = *(void *)(*(void *)(v5 + 56) + 8 * v17);
      sub_1C2A9E9B8();
      sub_1C2A9E9C8();
      uint64_t result = sub_1C2A9E9E8();
      uint64_t v23 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v24 = result & ~v23;
      unint64_t v25 = v24 >> 6;
      if (((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v28 = v25 == v27;
          if (v25 == v27) {
            unint64_t v25 = 0;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v14 + 8 * v25);
        }
        while (v29 == -1);
        unint64_t v15 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(unsigned char *)(*(void *)(v7 + 48) + v15) = v21;
      *(void *)(*(void *)(v7 + 56) + 8 * v15) = v22;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *uint64_t v3 = v7;
  return result;
}

__n128 sub_1C295F938(char a1, uint64_t a2, void *a3)
{
  sub_1C2A9E9B8();
  sub_1C2A9DD78();
  swift_bridgeObjectRelease();
  sub_1C2A9E9E8();
  unint64_t v6 = sub_1C2A9E3C8();
  *(void *)((char *)a3 + ((v6 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v6;
  *(unsigned char *)(a3[6] + v6) = a1;
  uint64_t v7 = a3[7] + 216 * v6;
  long long v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v7 = *(_OWORD *)a2;
  *(_OWORD *)(v7 + 16) = v8;
  long long v9 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v7 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v7 + 80) = v9;
  long long v10 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v7 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v7 + 48) = v10;
  long long v11 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(v7 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(v7 + 144) = v11;
  long long v12 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(v7 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(v7 + 112) = v12;
  *(unsigned char *)(v7 + 208) = *(unsigned char *)(a2 + 208);
  long long v13 = *(_OWORD *)(a2 + 192);
  long long v15 = *(_OWORD *)(a2 + 160);
  __n128 result = *(__n128 *)(a2 + 176);
  *(__n128 *)(v7 + 176) = result;
  *(_OWORD *)(v7 + 192) = v13;
  *(_OWORD *)(v7 + 160) = v15;
  ++a3[2];
  return result;
}

_OWORD *sub_1C295FB18(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  __n128 result = sub_1C2937880(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v6 = a4[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

void *sub_1C295FB80()
{
  unint64_t v1 = v0;
  sub_1C2961190();
  uint64_t v2 = *v0;
  uint64_t v3 = sub_1C2A9E658();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    __n128 result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  __n128 result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    __n128 result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v13) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      int64_t v9 = v24 + 1;
      if (v24 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v25 = *(void *)(v6 + 8 * v9);
      if (!v25) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v25 - 1) & v25;
    unint64_t v15 = __clz(__rbit64(v25)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    unint64_t v17 = *(void **)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 16 * v15;
    unint64_t v19 = (uint64_t *)(*(void *)(v2 + 56) + v18);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    uint64_t v22 = (void *)(*(void *)(v4 + 56) + v18);
    *uint64_t v22 = v20;
    v22[1] = v21;
    id v23 = v17;
    __n128 result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v26 = v24 + 2;
  if (v26 >= v13) {
    goto LABEL_26;
  }
  unint64_t v25 = *(void *)(v6 + 8 * v26);
  if (v25)
  {
    int64_t v9 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v6 + 8 * v9);
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1C295FD34()
{
  unint64_t v1 = v0;
  sub_1C2961140(0, (unint64_t *)&qword_1EBB923A8);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_1C2A9E658();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    __n128 result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  __n128 result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    __n128 result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v26 - 1) & v26;
    unint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = (uint64_t *)(*(void *)(v2 + 56) + v16);
    uint64_t v21 = *v20;
    uint64_t v22 = v20[1];
    id v23 = (void *)(*(void *)(v4 + 48) + v16);
    *id v23 = v19;
    v23[1] = v18;
    int64_t v24 = (void *)(*(void *)(v4 + 56) + v16);
    *int64_t v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    __n128 result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  unint64_t v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    int64_t v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1C295FF08()
{
  unint64_t v1 = v0;
  sub_1C2961084(0, &qword_1EA31DF10, (void (*)(void))sub_1C29610EC);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_1C2A9E658();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    __n128 result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  __n128 result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    __n128 result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v21 = __clz(__rbit64(v19));
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = v21 + (v9 << 6);
LABEL_12:
    uint64_t v16 = *(void *)(v2 + 56) + 216 * v15;
    long long v32 = *(_OWORD *)(v16 + 160);
    long long v33 = *(_OWORD *)(v16 + 176);
    long long v34 = *(_OWORD *)(v16 + 192);
    char v35 = *(unsigned char *)(v16 + 208);
    long long v28 = *(_OWORD *)(v16 + 96);
    long long v29 = *(_OWORD *)(v16 + 112);
    long long v30 = *(_OWORD *)(v16 + 128);
    long long v31 = *(_OWORD *)(v16 + 144);
    long long v24 = *(_OWORD *)(v16 + 32);
    long long v25 = *(_OWORD *)(v16 + 48);
    long long v26 = *(_OWORD *)(v16 + 64);
    long long v27 = *(_OWORD *)(v16 + 80);
    long long v22 = *(_OWORD *)v16;
    long long v23 = *(_OWORD *)(v16 + 16);
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
    uint64_t v17 = *(void *)(v4 + 56) + 216 * v15;
    *(_OWORD *)(v17 + 160) = v32;
    *(_OWORD *)(v17 + 176) = v33;
    *(_OWORD *)(v17 + 192) = v34;
    *(unsigned char *)(v17 + 208) = v35;
    *(_OWORD *)(v17 + 96) = v28;
    *(_OWORD *)(v17 + 112) = v29;
    *(_OWORD *)(v17 + 128) = v30;
    *(_OWORD *)(v17 + 144) = v31;
    *(_OWORD *)(v17 + 32) = v24;
    *(_OWORD *)(v17 + 48) = v25;
    *(_OWORD *)(v17 + 64) = v26;
    *(_OWORD *)(v17 + 80) = v27;
    *(_OWORD *)uint64_t v17 = v22;
    *(_OWORD *)(v17 + 16) = v23;
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1C2960154()
{
  unint64_t v1 = v0;
  sub_1C2961140(0, (unint64_t *)&qword_1EA31DF08);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_1C2A9E658();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    __n128 result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  __n128 result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    __n128 result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v26 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v26 >= v13) {
      goto LABEL_26;
    }
    unint64_t v27 = *(void *)(v6 + 8 * v26);
    ++v9;
    if (!v27)
    {
      int64_t v9 = v26 + 1;
      if (v26 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v27 = *(void *)(v6 + 8 * v9);
      if (!v27) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v27 - 1) & v27;
    unint64_t v15 = __clz(__rbit64(v27)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 40 * v15;
    uint64_t v19 = *(void *)(v2 + 56) + v18;
    uint64_t v20 = *(void *)(v19 + 16);
    char v21 = *(unsigned char *)(v19 + 24);
    char v22 = *(unsigned char *)(v19 + 25);
    uint64_t v23 = *(void *)(v19 + 32);
    long long v24 = *(_OWORD *)v19;
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    uint64_t v25 = *(void *)(v4 + 56) + v18;
    *(_OWORD *)uint64_t v25 = v24;
    *(void *)(v25 + 16) = v20;
    *(unsigned char *)(v25 + 24) = v21;
    *(unsigned char *)(v25 + 25) = v22;
    *(void *)(v25 + 32) = v23;
    __n128 result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v28 = v26 + 2;
  if (v28 >= v13) {
    goto LABEL_26;
  }
  unint64_t v27 = *(void *)(v6 + 8 * v28);
  if (v27)
  {
    int64_t v9 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v27 = *(void *)(v6 + 8 * v9);
    ++v28;
    if (v27) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_1C2960344()
{
  unint64_t v1 = v0;
  sub_1C2937B6C();
  uint64_t v2 = *v0;
  uint64_t v3 = sub_1C2A9E658();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      int64_t v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v20 = *(void *)(v6 + 8 * v9);
      if (!v20) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t v18 = 32 * v15;
    sub_1C29577B8(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v22);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    sub_1C2937880(v22, (_OWORD *)(*(void *)(v4 + 56) + v18));
    id result = v17;
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v13) {
    goto LABEL_26;
  }
  unint64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    int64_t v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_1C2960508()
{
  return sub_1C2960520((void (*)(void))sub_1C2960AA0);
}

id sub_1C2960520(void (*a1)(void))
{
  uint64_t v2 = v1;
  a1(0);
  uint64_t v3 = *v1;
  uint64_t v4 = sub_1C2A9E658();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  id result = (id)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    int64_t v21 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v14) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v7 + 8 * v21);
    ++v10;
    if (!v22)
    {
      int64_t v10 = v21 + 1;
      if (v21 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v7 + 8 * v10);
      if (!v22) {
        break;
      }
    }
LABEL_25:
    unint64_t v13 = (v22 - 1) & v22;
    unint64_t v16 = __clz(__rbit64(v22)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 8 * v16;
    uint64_t v18 = *(void **)(*(void *)(v3 + 48) + v17);
    int64_t v19 = *(void **)(*(void *)(v3 + 56) + v17);
    *(void *)(*(void *)(v5 + 48) + v17) = v18;
    *(void *)(*(void *)(v5 + 56) + v17) = v19;
    id v20 = v18;
    id result = v19;
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v14) {
    goto LABEL_26;
  }
  unint64_t v22 = *(void *)(v7 + 8 * v23);
  if (v22)
  {
    int64_t v10 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v7 + 8 * v10);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1C29606CC()
{
  unint64_t v1 = v0;
  sub_1C2961084(0, &qword_1EBB90DA8, (void (*)(void))sub_1C2960CDC);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_1C2A9E658();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18) {
        break;
      }
    }
LABEL_25:
    unint64_t v20 = __clz(__rbit64(v18));
    unint64_t v12 = (v18 - 1) & v18;
    unint64_t v15 = v20 + (v9 << 6);
LABEL_12:
    uint64_t v16 = *(void *)(*(void *)(v2 + 56) + 8 * v15);
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
    *(void *)(*(void *)(v4 + 56) + 8 * v15) = v16;
  }
  int64_t v19 = v17 + 2;
  if (v19 >= v13) {
    goto LABEL_26;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1C2960884(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = *v5;
  unint64_t v14 = sub_1C295DDC8(a3, a4);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0) {
    goto LABEL_7;
  }
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_1C295FD34();
LABEL_7:
    unint64_t v20 = (void *)*v6;
    if (v18)
    {
LABEL_8:
      int64_t v21 = (void *)(v20[7] + 16 * v14);
      uint64_t result = swift_bridgeObjectRelease();
      *int64_t v21 = a1;
      v21[1] = a2;
      return result;
    }
    goto LABEL_11;
  }
  sub_1C295E730(v17, a5 & 1);
  unint64_t v23 = sub_1C295DDC8(a3, a4);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_17:
    uint64_t result = sub_1C2A9E928();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  unint64_t v20 = (void *)*v6;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  v20[(v14 >> 6) + 8] |= 1 << v14;
  uint64_t v25 = (uint64_t *)(v20[6] + 16 * v14);
  *uint64_t v25 = a3;
  v25[1] = a4;
  int64_t v26 = (void *)(v20[7] + 16 * v14);
  *int64_t v26 = a1;
  v26[1] = a2;
  uint64_t v27 = v20[2];
  BOOL v28 = __OFADD__(v27, 1);
  uint64_t v29 = v27 + 1;
  if (v28)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v20[2] = v29;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1C2960A0C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  if (a4 <= 2u) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1C2960A2C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  if (a4 <= 2u) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t method lookup function for Localization(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for Localization);
}

uint64_t dispatch thunk of static Localization.localize(_:substitutions:mySelf:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of static Localization.localize(stringsDictKey:stringsDictFormatArguments:substitutions:mySelf:tableName:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of static Localization.registerLocalization(classForBundle:localizationFile:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

void sub_1C2960AA0()
{
  if (!qword_1EBB8E320)
  {
    sub_1C29376D4(255, (unint64_t *)&qword_1EBB92468);
    sub_1C29376D4(255, &qword_1EBB92128);
    sub_1C2961034((unint64_t *)&qword_1EBB92100, (unint64_t *)&qword_1EBB92468);
    unint64_t v0 = sub_1C2A9E698();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EBB8E320);
    }
  }
}

_OWORD *sub_1C2960B5C(_OWORD *a1, void *a2, char a3)
{
  uint64_t v4 = (void **)v3;
  unint64_t v7 = (void *)*v3;
  unint64_t v9 = sub_1C2937890((uint64_t)a2);
  uint64_t v10 = v7[2];
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v13 = v8;
  uint64_t v14 = v7[3];
  if (v14 < v12 || (a3 & 1) == 0)
  {
    if (v14 >= v12 && (a3 & 1) == 0)
    {
      sub_1C2960344();
      goto LABEL_7;
    }
    sub_1C295F008(v12, a3 & 1);
    unint64_t v18 = sub_1C2937890((uint64_t)a2);
    if ((v13 & 1) == (v19 & 1))
    {
      unint64_t v9 = v18;
      uint64_t v15 = *v4;
      if (v13) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    type metadata accessor for Key(0);
    uint64_t result = (_OWORD *)sub_1C2A9E928();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v15 = *v4;
  if (v13)
  {
LABEL_8:
    BOOL v16 = (_OWORD *)(v15[7] + 32 * v9);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
    return sub_1C2937880(a1, v16);
  }
LABEL_13:
  sub_1C295FB18(v9, (uint64_t)a2, a1, v15);
  return a2;
}

void sub_1C2960CA0(uint64_t a1, void *a2, char a3)
{
}

unint64_t sub_1C2960CDC()
{
  unint64_t result = qword_1EBB907D8;
  if (!qword_1EBB907D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB907D8);
  }
  return result;
}

void sub_1C2960D30(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v8 = sub_1C29376D4(255, a3);
    unint64_t v9 = a5(a1, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

void sub_1C2960D98(uint64_t a1, void *a2, char a3)
{
}

void sub_1C2960DD4(uint64_t a1, void *a2, char a3, uint64_t (*a4)(void *), void (*a5)(void), unint64_t *a6)
{
  uint64_t v10 = v6;
  uint64_t v13 = *v6;
  unint64_t v15 = a4(a2);
  uint64_t v16 = *(void *)(v13 + 16);
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v19 = v14;
  uint64_t v20 = *(void *)(v13 + 24);
  if (v20 >= v18 && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v20 >= v18 && (a3 & 1) == 0)
  {
    sub_1C2960520(a5);
LABEL_7:
    int64_t v21 = (void *)*v10;
    if (v19)
    {
LABEL_8:
      uint64_t v22 = v21[7];

      *(void *)(v22 + 8 * v15) = a1;
      return;
    }
    goto LABEL_11;
  }
  sub_1C295F370(v18, a3 & 1, a5);
  uint64_t v23 = a4(a2);
  if ((v19 & 1) != (v24 & 1))
  {
LABEL_17:
    sub_1C29376D4(0, a6);
    sub_1C2A9E928();
    __break(1u);
    return;
  }
  unint64_t v15 = v23;
  int64_t v21 = (void *)*v10;
  if (v19) {
    goto LABEL_8;
  }
LABEL_11:
  v21[(v15 >> 6) + 8] |= 1 << v15;
  uint64_t v25 = 8 * v15;
  *(void *)(v21[6] + v25) = a2;
  *(void *)(v21[7] + v25) = a1;
  uint64_t v26 = v21[2];
  BOOL v27 = __OFADD__(v26, 1);
  uint64_t v28 = v26 + 1;
  if (v27)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v21[2] = v28;
  id v29 = a2;
}

void sub_1C2960F78()
{
  if (!qword_1EBB8E0A0)
  {
    sub_1C29376D4(255, (unint64_t *)&qword_1EBB92500);
    sub_1C29376D4(255, &qword_1EBB92130);
    sub_1C2961034((unint64_t *)&qword_1EBB8E098, (unint64_t *)&qword_1EBB92500);
    unint64_t v0 = sub_1C2A9E698();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EBB8E0A0);
    }
  }
}

uint64_t sub_1C2961034(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1C29376D4(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1C2961084(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = sub_1C2A9E698();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unint64_t sub_1C29610EC()
{
  unint64_t result = qword_1EBB8FEE8;
  if (!qword_1EBB8FEE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB8FEE8);
  }
  return result;
}

void sub_1C2961140(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = sub_1C2A9E698();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

void sub_1C2961190()
{
  if (!qword_1EBB90DB0)
  {
    sub_1C29376D4(255, &qword_1EBB91BB0);
    sub_1C2961034(&qword_1EBB90D98, &qword_1EBB91BB0);
    unint64_t v0 = sub_1C2A9E698();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EBB90DB0);
    }
  }
}

uint64_t sub_1C296122C()
{
  swift_retain();
  sub_1C2A9C9B8();
  swift_release();
  return v1;
}

uint64_t sub_1C296127C(void *a1, char a2)
{
  char v3 = a2 & 1;
  swift_retain();
  sub_1C2A9C9C8();
  sub_1C2962A14(a1, v3);
  return swift_release();
}

id sub_1C2961348()
{
  uint64_t v1 = qword_1EBB90F60;
  uint64_t v2 = *(void **)((char *)v0 + qword_1EBB90F60);
  if (v2)
  {
    id v3 = *(id *)((char *)v0 + qword_1EBB90F60);
  }
  else
  {
    id v4 = sub_1C29613AC(v0);
    uint64_t v5 = *(void **)((char *)v0 + v1);
    *(void *)((char *)v0 + v1) = v4;
    id v3 = v4;

    uint64_t v2 = 0;
  }
  id v6 = v2;
  return v3;
}

id sub_1C29613AC(void *a1)
{
  uint64_t v31 = *MEMORY[0x1E4FBC8C8] & *a1;
  uint64_t v2 = sub_1C2A9CF58();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v26 - v7;
  if (qword_1EBB92338 != -1) {
    swift_once();
  }
  id v9 = (id)qword_1EBB91C60;
  uint64_t v10 = a1;
  sub_1C2A9CF48();
  uint64_t v11 = sub_1C29376D4(0, (unint64_t *)&qword_1EBB8FF98);
  id v27 = *(id *)((char *)v10 + qword_1EBB90F30);
  uint64_t v12 = *(void **)((char *)v10 + qword_1EBB90F70);
  uint64_t v28 = *(void *)((char *)v10 + qword_1EBB90F68);
  uint64_t v29 = v11;
  uint64_t v13 = *(void *)((char *)v10 + qword_1EBB90F48);
  uint64_t v14 = swift_allocObject();
  long long v30 = v8;
  uint64_t v15 = v14;
  swift_unknownObjectWeakInit();
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v5, v8, v2);
  unint64_t v16 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v17 = v2;
  unint64_t v18 = (v4 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v19 = swift_allocObject();
  uint64_t v20 = v31 + class metadata base offset for SampleQueryOperation;
  *(void *)(v19 + 16) = *(void *)(v31 + class metadata base offset for SampleQueryOperation);
  *(void *)(v19 + 24) = *(void *)(v20 + 8);
  (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v19 + v16, v5, v17);
  *(void *)(v19 + v18) = v15;
  swift_bridgeObjectRetain();
  id v21 = v27;
  id v22 = v12;
  id v23 = sub_1C29FB740(v21, v12, v28, v13, (uint64_t)sub_1C2962854, v19);
  id v24 = objc_msgSend(v10, sel_name);
  objc_msgSend(v23, sel_setDebugIdentifier_, v24);

  objc_msgSend(v23, sel_setQualityOfService_, *(void *)((char *)v10 + qword_1EBB90F58));
  (*(void (**)(char *, uint64_t))(v3 + 8))(v30, v17);
  return v23;
}

void sub_1C29616E8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = a5 + 16;
  sub_1C2A9E1A8();
  if (qword_1EBB92338 != -1) {
    swift_once();
  }
  sub_1C2A9CF38();
  swift_beginAccess();
  uint64_t v8 = (char *)MEMORY[0x1C87657D0](v7);
  if (v8)
  {
    id v9 = v8;
    if (objc_msgSend(v8, sel_isCancelled))
    {
      v10._uint64_t countAndFlagsBits = 0xD00000000000002DLL;
      v10._uint64_t object = (void *)0x80000001C2AB6030;
      v11._uint64_t countAndFlagsBits = 0;
      v11._uint64_t object = (void *)0xE000000000000000;
      NSOperation.logLifeCycleEvent(_:withPrivateInfo:)(v10, v11);
LABEL_7:

      return;
    }
    if (objc_msgSend(v9, sel_isFinished)) {
      goto LABEL_7;
    }
    if (a2 && (sub_1C29376D4(0, &qword_1EBB927D8), (uint64_t v12 = sub_1C2A9E6D8()) != 0))
    {
      uint64_t v13 = (void *)v12;
      uint64_t v14 = 0;
    }
    else
    {
      if (a3) {
        uint64_t v15 = 0xD00000000000001BLL;
      }
      else {
        uint64_t v15 = 0;
      }
      if (a3) {
        uint64_t v16 = 0x80000001C2AB6570;
      }
      else {
        uint64_t v16 = 0;
      }
      if (a3) {
        unint64_t v17 = a3 | 0x8000000000000000;
      }
      else {
        unint64_t v17 = 0xC000000000000000;
      }
      sub_1C296291C();
      unint64_t v18 = (void *)swift_allocError();
      *uint64_t v19 = v15;
      v19[1] = v16;
      double v19[2] = v17;
      swift_getErrorValue();
      id v20 = (id)a3;
      sub_1C2962970(v15, v16, v17);
      v21._uint64_t countAndFlagsBits = sub_1C2A9E938();
      v22._uint64_t countAndFlagsBits = 0;
      v22._uint64_t object = (void *)0xE000000000000000;
      NSOperation.logErrorString(_:withInfo:)(v21, v22);
      swift_bridgeObjectRelease();

      uint64_t v13 = (void *)swift_allocError();
      *id v23 = v15;
      v23[1] = v16;
      v23[2] = v17;
      uint64_t v14 = 1;
    }
    id v24 = *(void (**)(void *, uint64_t))&v9[qword_1EBB90F40];
    swift_retain();
    v24(v13, v14);
    uint64_t v25 = swift_release();
    MEMORY[0x1F4188790](v25);
    sub_1C2A9CA08();

    sub_1C2962A14(v13, v14);
  }
}

uint64_t sub_1C29619D4(uint64_t a1, void *a2, char a3)
{
  char v5 = a3 & 1;
  sub_1C296276C(a2, a3 & 1);
  sub_1C296127C(a2, v5);
  id v6 = objc_msgSend(*(id *)(a1 + qword_1EBB90F30), sel_identifier);
  uint64_t v7 = sub_1C2A9DD28();
  id v9 = v8;

  v10._uint64_t countAndFlagsBits = 0x64656873696E6966;
  v10._uint64_t object = (void *)0xE800000000000000;
  v11._uint64_t countAndFlagsBits = v7;
  v11._uint64_t object = v9;
  NSOperation.logLifeCycleEvent(_:withPrivateInfo:)(v10, v11);
  return swift_bridgeObjectRelease();
}

id SampleQueryOperation.__allocating_init(sampleType:predicate:limit:sortDescriptors:name:queryQualityOfService:healthStore:resultHandler:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, uint64_t a10)
{
  id v18 = objc_allocWithZone(v10);
  return SampleQueryOperation.init(sampleType:predicate:limit:sortDescriptors:name:queryQualityOfService:healthStore:resultHandler:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

id SampleQueryOperation.init(sampleType:predicate:limit:sortDescriptors:name:queryQualityOfService:healthStore:resultHandler:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, uint64_t a10)
{
  uint64_t v14 = qword_1EBB90F50;
  sub_1C2A9DEF8();
  sub_1C29415E4(255, (unint64_t *)&qword_1EBB92210);
  sub_1C2A9E9F8();
  sub_1C2A9C9D8();
  sub_1C2962438();
  uint64_t v15 = swift_allocError();
  *uint64_t v16 = 0;
  uint64_t v32 = v15;
  char v33 = 1;
  unint64_t v17 = v10;
  *(void *)&v10[v14] = sub_1C2A9C9E8();
  *(void *)&v17[qword_1EBB90F60] = 0;
  *(void *)&v17[qword_1EBB90F30] = a1;
  *(void *)&v17[qword_1EBB90F70] = a2;
  *(void *)&v17[qword_1EBB90F68] = a3;
  *(void *)&v17[qword_1EBB90F48] = a4;
  *(void *)&v17[qword_1EBB90F58] = a7;
  *(void *)&v17[qword_1EBB90F38] = a8;
  id v18 = &v17[qword_1EBB90F40];
  *(void *)id v18 = a9;
  *((void *)v18 + 1) = a10;
  id v19 = a2;
  id v20 = a1;
  id v21 = a8;
  swift_retain();

  v31.receiver = v17;
  v31.super_class = (Class)type metadata accessor for SampleQueryOperation();
  id v22 = objc_msgSendSuper2(&v31, sel_init);
  id v23 = v22;
  if (a6)
  {
    id v24 = (void *)sub_1C2A9DCF8();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v24 = 0;
  }
  objc_msgSend(v22, sel_setName_, v24, a5);

  swift_release();
  return v22;
}

uint64_t sub_1C2961DA0()
{
  uint64_t v1 = sub_1C2A9CF58();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C2962438();
  char v5 = (void *)swift_allocError();
  *id v6 = 2;
  sub_1C296127C(v5, 1);
  uint64_t v7 = *(void **)&v0[qword_1EBB90F30];
  id v8 = objc_msgSend(v7, sel_identifier);
  uint64_t v9 = sub_1C2A9DD28();
  Swift::String v11 = v10;

  v12._uint64_t countAndFlagsBits = 0x676E696E6E7572;
  v12._uint64_t object = (void *)0xE700000000000000;
  v13._uint64_t countAndFlagsBits = v9;
  v13._uint64_t object = v11;
  NSOperation.logLifeCycleEvent(_:withPrivateInfo:)(v12, v13);
  swift_bridgeObjectRelease();
  if (qword_1EBB92338 != -1) {
    swift_once();
  }
  id v14 = (id)qword_1EBB91C60;
  uint64_t v15 = v0;
  sub_1C2A9CF48();
  sub_1C2A9E1B8();
  sub_1C29624A4();
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_1C2AA6B00;
  id v17 = objc_msgSend(v7, sel_identifier);
  uint64_t v18 = sub_1C2A9DD28();
  uint64_t v20 = v19;

  *(void *)(v16 + 56) = MEMORY[0x1E4FBB1A0];
  *(void *)(v16 + 64) = sub_1C296250C();
  *(void *)(v16 + 32) = v18;
  *(void *)(v16 + 40) = v20;
  sub_1C2A9CF28();
  swift_bridgeObjectRelease();
  id v21 = *(void **)&v15[qword_1EBB90F38];
  id v22 = sub_1C2961348();
  objc_msgSend(v21, sel_executeQuery_, v22);

  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
}

void sub_1C2962040(void *a1)
{
  id v1 = a1;
  sub_1C2961DA0();
}

void sub_1C2962088()
{
  if (objc_msgSend(v0, sel_isCancelled))
  {
    sub_1C2962438();
    id v1 = (void *)swift_allocError();
    *uint64_t v2 = 3;
    sub_1C296127C(v1, 1);
    id v3 = objc_msgSend(*(id *)&v0[qword_1EBB90F30], sel_identifier);
    uint64_t v4 = sub_1C2A9DD28();
    id v6 = v5;

    v7._uint64_t countAndFlagsBits = 0x656C6C65636E6163;
    v7._uint64_t object = (void *)0xE900000000000064;
    v8._uint64_t countAndFlagsBits = v4;
    v8._uint64_t object = v6;
    NSOperation.logLifeCycleEvent(_:withPrivateInfo:)(v7, v8);
    swift_bridgeObjectRelease();
  }
  uint64_t v9 = *(void **)&v0[qword_1EBB90F38];
  id v10 = sub_1C2961348();
  objc_msgSend(v9, sel_stopQuery_, v10);
}

id SampleQueryOperation.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void SampleQueryOperation.init()()
{
}

void sub_1C296220C()
{
}

void sub_1C2962254()
{
  swift_release();

  swift_bridgeObjectRelease();
  swift_release();
  id v1 = *(void **)(v0 + qword_1EBB90F60);
}

id SampleQueryOperation.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SampleQueryOperation();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void sub_1C2962364(uint64_t a1)
{
  swift_release();

  swift_bridgeObjectRelease();
  swift_release();
  objc_super v2 = *(void **)(a1 + qword_1EBB90F60);
}

uint64_t sub_1C2962404@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = sub_1C296122C();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

unint64_t sub_1C2962438()
{
  unint64_t result = qword_1EBB91D68;
  if (!qword_1EBB91D68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB91D68);
  }
  return result;
}

uint64_t type metadata accessor for SampleQueryOperation()
{
  return __swift_instantiateGenericMetadata();
}

void sub_1C29624A4()
{
  if (!qword_1EBB927E0)
  {
    sub_1C29415E4(255, (unint64_t *)&qword_1EBB927E8);
    unint64_t v0 = sub_1C2A9E8A8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EBB927E0);
    }
  }
}

unint64_t sub_1C296250C()
{
  unint64_t result = qword_1EBB927C8;
  if (!qword_1EBB927C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB927C8);
  }
  return result;
}

void sub_1C2962560()
{
}

uint64_t sub_1C2962590@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = sub_1C296122C();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_1C29625C4(uint64_t a1)
{
  id v1 = *(id *)a1;
  char v2 = *(unsigned char *)(a1 + 8);
  sub_1C296276C(*(id *)a1, v2);
  return sub_1C296127C(v1, v2);
}

uint64_t sub_1C296260C()
{
  return 16;
}

__n128 sub_1C2962618(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1C2962628()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for SampleQueryOperation(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SampleQueryOperation);
}

uint64_t dispatch thunk of SampleQueryOperation.result.getter()
{
  return (*(uint64_t (**)(void))(class metadata base offset for SampleQueryOperation + (*MEMORY[0x1E4FBC8C8] & *v0) + 112))();
}

uint64_t dispatch thunk of SampleQueryOperation.__allocating_init(sampleType:predicate:limit:sortDescriptors:name:queryQualityOfService:healthStore:resultHandler:)()
{
  return (*(uint64_t (**)(void))(class metadata base offset for SampleQueryOperation + v0 + 160))();
}

id sub_1C296276C(id a1, char a2)
{
  if (a2) {
    return a1;
  }
  else {
    return (id)swift_bridgeObjectRetain();
  }
}

uint64_t sub_1C2962778()
{
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1C29627B0()
{
  uint64_t v1 = sub_1C2A9CF58();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  return MEMORY[0x1F4186498](v0, v6, v5);
}

void sub_1C2962854(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v7 = *(void *)(sub_1C2A9CF58() - 8);
  unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v3 + ((*(void *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8));
  sub_1C29616E8(a1, a2, a3, v3 + v8, v9);
}

unint64_t sub_1C296291C()
{
  unint64_t result = qword_1EBB91CC0;
  if (!qword_1EBB91CC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB91CC0);
  }
  return result;
}

uint64_t sub_1C2962970(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3 >> 61;
  if ((a3 >> 61) <= 5)
  {
    if (v3 > 5) {
      unint64_t v3 = 0;
    }
    return ((uint64_t (__cdecl *)())((char *)&loc_1C2962990 + (int)funcs_1C2962998[v3]))();
  }
  return result;
}

uint64_t sub_1C296299C()
{
  return swift_bridgeObjectRetain();
}

id sub_1C29629B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = (void *)(a3 & 0x1FFFFFFFFFFFFFFFLL);
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t sub_1C2962A08()
{
  return sub_1C29619D4(*(void *)(v0 + 16), *(void **)(v0 + 24), *(unsigned char *)(v0 + 32));
}

void sub_1C2962A14(id a1, char a2)
{
  if (a2) {

  }
  else {
    swift_bridgeObjectRelease();
  }
}

id sub_1C2962A20(uint64_t a1)
{
  unint64_t v3 = *(void **)(v1 + 32);
  char v4 = *(unsigned char *)(v1 + 40);
  sub_1C2962A14(*(id *)a1, *(unsigned char *)(a1 + 8));
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return sub_1C296276C(v3, v4);
}

uint64_t __swift_instantiateGenericMetadata()
{
  return swift_getGenericMetadata();
}

uint64_t TrendPredicate.init(categoryValues:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t TrendPredicate.categoryValues.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t static TrendPredicate.== infix(_:_:)(void **a1, void **a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = *a2;
  if (v2)
  {
    if (v3 && sub_1C2964088(v2, v3)) {
      return 1;
    }
  }
  else if (!v3)
  {
    return 1;
  }
  return 0;
}

uint64_t sub_1C2962AFC()
{
  return 1;
}

uint64_t sub_1C2962B04()
{
  return sub_1C2A9E9E8();
}

uint64_t sub_1C2962B48()
{
  return sub_1C2A9E9C8();
}

uint64_t sub_1C2962B70()
{
  return sub_1C2A9E9E8();
}

uint64_t sub_1C2962BB0()
{
  return 0x79726F6765746163;
}

uint64_t sub_1C2962BD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x79726F6765746163 && a2 == 0xEE007365756C6156)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = sub_1C2A9E8D8();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

void sub_1C2962C90(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_1C2962C9C(uint64_t a1)
{
  unint64_t v2 = sub_1C29640F4();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1C2962CD8(uint64_t a1)
{
  unint64_t v2 = sub_1C29640F4();
  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t TrendPredicate.encode(to:)(void *a1)
{
  sub_1C2967CB0(0, &qword_1EA31DF18, (uint64_t (*)(void))sub_1C29640F4, (uint64_t)&type metadata for TrendPredicate.CodingKeys, MEMORY[0x1E4FBBDE0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  char v7 = (char *)v10 - v6;
  uint64_t v8 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1C29640F4();
  sub_1C2A9EA18();
  unsigned int v10[3] = v8;
  sub_1C2967B94(0, &qword_1EBB8F800);
  sub_1C2964148(&qword_1EA31DF20);
  sub_1C2A9E818();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t TrendPredicate.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  Swift::String v12 = a2;
  sub_1C2967CB0(0, &qword_1EBB8F8C0, (uint64_t (*)(void))sub_1C29640F4, (uint64_t)&type metadata for TrendPredicate.CodingKeys, MEMORY[0x1E4FBBDC0]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v11 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1C29640F4();
  sub_1C2A9EA08();
  if (!v2)
  {
    uint64_t v9 = v12;
    sub_1C2967B94(0, &qword_1EBB8F800);
    sub_1C2964148(&qword_1EBB8F808);
    sub_1C2A9E758();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *uint64_t v9 = v13;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1C29630C8@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return TrendPredicate.init(from:)(a1, a2);
}

uint64_t sub_1C29630E0(void *a1)
{
  return TrendPredicate.encode(to:)(a1);
}

uint64_t sub_1C29630F8(void **a1, void **a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  if (v2)
  {
    if (v3 && sub_1C2964088(v2, v3)) {
      return 1;
    }
  }
  else if (!v3)
  {
    return 1;
  }
  return 0;
}

uint64_t TrendConfiguration.queryConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  unsigned __int8 v6 = *(unsigned char *)(v1 + 32);
  *(unsigned char *)(a1 + 32) = v6;
  return sub_1C29402B8(v2, v3, v4, v5, v6);
}

uint64_t TrendConfiguration.predicate.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 40);
  *a1 = v2;
  return sub_1C29641FC(v2);
}

uint64_t TrendConfiguration.dateRanges.getter()
{
  return swift_bridgeObjectRetain();
}

void TrendConfiguration.endingDate.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 56);
}

uint64_t TrendConfiguration.parameterOverrides.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t TrendConfiguration.absoluteChangeThreshold.getter()
{
  return *(void *)(v0 + 80);
}

__n128 TrendConfiguration.init(queryConfiguration:predicate:dateRanges:endingDate:analysisKinds:absoluteChangeThreshold:parameterOverrides:)@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  char v9 = *(unsigned char *)(a1 + 32);
  uint64_t v10 = *a2;
  char v11 = *a4;
  __n128 result = *(__n128 *)a1;
  long long v13 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a9 = *(_OWORD *)a1;
  *(_OWORD *)(a9 + 16) = v13;
  *(unsigned char *)(a9 + 32) = v9;
  *(void *)(a9 + 40) = v10;
  *(void *)(a9 + 48) = a3;
  *(unsigned char *)(a9 + 56) = v11;
  *(void *)(a9 + 64) = a5;
  *(void *)(a9 + 72) = a8;
  *(void *)(a9 + 80) = a6;
  *(unsigned char *)(a9 + 88) = a7 & 1;
  return result;
}

uint64_t sub_1C29631C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  uint64_t v3 = v2 - 1;
  uint64_t v4 = (double *)(a2 + 48);
  uint64_t v5 = (double *)(a1 + 48);
  do
  {
    uint64_t v6 = v3;
    BOOL v7 = *(v5 - 2) != *(v4 - 2);
    if (*(v5 - 1) != *(v4 - 1)) {
      BOOL v7 = 1;
    }
    int v8 = v7 | *(unsigned __int8 *)v5 ^ *(unsigned __int8 *)v4;
    if (v8) {
      break;
    }
    --v3;
    v4 += 3;
    v5 += 3;
  }
  while (v6);
  return (v8 ^ 1) & 1;
}

BOOL sub_1C2963248(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 == *(void *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
    {
      return 1;
    }
    else
    {
      uint64_t v5 = 0;
      uint64_t v6 = v2 - 1;
      do
      {
        char v7 = *(unsigned char *)(a1 + v5 + 64);
        uint64_t v8 = *(void *)(a1 + v5 + 72);
        uint64_t v9 = *(void *)(a1 + v5 + 80);
        char v10 = *(unsigned char *)(a1 + v5 + 88);
        uint64_t v11 = *(void *)(a1 + v5 + 96);
        char v12 = *(unsigned char *)(a1 + v5 + 120);
        long long v13 = *(_OWORD *)(a1 + v5 + 48);
        v33[0] = *(_OWORD *)(a1 + v5 + 32);
        v33[1] = v13;
        char v34 = v7;
        uint64_t v35 = v8;
        uint64_t v36 = v9;
        char v37 = v10;
        uint64_t v38 = v11;
        long long v39 = *(_OWORD *)(a1 + v5 + 104);
        char v40 = v12;
        char v14 = *(unsigned char *)(a2 + v5 + 64);
        uint64_t v15 = *(void *)(a2 + v5 + 72);
        uint64_t v16 = *(void *)(a2 + v5 + 80);
        char v17 = *(unsigned char *)(a2 + v5 + 88);
        uint64_t v18 = *(void *)(a2 + v5 + 96);
        char v19 = *(unsigned char *)(a2 + v5 + 120);
        long long v20 = *(_OWORD *)(a2 + v5 + 48);
        v25[0] = *(_OWORD *)(a2 + v5 + 32);
        v25[1] = v20;
        char v26 = v14;
        uint64_t v27 = v15;
        uint64_t v28 = v16;
        char v29 = v17;
        uint64_t v30 = v18;
        long long v31 = *(_OWORD *)(a2 + v5 + 104);
        char v32 = v19;
        BOOL v21 = _s19HealthVisualization18TrendConfigurationV2eeoiySbAC_ACtFZ_0((uint64_t)v33, (uint64_t)v25);
        BOOL v23 = v6-- != 0;
        if (!v21) {
          break;
        }
        v5 += 96;
      }
      while (v23);
    }
  }
  else
  {
    return 0;
  }
  return v21;
}

uint64_t sub_1C296334C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = a1 + 32;
    uint64_t v5 = a2 + 32;
    while (1)
    {
      uint64_t v6 = v4 + 40 * v3;
      uint64_t v7 = v5 + 40 * v3;
      if (*(void *)v6 != *(void *)v7 || *(void *)(v6 + 8) != *(void *)(v7 + 8)) {
        return 0;
      }
      uint64_t v9 = *(void **)(v6 + 32);
      char v10 = *(void **)(v7 + 32);
      if (*(unsigned char *)(v6 + 24))
      {
        uint64_t result = 0;
        if (!*(unsigned char *)(v7 + 24)) {
          return result;
        }
      }
      else
      {
        uint64_t result = 0;
        if ((*(unsigned char *)(v7 + 24) & 1) != 0 || *(double *)(v6 + 16) != *(double *)(v7 + 16)) {
          return result;
        }
      }
      if ((*(unsigned __int8 *)(v6 + 25) ^ *(unsigned __int8 *)(v7 + 25))) {
        return result;
      }
      uint64_t v12 = v9[2];
      if (v12 != v10[2]) {
        return 0;
      }
      if (v12) {
        BOOL v13 = v9 == v10;
      }
      else {
        BOOL v13 = 1;
      }
      if (!v13)
      {
        BOOL v14 = v9[4] == v10[4] && v9[5] == v10[5];
        if (!v14 && (sub_1C2A9E8D8() & 1) == 0) {
          return 0;
        }
        if (v12 != 1)
        {
          BOOL v15 = v9[6] == v10[6] && v9[7] == v10[7];
          if (!v15 && (sub_1C2A9E8D8() & 1) == 0) {
            return 0;
          }
          uint64_t v16 = v12 - 2;
          if (v16)
          {
            char v17 = v10 + 9;
            uint64_t v18 = v9 + 9;
            do
            {
              BOOL v19 = *(v18 - 1) == *(v17 - 1) && *v18 == *v17;
              if (!v19 && (sub_1C2A9E8D8() & 1) == 0) {
                return 0;
              }
              v17 += 2;
              v18 += 2;
            }
            while (--v16);
          }
        }
      }
      if (++v3 == v2) {
        return 1;
      }
    }
  }
  return 1;
}

uint64_t sub_1C29634E4(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  BOOL v5 = a1[4] == a2[4] && a1[5] == a2[5];
  if (v5 || (char v6 = sub_1C2A9E8D8(), result = 0, (v6 & 1) != 0))
  {
    uint64_t v8 = v2 - 1;
    if (!v8) {
      return 1;
    }
    uint64_t v9 = a2 + 7;
    for (unint64_t i = a1 + 7; ; i += 2)
    {
      BOOL v11 = *(i - 1) == *(v9 - 1) && *i == *v9;
      if (!v11 && (sub_1C2A9E8D8() & 1) == 0) {
        break;
      }
      v9 += 2;
      if (!--v8) {
        return 1;
      }
    }
    return 0;
  }
  return result;
}

BOOL sub_1C29635AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 == *(void *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
    {
      return 1;
    }
    else
    {
      uint64_t v5 = 0;
      uint64_t v6 = v2 - 1;
      do
      {
        __int16 v7 = *(_WORD *)(a1 + v5 + 40);
        uint64_t v8 = *(void *)(a1 + v5 + 48);
        __int16 v9 = *(_WORD *)(a1 + v5 + 56);
        char v10 = *(unsigned char *)(a1 + v5 + 58);
        uint64_t v24 = *(void *)(a1 + v5 + 32);
        __int16 v25 = v7;
        uint64_t v26 = v8;
        char v28 = v10;
        __int16 v27 = v9;
        __int16 v11 = *(_WORD *)(a2 + v5 + 40);
        uint64_t v12 = *(void *)(a2 + v5 + 48);
        __int16 v13 = *(_WORD *)(a2 + v5 + 56);
        char v14 = *(unsigned char *)(a2 + v5 + 58);
        uint64_t v19 = *(void *)(a2 + v5 + 32);
        __int16 v20 = v11;
        uint64_t v21 = v12;
        char v23 = v14;
        __int16 v22 = v13;
        BOOL v15 = _s19HealthVisualization20DiagramConfigurationO14LinePropertiesV2eeoiySbAE_AEtFZ_0((uint64_t)&v24, (uint64_t)&v19);
        BOOL v17 = v6-- != 0;
        if (!v15) {
          break;
        }
        v5 += 32;
      }
      while (v17);
    }
  }
  else
  {
    return 0;
  }
  return v15;
}

uint64_t sub_1C2963690(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    uint64_t v3 = (unsigned __int8 *)(a1 + 32);
    uint64_t v4 = (unsigned __int8 *)(a2 + 32);
    while (1)
    {
      unsigned int v7 = *v3++;
      uint64_t v6 = v7;
      unsigned int v9 = *v4++;
      uint64_t v8 = v9;
      unint64_t v10 = 0xEB00000000646569;
      uint64_t v11 = 0x6669636570736E75;
      switch(v6)
      {
        case 1:
          unint64_t v10 = 0xE700000000000000;
          uint64_t v11 = 0x656D69546C6C61;
          break;
        case 2:
          unint64_t v10 = 0xE500000000000000;
          uint64_t v11 = 0x7961646F74;
          break;
        case 3:
          uint64_t v11 = 0x57676E696C6C6F72;
          unint64_t v10 = 0xEB000000006B6565;
          break;
        case 4:
          uint64_t v11 = 0x4D676E696C6C6F72;
          unint64_t v10 = 0xEC00000068746E6FLL;
          break;
        case 5:
          uint64_t v11 = 0x48676E696C6C6F72;
          unint64_t v10 = 0xEF72616559666C61;
          break;
        default:
          break;
      }
      uint64_t v12 = 0x6669636570736E75;
      unint64_t v13 = 0xEB00000000646569;
      switch(v8)
      {
        case 1:
          unint64_t v13 = 0xE700000000000000;
          if (v11 == 0x656D69546C6C61) {
            goto LABEL_22;
          }
          goto LABEL_5;
        case 2:
          unint64_t v13 = 0xE500000000000000;
          if (v11 != 0x7961646F74) {
            goto LABEL_5;
          }
          goto LABEL_22;
        case 3:
          unint64_t v13 = 0xEB000000006B6565;
          if (v11 != 0x57676E696C6C6F72) {
            goto LABEL_5;
          }
          goto LABEL_22;
        case 4:
          uint64_t v12 = 0x4D676E696C6C6F72;
          unint64_t v13 = 0xEC00000068746E6FLL;
          goto LABEL_21;
        case 5:
          unint64_t v13 = 0xEF72616559666C61;
          if (v11 != 0x48676E696C6C6F72) {
            goto LABEL_5;
          }
          goto LABEL_22;
        default:
LABEL_21:
          if (v11 != v12) {
            goto LABEL_5;
          }
LABEL_22:
          if (v10 == v13)
          {
            swift_bridgeObjectRelease_n();
            if (!--v2) {
              return 1;
            }
          }
          else
          {
LABEL_5:
            char v5 = sub_1C2A9E8D8();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v5 & 1) == 0) {
              return 0;
            }
            if (!--v2) {
              return 1;
            }
          }
          break;
      }
    }
  }
  return 1;
}

uint64_t sub_1C2963934(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    uint64_t v3 = (unsigned char *)(a1 + 32);
    uint64_t v4 = (unsigned char *)(a2 + 32);
    do
    {
      if (*v3) {
        uint64_t v5 = 0x636E657571657266;
      }
      else {
        uint64_t v5 = 0x666968536E61656DLL;
      }
      if (*v3) {
        unint64_t v6 = 0xEF65676E61684379;
      }
      else {
        unint64_t v6 = 0xEF65676E61684374;
      }
      if (*v4) {
        uint64_t v7 = 0x636E657571657266;
      }
      else {
        uint64_t v7 = 0x666968536E61656DLL;
      }
      if (*v4) {
        unint64_t v8 = 0xEF65676E61684379;
      }
      else {
        unint64_t v8 = 0xEF65676E61684374;
      }
      if (v5 == v7 && v6 == v8)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v10 = sub_1C2A9E8D8();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v10 & 1) == 0) {
          return 0;
        }
      }
      ++v3;
      ++v4;
      --v2;
    }
    while (v2);
  }
  return 1;
}

uint64_t sub_1C2963A48(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    uint64_t v3 = (unsigned __int8 *)(a1 + 32);
    uint64_t v4 = (unsigned __int8 *)(a2 + 32);
    while (1)
    {
      unsigned int v7 = *v3++;
      uint64_t v6 = v7;
      unsigned int v9 = *v4++;
      uint64_t v8 = v9;
      unint64_t v10 = 0xEF65676172657641;
      unint64_t v11 = 0x6574657263736964;
      switch(v6)
      {
        case 1:
          unsigned int v12 = 1768843597;
          goto LABEL_10;
        case 2:
          unsigned int v12 = 1769496909;
LABEL_10:
          unint64_t v10 = v12 | 0xEF6D756D00000000;
          break;
        case 3:
          unint64_t v11 = 0x6974616C756D7563;
          unint64_t v10 = 0xED00006D75536576;
          break;
        case 4:
          unint64_t v11 = 0x6563655274736F6DLL;
          unint64_t v10 = 0xEA0000000000746ELL;
          break;
        case 5:
          unint64_t v10 = 0xE800000000000000;
          unint64_t v11 = 0x6E6F697461727564;
          break;
        case 6:
          unint64_t v11 = 0x4465676172657661;
          unint64_t v10 = 0xEF6E6F6974617275;
          break;
        case 7:
          unint64_t v10 = 0xE800000000000000;
          unint64_t v11 = 0x65636E6573657270;
          break;
        case 8:
          unint64_t v11 = 0xD00000000000001ALL;
          unint64_t v10 = 0x80000001C2AB52A0;
          break;
        case 9:
          unint64_t v10 = 0x80000001C2AB52C0;
          unint64_t v11 = 0xD000000000000019;
          break;
        default:
          break;
      }
      unint64_t v13 = 0x6574657263736964;
      unint64_t v14 = 0xEF65676172657641;
      switch(v8)
      {
        case 1:
          unsigned int v15 = 1768843597;
          goto LABEL_21;
        case 2:
          unsigned int v15 = 1769496909;
LABEL_21:
          unint64_t v14 = v15 | 0xEF6D756D00000000;
          if (v11 != 0x6574657263736964) {
            goto LABEL_5;
          }
          goto LABEL_35;
        case 3:
          unint64_t v14 = 0xED00006D75536576;
          if (v11 != 0x6974616C756D7563) {
            goto LABEL_5;
          }
          goto LABEL_35;
        case 4:
          unint64_t v14 = 0xEA0000000000746ELL;
          if (v11 != 0x6563655274736F6DLL) {
            goto LABEL_5;
          }
          goto LABEL_35;
        case 5:
          unint64_t v14 = 0xE800000000000000;
          if (v11 != 0x6E6F697461727564) {
            goto LABEL_5;
          }
          goto LABEL_35;
        case 6:
          unint64_t v14 = 0xEF6E6F6974617275;
          if (v11 != 0x4465676172657661) {
            goto LABEL_5;
          }
          goto LABEL_35;
        case 7:
          unint64_t v14 = 0xE800000000000000;
          if (v11 != 0x65636E6573657270) {
            goto LABEL_5;
          }
          goto LABEL_35;
        case 8:
          unint64_t v13 = 0xD00000000000001ALL;
          unint64_t v14 = 0x80000001C2AB52A0;
          goto LABEL_34;
        case 9:
          unint64_t v14 = 0x80000001C2AB52C0;
          if (v11 != 0xD000000000000019) {
            goto LABEL_5;
          }
          goto LABEL_35;
        default:
LABEL_34:
          if (v11 != v13) {
            goto LABEL_5;
          }
LABEL_35:
          if (v10 == v14)
          {
            swift_bridgeObjectRelease_n();
            if (!--v2) {
              return 1;
            }
          }
          else
          {
LABEL_5:
            char v5 = sub_1C2A9E8D8();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v5 & 1) == 0) {
              return 0;
            }
            if (!--v2) {
              return 1;
            }
          }
          break;
      }
    }
  }
  return 1;
}

uint64_t sub_1C2963DDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (int *)type metadata accessor for SignificantChange.Period(0);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  unint64_t v10 = (char *)&v21 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v11 && a1 != a2)
  {
    unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    uint64_t v13 = *(void *)(v8 + 72);
    while (1)
    {
      sub_1C2968FE8(a1 + v12, (uint64_t)v10);
      sub_1C2968FE8(a2 + v12, (uint64_t)v6);
      if ((sub_1C2A9C328() & 1) == 0
        || *(double *)&v10[v4[5]] != *(double *)&v6[v4[5]]
        || *(double *)&v10[v4[6]] != *(double *)&v6[v4[6]])
      {
        break;
      }
      uint64_t v14 = v4[7];
      int v15 = v10[v14];
      int v16 = v6[v14];
      if (v15 == 2)
      {
        if (v16 != 2) {
          break;
        }
      }
      else
      {
        if (v16 == 2) {
          break;
        }
        if (v15) {
          uint64_t v17 = 0x6973616572636564;
        }
        else {
          uint64_t v17 = 0x6973616572636E69;
        }
        if (v16) {
          uint64_t v18 = 0x6973616572636564;
        }
        else {
          uint64_t v18 = 0x6973616572636E69;
        }
        if (v17 == v18)
        {
          swift_bridgeObjectRelease_n();
        }
        else
        {
          char v19 = sub_1C2A9E8D8();
          swift_bridgeObjectRelease_n();
          if ((v19 & 1) == 0) {
            break;
          }
        }
      }
      sub_1C296904C((uint64_t)v6);
      sub_1C296904C((uint64_t)v10);
      v12 += v13;
      if (!--v11) {
        return 1;
      }
    }
    sub_1C296904C((uint64_t)v6);
    sub_1C296904C((uint64_t)v10);
    return 0;
  }
  return 1;
}

int32x2_t sub_1C2964008(uint64_t a1, uint64_t a2, int32x2_t result)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3 == *(void *)(a2 + 16) && v3 && a1 != a2)
  {
    uint64_t result = *(int32x2_t *)(a1 + 40);
    if (*(double *)(a1 + 32) == *(double *)(a2 + 32) && *(double *)&result == *(double *)(a2 + 40))
    {
      uint64_t v5 = (float64x2_t *)(a1 + 48);
      uint64_t v6 = (float64x2_t *)(a2 + 48);
      uint64_t v7 = v3 - 1;
      do
      {
        if (!v7) {
          break;
        }
        float64x2_t v8 = *v5++;
        float64x2_t v9 = v8;
        float64x2_t v10 = *v6++;
        uint64_t result = vmovn_s64(vceqq_f64(v9, v10));
        --v7;
      }
      while ((result.i32[0] & result.i32[1] & 1) != 0);
    }
  }
  return result;
}

BOOL sub_1C2964088(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  if (a1[4] != a2[4]) {
    return 0;
  }
  uint64_t v3 = a1 + 5;
  uint64_t v4 = a2 + 5;
  uint64_t v5 = v2 - 1;
  do
  {
    BOOL result = v5 == 0;
    if (!v5) {
      break;
    }
    uint64_t v8 = *v3++;
    uint64_t v7 = v8;
    uint64_t v9 = *v4++;
    --v5;
  }
  while (v7 == v9);
  return result;
}

unint64_t sub_1C29640F4()
{
  unint64_t result = qword_1EBB8E8E0;
  if (!qword_1EBB8E8E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB8E8E0);
  }
  return result;
}

uint64_t sub_1C2964148(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1C2967B94(255, &qword_1EBB8F800);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1C29641FC(uint64_t result)
{
  if (result != 1) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1C296420C(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    goto LABEL_7;
  }
  if (!v2 || a1 == a2) {
    goto LABEL_6;
  }
  uint64_t v5 = a1[4];
  uint64_t v6 = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v7 = sub_1C29663B0(v5, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v7 & 1) == 0)
  {
LABEL_7:
    char v8 = 0;
    return v8 & 1;
  }
  if (v2 == 1)
  {
LABEL_6:
    char v8 = 1;
    return v8 & 1;
  }
  uint64_t v10 = v2 - 2;
  uint64_t v11 = a1 + 5;
  unint64_t v12 = a2 + 5;
  do
  {
    uint64_t v14 = *v11++;
    uint64_t v13 = v14;
    uint64_t v15 = *v12++;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char v8 = sub_1C29663B0(v13, v15);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    BOOL v17 = v10-- != 0;
  }
  while ((v8 & 1) != 0 && v17);
  return v8 & 1;
}

unint64_t sub_1C2964308(char a1)
{
  unint64_t result = 0xD000000000000012;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x7461636964657270;
      break;
    case 2:
      unint64_t result = 0x676E615265746164;
      break;
    case 3:
      unint64_t result = 0x6144676E69646E65;
      break;
    case 4:
      unint64_t result = 0x736973796C616E61;
      break;
    case 6:
      unint64_t result = 0xD000000000000017;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1C296440C()
{
  return sub_1C2964308(*v0);
}

uint64_t sub_1C2964414@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1C29673F0(a1, a2);
  *a3 = result;
  return result;
}

void sub_1C296443C(unsigned char *a1@<X8>)
{
  *a1 = 7;
}

uint64_t sub_1C2964448(uint64_t a1)
{
  unint64_t v2 = sub_1C2966D58();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1C2964484(uint64_t a1)
{
  unint64_t v2 = sub_1C2966D58();
  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t TrendConfiguration.encode(to:)(void *a1)
{
  sub_1C2967CB0(0, &qword_1EA31DF28, (uint64_t (*)(void))sub_1C2966D58, (uint64_t)&type metadata for TrendConfiguration.CodingKeys, MEMORY[0x1E4FBBDE0]);
  uint64_t v4 = v3;
  uint64_t v26 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)v20 - v5;
  long long v27 = *v1;
  uint64_t v7 = *((void *)v1 + 2);
  uint64_t v8 = *((void *)v1 + 3);
  char v9 = *((unsigned char *)v1 + 32);
  uint64_t v10 = *((void *)v1 + 5);
  uint64_t v24 = *((void *)v1 + 6);
  uint64_t v25 = v10;
  int v33 = *((unsigned __int8 *)v1 + 56);
  uint64_t v11 = *((void *)v1 + 8);
  uint64_t v22 = *((void *)v1 + 9);
  uint64_t v23 = v11;
  v20[1] = *((void *)v1 + 10);
  int v21 = *((unsigned __int8 *)v1 + 88);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1C2966D58();
  sub_1C2A9EA18();
  long long v29 = v27;
  uint64_t v30 = v7;
  uint64_t v31 = v8;
  unint64_t v12 = v6;
  char v32 = v9;
  char v34 = 0;
  sub_1C2966DAC();
  uint64_t v13 = v28;
  sub_1C2A9E868();
  if (v13) {
    return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v6, v4);
  }
  uint64_t v16 = v23;
  uint64_t v15 = v24;
  char v17 = v33;
  uint64_t v18 = v22;
  uint64_t v19 = v26;
  *(void *)&long long v29 = v25;
  char v34 = 1;
  sub_1C2966E00();
  sub_1C2A9E818();
  *(void *)&long long v29 = v15;
  char v34 = 2;
  sub_1C2967B94(0, (unint64_t *)&qword_1EBB8F7E8);
  sub_1C2966E54();
  sub_1C2A9E868();
  LOBYTE(v29) = v17;
  char v34 = 3;
  sub_1C2966ED4();
  sub_1C2A9E868();
  *(void *)&long long v29 = v16;
  char v34 = 4;
  sub_1C2967B94(0, &qword_1EBB8F7C8);
  sub_1C2966F28();
  sub_1C2A9E868();
  *(void *)&long long v29 = v18;
  char v34 = 5;
  sub_1C2967A80(0, &qword_1EBB902C0, (uint64_t)&type metadata for ParameterOverrides, MEMORY[0x1E4FBAEA0]);
  sub_1C29672F4(&qword_1EA31DF58, (void (*)(void))sub_1C295677C, (void (*)(void))sub_1C2966FFC);
  sub_1C2A9E818();
  LOBYTE(v29) = 6;
  sub_1C2A9E7F8();
  return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v12, v4);
}

uint64_t TrendConfiguration.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_1C2967CB0(0, &qword_1EBB8F8E0, (uint64_t (*)(void))sub_1C2966D58, (uint64_t)&type metadata for TrendConfiguration.CodingKeys, MEMORY[0x1E4FBBDC0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  char v9 = (char *)&v31 - v8;
  uint64_t v10 = a1[3];
  long long v39 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v10);
  sub_1C2966D58();
  sub_1C2A9EA08();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
  }
  uint64_t v38 = v7;
  char v46 = 0;
  sub_1C29670A4();
  uint64_t v11 = v6;
  sub_1C2A9E7A8();
  char v37 = a2;
  uint64_t v12 = v41;
  uint64_t v13 = v42;
  uint64_t v14 = v43;
  int v15 = v44;
  char v46 = 1;
  uint64_t v16 = v40;
  sub_1C29402B8(v40, v41, v42, v43, v44);
  sub_1C29670F8();
  sub_1C2A9E758();
  uint64_t v35 = v14;
  uint64_t v36 = v16;
  int v45 = v15;
  uint64_t v17 = v40;
  sub_1C2967B94(0, (unint64_t *)&qword_1EBB8F7E8);
  char v46 = 2;
  sub_1C29641FC(v17);
  sub_1C296714C();
  sub_1C2A9E7A8();
  uint64_t v18 = v40;
  char v46 = 3;
  sub_1C29671CC();
  swift_bridgeObjectRetain();
  sub_1C2A9E7A8();
  LODWORD(v16) = v40;
  sub_1C2967B94(0, &qword_1EBB8F7C8);
  char v46 = 4;
  sub_1C2967220();
  sub_1C2A9E7A8();
  LODWORD(v34) = v16;
  uint64_t v20 = v40;
  sub_1C2967A80(0, &qword_1EBB902C0, (uint64_t)&type metadata for ParameterOverrides, MEMORY[0x1E4FBAEA0]);
  char v46 = 5;
  sub_1C29672F4(&qword_1EBB902C8, (void (*)(void))sub_1C2956834, (void (*)(void))sub_1C296739C);
  swift_bridgeObjectRetain();
  sub_1C2A9E758();
  uint64_t v21 = v40;
  LOBYTE(v40) = 6;
  uint64_t v33 = v21;
  swift_bridgeObjectRetain();
  uint64_t v31 = sub_1C2A9E738();
  int v32 = v22;
  (*(void (**)(char *, uint64_t))(v38 + 8))(v9, v11);
  uint64_t v23 = v35;
  uint64_t v24 = v12;
  uint64_t v25 = v12;
  uint64_t v26 = v13;
  LOBYTE(v11) = v45;
  sub_1C29402B8(v36, v25, v13, v35, v45);
  uint64_t v27 = v17;
  sub_1C29641FC(v17);
  sub_1C2967050(v17);
  uint64_t v28 = v36;
  sub_1C293FE60(v36, v24, v26, v23, v11);
  long long v29 = v37;
  *char v37 = v28;
  v29[1] = v24;
  v29[2] = v26;
  v29[3] = v23;
  *((unsigned char *)v29 + 32) = v11;
  v29[5] = v27;
  v29[6] = v18;
  *((unsigned char *)v29 + 56) = v34;
  uint64_t v30 = v33;
  v29[8] = v20;
  v29[9] = v30;
  v29[10] = v31;
  *((unsigned char *)v29 + 88) = v32 & 1;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
  sub_1C293FE60(v36, v24, v26, v23, v11);
  sub_1C2967050(v27);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C2965018@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return TrendConfiguration.init(from:)(a1, a2);
}

uint64_t sub_1C2965030(void *a1)
{
  return TrendConfiguration.encode(to:)(a1);
}

uint64_t TrendConfiguration.dateRangeToEngineParameters.getter()
{
  long long v1 = v0[3];
  v9[2] = v0[2];
  v9[3] = v1;
  v10[0] = v0[4];
  *(_OWORD *)((char *)v10 + 9) = *(_OWORD *)((char *)v0 + 73);
  long long v2 = v0[1];
  v9[0] = *v0;
  v9[1] = v2;
  sub_1C29679A0((uint64_t)v9);
  uint64_t v3 = swift_bridgeObjectRetain();
  uint64_t v4 = sub_1C29676F8(v3, (uint64_t)v9);
  sub_1C2967A10((uint64_t)v9);
  swift_bridgeObjectRelease();
  if (v4[2])
  {
    sub_1C2967A80(0, &qword_1EA31DF10, (uint64_t)&type metadata for SignificantChangeEngine.Parameters, MEMORY[0x1E4FBBD58]);
    uint64_t v5 = sub_1C2A9E688();
  }
  else
  {
    uint64_t v5 = MEMORY[0x1E4FBC868];
  }
  uint64_t v8 = v5;
  uint64_t v6 = swift_bridgeObjectRetain();
  sub_1C296671C(v6, 1, &v8);
  swift_bridgeObjectRelease();
  return v8;
}

HealthVisualization::TrendAnalysisKind_optional __swiftcall TrendAnalysisKind.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v1 = sub_1C2A9E6E8();
  swift_bridgeObjectRelease();
  if (v1 == 1) {
    v2.value = HealthVisualization_TrendAnalysisKind_frequencyChange;
  }
  else {
    v2.value = HealthVisualization_TrendAnalysisKind_unknownDefault;
  }
  if (v1) {
    return v2;
  }
  else {
    return 0;
  }
}

void *static TrendAnalysisKind.allCases.getter()
{
  return &unk_1F1DEA018;
}

uint64_t TrendAnalysisKind.rawValue.getter(char a1)
{
  if (a1) {
    return 0x636E657571657266;
  }
  else {
    return 0x666968536E61656DLL;
  }
}

uint64_t sub_1C2965208()
{
  return sub_1C2A9E9E8();
}

uint64_t sub_1C2965298()
{
  sub_1C2A9DD78();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C2965314()
{
  return sub_1C2A9E9E8();
}

uint64_t sub_1C29653A0@<X0>(char *a1@<X8>)
{
  uint64_t v2 = sub_1C2A9E6E8();
  uint64_t result = swift_bridgeObjectRelease();
  if (v2 == 1) {
    char v4 = 1;
  }
  else {
    char v4 = 2;
  }
  if (!v2) {
    char v4 = 0;
  }
  *a1 = v4;
  return result;
}

void sub_1C2965400(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x666968536E61656DLL;
  if (*v1) {
    uint64_t v2 = 0x636E657571657266;
  }
  unint64_t v3 = 0xEF65676E61684374;
  if (*v1) {
    unint64_t v3 = 0xEF65676E61684379;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1C296544C(unsigned char *a1, unsigned char *a2)
{
  BOOL v2 = *a1 == 0;
  if (*a1) {
    uint64_t v3 = 0x636E657571657266;
  }
  else {
    uint64_t v3 = 0x666968536E61656DLL;
  }
  if (v2) {
    unint64_t v4 = 0xEF65676E61684374;
  }
  else {
    unint64_t v4 = 0xEF65676E61684379;
  }
  if (*a2) {
    uint64_t v5 = 0x636E657571657266;
  }
  else {
    uint64_t v5 = 0x666968536E61656DLL;
  }
  if (*a2) {
    unint64_t v6 = 0xEF65676E61684379;
  }
  else {
    unint64_t v6 = 0xEF65676E61684374;
  }
  if (v3 == v5 && v4 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = sub_1C2A9E8D8();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1C2965504()
{
  return sub_1C2A9DE58();
}

uint64_t sub_1C2965564()
{
  return sub_1C2A9DE38();
}

void sub_1C29655B4(void *a1@<X8>)
{
  *a1 = &unk_1F1DEA040;
}

uint64_t ParameterOverrides.minimumEffectSize.getter()
{
  return *(void *)v0;
}

uint64_t ParameterOverrides.minimumSegmentLength.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t ParameterOverrides.minimumDataCount.getter()
{
  return *(void *)(v0 + 24);
}

HealthVisualization::ParameterOverrides __swiftcall ParameterOverrides.init(minimumEffectSize:minimumSegmentLength:minimumDataCount:)(Swift::Double_optional minimumEffectSize, Swift::Int minimumSegmentLength, Swift::Int minimumDataCount)
{
  *(void *)uint64_t v4 = *(void *)&minimumEffectSize.is_nil;
  *(unsigned char *)(v4 + 8) = minimumSegmentLength & 1;
  *(void *)(v4 + 16) = minimumDataCount;
  *(void *)(v4 + 24) = v3;
  result.minimumEffectSize.value = minimumEffectSize.value;
  result.minimumEffectSize.is_nil = minimumEffectSize.is_nil;
  result.minimumDataCount = minimumDataCount;
  result.minimumSegmentLength = minimumSegmentLength;
  return result;
}

unint64_t sub_1C29655F8(char a1)
{
  if (!a1) {
    return 0xD000000000000011;
  }
  if (a1 == 1) {
    return 0xD000000000000014;
  }
  return 0xD000000000000010;
}

BOOL sub_1C2965654(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

unint64_t sub_1C2965668()
{
  return sub_1C29655F8(*v0);
}

uint64_t sub_1C2965670@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1C2968D60(a1, a2);
  *a3 = result;
  return result;
}

void sub_1C2965698(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_1C29656A4(uint64_t a1)
{
  unint64_t v2 = sub_1C2967AEC();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1C29656E0(uint64_t a1)
{
  unint64_t v2 = sub_1C2967AEC();
  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t ParameterOverrides.encode(to:)(void *a1)
{
  sub_1C2967CB0(0, &qword_1EA31DF68, (uint64_t (*)(void))sub_1C2967AEC, (uint64_t)&type metadata for ParameterOverrides.CodingKeys, MEMORY[0x1E4FBBDE0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v7 = (char *)v11 - v6;
  uint64_t v8 = *(void *)(v1 + 16);
  v11[1] = *(void *)(v1 + 24);
  void v11[2] = v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1C2967AEC();
  sub_1C2A9EA18();
  char v14 = 0;
  uint64_t v9 = v11[3];
  sub_1C2A9E7F8();
  if (!v9)
  {
    char v13 = 1;
    sub_1C2A9E858();
    char v12 = 2;
    sub_1C2A9E858();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t ParameterOverrides.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v17 = a2;
  sub_1C2967CB0(0, &qword_1EBB902D0, (uint64_t (*)(void))sub_1C2967AEC, (uint64_t)&type metadata for ParameterOverrides.CodingKeys, MEMORY[0x1E4FBBDC0]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v16 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1C2967AEC();
  sub_1C2A9EA08();
  if (!v2)
  {
    uint64_t v9 = v6;
    uint64_t v10 = v17;
    char v20 = 0;
    uint64_t v11 = sub_1C2A9E738();
    char v13 = v12;
    char v19 = 1;
    uint64_t v16 = sub_1C2A9E798();
    char v18 = 2;
    uint64_t v15 = sub_1C2A9E798();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v8, v5);
    *(void *)uint64_t v10 = v11;
    *(unsigned char *)(v10 + 8) = v13 & 1;
    *(void *)(v10 + 16) = v16;
    *(void *)(v10 + 24) = v15;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1C2965B0C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ParameterOverrides.init(from:)(a1, a2);
}

uint64_t sub_1C2965B24(void *a1)
{
  return ParameterOverrides.encode(to:)(a1);
}

uint64_t CorrelatedTrendConfiguration.objectTypeIdentifier.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CorrelatedTrendConfiguration.trendConfigurations.getter()
{
  return swift_bridgeObjectRetain();
}

HealthVisualization::CorrelatedTrendConfiguration __swiftcall CorrelatedTrendConfiguration.init(objectTypeIdentifier:trendConfigurations:)(Swift::String objectTypeIdentifier, Swift::OpaquePointer trendConfigurations)
{
  *(Swift::String *)uint64_t v2 = objectTypeIdentifier;
  *(Swift::OpaquePointer *)(v2 + 16) = trendConfigurations;
  result.objectTypeIdentifier = objectTypeIdentifier;
  result.trendConfigurations = trendConfigurations;
  return result;
}

BOOL static CorrelatedTrendConfiguration.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a2[2];
  BOOL v4 = *a1 == *a2 && a1[1] == a2[1];
  if (!v4 && (sub_1C2A9E8D8() & 1) == 0) {
    return 0;
  }
  return sub_1C2963248(v2, v3);
}

unint64_t sub_1C2965BF4()
{
  if (*v0) {
    return 0xD000000000000013;
  }
  else {
    return 0xD000000000000014;
  }
}

uint64_t sub_1C2965C30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1C2968EA4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1C2965C58(uint64_t a1)
{
  unint64_t v2 = sub_1C2967B40();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1C2965C94(uint64_t a1)
{
  unint64_t v2 = sub_1C2967B40();
  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t CorrelatedTrendConfiguration.encode(to:)(void *a1)
{
  sub_1C2967CB0(0, &qword_1EA31DF70, (uint64_t (*)(void))sub_1C2967B40, (uint64_t)&type metadata for CorrelatedTrendConfiguration.CodingKeys, MEMORY[0x1E4FBBDE0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v7 = (char *)&v10 - v6;
  uint64_t v11 = *(void *)(v1 + 16);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1C2967B40();
  sub_1C2A9EA18();
  char v15 = 0;
  uint64_t v8 = v12;
  sub_1C2A9E828();
  if (!v8)
  {
    uint64_t v13 = v11;
    char v14 = 1;
    sub_1C2967B94(0, &qword_1EBB8F7D8);
    sub_1C2967BDC();
    sub_1C2A9E868();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t CorrelatedTrendConfiguration.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  v16[0] = a2;
  sub_1C2967CB0(0, &qword_1EBB902D8, (uint64_t (*)(void))sub_1C2967B40, (uint64_t)&type metadata for CorrelatedTrendConfiguration.CodingKeys, MEMORY[0x1E4FBBDC0]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)v16 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1C2967B40();
  sub_1C2A9EA08();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v9 = v6;
  uint64_t v10 = (uint64_t *)v16[0];
  char v18 = 0;
  uint64_t v11 = sub_1C2A9E768();
  uint64_t v13 = v12;
  sub_1C2967B94(0, &qword_1EBB8F7D8);
  char v17 = 1;
  sub_1C2967D18();
  swift_bridgeObjectRetain();
  sub_1C2A9E7A8();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v8, v5);
  uint64_t v14 = v16[1];
  *uint64_t v10 = v11;
  v10[1] = v13;
  _OWORD v10[2] = v14;
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C2966110@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return CorrelatedTrendConfiguration.init(from:)(a1, a2);
}

uint64_t sub_1C2966128(void *a1)
{
  return CorrelatedTrendConfiguration.encode(to:)(a1);
}

BOOL sub_1C2966140(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a2[2];
  BOOL v4 = *a1 == *a2 && a1[1] == a2[1];
  if (!v4 && (sub_1C2A9E8D8() & 1) == 0) {
    return 0;
  }
  return sub_1C2963248(v2, v3);
}

uint64_t sub_1C29661B4()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

unint64_t sub_1C29661E4(unint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  unint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v4 = 0;
  unint64_t v5 = result + 64;
  uint64_t v6 = 1 << *(unsigned char *)(result + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(result + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (v8)
  {
    unint64_t v11 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    unint64_t v12 = v11 | (v4 << 6);
LABEL_30:
    uint64_t v16 = *(void *)(v3 + 56) + 32 * v12;
    double v17 = *(double *)v16;
    int v18 = *(unsigned __int8 *)(v16 + 8);
    uint64_t v20 = *(void *)(v16 + 16);
    uint64_t v19 = *(void *)(v16 + 24);
    uint64_t result = sub_1C292F188(*(unsigned char *)(*(void *)(v3 + 48) + v12));
    if ((v21 & 1) == 0) {
      return 0;
    }
    uint64_t v22 = *(void *)(a2 + 56) + 32 * result;
    uint64_t v24 = *(void *)(v22 + 16);
    uint64_t v23 = *(void *)(v22 + 24);
    if (*(unsigned char *)(v22 + 8))
    {
      if (!v18) {
        return 0;
      }
      if (v24 != v20 || v23 != v19) {
        return 0;
      }
    }
    else
    {
      if (v18) {
        return 0;
      }
      BOOL v25 = *(double *)v22 == v17 && v24 == v20;
      if (!v25 || v23 != v19) {
        return 0;
      }
    }
  }
  int64_t v13 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
    goto LABEL_43;
  }
  if (v13 >= v9) {
    return 1;
  }
  unint64_t v14 = *(void *)(v5 + 8 * v13);
  ++v4;
  if (v14) {
    goto LABEL_29;
  }
  int64_t v4 = v13 + 1;
  if (v13 + 1 >= v9) {
    return 1;
  }
  unint64_t v14 = *(void *)(v5 + 8 * v4);
  if (v14) {
    goto LABEL_29;
  }
  int64_t v4 = v13 + 2;
  if (v13 + 2 >= v9) {
    return 1;
  }
  unint64_t v14 = *(void *)(v5 + 8 * v4);
  if (v14) {
    goto LABEL_29;
  }
  int64_t v4 = v13 + 3;
  if (v13 + 3 >= v9) {
    return 1;
  }
  unint64_t v14 = *(void *)(v5 + 8 * v4);
  if (v14)
  {
LABEL_29:
    unint64_t v8 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v4 << 6);
    goto LABEL_30;
  }
  int64_t v15 = v13 + 4;
  if (v15 >= v9) {
    return 1;
  }
  unint64_t v14 = *(void *)(v5 + 8 * v15);
  if (v14)
  {
    int64_t v4 = v15;
    goto LABEL_29;
  }
  while (1)
  {
    int64_t v4 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v4 >= v9) {
      return 1;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v4);
    ++v15;
    if (v14) {
      goto LABEL_29;
    }
  }
LABEL_43:
  __break(1u);
  return result;
}

uint64_t sub_1C29663B0(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  uint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v4 = 0;
  uint64_t v36 = result + 64;
  uint64_t v5 = 1 << *(unsigned char *)(result + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(result + 64);
  int64_t v37 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      unint64_t v8 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      int64_t v38 = v4;
      unint64_t v9 = v8 | (v4 << 6);
      goto LABEL_24;
    }
    int64_t v10 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_58;
    }
    if (v10 >= v37) {
      return 1;
    }
    unint64_t v11 = *(void *)(v36 + 8 * v10);
    int64_t v12 = v4 + 1;
    if (!v11)
    {
      int64_t v12 = v4 + 2;
      if (v4 + 2 >= v37) {
        return 1;
      }
      unint64_t v11 = *(void *)(v36 + 8 * v12);
      if (!v11)
      {
        int64_t v12 = v4 + 3;
        if (v4 + 3 >= v37) {
          return 1;
        }
        unint64_t v11 = *(void *)(v36 + 8 * v12);
        if (!v11)
        {
          int64_t v12 = v4 + 4;
          if (v4 + 4 >= v37) {
            return 1;
          }
          unint64_t v11 = *(void *)(v36 + 8 * v12);
          if (!v11) {
            break;
          }
        }
      }
    }
LABEL_23:
    unint64_t v7 = (v11 - 1) & v11;
    int64_t v38 = v12;
    unint64_t v9 = __clz(__rbit64(v11)) + (v12 << 6);
LABEL_24:
    unint64_t v14 = (uint64_t *)(*(void *)(v3 + 56) + 40 * v9);
    uint64_t v15 = *v14;
    uint64_t v16 = (double *)v14[1];
    double v17 = (double *)v14[2];
    int v18 = (double *)v14[3];
    uint64_t v19 = (double *)v14[4];
    unsigned __int8 v20 = *(unsigned char *)(*(void *)(v3 + 48) + v9);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v21 = sub_1C293DDF4(v20);
    if ((v22 & 1) == 0) {
      goto LABEL_54;
    }
    uint64_t v23 = (double **)(*(void *)(a2 + 56) + 40 * v21);
    uint64_t v24 = *v23;
    uint64_t v25 = *((void *)*v23 + 2);
    if (v25 != *(void *)(v15 + 16)) {
      goto LABEL_54;
    }
    uint64_t v26 = v23[1];
    uint64_t v27 = v23[2];
    uint64_t v28 = v23[3];
    long long v29 = v23[4];
    if (v25) {
      BOOL v30 = v24 == (double *)v15;
    }
    else {
      BOOL v30 = 1;
    }
    if (!v30)
    {
      if (v24[4] != *(double *)(v15 + 32) || v24[5] != *(double *)(v15 + 40)) {
        goto LABEL_54;
      }
      uint64_t v31 = v25 - 1;
      if (v31)
      {
        if (v24[6] != *(double *)(v15 + 48) || v24[7] != *(double *)(v15 + 56)) {
          goto LABEL_54;
        }
        uint64_t v33 = 0;
        while (--v31)
        {
          uint64_t v34 = &v24[v33];
          uint64_t v35 = v15 + v33 * 8;
          if (v24[v33 + 8] == *(double *)(v15 + v33 * 8 + 64))
          {
            v33 += 2;
            if (v34[9] == *(double *)(v35 + 72)) {
              continue;
            }
          }
          goto LABEL_54;
        }
      }
    }
    if (v27)
    {
      if (!v17 || (v26 != v16 || v27 != v17) && (sub_1C2A9E8D8() & 1) == 0)
      {
LABEL_54:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return 0;
      }
    }
    else if (v17)
    {
      goto LABEL_54;
    }
    if (v29)
    {
      if (!v19) {
        goto LABEL_54;
      }
      if (v28 == v18 && v29 == v19) {
        goto LABEL_47;
      }
      char v32 = sub_1C2A9E8D8();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      int64_t v4 = v38;
      if ((v32 & 1) == 0) {
        return 0;
      }
    }
    else
    {
      if (v19) {
        goto LABEL_54;
      }
LABEL_47:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      int64_t v4 = v38;
    }
  }
  uint64_t v13 = v4 + 5;
  if (v4 + 5 >= v37) {
    return 1;
  }
  unint64_t v11 = *(void *)(v36 + 8 * v13);
  if (v11)
  {
    int64_t v12 = v4 + 5;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v12 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v12 >= v37) {
      return 1;
    }
    unint64_t v11 = *(void *)(v36 + 8 * v12);
    ++v13;
    if (v11) {
      goto LABEL_23;
    }
  }
LABEL_58:
  __break(1u);
  return result;
}

void sub_1C296671C(uint64_t a1, char a2, void *a3)
{
  unint64_t v5 = *(void *)(a1 + 16);
  uint64_t v31 = a1 + 32;
  swift_bridgeObjectRetain();
  unint64_t v6 = 0;
  if (v5) {
    goto LABEL_3;
  }
LABEL_2:
  sub_1C29691E0((uint64_t)v48);
  sub_1C296921C((uint64_t)v48, (uint64_t)v49, (uint64_t (*)(void))sub_1C29690A8);
  unint64_t v6 = v5;
  while (1)
  {
    sub_1C296921C((uint64_t)v49, (uint64_t)v47, (uint64_t (*)(void))sub_1C29690A8);
    sub_1C296921C((uint64_t)v47, (uint64_t)v48, (uint64_t (*)(void))sub_1C29690A8);
    if (sub_1C2969168((uint64_t)v48) == 1)
    {
      swift_bridgeObjectRelease_n();
      return;
    }
    unsigned __int8 v14 = v49[0];
    char v50 = v49[0];
    long long v43 = *(_OWORD *)&v49[168];
    long long v44 = *(_OWORD *)&v49[184];
    long long v45 = *(_OWORD *)&v49[200];
    char v46 = v49[216];
    long long v39 = *(_OWORD *)&v49[104];
    long long v40 = *(_OWORD *)&v49[120];
    long long v41 = *(_OWORD *)&v49[136];
    long long v42 = *(_OWORD *)&v49[152];
    long long v35 = *(_OWORD *)&v49[40];
    long long v36 = *(_OWORD *)&v49[56];
    long long v37 = *(_OWORD *)&v49[72];
    long long v38 = *(_OWORD *)&v49[88];
    long long v33 = *(_OWORD *)&v49[8];
    long long v34 = *(_OWORD *)&v49[24];
    uint64_t v15 = (void *)*a3;
    unint64_t v17 = sub_1C292F188(v49[0]);
    uint64_t v18 = v15[2];
    BOOL v19 = (v16 & 1) == 0;
    uint64_t v20 = v18 + v19;
    if (__OFADD__(v18, v19))
    {
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      sub_1C2A9E928();
      __break(1u);
      goto LABEL_24;
    }
    char v21 = v16;
    if (v15[3] < v20) {
      break;
    }
    if (a2)
    {
      if (v16) {
        goto LABEL_17;
      }
    }
    else
    {
      sub_1C295FF08();
      if (v21) {
        goto LABEL_17;
      }
    }
LABEL_13:
    uint64_t v24 = (void *)*a3;
    *(void *)(*a3 + 8 * (v17 >> 6) + 64) |= 1 << v17;
    *(unsigned char *)(v24[6] + v17) = v14;
    uint64_t v25 = v24[7] + 216 * v17;
    *(_OWORD *)(v25 + 64) = v37;
    *(_OWORD *)(v25 + 80) = v38;
    *(_OWORD *)(v25 + 32) = v35;
    *(_OWORD *)(v25 + 48) = v36;
    *(_OWORD *)(v25 + 128) = v41;
    *(_OWORD *)(v25 + 144) = v42;
    *(_OWORD *)(v25 + 96) = v39;
    *(_OWORD *)(v25 + 112) = v40;
    *(unsigned char *)(v25 + 208) = v46;
    *(_OWORD *)(v25 + 176) = v44;
    *(_OWORD *)(v25 + 192) = v45;
    *(_OWORD *)(v25 + 160) = v43;
    *(_OWORD *)uint64_t v25 = v33;
    *(_OWORD *)(v25 + 16) = v34;
    uint64_t v26 = v24[2];
    BOOL v27 = __OFADD__(v26, 1);
    uint64_t v28 = v26 + 1;
    if (v27) {
      goto LABEL_21;
    }
    v24[2] = v28;
    a2 = 1;
    if (v6 == v5) {
      goto LABEL_2;
    }
LABEL_3:
    if (v6 >= *(void *)(a1 + 16)) {
      goto LABEL_22;
    }
    unint64_t v7 = (_OWORD *)(v31 + 224 * v6);
    long long v8 = v7[11];
    *(_OWORD *)&v49[160] = v7[10];
    *(_OWORD *)&v49[176] = v8;
    *(_OWORD *)&v49[192] = v7[12];
    *(_OWORD *)&v49[201] = *(_OWORD *)((char *)v7 + 201);
    long long v9 = v7[7];
    *(_OWORD *)&v49[96] = v7[6];
    *(_OWORD *)&v49[112] = v9;
    long long v10 = v7[9];
    *(_OWORD *)&v49[128] = v7[8];
    *(_OWORD *)&v49[144] = v10;
    long long v11 = v7[3];
    *(_OWORD *)&v49[32] = v7[2];
    *(_OWORD *)&v49[48] = v11;
    long long v12 = v7[5];
    *(_OWORD *)&v49[64] = v7[4];
    *(_OWORD *)&v49[80] = v12;
    long long v13 = v7[1];
    ++v6;
    *(_OWORD *)char v49 = *v7;
    *(_OWORD *)&v49[16] = v13;
    nullsub_1(v49);
  }
  sub_1C295EA70(v20, a2 & 1);
  unint64_t v22 = sub_1C292F188(v14);
  if ((v21 & 1) != (v23 & 1)) {
    goto LABEL_23;
  }
  unint64_t v17 = v22;
  if ((v21 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_17:
  long long v29 = (void *)swift_allocError();
  swift_willThrow();
  id v30 = v29;
  sub_1C2969188();
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease_n();

    return;
  }
LABEL_24:
  sub_1C2A9E4D8();
  sub_1C2A9DDB8();
  sub_1C2A9E5C8();
  sub_1C2A9DDB8();
  sub_1C2A9E628();
  __break(1u);
}

BOOL _s19HealthVisualization18ParameterOverridesV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a2 + 16);
  if (*(unsigned char *)(a1 + 8))
  {
    if (v2 == v3) {
      int v4 = *(unsigned __int8 *)(a2 + 8);
    }
    else {
      int v4 = 0;
    }
    if (v4 != 1) {
      return 0;
    }
  }
  else
  {
    if (*(unsigned char *)(a2 + 8)) {
      return 0;
    }
    if (*(double *)a1 != *(double *)a2 || v2 != v3) {
      return 0;
    }
  }
  return *(void *)(a1 + 24) == *(void *)(a2 + 24);
}

BOOL _s19HealthVisualization18TrendConfigurationV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  char v2 = *(unsigned char *)(a1 + 32);
  uint64_t v3 = *(void **)(a1 + 40);
  uint64_t v25 = *(void *)(a1 + 48);
  unsigned __int8 v24 = *(unsigned char *)(a1 + 56);
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v4 = *(void *)(a1 + 72);
  double v6 = *(double *)(a1 + 80);
  char v7 = *(unsigned char *)(a1 + 88);
  char v8 = *(unsigned char *)(a2 + 32);
  long long v10 = *(void **)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  char v11 = *(unsigned char *)(a2 + 56);
  uint64_t v13 = *(void *)(a2 + 64);
  uint64_t v12 = *(void *)(a2 + 72);
  double v14 = *(double *)(a2 + 80);
  char v15 = *(unsigned char *)(a2 + 88);
  long long v16 = *(_OWORD *)(a1 + 16);
  v28[0] = *(_OWORD *)a1;
  v28[1] = v16;
  char v29 = v2;
  long long v17 = *(_OWORD *)(a2 + 16);
  v26[0] = *(_OWORD *)a2;
  v26[1] = v17;
  char v27 = v8;
  if ((_s19HealthVisualization18QueryConfigurationO2eeoiySbAC_ACtFZ_0((void **)v28, (uint64_t *)v26) & 1) == 0) {
    return 0;
  }
  char v23 = v7;
  if (v3 == (void *)1)
  {
    if (v10 == (void *)1) {
      goto LABEL_4;
    }
LABEL_13:
    sub_1C29641FC((uint64_t)v10);
    sub_1C2967050((uint64_t)v3);
    sub_1C2967050((uint64_t)v10);
    return 0;
  }
  if (v10 == (void *)1)
  {
    swift_bridgeObjectRetain();
    goto LABEL_13;
  }
  if (v3)
  {
    if (!v10)
    {
      sub_1C29641FC((uint64_t)v3);
      swift_bridgeObjectRelease();
      return 0;
    }
    BOOL v21 = sub_1C2964088(v3, v10);
    sub_1C29641FC((uint64_t)v3);
    swift_bridgeObjectRelease();
    if (!v21) {
      return 0;
    }
  }
  else if (v10)
  {
    return 0;
  }
LABEL_4:
  if ((sub_1C2963690(v25, v9) & 1) == 0 || (sub_1C29546FC(v24, v11) & 1) == 0 || (sub_1C2963934(v5, v13) & 1) == 0) {
    return 0;
  }
  if (v4)
  {
    if (!v12) {
      return 0;
    }
    swift_bridgeObjectRetain();
    unint64_t v18 = swift_bridgeObjectRetain();
    char v19 = sub_1C29661E4(v18, v12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v19 & 1) == 0) {
      return 0;
    }
  }
  else if (v12)
  {
    return 0;
  }
  if ((v23 & 1) == 0)
  {
    char v22 = v15;
    if (v6 != v14) {
      char v22 = 1;
    }
    return (v22 & 1) == 0;
  }
  return (v15 & 1) != 0;
}

unint64_t sub_1C2966D58()
{
  unint64_t result = qword_1EBB8EB80;
  if (!qword_1EBB8EB80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB8EB80);
  }
  return result;
}

unint64_t sub_1C2966DAC()
{
  unint64_t result = qword_1EA31DF30;
  if (!qword_1EA31DF30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA31DF30);
  }
  return result;
}

unint64_t sub_1C2966E00()
{
  unint64_t result = qword_1EA31DF38;
  if (!qword_1EA31DF38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA31DF38);
  }
  return result;
}

unint64_t sub_1C2966E54()
{
  unint64_t result = qword_1EA31DF40;
  if (!qword_1EA31DF40)
  {
    sub_1C2967B94(255, (unint64_t *)&qword_1EBB8F7E8);
    sub_1C295677C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA31DF40);
  }
  return result;
}

unint64_t sub_1C2966ED4()
{
  unint64_t result = qword_1EBB8E8D8;
  if (!qword_1EBB8E8D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB8E8D8);
  }
  return result;
}

unint64_t sub_1C2966F28()
{
  unint64_t result = qword_1EA31DF48;
  if (!qword_1EA31DF48)
  {
    sub_1C2967B94(255, &qword_1EBB8F7C8);
    sub_1C2966FA8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA31DF48);
  }
  return result;
}

unint64_t sub_1C2966FA8()
{
  unint64_t result = qword_1EA31DF50;
  if (!qword_1EA31DF50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA31DF50);
  }
  return result;
}

unint64_t sub_1C2966FFC()
{
  unint64_t result = qword_1EA31DF60;
  if (!qword_1EA31DF60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA31DF60);
  }
  return result;
}

uint64_t sub_1C2967050(uint64_t result)
{
  if (result != 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_1C29670A4()
{
  unint64_t result = qword_1EBB91CB0;
  if (!qword_1EBB91CB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB91CB0);
  }
  return result;
}

unint64_t sub_1C29670F8()
{
  unint64_t result = qword_1EBB8E8F8;
  if (!qword_1EBB8E8F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB8E8F8);
  }
  return result;
}

unint64_t sub_1C296714C()
{
  unint64_t result = qword_1EBB8F7F0;
  if (!qword_1EBB8F7F0)
  {
    sub_1C2967B94(255, (unint64_t *)&qword_1EBB8F7E8);
    sub_1C2956834();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB8F7F0);
  }
  return result;
}

unint64_t sub_1C29671CC()
{
  unint64_t result = qword_1EBB91C70;
  if (!qword_1EBB91C70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB91C70);
  }
  return result;
}

unint64_t sub_1C2967220()
{
  unint64_t result = qword_1EBB8F7D0;
  if (!qword_1EBB8F7D0)
  {
    sub_1C2967B94(255, &qword_1EBB8F7C8);
    sub_1C29672A0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB8F7D0);
  }
  return result;
}

unint64_t sub_1C29672A0()
{
  unint64_t result = qword_1EBB8EB70;
  if (!qword_1EBB8EB70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB8EB70);
  }
  return result;
}

uint64_t sub_1C29672F4(unint64_t *a1, void (*a2)(void), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1C2967A80(255, &qword_1EBB902C0, (uint64_t)&type metadata for ParameterOverrides, MEMORY[0x1E4FBAEA0]);
    a2();
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1C296739C()
{
  unint64_t result = qword_1EBB902A0;
  if (!qword_1EBB902A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB902A0);
  }
  return result;
}

uint64_t sub_1C29673F0(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000012 && a2 == 0x80000001C2AB65B0 || (sub_1C2A9E8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7461636964657270 && a2 == 0xE900000000000065 || (sub_1C2A9E8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x676E615265746164 && a2 == 0xEA00000000007365 || (sub_1C2A9E8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6144676E69646E65 && a2 == 0xEA00000000006574 || (sub_1C2A9E8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x736973796C616E61 && a2 == 0xED000073646E694BLL || (sub_1C2A9E8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001C2AB65D0 || (sub_1C2A9E8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x80000001C2AB65F0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    char v5 = sub_1C2A9E8D8();
    swift_bridgeObjectRelease();
    if (v5) {
      return 6;
    }
    else {
      return 7;
    }
  }
}

void *sub_1C29676F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  uint64_t v5 = a2 + 72;
  swift_bridgeObjectRetain();
  sub_1C296921C(v5, (uint64_t)v37, (uint64_t (*)(void))sub_1C2969284);
  uint64_t v6 = 0;
  uint64_t v39 = *(void *)(a2 + 64);
  uint64_t v33 = *(void *)(a2 + 80);
  char v32 = *(unsigned char *)(a2 + 88);
  uint64_t v7 = v2 - 1;
  char v8 = (void *)MEMORY[0x1E4FBC860];
  while (1)
  {
    char v9 = *(unsigned char *)(a1 + v6 + 32);
    sub_1C296921C((uint64_t)v37, (uint64_t)&v38, (uint64_t (*)(void))sub_1C2969284);
    uint64_t v10 = v38;
    long long v11 = 0uLL;
    if (v38 && *(void *)(v38 + 16))
    {
      unint64_t v12 = sub_1C292F188(v9);
      if (v13)
      {
        char v14 = 0;
        uint64_t v15 = *(void *)(v10 + 56) + 32 * v12;
        uint64_t v16 = *(void *)v15;
        uint64_t v17 = *(unsigned __int8 *)(v15 + 8);
        long long v11 = *(_OWORD *)(v15 + 16);
      }
      else
      {
        uint64_t v16 = 0;
        uint64_t v17 = 0;
        char v14 = 1;
        long long v11 = 0uLL;
      }
    }
    else
    {
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      char v14 = 1;
    }
    *(void *)long long v34 = v16;
    *(void *)&v34[8] = v17;
    *(_OWORD *)&v34[16] = v11;
    v34[32] = v14;
    static SignificantChangeEngine.Parameters.makeParameters(dateRange:trendAnalysisKinds:parameterOverrides:absoluteChangeThreshold:)(v9, v39, (uint64_t)v34, v33, v32, (uint64_t)v35);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      char v8 = sub_1C299CD44(0, v8[2] + 1, 1, v8);
    }
    unint64_t v19 = v8[2];
    unint64_t v18 = v8[3];
    if (v19 >= v18 >> 1) {
      char v8 = sub_1C299CD44((void *)(v18 > 1), v19 + 1, 1, v8);
    }
    *(_OWORD *)&v34[7] = v35[0];
    *(_OWORD *)&v34[23] = v35[1];
    *(_OWORD *)&v34[71] = v35[4];
    *(_OWORD *)&v34[87] = v35[5];
    *(_OWORD *)&v34[39] = v35[2];
    *(_OWORD *)&v34[55] = v35[3];
    *(_OWORD *)&v34[135] = v35[8];
    *(_OWORD *)&v34[151] = v35[9];
    *(_OWORD *)&v34[103] = v35[6];
    *(_OWORD *)&v34[119] = v35[7];
    v34[215] = v36;
    *(_OWORD *)&v34[183] = v35[11];
    *(_OWORD *)&v34[199] = v35[12];
    *(_OWORD *)&v34[167] = v35[10];
    v8[2] = v19 + 1;
    uint64_t v20 = &v8[28 * v19];
    *((unsigned char *)v20 + 32) = v9;
    long long v21 = *(_OWORD *)v34;
    *(_OWORD *)((char *)v20 + 49) = *(_OWORD *)&v34[16];
    *(_OWORD *)((char *)v20 + 33) = v21;
    long long v22 = *(_OWORD *)&v34[32];
    long long v23 = *(_OWORD *)&v34[48];
    long long v24 = *(_OWORD *)&v34[64];
    *(_OWORD *)((char *)v20 + 113) = *(_OWORD *)&v34[80];
    *(_OWORD *)((char *)v20 + 97) = v24;
    *(_OWORD *)((char *)v20 + 81) = v23;
    *(_OWORD *)((char *)v20 + 65) = v22;
    long long v25 = *(_OWORD *)&v34[96];
    long long v26 = *(_OWORD *)&v34[112];
    long long v27 = *(_OWORD *)&v34[128];
    *(_OWORD *)((char *)v20 + 177) = *(_OWORD *)&v34[144];
    *(_OWORD *)((char *)v20 + 161) = v27;
    *(_OWORD *)((char *)v20 + 145) = v26;
    *(_OWORD *)((char *)v20 + 129) = v25;
    long long v28 = *(_OWORD *)&v34[160];
    long long v29 = *(_OWORD *)&v34[176];
    long long v30 = *(_OWORD *)&v34[192];
    *(void *)((char *)v20 + 241) = *(void *)&v34[208];
    *(_OWORD *)((char *)v20 + 225) = v30;
    *(_OWORD *)((char *)v20 + 209) = v29;
    *(_OWORD *)((char *)v20 + 193) = v28;
    if (v7 == v6) {
      break;
    }
    ++v6;
  }
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_1C29679A0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  sub_1C29402B8(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
  sub_1C29641FC(v2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1C2967A10(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  sub_1C293FE60(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
  sub_1C2967050(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

void sub_1C2967A80(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(uint64_t, ValueMetadata *, uint64_t, unint64_t))
{
  if (!*a2)
  {
    unint64_t v8 = sub_1C29610EC();
    unint64_t v9 = a4(a1, &type metadata for DateRange, a3, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

unint64_t sub_1C2967AEC()
{
  unint64_t result = qword_1EBB90288;
  if (!qword_1EBB90288)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB90288);
  }
  return result;
}

unint64_t sub_1C2967B40()
{
  unint64_t result = qword_1EBB902A8;
  if (!qword_1EBB902A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB902A8);
  }
  return result;
}

void sub_1C2967B94(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = sub_1C2A9DEF8();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

unint64_t sub_1C2967BDC()
{
  unint64_t result = qword_1EA31DF78;
  if (!qword_1EA31DF78)
  {
    sub_1C2967B94(255, &qword_1EBB8F7D8);
    sub_1C2967C5C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA31DF78);
  }
  return result;
}

unint64_t sub_1C2967C5C()
{
  unint64_t result = qword_1EA31DF80;
  if (!qword_1EA31DF80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA31DF80);
  }
  return result;
}

void sub_1C2967CB0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

unint64_t sub_1C2967D18()
{
  unint64_t result = qword_1EBB8F7E0;
  if (!qword_1EBB8F7E0)
  {
    sub_1C2967B94(255, &qword_1EBB8F7D8);
    sub_1C2967D98();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB8F7E0);
  }
  return result;
}

unint64_t sub_1C2967D98()
{
  unint64_t result = qword_1EBB8EB98;
  if (!qword_1EBB8EB98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB8EB98);
  }
  return result;
}

unint64_t sub_1C2967DF0()
{
  unint64_t result = qword_1EA31DF88;
  if (!qword_1EA31DF88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA31DF88);
  }
  return result;
}

unint64_t sub_1C2967E48()
{
  unint64_t result = qword_1EA31DF90;
  if (!qword_1EA31DF90)
  {
    sub_1C2967B94(255, &qword_1EBB8F7C8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA31DF90);
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for TrendPredicate(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for DiagramConfiguration.Line()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for TrendPredicate(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *__swift_memcpy8_8(void *result, void *a2)
{
  *unint64_t result = *a2;
  return result;
}

void *assignWithTake for TrendPredicate(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TrendPredicate(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TrendPredicate(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TrendPredicate()
{
  return &type metadata for TrendPredicate;
}

uint64_t assignWithCopy for TrendConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  unsigned __int8 v8 = *(unsigned char *)(a2 + 32);
  sub_1C29402B8(*(void *)a2, v5, v6, v7, v8);
  uint64_t v9 = *(void *)a1;
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = *(void *)(a1 + 24);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  unsigned __int8 v13 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v8;
  sub_1C293FE60(v9, v10, v11, v12, v13);
  char v14 = (uint64_t *)(a1 + 40);
  uint64_t v15 = *(void *)(a2 + 40);
  if (*(void *)(a1 + 40) == 1)
  {
    if (v15 != 1)
    {
      *char v14 = v15;
      swift_bridgeObjectRetain();
      goto LABEL_9;
    }
    uint64_t v16 = 1;
  }
  else
  {
    if (v15 != 1)
    {
      *char v14 = v15;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_9;
    }
    sub_1C296815C(a1 + 40);
    uint64_t v16 = *(void *)(a2 + 40);
  }
  *char v14 = v16;
LABEL_9:
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v17 = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 80) = v17;
  return a1;
}

uint64_t sub_1C296815C(uint64_t a1)
{
  return a1;
}

uint64_t assignWithTake for TrendConfiguration(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 32);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  long long v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
  unsigned __int8 v10 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v4;
  sub_1C293FE60(v5, v6, v7, v8, v10);
  uint64_t v11 = (uint64_t *)(a1 + 40);
  uint64_t v12 = *(void *)(a2 + 40);
  if (*(void *)(a1 + 40) != 1)
  {
    if (v12 != 1)
    {
      *uint64_t v11 = v12;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_1C296815C(a1 + 40);
    uint64_t v12 = 1;
  }
  *uint64_t v11 = v12;
LABEL_6:
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  return a1;
}

uint64_t getEnumTagSinglePayload for TrendConfiguration(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 89)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TrendConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 88) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 89) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 48) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 89) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TrendAnalysisKind()
{
  return &type metadata for TrendAnalysisKind;
}

ValueMetadata *type metadata accessor for ParameterOverrides()
{
  return &type metadata for ParameterOverrides;
}

uint64_t destroy for CorrelatedTrendConfiguration()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *_s19HealthVisualization28CorrelatedTrendConfigurationVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for CorrelatedTrendConfiguration(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for CorrelatedTrendConfiguration(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CorrelatedTrendConfiguration(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CorrelatedTrendConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CorrelatedTrendConfiguration()
{
  return &type metadata for CorrelatedTrendConfiguration;
}

unsigned char *_s19HealthVisualization17TrendAnalysisKindOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C29685D0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CorrelatedTrendConfiguration.CodingKeys()
{
  return &type metadata for CorrelatedTrendConfiguration.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for ParameterOverrides.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C29686D4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ParameterOverrides.CodingKeys()
{
  return &type metadata for ParameterOverrides.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for TrendConfiguration.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *__n128 result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C29687D8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TrendConfiguration.CodingKeys()
{
  return &type metadata for TrendConfiguration.CodingKeys;
}

uint64_t getEnumTagSinglePayload for TrendPredicate.CodingKeys(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for TrendPredicate.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *__n128 result = a2;
        return result;
      case 2:
        *(_WORD *)__n128 result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)__n128 result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *__n128 result = 0;
      break;
    case 2:
      *(_WORD *)__n128 result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1C2968900);
    case 4:
      *(_DWORD *)__n128 result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1C2968928()
{
  return 0;
}

ValueMetadata *type metadata accessor for TrendPredicate.CodingKeys()
{
  return &type metadata for TrendPredicate.CodingKeys;
}

unint64_t sub_1C2968944()
{
  unint64_t result = qword_1EA31DF98;
  if (!qword_1EA31DF98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA31DF98);
  }
  return result;
}

unint64_t sub_1C296899C()
{
  unint64_t result = qword_1EA31DFA0;
  if (!qword_1EA31DFA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA31DFA0);
  }
  return result;
}

unint64_t sub_1C29689F4()
{
  unint64_t result = qword_1EA31DFA8;
  if (!qword_1EA31DFA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA31DFA8);
  }
  return result;
}

unint64_t sub_1C2968A4C()
{
  unint64_t result = qword_1EA31DFB0;
  if (!qword_1EA31DFB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA31DFB0);
  }
  return result;
}

unint64_t sub_1C2968AA4()
{
  unint64_t result = qword_1EBB902B8;
  if (!qword_1EBB902B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB902B8);
  }
  return result;
}

unint64_t sub_1C2968AFC()
{
  unint64_t result = qword_1EBB902B0;
  if (!qword_1EBB902B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB902B0);
  }
  return result;
}

unint64_t sub_1C2968B54()
{
  unint64_t result = qword_1EBB90298;
  if (!qword_1EBB90298)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB90298);
  }
  return result;
}

unint64_t sub_1C2968BAC()
{
  unint64_t result = qword_1EBB90290;
  if (!qword_1EBB90290)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB90290);
  }
  return result;
}

unint64_t sub_1C2968C04()
{
  unint64_t result = qword_1EBB8EB90;
  if (!qword_1EBB8EB90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB8EB90);
  }
  return result;
}

unint64_t sub_1C2968C5C()
{
  unint64_t result = qword_1EBB8EB88;
  if (!qword_1EBB8EB88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB8EB88);
  }
  return result;
}

unint64_t sub_1C2968CB4()
{
  unint64_t result = qword_1EBB8E8F0;
  if (!qword_1EBB8E8F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB8E8F0);
  }
  return result;
}

unint64_t sub_1C2968D0C()
{
  unint64_t result = qword_1EBB8E8E8;
  if (!qword_1EBB8E8E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB8E8E8);
  }
  return result;
}

uint64_t sub_1C2968D60(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000011 && a2 == 0x80000001C2AB6610 || (sub_1C2A9E8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000001C2AB6630 || (sub_1C2A9E8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001C2AB6650)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v5 = sub_1C2A9E8D8();
    swift_bridgeObjectRelease();
    if (v5) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_1C2968EA4(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000014 && a2 == 0x80000001C2AB6670 || (sub_1C2A9E8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001C2AB6690)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v5 = sub_1C2A9E8D8();
    swift_bridgeObjectRelease();
    if (v5) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

unint64_t sub_1C2968F94()
{
  unint64_t result = qword_1EBB8EB68;
  if (!qword_1EBB8EB68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB8EB68);
  }
  return result;
}

uint64_t sub_1C2968FE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SignificantChange.Period(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C296904C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SignificantChange.Period(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1C29690A8()
{
  if (!qword_1EA31DFB8)
  {
    sub_1C2969100();
    unint64_t v0 = sub_1C2A9E328();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EA31DFB8);
    }
  }
}

void sub_1C2969100()
{
  if (!qword_1EA31DFC0)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EA31DFC0);
    }
  }
}

uint64_t sub_1C2969168(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 113) <= 4u) {
    int v1 = 4;
  }
  else {
    int v1 = *(unsigned __int8 *)(a1 + 113);
  }
  unsigned int v2 = v1 - 4;
  if (*(unsigned __int8 *)(a1 + 113) >= 4u) {
    return v2;
  }
  else {
    return 0;
  }
}

unint64_t sub_1C2969188()
{
  unint64_t result = qword_1EBB92210;
  if (!qword_1EBB92210)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EBB92210);
  }
  return result;
}

double sub_1C29691E0(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(void *)(a1 + 112) = 1280;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(unsigned char *)(a1 + 216) = 0;
  return result;
}

uint64_t sub_1C296921C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void sub_1C2969284()
{
  if (!qword_1EA31DFC8)
  {
    sub_1C2967A80(255, &qword_1EBB902C0, (uint64_t)&type metadata for ParameterOverrides, MEMORY[0x1E4FBAEA0]);
    unint64_t v0 = sub_1C2A9E328();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EA31DFC8);
    }
  }
}

uint64_t AudiogramQueryConfiguration.mostRecentSample.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 24);
  char v3 = *(unsigned char *)(v1 + 32);
  *(void *)a1 = *(void *)v1;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 8);
  *(void *)(a1 + 24) = v2;
  *(unsigned char *)(a1 + 32) = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

BOOL static AudiogramQueryConfiguration.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  int v6 = *(unsigned __int8 *)(a1 + 32);
  uint64_t v7 = *(void *)(a2 + 8);
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v9 = *(void *)(a2 + 24);
  int v10 = *(unsigned __int8 *)(a2 + 32);
  if (v3)
  {
    if (!v7) {
      return 0;
    }
    BOOL v11 = *(void *)a1 == *(void *)a2 && v3 == v7;
    if (!v11 && (sub_1C2A9E8D8() & 1) == 0) {
      return 0;
    }
  }
  else if (v7)
  {
    return 0;
  }
  if (!v5)
  {
    if (v9) {
      return 0;
    }
    return ((v6 ^ v10) & 1) == 0;
  }
  if (v9)
  {
    if (v4 == v8 && v5 == v9) {
      return v6 == v10;
    }
    if (sub_1C2A9E8D8()) {
      return ((v6 ^ v10) & 1) == 0;
    }
  }
  return 0;
}

unint64_t sub_1C2969444()
{
  return 0xD000000000000010;
}

uint64_t sub_1C2969460@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1C2969DF0(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1C296948C(uint64_t a1)
{
  unint64_t v2 = sub_1C29698A4();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1C29694C8(uint64_t a1)
{
  unint64_t v2 = sub_1C29698A4();
  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t AudiogramQueryConfiguration.encode(to:)(void *a1)
{
  sub_1C296994C(0, &qword_1EA31DFD0, MEMORY[0x1E4FBBDE0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v7 = (char *)&v11 - v6;
  long long v13 = *v1;
  uint64_t v9 = *((void *)v1 + 2);
  uint64_t v8 = *((void *)v1 + 3);
  int v12 = *((unsigned __int8 *)v1 + 32);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1C29698A4();
  sub_1C2A9EA18();
  long long v14 = v13;
  uint64_t v15 = v9;
  uint64_t v16 = v8;
  char v17 = v12;
  sub_1C29698F8();
  sub_1C2A9E868();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t AudiogramQueryConfiguration.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1C296994C(0, &qword_1EBB92188, MEMORY[0x1E4FBBDC0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)v13 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1C29698A4();
  sub_1C2A9EA08();
  if (!v2)
  {
    sub_1C29699B0();
    sub_1C2A9E7A8();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    char v10 = v14;
    long long v11 = v13[1];
    *(_OWORD *)a2 = v13[0];
    *(_OWORD *)(a2 + 16) = v11;
    *(unsigned char *)(a2 + 32) = v10;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1C2969828@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return AudiogramQueryConfiguration.init(from:)(a1, a2);
}

uint64_t sub_1C2969840(void *a1)
{
  return AudiogramQueryConfiguration.encode(to:)(a1);
}

uint64_t sub_1C2969858(uint64_t a1, uint64_t a2)
{
  char v2 = *(unsigned char *)(a1 + 32);
  char v3 = *(unsigned char *)(a2 + 32);
  long long v4 = *(_OWORD *)(a1 + 16);
  v9[0] = *(_OWORD *)a1;
  v9[1] = v4;
  char v10 = v2;
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  char v8 = v3;
  return _s19HealthVisualization34MostRecentSampleQueryConfigurationV2eeoiySbAC_ACtFZ_0((uint64_t)v9, (uint64_t)v7) & 1;
}

unint64_t sub_1C29698A4()
{
  unint64_t result = qword_1EBB91E00;
  if (!qword_1EBB91E00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB91E00);
  }
  return result;
}

unint64_t sub_1C29698F8()
{
  unint64_t result = qword_1EBB8F5E0;
  if (!qword_1EBB8F5E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB8F5E0);
  }
  return result;
}

void sub_1C296994C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = sub_1C29698A4();
    unint64_t v7 = a3(a1, &type metadata for AudiogramQueryConfiguration.CodingKeys, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

unint64_t sub_1C29699B0()
{
  unint64_t result = qword_1EBB91E88;
  if (!qword_1EBB91E88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB91E88);
  }
  return result;
}

uint64_t destroy for MostRecentSampleQueryConfiguration()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MostRecentSampleQueryConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MostRecentSampleQueryConfiguration(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for MostRecentSampleQueryConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for MostRecentSampleQueryConfiguration(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MostRecentSampleQueryConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AudiogramQueryConfiguration()
{
  return &type metadata for AudiogramQueryConfiguration;
}

unsigned char *storeEnumTagSinglePayload for AudiogramQueryConfiguration.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1C2969CB0);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for AudiogramQueryConfiguration.CodingKeys()
{
  return &type metadata for AudiogramQueryConfiguration.CodingKeys;
}

unint64_t sub_1C2969CEC()
{
  unint64_t result = qword_1EA31DFD8;
  if (!qword_1EA31DFD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA31DFD8);
  }
  return result;
}

unint64_t sub_1C2969D44()
{
  unint64_t result = qword_1EBB91E10;
  if (!qword_1EBB91E10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB91E10);
  }
  return result;
}

unint64_t sub_1C2969D9C()
{
  unint64_t result = qword_1EBB91E08;
  if (!qword_1EBB91E08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB91E08);
  }
  return result;
}

uint64_t sub_1C2969DF0(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000010 && a2 == 0x80000001C2AB66F0)
  {
    swift_bridgeObjectRelease();
    char v2 = 0;
  }
  else
  {
    char v3 = sub_1C2A9E8D8();
    swift_bridgeObjectRelease();
    char v2 = v3 ^ 1;
  }
  return v2 & 1;
}

uint64_t HKHealthStore.statisticsCollectionPublisher(for:configuration:anchorDateOverride:dateInterval:receivesUpdates:predicate:cacheSettings:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, void *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v49 = a7;
  int v47 = a5;
  uint64_t v44 = a3;
  uint64_t v45 = a8;
  uint64_t v46 = a1;
  uint64_t v11 = sub_1C2A9C468();
  uint64_t v50 = *(void *)(v11 - 8);
  uint64_t v51 = v11;
  MEMORY[0x1F4188790](v11);
  long long v13 = &v41[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1C2939E10(0, &qword_1EBB92520, MEMORY[0x1E4F27928]);
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v16 = &v41[-v15];
  uint64_t v52 = sub_1C2A9C6E8();
  uint64_t v17 = *(void *)(v52 - 8);
  MEMORY[0x1F4188790](v52);
  unint64_t v19 = &v41[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v20 = *(void *)(a2 + 8);
  int v42 = *(unsigned __int8 *)(a2 + 16);
  uint64_t v43 = *(unsigned __int8 *)(a2 + 17);
  sub_1C29376D4(0, &qword_1EBB92150);
  uint64_t v48 = a4;
  long long v21 = (void *)sub_1C2A9E278();
  uint64_t v54 = MEMORY[0x1E4FBC860];
  if (!v21)
  {
    id v24 = a6;
    if (!a6) {
      goto LABEL_10;
    }
    goto LABEL_7;
  }
  id v22 = a6;
  id v23 = v21;
  MEMORY[0x1C8763D10]();
  if (*(void *)((v54 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v54 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_1C2A9DEB8();
  }
  sub_1C2A9DEE8();
  sub_1C2A9DEA8();
  if (a6)
  {
LABEL_7:
    id v25 = a6;
    MEMORY[0x1C8763D10]();
    if (*(void *)((v54 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v54 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      sub_1C2A9DEB8();
    }
    sub_1C2A9DEE8();
    sub_1C2A9DEA8();
  }
LABEL_10:

  sub_1C29376D4(0, (unint64_t *)&qword_1EBB8E090);
  long long v26 = (void *)sub_1C2A9DE88();
  swift_bridgeObjectRelease();
  id v27 = objc_msgSend(self, sel_andPredicateWithSubpredicates_, v26);

  uint64_t v28 = *(void *)(v20 + 16);
  if (v28)
  {
    swift_bridgeObjectRetain();
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    while (2)
    {
      uint64_t v31 = *(unsigned __int8 *)(v20 + v30++ + 32);
      switch(v31)
      {
        case 1:
          if ((v29 & 4) == 0)
          {
            uint64_t v32 = 4;
            goto LABEL_12;
          }
          goto LABEL_13;
        case 2:
          if ((v29 & 8) == 0)
          {
            uint64_t v32 = 8;
            goto LABEL_12;
          }
          goto LABEL_13;
        case 3:
          if ((v29 & 0x10) == 0)
          {
            uint64_t v32 = 16;
            goto LABEL_12;
          }
          goto LABEL_13;
        case 4:
          if ((v29 & 0x20) == 0)
          {
            uint64_t v32 = 32;
            goto LABEL_12;
          }
          goto LABEL_13;
        case 5:
          if ((v29 & 0x40) == 0)
          {
            uint64_t v32 = 64;
            goto LABEL_12;
          }
          goto LABEL_13;
        case 6:
          uint64_t v32 = _HKStatisticOptionsAverageSampleDuration();
          goto LABEL_30;
        case 7:
          uint64_t v32 = _HKStatisticsOptionPresence();
          goto LABEL_30;
        case 8:
          uint64_t v32 = _HKStatisticsOptionBaselineRelativeQuantities();
          goto LABEL_30;
        case 9:
          uint64_t v33 = _HKStatisticsOptionAttenuateSamples();
          if ((v33 & 0xFFFFFFFFFFFFFFFDLL) == 0) {
            goto LABEL_32;
          }
          uint64_t v32 = v33 | 2;
LABEL_30:
          if ((v32 & ~v29) == 0) {
            goto LABEL_13;
          }
          goto LABEL_12;
        default:
LABEL_32:
          if ((v29 & 2) != 0) {
            goto LABEL_13;
          }
          uint64_t v32 = 2;
LABEL_12:
          v29 |= v32;
LABEL_13:
          if (v28 != v30) {
            continue;
          }
          swift_bridgeObjectRelease();
          break;
      }
      break;
    }
  }
  sub_1C2939D90(v44, (uint64_t)v16);
  uint64_t v34 = v52;
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v17 + 48))(v16, 1, v52) == 1)
  {
    char v53 = v42;
    AnchorDate.date.getter();
    sub_1C296B074((uint64_t)v16);
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v17 + 32))(v19, v16, v34);
  }
  switch(v43)
  {
    case 1:
      if (qword_1EBB92318 != -1) {
        swift_once();
      }
      long long v35 = qword_1EBB91BF0;
      break;
    case 2:
      if (qword_1EBB8E230 != -1) {
        swift_once();
      }
      long long v35 = qword_1EBB8DEB8;
      break;
    case 3:
      if (qword_1EBB8E118 != -1) {
        swift_once();
      }
      long long v35 = qword_1EBB8DEE8;
      break;
    case 4:
      if (qword_1EBB8E238 != -1) {
        swift_once();
      }
      long long v35 = qword_1EBB8DED0;
      break;
    default:
      if (qword_1EBB90258 != -1) {
        swift_once();
      }
      long long v35 = qword_1EBB90270;
      break;
  }
  uint64_t v36 = v51;
  uint64_t v37 = __swift_project_value_buffer(v51, (uint64_t)v35);
  uint64_t v38 = v50;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v50 + 16))(v13, v37, v36);
  id v39 = v27;
  sub_1C2A9E078();

  (*(void (**)(unsigned char *, uint64_t))(v38 + 8))(v13, v36);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v17 + 8))(v19, v52);
}

uint64_t HKHealthStore.mostRecentSamplePublisher(for:predicate:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1C2A9E058();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  unint64_t v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C296B124();
  uint64_t v9 = v8;
  uint64_t v10 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C296B238();
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_1C2AA7730;
  *(void *)(v13 + 32) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F2B3D0]), sel_initWithSampleType_predicate_, a1, a2);
  v17[1] = v13;
  sub_1C2A9DEA8();
  id v14 = objc_msgSend(self, sel_sortDescriptorsForMostRecentSamples);
  sub_1C29376D4(0, &qword_1EBB92118);
  sub_1C2A9DE98();

  sub_1C2A9E068();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1C296B1D0();
  sub_1C296B3E0(&qword_1EBB8FF90, MEMORY[0x1E4F66898]);
  sub_1C2A9D4C8();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  sub_1C296B3E0(&qword_1EBB8FF50, (void (*)(uint64_t))sub_1C296B124);
  uint64_t v15 = sub_1C2A9D4A8();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return v15;
}

uint64_t sub_1C296A814@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = sub_1C2A9E648();
    uint64_t v4 = result;
    if (!result) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (!v4)
    {
LABEL_7:
      uint64_t result = swift_bridgeObjectRelease();
      *a2 = v4;
      return result;
    }
  }
  if ((v3 & 0xC000000000000001) != 0)
  {
    id v6 = (id)MEMORY[0x1C8764390](0, v3);
    goto LABEL_6;
  }
  if (*(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v6 = *(id *)(v3 + 32);
LABEL_6:
    uint64_t v4 = (uint64_t)v6;
    goto LABEL_7;
  }
  __break(1u);
  return result;
}

uint64_t HKHealthStore.cumulativeTimePeriodPublisher(for:dateInterval:additionalPredicate:configuration:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v27 = sub_1C2A9E058();
  uint64_t v5 = *(void *)(v27 - 8);
  MEMORY[0x1F4188790](v27);
  unint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C296B294();
  uint64_t v28 = *(void *)(v8 - 8);
  uint64_t v29 = v8;
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C296B238();
  uint64_t v11 = swift_allocObject();
  long long v30 = xmmword_1C2AA7730;
  *(_OWORD *)(v11 + 16) = xmmword_1C2AA7730;
  uint64_t v12 = self;
  uint64_t v13 = (void *)sub_1C2A9C318();
  id v14 = objc_msgSend(v12, sel_predicateForSamplesWithinDateInterval_options_, v13, 0);

  *(void *)(v11 + 32) = v14;
  uint64_t v31 = v11;
  sub_1C2A9DEA8();
  if (a3)
  {
    id v15 = a3;
    MEMORY[0x1C8763D10]();
    if (*(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      sub_1C2A9DEB8();
    }
    sub_1C2A9DEE8();
    sub_1C2A9DEA8();
  }
  sub_1C29376D4(0, (unint64_t *)&qword_1EBB8E090);
  uint64_t v16 = (void *)sub_1C2A9DE88();
  swift_bridgeObjectRelease();
  id v17 = objc_msgSend(self, sel_andPredicateWithSubpredicates_, v16);

  id v18 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F2B3D0]), sel_initWithSampleType_predicate_, a1, v17);
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = v30;
  *(void *)(v19 + 32) = v18;
  uint64_t v31 = v19;
  sub_1C2A9DEA8();
  uint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = v30;
  sub_1C29376D4(0, &qword_1EBB92118);
  swift_getKeyPath();
  id v21 = v18;
  *(void *)(v20 + 32) = sub_1C2A9E138();
  uint64_t v31 = v20;
  sub_1C2A9DEA8();
  sub_1C2A9E068();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1C2939E10(0, &qword_1EBB8F820, (void (*)(uint64_t))sub_1C296B35C);
  sub_1C296B3E0(&qword_1EBB8FF90, MEMORY[0x1E4F66898]);
  uint64_t v22 = v27;
  sub_1C2A9D4C8();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v22);
  sub_1C296B3E0(&qword_1EBB8FF40, (void (*)(uint64_t))sub_1C296B294);
  uint64_t v23 = v29;
  uint64_t v24 = sub_1C2A9D4A8();

  (*(void (**)(char *, uint64_t))(v28 + 8))(v10, v23);
  return v24;
}

unint64_t sub_1C296AD40@<X0>(unint64_t *a1@<X0>, double *a2@<X8>)
{
  sub_1C296B428();
  uint64_t v5 = v4;
  MEMORY[0x1F4188790](v4);
  unint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v28 - v9;
  unint64_t v11 = *a1;
  if (v11 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = sub_1C2A9E648();
    if (v12)
    {
LABEL_3:
      unint64_t result = v12 - 1;
      if (__OFSUB__(v12, 1))
      {
        __break(1u);
      }
      else if ((v11 & 0xC000000000000001) == 0)
      {
        if ((result & 0x8000000000000000) != 0)
        {
          __break(1u);
        }
        else if (result < *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          id v14 = *(id *)(v11 + 8 * result + 32);
LABEL_8:
          id v15 = v14;
          swift_bridgeObjectRelease();
          double v16 = static MostRecentTimePeriodQuerySupport.totalDuration(for:referenceSample:)(v11, v15);
          id v17 = &v10[*(int *)(v5 + 48)];
          static MostRecentTimePeriodQuerySupport.timestamp(sample:)(v15);
          if (v11 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v18 = sub_1C2A9E648();

            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v18 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
          }
          uint64_t v19 = &v7[*(int *)(v5 + 48)];
          uint64_t v20 = sub_1C2A9C6E8();
          id v21 = *(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 32);
          v21(v19, v17, v20);
          sub_1C296B35C();
          uint64_t v23 = v22;
          uint64_t v24 = (char *)a2 + *(int *)(v22 + 48);
          uint64_t v25 = *(int *)(v23 + 64);
          *a2 = v16;
          v21(v24, v19, v20);
          *(void *)((char *)a2 + v25) = v18;
          return (*(uint64_t (**)(double *, void, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(a2, 0, 1, v23);
        }
        __break(1u);
        return result;
      }
      id v14 = (id)MEMORY[0x1C8764390](result, v11);
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v12 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v12) {
      goto LABEL_3;
    }
  }
  swift_bridgeObjectRelease();
  sub_1C296B35C();
  uint64_t v27 = *(uint64_t (**)(double *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56);
  return v27(a2, 1, 1, v26);
}

void sub_1C296B014(id *a1)
{
  id v1 = objc_msgSend(*a1, sel_endDate);
  sub_1C2A9C6A8();
}

uint64_t sub_1C296B074(uint64_t a1)
{
  sub_1C2939E10(0, &qword_1EBB92520, MEMORY[0x1E4F27928]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

void sub_1C296B124()
{
  if (!qword_1EBB8FF58)
  {
    sub_1C2A9E058();
    sub_1C296B1D0();
    sub_1C296B3E0(&qword_1EBB8FF90, MEMORY[0x1E4F66898]);
    unint64_t v0 = sub_1C2A9D3B8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EBB8FF58);
    }
  }
}

void sub_1C296B1D0()
{
  if (!qword_1EBB92358)
  {
    sub_1C29376D4(255, &qword_1EBB927D8);
    unint64_t v0 = sub_1C2A9E328();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EBB92358);
    }
  }
}

void sub_1C296B238()
{
  if (!qword_1EBB91978)
  {
    unint64_t v0 = sub_1C2A9E8A8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EBB91978);
    }
  }
}

void sub_1C296B294()
{
  if (!qword_1EBB8FF48)
  {
    sub_1C2A9E058();
    sub_1C2939E10(255, &qword_1EBB8F820, (void (*)(uint64_t))sub_1C296B35C);
    sub_1C296B3E0(&qword_1EBB8FF90, MEMORY[0x1E4F66898]);
    unint64_t v0 = sub_1C2A9D3B8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EBB8FF48);
    }
  }
}

void sub_1C296B35C()
{
  if (!qword_1EBB8E3B8)
  {
    sub_1C2A9C6E8();
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_1EBB8E3B8);
    }
  }
}

char *keypath_get_selector_endDate()
{
  return sel_endDate;
}

uint64_t sub_1C296B3E0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1C296B428()
{
  if (!qword_1EBB8F838)
  {
    sub_1C2A9C6E8();
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_1EBB8F838);
    }
  }
}

void __swiftcall QueryConfigurationOverrides.datePredicate()(NSPredicate_optional *__return_ptr retstr)
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  sub_1C296B66C();
  MEMORY[0x1F4188790](v5 - 8);
  unint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_1C2A9C398();
  uint64_t v9 = *(void *)(v8 - 8);
  __n128 v10 = MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t, __n128))(v3 + 8))(v4, v3, v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    sub_1C296B6C4((uint64_t)v7);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v12, v7, v8);
    uint64_t v13 = self;
    id v14 = (void *)sub_1C2A9C318();
    objc_msgSend(v13, sel_predicateForSamplesWithinDateInterval_options_, v14, 0);

    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  }
}

void sub_1C296B66C()
{
  if (!qword_1EBB92480)
  {
    sub_1C2A9C398();
    unint64_t v0 = sub_1C2A9E328();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EBB92480);
    }
  }
}

uint64_t sub_1C296B6C4(uint64_t a1)
{
  sub_1C296B66C();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t dispatch thunk of QueryConfigurationOverrides.dateInterval.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

double AudioExposureStatistics.leqValue.getter()
{
  return *(double *)v0;
}

uint64_t AudioExposureStatistics.leqUnitString.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

double AudioExposureStatistics.secondsListened.getter()
{
  return *(double *)(v0 + 24);
}

uint64_t AudioExposureStatistics.daysAggregated.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t AudioExposureStatistics.lastUpdated.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AudioExposureStatistics(0) + 32);
  uint64_t v4 = sub_1C2A9C6E8();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t type metadata accessor for AudioExposureStatistics(uint64_t a1)
{
  return sub_1C296F4B8(a1, qword_1EBB92698);
}

uint64_t sub_1C296B818()
{
  uint64_t result = 0x65756C615671656CLL;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x5374696E5571656CLL;
      break;
    case 2:
      uint64_t result = 0x4C73646E6F636573;
      break;
    case 3:
      uint64_t result = 0x7267674173796164;
      break;
    case 4:
      uint64_t result = 0x616470557473616CLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1C296B8F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1C296E60C(a1, a2);
  *a3 = result;
  return result;
}

void sub_1C296B918(unsigned char *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_1C296B924(uint64_t a1)
{
  unint64_t v2 = sub_1C296E510();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1C296B960(uint64_t a1)
{
  unint64_t v2 = sub_1C296E510();
  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t AudioExposureStatistics.encode(to:)(void *a1)
{
  sub_1C296E564(0, &qword_1EBB8F960, MEMORY[0x1E4FBBDE0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  unint64_t v7 = &v9[-v6];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1C296E510();
  sub_1C2A9EA18();
  v9[15] = 0;
  sub_1C2A9E848();
  if (!v1)
  {
    v9[14] = 1;
    sub_1C2A9E828();
    v9[13] = 2;
    sub_1C2A9E848();
    v9[12] = 3;
    sub_1C2A9E858();
    type metadata accessor for AudioExposureStatistics(0);
    v9[11] = 4;
    sub_1C2A9C6E8();
    sub_1C296E5C8(&qword_1EBB91C18);
    sub_1C2A9E868();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t AudioExposureStatistics.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v21 = a2;
  uint64_t v23 = sub_1C2A9C6E8();
  uint64_t v20 = *(void *)(v23 - 8);
  MEMORY[0x1F4188790](v23);
  uint64_t v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C296E564(0, &qword_1EBB92178, MEMORY[0x1E4FBBDC0]);
  uint64_t v24 = v5;
  uint64_t v22 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  unint64_t v7 = (char *)&v20 - v6;
  uint64_t v8 = type metadata accessor for AudioExposureStatistics(0);
  MEMORY[0x1F4188790](v8);
  __n128 v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1C296E510();
  uint64_t v11 = v25;
  sub_1C2A9EA08();
  if (v11) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v12 = v8;
  uint64_t v13 = (uint64_t)a1;
  uint64_t v15 = v22;
  uint64_t v14 = v23;
  char v30 = 0;
  sub_1C2A9E788();
  *(void *)__n128 v10 = v16;
  char v29 = 1;
  *((void *)v10 + 1) = sub_1C2A9E768();
  *((void *)v10 + 2) = v17;
  char v28 = 2;
  sub_1C2A9E788();
  *((void *)v10 + 3) = v18;
  char v27 = 3;
  *((void *)v10 + 4) = sub_1C2A9E798();
  char v26 = 4;
  sub_1C296E5C8(&qword_1EBB927B8);
  sub_1C2A9E7A8();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v7, v24);
  (*(void (**)(char *, char *, uint64_t))(v20 + 32))(&v10[*(int *)(v12 + 32)], v4, v14);
  sub_1C296F940((uint64_t)v10, v21, type metadata accessor for AudioExposureStatistics);
  __swift_destroy_boxed_opaque_existential_1(v13);
  return sub_1C296ECA0((uint64_t)v10, type metadata accessor for AudioExposureStatistics);
}

uint64_t sub_1C296BF7C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return AudioExposureStatistics.init(from:)(a1, a2);
}

uint64_t sub_1C296BF94(void *a1)
{
  return AudioExposureStatistics.encode(to:)(a1);
}

id AudioExposureStatistics.leqQuantity.getter()
{
  id v1 = objc_msgSend(self, sel_decibelAWeightedSoundPressureLevelUnit);
  id v2 = objc_msgSend(self, sel_quantityWithUnit_doubleValue_, v1, *v0);

  return v2;
}

uint64_t AudioExposureStatistics.init(leq:duration:days:lastUpdated:)@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v9 = self;
  id v10 = objc_msgSend(v9, sel_decibelAWeightedSoundPressureLevelUnit);
  objc_msgSend(a1, sel_doubleValueForUnit_, v10);
  uint64_t v12 = v11;
  id v13 = objc_msgSend(v10, sel_unitString);
  uint64_t v14 = sub_1C2A9DD28();
  uint64_t v16 = v15;

  id v17 = objc_msgSend(v9, sel_secondUnit);
  objc_msgSend(a2, sel_doubleValueForUnit_, v17);
  uint64_t v19 = v18;

  *a5 = v12;
  a5[1] = v14;
  a5[2] = v16;
  a5[3] = v19;
  a5[4] = a3;
  uint64_t v20 = (char *)a5 + *(int *)(type metadata accessor for AudioExposureStatistics(0) + 32);
  uint64_t v21 = sub_1C2A9C6E8();
  uint64_t v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 32);
  return v22(v20, a4, v21);
}

uint64_t AudioExposureStatisticsQueryOperation.result.getter()
{
  swift_retain();
  sub_1C2A9C9B8();
  return swift_release();
}

uint64_t sub_1C296C1F4()
{
  swift_retain();
  sub_1C2A9C9B8();
  return swift_release();
}

uint64_t sub_1C296C248(uint64_t a1)
{
  sub_1C296EBC8();
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = &v6[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1C296F940(a1, (uint64_t)v4, (uint64_t (*)(void))sub_1C296EBC8);
  unint64_t v7 = v4;
  swift_retain();
  sub_1C2A9C9C8();
  swift_release();
  return sub_1C296ECA0((uint64_t)v4, (uint64_t (*)(void))sub_1C296EBC8);
}

id sub_1C296C330()
{
  uint64_t v1 = qword_1EBB8F690;
  uint64_t v2 = *(void **)(v0 + qword_1EBB8F690);
  if (v2)
  {
    id v3 = *(id *)(v0 + qword_1EBB8F690);
  }
  else
  {
    id v4 = sub_1C296C390();
    uint64_t v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    uint64_t v2 = 0;
  }
  id v6 = v2;
  return v3;
}

id sub_1C296C390()
{
  sub_1C296F638(0, &qword_1EBB91F38, (uint64_t (*)(uint64_t))type metadata accessor for StatisticsQueryConfigurationOverrides, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v1 - 8);
  id v3 = &v17[-v2];
  id v4 = *(id *)&v0[qword_1EBB8F6B0];
  sub_1C296C694((uint64_t)v20);
  v17[0] = v20[0];
  uint64_t v18 = v21;
  __int16 v19 = v22;
  sub_1C296F9B0((uint64_t)&v0[qword_1EBB8F6C8], (uint64_t)v3);
  id v5 = objc_msgSend(v0, sel_name);
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = sub_1C2A9DD28();
    uint64_t v9 = v8;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(void *)&v0[qword_1EBB8F6D0];
  uint64_t v11 = *(void **)&v0[qword_1EBB8F6A0];
  uint64_t v12 = swift_allocObject();
  swift_unknownObjectWeakInit();
  id v13 = objc_allocWithZone((Class)type metadata accessor for StatisticsQueryOperation());
  id v14 = v11;
  id v15 = sub_1C29B8F8C(v4, v17, (uint64_t)v3, v7, v9, v10, v14, (uint64_t)sub_1C296FA7C, v12);

  swift_release();
  return v15;
}

id sub_1C296C568()
{
  uint64_t v1 = qword_1EBB8F698;
  uint64_t v2 = *(void **)(v0 + qword_1EBB8F698);
  if (v2)
  {
    id v3 = *(id *)(v0 + qword_1EBB8F698);
  }
  else
  {
    id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28B48]), sel_init);
    uint64_t v5 = swift_allocObject();
    swift_unknownObjectWeakInit();
    void v10[4] = sub_1C296FC78;
    v10[5] = v5;
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 1107296256;
    _OWORD v10[2] = sub_1C296D070;
    unsigned int v10[3] = &block_descriptor_14;
    id v6 = _Block_copy(v10);
    swift_release();
    objc_msgSend(v4, sel_addExecutionBlock_, v6);
    _Block_release(v6);
    uint64_t v7 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    uint64_t v2 = 0;
  }
  id v8 = v2;
  return v3;
}

void sub_1C296C694(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + qword_1EBB8F6A8;
  id v4 = *(char **)(v1 + qword_1EBB8F6A8 + 8);
  uint64_t v5 = *(void **)(v1 + qword_1EBB8F6B0);
  id v6 = self;
  swift_bridgeObjectRetain();
  id v7 = v5;
  id v8 = objc_msgSend(v6, sel__quantityTypeWithCode_, 172);
  if (v8)
  {
    uint64_t v9 = v8;
    sub_1C296FC38();
    id v10 = v7;
    char v11 = sub_1C2A9E2B8();

    if (v11)
    {
      uint64_t v12 = *((void *)v4 + 2);
      if (v12)
      {
        swift_bridgeObjectRetain();
        unint64_t v13 = 0;
        while (2)
        {
          switch(v4[v13 + 32])
          {
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
              char v14 = sub_1C2A9E8D8();
              swift_bridgeObjectRelease();
              if (v14) {
                goto LABEL_10;
              }
              if (v12 != ++v13) {
                continue;
              }
              swift_bridgeObjectRelease();
              break;
            default:
              swift_bridgeObjectRelease();
LABEL_10:
              swift_bridgeObjectRelease();
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                id v4 = sub_1C2A94364((uint64_t)v4);
              }
              if (v13 >= *((void *)v4 + 2))
              {
                __break(1u);
                JUMPOUT(0x1C296C974);
              }
              v4[v13 + 32] = 9;
              break;
          }
          break;
        }
      }
    }
  }
  else
  {
  }
  __int16 v15 = *(_WORD *)(v3 + 16);
  *(unsigned char *)a1 = *(unsigned char *)v3;
  *(void *)(a1 + 8) = v4;
  *(_WORD *)(a1 + 16) = v15;
}

uint64_t AudioExposureStatisticsQueryOperation.audioExposureResult.getter()
{
  return swift_retain();
}

id AudioExposureStatisticsQueryOperation.__allocating_init(quantityType:operationQueue:queryConfiguration:queryConfigurationOverrides:name:queryQualityOfService:healthStore:)(void *a1, void *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  id v17 = objc_allocWithZone(v8);
  id v18 = sub_1C296E8B0(a1, a2, a3, a4, a5, a6, a7, a8);

  return v18;
}

id AudioExposureStatisticsQueryOperation.init(quantityType:operationQueue:queryConfiguration:queryConfigurationOverrides:name:queryQualityOfService:healthStore:)(void *a1, void *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  id v11 = sub_1C296E8B0(a1, a2, a3, a4, a5, a6, a7, a8);

  return v11;
}

Swift::Void __swiftcall AudioExposureStatisticsQueryOperation.main()()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1C2A9CF58();
  uint64_t v39 = *(void *)(v2 - 8);
  uint64_t v40 = v2;
  uint64_t v3 = *(void *)(v39 + 64);
  MEMORY[0x1F4188790](v2);
  id v4 = (char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  id v7 = (char *)&v39 - v6;
  sub_1C296EBC8();
  MEMORY[0x1F4188790](v8);
  id v10 = (uint64_t *)((char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1C2962438();
  uint64_t v11 = swift_allocError();
  *uint64_t v12 = 2;
  *id v10 = v11;
  swift_storeEnumTagMultiPayload();
  long long v41 = v10;
  swift_retain();
  sub_1C2A9C9C8();
  swift_release();
  sub_1C296ECA0((uint64_t)v10, (uint64_t (*)(void))sub_1C296EBC8);
  unint64_t v13 = *(void **)&v0[qword_1EBB8F6B0];
  id v14 = objc_msgSend(v13, sel_identifier);
  uint64_t v15 = sub_1C2A9DD28();
  id v17 = v16;

  v18._uint64_t countAndFlagsBits = 0x676E696E6E7572;
  v18._uint64_t object = (void *)0xE700000000000000;
  v19._uint64_t countAndFlagsBits = v15;
  v19._uint64_t object = v17;
  NSOperation.logLifeCycleEvent(_:withPrivateInfo:)(v18, v19);
  swift_bridgeObjectRelease();
  if (qword_1EBB92338 != -1) {
    swift_once();
  }
  id v20 = (id)qword_1EBB91C60;
  id v21 = v1;
  sub_1C2A9CF48();
  sub_1C2A9E1B8();
  sub_1C29624A4();
  uint64_t v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_1C2AA6B00;
  id v23 = objc_msgSend(v13, sel_identifier);
  uint64_t v24 = sub_1C2A9DD28();
  uint64_t v26 = v25;

  *(void *)(v22 + 56) = MEMORY[0x1E4FBB1A0];
  *(void *)(v22 + 64) = sub_1C296250C();
  *(void *)(v22 + 32) = v24;
  *(void *)(v22 + 40) = v26;
  sub_1C2A9CF28();
  swift_bridgeObjectRelease();
  id v27 = sub_1C296C568();
  id v28 = sub_1C296C330();
  objc_msgSend(v27, sel_addDependency_, v28);

  id v29 = sub_1C296C568();
  uint64_t v31 = v39;
  uint64_t v30 = v40;
  (*(void (**)(char *, char *, uint64_t))(v39 + 16))(v4, v7, v40);
  unint64_t v32 = (*(unsigned __int8 *)(v31 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80);
  uint64_t v33 = swift_allocObject();
  *(void *)(v33 + 16) = v21;
  (*(void (**)(unint64_t, char *, uint64_t))(v31 + 32))(v33 + v32, v4, v30);
  aBlock[4] = sub_1C296EDCC;
  aBlock[5] = v33;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1C296D070;
  aBlock[3] = &block_descriptor;
  uint64_t v34 = _Block_copy(aBlock);
  long long v35 = (char *)v21;
  sub_1C296EE5C((uint64_t)sub_1C296EDCC);
  swift_release();
  objc_msgSend(v29, sel_setCompletionBlock_, v34);

  _Block_release(v34);
  swift_release();
  uint64_t v36 = *(void **)&v35[qword_1EBB8F6B8];
  id v37 = sub_1C296C330();
  objc_msgSend(v36, sel_addOperation_, v37);

  id v38 = sub_1C296C568();
  objc_msgSend(v36, sel_addOperation_, v38);

  (*(void (**)(char *, uint64_t))(v31 + 8))(v7, v30);
}

uint64_t sub_1C296CF78(uint64_t a1, uint64_t a2)
{
  sub_1C2A9E1A8();
  if (qword_1EBB92338 != -1) {
    swift_once();
  }
  sub_1C2A9CF38();
  id v3 = objc_msgSend(*(id *)(a2 + qword_1EBB8F6B0), sel_identifier);
  uint64_t v4 = sub_1C2A9DD28();
  uint64_t v6 = v5;

  v7._uint64_t countAndFlagsBits = 0x64656873696E6966;
  v7._uint64_t object = (void *)0xE800000000000000;
  v8._uint64_t countAndFlagsBits = v4;
  v8._uint64_t object = v6;
  NSOperation.logLifeCycleEvent(_:withPrivateInfo:)(v7, v8);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C296D070(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);
  return swift_release();
}

void sub_1C296D0B4(void *a1)
{
  id v1 = a1;
  AudioExposureStatisticsQueryOperation.main()();
}

Swift::Void __swiftcall AudioExposureStatisticsQueryOperation.cleanUp()()
{
  id v1 = v0;
  sub_1C296EBC8();
  *(void *)&double v3 = MEMORY[0x1F4188790](v2).n128_u64[0];
  uint64_t v5 = (uint64_t *)((char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (objc_msgSend(v0, sel_isCancelled, v3))
  {
    sub_1C2962438();
    uint64_t v6 = swift_allocError();
    *Swift::String v7 = 3;
    *uint64_t v5 = v6;
    uint64_t v8 = swift_storeEnumTagMultiPayload();
    MEMORY[0x1F4188790](v8);
    *(&v15 - 2) = (uint64_t)v5;
    swift_retain();
    sub_1C2A9C9C8();
    swift_release();
    sub_1C296ECA0((uint64_t)v5, (uint64_t (*)(void))sub_1C296EBC8);
    id v9 = objc_msgSend(*(id *)&v0[qword_1EBB8F6B0], sel_identifier);
    uint64_t v10 = sub_1C2A9DD28();
    uint64_t v12 = v11;

    v13._uint64_t countAndFlagsBits = 0x656C6C65636E6163;
    v13._uint64_t object = (void *)0xE900000000000064;
    v14._uint64_t countAndFlagsBits = v10;
    v14._uint64_t object = v12;
    NSOperation.logLifeCycleEvent(_:withPrivateInfo:)(v13, v14);
    swift_bridgeObjectRelease();
  }
  objc_msgSend(*(id *)&v1[qword_1EBB8F6B8], sel_cancelAllOperations);
}

id AudioExposureStatisticsQueryOperation.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void AudioExposureStatisticsQueryOperation.init()()
{
}

void sub_1C296D328()
{
}

uint64_t sub_1C296D358()
{
  swift_release();

  swift_bridgeObjectRelease();
  sub_1C296FB60(v0 + qword_1EBB8F6C8, &qword_1EBB91F38, (uint64_t (*)(uint64_t))type metadata accessor for StatisticsQueryConfigurationOverrides);

  return swift_release();
}

id AudioExposureStatisticsQueryOperation.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1C296D460(uint64_t a1)
{
  swift_release();

  swift_bridgeObjectRelease();
  sub_1C296FB60(a1 + qword_1EBB8F6C8, &qword_1EBB91F38, (uint64_t (*)(uint64_t))type metadata accessor for StatisticsQueryConfigurationOverrides);

  return swift_release();
}

uint64_t sub_1C296D53C()
{
  swift_retain();
  sub_1C2A9C9B8();
  return swift_release();
}

void sub_1C296D590(void *a1, char a2)
{
  if ((a2 & 1) == 0)
  {
    id v4 = a1;
    id v5 = objc_msgSend(v4, sel_averageQuantity);
    if (v5)
    {
      uint64_t v6 = v5;
      id v7 = objc_msgSend(v4, sel_duration);
      if (v7)
      {
        uint64_t v8 = v7;
        id v9 = objc_msgSend(self, sel_secondUnit);
        objc_msgSend(v8, sel_doubleValueForUnit_, v9);
        double v11 = v10;

        if (v11 > 2.22507386e-308)
        {
          MEMORY[0x1F4188790](v12);
          sub_1C2A9C9C8();

          goto LABEL_11;
        }
        sub_1C2A9E4D8();
        swift_getObjectType();
        sub_1C2A9EA58();
        sub_1C2A9DDB8();
        swift_bridgeObjectRelease();
        uint64_t v14 = sub_1C2A9DDB8();
        MEMORY[0x1F4188790](v14);
        sub_1C2A9C9C8();

LABEL_10:
        swift_bridgeObjectRelease();
        goto LABEL_11;
      }
    }
    sub_1C2A9E4D8();
    swift_getObjectType();
    sub_1C2A9EA58();
    sub_1C2A9DDB8();
    swift_bridgeObjectRelease();
    uint64_t v13 = sub_1C2A9DDB8();
    MEMORY[0x1F4188790](v13);
    sub_1C2A9C9C8();
    goto LABEL_10;
  }
  MEMORY[0x1F4188790](a1);
  id v3 = a1;
  sub_1C2A9C9C8();
LABEL_11:
  sub_1C296FAA4(a1);
}

id sub_1C296D8A4(void *a1, void *a2)
{
  sub_1C296ECA0((uint64_t)a1, (uint64_t (*)(void))sub_1C296EBC8);
  *a1 = a2;
  sub_1C296EBC8();
  swift_storeEnumTagMultiPayload();
  return a2;
}

uint64_t sub_1C296D910(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  sub_1C296EBC8();
  MEMORY[0x1F4188790](v8);
  double v10 = (uint64_t *)((char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1C296ECA0(a1, (uint64_t (*)(void))sub_1C296EBC8);
  sub_1C296291C();
  uint64_t v11 = swift_allocError();
  *uint64_t v12 = a2;
  v12[1] = a3;
  v12[2] = a4;
  *double v10 = v11;
  swift_storeEnumTagMultiPayload();
  sub_1C296FBD0((uint64_t)v10, a1, (uint64_t (*)(void))sub_1C296EBC8);
  return sub_1C2962970(a2, a3, a4);
}

uint64_t sub_1C296DA1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1C296EBC8();
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (uint64_t *)((char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1C296ECA0(a1, (uint64_t (*)(void))sub_1C296EBC8);
  sub_1C296291C();
  uint64_t v9 = swift_allocError();
  *double v10 = a2;
  v10[1] = a3;
  _OWORD v10[2] = 0x6000000000000000;
  *uint64_t v8 = v9;
  swift_storeEnumTagMultiPayload();
  sub_1C296FBD0((uint64_t)v8, a1, (uint64_t (*)(void))sub_1C296EBC8);
  return swift_bridgeObjectRetain();
}

uint64_t sub_1C296DB18(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v49 = a3;
  id v50 = a2;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  sub_1C296F638(0, (unint64_t *)&qword_1EBB92480, MEMORY[0x1E4F26E60], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v47 - v13;
  sub_1C296F638(0, &qword_1EBB92520, MEMORY[0x1E4F27928], v8);
  MEMORY[0x1F4188790](v15 - 8);
  id v17 = (char *)&v47 - v16;
  uint64_t v18 = sub_1C2A9C6E8();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  id v21 = (char *)&v47 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = type metadata accessor for AudioExposureStatistics(0);
  MEMORY[0x1F4188790](v51);
  id v23 = (char *)&v47 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C296ECA0(a1, (uint64_t (*)(void))sub_1C296EBC8);
  int v24 = *(unsigned __int8 *)(a4 + qword_1EBB8F6A8);
  uint64_t v25 = 1;
  if (v24 == 2) {
    goto LABEL_4;
  }
  if (v24 == 3)
  {
    uint64_t v25 = *MEMORY[0x1E4F29998];
LABEL_4:
    uint64_t v48 = v25;
    uint64_t v54 = a1;
    id v26 = objc_msgSend(a5, sel_mostRecentQuantityDateInterval);
    if (v26)
    {
      id v27 = v26;
      sub_1C2A9C338();

      uint64_t v28 = sub_1C2A9C398();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v11, 0, 1, v28);
    }
    else
    {
      uint64_t v28 = sub_1C2A9C398();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v11, 1, 1, v28);
    }
    sub_1C296FACC((uint64_t)v11, (uint64_t)v14);
    sub_1C2A9C398();
    uint64_t v29 = *(void *)(v28 - 8);
    int v30 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 48))(v14, 1, v28);
    uint64_t v52 = v19;
    uint64_t v53 = v18;
    if (v30 == 1)
    {
      sub_1C296FB60((uint64_t)v14, (unint64_t *)&qword_1EBB92480, MEMORY[0x1E4F26E60]);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(v17, 1, 1, v18);
    }
    else
    {
      sub_1C2A9C348();
      (*(void (**)(char *, uint64_t))(v29 + 8))(v14, v28);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v17, 0, 1, v18);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) != 1)
      {
        (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v21, v17, v18);
        goto LABEL_12;
      }
    }
    id v31 = objc_msgSend(a5, sel_endDate);
    sub_1C2A9C6A8();

    sub_1C296FB60((uint64_t)v17, &qword_1EBB92520, MEMORY[0x1E4F27928]);
LABEL_12:
    unint64_t v32 = v21;
    uint64_t v33 = self;
    id v34 = v49;
    id v35 = v50;
    id v36 = objc_msgSend(v33, sel_decibelAWeightedSoundPressureLevelUnit);
    objc_msgSend(v35, sel_doubleValueForUnit_, v36);
    uint64_t v38 = v37;
    id v39 = objc_msgSend(v36, sel_unitString);
    uint64_t v40 = sub_1C2A9DD28();
    uint64_t v42 = v41;

    id v43 = objc_msgSend(v33, sel_secondUnit);
    objc_msgSend(v34, sel_doubleValueForUnit_, v43);
    uint64_t v45 = v44;

    *(void *)id v23 = v38;
    *((void *)v23 + 1) = v40;
    *((void *)v23 + 2) = v42;
    *((void *)v23 + 3) = v45;
    *((void *)v23 + 4) = v48;
    (*(void (**)(char *, char *, uint64_t))(v52 + 32))(&v23[*(int *)(v51 + 32)], v32, v53);
    sub_1C296FBD0((uint64_t)v23, v54, type metadata accessor for AudioExposureStatistics);
    sub_1C296EBC8();
    return swift_storeEnumTagMultiPayload();
  }
  uint64_t result = sub_1C2A9E628();
  __break(1u);
  return result;
}

void sub_1C296E144(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3 + 16;
  swift_beginAccess();
  id v4 = (void *)MEMORY[0x1C87657D0](v3);
  if (v4)
  {
    id v5 = v4;
    if (objc_msgSend(v4, sel_isCancelled) || (id v6 = objc_msgSend(v5, sel_isFinished), v6))
    {
    }
    else
    {
      MEMORY[0x1F4188790](v6);
      sub_1C2A9CA08();
    }
  }
}

void sub_1C296E224(uint64_t a1)
{
  sub_1C296EBC8();
  MEMORY[0x1F4188790](v2 - 8);
  id v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  id v5 = (void *)MEMORY[0x1C87657D0](a1 + 16);
  if (v5)
  {
    id v6 = v5;
    if ((objc_msgSend(v5, sel_isCancelled) & 1) != 0
      || (objc_msgSend(v6, sel_isFinished) & 1) != 0)
    {
    }
    else
    {
      swift_retain();
      sub_1C2A9C9B8();
      uint64_t v7 = swift_release();
      MEMORY[0x1F4188790](v7);
      *(&v8 - 2) = (uint64_t)v6;
      *(&v8 - 1) = (uint64_t)v4;
      sub_1C2A9CA08();

      sub_1C296ECA0((uint64_t)v4, (uint64_t (*)(void))sub_1C296EBC8);
    }
  }
}

uint64_t sub_1C296E380(uint64_t a1, uint64_t a2)
{
  sub_1C296EBC8();
  MEMORY[0x1F4188790](v3 - 8);
  id v5 = &v7[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1C296F940(a2, (uint64_t)v5, (uint64_t (*)(void))sub_1C296EBC8);
  uint64_t v8 = v5;
  swift_retain();
  sub_1C2A9C9C8();
  swift_release();
  return sub_1C296ECA0((uint64_t)v5, (uint64_t (*)(void))sub_1C296EBC8);
}

uint64_t _s19HealthVisualization23AudioExposureStatisticsV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  if (*(double *)a1 != *(double *)a2) {
    return 0;
  }
  BOOL v4 = *(void *)(a1 + 8) == *(void *)(a2 + 8) && *(void *)(a1 + 16) == *(void *)(a2 + 16);
  if (!v4 && (sub_1C2A9E8D8() & 1) == 0
    || *(double *)(a1 + 24) != *(double *)(a2 + 24)
    || *(void *)(a1 + 32) != *(void *)(a2 + 32))
  {
    return 0;
  }
  type metadata accessor for AudioExposureStatistics(0);
  return sub_1C2A9C698();
}

unint64_t sub_1C296E510()
{
  unint64_t result = qword_1EBB91DA8;
  if (!qword_1EBB91DA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB91DA8);
  }
  return result;
}

void sub_1C296E564(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = sub_1C296E510();
    unint64_t v7 = a3(a1, &type metadata for AudioExposureStatistics.CodingKeys, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t sub_1C296E5C8(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1C2A9C6E8();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1C296E60C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x65756C615671656CLL && a2 == 0xE800000000000000;
  if (v2 || (sub_1C2A9E8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x5374696E5571656CLL && a2 == 0xED0000676E697274 || (sub_1C2A9E8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x4C73646E6F636573 && a2 == 0xEF64656E65747369 || (sub_1C2A9E8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7267674173796164 && a2 == 0xEE00646574616765 || (sub_1C2A9E8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x616470557473616CLL && a2 == 0xEB00000000646574)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = sub_1C2A9E8D8();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

id sub_1C296E8B0(void *a1, void *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  uint64_t v38 = a4;
  uint64_t v39 = a7;
  uint64_t v33 = a5;
  uint64_t v34 = a6;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  sub_1C296EBC8();
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (uint64_t *)((char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  int v37 = *a3;
  uint64_t v36 = *((void *)a3 + 1);
  int v35 = *((unsigned __int16 *)a3 + 8);
  uint64_t v16 = qword_1EBB8F6C0;
  sub_1C2962438();
  uint64_t v17 = swift_allocError();
  *uint64_t v18 = 0;
  *uint64_t v15 = v17;
  swift_storeEnumTagMultiPayload();
  sub_1C296F638(0, &qword_1EBB8E8A0, (uint64_t (*)(uint64_t))sub_1C296EBC8, MEMORY[0x1E4F674D8]);
  swift_allocObject();
  uint64_t v19 = v8;
  *(void *)&v8[v16] = sub_1C2A9C9F8();
  *(void *)&v19[qword_1EBB8F690] = 0;
  *(void *)&v19[qword_1EBB8F698] = 0;
  uint64_t v20 = qword_1EBB9EFE0;
  sub_1C296291C();
  uint64_t v21 = swift_allocError();
  *uint64_t v22 = 0xD00000000000005CLL;
  v22[1] = 0x80000001C2AB69A0;
  _OWORD v22[2] = 0;
  *uint64_t v15 = v21;
  uint64_t v23 = v34;
  swift_storeEnumTagMultiPayload();
  swift_allocObject();
  *(void *)&v19[v20] = sub_1C2A9C9F8();
  uint64_t v24 = v38;
  *(void *)&v19[qword_1EBB8F6B0] = a1;
  *(void *)&v19[qword_1EBB8F6B8] = a2;
  uint64_t v25 = &v19[qword_1EBB8F6A8];
  *uint64_t v25 = v37;
  *((void *)v25 + 1) = v36;
  *((_WORD *)v25 + 8) = v35;
  sub_1C296F9B0(v24, (uint64_t)&v19[qword_1EBB8F6C8]);
  *(void *)&v19[qword_1EBB8F6D0] = v39;
  *(void *)&v19[qword_1EBB8F6A0] = a8;
  id v26 = a1;
  id v27 = a2;
  id v28 = a8;

  v41.receiver = v19;
  v41.super_class = ObjectType;
  id v29 = objc_msgSendSuper2(&v41, sel_init, v33);
  id v30 = v29;
  if (v23)
  {
    id v31 = (void *)sub_1C2A9DCF8();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v31 = 0;
  }
  objc_msgSend(v29, sel_setName_, v31);

  sub_1C296FB60(v24, &qword_1EBB91F38, (uint64_t (*)(uint64_t))type metadata accessor for StatisticsQueryConfigurationOverrides);
  return v29;
}

void sub_1C296EBC8()
{
  if (!qword_1EBB8FA08)
  {
    type metadata accessor for AudioExposureStatistics(255);
    sub_1C29415E4(255, (unint64_t *)&qword_1EBB92210);
    unint64_t v0 = sub_1C2A9E9F8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EBB8FA08);
    }
  }
}

uint64_t sub_1C296EC48(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  sub_1C296ECA0(a1, (uint64_t (*)(void))sub_1C296EBC8);
  return sub_1C296F940(v3, a1, (uint64_t (*)(void))sub_1C296EBC8);
}

uint64_t sub_1C296ECA0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1C296ED00()
{
  uint64_t v1 = sub_1C2A9CF58();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x1F4186498](v0, v5, v6);
}

uint64_t sub_1C296EDCC()
{
  return sub_1C2A9CA08();
}

uint64_t sub_1C296EE5C(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for AudioExposureStatistics(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (void *)(v10 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = a2[2];
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
    uint64_t v5 = *(int *)(a3 + 32);
    uint64_t v6 = a1 + v5;
    uint64_t v7 = (uint64_t)a2 + v5;
    uint64_t v8 = sub_1C2A9C6E8();
    uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16);
    swift_bridgeObjectRetain();
    v9(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for AudioExposureStatistics(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  uint64_t v5 = sub_1C2A9C6E8();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

uint64_t initializeWithCopy for AudioExposureStatistics(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v4 = *(int *)(a3 + 32);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = sub_1C2A9C6E8();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

void *assignWithCopy for AudioExposureStatistics(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  uint64_t v6 = *(int *)(a3 + 32);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_1C2A9C6E8();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for AudioExposureStatistics(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v4 = *(int *)(a3 + 32);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = sub_1C2A9C6E8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void *assignWithTake for AudioExposureStatistics(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = a2[2];
  a1[1] = a2[1];
  a1[2] = v6;
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  uint64_t v7 = *(int *)(a3 + 32);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = sub_1C2A9C6E8();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for AudioExposureStatistics(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C296F284);
}

uint64_t sub_1C296F284(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_1C2A9C6E8();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 32);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for AudioExposureStatistics(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C296F348);
}

uint64_t sub_1C296F348(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 16) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_1C2A9C6E8();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 32);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_1C296F3F0()
{
  uint64_t result = sub_1C2A9C6E8();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for AudioExposureStatisticsQueryOperation(uint64_t a1)
{
  return sub_1C296F4B8(a1, (uint64_t *)&unk_1EBB8F6D8);
}

uint64_t sub_1C296F4B8(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1C296F4F0()
{
  sub_1C296F638(319, &qword_1EBB91F38, (uint64_t (*)(uint64_t))type metadata accessor for StatisticsQueryConfigurationOverrides, MEMORY[0x1E4FBB718]);
  if (v0 <= 0x3F) {
    swift_initClassMetadata2();
  }
}

uint64_t method lookup function for AudioExposureStatisticsQueryOperation(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for AudioExposureStatisticsQueryOperation);
}

uint64_t dispatch thunk of AudioExposureStatisticsQueryOperation.__allocating_init(quantityType:operationQueue:queryConfiguration:queryConfigurationOverrides:name:queryQualityOfService:healthStore:)()
{
  return (*(uint64_t (**)(void))(class metadata base offset for AudioExposureStatisticsQueryOperation + v0 + 80))();
}

void sub_1C296F638(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_1C296F69C()
{
  return type metadata accessor for AudioExposureStatisticsQueryOperation(0);
}

uint64_t getEnumTagSinglePayload for AnchorDate(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for AudioExposureStatistics.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C296F800);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AudioExposureStatistics.CodingKeys()
{
  return &type metadata for AudioExposureStatistics.CodingKeys;
}

unint64_t sub_1C296F83C()
{
  unint64_t result = qword_1EA31DFE0;
  if (!qword_1EA31DFE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA31DFE0);
  }
  return result;
}

unint64_t sub_1C296F894()
{
  unint64_t result = qword_1EBB91DB8;
  if (!qword_1EBB91DB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB91DB8);
  }
  return result;
}

unint64_t sub_1C296F8EC()
{
  unint64_t result = qword_1EBB91DB0;
  if (!qword_1EBB91DB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB91DB0);
  }
  return result;
}

uint64_t sub_1C296F940(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1C296F9A8()
{
  return sub_1C296CF78(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1C296F9B0(uint64_t a1, uint64_t a2)
{
  sub_1C296F638(0, &qword_1EBB91F38, (uint64_t (*)(uint64_t))type metadata accessor for StatisticsQueryConfigurationOverrides, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C296FA44()
{
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x1F4186498](v0, 24, 7);
}

void sub_1C296FA7C(uint64_t a1, char a2)
{
  sub_1C296E144(a1, a2 & 1, v2);
}

void sub_1C296FA88()
{
  sub_1C296D590(*(void **)(v0 + 16), *(unsigned char *)(v0 + 24));
}

uint64_t sub_1C296FA98(uint64_t a1)
{
  return sub_1C296D910(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

void sub_1C296FAA4(id a1)
{
}

uint64_t sub_1C296FAB0(uint64_t a1)
{
  return sub_1C296DA1C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1C296FAB8(uint64_t a1)
{
  return sub_1C296DB18(a1, *(void **)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32), *(void **)(v1 + 40));
}

id sub_1C296FAC4(void *a1)
{
  return sub_1C296D8A4(a1, *(void **)(v1 + 16));
}

uint64_t sub_1C296FACC(uint64_t a1, uint64_t a2)
{
  sub_1C296F638(0, (unint64_t *)&qword_1EBB92480, MEMORY[0x1E4F26E60], MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C296FB60(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  sub_1C296F638(0, a2, a3, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_1C296FBD0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t sub_1C296FC38()
{
  unint64_t result = qword_1EBB92500;
  if (!qword_1EBB92500)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EBB92500);
  }
  return result;
}

void sub_1C296FC78()
{
  sub_1C296E224(v0);
}

uint64_t sub_1C296FC80()
{
  return sub_1C296E380(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t TimeOfDayDistributionChartView.init(distribution:model:)@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  sub_1C297013C(a1, a3, (uint64_t (*)(void))type metadata accessor for TimeBasedDistribution);
  unint64_t v6 = sub_1C2981788(a1, a2);
  sub_1C29701A4(a1, (uint64_t (*)(void))type metadata accessor for TimeBasedDistribution);
  uint64_t v7 = type metadata accessor for TimeOfDayDistributionChartView();
  *(void *)(a3 + *(int *)(v7 + 20)) = v6;
  uint64_t v8 = a3 + *(int *)(v7 + 24);
  return sub_1C29700D8((uint64_t)a2, v8);
}

uint64_t TimeOfDayDistributionChartView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for AFibBurdenTimeOfDayChart();
  uint64_t v5 = (int *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (uint64_t)&v7[v5[8]];
  sub_1C297013C(v2, v8, (uint64_t (*)(void))type metadata accessor for TimeBasedDistribution);
  uint64_t v9 = v2 + *(int *)(type metadata accessor for TimeOfDayDistributionChartView() + 24);
  uint64_t v10 = (unsigned __int8 *)&v7[v5[9]];
  sub_1C297013C(v9, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for TimeBasedDistributionChartModel);
  uint64_t v11 = v9 + *(int *)(type metadata accessor for TimeBasedDistributionChartModel() + 24);
  uint64_t v12 = *(void *)(v11 + *(int *)(type metadata accessor for TimeBasedDistributionChartDesign() + 72));
  *(void *)uint64_t v7 = 0;
  v7[8] = 1;
  *((void *)v7 + 2) = v12;
  v7[24] = 0;
  v7[v5[10]] = 0;
  sub_1C298C8BC(v8, v10, 0, a1);
  return sub_1C29701A4((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for AFibBurdenTimeOfDayChart);
}

uint64_t sub_1C296FE7C@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_1C297013C(a1, a4, (uint64_t (*)(void))type metadata accessor for TimeBasedDistribution);
  unint64_t v8 = sub_1C2981788(a1, a2);
  sub_1C29701A4(a1, (uint64_t (*)(void))type metadata accessor for TimeBasedDistribution);
  uint64_t v9 = *(int *)(a3 + 24);
  *(void *)(a4 + *(int *)(a3 + 20)) = v8;
  return sub_1C29700D8((uint64_t)a2, a4 + v9);
}

uint64_t sub_1C296FF28()
{
  return sub_1C2A9DA58();
}

uint64_t sub_1C296FF44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2;
  uint64_t v6 = type metadata accessor for AFibBurdenTimeOfDayChart();
  uint64_t v7 = (int *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (uint64_t)&v9[v7[8]];
  sub_1C297013C(v4, v10, (uint64_t (*)(void))type metadata accessor for TimeBasedDistribution);
  uint64_t v11 = v4 + *(int *)(a1 + 24);
  uint64_t v12 = (unsigned __int8 *)&v9[v7[9]];
  sub_1C297013C(v11, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for TimeBasedDistributionChartModel);
  uint64_t v13 = v11 + *(int *)(type metadata accessor for TimeBasedDistributionChartModel() + 24);
  uint64_t v14 = *(void *)(v13 + *(int *)(type metadata accessor for TimeBasedDistributionChartDesign() + 72));
  *(void *)uint64_t v9 = 0;
  v9[8] = 1;
  *((void *)v9 + 2) = v14;
  v9[24] = 0;
  v9[v7[10]] = 0;
  sub_1C298C8BC(v10, v12, 0, a2);
  return sub_1C29701A4((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for AFibBurdenTimeOfDayChart);
}

uint64_t type metadata accessor for TimeOfDayDistributionChartView()
{
  uint64_t result = qword_1EA31DFF8;
  if (!qword_1EA31DFF8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1C29700D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TimeBasedDistributionChartModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C297013C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1C29701A4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1C2970204(uint64_t a1)
{
  uint64_t result = sub_1C29737B4(&qword_1EA31DFE8, (void (*)(uint64_t))type metadata accessor for TimeOfDayDistributionChartView);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1C297025C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t dispatch thunk of TimeBasedDistributionChartView.init(distribution:model:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

void *initializeBufferWithCopyOfBuffer for TimeOfDayDistributionChartView(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v27 = *a2;
    *a1 = *a2;
    uint64_t v28 = v27 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_1C2A9C858();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = type metadata accessor for TimeBasedDistribution();
    *(void *)((char *)a1 + *(int *)(v8 + 20)) = *(void *)((char *)a2 + *(int *)(v8 + 20));
    uint64_t v9 = *(int *)(v8 + 24);
    uint64_t v10 = (void *)((char *)a1 + v9);
    uint64_t v11 = (void *)((char *)a2 + v9);
    uint64_t v12 = v11[1];
    *uint64_t v10 = *v11;
    v10[1] = v12;
    uint64_t v13 = *(int *)(a3 + 24);
    *(void *)((char *)a1 + *(int *)(a3 + 20)) = *(void *)((char *)a2 + *(int *)(a3 + 20));
    uint64_t v53 = a1;
    uint64_t v14 = (char *)a1 + v13;
    uint64_t v15 = (char *)a2 + v13;
    *uint64_t v14 = *((unsigned char *)a2 + v13);
    uint64_t v16 = (uint64_t)a1 + v13 + 8;
    long long v17 = *((_OWORD *)v15 + 2);
    *((_OWORD *)v14 + 2) = v17;
    uint64_t v18 = v17;
    uint64_t v19 = **(void (***)(uint64_t, char *, uint64_t))(v17 - 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v19(v16, v15 + 8, v18);
    id v50 = (int *)type metadata accessor for TimeBasedDistributionChartModel();
    uint64_t v51 = v15;
    uint64_t v20 = v50[6];
    uint64_t v52 = v14;
    uint64_t v21 = &v14[v20];
    uint64_t v22 = &v15[v20];
    uint64_t v23 = sub_1C2A9D2E8();
    uint64_t v24 = *(void *)(v23 - 8);
    uint64_t v25 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48);
    if (v25(v22, 1, v23))
    {
      sub_1C2974A84(0, (unint64_t *)&qword_1EA31DFF0, MEMORY[0x1E4F19478], MEMORY[0x1E4FBB718]);
      memcpy(v21, v22, *(void *)(*(void *)(v26 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v21, v22, v23);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
    }
    id v29 = (int *)type metadata accessor for TimeBasedDistributionChartDesign();
    uint64_t v30 = v29[5];
    id v31 = &v21[v30];
    unint64_t v32 = &v22[v30];
    if (v25(&v22[v30], 1, v23))
    {
      sub_1C2974A84(0, (unint64_t *)&qword_1EA31DFF0, MEMORY[0x1E4F19478], MEMORY[0x1E4FBB718]);
      memcpy(v31, v32, *(void *)(*(void *)(v33 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v31, v32, v23);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v31, 0, 1, v23);
    }
    *(void *)&v21[v29[6]] = *(void *)&v22[v29[6]];
    *(void *)&v21[v29[7]] = *(void *)&v22[v29[7]];
    *(void *)&v21[v29[8]] = *(void *)&v22[v29[8]];
    *(void *)&v21[v29[9]] = *(void *)&v22[v29[9]];
    uint64_t v34 = v29[10];
    uint64_t v48 = &v22[v34];
    id v49 = &v21[v34];
    uint64_t v35 = sub_1C2A9D598();
    uint64_t v36 = *(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 16);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v36(v49, v48, v35);
    *(void *)&v21[v29[11]] = *(void *)&v22[v29[11]];
    *(void *)&v21[v29[12]] = *(void *)&v22[v29[12]];
    *(void *)&v21[v29[13]] = *(void *)&v22[v29[13]];
    *(void *)&v21[v29[14]] = *(void *)&v22[v29[14]];
    *(void *)&v21[v29[15]] = *(void *)&v22[v29[15]];
    *(void *)&v21[v29[16]] = *(void *)&v22[v29[16]];
    *(void *)&v21[v29[17]] = *(void *)&v22[v29[17]];
    *(void *)&v21[v29[18]] = *(void *)&v22[v29[18]];
    *(void *)&v21[v29[19]] = *(void *)&v22[v29[19]];
    *(void *)&v21[v29[20]] = *(void *)&v22[v29[20]];
    *(void *)&v21[v29[21]] = *(void *)&v22[v29[21]];
    *(void *)&v21[v29[22]] = *(void *)&v22[v29[22]];
    *(void *)&v21[v29[23]] = *(void *)&v22[v29[23]];
    *(void *)&v21[v29[24]] = *(void *)&v22[v29[24]];
    v21[v29[25]] = v22[v29[25]];
    uint64_t v37 = v50[7];
    uint64_t v38 = &v52[v37];
    uint64_t v39 = &v51[v37];
    long long v40 = *(_OWORD *)&v51[v37 + 24];
    *(_OWORD *)&v52[v37 + 24] = v40;
    uint64_t v41 = v40;
    uint64_t v42 = **(void (***)(char *, char *, uint64_t))(v40 - 8);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v42(v38, v39, v41);
    uint64_t v43 = v50[8];
    uint64_t v44 = &v52[v43];
    uint64_t v45 = &v51[v43];
    uint64_t v46 = sub_1C2A9CFE8();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v46 - 8) + 16))(v44, v45, v46);
    return v53;
  }
  return (void *)v28;
}

uint64_t destroy for TimeOfDayDistributionChartView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1C2A9C858();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  type metadata accessor for TimeBasedDistribution();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = a1 + *(int *)(a2 + 24);
  __swift_destroy_boxed_opaque_existential_1(v5 + 8);
  uint64_t v6 = (int *)type metadata accessor for TimeBasedDistributionChartModel();
  uint64_t v7 = v5 + v6[6];
  uint64_t v8 = sub_1C2A9D2E8();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (!v10(v7, 1, v8)) {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  }
  uint64_t v11 = type metadata accessor for TimeBasedDistributionChartDesign();
  uint64_t v12 = v7 + *(int *)(v11 + 20);
  if (!v10(v12, 1, v8)) {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v12, v8);
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v13 = v7 + *(int *)(v11 + 40);
  uint64_t v14 = sub_1C2A9D598();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v13, v14);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v5 + v6[7]);
  uint64_t v15 = v5 + v6[8];
  uint64_t v16 = sub_1C2A9CFE8();
  long long v17 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8);
  return v17(v15, v16);
}

uint64_t initializeWithCopy for TimeOfDayDistributionChartView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1C2A9C858();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = type metadata accessor for TimeBasedDistribution();
  *(void *)(a1 + *(int *)(v7 + 20)) = *(void *)(a2 + *(int *)(v7 + 20));
  uint64_t v8 = *(int *)(v7 + 24);
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = *(int *)(a3 + 24);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  uint64_t v50 = a1;
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  *(unsigned char *)uint64_t v13 = *(unsigned char *)(a2 + v12);
  uint64_t v15 = a1 + v12 + 8;
  long long v16 = *(_OWORD *)(v14 + 32);
  *(_OWORD *)(v13 + 32) = v16;
  uint64_t v17 = v16;
  uint64_t v18 = **(void (***)(uint64_t, uint64_t, uint64_t))(v16 - 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v18(v15, v14 + 8, v17);
  uint64_t v47 = (int *)type metadata accessor for TimeBasedDistributionChartModel();
  uint64_t v48 = v14;
  uint64_t v19 = v47[6];
  uint64_t v49 = v13;
  uint64_t v20 = (char *)(v13 + v19);
  uint64_t v21 = (char *)(v14 + v19);
  uint64_t v22 = sub_1C2A9D2E8();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48);
  if (v24(v21, 1, v22))
  {
    sub_1C2974A84(0, (unint64_t *)&qword_1EA31DFF0, MEMORY[0x1E4F19478], MEMORY[0x1E4FBB718]);
    memcpy(v20, v21, *(void *)(*(void *)(v25 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v20, v21, v22);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  uint64_t v26 = (int *)type metadata accessor for TimeBasedDistributionChartDesign();
  uint64_t v27 = v26[5];
  uint64_t v28 = &v20[v27];
  id v29 = &v21[v27];
  if (v24(&v21[v27], 1, v22))
  {
    sub_1C2974A84(0, (unint64_t *)&qword_1EA31DFF0, MEMORY[0x1E4F19478], MEMORY[0x1E4FBB718]);
    memcpy(v28, v29, *(void *)(*(void *)(v30 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v28, v29, v22);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v28, 0, 1, v22);
  }
  *(void *)&v20[v26[6]] = *(void *)&v21[v26[6]];
  *(void *)&v20[v26[7]] = *(void *)&v21[v26[7]];
  *(void *)&v20[v26[8]] = *(void *)&v21[v26[8]];
  *(void *)&v20[v26[9]] = *(void *)&v21[v26[9]];
  uint64_t v31 = v26[10];
  uint64_t v45 = &v21[v31];
  uint64_t v46 = &v20[v31];
  uint64_t v32 = sub_1C2A9D598();
  uint64_t v33 = *(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 16);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v33(v46, v45, v32);
  *(void *)&v20[v26[11]] = *(void *)&v21[v26[11]];
  *(void *)&v20[v26[12]] = *(void *)&v21[v26[12]];
  *(void *)&v20[v26[13]] = *(void *)&v21[v26[13]];
  *(void *)&v20[v26[14]] = *(void *)&v21[v26[14]];
  *(void *)&v20[v26[15]] = *(void *)&v21[v26[15]];
  *(void *)&v20[v26[16]] = *(void *)&v21[v26[16]];
  *(void *)&v20[v26[17]] = *(void *)&v21[v26[17]];
  *(void *)&v20[v26[18]] = *(void *)&v21[v26[18]];
  *(void *)&v20[v26[19]] = *(void *)&v21[v26[19]];
  *(void *)&v20[v26[20]] = *(void *)&v21[v26[20]];
  *(void *)&v20[v26[21]] = *(void *)&v21[v26[21]];
  *(void *)&v20[v26[22]] = *(void *)&v21[v26[22]];
  *(void *)&v20[v26[23]] = *(void *)&v21[v26[23]];
  *(void *)&v20[v26[24]] = *(void *)&v21[v26[24]];
  v20[v26[25]] = v21[v26[25]];
  uint64_t v34 = v47[7];
  uint64_t v35 = v49 + v34;
  uint64_t v36 = v48 + v34;
  long long v37 = *(_OWORD *)(v48 + v34 + 24);
  *(_OWORD *)(v49 + v34 + 24) = v37;
  uint64_t v38 = v37;
  uint64_t v39 = **(void (***)(uint64_t, uint64_t, uint64_t))(v37 - 8);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v39(v35, v36, v38);
  uint64_t v40 = v47[8];
  uint64_t v41 = v49 + v40;
  uint64_t v42 = v48 + v40;
  uint64_t v43 = sub_1C2A9CFE8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 16))(v41, v42, v43);
  return v50;
}

uint64_t assignWithCopy for TimeOfDayDistributionChartView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1C2A9C858();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = type metadata accessor for TimeBasedDistribution();
  *(void *)(a1 + *(int *)(v7 + 20)) = *(void *)(a2 + *(int *)(v7 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v8 = *(int *)(v7 + 24);
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  *uint64_t v9 = *v10;
  v9[1] = v10[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v42 = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  *(unsigned char *)uint64_t v12 = *(unsigned char *)v13;
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(v12 + 8), (uint64_t *)(v13 + 8));
  uint64_t v39 = (int *)type metadata accessor for TimeBasedDistributionChartModel();
  uint64_t v40 = v13;
  uint64_t v14 = v39[6];
  uint64_t v41 = v12;
  uint64_t v15 = (char *)(v12 + v14);
  long long v16 = (char *)(v13 + v14);
  uint64_t v17 = sub_1C2A9D2E8();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  int v20 = v19(v15, 1, v17);
  int v21 = v19(v16, 1, v17);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v21)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v15, v17);
LABEL_6:
    sub_1C2974A84(0, (unint64_t *)&qword_1EA31DFF0, MEMORY[0x1E4F19478], MEMORY[0x1E4FBB718]);
    memcpy(v15, v16, *(void *)(*(void *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 24))(v15, v16, v17);
LABEL_7:
  uint64_t v23 = (int *)type metadata accessor for TimeBasedDistributionChartDesign();
  uint64_t v24 = v23[5];
  uint64_t v25 = &v15[v24];
  uint64_t v26 = &v16[v24];
  int v27 = v19(&v15[v24], 1, v17);
  int v28 = v19(v26, 1, v17);
  if (!v27)
  {
    if (!v28)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 24))(v25, v26, v17);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v18 + 8))(v25, v17);
    goto LABEL_12;
  }
  if (v28)
  {
LABEL_12:
    sub_1C2974A84(0, (unint64_t *)&qword_1EA31DFF0, MEMORY[0x1E4F19478], MEMORY[0x1E4FBB718]);
    memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v25, v26, v17);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v25, 0, 1, v17);
LABEL_13:
  *(void *)&v15[v23[6]] = *(void *)&v16[v23[6]];
  swift_retain();
  swift_release();
  *(void *)&v15[v23[7]] = *(void *)&v16[v23[7]];
  swift_retain();
  swift_release();
  *(void *)&v15[v23[8]] = *(void *)&v16[v23[8]];
  swift_retain();
  swift_release();
  *(void *)&v15[v23[9]] = *(void *)&v16[v23[9]];
  swift_retain();
  swift_release();
  uint64_t v30 = v23[10];
  uint64_t v31 = &v15[v30];
  uint64_t v32 = &v16[v30];
  uint64_t v33 = sub_1C2A9D598();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 24))(v31, v32, v33);
  *(void *)&v15[v23[11]] = *(void *)&v16[v23[11]];
  swift_retain();
  swift_release();
  *(void *)&v15[v23[12]] = *(void *)&v16[v23[12]];
  swift_retain();
  swift_release();
  *(void *)&v15[v23[13]] = *(void *)&v16[v23[13]];
  swift_retain();
  swift_release();
  *(void *)&v15[v23[14]] = *(void *)&v16[v23[14]];
  swift_retain();
  swift_release();
  *(void *)&v15[v23[15]] = *(void *)&v16[v23[15]];
  swift_retain();
  swift_release();
  *(void *)&v15[v23[16]] = *(void *)&v16[v23[16]];
  swift_retain();
  swift_release();
  *(void *)&v15[v23[17]] = *(void *)&v16[v23[17]];
  *(void *)&v15[v23[18]] = *(void *)&v16[v23[18]];
  *(void *)&v15[v23[19]] = *(void *)&v16[v23[19]];
  *(void *)&v15[v23[20]] = *(void *)&v16[v23[20]];
  *(void *)&v15[v23[21]] = *(void *)&v16[v23[21]];
  *(void *)&v15[v23[22]] = *(void *)&v16[v23[22]];
  *(void *)&v15[v23[23]] = *(void *)&v16[v23[23]];
  *(void *)&v15[v23[24]] = *(void *)&v16[v23[24]];
  v15[v23[25]] = v16[v23[25]];
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(v41 + v39[7]), (uint64_t *)(v13 + v39[7]));
  uint64_t v34 = v39[8];
  uint64_t v35 = v41 + v34;
  uint64_t v36 = v40 + v34;
  uint64_t v37 = sub_1C2A9CFE8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 24))(v35, v36, v37);
  return v42;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        uint64_t result = (uint64_t *)swift_release();
        *uint64_t v3 = v12;
      }
      else
      {
        uint64_t v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

uint64_t initializeWithTake for TimeOfDayDistributionChartView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1C2A9C858();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = type metadata accessor for TimeBasedDistribution();
  *(void *)(a1 + *(int *)(v7 + 20)) = *(void *)(a2 + *(int *)(v7 + 20));
  *(_OWORD *)(a1 + *(int *)(v7 + 24)) = *(_OWORD *)(a2 + *(int *)(v7 + 24));
  uint64_t v8 = *(int *)(a3 + 24);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  uint64_t v38 = a1;
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  *(unsigned char *)uint64_t v9 = *(unsigned char *)(a2 + v8);
  *(_OWORD *)(v9 + 8) = *(_OWORD *)(a2 + v8 + 8);
  *(_OWORD *)(v9 + 24) = *(_OWORD *)(a2 + v8 + 24);
  *(void *)(v9 + 40) = *(void *)(a2 + v8 + 40);
  uint64_t v36 = (int *)type metadata accessor for TimeBasedDistributionChartModel();
  uint64_t v37 = v9;
  uint64_t v11 = v36[6];
  uint64_t v12 = (char *)(v9 + v11);
  uint64_t v13 = (char *)(v10 + v11);
  uint64_t v14 = sub_1C2A9D2E8();
  uint64_t v15 = *(void *)(v14 - 8);
  long long v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
  if (v16(v13, 1, v14))
  {
    sub_1C2974A84(0, (unint64_t *)&qword_1EA31DFF0, MEMORY[0x1E4F19478], MEMORY[0x1E4FBB718]);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v12, v13, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  uint64_t v18 = (int *)type metadata accessor for TimeBasedDistributionChartDesign();
  uint64_t v19 = v18[5];
  int v20 = &v12[v19];
  int v21 = &v13[v19];
  if (v16(&v13[v19], 1, v14))
  {
    sub_1C2974A84(0, (unint64_t *)&qword_1EA31DFF0, MEMORY[0x1E4F19478], MEMORY[0x1E4FBB718]);
    memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v20, v21, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v20, 0, 1, v14);
  }
  *(void *)&v12[v18[6]] = *(void *)&v13[v18[6]];
  *(void *)&v12[v18[7]] = *(void *)&v13[v18[7]];
  *(void *)&v12[v18[8]] = *(void *)&v13[v18[8]];
  *(void *)&v12[v18[9]] = *(void *)&v13[v18[9]];
  uint64_t v23 = v18[10];
  uint64_t v24 = &v12[v23];
  uint64_t v25 = &v13[v23];
  uint64_t v26 = sub_1C2A9D598();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 32))(v24, v25, v26);
  *(void *)&v12[v18[11]] = *(void *)&v13[v18[11]];
  *(void *)&v12[v18[12]] = *(void *)&v13[v18[12]];
  *(void *)&v12[v18[13]] = *(void *)&v13[v18[13]];
  *(void *)&v12[v18[14]] = *(void *)&v13[v18[14]];
  *(void *)&v12[v18[15]] = *(void *)&v13[v18[15]];
  *(void *)&v12[v18[16]] = *(void *)&v13[v18[16]];
  *(void *)&v12[v18[17]] = *(void *)&v13[v18[17]];
  *(void *)&v12[v18[18]] = *(void *)&v13[v18[18]];
  *(void *)&v12[v18[19]] = *(void *)&v13[v18[19]];
  *(void *)&v12[v18[20]] = *(void *)&v13[v18[20]];
  *(void *)&v12[v18[21]] = *(void *)&v13[v18[21]];
  *(void *)&v12[v18[22]] = *(void *)&v13[v18[22]];
  *(void *)&v12[v18[23]] = *(void *)&v13[v18[23]];
  *(void *)&v12[v18[24]] = *(void *)&v13[v18[24]];
  v12[v18[25]] = v13[v18[25]];
  uint64_t v27 = v36[7];
  uint64_t v28 = v37 + v27;
  uint64_t v29 = v10 + v27;
  *(void *)(v28 + 32) = *(void *)(v29 + 32);
  long long v30 = *(_OWORD *)(v29 + 16);
  *(_OWORD *)uint64_t v28 = *(_OWORD *)v29;
  *(_OWORD *)(v28 + 16) = v30;
  uint64_t v31 = v36[8];
  uint64_t v32 = v37 + v31;
  uint64_t v33 = v10 + v31;
  uint64_t v34 = sub_1C2A9CFE8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 32))(v32, v33, v34);
  return v38;
}

uint64_t assignWithTake for TimeOfDayDistributionChartView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1C2A9C858();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = type metadata accessor for TimeBasedDistribution();
  *(void *)(a1 + *(int *)(v7 + 20)) = *(void *)(a2 + *(int *)(v7 + 20));
  swift_bridgeObjectRelease();
  uint64_t v8 = *(int *)(v7 + 24);
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (uint64_t *)(a2 + v8);
  uint64_t v12 = *v10;
  uint64_t v11 = v10[1];
  *uint64_t v9 = v12;
  v9[1] = v11;
  swift_bridgeObjectRelease();
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRelease();
  uint64_t v13 = *(int *)(a3 + 24);
  uint64_t v48 = a1;
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  *(unsigned char *)uint64_t v14 = *(unsigned char *)(a2 + v13);
  __swift_destroy_boxed_opaque_existential_1(v14 + 8);
  *(_OWORD *)(v14 + 8) = *(_OWORD *)(v15 + 8);
  *(_OWORD *)(v14 + 24) = *(_OWORD *)(v15 + 24);
  *(void *)(v14 + 40) = *(void *)(v15 + 40);
  uint64_t v45 = (int *)type metadata accessor for TimeBasedDistributionChartModel();
  uint64_t v46 = v15;
  uint64_t v16 = v45[6];
  uint64_t v47 = v14;
  uint64_t v17 = (char *)(v14 + v16);
  uint64_t v18 = (char *)(v15 + v16);
  uint64_t v19 = sub_1C2A9D2E8();
  uint64_t v20 = *(void *)(v19 - 8);
  int v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
  int v22 = v21(v17, 1, v19);
  int v23 = v21(v18, 1, v19);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v23)
  {
    (*(void (**)(char *, uint64_t))(v20 + 8))(v17, v19);
LABEL_6:
    sub_1C2974A84(0, (unint64_t *)&qword_1EA31DFF0, MEMORY[0x1E4F19478], MEMORY[0x1E4FBB718]);
    memcpy(v17, v18, *(void *)(*(void *)(v24 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v20 + 40))(v17, v18, v19);
LABEL_7:
  uint64_t v25 = (int *)type metadata accessor for TimeBasedDistributionChartDesign();
  uint64_t v26 = v25[5];
  uint64_t v27 = &v17[v26];
  uint64_t v28 = &v18[v26];
  int v29 = v21(&v17[v26], 1, v19);
  int v30 = v21(v28, 1, v19);
  if (!v29)
  {
    if (!v30)
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 40))(v27, v28, v19);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v20 + 8))(v27, v19);
    goto LABEL_12;
  }
  if (v30)
  {
LABEL_12:
    sub_1C2974A84(0, (unint64_t *)&qword_1EA31DFF0, MEMORY[0x1E4F19478], MEMORY[0x1E4FBB718]);
    memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v27, v28, v19);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v27, 0, 1, v19);
LABEL_13:
  *(void *)&v17[v25[6]] = *(void *)&v18[v25[6]];
  swift_release();
  *(void *)&v17[v25[7]] = *(void *)&v18[v25[7]];
  swift_release();
  *(void *)&v17[v25[8]] = *(void *)&v18[v25[8]];
  swift_release();
  *(void *)&v17[v25[9]] = *(void *)&v18[v25[9]];
  swift_release();
  uint64_t v32 = v25[10];
  uint64_t v33 = &v17[v32];
  uint64_t v34 = &v18[v32];
  uint64_t v35 = sub_1C2A9D598();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 40))(v33, v34, v35);
  *(void *)&v17[v25[11]] = *(void *)&v18[v25[11]];
  swift_release();
  *(void *)&v17[v25[12]] = *(void *)&v18[v25[12]];
  swift_release();
  *(void *)&v17[v25[13]] = *(void *)&v18[v25[13]];
  swift_release();
  *(void *)&v17[v25[14]] = *(void *)&v18[v25[14]];
  swift_release();
  *(void *)&v17[v25[15]] = *(void *)&v18[v25[15]];
  swift_release();
  *(void *)&v17[v25[16]] = *(void *)&v18[v25[16]];
  swift_release();
  *(void *)&v17[v25[17]] = *(void *)&v18[v25[17]];
  *(void *)&v17[v25[18]] = *(void *)&v18[v25[18]];
  *(void *)&v17[v25[19]] = *(void *)&v18[v25[19]];
  *(void *)&v17[v25[20]] = *(void *)&v18[v25[20]];
  *(void *)&v17[v25[21]] = *(void *)&v18[v25[21]];
  *(void *)&v17[v25[22]] = *(void *)&v18[v25[22]];
  *(void *)&v17[v25[23]] = *(void *)&v18[v25[23]];
  *(void *)&v17[v25[24]] = *(void *)&v18[v25[24]];
  v17[v25[25]] = v18[v25[25]];
  uint64_t v36 = v45[7];
  uint64_t v37 = v47 + v36;
  uint64_t v38 = v15 + v36;
  __swift_destroy_boxed_opaque_existential_1(v47 + v36);
  long long v39 = *(_OWORD *)(v38 + 16);
  *(_OWORD *)uint64_t v37 = *(_OWORD *)v38;
  *(_OWORD *)(v37 + 16) = v39;
  *(void *)(v37 + 32) = *(void *)(v38 + 32);
  uint64_t v40 = v45[8];
  uint64_t v41 = v47 + v40;
  uint64_t v42 = v46 + v40;
  uint64_t v43 = sub_1C2A9CFE8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 40))(v41, v42, v43);
  return v48;
}

uint64_t getEnumTagSinglePayload for TimeOfDayDistributionChartView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C29722A0);
}

uint64_t sub_1C29722A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TimeBasedDistribution();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else if (a2 == 0x7FFFFFFF)
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
  else
  {
    uint64_t v11 = type metadata accessor for TimeBasedDistributionChartModel();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a3 + 24);
    return v12(v14, a2, v13);
  }
}

uint64_t storeEnumTagSinglePayload for TimeOfDayDistributionChartView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C29723E0);
}

uint64_t sub_1C29723E0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for TimeBasedDistribution();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  else
  {
    uint64_t v11 = type metadata accessor for TimeBasedDistributionChartModel();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a4 + 24);
    return v12(v14, a2, a2, v13);
  }
  return result;
}

uint64_t sub_1C297250C()
{
  uint64_t result = type metadata accessor for TimeBasedDistribution();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for TimeBasedDistributionChartModel();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

unint64_t sub_1C29725E4()
{
  unint64_t result = qword_1EA31E008;
  if (!qword_1EA31E008)
  {
    sub_1C2972850();
    sub_1C2972B34();
    sub_1C2974A28(255);
    sub_1C2972CFC();
    unint64_t v1 = (uint64_t (*)(void, uint64_t, uint64_t))MEMORY[0x1E4FBB010];
    sub_1C2974944(255, (unint64_t *)&qword_1EBB92800, MEMORY[0x1E4FBB3D0], MEMORY[0x1E4FBB3F8], MEMORY[0x1E4FBB010]);
    sub_1C2972E54();
    sub_1C2974944(255, &qword_1EA31E178, MEMORY[0x1E4FBB550], MEMORY[0x1E4FBB568], v1);
    sub_1C2972F30();
    sub_1C2972FD4();
    sub_1C2973AB4();
    sub_1C29745C0();
    sub_1C2974718();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    sub_1C29748B0();
    swift_getOpaqueTypeConformance2();
    sub_1C2974994();
    swift_getOpaqueTypeConformance2();
    sub_1C297368C(&qword_1EA31E198, sub_1C2974A28, (void (*)(void))sub_1C2974A50);
    swift_getOpaqueTypeConformance2();
    sub_1C2974AE8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA31E008);
  }
  return result;
}

void sub_1C2972850()
{
  if (!qword_1EA31E010)
  {
    sub_1C29728E8();
    sub_1C2974A84(255, &qword_1EBB8E7F0, MEMORY[0x1E4F3CBF0], MEMORY[0x1E4F3DF18]);
    unint64_t v0 = sub_1C2A9D5B8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EA31E010);
    }
  }
}

void sub_1C29728E8()
{
  if (!qword_1EA31E018)
  {
    sub_1C2972B34();
    sub_1C2974A28(255);
    sub_1C2972CFC();
    unint64_t v0 = (uint64_t (*)(void, uint64_t, uint64_t))MEMORY[0x1E4FBB010];
    sub_1C2974944(255, (unint64_t *)&qword_1EBB92800, MEMORY[0x1E4FBB3D0], MEMORY[0x1E4FBB3F8], MEMORY[0x1E4FBB010]);
    sub_1C2972E54();
    sub_1C2974944(255, &qword_1EA31E178, MEMORY[0x1E4FBB550], MEMORY[0x1E4FBB568], v0);
    sub_1C2972F30();
    sub_1C2972FD4();
    sub_1C2973AB4();
    sub_1C29745C0();
    sub_1C2974718();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    sub_1C29748B0();
    swift_getOpaqueTypeConformance2();
    sub_1C2974994();
    swift_getOpaqueTypeConformance2();
    sub_1C297368C(&qword_1EA31E198, sub_1C2974A28, (void (*)(void))sub_1C2974A50);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v2) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_1EA31E018);
    }
  }
}

void sub_1C2972B34()
{
  if (!qword_1EA31E020)
  {
    sub_1C2972CFC();
    unint64_t v0 = (uint64_t (*)(void, uint64_t, uint64_t))MEMORY[0x1E4FBB010];
    sub_1C2974944(255, (unint64_t *)&qword_1EBB92800, MEMORY[0x1E4FBB3D0], MEMORY[0x1E4FBB3F8], MEMORY[0x1E4FBB010]);
    sub_1C2972E54();
    sub_1C2974944(255, &qword_1EA31E178, MEMORY[0x1E4FBB550], MEMORY[0x1E4FBB568], v0);
    sub_1C2972F30();
    sub_1C2972FD4();
    sub_1C2973AB4();
    sub_1C29745C0();
    sub_1C2974718();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    sub_1C29748B0();
    swift_getOpaqueTypeConformance2();
    sub_1C2974994();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v2) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_1EA31E020);
    }
  }
}

void sub_1C2972CFC()
{
  if (!qword_1EA31E028)
  {
    sub_1C2972E54();
    sub_1C2974944(255, &qword_1EA31E178, MEMORY[0x1E4FBB550], MEMORY[0x1E4FBB568], MEMORY[0x1E4FBB010]);
    sub_1C2972F30();
    sub_1C2972FD4();
    sub_1C2973AB4();
    sub_1C29745C0();
    sub_1C2974718();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    sub_1C29748B0();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_1EA31E028);
    }
  }
}

void sub_1C2972E54()
{
  if (!qword_1EA31E030)
  {
    sub_1C2972F30();
    sub_1C2972FD4();
    sub_1C2973AB4();
    sub_1C29745C0();
    sub_1C2974718();
    swift_getOpaqueTypeConformance2();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_1EA31E030);
    }
  }
}

void sub_1C2972F30()
{
  if (!qword_1EA31E038)
  {
    sub_1C2972FD4();
    sub_1C2973AB4();
    sub_1C29745C0();
    sub_1C2974718();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_1EA31E038);
    }
  }
}

void sub_1C2972FD4()
{
  if (!qword_1EA31E040)
  {
    sub_1C297303C();
    sub_1C2A9D838();
    unint64_t v0 = sub_1C2A9D5B8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EA31E040);
    }
  }
}

void sub_1C297303C()
{
  if (!qword_1EA31E048)
  {
    sub_1C2973140();
    sub_1C2973A20();
    sub_1C29737B4(&qword_1EA31E0C0, (void (*)(uint64_t))sub_1C2973140);
    sub_1C29737B4(&qword_1EBB8E838, (void (*)(uint64_t))sub_1C2973A20);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_1EA31E048);
    }
  }
}

void sub_1C2973140()
{
  if (!qword_1EA31E050)
  {
    sub_1C29731A4();
    sub_1C2973884();
    unint64_t v0 = sub_1C2A9D278();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EA31E050);
    }
  }
}

void sub_1C29731A4()
{
  if (!qword_1EA31E058)
  {
    sub_1C2974A84(255, &qword_1EA31E060, type metadata accessor for TimeBasedDistributionChartPoint.TimeOfDay, MEMORY[0x1E4FBB320]);
    sub_1C297326C();
    sub_1C29737FC();
    unint64_t v0 = sub_1C2A9DB98();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EA31E058);
    }
  }
}

void sub_1C297326C()
{
  if (!qword_1EA31E068)
  {
    sub_1C29733EC();
    sub_1C29734E4(255);
    sub_1C297404C(255, (unint64_t *)&qword_1EA31E078, MEMORY[0x1E4F19438]);
    sub_1C2A9D298();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    sub_1C297368C(&qword_1EA31E090, sub_1C29734E4, (void (*)(void))sub_1C2973650);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_1EA31E068);
    }
  }
}

void sub_1C29733EC()
{
  if (!qword_1EA31E070)
  {
    sub_1C297404C(255, (unint64_t *)&qword_1EA31E078, MEMORY[0x1E4F19438]);
    sub_1C2A9D298();
    swift_getOpaqueTypeConformance2();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_1EA31E070);
    }
  }
}

void sub_1C29734E4(uint64_t a1)
{
}

void sub_1C297350C(uint64_t a1)
{
}

void sub_1C2973534(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_1C2A9D5B8();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_1C2973598()
{
  if (!qword_1EBB8E7A8)
  {
    sub_1C29735F8();
    unint64_t v0 = sub_1C2A9D5B8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EBB8E7A8);
    }
  }
}

void sub_1C29735F8()
{
  if (!qword_1EBB8E7E0)
  {
    unint64_t v0 = sub_1C2A9D828();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EBB8E7E0);
    }
  }
}

uint64_t sub_1C2973650()
{
  return sub_1C297368C(&qword_1EA31E098, sub_1C297350C, (void (*)(void))sub_1C297370C);
}

uint64_t sub_1C297368C(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1C297370C()
{
  unint64_t result = qword_1EA31E0A0;
  if (!qword_1EA31E0A0)
  {
    sub_1C2973598();
    sub_1C29737B4(&qword_1EA31E0A8, (void (*)(uint64_t))sub_1C29735F8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA31E0A0);
  }
  return result;
}

uint64_t sub_1C29737B4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1C29737FC()
{
  unint64_t result = qword_1EA31E0B0;
  if (!qword_1EA31E0B0)
  {
    sub_1C2974A84(255, &qword_1EA31E060, type metadata accessor for TimeBasedDistributionChartPoint.TimeOfDay, MEMORY[0x1E4FBB320]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA31E0B0);
  }
  return result;
}

unint64_t sub_1C2973884()
{
  unint64_t result = qword_1EA31E0B8;
  if (!qword_1EA31E0B8)
  {
    sub_1C29731A4();
    sub_1C29733EC();
    sub_1C29734E4(255);
    sub_1C297404C(255, (unint64_t *)&qword_1EA31E078, MEMORY[0x1E4F19438]);
    sub_1C2A9D298();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    sub_1C297368C(&qword_1EA31E090, sub_1C29734E4, (void (*)(void))sub_1C2973650);
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA31E0B8);
  }
  return result;
}

void sub_1C2973A20()
{
  if (!qword_1EBB8E840)
  {
    sub_1C2A9D598();
    sub_1C29737B4(&qword_1EBB8E790, MEMORY[0x1E4F3CB98]);
    unint64_t v0 = sub_1C2A9E6B8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EBB8E840);
    }
  }
}

void sub_1C2973AB4()
{
  if (!qword_1EA31E0C8)
  {
    sub_1C2973B8C(255, &qword_1EA31E0D0, &qword_1EA31E0D8, (uint64_t (*)(uint64_t))sub_1C2973C14, (void (*)(void))sub_1C2973E58);
    sub_1C2973B8C(255, &qword_1EA31E108, &qword_1EA31E110, (uint64_t (*)(uint64_t))sub_1C2973FA0, (void (*)(void))sub_1C297439C);
    unint64_t v0 = sub_1C2A9D1E8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EA31E0C8);
    }
  }
}

void sub_1C2973B8C(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(uint64_t), void (*a5)(void))
{
  if (!*a2)
  {
    sub_1C2974A84(255, a3, a4, MEMORY[0x1E4FBB718]);
    a5();
    unint64_t v7 = sub_1C2A9D368();
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

void sub_1C2973C14()
{
  if (!qword_1EA31E0E0)
  {
    sub_1C2973D10();
    sub_1C2974944(255, &qword_1EA31E0F0, MEMORY[0x1E4F3E2F8], MEMORY[0x1E4F3E2E8], MEMORY[0x1E4F19370]);
    sub_1C2973DD4();
    swift_getOpaqueTypeConformance2();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_1EA31E0E0);
    }
  }
}

void sub_1C2973D10()
{
  if (!qword_1EA31E0E8)
  {
    sub_1C2974944(255, &qword_1EA31E0F0, MEMORY[0x1E4F3E2F8], MEMORY[0x1E4F3E2E8], MEMORY[0x1E4F19370]);
    sub_1C2973DD4();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_1EA31E0E8);
    }
  }
}

unint64_t sub_1C2973DD4()
{
  unint64_t result = qword_1EA31E0F8;
  if (!qword_1EA31E0F8)
  {
    sub_1C2974944(255, &qword_1EA31E0F0, MEMORY[0x1E4F3E2F8], MEMORY[0x1E4F3E2E8], MEMORY[0x1E4F19370]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA31E0F8);
  }
  return result;
}

unint64_t sub_1C2973E58()
{
  unint64_t result = qword_1EA31E100;
  if (!qword_1EA31E100)
  {
    sub_1C2974A84(255, &qword_1EA31E0D8, (uint64_t (*)(uint64_t))sub_1C2973C14, MEMORY[0x1E4FBB718]);
    sub_1C2973D10();
    sub_1C2974944(255, &qword_1EA31E0F0, MEMORY[0x1E4F3E2F8], MEMORY[0x1E4F3E2E8], MEMORY[0x1E4F19370]);
    sub_1C2973DD4();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA31E100);
  }
  return result;
}

void sub_1C2973FA0()
{
  if (!qword_1EA31E118)
  {
    sub_1C297404C(255, &qword_1EA31E120, MEMORY[0x1E4F19478]);
    sub_1C29740C4();
    unint64_t v0 = sub_1C2A9D038();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EA31E118);
    }
  }
}

void sub_1C297404C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v5) {
      atomic_store(OpaqueTypeMetadata2, a2);
    }
  }
}

void sub_1C29740C4()
{
  if (!qword_1EA31E128)
  {
    sub_1C29741F0();
    sub_1C29742EC();
    sub_1C2974944(255, &qword_1EA31E0F0, MEMORY[0x1E4F3E2F8], MEMORY[0x1E4F3E2E8], MEMORY[0x1E4F19370]);
    sub_1C2973DD4();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_1EA31E128);
    }
  }
}

void sub_1C29741F0()
{
  if (!qword_1EA31E130)
  {
    sub_1C29742EC();
    sub_1C2974944(255, &qword_1EA31E0F0, MEMORY[0x1E4F3E2F8], MEMORY[0x1E4F3E2E8], MEMORY[0x1E4F19370]);
    sub_1C2973DD4();
    swift_getOpaqueTypeConformance2();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_1EA31E130);
    }
  }
}

void sub_1C29742EC()
{
  if (!qword_1EA31E138)
  {
    sub_1C2974944(255, &qword_1EA31E0F0, MEMORY[0x1E4F3E2F8], MEMORY[0x1E4F3E2E8], MEMORY[0x1E4F19370]);
    sub_1C2973DD4();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_1EA31E138);
    }
  }
}

unint64_t sub_1C297439C()
{
  unint64_t result = qword_1EA31E140;
  if (!qword_1EA31E140)
  {
    sub_1C2974A84(255, &qword_1EA31E110, (uint64_t (*)(uint64_t))sub_1C2973FA0, MEMORY[0x1E4FBB718]);
    sub_1C297443C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA31E140);
  }
  return result;
}

unint64_t sub_1C297443C()
{
  unint64_t result = qword_1EA31E148;
  if (!qword_1EA31E148)
  {
    sub_1C2973FA0();
    sub_1C2A9D2E8();
    swift_getOpaqueTypeConformance2();
    sub_1C29741F0();
    sub_1C29742EC();
    sub_1C2974944(255, &qword_1EA31E0F0, MEMORY[0x1E4F3E2F8], MEMORY[0x1E4F3E2E8], MEMORY[0x1E4F19370]);
    sub_1C2973DD4();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA31E148);
  }
  return result;
}

unint64_t sub_1C29745C0()
{
  unint64_t result = qword_1EA31E150;
  if (!qword_1EA31E150)
  {
    sub_1C2972FD4();
    sub_1C2973140();
    sub_1C2973A20();
    sub_1C29737B4(&qword_1EA31E0C0, (void (*)(uint64_t))sub_1C2973140);
    sub_1C29737B4(&qword_1EBB8E838, (void (*)(uint64_t))sub_1C2973A20);
    swift_getOpaqueTypeConformance2();
    sub_1C29737B4(&qword_1EA31E158, MEMORY[0x1E4F3DF60]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA31E150);
  }
  return result;
}

unint64_t sub_1C2974718()
{
  unint64_t result = qword_1EA31E160;
  if (!qword_1EA31E160)
  {
    sub_1C2973AB4();
    sub_1C2974790();
    sub_1C2974820();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA31E160);
  }
  return result;
}

unint64_t sub_1C2974790()
{
  unint64_t result = qword_1EA31E168;
  if (!qword_1EA31E168)
  {
    sub_1C2973B8C(255, &qword_1EA31E0D0, &qword_1EA31E0D8, (uint64_t (*)(uint64_t))sub_1C2973C14, (void (*)(void))sub_1C2973E58);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA31E168);
  }
  return result;
}

unint64_t sub_1C2974820()
{
  unint64_t result = qword_1EA31E170;
  if (!qword_1EA31E170)
  {
    sub_1C2973B8C(255, &qword_1EA31E108, &qword_1EA31E110, (uint64_t (*)(uint64_t))sub_1C2973FA0, (void (*)(void))sub_1C297439C);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA31E170);
  }
  return result;
}

unint64_t sub_1C29748B0()
{
  unint64_t result = qword_1EA31E180;
  if (!qword_1EA31E180)
  {
    sub_1C2974944(255, &qword_1EA31E178, MEMORY[0x1E4FBB550], MEMORY[0x1E4FBB568], MEMORY[0x1E4FBB010]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA31E180);
  }
  return result;
}

void sub_1C2974944(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

unint64_t sub_1C2974994()
{
  unint64_t result = qword_1EA31E188;
  if (!qword_1EA31E188)
  {
    sub_1C2974944(255, (unint64_t *)&qword_1EBB92800, MEMORY[0x1E4FBB3D0], MEMORY[0x1E4FBB3F8], MEMORY[0x1E4FBB010]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA31E188);
  }
  return result;
}

void sub_1C2974A28(uint64_t a1)
{
}

uint64_t sub_1C2974A50()
{
  return sub_1C29737B4(&qword_1EA31E1A0, MEMORY[0x1E4F19398]);
}

void sub_1C2974A84(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

unint64_t sub_1C2974AE8()
{
  unint64_t result = qword_1EBB8E7E8;
  if (!qword_1EBB8E7E8)
  {
    sub_1C2974A84(255, &qword_1EBB8E7F0, MEMORY[0x1E4F3CBF0], MEMORY[0x1E4F3DF18]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB8E7E8);
  }
  return result;
}

HealthVisualization::StatisticsQueryConfiguration __swiftcall StatisticsQueryConfiguration.init(dateRange:statisticsOptions:anchorDate:aggregationInterval:)(HealthVisualization::DateRange dateRange, Swift::OpaquePointer statisticsOptions, HealthVisualization::AnchorDate anchorDate, HealthVisualization::StatisticsInterval aggregationInterval)
{
  char v5 = *(unsigned char *)anchorDate;
  *(unsigned char *)uint64_t v4 = dateRange;
  *(Swift::OpaquePointer *)(v4 + 8) = statisticsOptions;
  *(unsigned char *)(v4 + 16) = v5;
  *(unsigned char *)(v4 + 17) = aggregationInterval;
  result.statisticsOptions = statisticsOptions;
  result.anchorDate = anchorDate;
  result.dateRange = dateRange;
  return result;
}

uint64_t StatisticsQueryConfiguration.dateRange.getter()
{
  return *v0;
}

void StatisticsQueryConfiguration.anchorDate.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 16);
}

uint64_t StatisticsQueryConfiguration.aggregationInterval.getter()
{
  return *(unsigned __int8 *)(v0 + 17);
}

unint64_t sub_1C2974BA8()
{
  unint64_t result = 0x676E615265746164;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0xD000000000000011;
      break;
    case 2:
      unint64_t result = 0x6144726F68636E61;
      break;
    case 3:
      unint64_t result = 0xD000000000000013;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1C2974C4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1C297597C(a1, a2);
  *a3 = result;
  return result;
}

void sub_1C2974C74(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_1C2974C80(uint64_t a1)
{
  unint64_t v2 = sub_1C2975330();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1C2974CBC(uint64_t a1)
{
  unint64_t v2 = sub_1C2975330();
  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t StatisticsQueryConfiguration.encode(to:)(void *a1)
{
  sub_1C2975484(0, &qword_1EBB8F9A8, MEMORY[0x1E4FBBDE0]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  unint64_t v8 = (char *)&v14 - v7;
  char v9 = *v1;
  uint64_t v17 = *((void *)v1 + 1);
  int v10 = v1[16];
  int v15 = v1[17];
  int v16 = v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1C2975330();
  sub_1C2A9EA18();
  char v25 = v9;
  char v24 = 0;
  sub_1C295677C();
  sub_1C2A9E868();
  if (!v2)
  {
    char v11 = v15;
    char v12 = v16;
    uint64_t v18 = v17;
    char v23 = 1;
    sub_1C2975384();
    sub_1C29754E8(&qword_1EBB8F7A8, (void (*)(void))sub_1C29753DC);
    sub_1C2A9E868();
    char v22 = v12;
    char v21 = 2;
    sub_1C2966ED4();
    sub_1C2A9E868();
    char v20 = v11;
    char v19 = 3;
    sub_1C2975430();
    sub_1C2A9E868();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t StatisticsQueryConfiguration.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1C2975484(0, &qword_1EBB92190, MEMORY[0x1E4FBBDC0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  char v9 = (char *)&v14 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1C2975330();
  sub_1C2A9EA08();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  char v21 = 0;
  sub_1C2956834();
  sub_1C2A9E7A8();
  char v10 = v22;
  sub_1C2975384();
  char v20 = 1;
  sub_1C29754E8(&qword_1EBB92090, (void (*)(void))sub_1C2975554);
  sub_1C2A9E7A8();
  uint64_t v11 = v15;
  char v18 = 2;
  sub_1C29671CC();
  swift_bridgeObjectRetain();
  sub_1C2A9E7A8();
  HIDWORD(v14) = v19;
  char v16 = 3;
  sub_1C29755A8();
  sub_1C2A9E7A8();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  char v13 = v17;
  *(unsigned char *)a2 = v10;
  *(void *)(a2 + 8) = v11;
  *(unsigned char *)(a2 + 16) = BYTE4(v14);
  *(unsigned char *)(a2 + 17) = v13;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C2975258@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return StatisticsQueryConfiguration.init(from:)(a1, a2);
}

uint64_t sub_1C2975270(void *a1)
{
  return StatisticsQueryConfiguration.encode(to:)(a1);
}

uint64_t _s19HealthVisualization28StatisticsQueryConfigurationV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  unsigned __int8 v3 = *(unsigned char *)(a1 + 16);
  unsigned __int8 v4 = *(unsigned char *)(a1 + 17);
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  char v7 = *(unsigned char *)(a2 + 17);
  if ((sub_1C29544B0(*(unsigned char *)a1, *(unsigned char *)a2) & 1) == 0
    || (sub_1C2963A48(v2, v5) & 1) == 0
    || (sub_1C29546FC(v3, v6) & 1) == 0)
  {
    return 0;
  }
  return sub_1C2954904(v4, v7);
}

unint64_t sub_1C2975330()
{
  unint64_t result = qword_1EBB91E18;
  if (!qword_1EBB91E18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB91E18);
  }
  return result;
}

void sub_1C2975384()
{
  if (!qword_1EBB92088)
  {
    unint64_t v0 = sub_1C2A9DEF8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EBB92088);
    }
  }
}

unint64_t sub_1C29753DC()
{
  unint64_t result = qword_1EBB912F0;
  if (!qword_1EBB912F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB912F0);
  }
  return result;
}

unint64_t sub_1C2975430()
{
  unint64_t result = qword_1EBB8EB78;
  if (!qword_1EBB8EB78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB8EB78);
  }
  return result;
}

void sub_1C2975484(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = sub_1C2975330();
    unint64_t v7 = a3(a1, &type metadata for StatisticsQueryConfiguration.CodingKeys, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t sub_1C29754E8(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1C2975384();
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1C2975554()
{
  unint64_t result = qword_1EBB927C0;
  if (!qword_1EBB927C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB927C0);
  }
  return result;
}

unint64_t sub_1C29755A8()
{
  unint64_t result = qword_1EBB91CB8;
  if (!qword_1EBB91CB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB91CB8);
  }
  return result;
}

uint64_t sub_1C2975600(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for StatisticsQueryConfiguration(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  return a1;
}

uint64_t assignWithTake for StatisticsQueryConfiguration(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for StatisticsQueryConfiguration(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 18)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for StatisticsQueryConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_WORD *)(result + 16) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 18) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 18) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for StatisticsQueryConfiguration.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C297583CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for StatisticsQueryConfiguration.CodingKeys()
{
  return &type metadata for StatisticsQueryConfiguration.CodingKeys;
}

unint64_t sub_1C2975878()
{
  unint64_t result = qword_1EA31E1A8;
  if (!qword_1EA31E1A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA31E1A8);
  }
  return result;
}

unint64_t sub_1C29758D0()
{
  unint64_t result = qword_1EBB91E28;
  if (!qword_1EBB91E28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB91E28);
  }
  return result;
}

unint64_t sub_1C2975928()
{
  unint64_t result = qword_1EBB91E20;
  if (!qword_1EBB91E20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB91E20);
  }
  return result;
}

uint64_t sub_1C297597C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x676E615265746164 && a2 == 0xE900000000000065;
  if (v2 || (sub_1C2A9E8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001C2AB6A00 || (sub_1C2A9E8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6144726F68636E61 && a2 == 0xEA00000000006574 || (sub_1C2A9E8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001C2AB6A20)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = sub_1C2A9E8D8();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

id static MostRecentTimePeriodQuerySupport.predicateForAllSamples(dateInterval:additionalPredicate:)(uint64_t a1, void *a2)
{
  sub_1C293BDB0(0, (unint64_t *)&qword_1EBB91978, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1C2AA7730;
  unsigned int v4 = self;
  uint64_t v5 = (void *)sub_1C2A9C318();
  id v6 = objc_msgSend(v4, sel_predicateForSamplesWithinDateInterval_options_, v5, 0);

  *(void *)(v3 + 32) = v6;
  sub_1C2A9DEA8();
  if (a2)
  {
    id v7 = a2;
    MEMORY[0x1C8763D10]();
    if (*(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      sub_1C2A9DEB8();
    }
    sub_1C2A9DEE8();
    sub_1C2A9DEA8();
  }
  sub_1C29376D4(0, (unint64_t *)&qword_1EBB8E090);
  uint64_t v8 = (void *)sub_1C2A9DE88();
  swift_bridgeObjectRelease();
  id v9 = objc_msgSend(self, sel_andPredicateWithSubpredicates_, v8);

  return v9;
}

uint64_t static MostRecentTimePeriodQuerySupport.sortDescriptorsForSamples.getter()
{
  sub_1C293BDB0(0, (unint64_t *)&qword_1EBB91978, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1C2AA7730;
  sub_1C29376D4(0, &qword_1EBB92118);
  swift_getKeyPath();
  *(void *)(v0 + 32) = sub_1C2A9E138();
  sub_1C2A9DEA8();
  return v0;
}

double static MostRecentTimePeriodQuerySupport.totalDuration(for:referenceSample:)(unint64_t a1, void *a2)
{
  uint64_t v4 = sub_1C2A9CFE8();
  uint64_t v50 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v5 = sub_1C2A9C6E8();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = sub_1C2A9C398();
  uint64_t v9 = *(void *)(v51 - 8);
  MEMORY[0x1F4188790](v51);
  uint64_t v11 = (char *)v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)v48 - v13;
  if (a1 >> 62)
  {
    uint64_t v49 = (char *)v48 - v13;
    swift_bridgeObjectRetain();
    uint64_t v47 = sub_1C2A9E648();
    swift_bridgeObjectRelease();
    uint64_t v14 = v49;
    double v15 = 0.0;
    if (!v47) {
      return v15;
    }
LABEL_3:
    char v16 = v14;
    sub_1C2978320(a2, (uint64_t)v14);
    uint64_t v50 = v9;
    char v17 = self;
    sub_1C29376D4(0, &qword_1EBB927D8);
    char v18 = (void *)sub_1C2A9DE88();
    sub_1C2A9C378();
    unsigned __int8 v19 = (void *)sub_1C2A9C658();
    char v20 = *(void (**)(char *, uint64_t))(v6 + 8);
    v20(v8, v5);
    uint64_t v49 = v16;
    sub_1C2A9C348();
    char v21 = (void *)sub_1C2A9C658();
    v20(v8, v5);
    id v22 = objc_msgSend(v17, sel_coalesceTimePeriodsFromSamples_strictStartDate_strictEndDate_, v18, v19, v21);

    uint64_t v23 = MEMORY[0x1E4FBC860];
    if (v22)
    {
      uint64_t v24 = sub_1C2A9DE98();
    }
    else
    {
      uint64_t v24 = MEMORY[0x1E4FBC860];
    }
    uint64_t v25 = v50;
    int64_t v26 = *(void *)(v24 + 16);
    if (v26)
    {
      uint64_t v52 = v23;
      sub_1C297898C(0, v26, 0);
      int v29 = *(void (**)(char *, unint64_t, uint64_t))(v25 + 16);
      uint64_t v27 = v25 + 16;
      uint64_t v28 = v29;
      unint64_t v30 = (*(unsigned __int8 *)(v27 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 64);
      v48[1] = v24;
      unint64_t v31 = v24 + v30;
      uint64_t v32 = *(void *)(v27 + 56);
      do
      {
        uint64_t v33 = v51;
        v28(v11, v31, v51);
        sub_1C2A9C388();
        uint64_t v35 = v34;
        (*(void (**)(char *, uint64_t))(v27 - 8))(v11, v33);
        uint64_t v36 = v52;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1C297898C(0, *(void *)(v36 + 16) + 1, 1);
          uint64_t v36 = v52;
        }
        unint64_t v38 = *(void *)(v36 + 16);
        unint64_t v37 = *(void *)(v36 + 24);
        if (v38 >= v37 >> 1)
        {
          sub_1C297898C(v37 > 1, v38 + 1, 1);
          uint64_t v36 = v52;
        }
        *(void *)(v36 + 16) = v38 + 1;
        *(void *)(v36 + 8 * v38 + 32) = v35;
        v31 += v32;
        --v26;
      }
      while (v26);
      swift_bridgeObjectRelease();
      uint64_t v25 = v50;
      uint64_t v39 = *(void *)(v36 + 16);
      if (v39) {
        goto LABEL_14;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v36 = MEMORY[0x1E4FBC860];
      uint64_t v39 = *(void *)(MEMORY[0x1E4FBC860] + 16);
      if (v39)
      {
LABEL_14:
        if (v39 == 1)
        {
          uint64_t v40 = 0;
          double v15 = 0.0;
        }
        else
        {
          uint64_t v40 = v39 & 0x7FFFFFFFFFFFFFFELL;
          uint64_t v41 = (double *)(v36 + 40);
          double v15 = 0.0;
          uint64_t v42 = v39 & 0x7FFFFFFFFFFFFFFELL;
          do
          {
            double v15 = v15 + *(v41 - 1) + *v41;
            v41 += 2;
            v42 -= 2;
          }
          while (v42);
          if (v39 == v40) {
            goto LABEL_23;
          }
        }
        uint64_t v43 = v39 - v40;
        uint64_t v44 = (double *)(v36 + 8 * v40 + 32);
        do
        {
          double v45 = *v44++;
          double v15 = v15 + v45;
          --v43;
        }
        while (v43);
LABEL_23:
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v25 + 8))(v49, v51);
        return v15;
      }
    }
    double v15 = 0.0;
    goto LABEL_23;
  }
  double v15 = 0.0;
  if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_3;
  }
  return v15;
}

void static MostRecentTimePeriodQuerySupport.timestamp(sample:)(void *a1)
{
  uint64_t v2 = sub_1C2A9C6E8();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&double v7 = MEMORY[0x1F4188790](v6).n128_u64[0];
  uint64_t v9 = (char *)&v24 - v8;
  id v10 = objc_msgSend(a1, sel_sampleType, v7);
  id v11 = objc_msgSend(v10, sel_identifier);

  uint64_t v12 = sub_1C2A9DD28();
  uint64_t v14 = v13;

  if (sub_1C2A9DD28() == v12 && v15 == v14)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v17 = sub_1C2A9E8D8();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v17 & 1) == 0)
    {
      id v25 = objc_msgSend(a1, sel_endDate);
      sub_1C2A9C6A8();
      char v18 = v25;

      return;
    }
  }
  id v19 = objc_msgSend(a1, sel_endDate);
  sub_1C2A9C6A8();

  id v20 = objc_msgSend(a1, sel__creationDate);
  sub_1C2A9C6A8();

  LOBYTE(v20) = sub_1C2A9C678();
  char v21 = *(void (**)(char *, uint64_t))(v3 + 8);
  v21(v5, v2);
  v21(v9, v2);
  if (v20) {
    id v22 = objc_msgSend(a1, sel_endDate);
  }
  else {
    id v22 = objc_msgSend(a1, sel__creationDate);
  }
  id v23 = v22;
  sub_1C2A9C6A8();
}

uint64_t MostRecentTimePeriodQueryOperation.result.getter()
{
  swift_retain();
  sub_1C2A9C9B8();
  return swift_release();
}

uint64_t sub_1C297674C(uint64_t a1)
{
  sub_1C297A460();
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C297A790(a1, (uint64_t)v4);
  return sub_1C29767D8((uint64_t)v4);
}

uint64_t sub_1C29767D8(uint64_t a1)
{
  return sub_1C297AB98(a1);
}

id sub_1C2976844()
{
  uint64_t v1 = qword_1EBB8F5E8;
  uint64_t v2 = *(void **)(v0 + qword_1EBB8F5E8);
  if (v2)
  {
    id v3 = *(id *)(v0 + qword_1EBB8F5E8);
  }
  else
  {
    id v4 = sub_1C29768A4();
    uint64_t v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    uint64_t v2 = 0;
  }
  id v6 = v2;
  return v3;
}

id sub_1C29768A4()
{
  uint64_t v1 = v0;
  uint64_t v2 = *MEMORY[0x1E4FBC8C8] & *(void *)v0;
  sub_1C293BDB0(0, (unint64_t *)&qword_1EBB91978, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1C2AA7730;
  id v4 = self;
  uint64_t v5 = (void *)sub_1C2A9C658();
  id v6 = objc_msgSend(v4, sel_predicateForSamplesWithStartDate_endDate_options_, 0, v5, 0);

  *(void *)(v3 + 32) = v6;
  uint64_t v26 = v3;
  sub_1C2A9DEA8();
  double v7 = *(void **)&v1[qword_1EBB8F608];
  if (v7)
  {
    id v8 = v7;
    MEMORY[0x1C8763D10]();
    if (*(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      sub_1C2A9DEB8();
    }
    sub_1C2A9DEE8();
    sub_1C2A9DEA8();
  }
  sub_1C29376D4(0, (unint64_t *)&qword_1EBB8E090);
  uint64_t v9 = (void *)sub_1C2A9DE88();
  swift_bridgeObjectRelease();
  id v25 = objc_msgSend(self, sel_andPredicateWithSubpredicates_, v9);

  id v10 = *(id *)&v1[qword_1EBB8F5F0];
  id v11 = objc_msgSend(v1, sel_name);
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = sub_1C2A9DD28();
    uint64_t v15 = v14;
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v15 = 0;
  }
  uint64_t v16 = v2 + class metadata base offset for MostRecentTimePeriodQueryOperation;
  uint64_t v17 = *(void *)(v2 + class metadata base offset for MostRecentTimePeriodQueryOperation);
  uint64_t v18 = *(void *)(v16 + 8);
  type metadata accessor for MostRecentSampleQueryOperation();
  uint64_t v19 = *(void *)&v1[qword_1EBB9EFC0];
  id v20 = *(void **)&v1[qword_1EBB9EFB8];
  uint64_t v21 = swift_allocObject();
  swift_unknownObjectWeakInit();
  id v22 = (void *)swift_allocObject();
  _OWORD v22[2] = v17;
  unsigned char v22[3] = v18;
  v22[4] = v21;
  id v23 = sub_1C2A04A8C(v10, v25, v13, v15, v19, v20, (uint64_t)sub_1C297AB1C, (uint64_t)v22);
  swift_release();
  return v23;
}

id MostRecentTimePeriodQueryOperation.__allocating_init(sampleType:endDate:predicate:name:queryQualityOfService:healthStore:)(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  id v15 = objc_allocWithZone(v7);
  id v16 = sub_1C297A190(a1, a2, a3, a4, a5, a6, a7);

  return v16;
}

id MostRecentTimePeriodQueryOperation.init(sampleType:endDate:predicate:name:queryQualityOfService:healthStore:)(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  id v10 = sub_1C297A190(a1, a2, a3, a4, a5, a6, a7);

  return v10;
}

Swift::Void __swiftcall MostRecentTimePeriodQueryOperation.main()()
{
  sub_1C297A460();
  MEMORY[0x1F4188790](v1);
  uint64_t v3 = (uint64_t *)((char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1C2962438();
  uint64_t v4 = swift_allocError();
  *uint64_t v5 = 2;
  *uint64_t v3 = v4;
  swift_storeEnumTagMultiPayload();
  sub_1C29767D8((uint64_t)v3);
  v6._uint64_t countAndFlagsBits = 0x676E696E6E7572;
  v6._uint64_t object = (void *)0xE700000000000000;
  v7._uint64_t countAndFlagsBits = 0;
  v7._uint64_t object = (void *)0xE000000000000000;
  NSOperation.logLifeCycleEvent(_:withPrivateInfo:)(v6, v7);
  id v8 = *(void **)(v0 + qword_1EBB8F5F8);
  id v9 = sub_1C2976844();
  objc_msgSend(v8, sel_addOperation_, v9);
}

void sub_1C2976D9C(void *a1)
{
  id v1 = a1;
  MostRecentTimePeriodQueryOperation.main()();
}

Swift::Void __swiftcall MostRecentTimePeriodQueryOperation.cleanUp()()
{
  sub_1C297A460();
  *(void *)&double v2 = MEMORY[0x1F4188790](v1).n128_u64[0];
  uint64_t v4 = (uint64_t *)((char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (objc_msgSend(v0, sel_isCancelled, v2))
  {
    sub_1C2962438();
    uint64_t v5 = swift_allocError();
    *Swift::String v6 = 3;
    *uint64_t v4 = v5;
    swift_storeEnumTagMultiPayload();
    sub_1C29767D8((uint64_t)v4);
    v7._uint64_t countAndFlagsBits = 0x656C6C65636E6163;
    v7._uint64_t object = (void *)0xE900000000000064;
    v8._uint64_t countAndFlagsBits = 0;
    v8._uint64_t object = (void *)0xE000000000000000;
    NSOperation.logLifeCycleEvent(_:withPrivateInfo:)(v7, v8);
  }
  objc_msgSend(*(id *)&v0[qword_1EBB8F5F8], sel_cancelAllOperations);
}

id MostRecentTimePeriodQueryOperation.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void MostRecentTimePeriodQueryOperation.init()()
{
}

void sub_1C2976F64()
{
}

void sub_1C2976FAC()
{
  swift_release();

  uint64_t v1 = v0 + qword_1EBB9EFC8;
  uint64_t v2 = sub_1C2A9C6E8();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  uint64_t v3 = *(void **)(v0 + qword_1EBB9EFB0);
}

id MostRecentTimePeriodQueryOperation.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void sub_1C29770C0(uint64_t a1)
{
  swift_release();

  uint64_t v2 = a1 + qword_1EBB9EFC8;
  uint64_t v3 = sub_1C2A9C6E8();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);

  uint64_t v4 = *(void **)(a1 + qword_1EBB9EFB0);
}

uint64_t sub_1C29771A0()
{
  return MostRecentTimePeriodQueryOperation.result.getter();
}

void sub_1C29771C4(void *a1, char a2, uint64_t a3)
{
  sub_1C293EC40(0, &qword_1EBB8FA28, (uint64_t (*)(uint64_t))sub_1C297A460, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v6 - 8);
  Swift::String v8 = (uint64_t *)((char *)&v19 - v7);
  sub_1C297A460();
  uint64_t v10 = v9;
  uint64_t v11 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t v14 = (void *)MEMORY[0x1C87657D0](a3 + 16);
  if (v14)
  {
    id v15 = v14;
    if (objc_msgSend(v14, sel_isCancelled))
    {
      v16._uint64_t object = (void *)0x80000001C2AB6030;
      v16._uint64_t countAndFlagsBits = 0xD00000000000002DLL;
      v17._uint64_t countAndFlagsBits = 0;
      v17._uint64_t object = (void *)0xE000000000000000;
      NSOperation.logLifeCycleEvent(_:withPrivateInfo:)(v16, v17);
LABEL_5:

      return;
    }
    if (objc_msgSend(v15, sel_isFinished)) {
      goto LABEL_5;
    }
    sub_1C2977434(a1, a2 & 1, v8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10) == 1)
    {

      sub_1C297ACF4((uint64_t)v8, &qword_1EBB8FA28, (uint64_t (*)(uint64_t))sub_1C297A460);
    }
    else
    {
      uint64_t v18 = sub_1C297AB2C((uint64_t)v8, (uint64_t)v13);
      MEMORY[0x1F4188790](v18);
      *(&v19 - 2) = (uint64_t)v15;
      *(&v19 - 1) = (uint64_t)v13;
      sub_1C2A9CA08();

      sub_1C297AB98((uint64_t)v13);
    }
  }
}

uint64_t sub_1C2977434@<X0>(void *a1@<X0>, char a2@<W1>, void *a3@<X8>)
{
  uint64_t v4 = v3;
  sub_1C297ABF4();
  uint64_t v9 = v8;
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v37 - v13;
  if (a2)
  {
    swift_getErrorValue();
    id v16 = a1;
    v17._uint64_t countAndFlagsBits = sub_1C2A9E938();
    v18._uint64_t countAndFlagsBits = 0;
    v18._uint64_t object = (void *)0xE000000000000000;
    NSOperation.logErrorString(_:withInfo:)(v17, v18);
    swift_bridgeObjectRelease();
    *a3 = a1;
    sub_1C297A460();
    uint64_t v20 = v19;
LABEL_6:
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(void *, void, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(a3, 0, 1, v20);
  }
  if (!a1)
  {
    v38._uint64_t countAndFlagsBits = 0;
    v38._uint64_t object = (void *)0xE000000000000000;
    sub_1C2A9E4D8();
    swift_bridgeObjectRelease();
    v38._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
    v38._uint64_t object = (void *)0x80000001C2AB6B40;
    id v21 = objc_msgSend(*(id *)(v4 + qword_1EBB8F5F0), sel_identifier);
    sub_1C2A9DD28();

    sub_1C2A9DDB8();
    swift_bridgeObjectRelease();
    v22._uint64_t countAndFlagsBits = 0x64656873696E6966;
    v22._uint64_t object = (void *)0xE800000000000000;
    NSOperation.logLifeCycleEvent(_:withPrivateInfo:)(v22, v38);
    swift_bridgeObjectRelease();
    id v23 = &v14[*(int *)(v9 + 48)];
    uint64_t v24 = v4 + qword_1EBB9EFC8;
    uint64_t v25 = sub_1C2A9C6E8();
    uint64_t v26 = *(void *)(v25 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v23, v24, v25);
    uint64_t v27 = &v11[*(int *)(v9 + 48)];
    uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v26 + 32);
    v28(v27, v23, v25);
    sub_1C297A4E0();
    unint64_t v30 = (char *)a3 + *(int *)(v29 + 48);
    *a3 = 0;
    v28(v30, v27, v25);
    sub_1C297A460();
    uint64_t v20 = v31;
    goto LABEL_6;
  }
  id v15 = sub_1C29778CC(a1);
  uint64_t v33 = *(void **)(v4 + qword_1EBB9EFB0);
  *(void *)(v4 + qword_1EBB9EFB0) = v15;
  id v34 = v15;

  objc_msgSend(*(id *)(v4 + qword_1EBB8F5F8), sel_addOperation_, v34);
  sub_1C296FAA4(a1);
  sub_1C296FAA4(a1);

  sub_1C297A460();
  uint64_t v36 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56);
  return v36(a3, 1, 1, v35);
}

uint64_t sub_1C2977844(uint64_t a1, uint64_t a2)
{
  sub_1C297A460();
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C297A790(a2, (uint64_t)v5);
  return sub_1C29767D8((uint64_t)v5);
}

id sub_1C29778CC(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = *MEMORY[0x1E4FBC8C8] & *v3;
  uint64_t v6 = sub_1C2A9C398();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void **)((char *)v3 + qword_1EBB8F608);
  id result = (id)sub_1C2978320(a1, (uint64_t)v9);
  if (!v2)
  {
    uint64_t v38 = v5;
    uint64_t v39 = a1;
    sub_1C293BDB0(0, (unint64_t *)&qword_1EBB91978, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
    uint64_t v40 = v12;
    uint64_t v13 = swift_allocObject();
    long long v36 = xmmword_1C2AA7730;
    *(_OWORD *)(v13 + 16) = xmmword_1C2AA7730;
    uint64_t v14 = self;
    id v15 = (void *)sub_1C2A9C318();
    id v16 = objc_msgSend(v14, sel_predicateForSamplesWithinDateInterval_options_, v15, 0);

    *(void *)(v13 + 32) = v16;
    uint64_t v41 = v13;
    sub_1C2A9DEA8();
    if (v10)
    {
      id v17 = v10;
      MEMORY[0x1C8763D10]();
      if (*(void *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        sub_1C2A9DEB8();
      }
      sub_1C2A9DEE8();
      sub_1C2A9DEA8();
    }
    sub_1C29376D4(0, (unint64_t *)&qword_1EBB8E090);
    Swift::String v18 = (void *)sub_1C2A9DE88();
    swift_bridgeObjectRelease();
    id v37 = objc_msgSend(self, sel_andPredicateWithSubpredicates_, v18);

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    uint64_t v19 = *(void **)((char *)v3 + qword_1EBB8F5F0);
    uint64_t v20 = swift_allocObject();
    *(_OWORD *)(v20 + 16) = v36;
    sub_1C29376D4(0, &qword_1EBB92118);
    swift_getKeyPath();
    *(void *)&long long v36 = v19;
    *(void *)(v20 + 32) = sub_1C2A9E138();
    uint64_t v41 = v20;
    sub_1C2A9DEA8();
    uint64_t v40 = v41;
    id v21 = objc_msgSend(v3, sel_name);
    if (v21)
    {
      Swift::String v22 = v21;
      uint64_t v35 = sub_1C2A9DD28();
      uint64_t v24 = v23;
    }
    else
    {
      uint64_t v35 = 0;
      uint64_t v24 = 0;
    }
    uint64_t v26 = *(void *)(v38 + class metadata base offset for MostRecentTimePeriodQueryOperation);
    uint64_t v25 = *(void *)(v38 + class metadata base offset for MostRecentTimePeriodQueryOperation + 8);
    type metadata accessor for SampleQueryOperation();
    uint64_t v27 = *(void *)((char *)v3 + qword_1EBB9EFC0);
    uint64_t v28 = *(void **)((char *)v3 + qword_1EBB9EFB8);
    uint64_t v29 = swift_allocObject();
    swift_unknownObjectWeakInit();
    unint64_t v30 = (void *)swift_allocObject();
    v30[2] = v26;
    v30[3] = v25;
    v30[4] = v29;
    uint64_t v31 = v39;
    v30[5] = v39;
    id v32 = v28;
    id v33 = v31;
    return SampleQueryOperation.__allocating_init(sampleType:predicate:limit:sortDescriptors:name:queryQualityOfService:healthStore:resultHandler:)((void *)v36, v37, 0, v40, v35, v24, v27, v32, (uint64_t)sub_1C297AC9C, (uint64_t)v30);
  }
  return result;
}

uint64_t static MostRecentTimePeriodQuerySupport.predicateForAllSamples(onDayOf:additionalPredicate:)(void *a1, void *a2)
{
  uint64_t v5 = sub_1C2A9C398();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = sub_1C2978320(a1, (uint64_t)v8);
  if (!v2)
  {
    sub_1C293BDB0(0, (unint64_t *)&qword_1EBB91978, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
    uint64_t v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_1C2AA7730;
    uint64_t v11 = self;
    uint64_t v12 = (void *)sub_1C2A9C318();
    id v13 = objc_msgSend(v11, sel_predicateForSamplesWithinDateInterval_options_, v12, 0);

    *(void *)(v10 + 32) = v13;
    uint64_t v18 = v10;
    sub_1C2A9DEA8();
    if (a2)
    {
      id v14 = a2;
      MEMORY[0x1C8763D10]();
      if (*(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        sub_1C2A9DEB8();
      }
      sub_1C2A9DEE8();
      sub_1C2A9DEA8();
    }
    sub_1C29376D4(0, (unint64_t *)&qword_1EBB8E090);
    id v15 = (void *)sub_1C2A9DE88();
    swift_bridgeObjectRelease();
    id v16 = objc_msgSend(self, sel_andPredicateWithSubpredicates_, v15);

    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    return (uint64_t)v16;
  }
  return result;
}

void sub_1C2977F58(void *a1, char a2, uint64_t a3, void *a4)
{
  sub_1C297ABF4();
  uint64_t v9 = v8;
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  id v14 = (char *)&v31 - v13;
  sub_1C297A460();
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (double *)((char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_beginAccess();
  uint64_t v18 = (void *)MEMORY[0x1C87657D0](a3 + 16);
  if (v18)
  {
    uint64_t v19 = v18;
    if (objc_msgSend(v18, sel_isCancelled))
    {
      v20._uint64_t object = (void *)0x80000001C2AB6030;
      v20._uint64_t countAndFlagsBits = 0xD00000000000002DLL;
      v21._uint64_t countAndFlagsBits = 0;
      v21._uint64_t object = (void *)0xE000000000000000;
      NSOperation.logLifeCycleEvent(_:withPrivateInfo:)(v20, v21);
LABEL_5:

      return;
    }
    if (objc_msgSend(v19, sel_isFinished)) {
      goto LABEL_5;
    }
    if (a2)
    {
      *(void *)uint64_t v17 = a1;
      swift_storeEnumTagMultiPayload();
      id v30 = a1;
    }
    else
    {
      sub_1C29376D4(0, &qword_1EBB927D8);
      unint64_t v22 = sub_1C2A9E5B8();
      double v23 = static MostRecentTimePeriodQuerySupport.totalDuration(for:referenceSample:)(v22, a4);
      swift_bridgeObjectRelease();
      uint64_t v24 = &v14[*(int *)(v9 + 48)];
      static MostRecentTimePeriodQuerySupport.timestamp(sample:)(a4);
      uint64_t v25 = &v11[*(int *)(v9 + 48)];
      uint64_t v26 = sub_1C2A9C6E8();
      uint64_t v27 = *(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 32);
      v27(v25, v24, v26);
      sub_1C297A4E0();
      uint64_t v29 = (char *)v17 + *(int *)(v28 + 48);
      *uint64_t v17 = v23;
      v27(v29, v25, v26);
      id v30 = (id)swift_storeEnumTagMultiPayload();
    }
    MEMORY[0x1F4188790](v30);
    *(&v31 - 2) = (uint64_t)v19;
    *(&v31 - 1) = (uint64_t)v17;
    sub_1C2A9CA08();

    sub_1C297AB98((uint64_t)v17);
  }
}

uint64_t sub_1C297823C(uint64_t a1, uint64_t a2)
{
  sub_1C297A460();
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C297A790(a2, (uint64_t)v6);
  sub_1C29767D8((uint64_t)v6);
  id v7 = objc_msgSend(*(id *)(a1 + qword_1EBB8F5F0), sel_identifier);
  uint64_t v8 = sub_1C2A9DD28();
  uint64_t v10 = v9;

  v11._uint64_t countAndFlagsBits = 0x64656873696E6966;
  v11._uint64_t object = (void *)0xE800000000000000;
  v12._uint64_t countAndFlagsBits = v8;
  v12._uint64_t object = v10;
  NSOperation.logLifeCycleEvent(_:withPrivateInfo:)(v11, v12);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C2978320@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v39 = a2;
  uint64_t v45 = sub_1C2A9C858();
  uint64_t v3 = *(void *)(v45 - 8);
  MEMORY[0x1F4188790](v45);
  uint64_t v44 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C293EC40(0, &qword_1EBB92520, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v46 = (char *)&v37 - v6;
  uint64_t v7 = sub_1C2A9C868();
  uint64_t v41 = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1C2A9C6E8();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v42 = v11;
  uint64_t v43 = v12;
  MEMORY[0x1F4188790](v11);
  uint64_t v38 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  id v37 = (char *)&v37 - v15;
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v37 - v17;
  MEMORY[0x1F4188790](v19);
  Swift::String v21 = (char *)&v37 - v20;
  sub_1C2A9C838();
  id v22 = objc_msgSend(a1, sel_endDate);
  sub_1C2A9C6A8();

  sub_1C2A9C748();
  uint64_t v47 = *(void (**)(char *, uint64_t))(v12 + 8);
  uint64_t v48 = v12 + 8;
  v47(v18, v11);
  double v23 = *(void (**)(char *, uint64_t))(v8 + 8);
  uint64_t v40 = v8 + 8;
  v23(v10, v7);
  sub_1C2A9C838();
  uint64_t v25 = v44;
  uint64_t v24 = v45;
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v44, *MEMORY[0x1E4F27BF0], v45);
  uint64_t v26 = (uint64_t)v46;
  uint64_t v49 = v21;
  sub_1C2A9C818();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v25, v24);
  uint64_t v27 = v43;
  v23(v10, v41);
  uint64_t v28 = v42;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48))(v26, 1, v42) == 1)
  {
    sub_1C297ACF4(v26, &qword_1EBB92520, MEMORY[0x1E4F27928]);
    uint64_t v50 = 0;
    unint64_t v51 = 0xE000000000000000;
    sub_1C2A9E4D8();
    sub_1C2A9DDB8();
    sub_1C2A9DDB8();
    sub_1C2A9DDB8();
    sub_1C2A9DDB8();
    uint64_t v52 = 209;
    sub_1C2A9E898();
    sub_1C2A9DDB8();
    swift_bridgeObjectRelease();
    sub_1C2A9DDB8();
    uint64_t v29 = v50;
    unint64_t v30 = v51;
    sub_1C296291C();
    swift_allocError();
    *uint64_t v31 = v29;
    v31[1] = v30;
    v31[2] = 0x2000000000000000;
    swift_willThrow();
    return ((uint64_t (*)(char *, uint64_t))v47)(v49, v28);
  }
  else
  {
    id v33 = v37;
    (*(void (**)(char *, uint64_t, uint64_t))(v27 + 32))(v37, v26, v28);
    uint64_t v34 = *(void (**)(char *, char *, uint64_t))(v27 + 16);
    uint64_t v35 = v49;
    v34(v18, v49, v28);
    v34(v38, v33, v28);
    sub_1C2A9C358();
    long long v36 = (uint64_t (*)(char *, uint64_t))v47;
    v47(v33, v28);
    return v36(v35, v28);
  }
}

unint64_t sub_1C29788C0()
{
  unint64_t result = qword_1EA31E1B0;
  if (!qword_1EA31E1B0)
  {
    unint64_t result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EA31E1B0);
  }
  return result;
}

uint64_t sub_1C29788FC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1C2978B8C(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1C297891C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1C292FCCC(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1C297893C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1C2979F2C(a1, a2, a3, (void *)*v3, &qword_1EBB90DB8, MEMORY[0x1E4F27928], MEMORY[0x1E4F27928]);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1C297898C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1C2978D18(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1C29789AC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1C2978E98(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1C29789CC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1C297903C(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1C29789EC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1C2979218(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1C2978A0C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1C29793F0(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1C2978A2C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1C2979584(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1C2978A4C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1C2979710(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1C2978A6C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1C29798C4(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1C2978A8C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1C2979A78(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1C2978AAC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1C2979C08(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1C2978ACC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1C2979DA4(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1C2978AEC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1C2979F2C(a1, a2, a3, (void *)*v3, &qword_1EBB8E3D8, (uint64_t (*)(uint64_t))sub_1C297A894, (uint64_t (*)(void))sub_1C297A894);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1C2978B3C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1C2979F2C(a1, a2, a3, (void *)*v3, &qword_1EBB8E3D0, (uint64_t (*)(uint64_t))sub_1C297A7F4, (uint64_t (*)(void))sub_1C297A7F4);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1C2978B8C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1C293BDB0(0, &qword_1EBB91420, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_1C2A9E6A8();
  __break(1u);
  return result;
}

uint64_t sub_1C2978D18(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1C293BDB0(0, &qword_1EBB91210, MEMORY[0x1E4FBB3D0], MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_1C2A9E6A8();
  __break(1u);
  return result;
}

uint64_t sub_1C2978E98(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1C293BDB0(0, &qword_1EA31E1D8, (uint64_t)&type metadata for TimeBasedDistribution.Bucket, MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[40 * v8]) {
      memmove(v12, v13, 40 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[40 * v8] || v12 >= &v13[40 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_1C2A9E6A8();
  __break(1u);
  return result;
}

uint64_t sub_1C297903C(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1C297A928(0, &qword_1EA31E1F8, (uint64_t)&qword_1EA31E200, (uint64_t)&type metadata for TimeBasedDistribution.Bucket, (void (*)(uint64_t, uint64_t, uint64_t))sub_1C297AA58);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    _OWORD v10[2] = v8;
    unsigned int v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 48 * v8) {
      memmove(v10 + 4, a4 + 4, 48 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 48 * v8 || v12 >= v13 + 48 * v8)
  {
    sub_1C297AA58(0, &qword_1EA31E200);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_1C2A9E6A8();
  __break(1u);
  return result;
}

uint64_t sub_1C2979218(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1C297A928(0, &qword_1EA31E1B8, (uint64_t)&qword_1EA31E1C0, (uint64_t)&protocol descriptor for TimeBasedDistributionChartPointProxy, (void (*)(uint64_t, uint64_t, uint64_t))sub_1C29415E4);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    _OWORD v10[2] = v8;
    unsigned int v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 40 * v8) {
      memmove(v10 + 4, a4 + 4, 40 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 40 * v8 || v12 >= v13 + 40 * v8)
  {
    sub_1C29415E4(0, &qword_1EA31E1C0);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_1C2A9E6A8();
  __break(1u);
  return result;
}

uint64_t sub_1C29793F0(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1C293BDB0(0, &qword_1EA31E1E0, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_1C2A9E6A8();
  __break(1u);
  return result;
}

uint64_t sub_1C2979584(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1C293EC40(0, &qword_1EA31E1E8, (uint64_t (*)(uint64_t))sub_1C297A9F8, MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    memcpy(v13, v14, 16 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_1C2A9E6A8();
  __break(1u);
  return result;
}

uint64_t sub_1C2979710(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1C293EC40(0, &qword_1EBB8F9F8, (uint64_t (*)(uint64_t))sub_1C297A700, MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    _OWORD v10[2] = v8;
    unsigned int v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8) {
      memmove(v10 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    sub_1C297A700();
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_1C2A9E6A8();
  __break(1u);
  return result;
}

uint64_t sub_1C29798C4(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1C293EC40(0, &qword_1EBB921F8, (uint64_t (*)(uint64_t))sub_1C2943230, MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (void *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    _OWORD v10[2] = v8;
    unsigned int v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 8 * v8) {
      memmove(v10 + 4, a4 + 4, 8 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 8 * v8 || v13 >= v14 + 8 * v8)
  {
    sub_1C2943230();
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_1C2A9E6A8();
  __break(1u);
  return result;
}

uint64_t sub_1C2979A78(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1C293BDB0(0, &qword_1EBB90250, (uint64_t)&type metadata for LevelView.DataConfiguration.Bucket, MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  size_t v14 = 24 * v8;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v12, v13, v14);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    memcpy(v12, v13, v14);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_1C2A9E6A8();
  __break(1u);
  return result;
}

uint64_t sub_1C2979C08(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1C293EC40(0, &qword_1EA31E1C8, (uint64_t (*)(uint64_t))sub_1C297A984, MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  unint64_t v13 = a4 + 32;
  size_t v14 = 48 * v8;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v12, v13, v14);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    memcpy(v12, v13, v14);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_1C2A9E6A8();
  __break(1u);
  return result;
}

uint64_t sub_1C2979DA4(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1C297A928(0, &qword_1EBB8F9F0, (uint64_t)&unk_1EBB8F850, MEMORY[0x1E4FBB3D0], (void (*)(uint64_t, uint64_t, uint64_t))sub_1C297AA58);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    memcpy(v13, v14, 16 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_1C2A9E6A8();
  __break(1u);
  return result;
}

uint64_t sub_1C2979F2C(char a1, int64_t a2, char a3, void *a4, unint64_t *a5, uint64_t (*a6)(uint64_t), uint64_t (*a7)(void))
{
  if (a3)
  {
    unint64_t v10 = a4[3];
    int64_t v11 = v10 >> 1;
    if ((uint64_t)(v10 >> 1) < a2)
    {
      if (v11 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v10 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v11 = a2;
      }
    }
  }
  else
  {
    int64_t v11 = a2;
  }
  uint64_t v12 = a4[2];
  if (v11 <= v12) {
    uint64_t v13 = a4[2];
  }
  else {
    uint64_t v13 = v11;
  }
  if (!v13)
  {
    uint64_t v17 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_19;
  }
  sub_1C293EC40(0, a5, a6, MEMORY[0x1E4FBBE00]);
  uint64_t v14 = *(void *)(a7(0) - 8);
  uint64_t v15 = *(void *)(v14 + 72);
  unint64_t v16 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = (void *)swift_allocObject();
  size_t v18 = _swift_stdlib_malloc_size(v17);
  if (!v15)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v18 - v16 == 0x8000000000000000 && v15 == -1) {
    goto LABEL_34;
  }
  void v17[2] = v12;
  v17[3] = 2 * ((uint64_t)(v18 - v16) / v15);
LABEL_19:
  uint64_t v20 = *(void *)(a7(0) - 8);
  unint64_t v21 = (*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
  id v22 = (char *)v17 + v21;
  double v23 = (char *)a4 + v21;
  if (a1)
  {
    if (v17 < a4 || v22 >= &v23[*(void *)(v20 + 72) * v12])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v17 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v24 = *(void *)(v20 + 72) * v12;
  uint64_t v25 = &v22[v24];
  unint64_t v26 = (unint64_t)&v23[v24];
  if (v23 >= v25 || (unint64_t)v22 >= v26)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v17;
  }
LABEL_36:
  uint64_t result = sub_1C2A9E6A8();
  __break(1u);
  return result;
}

id sub_1C297A190(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  v32[1] = a4;
  uint64_t v33 = a6;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  sub_1C297A460();
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (void *)((char *)v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = qword_1EBB8F600;
  sub_1C2962438();
  uint64_t v17 = swift_allocError();
  *size_t v18 = 0;
  *uint64_t v15 = v17;
  swift_storeEnumTagMultiPayload();
  sub_1C293EC40(0, &qword_1EBB8E8B8, (uint64_t (*)(uint64_t))sub_1C297A460, MEMORY[0x1E4F674D8]);
  swift_allocObject();
  uint64_t v19 = v7;
  *(void *)&v7[v16] = sub_1C2A9C9F8();
  uint64_t v20 = qword_1EBB8F5F8;
  id v21 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28F08]), sel_init);
  objc_msgSend(v21, sel_setMaxConcurrentOperationCount_, 1);
  *(void *)&v19[v20] = v21;
  *(void *)&v19[qword_1EBB8F5E8] = 0;
  *(void *)&v19[qword_1EBB9EFB0] = 0;
  *(void *)&v19[qword_1EBB8F5F0] = a1;
  id v22 = &v19[qword_1EBB9EFC8];
  uint64_t v23 = sub_1C2A9C6E8();
  uint64_t v24 = *(void *)(v23 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v22, a2, v23);
  *(void *)&v19[qword_1EBB8F608] = a3;
  *(void *)&v19[qword_1EBB9EFC0] = v33;
  *(void *)&v19[qword_1EBB9EFB8] = a7;
  id v25 = a3;
  id v26 = a1;
  id v27 = a7;

  v35.receiver = v19;
  v35.super_class = ObjectType;
  id v28 = objc_msgSendSuper2(&v35, sel_init);
  id v29 = v28;
  if (a5)
  {
    unint64_t v30 = (void *)sub_1C2A9DCF8();
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v30 = 0;
  }
  objc_msgSend(v28, sel_setName_, v30);

  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(a2, v23);
  return v28;
}

void sub_1C297A460()
{
  if (!qword_1EBB8FA20)
  {
    sub_1C297A4E0();
    sub_1C29415E4(255, (unint64_t *)&qword_1EBB92210);
    unint64_t v0 = sub_1C2A9E9F8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EBB8FA20);
    }
  }
}

void sub_1C297A4E0()
{
  if (!qword_1EBB8F828)
  {
    sub_1C2A9C6E8();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EBB8F828);
    }
  }
}

void sub_1C297A54C()
{
}

uint64_t sub_1C297A57C()
{
  return MostRecentTimePeriodQueryOperation.result.getter();
}

uint64_t sub_1C297A5A4()
{
  return 16;
}

__n128 sub_1C297A5B0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1C297A5BC()
{
  uint64_t result = sub_1C2A9C6E8();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for MostRecentTimePeriodQueryOperation()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for MostRecentTimePeriodQueryOperation(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for MostRecentTimePeriodQueryOperation);
}

uint64_t dispatch thunk of MostRecentTimePeriodQueryOperation.__allocating_init(sampleType:endDate:predicate:name:queryQualityOfService:healthStore:)()
{
  return (*(uint64_t (**)(void))(class metadata base offset for MostRecentTimePeriodQueryOperation + v0 + 88))();
}

ValueMetadata *type metadata accessor for MostRecentTimePeriodQuerySupport()
{
  return &type metadata for MostRecentTimePeriodQuerySupport;
}

void sub_1C297A700()
{
  if (!qword_1EBB8F860)
  {
    sub_1C29376D4(255, (unint64_t *)&qword_1EBB92468);
    sub_1C29376D4(255, &qword_1EBB92128);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EBB8F860);
    }
  }
}

uint64_t sub_1C297A790(uint64_t a1, uint64_t a2)
{
  sub_1C297A460();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1C297A7F4()
{
  if (!qword_1EBB8E858)
  {
    sub_1C2A9C398();
    sub_1C293EC40(255, &qword_1EBB8E3A0, type metadata accessor for SignificantChangeEngine.Changepoint, MEMORY[0x1E4FBB718]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EBB8E858);
    }
  }
}

void sub_1C297A894()
{
  if (!qword_1EBB8E868)
  {
    sub_1C2A9C398();
    sub_1C293BDB0(255, &qword_1EBB8F830, MEMORY[0x1E4FBB3D0], MEMORY[0x1E4FBB718]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EBB8E868);
    }
  }
}

void sub_1C297A928(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    a5(255, a3, a4);
    unint64_t v6 = sub_1C2A9E8A8();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void sub_1C297A984()
{
  if (!qword_1EA31E1D0)
  {
    type metadata accessor for CGRect(255);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_1EA31E1D0);
    }
  }
}

void sub_1C297A9F8()
{
  if (!qword_1EA31E1F0)
  {
    unint64_t v0 = sub_1C2A9DFE8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EA31E1F0);
    }
  }
}

void sub_1C297AA58(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v4) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

uint64_t sub_1C297AAAC()
{
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1C297AAE4()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 40, 7);
}

void sub_1C297AB1C(void *a1, char a2)
{
  sub_1C29771C4(a1, a2 & 1, *(void *)(v2 + 32));
}

uint64_t sub_1C297AB2C(uint64_t a1, uint64_t a2)
{
  sub_1C297A460();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C297AB90()
{
  return sub_1C2977844(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1C297AB98(uint64_t a1)
{
  sub_1C297A460();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1C297ABF4()
{
  if (!qword_1EBB8F840)
  {
    sub_1C2A9C6E8();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EBB8F840);
    }
  }
}

uint64_t sub_1C297AC5C()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 48, 7);
}

void sub_1C297AC9C(void *a1, char a2)
{
  sub_1C2977F58(a1, a2 & 1, *(void *)(v2 + 32), *(void **)(v2 + 40));
}

uint64_t sub_1C297ACAC()
{
  return sub_1C297823C(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1C297ACB4(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  sub_1C297AB98(a1);
  return sub_1C297A790(v3, a1);
}

uint64_t sub_1C297ACF4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  sub_1C293EC40(0, a2, a3, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_1C297AD64@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1C2A9D488();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  a1[1] = v4;
  return result;
}

uint64_t sub_1C297ADE4()
{
  return sub_1C2A9D498();
}

uint64_t sub_1C297AE68()
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1C2A9D488();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_1C297AEE4()
{
  return sub_1C2A9D498();
}

uint64_t (*sub_1C297AF60(void *a1))()
{
  uint64_t v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = sub_1C2A9D478();
  return sub_1C297AFEC;
}

uint64_t sub_1C297AFF0()
{
  return swift_endAccess();
}

uint64_t sub_1C297B078(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBB1A0];
  sub_1C29803D8(0, &qword_1EA31E208, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4F1AC60]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v9 = MEMORY[0x1F4188790](v8);
  int64_t v11 = (char *)&v14 - v10;
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16);
  v12((char *)&v14 - v10, a1, v4, v9);
  ((void (*)(char *, char *, uint64_t))v12)(v7, v11, v4);
  swift_beginAccess();
  sub_1C29803D8(0, &qword_1EBB8E760, v2, MEMORY[0x1E4F1AC70]);
  sub_1C2A9D468();
  swift_endAccess();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v11, v4);
}

uint64_t sub_1C297B238()
{
  return swift_endAccess();
}

uint64_t sub_1C297B2BC(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBB1A0];
  sub_1C29803D8(0, &qword_1EA31E208, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4F1AC60]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  __n128 v6 = MEMORY[0x1F4188790](v3);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16))((char *)&v9 - v7, a1, v4, v6);
  swift_beginAccess();
  sub_1C29803D8(0, &qword_1EBB8E760, v2, MEMORY[0x1E4F1AC70]);
  sub_1C2A9D468();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
}

uint64_t (*sub_1C297B424(void *a1))()
{
  uint64_t v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = MEMORY[0x1E4FBB1A0];
  sub_1C29803D8(0, &qword_1EA31E208, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4F1AC60]);
  v3[10] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[11] = v6;
  size_t v7 = *(void *)(v6 + 64);
  v3[12] = malloc(v7);
  v3[13] = malloc(v7);
  uint64_t v8 = malloc(v7);
  uint64_t v9 = OBJC_IVAR____TtC19HealthVisualization25SummaryTrendTileViewModel__textString;
  v3[14] = v8;
  v3[15] = v9;
  swift_beginAccess();
  sub_1C29803D8(0, &qword_1EBB8E760, v4, MEMORY[0x1E4F1AC70]);
  v3[16] = v10;
  sub_1C2A9D458();
  swift_endAccess();
  return sub_1C297B57C;
}

uint64_t sub_1C297B580()
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1C2A9D488();
  swift_release();
  return swift_release();
}

uint64_t sub_1C297B5FC(uint64_t a1)
{
  sub_1C297B898(0);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  size_t v7 = (char *)&v9 - v6;
  sub_1C2980370(a1, (uint64_t)&v9 - v6, (uint64_t (*)(void))sub_1C297B898);
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1C2980370((uint64_t)v7, (uint64_t)v4, (uint64_t (*)(void))sub_1C297B898);
  swift_retain();
  sub_1C2A9D498();
  return sub_1C297F774((uint64_t)v7, (uint64_t (*)(void))sub_1C297B898);
}

uint64_t sub_1C297B728()
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1C2A9D488();
  swift_release();
  return swift_release();
}

uint64_t sub_1C297B7A8(uint64_t a1)
{
  sub_1C297B898(0);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1C2980370(a1, (uint64_t)v4, (uint64_t (*)(void))sub_1C297B898);
  swift_retain();
  sub_1C2A9D498();
  return sub_1C297F774(a1, (uint64_t (*)(void))sub_1C297B898);
}

void sub_1C297B898(uint64_t a1)
{
}

uint64_t (*sub_1C297B8CC(void *a1))()
{
  uint64_t v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = sub_1C2A9D478();
  return sub_1C297AFEC;
}

uint64_t sub_1C297B958()
{
  return swift_endAccess();
}

uint64_t sub_1C297B9EC(uint64_t a1)
{
  sub_1C297BC48(0, &qword_1EA31E228, (uint64_t (*)(uint64_t))sub_1C297B898, MEMORY[0x1E4F1AC60]);
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v8 = MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v13 - v9;
  int64_t v11 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v4 + 16);
  v11((char *)&v13 - v9, a1, v3, v8);
  ((void (*)(char *, char *, uint64_t))v11)(v6, v10, v3);
  swift_beginAccess();
  sub_1C297BC48(0, &qword_1EA31E220, (uint64_t (*)(uint64_t))sub_1C297B898, MEMORY[0x1E4F1AC70]);
  sub_1C2A9D468();
  swift_endAccess();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v10, v3);
}

uint64_t sub_1C297BBB8()
{
  return swift_endAccess();
}

void sub_1C297BC48(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_1C297BCAC(uint64_t a1)
{
  sub_1C297BC48(0, &qword_1EA31E228, (uint64_t (*)(uint64_t))sub_1C297B898, MEMORY[0x1E4F1AC60]);
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  __n128 v5 = MEMORY[0x1F4188790](v2);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v4 + 16))((char *)&v8 - v6, a1, v3, v5);
  swift_beginAccess();
  sub_1C297BC48(0, &qword_1EA31E220, (uint64_t (*)(uint64_t))sub_1C297B898, MEMORY[0x1E4F1AC70]);
  sub_1C2A9D468();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
}

uint64_t (*sub_1C297BE20(void *a1))()
{
  uint64_t v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[9] = v1;
  sub_1C297BC48(0, &qword_1EA31E228, (uint64_t (*)(uint64_t))sub_1C297B898, MEMORY[0x1E4F1AC60]);
  v3[10] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[11] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  uint64_t v7 = malloc(v6);
  uint64_t v8 = OBJC_IVAR____TtC19HealthVisualization25SummaryTrendTileViewModel__trendModel;
  v3[14] = v7;
  v3[15] = v8;
  swift_beginAccess();
  sub_1C297BC48(0, &qword_1EA31E220, (uint64_t (*)(uint64_t))sub_1C297B898, MEMORY[0x1E4F1AC70]);
  v3[16] = v9;
  sub_1C2A9D458();
  swift_endAccess();
  return sub_1C297B57C;
}

double sub_1C297BF84@<D0>(_OWORD *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1C2A9D488();
  swift_release();
  swift_release();
  double result = *(double *)&v3;
  *a1 = v3;
  return result;
}

uint64_t sub_1C297C004()
{
  return sub_1C2A9D498();
}

uint64_t sub_1C297C088()
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1C2A9D488();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_1C297C104()
{
  return sub_1C2A9D498();
}

uint64_t (*sub_1C297C180(void *a1))()
{
  uint64_t v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = sub_1C2A9D478();
  return sub_1C297AFEC;
}

void sub_1C297C20C(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 48))(*a1, 0);
  swift_release();
  swift_release();
  free(v1);
}

uint64_t sub_1C297C274()
{
  return swift_endAccess();
}

uint64_t sub_1C297C304(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBB1A0];
  sub_1C297C560(0, &qword_1EA31E240, (unint64_t *)&qword_1EBB8DEB0, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4F1AC60]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v9 = MEMORY[0x1F4188790](v8);
  int64_t v11 = (char *)&v14 - v10;
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16);
  v12((char *)&v14 - v10, a1, v4, v9);
  ((void (*)(char *, char *, uint64_t))v12)(v7, v11, v4);
  swift_beginAccess();
  sub_1C297C560(0, &qword_1EA31E238, (unint64_t *)&qword_1EBB8DEB0, v2, MEMORY[0x1E4F1AC70]);
  sub_1C2A9D468();
  swift_endAccess();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v11, v4);
}

uint64_t sub_1C297C4D4()
{
  return swift_endAccess();
}

void sub_1C297C560(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    sub_1C29803D8(255, a3, a4, MEMORY[0x1E4FBB718]);
    unint64_t v9 = a5(a1, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

uint64_t sub_1C297C5DC(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBB1A0];
  sub_1C297C560(0, &qword_1EA31E240, (unint64_t *)&qword_1EBB8DEB0, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4F1AC60]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  __n128 v6 = MEMORY[0x1F4188790](v3);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16))((char *)&v9 - v7, a1, v4, v6);
  swift_beginAccess();
  sub_1C297C560(0, &qword_1EA31E238, (unint64_t *)&qword_1EBB8DEB0, v2, MEMORY[0x1E4F1AC70]);
  sub_1C2A9D468();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
}

uint64_t (*sub_1C297C75C(void *a1))()
{
  uint64_t v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = MEMORY[0x1E4FBB1A0];
  sub_1C297C560(0, &qword_1EA31E240, (unint64_t *)&qword_1EBB8DEB0, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4F1AC60]);
  v3[10] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[11] = v6;
  size_t v7 = *(void *)(v6 + 64);
  v3[12] = malloc(v7);
  v3[13] = malloc(v7);
  uint64_t v8 = malloc(v7);
  uint64_t v9 = OBJC_IVAR____TtC19HealthVisualization25SummaryTrendTileViewModel__pregnancyText;
  v3[14] = v8;
  v3[15] = v9;
  swift_beginAccess();
  sub_1C297C560(0, &qword_1EA31E238, (unint64_t *)&qword_1EBB8DEB0, v4, MEMORY[0x1E4F1AC70]);
  v3[16] = v10;
  sub_1C2A9D458();
  swift_endAccess();
  return sub_1C297B57C;
}

void sub_1C297C8C4(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v4 = *(void (**)(void, void, void))(*(void *)(*(void *)a1 + 88) + 16);
  v4(*(void *)(*(void *)a1 + 104), v3[14], v3[10]);
  uint64_t v5 = (void *)v3[14];
  uint64_t v6 = (void *)v3[12];
  size_t v7 = (void *)v3[13];
  uint64_t v8 = v3[10];
  uint64_t v9 = v3[11];
  if (a2)
  {
    v4(v3[12], v3[13], v3[10]);
    swift_beginAccess();
    sub_1C2A9D468();
    swift_endAccess();
    uint64_t v10 = *(void (**)(void *, uint64_t))(v9 + 8);
    v10(v7, v8);
    v10(v5, v8);
  }
  else
  {
    swift_beginAccess();
    sub_1C2A9D468();
    swift_endAccess();
    (*(void (**)(void *, uint64_t))(v9 + 8))(v5, v8);
  }
  free(v5);
  free(v7);
  free(v6);
  free(v3);
}

uint64_t SummaryTrendTileViewModel.__allocating_init(text:trendModel:pregnancyText:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = swift_allocObject();
  SummaryTrendTileViewModel.init(text:trendModel:pregnancyText:)(a1, a2, a3, a4, a5);
  return v10;
}

uint64_t SummaryTrendTileViewModel.init(text:trendModel:pregnancyText:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v30 = a4;
  uint64_t v31 = a5;
  uint64_t v28 = a2;
  uint64_t v29 = a3;
  uint64_t v27 = a1;
  sub_1C297C560(0, &qword_1EA31E238, (unint64_t *)&qword_1EBB8DEB0, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4F1AC70]);
  uint64_t v25 = *(void *)(v6 - 8);
  uint64_t v26 = v6;
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v25 - v7;
  sub_1C297BC48(0, &qword_1EA31E220, (uint64_t (*)(uint64_t))sub_1C297B898, MEMORY[0x1E4F1AC70]);
  uint64_t v10 = v9;
  uint64_t v11 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v25 - v12;
  sub_1C297B898(0);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v25 - v18;
  uint64_t v20 = v5 + OBJC_IVAR____TtC19HealthVisualization25SummaryTrendTileViewModel__trendModel;
  uint64_t v21 = type metadata accessor for CoreChartTrendViewModel(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v19, 1, 1, v21);
  sub_1C2980370((uint64_t)v19, (uint64_t)v16, (uint64_t (*)(void))sub_1C297B898);
  sub_1C2A9D448();
  sub_1C297F774((uint64_t)v19, (uint64_t (*)(void))sub_1C297B898);
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v20, v13, v10);
  uint64_t v22 = v5 + OBJC_IVAR____TtC19HealthVisualization25SummaryTrendTileViewModel__pregnancyText;
  sub_1C29803D8(0, (unint64_t *)&qword_1EBB8DEB0, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB718]);
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  sub_1C2A9D448();
  (*(void (**)(uint64_t, char *, uint64_t))(v25 + 32))(v22, v8, v26);
  swift_beginAccess();
  uint64_t v32 = v27;
  uint64_t v33 = v28;
  sub_1C2A9D448();
  swift_endAccess();
  uint64_t v23 = v29;
  sub_1C2980370(v29, (uint64_t)v19, (uint64_t (*)(void))sub_1C297B898);
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1C2980370((uint64_t)v19, (uint64_t)v16, (uint64_t (*)(void))sub_1C297B898);
  swift_retain();
  sub_1C2A9D498();
  sub_1C297F774((uint64_t)v19, (uint64_t (*)(void))sub_1C297B898);
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v34 = v30;
  uint64_t v35 = v31;
  swift_retain();
  sub_1C2A9D498();
  sub_1C297F774(v23, (uint64_t (*)(void))sub_1C297B898);
  return v5;
}

uint64_t SummaryTrendTileViewModel.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  SummaryTrendTileViewModel.init()();
  return v0;
}

uint64_t SummaryTrendTileViewModel.init()()
{
  sub_1C297C560(0, &qword_1EA31E238, (unint64_t *)&qword_1EBB8DEB0, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4F1AC70]);
  uint64_t v24 = *(void *)(v1 - 8);
  uint64_t v25 = v1;
  MEMORY[0x1F4188790](v1);
  uint64_t v22 = (char *)v21 - v2;
  sub_1C297BC48(0, &qword_1EA31E220, (uint64_t (*)(uint64_t))sub_1C297B898, MEMORY[0x1E4F1AC70]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v7 = (char *)v21 - v6;
  sub_1C297B898(0);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)v21 - v12;
  uint64_t v14 = v0 + OBJC_IVAR____TtC19HealthVisualization25SummaryTrendTileViewModel__trendModel;
  uint64_t v15 = type metadata accessor for CoreChartTrendViewModel(0);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
  v21[1] = v16 + 56;
  v17(v13, 1, 1, v15);
  uint64_t v23 = sub_1C297B898;
  sub_1C2980370((uint64_t)v13, (uint64_t)v10, (uint64_t (*)(void))sub_1C297B898);
  sub_1C2A9D448();
  sub_1C297F774((uint64_t)v13, (uint64_t (*)(void))sub_1C297B898);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v14, v7, v4);
  uint64_t v18 = v0 + OBJC_IVAR____TtC19HealthVisualization25SummaryTrendTileViewModel__pregnancyText;
  sub_1C29803D8(0, (unint64_t *)&qword_1EBB8DEB0, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB718]);
  long long v28 = 0uLL;
  uint64_t v19 = v22;
  sub_1C2A9D448();
  (*(void (**)(uint64_t, char *, uint64_t))(v24 + 32))(v18, v19, v25);
  swift_beginAccess();
  uint64_t v26 = 0;
  unint64_t v27 = 0xE000000000000000;
  sub_1C2A9D448();
  swift_endAccess();
  v17(v13, 1, 1, v15);
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1C2980370((uint64_t)v13, (uint64_t)v10, (uint64_t (*)(void))v23);
  swift_retain();
  sub_1C2A9D498();
  sub_1C297F774((uint64_t)v13, (uint64_t (*)(void))sub_1C297B898);
  swift_getKeyPath();
  swift_getKeyPath();
  long long v28 = xmmword_1C2AA7D40;
  swift_retain();
  sub_1C2A9D498();
  return v0;
}

uint64_t SummaryTrendTileViewModel.deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC19HealthVisualization25SummaryTrendTileViewModel__textString;
  uint64_t v2 = MEMORY[0x1E4FBB1A0];
  sub_1C29803D8(0, &qword_1EBB8E760, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4F1AC70]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v1, v3);
  uint64_t v4 = v0 + OBJC_IVAR____TtC19HealthVisualization25SummaryTrendTileViewModel__trendModel;
  sub_1C297BC48(0, &qword_1EA31E220, (uint64_t (*)(uint64_t))sub_1C297B898, MEMORY[0x1E4F1AC70]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = v0 + OBJC_IVAR____TtC19HealthVisualization25SummaryTrendTileViewModel__pregnancyText;
  sub_1C297C560(0, &qword_1EA31E238, (unint64_t *)&qword_1EBB8DEB0, v2, MEMORY[0x1E4F1AC70]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  return v0;
}

uint64_t SummaryTrendTileViewModel.__deallocating_deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC19HealthVisualization25SummaryTrendTileViewModel__textString;
  uint64_t v2 = MEMORY[0x1E4FBB1A0];
  sub_1C29803D8(0, &qword_1EBB8E760, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4F1AC70]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v1, v3);
  uint64_t v4 = v0 + OBJC_IVAR____TtC19HealthVisualization25SummaryTrendTileViewModel__trendModel;
  sub_1C297BC48(0, &qword_1EA31E220, (uint64_t (*)(uint64_t))sub_1C297B898, MEMORY[0x1E4F1AC70]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = v0 + OBJC_IVAR____TtC19HealthVisualization25SummaryTrendTileViewModel__pregnancyText;
  sub_1C297C560(0, &qword_1EA31E238, (unint64_t *)&qword_1EBB8DEB0, v2, MEMORY[0x1E4F1AC70]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  return swift_deallocClassInstance();
}

uint64_t sub_1C297D658@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for SummaryTrendTileViewModel();
  uint64_t result = sub_1C2A9D408();
  *a1 = result;
  return result;
}

uint64_t SummaryTrendTileView.init(summaryViewModel:)@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for SummaryTrendTileViewModel();
  sub_1C2980280(&qword_1EBB8E598, (void (*)(uint64_t))type metadata accessor for SummaryTrendTileViewModel);
  uint64_t result = sub_1C2A9D588();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t type metadata accessor for SummaryTrendTileViewModel()
{
  uint64_t result = qword_1EBB8E5A0;
  if (!qword_1EBB8E5A0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t SummaryTrendTileView.init(text:trendViewModel:pregnancyText:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  sub_1C297B898(0);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C2980370(a3, (uint64_t)v14, (uint64_t (*)(void))sub_1C297B898);
  type metadata accessor for SummaryTrendTileViewModel();
  swift_allocObject();
  SummaryTrendTileViewModel.init(text:trendModel:pregnancyText:)(a1, a2, (uint64_t)v14, a4, a5);
  sub_1C2980280(&qword_1EBB8E598, (void (*)(uint64_t))type metadata accessor for SummaryTrendTileViewModel);
  uint64_t v15 = sub_1C2A9D588();
  uint64_t v17 = v16;
  uint64_t result = sub_1C297F774(a3, (uint64_t (*)(void))sub_1C297B898);
  *a6 = v15;
  a6[1] = v17;
  return result;
}

uint64_t SummaryTrendTileView.body.getter@<X0>(uint64_t a1@<X8>)
{
  sub_1C297D9C4();
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v1;
  uint64_t v6 = v1[1];
  *(void *)uint64_t v5 = sub_1C2A9D738();
  *((void *)v5 + 1) = 0;
  v5[16] = 0;
  sub_1C297F5F8();
  sub_1C297E008(v7, v6, &v5[*(int *)(v8 + 44)]);
  uint64_t v9 = sub_1C2A9DAE8();
  LOBYTE(v7) = sub_1C2A9D878();
  sub_1C2980370((uint64_t)v5, a1, (uint64_t (*)(void))sub_1C297D9C4);
  sub_1C297F690();
  uint64_t v11 = a1 + *(int *)(v10 + 36);
  *(void *)uint64_t v11 = v9;
  *(unsigned char *)(v11 + 8) = v7;
  return sub_1C297F774((uint64_t)v5, (uint64_t (*)(void))sub_1C297D9C4);
}

void sub_1C297D9C4()
{
  if (!qword_1EA31E248)
  {
    sub_1C297BC48(255, &qword_1EA31E250, (uint64_t (*)(uint64_t))sub_1C297DA58, MEMORY[0x1E4F3F108]);
    sub_1C297DF80();
    unint64_t v0 = sub_1C2A9DB58();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EA31E248);
    }
  }
}

void sub_1C297DA58()
{
  if (!qword_1EA31E258)
  {
    sub_1C297DB24();
    sub_1C297DC58();
    sub_1C297DE34(255, &qword_1EA31E270, MEMORY[0x1E4F3EE70], MEMORY[0x1E4F3CAB0], MEMORY[0x1E4F3CC10]);
    sub_1C297DCDC(255);
    TupleTypeMetadatCGFloat a = swift_getTupleTypeMetadata();
    if (!v1) {
      atomic_store(TupleTypeMetadata, (unint64_t *)&qword_1EA31E258);
    }
  }
}

void sub_1C297DB24()
{
  if (!qword_1EBB8E7C0)
  {
    sub_1C297DBC4();
    sub_1C297DE34(255, &qword_1EBB8E7D0, MEMORY[0x1E4F3D9F8], MEMORY[0x1E4F3D9F0], MEMORY[0x1E4F3D990]);
    unint64_t v0 = sub_1C2A9D5B8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EBB8E7C0);
    }
  }
}

void sub_1C297DBC4()
{
  if (!qword_1EBB8E7B8)
  {
    sub_1C2973598();
    sub_1C297C560(255, &qword_1EBB8E7F8, (unint64_t *)&qword_1EBB913F8, MEMORY[0x1E4FBB550], MEMORY[0x1E4F3DF18]);
    unint64_t v0 = sub_1C2A9D5B8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EBB8E7B8);
    }
  }
}

void sub_1C297DC58()
{
  if (!qword_1EA31E260)
  {
    sub_1C297F724(255, &qword_1EA31E268, MEMORY[0x1E4F3E2F8], MEMORY[0x1E4F3CAB0], MEMORY[0x1E4F3CC10]);
    unint64_t v0 = sub_1C2A9E328();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EA31E260);
    }
  }
}

void sub_1C297DCDC(uint64_t a1)
{
}

void sub_1C297DD10()
{
  if (!qword_1EA31E280)
  {
    sub_1C297DD78();
    sub_1C2A9D838();
    unint64_t v0 = sub_1C2A9D5B8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EA31E280);
    }
  }
}

void sub_1C297DD78()
{
  if (!qword_1EA31E288)
  {
    sub_1C297DE34(255, &qword_1EBB8E7A0, type metadata accessor for CoreChartTrendDiagram, MEMORY[0x1E4F3CAB0], MEMORY[0x1E4F3CC10]);
    sub_1C297DEA0();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&qword_1EA31E288);
    }
  }
}

void sub_1C297DE34(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    unint64_t v10 = a5(a1, v9, a4);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

unint64_t sub_1C297DEA0()
{
  unint64_t result = qword_1EA31E290;
  if (!qword_1EA31E290)
  {
    sub_1C297DE34(255, &qword_1EBB8E7A0, type metadata accessor for CoreChartTrendDiagram, MEMORY[0x1E4F3CAB0], MEMORY[0x1E4F3CC10]);
    sub_1C2980280(&qword_1EA31E298, (void (*)(uint64_t))type metadata accessor for CoreChartTrendDiagram);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA31E290);
  }
  return result;
}

unint64_t sub_1C297DF80()
{
  unint64_t result = qword_1EA31E2A0;
  if (!qword_1EA31E2A0)
  {
    sub_1C297BC48(255, &qword_1EA31E250, (uint64_t (*)(uint64_t))sub_1C297DA58, MEMORY[0x1E4F3F108]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA31E2A0);
  }
  return result;
}

uint64_t sub_1C297E008@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v171 = a1;
  v197 = a3;
  uint64_t v167 = sub_1C2A9D818();
  uint64_t v166 = *(void *)(v167 - 8);
  MEMORY[0x1F4188790](v167);
  v165 = (char *)&v161 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v162 = type metadata accessor for CoreChartTrendDiagram(0);
  MEMORY[0x1F4188790](v162);
  v161 = (void **)((char *)&v161 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v6);
  uint64_t v163 = (uint64_t)&v161 - v7;
  uint64_t v8 = MEMORY[0x1E4F3CAB0];
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4F3CC10];
  sub_1C297DE34(0, &qword_1EBB8E7A0, type metadata accessor for CoreChartTrendDiagram, MEMORY[0x1E4F3CAB0], MEMORY[0x1E4F3CC10]);
  uint64_t v194 = v10;
  MEMORY[0x1F4188790](v10);
  uint64_t v164 = (uint64_t)&v161 - v11;
  sub_1C297DD78();
  uint64_t v173 = v12;
  uint64_t v172 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  v170 = (char *)&v161 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C297DD10();
  uint64_t v196 = v14;
  uint64_t v195 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  v169 = (char *)&v161 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v168 = (uint64_t)&v161 - v17;
  sub_1C297B898(0);
  MEMORY[0x1F4188790](v18 - 8);
  v190 = (char *)&v161 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v188 = type metadata accessor for CoreChartTrendViewModel(0);
  uint64_t v187 = *(void *)(v188 - 8);
  MEMORY[0x1F4188790](v188);
  v192 = (char *)&v161 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v193 = (uint64_t)&v161 - v22;
  sub_1C297DCDC(0);
  MEMORY[0x1F4188790](v23 - 8);
  uint64_t v206 = (uint64_t)&v161 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v25);
  uint64_t v207 = (uint64_t)&v161 - v26;
  uint64_t v186 = sub_1C2A9DB78();
  uint64_t v185 = *(void *)(v186 - 8);
  MEMORY[0x1F4188790](v186);
  v184 = (char *)&v161 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C297DE34(0, &qword_1EA31E270, MEMORY[0x1E4F3EE70], v8, v9);
  uint64_t v183 = v28;
  MEMORY[0x1F4188790](v28);
  uint64_t v205 = (uint64_t)&v161 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v30);
  uint64_t v203 = (uint64_t)&v161 - v31;
  uint64_t v32 = sub_1C2A9D928();
  uint64_t v33 = *(void *)(v32 - 8);
  uint64_t v214 = v32;
  uint64_t v215 = v33;
  MEMORY[0x1F4188790](v32);
  v213 = (char *)&v161 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C297FFDC(0);
  MEMORY[0x1F4188790](v35 - 8);
  id v37 = (char *)&v161 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = sub_1C2A9D958();
  uint64_t v39 = *(void *)(v38 - 8);
  MEMORY[0x1F4188790](v38);
  uint64_t v41 = (char *)&v161 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = sub_1C2A9D6F8();
  MEMORY[0x1F4188790](v42 - 8);
  sub_1C2A9D6E8();
  sub_1C2A9D6D8();
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v204 = a2;
  swift_retain();
  sub_1C2A9D488();
  swift_release();
  swift_release();
  swift_release();
  sub_1C2A9D6C8();
  swift_bridgeObjectRelease();
  sub_1C2A9D6D8();
  sub_1C2A9D718();
  uint64_t v211 = sub_1C2A9D988();
  v212 = v43;
  uint64_t v45 = v44;
  char v47 = v46 & 1;
  uint64_t v48 = *MEMORY[0x1E4F3E188];
  uint64_t v49 = *(void (**)(char *, void, uint64_t))(v39 + 104);
  uint64_t v182 = v39 + 104;
  v181 = v49;
  v49(v41, v48, v38);
  uint64_t v50 = *MEMORY[0x1E4F3E090];
  uint64_t v51 = sub_1C2A9D8A8();
  uint64_t v52 = *(void *)(v51 - 8);
  uint64_t v53 = *(void (**)(char *, void, uint64_t))(v52 + 104);
  unsigned int v180 = v50;
  uint64_t v179 = v52 + 104;
  v177 = v53;
  v53(v37, v50, v51);
  v178 = *(void (**)(char *, void, uint64_t, uint64_t))(v52 + 56);
  v178(v37, 0, 1, v51);
  sub_1C2A9D908();
  v210 = v37;
  sub_1C297F774((uint64_t)v37, (uint64_t (*)(void))sub_1C297FFDC);
  uint64_t v54 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
  v198 = v41;
  uint64_t v208 = v39 + 8;
  uint64_t v209 = v38;
  v176 = v54;
  v54((uint64_t)v41, v38);
  uint64_t v55 = v215;
  unint64_t v56 = *(void (**)(void))(v215 + 104);
  double v57 = v213;
  unsigned int v175 = *MEMORY[0x1E4F3E0F8];
  uint64_t v58 = v214;
  v174 = (void (*)(char *, void, uint64_t))v56;
  v56(v213);
  sub_1C2A9D938();
  swift_release();
  uint64_t v59 = v55 + 8;
  id v60 = *(void (**)(char *, uint64_t))(v55 + 8);
  uint64_t v215 = v59;
  v60(v57, v58);
  sub_1C2A9D8E8();
  sub_1C2A9D918();
  swift_release();
  uint64_t v61 = v211;
  uint64_t v201 = sub_1C2A9D978();
  uint64_t v200 = v62;
  int v189 = v63;
  uint64_t v202 = v64;
  swift_release();
  sub_1C2980010(v61, v45, v47);
  swift_bridgeObjectRelease();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v191 = swift_getKeyPath();
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  sub_1C2A9D488();
  swift_release();
  swift_release();
  swift_release();
  if (v219)
  {
    sub_1C295CAF4();
    uint64_t v65 = sub_1C2A9D9A8();
    uint64_t v67 = v66;
    v212 = v60;
    char v69 = v68 & 1;
    uint64_t v70 = (uint64_t)v198;
    uint64_t v71 = v209;
    v181(v198, *MEMORY[0x1E4F3E138], v209);
    uint64_t v72 = (uint64_t)v210;
    v177(v210, v180, v51);
    v178((char *)v72, 0, 1, v51);
    sub_1C2A9D908();
    sub_1C297F774(v72, (uint64_t (*)(void))sub_1C297FFDC);
    v176(v70, v71);
    uint64_t v74 = v213;
    uint64_t v73 = v214;
    v174(v213, v175, v214);
    sub_1C2A9D938();
    swift_release();
    v212(v74, v73);
    v198 = (char *)sub_1C2A9D978();
    uint64_t v214 = v76;
    uint64_t v215 = v75;
    char v78 = v77;
    swift_release();
    v213 = (char *)(v78 & 1);
    sub_1C2980010(v65, v67, v69);
    swift_bridgeObjectRelease();
    unsigned __int8 v79 = sub_1C2A9D888();
    sub_1C2A9D508();
    uint64_t v211 = v81;
    v212 = v80;
    v210 = v82;
    uint64_t v208 = v83;
    uint64_t v209 = v79;
  }
  else
  {
    v198 = 0;
    uint64_t v214 = 0;
    uint64_t v215 = 0;
    v212 = 0;
    v213 = 0;
    uint64_t v209 = 0;
    v210 = 0;
    uint64_t v211 = 0;
    uint64_t v208 = 0;
  }
  long long v84 = v184;
  sub_1C2A9DB68();
  char v85 = sub_1C2A9D888();
  sub_1C2A9D508();
  uint64_t v87 = v86;
  uint64_t v89 = v88;
  uint64_t v91 = v90;
  uint64_t v93 = v92;
  uint64_t v94 = v185;
  uint64_t v95 = v205;
  uint64_t v96 = v186;
  (*(void (**)(uint64_t, char *, uint64_t))(v185 + 16))(v205, v84, v186);
  uint64_t v97 = v95 + *(int *)(v183 + 36);
  *(unsigned char *)uint64_t v97 = v85;
  *(void *)(v97 + 8) = v87;
  *(void *)(v97 + 16) = v89;
  *(void *)(v97 + 24) = v91;
  *(void *)(v97 + 32) = v93;
  *(unsigned char *)(v97 + 40) = 0;
  (*(void (**)(char *, uint64_t))(v94 + 8))(v84, v96);
  uint64_t v98 = v203;
  sub_1C2980030(v95, v203);
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v99 = v204;
  swift_retain();
  uint64_t v100 = (uint64_t)v190;
  sub_1C2A9D488();
  swift_release();
  swift_release();
  swift_release();
  int v101 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v187 + 48))(v100, 1, v188);
  uint64_t v102 = v207;
  uint64_t v103 = v194;
  uint64_t v104 = (uint64_t)v192;
  if (v101 == 1)
  {
    sub_1C297F774(v100, (uint64_t (*)(void))sub_1C297B898);
    uint64_t v105 = 1;
  }
  else
  {
    uint64_t v106 = v100;
    uint64_t v107 = v193;
    sub_1C2980308(v106, v193, type metadata accessor for CoreChartTrendViewModel);
    sub_1C2980370(v107, v104, type metadata accessor for CoreChartTrendViewModel);
    uint64_t v108 = (uint64_t)v161;
    void *v161 = 0x4000000000000000;
    char v109 = (int *)v162;
    uint64_t v110 = (uint64_t *)(v108 + *(int *)(v162 + 20));
    *uint64_t v110 = swift_getKeyPath();
    sub_1C297BC48(0, &qword_1EBB8E770, MEMORY[0x1E4F3C5D0], MEMORY[0x1E4F3C648]);
    swift_storeEnumTagMultiPayload();
    char v111 = (uint64_t *)(v108 + v109[6]);
    sub_1C2A9CC28();
    sub_1C2980280(&qword_1EBB8FB98, MEMORY[0x1E4F66428]);
    *char v111 = sub_1C2A9D608();
    v111[1] = v112;
    unsigned __int16 v113 = (uint64_t *)(v108 + v109[7]);
    sub_1C2A9CBC8();
    sub_1C2980280(&qword_1EA31E2D0, MEMORY[0x1E4F66418]);
    *unsigned __int16 v113 = sub_1C2A9D608();
    v113[1] = v114;
    uint64_t v115 = v109[9];
    *(unsigned char *)(v108 + v115) = 0;
    uint64_t v116 = (_DWORD *)(v108 + v109[8]);
    sub_1C2980370(v104, (uint64_t)v116, type metadata accessor for CoreChartTrendViewModel);
    if (!*v116) {
      *(unsigned char *)(v108 + v115) = 1;
    }
    sub_1C29802C8();
    double v117 = (void *)sub_1C2A9E258();
    objc_msgSend(v117, sel_lineHeight);
    uint64_t v119 = v118;

    sub_1C297F774(v104, type metadata accessor for CoreChartTrendViewModel);
    *(void *)(v108 + v109[10]) = v119;
    uint64_t v120 = v163;
    sub_1C2980308(v108, v163, type metadata accessor for CoreChartTrendDiagram);
    char v121 = sub_1C2A9D888();
    sub_1C2A9D508();
    uint64_t v123 = v122;
    uint64_t v125 = v124;
    uint64_t v127 = v126;
    uint64_t v129 = v128;
    uint64_t v130 = v164;
    sub_1C2980370(v120, v164, type metadata accessor for CoreChartTrendDiagram);
    uint64_t v131 = v130 + *(int *)(v103 + 36);
    *(unsigned char *)uint64_t v131 = v121;
    *(void *)(v131 + 8) = v123;
    *(void *)(v131 + 16) = v125;
    *(void *)(v131 + 24) = v127;
    *(void *)(v131 + 32) = v129;
    *(unsigned char *)(v131 + 40) = 0;
    sub_1C297F774(v120, type metadata accessor for CoreChartTrendDiagram);
    double v132 = v165;
    sub_1C2A9D7F8();
    unint64_t v133 = sub_1C297DEA0();
    double v134 = v170;
    sub_1C2A9DA88();
    (*(void (**)(char *, uint64_t))(v166 + 8))(v132, v167);
    sub_1C29801BC(v130, &qword_1EBB8E7A0, type metadata accessor for CoreChartTrendDiagram);
    v220 = &type metadata for SummaryTrendTileView;
    uint64_t v218 = v171;
    uint64_t v219 = v99;
    uint64_t v135 = qword_1EBB92310;
    swift_retain();
    if (v135 != -1) {
      swift_once();
    }
    uint64_t v136 = sub_1C2934FE8(0xD00000000000001ELL, 0x80000001C2AB6CC0, 0, (uint64_t)&v218, 0, 0);
    uint64_t v138 = v137;
    sub_1C2935868((uint64_t)&v218);
    uint64_t v218 = v136;
    uint64_t v219 = v138;
    uint64_t v216 = v103;
    unint64_t v217 = v133;
    swift_getOpaqueTypeConformance2();
    sub_1C295CAF4();
    uint64_t v139 = (uint64_t)v169;
    uint64_t v140 = v173;
    sub_1C2A9DA78();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v172 + 8))(v134, v140);
    sub_1C297F774(v193, type metadata accessor for CoreChartTrendViewModel);
    uint64_t v141 = v168;
    sub_1C2980308(v139, v168, (uint64_t (*)(void))sub_1C297DD10);
    uint64_t v102 = v207;
    sub_1C2980308(v141, v207, (uint64_t (*)(void))sub_1C297DD10);
    uint64_t v105 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v195 + 56))(v102, v105, 1, v196);
  char v142 = v189 & 1;
  LOBYTE(v218) = v189 & 1;
  sub_1C29800CC(v98, v95);
  uint64_t v143 = v206;
  sub_1C2980370(v102, v206, (uint64_t (*)(void))sub_1C297DCDC);
  v144 = v197;
  uint64_t v145 = v200;
  void *v197 = v201;
  v144[1] = v145;
  *((unsigned char *)v144 + 16) = v142;
  uint64_t v146 = KeyPath;
  v144[3] = v202;
  v144[4] = v146;
  *((unsigned char *)v144 + 40) = 0;
  v144[6] = v191;
  v144[7] = 0;
  *((unsigned char *)v144 + 64) = 1;
  uint64_t v147 = (uint64_t)v198;
  v144[9] = 0x3FF0000000000000;
  v144[10] = v147;
  uint64_t v148 = v214;
  v149 = v213;
  v144[11] = v215;
  v144[12] = v149;
  v213 = v149;
  uint64_t v214 = v148;
  uint64_t v151 = v208;
  uint64_t v150 = v209;
  v144[13] = v148;
  v144[14] = v150;
  uint64_t v152 = v211;
  v144[15] = v212;
  v144[16] = v152;
  v144[17] = v210;
  v144[18] = v151;
  uint64_t v208 = v151;
  *((unsigned char *)v144 + 152) = 0;
  sub_1C297DA58();
  uint64_t v154 = v153;
  sub_1C29800CC(v95, (uint64_t)v144 + *(int *)(v153 + 64));
  sub_1C2980370(v143, (uint64_t)v144 + *(int *)(v154 + 80), (uint64_t (*)(void))sub_1C297DCDC);
  uint64_t v155 = v201;
  uint64_t v156 = v200;
  sub_1C2980168(v201, v200, v142);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  uint64_t v157 = (uint64_t)v198;
  sub_1C2980178((uint64_t)v198, v215, (char)v149, v148);
  uint64_t v158 = v155;
  sub_1C2980168(v155, v156, v142);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  sub_1C297F774(v207, (uint64_t (*)(void))sub_1C297DCDC);
  v159 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F3EE70];
  sub_1C29801BC(v203, &qword_1EA31E270, MEMORY[0x1E4F3EE70]);
  sub_1C2980010(v158, v156, v142);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  sub_1C297F774(v206, (uint64_t (*)(void))sub_1C297DCDC);
  sub_1C29801BC(v205, &qword_1EA31E270, v159);
  sub_1C2980234(v157, v215, (char)v213, v214);
  sub_1C2980010(v158, v156, v218);
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

void sub_1C297F5F8()
{
  if (!qword_1EA31E2A8)
  {
    sub_1C297BC48(255, &qword_1EA31E250, (uint64_t (*)(uint64_t))sub_1C297DA58, MEMORY[0x1E4F3F108]);
    unint64_t v0 = sub_1C2A9D578();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EA31E2A8);
    }
  }
}

void sub_1C297F690()
{
  if (!qword_1EA31E2B0)
  {
    sub_1C297D9C4();
    sub_1C297F724(255, &qword_1EBB8E360, MEMORY[0x1E4F3EB98], MEMORY[0x1E4F3EB78], MEMORY[0x1E4F3DBF8]);
    unint64_t v0 = sub_1C2A9D5B8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EA31E2B0);
    }
  }
}

void sub_1C297F724(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t sub_1C297F774(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1C297F7D4()
{
  return MEMORY[0x1E4F1ABE8];
}

uint64_t sub_1C297F7E0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1C297F7FC@<X0>(uint64_t a1@<X8>)
{
  sub_1C297D9C4();
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v1;
  uint64_t v6 = v1[1];
  *(void *)uint64_t v5 = sub_1C2A9D738();
  *((void *)v5 + 1) = 0;
  v5[16] = 0;
  sub_1C297F5F8();
  sub_1C297E008(v7, v6, &v5[*(int *)(v8 + 44)]);
  uint64_t v9 = sub_1C2A9DAE8();
  LOBYTE(v7) = sub_1C2A9D878();
  sub_1C2980370((uint64_t)v5, a1, (uint64_t (*)(void))sub_1C297D9C4);
  sub_1C297F690();
  uint64_t v11 = a1 + *(int *)(v10 + 36);
  *(void *)uint64_t v11 = v9;
  *(unsigned char *)(v11 + 8) = v7;
  return sub_1C297F774((uint64_t)v5, (uint64_t (*)(void))sub_1C297D9C4);
}

uint64_t sub_1C297F914()
{
  return type metadata accessor for SummaryTrendTileViewModel();
}

void sub_1C297F91C()
{
  sub_1C29803D8(319, &qword_1EBB8E760, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4F1AC70]);
  if (v0 <= 0x3F)
  {
    sub_1C297BC48(319, &qword_1EA31E220, (uint64_t (*)(uint64_t))sub_1C297B898, MEMORY[0x1E4F1AC70]);
    if (v1 <= 0x3F)
    {
      sub_1C297C560(319, &qword_1EA31E238, (unint64_t *)&qword_1EBB8DEB0, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4F1AC70]);
      if (v2 <= 0x3F) {
        swift_updateClassMetadata2();
      }
    }
  }
}

uint64_t method lookup function for SummaryTrendTileViewModel(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SummaryTrendTileViewModel);
}

uint64_t dispatch thunk of SummaryTrendTileViewModel.textString.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of SummaryTrendTileViewModel.textString.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of SummaryTrendTileViewModel.textString.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of SummaryTrendTileViewModel.$textString.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of SummaryTrendTileViewModel.$textString.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of SummaryTrendTileViewModel.$textString.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of SummaryTrendTileViewModel.trendModel.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of SummaryTrendTileViewModel.trendModel.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of SummaryTrendTileViewModel.trendModel.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of SummaryTrendTileViewModel.$trendModel.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of SummaryTrendTileViewModel.$trendModel.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of SummaryTrendTileViewModel.$trendModel.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of SummaryTrendTileViewModel.pregnancyText.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of SummaryTrendTileViewModel.pregnancyText.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of SummaryTrendTileViewModel.pregnancyText.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of SummaryTrendTileViewModel.$pregnancyText.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of SummaryTrendTileViewModel.$pregnancyText.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of SummaryTrendTileViewModel.$pregnancyText.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of SummaryTrendTileViewModel.__allocating_init(text:trendModel:pregnancyText:)()
{
  return (*(uint64_t (**)(void))(v0 + 248))();
}

uint64_t dispatch thunk of SummaryTrendTileViewModel.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 256))();
}

void *initializeBufferWithCopyOfBuffer for SummaryTrendTileView(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

uint64_t destroy for SummaryTrendTileView()
{
  return swift_release();
}

void *assignWithCopy for SummaryTrendTileView(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

void *assignWithTake for SummaryTrendTileView(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for SummaryTrendTileView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SummaryTrendTileView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SummaryTrendTileView()
{
  return &type metadata for SummaryTrendTileView;
}

unint64_t sub_1C297FEB0()
{
  unint64_t result = qword_1EA31E2B8;
  if (!qword_1EA31E2B8)
  {
    sub_1C297F690();
    sub_1C2980280(&qword_1EA31E2C0, (void (*)(uint64_t))sub_1C297D9C4);
    sub_1C297FF58();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA31E2B8);
  }
  return result;
}

unint64_t sub_1C297FF58()
{
  unint64_t result = qword_1EBB8E7D8;
  if (!qword_1EBB8E7D8)
  {
    sub_1C297F724(255, &qword_1EBB8E360, MEMORY[0x1E4F3EB98], MEMORY[0x1E4F3EB78], MEMORY[0x1E4F3DBF8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB8E7D8);
  }
  return result;
}

void sub_1C297FFDC(uint64_t a1)
{
}

uint64_t sub_1C2980010(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_release();
  }
  else {
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_1C2980030(uint64_t a1, uint64_t a2)
{
  sub_1C297DE34(0, &qword_1EA31E270, MEMORY[0x1E4F3EE70], MEMORY[0x1E4F3CAB0], MEMORY[0x1E4F3CC10]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C29800CC(uint64_t a1, uint64_t a2)
{
  sub_1C297DE34(0, &qword_1EA31E270, MEMORY[0x1E4F3EE70], MEMORY[0x1E4F3CAB0], MEMORY[0x1E4F3CC10]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C2980168(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_retain();
  }
  else {
    return swift_bridgeObjectRetain();
  }
}

uint64_t sub_1C2980178(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    sub_1C2980168(result, a2, a3 & 1);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1C29801BC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  sub_1C297DE34(0, a2, a3, MEMORY[0x1E4F3CAB0], MEMORY[0x1E4F3CC10]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_1C2980234(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    sub_1C2980010(result, a2, a3 & 1);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1C2980280(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1C29802C8()
{
  unint64_t result = qword_1EBB91BA8;
  if (!qword_1EBB91BA8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EBB91BA8);
  }
  return result;
}

uint64_t sub_1C2980308(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1C2980370(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void sub_1C29803D8(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t sub_1C2980428()
{
  sub_1C29376D4(0, (unint64_t *)&qword_1EBB92500);
  uint64_t result = MEMORY[0x1C8763F70]((id)*MEMORY[0x1E4F2A5F0]);
  qword_1EA32B580 = result;
  return result;
}

id sub_1C298047C()
{
  id result = objc_msgSend(self, sel_percentUnit);
  qword_1EA32B588 = (uint64_t)result;
  return result;
}

void sub_1C29804B8()
{
  qword_1EA32B590 = 0x405E000000000000;
}

uint64_t AFibBurdenPDFHistogramRenderableFactory.generateHighlight(for:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  int v63 = a2;
  uint64_t v4 = sub_1C2A9CB88();
  uint64_t v60 = *(void *)(v4 - 8);
  uint64_t v61 = v4;
  MEMORY[0x1F4188790](v4);
  uint64_t v62 = (char *)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_1C2A9CFE8();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (int *)type metadata accessor for TimeBasedDistributionChartModel();
  MEMORY[0x1F4188790](v10);
  uint64_t v66 = (char *)&v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for TimeBasedDistribution();
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v14 = (char *)&v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = a1;
  sub_1C297013C(a1, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for TimeBasedDistribution);
  LOBYTE(v64) = sub_1C2A7B4E0((uint64_t)v14) & 1;
  int v64 = v64;
  uint64_t v15 = qword_1EA31DC18;
  id v58 = *(id *)(v2 + 16);
  if (v15 != -1) {
    swift_once();
  }
  uint64_t v16 = (void *)(v2 + 64);
  uint64_t v59 = v2;
  uint64_t v17 = v2 + 24;
  id v18 = objc_msgSend((id)qword_1EA32B580, sel_identifier, v58, v59);
  uint64_t v19 = sub_1C2A9DD28();
  uint64_t v21 = v20;

  if (sub_1C2A9DD28() == v19 && v22 == v21)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v23 = sub_1C2A9E8D8();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v23 & 1) == 0)
    {
      sub_1C2A9CF98();
      uint64_t v24 = v65;
      uint64_t v26 = v66;
      goto LABEL_11;
    }
  }
  uint64_t v24 = v65;
  if (qword_1EA31DC78 != -1) {
    swift_once();
  }
  uint64_t v25 = __swift_project_value_buffer(v6, (uint64_t)qword_1EA31E6B8);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v25, v6);
  uint64_t v26 = v66;
LABEL_11:
  sub_1C2A0AE18(v16, (uint64_t)&v26[v10[6]]);
  sub_1C297013C(v24, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for TimeBasedDistribution);
  char v27 = sub_1C2A7B4E0((uint64_t)v14) & 1;
  sub_1C2981338((uint64_t)v16, (uint64_t)(v26 + 8));
  sub_1C2981338(v17, (uint64_t)&v26[v10[7]]);
  *uint64_t v26 = v27;
  (*(void (**)(unsigned char *, char *, uint64_t))(v7 + 32))(&v26[v10[8]], v9, v6);

  if (v64)
  {
    uint64_t v32 = (int *)type metadata accessor for AFibBurdenTimeOfDayChart();
    uint64_t v72 = (uint64_t)v32;
    uint64_t v73 = sub_1C29813F8(&qword_1EA31E2D8, (void (*)(uint64_t))type metadata accessor for AFibBurdenTimeOfDayChart);
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v71);
    sub_1C297013C(v24, (uint64_t)boxed_opaque_existential_1 + v32[6], (uint64_t (*)(void))type metadata accessor for TimeBasedDistribution);
    sub_1C297013C((uint64_t)v26, (uint64_t)boxed_opaque_existential_1 + v32[7], (uint64_t (*)(void))type metadata accessor for TimeBasedDistributionChartModel);
    if (qword_1EA31DC28 != -1) {
      swift_once();
    }
    uint64_t v34 = qword_1EA32B590;
    uint64_t *boxed_opaque_existential_1 = 0;
    *((unsigned char *)boxed_opaque_existential_1 + 8) = 1;
    boxed_opaque_existential_1[2] = v34;
    *((unsigned char *)boxed_opaque_existential_1 + 24) = 0;
    uint64_t v31 = (char *)boxed_opaque_existential_1 + v32[8];
  }
  else
  {
    uint64_t v28 = type metadata accessor for AFibBurdenDayOfWeekChart();
    uint64_t v72 = v28;
    uint64_t v73 = sub_1C29813F8(&qword_1EA31E2F0, (void (*)(uint64_t))type metadata accessor for AFibBurdenDayOfWeekChart);
    uint64_t v29 = __swift_allocate_boxed_opaque_existential_1(v71);
    sub_1C297013C(v24, (uint64_t)v29 + *(int *)(v28 + 28), (uint64_t (*)(void))type metadata accessor for TimeBasedDistribution);
    sub_1C297013C((uint64_t)v26, (uint64_t)v29 + *(int *)(v28 + 32), (uint64_t (*)(void))type metadata accessor for TimeBasedDistributionChartModel);
    if (qword_1EA31DC28 != -1) {
      swift_once();
    }
    uint64_t v30 = qword_1EA32B590;
    *uint64_t v29 = 0;
    *((unsigned char *)v29 + 8) = 1;
    v29[2] = v30;
    *((unsigned char *)v29 + 24) = 0;
    uint64_t v31 = (char *)v29 + 25;
  }
  *uint64_t v31 = 1;
  uint64_t v35 = MEMORY[0x1C8762930]();
  uint64_t v36 = (void *)*MEMORY[0x1E4FB06F8];
  id v37 = self;
  id v38 = v36;
  id v39 = objc_msgSend(v37, sel_systemFontOfSize_, 12.0);
  uint64_t v70 = sub_1C29376D4(0, (unint64_t *)&qword_1EBB91BA8);
  *(void *)&long long v69 = v39;
  sub_1C2937880(&v69, v68);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v67 = (void *)v35;
  sub_1C2960B5C(v68, v38, isUniquelyReferenced_nonNull_native);
  id v58 = v67;

  swift_bridgeObjectRelease();
  sub_1C2981288();
  uint64_t v41 = swift_allocObject();
  *(_OWORD *)(v41 + 16) = xmmword_1C2AA7FA0;
  LOBYTE(v38) = v64;
  uint64_t v42 = sub_1C29A1104(v64);
  uint64_t v44 = v43;
  LODWORD(v59) = *MEMORY[0x1E4F66360];
  uint64_t v45 = v61;
  uint64_t v60 = *(void *)(v60 + 104);
  char v46 = v62;
  ((void (*)(char *))v60)(v62);
  uint64_t v47 = sub_1C2A9CAA8();
  uint64_t v48 = sub_1C2A9CB68();
  uint64_t v49 = MEMORY[0x1E4F66338];
  *(void *)(v41 + 56) = v48;
  *(void *)(v41 + 64) = v49;
  __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v41 + 32));
  MEMORY[0x1C8762A10](v42, v44, v46, v47);
  uint64_t v50 = sub_1C2A9CB98();
  uint64_t v51 = MEMORY[0x1E4F66368];
  *(void *)(v41 + 96) = v50;
  *(void *)(v41 + 104) = v51;
  __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v41 + 72));
  sub_1C2A9CBA8();
  AFibBurdenPDFHistogramTextSupport.makeDescription(for:flavor:)(v65, (char)v38);
  ((void (*)(char *, void, uint64_t))v60)(v46, v59, v45);
  uint64_t v52 = sub_1C2A9CE08();
  uint64_t v53 = MEMORY[0x1E4F666E8];
  *(void *)(v41 + 136) = v52;
  *(void *)(v41 + 144) = v53;
  __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v41 + 112));
  sub_1C2A9CDF8();
  *(void *)(v41 + 176) = v50;
  *(void *)(v41 + 184) = v51;
  __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v41 + 152));
  sub_1C2A9CBA8();
  sub_1C2981338((uint64_t)v71, v41 + 192);
  uint64_t v54 = sub_1C2A9CE48();
  uint64_t v55 = MEMORY[0x1E4F66708];
  unint64_t v56 = v63;
  v63[3] = v54;
  v56[4] = v55;
  __swift_allocate_boxed_opaque_existential_1(v56);
  sub_1C2A9CE38();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v71);
  return sub_1C298139C((uint64_t)v66);
}

uint64_t AFibBurdenPDFHistogramRenderableFactory.deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  __swift_destroy_boxed_opaque_existential_1(v0 + 64);
  swift_release();
  uint64_t v1 = v0 + OBJC_IVAR____TtC19HealthVisualization39AFibBurdenPDFHistogramRenderableFactory_logger;
  uint64_t v2 = sub_1C2A9CFE8();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t AFibBurdenPDFHistogramRenderableFactory.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  __swift_destroy_boxed_opaque_existential_1(v0 + 64);
  swift_release();
  uint64_t v1 = v0 + OBJC_IVAR____TtC19HealthVisualization39AFibBurdenPDFHistogramRenderableFactory_logger;
  uint64_t v2 = sub_1C2A9CFE8();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t sub_1C2980E50@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return AFibBurdenPDFHistogramRenderableFactory.generateHighlight(for:)(a1, a2);
}

void *sub_1C2980E74(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v34 = a2;
  uint64_t v5 = sub_1C2A9C6E8();
  uint64_t v32 = *(void *)(v5 - 8);
  uint64_t v33 = v5;
  MEMORY[0x1F4188790](v5);
  uint64_t v31 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1C2A9CFE8();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3[2] = a1;
  uint64_t v11 = qword_1EA31DC18;
  id v12 = a1;
  if (v11 != -1) {
    swift_once();
  }
  uint64_t v13 = qword_1EA31DC20;
  id v14 = (id)qword_1EA32B580;
  if (v13 != -1) {
    swift_once();
  }
  uint64_t v15 = (void *)qword_1EA32B588;
  uint64_t v16 = type metadata accessor for TimeBasedDistributionChartTextSupportImpl();
  swift_allocObject();
  sub_1C29A56A0((uint64_t)v12, (uint64_t)v14, (uint64_t)v15);
  uint64_t v18 = v17;

  v3[6] = v16;
  v3[7] = &protocol witness table for TimeBasedDistributionChartTextSupportImpl;
  v3[3] = v18;
  v35[0] = (uint64_t)v12;
  TimeBasedDistributionChartModelFactory.makeChartConfiguration(sampleType:)((void *)qword_1EA32B580, v36);
  sub_1C2981338((uint64_t)v36, (uint64_t)(v3 + 8));
  uint64_t v19 = type metadata accessor for TimeBasedDistributionMaxBucketTextSupport();
  uint64_t v21 = v37;
  uint64_t v20 = v38;
  uint64_t v22 = __swift_project_boxed_opaque_existential_1(v36, v37);
  v35[3] = v21;
  uint64_t v23 = *(void *)(v20 + 8);
  v35[4] = v23;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v35);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v21 - 8) + 16))(boxed_opaque_existential_1, v22, v21);
  uint64_t v25 = v34;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v34, v7);
  uint64_t v26 = sub_1C29A2C90((uint64_t)boxed_opaque_existential_1, (uint64_t)v10, v19, v21, v23);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
  swift_retain();
  char v27 = v31;
  _s19HealthVisualization25PresentationDateProvidingPAAE012presentationD010Foundation0D0VvgZ_0();
  id v28 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F2AC98]), sel_init);
  swift_release();

  type metadata accessor for AFibBurdenPDFHistogramTextSupport();
  uint64_t v29 = (void *)swift_allocObject();
  v29[5] = v19;
  v29[6] = &protocol witness table for TimeBasedDistributionMaxBucketTextSupport;
  v29[2] = v26;
  (*(void (**)(uint64_t, char *, uint64_t))(v32 + 32))((uint64_t)v29 + OBJC_IVAR____TtC19HealthVisualization33AFibBurdenPDFHistogramTextSupport_now, v27, v33);
  *(void *)((char *)v29 + OBJC_IVAR____TtC19HealthVisualization33AFibBurdenPDFHistogramTextSupport_calendarCache) = v28;
  v3[13] = v29;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))((uint64_t)v3 + OBJC_IVAR____TtC19HealthVisualization39AFibBurdenPDFHistogramRenderableFactory_logger, v25, v7);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
  return v3;
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

void sub_1C2981288()
{
  if (!qword_1EA31E2E0)
  {
    sub_1C29812E0();
    unint64_t v0 = sub_1C2A9E8A8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EA31E2E0);
    }
  }
}

unint64_t sub_1C29812E0()
{
  unint64_t result = qword_1EA31E2E8;
  if (!qword_1EA31E2E8)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EA31E2E8);
  }
  return result;
}

uint64_t sub_1C2981338(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1C298139C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for TimeBasedDistributionChartModel();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1C29813F8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t dispatch thunk of AFibBurdenPDFHistogramRenderableFactoryProxy.generateHighlight(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t sub_1C2981454()
{
  return type metadata accessor for AFibBurdenPDFHistogramRenderableFactory();
}

uint64_t type metadata accessor for AFibBurdenPDFHistogramRenderableFactory()
{
  uint64_t result = qword_1EA31E300;
  if (!qword_1EA31E300) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1C29814A8()
{
  uint64_t result = sub_1C2A9CFE8();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for AFibBurdenPDFHistogramRenderableFactory(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for AFibBurdenPDFHistogramRenderableFactory);
}

unint64_t TimeBasedDistributionChartModel.generateTimeOfDayChartPoints(for:)(uint64_t a1)
{
  return sub_1C2981788(a1, v1);
}

uint64_t TimeBasedDistributionChartModel.flavor.getter()
{
  return *v0;
}

uint64_t TimeBasedDistributionChartModel.configuration.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C2981338(v1 + 8, a1);
}

uint64_t TimeBasedDistributionChartModel.design.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for TimeBasedDistributionChartModel();
  return sub_1C2983758(v1 + *(int *)(v3 + 24), a1, (uint64_t (*)(void))type metadata accessor for TimeBasedDistributionChartDesign);
}

uint64_t TimeBasedDistributionChartModel.textSupport.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for TimeBasedDistributionChartModel();
  return sub_1C2981338(v1 + *(int *)(v3 + 28), a1);
}

uint64_t TimeBasedDistributionChartModel.logger.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for TimeBasedDistributionChartModel() + 32);
  uint64_t v4 = sub_1C2A9CFE8();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t TimeBasedDistributionChartModel.init(flavor:configuration:design:textSupport:logger:)@<X0>(char a1@<W0>, long long *a2@<X1>, uint64_t a3@<X2>, long long *a4@<X3>, uint64_t a5@<X4>, unsigned char *a6@<X8>)
{
  *a6 = a1 & 1;
  sub_1C2943434(a2, (uint64_t)(a6 + 8));
  uint64_t v10 = (int *)type metadata accessor for TimeBasedDistributionChartModel();
  sub_1C2985B04(a3, (uint64_t)&a6[v10[6]], (uint64_t (*)(void))type metadata accessor for TimeBasedDistributionChartDesign);
  sub_1C2943434(a4, (uint64_t)&a6[v10[7]]);
  uint64_t v11 = &a6[v10[8]];
  uint64_t v12 = sub_1C2A9CFE8();
  uint64_t v13 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32);
  return v13(v11, a5, v12);
}

unint64_t sub_1C2981788(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v110 = a2;
  uint64_t v98 = type metadata accessor for TimeBasedDistributionChartPoint.TimeOfDay(0);
  uint64_t v97 = *(void *)(v98 - 8);
  MEMORY[0x1F4188790](v98);
  uint64_t v108 = (uint64_t)&v89 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_1C2A9C538();
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v96 = (char *)&v89 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v95 = sub_1C2A9C4F8();
  uint64_t v106 = *(void *)(v95 - 8);
  MEMORY[0x1F4188790](v95);
  uint64_t v94 = (char *)&v89 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v93 = type metadata accessor for TimeBasedDistributionChartPoint.Skeleton(0);
  MEMORY[0x1F4188790](v93);
  uint64_t v107 = (double *)((char *)&v89 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v102 = sub_1C2A9CFE8();
  uint64_t v105 = *(void *)(v102 - 8);
  MEMORY[0x1F4188790](v102);
  uint64_t v9 = (char *)&v89 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void (***)(char *, uint64_t))(a1 + *(int *)(type metadata accessor for TimeBasedDistribution() + 20));
  int64_t v11 = (int64_t)v10[2];
  uint64_t v12 = MEMORY[0x1E4FBC860];
  uint64_t v103 = v9;
  char v109 = v10;
  if (v11)
  {
    uint64_t v113 = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRetain();
    sub_1C29789CC(0, v11, 0);
    uint64_t v12 = v113;
    uint64_t v13 = v10 + 8;
    do
    {
      uint64_t v14 = *(v13 - 4);
      uint64_t v15 = *(v13 - 3);
      *(void *)&long long v112 = *(v13 - 2);
      char v16 = *((unsigned char *)v13 - 8);
      LODWORD(v111) = *((unsigned __int8 *)v13 - 7);
      uint64_t v17 = *v13;
      uint64_t v113 = v12;
      unint64_t v19 = *(void *)(v12 + 16);
      unint64_t v18 = *(void *)(v12 + 24);
      swift_bridgeObjectRetain();
      if (v19 >= v18 >> 1)
      {
        sub_1C29789CC(v18 > 1, v19 + 1, 1);
        uint64_t v12 = v113;
      }
      *(void *)(v12 + 16) = v19 + 1;
      uint64_t v20 = v12 + 48 * v19;
      *(void *)(v20 + 32) = v14;
      *(void *)(v20 + 40) = v14;
      uint64_t v21 = v112;
      *(void *)(v20 + 48) = v15;
      *(void *)(v20 + 56) = v21;
      *(unsigned char *)(v20 + 64) = v16;
      *(unsigned char *)(v20 + 65) = v111;
      *(void *)(v20 + 72) = v17;
      v13 += 5;
      --v11;
    }
    while (v11);
    uint64_t v10 = v109;
    swift_bridgeObjectRelease();
    uint64_t v9 = v103;
  }
  if (*(void *)(v12 + 16))
  {
    sub_1C2985364();
    uint64_t v22 = sub_1C2A9E688();
  }
  else
  {
    uint64_t v22 = MEMORY[0x1E4FBC868];
  }
  uint64_t v113 = v22;
  uint64_t v23 = swift_bridgeObjectRetain();
  sub_1C29853CC(v23, 1, &v113);
  swift_bridgeObjectRelease();
  uint64_t v24 = v113;
  uint64_t v25 = v10[2];
  uint64_t v101 = v113;
  if (v25)
  {
    swift_bridgeObjectRetain();
    uint64_t v26 = v10 + 8;
    uint64_t v27 = MEMORY[0x1E4FBC860];
    do
    {
      if (*((unsigned char *)v26 - 7) == 1)
      {
        long long v112 = *((_OWORD *)v26 - 2);
        uint64_t v31 = *(v26 - 2);
        char v32 = *((unsigned char *)v26 - 8);
        uint64_t v33 = *v26;
        swift_bridgeObjectRetain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v113 = v27;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_1C29789AC(0, *(void *)(v27 + 16) + 1, 1);
          uint64_t v27 = v113;
        }
        unint64_t v29 = *(void *)(v27 + 16);
        unint64_t v28 = *(void *)(v27 + 24);
        if (v29 >= v28 >> 1)
        {
          sub_1C29789AC(v28 > 1, v29 + 1, 1);
          uint64_t v27 = v113;
        }
        *(void *)(v27 + 16) = v29 + 1;
        uint64_t v30 = v27 + 40 * v29;
        *(_OWORD *)(v30 + 32) = v112;
        *(void *)(v30 + 48) = v31;
        *(unsigned char *)(v30 + 56) = v32;
        *(unsigned char *)(v30 + 57) = 1;
        *(void *)(v30 + 64) = v33;
      }
      v26 += 5;
      uint64_t v25 = (void (*)(char *, uint64_t))((char *)v25 - 1);
    }
    while (v25);
    swift_bridgeObjectRelease();
    uint64_t v9 = v103;
    uint64_t v24 = v101;
  }
  else
  {
    uint64_t v27 = MEMORY[0x1E4FBC860];
  }
  unint64_t v89 = *(void *)(v27 + 16);
  swift_release();
  uint64_t v35 = v110;
  uint64_t v36 = *((void *)v110 + 4);
  uint64_t v37 = *((void *)v110 + 5);
  __swift_project_boxed_opaque_existential_1((void *)v110 + 1, v36);
  uint64_t v38 = (*(uint64_t (**)(void, uint64_t))(*(void *)(v37 + 8) + 8))(*v35, v36);
  *(void *)&long long v112 = *(void *)(v38 + 16);
  if ((void)v112)
  {
    uint64_t v91 = (void (**)(unsigned char *, char *, uint64_t))(v106 + 32);
    uint64_t v90 = (void (**)(uint64_t, unsigned char *, uint64_t))(v106 + 16);
    char v109 = (void (**)(char *, uint64_t))(v105 + 8);
    swift_bridgeObjectRetain();
    uint64_t v39 = 0;
    unint64_t v111 = MEMORY[0x1E4FBC860];
    uint64_t v100 = MEMORY[0x1E4FBC840] + 8;
    *(void *)&long long v40 = 136446210;
    long long v99 = v40;
    uint64_t v41 = v102;
    uint64_t v92 = v38;
    while (1)
    {
      if (!*(void *)(v24 + 16) || (unint64_t v42 = sub_1C295DE40(*(void *)(v38 + 8 * v39 + 32)), (v43 & 1) == 0))
      {
        sub_1C2A9CF98();
        id v58 = sub_1C2A9CFC8();
        os_log_type_t v59 = sub_1C2A9E0B8();
        if (os_log_type_enabled(v58, v59))
        {
          uint64_t v60 = swift_slowAlloc();
          uint64_t v61 = swift_slowAlloc();
          uint64_t v113 = v61;
          *(_DWORD *)uint64_t v60 = v99;
          uint64_t v117 = type metadata accessor for TimeBasedDistributionChartModel();
          sub_1C29857CC();
          uint64_t v62 = sub_1C2A9DD58();
          *(void *)(v60 + 4) = sub_1C2957168(v62, v63, &v113);
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1C292A000, v58, v59, "[%{public}s] Expected to have bucket for each component range.", (uint8_t *)v60, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1C87656F0](v61, -1, -1);
          MEMORY[0x1C87656F0](v60, -1, -1);
        }

        (*v109)(v9, v41);
        goto LABEL_24;
      }
      uint64_t v44 = *(void *)(v24 + 56) + 40 * v42;
      uint64_t v105 = *(void *)v44;
      uint64_t v45 = *(uint64_t *)(v44 + 16);
      unsigned int v46 = *(unsigned __int8 *)(v44 + 24);
      int v47 = *(unsigned __int8 *)(v44 + 25);
      uint64_t v48 = *(void *)(v44 + 32);
      uint64_t v49 = type metadata accessor for TimeBasedDistributionChartModel();
      uint64_t v50 = &v110[*(int *)(v49 + 28)];
      uint64_t v51 = *((void *)v50 + 3);
      uint64_t v52 = *((void *)v50 + 4);
      __swift_project_boxed_opaque_existential_1(v50, v51);
      double v104 = *(double *)&v45;
      uint64_t v113 = v45;
      char v114 = v46;
      char v115 = v47;
      uint64_t v116 = v48;
      uint64_t v53 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v52 + 8);
      uint64_t v106 = v48;
      swift_bridgeObjectRetain();
      v53(&v113, v51, v52);
      double v55 = v54;
      unsigned int v56 = v46;
      if ((v46 & 1) == 0 && v47)
      {
        double v57 = (char *)&v110[*(int *)(v49 + 24)];
        if (v57[*(int *)(type metadata accessor for TimeBasedDistributionChartDesign() + 100)] != 1
          || sub_1C2A9DD88() < 4)
        {
          if (v89 <= 1) {
            goto LABEL_38;
          }
LABEL_32:
          unsigned int v56 = 2;
          goto LABEL_39;
        }
        if (!v39) {
          goto LABEL_32;
        }
        unsigned int v56 = 2;
        if (v89 <= 1 && v39 != *(void *)(v92 + 16) - 1) {
LABEL_38:
        }
          unsigned int v56 = 3;
      }
LABEL_39:
      if (v46) {
        double v64 = 0.0;
      }
      else {
        double v64 = v104;
      }
      swift_bridgeObjectRetain();
      sub_1C2A9C528();
      uint64_t v65 = v94;
      sub_1C2A9C508();
      uint64_t KeyPath = swift_getKeyPath();
      MEMORY[0x1F4188790](KeyPath);
      *(&v89 - 2) = v67;
      swift_getKeyPath();
      double v104 = v55;
      uint64_t v68 = 8 * v56;
      uint64_t v69 = *(void *)((char *)&unk_1C2AA81E8 + v68);
      uint64_t v70 = v110;
      uint64_t v71 = (char *)&v110[*(int *)(v49 + 24)];
      uint64_t v72 = type metadata accessor for TimeBasedDistributionChartDesign();
      uint64_t v113 = *(void *)&v71[*(int *)(v72 + 4 * v69)];
      sub_1C2985828();
      swift_retain();
      sub_1C2A9C4D8();
      uint64_t v73 = swift_getKeyPath();
      MEMORY[0x1F4188790](v73);
      *(&v89 - 2) = v74;
      swift_getKeyPath();
      uint64_t v113 = *(void *)&v70[*(int *)(v49 + 24) + *(int *)(v72 + 4 * *(void *)((char *)&unk_1C2AA8208 + v68))];
      sub_1C2985930();
      swift_retain();
      sub_1C2A9C4D8();
      swift_bridgeObjectRelease();
      uint64_t v75 = 44;
      if (v56 < 2) {
        uint64_t v75 = 48;
      }
      uint64_t v76 = *(void *)&v70[*(int *)(v49 + 24) + *(int *)(v72 + v75)];
      char v77 = v107;
      *(unsigned char *)uint64_t v107 = v56;
      v77[1] = v64;
      uint64_t v78 = v93;
      unsigned __int8 v79 = (char *)v77 + *(int *)(v93 + 24);
      uint64_t v80 = v95;
      (*v91)(v79, v65, v95);
      *(void *)((char *)v77 + *(int *)(v78 + 28)) = v76;
      double v81 = (double)v105;
      uint64_t v82 = v98;
      uint64_t v83 = v108;
      (*v90)(v108 + *(int *)(v98 + 28), v79, v80);
      *(unsigned char *)uint64_t v83 = v56;
      *(double *)(v83 + 8) = v64;
      *(double *)(v83 + 16) = v81;
      *(void *)(v83 + *(int *)(v82 + 32)) = v76;
      swift_retain_n();
      swift_bridgeObjectRelease();
      if (swift_isUniquelyReferenced_nonNull_native())
      {
        uint64_t v41 = v102;
        uint64_t v9 = v103;
        uint64_t v24 = v101;
        unint64_t v84 = v111;
      }
      else
      {
        unint64_t v84 = sub_1C299CFB4(0, *(void *)(v111 + 16) + 1, 1, v111);
        uint64_t v41 = v102;
        uint64_t v9 = v103;
        uint64_t v24 = v101;
      }
      unint64_t v86 = *(void *)(v84 + 16);
      unint64_t v85 = *(void *)(v84 + 24);
      uint64_t v38 = v92;
      if (v86 >= v85 >> 1) {
        unint64_t v84 = sub_1C299CFB4(v85 > 1, v86 + 1, 1, v84);
      }
      *(void *)(v84 + 16) = v86 + 1;
      unint64_t v87 = (*(unsigned __int8 *)(v97 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v97 + 80);
      unint64_t v111 = v84;
      sub_1C2985B04(v108, v84 + v87 + *(void *)(v97 + 72) * v86, type metadata accessor for TimeBasedDistributionChartPoint.TimeOfDay);
      sub_1C2985A44((uint64_t)v107, type metadata accessor for TimeBasedDistributionChartPoint.Skeleton);
LABEL_24:
      if ((void)v112 == ++v39)
      {
        swift_release();
        swift_bridgeObjectRelease_n();
        return v111;
      }
    }
  }
  swift_bridgeObjectRelease();
  swift_release();
  return MEMORY[0x1E4FBC860];
}

uint64_t type metadata accessor for TimeBasedDistributionChartModel()
{
  uint64_t result = qword_1EA31E328;
  if (!qword_1EA31E328) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1C2982348(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v122 = a2;
  uint64_t v105 = type metadata accessor for TimeBasedDistributionChartPoint.DayOfWeek(0);
  uint64_t v104 = *(void *)(v105 - 8);
  MEMORY[0x1F4188790](v105);
  uint64_t v118 = (uint64_t)&v101 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_1C2A9C538();
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v108 = (char *)&v101 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_1C2A9C4F8();
  uint64_t v7 = *(void (***)(char *, uint64_t))(v6 - 8);
  uint64_t v120 = v6;
  char v121 = v7;
  MEMORY[0x1F4188790](v6);
  uint64_t v107 = (char *)&v101 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v106 = type metadata accessor for TimeBasedDistributionChartPoint.Skeleton(0);
  MEMORY[0x1F4188790](v106);
  uint64_t v119 = (double *)((char *)&v101 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v111 = sub_1C2A9CFE8();
  uint64_t v117 = *(void *)(v111 - 8);
  MEMORY[0x1F4188790](v111);
  int64_t v11 = (char *)&v101 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(a1 + *(int *)(type metadata accessor for TimeBasedDistribution() + 20));
  int64_t v13 = *(void *)(v12 + 16);
  uint64_t v14 = MEMORY[0x1E4FBC860];
  uint64_t v113 = v11;
  uint64_t v123 = v12;
  if (v13)
  {
    uint64_t v126 = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRetain();
    sub_1C29789CC(0, v13, 0);
    uint64_t v14 = v126;
    uint64_t v15 = (uint64_t *)(v12 + 64);
    do
    {
      uint64_t v16 = *(v15 - 4);
      uint64_t v17 = *(v15 - 3);
      uint64_t v18 = *(v15 - 2);
      LODWORD(v125) = *((unsigned __int8 *)v15 - 8);
      LODWORD(v124) = *((unsigned __int8 *)v15 - 7);
      uint64_t v19 = *v15;
      uint64_t v126 = v14;
      unint64_t v21 = *(void *)(v14 + 16);
      unint64_t v20 = *(void *)(v14 + 24);
      swift_bridgeObjectRetain();
      if (v21 >= v20 >> 1)
      {
        sub_1C29789CC(v20 > 1, v21 + 1, 1);
        uint64_t v14 = v126;
      }
      *(void *)(v14 + 16) = v21 + 1;
      uint64_t v22 = v14 + 48 * v21;
      *(void *)(v22 + 32) = v16;
      *(void *)(v22 + 40) = v16;
      *(void *)(v22 + 48) = v17;
      *(void *)(v22 + 56) = v18;
      *(unsigned char *)(v22 + 64) = v125;
      *(unsigned char *)(v22 + 65) = v124;
      *(void *)(v22 + 72) = v19;
      v15 += 5;
      --v13;
    }
    while (v13);
    uint64_t v12 = v123;
    swift_bridgeObjectRelease();
    int64_t v11 = v113;
  }
  if (*(void *)(v14 + 16))
  {
    sub_1C2985364();
    uint64_t v23 = sub_1C2A9E688();
  }
  else
  {
    uint64_t v23 = MEMORY[0x1E4FBC868];
  }
  uint64_t v126 = v23;
  uint64_t v24 = swift_bridgeObjectRetain();
  sub_1C29853CC(v24, 1, &v126);
  swift_bridgeObjectRelease();
  uint64_t v25 = v126;
  uint64_t v26 = *(void *)(v12 + 16);
  uint64_t v112 = v126;
  if (v26)
  {
    swift_bridgeObjectRetain();
    uint64_t v27 = (void *)(v12 + 64);
    uint64_t v28 = MEMORY[0x1E4FBC860];
    do
    {
      if (*((unsigned char *)v27 - 7) == 1)
      {
        long long v125 = *((_OWORD *)v27 - 2);
        uint64_t v32 = *(v27 - 2);
        char v33 = *((unsigned char *)v27 - 8);
        uint64_t v34 = *v27;
        swift_bridgeObjectRetain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v126 = v28;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_1C29789AC(0, *(void *)(v28 + 16) + 1, 1);
          uint64_t v28 = v126;
        }
        unint64_t v30 = *(void *)(v28 + 16);
        unint64_t v29 = *(void *)(v28 + 24);
        if (v30 >= v29 >> 1)
        {
          sub_1C29789AC(v29 > 1, v30 + 1, 1);
          uint64_t v28 = v126;
        }
        *(void *)(v28 + 16) = v30 + 1;
        uint64_t v31 = v28 + 40 * v30;
        *(_OWORD *)(v31 + 32) = v125;
        *(void *)(v31 + 48) = v32;
        *(unsigned char *)(v31 + 56) = v33;
        *(unsigned char *)(v31 + 57) = 1;
        *(void *)(v31 + 64) = v34;
      }
      v27 += 5;
      --v26;
    }
    while (v26);
    swift_bridgeObjectRelease();
    int64_t v11 = v113;
    uint64_t v25 = v112;
  }
  else
  {
    uint64_t v28 = MEMORY[0x1E4FBC860];
  }
  unint64_t v101 = *(void *)(v28 + 16);
  swift_release();
  uint64_t v36 = v122;
  uint64_t v37 = *((void *)v122 + 4);
  uint64_t v38 = *((void *)v122 + 5);
  __swift_project_boxed_opaque_existential_1((void *)v122 + 1, v37);
  uint64_t v39 = (*(uint64_t (**)(void, uint64_t))(*(void *)(v38 + 8) + 8))(*v36, v37);
  *(void *)&long long v125 = *(void *)(v39 + 16);
  if (!(void)v125)
  {
    swift_bridgeObjectRelease();
    swift_release();
    return MEMORY[0x1E4FBC860];
  }
  uint64_t v103 = (void (**)(unsigned char *, char *, uint64_t))(v121 + 4);
  uint64_t v102 = (void (**)(uint64_t, unsigned char *, uint64_t))(v121 + 2);
  char v121 = (void (**)(char *, uint64_t))(v117 + 8);
  swift_bridgeObjectRetain();
  uint64_t v40 = 0;
  unint64_t v124 = MEMORY[0x1E4FBC860];
  uint64_t v110 = MEMORY[0x1E4FBC840] + 8;
  *(void *)&long long v41 = 136446210;
  long long v109 = v41;
  uint64_t v42 = v111;
  uint64_t v114 = v39;
  while (1)
  {
    if (!*(void *)(v25 + 16) || (unint64_t v43 = sub_1C295DE40(*(void *)(v39 + 8 * v40 + 32)), (v44 & 1) == 0))
    {
      sub_1C2A9CF98();
      uint64_t v61 = sub_1C2A9CFC8();
      os_log_type_t v62 = sub_1C2A9E0B8();
      if (os_log_type_enabled(v61, v62))
      {
        uint64_t v63 = swift_slowAlloc();
        uint64_t v64 = swift_slowAlloc();
        uint64_t v126 = v64;
        *(_DWORD *)uint64_t v63 = v109;
        uint64_t v130 = type metadata accessor for TimeBasedDistributionChartModel();
        sub_1C29857CC();
        uint64_t v65 = sub_1C2A9DD58();
        *(void *)(v63 + 4) = sub_1C2957168(v65, v66, &v126);
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C292A000, v61, v62, "[%{public}s] Expected to have bucket for each component range.", (uint8_t *)v63, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1C87656F0](v64, -1, -1);
        MEMORY[0x1C87656F0](v63, -1, -1);
      }

      (*v121)(v11, v42);
      goto LABEL_24;
    }
    uint64_t v45 = *(void *)(v25 + 56) + 40 * v43;
    unint64_t v115 = *(void *)v45;
    uint64_t v46 = *(uint64_t *)(v45 + 16);
    uint64_t v47 = *(unsigned __int8 *)(v45 + 24);
    int v48 = *(unsigned __int8 *)(v45 + 25);
    uint64_t v49 = *(void *)(v45 + 32);
    uint64_t v50 = type metadata accessor for TimeBasedDistributionChartModel();
    uint64_t v51 = &v122[*(int *)(v50 + 28)];
    uint64_t v52 = *((void *)v51 + 3);
    uint64_t v53 = *((void *)v51 + 4);
    __swift_project_boxed_opaque_existential_1(v51, v52);
    double v116 = *(double *)&v46;
    uint64_t v126 = v46;
    char v127 = v47;
    char v128 = v48;
    uint64_t v129 = v49;
    double v54 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v53 + 8);
    uint64_t v123 = v49;
    swift_bridgeObjectRetain();
    v54(&v126, v52, v53);
    double v56 = v55;
    uint64_t v57 = v47;
    if ((v47 & 1) == 0 && v48)
    {
      id v58 = (char *)&v122[*(int *)(v50 + 24)];
      int v59 = v58[*(int *)(type metadata accessor for TimeBasedDistributionChartDesign() + 100)];
      uint64_t v60 = v114;
      if (v59 == 1 && sub_1C2A9DD88() >= 4)
      {
        if (!v40)
        {
LABEL_32:
          uint64_t v57 = 2;
          goto LABEL_39;
        }
        uint64_t v57 = 2;
        if (v101 > 1 || v40 == *(void *)(v60 + 16) - 1) {
          goto LABEL_39;
        }
      }
      else if (v101 > 1)
      {
        goto LABEL_32;
      }
      uint64_t v57 = 3;
    }
LABEL_39:
    uint64_t v117 = v57;
    if (v47) {
      double v67 = 0.0;
    }
    else {
      double v67 = v116;
    }
    swift_bridgeObjectRetain();
    sub_1C2A9C528();
    uint64_t v68 = v107;
    sub_1C2A9C508();
    uint64_t KeyPath = swift_getKeyPath();
    MEMORY[0x1F4188790](KeyPath);
    *(&v101 - 2) = v70;
    swift_getKeyPath();
    uint64_t v71 = 8 * v57;
    uint64_t v72 = *(void *)((char *)&unk_1C2AA81E8 + v71);
    uint64_t v73 = *(int *)(v50 + 24);
    unint64_t v74 = v122;
    double v116 = v56;
    uint64_t v75 = (char *)&v122[v73];
    uint64_t v76 = type metadata accessor for TimeBasedDistributionChartDesign();
    uint64_t v126 = *(void *)&v75[*(int *)(v76 + 4 * v72)];
    sub_1C2985828();
    swift_retain();
    sub_1C2A9C4D8();
    uint64_t v77 = swift_getKeyPath();
    MEMORY[0x1F4188790](v77);
    *(&v101 - 2) = v78;
    swift_getKeyPath();
    unsigned int v79 = v117;
    uint64_t v126 = *(void *)&v74[*(int *)(v50 + 24) + *(int *)(v76 + 4 * *(void *)((char *)&unk_1C2AA8208 + v71))];
    sub_1C2985930();
    swift_retain();
    sub_1C2A9C4D8();
    swift_bridgeObjectRelease();
    uint64_t v80 = 44;
    if (v79 < 2) {
      uint64_t v80 = 48;
    }
    uint64_t v81 = *(void *)&v74[*(int *)(v50 + 24) + *(int *)(v76 + v80)];
    uint64_t v83 = v119;
    uint64_t v82 = v120;
    *(unsigned char *)uint64_t v119 = v79;
    v83[1] = v67;
    uint64_t v84 = v106;
    unint64_t v85 = (char *)v83 + *(int *)(v106 + 24);
    (*v103)(v85, v68, v82);
    *(void *)((char *)v83 + *(int *)(v84 + 28)) = v81;
    uint64_t v86 = qword_1EA31DC60;
    swift_bridgeObjectRetain();
    swift_retain();
    if (v86 != -1) {
      swift_once();
    }
    id v87 = objc_msgSend((id)qword_1EA32B5D0, sel_shortStandaloneWeekdaySymbols);
    uint64_t v25 = v112;
    if (!v87) {
      goto LABEL_59;
    }
    uint64_t v88 = v87;
    uint64_t v89 = sub_1C2A9DE98();

    if ((v115 & 0x8000000000000000) != 0) {
      break;
    }
    if (v115 >= *(void *)(v89 + 16)) {
      goto LABEL_58;
    }
    uint64_t v90 = v89 + 16 * v115;
    uint64_t v91 = *(void *)(v90 + 32);
    uint64_t v92 = *(void *)(v90 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v93 = v105;
    char v94 = v79;
    uint64_t v95 = v118;
    (*v102)(v118 + *(int *)(v105 + 28), v85, v120);
    *(unsigned char *)uint64_t v95 = v94;
    *(double *)(v95 + 8) = v67;
    *(void *)(v95 + 16) = v91;
    *(void *)(v95 + 24) = v92;
    *(void *)(v95 + *(int *)(v93 + 32)) = v81;
    swift_retain();
    swift_bridgeObjectRelease();
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      uint64_t v42 = v111;
      int64_t v11 = v113;
      unint64_t v96 = v124;
    }
    else
    {
      unint64_t v96 = sub_1C299CFFC(0, *(void *)(v124 + 16) + 1, 1, v124);
      uint64_t v42 = v111;
      int64_t v11 = v113;
    }
    unint64_t v98 = *(void *)(v96 + 16);
    unint64_t v97 = *(void *)(v96 + 24);
    uint64_t v39 = v114;
    if (v98 >= v97 >> 1) {
      unint64_t v96 = sub_1C299CFFC(v97 > 1, v98 + 1, 1, v96);
    }
    *(void *)(v96 + 16) = v98 + 1;
    unint64_t v99 = (*(unsigned __int8 *)(v104 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v104 + 80);
    unint64_t v124 = v96;
    sub_1C2985B04(v118, v96 + v99 + *(void *)(v104 + 72) * v98, type metadata accessor for TimeBasedDistributionChartPoint.DayOfWeek);
    sub_1C2985A44((uint64_t)v119, type metadata accessor for TimeBasedDistributionChartPoint.Skeleton);
LABEL_24:
    if ((void)v125 == ++v40)
    {
      swift_release();
      swift_bridgeObjectRelease_n();
      return v124;
    }
  }
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  __break(1u);
  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t TimeBasedDistributionChartModel.generateDayOfWeekChartPoints(for:)(uint64_t a1)
{
  return sub_1C2982348(a1, v1);
}

uint64_t sub_1C2982F6C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  return sub_1C2A9DCE8() & 1;
}

uint64_t TimeBasedDistributionChartModel.componentRangeLowerBoundOrder()()
{
  uint64_t v1 = v0[4];
  uint64_t v2 = v0[5];
  __swift_project_boxed_opaque_existential_1(v0 + 1, v1);
  return (*(uint64_t (**)(void, uint64_t))(*(void *)(v2 + 8) + 8))(*(unsigned __int8 *)v0, v1);
}

uint64_t TimeBasedDistributionChartModel.determineYAxisRange(chartPoints:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for TimeBasedDistributionChartModel();
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v38 - v8;
  uint64_t v10 = sub_1C2A9CFE8();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  int64_t v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43[0] = a1;
  swift_getKeyPath();
  sub_1C29836E8(0, &qword_1EA31E310, MEMORY[0x1E4FBB320]);
  sub_1C29835FC();
  uint64_t v14 = sub_1C2A9DE18();
  swift_release();
  uint64_t v15 = *(void *)(v14 + 16);
  if (v15)
  {
    sub_1C2981338(v14 + 40 * v15 - 8, (uint64_t)&v40);
  }
  else
  {
    uint64_t v42 = 0;
    long long v40 = 0u;
    long long v41 = 0u;
  }
  swift_bridgeObjectRelease();
  if (*((void *)&v41 + 1))
  {
    sub_1C2943434(&v40, (uint64_t)v43);
    uint64_t v16 = v44;
    uint64_t v17 = v45;
    __swift_project_boxed_opaque_existential_1(v43, v44);
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v17 + 8))(&v40, v16, v17);
    if (v40 >= 2u)
    {
      uint64_t v30 = v44;
      uint64_t v31 = v45;
      if (v40 == 2)
      {
        __swift_project_boxed_opaque_existential_1(v43, v44);
        double v20 = (*(double (**)(uint64_t, uint64_t))(v31 + 16))(v30, v31);
        uint64_t v21 = v2 + *(int *)(v4 + 24);
        uint64_t v22 = *(int *)(type metadata accessor for TimeBasedDistributionChartDesign() + 96);
      }
      else
      {
        __swift_project_boxed_opaque_existential_1(v43, v44);
        double v20 = (*(double (**)(uint64_t, uint64_t))(v31 + 16))(v30, v31);
        uint64_t v21 = v2 + *(int *)(v4 + 24);
        uint64_t v22 = *(int *)(type metadata accessor for TimeBasedDistributionChartDesign() + 92);
      }
    }
    else
    {
      uint64_t v18 = v44;
      uint64_t v19 = v45;
      __swift_project_boxed_opaque_existential_1(v43, v44);
      double v20 = (*(double (**)(uint64_t, uint64_t))(v19 + 16))(v18, v19);
      uint64_t v21 = v2 + *(int *)(v4 + 24);
      uint64_t v22 = *(int *)(type metadata accessor for TimeBasedDistributionChartDesign() + 88);
    }
    double v32 = v20 * *(double *)(v21 + v22);
    char v33 = (void *)(v2 + 8);
    uint64_t v34 = *(void *)(v2 + 32);
    uint64_t v35 = *(void *)(v2 + 40);
    __swift_project_boxed_opaque_existential_1(v33, v34);
    *(double *)&uint64_t result = COERCE_DOUBLE((*(uint64_t (**)(uint64_t, uint64_t))(v35 + 24))(v34, v35));
    if (v36)
    {
      double v37 = v32;
      if (v32 <= 0.0)
      {
LABEL_18:
        *(double *)&uint64_t result = COERCE_DOUBLE(__swift_destroy_boxed_opaque_existential_1((uint64_t)v43));
        return result;
      }
    }
    else
    {
      double v37 = *(double *)&result;
      if (v32 > *(double *)&result) {
        double v37 = v32;
      }
    }
    if (v37 >= 0.0) {
      goto LABEL_18;
    }
    __break(1u);
  }
  else
  {
    sub_1C2983670((uint64_t)&v40);
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v2 + *(int *)(v4 + 32), v10);
    sub_1C2983758(v2, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for TimeBasedDistributionChartModel);
    uint64_t v23 = sub_1C2A9CFC8();
    os_log_type_t v24 = sub_1C2A9E0B8();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      uint64_t v26 = swift_slowAlloc();
      v43[0] = v26;
      uint64_t v39 = v11;
      *(_DWORD *)uint64_t v25 = 136446210;
      uint64_t v38 = v25 + 4;
      sub_1C2983758((uint64_t)v9, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for TimeBasedDistributionChartModel);
      uint64_t v27 = sub_1C2A9DD58();
      *(void *)&long long v40 = sub_1C2957168(v27, v28, v43);
      sub_1C2A9E358();
      swift_bridgeObjectRelease();
      sub_1C2985A44((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for TimeBasedDistributionChartModel);
      _os_log_impl(&dword_1C292A000, v23, v24, "[%{public}s] Unable to determine max, returning basic scale", v25, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C87656F0](v26, -1, -1);
      MEMORY[0x1C87656F0](v25, -1, -1);

      *(double *)&uint64_t result = COERCE_DOUBLE((*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v13, v10));
    }
    else
    {
      sub_1C2985A44((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for TimeBasedDistributionChartModel);

      *(double *)&uint64_t result = COERCE_DOUBLE((*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10));
    }
  }
  return result;
}

void sub_1C29835A4(void *a1@<X0>, double *a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  *a2 = (*(double (**)(uint64_t, uint64_t))(v4 + 16))(v3, v4);
}

unint64_t sub_1C29835FC()
{
  unint64_t result = qword_1EA31E318;
  if (!qword_1EA31E318)
  {
    sub_1C29836E8(255, &qword_1EA31E310, MEMORY[0x1E4FBB320]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA31E318);
  }
  return result;
}

uint64_t sub_1C2983670(uint64_t a1)
{
  sub_1C29836E8(0, &qword_1EA31E320, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1C29836E8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v6 = sub_1C29415E4(255, &qword_1EA31E1C0);
    unint64_t v7 = a3(a1, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t sub_1C2983758(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t initializeBufferWithCopyOfBuffer for TimeBasedDistributionChartModel(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *(void *)a1 = *a2;
    uint64_t v16 = v15 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    long long v7 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 32) = v7;
    (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 8, (uint64_t)(a2 + 1));
    uint64_t v38 = a3;
    uint64_t v39 = a2;
    uint64_t v8 = *(int *)(a3 + 24);
    uint64_t v40 = a1;
    uint64_t v9 = (char *)(a1 + v8);
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = sub_1C2A9D2E8();
    uint64_t v12 = *(void *)(v11 - 8);
    int64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    if (v13(v10, 1, v11))
    {
      sub_1C2983C60();
      memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    uint64_t v17 = (int *)type metadata accessor for TimeBasedDistributionChartDesign();
    uint64_t v18 = v17[5];
    uint64_t v19 = &v9[v18];
    double v20 = &v10[v18];
    if (v13(&v10[v18], 1, v11))
    {
      sub_1C2983C60();
      memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v19, v20, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v19, 0, 1, v11);
    }
    *(void *)&v9[v17[6]] = *(void *)&v10[v17[6]];
    *(void *)&v9[v17[7]] = *(void *)&v10[v17[7]];
    *(void *)&v9[v17[8]] = *(void *)&v10[v17[8]];
    *(void *)&v9[v17[9]] = *(void *)&v10[v17[9]];
    uint64_t v22 = v17[10];
    char v36 = &v10[v22];
    double v37 = &v9[v22];
    uint64_t v23 = sub_1C2A9D598();
    os_log_type_t v24 = *(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v24(v37, v36, v23);
    *(void *)&v9[v17[11]] = *(void *)&v10[v17[11]];
    *(void *)&v9[v17[12]] = *(void *)&v10[v17[12]];
    *(void *)&v9[v17[13]] = *(void *)&v10[v17[13]];
    *(void *)&v9[v17[14]] = *(void *)&v10[v17[14]];
    *(void *)&v9[v17[15]] = *(void *)&v10[v17[15]];
    *(void *)&v9[v17[16]] = *(void *)&v10[v17[16]];
    *(void *)&v9[v17[17]] = *(void *)&v10[v17[17]];
    *(void *)&v9[v17[18]] = *(void *)&v10[v17[18]];
    *(void *)&v9[v17[19]] = *(void *)&v10[v17[19]];
    *(void *)&v9[v17[20]] = *(void *)&v10[v17[20]];
    *(void *)&v9[v17[21]] = *(void *)&v10[v17[21]];
    *(void *)&v9[v17[22]] = *(void *)&v10[v17[22]];
    *(void *)&v9[v17[23]] = *(void *)&v10[v17[23]];
    *(void *)&v9[v17[24]] = *(void *)&v10[v17[24]];
    v9[v17[25]] = v10[v17[25]];
    uint64_t v25 = *(int *)(v38 + 28);
    uint64_t v16 = v40;
    uint64_t v26 = v40 + v25;
    uint64_t v27 = (uint64_t)v39 + v25;
    long long v28 = *(_OWORD *)((char *)v39 + v25 + 24);
    *(_OWORD *)(v40 + v25 + 24) = v28;
    uint64_t v29 = v28;
    uint64_t v30 = **(void (***)(uint64_t, uint64_t, uint64_t))(v28 - 8);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v30(v26, v27, v29);
    uint64_t v31 = *(int *)(v38 + 32);
    uint64_t v32 = v40 + v31;
    uint64_t v33 = (uint64_t)v39 + v31;
    uint64_t v34 = sub_1C2A9CFE8();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 16))(v32, v33, v34);
  }
  return v16;
}

void sub_1C2983C60()
{
  if (!qword_1EA31DFF0)
  {
    sub_1C2A9D2E8();
    unint64_t v0 = sub_1C2A9E328();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EA31DFF0);
    }
  }
}

uint64_t destroy for TimeBasedDistributionChartModel(uint64_t a1, int *a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  uint64_t v4 = a1 + a2[6];
  uint64_t v5 = sub_1C2A9D2E8();
  uint64_t v6 = *(void *)(v5 - 8);
  long long v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v7(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  uint64_t v8 = type metadata accessor for TimeBasedDistributionChartDesign();
  uint64_t v9 = v4 + *(int *)(v8 + 20);
  if (!v7(v9, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v9, v5);
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v10 = v4 + *(int *)(v8 + 40);
  uint64_t v11 = sub_1C2A9D598();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a1 + a2[7]);
  uint64_t v12 = a1 + a2[8];
  uint64_t v13 = sub_1C2A9CFE8();
  uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8);
  return v14(v12, v13);
}

uint64_t initializeWithCopy for TimeBasedDistributionChartModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  long long v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v6;
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 8, a2 + 8);
  uint64_t v35 = a3;
  uint64_t v36 = a2;
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v37 = a1;
  uint64_t v8 = (char *)(a1 + v7);
  uint64_t v9 = (char *)(a2 + v7);
  uint64_t v10 = sub_1C2A9D2E8();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  if (v12(v9, 1, v10))
  {
    sub_1C2983C60();
    memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v14 = (int *)type metadata accessor for TimeBasedDistributionChartDesign();
  uint64_t v15 = v14[5];
  uint64_t v16 = &v8[v15];
  uint64_t v17 = &v9[v15];
  if (v12(&v9[v15], 1, v10))
  {
    sub_1C2983C60();
    memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v16, v17, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v16, 0, 1, v10);
  }
  *(void *)&v8[v14[6]] = *(void *)&v9[v14[6]];
  *(void *)&v8[v14[7]] = *(void *)&v9[v14[7]];
  *(void *)&v8[v14[8]] = *(void *)&v9[v14[8]];
  *(void *)&v8[v14[9]] = *(void *)&v9[v14[9]];
  uint64_t v19 = v14[10];
  uint64_t v33 = &v9[v19];
  uint64_t v34 = &v8[v19];
  uint64_t v20 = sub_1C2A9D598();
  uint64_t v21 = *(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v21(v34, v33, v20);
  *(void *)&v8[v14[11]] = *(void *)&v9[v14[11]];
  *(void *)&v8[v14[12]] = *(void *)&v9[v14[12]];
  *(void *)&v8[v14[13]] = *(void *)&v9[v14[13]];
  *(void *)&v8[v14[14]] = *(void *)&v9[v14[14]];
  *(void *)&v8[v14[15]] = *(void *)&v9[v14[15]];
  *(void *)&v8[v14[16]] = *(void *)&v9[v14[16]];
  *(void *)&v8[v14[17]] = *(void *)&v9[v14[17]];
  *(void *)&v8[v14[18]] = *(void *)&v9[v14[18]];
  *(void *)&v8[v14[19]] = *(void *)&v9[v14[19]];
  *(void *)&v8[v14[20]] = *(void *)&v9[v14[20]];
  *(void *)&v8[v14[21]] = *(void *)&v9[v14[21]];
  *(void *)&v8[v14[22]] = *(void *)&v9[v14[22]];
  *(void *)&v8[v14[23]] = *(void *)&v9[v14[23]];
  *(void *)&v8[v14[24]] = *(void *)&v9[v14[24]];
  v8[v14[25]] = v9[v14[25]];
  uint64_t v22 = *(int *)(v35 + 28);
  uint64_t v23 = v37 + v22;
  uint64_t v24 = v36 + v22;
  long long v25 = *(_OWORD *)(v36 + v22 + 24);
  *(_OWORD *)(v37 + v22 + 24) = v25;
  uint64_t v26 = v25;
  uint64_t v27 = **(void (***)(uint64_t, uint64_t, uint64_t))(v25 - 8);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v27(v23, v24, v26);
  uint64_t v28 = *(int *)(v35 + 32);
  uint64_t v29 = v37 + v28;
  uint64_t v30 = v36 + v28;
  uint64_t v31 = sub_1C2A9CFE8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 16))(v29, v30, v31);
  return v37;
}

uint64_t assignWithCopy for TimeBasedDistributionChartModel(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
  uint64_t v31 = a2;
  uint64_t v6 = a3[6];
  uint64_t v32 = a1;
  uint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v9 = sub_1C2A9D2E8();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    sub_1C2983C60();
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = (int *)type metadata accessor for TimeBasedDistributionChartDesign();
  uint64_t v16 = v15[5];
  uint64_t v17 = &v7[v16];
  uint64_t v18 = &v8[v16];
  int v19 = v11(&v7[v16], 1, v9);
  int v20 = v11(v18, 1, v9);
  if (!v19)
  {
    if (!v20)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v17, v18, v9);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v17, v9);
    goto LABEL_12;
  }
  if (v20)
  {
LABEL_12:
    sub_1C2983C60();
    memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v17, v18, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v17, 0, 1, v9);
LABEL_13:
  *(void *)&v7[v15[6]] = *(void *)&v8[v15[6]];
  swift_retain();
  swift_release();
  *(void *)&v7[v15[7]] = *(void *)&v8[v15[7]];
  swift_retain();
  swift_release();
  *(void *)&v7[v15[8]] = *(void *)&v8[v15[8]];
  swift_retain();
  swift_release();
  *(void *)&v7[v15[9]] = *(void *)&v8[v15[9]];
  swift_retain();
  swift_release();
  uint64_t v22 = v15[10];
  uint64_t v23 = &v7[v22];
  uint64_t v24 = &v8[v22];
  uint64_t v25 = sub_1C2A9D598();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 24))(v23, v24, v25);
  *(void *)&v7[v15[11]] = *(void *)&v8[v15[11]];
  swift_retain();
  swift_release();
  *(void *)&v7[v15[12]] = *(void *)&v8[v15[12]];
  swift_retain();
  swift_release();
  *(void *)&v7[v15[13]] = *(void *)&v8[v15[13]];
  swift_retain();
  swift_release();
  *(void *)&v7[v15[14]] = *(void *)&v8[v15[14]];
  swift_retain();
  swift_release();
  *(void *)&v7[v15[15]] = *(void *)&v8[v15[15]];
  swift_retain();
  swift_release();
  *(void *)&v7[v15[16]] = *(void *)&v8[v15[16]];
  swift_retain();
  swift_release();
  *(void *)&v7[v15[17]] = *(void *)&v8[v15[17]];
  *(void *)&v7[v15[18]] = *(void *)&v8[v15[18]];
  *(void *)&v7[v15[19]] = *(void *)&v8[v15[19]];
  *(void *)&v7[v15[20]] = *(void *)&v8[v15[20]];
  *(void *)&v7[v15[21]] = *(void *)&v8[v15[21]];
  *(void *)&v7[v15[22]] = *(void *)&v8[v15[22]];
  *(void *)&v7[v15[23]] = *(void *)&v8[v15[23]];
  *(void *)&v7[v15[24]] = *(void *)&v8[v15[24]];
  v7[v15[25]] = v8[v15[25]];
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(v32 + a3[7]), (uint64_t *)(v31 + a3[7]));
  uint64_t v26 = a3[8];
  uint64_t v27 = v32 + v26;
  uint64_t v28 = v31 + v26;
  uint64_t v29 = sub_1C2A9CFE8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 24))(v27, v28, v29);
  return v32;
}

uint64_t initializeWithTake for TimeBasedDistributionChartModel(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v4 = a3[6];
  uint64_t v5 = (char *)(a1 + v4);
  uint64_t v6 = (char *)(a2 + v4);
  uint64_t v7 = sub_1C2A9D2E8();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
  if (v9(v6, 1, v7))
  {
    sub_1C2983C60();
    memcpy(v5, v6, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v5, v6, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  uint64_t v11 = (int *)type metadata accessor for TimeBasedDistributionChartDesign();
  uint64_t v12 = v11[5];
  int v13 = &v5[v12];
  uint64_t v14 = &v6[v12];
  if (v9(&v6[v12], 1, v7))
  {
    sub_1C2983C60();
    memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v13, v14, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v13, 0, 1, v7);
  }
  *(void *)&v5[v11[6]] = *(void *)&v6[v11[6]];
  *(void *)&v5[v11[7]] = *(void *)&v6[v11[7]];
  *(void *)&v5[v11[8]] = *(void *)&v6[v11[8]];
  *(void *)&v5[v11[9]] = *(void *)&v6[v11[9]];
  uint64_t v16 = v11[10];
  uint64_t v17 = &v5[v16];
  uint64_t v18 = &v6[v16];
  uint64_t v19 = sub_1C2A9D598();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32))(v17, v18, v19);
  *(void *)&v5[v11[11]] = *(void *)&v6[v11[11]];
  *(void *)&v5[v11[12]] = *(void *)&v6[v11[12]];
  *(void *)&v5[v11[13]] = *(void *)&v6[v11[13]];
  *(void *)&v5[v11[14]] = *(void *)&v6[v11[14]];
  *(void *)&v5[v11[15]] = *(void *)&v6[v11[15]];
  *(void *)&v5[v11[16]] = *(void *)&v6[v11[16]];
  *(void *)&v5[v11[17]] = *(void *)&v6[v11[17]];
  *(void *)&v5[v11[18]] = *(void *)&v6[v11[18]];
  *(void *)&v5[v11[19]] = *(void *)&v6[v11[19]];
  *(void *)&v5[v11[20]] = *(void *)&v6[v11[20]];
  *(void *)&v5[v11[21]] = *(void *)&v6[v11[21]];
  *(void *)&v5[v11[22]] = *(void *)&v6[v11[22]];
  *(void *)&v5[v11[23]] = *(void *)&v6[v11[23]];
  *(void *)&v5[v11[24]] = *(void *)&v6[v11[24]];
  v5[v11[25]] = v6[v11[25]];
  uint64_t v20 = a3[7];
  uint64_t v21 = a3[8];
  uint64_t v22 = a1 + v20;
  uint64_t v23 = a2 + v20;
  long long v24 = *(_OWORD *)(v23 + 16);
  *(_OWORD *)uint64_t v22 = *(_OWORD *)v23;
  *(_OWORD *)(v22 + 16) = v24;
  *(void *)(v22 + 32) = *(void *)(v23 + 32);
  uint64_t v25 = a1 + v21;
  uint64_t v26 = a2 + v21;
  uint64_t v27 = sub_1C2A9CFE8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 32))(v25, v26, v27);
  return a1;
}

uint64_t assignWithTake for TimeBasedDistributionChartModel(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v35 = a2;
  uint64_t v6 = a3[6];
  uint64_t v36 = a1;
  uint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v9 = sub_1C2A9D2E8();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    sub_1C2983C60();
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = (int *)type metadata accessor for TimeBasedDistributionChartDesign();
  uint64_t v16 = v15[5];
  uint64_t v17 = &v7[v16];
  uint64_t v18 = &v8[v16];
  int v19 = v11(&v7[v16], 1, v9);
  int v20 = v11(v18, 1, v9);
  if (!v19)
  {
    if (!v20)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v17, v18, v9);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v17, v9);
    goto LABEL_12;
  }
  if (v20)
  {
LABEL_12:
    sub_1C2983C60();
    memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v17, v18, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v17, 0, 1, v9);
LABEL_13:
  *(void *)&v7[v15[6]] = *(void *)&v8[v15[6]];
  swift_release();
  *(void *)&v7[v15[7]] = *(void *)&v8[v15[7]];
  swift_release();
  *(void *)&v7[v15[8]] = *(void *)&v8[v15[8]];
  swift_release();
  *(void *)&v7[v15[9]] = *(void *)&v8[v15[9]];
  swift_release();
  uint64_t v22 = v15[10];
  uint64_t v23 = &v7[v22];
  long long v24 = &v8[v22];
  uint64_t v25 = sub_1C2A9D598();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 40))(v23, v24, v25);
  *(void *)&v7[v15[11]] = *(void *)&v8[v15[11]];
  swift_release();
  *(void *)&v7[v15[12]] = *(void *)&v8[v15[12]];
  swift_release();
  *(void *)&v7[v15[13]] = *(void *)&v8[v15[13]];
  swift_release();
  *(void *)&v7[v15[14]] = *(void *)&v8[v15[14]];
  swift_release();
  *(void *)&v7[v15[15]] = *(void *)&v8[v15[15]];
  swift_release();
  *(void *)&v7[v15[16]] = *(void *)&v8[v15[16]];
  swift_release();
  *(void *)&v7[v15[17]] = *(void *)&v8[v15[17]];
  *(void *)&v7[v15[18]] = *(void *)&v8[v15[18]];
  *(void *)&v7[v15[19]] = *(void *)&v8[v15[19]];
  *(void *)&v7[v15[20]] = *(void *)&v8[v15[20]];
  *(void *)&v7[v15[21]] = *(void *)&v8[v15[21]];
  *(void *)&v7[v15[22]] = *(void *)&v8[v15[22]];
  *(void *)&v7[v15[23]] = *(void *)&v8[v15[23]];
  *(void *)&v7[v15[24]] = *(void *)&v8[v15[24]];
  v7[v15[25]] = v8[v15[25]];
  uint64_t v26 = a3[7];
  uint64_t v27 = v36 + v26;
  uint64_t v28 = v35 + v26;
  __swift_destroy_boxed_opaque_existential_1(v36 + v26);
  long long v29 = *(_OWORD *)(v28 + 16);
  *(_OWORD *)uint64_t v27 = *(_OWORD *)v28;
  *(_OWORD *)(v27 + 16) = v29;
  *(void *)(v27 + 32) = *(void *)(v28 + 32);
  uint64_t v30 = a3[8];
  uint64_t v31 = v36 + v30;
  uint64_t v32 = v35 + v30;
  uint64_t v33 = sub_1C2A9CFE8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 40))(v31, v32, v33);
  return v36;
}

uint64_t getEnumTagSinglePayload for TimeBasedDistributionChartModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C298501C);
}

uint64_t sub_1C298501C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 32);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for TimeBasedDistributionChartDesign();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 24);
      int v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_1C2A9CFE8();
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 32);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t storeEnumTagSinglePayload for TimeBasedDistributionChartModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C298515C);
}

uint64_t sub_1C298515C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 32) = (a2 - 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for TimeBasedDistributionChartDesign();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 24);
      int v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_1C2A9CFE8();
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 32);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

uint64_t sub_1C2985288()
{
  uint64_t result = type metadata accessor for TimeBasedDistributionChartDesign();
  if (v1 <= 0x3F)
  {
    uint64_t result = sub_1C2A9CFE8();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

void sub_1C2985364()
{
  if (!qword_1EA31DF08)
  {
    unint64_t v0 = sub_1C2A9E698();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EA31DF08);
    }
  }
}

void sub_1C29853CC(uint64_t a1, char a2, void *a3)
{
  uint64_t v5 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  uint64_t v44 = v5;
  if (v5)
  {
    if (!*(void *)(a1 + 16))
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    uint64_t v7 = *(void *)(a1 + 32);
    unint64_t v6 = *(void *)(a1 + 40);
    uint64_t v8 = *(void *)(a1 + 48);
    uint64_t v9 = *(void *)(a1 + 56);
    char v10 = *(unsigned char *)(a1 + 64);
    char v11 = *(unsigned char *)(a1 + 65);
    uint64_t v45 = swift_bridgeObjectRetain();
    if (v45)
    {
      uint64_t v42 = a1;
      int v12 = (void *)*a3;
      unint64_t v13 = sub_1C295DE40(v7);
      uint64_t v15 = v12[2];
      BOOL v16 = (v14 & 1) == 0;
      BOOL v17 = __OFADD__(v15, v16);
      uint64_t v18 = v15 + v16;
      if (v17)
      {
LABEL_27:
        __break(1u);
        goto LABEL_28;
      }
      LOBYTE(v19) = v14;
      if (v12[3] < v18)
      {
        sub_1C295ECF4(v18, a2 & 1);
        unint64_t v13 = sub_1C295DE40(v7);
        if ((v19 & 1) == (v20 & 1)) {
          goto LABEL_9;
        }
LABEL_7:
        unint64_t v13 = sub_1C2A9E928();
        __break(1u);
      }
      if ((a2 & 1) == 0)
      {
        char v23 = v11;
        unint64_t v24 = v13;
        sub_1C2960154();
        unint64_t v13 = v24;
        char v11 = v23;
        if (v19)
        {
LABEL_10:
          uint64_t v21 = (void *)swift_allocError();
          swift_willThrow();
          id v22 = v21;
          sub_1C29415E4(0, (unint64_t *)&qword_1EBB92210);
          if ((swift_dynamicCast() & 1) == 0)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n();

            return;
          }
          goto LABEL_29;
        }
LABEL_13:
        uint64_t v25 = (void *)*a3;
        *(void *)(*a3 + 8 * (v13 >> 6) + 64) |= 1 << v13;
        *(void *)(v25[6] + 8 * v13) = v7;
        uint64_t v26 = v25[7] + 40 * v13;
        *(void *)uint64_t v26 = v6;
        *(void *)(v26 + 8) = v8;
        *(void *)(v26 + 16) = v9;
        *(unsigned char *)(v26 + 24) = v10;
        *(unsigned char *)(v26 + 25) = v11;
        *(void *)(v26 + 32) = v45;
        uint64_t v27 = v25[2];
        BOOL v17 = __OFADD__(v27, 1);
        uint64_t v28 = v27 + 1;
        uint64_t v29 = v42;
        if (v17)
        {
LABEL_28:
          __break(1u);
LABEL_29:
          sub_1C2A9E4D8();
          sub_1C2A9DDB8();
          sub_1C2A9E5C8();
          sub_1C2A9DDB8();
          sub_1C2A9E628();
          __break(1u);
          return;
        }
        _OWORD v25[2] = v28;
        if (v44 != 1)
        {
          uint64_t v19 = v42 + 120;
          unint64_t v6 = 1;
          while (v6 < *(void *)(v29 + 16))
          {
            uint64_t v7 = *(void *)(v19 - 40);
            uint64_t v30 = *(void *)(v19 - 32);
            uint64_t v9 = *(void *)(v19 - 24);
            uint64_t v8 = *(void *)(v19 - 16);
            char v10 = *(unsigned char *)(v19 - 8);
            char v11 = *(unsigned char *)(v19 - 7);
            uint64_t v45 = swift_bridgeObjectRetain();
            if (!v45) {
              goto LABEL_24;
            }
            uint64_t v43 = v30;
            uint64_t v31 = (void *)*a3;
            unint64_t v32 = sub_1C295DE40(v7);
            uint64_t v34 = v31[2];
            BOOL v35 = (v33 & 1) == 0;
            BOOL v17 = __OFADD__(v34, v35);
            uint64_t v36 = v34 + v35;
            if (v17) {
              goto LABEL_27;
            }
            a2 = v33;
            if (v31[3] < v36)
            {
              sub_1C295ECF4(v36, 1);
              unint64_t v32 = sub_1C295DE40(v7);
              if ((a2 & 1) != (v37 & 1)) {
                goto LABEL_7;
              }
            }
            if (a2) {
              goto LABEL_10;
            }
            uint64_t v38 = (void *)*a3;
            *(void *)(*a3 + 8 * (v32 >> 6) + 64) |= 1 << v32;
            *(void *)(v38[6] + 8 * v32) = v7;
            uint64_t v39 = v38[7] + 40 * v32;
            uint64_t v29 = v42;
            *(void *)uint64_t v39 = v43;
            *(void *)(v39 + 8) = v9;
            *(void *)(v39 + 16) = v8;
            *(unsigned char *)(v39 + 24) = v10;
            *(unsigned char *)(v39 + 25) = v11;
            *(void *)(v39 + 32) = v45;
            uint64_t v40 = v38[2];
            BOOL v17 = __OFADD__(v40, 1);
            uint64_t v41 = v40 + 1;
            if (v17) {
              goto LABEL_28;
            }
            ++v6;
            v38[2] = v41;
            v19 += 48;
            if (v44 == v6) {
              goto LABEL_24;
            }
          }
          goto LABEL_26;
        }
        goto LABEL_24;
      }
LABEL_9:
      if (v19) {
        goto LABEL_10;
      }
      goto LABEL_13;
    }
  }
LABEL_24:
  swift_bridgeObjectRelease_n();
}

unint64_t sub_1C29857CC()
{
  unint64_t result = qword_1EA31E338;
  if (!qword_1EA31E338)
  {
    type metadata accessor for TimeBasedDistributionChartModel();
    unint64_t result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EA31E338);
  }
  return result;
}

void sub_1C2985808()
{
}

unint64_t sub_1C2985828()
{
  unint64_t result = qword_1EA31E340;
  if (!qword_1EA31E340)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA31E340);
  }
  return result;
}

void sub_1C298587C()
{
}

uint64_t sub_1C29858A4()
{
  return 8;
}

uint64_t sub_1C29858B0()
{
  return swift_release();
}

uint64_t sub_1C29858B8(void *a1, void *a2)
{
  *a2 = *a1;
  return swift_retain();
}

uint64_t sub_1C29858C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C2982F6C(a1, a2, a3, &qword_1EA31E358) & 1;
}

uint64_t sub_1C29858F0(uint64_t a1, uint64_t a2)
{
  return keypath_hashTm(a1, a2, &qword_1EA31E358);
}

void *sub_1C2985904(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

void sub_1C2985910()
{
}

unint64_t sub_1C2985930()
{
  unint64_t result = qword_1EA31E348;
  if (!qword_1EA31E348)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA31E348);
  }
  return result;
}

void sub_1C2985984()
{
}

uint64_t sub_1C29859AC()
{
  return 8;
}

uint64_t sub_1C29859B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C2982F6C(a1, a2, a3, &qword_1EA31E350) & 1;
}

uint64_t sub_1C29859E4(uint64_t a1, uint64_t a2)
{
  return keypath_hashTm(a1, a2, &qword_1EA31E350);
}

uint64_t keypath_hashTm(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  return sub_1C2A9DC98();
}

uint64_t sub_1C2985A44(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void sub_1C2985AA4(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    sub_1C2A9C4C8();
    unint64_t v3 = sub_1C2A9EA28();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

uint64_t sub_1C2985B04(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

id ActivityRingSwiftUICircleView.makeUIView(context:)()
{
  id v0 = objc_allocWithZone((Class)type metadata accessor for ActivityRingCircleView());
  return objc_msgSend(v0, sel_init);
}

void ActivityRingSwiftUICircleView.updateUIView(_:context:)(void *a1)
{
  unint64_t v3 = *v1;
  id v4 = sub_1C29EC5C4();
  objc_msgSend(v4, sel_setActivitySummary_animated_, v3, 1);

  LODWORD(v4) = objc_msgSend(v3, sel_isPaused);
  uint64_t v5 = self;
  unint64_t v6 = &selRef_clearColor;
  if (!v4) {
    unint64_t v6 = &selRef_blackColor;
  }
  id v7 = [v5 *v6];
  objc_msgSend(a1, sel_setBackgroundColor_, v7);

  sub_1C2985CC4();
  id v8 = (id)sub_1C2A9DCF8();
  swift_bridgeObjectRelease();
  objc_msgSend(a1, sel_setAccessibilityIdentifier_, v8);
}

uint64_t sub_1C2985CC4()
{
  unint64_t v2 = *(void **)v0;
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 16);
  sub_1C298637C();
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C2AA8230;
  *(void *)(inited + 32) = v1;
  *(void *)(inited + 40) = v3;
  *(_OWORD *)(inited + 48) = xmmword_1C2AA8240;
  uint64_t v5 = self;
  swift_bridgeObjectRetain();
  id v6 = objc_msgSend(v5, sel_sharedBehavior);
  if (!v6)
  {
    __break(1u);
    goto LABEL_19;
  }
  id v7 = v6;
  id v8 = objc_msgSend(v6, sel_features);

  if (!v8)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  unsigned int v9 = objc_msgSend(v8, sel_pauseRings);

  if (v9 && objc_msgSend(v2, sel_isPaused))
  {
    uint64_t inited = (uint64_t)sub_1C299D410((void *)1, 3, 1, (void *)inited);
    *(void *)(inited + 16) = 3;
    *(_OWORD *)(inited + 64) = xmmword_1C2AA8250;
  }
  uint64_t v10 = *(void *)(inited + 16);
  if (v10)
  {
    swift_bridgeObjectRetain_n();
    char v11 = (uint64_t *)(inited + 40);
    int v12 = (void *)MEMORY[0x1E4FBC860];
    do
    {
      uint64_t v14 = *v11;
      if (*v11)
      {
        uint64_t v15 = *(v11 - 1);
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          int v12 = sub_1C299D2E0(0, v12[2] + 1, 1, v12);
        }
        unint64_t v17 = v12[2];
        unint64_t v16 = v12[3];
        if (v17 >= v16 >> 1) {
          int v12 = sub_1C299D2E0((void *)(v16 > 1), v17 + 1, 1, v12);
        }
        v12[2] = v17 + 1;
        unint64_t v13 = &v12[2 * v17];
        void v13[4] = v15;
        v13[5] = v14;
      }
      v11 += 2;
      --v10;
    }
    while (v10);
    swift_bridgeObjectRelease_n();
  }
  uint64_t v18 = (void *)sub_1C2A9DE88();
  swift_bridgeObjectRelease();
  id v19 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (!v19) {
LABEL_20:
  }
    __break(1u);
  uint64_t v20 = sub_1C2A9DD28();
  swift_bridgeObjectRelease();

  return v20;
}

double ActivityRingSwiftUICircleView.sizeThatFits(_:uiView:context:)(int a1, int a2, int a3, int a4, id a5)
{
  objc_msgSend(a5, sel_sizeThatFits_, 0.0, 0.0);
  return result;
}

id sub_1C2985F80()
{
  id v0 = objc_allocWithZone((Class)type metadata accessor for ActivityRingCircleView());
  return objc_msgSend(v0, sel_init);
}

double sub_1C2985FC8(int a1, int a2, int a3, int a4, id a5)
{
  objc_msgSend(a5, sel_sizeThatFits_, 0.0, 0.0);
  return result;
}

uint64_t sub_1C2986010(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1C2986328();
  return MEMORY[0x1F40F9EF0](a1, a2, a3, v6);
}

uint64_t sub_1C2986074(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1C2986328();
  return MEMORY[0x1F40F9E78](a1, a2, a3, v6);
}

void sub_1C29860D8()
{
}

unint64_t sub_1C2986104()
{
  unint64_t result = qword_1EBB8FBF8;
  if (!qword_1EBB8FBF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB8FBF8);
  }
  return result;
}

uint64_t sub_1C2986158()
{
  return MEMORY[0x1E4F3F158];
}

uint64_t destroy for ActivityRingSwiftUICircleView(id *a1)
{
  return swift_bridgeObjectRelease();
}

void *_s19HealthVisualization29ActivityRingSwiftUICircleViewVwCP_0(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  a1[2] = *(void *)(a2 + 16);
  id v5 = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ActivityRingSwiftUICircleView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ActivityRingSwiftUICircleView(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *a2;

  uint64_t v5 = a2[2];
  *(void *)(a1 + 8) = a2[1];
  *(void *)(a1 + 16) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DiagramPointAnnotations(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DiagramPointAnnotations(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ActivityRingSwiftUICircleView()
{
  return &type metadata for ActivityRingSwiftUICircleView;
}

unint64_t sub_1C2986328()
{
  unint64_t result = qword_1EBB8FC00;
  if (!qword_1EBB8FC00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB8FC00);
  }
  return result;
}

void sub_1C298637C()
{
  if (!qword_1EBB90228)
  {
    sub_1C29863D4();
    unint64_t v0 = sub_1C2A9E8A8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EBB90228);
    }
  }
}

void sub_1C29863D4()
{
  if (!qword_1EBB8DEB0)
  {
    unint64_t v0 = sub_1C2A9E328();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EBB8DEB0);
    }
  }
}

uint64_t ECGAlgorithmVersionChangePublisher.CacheData.algorithmVersionRawValue.getter()
{
  return *(void *)v0;
}

HealthVisualization::ECGAlgorithmVersionChangePublisher::CacheData __swiftcall ECGAlgorithmVersionChangePublisher.CacheData.init(algorithmVersionRawValue:)(HealthVisualization::ECGAlgorithmVersionChangePublisher::CacheData algorithmVersionRawValue)
{
  *(void *)uint64_t v1 = algorithmVersionRawValue.algorithmVersionRawValue.value;
  *(unsigned char *)(v1 + 8) = algorithmVersionRawValue.algorithmVersionRawValue.is_nil;
  return algorithmVersionRawValue;
}

unint64_t sub_1C2986448()
{
  return 0xD000000000000018;
}

uint64_t sub_1C2986464@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1C29881E8(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1C2986490(uint64_t a1)
{
  unint64_t v2 = sub_1C2986658();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1C29864CC(uint64_t a1)
{
  unint64_t v2 = sub_1C2986658();
  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t ECGAlgorithmVersionChangePublisher.CacheData.encode(to:)(void *a1)
{
  sub_1C2986838(0, &qword_1EA31E360, MEMORY[0x1E4FBBDE0]);
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  id v6 = (char *)&v8 - v5;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1C2986658();
  sub_1C2A9EA18();
  sub_1C2A9E808();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_1C2986658()
{
  unint64_t result = qword_1EA31E368;
  if (!qword_1EA31E368)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA31E368);
  }
  return result;
}

uint64_t ECGAlgorithmVersionChangePublisher.CacheData.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1C2986838(0, &qword_1EA31E370, MEMORY[0x1E4FBBDC0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  unsigned int v9 = (char *)&v14 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1C2986658();
  sub_1C2A9EA08();
  if (!v2)
  {
    uint64_t v10 = sub_1C2A9E748();
    char v12 = v11;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    *(void *)a2 = v10;
    *(unsigned char *)(a2 + 8) = v12 & 1;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

void sub_1C2986838(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = sub_1C2986658();
    unint64_t v7 = a3(a1, &type metadata for ECGAlgorithmVersionChangePublisher.CacheData.CodingKeys, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t sub_1C298689C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ECGAlgorithmVersionChangePublisher.CacheData.init(from:)(a1, a2);
}

uint64_t sub_1C29868B4(void *a1)
{
  sub_1C2986838(0, &qword_1EA31E360, MEMORY[0x1E4FBBDE0]);
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  unint64_t v6 = (char *)&v8 - v5;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1C2986658();
  sub_1C2A9EA18();
  sub_1C2A9E808();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_1C2986A04()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_1C2986D24();
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  unint64_t v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C2986E50();
  v17[0] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  char v11 = (char *)v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17[1] = v1[4];
  uint64_t v12 = swift_allocObject();
  swift_weakInit();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v12;
  *(void *)(v13 + 24) = v2;
  sub_1C2986DB8();
  sub_1C2987B08(&qword_1EBB8F790, (void (*)(uint64_t))sub_1C2986DB8);
  swift_retain();
  sub_1C2A9D4D8();
  swift_release();
  swift_release();
  sub_1C2A9C968();
  sub_1C2987B08(&qword_1EBB8F780, (void (*)(uint64_t))sub_1C2986D24);
  sub_1C2A9D4C8();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  sub_1C2987B08(&qword_1EBB8F770, (void (*)(uint64_t))sub_1C2986E50);
  uint64_t v14 = v17[0];
  uint64_t v15 = sub_1C2A9D4A8();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v14);
  return v15;
}

void sub_1C2986D24()
{
  if (!qword_1EBB8F788)
  {
    sub_1C2986DB8();
    sub_1C2987B08(&qword_1EBB8F790, (void (*)(uint64_t))sub_1C2986DB8);
    unint64_t v0 = sub_1C2A9D3C8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EBB8F788);
    }
  }
}

void sub_1C2986DB8()
{
  if (!qword_1EBB8F798)
  {
    sub_1C2987A1C(255, &qword_1EBB8F898, (uint64_t (*)(uint64_t))type metadata accessor for HKElectrocardiogramAlgorithmVersion, MEMORY[0x1E4FBB718]);
    unint64_t v0 = sub_1C2A9D3E8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EBB8F798);
    }
  }
}

void sub_1C2986E50()
{
  if (!qword_1EBB8F778)
  {
    sub_1C2986D24();
    sub_1C2A9C968();
    sub_1C2987B08(&qword_1EBB8F780, (void (*)(uint64_t))sub_1C2986D24);
    unint64_t v0 = sub_1C2A9D3B8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EBB8F778);
    }
  }
}

uint64_t sub_1C2986EFC()
{
  swift_weakDestroy();
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1C2986F34(uint64_t *a1)
{
  uint64_t v2 = sub_1C2A9CFE8();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *a1;
  int v7 = *((unsigned __int8 *)a1 + 8);
  swift_beginAccess();
  if (swift_weakLoadStrong() && (sub_1C2A9C9B8(), swift_release(), v36 != 1))
  {
    uint64_t v8 = v34;
    if (v7) {
      uint64_t v11 = 0;
    }
    else {
      uint64_t v11 = v6;
    }
    uint64_t v32 = v11;
    int v12 = (v34 == v11) & ~v7;
    LODWORD(v31) = (v35 & 1) != 0;
    if (v35) {
      int v10 = v7;
    }
    else {
      int v10 = v12;
    }
  }
  else
  {
    uint64_t v8 = 0;
    if (v7) {
      uint64_t v9 = 0;
    }
    else {
      uint64_t v9 = v6;
    }
    uint64_t v32 = v9;
    LODWORD(v31) = 1;
    int v10 = v7;
  }
  sub_1C2A9CF68();
  uint64_t v13 = sub_1C2A9CFC8();
  os_log_type_t v14 = sub_1C2A9E0C8();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = swift_slowAlloc();
    int v30 = v10;
    uint64_t v16 = v15;
    uint64_t v28 = swift_slowAlloc();
    uint64_t v33 = v28;
    *(_DWORD *)uint64_t v16 = 136446978;
    uint64_t v29 = v3;
    uint64_t v17 = sub_1C2A9EA58();
    uint64_t v34 = sub_1C2957168(v17, v18, &v33);
    sub_1C2A9E358();
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 2080;
    uint64_t v34 = v8;
    char v35 = v31;
    sub_1C2988294(0, (unint64_t *)&qword_1EBB913F8);
    uint64_t v31 = v2;
    uint64_t v19 = sub_1C2A9DD58();
    uint64_t v34 = sub_1C2957168(v19, v20, &v33);
    sub_1C2A9E358();
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 22) = 2080;
    uint64_t v34 = v32;
    char v21 = v7;
    char v35 = v7;
    uint64_t v22 = sub_1C2A9DD58();
    uint64_t v34 = sub_1C2957168(v22, v23, &v33);
    sub_1C2A9E358();
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 32) = 1024;
    LODWORD(v34) = v30 ^ 1;
    sub_1C2A9E358();
    _os_log_impl(&dword_1C292A000, v13, v14, "[%{public}s] Generation algorithm version: %s, current algorithm version: %s, shouldRegenerate: %{BOOL}d", (uint8_t *)v16, 0x26u);
    uint64_t v24 = v28;
    swift_arrayDestroy();
    MEMORY[0x1C87656F0](v24, -1, -1);
    uint64_t v25 = v16;
    int v10 = v30;
    MEMORY[0x1C87656F0](v25, -1, -1);

    (*(void (**)(char *, uint64_t))(v29 + 8))(v5, v31);
    if (v10) {
      return v10 ^ 1u;
    }
  }
  else
  {
    char v21 = v7;

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    if (v10) {
      return v10 ^ 1u;
    }
  }
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    MEMORY[0x1F4188790](Strong);
    *(&v28 - 2) = v32;
    *((unsigned char *)&v28 - 8) = v21;
    *((unsigned char *)&v28 - 7) = 0;
    sub_1C2A9C9C8();
    swift_release();
  }
  return v10 ^ 1u;
}

uint64_t sub_1C298736C()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1C29873A4(uint64_t *a1)
{
  return sub_1C2986F34(a1);
}

void sub_1C29873AC()
{
  id v0 = objc_msgSend(self, sel_electrocardiogramType);
  id v1 = objc_msgSend(self, sel_sampleTypeChangeWithSampleType_dateInterval_hasUnfrozenSeries_, v0, 0, 0);
  sub_1C2987A1C(0, &qword_1EBB8F9F8, (uint64_t (*)(uint64_t))sub_1C297A700, MEMORY[0x1E4FBBE00]);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C2AA6B00;
  *(void *)(inited + 32) = v0;
  *(void *)(inited + 40) = v1;
  id v3 = v0;
  id v4 = v1;
  sub_1C2A7BDB4(inited);
  sub_1C2A9C938();
}

uint64_t sub_1C29874B0()
{
  return sub_1C2A9C9B8();
}

uint64_t sub_1C29874D4()
{
  return sub_1C2A9C9C8();
}

uint64_t (*sub_1C2987534(uint64_t a1))()
{
  *(void *)(a1 + 16) = *(void *)(v1 + 24);
  sub_1C2A9C9B8();
  return sub_1C2987580;
}

uint64_t sub_1C2987580()
{
  return sub_1C2A9C9C8();
}

void *ECGAlgorithmVersionChangePublisher.__allocating_init(currentCacheData:healthStore:)(uint64_t *a1, void *a2)
{
  uint64_t v4 = sub_1C2A9CA48();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  int v7 = (char *)v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_1C2A9E168();
  uint64_t v24 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  int v10 = (char *)v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1C2A9E158();
  MEMORY[0x1F4188790](v11);
  uint64_t v12 = sub_1C2A9DC48();
  __n128 v13 = MEMORY[0x1F4188790](v12 - 8);
  uint64_t v27 = *a1;
  int v14 = *((unsigned __int8 *)a1 + 8);
  int v25 = *((unsigned __int8 *)a1 + 9);
  int v26 = v14;
  uint64_t v15 = (void *)MEMORY[0x1C8764F50](v13);
  if (!v15)
  {
    v22[1] = sub_1C29376D4(0, (unint64_t *)&qword_1EBB92508);
    sub_1C2A9DC38();
    uint64_t v28 = MEMORY[0x1E4FBC860];
    sub_1C2987B08(&qword_1EBB92120, MEMORY[0x1E4FBCC10]);
    unint64_t v23 = a2;
    sub_1C2987A1C(0, &qword_1EBB920C0, MEMORY[0x1E4FBCC10], MEMORY[0x1E4FBB320]);
    sub_1C2987A80();
    a2 = v23;
    sub_1C2A9E3A8();
    (*(void (**)(char *, void, uint64_t))(v24 + 104))(v10, *MEMORY[0x1E4FBCC58], v8);
    uint64_t v15 = (void *)sub_1C2A9E188();
  }
  id v16 = a2;
  id v17 = v15;
  sub_1C2A9CA38();
  sub_1C2987B08(&qword_1EBB8E8D0, MEMORY[0x1E4F66198]);
  uint64_t v18 = sub_1C2A9D4A8();
  type metadata accessor for ECGAlgorithmVersionChangePublisher();
  uint64_t v19 = (void *)swift_allocObject();
  sub_1C2987CC0();
  swift_allocObject();
  double v19[2] = sub_1C2A9D438();
  uint64_t v28 = v27;
  char v29 = v26;
  char v30 = v25;
  sub_1C2987D2C();
  swift_allocObject();
  uint64_t v20 = sub_1C2A9C9F8();

  v19[3] = v20;
  v19[4] = v18;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v19;
}

void sub_1C2987A1C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

unint64_t sub_1C2987A80()
{
  unint64_t result = qword_1EBB920C8;
  if (!qword_1EBB920C8)
  {
    sub_1C2987A1C(255, &qword_1EBB920C0, MEMORY[0x1E4FBCC10], MEMORY[0x1E4FBB320]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB920C8);
  }
  return result;
}

uint64_t sub_1C2987B08(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *ECGAlgorithmVersionChangePublisher.__allocating_init(currentCacheData:algorithmVersionPublisher:)(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)swift_allocObject();
  sub_1C2987CC0();
  swift_allocObject();
  v3[2] = sub_1C2A9D438();
  sub_1C2987D2C();
  swift_allocObject();
  v3[3] = sub_1C2A9C9F8();
  v3[4] = a2;
  return v3;
}

uint64_t type metadata accessor for ECGAlgorithmVersionChangePublisher()
{
  return self;
}

void *ECGAlgorithmVersionChangePublisher.init(currentCacheData:algorithmVersionPublisher:)(uint64_t a1, uint64_t a2)
{
  sub_1C2987CC0();
  swift_allocObject();
  v2[2] = sub_1C2A9D438();
  sub_1C2987D2C();
  swift_allocObject();
  v2[3] = sub_1C2A9C9F8();
  v2[4] = a2;
  return v2;
}

void sub_1C2987CC0()
{
  if (!qword_1EBB92078)
  {
    unint64_t v0 = sub_1C2A9D428();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EBB92078);
    }
  }
}

void sub_1C2987D2C()
{
  if (!qword_1EBB8E898)
  {
    sub_1C2988294(255, &qword_1EBB8F508);
    unint64_t v0 = sub_1C2A9C9D8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EBB8E898);
    }
  }
}

uint64_t ECGAlgorithmVersionChangePublisher.deinit()
{
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t ECGAlgorithmVersionChangePublisher.__deallocating_deinit()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_1C2987E0C()
{
  return sub_1C2986A04();
}

uint64_t sub_1C2987E30@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = sub_1C2A9C9B8();
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 9) = v5;
  return result;
}

uint64_t sub_1C2987E80()
{
  return sub_1C2A9C9C8();
}

uint64_t method lookup function for ECGAlgorithmVersionChangePublisher(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ECGAlgorithmVersionChangePublisher);
}

uint64_t dispatch thunk of ECGAlgorithmVersionChangePublisher.publisher.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of ECGAlgorithmVersionChangePublisher.currentCacheData.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of ECGAlgorithmVersionChangePublisher.currentCacheData.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of ECGAlgorithmVersionChangePublisher.currentCacheData.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of ECGAlgorithmVersionChangePublisher.__allocating_init(currentCacheData:algorithmVersionPublisher:)()
{
  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for DiagramConfiguration.ValueFormatter(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ECGAlgorithmVersionChangePublisher.CacheData(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 9) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ECGAlgorithmVersionChangePublisher.CacheData()
{
  return &type metadata for ECGAlgorithmVersionChangePublisher.CacheData;
}

unsigned char *storeEnumTagSinglePayload for ECGAlgorithmVersionChangePublisher.CacheData.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1C29880A8);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for ECGAlgorithmVersionChangePublisher.CacheData.CodingKeys()
{
  return &type metadata for ECGAlgorithmVersionChangePublisher.CacheData.CodingKeys;
}

unint64_t sub_1C29880E4()
{
  unint64_t result = qword_1EA31E378;
  if (!qword_1EA31E378)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA31E378);
  }
  return result;
}

unint64_t sub_1C298813C()
{
  unint64_t result = qword_1EA31E380;
  if (!qword_1EA31E380)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA31E380);
  }
  return result;
}

unint64_t sub_1C2988194()
{
  unint64_t result = qword_1EA31E388;
  if (!qword_1EA31E388)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA31E388);
  }
  return result;
}

uint64_t sub_1C29881E8(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000018 && a2 == 0x80000001C2AB6E40)
  {
    swift_bridgeObjectRelease();
    char v2 = 0;
  }
  else
  {
    char v3 = sub_1C2A9E8D8();
    swift_bridgeObjectRelease();
    char v2 = v3 ^ 1;
  }
  return v2 & 1;
}

uint64_t sub_1C2988270(uint64_t result)
{
  char v2 = *(unsigned char *)(v1 + 24);
  char v3 = *(unsigned char *)(v1 + 25);
  *(void *)unint64_t result = *(void *)(v1 + 16);
  *(unsigned char *)(result + 8) = v2;
  *(unsigned char *)(result + 9) = v3;
  return result;
}

void sub_1C2988294(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = sub_1C2A9E328();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

CGFloat DiagramImageView.DiagramTransformer.toScreenY(_:)(CGFloat a1)
{
  v5.double y = a1;
  long long v2 = *(_OWORD *)(v1 + 24);
  *(_OWORD *)&v4.CGFloat a = *(_OWORD *)(v1 + 8);
  *(_OWORD *)&v4.CGFloat c = v2;
  *(_OWORD *)&v4.tdouble x = *(_OWORD *)(v1 + 40);
  v5.double x = 0.0;
  return CGPointApplyAffineTransform(v5, &v4).y;
}

__C::CGRect __swiftcall DiagramImageView.DiagramTransformer.toScreen(_:)(__C::CGRect a1)
{
  long long v2 = *(_OWORD *)(v1 + 24);
  *(_OWORD *)&v3.CGFloat a = *(_OWORD *)(v1 + 8);
  *(_OWORD *)&v3.CGFloat c = v2;
  *(_OWORD *)&v3.tdouble x = *(_OWORD *)(v1 + 40);
  return (__C::CGRect)CGRectApplyAffineTransform((CGRect)a1, &v3);
}

CGPoint __swiftcall DiagramImageView.DiagramTransformer.toScreen(_:)(CGPoint a1)
{
  long long v2 = *(_OWORD *)(v1 + 24);
  *(_OWORD *)&v7.CGFloat a = *(_OWORD *)(v1 + 8);
  *(_OWORD *)&v7.CGFloat c = v2;
  *(_OWORD *)&v7.tdouble x = *(_OWORD *)(v1 + 40);
  CGPoint v5 = CGPointApplyAffineTransform(a1, &v7);
  double y = v5.y;
  double x = v5.x;
  result.double y = y;
  result.double x = x;
  return result;
}

uint64_t sub_1C2988394()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC19HealthVisualization16DiagramImageView_delegate;
  swift_beginAccess();
  return MEMORY[0x1C87657D0](v1);
}

void (*sub_1C29883E4(void *a1))(uint64_t a1, char a2)
{
  CGAffineTransform v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC19HealthVisualization16DiagramImageView_delegate;
  v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x1C87657D0](v5);
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return sub_1C298846C;
}

void sub_1C298846C(uint64_t a1, char a2)
{
  CGAffineTransform v3 = *(void **)a1;
  *(void *)(*(void *)(*(void *)a1 + 40) + *(void *)(*(void *)a1 + 48) + 8) = *(void *)(*(void *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }
  free(v3);
}

id sub_1C29884F4@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1 + OBJC_IVAR____TtC19HealthVisualization16DiagramImageView_lastUsedTransformer;
  swift_beginAccess();
  uint64_t v4 = *(void **)v3;
  uint64_t v5 = *(void *)(v3 + 8);
  uint64_t v6 = *(void *)(v3 + 16);
  uint64_t v7 = *(void *)(v3 + 24);
  uint64_t v8 = *(void *)(v3 + 32);
  uint64_t v9 = *(void *)(v3 + 40);
  uint64_t v10 = *(void *)(v3 + 48);
  *a2 = *(void *)v3;
  a2[1] = v5;
  a2[2] = v6;
  a2[3] = v7;
  a2[4] = v8;
  a2[5] = v9;
  a2[6] = v10;
  return sub_1C2944A70(v4);
}

void sub_1C2988564(uint64_t a1, void *a2)
{
  long long v2 = *(void **)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v9 = *a2 + OBJC_IVAR____TtC19HealthVisualization16DiagramImageView_lastUsedTransformer;
  swift_beginAccess();
  uint64_t v10 = *(void **)v9;
  *(void *)uint64_t v9 = v2;
  *(void *)(v9 + 8) = v3;
  *(void *)(v9 + 16) = v4;
  *(void *)(v9 + 24) = v5;
  *(void *)(v9 + 32) = v6;
  *(void *)(v9 + 40) = v7;
  *(void *)(v9 + 48) = v8;
  sub_1C2944A70(v2);
  sub_1C2944A80(v10);
}

id sub_1C2988648@<X0>(void *a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC19HealthVisualization16DiagramImageView_lastUsedTransformer;
  swift_beginAccess();
  uint64_t v4 = *(void **)v3;
  uint64_t v5 = *(void *)(v3 + 8);
  uint64_t v6 = *(void *)(v3 + 16);
  uint64_t v7 = *(void *)(v3 + 24);
  uint64_t v8 = *(void *)(v3 + 32);
  uint64_t v9 = *(void *)(v3 + 40);
  uint64_t v10 = *(void *)(v3 + 48);
  *a1 = *(void *)v3;
  a1[1] = v5;
  a1[2] = v6;
  a1[3] = v7;
  a1[4] = v8;
  a1[5] = v9;
  a1[6] = v10;
  return sub_1C2944A70(v4);
}

__n128 sub_1C29886B4(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[3];
  long long v8 = *((_OWORD *)a1 + 2);
  long long v9 = *(_OWORD *)(a1 + 1);
  uint64_t v4 = a1[6];
  uint64_t v5 = v1 + OBJC_IVAR____TtC19HealthVisualization16DiagramImageView_lastUsedTransformer;
  swift_beginAccess();
  uint64_t v6 = *(void **)v5;
  *(void *)uint64_t v5 = v2;
  *(_OWORD *)(v5 + 8) = v9;
  *(void *)(v5 + 24) = v3;
  *(_OWORD *)(v5 + 32) = v8;
  *(void *)(v5 + 48) = v4;
  sub_1C2944A80(v6);
  return result;
}

uint64_t (*sub_1C2988750())()
{
  return j_j__swift_endAccess;
}

__n128 sub_1C29887AC@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC19HealthVisualization16DiagramImageView_lastUsedModelSpace;
  swift_beginAccess();
  char v4 = *(unsigned char *)(v3 + 32);
  __n128 result = *(__n128 *)v3;
  long long v6 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v3;
  *(_OWORD *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 32) = v4;
  return result;
}

uint64_t sub_1C2988804(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC19HealthVisualization16DiagramImageView_lastUsedModelSpace;
  swift_beginAccess();
  return sub_1C2934C44(a1, v3);
}

uint64_t (*sub_1C2988858())()
{
  return j__swift_endAccess;
}

id DiagramImageView.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  id v9 = objc_allocWithZone(v4);
  return objc_msgSend(v9, sel_initWithFrame_, a1, a2, a3, a4);
}

id DiagramImageView.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

id DiagramImageView.init(coder:)(void *a1)
{
  *(void *)&v1[OBJC_IVAR____TtC19HealthVisualization16DiagramImageView_imageRenderer] = 0;
  *(void *)&v1[OBJC_IVAR____TtC19HealthVisualization16DiagramImageView_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  id v3 = &v1[OBJC_IVAR____TtC19HealthVisualization16DiagramImageView_lastUsedTransformer];
  *(void *)id v3 = 1;
  *(_OWORD *)(v3 + 40) = 0u;
  *(_OWORD *)(v3 + 24) = 0u;
  *(_OWORD *)(v3 + 8) = 0u;
  char v4 = &v1[OBJC_IVAR____TtC19HealthVisualization16DiagramImageView_lastUsedModelSpace];
  *(_OWORD *)char v4 = 0u;
  *((_OWORD *)v4 + 1) = 0u;
  v4[32] = 1;
  v11.receiver = v1;
  v11.super_class = (Class)type metadata accessor for DiagramImageView();
  id v5 = objc_msgSendSuper2(&v11, sel_initWithCoder_, a1);
  id v6 = v5;
  if (v5)
  {
    id v7 = v5;
    objc_msgSend(v7, sel_frame);
    sub_1C2938480(v8, v9);
  }
  return v6;
}

char *DiagramImageView.__allocating_init(frame:delegate:)(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6)
{
  double v8 = (char *)objc_msgSend(objc_allocWithZone(v6), sel_initWithFrame_, a1, a2, a3, a4);
  double v9 = &v8[OBJC_IVAR____TtC19HealthVisualization16DiagramImageView_delegate];
  swift_beginAccess();
  *((void *)v9 + 1) = a6;
  swift_unknownObjectWeakAssign();
  swift_unknownObjectRelease();
  return v8;
}

double DiagramImageView.DiagramTransformer.init(modelSpace:screenSpace:screenInsets:context:)@<D0>(void *a1@<X0>, uint64_t a2@<X8>, CGFloat a3@<D0>, CGFloat a4@<D1>, CGFloat a5@<D2>, CGFloat a6@<D3>, double a7@<D4>, double a8@<D5>, double a9@<D6>, double a10@<D7>, double a11, double a12)
{
  double v18 = UIEdgeInsetsInsetRect(a7, a8, a9, a10, a11, a12);
  CGFloat v20 = v19;
  CGFloat v22 = v21;
  CGFloat v24 = v23;
  id v25 = a1;
  sub_1C293249C(v28, a3, a4, a5, a6, v18, v20, v22, v24);

  *(void *)a2 = a1;
  long long v26 = v28[1];
  *(_OWORD *)(a2 + 8) = v28[0];
  *(_OWORD *)(a2 + 24) = v26;
  double result = *(double *)&v29;
  *(_OWORD *)(a2 + 40) = v29;
  return result;
}

uint64_t sub_1C2988C08(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t static DiagramImageView.generateTestImage(modelSpace:screenSpace:screenInsets:imageRenderer:drawingBlock:)(void *a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, long long a17, uint64_t a18, uint64_t a19)
{
  uint64_t v28 = swift_allocObject();
  *(double *)(v28 + 16) = a4;
  *(double *)(v28 + 24) = a5;
  *(double *)(v28 + 32) = a6;
  *(double *)(v28 + 40) = a7;
  *(double *)(v28 + 48) = a8;
  *(double *)(v28 + 56) = a9;
  *(double *)(v28 + 64) = a10;
  *(double *)(v28 + 72) = a11;
  *(_OWORD *)(v28 + 80) = a17;
  *(void *)(v28 + 96) = a18;
  *(void *)(v28 + 104) = a19;
  *(void *)(v28 + 112) = a2;
  *(void *)(v28 + 120) = a3;
  uint64_t v29 = swift_allocObject();
  *(void *)(v29 + 16) = sub_1C29894FC;
  *(void *)(v29 + 24) = v28;
  aBlock[4] = sub_1C2989DF8;
  aBlock[5] = v29;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1C2942CA0;
  aBlock[3] = &block_descriptor_16;
  char v30 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  id v31 = objc_msgSend(a1, sel_imageWithActions_, v30);
  _Block_release(v30);
  LOBYTE(v30) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if ((v30 & 1) == 0) {
    return (uint64_t)v31;
  }
  __break(1u);
  return result;
}

void sub_1C2988E08(void *a1, void (*a2)(id, id *, double, double), CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, double a7, double a8, double a9, double a10, double a11, double a12)
{
  id v23 = objc_msgSend(a1, sel_CGContext);
  double v24 = UIEdgeInsetsInsetRect(a7, a8, a9, a10, a11, a12);
  CGFloat v26 = v25;
  CGFloat v28 = v27;
  CGFloat v30 = v29;
  id v35 = v23;
  sub_1C293249C(v40, a3, a4, a5, a6, v24, v26, v28, v30);
  id v36 = v23;
  long long v37 = v40[0];
  long long v38 = v40[1];
  long long v39 = v40[2];
  a2(v35, &v36, a9, a10);
}

id DiagramImageView.DiagramTransformer.context.getter()
{
  id v1 = *v0;
  id v2 = *v0;
  return v1;
}

__n128 DiagramImageView.DiagramTransformer.transform.getter@<Q0>(uint64_t a1@<X8>)
{
  long long v2 = *(_OWORD *)(v1 + 24);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 8);
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(v1 + 40);
  *(__n128 *)(a1 + 32) = result;
  return result;
}

double static DiagramImageView.DiagramTransformer.buildTransform(modelSpace:screenSpace:)@<D0>(_OWORD *a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>, CGFloat a6@<D4>, CGFloat a7@<D5>, CGFloat a8@<D6>, CGFloat a9@<D7>)
{
  sub_1C293249C(v12, a2, a3, a4, a5, a6, a7, a8, a9);
  long long v10 = v12[1];
  *a1 = v12[0];
  a1[1] = v10;
  double result = *(double *)&v13;
  a1[2] = v13;
  return result;
}

__n128 DiagramImageView.DiagramTransformer.init(transform:context:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = a2;
  long long v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a3 + 8) = *(_OWORD *)a1;
  *(_OWORD *)(a3 + 24) = v3;
  __n128 result = *(__n128 *)(a1 + 32);
  *(__n128 *)(a3 + 40) = result;
  return result;
}

id DiagramImageView.DiagramTransformer.transformer(applying:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  id v10 = *(id *)v2;
  long long v4 = *(_OWORD *)(v2 + 24);
  *(_OWORD *)&t1.CGFloat a = *(_OWORD *)(v2 + 8);
  *(_OWORD *)&t1.CGFloat c = v4;
  *(_OWORD *)&t1.tdouble x = *(_OWORD *)(v2 + 40);
  long long v5 = a1[1];
  *(_OWORD *)&t2.CGFloat a = *a1;
  *(_OWORD *)&t2.CGFloat c = v5;
  *(_OWORD *)&t2.tdouble x = a1[2];
  CGAffineTransformConcat(&v11, &t1, &t2);
  long long v6 = *(_OWORD *)&v11.a;
  long long v7 = *(_OWORD *)&v11.c;
  long long v8 = *(_OWORD *)&v11.tx;
  *(void *)a2 = v10;
  *(_OWORD *)(a2 + 8) = v6;
  *(_OWORD *)(a2 + 24) = v7;
  *(_OWORD *)(a2 + 40) = v8;
  return v10;
}

double DiagramImageView.DiagramTransformer.toScreenX(_:)(double a1)
{
  long long v2 = *(_OWORD *)(v1 + 24);
  *(_OWORD *)&v5.CGFloat a = *(_OWORD *)(v1 + 8);
  *(_OWORD *)&v5.CGFloat c = v2;
  *(_OWORD *)&v5.tdouble x = *(_OWORD *)(v1 + 40);
  uint64_t v3 = 0;
  *(void *)&double result = *(_OWORD *)&CGPointApplyAffineTransform(*(CGPoint *)&a1, &v5);
  return result;
}

void DiagramImageView.DiagramTransformer.drawContent(modelSpace:screenSpace:screenInsets:drawingBlock:)(void (*a1)(CGContext *, void **, double, double), CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9, double a10, double a11)
{
  double v19 = *v18;
  if (*v18)
  {
    CGFloat v26 = v19;
    CGContextSaveGState(v26);
    CGContextTranslateCTM(v26, a6, a7);
    v48.origin.double x = a6;
    v48.origin.double y = a7;
    v48.size.double width = a8;
    v48.size.double height = a9;
    CGRect v49 = CGRectOffset(v48, -a6, -a7);
    double x = v49.origin.x;
    double y = v49.origin.y;
    double width = v49.size.width;
    double height = v49.size.height;
    CGContextClipToRect(v26, v49);
    double v31 = UIEdgeInsetsInsetRect(x, y, width, height, a10, a11);
    CGFloat v33 = v32;
    CGFloat v35 = v34;
    CGFloat v37 = v36;
    CGFloat c = v26;
    sub_1C293249C(v46, a2, a3, a4, a5, v31, v33, v35, v37);
    uint64_t v42 = v19;
    long long v43 = v46[0];
    long long v44 = v46[1];
    long long v45 = v46[2];
    a1(c, &v42, width, height);
    CGContextRestoreGState(c);
  }
}

id DiagramImageView.__allocating_init(image:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithImage_, a1);

  return v3;
}

void DiagramImageView.init(image:)()
{
}

id DiagramImageView.__allocating_init(image:highlightedImage:)(void *a1, void *a2)
{
  id v5 = objc_msgSend(objc_allocWithZone(v2), sel_initWithImage_highlightedImage_, a1, a2);

  return v5;
}

void DiagramImageView.init(image:highlightedImage:)()
{
}

id DiagramImageView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DiagramImageView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1C298946C()
{
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1C29894A4()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 136, 7);
}

uint64_t sub_1C29894DC()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1C29894EC()
{
  return MEMORY[0x1F4186498](v0, 128, 7);
}

void sub_1C29894FC(void *a1)
{
  sub_1C2988E08(a1, *(void (**)(id, id *, double, double))(v1 + 112), *(CGFloat *)(v1 + 16), *(CGFloat *)(v1 + 24), *(CGFloat *)(v1 + 32), *(CGFloat *)(v1 + 40), *(double *)(v1 + 48), *(double *)(v1 + 56), *(double *)(v1 + 64), *(double *)(v1 + 72), *(double *)(v1 + 80), *(double *)(v1 + 88));
}

uint64_t sub_1C2989540()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1C2989550@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1 + OBJC_IVAR____TtC19HealthVisualization16DiagramImageView_delegate;
  swift_beginAccess();
  uint64_t result = MEMORY[0x1C87657D0](v3);
  uint64_t v5 = *(void *)(v3 + 8);
  *a2 = result;
  a2[1] = v5;
  return result;
}

uint64_t sub_1C29895AC(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *a2 + OBJC_IVAR____TtC19HealthVisualization16DiagramImageView_delegate;
  swift_beginAccess();
  *(void *)(v3 + 8) = v2;
  return swift_unknownObjectWeakAssign();
}

__n128 sub_1C2989618@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1 + OBJC_IVAR____TtC19HealthVisualization16DiagramImageView_lastUsedModelSpace;
  swift_beginAccess();
  char v4 = *(unsigned char *)(v3 + 32);
  __n128 result = *(__n128 *)v3;
  long long v6 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)v3;
  *(_OWORD *)(a2 + 16) = v6;
  *(unsigned char *)(a2 + 32) = v4;
  return result;
}

__n128 sub_1C2989674(__n128 *a1, void *a2)
{
  __n128 v7 = *a1;
  unint64_t v2 = a1[1].n128_u64[0];
  unint64_t v3 = a1[1].n128_u64[1];
  unsigned __int8 v4 = a1[2].n128_u8[0];
  uint64_t v5 = *a2 + OBJC_IVAR____TtC19HealthVisualization16DiagramImageView_lastUsedModelSpace;
  swift_beginAccess();
  __n128 result = v7;
  *(__n128 *)uint64_t v5 = v7;
  *(void *)(v5 + 16) = v2;
  *(void *)(v5 + 24) = v3;
  *(unsigned char *)(v5 + 32) = v4;
  return result;
}

uint64_t dispatch thunk of DiagramImageViewDelegate.diagramImageViewDidRender(_:transformer:modelSpace:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, _OWORD *))(a5 + 8);
  char v6 = *(unsigned char *)(a3 + 32);
  long long v7 = *(_OWORD *)(a3 + 16);
  v9[0] = *(_OWORD *)a3;
  v9[1] = v7;
  char v10 = v6;
  return v5(a1, a2, v9);
}

uint64_t dispatch thunk of DiagramImageViewDelegate.diagramImageViewDidUpdate(_:renderSize:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t method lookup function for DiagramImageView(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for DiagramImageView);
}

uint64_t dispatch thunk of DiagramImageView.delegate.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of DiagramImageView.delegate.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x98))();
}

uint64_t dispatch thunk of DiagramImageView.lastUsedTransformer.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of DiagramImageView.lastUsedTransformer.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of DiagramImageView.lastUsedTransformer.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of DiagramImageView.lastUsedModelSpace.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of DiagramImageView.lastUsedModelSpace.setter(uint64_t a1)
{
  char v2 = *(unsigned char *)(a1 + 32);
  unint64_t v3 = *(uint64_t (**)(_OWORD *))((*MEMORY[0x1E4FBC8C8] & *v1) + 0xC0);
  long long v4 = *(_OWORD *)(a1 + 16);
  v6[0] = *(_OWORD *)a1;
  v6[1] = v4;
  char v7 = v2;
  return v3(v6);
}

uint64_t dispatch thunk of DiagramImageView.lastUsedModelSpace.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of DiagramImageView.drawContent(modelSpace:screenInsets:drawingBlock:)(uint64_t a1)
{
  char v2 = *(unsigned char *)(a1 + 32);
  unint64_t v3 = *(uint64_t (**)(_OWORD *))((*MEMORY[0x1E4FBC8C8] & *v1) + 0xD8);
  long long v4 = *(_OWORD *)(a1 + 16);
  v6[0] = *(_OWORD *)a1;
  v6[1] = v4;
  char v7 = v2;
  return v3(v6);
}

void destroy for DiagramImageView.DiagramDrawBlockContext(uint64_t a1)
{
  char v2 = *(void **)(a1 + 24);
}

uint64_t initializeWithCopy for DiagramImageView.DiagramDrawBlockContext(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unint64_t v3 = *(void **)(a2 + 16);
  long long v4 = *(void **)(a2 + 24);
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v4;
  long long v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  id v6 = v3;
  id v7 = v4;
  return a1;
}

void *assignWithCopy for DiagramImageView.DiagramDrawBlockContext(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  long long v4 = (void *)a2[2];
  long long v5 = (void *)a1[2];
  a1[2] = v4;
  id v6 = v4;

  id v7 = (void *)a1[3];
  long long v8 = (void *)a2[3];
  a1[3] = v8;
  id v9 = v8;

  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  a1[9] = a2[9];
  return a1;
}

__n128 __swift_memcpy80_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for DiagramImageView.DiagramDrawBlockContext(uint64_t a1, _OWORD *a2)
{
  *(_OWORD *)a1 = *a2;

  long long v4 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = a2[1];

  long long v5 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 64) = a2[4];
  return a1;
}

uint64_t getEnumTagSinglePayload for DiagramImageView.DiagramDrawBlockContext(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DiagramImageView.DiagramDrawBlockContext(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DiagramImageView.DiagramDrawBlockContext()
{
  return &type metadata for DiagramImageView.DiagramDrawBlockContext;
}

void destroy for DiagramImageView.DiagramTransformer(id *a1)
{
}

uint64_t initializeWithCopy for DiagramImageView.DiagramTransformer(uint64_t a1, uint64_t a2)
{
  long long v3 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  id v4 = v3;
  return a1;
}

uint64_t assignWithCopy for DiagramImageView.DiagramTransformer(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a1;
  long long v5 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  id v6 = v5;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  return a1;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for DiagramImageView.DiagramTransformer(uint64_t a1, uint64_t a2)
{
  long long v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for DiagramImageView.DiagramTransformer(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 56)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DiagramImageView.DiagramTransformer(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 56) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DiagramImageView.DiagramTransformer()
{
  return &type metadata for DiagramImageView.DiagramTransformer;
}

uint64_t sub_1C2989DC4(uint64_t a1)
{
  return a1;
}

id sub_1C2989DFC()
{
  sub_1C298A220();
  MEMORY[0x1F4188790](v0 - 8);
  unint64_t v2 = (char *)&v8 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28D48]), sel_init);
  sub_1C2A9C898();
  uint64_t v4 = sub_1C2A9C8B8();
  uint64_t v5 = *(void *)(v4 - 8);
  id v6 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v2, 1, v4) != 1)
  {
    id v6 = (void *)sub_1C2A9C8A8();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v2, v4);
  }
  objc_msgSend(v3, sel_setTimeZone_, v6);

  id result = objc_msgSend(v3, sel_setFormatOptions_, 19);
  qword_1EBB9F1D0 = (uint64_t)v3;
  return result;
}

void sub_1C2989F58()
{
  id v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28C20]), sel_init);
  uint64_t v1 = (void *)sub_1C2A9DCF8();
  objc_msgSend(v0, sel_setDateTemplate_, v1);

  qword_1EBB8FFB0 = (uint64_t)v0;
}

id static NSDateIntervalFormatter.abbreviatedMonthDay.getter()
{
  if (qword_1EBB8FAE0 != -1) {
    swift_once();
  }
  id v0 = (void *)qword_1EBB8FFB0;
  return v0;
}

Swift::String __swiftcall DateInterval.stringWithISO8601Format()()
{
  uint64_t v0 = sub_1C2A9C6E8();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  id v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EBB92350 != -1) {
    swift_once();
  }
  uint64_t v4 = (void *)qword_1EBB9F1D0;
  uint64_t v16 = 0;
  unint64_t v17 = 0xE000000000000000;
  sub_1C2A9C378();
  uint64_t v5 = (void *)sub_1C2A9C658();
  id v6 = *(void (**)(char *, uint64_t))(v1 + 8);
  v6(v3, v0);
  id v7 = objc_msgSend(v4, sel_stringFromDate_, v5);

  uint64_t v8 = sub_1C2A9DD28();
  unint64_t v10 = v9;

  swift_bridgeObjectRelease();
  uint64_t v16 = v8;
  unint64_t v17 = v10;
  sub_1C2A9DDB8();
  sub_1C2A9C348();
  CGAffineTransform v11 = (void *)sub_1C2A9C658();
  v6(v3, v0);
  id v12 = objc_msgSend(v4, sel_stringFromDate_, v11);

  sub_1C2A9DD28();
  sub_1C2A9DDB8();
  swift_bridgeObjectRelease();
  uint64_t v13 = v16;
  int v14 = (void *)v17;
  result._uint64_t object = v14;
  result._uint64_t countAndFlagsBits = v13;
  return result;
}

void sub_1C298A220()
{
  if (!qword_1EBB92530)
  {
    sub_1C2A9C8B8();
    unint64_t v0 = sub_1C2A9E328();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EBB92530);
    }
  }
}

uint64_t DiagramAxisLabel.text.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

double DiagramAxisLabel.location.getter()
{
  return *(double *)(v0 + 16);
}

uint64_t DiagramAxisLabel.type.getter()
{
  return *(void *)(v0 + 24);
}

float DiagramAxisLabel.priority.getter()
{
  return *(float *)(v0 + 32);
}

uint64_t DiagramAxisLabel.init(text:location:type:priority:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, float a6@<S1>)
{
  *(void *)a4 = result;
  *(void *)(a4 + 8) = a2;
  *(double *)(a4 + 16) = a5;
  *(void *)(a4 + 24) = a3;
  *(float *)(a4 + 32) = a6;
  return result;
}

uint64_t DiagramAxisMetrics.labels.getter()
{
  return swift_bridgeObjectRetain();
}

double DiagramAxisMetrics.adjustedModelCoordinateRange.getter()
{
  return *(double *)(v0 + 8);
}

uint64_t DiagramAxisMetrics.init(labels:adjustedModelCoordinateRange:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  *(void *)a2 = result;
  *(double *)(a2 + 8) = a3;
  *(double *)(a2 + 16) = a4;
  return result;
}

BOOL _s19HealthVisualization16DiagramAxisLabelV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  double v4 = *(double *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  float v6 = *(float *)(a1 + 32);
  uint64_t v7 = *(void *)(a2 + 8);
  double v8 = *(double *)(a2 + 16);
  uint64_t v9 = *(void *)(a2 + 24);
  float v10 = *(float *)(a2 + 32);
  if (!v3)
  {
    BOOL result = 0;
    if (v7) {
      return result;
    }
    goto LABEL_10;
  }
  if (!v7) {
    return 0;
  }
  if (*(void *)a1 == *(void *)a2 && v3 == v7)
  {
    if (v4 == v8 && v5 == v9) {
      return v6 == v10;
    }
    return 0;
  }
  char v12 = sub_1C2A9E8D8();
  BOOL result = 0;
  if ((v12 & 1) == 0) {
    return result;
  }
LABEL_10:
  if (v4 == v8 && v5 == v9) {
    return v6 == v10;
  }
  return result;
}

uint64_t assignWithCopy for DiagramAxisLabel(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return a1;
}

__n128 __swift_memcpy36_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for DiagramAxisLabel(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for DiagramAxisLabel(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 36)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DiagramAxisLabel(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(_DWORD *)(result + 32) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 36) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 36) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DiagramAxisLabel()
{
  return &type metadata for DiagramAxisLabel;
}

uint64_t initializeBufferWithCopyOfBuffer for DiagramAxisMetrics(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for DiagramAxisMetrics(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  return a1;
}

uint64_t assignWithTake for DiagramAxisMetrics(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  return a1;
}

ValueMetadata *type metadata accessor for DiagramAxisMetrics()
{
  return &type metadata for DiagramAxisMetrics;
}

uint64_t dispatch thunk of ObjectTypeIdentifiable.objectTypeIdentifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t sub_1C298A638(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v31 = *a2;
    *(void *)a1 = *a2;
    uint64_t v32 = v31 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    *(void *)(a1 + 16) = a2[2];
    *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
    uint64_t v7 = *(int *)(a3 + 24);
    uint64_t v8 = a1 + v7;
    uint64_t v9 = (uint64_t)a2 + v7;
    uint64_t v10 = sub_1C2A9C858();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    uint64_t v11 = type metadata accessor for TimeBasedDistribution();
    *(void *)(v8 + *(int *)(v11 + 20)) = *(void *)(v9 + *(int *)(v11 + 20));
    uint64_t v12 = *(int *)(v11 + 24);
    uint64_t v13 = (void *)(v8 + v12);
    int v14 = (void *)(v9 + v12);
    uint64_t v15 = v14[1];
    *uint64_t v13 = *v14;
    v13[1] = v15;
    uint64_t v57 = a3;
    id v58 = a2;
    uint64_t v16 = *(int *)(a3 + 28);
    uint64_t v59 = a1;
    uint64_t v17 = a1 + v16;
    uint64_t v18 = (uint64_t)a2 + v16;
    *(unsigned char *)uint64_t v17 = *((unsigned char *)a2 + v16);
    uint64_t v19 = a1 + v16 + 8;
    uint64_t v20 = (uint64_t)a2 + v16 + 8;
    long long v21 = *(_OWORD *)((char *)a2 + v16 + 32);
    *(_OWORD *)(v17 + 32) = v21;
    uint64_t v22 = v21;
    id v23 = **(void (***)(uint64_t, uint64_t, uint64_t))(v21 - 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v23(v19, v20, v22);
    double v54 = (int *)type metadata accessor for TimeBasedDistributionChartModel();
    uint64_t v55 = v18;
    uint64_t v24 = v54[6];
    uint64_t v56 = v17;
    double v25 = (char *)(v17 + v24);
    CGFloat v26 = (char *)(v18 + v24);
    uint64_t v27 = sub_1C2A9D2E8();
    uint64_t v28 = *(void *)(v27 - 8);
    double v29 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48);
    if (v29(v26, 1, v27))
    {
      sub_1C2990DB4(0, (unint64_t *)&qword_1EA31DFF0, MEMORY[0x1E4F19478], MEMORY[0x1E4FBB718]);
      memcpy(v25, v26, *(void *)(*(void *)(v30 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v25, v26, v27);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
    }
    CGFloat v33 = (int *)type metadata accessor for TimeBasedDistributionChartDesign();
    uint64_t v34 = v33[5];
    CGFloat v35 = &v25[v34];
    double v36 = &v26[v34];
    if (v29(&v26[v34], 1, v27))
    {
      sub_1C2990DB4(0, (unint64_t *)&qword_1EA31DFF0, MEMORY[0x1E4F19478], MEMORY[0x1E4FBB718]);
      memcpy(v35, v36, *(void *)(*(void *)(v37 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v35, v36, v27);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v35, 0, 1, v27);
    }
    *(void *)&v25[v33[6]] = *(void *)&v26[v33[6]];
    *(void *)&v25[v33[7]] = *(void *)&v26[v33[7]];
    *(void *)&v25[v33[8]] = *(void *)&v26[v33[8]];
    *(void *)&v25[v33[9]] = *(void *)&v26[v33[9]];
    uint64_t v38 = v33[10];
    uint64_t v52 = &v26[v38];
    uint64_t v53 = &v25[v38];
    uint64_t v39 = sub_1C2A9D598();
    uint64_t v40 = *(void (**)(char *, char *, uint64_t))(*(void *)(v39 - 8) + 16);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v40(v53, v52, v39);
    *(void *)&v25[v33[11]] = *(void *)&v26[v33[11]];
    *(void *)&v25[v33[12]] = *(void *)&v26[v33[12]];
    *(void *)&v25[v33[13]] = *(void *)&v26[v33[13]];
    *(void *)&v25[v33[14]] = *(void *)&v26[v33[14]];
    *(void *)&v25[v33[15]] = *(void *)&v26[v33[15]];
    *(void *)&v25[v33[16]] = *(void *)&v26[v33[16]];
    *(void *)&v25[v33[17]] = *(void *)&v26[v33[17]];
    *(void *)&v25[v33[18]] = *(void *)&v26[v33[18]];
    *(void *)&v25[v33[19]] = *(void *)&v26[v33[19]];
    *(void *)&v25[v33[20]] = *(void *)&v26[v33[20]];
    *(void *)&v25[v33[21]] = *(void *)&v26[v33[21]];
    *(void *)&v25[v33[22]] = *(void *)&v26[v33[22]];
    *(void *)&v25[v33[23]] = *(void *)&v26[v33[23]];
    *(void *)&v25[v33[24]] = *(void *)&v26[v33[24]];
    v25[v33[25]] = v26[v33[25]];
    uint64_t v41 = v54[7];
    uint64_t v42 = v56 + v41;
    uint64_t v43 = v55 + v41;
    long long v44 = *(_OWORD *)(v55 + v41 + 24);
    *(_OWORD *)(v56 + v41 + 24) = v44;
    uint64_t v45 = v44;
    uint64_t v46 = **(void (***)(uint64_t, uint64_t, uint64_t))(v44 - 8);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v46(v42, v43, v45);
    uint64_t v47 = v54[8];
    uint64_t v48 = v56 + v47;
    uint64_t v49 = v55 + v47;
    uint64_t v50 = sub_1C2A9CFE8();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v50 - 8) + 16))(v48, v49, v50);
    uint64_t v32 = v59;
    *(unsigned char *)(v59 + *(int *)(v57 + 32)) = *((unsigned char *)v58 + *(int *)(v57 + 32));
  }
  return v32;
}

uint64_t sub_1C298AC28(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = sub_1C2A9C858();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  type metadata accessor for TimeBasedDistribution();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = a1 + *(int *)(a2 + 28);
  __swift_destroy_boxed_opaque_existential_1(v6 + 8);
  uint64_t v7 = (int *)type metadata accessor for TimeBasedDistributionChartModel();
  uint64_t v8 = v6 + v7[6];
  uint64_t v9 = sub_1C2A9D2E8();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (!v11(v8, 1, v9)) {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  }
  uint64_t v12 = type metadata accessor for TimeBasedDistributionChartDesign();
  uint64_t v13 = v8 + *(int *)(v12 + 20);
  if (!v11(v13, 1, v9)) {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v13, v9);
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v14 = v8 + *(int *)(v12 + 40);
  uint64_t v15 = sub_1C2A9D598();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v14, v15);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v6 + v7[7]);
  uint64_t v16 = v6 + v7[8];
  uint64_t v17 = sub_1C2A9CFE8();
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8);
  return v18(v16, v17);
}

uint64_t sub_1C298AEC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = sub_1C2A9C858();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  uint64_t v10 = type metadata accessor for TimeBasedDistribution();
  *(void *)(v7 + *(int *)(v10 + 20)) = *(void *)(v8 + *(int *)(v10 + 20));
  uint64_t v11 = *(int *)(v10 + 24);
  uint64_t v12 = (void *)(v7 + v11);
  uint64_t v13 = (void *)(v8 + v11);
  uint64_t v14 = v13[1];
  *uint64_t v12 = *v13;
  v12[1] = v14;
  uint64_t v54 = a3;
  uint64_t v55 = a2;
  uint64_t v15 = *(int *)(a3 + 28);
  uint64_t v56 = a1;
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  *(unsigned char *)uint64_t v16 = *(unsigned char *)(a2 + v15);
  uint64_t v18 = a1 + v15 + 8;
  uint64_t v19 = a2 + v15 + 8;
  long long v20 = *(_OWORD *)(a2 + v15 + 32);
  *(_OWORD *)(v16 + 32) = v20;
  uint64_t v21 = v20;
  uint64_t v22 = **(void (***)(uint64_t, uint64_t, uint64_t))(v20 - 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v22(v18, v19, v21);
  uint64_t v51 = (int *)type metadata accessor for TimeBasedDistributionChartModel();
  uint64_t v52 = v17;
  uint64_t v23 = v51[6];
  uint64_t v53 = v16;
  uint64_t v24 = (char *)(v16 + v23);
  double v25 = (char *)(v17 + v23);
  uint64_t v26 = sub_1C2A9D2E8();
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48);
  if (v28(v25, 1, v26))
  {
    sub_1C2990DB4(0, (unint64_t *)&qword_1EA31DFF0, MEMORY[0x1E4F19478], MEMORY[0x1E4FBB718]);
    memcpy(v24, v25, *(void *)(*(void *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v24, v25, v26);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  }
  uint64_t v30 = (int *)type metadata accessor for TimeBasedDistributionChartDesign();
  uint64_t v31 = v30[5];
  uint64_t v32 = &v24[v31];
  CGFloat v33 = &v25[v31];
  if (v28(&v25[v31], 1, v26))
  {
    sub_1C2990DB4(0, (unint64_t *)&qword_1EA31DFF0, MEMORY[0x1E4F19478], MEMORY[0x1E4FBB718]);
    memcpy(v32, v33, *(void *)(*(void *)(v34 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v32, v33, v26);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v32, 0, 1, v26);
  }
  *(void *)&v24[v30[6]] = *(void *)&v25[v30[6]];
  *(void *)&v24[v30[7]] = *(void *)&v25[v30[7]];
  *(void *)&v24[v30[8]] = *(void *)&v25[v30[8]];
  *(void *)&v24[v30[9]] = *(void *)&v25[v30[9]];
  uint64_t v35 = v30[10];
  uint64_t v49 = &v25[v35];
  uint64_t v50 = &v24[v35];
  uint64_t v36 = sub_1C2A9D598();
  uint64_t v37 = *(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 16);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v37(v50, v49, v36);
  *(void *)&v24[v30[11]] = *(void *)&v25[v30[11]];
  *(void *)&v24[v30[12]] = *(void *)&v25[v30[12]];
  *(void *)&v24[v30[13]] = *(void *)&v25[v30[13]];
  *(void *)&v24[v30[14]] = *(void *)&v25[v30[14]];
  *(void *)&v24[v30[15]] = *(void *)&v25[v30[15]];
  *(void *)&v24[v30[16]] = *(void *)&v25[v30[16]];
  *(void *)&v24[v30[17]] = *(void *)&v25[v30[17]];
  *(void *)&v24[v30[18]] = *(void *)&v25[v30[18]];
  *(void *)&v24[v30[19]] = *(void *)&v25[v30[19]];
  *(void *)&v24[v30[20]] = *(void *)&v25[v30[20]];
  *(void *)&v24[v30[21]] = *(void *)&v25[v30[21]];
  *(void *)&v24[v30[22]] = *(void *)&v25[v30[22]];
  *(void *)&v24[v30[23]] = *(void *)&v25[v30[23]];
  *(void *)&v24[v30[24]] = *(void *)&v25[v30[24]];
  v24[v30[25]] = v25[v30[25]];
  uint64_t v38 = v51[7];
  uint64_t v39 = v53 + v38;
  uint64_t v40 = v52 + v38;
  long long v41 = *(_OWORD *)(v52 + v38 + 24);
  *(_OWORD *)(v53 + v38 + 24) = v41;
  uint64_t v42 = v41;
  uint64_t v43 = **(void (***)(uint64_t, uint64_t, uint64_t))(v41 - 8);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v43(v39, v40, v42);
  uint64_t v44 = v51[8];
  uint64_t v45 = v53 + v44;
  uint64_t v46 = v52 + v44;
  uint64_t v47 = sub_1C2A9CFE8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 16))(v45, v46, v47);
  uint64_t result = v56;
  *(unsigned char *)(v56 + *(int *)(v54 + 32)) = *(unsigned char *)(v55 + *(int *)(v54 + 32));
  return result;
}

uint64_t sub_1C298B464(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v6;
  uint64_t v7 = a2[2];
  *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
  *(void *)(a1 + 16) = v7;
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = (uint64_t)a2 + v8;
  uint64_t v11 = sub_1C2A9C858();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 24))(v9, v10, v11);
  uint64_t v12 = type metadata accessor for TimeBasedDistribution();
  *(void *)(v9 + *(int *)(v12 + 20)) = *(void *)(v10 + *(int *)(v12 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v13 = *(int *)(v12 + 24);
  uint64_t v14 = (void *)(v9 + v13);
  uint64_t v15 = (void *)(v10 + v13);
  *uint64_t v14 = *v15;
  v14[1] = v15[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v47 = a3;
  uint64_t v48 = a2;
  uint64_t v16 = *(int *)(a3 + 28);
  uint64_t v49 = a1;
  uint64_t v17 = a1 + v16;
  uint64_t v18 = (uint64_t)a2 + v16;
  *(unsigned char *)uint64_t v17 = *(unsigned char *)v18;
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(v17 + 8), (uint64_t *)(v18 + 8));
  uint64_t v44 = (int *)type metadata accessor for TimeBasedDistributionChartModel();
  uint64_t v45 = v18;
  uint64_t v19 = v44[6];
  uint64_t v46 = v17;
  long long v20 = (char *)(v17 + v19);
  uint64_t v21 = (char *)(v18 + v19);
  uint64_t v22 = sub_1C2A9D2E8();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48);
  int v25 = v24(v20, 1, v22);
  int v26 = v24(v21, 1, v22);
  if (v25)
  {
    if (!v26)
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v20, v21, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v26)
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v20, v22);
LABEL_6:
    sub_1C2990DB4(0, (unint64_t *)&qword_1EA31DFF0, MEMORY[0x1E4F19478], MEMORY[0x1E4FBB718]);
    memcpy(v20, v21, *(void *)(*(void *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v23 + 24))(v20, v21, v22);
LABEL_7:
  uint64_t v28 = (int *)type metadata accessor for TimeBasedDistributionChartDesign();
  uint64_t v29 = v28[5];
  uint64_t v30 = &v20[v29];
  uint64_t v31 = &v21[v29];
  int v32 = v24(&v20[v29], 1, v22);
  int v33 = v24(v31, 1, v22);
  if (!v32)
  {
    if (!v33)
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 24))(v30, v31, v22);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v23 + 8))(v30, v22);
    goto LABEL_12;
  }
  if (v33)
  {
LABEL_12:
    sub_1C2990DB4(0, (unint64_t *)&qword_1EA31DFF0, MEMORY[0x1E4F19478], MEMORY[0x1E4FBB718]);
    memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v30, v31, v22);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v30, 0, 1, v22);
LABEL_13:
  *(void *)&v20[v28[6]] = *(void *)&v21[v28[6]];
  swift_retain();
  swift_release();
  *(void *)&v20[v28[7]] = *(void *)&v21[v28[7]];
  swift_retain();
  swift_release();
  *(void *)&v20[v28[8]] = *(void *)&v21[v28[8]];
  swift_retain();
  swift_release();
  *(void *)&v20[v28[9]] = *(void *)&v21[v28[9]];
  swift_retain();
  swift_release();
  uint64_t v35 = v28[10];
  uint64_t v36 = &v20[v35];
  uint64_t v37 = &v21[v35];
  uint64_t v38 = sub_1C2A9D598();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v38 - 8) + 24))(v36, v37, v38);
  *(void *)&v20[v28[11]] = *(void *)&v21[v28[11]];
  swift_retain();
  swift_release();
  *(void *)&v20[v28[12]] = *(void *)&v21[v28[12]];
  swift_retain();
  swift_release();
  *(void *)&v20[v28[13]] = *(void *)&v21[v28[13]];
  swift_retain();
  swift_release();
  *(void *)&v20[v28[14]] = *(void *)&v21[v28[14]];
  swift_retain();
  swift_release();
  *(void *)&v20[v28[15]] = *(void *)&v21[v28[15]];
  swift_retain();
  swift_release();
  *(void *)&v20[v28[16]] = *(void *)&v21[v28[16]];
  swift_retain();
  swift_release();
  *(void *)&v20[v28[17]] = *(void *)&v21[v28[17]];
  *(void *)&v20[v28[18]] = *(void *)&v21[v28[18]];
  *(void *)&v20[v28[19]] = *(void *)&v21[v28[19]];
  *(void *)&v20[v28[20]] = *(void *)&v21[v28[20]];
  *(void *)&v20[v28[21]] = *(void *)&v21[v28[21]];
  *(void *)&v20[v28[22]] = *(void *)&v21[v28[22]];
  *(void *)&v20[v28[23]] = *(void *)&v21[v28[23]];
  *(void *)&v20[v28[24]] = *(void *)&v21[v28[24]];
  v20[v28[25]] = v21[v28[25]];
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(v46 + v44[7]), (uint64_t *)(v45 + v44[7]));
  uint64_t v39 = v44[8];
  uint64_t v40 = v46 + v39;
  uint64_t v41 = v45 + v39;
  uint64_t v42 = sub_1C2A9CFE8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 24))(v40, v41, v42);
  uint64_t result = v49;
  *(unsigned char *)(v49 + *(int *)(v47 + 32)) = *((unsigned char *)v48 + *(int *)(v47 + 32));
  return result;
}

uint64_t sub_1C298BA7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = sub_1C2A9C858();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = type metadata accessor for TimeBasedDistribution();
  *(void *)(v7 + *(int *)(v10 + 20)) = *(void *)(v8 + *(int *)(v10 + 20));
  *(_OWORD *)(v7 + *(int *)(v10 + 24)) = *(_OWORD *)(v8 + *(int *)(v10 + 24));
  uint64_t v41 = a3;
  uint64_t v42 = a2;
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v43 = a1;
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  *(unsigned char *)uint64_t v12 = *(unsigned char *)(a2 + v11);
  *(_OWORD *)(v12 + 8) = *(_OWORD *)(a2 + v11 + 8);
  *(_OWORD *)(v12 + 24) = *(_OWORD *)(a2 + v11 + 24);
  *(void *)(v12 + 40) = *(void *)(a2 + v11 + 40);
  uint64_t v39 = (int *)type metadata accessor for TimeBasedDistributionChartModel();
  uint64_t v40 = v13;
  uint64_t v14 = v39[6];
  uint64_t v15 = (char *)(v12 + v14);
  uint64_t v16 = (char *)(v13 + v14);
  uint64_t v17 = sub_1C2A9D2E8();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
  if (v19(v16, 1, v17))
  {
    sub_1C2990DB4(0, (unint64_t *)&qword_1EA31DFF0, MEMORY[0x1E4F19478], MEMORY[0x1E4FBB718]);
    memcpy(v15, v16, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v15, v16, v17);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  }
  uint64_t v21 = (int *)type metadata accessor for TimeBasedDistributionChartDesign();
  uint64_t v22 = v21[5];
  uint64_t v23 = &v15[v22];
  uint64_t v24 = &v16[v22];
  if (v19(&v16[v22], 1, v17))
  {
    sub_1C2990DB4(0, (unint64_t *)&qword_1EA31DFF0, MEMORY[0x1E4F19478], MEMORY[0x1E4FBB718]);
    memcpy(v23, v24, *(void *)(*(void *)(v25 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v23, v24, v17);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v23, 0, 1, v17);
  }
  *(void *)&v15[v21[6]] = *(void *)&v16[v21[6]];
  *(void *)&v15[v21[7]] = *(void *)&v16[v21[7]];
  *(void *)&v15[v21[8]] = *(void *)&v16[v21[8]];
  *(void *)&v15[v21[9]] = *(void *)&v16[v21[9]];
  uint64_t v26 = v21[10];
  uint64_t v27 = &v15[v26];
  uint64_t v28 = &v16[v26];
  uint64_t v29 = sub_1C2A9D598();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 32))(v27, v28, v29);
  *(void *)&v15[v21[11]] = *(void *)&v16[v21[11]];
  *(void *)&v15[v21[12]] = *(void *)&v16[v21[12]];
  *(void *)&v15[v21[13]] = *(void *)&v16[v21[13]];
  *(void *)&v15[v21[14]] = *(void *)&v16[v21[14]];
  *(void *)&v15[v21[15]] = *(void *)&v16[v21[15]];
  *(void *)&v15[v21[16]] = *(void *)&v16[v21[16]];
  *(void *)&v15[v21[17]] = *(void *)&v16[v21[17]];
  *(void *)&v15[v21[18]] = *(void *)&v16[v21[18]];
  *(void *)&v15[v21[19]] = *(void *)&v16[v21[19]];
  *(void *)&v15[v21[20]] = *(void *)&v16[v21[20]];
  *(void *)&v15[v21[21]] = *(void *)&v16[v21[21]];
  *(void *)&v15[v21[22]] = *(void *)&v16[v21[22]];
  *(void *)&v15[v21[23]] = *(void *)&v16[v21[23]];
  *(void *)&v15[v21[24]] = *(void *)&v16[v21[24]];
  v15[v21[25]] = v16[v21[25]];
  uint64_t v30 = v39[7];
  uint64_t v31 = v12 + v30;
  uint64_t v32 = v40 + v30;
  *(void *)(v31 + 32) = *(void *)(v32 + 32);
  long long v33 = *(_OWORD *)(v32 + 16);
  *(_OWORD *)uint64_t v31 = *(_OWORD *)v32;
  *(_OWORD *)(v31 + 16) = v33;
  uint64_t v34 = v39[8];
  uint64_t v35 = v12 + v34;
  uint64_t v36 = v40 + v34;
  uint64_t v37 = sub_1C2A9CFE8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 32))(v35, v36, v37);
  uint64_t result = v43;
  *(unsigned char *)(v43 + *(int *)(v41 + 32)) = *(unsigned char *)(v42 + *(int *)(v41 + 32));
  return result;
}

uint64_t sub_1C298BF14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = sub_1C2A9C858();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = type metadata accessor for TimeBasedDistribution();
  *(void *)(v7 + *(int *)(v10 + 20)) = *(void *)(v8 + *(int *)(v10 + 20));
  swift_bridgeObjectRelease();
  uint64_t v11 = *(int *)(v10 + 24);
  uint64_t v12 = (void *)(v7 + v11);
  uint64_t v13 = (uint64_t *)(v8 + v11);
  uint64_t v15 = *v13;
  uint64_t v14 = v13[1];
  *uint64_t v12 = v15;
  v12[1] = v14;
  swift_bridgeObjectRelease();
  uint64_t v51 = a3;
  uint64_t v52 = a2;
  uint64_t v16 = *(int *)(a3 + 28);
  uint64_t v53 = a1;
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  *(unsigned char *)uint64_t v17 = *(unsigned char *)v18;
  __swift_destroy_boxed_opaque_existential_1(v17 + 8);
  *(_OWORD *)(v17 + 8) = *(_OWORD *)(v18 + 8);
  *(_OWORD *)(v17 + 24) = *(_OWORD *)(v18 + 24);
  *(void *)(v17 + 40) = *(void *)(v18 + 40);
  uint64_t v48 = (int *)type metadata accessor for TimeBasedDistributionChartModel();
  uint64_t v49 = v18;
  uint64_t v19 = v48[6];
  uint64_t v50 = v17;
  uint64_t v20 = (char *)(v17 + v19);
  uint64_t v21 = (char *)(v18 + v19);
  uint64_t v22 = sub_1C2A9D2E8();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48);
  int v25 = v24(v20, 1, v22);
  int v26 = v24(v21, 1, v22);
  if (v25)
  {
    if (!v26)
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v20, v21, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v26)
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v20, v22);
LABEL_6:
    sub_1C2990DB4(0, (unint64_t *)&qword_1EA31DFF0, MEMORY[0x1E4F19478], MEMORY[0x1E4FBB718]);
    memcpy(v20, v21, *(void *)(*(void *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v23 + 40))(v20, v21, v22);
LABEL_7:
  uint64_t v28 = (int *)type metadata accessor for TimeBasedDistributionChartDesign();
  uint64_t v29 = v28[5];
  uint64_t v30 = &v20[v29];
  uint64_t v31 = &v21[v29];
  int v32 = v24(&v20[v29], 1, v22);
  int v33 = v24(v31, 1, v22);
  if (!v32)
  {
    if (!v33)
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 40))(v30, v31, v22);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v23 + 8))(v30, v22);
    goto LABEL_12;
  }
  if (v33)
  {
LABEL_12:
    sub_1C2990DB4(0, (unint64_t *)&qword_1EA31DFF0, MEMORY[0x1E4F19478], MEMORY[0x1E4FBB718]);
    memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v30, v31, v22);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v30, 0, 1, v22);
LABEL_13:
  *(void *)&v20[v28[6]] = *(void *)&v21[v28[6]];
  swift_release();
  *(void *)&v20[v28[7]] = *(void *)&v21[v28[7]];
  swift_release();
  *(void *)&v20[v28[8]] = *(void *)&v21[v28[8]];
  swift_release();
  *(void *)&v20[v28[9]] = *(void *)&v21[v28[9]];
  swift_release();
  uint64_t v35 = v28[10];
  uint64_t v36 = &v20[v35];
  uint64_t v37 = &v21[v35];
  uint64_t v38 = sub_1C2A9D598();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v38 - 8) + 40))(v36, v37, v38);
  *(void *)&v20[v28[11]] = *(void *)&v21[v28[11]];
  swift_release();
  *(void *)&v20[v28[12]] = *(void *)&v21[v28[12]];
  swift_release();
  *(void *)&v20[v28[13]] = *(void *)&v21[v28[13]];
  swift_release();
  *(void *)&v20[v28[14]] = *(void *)&v21[v28[14]];
  swift_release();
  *(void *)&v20[v28[15]] = *(void *)&v21[v28[15]];
  swift_release();
  *(void *)&v20[v28[16]] = *(void *)&v21[v28[16]];
  swift_release();
  *(void *)&v20[v28[17]] = *(void *)&v21[v28[17]];
  *(void *)&v20[v28[18]] = *(void *)&v21[v28[18]];
  *(void *)&v20[v28[19]] = *(void *)&v21[v28[19]];
  *(void *)&v20[v28[20]] = *(void *)&v21[v28[20]];
  *(void *)&v20[v28[21]] = *(void *)&v21[v28[21]];
  *(void *)&v20[v28[22]] = *(void *)&v21[v28[22]];
  *(void *)&v20[v28[23]] = *(void *)&v21[v28[23]];
  *(void *)&v20[v28[24]] = *(void *)&v21[v28[24]];
  v20[v28[25]] = v21[v28[25]];
  uint64_t v39 = v48[7];
  uint64_t v40 = v17 + v39;
  uint64_t v41 = v49 + v39;
  __swift_destroy_boxed_opaque_existential_1(v50 + v39);
  long long v42 = *(_OWORD *)(v41 + 16);
  *(_OWORD *)uint64_t v40 = *(_OWORD *)v41;
  *(_OWORD *)(v40 + 16) = v42;
  *(void *)(v40 + 32) = *(void *)(v41 + 32);
  uint64_t v43 = v48[8];
  uint64_t v44 = v50 + v43;
  uint64_t v45 = v49 + v43;
  uint64_t v46 = sub_1C2A9CFE8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 40))(v44, v45, v46);
  uint64_t result = v53;
  *(unsigned char *)(v53 + *(int *)(v51 + 32)) = *(unsigned char *)(v52 + *(int *)(v51 + 32));
  return result;
}

uint64_t sub_1C298C4EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C298C500);
}

uint64_t sub_1C298C500(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for TimeBasedDistribution();
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84) == a2)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)(v6 - 8);
    uint64_t v9 = a3[6];
  }
  else
  {
    uint64_t v10 = type metadata accessor for TimeBasedDistributionChartModel();
    if (*(_DWORD *)(*(void *)(v10 - 8) + 84) != a2)
    {
      unsigned int v13 = *(unsigned __int8 *)(a1 + a3[8]);
      if (v13 >= 2) {
        return ((v13 + 2147483646) & 0x7FFFFFFF) + 1;
      }
      else {
        return 0;
      }
    }
    uint64_t v7 = v10;
    uint64_t v8 = *(void *)(v10 - 8);
    uint64_t v9 = a3[7];
  }
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  return v11(a1 + v9, a2, v7);
}

uint64_t sub_1C298C620(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C298C634);
}

uint64_t sub_1C298C634(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for TimeBasedDistribution();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[6];
  }
  else
  {
    uint64_t result = type metadata accessor for TimeBasedDistributionChartModel();
    if (*(_DWORD *)(*(void *)(result - 8) + 84) != a3)
    {
      *(unsigned char *)(a1 + a4[8]) = a2 + 1;
      return result;
    }
    uint64_t v9 = result;
    uint64_t v10 = *(void *)(result - 8);
    uint64_t v11 = a4[7];
  }
  unsigned int v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
  return v13(a1 + v11, a2, a2, v9);
}

uint64_t type metadata accessor for AFibBurdenTimeOfDayChart()
{
  uint64_t result = qword_1EA31E3B0;
  if (!qword_1EA31E3B0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1C298C78C()
{
  uint64_t result = type metadata accessor for TimeBasedDistribution();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for TimeBasedDistributionChartModel();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

void sub_1C298C868()
{
  qword_1EA32B598 = 0x4045000000000000;
}

void sub_1C298C878()
{
  qword_1EA32B5A0 = 0x4040000000000000;
}

id sub_1C298C888()
{
  id result = (id)HKDateFormatterFromTemplate();
  if (result) {
    qword_1EA32B5A8 = (uint64_t)result;
  }
  else {
    __break(1u);
  }
  return result;
}

uint64_t sub_1C298C8BC@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v122 = a4;
  uint64_t v7 = sub_1C2A9D5A8();
  uint64_t v124 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v123 = (char *)&v96 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for TimeBasedDistributionChartModel();
  uint64_t v10 = v9 - 8;
  uint64_t v119 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v120 = v11;
  uint64_t v121 = (uint64_t)&v96 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C2990DB4(0, &qword_1EA31E3D8, MEMORY[0x1E4F194D8], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v118 = (char *)&v96 - v13;
  sub_1C2973A20();
  uint64_t v100 = v14;
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v96 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C2973140();
  uint64_t v18 = v17;
  uint64_t v97 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)&v96 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C297303C();
  uint64_t v99 = v21;
  uint64_t v98 = *(void *)(v21 - 8);
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (char *)&v96 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C2972FD4();
  uint64_t v103 = v24;
  MEMORY[0x1F4188790](v24);
  int v26 = (char *)&v96 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C2972F30();
  uint64_t v106 = v27;
  uint64_t v104 = *(void *)(v27 - 8);
  MEMORY[0x1F4188790](v27);
  uint64_t v102 = (char *)&v96 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C2972E54();
  uint64_t v108 = v29;
  uint64_t v107 = *(void *)(v29 - 8);
  MEMORY[0x1F4188790](v29);
  uint64_t v105 = (char *)&v96 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C2972CFC();
  uint64_t v111 = v31;
  uint64_t v110 = *(void *)(v31 - 8);
  MEMORY[0x1F4188790](v31);
  long long v109 = (char *)&v96 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C2972B34();
  uint64_t v114 = v33;
  uint64_t v113 = *(void *)(v33 - 8);
  MEMORY[0x1F4188790](v33);
  uint64_t v112 = (char *)&v96 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C29728E8();
  uint64_t v117 = v35;
  uint64_t v116 = *(void *)(v35 - 8);
  MEMORY[0x1F4188790](v35);
  unint64_t v115 = (char *)&v96 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v101 = sub_1C2981788(a1, a2);
  unint64_t v126 = v101;
  char v127 = a2;
  char v128 = a3;
  sub_1C29731A4();
  sub_1C2973884();
  sub_1C2A9D268();
  uint64_t v37 = *(int *)(v10 + 32);
  uint64_t v38 = *(int *)(type metadata accessor for TimeBasedDistributionChartDesign() + 40);
  long long v125 = a2;
  uint64_t v39 = &a2[v38 + v37];
  uint64_t v40 = sub_1C2A9D598();
  (*(void (**)(char *, unsigned __int8 *, uint64_t))(*(void *)(v40 - 8) + 16))(v16, v39, v40);
  sub_1C2990220(&qword_1EBB8E798, MEMORY[0x1E4F3CB98]);
  uint64_t result = sub_1C2A9DCE8();
  if (result)
  {
    uint64_t v96 = v7;
    char v42 = a3 & 1;
    uint64_t v43 = sub_1C2990220(&qword_1EA31E0C0, (void (*)(uint64_t))sub_1C2973140);
    uint64_t v44 = sub_1C2990220(&qword_1EBB8E838, (void (*)(uint64_t))sub_1C2973A20);
    uint64_t v45 = v100;
    sub_1C2A9DA68();
    sub_1C2990308((uint64_t)v16, (uint64_t (*)(void))sub_1C2973A20);
    (*(void (**)(char *, uint64_t))(v97 + 8))(v20, v18);
    uint64_t v132 = sub_1C2A9DD28();
    uint64_t v133 = v46;
    swift_bridgeObjectRetain();
    sub_1C2A9DDB8();
    swift_bridgeObjectRelease();
    uint64_t v132 = v18;
    uint64_t v133 = (uint64_t)v45;
    unint64_t v134 = v43;
    unint64_t v135 = v44;
    swift_getOpaqueTypeConformance2();
    uint64_t v47 = v99;
    sub_1C2A9DA48();
    swift_bridgeObjectRelease();
    uint64_t v48 = (*(uint64_t (**)(char *, uint64_t))(v98 + 8))(v23, v47);
    uint64_t v100 = &v96;
    MEMORY[0x1F4188790](v48);
    *(&v96 - 2) = (uint64_t)v125;
    *((unsigned char *)&v96 - 8) = v42;
    sub_1C2990460(0, (unint64_t *)&qword_1EA31E0C8, MEMORY[0x1E4F193B0]);
    uint64_t v50 = v49;
    unint64_t v51 = sub_1C29745C0();
    unint64_t v52 = sub_1C2974718();
    uint64_t v53 = v102;
    uint64_t v54 = v103;
    sub_1C2A9D9B8();
    sub_1C2990308((uint64_t)v26, (uint64_t (*)(void))sub_1C2972FD4);
    uint64_t v132 = (uint64_t)v54;
    uint64_t v133 = v50;
    unint64_t v134 = v51;
    unint64_t v135 = v52;
    uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    uint64_t v56 = v105;
    uint64_t v57 = v106;
    sub_1C2A9D9D8();
    (*(void (**)(char *, uint64_t))(v104 + 8))(v53, v57);
    long long v131 = xmmword_1C2AA86B0;
    uint64_t v58 = sub_1C2A9D388();
    uint64_t v59 = *(void *)(v58 - 8);
    uint64_t v103 = *(void (**)(void, void, void, void))(v59 + 56);
    uint64_t v104 = v59 + 56;
    uint64_t v60 = (uint64_t)v118;
    v103(v118, 1, 1, v58);
    uint64_t v61 = (uint64_t (*)(void, uint64_t, uint64_t))MEMORY[0x1E4FBB010];
    sub_1C2991288(0, &qword_1EA31E178, MEMORY[0x1E4FBB550], MEMORY[0x1E4FBB568], MEMORY[0x1E4FBB010]);
    uint64_t v63 = v62;
    uint64_t v132 = v57;
    uint64_t v133 = OpaqueTypeConformance2;
    uint64_t v64 = swift_getOpaqueTypeConformance2();
    unint64_t v65 = sub_1C29748B0();
    unint64_t v66 = v109;
    uint64_t v67 = v108;
    sub_1C2A9D9E8();
    sub_1C2990368(v60);
    (*(void (**)(char *, uint64_t))(v107 + 8))(v56, v67);
    uint64_t v68 = sub_1C29A15C4(v101);
    swift_bridgeObjectRelease();
    TimeBasedDistributionChartModel.determineYAxisRange(chartPoints:)(v68);
    uint64_t v70 = v69;
    uint64_t v72 = v71;
    swift_bridgeObjectRelease();
    uint64_t v129 = v70;
    uint64_t v130 = v72;
    v103(v60, 1, 1, v58);
    sub_1C2991288(0, (unint64_t *)&qword_1EBB92800, MEMORY[0x1E4FBB3D0], MEMORY[0x1E4FBB3F8], v61);
    uint64_t v74 = v73;
    uint64_t v132 = v67;
    uint64_t v133 = v63;
    unint64_t v134 = v64;
    unint64_t v135 = v65;
    uint64_t v75 = swift_getOpaqueTypeConformance2();
    unint64_t v76 = sub_1C2974994();
    uint64_t v77 = v112;
    uint64_t v78 = v111;
    sub_1C2A9D9F8();
    sub_1C2990368(v60);
    (*(void (**)(char *, uint64_t))(v110 + 8))(v66, v78);
    uint64_t v79 = v121;
    sub_1C29912D8((uint64_t)v125, v121, (uint64_t (*)(void))type metadata accessor for TimeBasedDistributionChartModel);
    unint64_t v80 = (*(unsigned __int8 *)(v119 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v119 + 80);
    uint64_t v81 = swift_allocObject();
    sub_1C29916A8(v79, v81 + v80, (uint64_t (*)(void))type metadata accessor for TimeBasedDistributionChartModel);
    sub_1C2974A28(0);
    uint64_t v132 = v78;
    uint64_t v133 = v74;
    unint64_t v134 = v75;
    unint64_t v135 = v76;
    swift_getOpaqueTypeConformance2();
    sub_1C297368C(&qword_1EA31E198, sub_1C2974A28, (void (*)(void))sub_1C2974A50);
    uint64_t v82 = v115;
    uint64_t v83 = v114;
    sub_1C2A9DA18();
    swift_release();
    (*(void (**)(char *, uint64_t))(v113 + 8))(v77, v83);
    uint64_t KeyPath = swift_getKeyPath();
    BOOL IsRightToLeft = HKUILocaleIsRightToLeft();
    id v87 = v123;
    uint64_t v86 = v124;
    uint64_t v88 = (unsigned int *)MEMORY[0x1E4F3CBE8];
    if (!IsRightToLeft) {
      uint64_t v88 = (unsigned int *)MEMORY[0x1E4F3CBD8];
    }
    uint64_t v89 = v96;
    (*(void (**)(char *, void, uint64_t))(v124 + 104))(v123, *v88, v96);
    sub_1C2972850();
    uint64_t v91 = v122;
    uint64_t v92 = (uint64_t *)(v122 + *(int *)(v90 + 36));
    sub_1C2990DB4(0, &qword_1EBB8E7F0, MEMORY[0x1E4F3CBF0], MEMORY[0x1E4F3DF18]);
    (*(void (**)(char *, char *, uint64_t))(v86 + 16))((char *)v92 + *(int *)(v93 + 28), v87, v89);
    uint64_t *v92 = KeyPath;
    uint64_t v94 = v116;
    uint64_t v95 = v117;
    (*(void (**)(uint64_t, char *, uint64_t))(v116 + 16))(v91, v82, v117);
    (*(void (**)(char *, uint64_t))(v86 + 8))(v87, v89);
    return (*(uint64_t (**)(char *, uint64_t))(v94 + 8))(v82, v95);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1C298D79C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  _OWORD v25[2] = a4;
  uint64_t v7 = type metadata accessor for TimeBasedDistributionChartModel();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v30 = a1;
  sub_1C29912D8(a2, (uint64_t)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for TimeBasedDistributionChartModel);
  unint64_t v10 = (*(unsigned __int8 *)(v8 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = swift_allocObject();
  *(unsigned char *)(v11 + 16) = a3;
  sub_1C29916A8((uint64_t)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v11 + v10, (uint64_t (*)(void))type metadata accessor for TimeBasedDistributionChartModel);
  sub_1C2990DB4(0, &qword_1EA31E060, type metadata accessor for TimeBasedDistributionChartPoint.TimeOfDay, MEMORY[0x1E4FBB320]);
  v25[1] = v12;
  sub_1C297326C();
  sub_1C29737FC();
  sub_1C29733EC();
  uint64_t v14 = v13;
  sub_1C29734E4(255);
  uint64_t v16 = v15;
  uint64_t v17 = MEMORY[0x1E4F19428];
  sub_1C297404C(255, (unint64_t *)&qword_1EA31E078, MEMORY[0x1E4F19438]);
  uint64_t v19 = v18;
  uint64_t v20 = sub_1C2A9D298();
  swift_bridgeObjectRetain();
  uint64_t v26 = v20;
  uint64_t v27 = v17;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v26 = v19;
  uint64_t v27 = MEMORY[0x1E4F3EB98];
  uint64_t v28 = OpaqueTypeConformance2;
  uint64_t v29 = MEMORY[0x1E4F3EB78];
  uint64_t v22 = swift_getOpaqueTypeConformance2();
  uint64_t v23 = sub_1C297368C(&qword_1EA31E090, sub_1C29734E4, (void (*)(void))sub_1C2973650);
  uint64_t v26 = v14;
  uint64_t v27 = v16;
  uint64_t v28 = v22;
  uint64_t v29 = v23;
  swift_getOpaqueTypeConformance2();
  sub_1C2990220(&qword_1EA31E3F0, (void (*)(uint64_t))type metadata accessor for TimeBasedDistributionChartPoint.TimeOfDay);
  return sub_1C2A9DB88();
}

uint64_t sub_1C298DAB4@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v27 = a1;
  uint64_t v28 = a3;
  sub_1C2990268(0, &qword_1EA31E108, &qword_1EA31E110, (uint64_t (*)(uint64_t))sub_1C2973FA0, (void (*)(void))sub_1C297439C);
  uint64_t v25 = *(void *)(v4 - 8);
  uint64_t v26 = v4;
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v25 - v5;
  uint64_t v7 = sub_1C2A9D198();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v8 = sub_1C2A9D108();
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v9 = type metadata accessor for TimeBasedDistributionChartModel();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C2990268(0, &qword_1EA31E0D0, &qword_1EA31E0D8, (uint64_t (*)(uint64_t))sub_1C2973C14, (void (*)(void))sub_1C2973E58);
  uint64_t v14 = v13;
  uint64_t v15 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v25 - v16;
  if (a2)
  {
    sub_1C29912D8(v27, (uint64_t)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for TimeBasedDistributionChartModel);
    unint64_t v18 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    uint64_t v19 = swift_allocObject();
    sub_1C29916A8((uint64_t)v12, v19 + v18, (uint64_t (*)(void))type metadata accessor for TimeBasedDistributionChartModel);
    sub_1C2A9D0F8();
    sub_1C2A9D188();
    sub_1C2990DB4(0, &qword_1EA31E0D8, (uint64_t (*)(uint64_t))sub_1C2973C14, MEMORY[0x1E4FBB718]);
    sub_1C2973E58();
    sub_1C2A9D358();
    (*(void (**)(uint64_t, char *, uint64_t))(v15 + 16))(v28, v17, v14);
    sub_1C2990460(0, &qword_1EA31E3E0, MEMORY[0x1E4F193A8]);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  }
  else
  {
    sub_1C2A9D0E8();
    sub_1C2A5F1AC(0, 24);
    sub_1C29912D8(v27, (uint64_t)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for TimeBasedDistributionChartModel);
    unint64_t v21 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    uint64_t v22 = swift_allocObject();
    sub_1C29916A8((uint64_t)v12, v22 + v21, (uint64_t (*)(void))type metadata accessor for TimeBasedDistributionChartModel);
    sub_1C2A9D188();
    sub_1C2990DB4(0, &qword_1EA31E110, (uint64_t (*)(uint64_t))sub_1C2973FA0, MEMORY[0x1E4FBB718]);
    sub_1C297439C();
    sub_1C2A9D358();
    uint64_t v24 = v25;
    uint64_t v23 = v26;
    (*(void (**)(uint64_t, char *, uint64_t))(v25 + 16))(v28, v6, v26);
    sub_1C2990460(0, &qword_1EA31E3E0, MEMORY[0x1E4F193A8]);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v6, v23);
  }
}

double sub_1C298E034@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for TimeBasedDistributionChartModel();
  type metadata accessor for TimeBasedDistributionChartDesign();
  sub_1C2A9DBA8();
  sub_1C2A9D568();
  uint64_t v4 = sub_1C2A9D1A8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  sub_1C2974A28(0);
  uint64_t v6 = (_OWORD *)(a2 + *(int *)(v5 + 36));
  *uint64_t v6 = v8;
  v6[1] = v9;
  double result = *(double *)&v10;
  _OWORD v6[2] = v10;
  return result;
}

uint64_t sub_1C298E10C@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v59 = a3;
  int v65 = a2;
  uint64_t v63 = a4;
  uint64_t v5 = type metadata accessor for TimeBasedDistributionChartModel();
  uint64_t v57 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v58 = v6;
  uint64_t v56 = (uint64_t)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t OpaqueTypeConformance2 = type metadata accessor for TimeBasedDistributionChartPoint.TimeOfDay(0);
  uint64_t v52 = *(void *)(OpaqueTypeConformance2 - 8);
  MEMORY[0x1F4188790](OpaqueTypeConformance2);
  uint64_t v53 = v7;
  uint64_t v54 = (uint64_t)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_1C2A9D1D8();
  uint64_t v61 = *(void *)(v8 - 8);
  uint64_t v62 = v8;
  MEMORY[0x1F4188790](v8);
  uint64_t v60 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = sub_1C2A9D728();
  uint64_t v41 = *(void *)(v44 - 8);
  MEMORY[0x1F4188790](v44);
  uint64_t v40 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C2991288(0, (unint64_t *)&qword_1EA31DEC0, MEMORY[0x1E4FBB3D0], MEMORY[0x1E4F195C0], MEMORY[0x1E4F19388]);
  MEMORY[0x1F4188790](v11 - 8);
  MEMORY[0x1F4188790](v12);
  *(double *)&uint64_t v13 = COERCE_DOUBLE(sub_1C2A9D298());
  uint64_t v42 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C297404C(0, (unint64_t *)&qword_1EA31E078, MEMORY[0x1E4F19438]);
  double v45 = v16;
  uint64_t v43 = *(void *)(*(void *)&v16 - 8);
  MEMORY[0x1F4188790](*(void *)&v16);
  unint64_t v18 = (char *)&v40 - v17;
  sub_1C29733EC();
  uint64_t v50 = v19;
  uint64_t v49 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19);
  uint64_t v64 = (char *)&v40 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C297326C();
  uint64_t v48 = v21;
  uint64_t v47 = *(void *)(v21 - 8);
  MEMORY[0x1F4188790](v21);
  uint64_t v46 = (char *)&v40 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C2A9D708();
  double v66 = *(double *)(a1 + 16) + 2.0;
  sub_1C2A9D168();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1C2A9D708();
  uint64_t v55 = a1;
  double v66 = *(double *)(a1 + 8);
  sub_1C2A9D168();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v65)
  {
    if (qword_1EA31DC38 == -1) {
      goto LABEL_5;
    }
    goto LABEL_6;
  }
  if (qword_1EA31DC30 != -1) {
LABEL_6:
  }
    swift_once();
LABEL_5:
  sub_1C2A9D288();
  uint64_t v23 = v41;
  uint64_t v24 = v40;
  uint64_t v25 = v44;
  (*(void (**)(char *, void, uint64_t))(v41 + 104))(v40, *MEMORY[0x1E4F3D4A0], v44);
  uint64_t v26 = MEMORY[0x1E4F19428];
  sub_1C2A9D078();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v24, v25);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v15, v13);
  uint64_t v27 = v55;
  uint64_t v70 = *(void *)(v55 + *(int *)(OpaqueTypeConformance2 + 32));
  double v66 = *(double *)&v13;
  uint64_t v67 = v26;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  double v28 = v45;
  sub_1C2A9D088();
  (*(void (**)(char *, double))(v43 + 8))(v18, COERCE_DOUBLE(*(void *)&v28));
  uint64_t v29 = v60;
  sub_1C2A9D1C8();
  uint64_t v30 = v54;
  sub_1C29912D8(v27, v54, type metadata accessor for TimeBasedDistributionChartPoint.TimeOfDay);
  uint64_t v31 = v56;
  sub_1C29912D8(v59, v56, (uint64_t (*)(void))type metadata accessor for TimeBasedDistributionChartModel);
  unint64_t v32 = (*(unsigned __int8 *)(v52 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80);
  uint64_t v33 = v32 + v53;
  unint64_t v34 = (*(unsigned __int8 *)(v57 + 80) + v32 + v53 + 1) & ~(unint64_t)*(unsigned __int8 *)(v57 + 80);
  uint64_t v35 = swift_allocObject();
  sub_1C29916A8(v30, v35 + v32, type metadata accessor for TimeBasedDistributionChartPoint.TimeOfDay);
  *(unsigned char *)(v35 + v33) = v65 & 1;
  sub_1C29916A8(v31, v35 + v34, (uint64_t (*)(void))type metadata accessor for TimeBasedDistributionChartModel);
  sub_1C2A9DBA8();
  sub_1C29734E4(0);
  double v66 = v28;
  uint64_t v67 = MEMORY[0x1E4F3EB98];
  uint64_t v68 = OpaqueTypeConformance2;
  uint64_t v69 = MEMORY[0x1E4F3EB78];
  swift_getOpaqueTypeConformance2();
  sub_1C297368C(&qword_1EA31E090, sub_1C29734E4, (void (*)(void))sub_1C2973650);
  uint64_t v36 = v46;
  uint64_t v37 = v50;
  uint64_t v38 = v64;
  sub_1C2A9D048();
  swift_release();
  (*(void (**)(char *, uint64_t))(v61 + 8))(v29, v62);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v38, v37);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v47 + 32))(v63, v36, v48);
}

double sub_1C298EB0C@<D0>(unsigned char *a1@<X1>, char a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8 = sub_1C2A9C4F8();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for TimeBasedDistributionChartPoint.TimeOfDay(0);
  (*(void (**)(char *, unsigned char *, uint64_t))(v9 + 16))(v11, &a1[*(int *)(v12 + 28)], v8);
  uint64_t v13 = sub_1C2A9D998();
  uint64_t v31 = v14;
  uint64_t v32 = v13;
  HIDWORD(v30) = v15;
  uint64_t v33 = v16;
  uint64_t KeyPath = swift_getKeyPath();
  int v18 = *a1;
  uint64_t v19 = (char)v18;
  if ((v18 - 2) >= 2)
  {
    if (!*a1)
    {
      if (a2)
      {
        if (qword_1EA31DC38 == -1) {
          goto LABEL_12;
        }
      }
      else if (qword_1EA31DC30 == -1)
      {
        goto LABEL_12;
      }
      goto LABEL_13;
    }
    if (a2)
    {
      if (qword_1EA31DC38 == -1) {
        goto LABEL_12;
      }
      goto LABEL_13;
    }
    if (qword_1EA31DC30 != -1) {
LABEL_13:
    }
      swift_once();
  }
LABEL_12:
  sub_1C2A9DBA8();
  sub_1C2A9D568();
  uint64_t v20 = v34;
  char v21 = v35;
  uint64_t v22 = v36;
  char v23 = v37;
  uint64_t v24 = v38;
  uint64_t v25 = v39;
  uint64_t v26 = qword_1C2AA8838[v19];
  uint64_t v27 = a3 + *(int *)(type metadata accessor for TimeBasedDistributionChartModel() + 24);
  double result = *(double *)(v27 + *(int *)(type metadata accessor for TimeBasedDistributionChartDesign() + 4 * v26));
  uint64_t v29 = v31;
  *(void *)a4 = v32;
  *(void *)(a4 + 8) = v29;
  *(unsigned char *)(a4 + 16) = BYTE4(v30) & 1;
  *(void *)(a4 + 24) = v33;
  *(void *)(a4 + 32) = KeyPath;
  *(unsigned char *)(a4 + 40) = 1;
  *(void *)(a4 + 48) = v20;
  *(unsigned char *)(a4 + 56) = v21;
  *(void *)(a4 + 64) = v22;
  *(unsigned char *)(a4 + 72) = v23;
  *(void *)(a4 + 80) = v24;
  *(void *)(a4 + 88) = v25;
  *(void *)(a4 + 96) = 0;
  *(double *)(a4 + 104) = result;
  return result;
}

uint64_t sub_1C298EE00@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v27 = a1;
  uint64_t v3 = sub_1C2A9D238();
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v4 = sub_1C2A9D258();
  MEMORY[0x1F4188790](v4 - 8);
  sub_1C2991288(0, &qword_1EA31E0F0, MEMORY[0x1E4F3E2F8], MEMORY[0x1E4F3E2E8], MEMORY[0x1E4F19370]);
  double v6 = v5;
  uint64_t v28 = *(void *)(*(void *)&v5 - 8);
  MEMORY[0x1F4188790](*(void *)&v5);
  uint64_t v8 = (char *)&v24 - v7;
  sub_1C2973D10();
  uint64_t v10 = v9;
  uint64_t v29 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C2973C14();
  uint64_t v14 = v13;
  uint64_t v15 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v26 = (char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = sub_1C2A9D378();
  if (v31)
  {
    uint64_t v18 = 1;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56))(a2, v18, 1, v14);
  }
  if ((~*(void *)&v30 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v30 <= -9.22337204e18)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v30 < 9.22337204e18)
  {
    double v30 = COERCE_DOUBLE(sub_1C29908A0((uint64_t)v30));
    uint64_t v31 = v19;
    sub_1C2A9D248();
    sub_1C2A9D228();
    sub_1C295CAF4();
    sub_1C2A9D148();
    uint64_t v20 = *(int *)(type metadata accessor for TimeBasedDistributionChartModel() + 24);
    uint64_t v25 = v14;
    uint64_t v21 = v27 + v20;
    double v30 = *(double *)(v21 + *(int *)(type metadata accessor for TimeBasedDistributionChartDesign() + 64));
    unint64_t v22 = sub_1C2973DD4();
    sub_1C2A9D2A8();
    (*(void (**)(char *, double))(v28 + 8))(v8, COERCE_DOUBLE(*(void *)&v6));
    uint64_t v14 = v25;
    double v30 = v6;
    uint64_t v31 = MEMORY[0x1E4F3EB98];
    unint64_t v32 = v22;
    uint64_t v33 = MEMORY[0x1E4F3EB78];
    swift_getOpaqueTypeConformance2();
    char v23 = v26;
    sub_1C2A9D2B8();
    (*(void (**)(char *, uint64_t))(v29 + 8))(v12, v10);
    (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(a2, v23, v14);
    uint64_t v18 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56))(a2, v18, 1, v14);
  }
LABEL_10:
  __break(1u);
  return result;
}

void sub_1C298F29C(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v90 = a1;
  sub_1C2990E18();
  uint64_t v91 = v3;
  MEMORY[0x1F4188790](v3);
  unint64_t v85 = (char *)&v68 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C2990DB4(0, &qword_1EA31E110, (uint64_t (*)(uint64_t))sub_1C2973FA0, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v92 = (char *)&v68 - v6;
  uint64_t v7 = sub_1C2A9D238();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v78 = (char *)&v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1C2A9D258();
  MEMORY[0x1F4188790](v9 - 8);
  unint64_t v76 = (char *)&v68 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C2991288(0, &qword_1EA31E0F0, MEMORY[0x1E4F3E2F8], MEMORY[0x1E4F3E2E8], MEMORY[0x1E4F19370]);
  uint64_t v83 = v11;
  uint64_t v79 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v68 - v12;
  sub_1C29742EC();
  uint64_t v86 = v14;
  uint64_t v77 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v81 = (char *)&v68 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C29741F0();
  uint64_t v89 = v16;
  uint64_t v88 = *((void *)v16 - 1);
  MEMORY[0x1F4188790](v16);
  uint64_t v82 = (char *)&v68 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C29740C4();
  uint64_t v87 = v18;
  uint64_t v84 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v94 = (char *)&v68 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  unint64_t v80 = (char *)&v68 - v21;
  MEMORY[0x1F4188790](v22);
  uint64_t v93 = (char *)&v68 - v23;
  uint64_t v24 = sub_1C2A9D2E8();
  uint64_t v25 = *(void *)(v24 - 8);
  MEMORY[0x1F4188790](v24);
  uint64_t v27 = (char *)&v68 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C297404C(0, &qword_1EA31E120, MEMORY[0x1E4F19478]);
  uint64_t v29 = v28;
  uint64_t v30 = *(void *)(v28 - 8);
  MEMORY[0x1F4188790](v28);
  unint64_t v32 = (char *)&v68 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v33);
  char v35 = (char *)&v68 - v34;
  sub_1C2A9D378();
  if (BYTE8(v103))
  {
    sub_1C2973FA0();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(a2, 1, 1, v36);
    return;
  }
  uint64_t v72 = a2;
  uint64_t v37 = v103;
  long double v38 = *(double *)&v103;
  sub_1C2A9D538();
  long long v103 = v100;
  long long v104 = v101;
  uint64_t v105 = v102;
  sub_1C2A9D2D8();
  sub_1C2A9D2C8();
  (*(void (**)(char *, uint64_t))(v25 + 8))(v27, v24);
  uint64_t v39 = *(void (**)(char *, char *, uint64_t))(v30 + 32);
  v39(v35, v32, v29);
  if (remainder(v38, 12.0) != 0.0)
  {
    uint64_t v40 = 0;
    unint64_t v41 = 0xE000000000000000;
    goto LABEL_9;
  }
  if ((~v37 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  if (v38 <= -9.22337204e18)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v38 >= 9.22337204e18)
  {
LABEL_17:
    __break(1u);
    return;
  }
  uint64_t v40 = sub_1C29908A0((uint64_t)v38);
LABEL_9:
  uint64_t v95 = v40;
  unint64_t v96 = v41;
  uint64_t v71 = v29;
  uint64_t v75 = v30;
  uint64_t v74 = v32;
  uint64_t v73 = v35;
  uint64_t v70 = v30 + 32;
  uint64_t v69 = v39;
  if (v38 == 0.0)
  {
    sub_1C2A9DBF8();
  }
  else if (v38 == 24.0)
  {
    sub_1C2A9DC08();
  }
  else
  {
    sub_1C2A9DC18();
  }
  sub_1C2A9D248();
  sub_1C2A9D228();
  sub_1C295CAF4();
  sub_1C2A9D148();
  unint64_t v42 = sub_1C2973DD4();
  uint64_t v43 = v81;
  uint64_t v44 = v83;
  sub_1C2A9D2C8();
  (*(void (**)(char *, uint64_t))(v79 + 8))(v13, v44);
  uint64_t v45 = v90 + *(int *)(type metadata accessor for TimeBasedDistributionChartModel() + 24);
  uint64_t v99 = *(void *)(v45 + *(int *)(type metadata accessor for TimeBasedDistributionChartDesign() + 64));
  uint64_t v95 = v44;
  unint64_t v96 = v42;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  unint64_t v47 = MEMORY[0x1E4F3EB98];
  uint64_t v48 = MEMORY[0x1E4F3EB78];
  uint64_t v49 = v82;
  uint64_t v50 = v86;
  sub_1C2A9D2A8();
  (*(void (**)(char *, uint64_t))(v77 + 8))(v43, v50);
  uint64_t v95 = v50;
  unint64_t v96 = v47;
  uint64_t v97 = OpaqueTypeConformance2;
  uint64_t v98 = v48;
  swift_getOpaqueTypeConformance2();
  unint64_t v51 = v80;
  uint64_t v52 = v89;
  sub_1C2A9D2B8();
  (*(void (**)(char *, void (*)(void, void, void)))(v88 + 8))(v49, v52);
  uint64_t v53 = v84;
  uint64_t v89 = *(void (**)(void, void, void))(v84 + 32);
  uint64_t v90 = v84 + 32;
  uint64_t v54 = v93;
  uint64_t v55 = v87;
  v89(v93, v51, v87);
  uint64_t v56 = *(void (**)(char *, char *, uint64_t))(v75 + 16);
  uint64_t v57 = v74;
  uint64_t v58 = v71;
  v56(v74, v73, v71);
  uint64_t v59 = *(void (**)(char *, char *, uint64_t))(v53 + 16);
  uint64_t v60 = v94;
  v59(v94, v54, v55);
  uint64_t v61 = v85;
  v56(v85, v57, v58);
  uint64_t v62 = v91;
  uint64_t v63 = &v61[*(int *)(v91 + 48)];
  v59(v63, v60, v55);
  uint64_t v64 = (uint64_t)v92;
  v69(v92, v61, v58);
  v89(v64 + *(int *)(v62 + 48), v63, v55);
  int v65 = *(void (**)(char *, uint64_t))(v53 + 8);
  v65(v93, v55);
  double v66 = *(void (**)(char *, uint64_t))(v75 + 8);
  v66(v73, v58);
  v65(v94, v55);
  v66(v74, v58);
  sub_1C2973FA0();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v67 - 8) + 56))(v64, 0, 1, v67);
  sub_1C2990EC0(v64, v72);
}

uint64_t sub_1C298FE1C@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1C298C8BC(v2 + a1[6], (unsigned __int8 *)(v2 + a1[7]), *(unsigned char *)(v2 + a1[8]), a2);
}

uint64_t sub_1C298FE38()
{
  return *(void *)v0;
}

uint64_t sub_1C298FE44()
{
  return *(void *)(v0 + 16);
}

uint64_t sub_1C298FE54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1C2990220(&qword_1EA31E3D0, (void (*)(uint64_t))type metadata accessor for AFibBurdenTimeOfDayChart);
  return MEMORY[0x1F411EDC0](a1, a2, a3, v6);
}

uint64_t sub_1C298FED8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C298FF08(a1, a2, a3, MEMORY[0x1E4F666F0]);
}

uint64_t sub_1C298FEF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C298FF08(a1, a2, a3, MEMORY[0x1E4F666F8]);
}

uint64_t sub_1C298FF08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6 = sub_1C2990220(&qword_1EA31E3D0, (void (*)(uint64_t))type metadata accessor for AFibBurdenTimeOfDayChart);
  return a4(a1, a2, v6);
}

uint64_t sub_1C298FF98(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  uint64_t v4 = sub_1C2990220(&qword_1EA31E2D8, (void (*)(uint64_t))type metadata accessor for AFibBurdenTimeOfDayChart);
  *uint64_t v3 = v1;
  v3[1] = sub_1C2990074;
  return MEMORY[0x1F411E690](a1, v4);
}

uint64_t sub_1C2990074(uint64_t a1)
{
  uint64_t v7 = *v2;
  uint64_t v4 = swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v7 + 8);
  if (!v1) {
    uint64_t v4 = a1;
  }
  return v5(v4);
}

uint64_t sub_1C2990174()
{
  return sub_1C2990220(&qword_1EA31E2D8, (void (*)(uint64_t))type metadata accessor for AFibBurdenTimeOfDayChart);
}

uint64_t sub_1C29901BC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1C29901D8()
{
  return sub_1C2990220(&qword_1EA31E3C8, (void (*)(uint64_t))type metadata accessor for AFibBurdenTimeOfDayChart);
}

uint64_t sub_1C2990220(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1C2990268(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(uint64_t), void (*a5)(void))
{
  if (!*a2)
  {
    sub_1C2990DB4(255, a3, a4, MEMORY[0x1E4FBB718]);
    a5();
    unint64_t v7 = sub_1C2A9D368();
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t sub_1C29902F0@<X0>(uint64_t a1@<X8>)
{
  return sub_1C298D79C(*(void *)(v1 + 16), *(void *)(v1 + 24), *(unsigned char *)(v1 + 32), a1);
}

uint64_t sub_1C29902FC@<X0>(uint64_t a1@<X8>)
{
  return sub_1C298DAB4(*(void *)(v1 + 16), *(unsigned char *)(v1 + 24), a1);
}

uint64_t sub_1C2990308(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1C2990368(uint64_t a1)
{
  sub_1C2990DB4(0, &qword_1EA31E3D8, MEMORY[0x1E4F194D8], MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1C29903F8(uint64_t a1)
{
  return sub_1C299080C(a1, (uint64_t (*)(uint64_t, uint64_t))sub_1C298E034);
}

BOOL HKUILocaleIsRightToLeft()
{
  return [MEMORY[0x1E4FB1EB0] userInterfaceLayoutDirectionForSemanticContentAttribute:0] == 1;
}

uint64_t sub_1C2990448(uint64_t a1)
{
  return sub_1C299080C(a1, (uint64_t (*)(uint64_t, uint64_t))sub_1C298F29C);
}

void sub_1C2990460(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    sub_1C2990268(255, &qword_1EA31E0D0, &qword_1EA31E0D8, (uint64_t (*)(uint64_t))sub_1C2973C14, (void (*)(void))sub_1C2973E58);
    uint64_t v7 = v6;
    sub_1C2990268(255, &qword_1EA31E108, &qword_1EA31E110, (uint64_t (*)(uint64_t))sub_1C2973FA0, (void (*)(void))sub_1C297439C);
    unint64_t v9 = a3(a1, v7, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

uint64_t objectdestroyTm()
{
  uint64_t v1 = type metadata accessor for TimeBasedDistributionChartModel();
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v17 = *(void *)(*(void *)(v1 - 8) + 64);
  uint64_t v4 = v0 + v3;
  __swift_destroy_boxed_opaque_existential_1(v0 + v3 + 8);
  uint64_t v18 = v1;
  uint64_t v5 = v0 + v3 + *(int *)(v1 + 24);
  uint64_t v6 = sub_1C2A9D2E8();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  uint64_t v9 = type metadata accessor for TimeBasedDistributionChartDesign();
  uint64_t v10 = v5 + *(int *)(v9 + 20);
  if (!v8(v10, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v10, v6);
  }
  uint64_t v11 = v2 | 7;
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v12 = v5 + *(int *)(v9 + 40);
  uint64_t v13 = sub_1C2A9D598();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v12, v13);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v4 + *(int *)(v18 + 28));
  uint64_t v14 = v4 + *(int *)(v18 + 32);
  uint64_t v15 = sub_1C2A9CFE8();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v14, v15);
  return MEMORY[0x1F4186498](v0, v3 + v17, v11);
}

uint64_t sub_1C29907F4(uint64_t a1)
{
  return sub_1C299080C(a1, (uint64_t (*)(uint64_t, uint64_t))sub_1C298EE00);
}

uint64_t sub_1C299080C(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v4 = *(void *)(type metadata accessor for TimeBasedDistributionChartModel() - 8);
  uint64_t v5 = v2 + ((*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a2(a1, v5);
}

uint64_t sub_1C29908A0(uint64_t a1)
{
  uint64_t v33 = a1;
  uint64_t v1 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  sub_1C2990DB4(0, (unint64_t *)&qword_1EBB92530, MEMORY[0x1E4F27D68], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v30 = (char *)&v28 - v3;
  sub_1C2990DB4(0, &qword_1EBB92528, MEMORY[0x1E4F27CA0], v1);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v28 - v5;
  uint64_t v7 = sub_1C2A9C468();
  uint64_t v31 = *(void *)(v7 - 8);
  uint64_t v32 = v7;
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = sub_1C2A9C868();
  uint64_t v10 = *(void *)(v28 - 8);
  MEMORY[0x1F4188790](v28);
  uint64_t v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C2990DB4(0, &qword_1EBB92520, MEMORY[0x1E4F27928], v1);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = (char *)&v28 - v14;
  uint64_t v29 = sub_1C2A9C6E8();
  uint64_t v16 = *(void *)(v29 - 8);
  MEMORY[0x1F4188790](v29);
  uint64_t v18 = (char *)&v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C2A9C838();
  uint64_t v19 = v28;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v6, 1, 1, v28);
  uint64_t v20 = sub_1C2A9C8B8();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v30, 1, 1, v20);
  sub_1C2A9C438();
  sub_1C2A9C7F8();
  (*(void (**)(char *, uint64_t))(v31 + 8))(v9, v32);
  uint64_t v21 = v19;
  uint64_t v22 = v29;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v21);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48))(v15, 1, v22);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v15, v22);
    if (qword_1EA31DC40 != -1) {
      swift_once();
    }
    uint64_t v24 = (void *)qword_1EA32B5A8;
    uint64_t v25 = (void *)sub_1C2A9C658();
    id v26 = objc_msgSend(v24, sel_stringFromDate_, v25);

    uint64_t v27 = sub_1C2A9DD28();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v22);
    return v27;
  }
  return result;
}

void sub_1C2990DB4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_1C2990E18()
{
  if (!qword_1EA31E3E8)
  {
    sub_1C297404C(255, &qword_1EA31E120, MEMORY[0x1E4F19478]);
    sub_1C29740C4();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EA31E3E8);
    }
  }
}

uint64_t sub_1C2990EC0(uint64_t a1, uint64_t a2)
{
  sub_1C2990DB4(0, &qword_1EA31E110, (uint64_t (*)(uint64_t))sub_1C2973FA0, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C2990F54()
{
  uint64_t v1 = type metadata accessor for TimeBasedDistributionChartModel();
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 17) & ~v2;
  uint64_t v17 = *(void *)(*(void *)(v1 - 8) + 64);
  uint64_t v4 = v0 + v3;
  __swift_destroy_boxed_opaque_existential_1(v0 + v3 + 8);
  uint64_t v18 = v1;
  uint64_t v5 = v0 + v3 + *(int *)(v1 + 24);
  uint64_t v6 = sub_1C2A9D2E8();
  uint64_t v7 = *(void *)(v6 - 8);
  unint64_t v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  uint64_t v9 = type metadata accessor for TimeBasedDistributionChartDesign();
  uint64_t v10 = v5 + *(int *)(v9 + 20);
  if (!v8(v10, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v10, v6);
  }
  uint64_t v11 = v2 | 7;
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v12 = v5 + *(int *)(v9 + 40);
  uint64_t v13 = sub_1C2A9D598();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v12, v13);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v4 + *(int *)(v18 + 28));
  uint64_t v14 = v4 + *(int *)(v18 + 32);
  uint64_t v15 = sub_1C2A9CFE8();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v14, v15);
  return MEMORY[0x1F4186498](v0, v3 + v17, v11);
}

uint64_t sub_1C2991204@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for TimeBasedDistributionChartModel() - 8);
  int v6 = *(unsigned __int8 *)(v2 + 16);
  uint64_t v7 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  return sub_1C298E10C(a1, v6, v7, a2);
}

void sub_1C2991288(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t sub_1C29912D8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1C2991340()
{
  uint64_t v1 = (int *)(type metadata accessor for TimeBasedDistributionChartPoint.TimeOfDay(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*(void *)v1 + 64);
  uint64_t v5 = type metadata accessor for TimeBasedDistributionChartModel();
  uint64_t v6 = *(unsigned __int8 *)(*(void *)(v5 - 8) + 80);
  uint64_t v7 = (v4 + v6 + v3 + 1) & ~v6;
  uint64_t v23 = *(void *)(*(void *)(v5 - 8) + 64);
  uint64_t v8 = v0 + v3 + v1[9];
  uint64_t v9 = sub_1C2A9C4F8();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  swift_release();
  uint64_t v24 = v7;
  uint64_t v10 = v0 + v7;
  __swift_destroy_boxed_opaque_existential_1(v0 + v7 + 8);
  uint64_t v25 = v5;
  uint64_t v11 = v0 + v7 + *(int *)(v5 + 24);
  uint64_t v12 = sub_1C2A9D2E8();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
  if (!v14(v11, 1, v12)) {
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
  }
  uint64_t v15 = type metadata accessor for TimeBasedDistributionChartDesign();
  uint64_t v16 = v11 + *(int *)(v15 + 20);
  if (!v14(v16, 1, v12)) {
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v16, v12);
  }
  uint64_t v17 = v2 | v6 | 7;
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v18 = v11 + *(int *)(v15 + 40);
  uint64_t v19 = sub_1C2A9D598();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(v18, v19);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v10 + *(int *)(v25 + 28));
  uint64_t v20 = v10 + *(int *)(v25 + 32);
  uint64_t v21 = sub_1C2A9CFE8();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8))(v20, v21);
  return MEMORY[0x1F4186498](v0, v24 + v23, v17);
}

uint64_t sub_1C29916A8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

double sub_1C2991710@<D0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for TimeBasedDistributionChartPoint.TimeOfDay(0) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = v4 + *(void *)(v3 + 64);
  uint64_t v6 = *(void *)(type metadata accessor for TimeBasedDistributionChartModel() - 8);
  char v7 = *(unsigned char *)(v1 + v5);
  uint64_t v8 = v1 + ((v5 + *(unsigned __int8 *)(v6 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return sub_1C298EB0C((unsigned char *)(v1 + v4), v7, v8, a1);
}

Swift::String __swiftcall Data.logDescription(messageLength:messageLengthLimit:)(Swift::Int messageLength, Swift::Int messageLengthLimit)
{
  Swift::Int v4 = messageLengthLimit - messageLength;
  if (__OFSUB__(messageLengthLimit, messageLength))
  {
    __break(1u);
    goto LABEL_16;
  }
  if (v4 >= 1)
  {
    uint64_t v5 = (unsigned __int128)(v4 * (__int128)3) >> 64;
    uint64_t v6 = 3 * v4;
    if (v5 == v6 >> 63)
    {
      uint64_t v7 = ((unint64_t)v6 >> 2) - 2;
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      switch(v3 >> 62)
      {
        case 1uLL:
          uint64_t v9 = (int)v2;
          uint64_t v8 = v2 >> 32;
          break;
        case 2uLL:
          uint64_t v9 = *(void *)(v2 + 16);
          uint64_t v8 = *(void *)(v2 + 24);
          break;
        case 3uLL:
          break;
        default:
          uint64_t v9 = 0;
          uint64_t v8 = BYTE6(v3);
          break;
      }
      if (v7 >= v8) {
        uint64_t v12 = v8;
      }
      else {
        uint64_t v12 = v7;
      }
      if (v12 >= v9)
      {
        uint64_t v13 = sub_1C2A9C5D8();
        unint64_t v15 = v14;
        uint64_t v10 = sub_1C2A9C5B8();
        unint64_t v11 = v16;
        sub_1C2991910(v13, v15);
        goto LABEL_14;
      }
LABEL_17:
      __break(1u);
      JUMPOUT(0x1C2991900);
    }
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v10 = 0;
  unint64_t v11 = 0xE000000000000000;
LABEL_14:
  uint64_t v17 = v10;
  uint64_t v18 = (void *)v11;
  result._uint64_t object = v18;
  result._uint64_t countAndFlagsBits = v17;
  return result;
}

uint64_t sub_1C2991910(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }
  return swift_release();
}

void *static DateRange.allCases.getter()
{
  return &unk_1F1DEA1A0;
}

uint64_t DateRange.rawValue.getter(char a1)
{
  uint64_t result = 0x6669636570736E75;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x656D69546C6C61;
      break;
    case 2:
      uint64_t result = 0x7961646F74;
      break;
    case 3:
      uint64_t result = 0x57676E696C6C6F72;
      break;
    case 4:
      uint64_t result = 0x4D676E696C6C6F72;
      break;
    case 5:
      uint64_t result = 0x48676E696C6C6F72;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1C2991A64()
{
  return sub_1C2A9E9E8();
}

uint64_t sub_1C2991B98()
{
  sub_1C2A9DD78();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C2991CB4()
{
  return sub_1C2A9E9E8();
}

uint64_t sub_1C2991DE4@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = _s19HealthVisualization9DateRangeO8rawValueACSgSS_tcfC_0();
  *a1 = result;
  return result;
}

void sub_1C2991E14(uint64_t a1@<X8>)
{
  unint64_t v2 = 0xEB00000000646569;
  uint64_t v3 = 0x6669636570736E75;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE700000000000000;
      uint64_t v3 = 0x656D69546C6C61;
      goto LABEL_3;
    case 2:
      *(void *)a1 = 0x7961646F74;
      *(void *)(a1 + 8) = 0xE500000000000000;
      break;
    case 3:
      *(void *)a1 = 0x57676E696C6C6F72;
      *(void *)(a1 + 8) = 0xEB000000006B6565;
      break;
    case 4:
      strcpy((char *)a1, "rollingMonth");
      *(unsigned char *)(a1 + 13) = 0;
      *(_WORD *)(a1 + 14) = -5120;
      break;
    case 5:
      *(void *)a1 = 0x48676E696C6C6F72;
      *(void *)(a1 + 8) = 0xEF72616559666C61;
      break;
    default:
LABEL_3:
      *(void *)a1 = v3;
      *(void *)(a1 + 8) = v2;
      break;
  }
}

uint64_t sub_1C2991F10()
{
  return sub_1C2A9DE58();
}

uint64_t sub_1C2991F70()
{
  return sub_1C2A9DE38();
}

void sub_1C2991FC0(void *a1@<X8>)
{
  *a1 = &unk_1F1DEA1A0;
}

uint64_t sub_1C2991FD0(unsigned __int8 *a1, unsigned char *a2)
{
  unint64_t v2 = 0xEB00000000646569;
  uint64_t v3 = 0x6669636570736E75;
  uint64_t v4 = *a1;
  uint64_t v5 = 0x6669636570736E75;
  unint64_t v6 = 0xEB00000000646569;
  switch(v4)
  {
    case 1:
      unint64_t v6 = 0xE700000000000000;
      uint64_t v5 = 0x656D69546C6C61;
      break;
    case 2:
      unint64_t v6 = 0xE500000000000000;
      uint64_t v5 = 0x7961646F74;
      break;
    case 3:
      uint64_t v5 = 0x57676E696C6C6F72;
      unint64_t v6 = 0xEB000000006B6565;
      break;
    case 4:
      uint64_t v5 = 0x4D676E696C6C6F72;
      unint64_t v6 = 0xEC00000068746E6FLL;
      break;
    case 5:
      uint64_t v5 = 0x48676E696C6C6F72;
      unint64_t v6 = 0xEF72616559666C61;
      break;
    default:
      break;
  }
  switch(*a2)
  {
    case 1:
      unint64_t v2 = 0xE700000000000000;
      if (v5 == 0x656D69546C6C61) {
        goto LABEL_16;
      }
      goto LABEL_19;
    case 2:
      unint64_t v2 = 0xE500000000000000;
      if (v5 != 0x7961646F74) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 3:
      unint64_t v2 = 0xEB000000006B6565;
      if (v5 != 0x57676E696C6C6F72) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 4:
      uint64_t v3 = 0x4D676E696C6C6F72;
      unint64_t v2 = 0xEC00000068746E6FLL;
      goto LABEL_15;
    case 5:
      unint64_t v2 = 0xEF72616559666C61;
      if (v5 != 0x48676E696C6C6F72) {
        goto LABEL_19;
      }
      goto LABEL_16;
    default:
LABEL_15:
      if (v5 != v3) {
        goto LABEL_19;
      }
LABEL_16:
      if (v6 == v2) {
        char v7 = 1;
      }
      else {
LABEL_19:
      }
        char v7 = sub_1C2A9E8D8();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

id DateRange.predicate(endingAt:)(char *a1, char a2)
{
  uint64_t v4 = sub_1C2A9C6E8();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  char v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C2992F14(0, (unint64_t *)&qword_1EBB92480, MEMORY[0x1E4F26E60]);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v21 - v9;
  uint64_t v11 = sub_1C2A9C398();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  unint64_t v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  DateRange.dateInterval(endingAt:)(a1, a2, (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_1C2992F68((uint64_t)v10, (unint64_t *)&qword_1EBB92480, MEMORY[0x1E4F26E60]);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v10, v11);
    unint64_t v16 = self;
    sub_1C2A9C378();
    uint64_t v17 = (void *)sub_1C2A9C658();
    uint64_t v18 = *(void (**)(char *, uint64_t))(v5 + 8);
    v18(v7, v4);
    sub_1C2A9C348();
    uint64_t v19 = (void *)sub_1C2A9C658();
    v18(v7, v4);
    id v15 = objc_msgSend(v16, sel_predicateForSamplesWithStartDate_endDate_options_, v17, v19, 0);

    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
  return v15;
}

uint64_t DateRange.dateInterval(endingAt:)@<X0>(char *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v77 = a1;
  uint64_t v78 = a3;
  uint64_t v4 = sub_1C2A9C858();
  uint64_t v73 = *(void *)(v4 - 8);
  uint64_t v74 = v4;
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C2992F14(0, &qword_1EBB92520, MEMORY[0x1E4F27928]);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v70 = (char *)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v69 - v10;
  MEMORY[0x1F4188790](v12);
  unint64_t v14 = (char *)&v69 - v13;
  uint64_t v15 = sub_1C2A9C6E8();
  uint64_t v75 = *(void *)(v15 - 8);
  uint64_t v76 = v15;
  MEMORY[0x1F4188790](v15);
  uint64_t v69 = (char *)&v69 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v69 - v18;
  MEMORY[0x1F4188790](v20);
  uint64_t v72 = (char *)&v69 - v21;
  MEMORY[0x1F4188790](v22);
  uint64_t v71 = (char *)&v69 - v23;
  MEMORY[0x1F4188790](v24);
  id v26 = (char *)&v69 - v25;
  sub_1C2992F14(0, (unint64_t *)&qword_1EBB92480, MEMORY[0x1E4F26E60]);
  MEMORY[0x1F4188790](v27 - 8);
  uint64_t v29 = (char *)&v69 - v28;
  uint64_t v30 = sub_1C2A9C868();
  uint64_t v31 = *(void *)(v30 - 8);
  MEMORY[0x1F4188790](v30);
  uint64_t v33 = (char *)&v69 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  switch(a2)
  {
    case 2:
      uint64_t v39 = self;
      uint64_t v40 = (void *)sub_1C2A9C658();
      sub_1C2A9C838();
      unint64_t v41 = (void *)sub_1C2A9C7D8();
      (*(void (**)(char *, uint64_t))(v31 + 8))(v33, v30);
      id v42 = objc_msgSend(v39, sel_hk_dateIntervalForDayFromDate_calendar_, v40, v41);

      if (v42)
      {
        sub_1C2A9C338();

        uint64_t v43 = sub_1C2A9C398();
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v43 - 8) + 56))(v29, 0, 1, v43);
      }
      else
      {
        uint64_t v68 = sub_1C2A9C398();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v68 - 8) + 56))(v29, 1, 1, v68);
      }
      return sub_1C296FACC((uint64_t)v29, v78);
    case 3:
      sub_1C2A9C838();
      uint64_t v45 = v73;
      uint64_t v44 = v74;
      (*(void (**)(char *, void, uint64_t))(v73 + 104))(v6, *MEMORY[0x1E4F27BD8], v74);
      uint64_t v46 = v77;
      sub_1C2A9C818();
      (*(void (**)(char *, uint64_t))(v45 + 8))(v6, v44);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v33, v30);
      uint64_t v48 = v75;
      uint64_t v47 = v76;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v75 + 48))(v14, 1, v76) == 1)
      {
        uint64_t v49 = (void (*)(uint64_t))MEMORY[0x1E4F27928];
        uint64_t v50 = (uint64_t)v14;
        goto LABEL_13;
      }
      (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v26, v14, v47);
      uint64_t v64 = *(void (**)(char *, char *, uint64_t))(v48 + 16);
      v64(v71, v26, v47);
      v64(v72, v46, v47);
      uint64_t v57 = v78;
      sub_1C2A9C358();
      (*(void (**)(char *, uint64_t))(v48 + 8))(v26, v47);
      goto LABEL_16;
    case 4:
      sub_1C2A9C838();
      uint64_t v52 = v73;
      uint64_t v51 = v74;
      (*(void (**)(char *, void, uint64_t))(v73 + 104))(v6, *MEMORY[0x1E4F27C30], v74);
      uint64_t v53 = v77;
      sub_1C2A9C818();
      (*(void (**)(char *, uint64_t))(v52 + 8))(v6, v51);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v33, v30);
      uint64_t v55 = v75;
      uint64_t v54 = v76;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v75 + 48))(v11, 1, v76) == 1) {
        goto LABEL_12;
      }
      (*(void (**)(char *, char *, uint64_t))(v55 + 32))(v19, v11, v54);
      uint64_t v56 = *(void (**)(char *, char *, uint64_t))(v55 + 16);
      v56(v71, v19, v54);
      v56(v72, v53, v54);
      uint64_t v57 = v78;
      sub_1C2A9C358();
      (*(void (**)(char *, uint64_t))(v55 + 8))(v19, v54);
      goto LABEL_16;
    case 5:
      sub_1C2A9C838();
      uint64_t v59 = v73;
      uint64_t v58 = v74;
      (*(void (**)(char *, void, uint64_t))(v73 + 104))(v6, *MEMORY[0x1E4F27BC0], v74);
      uint64_t v11 = v70;
      uint64_t v60 = v77;
      sub_1C2A9C818();
      (*(void (**)(char *, uint64_t))(v59 + 8))(v6, v58);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v33, v30);
      uint64_t v62 = v75;
      uint64_t v61 = v76;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v75 + 48))(v11, 1, v76) == 1)
      {
LABEL_12:
        uint64_t v49 = (void (*)(uint64_t))MEMORY[0x1E4F27928];
        uint64_t v50 = (uint64_t)v11;
LABEL_13:
        sub_1C2992F68(v50, &qword_1EBB92520, v49);
        uint64_t v63 = sub_1C2A9C398();
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v63 - 8) + 56))(v78, 1, 1, v63);
      }
      else
      {
        int v65 = v69;
        (*(void (**)(char *, char *, uint64_t))(v62 + 32))(v69, v11, v61);
        double v66 = *(void (**)(char *, char *, uint64_t))(v62 + 16);
        v66(v71, v65, v61);
        v66(v72, v60, v61);
        uint64_t v57 = v78;
        sub_1C2A9C358();
        (*(void (**)(char *, uint64_t))(v62 + 8))(v65, v61);
LABEL_16:
        uint64_t v67 = sub_1C2A9C398();
        return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v67 - 8) + 56))(v57, 0, 1, v67);
      }
    default:
      uint64_t v34 = sub_1C2A9C398();
      char v35 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56);
      uint64_t v36 = v34;
      uint64_t v37 = v78;
      return v35(v37, 1, 1, v36);
  }
}

uint64_t DateRange.relatedTimeScope.getter(char a1)
{
  uint64_t result = 6;
  switch(a1)
  {
    case 2:
      return result;
    case 3:
      uint64_t result = 5;
      break;
    case 4:
      uint64_t result = 4;
      break;
    case 5:
      uint64_t result = 3;
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t _s19HealthVisualization9DateRangeO8rawValueACSgSS_tcfC_0()
{
  unint64_t v0 = sub_1C2A9E6E8();
  swift_bridgeObjectRelease();
  if (v0 >= 6) {
    return 6;
  }
  else {
    return v0;
  }
}

void sub_1C2992F14(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_1C2A9E328();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_1C2992F68(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  sub_1C2992F14(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

unint64_t sub_1C2992FC8()
{
  unint64_t result = qword_1EBB8F750;
  if (!qword_1EBB8F750)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB8F750);
  }
  return result;
}

unint64_t sub_1C2993020()
{
  unint64_t result = qword_1EA31E3F8;
  if (!qword_1EA31E3F8)
  {
    sub_1C2993078();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA31E3F8);
  }
  return result;
}

void sub_1C2993078()
{
  if (!qword_1EBB8F7E8)
  {
    unint64_t v0 = sub_1C2A9DEF8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EBB8F7E8);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for DateRange(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C299319CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DateRange()
{
  return &type metadata for DateRange;
}

unint64_t sub_1C29931D4()
{
  unint64_t result = qword_1EBB92060;
  if (!qword_1EBB92060)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB92060);
  }
  return result;
}

uint64_t dispatch thunk of PluginFeedItemProducing.feedItemResult.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of PluginFeedItemCollectionProducing.feedItemsResult.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t QuantityDistributionConfigurationOverrides.dateInterval.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C2993440(v1, a1, (unint64_t *)&qword_1EBB92480, MEMORY[0x1E4F26E60]);
}

uint64_t QuantityDistributionConfigurationOverrides.dateInterval.setter(uint64_t a1)
{
  return sub_1C2993554(a1, v1, (unint64_t *)&qword_1EBB92480, MEMORY[0x1E4F26E60]);
}

uint64_t (*QuantityDistributionConfigurationOverrides.dateInterval.modify())()
{
  return nullsub_1;
}

void *QuantityDistributionConfigurationOverrides.predicate.getter()
{
  uint64_t v1 = *(void **)(v0 + *(int *)(type metadata accessor for QuantityDistributionConfigurationOverrides() + 20));
  id v2 = v1;
  return v1;
}

uint64_t type metadata accessor for QuantityDistributionConfigurationOverrides()
{
  uint64_t result = qword_1EBB91FC0;
  if (!qword_1EBB91FC0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void QuantityDistributionConfigurationOverrides.predicate.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for QuantityDistributionConfigurationOverrides() + 20);

  *(void *)(v1 + v3) = a1;
}

uint64_t (*QuantityDistributionConfigurationOverrides.predicate.modify())(void)
{
  return nullsub_1;
}

uint64_t QuantityDistributionConfigurationOverrides.histogramWidth.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for QuantityDistributionConfigurationOverrides();
  return sub_1C2993440(v1 + *(int *)(v3 + 24), a1, &qword_1EBB91C08, MEMORY[0x1E4F26F90]);
}

uint64_t sub_1C2993440(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  sub_1C29934AC(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

void sub_1C29934AC(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_1C2A9E328();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t QuantityDistributionConfigurationOverrides.histogramWidth.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for QuantityDistributionConfigurationOverrides();
  return sub_1C2993554(a1, v1 + *(int *)(v3 + 24), &qword_1EBB91C08, MEMORY[0x1E4F26F90]);
}

uint64_t sub_1C2993554(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  sub_1C29934AC(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a2, a1, v6);
  return a2;
}

uint64_t (*QuantityDistributionConfigurationOverrides.histogramWidth.modify())(void)
{
  return nullsub_1;
}

uint64_t QuantityDistributionConfigurationOverrides.init(dateInterval:predicate:histogramWidth:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = sub_1C2A9C398();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(a4, 1, 1, v8);
  uint64_t v9 = type metadata accessor for QuantityDistributionConfigurationOverrides();
  uint64_t v10 = *(int *)(v9 + 20);
  *(void *)(a4 + v10) = 0;
  uint64_t v11 = a4 + *(int *)(v9 + 24);
  uint64_t v12 = sub_1C2A9C468();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  sub_1C2993554(a1, a4, (unint64_t *)&qword_1EBB92480, MEMORY[0x1E4F26E60]);

  *(void *)(a4 + v10) = a2;
  return sub_1C2993554(a3, v11, &qword_1EBB91C08, MEMORY[0x1E4F26F90]);
}

uint64_t sub_1C2993738@<X0>(uint64_t a1@<X8>)
{
  return sub_1C2993440(v1, a1, (unint64_t *)&qword_1EBB92480, MEMORY[0x1E4F26E60]);
}

uint64_t *initializeBufferWithCopyOfBuffer for QuantityDistributionConfigurationOverrides(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_1C2A9C398();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      sub_1C29934AC(0, (unint64_t *)&qword_1EBB92480, MEMORY[0x1E4F26E60]);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    uint64_t v11 = *(int *)(a3 + 20);
    uint64_t v12 = *(int *)(a3 + 24);
    uint64_t v13 = *(void **)((char *)a2 + v11);
    *(uint64_t *)((char *)a1 + v11) = (uint64_t)v13;
    unint64_t v14 = (char *)a1 + v12;
    uint64_t v15 = (char *)a2 + v12;
    uint64_t v16 = sub_1C2A9C468();
    uint64_t v17 = *(void *)(v16 - 8);
    uint64_t v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
    id v19 = v13;
    if (v18(v15, 1, v16))
    {
      sub_1C29934AC(0, &qword_1EBB91C08, MEMORY[0x1E4F26F90]);
      memcpy(v14, v15, *(void *)(*(void *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v14, v15, v16);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
  }
  return a1;
}

uint64_t destroy for QuantityDistributionConfigurationOverrides(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1C2A9C398();
  uint64_t v5 = *(void *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  }

  uint64_t v6 = a1 + *(int *)(a2 + 24);
  uint64_t v7 = sub_1C2A9C468();
  uint64_t v10 = *(void *)(v7 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v6, 1, v7);
  if (!result)
  {
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 8);
    return v9(v6, v7);
  }
  return result;
}

char *initializeWithCopy for QuantityDistributionConfigurationOverrides(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = sub_1C2A9C398();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    sub_1C29934AC(0, (unint64_t *)&qword_1EBB92480, MEMORY[0x1E4F26E60]);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = *(void **)&a2[v9];
  *(void *)&a1[v9] = v11;
  uint64_t v12 = &a1[v10];
  uint64_t v13 = &a2[v10];
  uint64_t v14 = sub_1C2A9C468();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
  id v17 = v11;
  if (v16(v13, 1, v14))
  {
    sub_1C29934AC(0, &qword_1EBB91C08, MEMORY[0x1E4F26F90]);
    memcpy(v12, v13, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

char *assignWithCopy for QuantityDistributionConfigurationOverrides(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = sub_1C2A9C398();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    sub_1C29934AC(0, (unint64_t *)&qword_1EBB92480, MEMORY[0x1E4F26E60]);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v12 = *(int *)(a3 + 20);
  uint64_t v13 = *(void **)&a1[v12];
  uint64_t v14 = *(void **)&a2[v12];
  *(void *)&a1[v12] = v14;
  id v15 = v14;

  uint64_t v16 = *(int *)(a3 + 24);
  id v17 = &a1[v16];
  uint64_t v18 = &a2[v16];
  uint64_t v19 = sub_1C2A9C468();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
  int v22 = v21(v17, 1, v19);
  int v23 = v21(v18, 1, v19);
  if (!v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 24))(v17, v18, v19);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v20 + 8))(v17, v19);
    goto LABEL_12;
  }
  if (v23)
  {
LABEL_12:
    sub_1C29934AC(0, &qword_1EBB91C08, MEMORY[0x1E4F26F90]);
    memcpy(v17, v18, *(void *)(*(void *)(v24 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v17, v18, v19);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  return a1;
}

char *initializeWithTake for QuantityDistributionConfigurationOverrides(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = sub_1C2A9C398();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    sub_1C29934AC(0, (unint64_t *)&qword_1EBB92480, MEMORY[0x1E4F26E60]);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v9 = *(int *)(a3 + 24);
  *(void *)&a1[*(int *)(a3 + 20)] = *(void *)&a2[*(int *)(a3 + 20)];
  int v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  uint64_t v12 = sub_1C2A9C468();
  uint64_t v13 = *(void *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    sub_1C29934AC(0, &qword_1EBB91C08, MEMORY[0x1E4F26F90]);
    memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  return a1;
}

char *assignWithTake for QuantityDistributionConfigurationOverrides(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = sub_1C2A9C398();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    sub_1C29934AC(0, (unint64_t *)&qword_1EBB92480, MEMORY[0x1E4F26E60]);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v12 = *(int *)(a3 + 20);
  uint64_t v13 = *(void **)&a1[v12];
  *(void *)&a1[v12] = *(void *)&a2[v12];

  uint64_t v14 = *(int *)(a3 + 24);
  id v15 = &a1[v14];
  uint64_t v16 = &a2[v14];
  uint64_t v17 = sub_1C2A9C468();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  int v20 = v19(v15, 1, v17);
  int v21 = v19(v16, 1, v17);
  if (!v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 40))(v15, v16, v17);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v18 + 8))(v15, v17);
    goto LABEL_12;
  }
  if (v21)
  {
LABEL_12:
    sub_1C29934AC(0, &qword_1EBB91C08, MEMORY[0x1E4F26F90]);
    memcpy(v15, v16, *(void *)(*(void *)(v22 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v15, v16, v17);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  return a1;
}

uint64_t getEnumTagSinglePayload for QuantityDistributionConfigurationOverrides(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C29945D0);
}

uint64_t sub_1C29945D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1C29934AC(0, (unint64_t *)&qword_1EBB92480, MEMORY[0x1E4F26E60]);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else if (a2 == 2147483646)
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
  else
  {
    sub_1C29934AC(0, &qword_1EBB91C08, MEMORY[0x1E4F26F90]);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a3 + 24);
    return v13(v15, a2, v14);
  }
}

uint64_t storeEnumTagSinglePayload for QuantityDistributionConfigurationOverrides(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C2994754);
}

void sub_1C2994754(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  sub_1C29934AC(0, (unint64_t *)&qword_1EBB92480, MEMORY[0x1E4F26E60]);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v10(a1, a2, a2, v8);
  }
  else if (a3 == 2147483646)
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = a2;
  }
  else
  {
    sub_1C29934AC(0, &qword_1EBB91C08, MEMORY[0x1E4F26F90]);
    uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a4 + 24);
    v12(v14, a2, a2, v13);
  }
}

void sub_1C29948B8()
{
  sub_1C29934AC(319, (unint64_t *)&qword_1EBB92480, MEMORY[0x1E4F26E60]);
  if (v0 <= 0x3F)
  {
    sub_1C29934AC(319, &qword_1EBB91C08, MEMORY[0x1E4F26F90]);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

id sub_1C29949C0()
{
  qword_1EA32B5B0 = *MEMORY[0x1E4FB2788];
  return (id)qword_1EA32B5B0;
}

void sub_1C29949D8(void *a1@<X8>)
{
  *a1 = &unk_1F1DEA1C8;
}

id sub_1C29949E8()
{
  uint64_t v1 = OBJC_IVAR____TtC19HealthVisualization29HighlightActivityCalendarView____lazy_storage___ringsRenderer;
  id v2 = *(void **)(v0
                + OBJC_IVAR____TtC19HealthVisualization29HighlightActivityCalendarView____lazy_storage___ringsRenderer);
  if (v2)
  {
    id v3 = *(id *)(v0
               + OBJC_IVAR____TtC19HealthVisualization29HighlightActivityCalendarView____lazy_storage___ringsRenderer);
  }
  else
  {
    id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F496A8]), sel_init);
    uint64_t v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    id v2 = 0;
  }
  id v6 = v2;
  return v3;
}

id sub_1C2994A5C()
{
  uint64_t v1 = OBJC_IVAR____TtC19HealthVisualization29HighlightActivityCalendarView____lazy_storage___unitPreferenceController;
  id v2 = *(void **)(v0
                + OBJC_IVAR____TtC19HealthVisualization29HighlightActivityCalendarView____lazy_storage___unitPreferenceController);
  if (v2)
  {
    id v3 = *(id *)(v0
               + OBJC_IVAR____TtC19HealthVisualization29HighlightActivityCalendarView____lazy_storage___unitPreferenceController);
  }
  else
  {
    id v4 = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC19HealthVisualization29HighlightActivityCalendarView_healthStore), sel_viewControllerFactory);
    id v5 = objc_msgSend(v4, sel_createHKUnitPreferenceController);

    id v6 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v5;
    id v3 = v5;

    id v2 = 0;
  }
  id v7 = v2;
  return v3;
}

id sub_1C2994B00()
{
  uint64_t v1 = OBJC_IVAR____TtC19HealthVisualization29HighlightActivityCalendarView____lazy_storage___displayTypeController;
  id v2 = *(void **)(v0
                + OBJC_IVAR____TtC19HealthVisualization29HighlightActivityCalendarView____lazy_storage___displayTypeController);
  if (v2)
  {
    id v3 = *(id *)(v0
               + OBJC_IVAR____TtC19HealthVisualization29HighlightActivityCalendarView____lazy_storage___displayTypeController);
LABEL_5:
    id v6 = v2;
    return v3;
  }
  id result = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC19HealthVisualization29HighlightActivityCalendarView_healthStore), sel_displayTypeController);
  if (result)
  {
    id v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = result;
    id v3 = result;

    id v2 = 0;
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

id HighlightActivityCalendarView.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void HighlightActivityCalendarView.__allocating_init(model:healthStore:)(uint64_t *a1, void *a2)
{
  id v5 = objc_allocWithZone(v2);
  HighlightActivityCalendarView.init(model:healthStore:)(a1, a2);
}

void HighlightActivityCalendarView.init(model:healthStore:)(uint64_t *a1, void *a2)
{
  id v3 = v2;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = sub_1C2A9CFE8();
  uint64_t v42 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v39 - v10;
  uint64_t v12 = *a1;
  uint64_t v13 = a1[1];
  uint64_t v14 = a1[2];
  v3[OBJC_IVAR____TtC19HealthVisualization29HighlightActivityCalendarView_currentWeekdayStringLength] = 0;
  uint64_t v15 = (void *)*MEMORY[0x1E4FB27F0];
  *(void *)&v3[OBJC_IVAR____TtC19HealthVisualization29HighlightActivityCalendarView_currentLabelMaximumContentSizeCategory] = *MEMORY[0x1E4FB27F0];
  *(void *)&v3[OBJC_IVAR____TtC19HealthVisualization29HighlightActivityCalendarView____lazy_storage___ringsRenderer] = 0;
  *(void *)&v3[OBJC_IVAR____TtC19HealthVisualization29HighlightActivityCalendarView____lazy_storage___unitPreferenceController] = 0;
  *(void *)&v3[OBJC_IVAR____TtC19HealthVisualization29HighlightActivityCalendarView____lazy_storage___displayTypeController] = 0;
  *(void *)&v3[OBJC_IVAR____TtC19HealthVisualization29HighlightActivityCalendarView_longWeekdayStrings] = v13;
  *(void *)&v3[OBJC_IVAR____TtC19HealthVisualization29HighlightActivityCalendarView_shortWeekdayStrings] = v14;
  *(void *)&v3[OBJC_IVAR____TtC19HealthVisualization29HighlightActivityCalendarView_healthStore] = a2;
  uint64_t v16 = (objc_class *)type metadata accessor for HighlightActivityCalendarView();
  v44.receiver = v3;
  v44.super_class = v16;
  id v17 = v15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v18 = a2;
  id v19 = objc_msgSendSuper2(&v44, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  sub_1C29951A8();
  objc_msgSend(v19, sel_setHorizontalDistribution_, 0);
  objc_msgSend(v19, sel_setVerticalAlignment_, 3);
  objc_msgSend(v19, sel_setColumnSpacing_, 10.0);
  uint64_t v20 = *(void *)(v12 + 16);
  if (v20)
  {
    uint64_t v21 = *(void *)(v12 + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v20 != 1)
    {
      sub_1C2A9CF98();
      uint64_t v22 = sub_1C2A9CFC8();
      os_log_type_t v23 = sub_1C2A9E0A8();
      if (os_log_type_enabled(v22, v23))
      {
        uint64_t v24 = swift_slowAlloc();
        id v40 = v18;
        uint64_t v25 = (uint8_t *)v24;
        uint64_t v26 = swift_slowAlloc();
        uint64_t v43 = v26;
        *(_DWORD *)uint64_t v25 = 136446210;
        uint64_t v39 = v6;
        uint64_t v45 = ObjectType;
        swift_getMetatypeMetadata();
        uint64_t v27 = sub_1C2A9DD58();
        uint64_t v45 = sub_1C2957168(v27, v28, &v43);
        sub_1C2A9E358();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C292A000, v22, v23, "%{public}s: the view model provided more than one week, which is nonsensical for this view.", v25, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1C87656F0](v26, -1, -1);
        uint64_t v29 = v25;
        id v18 = v40;
        MEMORY[0x1C87656F0](v29, -1, -1);

        (*(void (**)(char *, uint64_t))(v42 + 8))(v8, v39);
      }
      else
      {

        (*(void (**)(char *, uint64_t))(v42 + 8))(v8, v6);
      }
    }
    uint64_t v45 = v21;
    sub_1C2995320(&v45);
    swift_bridgeObjectRelease();
    id v36 = sub_1C2994B00();
    id v37 = objc_msgSend(v36, sel_wheelchairUseCharacteristicCache);

    if (v37)
    {
      id v38 = v19;
      objc_msgSend(v37, sel_registerObserver_, v38);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1C2A9CF98();
    uint64_t v30 = sub_1C2A9CFC8();
    os_log_type_t v31 = sub_1C2A9E0A8();
    if (os_log_type_enabled(v30, v31))
    {
      id v40 = v18;
      uint64_t v32 = (uint8_t *)swift_slowAlloc();
      uint64_t v33 = swift_slowAlloc();
      uint64_t v43 = v33;
      *(_DWORD *)uint64_t v32 = 136446210;
      uint64_t v45 = ObjectType;
      swift_getMetatypeMetadata();
      uint64_t v34 = sub_1C2A9DD58();
      uint64_t v39 = v6;
      uint64_t v45 = sub_1C2957168(v34, v35, &v43);
      sub_1C2A9E358();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C292A000, v30, v31, "%{public}s: the view model did not provide any weeks, which is unexpected", v32, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C87656F0](v33, -1, -1);
      MEMORY[0x1C87656F0](v32, -1, -1);

      (*(void (**)(char *, uint64_t))(v42 + 8))(v11, v39);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v42 + 8))(v11, v6);
    }
  }
}

uint64_t sub_1C29951A8()
{
  swift_getObjectType();
  sub_1C2998474();
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1C2AA8230;
  uint64_t v1 = sub_1C2A9D018();
  uint64_t v2 = MEMORY[0x1E4FB1138];
  *(void *)(v0 + 32) = v1;
  *(void *)(v0 + 40) = v2;
  uint64_t v3 = sub_1C2A9D008();
  uint64_t v4 = MEMORY[0x1E4FB0F40];
  *(void *)(v0 + 48) = v3;
  *(void *)(v0 + 56) = v4;
  sub_1C2A9E268();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1C2AA6B00;
  *(void *)(v5 + 32) = v1;
  *(void *)(v5 + 40) = v2;
  sub_1C2A9E268();
  swift_unknownObjectRelease();
  return swift_bridgeObjectRelease();
}

void sub_1C2995320(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for HighlightCalendarDayViewModel(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v56 = (uint64_t)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v48 - v8;
  uint64_t v10 = *a1;
  uint64_t v11 = *(void *)(v10 + 16);
  if (v11)
  {
    type metadata accessor for UILayoutPriority(0);
    uint64_t v55 = v12;
    uint64_t v13 = v10 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    uint64_t v54 = *(void *)(v5 + 72);
    uint64_t v48 = v10;
    swift_bridgeObjectRetain();
    uint64_t v53 = MEMORY[0x1E4FBC838] + 8;
    long long v52 = xmmword_1C2AA8A70;
    uint64_t v51 = v9;
    do
    {
      sub_1C29982C0(v13, (uint64_t)v9);
      id v30 = sub_1C2997C00();
      os_log_type_t v31 = v30;
      int v32 = v9[48];
      uint64_t v57 = v11;
      if (v32)
      {
        uint64_t v14 = v56;
        sub_1C29982C0((uint64_t)v9, v56);
        id v15 = objc_allocWithZone((Class)type metadata accessor for HighlightCalendarDayView());
        uint64_t v16 = sub_1C2A29C14(v14, 0);
        id v17 = sub_1C299576C(0, 0);
        id v18 = sub_1C299576C(1, 0);
        id v19 = sub_1C299576C(2, 0);
      }
      else
      {
        id v50 = v30;
        uint64_t v33 = (void *)*((void *)v9 + 4);
        uint64_t v34 = *((void *)v9 + 5);
        unint64_t v35 = v2;
        id v36 = (void *)*((void *)v9 + 3);
        uint64_t v37 = (uint64_t)v9;
        uint64_t v38 = v56;
        sub_1C29982C0(v37, v56);
        sub_1C29983CC(v36, v33, v34, 0);
        id v39 = v36;
        id v40 = sub_1C29949E8();
        id v41 = objc_allocWithZone((Class)type metadata accessor for HighlightCalendarDayView());
        uint64_t v49 = sub_1C2A29C14(v38, v40);

        id v42 = v39;
        id v17 = sub_1C299576C(0, v36);
        sub_1C2998420(v36, v33, v34, 0);
        id v43 = v42;
        id v18 = sub_1C299576C(1, v36);
        sub_1C2998420(v36, v33, v34, 0);
        id v44 = v43;
        id v19 = sub_1C299576C(2, v36);
        sub_1C2998420(v36, v33, v34, 0);
        uint64_t v45 = v36;
        uint64_t v2 = v35;
        uint64_t v46 = v33;
        uint64_t v47 = v34;
        uint64_t v16 = v49;
        os_log_type_t v31 = v50;
        sub_1C2998420(v45, v46, v47, 0);
      }
      int v59 = 1065353216;
      int v60 = 1148846080;
      sub_1C2998268();
      uint64_t v20 = v16;
      sub_1C2A9CFF8();
      LODWORD(v21) = v58;
      objc_msgSend(v20, sel_setContentCompressionResistancePriority_forAxis_, 0, v21);

      sub_1C2998324(0, (unint64_t *)&qword_1EBB91978, v53, MEMORY[0x1E4FBBE00]);
      uint64_t v22 = swift_allocObject();
      *(_OWORD *)(v22 + 16) = v52;
      *(void *)(v22 + 32) = v20;
      *(void *)(v22 + 40) = v31;
      *(void *)(v22 + 48) = v17;
      *(void *)(v22 + 56) = v18;
      *(void *)(v22 + 64) = v19;
      uint64_t v58 = v22;
      sub_1C2A9DEA8();
      sub_1C29376D4(0, (unint64_t *)&qword_1EBB90D78);
      os_log_type_t v23 = v20;
      id v24 = v31;
      id v25 = v17;
      id v26 = v18;
      id v27 = v19;
      unint64_t v28 = (void *)sub_1C2A9DE88();
      swift_bridgeObjectRelease();
      id v29 = objc_msgSend(v2, sel_addRowWithArrangedSubviews_, v28);

      swift_unknownObjectRelease();
      uint64_t v9 = v51;
      sub_1C2998370((uint64_t)v51);
      v13 += v54;
      uint64_t v11 = v57 - 1;
    }
    while (v57 != 1);
    swift_bridgeObjectRelease();
  }
}

id sub_1C299576C(char a1, void *a2)
{
  id v5 = sub_1C2997F14();
  id result = objc_msgSend(v5, sel_font);
  if (result)
  {
    uint64_t v7 = result;
    sub_1C2995968(a1, (uint64_t)result);
    id v9 = v8;

    sub_1C2995B70(a1, a2);
    id v10 = objc_allocWithZone(MEMORY[0x1E4F28E48]);
    uint64_t v11 = (void *)sub_1C2A9DCF8();
    id v12 = objc_msgSend(v10, sel_initWithString_, v11);

    if (v9)
    {
      uint64_t v13 = self;
      id v9 = v9;
      id v14 = objc_msgSend(v13, sel_textAttachmentWithImage_, v9);
      id v15 = objc_msgSend(self, sel_attributedStringWithAttachment_, v14);

      objc_msgSend(v12, sel_insertAttributedString_atIndex_, v15, 0);
      if (objc_msgSend(v2, sel_hk_isLeftToRight))
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        id v16 = objc_allocWithZone(MEMORY[0x1E4F28B18]);
        id v17 = (void *)sub_1C2A9DCF8();
        id v18 = objc_msgSend(v16, sel_initWithString_, v17);

        objc_msgSend(v12, sel_insertAttributedString_atIndex_, v18, 0);
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    objc_msgSend(v5, sel_setAttributedText_, v12);

    return v5;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1C2995968(char a1, uint64_t a2)
{
  id v3 = objc_msgSend(self, sel_configurationWithFont_, a2);
  if (a1)
  {
    if (a1 == 1)
    {
      uint64_t v4 = &selRef_hk_activityExerciseGoalLineColor;
    }
    else
    {
      id v5 = sub_1C2994B00();
      id v6 = objc_msgSend(v5, sel_wheelchairUseCharacteristicCache);

      if (!v6)
      {
        __break(1u);
        return;
      }
      objc_msgSend(v6, sel_isWheelchairUser);

      uint64_t v4 = &selRef_hk_activityStandGoalLineColor;
    }
  }
  else
  {
    uint64_t v4 = &selRef_hk_activityMoveGoalLineColor;
  }
  id v7 = [self *v4];
  id v8 = v3;
  id v9 = (void *)sub_1C2A9DCF8();
  swift_bridgeObjectRelease();
  id v10 = objc_msgSend(self, sel__systemImageNamed_withConfiguration_, v9, v8);

  if (v10)
  {
    id v11 = objc_msgSend(v10, sel_imageWithRenderingMode_, 2);

    objc_msgSend(v11, sel_imageWithTintColor_, v7);
  }
  else
  {
  }
}

id sub_1C2995B70(char a1, void *a2)
{
  if (!a2) {
    goto LABEL_4;
  }
  id v3 = a2;
  if (objc_msgSend(v3, sel_isPaused))
  {

LABEL_4:
    id result = (id)HKLocalizedNoDataString();
    if (result)
    {
      id v5 = result;
      uint64_t v6 = sub_1C2A9DD28();
LABEL_21:

      return (id)v6;
    }
    __break(1u);
    goto LABEL_27;
  }
  id result = (id)HKNumberFormatterFromTemplate();
  if (!result)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  id v7 = result;
  if (a1)
  {
    if (a1 != 1) {
      goto LABEL_16;
    }
    id v8 = objc_msgSend(v3, sel_appleExerciseTime);
    id v9 = objc_msgSend(self, sel_minuteUnit);
    objc_msgSend(v8, sel_doubleValueForUnit_, v9);

    id v10 = (void *)sub_1C2A9C8D8();
    id v5 = objc_msgSend(v7, sel_stringFromNumber_, v10);

    if (v5) {
      goto LABEL_19;
    }
    id result = (id)HKLocalizedNoDataString();
    if (result)
    {
LABEL_18:
      id v5 = result;
      goto LABEL_19;
    }
    __break(1u);
  }
  if (objc_msgSend(v3, sel_activityMoveMode) == (id)2)
  {
    id v11 = objc_msgSend(v3, sel_appleMoveTime);
    id v12 = objc_msgSend(self, sel_minuteUnit);
    objc_msgSend(v11, sel_doubleValueForUnit_, v12);

    uint64_t v13 = (void *)sub_1C2A9C8D8();
    id v5 = objc_msgSend(v7, sel_stringFromNumber_, v13);

    if (v5) {
      goto LABEL_19;
    }
    id result = (id)HKLocalizedNoDataString();
    if (!result)
    {
      __break(1u);
LABEL_16:
      id v14 = objc_msgSend(v3, sel_appleStandHours);
      id v15 = objc_msgSend(self, sel_countUnit);
      objc_msgSend(v14, sel_doubleValueForUnit_, v15);

      id v16 = (void *)sub_1C2A9C8D8();
      id v5 = objc_msgSend(v7, sel_stringFromNumber_, v16);

      if (!v5)
      {
        id result = (id)HKLocalizedNoDataString();
        if (!result)
        {
LABEL_28:
          __break(1u);
          goto LABEL_29;
        }
        goto LABEL_18;
      }
LABEL_19:
      uint64_t v6 = sub_1C2A9DD28();
LABEL_20:

      goto LABEL_21;
    }
    goto LABEL_18;
  }
  id v17 = sub_1C2994B00();
  id v18 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F2B3B8]), sel_initWithIdentifier_, *MEMORY[0x1E4F2A5C0]);
  id v19 = objc_msgSend(v17, sel_displayTypeForObjectType_, v18);

  id v20 = sub_1C2994A5C();
  id v21 = objc_msgSend(v20, sel_unitForDisplayType_, v19);

  id v22 = objc_msgSend(v3, sel_activeEnergyBurned);
  _HKWorkoutFlooredValueForQuantity();

  os_log_type_t v23 = (void *)sub_1C2A9E988();
  id v5 = objc_msgSend(v7, sel_stringFromNumber_, v23);

  if (v5)
  {
LABEL_25:
    uint64_t v6 = sub_1C2A9DD28();

    goto LABEL_20;
  }
  id result = (id)HKLocalizedNoDataString();
  if (result)
  {
    id v5 = result;
    goto LABEL_25;
  }
LABEL_29:
  __break(1u);
  return result;
}

void sub_1C2995F74()
{
  uint64_t v1 = v0;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v2 = sub_1C2A9CFE8();
  uint64_t v56 = *(void *)(v2 - 8);
  uint64_t v57 = v2;
  *(void *)&double v3 = MEMORY[0x1F4188790](v2).n128_u64[0];
  uint64_t v58 = (char *)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v5 = objc_msgSend(v0, sel_arrangedSubviewInColumnAtIndex_rowAtIndex_, 0, 0, v3);
  id v6 = objc_msgSend(v0, sel_arrangedSubviewInColumnAtIndex_rowAtIndex_, 1, 0);
  id v7 = objc_msgSend(v0, sel_arrangedSubviewInColumnAtIndex_rowAtIndex_, 2, 0);
  unsigned int v8 = objc_msgSend(v0, sel_hk_isLeftToRight);
  BOOL v9 = v8 == 0;
  if (v8) {
    id v10 = v7;
  }
  else {
    id v10 = v5;
  }
  if (v9) {
    id v11 = v7;
  }
  else {
    id v11 = v5;
  }
  objc_msgSend(v10, sel_frame);
  double MinX = CGRectGetMinX(v61);
  objc_msgSend(v11, sel_frame);
  double MaxX = CGRectGetMaxX(v62);
  self;
  id v14 = (void *)swift_dynamicCastObjCClass();
  if (v14) {
    id v15 = v6;
  }
  double v16 = MinX - MaxX;
  id v17 = objc_msgSend(v14, sel_font);

  if (!v17)
  {
    if (byte_1EA31EF08 != 1)
    {
      id v25 = self;
      sub_1C2A9DD28();
      id v24 = (void *)sub_1C2A9DCF8();
      swift_bridgeObjectRelease();
      id v17 = objc_msgSend(v25, sel_hk_preferredFontForTextStyle_symbolicTraits_, v24, 2);
      goto LABEL_17;
    }
    if (qword_1EBB91258 != -1) {
      swift_once();
    }
    id v18 = (void *)qword_1EBB907C8;
    sub_1C29376D4(0, (unint64_t *)&qword_1EBB90DA0);
    id v19 = v18;
    id v20 = (void *)sub_1C2A9E2D8();
    id v17 = objc_msgSend(v19, sel_objectForKey_, v20);

    if (!v17)
    {
      id v21 = self;
      sub_1C2A9DD28();
      id v22 = (void *)sub_1C2A9DCF8();
      swift_bridgeObjectRelease();
      id v17 = objc_msgSend(v21, sel_hk_preferredFontForTextStyle_symbolicTraits_, v22, 2);

      if (byte_1EA31EF08 == 1)
      {
        id v23 = (id)qword_1EBB907C8;
        id v24 = (void *)sub_1C2A9E2D8();
        objc_msgSend(v23, sel_setObject_forKey_, v17, v24);

LABEL_17:
      }
    }
  }
  double v26 = v16 + -20.0;
  if (!*(void *)&v1[OBJC_IVAR____TtC19HealthVisualization29HighlightActivityCalendarView_longWeekdayStrings]) {
    goto LABEL_22;
  }
  uint64_t v27 = (uint64_t)v17;
  uint64_t v28 = swift_bridgeObjectRetain();
  uint64_t v29 = sub_1C2997794(v28, v27);
  swift_bridgeObjectRelease();

  double v30 = COERCE_DOUBLE(sub_1C295AE6C(v29));
  LOBYTE(v27) = v31;
  swift_bridgeObjectRelease();
  if (v27)
  {
LABEL_22:
    if (v26 >= 0.0) {
      goto LABEL_21;
    }
  }
  else if (v26 >= v30)
  {
LABEL_21:
    int v32 = 1;
    goto LABEL_32;
  }
  if (!*(void *)&v1[OBJC_IVAR____TtC19HealthVisualization29HighlightActivityCalendarView_shortWeekdayStrings]) {
    goto LABEL_27;
  }
  uint64_t v33 = (uint64_t)v17;
  uint64_t v34 = swift_bridgeObjectRetain();
  uint64_t v35 = sub_1C2997794(v34, v33);
  swift_bridgeObjectRelease();

  double v36 = COERCE_DOUBLE(sub_1C295AE6C(v35));
  LOBYTE(v33) = v37;
  swift_bridgeObjectRelease();
  if (v33)
  {
LABEL_27:
    if (v26 >= 0.0) {
      goto LABEL_26;
    }
  }
  else if (v26 >= v36)
  {
LABEL_26:
    int v32 = 2;
    goto LABEL_32;
  }
  uint64_t v38 = v58;
  sub_1C2A9CF98();
  id v39 = v1;
  id v40 = sub_1C2A9CFC8();
  os_log_type_t v41 = sub_1C2A9E0A8();
  int v42 = v41;
  if (os_log_type_enabled(v40, v41))
  {
    uint64_t v43 = swift_slowAlloc();
    uint64_t v54 = swift_slowAlloc();
    uint64_t v59 = v54;
    *(_DWORD *)uint64_t v43 = 136446722;
    int v53 = v42;
    uint64_t v60 = ObjectType;
    swift_getMetatypeMetadata();
    uint64_t v44 = sub_1C2A9DD58();
    uint64_t v60 = sub_1C2957168(v44, v45, &v59);
    sub_1C2A9E358();
    swift_bridgeObjectRelease();
    *(_WORD *)(v43 + 12) = 2080;
    uint64_t ObjectType = v43 + 14;
    id v46 = objc_msgSend(v39, sel_traitCollection);
    id v47 = objc_msgSend(v46, sel_preferredContentSizeCategory);

    uint64_t v60 = (uint64_t)v47;
    type metadata accessor for UIContentSizeCategory(0);
    uint64_t v48 = sub_1C2A9DD58();
    uint64_t v60 = sub_1C2957168(v48, v49, &v59);
    sub_1C2A9E358();

    swift_bridgeObjectRelease();
    *(_WORD *)(v43 + 22) = 2048;
    uint64_t v60 = *(void *)&v26;
    sub_1C2A9E358();
    _os_log_impl(&dword_1C292A000, v40, (os_log_type_t)v53, "%{public}s: unable to fit weekday labels for the contentSizeCategory (%s and column width (%f)", (uint8_t *)v43, 0x20u);
    uint64_t v50 = v54;
    swift_arrayDestroy();
    MEMORY[0x1C87656F0](v50, -1, -1);
    MEMORY[0x1C87656F0](v43, -1, -1);

    (*(void (**)(char *, uint64_t))(v56 + 8))(v58, v57);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v56 + 8))(v38, v57);
  }
  int v32 = 3;
LABEL_32:
  uint64_t v51 = OBJC_IVAR____TtC19HealthVisualization29HighlightActivityCalendarView_currentWeekdayStringLength;
  if (v1[OBJC_IVAR____TtC19HealthVisualization29HighlightActivityCalendarView_currentWeekdayStringLength] == v32)
  {
  }
  else
  {
    sub_1C2996650(v32);

    v1[v51] = v32;
  }
}

void sub_1C2996650(unsigned __int8 a1)
{
  uint64_t v19 = 1;
  id v3 = objc_msgSend(v1, sel_columnAtIndex_, 1);
  if (a1 >= 2u)
  {
    if (a1 != 2)
    {
      unint64_t v5 = 0;
      uint64_t v6 = 0;
      goto LABEL_10;
    }
    uint64_t v4 = &OBJC_IVAR____TtC19HealthVisualization29HighlightActivityCalendarView_shortWeekdayStrings;
  }
  else
  {
    uint64_t v4 = &OBJC_IVAR____TtC19HealthVisualization29HighlightActivityCalendarView_longWeekdayStrings;
  }
  uint64_t v6 = *(void *)&v1[*v4];
  if (v6)
  {
    unint64_t v5 = *(void *)(v6 + 16);
    swift_bridgeObjectRetain();
  }
  else
  {
    unint64_t v5 = 0;
  }
  uint64_t v19 = 0;
LABEL_10:
  id v7 = objc_msgSend(v3, sel_arrangedSubviews);
  sub_1C29376D4(0, (unint64_t *)&qword_1EBB90D78);
  unint64_t v8 = sub_1C2A9DE98();

  if (v8 >> 62) {
    goto LABEL_28;
  }
  uint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9)
  {
    while (1)
    {
      if (v9 < 1)
      {
        __break(1u);
        return;
      }
      id v18 = v3;
      unint64_t v10 = 0;
      id v3 = (id)(v8 & 0xC000000000000001);
      while (1)
      {
        if (v3) {
          id v13 = (id)MEMORY[0x1C8764390](v10, v8);
        }
        else {
          id v13 = *(id *)(v8 + 8 * v10 + 32);
        }
        id v14 = v13;
        self;
        uint64_t v15 = swift_dynamicCastObjCClass();
        if (!v15) {
          goto LABEL_16;
        }
        double v16 = (void *)v15;
        if (v6) {
          break;
        }
        id v11 = v14;
        id v12 = 0;
LABEL_15:
        objc_msgSend(v16, sel_setText_, v12, v18);

        objc_msgSend(v16, sel_setHidden_, v19);
LABEL_16:
        ++v10;

        if (v9 == v10) {
          goto LABEL_29;
        }
      }
      if (v5) {
        break;
      }
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      swift_bridgeObjectRetain();
      uint64_t v9 = sub_1C2A9E648();
      swift_bridgeObjectRelease();
      if (!v9) {
        goto LABEL_29;
      }
    }
    if (v10 % v5 >= *(void *)(v6 + 16)) {
      goto LABEL_27;
    }
    id v17 = v14;
    swift_bridgeObjectRetain();
    id v12 = (void *)sub_1C2A9DCF8();
    id v3 = (id)(v8 & 0xC000000000000001);
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
LABEL_29:
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

void _s19HealthVisualization29HighlightActivityCalendarViewC32wheelchairUseCharacteristicCache_0G14UsageDidChangeySo013_HKWheelchairhiJ0CSg_SbtF_0()
{
  id v1 = objc_msgSend(v0, sel_columnAtIndex_, 4);
  id v2 = objc_msgSend(v1, sel_arrangedSubviews);
  sub_1C29376D4(0, (unint64_t *)&qword_1EBB90D78);
  unint64_t v3 = sub_1C2A9DE98();

  id v44 = v1;
  if (v3 >> 62)
  {
LABEL_32:
    swift_bridgeObjectRetain();
    uint64_t v4 = sub_1C2A9E648();
    swift_bridgeObjectRelease();
    if (v4) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v4)
    {
LABEL_3:
      unint64_t v47 = v3 & 0xC000000000000001;
      uint64_t v5 = 4;
      uint64_t v45 = v4;
      unint64_t v46 = v3;
      do
      {
        if (v47) {
          id v7 = (id)MEMORY[0x1C8764390](v5 - 4, v3);
        }
        else {
          id v7 = *(id *)(v3 + 8 * v5);
        }
        unint64_t v8 = v7;
        uint64_t v9 = v5 - 3;
        if (__OFADD__(v5 - 4, 1))
        {
          __break(1u);
          goto LABEL_32;
        }
        self;
        uint64_t v10 = swift_dynamicCastObjCClass();
        if (!v10) {
          goto LABEL_6;
        }
        id v11 = (void *)v10;
        id v12 = v8;
        id v13 = objc_msgSend(v11, sel_attributedText);
        if (v13)
        {
          id v14 = v13;
          id v15 = objc_msgSend(v13, sel_string);

          sub_1C2A9DD28();
        }
        unint64_t v49 = v12;
        if (byte_1EA31EF08 == 1)
        {
          if (qword_1EBB91258 != -1) {
            swift_once();
          }
          double v16 = (void *)qword_1EBB907C8;
          sub_1C29376D4(0, (unint64_t *)&qword_1EBB90DA0);
          id v17 = v16;
          id v18 = (void *)sub_1C2A9E2D8();
          id v19 = objc_msgSend(v17, sel_objectForKey_, v18);

          if (v19) {
            goto LABEL_22;
          }
          id v20 = self;
          sub_1C2A9DD28();
          id v21 = (void *)sub_1C2A9DCF8();
          swift_bridgeObjectRelease();
          id v22 = objc_msgSend(v20, sel_hk_preferredFontForTextStyle_symbolicTraits_, v21, 2);

          id v19 = objc_msgSend(v22, sel_hk_monospacedFont);
          if ((byte_1EA31EF08 & 1) == 0) {
            goto LABEL_22;
          }
          id v23 = (id)qword_1EBB907C8;
          id v24 = (id)sub_1C2A9E2D8();
          objc_msgSend(v23, sel_setObject_forKey_, v19, v24);
        }
        else
        {
          id v25 = self;
          sub_1C2A9DD28();
          double v26 = (void *)sub_1C2A9DCF8();
          swift_bridgeObjectRelease();
          id v24 = objc_msgSend(v25, sel_hk_preferredFontForTextStyle_symbolicTraits_, v26, 2);

          id v19 = objc_msgSend(v24, sel_hk_monospacedFont);
        }

LABEL_22:
        id v27 = objc_msgSend(self, sel_configurationWithFont_, v19);
        id v28 = sub_1C2994B00();
        id v29 = objc_msgSend(v28, sel_wheelchairUseCharacteristicCache);

        if (!v29)
        {
          __break(1u);
          return;
        }
        objc_msgSend(v29, sel_isWheelchairUser);

        id v30 = objc_msgSend(self, sel_hk_activityStandGoalLineColor);
        id v31 = v27;
        int v32 = (void *)sub_1C2A9DCF8();
        swift_bridgeObjectRelease();
        id v33 = objc_msgSend(self, sel__systemImageNamed_withConfiguration_, v32, v31);

        if (v33)
        {
          id v34 = objc_msgSend(v33, sel_imageWithRenderingMode_, 2);

          id v33 = objc_msgSend(v34, sel_imageWithTintColor_, v30);
        }
        else
        {
        }
        id v35 = objc_allocWithZone(MEMORY[0x1E4F28E48]);
        swift_bridgeObjectRetain();
        double v36 = (void *)sub_1C2A9DCF8();
        swift_bridgeObjectRelease();
        id v37 = objc_msgSend(v35, sel_initWithString_, v36);

        if (v33)
        {
          uint64_t v38 = self;
          id v6 = v33;
          id v39 = objc_msgSend(v38, sel_textAttachmentWithImage_, v6);
          id v40 = objc_msgSend(self, sel_attributedStringWithAttachment_, v39);

          objc_msgSend(v37, sel_insertAttributedString_atIndex_, v40, 0);
          if (objc_msgSend(v48, sel_hk_isLeftToRight))
          {
            swift_bridgeObjectRelease();
          }
          else
          {
            id v41 = objc_allocWithZone(MEMORY[0x1E4F28B18]);
            int v42 = (void *)sub_1C2A9DCF8();
            id v43 = objc_msgSend(v41, sel_initWithString_, v42);

            objc_msgSend(v37, sel_insertAttributedString_atIndex_, v43, 0);
            swift_bridgeObjectRelease();
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          id v6 = 0;
        }
        objc_msgSend(v11, sel_setAttributedText_, v37, v44);

        uint64_t v4 = v45;
        unint64_t v3 = v46;
LABEL_6:

        ++v5;
      }
      while (v9 != v4);
    }
  }
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
}

void sub_1C2996FF4()
{
  objc_msgSend(v0, sel_bounds);
  double Width = CGRectGetWidth(v23);
  if (Width <= 270.0)
  {
    id v2 = (id *)MEMORY[0x1E4FB27C0];
    goto LABEL_11;
  }
  if (Width <= 370.0)
  {
    id v2 = (id *)MEMORY[0x1E4FB27B0];
    goto LABEL_11;
  }
  if (Width <= 385.0)
  {
    id v2 = (id *)MEMORY[0x1E4FB2798];
    goto LABEL_11;
  }
  if (Width <= 415.0)
  {
    id v2 = (id *)MEMORY[0x1E4FB2790];
    goto LABEL_11;
  }
  if (qword_1EA31DC48 != -1) {
    goto LABEL_35;
  }
  while (1)
  {
    id v2 = (id *)&qword_1EA32B5B0;
LABEL_11:
    id v20 = *v2;
    id v3 = objc_msgSend(v0, sel_traitCollection);
    id v4 = objc_msgSend(v3, sel_preferredContentSizeCategory);

    LOBYTE(v3) = sub_1C2A9E218();
    if ((v3 & 1) == 0)
    {
LABEL_17:
      id v12 = v20;
      goto LABEL_31;
    }
    uint64_t v5 = OBJC_IVAR____TtC19HealthVisualization29HighlightActivityCalendarView_currentLabelMaximumContentSizeCategory;
    uint64_t v6 = sub_1C2A9DD28();
    uint64_t v8 = v7;
    if (v6 == sub_1C2A9DD28() && v8 == v9)
    {
      id v21 = v20;

      swift_bridgeObjectRelease_n();
      id v12 = v21;
      goto LABEL_31;
    }
    char v11 = sub_1C2A9E8D8();
    id v20 = v20;

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v11) {
      goto LABEL_17;
    }
    id v13 = objc_msgSend(v0, sel_subviews);
    sub_1C29376D4(0, (unint64_t *)&qword_1EBB90D78);
    unint64_t v14 = sub_1C2A9DE98();

    if (v14 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v15 = sub_1C2A9E648();
      swift_bridgeObjectRelease();
      if (!v15) {
        goto LABEL_30;
      }
    }
    else
    {
      uint64_t v15 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (!v15) {
        goto LABEL_30;
      }
    }
    if (v15 >= 1) {
      break;
    }
    __break(1u);
LABEL_35:
    swift_once();
  }
  for (uint64_t i = 0; i != v15; ++i)
  {
    if ((v14 & 0xC000000000000001) != 0) {
      id v17 = (id)MEMORY[0x1C8764390](i, v14);
    }
    else {
      id v17 = *(id *)(v14 + 8 * i + 32);
    }
    id v18 = v17;
    self;
    id v19 = (void *)swift_dynamicCastObjCClass();
    if (v19) {
      objc_msgSend(v19, sel_setMaximumContentSizeCategory_, v20);
    }
  }
LABEL_30:
  swift_bridgeObjectRelease();
  id v12 = *(void **)&v0[v5];
  *(void *)&v0[v5] = v20;
LABEL_31:
}

id HighlightActivityCalendarView.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  id v9 = objc_allocWithZone(v4);
  return objc_msgSend(v9, sel_initWithFrame_, a1, a2, a3, a4);
}

void HighlightActivityCalendarView.init(frame:)()
{
}

id HighlightActivityCalendarView.__allocating_init(arrangedSubviewRows:)(uint64_t a1)
{
  if (a1)
  {
    sub_1C2997990();
    id v2 = (void *)sub_1C2A9DE88();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v2 = 0;
  }
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithArrangedSubviewRows_, v2);

  return v3;
}

void HighlightActivityCalendarView.init(arrangedSubviewRows:)()
{
}

id HighlightActivityCalendarView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for HighlightActivityCalendarView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void (*sub_1C29975F4(void (**a1)(id *a1), unint64_t a2, uint64_t a3))(void *a1)
{
  uint64_t v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = sub_1C29976A4(v6, a2, a3);
  return sub_1C299765C;
}

void sub_1C299765C(void *a1)
{
  id v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);
  free(v1);
}

void (*sub_1C29976A4(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  id v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    id v4 = (id)MEMORY[0x1C8764390](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    id v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(void *)id v3 = v4;
    return destroy for DiagramImageView.DiagramTransformer;
  }
  __break(1u);
  return result;
}

id sub_1C2997724()
{
  if (qword_1EBB91258 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_1EBB907C8;
  return objc_msgSend(v0, sel_removeAllObjects);
}

id sub_1C2997788(void *a1)
{
  return objc_msgSend(a1, sel_setNeedsLayout);
}

uint64_t sub_1C2997794(uint64_t a1, uint64_t a2)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = MEMORY[0x1E4FBC860];
  if (v2)
  {
    uint64_t v13 = MEMORY[0x1E4FBC860];
    sub_1C2932680(0, v2, 0);
    uint64_t v3 = v13;
    uint64_t v6 = a1 + 40;
    do
    {
      swift_bridgeObjectRetain();
      uint64_t v7 = (void *)sub_1C2A9DCF8();
      objc_msgSend(v7, sel_hk_boundingWidthWithHeight_font_, a2, 1.79769313e308);
      uint64_t v9 = v8;
      swift_bridgeObjectRelease();

      unint64_t v11 = *(void *)(v13 + 16);
      unint64_t v10 = *(void *)(v13 + 24);
      if (v11 >= v10 >> 1) {
        sub_1C2932680(v10 > 1, v11 + 1, 1);
      }
      v6 += 16;
      *(void *)(v13 + 16) = v11 + 1;
      *(void *)(v13 + 8 * v11 + 32) = v9;
      --v2;
    }
    while (v2);
  }
  return v3;
}

void _s19HealthVisualization29HighlightActivityCalendarViewC5coderACSgSo7NSCoderC_tcfc_0()
{
  v0[OBJC_IVAR____TtC19HealthVisualization29HighlightActivityCalendarView_currentWeekdayStringLength] = 0;
  id v1 = (void *)*MEMORY[0x1E4FB27F0];
  *(void *)&v0[OBJC_IVAR____TtC19HealthVisualization29HighlightActivityCalendarView_currentLabelMaximumContentSizeCategory] = *MEMORY[0x1E4FB27F0];
  *(void *)&v0[OBJC_IVAR____TtC19HealthVisualization29HighlightActivityCalendarView____lazy_storage___ringsRenderer] = 0;
  *(void *)&v0[OBJC_IVAR____TtC19HealthVisualization29HighlightActivityCalendarView____lazy_storage___unitPreferenceController] = 0;
  *(void *)&v0[OBJC_IVAR____TtC19HealthVisualization29HighlightActivityCalendarView____lazy_storage___displayTypeController] = 0;
  id v2 = v1;

  sub_1C2A9E628();
  __break(1u);
}

uint64_t type metadata accessor for HighlightActivityCalendarView()
{
  return self;
}

void sub_1C2997990()
{
  if (!qword_1EA31E440)
  {
    sub_1C29376D4(255, (unint64_t *)&qword_1EBB90D78);
    unint64_t v0 = sub_1C2A9DEF8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EA31E440);
    }
  }
}

uint64_t method lookup function for HighlightActivityCalendarView(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for HighlightActivityCalendarView);
}

uint64_t dispatch thunk of HighlightActivityCalendarView.__allocating_init(model:healthStore:)()
{
  return (*(uint64_t (**)(void))(v0 + 264))();
}

unsigned char *storeEnumTagSinglePayload for HighlightActivityCalendarView.WeekdayStringLength(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *id result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C2997AF0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *id result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HighlightActivityCalendarView.WeekdayStringLength()
{
  return &type metadata for HighlightActivityCalendarView.WeekdayStringLength;
}

unint64_t sub_1C2997B2C()
{
  unint64_t result = qword_1EA31E4A8;
  if (!qword_1EA31E4A8)
  {
    sub_1C2998324(255, &qword_1EA31E4B0, (uint64_t)&type metadata for HighlightActivityCalendarView.WeekdayStringLength, MEMORY[0x1E4FBB320]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA31E4A8);
  }
  return result;
}

unint64_t sub_1C2997BAC()
{
  unint64_t result = qword_1EA31E4B8;
  if (!qword_1EA31E4B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA31E4B8);
  }
  return result;
}

id sub_1C2997C00()
{
  id v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1930]), sel_init);
  objc_msgSend(v0, sel_setAdjustsFontForContentSizeCategory_, 1);
  uint64_t v1 = qword_1EA31DC48;
  id v2 = v0;
  if (v1 != -1) {
    swift_once();
  }
  objc_msgSend(v2, sel_setMaximumContentSizeCategory_, qword_1EA32B5B0);

  type metadata accessor for UILayoutPriority(0);
  sub_1C2998268();
  sub_1C2A9CFF8();
  LODWORD(v3) = v15;
  objc_msgSend(v2, sel_setContentHuggingPriority_forAxis_, 0, v3);
  if (byte_1EA31EF08 != 1)
  {
    id v12 = self;
    sub_1C2A9DD28();
    unint64_t v11 = (void *)sub_1C2A9DCF8();
    swift_bridgeObjectRelease();
    id v7 = objc_msgSend(v12, sel_hk_preferredFontForTextStyle_symbolicTraits_, v11, 2);
    goto LABEL_10;
  }
  if (qword_1EBB91258 != -1) {
    swift_once();
  }
  unsigned int v4 = (void *)qword_1EBB907C8;
  sub_1C29376D4(0, (unint64_t *)&qword_1EBB90DA0);
  id v5 = v4;
  unsigned int v6 = (void *)sub_1C2A9E2D8();
  id v7 = objc_msgSend(v5, sel_objectForKey_, v6);

  if (!v7)
  {
    uint64_t v8 = self;
    sub_1C2A9DD28();
    uint64_t v9 = (void *)sub_1C2A9DCF8();
    swift_bridgeObjectRelease();
    id v7 = objc_msgSend(v8, sel_hk_preferredFontForTextStyle_symbolicTraits_, v9, 2);

    if (byte_1EA31EF08)
    {
      id v10 = (id)qword_1EBB907C8;
      unint64_t v11 = (void *)sub_1C2A9E2D8();
      objc_msgSend(v10, sel_setObject_forKey_, v7, v11);

LABEL_10:
    }
  }
  objc_msgSend(v2, sel_setFont_, v7);

  id v13 = objc_msgSend(self, sel_secondaryLabelColor);
  objc_msgSend(v2, sel_setTextColor_, v13);

  return v2;
}

id sub_1C2997F14()
{
  id v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1930]), sel_init);
  objc_msgSend(v0, sel_setAdjustsFontForContentSizeCategory_, 1);
  uint64_t v1 = qword_1EA31DC48;
  id v2 = v0;
  if (v1 != -1) {
    swift_once();
  }
  objc_msgSend(v2, sel_setMaximumContentSizeCategory_, qword_1EA32B5B0);

  type metadata accessor for UILayoutPriority(0);
  sub_1C2998268();
  sub_1C2A9CFF8();
  LODWORD(v3) = v17;
  objc_msgSend(v2, sel_setContentCompressionResistancePriority_forAxis_, 0, v3);
  if (byte_1EA31EF08 != 1)
  {
    id v13 = self;
    sub_1C2A9DD28();
    unint64_t v14 = (void *)sub_1C2A9DCF8();
    swift_bridgeObjectRelease();
    id v12 = objc_msgSend(v13, sel_hk_preferredFontForTextStyle_symbolicTraits_, v14, 2);

    id v7 = objc_msgSend(v12, sel_hk_monospacedFont);
    goto LABEL_10;
  }
  if (qword_1EBB91258 != -1) {
    swift_once();
  }
  unsigned int v4 = (void *)qword_1EBB907C8;
  sub_1C29376D4(0, (unint64_t *)&qword_1EBB90DA0);
  id v5 = v4;
  unsigned int v6 = (void *)sub_1C2A9E2D8();
  id v7 = objc_msgSend(v5, sel_objectForKey_, v6);

  if (!v7)
  {
    uint64_t v8 = self;
    sub_1C2A9DD28();
    uint64_t v9 = (void *)sub_1C2A9DCF8();
    swift_bridgeObjectRelease();
    id v10 = objc_msgSend(v8, sel_hk_preferredFontForTextStyle_symbolicTraits_, v9, 2);

    id v7 = objc_msgSend(v10, sel_hk_monospacedFont);
    if (byte_1EA31EF08)
    {
      id v11 = (id)qword_1EBB907C8;
      id v12 = (id)sub_1C2A9E2D8();
      objc_msgSend(v11, sel_setObject_forKey_, v7, v12);

LABEL_10:
    }
  }
  objc_msgSend(v2, sel_setFont_, v7);

  id v15 = objc_msgSend(self, sel_secondaryLabelColor);
  objc_msgSend(v2, sel_setTextColor_, v15);

  return v2;
}

unint64_t sub_1C2998268()
{
  unint64_t result = qword_1EBB90D60;
  if (!qword_1EBB90D60)
  {
    type metadata accessor for UILayoutPriority(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB90D60);
  }
  return result;
}

uint64_t sub_1C29982C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for HighlightCalendarDayViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1C2998324(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t sub_1C2998370(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for HighlightCalendarDayViewModel(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id sub_1C29983CC(id result, id a2, uint64_t a3, char a4)
{
  switch(a4)
  {
    case 0:
      unint64_t result = result;
      break;
    case 1:
    case 2:
    case 3:
    case 4:
      unint64_t result = (id)swift_bridgeObjectRetain();
      break;
    default:
      return result;
  }
  return result;
}

void sub_1C2998420(void *a1, id a2, uint64_t a3, char a4)
{
  switch(a4)
  {
    case 0:

      break;
    case 1:
    case 2:
    case 3:
    case 4:
      swift_bridgeObjectRelease();
      break;
    default:
      return;
  }
}

void sub_1C2998474()
{
  if (!qword_1EA31E4C0)
  {
    sub_1C29984CC();
    unint64_t v0 = sub_1C2A9E8A8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EA31E4C0);
    }
  }
}

unint64_t sub_1C29984CC()
{
  unint64_t result = qword_1EA31E4C8;
  if (!qword_1EA31E4C8)
  {
    sub_1C2998508();
    unint64_t result = swift_getExistentialMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EA31E4C8);
  }
  return result;
}

unint64_t sub_1C2998508()
{
  unint64_t result = qword_1EA31E4D0;
  if (!qword_1EA31E4D0)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EA31E4D0);
  }
  return result;
}

uint64_t static EmptyQueryConfiguration.== infix(_:_:)()
{
  return 1;
}

uint64_t sub_1C299856C()
{
  return 0;
}

uint64_t sub_1C2998578@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = 1;
  return result;
}

uint64_t sub_1C29985A8(uint64_t a1)
{
  unint64_t v2 = sub_1C2998788();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1C29985E4(uint64_t a1)
{
  unint64_t v2 = sub_1C2998788();
  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t EmptyQueryConfiguration.encode(to:)(void *a1)
{
  sub_1C299872C();
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1C2998788();
  sub_1C2A9EA18();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

void sub_1C299872C()
{
  if (!qword_1EBB8F968)
  {
    sub_1C2998788();
    unint64_t v0 = sub_1C2A9E878();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EBB8F968);
    }
  }
}

unint64_t sub_1C2998788()
{
  unint64_t result = qword_1EBB8EBB0;
  if (!qword_1EBB8EBB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB8EBB0);
  }
  return result;
}

uint64_t EmptyQueryConfiguration.init(from:)(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t sub_1C2998804(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t sub_1C299882C(void *a1)
{
  sub_1C299872C();
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1C2998788();
  sub_1C2A9EA18();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

ValueMetadata *type metadata accessor for EmptyQueryConfiguration()
{
  return &type metadata for EmptyQueryConfiguration;
}

ValueMetadata *type metadata accessor for EmptyQueryConfiguration.CodingKeys()
{
  return &type metadata for EmptyQueryConfiguration.CodingKeys;
}

unint64_t sub_1C299895C()
{
  unint64_t result = qword_1EBB8E390;
  if (!qword_1EBB8E390)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB8E390);
  }
  return result;
}

unint64_t sub_1C29989B4()
{
  unint64_t result = qword_1EBB8EBB8;
  if (!qword_1EBB8EBB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB8EBB8);
  }
  return result;
}

uint64_t sub_1C2998A08()
{
  return -1;
}

uint64_t QueryQualityOfServiceProviding.queryQualityOfService.getter()
{
  return -1;
}

uint64_t dispatch thunk of QueryQualityOfServiceProviding.queryQualityOfService.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t ResultProducingError.hash(into:)()
{
  return sub_1C2A9E9C8();
}

uint64_t ResultProducingError.hashValue.getter()
{
  return sub_1C2A9E9E8();
}

BOOL static ResultProducingError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

unint64_t sub_1C2998AC8()
{
  unint64_t result = qword_1EA31E4D8;
  if (!qword_1EA31E4D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA31E4D8);
  }
  return result;
}

uint64_t dispatch thunk of ResultProducing.result.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

unsigned char *storeEnumTagSinglePayload for ResultProducingError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C2998BFCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ResultProducingError()
{
  return &type metadata for ResultProducingError;
}

void sub_1C2998C34()
{
  id v0 = objc_msgSend(self, sel_percentUnit);
  id v1 = objc_msgSend(v0, sel_unitString);

  uint64_t v2 = sub_1C2A9DD28();
  uint64_t v4 = v3;

  qword_1EA32B5B8 = v2;
  unk_1EA32B5C0 = v4;
}

unint64_t static AFibBurdenDistributionAnalysis.Constants.valueClampedToken.getter()
{
  return 0xD00000000000002BLL;
}

uint64_t AFibBurdenDistributionAnalysis.Result.timeOfDay.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C2998CE0(v1, a1);
}

uint64_t sub_1C2998CE0(uint64_t a1, uint64_t a2)
{
  sub_1C2998D44();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1C2998D44()
{
  if (!qword_1EA31E4E0)
  {
    type metadata accessor for TimeBasedDistribution();
    unint64_t v0 = sub_1C2A9E328();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EA31E4E0);
    }
  }
}

uint64_t AFibBurdenDistributionAnalysis.Result.dayOfWeek.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for AFibBurdenDistributionAnalysis.Result() + 20);
  return sub_1C2998CE0(v3, a1);
}

uint64_t type metadata accessor for AFibBurdenDistributionAnalysis.Result()
{
  uint64_t result = qword_1EA31E4E8;
  if (!qword_1EA31E4E8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t AFibBurdenDistributionAnalysis.Result.init(timeOfDay:dayOfWeek:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_1C2998E7C(a1, a3);
  uint64_t v5 = a3 + *(int *)(type metadata accessor for AFibBurdenDistributionAnalysis.Result() + 20);
  return sub_1C2998E7C(a2, v5);
}

uint64_t sub_1C2998E7C(uint64_t a1, uint64_t a2)
{
  sub_1C2998D44();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t static AFibBurdenDistributionAnalysis.processHistogramResult@Sendable (histogramResult:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v212 = a2;
  uint64_t v3 = sub_1C2A9C858();
  uint64_t v214 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v211 = &v205[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v5);
  v213 = &v205[-v6];
  sub_1C2998D44();
  MEMORY[0x1F4188790](v7 - 8);
  v210 = &v205[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1C293BDFC(0, (unint64_t *)&qword_1EBB91978);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C2AA8E10;
  id v10 = objc_msgSend(a1, sel_dayOfWeekHistogram);
  id v11 = objc_msgSend(v10, sel_mondayBurden);

  *(void *)(inited + 32) = v11;
  id v12 = objc_msgSend(a1, sel_dayOfWeekHistogram);
  id v13 = objc_msgSend(v12, sel_tuesdayBurden);

  *(void *)(inited + 40) = v13;
  id v14 = objc_msgSend(a1, sel_dayOfWeekHistogram);
  id v15 = objc_msgSend(v14, sel_wednesdayBurden);

  *(void *)(inited + 48) = v15;
  id v16 = objc_msgSend(a1, sel_dayOfWeekHistogram);
  id v17 = objc_msgSend(v16, sel_thursdayBurden);

  *(void *)(inited + 56) = v17;
  id v18 = objc_msgSend(a1, sel_dayOfWeekHistogram);
  id v19 = objc_msgSend(v18, sel_fridayBurden);

  *(void *)(inited + 64) = v19;
  id v20 = objc_msgSend(a1, sel_dayOfWeekHistogram);
  id v21 = objc_msgSend(v20, sel_saturdayBurden);

  *(void *)(inited + 72) = v21;
  id v22 = objc_msgSend(a1, sel_dayOfWeekHistogram);
  id v23 = objc_msgSend(v22, sel_sundayBurden);

  *(void *)(inited + 80) = v23;
  unint64_t v217 = inited;
  sub_1C2A9DEA8();
  uint64_t v24 = sub_1C299AB24(v217);
  uint64_t v26 = v25;
  LOBYTE(v22) = v27;
  swift_bridgeObjectRelease();
  char v28 = v22 & 1;
  uint64_t v29 = swift_initStackObject();
  *(_OWORD *)(v29 + 16) = xmmword_1C2AA8E20;
  id v30 = objc_msgSend(a1, sel_timeOfDayHistogram);
  id v31 = objc_msgSend(v30, sel_midnightToFourAMBurden);

  *(void *)(v29 + 32) = v31;
  id v32 = objc_msgSend(a1, sel_timeOfDayHistogram);
  id v33 = objc_msgSend(v32, sel_fourAMtoEightAMBurden);

  *(void *)(v29 + 40) = v33;
  id v34 = objc_msgSend(a1, sel_timeOfDayHistogram);
  id v35 = objc_msgSend(v34, sel_eightAMToNoonBurden);

  *(void *)(v29 + 48) = v35;
  id v36 = objc_msgSend(a1, sel_timeOfDayHistogram);
  id v37 = objc_msgSend(v36, sel_noonToFourPMBurden);

  *(void *)(v29 + 56) = v37;
  id v38 = objc_msgSend(a1, sel_timeOfDayHistogram);
  id v39 = objc_msgSend(v38, sel_fourPMToEightPMBurden);

  *(void *)(v29 + 64) = v39;
  id v40 = objc_msgSend(a1, sel_timeOfDayHistogram);
  id v41 = objc_msgSend(v40, sel_eightPMToMidnightBurden);

  *(void *)(v29 + 72) = v41;
  unint64_t v217 = v29;
  sub_1C2A9DEA8();
  uint64_t v216 = sub_1C299AB24(v217);
  uint64_t v215 = v42;
  int v206 = v43;
  swift_bridgeObjectRelease();
  if (qword_1EA31DCB0 != -1) {
    swift_once();
  }
  uint64_t v44 = __swift_project_value_buffer(v3, (uint64_t)qword_1EA31ECC8);
  uint64_t v46 = v214 + 16;
  uint64_t v45 = *(void (**)(uint64_t, uint64_t, uint64_t))(v214 + 16);
  uint64_t v209 = v3;
  uint64_t v208 = v45;
  v45((uint64_t)v213, v44, v3);
  sub_1C293BDFC(0, &qword_1EA31E1D8);
  uint64_t v207 = v47;
  uint64_t v48 = swift_allocObject();
  *(_OWORD *)(v48 + 16) = xmmword_1C2AA8E30;
  id v49 = objc_msgSend(a1, sel_dayOfWeekHistogram);
  id v50 = objc_msgSend(v49, sel_sundayBurden);

  id v51 = objc_msgSend(v50, sel_burdenPercentage);
  uint64_t v52 = v51;
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  if (v51)
  {
    objc_msgSend(v51, sel_doubleValue);
    uint64_t v54 = v55;
  }
  BOOL v56 = v52 == 0;
  sub_1C299AEE0(v50, v24, v26, v28);
  char v58 = v57;
  unsigned int v59 = objc_msgSend(v50, sel_burdenPercentageWasClampedToLowerBound);

  uint64_t v60 = (void *)MEMORY[0x1E4FBC860];
  if (v59) {
    uint64_t v60 = &unk_1F1DEA1F0;
  }
  *(_OWORD *)(v48 + 32) = xmmword_1C2AA8E40;
  *(void *)(v48 + 48) = v54;
  *(unsigned char *)(v48 + 56) = v56;
  *(unsigned char *)(v48 + 57) = v58 & 1;
  *(void *)(v48 + 64) = v60;
  id v61 = objc_msgSend(a1, sel_dayOfWeekHistogram);
  id v62 = objc_msgSend(v61, sel_mondayBurden);

  id v63 = objc_msgSend(v62, sel_burdenPercentage);
  uint64_t v64 = v63;
  if (v63)
  {
    objc_msgSend(v63, sel_doubleValue);
    uint64_t v53 = v65;
  }
  BOOL v66 = v64 == 0;
  sub_1C299AEE0(v62, v24, v26, v28);
  char v68 = v67;
  unsigned int v69 = objc_msgSend(v62, sel_burdenPercentageWasClampedToLowerBound);

  uint64_t v70 = (void *)MEMORY[0x1E4FBC860];
  if (v69) {
    uint64_t v70 = &unk_1F1DEA1F0;
  }
  *(_OWORD *)(v48 + 72) = xmmword_1C2AA6B00;
  *(void *)(v48 + 88) = v53;
  *(unsigned char *)(v48 + 96) = v66;
  *(unsigned char *)(v48 + 97) = v68 & 1;
  *(void *)(v48 + 104) = v70;
  id v71 = objc_msgSend(a1, sel_dayOfWeekHistogram);
  id v72 = objc_msgSend(v71, sel_tuesdayBurden);

  id v73 = objc_msgSend(v72, sel_burdenPercentage);
  uint64_t v74 = v73;
  uint64_t v75 = 0;
  uint64_t v76 = 0;
  if (v73)
  {
    objc_msgSend(v73, sel_doubleValue);
    uint64_t v76 = v77;
  }
  BOOL v78 = v74 == 0;
  sub_1C299AEE0(v72, v24, v26, v28);
  char v80 = v79;
  unsigned int v81 = objc_msgSend(v72, sel_burdenPercentageWasClampedToLowerBound);

  uint64_t v82 = (void *)MEMORY[0x1E4FBC860];
  if (v81) {
    uint64_t v82 = &unk_1F1DEA1F0;
  }
  *(_OWORD *)(v48 + 112) = xmmword_1C2AA8E50;
  *(void *)(v48 + 128) = v76;
  *(unsigned char *)(v48 + 136) = v78;
  *(unsigned char *)(v48 + 137) = v80 & 1;
  *(void *)(v48 + 144) = v82;
  id v83 = objc_msgSend(a1, sel_dayOfWeekHistogram);
  id v84 = objc_msgSend(v83, sel_wednesdayBurden);

  id v85 = objc_msgSend(v84, sel_burdenPercentage);
  uint64_t v86 = v85;
  if (v85)
  {
    objc_msgSend(v85, sel_doubleValue);
    uint64_t v75 = v87;
  }
  uint64_t v214 = v46;
  BOOL v88 = v86 == 0;
  sub_1C299AEE0(v84, v24, v26, v28);
  char v90 = v89;
  unsigned int v91 = objc_msgSend(v84, sel_burdenPercentageWasClampedToLowerBound);

  uint64_t v92 = (void *)MEMORY[0x1E4FBC860];
  if (v91) {
    uint64_t v92 = &unk_1F1DEA1F0;
  }
  *(_OWORD *)(v48 + 152) = xmmword_1C2AA8E60;
  *(void *)(v48 + 168) = v75;
  *(unsigned char *)(v48 + 176) = v88;
  *(unsigned char *)(v48 + 177) = v90 & 1;
  *(void *)(v48 + 184) = v92;
  id v93 = objc_msgSend(a1, sel_dayOfWeekHistogram);
  id v94 = objc_msgSend(v93, sel_thursdayBurden);

  id v95 = objc_msgSend(v94, sel_burdenPercentage);
  unint64_t v96 = v95;
  uint64_t v97 = 0;
  uint64_t v98 = 0;
  if (v95)
  {
    objc_msgSend(v95, sel_doubleValue);
    uint64_t v98 = v99;
  }
  BOOL v100 = v96 == 0;
  sub_1C299AEE0(v94, v24, v26, v28);
  char v102 = v101;
  unsigned int v103 = objc_msgSend(v94, sel_burdenPercentageWasClampedToLowerBound);

  long long v104 = (void *)MEMORY[0x1E4FBC860];
  if (v103) {
    long long v104 = &unk_1F1DEA1F0;
  }
  *(_OWORD *)(v48 + 192) = xmmword_1C2AA8E70;
  *(void *)(v48 + 208) = v98;
  *(unsigned char *)(v48 + 216) = v100;
  *(unsigned char *)(v48 + 217) = v102 & 1;
  *(void *)(v48 + 224) = v104;
  id v105 = objc_msgSend(a1, sel_dayOfWeekHistogram);
  id v106 = objc_msgSend(v105, sel_fridayBurden);

  id v107 = objc_msgSend(v106, sel_burdenPercentage);
  uint64_t v108 = v107;
  if (v107)
  {
    objc_msgSend(v107, sel_doubleValue);
    uint64_t v97 = v109;
  }
  BOOL v110 = v108 == 0;
  sub_1C299AEE0(v106, v24, v26, v28);
  char v112 = v111;
  unsigned int v113 = objc_msgSend(v106, sel_burdenPercentageWasClampedToLowerBound);

  uint64_t v114 = (void *)MEMORY[0x1E4FBC860];
  if (v113) {
    uint64_t v114 = &unk_1F1DEA1F0;
  }
  *(_OWORD *)(v48 + 232) = xmmword_1C2AA8E80;
  *(void *)(v48 + 248) = v97;
  *(unsigned char *)(v48 + 256) = v110;
  *(unsigned char *)(v48 + 257) = v112 & 1;
  *(void *)(v48 + 264) = v114;
  id v115 = objc_msgSend(a1, sel_dayOfWeekHistogram);
  id v116 = objc_msgSend(v115, sel_saturdayBurden);

  id v117 = objc_msgSend(v116, sel_burdenPercentage);
  uint64_t v118 = v117;
  if (v117)
  {
    objc_msgSend(v117, sel_doubleValue);
    uint64_t v120 = v119;
  }
  else
  {
    uint64_t v120 = 0;
  }
  BOOL v121 = v118 == 0;
  sub_1C299AEE0(v116, v24, v26, v28);
  char v123 = v122;
  unsigned int v124 = objc_msgSend(v116, sel_burdenPercentageWasClampedToLowerBound);

  long long v125 = (void *)MEMORY[0x1E4FBC860];
  if (v124) {
    long long v125 = &unk_1F1DEA1F0;
  }
  *(_OWORD *)(v48 + 272) = xmmword_1C2AA8E90;
  *(void *)(v48 + 288) = v120;
  *(unsigned char *)(v48 + 296) = v121;
  *(unsigned char *)(v48 + 297) = v123 & 1;
  *(void *)(v48 + 304) = v125;
  if (qword_1EA31DC50 != -1) {
    swift_once();
  }
  char v126 = v206 & 1;
  uint64_t v127 = qword_1EA32B5B8;
  uint64_t v128 = unk_1EA32B5C0;
  swift_bridgeObjectRetain();
  uint64_t v129 = v210;
  TimeBasedDistribution.init(component:buckets:unitString:minimumComponentInterval:maximumComponentInterval:)((uint64_t)v213, v48, v127, v128, 0, 7, (uint64_t)v210);
  uint64_t v130 = (uint64_t)v211;
  uint64_t v131 = v209;
  if (qword_1EA31DCA8 != -1) {
    swift_once();
  }
  uint64_t v132 = __swift_project_value_buffer(v131, (uint64_t)qword_1EA31ECB0);
  v208(v130, v132, v131);
  uint64_t v133 = swift_allocObject();
  *(_OWORD *)(v133 + 16) = xmmword_1C2AA8EA0;
  id v134 = objc_msgSend(a1, sel_timeOfDayHistogram);
  id v135 = objc_msgSend(v134, sel_midnightToFourAMBurden);

  id v136 = objc_msgSend(v135, sel_burdenPercentage);
  uint64_t v137 = v136;
  uint64_t v138 = 0;
  uint64_t v139 = 0;
  if (v136)
  {
    objc_msgSend(v136, sel_doubleValue);
    uint64_t v139 = v140;
  }
  BOOL v141 = v137 == 0;
  sub_1C299AEE0(v135, v216, v215, v126);
  char v143 = v142;
  unsigned int v144 = objc_msgSend(v135, sel_burdenPercentageWasClampedToLowerBound);

  uint64_t v145 = (void *)MEMORY[0x1E4FBC860];
  if (v144) {
    uint64_t v145 = &unk_1F1DEA1F0;
  }
  *(_OWORD *)(v133 + 32) = xmmword_1C2AA8EB0;
  *(void *)(v133 + 48) = v139;
  *(unsigned char *)(v133 + 56) = v141;
  *(unsigned char *)(v133 + 57) = v143 & 1;
  *(void *)(v133 + 64) = v145;
  id v146 = objc_msgSend(a1, sel_timeOfDayHistogram);
  id v147 = objc_msgSend(v146, sel_fourAMtoEightAMBurden);

  id v148 = objc_msgSend(v147, sel_burdenPercentage);
  v149 = v148;
  if (v148)
  {
    objc_msgSend(v148, sel_doubleValue);
    uint64_t v138 = v150;
  }
  BOOL v151 = v149 == 0;
  sub_1C299AEE0(v147, v216, v215, v126);
  char v153 = v152;
  unsigned int v154 = objc_msgSend(v147, sel_burdenPercentageWasClampedToLowerBound);

  uint64_t v155 = (void *)MEMORY[0x1E4FBC860];
  if (v154) {
    uint64_t v155 = &unk_1F1DEA1F0;
  }
  *(_OWORD *)(v133 + 72) = xmmword_1C2AA8EC0;
  *(void *)(v133 + 88) = v138;
  *(unsigned char *)(v133 + 96) = v151;
  *(unsigned char *)(v133 + 97) = v153 & 1;
  *(void *)(v133 + 104) = v155;
  id v156 = objc_msgSend(a1, sel_timeOfDayHistogram);
  id v157 = objc_msgSend(v156, sel_eightAMToNoonBurden);

  id v158 = objc_msgSend(v157, sel_burdenPercentage);
  v159 = v158;
  uint64_t v160 = 0;
  uint64_t v161 = 0;
  if (v158)
  {
    objc_msgSend(v158, sel_doubleValue);
    uint64_t v161 = v162;
  }
  BOOL v163 = v159 == 0;
  sub_1C299AEE0(v157, v216, v215, v126);
  char v165 = v164;
  unsigned int v166 = objc_msgSend(v157, sel_burdenPercentageWasClampedToLowerBound);

  uint64_t v167 = (void *)MEMORY[0x1E4FBC860];
  if (v166) {
    uint64_t v167 = &unk_1F1DEA1F0;
  }
  *(_OWORD *)(v133 + 112) = xmmword_1C2AA8ED0;
  *(void *)(v133 + 128) = v161;
  *(unsigned char *)(v133 + 136) = v163;
  *(unsigned char *)(v133 + 137) = v165 & 1;
  *(void *)(v133 + 144) = v167;
  id v168 = objc_msgSend(a1, sel_timeOfDayHistogram);
  id v169 = objc_msgSend(v168, sel_noonToFourPMBurden);

  id v170 = objc_msgSend(v169, sel_burdenPercentage);
  uint64_t v171 = v170;
  if (v170)
  {
    objc_msgSend(v170, sel_doubleValue);
    uint64_t v160 = v172;
  }
  BOOL v173 = v171 == 0;
  sub_1C299AEE0(v169, v216, v215, v126);
  char v175 = v174;
  unsigned int v176 = objc_msgSend(v169, sel_burdenPercentageWasClampedToLowerBound);

  v177 = (void *)MEMORY[0x1E4FBC860];
  if (v176) {
    v177 = &unk_1F1DEA1F0;
  }
  *(_OWORD *)(v133 + 152) = xmmword_1C2AA8EE0;
  *(void *)(v133 + 168) = v160;
  *(unsigned char *)(v133 + 176) = v173;
  *(unsigned char *)(v133 + 177) = v175 & 1;
  *(void *)(v133 + 184) = v177;
  id v178 = objc_msgSend(a1, sel_timeOfDayHistogram);
  id v179 = objc_msgSend(v178, sel_fourPMToEightPMBurden);

  id v180 = objc_msgSend(v179, sel_burdenPercentage);
  v181 = v180;
  uint64_t v182 = 0;
  uint64_t v183 = 0;
  if (v180)
  {
    objc_msgSend(v180, sel_doubleValue);
    uint64_t v183 = v184;
  }
  BOOL v185 = v181 == 0;
  sub_1C299AEE0(v179, v216, v215, v126);
  char v187 = v186;
  unsigned int v188 = objc_msgSend(v179, sel_burdenPercentageWasClampedToLowerBound);

  int v189 = (void *)MEMORY[0x1E4FBC860];
  if (v188) {
    int v189 = &unk_1F1DEA1F0;
  }
  *(_OWORD *)(v133 + 192) = xmmword_1C2AA8EF0;
  *(void *)(v133 + 208) = v183;
  *(unsigned char *)(v133 + 216) = v185;
  *(unsigned char *)(v133 + 217) = v187 & 1;
  *(void *)(v133 + 224) = v189;
  id v190 = objc_msgSend(a1, sel_timeOfDayHistogram);
  id v191 = objc_msgSend(v190, sel_eightPMToMidnightBurden);

  id v192 = objc_msgSend(v191, sel_burdenPercentage);
  uint64_t v193 = v192;
  if (v192)
  {
    objc_msgSend(v192, sel_doubleValue);
    uint64_t v182 = v194;
  }
  BOOL v195 = v193 == 0;
  sub_1C299AEE0(v191, v216, v215, v126);
  char v197 = v196;
  unsigned int v198 = objc_msgSend(v191, sel_burdenPercentageWasClampedToLowerBound);

  v199 = (void *)MEMORY[0x1E4FBC860];
  if (v198) {
    v199 = &unk_1F1DEA1F0;
  }
  *(_OWORD *)(v133 + 232) = xmmword_1C2AA8F00;
  *(void *)(v133 + 248) = v182;
  *(unsigned char *)(v133 + 256) = v195;
  *(unsigned char *)(v133 + 257) = v197 & 1;
  *(void *)(v133 + 264) = v199;
  uint64_t v200 = qword_1EA32B5B8;
  uint64_t v201 = unk_1EA32B5C0;
  swift_bridgeObjectRetain();
  uint64_t v202 = v212;
  TimeBasedDistribution.init(component:buckets:unitString:minimumComponentInterval:maximumComponentInterval:)(v130, v133, v200, v201, 0, 24, v212);
  uint64_t v203 = type metadata accessor for AFibBurdenDistributionAnalysis.Result();
  return sub_1C2998E7C((uint64_t)v129, v202 + *(int *)(v203 + 20));
}

uint64_t sub_1C299A1B4(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_1C2A07404(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  uint64_t result = sub_1C299A220(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_1C299A220(void *a1)
{
  uint64_t v2 = a1;
  uint64_t v3 = a1[1];
  uint64_t result = sub_1C2A9E888();
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_136;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v80 = 0;
      uint64_t v81 = *v2;
      for (uint64_t i = 1; i != v3; ++i)
      {
        double v83 = *(double *)(v81 + 8 * i);
        uint64_t v84 = v80;
        do
        {
          uint64_t v85 = v81 + 8 * v84;
          if (v83 >= *(double *)v85) {
            break;
          }
          if (!v81) {
            goto LABEL_140;
          }
          *(void *)(v85 + 8) = *(void *)v85;
          *(double *)(v81 + 8 * v84--) = v83;
        }
        while (v84 != -1);
        ++v80;
      }
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_145;
  }
  uint64_t v97 = result;
  uint64_t v98 = v3;
  if (v3 < 2)
  {
    uint64_t v8 = MEMORY[0x1E4FBC860];
    __dst = (double *)(MEMORY[0x1E4FBC860] + 32);
    if (v3 != 1)
    {
      unint64_t v12 = *(void *)(MEMORY[0x1E4FBC860] + 16);
      id v11 = (char *)MEMORY[0x1E4FBC860];
LABEL_102:
      uint64_t v96 = v8;
      if (v12 >= 2)
      {
        uint64_t v86 = *v2;
        do
        {
          unint64_t v87 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_131;
          }
          if (!v86) {
            goto LABEL_144;
          }
          BOOL v88 = v11;
          char v89 = v11 + 32;
          uint64_t v90 = *(void *)&v11[16 * v87 + 32];
          uint64_t v91 = *(void *)&v11[16 * v12 + 24];
          sub_1C299A8B4((double *)(v86 + 8 * v90), (double *)(v86 + 8 * *(void *)&v89[16 * v12 - 16]), v86 + 8 * v91, __dst);
          if (v1) {
            break;
          }
          if (v91 < v90) {
            goto LABEL_132;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            BOOL v88 = sub_1C2A073DC((uint64_t)v88);
          }
          if (v87 >= *((void *)v88 + 2)) {
            goto LABEL_133;
          }
          uint64_t v92 = &v88[16 * v87 + 32];
          *(void *)uint64_t v92 = v90;
          *((void *)v92 + 1) = v91;
          unint64_t v93 = *((void *)v88 + 2);
          if (v12 > v93) {
            goto LABEL_134;
          }
          memmove(&v88[16 * v12 + 16], &v88[16 * v12 + 32], 16 * (v93 - v12));
          id v11 = v88;
          *((void *)v88 + 2) = v93 - 1;
          unint64_t v12 = v93 - 1;
        }
        while (v93 > 2);
      }
LABEL_113:
      swift_bridgeObjectRelease();
      *(void *)(v96 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v96 = MEMORY[0x1E4FBC860];
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    uint64_t v7 = sub_1C2A9DED8();
    *(void *)(v7 + 16) = v6;
    uint64_t v3 = v98;
    uint64_t v96 = v7;
    __dst = (double *)(v7 + 32);
  }
  uint64_t v9 = 0;
  uint64_t v10 = *v2;
  id v94 = v2;
  uint64_t v95 = *v2 - 8;
  id v11 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v99 = *v2;
  while (1)
  {
    uint64_t v13 = v9++;
    if (v9 < v3)
    {
      double v14 = *(double *)(v10 + 8 * v9);
      double v15 = *(double *)(v10 + 8 * v13);
      uint64_t v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        double v16 = v14;
        while (1)
        {
          double v17 = v16;
          double v16 = *(double *)(v10 + 8 * v9);
          if (v14 < v15 == v16 >= v17) {
            break;
          }
          if (v3 == ++v9)
          {
            uint64_t v9 = v3;
            break;
          }
        }
      }
      if (v14 < v15)
      {
        if (v9 < v13) {
          goto LABEL_137;
        }
        if (v13 < v9)
        {
          id v18 = (uint64_t *)(v95 + 8 * v9);
          uint64_t v19 = v9;
          uint64_t v20 = v13;
          id v21 = (uint64_t *)(v10 + 8 * v13);
          do
          {
            if (v20 != --v19)
            {
              if (!v10) {
                goto LABEL_143;
              }
              uint64_t v22 = *v21;
              *id v21 = *v18;
              *id v18 = v22;
            }
            ++v20;
            --v18;
            ++v21;
          }
          while (v20 < v19);
        }
      }
    }
    if (v9 >= v3) {
      goto LABEL_46;
    }
    if (__OFSUB__(v9, v13)) {
      goto LABEL_135;
    }
    if (v9 - v13 >= v97) {
      goto LABEL_46;
    }
    uint64_t v23 = v13 + v97;
    if (__OFADD__(v13, v97)) {
      goto LABEL_138;
    }
    if (v23 >= v3) {
      uint64_t v23 = v3;
    }
    if (v23 < v13) {
      break;
    }
    if (v9 != v23)
    {
      uint64_t v24 = (double *)(v95 + 8 * v9);
      do
      {
        double v25 = *(double *)(v10 + 8 * v9);
        uint64_t v26 = v13;
        char v27 = v24;
        do
        {
          double v28 = *v27;
          if (v25 >= *v27) {
            break;
          }
          if (!v10) {
            goto LABEL_141;
          }
          *char v27 = v25;
          v27[1] = v28;
          --v27;
          ++v26;
        }
        while (v9 != v26);
        ++v9;
        ++v24;
      }
      while (v9 != v23);
      uint64_t v9 = v23;
    }
LABEL_46:
    if (v9 < v13) {
      goto LABEL_130;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      id v11 = sub_1C2A06F98(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    unint64_t v30 = *((void *)v11 + 2);
    unint64_t v29 = *((void *)v11 + 3);
    unint64_t v12 = v30 + 1;
    uint64_t v10 = v99;
    if (v30 >= v29 >> 1)
    {
      char v79 = sub_1C2A06F98((char *)(v29 > 1), v30 + 1, 1, v11);
      uint64_t v10 = v99;
      id v11 = v79;
    }
    *((void *)v11 + 2) = v12;
    id v31 = v11 + 32;
    id v32 = &v11[16 * v30 + 32];
    *(void *)id v32 = v13;
    *((void *)v32 + 1) = v9;
    if (v30)
    {
      while (1)
      {
        unint64_t v33 = v12 - 1;
        if (v12 >= 4)
        {
          id v38 = &v31[16 * v12];
          uint64_t v39 = *((void *)v38 - 8);
          uint64_t v40 = *((void *)v38 - 7);
          BOOL v44 = __OFSUB__(v40, v39);
          uint64_t v41 = v40 - v39;
          if (v44) {
            goto LABEL_119;
          }
          uint64_t v43 = *((void *)v38 - 6);
          uint64_t v42 = *((void *)v38 - 5);
          BOOL v44 = __OFSUB__(v42, v43);
          uint64_t v36 = v42 - v43;
          char v37 = v44;
          if (v44) {
            goto LABEL_120;
          }
          unint64_t v45 = v12 - 2;
          uint64_t v46 = &v31[16 * v12 - 32];
          uint64_t v48 = *(void *)v46;
          uint64_t v47 = *((void *)v46 + 1);
          BOOL v44 = __OFSUB__(v47, v48);
          uint64_t v49 = v47 - v48;
          if (v44) {
            goto LABEL_122;
          }
          BOOL v44 = __OFADD__(v36, v49);
          uint64_t v50 = v36 + v49;
          if (v44) {
            goto LABEL_125;
          }
          if (v50 >= v41)
          {
            char v68 = &v31[16 * v33];
            uint64_t v70 = *(void *)v68;
            uint64_t v69 = *((void *)v68 + 1);
            BOOL v44 = __OFSUB__(v69, v70);
            uint64_t v71 = v69 - v70;
            if (v44) {
              goto LABEL_129;
            }
            BOOL v61 = v36 < v71;
            goto LABEL_83;
          }
        }
        else
        {
          if (v12 != 3)
          {
            uint64_t v62 = *((void *)v11 + 4);
            uint64_t v63 = *((void *)v11 + 5);
            BOOL v44 = __OFSUB__(v63, v62);
            uint64_t v55 = v63 - v62;
            char v56 = v44;
            goto LABEL_77;
          }
          uint64_t v35 = *((void *)v11 + 4);
          uint64_t v34 = *((void *)v11 + 5);
          BOOL v44 = __OFSUB__(v34, v35);
          uint64_t v36 = v34 - v35;
          char v37 = v44;
        }
        if (v37) {
          goto LABEL_121;
        }
        unint64_t v45 = v12 - 2;
        id v51 = &v31[16 * v12 - 32];
        uint64_t v53 = *(void *)v51;
        uint64_t v52 = *((void *)v51 + 1);
        BOOL v54 = __OFSUB__(v52, v53);
        uint64_t v55 = v52 - v53;
        char v56 = v54;
        if (v54) {
          goto LABEL_124;
        }
        char v57 = &v31[16 * v33];
        uint64_t v59 = *(void *)v57;
        uint64_t v58 = *((void *)v57 + 1);
        BOOL v44 = __OFSUB__(v58, v59);
        uint64_t v60 = v58 - v59;
        if (v44) {
          goto LABEL_127;
        }
        if (__OFADD__(v55, v60)) {
          goto LABEL_128;
        }
        if (v55 + v60 >= v36)
        {
          BOOL v61 = v36 < v60;
LABEL_83:
          if (v61) {
            unint64_t v33 = v45;
          }
          goto LABEL_85;
        }
LABEL_77:
        if (v56) {
          goto LABEL_123;
        }
        uint64_t v64 = &v31[16 * v33];
        uint64_t v66 = *(void *)v64;
        uint64_t v65 = *((void *)v64 + 1);
        BOOL v44 = __OFSUB__(v65, v66);
        uint64_t v67 = v65 - v66;
        if (v44) {
          goto LABEL_126;
        }
        if (v67 < v55) {
          goto LABEL_15;
        }
LABEL_85:
        unint64_t v72 = v33 - 1;
        if (v33 - 1 >= v12)
        {
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
          goto LABEL_139;
        }
        if (!v10) {
          goto LABEL_142;
        }
        id v73 = &v31[16 * v72];
        uint64_t v74 = *(void *)v73;
        uint64_t v75 = v31;
        uint64_t v76 = &v31[16 * v33];
        uint64_t v77 = *((void *)v76 + 1);
        sub_1C299A8B4((double *)(v10 + 8 * *(void *)v73), (double *)(v10 + 8 * *(void *)v76), v10 + 8 * v77, __dst);
        if (v1) {
          goto LABEL_113;
        }
        if (v77 < v74) {
          goto LABEL_116;
        }
        if (v33 > *((void *)v11 + 2)) {
          goto LABEL_117;
        }
        *(void *)id v73 = v74;
        *(void *)&v75[16 * v72 + 8] = v77;
        unint64_t v78 = *((void *)v11 + 2);
        if (v33 >= v78) {
          goto LABEL_118;
        }
        unint64_t v12 = v78 - 1;
        memmove(v76, v76 + 16, 16 * (v78 - 1 - v33));
        id v31 = v75;
        *((void *)v11 + 2) = v78 - 1;
        uint64_t v10 = v99;
        if (v78 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v12 = 1;
LABEL_15:
    uint64_t v3 = v98;
    if (v9 >= v98)
    {
      uint64_t v8 = v96;
      uint64_t v2 = v94;
      goto LABEL_102;
    }
  }
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  uint64_t result = sub_1C2A9E618();
  __break(1u);
  return result;
}

uint64_t sub_1C299A8B4(double *__src, double *a2, unint64_t a3, double *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = (char *)a2 - (char *)__src;
  int64_t v9 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0) {
    int64_t v9 = (char *)a2 - (char *)__src;
  }
  uint64_t v10 = v9 >> 3;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 7;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  uint64_t v13 = v12 >> 3;
  uint64_t v24 = __src;
  uint64_t v23 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 >= -7)
    {
      if (__dst != a2 || &a2[v13] <= __dst) {
        memmove(__dst, a2, 8 * v13);
      }
      double v16 = &v4[v13];
      uint64_t v22 = v16;
      uint64_t v24 = v6;
      if (v7 < v6 && v11 >= 8)
      {
        double v17 = (double *)(a3 - 8);
        while (1)
        {
          id v18 = v17 + 1;
          uint64_t v19 = v6 - 1;
          double v20 = *(v6 - 1);
          if (*(v16 - 1) >= v20)
          {
            uint64_t v22 = v16 - 1;
            if (v18 < v16 || v17 >= v16 || v18 != v16) {
              *double v17 = *(v16 - 1);
            }
            --v16;
            if (v6 <= v7) {
              goto LABEL_42;
            }
          }
          else
          {
            if (v18 != v6 || v17 >= v6) {
              *double v17 = v20;
            }
            uint64_t v24 = --v6;
            if (v19 <= v7) {
              goto LABEL_42;
            }
          }
          --v17;
          if (v16 <= v4) {
            goto LABEL_42;
          }
        }
      }
      goto LABEL_42;
    }
  }
  else if (v8 >= -7)
  {
    if (__dst != __src || &__src[v10] <= __dst) {
      memmove(__dst, __src, 8 * v10);
    }
    double v14 = &v4[v10];
    uint64_t v22 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 8)
    {
      do
      {
        if (*v6 >= *v4)
        {
          if (v7 != v4) {
            *uint64_t v7 = *v4;
          }
          uint64_t v23 = ++v4;
          double v15 = v6;
        }
        else
        {
          double v15 = v6 + 1;
          if (v7 < v6 || v7 >= v15 || v7 != v6) {
            *uint64_t v7 = *v6;
          }
        }
        ++v7;
        if (v4 >= v14) {
          break;
        }
        uint64_t v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      uint64_t v24 = v7;
    }
LABEL_42:
    sub_1C2A07254((void **)&v24, (const void **)&v23, &v22);
    return 1;
  }
  uint64_t result = sub_1C2A9E6A8();
  __break(1u);
  return result;
}

uint64_t sub_1C299AB24(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = sub_1C2A9E648();
    if (v2) {
      goto LABEL_3;
    }
LABEL_17:
    uint64_t v4 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_18;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v2) {
    goto LABEL_17;
  }
LABEL_3:
  if (v2 < 1)
  {
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  uint64_t v3 = 0;
  uint64_t v4 = (void *)MEMORY[0x1E4FBC860];
  do
  {
    if ((a1 & 0xC000000000000001) != 0) {
      id v5 = (id)MEMORY[0x1C8764390](v3, a1);
    }
    else {
      id v5 = *(id *)(a1 + 8 * v3 + 32);
    }
    uint64_t v6 = v5;
    id v7 = objc_msgSend(v5, sel_burdenPercentage);
    if (v7)
    {
      int64_t v8 = v7;
      objc_msgSend(v7, sel_doubleValue);
      uint64_t v10 = v9;

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v4 = sub_1C292D4B4(0, v4[2] + 1, 1, v4);
      }
      unint64_t v12 = v4[2];
      unint64_t v11 = v4[3];
      if (v12 >= v11 >> 1) {
        uint64_t v4 = sub_1C292D4B4((void *)(v11 > 1), v12 + 1, 1, v4);
      }
      void v4[2] = v12 + 1;
      v4[v12 + 4] = v10;
    }
    else
    {
    }
    ++v3;
  }
  while (v2 != v3);
LABEL_18:
  swift_bridgeObjectRelease();
  if (!v4[2])
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  char v27 = v4;
  swift_bridgeObjectRetain();
  sub_1C299A1B4((uint64_t *)&v27);
  swift_bridgeObjectRelease();
  uint64_t v13 = (uint64_t)v27;
  unint64_t v14 = v27[2];
  if (v14)
  {
    unint64_t v16 = (v14 - 1) >> 1;
    if (v16 >= v14)
    {
LABEL_60:
      __break(1u);
      goto LABEL_61;
    }
    double v15 = *(double *)&v27[v16 + 4];
  }
  else
  {
    if (v14 >> 1 >= v14)
    {
LABEL_59:
      __break(1u);
      goto LABEL_60;
    }
    if (v14 < 2)
    {
LABEL_61:
      __break(1u);
      goto LABEL_62;
    }
    double v15 = (*(double *)&v27[(v14 >> 1) + 4] + *(double *)&v27[(v14 >> 1) + 3]) * 0.5;
  }
  double v17 = round(v15 * 1000.0);
  if ((~*(void *)&v17 & 0x7FF0000000000000) == 0) {
    goto LABEL_53;
  }
  if (v17 <= -9.22337204e18)
  {
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  if (v17 >= 9.22337204e18)
  {
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  double v18 = round(*(double *)&v27[v14 + 3] * 1000.0);
  if ((~*(void *)&v18 & 0x7FF0000000000000) == 0)
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  if (v18 <= -9.22337204e18)
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  if (v18 >= 9.22337204e18)
  {
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  uint64_t v19 = (uint64_t)v17;
  uint64_t v20 = (uint64_t)v18;
  if ((uint64_t)v18 >= 151)
  {
    BOOL v21 = __OFADD__(v19, 125);
    v19 += 125;
    if (!v21)
    {
LABEL_37:
      for (uint64_t i = 0; ; ++i)
      {
        uint64_t v23 = i + 1;
        if (__OFADD__(i, 1))
        {
          __break(1u);
LABEL_49:
          __break(1u);
LABEL_50:
          __break(1u);
LABEL_51:
          __break(1u);
          goto LABEL_52;
        }
        double v24 = round(*(double *)(v13 + 8 * i + 32) * 1000.0);
        if ((~*(void *)&v24 & 0x7FF0000000000000) == 0) {
          goto LABEL_49;
        }
        if (v24 <= -9.22337204e18) {
          goto LABEL_50;
        }
        if (v24 >= 9.22337204e18) {
          goto LABEL_51;
        }
        uint64_t v25 = (uint64_t)v24;
        if (v19 <= (uint64_t)v24) {
          break;
        }
        if (v23 == v14)
        {
          swift_release();
          return 0;
        }
      }
      swift_release();
      if (v20 < v25) {
        goto LABEL_63;
      }
      return v25;
    }
    __break(1u);
  }
  BOOL v21 = __OFADD__(v19, 50);
  v19 += 50;
  if (!v21) {
    goto LABEL_37;
  }
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

void sub_1C299AEE0(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) == 0)
  {
    id v4 = objc_msgSend(a1, sel_burdenPercentage);
    if (v4)
    {
      id v5 = v4;
      objc_msgSend(v4, sel_doubleValue);
      double v7 = v6;

      double v8 = round(v7 * 1000.0);
      if ((~*(void *)&v8 & 0x7FF0000000000000) != 0)
      {
        if (v8 > -9.22337204e18)
        {
          if (v8 < 9.22337204e18) {
            return;
          }
LABEL_10:
          __break(1u);
          return;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
      goto LABEL_10;
    }
  }
}

ValueMetadata *type metadata accessor for AFibBurdenDistributionAnalysis()
{
  return &type metadata for AFibBurdenDistributionAnalysis;
}

ValueMetadata *type metadata accessor for AFibBurdenDistributionAnalysis.Constants()
{
  return &type metadata for AFibBurdenDistributionAnalysis.Constants;
}

uint64_t *initializeBufferWithCopyOfBuffer for AFibBurdenDistributionAnalysis.Result(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for TimeBasedDistribution();
    uint64_t v8 = *(void *)(v7 - 8);
    uint64_t v9 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48);
    if (v9(a2, 1, v7))
    {
      sub_1C2998D44();
      memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    }
    else
    {
      uint64_t v12 = sub_1C2A9C858();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v12 - 8) + 16))(a1, a2, v12);
      *(uint64_t *)((char *)a1 + *(int *)(v7 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v7 + 20));
      uint64_t v13 = *(int *)(v7 + 24);
      unint64_t v14 = (uint64_t *)((char *)a1 + v13);
      double v15 = (uint64_t *)((char *)a2 + v13);
      uint64_t v16 = v15[1];
      *unint64_t v14 = *v15;
      v14[1] = v16;
      double v17 = *(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v17(a1, 0, 1, v7);
    }
    uint64_t v18 = *(int *)(a3 + 20);
    uint64_t v19 = (char *)a1 + v18;
    uint64_t v20 = (char *)a2 + v18;
    if (v9((uint64_t *)v20, 1, v7))
    {
      sub_1C2998D44();
      memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      uint64_t v22 = sub_1C2A9C858();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16))(v19, v20, v22);
      *(void *)&v19[*(int *)(v7 + 20)] = *(void *)&v20[*(int *)(v7 + 20)];
      uint64_t v23 = *(int *)(v7 + 24);
      double v24 = &v19[v23];
      uint64_t v25 = &v20[v23];
      uint64_t v26 = *((void *)v25 + 1);
      *(void *)double v24 = *(void *)v25;
      *((void *)v24 + 1) = v26;
      char v27 = *(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v27(v19, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t destroy for AFibBurdenDistributionAnalysis.Result(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TimeBasedDistribution();
  int v5 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);
  if (!v5(a1, 1, v4))
  {
    uint64_t v6 = sub_1C2A9C858();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v7 = a1 + *(int *)(a2 + 20);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v5)(v7, 1, v4);
  if (!result)
  {
    uint64_t v9 = sub_1C2A9C858();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v7, v9);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

char *initializeWithCopy for AFibBurdenDistributionAnalysis.Result(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TimeBasedDistribution();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v8(a2, 1, v6))
  {
    sub_1C2998D44();
    memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    uint64_t v10 = sub_1C2A9C858();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
    *(void *)&a1[*(int *)(v6 + 20)] = *(void *)&a2[*(int *)(v6 + 20)];
    uint64_t v11 = *(int *)(v6 + 24);
    uint64_t v12 = &a1[v11];
    uint64_t v13 = &a2[v11];
    uint64_t v14 = *((void *)v13 + 1);
    *(void *)uint64_t v12 = *(void *)v13;
    *((void *)v12 + 1) = v14;
    double v15 = *(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v15(a1, 0, 1, v6);
  }
  uint64_t v16 = *(int *)(a3 + 20);
  double v17 = &a1[v16];
  uint64_t v18 = &a2[v16];
  if (v8(v18, 1, v6))
  {
    sub_1C2998D44();
    memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    uint64_t v20 = sub_1C2A9C858();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16))(v17, v18, v20);
    *(void *)&v17[*(int *)(v6 + 20)] = *(void *)&v18[*(int *)(v6 + 20)];
    uint64_t v21 = *(int *)(v6 + 24);
    uint64_t v22 = &v17[v21];
    uint64_t v23 = &v18[v21];
    uint64_t v24 = *((void *)v23 + 1);
    *(void *)uint64_t v22 = *(void *)v23;
    *((void *)v22 + 1) = v24;
    uint64_t v25 = *(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v25(v17, 0, 1, v6);
  }
  return a1;
}

char *assignWithCopy for AFibBurdenDistributionAnalysis.Result(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TimeBasedDistribution();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      uint64_t v11 = sub_1C2A9C858();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(a1, a2, v11);
      *(void *)&a1[*(int *)(v6 + 20)] = *(void *)&a2[*(int *)(v6 + 20)];
      uint64_t v12 = *(int *)(v6 + 24);
      uint64_t v13 = &a1[v12];
      uint64_t v14 = &a2[v12];
      *(void *)uint64_t v13 = *(void *)v14;
      *((void *)v13 + 1) = *((void *)v14 + 1);
      double v15 = *(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v15(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    sub_1C299B9F0((uint64_t)a1);
LABEL_6:
    sub_1C2998D44();
    memcpy(a1, a2, *(void *)(*(void *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v29 = sub_1C2A9C858();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 24))(a1, a2, v29);
  *(void *)&a1[*(int *)(v6 + 20)] = *(void *)&a2[*(int *)(v6 + 20)];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v30 = *(int *)(v6 + 24);
  id v31 = &a1[v30];
  id v32 = &a2[v30];
  *(void *)id v31 = *(void *)v32;
  *((void *)v31 + 1) = *((void *)v32 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_7:
  uint64_t v17 = *(int *)(a3 + 20);
  uint64_t v18 = &a1[v17];
  uint64_t v19 = &a2[v17];
  int v20 = v8(&a1[v17], 1, v6);
  int v21 = v8(v19, 1, v6);
  if (!v20)
  {
    if (!v21)
    {
      uint64_t v33 = sub_1C2A9C858();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 24))(v18, v19, v33);
      *(void *)&v18[*(int *)(v6 + 20)] = *(void *)&v19[*(int *)(v6 + 20)];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v34 = *(int *)(v6 + 24);
      uint64_t v35 = &v18[v34];
      uint64_t v36 = &v19[v34];
      *(void *)uint64_t v35 = *(void *)v36;
      *((void *)v35 + 1) = *((void *)v36 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_1C299B9F0((uint64_t)v18);
    goto LABEL_12;
  }
  if (v21)
  {
LABEL_12:
    sub_1C2998D44();
    memcpy(v18, v19, *(void *)(*(void *)(v27 - 8) + 64));
    return a1;
  }
  uint64_t v22 = sub_1C2A9C858();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16))(v18, v19, v22);
  *(void *)&v18[*(int *)(v6 + 20)] = *(void *)&v19[*(int *)(v6 + 20)];
  uint64_t v23 = *(int *)(v6 + 24);
  uint64_t v24 = &v18[v23];
  uint64_t v25 = &v19[v23];
  *(void *)uint64_t v24 = *(void *)v25;
  *((void *)v24 + 1) = *((void *)v25 + 1);
  uint64_t v26 = *(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v26(v18, 0, 1, v6);
  return a1;
}

uint64_t sub_1C299B9F0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for TimeBasedDistribution();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

char *initializeWithTake for AFibBurdenDistributionAnalysis.Result(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TimeBasedDistribution();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v8(a2, 1, v6))
  {
    sub_1C2998D44();
    memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    uint64_t v10 = sub_1C2A9C858();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(a1, a2, v10);
    *(void *)&a1[*(int *)(v6 + 20)] = *(void *)&a2[*(int *)(v6 + 20)];
    *(_OWORD *)&a1[*(int *)(v6 + 24)] = *(_OWORD *)&a2[*(int *)(v6 + 24)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v11 = *(int *)(a3 + 20);
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  if (v8(v13, 1, v6))
  {
    sub_1C2998D44();
    memcpy(v12, v13, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    uint64_t v15 = sub_1C2A9C858();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32))(v12, v13, v15);
    *(void *)&v12[*(int *)(v6 + 20)] = *(void *)&v13[*(int *)(v6 + 20)];
    *(_OWORD *)&v12[*(int *)(v6 + 24)] = *(_OWORD *)&v13[*(int *)(v6 + 24)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v12, 0, 1, v6);
  }
  return a1;
}

char *assignWithTake for AFibBurdenDistributionAnalysis.Result(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TimeBasedDistribution();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      uint64_t v11 = sub_1C2A9C858();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(a1, a2, v11);
      *(void *)&a1[*(int *)(v6 + 20)] = *(void *)&a2[*(int *)(v6 + 20)];
      *(_OWORD *)&a1[*(int *)(v6 + 24)] = *(_OWORD *)&a2[*(int *)(v6 + 24)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    sub_1C299B9F0((uint64_t)a1);
LABEL_6:
    sub_1C2998D44();
    memcpy(a1, a2, *(void *)(*(void *)(v12 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v21 = sub_1C2A9C858();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 40))(a1, a2, v21);
  *(void *)&a1[*(int *)(v6 + 20)] = *(void *)&a2[*(int *)(v6 + 20)];
  swift_bridgeObjectRelease();
  uint64_t v22 = *(int *)(v6 + 24);
  uint64_t v23 = &a1[v22];
  uint64_t v24 = &a2[v22];
  uint64_t v26 = *(void *)v24;
  uint64_t v25 = *((void *)v24 + 1);
  *(void *)uint64_t v23 = v26;
  *((void *)v23 + 1) = v25;
  swift_bridgeObjectRelease();
LABEL_7:
  uint64_t v13 = *(int *)(a3 + 20);
  uint64_t v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  int v16 = v8(&a1[v13], 1, v6);
  int v17 = v8(v15, 1, v6);
  if (!v16)
  {
    if (!v17)
    {
      uint64_t v27 = sub_1C2A9C858();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 40))(v14, v15, v27);
      *(void *)&v14[*(int *)(v6 + 20)] = *(void *)&v15[*(int *)(v6 + 20)];
      swift_bridgeObjectRelease();
      uint64_t v28 = *(int *)(v6 + 24);
      uint64_t v29 = &v14[v28];
      uint64_t v30 = &v15[v28];
      uint64_t v32 = *(void *)v30;
      uint64_t v31 = *((void *)v30 + 1);
      *(void *)uint64_t v29 = v32;
      *((void *)v29 + 1) = v31;
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_1C299B9F0((uint64_t)v14);
    goto LABEL_12;
  }
  if (v17)
  {
LABEL_12:
    sub_1C2998D44();
    memcpy(v14, v15, *(void *)(*(void *)(v19 - 8) + 64));
    return a1;
  }
  uint64_t v18 = sub_1C2A9C858();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v14, v15, v18);
  *(void *)&v14[*(int *)(v6 + 20)] = *(void *)&v15[*(int *)(v6 + 20)];
  *(_OWORD *)&v14[*(int *)(v6 + 24)] = *(_OWORD *)&v15[*(int *)(v6 + 24)];
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v14, 0, 1, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for AFibBurdenDistributionAnalysis.Result(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C299BFD8);
}

uint64_t sub_1C299BFD8(uint64_t a1, uint64_t a2)
{
  sub_1C2998D44();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);
  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for AFibBurdenDistributionAnalysis.Result(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C299C058);
}

uint64_t sub_1C299C058(uint64_t a1, uint64_t a2)
{
  sub_1C2998D44();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(a1, a2, a2, v4);
}

void sub_1C299C0C8()
{
  sub_1C2998D44();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t static HKNumericAxis.ticksAndLabels(modelCoordinateRange:maximumLabelCount:dimension:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)sub_1C2A9C8D8();
  int v5 = (void *)sub_1C2A9C8D8();
  id v6 = objc_msgSend(self, sel_valueRangeWithMinValue_maxValue_, v4, v5);

  id v7 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_ticksAndLabelsForRangeInModelCoordinates_maximumLabelCount_endingOptions_dimension_, v6, a1, 0, a2);
  if (!v7)
  {

    return 0;
  }
  uint64_t v8 = v7;
  sub_1C29376D4(0, &qword_1EA31E4F8);
  unint64_t v9 = sub_1C2A9DE98();

  if (!(v9 >> 62))
  {
    uint64_t v10 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v10) {
      goto LABEL_4;
    }
LABEL_23:

    swift_bridgeObjectRelease();
    uint64_t v13 = (void *)MEMORY[0x1E4FBC860];
LABEL_24:
    swift_bridgeObjectRelease();
    return (uint64_t)v13;
  }
  swift_bridgeObjectRetain();
  uint64_t result = sub_1C2A9E648();
  uint64_t v10 = result;
  if (!result) {
    goto LABEL_23;
  }
LABEL_4:
  if (v10 >= 1)
  {
    uint64_t v29 = v6;
    uint64_t v12 = 0;
    uint64_t v13 = (void *)MEMORY[0x1E4FBC860];
    uint64_t v14 = &off_1E645A000;
    do
    {
      if ((v9 & 0xC000000000000001) != 0) {
        id v15 = (id)MEMORY[0x1C8764390](v12, v9);
      }
      else {
        id v15 = *(id *)(v9 + 8 * v12 + 32);
      }
      int v16 = v15;
      id v17 = [v15 (SEL)v14[432]];
      sub_1C2A9E388();
      swift_unknownObjectRelease();
      sub_1C29376D4(0, (unint64_t *)&qword_1EBB92158);
      if (swift_dynamicCast())
      {
        id v18 = objc_msgSend(v16, sel_text);
        if (v18)
        {
          uint64_t v19 = v18;
          uint64_t v20 = sub_1C2A9DD28();
          uint64_t v22 = v21;
        }
        else
        {
          uint64_t v20 = 0;
          uint64_t v22 = 0;
        }
        objc_msgSend(v30, sel_doubleValue);
        uint64_t v24 = v23;
        id v25 = objc_msgSend(v16, sel_labelType);

        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v13 = sub_1C293A104(0, v13[2] + 1, 1, v13);
        }
        unint64_t v27 = v13[2];
        unint64_t v26 = v13[3];
        if (v27 >= v26 >> 1) {
          uint64_t v13 = sub_1C293A104((void *)(v26 > 1), v27 + 1, 1, v13);
        }
        _OWORD v13[2] = v27 + 1;
        uint64_t v28 = &v13[5 * v27];
        void v28[4] = v20;
        v28[5] = v22;
        v28[6] = v24;
        v28[7] = v25;
        *((_DWORD *)v28 + 16) = 1144750080;
        uint64_t v14 = &off_1E645A000;
      }
      else
      {
      }
      ++v12;
    }
    while (v10 != v12);

    swift_bridgeObjectRelease();
    goto LABEL_24;
  }
  __break(1u);
  return result;
}

uint64_t static DiagramAxisMetricsCalculator.Constants.maximumLabelCount.getter()
{
  return 3;
}

uint64_t sub_1C299C4C0(uint64_t a1, uint64_t a2)
{
  return static HKNumericAxis.ticksAndLabels(modelCoordinateRange:maximumLabelCount:dimension:)(a1, a2);
}

void *DiagramAxisMetricsCalculator.__allocating_init(axisLabelDimension:maximumLabelCount:calculator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_getObjectType();
  return sub_1C299E0BC(a1, a2, a3, a4);
}

void *DiagramAxisMetricsCalculator.init(axisLabelDimension:maximumLabelCount:calculator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_getObjectType();
  return sub_1C299E108(a1, a2, a3, a4, v4);
}

uint64_t sub_1C299C5F8@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  uint64_t v7 = sub_1C2A9CFE8();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = (*(uint64_t (**)(void, void, double, double))(v3 + 32))(*(void *)(v3 + 24), *(void *)(v3 + 16), a2, a3);
  if (result)
  {
    uint64_t v12 = *(void *)(result + 16);
    if (v12)
    {
      double v13 = *(double *)(result + 48);
      double v14 = *(double *)(result + 40 * v12 + 8);
      if (v13 > v14)
      {
        __break(1u);
      }
      else
      {
        *(void *)a1 = result;
        *(double *)(a1 + 8) = v13;
        *(double *)(a1 + 16) = v14;
      }
      return result;
    }
    swift_bridgeObjectRelease();
  }
  sub_1C2A9CF98();
  id v15 = sub_1C2A9CFC8();
  os_log_type_t v16 = sub_1C2A9E0A8();
  if (os_log_type_enabled(v15, v16))
  {
    id v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v17 = 0;
    _os_log_impl(&dword_1C292A000, v15, v16, "Unable to determine labels from given range", v17, 2u);
    MEMORY[0x1C87656F0](v17, -1, -1);
  }

  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  return result;
}

uint64_t DiagramAxisMetricsCalculator.deinit()
{
  swift_unknownObjectRelease();
  swift_release();
  return v0;
}

uint64_t DiagramAxisMetricsCalculator.__deallocating_deinit()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_1C299C810@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  return sub_1C299C5F8(a1, a2, a3);
}

void *sub_1C299C834(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1C293AEAC(0, &qword_1EA31E538, (uint64_t (*)(uint64_t))sub_1C299F2FC, MEMORY[0x1E4FBBE00]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      _OWORD v10[2] = v8;
      unsigned int v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[6 * v8 + 4]) {
          memmove(v12, a4 + 4, 48 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v12 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_1C299E19C(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1C299C988(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1C293AEAC(0, &qword_1EBB92478, (uint64_t (*)(uint64_t))type metadata accessor for CGPoint, MEMORY[0x1E4FBBE00]);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      _OWORD v10[2] = v8;
      unsigned int v10[3] = 2 * (v12 >> 4);
      double v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      double v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1C299E2A8(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1C299CAC4(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1C293A244(0, &qword_1EBB8DEA8, (uint64_t)&type metadata for DiagramDataGroup, MEMORY[0x1E4FBBE00]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      _OWORD v10[2] = v8;
      unsigned int v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4]) {
          memmove(v12, a4 + 4, 40 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v12 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_1C299E394(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1C299CC08(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1C293AEAC(0, &qword_1EA31E508, (uint64_t (*)(uint64_t))sub_1C299F290, MEMORY[0x1E4FBBE00]);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      _OWORD v10[2] = v8;
      unsigned int v10[3] = 2 * (v12 >> 5);
      double v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      double v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1C299E48C(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1C299CD44(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1C293AEAC(0, &qword_1EA31E530, (uint64_t (*)(uint64_t))sub_1C2969100, MEMORY[0x1E4FBBE00]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      _OWORD v10[2] = v8;
      unsigned int v10[3] = 2 * ((uint64_t)(v11 - 32) / 224);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[28 * v8 + 4]) {
          memmove(v12, a4 + 4, 224 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v12 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_1C299E594(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *sub_1C299CE98(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  int64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      int64_t v7 = a2;
    }
LABEL_8:
    int64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      int64_t v9 = *((void *)a4 + 2);
    }
    else {
      int64_t v9 = v7;
    }
    if (v9)
    {
      sub_1C293A244(0, &qword_1EBB921F0, (uint64_t)&type metadata for StatisticsOption, MEMORY[0x1E4FBBE00]);
      uint64_t v10 = (char *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * v11 - 64;
      uint64_t v12 = v10 + 32;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[v8 + 32]) {
          memmove(v12, a4 + 32, v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
      uint64_t v12 = (char *)(MEMORY[0x1E4FBC860] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_1C299E684(0, v8, v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1C299CFB4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1C299D044(a1, a2, a3, a4, &qword_1EA31E528, type metadata accessor for TimeBasedDistributionChartPoint.TimeOfDay, type metadata accessor for TimeBasedDistributionChartPoint.TimeOfDay, type metadata accessor for TimeBasedDistributionChartPoint.TimeOfDay);
}

uint64_t sub_1C299CFFC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1C299D044(a1, a2, a3, a4, &qword_1EA31E520, type metadata accessor for TimeBasedDistributionChartPoint.DayOfWeek, type metadata accessor for TimeBasedDistributionChartPoint.DayOfWeek, type metadata accessor for TimeBasedDistributionChartPoint.DayOfWeek);
}

uint64_t sub_1C299D044(char a1, int64_t a2, char a3, unint64_t a4, unint64_t *a5, uint64_t (*a6)(uint64_t), uint64_t (*a7)(void), uint64_t (*a8)(void))
{
  if (a3)
  {
    unint64_t v12 = *(void *)(a4 + 24);
    uint64_t v13 = v12 >> 1;
    if ((uint64_t)(v12 >> 1) < a2)
    {
      if (v13 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v12 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v13 = a2;
      }
    }
  }
  else
  {
    uint64_t v13 = a2;
  }
  uint64_t v14 = *(void *)(a4 + 16);
  if (v13 <= v14) {
    uint64_t v15 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v15 = v13;
  }
  if (!v15)
  {
    uint64_t v19 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_19;
  }
  sub_1C293AEAC(0, a5, a6, MEMORY[0x1E4FBBE00]);
  uint64_t v16 = *(void *)(a7(0) - 8);
  uint64_t v17 = *(void *)(v16 + 72);
  unint64_t v18 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  uint64_t v19 = (void *)swift_allocObject();
  size_t v20 = _swift_stdlib_malloc_size(v19);
  if (!v17 || (v20 - v18 == 0x8000000000000000 ? (BOOL v21 = v17 == -1) : (BOOL v21 = 0), v21))
  {
LABEL_29:
    uint64_t result = sub_1C2A9E618();
    __break(1u);
    return result;
  }
  double v19[2] = v14;
  v19[3] = 2 * ((uint64_t)(v20 - v18) / v17);
LABEL_19:
  uint64_t v22 = *(void *)(a7(0) - 8);
  unint64_t v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  unint64_t v24 = (unint64_t)v19 + v23;
  if (a1)
  {
    if ((unint64_t)v19 < a4 || v24 >= a4 + v23 + *(void *)(v22 + 72) * v14)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v19 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_1C299EDBC(0, v14, v24, a4, a8);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v19;
}

void *sub_1C299D2E0(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1C293A244(0, &qword_1EBB91420, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBBE00]);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      _OWORD v10[2] = v8;
      unsigned int v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1C299E76C(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1C299D410(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1C298637C();
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      _OWORD v10[2] = v8;
      unsigned int v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1C299E860(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1C299D51C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1C293A244(0, &qword_1EA31E500, (uint64_t)&type metadata for DiagramPointAnnotations, MEMORY[0x1E4FBBE00]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      _OWORD v10[2] = v8;
      unsigned int v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v12 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_1C299E98C(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1C299D664(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1C293AEAC(0, &qword_1EBB921F8, (uint64_t (*)(uint64_t))sub_1C2943230, MEMORY[0x1E4FBBE00]);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      _OWORD v10[2] = v8;
      unsigned int v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1C299EA84(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_1C299D7A0(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1C293AEAC(0, (unint64_t *)&qword_1EA31E2E0, (uint64_t (*)(uint64_t))sub_1C29812E0, MEMORY[0x1E4FBBE00]);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      _OWORD v10[2] = v8;
      unsigned int v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4]) {
          memmove(v12, a4 + 4, 40 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v12 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_1C299EB8C(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1C299D8F0(char a1, int64_t a2, char a3, unint64_t a4)
{
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v13 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_19;
  }
  sub_1C299F1A4(0, &qword_1EBB92200, MEMORY[0x1E4FBBE00]);
  sub_1C299F220(0, (unint64_t *)&qword_1EBB92218, MEMORY[0x1E4F67110]);
  uint64_t v11 = *(void *)(*(void *)(v10 - 8) + 72);
  unint64_t v12 = (*(unsigned __int8 *)(*(void *)(v10 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v10 - 8) + 80);
  uint64_t v13 = (void *)swift_allocObject();
  size_t v14 = _swift_stdlib_malloc_size(v13);
  if (!v11 || (v14 - v12 == 0x8000000000000000 ? (BOOL v15 = v11 == -1) : (BOOL v15 = 0), v15))
  {
LABEL_29:
    uint64_t result = sub_1C2A9E618();
    __break(1u);
    return result;
  }
  _OWORD v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  sub_1C299F220(0, (unint64_t *)&qword_1EBB92218, MEMORY[0x1E4F67110]);
  uint64_t v17 = *(void *)(v16 - 8);
  unint64_t v18 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  unint64_t v19 = (unint64_t)v13 + v18;
  if (a1)
  {
    if ((unint64_t)v13 < a4 || v19 >= a4 + v18 + *(void *)(v17 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_1C299EF18(0, v8, v19, a4, (uint64_t)&qword_1EBB92218, MEMORY[0x1E4F67110], (uint64_t (*)(void, uint64_t, uint64_t))sub_1C299F220);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v13;
}

void *sub_1C299DBD8(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_1C299F128(0, &qword_1EBB92208, (uint64_t)&qword_1EBB92230, (uint64_t)sub_1C299F184, (void (*)(uint64_t, uint64_t, uint64_t))sub_1C299F220);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      _OWORD v10[2] = v8;
      unsigned int v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1C299EC98(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1C299DD1C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1C299D044(a1, a2, a3, a4, &qword_1EBB8F9E8, type metadata accessor for SignificantChange.Period, type metadata accessor for SignificantChange.Period, type metadata accessor for SignificantChange.Period);
}

uint64_t sub_1C299DD64(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1C299D044(a1, a2, a3, a4, &qword_1EBB8E3D8, (uint64_t (*)(uint64_t))sub_1C297A894, (uint64_t (*)(void))sub_1C297A894, (uint64_t (*)(void))sub_1C297A894);
}

uint64_t sub_1C299DDAC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1C299DDD4(a1, a2, a3, a4, &qword_1EBB8E3D0, (unint64_t *)&qword_1EBB8E858, sub_1C299F0F4);
}

uint64_t sub_1C299DDD4(char a1, int64_t a2, char a3, unint64_t a4, unint64_t *a5, unint64_t *a6, void (*a7)(uint64_t))
{
  if (a3)
  {
    unint64_t v11 = *(void *)(a4 + 24);
    uint64_t v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) < a2)
    {
      if (v12 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v12 = a2;
      }
    }
  }
  else
  {
    uint64_t v12 = a2;
  }
  uint64_t v13 = *(void *)(a4 + 16);
  if (v12 <= v13) {
    uint64_t v14 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v14 = v12;
  }
  if (!v14)
  {
    unint64_t v18 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_19;
  }
  sub_1C299F128(0, a5, (uint64_t)a6, (uint64_t)a7, (void (*)(uint64_t, uint64_t, uint64_t))sub_1C299F07C);
  sub_1C299F07C(0, a6, a7);
  uint64_t v16 = *(void *)(*(void *)(v15 - 8) + 72);
  unint64_t v17 = (*(unsigned __int8 *)(*(void *)(v15 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v15 - 8) + 80);
  unint64_t v18 = (void *)swift_allocObject();
  size_t v19 = _swift_stdlib_malloc_size(v18);
  if (!v16 || (v19 - v17 == 0x8000000000000000 ? (BOOL v20 = v16 == -1) : (BOOL v20 = 0), v20))
  {
LABEL_29:
    uint64_t result = sub_1C2A9E618();
    __break(1u);
    return result;
  }
  v18[2] = v13;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v16);
LABEL_19:
  sub_1C299F07C(0, a6, a7);
  uint64_t v22 = *(void *)(v21 - 8);
  unint64_t v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  unint64_t v24 = (unint64_t)v18 + v23;
  if (a1)
  {
    if ((unint64_t)v18 < a4 || v24 >= a4 + v23 + *(void *)(v22 + 72) * v13)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v18 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_1C299EF18(0, v13, v24, a4, (uint64_t)a6, (uint64_t)a7, (uint64_t (*)(void, uint64_t, uint64_t))sub_1C299F07C);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v18;
}

uint64_t sub_1C299E094(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1C299DDD4(a1, a2, a3, a4, &qword_1EBB8F9E0, &qword_1EBB8E860, (void (*)(uint64_t))type metadata accessor for SignificantChangeEngine.Changepoint);
}

void *sub_1C299E0BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for DiagramAxisMetricsCalculator();
  uint64_t result = (void *)swift_allocObject();
  result[2] = a1;
  result[3] = a2;
  result[4] = a3;
  result[5] = a4;
  return result;
}

void *sub_1C299E108(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[2] = a1;
  a5[3] = a2;
  a5[4] = a3;
  a5[5] = a4;
  return a5;
}

uint64_t type metadata accessor for DiagramAxisMetricsCalculator()
{
  return self;
}

uint64_t method lookup function for DiagramAxisMetricsCalculator(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for DiagramAxisMetricsCalculator);
}

uint64_t dispatch thunk of DiagramAxisMetricsCalculator.__allocating_init(axisLabelDimension:maximumLabelCount:calculator:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of DiagramAxisMetricsCalculator.axisMetrics(for:customLocations:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

ValueMetadata *type metadata accessor for DiagramAxisMetricsCalculator.Constants()
{
  return &type metadata for DiagramAxisMetricsCalculator.Constants;
}

uint64_t sub_1C299E19C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 48 * a1 + 32;
    unint64_t v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      sub_1C299F2FC();
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_1C2A9E6A8();
  __break(1u);
  return result;
}

char *sub_1C299E2A8(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 16 * a1 + 32);
    size_t v6 = 16 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)sub_1C2A9E6A8();
  __break(1u);
  return result;
}

uint64_t sub_1C299E394(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_1C2A9E6A8();
  __break(1u);
  return result;
}

uint64_t sub_1C299E48C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      sub_1C299F290();
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_1C2A9E6A8();
  __break(1u);
  return result;
}

char *sub_1C299E594(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 224 * a1 + 32);
    size_t v6 = 224 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)sub_1C2A9E6A8();
  __break(1u);
  return result;
}

char *sub_1C299E684(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + a1 + 32);
    size_t v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  uint64_t result = (char *)sub_1C2A9E6A8();
  __break(1u);
  return result;
}

uint64_t sub_1C299E76C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_1C2A9E6A8();
  __break(1u);
  return result;
}

uint64_t sub_1C299E860(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      sub_1C293A244(0, (unint64_t *)&qword_1EBB8DEB0, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB718]);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_1C2A9E6A8();
  __break(1u);
  return result;
}

uint64_t sub_1C299E98C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_1C2A9E6A8();
  __break(1u);
  return result;
}

uint64_t sub_1C299EA84(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 8 * a1 + 32;
    unint64_t v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      sub_1C2943230();
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_1C2A9E6A8();
  __break(1u);
  return result;
}

uint64_t sub_1C299EB8C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      sub_1C29812E0();
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_1C2A9E6A8();
  __break(1u);
  return result;
}

uint64_t sub_1C299EC98(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 32 * a1 + 32;
    unint64_t v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      sub_1C299F220(0, &qword_1EBB92230, sub_1C299F184);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_1C2A9E6A8();
  __break(1u);
  return result;
}

uint64_t sub_1C299EDBC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(a5(0) - 8);
    uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    unint64_t v12 = v10 + v11 * a1;
    unint64_t v13 = a3 + v11 * v5;
    if (v12 >= v13 || v12 + v11 * v5 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  uint64_t result = sub_1C2A9E6A8();
  __break(1u);
  return result;
}

uint64_t sub_1C299EF18(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(void, uint64_t, uint64_t))
{
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v7 & 0x8000000000000000) == 0)
  {
    uint64_t v11 = *(void *)(a7(0, a5, a6) - 8);
    uint64_t v12 = a4 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    uint64_t v13 = *(void *)(v11 + 72);
    unint64_t v14 = v12 + v13 * a1;
    unint64_t v15 = a3 + v13 * v7;
    if (v14 >= v15 || v14 + v13 * v7 <= a3)
    {
      swift_arrayInitWithCopy();
      return v15;
    }
  }
  uint64_t result = sub_1C2A9E6A8();
  __break(1u);
  return result;
}

void sub_1C299F07C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    sub_1C2A9C398();
    a3(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v6) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

void sub_1C299F0F4(uint64_t a1)
{
}

void sub_1C299F128(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    a5(255, a3, a4);
    unint64_t v6 = sub_1C2A9E8A8();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void sub_1C299F184(uint64_t a1)
{
}

void sub_1C299F1A4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    sub_1C299F220(255, (unint64_t *)&qword_1EBB92218, MEMORY[0x1E4F67110]);
    unint64_t v7 = a3(a1, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

void sub_1C299F220(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    sub_1C296291C();
    unint64_t v4 = sub_1C2A9E9F8();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_1C299F290()
{
  if (!qword_1EA31E510)
  {
    type metadata accessor for CGPoint(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EA31E510);
    }
  }
}

void sub_1C299F2FC()
{
  if (!qword_1EA31E540)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EA31E540);
    }
  }
}

HKStatisticsOptions __swiftcall HKStatisticsOptions.init(options:)(Swift::OpaquePointer options)
{
  uint64_t v1 = *((void *)options._rawValue + 2);
  if (v1)
  {
    HKStatisticsOptions v2 = 0;
    uint64_t v3 = (unsigned __int8 *)options._rawValue + 32;
    while (2)
    {
      int v4 = *v3++;
      switch(v4)
      {
        case 1:
          if ((v2 & 4) == 0)
          {
            uint64_t v5 = 4;
            goto LABEL_3;
          }
          goto LABEL_4;
        case 2:
          if ((v2 & 8) == 0)
          {
            uint64_t v5 = 8;
            goto LABEL_3;
          }
          goto LABEL_4;
        case 3:
          if ((v2 & 0x10) == 0)
          {
            uint64_t v5 = 16;
            goto LABEL_3;
          }
          goto LABEL_4;
        case 4:
          if ((v2 & 0x20) == 0)
          {
            uint64_t v5 = 32;
            goto LABEL_3;
          }
          goto LABEL_4;
        case 5:
          if ((v2 & 0x40) == 0)
          {
            uint64_t v5 = 64;
            goto LABEL_3;
          }
          goto LABEL_4;
        case 6:
          uint64_t v5 = _HKStatisticOptionsAverageSampleDuration();
          goto LABEL_21;
        case 7:
          uint64_t v5 = _HKStatisticsOptionPresence();
          goto LABEL_21;
        case 8:
          uint64_t v5 = _HKStatisticsOptionBaselineRelativeQuantities();
          goto LABEL_21;
        case 9:
          uint64_t v6 = _HKStatisticsOptionAttenuateSamples();
          if ((v6 & 0xFFFFFFFFFFFFFFFDLL) == 0) {
            goto LABEL_23;
          }
          uint64_t v5 = v6 | 2;
LABEL_21:
          if ((v5 & ~v2) == 0) {
            goto LABEL_4;
          }
          goto LABEL_3;
        default:
LABEL_23:
          if ((v2 & 2) != 0) {
            goto LABEL_4;
          }
          uint64_t v5 = 2;
LABEL_3:
          v2 |= v5;
LABEL_4:
          if (--v1) {
            continue;
          }
          goto LABEL_26;
      }
    }
  }
  HKStatisticsOptions v2 = 0;
LABEL_26:
  swift_bridgeObjectRelease();
  return v2;
}

HealthVisualization::TimeBasedDistributionChartModelFactory __swiftcall TimeBasedDistributionChartModelFactory.init(healthStore:)(HealthVisualization::TimeBasedDistributionChartModelFactory healthStore)
{
  v1->healthStore.super.Class isa = healthStore.healthStore.super.isa;
  return healthStore;
}

uint64_t TimeBasedDistributionChartModelFactory.makeChartConfiguration(sampleType:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_1C2A9CFE8();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  id v10 = a1;
  id v11 = v9;
  id v12 = objc_msgSend(v10, sel_identifier);
  uint64_t v13 = sub_1C2A9DD28();
  uint64_t v15 = v14;

  if (sub_1C2A9DD28() == v13 && v16 == v15)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v18 = sub_1C2A9E8D8();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v18 & 1) == 0)
    {
      sub_1C2A9CF98();
      goto LABEL_11;
    }
  }
  if (qword_1EA31DC78 != -1) {
    swift_once();
  }
  uint64_t v19 = __swift_project_value_buffer(v5, (uint64_t)qword_1EA31E6B8);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v19, v5);
LABEL_11:
  uint64_t v20 = type metadata accessor for HealthKitDataTypeChartConfiguration();
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = v10;
  *(void *)(v21 + 24) = v11;
  uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v6 + 32))(v21 + OBJC_IVAR____TtC19HealthVisualization35HealthKitDataTypeChartConfiguration_logger, v8, v5);
  a2[3] = v20;
  a2[4] = (uint64_t)&protocol witness table for HealthKitDataTypeChartConfiguration;
  *a2 = v21;
  return result;
}

uint64_t TimeBasedDistributionChartModelFactory.makePDFChartModel(distribution:sampleType:chartConfiguration:textSupport:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, unsigned char *a5@<X8>)
{
  uint64_t v29 = a4;
  uint64_t v9 = type metadata accessor for TimeBasedDistribution();
  MEMORY[0x1F4188790](v9 - 8);
  id v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_1C2A9CFE8();
  uint64_t v13 = *(void *)(v12 - 8);
  *(void *)&double v14 = MEMORY[0x1F4188790](v12).n128_u64[0];
  uint64_t v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v17 = objc_msgSend(a2, sel_identifier, v14);
  uint64_t v18 = sub_1C2A9DD28();
  uint64_t v20 = v19;

  if (sub_1C2A9DD28() == v18 && v21 == v20)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v23 = sub_1C2A9E8D8();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v23 & 1) == 0)
    {
      sub_1C2A9CF98();
      goto LABEL_11;
    }
  }
  if (qword_1EA31DC78 != -1) {
    swift_once();
  }
  uint64_t v24 = __swift_project_value_buffer(v12, (uint64_t)qword_1EA31E6B8);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, v24, v12);
LABEL_11:
  id v25 = (int *)type metadata accessor for TimeBasedDistributionChartModel();
  sub_1C2A0AE18(a3, (uint64_t)&a5[v25[6]]);
  sub_1C299FC90(a1, (uint64_t)v11);
  char v26 = sub_1C2A7B4E0((uint64_t)v11) & 1;
  sub_1C2981338((uint64_t)a3, (uint64_t)(a5 + 8));
  sub_1C2981338(v29, (uint64_t)&a5[v25[7]]);
  *a5 = v26;
  return (*(uint64_t (**)(unsigned char *, char *, uint64_t))(v13 + 32))(&a5[v25[8]], v16, v12);
}

uint64_t TimeBasedDistributionChartModelFactory.makeHighlightChartModel(distribution:sampleType:textSupport:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v41 = a1;
  uint64_t v42 = a3;
  uint64_t v7 = type metadata accessor for TimeBasedDistribution();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v39 = (uint64_t)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for TimeBasedDistributionChartDesign();
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v40 = (uint64_t)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1C2A9CFE8();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  double v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&double v16 = MEMORY[0x1F4188790](v15).n128_u64[0];
  uint64_t v18 = (char *)&v38 - v17;
  uint64_t v19 = *v4;
  id v20 = objc_msgSend(a2, sel_identifier, v16);
  uint64_t v21 = sub_1C2A9DD28();
  uint64_t v23 = v22;

  if (sub_1C2A9DD28() == v21 && v24 == v23)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v26 = sub_1C2A9E8D8();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v26 & 1) == 0)
    {
      sub_1C2A9CF98();
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v14, v18, v11);
      goto LABEL_11;
    }
  }
  if (qword_1EA31DC78 != -1) {
    swift_once();
  }
  uint64_t v27 = __swift_project_value_buffer(v11, (uint64_t)qword_1EA31E6B8);
  uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v28(v18, v27, v11);
  v28(v14, (uint64_t)v18, v11);
LABEL_11:
  uint64_t v29 = type metadata accessor for HealthKitDataTypeChartConfiguration();
  uint64_t v30 = swift_allocObject();
  *(void *)(v30 + 16) = a2;
  *(void *)(v30 + 24) = v19;
  uint64_t v31 = *(void (**)(uint64_t, char *, uint64_t))(v12 + 32);
  v31(v30 + OBJC_IVAR____TtC19HealthVisualization35HealthKitDataTypeChartConfiguration_logger, v14, v11);
  uint64_t v43[3] = v29;
  v43[4] = &protocol witness table for HealthKitDataTypeChartConfiguration;
  v43[0] = v30;
  id v32 = a2;
  id v33 = v19;
  swift_retain();
  uint64_t v34 = v40;
  sub_1C2A0A4DC(v43, v40);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
  uint64_t v35 = v39;
  sub_1C299FC90(v41, v39);
  LOBYTE(v35) = sub_1C2A7B4E0(v35) & 1;
  *(void *)(a4 + 32) = v29;
  *(void *)(a4 + 40) = &protocol witness table for HealthKitDataTypeChartConfiguration;
  *(void *)(a4 + 8) = v30;
  uint64_t v36 = (int *)type metadata accessor for TimeBasedDistributionChartModel();
  sub_1C2981338(v42, a4 + v36[7]);
  *(unsigned char *)a4 = v35;
  sub_1C299FCF4(v34, a4 + v36[6]);
  return ((uint64_t (*)(uint64_t, char *, uint64_t))v31)(a4 + v36[8], v18, v11);
}

uint64_t sub_1C299FC90(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TimeBasedDistribution();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C299FCF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TimeBasedDistributionChartDesign();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for TimeBasedDistributionChartModelFactory()
{
  return &type metadata for TimeBasedDistributionChartModelFactory;
}

uint64_t *AFibBurdenPDFHistogramTextSupport.__allocating_init(maxBucketTextSupport:now:calendarCache:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = __swift_mutable_project_boxed_opaque_existential_1(a1, v7);
  uint64_t v10 = sub_1C29A1000(v9, a2, a3, v3, v7, v8);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v10;
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

Swift::String __swiftcall AFibBurdenPDFHistogramTextSupport.makeTitle(for:)(HealthVisualization::TimeBasedDistributionFlavor a1)
{
  uint64_t v1 = sub_1C29A1104(a1 & 1);
  result._uint64_t object = v2;
  result._uint64_t countAndFlagsBits = v1;
  return result;
}

uint64_t AFibBurdenPDFHistogramTextSupport.makeDescription(for:flavor:)(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = a2 & 1;
  uint64_t v6 = v3[5];
  uint64_t v7 = v3[6];
  __swift_project_boxed_opaque_existential_1(v3 + 2, v6);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 8))(&v22, a1, v5, v6, v7);
  long long v8 = v22;
  uint64_t v9 = v23;
  sub_1C29A1518(0, &qword_1EBB923B8, (uint64_t (*)(uint64_t))sub_1C29A1210, MEMORY[0x1E4FBBE00]);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C2AA6B00;
  *(void *)(inited + 32) = 0xD000000000000017;
  *(void *)(inited + 40) = 0x80000001C2AB7510;
  *(void *)(inited + 48) = sub_1C29A0228();
  *(void *)(inited + 56) = v11;
  unint64_t v12 = sub_1C2A7BC94(inited);
  if (v9)
  {
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&long long v22 = v12;
    sub_1C2960884(*((uint64_t *)&v8 + 1), v9, 0x4B4355425F58414DLL, 0xEF5453494C5F5445, isUniquelyReferenced_nonNull_native);
    unint64_t v12 = v22;
    swift_bridgeObjectRelease();
  }
  unint64_t v14 = 0xD00000000000002DLL;
  unint64_t v15 = 0x80000001C2AB7530;
  if ((void)v8 == 1) {
    unint64_t v16 = 0xD000000000000035;
  }
  else {
    unint64_t v16 = 0xD00000000000002DLL;
  }
  if ((void)v8 == 1) {
    unint64_t v15 = 0x80000001C2AB7580;
  }
  if ((void)v8 == 2)
  {
    unint64_t v16 = 0xD000000000000035;
    unint64_t v15 = 0x80000001C2AB7580;
  }
  unint64_t v17 = 0x80000001C2AB75C0;
  if ((void)v8 == 1)
  {
    unint64_t v14 = 0xD000000000000035;
    unint64_t v17 = 0x80000001C2AB75F0;
  }
  if ((void)v8 == 2)
  {
    unint64_t v14 = 0xD000000000000035;
    unint64_t v17 = 0x80000001C2AB75F0;
  }
  if (v5) {
    uint64_t v18 = v14;
  }
  else {
    uint64_t v18 = v16;
  }
  if (v5) {
    unint64_t v19 = v17;
  }
  else {
    unint64_t v19 = v15;
  }
  swift_bridgeObjectRelease();
  long long v22 = 0u;
  long long v23 = 0u;
  if (qword_1EBB92310 != -1) {
    swift_once();
  }
  uint64_t v20 = sub_1C2934FE8(v18, v19, v12, (uint64_t)&v22, 0xD000000000000016, 0x80000001C2AB7560);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1C2935868((uint64_t)&v22);
  return v20;
}

void sub_1C29A00B4()
{
  id v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28C20]), sel_init);
  uint64_t v1 = (void *)sub_1C2A9DCF8();
  objc_msgSend(v0, sel_setDateTemplate_, v1);

  qword_1EA32B5C8 = (uint64_t)v0;
}

uint64_t *AFibBurdenPDFHistogramTextSupport.init(maxBucketTextSupport:now:calendarCache:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = __swift_mutable_project_boxed_opaque_existential_1(a1, v7);
  __n128 v10 = MEMORY[0x1F4188790](v9);
  unint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v13 + 16))(v12, v10);
  unint64_t v14 = sub_1C29A0F2C((uint64_t)v12, a2, a3, v3, v7, v8);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v14;
}

uint64_t sub_1C29A0228()
{
  uint64_t v19 = *v0;
  uint64_t v1 = sub_1C2A9CEE8();
  uint64_t v20 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v3 = (char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C29A139C();
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1C2A9C398();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  unint64_t v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C29A05AC((uint64_t)v12);
  if (qword_1EA31DC58 != -1) {
    swift_once();
  }
  uint64_t v13 = (void *)qword_1EA32B5C8;
  unint64_t v14 = (void *)sub_1C2A9C318();
  id v15 = objc_msgSend(v13, sel_stringFromDateInterval_, v14);

  if (v15)
  {
    uint64_t v16 = sub_1C2A9DD28();
  }
  else
  {
    if (qword_1EBB8F758 != -1) {
      swift_once();
    }
    uint64_t v17 = __swift_project_value_buffer(v5, (uint64_t)qword_1EBB8FAC8);
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v17, v5);
    *(void *)(swift_allocObject() + 16) = v19;
    sub_1C2A9CE58();
    sub_1C2A9CE98();
    swift_release();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v3, v1);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t v16 = 0;
  }
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return v16;
}

uint64_t sub_1C29A05AC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v71 = a1;
  uint64_t v61 = *v1;
  uint64_t v3 = sub_1C2A9CEE8();
  uint64_t v65 = *(void *)(v3 - 8);
  uint64_t v66 = v3;
  MEMORY[0x1F4188790](v3);
  uint64_t v63 = (char *)&v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C29A139C();
  uint64_t v64 = v5;
  uint64_t v62 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v60 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1C2A9C858();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C29A1518(0, &qword_1EBB92520, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v11 - 8);
  char v56 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  id v15 = (char *)&v50 - v14;
  uint64_t v16 = sub_1C2A9C6E8();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v53 = (char *)&v50 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  uint64_t v69 = (char *)&v50 - v20;
  MEMORY[0x1F4188790](v21);
  uint64_t v52 = (char *)&v50 - v22;
  MEMORY[0x1F4188790](v23);
  uint64_t v67 = (char *)&v50 - v24;
  uint64_t v70 = sub_1C2A9C868();
  uint64_t v68 = *(void *)(v70 - 8);
  *(void *)&double v25 = MEMORY[0x1F4188790](v70).n128_u64[0];
  uint64_t v27 = (char *)&v50 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v28 = objc_msgSend(*(id *)((char *)v2 + OBJC_IVAR____TtC19HealthVisualization33AFibBurdenPDFHistogramTextSupport_calendarCache), sel_currentCalendar, v25);
  sub_1C2A9C7E8();

  uint64_t v29 = *MEMORY[0x1E4F27BF0];
  uint64_t v55 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 104);
  v55(v10, v29, v7);
  uint64_t v59 = (char *)v2 + OBJC_IVAR____TtC19HealthVisualization33AFibBurdenPDFHistogramTextSupport_now;
  sub_1C2A9C818();
  uint64_t v30 = *(void (**)(char *, char *))(v8 + 8);
  uint64_t v57 = v8 + 8;
  uint64_t v58 = (char *)v7;
  BOOL v54 = v30;
  v30(v10, (char *)v7);
  uint64_t v72 = v17;
  uint64_t v31 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  uint64_t v32 = (uint64_t)v15;
  if (v31((uint64_t)v15, 1, v16) == 1)
  {
    uint64_t v33 = v72;
    uint64_t v58 = v27;
    uint64_t v34 = v16;
  }
  else
  {
    id v51 = *(void (**)(char *, char *, uint64_t))(v72 + 32);
    v51(v67, v15, v16);
    uint64_t v35 = v29;
    uint64_t v36 = v58;
    v55(v10, v35, (uint64_t)v58);
    uint64_t v32 = (uint64_t)v56;
    sub_1C2A9C818();
    v54(v10, v36);
    char v37 = v27;
    if (v31(v32, 1, v16) != 1)
    {
      BOOL v44 = v52;
      v51(v52, (char *)v32, v16);
      uint64_t v45 = v72;
      uint64_t v46 = *(void (**)(char *, char *, uint64_t))(v72 + 16);
      v46(v69, v44, v16);
      uint64_t v47 = v67;
      v46(v53, v67, v16);
      sub_1C2A9C358();
      uint64_t v48 = *(void (**)(char *, uint64_t))(v45 + 8);
      v48(v44, v16);
      v48(v47, v16);
      return (*(uint64_t (**)(char *, uint64_t))(v68 + 8))(v37, v70);
    }
    uint64_t v58 = v27;
    uint64_t v33 = v72;
    uint64_t v34 = v16;
    (*(void (**)(char *, uint64_t))(v72 + 8))(v67, v16);
  }
  sub_1C296B074(v32);
  if (qword_1EBB8F758 != -1) {
    swift_once();
  }
  uint64_t v38 = v64;
  uint64_t v39 = __swift_project_value_buffer(v64, (uint64_t)qword_1EBB8FAC8);
  uint64_t v40 = v62;
  uint64_t v41 = v60;
  (*(void (**)(char *, uint64_t, uint64_t))(v62 + 16))(v60, v39, v38);
  *(void *)(swift_allocObject() + 16) = v61;
  uint64_t v42 = v63;
  uint64_t v43 = v66;
  sub_1C2A9CE58();
  sub_1C2A9CE98();
  swift_release();
  (*(void (**)(char *, uint64_t))(v65 + 8))(v42, v43);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v41, v38);
  (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v69, v59, v34);
  sub_1C2A9C368();
  char v37 = v58;
  return (*(uint64_t (**)(char *, uint64_t))(v68 + 8))(v37, v70);
}

uint64_t sub_1C29A0D54()
{
  return 0;
}

uint64_t AFibBurdenPDFHistogramTextSupport.deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  uint64_t v1 = v0 + OBJC_IVAR____TtC19HealthVisualization33AFibBurdenPDFHistogramTextSupport_now;
  uint64_t v2 = sub_1C2A9C6E8();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return v0;
}

uint64_t AFibBurdenPDFHistogramTextSupport.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  uint64_t v1 = v0 + OBJC_IVAR____TtC19HealthVisualization33AFibBurdenPDFHistogramTextSupport_now;
  uint64_t v2 = sub_1C2A9C6E8();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t *sub_1C29A0F2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  a4[5] = a5;
  a4[6] = a6;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a4 + 2);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(boxed_opaque_existential_1, a1, a5);
  uint64_t v12 = (char *)a4 + OBJC_IVAR____TtC19HealthVisualization33AFibBurdenPDFHistogramTextSupport_now;
  uint64_t v13 = sub_1C2A9C6E8();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32))(v12, a2, v13);
  *(uint64_t *)((char *)a4 + OBJC_IVAR____TtC19HealthVisualization33AFibBurdenPDFHistogramTextSupport_calendarCache) = a3;
  return a4;
}

uint64_t *sub_1C29A1000(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = (uint64_t *)swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, a5);
  return sub_1C29A0F2C((uint64_t)v13, a2, a3, v14, a5, a6);
}

uint64_t sub_1C29A1104(char a1)
{
  if (a1)
  {
    long long v4 = 0uLL;
    long long v5 = 0uLL;
    if (qword_1EBB92310 != -1) {
      swift_once();
    }
    uint64_t v1 = "AFIB_BURDEN_PDF_HISTOGRAM_TIME_OF_DAY_TITLE";
  }
  else
  {
    long long v4 = 0uLL;
    long long v5 = 0uLL;
    if (qword_1EBB92310 != -1) {
      swift_once();
    }
    uint64_t v1 = "AFIB_BURDEN_PDF_HISTOGRAM_DAY_OF_WEEK_TITLE";
  }
  uint64_t v2 = sub_1C2934FE8(0xD00000000000002BLL, (unint64_t)(v1 - 32) | 0x8000000000000000, 0, (uint64_t)&v4, 0xD000000000000016, 0x80000001C2AB7560);
  sub_1C2935868((uint64_t)&v4);
  return v2;
}

void sub_1C29A1210()
{
  if (!qword_1EBB92380)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EBB92380);
    }
  }
}

uint64_t sub_1C29A1274()
{
  return type metadata accessor for AFibBurdenPDFHistogramTextSupport();
}

uint64_t type metadata accessor for AFibBurdenPDFHistogramTextSupport()
{
  uint64_t result = qword_1EA31E558;
  if (!qword_1EA31E558) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1C29A12C8()
{
  uint64_t result = sub_1C2A9C6E8();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for AFibBurdenPDFHistogramTextSupport(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for AFibBurdenPDFHistogramTextSupport);
}

uint64_t dispatch thunk of AFibBurdenPDFHistogramTextSupport.__allocating_init(maxBucketTextSupport:now:calendarCache:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

void sub_1C29A139C()
{
  if (!qword_1EBB8FDF0)
  {
    sub_1C2A9CEE8();
    sub_1C29A148C(&qword_1EBB8FE08);
    sub_1C29A148C(&qword_1EBB8FDF8);
    sub_1C29A148C(&qword_1EBB8FE00);
    unint64_t v0 = sub_1C2A9CEB8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EBB8FDF0);
    }
  }
}

uint64_t sub_1C29A148C(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1C2A9CEE8();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1C29A14D0()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1C29A14E0()
{
  return sub_1C29A0D54();
}

void sub_1C29A1518(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_1C29A157C()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1C29A158C()
{
  return sub_1C29A0D54();
}

uint64_t sub_1C29A15C4(uint64_t a1)
{
  return sub_1C29A177C(a1, type metadata accessor for TimeBasedDistributionChartPoint.TimeOfDay, type metadata accessor for TimeBasedDistributionChartPoint.TimeOfDay, (uint64_t)&protocol witness table for TimeBasedDistributionChartPoint.TimeOfDay, type metadata accessor for TimeBasedDistributionChartPoint.TimeOfDay);
}

uint64_t sub_1C29A160C(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (v1)
  {
    uint64_t v9 = MEMORY[0x1E4FBC860];
    sub_1C2978A0C(0, v1, 0);
    uint64_t v2 = v9;
    uint64_t v4 = a1 + 40;
    do
    {
      swift_bridgeObjectRetain();
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1C2978A0C(0, *(void *)(v2 + 16) + 1, 1);
        uint64_t v2 = v9;
      }
      unint64_t v6 = *(void *)(v2 + 16);
      unint64_t v5 = *(void *)(v2 + 24);
      if (v6 >= v5 >> 1)
      {
        sub_1C2978A0C(v5 > 1, v6 + 1, 1);
        uint64_t v2 = v9;
      }
      v4 += 16;
      *(void *)(v2 + 16) = v6 + 1;
      sub_1C2937880(&v8, (_OWORD *)(v2 + 32 * v6 + 32));
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_1C29A1734(uint64_t a1)
{
  return sub_1C29A177C(a1, type metadata accessor for TimeBasedDistributionChartPoint.DayOfWeek, type metadata accessor for TimeBasedDistributionChartPoint.DayOfWeek, (uint64_t)&protocol witness table for TimeBasedDistributionChartPoint.DayOfWeek, type metadata accessor for TimeBasedDistributionChartPoint.DayOfWeek);
}

uint64_t sub_1C29A177C(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v21 = a5;
  uint64_t v8 = a2(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v20 - v10;
  int64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = MEMORY[0x1E4FBC860];
  if (v12)
  {
    uint64_t v25 = MEMORY[0x1E4FBC860];
    sub_1C29789EC(0, v12, 0);
    uint64_t v13 = v25;
    uint64_t v14 = a1 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v15 = *(void *)(v9 + 72);
    do
    {
      sub_1C29A40A4(v14, (uint64_t)v11, a3);
      uint64_t v25 = v13;
      unint64_t v17 = *(void *)(v13 + 16);
      unint64_t v16 = *(void *)(v13 + 24);
      if (v17 >= v16 >> 1)
      {
        sub_1C29789EC(v16 > 1, v17 + 1, 1);
        uint64_t v13 = v25;
      }
      uint64_t v23 = v8;
      uint64_t v24 = a4;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v22);
      sub_1C29A40A4((uint64_t)v11, (uint64_t)boxed_opaque_existential_1, a3);
      *(void *)(v13 + 16) = v17 + 1;
      sub_1C2943434(&v22, v13 + 40 * v17 + 32);
      sub_1C29A410C((uint64_t)v11, v21);
      v14 += v15;
      --v12;
    }
    while (v12);
  }
  return v13;
}

uint64_t *TimeBasedDistributionMaxBucketTextSupport.__allocating_init(componentRangeOrderProvider:logger:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = __swift_mutable_project_boxed_opaque_existential_1(a1, v5);
  uint64_t v8 = sub_1C29A2C90(v7, a2, v2, v5, v6);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v8;
}

uint64_t TimeBasedDistributionMaxBucketTextSupport.MaxBucketInformation.numberOfMaximums.getter()
{
  return *(void *)v0;
}

uint64_t TimeBasedDistributionMaxBucketTextSupport.MaxBucketInformation.numberOfMaximums.setter(uint64_t result)
{
  void *v1 = result;
  return result;
}

uint64_t (*TimeBasedDistributionMaxBucketTextSupport.MaxBucketInformation.numberOfMaximums.modify())()
{
  return nullsub_1;
}

uint64_t TimeBasedDistributionMaxBucketTextSupport.MaxBucketInformation.maxBucketDescription.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TimeBasedDistributionMaxBucketTextSupport.MaxBucketInformation.maxBucketDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 8) = a1;
  *(void *)(v2 + 16) = a2;
  return result;
}

uint64_t (*TimeBasedDistributionMaxBucketTextSupport.MaxBucketInformation.maxBucketDescription.modify())()
{
  return nullsub_1;
}

HealthVisualization::TimeBasedDistributionMaxBucketTextSupport::MaxBucketInformation __swiftcall TimeBasedDistributionMaxBucketTextSupport.MaxBucketInformation.init(numberOfMaximums:maxBucketDescription:)(Swift::Int numberOfMaximums, Swift::String_optional maxBucketDescription)
{
  *(void *)uint64_t v2 = numberOfMaximums;
  *(Swift::String_optional *)(v2 + 8) = maxBucketDescription;
  result.maxBucketDescription = maxBucketDescription;
  result.numberOfMaximums = numberOfMaximums;
  return result;
}

uint64_t *TimeBasedDistributionMaxBucketTextSupport.init(componentRangeOrderProvider:logger:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = __swift_mutable_project_boxed_opaque_existential_1(a1, v5);
  __n128 v8 = MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v11 + 16))(v10, v8);
  int64_t v12 = sub_1C29A2AA8((uint64_t)v10, a2, v2, v5, v6);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v12;
}

void TimeBasedDistributionMaxBucketTextSupport.extractMaxBucketInformation(distribution:flavor:)(uint64_t a1@<X0>, char a2@<W1>, unint64_t *a3@<X8>)
{
  uint64_t v5 = a2 & 1;
  uint64_t v6 = *(void *)(a1 + *(int *)(type metadata accessor for TimeBasedDistribution() + 20));
  uint64_t v7 = v3[5];
  uint64_t v8 = v3[6];
  uint64_t v41 = (uint64_t)v3;
  __swift_project_boxed_opaque_existential_1(v3 + 2, v7);
  char v40 = v5;
  uint64_t v9 = (unint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 8))(v5, v7, v8);
  uint64_t v44 = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1C29A3D20(&v44, v9);
  swift_bridgeObjectRelease();
  uint64_t v42 = a3;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(v44 + 16);
  if (v10)
  {
    uint64_t v11 = (void *)(v44 + 64);
    uint64_t v12 = MEMORY[0x1E4FBC860];
    do
    {
      if (*((unsigned char *)v11 - 7) == 1)
      {
        long long v43 = *((_OWORD *)v11 - 2);
        uint64_t v16 = *(v11 - 2);
        char v17 = *((unsigned char *)v11 - 8);
        uint64_t v18 = *v11;
        swift_bridgeObjectRetain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v44 = v12;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_1C29789AC(0, *(void *)(v12 + 16) + 1, 1);
          uint64_t v12 = v44;
        }
        unint64_t v14 = *(void *)(v12 + 16);
        unint64_t v13 = *(void *)(v12 + 24);
        if (v14 >= v13 >> 1)
        {
          sub_1C29789AC(v13 > 1, v14 + 1, 1);
          uint64_t v12 = v44;
        }
        *(void *)(v12 + 16) = v14 + 1;
        uint64_t v15 = v12 + 40 * v14;
        *(_OWORD *)(v15 + 32) = v43;
        *(void *)(v15 + 48) = v16;
        *(unsigned char *)(v15 + 56) = v17;
        *(unsigned char *)(v15 + 57) = 1;
        *(void *)(v15 + 64) = v18;
      }
      v11 += 5;
      --v10;
    }
    while (v10);
  }
  else
  {
    uint64_t v12 = MEMORY[0x1E4FBC860];
  }
  swift_release();
  unint64_t v20 = *(void *)(v12 + 16);
  if (v20)
  {
    if (v20 <= 2)
    {
      swift_retain();
      uint64_t v33 = sub_1C29A2B64(v12, v41, v40);
      swift_release();
      swift_release();
      id v34 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28DF8]), sel_init);
      sub_1C29A160C(v33);
      swift_bridgeObjectRelease();
      uint64_t v35 = (void *)sub_1C2A9DE88();
      swift_bridgeObjectRelease();
      id v36 = objc_msgSend(v34, sel_stringFromItems_, v35);

      if (v36)
      {
        uint64_t v37 = sub_1C2A9DD28();
        unint64_t v39 = v38;
      }
      else
      {
        uint64_t v37 = 0;
        unint64_t v39 = 0;
      }
      *uint64_t v42 = v20;
      v42[1] = v37;
      v42[2] = v39;
    }
    else
    {
      swift_retain_n();
      uint64_t v21 = sub_1C2A9CFC8();
      os_log_type_t v22 = sub_1C2A9E0C8();
      if (os_log_type_enabled(v21, v22))
      {
        uint64_t v23 = (uint8_t *)swift_slowAlloc();
        uint64_t v24 = swift_slowAlloc();
        uint64_t v44 = v24;
        *(_DWORD *)uint64_t v23 = 136446210;
        swift_retain();
        uint64_t v25 = sub_1C2A9DD58();
        sub_1C2957168(v25, v26, &v44);
        sub_1C2A9E358();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C292A000, v21, v22, "[%{public}s] Too many buckets", v23, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1C87656F0](v24, -1, -1);
        MEMORY[0x1C87656F0](v23, -1, -1);
        swift_release();
      }
      else
      {
        swift_release();
        swift_release_n();
      }

      v42[1] = 0;
      v42[2] = 0;
      *uint64_t v42 = v20;
    }
  }
  else
  {
    swift_retain_n();
    uint64_t v27 = sub_1C2A9CFC8();
    os_log_type_t v28 = sub_1C2A9E0C8();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      uint64_t v30 = swift_slowAlloc();
      uint64_t v44 = v30;
      *(_DWORD *)uint64_t v29 = 136446210;
      swift_retain();
      uint64_t v31 = sub_1C2A9DD58();
      sub_1C2957168(v31, v32, &v44);
      sub_1C2A9E358();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C292A000, v27, v28, "[%{public}s] Too few buckets", v29, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C87656F0](v30, -1, -1);
      MEMORY[0x1C87656F0](v29, -1, -1);
      swift_release();
    }
    else
    {
      swift_release();
      swift_release_n();
    }

    *uint64_t v42 = 0;
    v42[1] = 0;
    v42[2] = 0;
  }
}

uint64_t sub_1C29A20F4(uint64_t *a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *a1;
  if (a2)
  {
    switch(__ROR8__(v4, 2))
    {
      case 0:
        long long v18 = 0u;
        long long v19 = 0u;
        if (qword_1EBB92310 != -1) {
          swift_once();
        }
        uint64_t v5 = 0xD00000000000003ELL;
        uint64_t v6 = "TIME_BASED_DISTRIBUTION_TIME_OF_DAY_BUCKET_MIDNIGHT_TO_FOUR_AM";
        goto LABEL_50;
      case 1:
        long long v18 = 0u;
        long long v19 = 0u;
        if (qword_1EBB92310 != -1) {
          swift_once();
        }
        uint64_t v5 = 0xD00000000000003ELL;
        uint64_t v6 = "TIME_BASED_DISTRIBUTION_TIME_OF_DAY_BUCKET_FOUR_AM_TO_EIGHT_AM";
        goto LABEL_50;
      case 2:
        long long v18 = 0u;
        long long v19 = 0u;
        if (qword_1EBB92310 != -1) {
          swift_once();
        }
        uint64_t v5 = 0xD00000000000003BLL;
        uint64_t v6 = "TIME_BASED_DISTRIBUTION_TIME_OF_DAY_BUCKET_EIGHT_AM_TO_NOON";
        goto LABEL_50;
      case 3:
        long long v18 = 0u;
        long long v19 = 0u;
        if (qword_1EBB92310 != -1) {
          swift_once();
        }
        uint64_t v5 = 0xD00000000000003ALL;
        uint64_t v6 = "TIME_BASED_DISTRIBUTION_TIME_OF_DAY_BUCKET_NOON_TO_FOUR_PM";
        goto LABEL_50;
      case 4:
        long long v18 = 0u;
        long long v19 = 0u;
        if (qword_1EBB92310 != -1) {
          swift_once();
        }
        uint64_t v5 = 0xD00000000000003ELL;
        uint64_t v6 = "TIME_BASED_DISTRIBUTION_TIME_OF_DAY_BUCKET_FOUR_PM_TO_EIGHT_PM";
        goto LABEL_50;
      case 5:
        long long v18 = 0u;
        long long v19 = 0u;
        if (qword_1EBB92310 != -1) {
          swift_once();
        }
        uint64_t v5 = 0xD00000000000003FLL;
        uint64_t v6 = "TIME_BASED_DISTRIBUTION_TIME_OF_DAY_BUCKET_EIGHT_PM_TO_MIDNIGHT";
LABEL_50:
        uint64_t v16 = sub_1C2934FE8(v5, (unint64_t)(v6 - 32) | 0x8000000000000000, 0, (uint64_t)&v18, 0xD000000000000015, 0x80000001C2AB7830);
        sub_1C29A410C((uint64_t)&v18, (uint64_t (*)(void))sub_1C2935950);
        return v16;
      default:
        swift_retain_n();
        swift_bridgeObjectRetain_n();
        uint64_t v7 = sub_1C2A9CFC8();
        os_log_type_t v8 = sub_1C2A9E0B8();
        if (os_log_type_enabled(v7, v8))
        {
          uint64_t v9 = swift_slowAlloc();
          uint64_t v10 = swift_slowAlloc();
          *(void *)&long long v18 = v10;
          *(_DWORD *)uint64_t v9 = 136446466;
          uint64_t v20 = v3;
          swift_retain();
          uint64_t v11 = sub_1C2A9DD58();
          uint64_t v20 = sub_1C2957168(v11, v12, (uint64_t *)&v18);
          sub_1C2A9E358();
          swift_release_n();
          swift_bridgeObjectRelease();
          *(_WORD *)(v9 + 12) = 2048;
          swift_bridgeObjectRelease();
          uint64_t v20 = v4;
          sub_1C2A9E358();
          swift_bridgeObjectRelease();
          unint64_t v13 = "[%{public}s] Given time of day component outside of expected bounds: %ld";
          goto LABEL_29;
        }
LABEL_30:
        swift_release_n();

        swift_bridgeObjectRelease_n();
        break;
    }
  }
  else
  {
    switch(v4)
    {
      case 0:
        long long v18 = 0u;
        long long v19 = 0u;
        if (qword_1EBB92310 != -1) {
          swift_once();
        }
        uint64_t v5 = 0xD000000000000032;
        uint64_t v6 = "TIME_BASED_DISTRIBUTION_DAY_OF_WEEK_BUCKET_SUNDAYS";
        goto LABEL_50;
      case 1:
        long long v18 = 0u;
        long long v19 = 0u;
        if (qword_1EBB92310 != -1) {
          swift_once();
        }
        uint64_t v5 = 0xD000000000000032;
        uint64_t v6 = "TIME_BASED_DISTRIBUTION_DAY_OF_WEEK_BUCKET_MONDAYS";
        goto LABEL_50;
      case 2:
        long long v18 = 0u;
        long long v19 = 0u;
        if (qword_1EBB92310 != -1) {
          swift_once();
        }
        uint64_t v5 = 0xD000000000000033;
        uint64_t v6 = "TIME_BASED_DISTRIBUTION_DAY_OF_WEEK_BUCKET_TUESDAYS";
        goto LABEL_50;
      case 3:
        long long v18 = 0u;
        long long v19 = 0u;
        if (qword_1EBB92310 != -1) {
          swift_once();
        }
        uint64_t v5 = 0xD000000000000035;
        uint64_t v6 = "TIME_BASED_DISTRIBUTION_DAY_OF_WEEK_BUCKET_WEDNESDAYS";
        goto LABEL_50;
      case 4:
        long long v18 = 0u;
        long long v19 = 0u;
        if (qword_1EBB92310 != -1) {
          swift_once();
        }
        uint64_t v5 = 0xD000000000000034;
        uint64_t v6 = "TIME_BASED_DISTRIBUTION_DAY_OF_WEEK_BUCKET_THURSDAYS";
        goto LABEL_50;
      case 5:
        long long v18 = 0u;
        long long v19 = 0u;
        if (qword_1EBB92310 != -1) {
          swift_once();
        }
        uint64_t v5 = 0xD000000000000032;
        uint64_t v6 = "TIME_BASED_DISTRIBUTION_DAY_OF_WEEK_BUCKET_FRIDAYS";
        goto LABEL_50;
      case 6:
        long long v18 = 0u;
        long long v19 = 0u;
        if (qword_1EBB92310 != -1) {
          swift_once();
        }
        uint64_t v5 = 0xD000000000000034;
        uint64_t v6 = "TIME_BASED_DISTRIBUTION_DAY_OF_WEEK_BUCKET_SATURDAYS";
        goto LABEL_50;
      default:
        swift_retain_n();
        swift_bridgeObjectRetain_n();
        uint64_t v7 = sub_1C2A9CFC8();
        os_log_type_t v8 = sub_1C2A9E0B8();
        if (!os_log_type_enabled(v7, v8)) {
          goto LABEL_30;
        }
        uint64_t v9 = swift_slowAlloc();
        uint64_t v10 = swift_slowAlloc();
        *(void *)&long long v18 = v10;
        *(_DWORD *)uint64_t v9 = 136446466;
        uint64_t v20 = v3;
        swift_retain();
        uint64_t v14 = sub_1C2A9DD58();
        uint64_t v20 = sub_1C2957168(v14, v15, (uint64_t *)&v18);
        sub_1C2A9E358();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v9 + 12) = 2048;
        swift_bridgeObjectRelease();
        uint64_t v20 = v4;
        sub_1C2A9E358();
        swift_bridgeObjectRelease();
        unint64_t v13 = "[%{public}s] Given day of week component outside of expected bounds: %ld";
        break;
    }
LABEL_29:
    _os_log_impl(&dword_1C292A000, v7, v8, v13, (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1C87656F0](v10, -1, -1);
    MEMORY[0x1C87656F0](v9, -1, -1);
  }
  return 0;
}

uint64_t TimeBasedDistributionMaxBucketTextSupport.deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  uint64_t v1 = v0 + OBJC_IVAR____TtC19HealthVisualization41TimeBasedDistributionMaxBucketTextSupport_logger;
  uint64_t v2 = sub_1C2A9CFE8();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t TimeBasedDistributionMaxBucketTextSupport.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  uint64_t v1 = v0 + OBJC_IVAR____TtC19HealthVisualization41TimeBasedDistributionMaxBucketTextSupport_logger;
  uint64_t v2 = sub_1C2A9CFE8();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

void sub_1C29A2A80(uint64_t a1@<X0>, char a2@<W1>, unint64_t *a3@<X8>)
{
}

uint64_t *sub_1C29A2AA8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  a3[5] = a4;
  a3[6] = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a3 + 2);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(boxed_opaque_existential_1, a1, a4);
  uint64_t v10 = (char *)a3 + OBJC_IVAR____TtC19HealthVisualization41TimeBasedDistributionMaxBucketTextSupport_logger;
  uint64_t v11 = sub_1C2A9CFE8();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v10, a2, v11);
  return a3;
}

uint64_t sub_1C29A2B64(uint64_t a1, uint64_t a2, char a3)
{
  int64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = MEMORY[0x1E4FBC860];
  if (v3)
  {
    char v6 = a3 & 1;
    uint64_t v24 = MEMORY[0x1E4FBC860];
    sub_1C29788FC(0, v3, 0);
    uint64_t v4 = v24;
    uint64_t v7 = (void *)(a1 + 64);
    do
    {
      uint64_t v8 = *(v7 - 2);
      char v9 = *((unsigned char *)v7 - 8);
      char v10 = *((unsigned char *)v7 - 7);
      uint64_t v11 = *v7;
      long long v19 = *((_OWORD *)v7 - 2);
      uint64_t v20 = v8;
      char v21 = v9;
      char v22 = v10;
      uint64_t v23 = v11;
      swift_bridgeObjectRetain();
      uint64_t v12 = sub_1C29A20F4((uint64_t *)&v19, v6);
      uint64_t v14 = v13;
      swift_bridgeObjectRelease();
      uint64_t v24 = v4;
      unint64_t v16 = *(void *)(v4 + 16);
      unint64_t v15 = *(void *)(v4 + 24);
      if (v16 >= v15 >> 1)
      {
        sub_1C29788FC(v15 > 1, v16 + 1, 1);
        uint64_t v4 = v24;
      }
      *(void *)(v4 + 16) = v16 + 1;
      uint64_t v17 = v4 + 16 * v16;
      *(void *)(v17 + 32) = v12;
      *(void *)(v17 + 40) = v14;
      v7 += 5;
      --v3;
    }
    while (v3);
  }
  return v4;
}

uint64_t *sub_1C29A2C90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (uint64_t *)swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, a4);
  return sub_1C29A2AA8((uint64_t)v11, a2, v12, a4, a5);
}

uint64_t sub_1C29A2D90(char *__src, char *a2, char *a3, char *__dst, unint64_t *a5)
{
  char v6 = __dst;
  uint64_t v7 = a3;
  uint64_t v8 = a2;
  uint64_t v9 = __src;
  int64_t v10 = a2 - __src;
  int64_t v11 = (a2 - __src) / 40;
  uint64_t v12 = a3 - a2;
  uint64_t v13 = (a3 - a2) / 40;
  BOOL v54 = __src;
  uint64_t v53 = __dst;
  if (v11 < v13)
  {
    if (v10 < -39) {
      goto LABEL_84;
    }
    if (__dst != __src || &__src[40 * v11] <= __dst) {
      memmove(__dst, __src, 40 * v11);
    }
    uint64_t v14 = &v6[40 * v11];
    uint64_t v52 = v14;
    if (v8 < v7 && v10 >= 40)
    {
      unint64_t v15 = a5[2];
      unint64_t v16 = a5 + 5;
      if (v15 <= 1) {
        uint64_t v17 = 1;
      }
      else {
        uint64_t v17 = a5[2];
      }
      uint64_t v18 = v17 - 1;
      while (1)
      {
        if (v15)
        {
          uint64_t v19 = *(void *)v8;
          uint64_t v20 = *(void *)v6;
          unint64_t v21 = a5[4];
          if (v21 == *(void *)v8)
          {
            if (v19 != v20)
            {
              uint64_t v22 = 0;
              goto LABEL_16;
            }
          }
          else if (v15 != 1)
          {
            if (*v16 == v19)
            {
              if (v21 != v20)
              {
                uint64_t v22 = 1;
LABEL_16:
                uint64_t v23 = 0;
                while (v15 - 1 != v23)
                {
                  if (v18 == v23) {
                    goto LABEL_83;
                  }
                  uint64_t v24 = v16[v23++];
                  if (v24 == v20)
                  {
                    if (v22 > v23 - 1) {
                      goto LABEL_26;
                    }
                    break;
                  }
                }
                uint64_t v25 = v8 + 40;
                if (v9 < v8 || v9 >= v25 || v9 != v8)
                {
                  long long v26 = *(_OWORD *)v8;
                  long long v27 = *((_OWORD *)v8 + 1);
                  *((void *)v9 + 4) = *((void *)v8 + 4);
                  *(_OWORD *)uint64_t v9 = v26;
                  *((_OWORD *)v9 + 1) = v27;
                }
                goto LABEL_29;
              }
            }
            else
            {
              uint64_t v30 = 0;
              while (v15 - 2 != v30)
              {
                unint64_t v31 = a5[v30++ + 6];
                if (v31 == v19)
                {
                  if (v21 == v20) {
                    break;
                  }
                  uint64_t v22 = v30 + 1;
                  goto LABEL_16;
                }
              }
            }
          }
        }
LABEL_26:
        if (v9 != v6)
        {
          long long v28 = *(_OWORD *)v6;
          long long v29 = *((_OWORD *)v6 + 1);
          *((void *)v9 + 4) = *((void *)v6 + 4);
          *(_OWORD *)uint64_t v9 = v28;
          *((_OWORD *)v9 + 1) = v29;
        }
        v6 += 40;
        uint64_t v53 = v6;
        uint64_t v25 = v8;
LABEL_29:
        v9 += 40;
        if (v6 < v14)
        {
          uint64_t v8 = v25;
          if (v25 < v7) {
            continue;
          }
        }
        BOOL v54 = v9;
        break;
      }
    }
LABEL_81:
    sub_1C2A07188((void **)&v54, (const void **)&v53, &v52);
    return 1;
  }
  if (v12 < -39) {
    goto LABEL_84;
  }
  if (__dst != a2 || &a2[40 * v13] <= __dst) {
    memmove(__dst, a2, 40 * v13);
  }
  unint64_t v32 = &v6[40 * v13];
  uint64_t v52 = v32;
  BOOL v54 = v8;
  if (v9 >= v8 || v12 < 40) {
    goto LABEL_81;
  }
  unint64_t v33 = a5[2];
  id v34 = a5 + 5;
  if (v33 <= 1) {
    uint64_t v35 = 1;
  }
  else {
    uint64_t v35 = a5[2];
  }
  uint64_t v36 = v35 - 1;
  while (1)
  {
    uint64_t v37 = v7 - 40;
    uint64_t v38 = *((void *)v32 - 5);
    if (!v33) {
      goto LABEL_64;
    }
    unint64_t v39 = v8 - 40;
    uint64_t v40 = *((void *)v8 - 5);
    unint64_t v41 = a5[4];
    if (v41 == v38)
    {
      if (v38 != v40)
      {
        uint64_t v42 = 0;
        goto LABEL_54;
      }
      goto LABEL_64;
    }
    if (v33 != 1)
    {
      if (*v34 != v38)
      {
        uint64_t v49 = 0;
        while (v33 - 2 != v49)
        {
          unint64_t v50 = a5[v49++ + 6];
          if (v50 == v38)
          {
            if (v41 == v40) {
              goto LABEL_64;
            }
            uint64_t v42 = v49 + 1;
            goto LABEL_54;
          }
        }
        goto LABEL_64;
      }
      if (v41 != v40) {
        break;
      }
    }
LABEL_64:
    uint64_t v52 = v32 - 40;
    if (v7 < v32 || v37 >= v32 || v7 != v32)
    {
      long long v47 = *(_OWORD *)(v32 - 40);
      long long v48 = *(_OWORD *)(v32 - 24);
      *((void *)v7 - 1) = *((void *)v32 - 1);
      *(_OWORD *)uint64_t v37 = v47;
      *(_OWORD *)(v7 - 24) = v48;
    }
    unint64_t v39 = v8;
    v32 -= 40;
LABEL_69:
    if (v39 > v9)
    {
      uint64_t v8 = v39;
      v7 -= 40;
      if (v32 > v6) {
        continue;
      }
    }
    goto LABEL_81;
  }
  uint64_t v42 = 1;
LABEL_54:
  uint64_t v43 = 0;
  while (1)
  {
    if (v33 - 1 == v43) {
      goto LABEL_59;
    }
    if (v36 == v43) {
      break;
    }
    uint64_t v44 = v34[v43++];
    if (v44 == v40)
    {
      if (v42 > v43 - 1) {
        goto LABEL_64;
      }
LABEL_59:
      if (v7 != v8 || v37 >= v8)
      {
        long long v45 = *(_OWORD *)v39;
        long long v46 = *(_OWORD *)(v8 - 24);
        *((void *)v7 - 1) = *((void *)v8 - 1);
        *(_OWORD *)uint64_t v37 = v45;
        *(_OWORD *)(v7 - 24) = v46;
      }
      BOOL v54 = v8 - 40;
      goto LABEL_69;
    }
  }
  __break(1u);
LABEL_83:
  __break(1u);
LABEL_84:
  swift_bridgeObjectRelease();
  uint64_t result = sub_1C2A9E6A8();
  __break(1u);
  return result;
}

uint64_t sub_1C29A31B0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4, void *a5)
{
  if (a3 == a2) {
    return result;
  }
  uint64_t v5 = *a4;
  char v6 = a5 + 5;
  uint64_t v7 = a5[2];
  while (2)
  {
    if (!v7) {
      goto LABEL_4;
    }
    uint64_t v8 = *(void *)(v5 + 40 * a3);
    uint64_t v9 = a3;
    while (1)
    {
      uint64_t v10 = v5 + 40 * v9;
      uint64_t v12 = (_OWORD *)(v10 - 40);
      uint64_t v11 = *(void *)(v10 - 40);
      uint64_t v13 = a5[4];
      if (v13 == v8)
      {
        if (v8 == v11) {
          goto LABEL_4;
        }
        uint64_t v14 = 0;
        goto LABEL_19;
      }
      if (v7 == 1) {
        goto LABEL_4;
      }
      if (*v6 != v8) {
        break;
      }
      if (v13 == v11) {
        goto LABEL_4;
      }
      uint64_t v14 = 1;
LABEL_19:
      uint64_t v17 = 0;
      uint64_t v18 = v9 - 1;
      while (v7 - 1 != v17)
      {
        uint64_t v19 = v6[v17++];
        if (v19 == v11)
        {
          if (v14 > v17 - 1) {
            goto LABEL_4;
          }
          break;
        }
      }
      if (!v5)
      {
        __break(1u);
        return result;
      }
      uint64_t v20 = v5 + 40 * v9;
      char v21 = *(unsigned char *)(v20 + 24);
      char v22 = *(unsigned char *)(v20 + 25);
      uint64_t v23 = *(void *)(v20 + 32);
      long long v24 = *(_OWORD *)(v10 + 8);
      long long v25 = *(_OWORD *)(v10 - 24);
      *(_OWORD *)uint64_t v10 = *v12;
      *(_OWORD *)(v10 + 16) = v25;
      *(void *)(v10 + 32) = *(void *)(v10 - 8);
      *(void *)uint64_t v12 = v8;
      *(_OWORD *)(v10 - 32) = v24;
      uint64_t v26 = v5 + 40 * v18;
      *(unsigned char *)(v26 + 24) = v21;
      *(unsigned char *)(v26 + 25) = v22;
      *(void *)(v26 + 32) = v23;
      uint64_t v9 = v18;
      if (v18 == result) {
        goto LABEL_4;
      }
    }
    uint64_t v15 = 0;
    while (v7 - 2 != v15)
    {
      uint64_t v16 = a5[v15++ + 6];
      if (v16 == v8)
      {
        if (v13 == v11) {
          break;
        }
        uint64_t v14 = v15 + 1;
        goto LABEL_19;
      }
    }
LABEL_4:
    if (++a3 != a2) {
      continue;
    }
    return result;
  }
}

uint64_t sub_1C29A32F4(uint64_t *a1, unint64_t *a2)
{
  uint64_t v4 = a1[1];
  swift_bridgeObjectRetain_n();
  uint64_t v5 = sub_1C2A9E888();
  if (v5 >= v4)
  {
    if (v4 < 0)
    {
LABEL_203:
      __break(1u);
LABEL_204:
      __break(1u);
      goto LABEL_205;
    }
    if (!v4) {
      return swift_bridgeObjectRelease_n();
    }
    swift_bridgeObjectRetain();
    sub_1C29A31B0(0, v4, 1, a1, a2);
    if (!v148) {
      return swift_bridgeObjectRelease_n();
    }
LABEL_177:
    swift_bridgeObjectRelease_n();
    return swift_bridgeObjectRelease();
  }
  if (v4 >= 0) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = v4 + 1;
  }
  if (v4 < -1) {
    goto LABEL_211;
  }
  char v143 = a2;
  uint64_t v139 = v4;
  uint64_t v136 = v5;
  id v134 = a1;
  if (v4 < 2)
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
    __dst = (char *)(MEMORY[0x1E4FBC860] + 32);
    uint64_t v135 = MEMORY[0x1E4FBC860];
    if (v4 == 1) {
      goto LABEL_13;
    }
    unint64_t v14 = *(void *)(MEMORY[0x1E4FBC860] + 16);
LABEL_164:
    if (v14 >= 2)
    {
      uint64_t v126 = *v134;
      uint64_t v145 = *v134;
      while (1)
      {
        unint64_t v127 = v14 - 2;
        if (v14 < 2) {
          break;
        }
        if (!v126) {
          goto LABEL_210;
        }
        uint64_t v128 = *(void *)&v10[16 * v127 + 32];
        uint64_t v129 = *(void *)&v10[16 * v14 + 24];
        uint64_t v130 = (char *)(v126 + 40 * v128);
        uint64_t v131 = (char *)(v126 + 40 * *(void *)&v10[16 * v14 + 16]);
        id v147 = (char *)(v126 + 40 * v129);
        swift_bridgeObjectRetain();
        sub_1C29A2D90(v130, v131, v147, __dst, v143);
        if (v148) {
          goto LABEL_176;
        }
        swift_bridgeObjectRelease();
        if (v129 < v128) {
          goto LABEL_199;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v10 = sub_1C2A073DC((uint64_t)v10);
        }
        if (v127 >= *((void *)v10 + 2)) {
          goto LABEL_200;
        }
        uint64_t v132 = &v10[16 * v127 + 32];
        *(void *)uint64_t v132 = v128;
        *((void *)v132 + 1) = v129;
        unint64_t v133 = *((void *)v10 + 2);
        if (v14 > v133) {
          goto LABEL_201;
        }
        memmove(&v10[16 * v14 + 16], &v10[16 * v14 + 32], 16 * (v133 - v14));
        *((void *)v10 + 2) = v133 - 1;
        unint64_t v14 = v133 - 1;
        uint64_t v126 = v145;
        if (v133 <= 2) {
          goto LABEL_179;
        }
      }
LABEL_198:
      __break(1u);
LABEL_199:
      __break(1u);
LABEL_200:
      __break(1u);
LABEL_201:
      __break(1u);
      goto LABEL_202;
    }
LABEL_179:
    swift_bridgeObjectRelease();
    *(void *)(v135 + 16) = 0;
    swift_bridgeObjectRelease_n();
    return swift_bridgeObjectRelease();
  }
  uint64_t v7 = v6 >> 1;
  uint64_t v8 = sub_1C2A9DED8();
  *(void *)(v8 + 16) = v7;
  uint64_t v135 = v8;
  __dst = (char *)(v8 + 32);
LABEL_13:
  uint64_t v11 = 0;
  uint64_t v12 = *a1;
  uint64_t v137 = a2 + 6;
  uint64_t v138 = a2 + 5;
  uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v13 = v139;
  uint64_t v141 = *a1;
  while (2)
  {
    uint64_t v15 = v11 + 1;
    if (v11 + 1 >= v13) {
      goto LABEL_82;
    }
    uint64_t v16 = *(void *)(v12 + 40 * v15);
    unint64_t v17 = a2[2];
    if (!v17)
    {
      uint64_t v23 = v137;
      uint64_t v20 = v138;
      goto LABEL_30;
    }
    uint64_t v18 = *(void *)(v12 + 40 * v11);
    unint64_t v19 = a2[4];
    uint64_t v20 = v138;
    if (v19 != v16)
    {
      uint64_t v23 = v137;
      if (v17 != 1)
      {
        if (*v138 == v16)
        {
          if (v19 != v18)
          {
            uint64_t v22 = 1;
LABEL_20:
            uint64_t v21 = 0;
            if (v17 <= 1) {
              uint64_t v24 = 1;
            }
            else {
              uint64_t v24 = a2[2];
            }
            uint64_t v25 = v24 - 1;
            while (v17 - 1 != v21)
            {
              if (v25 == v21) {
                goto LABEL_196;
              }
              uint64_t v26 = v138[v21++];
              if (v26 == v18) {
                goto LABEL_42;
              }
            }
            uint64_t v15 = v11 + 2;
            if (v11 + 2 >= v13) {
              goto LABEL_74;
            }
            BOOL v27 = 1;
            goto LABEL_43;
          }
          uint64_t v21 = 0;
          uint64_t v22 = 1;
          goto LABEL_42;
        }
        uint64_t v28 = 0;
        while (v17 - 2 != v28)
        {
          uint64_t v29 = v137[v28++];
          if (v29 == v16)
          {
            uint64_t v22 = v28 + 1;
            if (v19 != v18) {
              goto LABEL_20;
            }
            uint64_t v21 = 0;
            goto LABEL_42;
          }
        }
      }
LABEL_30:
      uint64_t v15 = v11 + 2;
      if (v11 + 2 >= v13) {
        goto LABEL_82;
      }
      BOOL v27 = 0;
      goto LABEL_43;
    }
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = v137;
    if (v16 != v18) {
      goto LABEL_20;
    }
LABEL_42:
    BOOL v27 = v22 < v21;
    uint64_t v15 = v11 + 2;
    if (v11 + 2 >= v13) {
      goto LABEL_73;
    }
LABEL_43:
    if (v17 <= 1) {
      uint64_t v30 = 1;
    }
    else {
      uint64_t v30 = a2[2];
    }
    uint64_t v31 = v30 - 1;
    if (v13 <= v15 + 1) {
      uint64_t v32 = v15 + 1;
    }
    else {
      uint64_t v32 = v13;
    }
    while (1)
    {
      uint64_t v33 = *(void *)(v12 + 40 * v15);
      if (!v17) {
        goto LABEL_49;
      }
      unint64_t v34 = a2[4];
      if (v34 == v33)
      {
        if (v33 != v16)
        {
          uint64_t v35 = 0;
          goto LABEL_55;
        }
        goto LABEL_49;
      }
      if (v17 != 1)
      {
        if (*v20 != v33)
        {
          uint64_t v38 = 0;
          while (v17 - 2 != v38)
          {
            uint64_t v39 = v23[v38++];
            if (v39 == v33)
            {
              if (v34 == v16) {
                goto LABEL_49;
              }
              uint64_t v35 = v38 + 1;
              goto LABEL_55;
            }
          }
          goto LABEL_49;
        }
        if (v34 != v16) {
          break;
        }
      }
LABEL_49:
      if (v27) {
        goto LABEL_74;
      }
LABEL_50:
      ++v15;
      uint64_t v16 = v33;
      if (v15 >= v13)
      {
        uint64_t v15 = v32;
        goto LABEL_73;
      }
    }
    uint64_t v35 = 1;
LABEL_55:
    uint64_t v36 = 0;
    do
    {
      if (v17 - 1 == v36)
      {
        if (!v27) {
          goto LABEL_82;
        }
        goto LABEL_50;
      }
      if (v31 == v36)
      {
        __break(1u);
LABEL_181:
        __break(1u);
LABEL_182:
        __break(1u);
LABEL_183:
        __break(1u);
LABEL_184:
        __break(1u);
LABEL_185:
        __break(1u);
LABEL_186:
        __break(1u);
LABEL_187:
        __break(1u);
LABEL_188:
        __break(1u);
LABEL_189:
        __break(1u);
LABEL_190:
        __break(1u);
LABEL_191:
        __break(1u);
LABEL_192:
        __break(1u);
LABEL_193:
        __break(1u);
LABEL_194:
        __break(1u);
LABEL_195:
        __break(1u);
LABEL_196:
        __break(1u);
LABEL_197:
        __break(1u);
        goto LABEL_198;
      }
      uint64_t v37 = v20[v36++];
    }
    while (v37 != v16);
    if ((v27 ^ (v35 > v36 - 1))) {
      goto LABEL_50;
    }
LABEL_73:
    if (!v27) {
      goto LABEL_82;
    }
LABEL_74:
    if (v15 < v11) {
      goto LABEL_206;
    }
    if (v11 < v15)
    {
      uint64_t v40 = 40 * v15;
      uint64_t v41 = 40 * v11;
      uint64_t v42 = v15;
      uint64_t v43 = v11;
      do
      {
        if (v43 != --v42)
        {
          if (!v12) {
            goto LABEL_209;
          }
          uint64_t v44 = v12 + v41;
          uint64_t v45 = *(void *)(v12 + v41 + 16);
          uint64_t v46 = v12 + v40;
          char v47 = *(unsigned char *)(v12 + v41 + 24);
          char v48 = *(unsigned char *)(v12 + v41 + 25);
          uint64_t v49 = *(void *)(v12 + v41 + 32);
          long long v50 = *(_OWORD *)(v12 + v41);
          uint64_t v51 = *(void *)(v12 + v40 - 8);
          long long v52 = *(_OWORD *)(v12 + v40 - 24);
          *(_OWORD *)uint64_t v44 = *(_OWORD *)(v12 + v40 - 40);
          *(_OWORD *)(v44 + 16) = v52;
          *(void *)(v44 + 32) = v51;
          *(_OWORD *)(v46 - 40) = v50;
          *(void *)(v46 - 24) = v45;
          *(unsigned char *)(v46 - 16) = v47;
          *(unsigned char *)(v46 - 15) = v48;
          *(void *)(v46 - 8) = v49;
        }
        ++v43;
        v40 -= 40;
        v41 += 40;
      }
      while (v43 < v42);
    }
LABEL_82:
    if (v15 >= v13)
    {
LABEL_114:
      if (v15 < v11) {
        goto LABEL_197;
      }
      uint64_t v140 = v15;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v10 = sub_1C2A06F98(0, *((void *)v10 + 2) + 1, 1, v10);
      }
      unint64_t v75 = *((void *)v10 + 2);
      unint64_t v74 = *((void *)v10 + 3);
      unint64_t v14 = v75 + 1;
      if (v75 >= v74 >> 1) {
        uint64_t v10 = sub_1C2A06F98((char *)(v74 > 1), v75 + 1, 1, v10);
      }
      *((void *)v10 + 2) = v14;
      uint64_t v76 = v10 + 32;
      uint64_t v77 = &v10[16 * v75 + 32];
      *(void *)uint64_t v77 = v11;
      *((void *)v77 + 1) = v140;
      if (v75)
      {
        while (1)
        {
          unint64_t v78 = v14 - 1;
          if (v14 >= 4)
          {
            double v83 = &v76[16 * v14];
            uint64_t v84 = *((void *)v83 - 8);
            uint64_t v85 = *((void *)v83 - 7);
            BOOL v89 = __OFSUB__(v85, v84);
            uint64_t v86 = v85 - v84;
            if (v89) {
              goto LABEL_185;
            }
            uint64_t v88 = *((void *)v83 - 6);
            uint64_t v87 = *((void *)v83 - 5);
            BOOL v89 = __OFSUB__(v87, v88);
            uint64_t v81 = v87 - v88;
            char v82 = v89;
            if (v89) {
              goto LABEL_186;
            }
            unint64_t v90 = v14 - 2;
            uint64_t v91 = &v76[16 * v14 - 32];
            uint64_t v93 = *(void *)v91;
            uint64_t v92 = *((void *)v91 + 1);
            BOOL v89 = __OFSUB__(v92, v93);
            uint64_t v94 = v92 - v93;
            if (v89) {
              goto LABEL_188;
            }
            BOOL v89 = __OFADD__(v81, v94);
            uint64_t v95 = v81 + v94;
            if (v89) {
              goto LABEL_191;
            }
            if (v95 >= v86)
            {
              unsigned int v113 = &v76[16 * v78];
              uint64_t v115 = *(void *)v113;
              uint64_t v114 = *((void *)v113 + 1);
              BOOL v89 = __OFSUB__(v114, v115);
              uint64_t v116 = v114 - v115;
              if (v89) {
                goto LABEL_195;
              }
              BOOL v106 = v81 < v116;
              goto LABEL_151;
            }
          }
          else
          {
            if (v14 != 3)
            {
              uint64_t v107 = *((void *)v10 + 4);
              uint64_t v108 = *((void *)v10 + 5);
              BOOL v89 = __OFSUB__(v108, v107);
              uint64_t v100 = v108 - v107;
              char v101 = v89;
              goto LABEL_145;
            }
            uint64_t v80 = *((void *)v10 + 4);
            uint64_t v79 = *((void *)v10 + 5);
            BOOL v89 = __OFSUB__(v79, v80);
            uint64_t v81 = v79 - v80;
            char v82 = v89;
          }
          if (v82) {
            goto LABEL_187;
          }
          unint64_t v90 = v14 - 2;
          uint64_t v96 = &v76[16 * v14 - 32];
          uint64_t v98 = *(void *)v96;
          uint64_t v97 = *((void *)v96 + 1);
          BOOL v99 = __OFSUB__(v97, v98);
          uint64_t v100 = v97 - v98;
          char v101 = v99;
          if (v99) {
            goto LABEL_190;
          }
          char v102 = &v76[16 * v78];
          uint64_t v104 = *(void *)v102;
          uint64_t v103 = *((void *)v102 + 1);
          BOOL v89 = __OFSUB__(v103, v104);
          uint64_t v105 = v103 - v104;
          if (v89) {
            goto LABEL_193;
          }
          if (__OFADD__(v100, v105)) {
            goto LABEL_194;
          }
          if (v100 + v105 >= v81)
          {
            BOOL v106 = v81 < v105;
LABEL_151:
            if (v106) {
              unint64_t v78 = v90;
            }
            goto LABEL_153;
          }
LABEL_145:
          if (v101) {
            goto LABEL_189;
          }
          uint64_t v109 = &v76[16 * v78];
          uint64_t v111 = *(void *)v109;
          uint64_t v110 = *((void *)v109 + 1);
          BOOL v89 = __OFSUB__(v110, v111);
          uint64_t v112 = v110 - v111;
          if (v89) {
            goto LABEL_192;
          }
          if (v112 < v100) {
            goto LABEL_15;
          }
LABEL_153:
          unint64_t v117 = v78 - 1;
          if (v78 - 1 >= v14) {
            goto LABEL_181;
          }
          if (!v12) {
            goto LABEL_208;
          }
          uint64_t v118 = &v76[16 * v117];
          uint64_t v119 = v76;
          uint64_t v120 = *(void *)v118;
          unint64_t v121 = v78;
          char v122 = &v119[16 * v78];
          uint64_t v123 = *((void *)v122 + 1);
          unsigned int v144 = (char *)(v12 + 40 * *(void *)v122);
          id v146 = (char *)(v12 + 40 * *(void *)v118);
          a2 = v143;
          swift_bridgeObjectRetain();
          sub_1C29A2D90(v146, v144, (char *)(v12 + 40 * v123), __dst, v143);
          if (v148)
          {
LABEL_176:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            *(void *)(v135 + 16) = 0;
            goto LABEL_177;
          }
          swift_bridgeObjectRelease();
          if (v123 < v120) {
            goto LABEL_182;
          }
          if (v121 > *((void *)v10 + 2)) {
            goto LABEL_183;
          }
          unint64_t v124 = v121;
          *(void *)uint64_t v118 = v120;
          uint64_t v76 = v10 + 32;
          *(void *)&v10[16 * v117 + 40] = v123;
          unint64_t v125 = *((void *)v10 + 2);
          if (v121 >= v125) {
            goto LABEL_184;
          }
          unint64_t v14 = v125 - 1;
          memmove(v122, v122 + 16, 16 * (v125 - 1 - v124));
          *((void *)v10 + 2) = v125 - 1;
          uint64_t v12 = v141;
          if (v125 <= 2) {
            goto LABEL_15;
          }
        }
      }
      unint64_t v14 = 1;
LABEL_15:
      uint64_t v13 = v139;
      uint64_t v11 = v140;
      if (v140 >= v139) {
        goto LABEL_164;
      }
      continue;
    }
    break;
  }
  if (__OFSUB__(v15, v11))
  {
LABEL_202:
    __break(1u);
    goto LABEL_203;
  }
  if (v15 - v11 >= v136) {
    goto LABEL_114;
  }
  uint64_t v53 = v11 + v136;
  if (__OFADD__(v11, v136)) {
    goto LABEL_204;
  }
  if (v53 >= v13) {
    uint64_t v53 = v13;
  }
  if (v53 >= v11)
  {
    if (v15 != v53)
    {
      unint64_t v54 = a2[2];
      do
      {
        if (v54)
        {
          uint64_t v55 = *(void *)(v12 + 40 * v15);
          uint64_t v56 = v15;
          do
          {
            uint64_t v57 = v12 + 40 * v56;
            uint64_t v58 = (_OWORD *)(v57 - 40);
            uint64_t v59 = *(void *)(v57 - 40);
            unint64_t v60 = a2[4];
            if (v60 == v55)
            {
              if (v55 == v59) {
                break;
              }
              uint64_t v61 = 0;
            }
            else
            {
              if (v54 == 1) {
                break;
              }
              if (*v138 == v55)
              {
                if (v60 == v59) {
                  break;
                }
                uint64_t v61 = 1;
              }
              else
              {
                uint64_t v62 = 0;
                do
                {
                  if (v54 - 2 == v62) {
                    goto LABEL_91;
                  }
                  uint64_t v63 = v137[v62++];
                }
                while (v63 != v55);
                if (v60 == v59) {
                  break;
                }
                uint64_t v61 = v62 + 1;
              }
            }
            uint64_t v64 = 0;
            uint64_t v65 = v56 - 1;
            do
            {
              if (v54 - 1 == v64) {
                goto LABEL_110;
              }
              unint64_t v66 = a2[v64++ + 5];
            }
            while (v66 != v59);
            if (v61 > v64 - 1) {
              break;
            }
LABEL_110:
            if (!v12) {
              goto LABEL_207;
            }
            uint64_t v67 = v12 + 40 * v56;
            char v68 = *(unsigned char *)(v67 + 24);
            char v69 = *(unsigned char *)(v67 + 25);
            uint64_t v70 = *(void *)(v67 + 32);
            long long v71 = *(_OWORD *)(v57 + 8);
            long long v72 = *(_OWORD *)(v57 - 24);
            *(_OWORD *)uint64_t v57 = *v58;
            *(_OWORD *)(v57 + 16) = v72;
            *(void *)(v57 + 32) = *(void *)(v57 - 8);
            *(void *)uint64_t v58 = v55;
            *(_OWORD *)(v57 - 32) = v71;
            uint64_t v73 = v12 + 40 * v65;
            *(unsigned char *)(v73 + 24) = v68;
            *(unsigned char *)(v73 + 25) = v69;
            *(void *)(v73 + 32) = v70;
            uint64_t v56 = v65;
          }
          while (v65 != v11);
        }
LABEL_91:
        ++v15;
      }
      while (v15 != v53);
      uint64_t v15 = v53;
    }
    goto LABEL_114;
  }
LABEL_205:
  __break(1u);
LABEL_206:
  __break(1u);
LABEL_207:
  swift_bridgeObjectRelease_n();
  __break(1u);
LABEL_208:
  swift_bridgeObjectRelease_n();
  __break(1u);
LABEL_209:
  swift_bridgeObjectRelease_n();
  __break(1u);
LABEL_210:
  swift_bridgeObjectRelease_n();
  __break(1u);
LABEL_211:
  swift_bridgeObjectRelease_n();
  uint64_t result = sub_1C2A9E618();
  __break(1u);
  return result;
}

uint64_t sub_1C29A3D20(uint64_t *a1, unint64_t *a2)
{
  uint64_t v4 = *a1;
  swift_bridgeObjectRetain_n();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v4 = sub_1C2A073F0(v4);
  }
  uint64_t v5 = *(void *)(v4 + 16);
  v7[0] = v4 + 32;
  v7[1] = v5;
  swift_bridgeObjectRetain();
  sub_1C29A32F4(v7, a2);
  swift_bridgeObjectRelease();
  *a1 = v4;
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_1C29A3DC4()
{
  return MEMORY[0x1E4FBB570];
}

uint64_t dispatch thunk of ComponentRangeOrderProvider.componentRangeLowerBoundOrder(flavor:)(char a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))(a1 & 1);
}

uint64_t dispatch thunk of TimeBasedDistributionMaxBucketTextSupportProxy.extractMaxBucketInformation(distribution:flavor:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, void))(a4 + 8))(a1, a2 & 1);
}

uint64_t sub_1C29A3E00()
{
  return type metadata accessor for TimeBasedDistributionMaxBucketTextSupport();
}

uint64_t type metadata accessor for TimeBasedDistributionMaxBucketTextSupport()
{
  uint64_t result = qword_1EA31E570;
  if (!qword_1EA31E570) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1C29A3E54()
{
  uint64_t result = sub_1C2A9CFE8();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for TimeBasedDistributionMaxBucketTextSupport(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for TimeBasedDistributionMaxBucketTextSupport);
}

uint64_t dispatch thunk of TimeBasedDistributionMaxBucketTextSupport.__allocating_init(componentRangeOrderProvider:logger:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t initializeBufferWithCopyOfBuffer for TimeBasedDistributionMaxBucketTextSupport.MaxBucketInformation(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for TimeBasedDistribution.DistributionValue()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for TimeBasedDistributionMaxBucketTextSupport.MaxBucketInformation(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for TimeBasedDistributionMaxBucketTextSupport.MaxBucketInformation(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TimeBasedDistributionMaxBucketTextSupport.MaxBucketInformation(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TimeBasedDistributionMaxBucketTextSupport.MaxBucketInformation(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TimeBasedDistributionMaxBucketTextSupport.MaxBucketInformation()
{
  return &type metadata for TimeBasedDistributionMaxBucketTextSupport.MaxBucketInformation;
}

uint64_t sub_1C29A40A4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1C29A410C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t HealthKitDataTypeChartConfiguration.__allocating_init(sampleType:healthStore:logger:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  uint64_t v7 = v6 + OBJC_IVAR____TtC19HealthVisualization35HealthKitDataTypeChartConfiguration_logger;
  uint64_t v8 = sub_1C2A9CFE8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v7, a3, v8);
  return v6;
}

void *sub_1C29A4204(char a1)
{
  uint64_t v2 = sub_1C2A9C868();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1) {
    return &unk_1F1DEA068;
  }
  sub_1C29376D4(0, &qword_1EBB923A0);
  sub_1C29376D4(0, (unint64_t *)&qword_1EBB92500);
  uint64_t v6 = (void *)MEMORY[0x1C8763F70]((id)*MEMORY[0x1E4F2A5F0]);
  char v7 = sub_1C2A9E2B8();

  if (v7)
  {
    uint64_t v8 = 2;
  }
  else
  {
    sub_1C2A9C838();
    uint64_t v8 = sub_1C2A9C768();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  unint64_t v19 = (void *)MEMORY[0x1E4FBC860];
  uint64_t v10 = 7;
  sub_1C29419AC(0, 7, 0);
  uint64_t v11 = 0;
  BOOL v12 = 0;
  uint64_t result = v19;
  while (!v12)
  {
    uint64_t v13 = v11 + v8;
    if (__OFADD__(v11, v8))
    {
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
      break;
    }
    uint64_t v14 = v13 - 1;
    if (__OFSUB__(v13, 1)) {
      goto LABEL_20;
    }
    unint64_t v19 = result;
    unint64_t v16 = result[2];
    unint64_t v15 = result[3];
    if (v16 >= v15 >> 1)
    {
      sub_1C29419AC(v15 > 1, v16 + 1, 1);
      uint64_t result = v19;
    }
    result[2] = v16 + 1;
    result[v16 + 4] = v14 % 7;
    BOOL v12 = v11 == 6;
    if (v11 == 6)
    {
      uint64_t v11 = 0;
    }
    else if (__OFADD__(v11++, 1))
    {
      goto LABEL_21;
    }
    if (!--v10) {
      return result;
    }
  }
  __break(1u);
  return result;
}

void *TimeBasedDistributionChartConfiguration.componentRangeLowerBoundOrder(flavor:)(char a1, uint64_t a2, uint64_t a3)
{
  if (a1) {
    return &unk_1F1DEA220;
  }
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 32))(a2, a3);
  uint64_t v13 = (void *)MEMORY[0x1E4FBC860];
  uint64_t v4 = 7;
  sub_1C29419AC(0, 7, 0);
  uint64_t v5 = 0;
  BOOL v6 = 0;
  uint64_t result = v13;
  while (!v6)
  {
    uint64_t v8 = v5 + v3;
    if (__OFADD__(v5, v3))
    {
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      __break(1u);
      break;
    }
    uint64_t v9 = v8 - 1;
    if (__OFSUB__(v8, 1)) {
      goto LABEL_17;
    }
    uint64_t v14 = result;
    unint64_t v11 = result[2];
    unint64_t v10 = result[3];
    if (v11 >= v10 >> 1)
    {
      sub_1C29419AC(v10 > 1, v11 + 1, 1);
      uint64_t result = v14;
    }
    result[2] = v11 + 1;
    result[v11 + 4] = v9 % 7;
    BOOL v6 = v5 == 6;
    if (v5 == 6)
    {
      uint64_t v5 = 0;
    }
    else if (__OFADD__(v5++, 1))
    {
      goto LABEL_18;
    }
    if (!--v4) {
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t HealthKitDataTypeChartConfiguration.init(sampleType:healthStore:logger:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = a2;
  uint64_t v5 = v3 + OBJC_IVAR____TtC19HealthVisualization35HealthKitDataTypeChartConfiguration_logger;
  uint64_t v6 = sub_1C2A9CFE8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(v5, a3, v6);
  return v3;
}

void HealthKitDataTypeChartConfiguration.accentColor.getter()
{
  uint64_t v1 = *(void *)v0;
  id v2 = objc_msgSend(*(id *)(v0 + 24), sel_displayTypeController);
  if (!v2)
  {
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v3 = v2;
  uint64_t v4 = *(void **)(v0 + 16);
  id v5 = objc_msgSend(v2, sel_displayTypeForObjectType_, v4);

  if (!v5)
  {
LABEL_11:
    __break(1u);
    return;
  }
  id v6 = objc_msgSend(v5, sel_displayCategory);

  id v7 = objc_msgSend(v6, sel_color);
  if (!v7)
  {
    swift_retain_n();
    uint64_t v8 = sub_1C2A9CFC8();
    os_log_type_t v9 = sub_1C2A9E0B8();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      uint64_t v20 = v11;
      uint64_t v21 = v1;
      *(_DWORD *)uint64_t v10 = 136446466;
      swift_getMetatypeMetadata();
      uint64_t v12 = sub_1C2A9DD58();
      uint64_t v21 = sub_1C2957168(v12, v13, &v20);
      sub_1C2A9E358();
      swift_bridgeObjectRelease();
      *(_WORD *)(v10 + 12) = 2080;
      id v14 = objc_msgSend(v4, sel_identifier, v20);
      uint64_t v15 = sub_1C2A9DD28();
      unint64_t v17 = v16;

      uint64_t v21 = sub_1C2957168(v15, v17, &v20);
      sub_1C2A9E358();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C292A000, v8, v9, "[%{public}s] Unable to find display type for sample type with identifier %s", (uint8_t *)v10, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1C87656F0](v11, -1, -1);
      MEMORY[0x1C87656F0](v10, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    id v18 = objc_msgSend(self, sel_blueColor);
    id v19 = v18;
  }
}

uint64_t HealthKitDataTypeChartConfiguration.minimumValueToBeUsedForMaximum.getter()
{
  sub_1C29376D4(0, &qword_1EBB923A0);
  sub_1C29376D4(0, (unint64_t *)&qword_1EBB92500);
  uint64_t v0 = (void *)MEMORY[0x1C8763F70]((id)*MEMORY[0x1E4F2A5F0]);
  char v1 = sub_1C2A9E2B8();

  if (v1) {
    return 0x3FB999999999999ALL;
  }
  else {
    return 0;
  }
}

uint64_t HealthKitDataTypeChartConfiguration.firstWeekdayComponent.getter()
{
  uint64_t v0 = sub_1C2A9C868();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C29376D4(0, &qword_1EBB923A0);
  sub_1C29376D4(0, (unint64_t *)&qword_1EBB92500);
  uint64_t v4 = (void *)MEMORY[0x1C8763F70]((id)*MEMORY[0x1E4F2A5F0]);
  char v5 = sub_1C2A9E2B8();

  if (v5) {
    return 2;
  }
  sub_1C2A9C838();
  uint64_t v6 = sub_1C2A9C768();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v6;
}

uint64_t HealthKitDataTypeChartConfiguration.deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC19HealthVisualization35HealthKitDataTypeChartConfiguration_logger;
  uint64_t v2 = sub_1C2A9CFE8();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t HealthKitDataTypeChartConfiguration.__deallocating_deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC19HealthVisualization35HealthKitDataTypeChartConfiguration_logger;
  uint64_t v2 = sub_1C2A9CFE8();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

void sub_1C29A4C20()
{
}

uint64_t sub_1C29A4C44()
{
  sub_1C29376D4(0, &qword_1EBB923A0);
  sub_1C29376D4(0, (unint64_t *)&qword_1EBB92500);
  uint64_t v0 = (void *)MEMORY[0x1C8763F70]((id)*MEMORY[0x1E4F2A5F0]);
  char v1 = sub_1C2A9E2B8();

  if (v1) {
    return 0x3FB999999999999ALL;
  }
  else {
    return 0;
  }
}

uint64_t sub_1C29A4CF4()
{
  uint64_t v0 = sub_1C2A9C868();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C29376D4(0, &qword_1EBB923A0);
  sub_1C29376D4(0, (unint64_t *)&qword_1EBB92500);
  uint64_t v4 = (void *)MEMORY[0x1C8763F70]((id)*MEMORY[0x1E4F2A5F0]);
  char v5 = sub_1C2A9E2B8();

  if (v5) {
    return 2;
  }
  sub_1C2A9C838();
  uint64_t v6 = sub_1C2A9C768();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v6;
}

void *sub_1C29A4E50(char a1)
{
  return sub_1C29A4204(a1 & 1);
}

uint64_t dispatch thunk of TimeBasedDistributionChartConfiguration.accentColor.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of TimeBasedDistributionChartConfiguration.minimumValueToBeUsedForMaximum.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of TimeBasedDistributionChartConfiguration.firstWeekdayComponent.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t sub_1C29A4ED4()
{
  return type metadata accessor for HealthKitDataTypeChartConfiguration();
}

uint64_t type metadata accessor for HealthKitDataTypeChartConfiguration()
{
  uint64_t result = qword_1EA31E588;
  if (!qword_1EA31E588) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1C29A4F28()
{
  uint64_t result = sub_1C2A9CFE8();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for HealthKitDataTypeChartConfiguration(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for HealthKitDataTypeChartConfiguration);
}

uint64_t dispatch thunk of HealthKitDataTypeChartConfiguration.__allocating_init(sampleType:healthStore:logger:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

id sub_1C29A4FF4()
{
  id v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28C10]), sel_init);
  id result = objc_msgSend(v0, sel_setFormattingContext_, 2);
  qword_1EA32B5D0 = (uint64_t)v0;
  return result;
}

uint64_t TimeBasedDistributionChartTextSupportImpl.__allocating_init(healthStore:sampleType:unit:)(void *a1, uint64_t a2, uint64_t a3)
{
  swift_allocObject();
  sub_1C29A56A0((uint64_t)a1, a2, a3);
  uint64_t v7 = v6;

  return v7;
}

uint64_t TimeBasedDistributionChartTextSupportImpl.init(healthStore:sampleType:unit:)(void *a1, uint64_t a2, uint64_t a3)
{
  sub_1C29A56A0((uint64_t)a1, a2, a3);
  uint64_t v5 = v4;

  return v5;
}

Swift::String __swiftcall TimeBasedDistributionChartTextSupportImpl.barAnnotation(for:)(HealthVisualization::TimeBasedDistribution::DistributionValue a1)
{
  if (*(unsigned char *)(*(void *)&a1.value.is_nil + 8))
  {
    memset(v27, 0, sizeof(v27));
    if (qword_1EBB92310 != -1) {
      swift_once();
    }
    uint64_t v2 = sub_1C2934FE8(0xD00000000000001BLL, 0x80000001C2AB7B90, 0, (uint64_t)v27, 0xD000000000000015, 0x80000001C2AB7830);
    uint64_t v4 = v3;
    sub_1C2935868((uint64_t)v27);
    uint64_t v5 = v2;
    uint64_t v6 = v4;
  }
  else
  {
    uint64_t v7 = *(void **)(*(void *)&a1.value.is_nil + 16);
    id v8 = objc_msgSend(*(id *)(v1 + 24), sel_presentation, a1.value.value);
    os_log_type_t v9 = (void *)sub_1C2A9C8D8();
    id v10 = objc_msgSend(v8, sel_adjustedValueForDaemonValue_, v9);

    if (sub_1C29A53A4(0xD00000000000002BLL, 0x80000001C2AB5130, v7))
    {
      id v11 = (id)HKAFibBurdenClampedLowerBoundLocalizedString();
      uint64_t v12 = sub_1C2A9DD28();
      id v14 = v13;

      uint64_t v5 = v12;
      uint64_t v6 = v14;
    }
    else
    {
      id v15 = *(id *)(v1 + 40);
      objc_msgSend(v10, sel_doubleValue);
      id v17 = objc_msgSend(self, sel_quantityWithUnit_doubleValue_, v15, v16);

      uint64_t v18 = *(void *)(v1 + 32);
      id v19 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F67BE0]), sel_init);
      sub_1C29376D4(0, &qword_1EBB923A0);
      sub_1C29376D4(0, (unint64_t *)&qword_1EBB92500);
      uint64_t v20 = (void *)MEMORY[0x1C8763F70]((id)*MEMORY[0x1E4F2A5F0]);
      char v21 = sub_1C2A9E2B8();

      if (v21) {
        objc_msgSend(v19, sel_setHasSpaceBetweenValueAndUnit_, 0);
      }
      id v22 = objc_msgSend(v17, sel_localizedStringForType_parameters_, v18, v19);

      uint64_t v23 = sub_1C2A9DD28();
      uint64_t v25 = v24;

      uint64_t v5 = v23;
      uint64_t v6 = v25;
    }
  }
  result._uint64_t object = v6;
  result._uint64_t countAndFlagsBits = v5;
  return result;
}

uint64_t sub_1C29A53A4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0;
  }
  if (a3[4] == a1 && a3[5] == a2) {
    return 1;
  }
  uint64_t result = sub_1C2A9E8D8();
  if (result) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  os_log_type_t v9 = a3 + 7;
  for (uint64_t i = 1; ; ++i)
  {
    uint64_t v11 = i + 1;
    if (__OFADD__(i, 1)) {
      break;
    }
    BOOL v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (sub_1C2A9E8D8() & 1) != 0) {
      return 1;
    }
    uint64_t result = 0;
    v9 += 2;
    if (v11 == v3) {
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1C29A546C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    goto LABEL_20;
  }
  uint64_t v3 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v3; uint64_t v3 = sub_1C2A9E648())
  {
    unint64_t v4 = a2 & 0xC000000000000001;
    if ((a2 & 0xC000000000000001) == 0)
    {
      id v5 = *(id *)(a2 + 32);
      goto LABEL_5;
    }
    while (1)
    {
      id v5 = (id)MEMORY[0x1C8764390](0, a2);
LABEL_5:
      uint64_t v6 = v5;
      sub_1C29376D4(0, (unint64_t *)&qword_1EBB92500);
      char v7 = sub_1C2A9E2B8();

      if (v7)
      {
LABEL_6:
        swift_bridgeObjectRelease();
        return 1;
      }
      if (v3 == 1) {
        goto LABEL_18;
      }
      if (v4) {
        break;
      }
      unint64_t v4 = 5;
      while (1)
      {
        unint64_t v12 = v4 - 3;
        if (__OFADD__(v4 - 4, 1)) {
          break;
        }
        id v13 = *(id *)(a2 + 8 * v4);
        char v14 = sub_1C2A9E2B8();

        if (v14) {
          goto LABEL_6;
        }
        ++v4;
        if (v12 == v3) {
          goto LABEL_18;
        }
      }
      __break(1u);
    }
    uint64_t v9 = 1;
    while (1)
    {
      MEMORY[0x1C8764390](v9, a2);
      uint64_t v10 = v9 + 1;
      if (__OFADD__(v9, 1)) {
        break;
      }
      char v11 = sub_1C2A9E2B8();
      swift_unknownObjectRelease();
      if (v11) {
        goto LABEL_6;
      }
      ++v9;
      if (v10 == v3) {
        goto LABEL_18;
      }
    }
    __break(1u);
LABEL_20:
    swift_bridgeObjectRetain();
  }
LABEL_18:
  swift_bridgeObjectRelease();
  return 0;
}

id *TimeBasedDistributionChartTextSupportImpl.deinit()
{
  return v0;
}

uint64_t TimeBasedDistributionChartTextSupportImpl.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t sub_1C29A567C(__int16 a1, uint64_t a2, double a3)
{
  return TimeBasedDistributionChartTextSupportImpl.barAnnotation(for:)(*(HealthVisualization::TimeBasedDistribution::DistributionValue *)(&a1 - 4))._countAndFlagsBits;
}

void sub_1C29A56A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v7 = objc_msgSend(self, sel_sharedInstanceForHealthStore_, a1);
  id v8 = objc_msgSend(v7, sel_createHKUnitPreferenceController);

  v3[2] = v8;
  id v9 = objc_msgSend(self, sel_sharedInstanceForHealthStore_, a1);
  if (v9)
  {
    uint64_t v10 = v9;
    id v11 = objc_msgSend(v9, sel_displayTypeForObjectType_, a2);

    if (v11)
    {
      v3[3] = v11;
      v3[4] = a2;
      v3[5] = a3;
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t dispatch thunk of TimeBasedDistributionChartTextSupport.barAnnotation(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t type metadata accessor for TimeBasedDistributionChartTextSupportImpl()
{
  return self;
}

uint64_t method lookup function for TimeBasedDistributionChartTextSupportImpl(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for TimeBasedDistributionChartTextSupportImpl);
}

uint64_t dispatch thunk of TimeBasedDistributionChartTextSupportImpl.__allocating_init(healthStore:sampleType:unit:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t DiagramDataGroup.points.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t DiagramDataGroup.annotation.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t DiagramDataGroup.supplementaryAnnotation.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

void __swiftcall DiagramDataGroup.init(points:annotation:supplementaryAnnotation:)(HealthVisualization::DiagramDataGroup *__return_ptr retstr, Swift::OpaquePointer points, Swift::String_optional annotation, Swift::String_optional supplementaryAnnotation)
{
  retstr->points = points;
  retstr->annotation = annotation;
  retstr->supplementaryAnnotation = supplementaryAnnotation;
}

uint64_t sub_1C29A5868@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1C29A8874(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1C29A5890(uint64_t a1)
{
  unint64_t v2 = sub_1C293817C();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1C29A58CC(uint64_t a1)
{
  unint64_t v2 = sub_1C293817C();
  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t DiagramDataGroup.encode(to:)(void *a1)
{
  sub_1C2937FF0(0, &qword_1EBB921B8, (uint64_t (*)(void))sub_1C293817C, (uint64_t)&type metadata for DiagramDataGroup.CodingKeys, MEMORY[0x1E4FBBDE0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  id v7 = (char *)v13 - v6;
  uint64_t v9 = *v1;
  uint64_t v8 = v1[1];
  _OWORD v13[2] = v1[2];
  v13[3] = v8;
  uint64_t v10 = v1[3];
  v13[0] = v1[4];
  v13[1] = v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1C293817C();
  sub_1C2A9EA18();
  uint64_t v17 = v9;
  char v16 = 0;
  sub_1C2938118(0, &qword_1EBB92758, (uint64_t (*)(uint64_t))type metadata accessor for CGPoint, MEMORY[0x1E4FBB320]);
  sub_1C2938058(&qword_1EBB920D8, &qword_1EBB92148);
  uint64_t v11 = v13[4];
  sub_1C2A9E868();
  if (!v11)
  {
    char v15 = 1;
    sub_1C2A9E7D8();
    char v14 = 2;
    sub_1C2A9E7D8();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_1C29A5B68(void *a1)
{
  return DiagramDataGroup.encode(to:)(a1);
}

uint64_t DiagramDataKey.rawValue.getter()
{
  unint64_t v1 = 0xD000000000000012;
  if (*v0 != 1) {
    unint64_t v1 = 0x636E657265666552;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x746E65746E6F43;
  }
}

uint64_t sub_1C29A5BF0()
{
  return sub_1C2A9E9E8();
}

uint64_t sub_1C29A5CA4()
{
  sub_1C2A9DD78();
  return swift_bridgeObjectRelease();
}

void sub_1C29A5D44(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE700000000000000;
  unint64_t v4 = 0x80000001C2AB5170;
  unint64_t v5 = 0xD000000000000012;
  if (v2 != 1)
  {
    unint64_t v5 = 0x636E657265666552;
    unint64_t v4 = 0xED0000656E694C65;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x746E65746E6F43;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_1C29A5DB4()
{
  return sub_1C2A9DE38();
}

__n128 DiagramData.dataModelSpace.getter@<Q0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 32);
  __n128 result = *(__n128 *)v1;
  long long v4 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 32) = v2;
  return result;
}

uint64_t DiagramData.dataGroups.getter()
{
  return swift_bridgeObjectRetain();
}

void __swiftcall DiagramData.init(dataModelSpace:dataGroups:)(HealthVisualization::DiagramData *__return_ptr retstr, __C::CGRect_optional *dataModelSpace, Swift::OpaquePointer dataGroups)
{
  sub_1C2934C44((uint64_t)dataModelSpace, (uint64_t)v7);
  Swift::Bool v5 = v8;
  CGSize v6 = (CGSize)v7[1];
  retstr->dataModelSpace.value.origin = (CGPoint)v7[0];
  retstr->dataModelSpace.value.std::string::size_type size = v6;
  retstr->dataModelSpace.is_nil = v5;
  retstr->dataGroups = dataGroups;
}

double DiagramData.init(dataModelSpace:dataGroups:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_1C2934C44(a1, (uint64_t)v8);
  char v5 = v9;
  double result = *(double *)v8;
  long long v7 = v8[1];
  *(_OWORD *)a3 = v8[0];
  *(_OWORD *)(a3 + 16) = v7;
  *(unsigned char *)(a3 + 32) = v5;
  *(void *)(a3 + 40) = a2;
  return result;
}

__C::CGRect __swiftcall CGRect.paddedIfZeroSize(_:)(Swift::Bool a1)
{
  double v5 = v2;
  double v6 = v1;
  if (v3 == 0.0 && v4 == 0.0 && a1)
  {
    swift_beginAccess();
    double v3 = *(double *)&qword_1EA31E598;
    double v4 = unk_1EA31E5A0;
    double v6 = v6 - *(double *)&qword_1EA31E598 * 0.5;
    double v5 = v5 - unk_1EA31E5A0 * 0.5;
  }
  double v7 = v6;
  double v8 = v5;
  result.size.double height = v4;
  result.size.double width = v3;
  result.origin.double y = v8;
  result.origin.double x = v7;
  return result;
}

double static DiagramData.computedBounds(points:startAtZero:)(uint64_t a1, char a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return 0.0;
  }
  if (a2)
  {
    double v4 = (double *)(a1 + 32);
    CGFloat y = 0.0;
    CGFloat width = 0.0;
    CGFloat height = 0.0;
  }
  else
  {
    double v4 = (double *)MEMORY[0x1E4F1DB20];
    CGFloat y = *(double *)(MEMORY[0x1E4F1DB20] + 8);
    CGFloat width = *(double *)(MEMORY[0x1E4F1DB20] + 16);
    CGFloat height = *(double *)(MEMORY[0x1E4F1DB20] + 24);
  }
  double x = *v4;
  swift_bridgeObjectRetain();
  char v9 = (CGFloat *)(a1 + 40);
  do
  {
    v13.origin.double x = *(v9 - 1);
    v13.origin.CGFloat y = *v9;
    v13.size.CGFloat width = 0.0;
    v13.size.CGFloat height = 0.0;
    v11.origin.double x = x;
    v11.origin.CGFloat y = y;
    v11.size.CGFloat width = width;
    v11.size.CGFloat height = height;
    CGRect v12 = CGRectUnion(v11, v13);
    double x = v12.origin.x;
    CGFloat y = v12.origin.y;
    CGFloat width = v12.size.width;
    CGFloat height = v12.size.height;
    v9 += 2;
    --v2;
  }
  while (v2);
  swift_bridgeObjectRelease();
  return x;
}

uint64_t static DiagramData.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 40);
  double v3 = *(void **)(a2 + 40);
  if (*(unsigned char *)(a1 + 32))
  {
    if (!*(unsigned char *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 1) != 0 || !CGRectEqualToRect(*(CGRect *)a1, *(CGRect *)a2))
  {
    return 0;
  }
  return sub_1C296420C(v2, v3);
}

uint64_t sub_1C29A6090@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1C29A89CC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1C29A60B8(uint64_t a1)
{
  unint64_t v2 = sub_1C2945288();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1C29A60F4(uint64_t a1)
{
  unint64_t v2 = sub_1C2945288();
  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t DiagramData.encode(to:)(void *a1)
{
  sub_1C2937FF0(0, &qword_1EBB921B0, (uint64_t (*)(void))sub_1C2945288, (uint64_t)&type metadata for DiagramData.CodingKeys, MEMORY[0x1E4FBBDE0]);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  double v6 = (char *)&v16 - v5;
  long long v18 = *v1;
  uint64_t v7 = *((void *)v1 + 2);
  uint64_t v8 = *((void *)v1 + 3);
  char v9 = *((unsigned char *)v1 + 32);
  uint64_t v17 = *((void *)v1 + 5);
  uint64_t v10 = a1[3];
  CGRect v11 = a1;
  uint64_t v13 = v12;
  __swift_project_boxed_opaque_existential_1(v11, v10);
  sub_1C2945288();
  sub_1C2A9EA18();
  long long v20 = v18;
  uint64_t v21 = v7;
  uint64_t v22 = v8;
  char v23 = v9;
  char v24 = 0;
  type metadata accessor for CGRect(0);
  sub_1C293A290(&qword_1EBB92140, type metadata accessor for CGRect);
  uint64_t v14 = v19;
  sub_1C2A9E818();
  if (!v14)
  {
    *(void *)&long long v20 = v17;
    char v24 = 1;
    sub_1C2938118(0, &qword_1EBB92748, (uint64_t (*)(uint64_t))sub_1C2943230, MEMORY[0x1E4FBB320]);
    sub_1C29A8228();
    sub_1C2A9E868();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v13);
}

uint64_t sub_1C29A6388(void *a1)
{
  return DiagramData.encode(to:)(a1);
}

uint64_t sub_1C29A63A0(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void **)(a1 + 40);
  uint64_t v3 = *(void **)(a2 + 40);
  if (*(unsigned char *)(a1 + 32))
  {
    if (!*(unsigned char *)(a2 + 32)) {
      return 0;
    }
  }
  else if ((*(unsigned char *)(a2 + 32) & 1) != 0 || !CGRectEqualToRect(*(CGRect *)a1, *(CGRect *)a2))
  {
    return 0;
  }
  return sub_1C296420C(v2, v3);
}

double static CGSize.smallNonZeroWidth.getter()
{
  return 0.01;
}

double static CGSize.smallNonZeroHeight.getter()
{
  return 0.01;
}

double static CGSize.smallNonZero.getter()
{
  return *(double *)&qword_1EA31E598;
}

uint64_t static CGSize.smallNonZero.setter(double a1, double a2)
{
  uint64_t result = swift_beginAccess();
  qword_1EA31E598 = *(void *)&a1;
  unk_1EA31E5A0 = *(void *)&a2;
  return result;
}

uint64_t (*static CGSize.smallNonZero.modify())()
{
  return j__swift_endAccess;
}

uint64_t sub_1C29A6524()
{
  uint64_t v1 = *(void *)(v0 + 40);
  if (!*(void *)(v1 + 16)) {
    return 0;
  }
  uint64_t v2 = *(void *)(v1 + 32);
  uint64_t result = sub_1C29A8014(v2);
  if ((v5 & 1) == 0)
  {
    if (*(_DWORD *)(v2 + 36) == v4)
    {
      if (result == 1 << *(unsigned char *)(v2 + 32)) {
        return 0;
      }
      sub_1C29A809C(result, v4, v2, (uint64_t)&v7);
      if (*(void *)(v7 + 16)) {
        uint64_t v6 = *(void *)(v7 + 32);
      }
      else {
        uint64_t v6 = 0;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v6;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1C29A65FC()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = *(void *)(v1 + 16);
  if (!v2) {
    return v2;
  }
  swift_bridgeObjectRetain_n();
  uint64_t v3 = 0;
  while (!*(void *)(*(void *)(v1 + 8 * v3 + 32) + 16))
  {
LABEL_3:
    if (v2 == ++v3)
    {
      uint64_t v2 = 0;
      goto LABEL_9;
    }
  }
  swift_bridgeObjectRetain();
  sub_1C293DDF4(2u);
  if ((v4 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_3;
  }
  swift_bridgeObjectRelease();
  uint64_t v2 = 1;
LABEL_9:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_1C29A66A8()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = *(void *)(v1 + 16);
  if (!v2) {
    return 0;
  }
  swift_bridgeObjectRetain();
  for (uint64_t i = 0; i != v2; ++i)
  {
    uint64_t v4 = *(void *)(v1 + 8 * i + 32);
    if (*(void *)(v4 + 16))
    {
      swift_bridgeObjectRetain();
      unint64_t v5 = sub_1C293DDF4(2u);
      if (v6)
      {
        uint64_t v7 = *(void *)(*(void *)(v4 + 56) + 40 * v5 + 16);
        swift_bridgeObjectRelease();
        if (v7)
        {
          uint64_t v8 = 1;
          goto LABEL_10;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
  }
  uint64_t v8 = 0;
LABEL_10:
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t DiagramFactory.__allocating_init(hbxViewControllerFactory:)(uint64_t a1)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  return result;
}

uint64_t sub_1C29A67B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  char v8 = *(unsigned char *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a2 + 80);
  char v11 = *(unsigned char *)(a2 + 88);
  long long v12 = *(_OWORD *)(a1 + 16);
  v41[0] = *(_OWORD *)a1;
  v41[1] = v12;
  char v42 = v8;
  uint64_t v43 = v9;
  long long v13 = *(_OWORD *)(a2 + 16);
  long long v34 = *(_OWORD *)a2;
  long long v35 = v13;
  long long v14 = *(_OWORD *)(a2 + 48);
  long long v36 = *(_OWORD *)(a2 + 32);
  long long v37 = v14;
  long long v38 = *(_OWORD *)(a2 + 64);
  uint64_t v39 = v10;
  char v40 = v11;
  sub_1C2930124((uint64_t)v41, (uint64_t)&v34, v44);
  uint64_t v15 = v45;
  uint64_t v16 = v46;
  __swift_project_boxed_opaque_existential_1(v44, v45);
  CGFloat v17 = (*(double (**)(uint64_t, uint64_t))(v16 + 8))(v15, v16);
  CGFloat v19 = v18;
  CGFloat v21 = v20;
  CGFloat v23 = v22;
  uint64_t v24 = v45;
  uint64_t v25 = v46;
  __swift_project_boxed_opaque_existential_1(v44, v45);
  double v26 = (*(double (**)(uint64_t, uint64_t))(v25 + 16))(v24, v25);
  double v28 = UIEdgeInsetsInsetRect(0.0, 0.0, a4, a5, v26, v27);
  sub_1C293249C(&v34, v17, v19, v21, v23, v28, v29, v30, v31);
  *(void *)a3 = 0;
  long long v32 = v35;
  *(_OWORD *)(a3 + 8) = v34;
  *(_OWORD *)(a3 + 24) = v32;
  *(_OWORD *)(a3 + 40) = v36;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
}

uint64_t DiagramFactory.deinit()
{
  return v0;
}

uint64_t sub_1C29A6954(uint64_t result)
{
  int64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v6 = result;
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || (int64_t v8 = v3[3] >> 1, v8 < v5))
  {
    if (v4 <= v5) {
      int64_t v9 = v4 + v2;
    }
    else {
      int64_t v9 = v4;
    }
    uint64_t v3 = sub_1C299C834(isUniquelyReferenced_nonNull_native, v9, 1, v3);
    int64_t v8 = v3[3] >> 1;
  }
  uint64_t v10 = v3[2];
  uint64_t v11 = v8 - v10;
  uint64_t result = (uint64_t)sub_1C29A7B8C(v54, (uint64_t)&v3[6 * v10 + 4], v8 - v10, v6);
  if (result < v2) {
    goto LABEL_15;
  }
  if (result)
  {
    uint64_t v13 = v3[2];
    BOOL v14 = __OFADD__(v13, result);
    uint64_t v15 = v13 + result;
    if (v14)
    {
      __break(1u);
      goto LABEL_51;
    }
    v3[2] = v15;
  }
  if (result != v11) {
    goto LABEL_13;
  }
LABEL_16:
  int64_t v2 = v3[2];
  uint64_t v50 = v54[0];
  uint64_t v49 = v54[1];
  int64_t v12 = v55;
  uint64_t v47 = v54[2];
  if (!v56)
  {
LABEL_51:
    uint64_t v33 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      return result;
    }
    int64_t v32 = (unint64_t)(v47 + 64) >> 6;
    if (v33 >= v32) {
      goto LABEL_13;
    }
    unint64_t v44 = *(void *)(v49 + 8 * v33);
    if (!v44)
    {
      uint64_t v45 = v12 + 2;
      if (v12 + 2 >= v32) {
        goto LABEL_13;
      }
      unint64_t v44 = *(void *)(v49 + 8 * v45);
      if (v44)
      {
LABEL_60:
        uint64_t v33 = v45;
      }
      else
      {
        if (v12 + 3 >= v32) {
          goto LABEL_13;
        }
        unint64_t v44 = *(void *)(v49 + 8 * (v12 + 3));
        if (!v44) {
          goto LABEL_66;
        }
        uint64_t v33 = v12 + 3;
      }
    }
LABEL_54:
    unint64_t v16 = (v44 - 1) & v44;
    unint64_t v17 = __clz(__rbit64(v44)) + (v33 << 6);
    uint64_t v52 = v33;
    goto LABEL_18;
  }
  unint64_t v16 = (v56 - 1) & v56;
  uint64_t v52 = v55;
  unint64_t v17 = __clz(__rbit64(v56)) | (v55 << 6);
LABEL_18:
  uint64_t v18 = *(unsigned __int8 *)(*(void *)(v50 + 48) + v17);
  CGFloat v19 = (uint64_t *)(*(void *)(v50 + 56) + 40 * v17);
  uint64_t v21 = *v19;
  uint64_t v20 = v19[1];
  uint64_t v23 = v19[2];
  uint64_t v22 = v19[3];
  uint64_t v24 = v19[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (!v21) {
    goto LABEL_13;
  }
  int64_t v48 = (unint64_t)(v47 + 64) >> 6;
  int64_t v12 = v52;
  int64_t v25 = v2;
  unint64_t v26 = v16;
  while (1)
  {
    unint64_t v27 = v3[3];
    int64_t v51 = v27 >> 1;
    if ((uint64_t)(v27 >> 1) < v25 + 1)
    {
      int64_t v38 = v12;
      uint64_t v39 = v3;
      int64_t v40 = v25;
      uint64_t v41 = v18;
      unint64_t v42 = v26;
      uint64_t v43 = sub_1C299C834((void *)(v27 > 1), v25 + 1, 1, v39);
      unint64_t v26 = v42;
      uint64_t v18 = v41;
      int64_t v25 = v40;
      int64_t v12 = v38;
      uint64_t v3 = v43;
      int64_t v51 = v43[3] >> 1;
    }
    if (v25 < v51) {
      break;
    }
LABEL_20:
    v3[2] = v25;
    if (!v21) {
      goto LABEL_13;
    }
  }
  while (1)
  {
    int64_t v32 = (int64_t)(v3 + 4);
    uint64_t v33 = (uint64_t)&v3[6 * v25 + 4];
    *(unsigned char *)uint64_t v33 = v18;
    *(void *)(v33 + 8) = v21;
    *(void *)(v33 + 16) = v20;
    *(void *)(v33 + 24) = v23;
    *(void *)(v33 + 32) = v22;
    *(void *)(v33 + 40) = v24;
    int64_t v34 = v25 + 1;
    if (!v26) {
      break;
    }
    int64_t v28 = v34;
    uint64_t v53 = (v26 - 1) & v26;
    int64_t v2 = v12;
    unint64_t v29 = __clz(__rbit64(v26)) | (v12 << 6);
LABEL_26:
    uint64_t v18 = *(unsigned __int8 *)(*(void *)(v50 + 48) + v29);
    CGFloat v30 = (uint64_t *)(*(void *)(v50 + 56) + 40 * v29);
    uint64_t v21 = *v30;
    uint64_t v20 = v30[1];
    uint64_t v23 = v30[2];
    uint64_t v22 = v30[3];
    uint64_t v24 = v30[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    int64_t v25 = v28;
    unint64_t v26 = v53;
    if (v21) {
      BOOL v31 = v28 < v51;
    }
    else {
      BOOL v31 = 0;
    }
    int64_t v12 = v2;
    if (!v31) {
      goto LABEL_20;
    }
  }
  int64_t v2 = v12 + 1;
  if (!__OFADD__(v12, 1))
  {
    if (v2 >= v48) {
      goto LABEL_56;
    }
    unint64_t v35 = *(void *)(v49 + 8 * v2);
    if (v35) {
      goto LABEL_41;
    }
    int64_t v36 = v12 + 2;
    if (v12 + 2 >= v48) {
      goto LABEL_56;
    }
    unint64_t v35 = *(void *)(v49 + 8 * v36);
    if (!v35)
    {
      if (v12 + 3 >= v48) {
        goto LABEL_56;
      }
      unint64_t v35 = *(void *)(v49 + 8 * (v12 + 3));
      if (v35)
      {
        int64_t v2 = v12 + 3;
        goto LABEL_41;
      }
      int64_t v36 = v12 + 4;
      if (v12 + 4 >= v48) {
        goto LABEL_56;
      }
      unint64_t v35 = *(void *)(v49 + 8 * v36);
      if (!v35)
      {
        int64_t v2 = v12 + 5;
        if (v12 + 5 >= v48) {
          goto LABEL_56;
        }
        unint64_t v35 = *(void *)(v49 + 8 * v2);
        if (!v35)
        {
          int64_t v37 = v12 + 6;
          while (v48 != v37)
          {
            unint64_t v35 = *(void *)(v49 + 8 * v37++);
            if (v35)
            {
              int64_t v2 = v37 - 1;
              goto LABEL_41;
            }
          }
LABEL_56:
          v3[2] = v34;
          goto LABEL_13;
        }
        goto LABEL_41;
      }
    }
    int64_t v2 = v36;
LABEL_41:
    int64_t v28 = v34;
    uint64_t v53 = (v35 - 1) & v35;
    unint64_t v29 = __clz(__rbit64(v35)) + (v2 << 6);
    goto LABEL_26;
  }
  __break(1u);
LABEL_66:
  uint64_t v45 = v33 + 3;
  if (v33 + 3 < v32)
  {
    unint64_t v44 = *(void *)(v49 + 8 * v45);
    if (v44) {
      goto LABEL_60;
    }
    v33 += 4;
    if (v33 >= v32) {
      goto LABEL_13;
    }
    unint64_t v44 = *(void *)(v49 + 8 * v33);
    if (!v44)
    {
      int64_t v46 = v12 + 6;
      while (v32 != v46)
      {
        unint64_t v44 = *(void *)(v49 + 8 * v46++);
        if (v44)
        {
          uint64_t v33 = v46 - 1;
          goto LABEL_54;
        }
      }
      goto LABEL_13;
    }
    goto LABEL_54;
  }
LABEL_13:
  uint64_t result = sub_1C29A8C24();
  *(void *)uint64_t v1 = v3;
  return result;
}

uint64_t sub_1C29A6E40(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = sub_1C299C988(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  int64_t v9 = &v3[2 * v8 + 4];
  if (a1 + 32 < (unint64_t)&v9[2 * v2] && (unint64_t)v9 < a1 + 32 + 16 * v2) {
    goto LABEL_24;
  }
  memcpy(v9, (const void *)(a1 + 32), 16 * v2);
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = sub_1C2A9E6A8();
  __break(1u);
  return result;
}

uint64_t sub_1C29A6F88(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v6 = result;
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || (int64_t v8 = v3[3] >> 1, v8 < v5))
  {
    if (v4 <= v5) {
      int64_t v9 = v4 + v2;
    }
    else {
      int64_t v9 = v4;
    }
    uint64_t v3 = sub_1C299CAC4(isUniquelyReferenced_nonNull_native, v9, 1, v3);
    int64_t v8 = v3[3] >> 1;
  }
  uint64_t v10 = v3[2];
  uint64_t v11 = v8 - v10;
  uint64_t result = (uint64_t)sub_1C29A7DD4(v46, (uint64_t)&v3[5 * v10 + 4], v8 - v10, v6);
  if (result < v2) {
    goto LABEL_15;
  }
  if (result)
  {
    uint64_t v13 = v3[2];
    BOOL v14 = __OFADD__(v13, result);
    uint64_t v15 = v13 + result;
    if (v14)
    {
      __break(1u);
      goto LABEL_51;
    }
    v3[2] = v15;
  }
  if (result != v11) {
    goto LABEL_13;
  }
LABEL_16:
  uint64_t v2 = v3[2];
  uint64_t v43 = v46[0];
  uint64_t v11 = v47;
  uint64_t v42 = v46[1];
  int64_t v12 = v48;
  uint64_t v40 = v47;
  if (!v49)
  {
LABEL_51:
    uint64_t v31 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      return result;
    }
    int64_t v25 = (unint64_t)(v11 + 64) >> 6;
    if (v31 >= v25) {
      goto LABEL_13;
    }
    unint64_t v37 = *(void *)(v42 + 8 * v31);
    if (!v37)
    {
      uint64_t v38 = v12 + 2;
      if (v12 + 2 >= v25) {
        goto LABEL_13;
      }
      unint64_t v37 = *(void *)(v42 + 8 * v38);
      if (v37)
      {
LABEL_60:
        uint64_t v31 = v38;
      }
      else
      {
        if (v12 + 3 >= v25) {
          goto LABEL_13;
        }
        unint64_t v37 = *(void *)(v42 + 8 * (v12 + 3));
        if (!v37) {
          goto LABEL_66;
        }
        uint64_t v31 = v12 + 3;
      }
    }
LABEL_54:
    unint64_t v16 = (v37 - 1) & v37;
    unint64_t v17 = __clz(__rbit64(v37)) + (v31 << 6);
    uint64_t v44 = v31;
    uint64_t v11 = v40;
    goto LABEL_18;
  }
  unint64_t v16 = (v49 - 1) & v49;
  uint64_t v44 = v48;
  unint64_t v17 = __clz(__rbit64(v49)) | (v48 << 6);
LABEL_18:
  uint64_t v18 = (uint64_t *)(*(void *)(v43 + 56) + 40 * v17);
  uint64_t v20 = *v18;
  uint64_t v19 = v18[1];
  uint64_t v22 = v18[2];
  uint64_t v21 = v18[3];
  uint64_t v23 = v18[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (!v20) {
    goto LABEL_13;
  }
  int64_t v41 = (unint64_t)(v11 + 64) >> 6;
  int64_t v12 = v44;
  while (1)
  {
    unint64_t v24 = v3[3];
    int64_t v25 = v24 >> 1;
    int64_t v45 = v24 >> 1;
    if ((uint64_t)(v24 >> 1) < v2 + 1)
    {
      int64_t v35 = v12;
      int64_t v36 = sub_1C299CAC4((void *)(v24 > 1), v2 + 1, 1, v3);
      int64_t v12 = v35;
      uint64_t v3 = v36;
      int64_t v45 = v36[3] >> 1;
    }
    if (v2 < v45) {
      break;
    }
LABEL_20:
    v3[2] = v2;
    if (!v20) {
      goto LABEL_13;
    }
  }
  while (1)
  {
    uint64_t v31 = (uint64_t)&v3[5 * v2 + 4];
    *(void *)uint64_t v31 = v20;
    *(void *)(v31 + 8) = v19;
    *(void *)(v31 + 16) = v22;
    *(void *)(v31 + 24) = v21;
    *(void *)(v31 + 32) = v23;
    ++v2;
    if (!v16) {
      break;
    }
    unint64_t v26 = __clz(__rbit64(v16));
    v16 &= v16 - 1;
    int64_t v27 = v12;
    unint64_t v28 = v26 | (v12 << 6);
LABEL_26:
    unint64_t v29 = (uint64_t *)(*(void *)(v43 + 56) + 40 * v28);
    uint64_t v20 = *v29;
    uint64_t v19 = v29[1];
    uint64_t v22 = v29[2];
    uint64_t v21 = v29[3];
    uint64_t v23 = v29[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v20) {
      BOOL v30 = v2 < v45;
    }
    else {
      BOOL v30 = 0;
    }
    int64_t v12 = v27;
    if (!v30) {
      goto LABEL_20;
    }
  }
  int64_t v27 = v12 + 1;
  if (!__OFADD__(v12, 1))
  {
    if (v27 >= v41) {
      goto LABEL_56;
    }
    unint64_t v32 = *(void *)(v42 + 8 * v27);
    if (v32) {
      goto LABEL_41;
    }
    int64_t v33 = v12 + 2;
    if (v12 + 2 >= v41) {
      goto LABEL_56;
    }
    unint64_t v32 = *(void *)(v42 + 8 * v33);
    if (!v32)
    {
      if (v12 + 3 >= v41) {
        goto LABEL_56;
      }
      unint64_t v32 = *(void *)(v42 + 8 * (v12 + 3));
      if (v32)
      {
        int64_t v27 = v12 + 3;
        goto LABEL_41;
      }
      int64_t v33 = v12 + 4;
      if (v12 + 4 >= v41) {
        goto LABEL_56;
      }
      unint64_t v32 = *(void *)(v42 + 8 * v33);
      if (!v32)
      {
        int64_t v27 = v12 + 5;
        if (v12 + 5 >= v41) {
          goto LABEL_56;
        }
        unint64_t v32 = *(void *)(v42 + 8 * v27);
        if (!v32)
        {
          int64_t v34 = v12 + 6;
          while (v41 != v34)
          {
            unint64_t v32 = *(void *)(v42 + 8 * v34++);
            if (v32)
            {
              int64_t v27 = v34 - 1;
              goto LABEL_41;
            }
          }
LABEL_56:
          v3[2] = v2;
          goto LABEL_13;
        }
        goto LABEL_41;
      }
    }
    int64_t v27 = v33;
LABEL_41:
    unint64_t v16 = (v32 - 1) & v32;
    unint64_t v28 = __clz(__rbit64(v32)) + (v27 << 6);
    goto LABEL_26;
  }
  __break(1u);
LABEL_66:
  uint64_t v38 = v31 + 3;
  if (v31 + 3 < v25)
  {
    unint64_t v37 = *(void *)(v42 + 8 * v38);
    if (v37) {
      goto LABEL_60;
    }
    v31 += 4;
    if (v31 >= v25) {
      goto LABEL_13;
    }
    unint64_t v37 = *(void *)(v42 + 8 * v31);
    if (!v37)
    {
      int64_t v39 = v12 + 6;
      while (v25 != v39)
      {
        unint64_t v37 = *(void *)(v42 + 8 * v39++);
        if (v37)
        {
          uint64_t v31 = v39 - 1;
          goto LABEL_54;
        }
      }
      goto LABEL_13;
    }
    goto LABEL_54;
  }
LABEL_13:
  uint64_t result = sub_1C29A8C24();
  *(void *)uint64_t v1 = v3;
  return result;
}

uint64_t sub_1C29A7434(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = sub_1C2A9E648();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if ((unint64_t)*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v20 = sub_1C2A9E648();
    swift_bridgeObjectRelease();
    uint64_t v5 = v20 + v3;
    if (!__OFADD__(v20, v3)) {
      goto LABEL_5;
    }
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v4 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v5 = v4 + v3;
  if (__OFADD__(v4, v3)) {
    goto LABEL_26;
  }
LABEL_5:
  unint64_t v6 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  uint64_t *v1 = v6;
  uint64_t v8 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v6 & 0x8000000000000000) == 0 && (v6 & 0x4000000000000000) == 0)
  {
    uint64_t v9 = v6 & 0xFFFFFFFFFFFFFF8;
    if (v5 <= *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_15;
    }
    uint64_t v8 = 1;
  }
  if (v6 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = sub_1C2A9E648();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v10 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v10 <= v5) {
    uint64_t v10 = v5;
  }
  swift_bridgeObjectRetain();
  uint64_t v11 = MEMORY[0x1C87643A0](v8, v10, 1, v6);
  swift_bridgeObjectRelease();
  uint64_t *v1 = v11;
  uint64_t v9 = v11 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
  uint64_t v12 = *(void *)(v9 + 16);
  uint64_t v13 = (*(void *)(v9 + 24) >> 1) - v12;
  uint64_t result = sub_1C29A795C(v9 + 8 * v12 + 32, v13, a1);
  if (v15 < v3)
  {
LABEL_27:
    __break(1u);
LABEL_28:
    sub_1C2938118(0, (unint64_t *)&qword_1EA31E440, (uint64_t (*)(uint64_t))sub_1C29A8B5C, MEMORY[0x1E4FBB320]);
    goto LABEL_20;
  }
  uint64_t v16 = v15;
  if (v15 >= 1)
  {
    uint64_t v17 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v18 = __OFADD__(v17, v15);
    uint64_t v19 = v17 + v15;
    if (v18)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v19;
  }
  swift_bridgeObjectRelease();
  if (v16 == v13) {
    goto LABEL_28;
  }
LABEL_20:
  return sub_1C2A9DEA8();
}

uint64_t sub_1C29A764C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = sub_1C299D664(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = (unint64_t)&v3[v8 + 4];
  if (a1 + 32 < v9 + 8 * v2 && v9 < a1 + 32 + 8 * v2) {
    goto LABEL_24;
  }
  sub_1C2943230();
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = sub_1C2A9E6A8();
  __break(1u);
  return result;
}

uint64_t sub_1C29A77AC(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *(void *)(v3 + 24) >> 1)
  {
    unint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    int64_t v24 = v4 + v2;
  }
  else {
    int64_t v24 = v4;
  }
  unint64_t v3 = sub_1C299D8F0(isUniquelyReferenced_nonNull_native, v24, 1, v3);
  unint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = *(void *)(v3 + 16);
  uint64_t v10 = (*(void *)(v3 + 24) >> 1) - v9;
  sub_1C29A8AF0();
  uint64_t v13 = *(void *)(*(void *)(v11 - 8) + 72);
  if (v10 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v12 = *(unsigned __int8 *)(*(void *)(v11 - 8) + 80);
  uint64_t v14 = (v12 + 32) & ~v12;
  unint64_t v15 = v3 + v14 + v13 * v9;
  unint64_t v16 = a1 + v14;
  uint64_t v17 = v13 * v8;
  unint64_t v18 = v15 + v17;
  unint64_t v19 = v16 + v17;
  if (v16 < v18 && v15 < v19) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v21 = *(void *)(v3 + 16);
  BOOL v22 = __OFADD__(v21, v8);
  uint64_t v23 = v21 + v8;
  if (!v22)
  {
    *(void *)(v3 + 16) = v23;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    unint64_t *v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = sub_1C2A9E6A8();
  __break(1u);
  return result;
}

uint64_t sub_1C29A795C(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = sub_1C2A9E648();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = sub_1C2A9E648();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1C2938118(0, (unint64_t *)&qword_1EA31E440, (uint64_t (*)(uint64_t))sub_1C29A8B5C, MEMORY[0x1E4FBB320]);
        sub_1C29A8B9C();
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          uint64_t v12 = sub_1C29975F4(v16, i, a3);
          id v14 = *v13;
          ((void (*)(void (**)(id *), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_1C29A8B5C();
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = sub_1C2A9E6A8();
  __break(1u);
  return result;
}

void *sub_1C29A7B8C(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a4 + 64;
  uint64_t v6 = -1 << *(unsigned char *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v7 = ~(-1 << -(char)v6);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v11 = 0;
    uint64_t v9 = 0;
LABEL_39:
    *uint64_t result = a4;
    result[1] = v5;
    result[2] = ~v6;
    result[3] = v11;
    result[4] = v8;
    return (void *)v9;
  }
  uint64_t v9 = a3;
  if (!a3)
  {
    int64_t v11 = 0;
    goto LABEL_39;
  }
  if (a3 < 0) {
    goto LABEL_41;
  }
  uint64_t v10 = a2;
  uint64_t v25 = -1 << *(unsigned char *)(a4 + 32);
  unint64_t v26 = result;
  int64_t v11 = 0;
  uint64_t v12 = 0;
  int64_t v13 = (unint64_t)(63 - v6) >> 6;
  if (!v8) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v14 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  unint64_t v15 = v14 | (v11 << 6);
  while (1)
  {
    char v19 = *(unsigned char *)(*(void *)(a4 + 48) + v15);
    ++v12;
    uint64_t v20 = *(void *)(a4 + 56) + 40 * v15;
    uint64_t v22 = *(void *)v20;
    uint64_t v21 = *(void *)(v20 + 8);
    uint64_t v23 = *(void *)(v20 + 32);
    long long v24 = *(_OWORD *)(v20 + 16);
    *(unsigned char *)uint64_t v10 = v19;
    *(void *)(v10 + 8) = v22;
    *(void *)(v10 + 16) = v21;
    *(_OWORD *)(v10 + 24) = v24;
    *(void *)(v10 + 40) = v23;
    if (v12 == v9)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v10 += 48;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
    if (v8) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      break;
    }
    if (v16 >= v13) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v5 + 8 * v16);
    if (!v17)
    {
      v11 += 2;
      if (v16 + 1 >= v13)
      {
        unint64_t v8 = 0;
        int64_t v11 = v16;
      }
      else
      {
        unint64_t v17 = *(void *)(v5 + 8 * v11);
        if (v17) {
          goto LABEL_14;
        }
        int64_t v18 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v5 + 8 * v18);
        if (v17)
        {
LABEL_17:
          int64_t v16 = v18;
          goto LABEL_18;
        }
        int64_t v11 = v16 + 3;
        if (v16 + 3 < v13)
        {
          unint64_t v17 = *(void *)(v5 + 8 * v11);
          if (v17)
          {
LABEL_14:
            int64_t v16 = v11;
            goto LABEL_18;
          }
          int64_t v18 = v16 + 4;
          if (v16 + 4 >= v13)
          {
LABEL_33:
            unint64_t v8 = 0;
            goto LABEL_37;
          }
          unint64_t v17 = *(void *)(v5 + 8 * v18);
          if (!v17)
          {
            while (1)
            {
              int64_t v16 = v18 + 1;
              if (__OFADD__(v18, 1)) {
                goto LABEL_42;
              }
              if (v16 >= v13)
              {
                unint64_t v8 = 0;
                int64_t v11 = v13 - 1;
                goto LABEL_37;
              }
              unint64_t v17 = *(void *)(v5 + 8 * v16);
              ++v18;
              if (v17) {
                goto LABEL_18;
              }
            }
          }
          goto LABEL_17;
        }
        unint64_t v8 = 0;
        int64_t v11 = v16 + 2;
      }
LABEL_37:
      uint64_t v9 = v12;
LABEL_38:
      uint64_t v6 = v25;
      uint64_t result = v26;
      goto LABEL_39;
    }
LABEL_18:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v16 << 6);
    int64_t v11 = v16;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

void *sub_1C29A7DD4(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a4 + 64;
  uint64_t v6 = -1 << *(unsigned char *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v7 = ~(-1 << -(char)v6);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v11 = 0;
    uint64_t v9 = 0;
LABEL_39:
    *uint64_t result = a4;
    result[1] = v5;
    result[2] = ~v6;
    result[3] = v11;
    result[4] = v8;
    return (void *)v9;
  }
  uint64_t v9 = a3;
  if (!a3)
  {
    int64_t v11 = 0;
    goto LABEL_39;
  }
  if (a3 < 0) {
    goto LABEL_41;
  }
  uint64_t v10 = a2;
  uint64_t v23 = -1 << *(unsigned char *)(a4 + 32);
  long long v24 = result;
  int64_t v11 = 0;
  uint64_t v12 = 0;
  int64_t v13 = (unint64_t)(63 - v6) >> 6;
  if (!v8) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v14 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  unint64_t v15 = v14 | (v11 << 6);
  while (1)
  {
    ++v12;
    uint64_t v19 = *(void *)(a4 + 56) + 40 * v15;
    uint64_t v20 = *(void *)(v19 + 8);
    uint64_t v21 = *(void *)(v19 + 32);
    long long v22 = *(_OWORD *)(v19 + 16);
    *(void *)uint64_t v10 = *(void *)v19;
    *(void *)(v10 + 8) = v20;
    *(_OWORD *)(v10 + 16) = v22;
    *(void *)(v10 + 32) = v21;
    if (v12 == v9)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v10 += 40;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
    if (v8) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      break;
    }
    if (v16 >= v13) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v5 + 8 * v16);
    if (!v17)
    {
      v11 += 2;
      if (v16 + 1 >= v13)
      {
        unint64_t v8 = 0;
        int64_t v11 = v16;
      }
      else
      {
        unint64_t v17 = *(void *)(v5 + 8 * v11);
        if (v17) {
          goto LABEL_14;
        }
        int64_t v18 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v5 + 8 * v18);
        if (v17)
        {
LABEL_17:
          int64_t v16 = v18;
          goto LABEL_18;
        }
        int64_t v11 = v16 + 3;
        if (v16 + 3 < v13)
        {
          unint64_t v17 = *(void *)(v5 + 8 * v11);
          if (v17)
          {
LABEL_14:
            int64_t v16 = v11;
            goto LABEL_18;
          }
          int64_t v18 = v16 + 4;
          if (v16 + 4 >= v13)
          {
LABEL_33:
            unint64_t v8 = 0;
            goto LABEL_37;
          }
          unint64_t v17 = *(void *)(v5 + 8 * v18);
          if (!v17)
          {
            while (1)
            {
              int64_t v16 = v18 + 1;
              if (__OFADD__(v18, 1)) {
                goto LABEL_42;
              }
              if (v16 >= v13)
              {
                unint64_t v8 = 0;
                int64_t v11 = v13 - 1;
                goto LABEL_37;
              }
              unint64_t v17 = *(void *)(v5 + 8 * v16);
              ++v18;
              if (v17) {
                goto LABEL_18;
              }
            }
          }
          goto LABEL_17;
        }
        unint64_t v8 = 0;
        int64_t v11 = v16 + 2;
      }
LABEL_37:
      uint64_t v9 = v12;
LABEL_38:
      uint64_t v6 = v23;
      uint64_t result = v24;
      goto LABEL_39;
    }
LABEL_18:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v16 << 6);
    int64_t v11 = v16;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_1C29A8014(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2;
  }
  unint64_t v8 = v7 - 2;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 64;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t sub_1C29A809C@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  if (result < 0 || 1 << *(unsigned char *)(a3 + 32) <= result)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (((*(void *)(a3 + 8 * ((unint64_t)result >> 6) + 64) >> result) & 1) == 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (*(_DWORD *)(a3 + 36) != a2)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v4 = *(void *)(a3 + 56) + 40 * result;
  uint64_t v5 = *(void *)(v4 + 8);
  uint64_t v6 = *(void *)(v4 + 32);
  *(void *)a4 = *(void *)v4;
  *(void *)(a4 + 8) = v5;
  *(_OWORD *)(a4 + 16) = *(_OWORD *)(v4 + 16);
  *(void *)(a4 + 32) = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t _s19HealthVisualization16DiagramDataGroupV2eeoiySbAC_ACtFZ_0(uint64_t *a1, uint64_t *a2, int32x2_t a3)
{
  uint64_t v3 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v6 = a1[4];
  uint64_t v7 = a2[1];
  uint64_t v9 = a2[2];
  uint64_t v8 = a2[3];
  uint64_t v10 = a2[4];
  sub_1C2964008(*a1, *a2, a3);
  if ((v11 & 1) == 0) {
    return 0;
  }
  if (!v5)
  {
    if (v9) {
      return 0;
    }
    goto LABEL_9;
  }
  if (!v9) {
    return 0;
  }
  if (v3 == v7 && v5 == v9 || (char v12 = sub_1C2A9E8D8(), result = 0, (v12 & 1) != 0))
  {
LABEL_9:
    if (v6)
    {
      if (v10 && (v4 == v8 && v6 == v10 || (sub_1C2A9E8D8() & 1) != 0)) {
        return 1;
      }
    }
    else if (!v10)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

unint64_t sub_1C29A8228()
{
  unint64_t result = qword_1EBB920A8;
  if (!qword_1EBB920A8)
  {
    sub_1C2938118(255, &qword_1EBB92748, (uint64_t (*)(uint64_t))sub_1C2943230, MEMORY[0x1E4FBB320]);
    sub_1C29431AC(&qword_1EBB92080, (void (*)(void))sub_1C29A830C, (void (*)(void))sub_1C29A8360);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB920A8);
  }
  return result;
}

unint64_t sub_1C29A830C()
{
  unint64_t result = qword_1EBB91C78;
  if (!qword_1EBB91C78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB91C78);
  }
  return result;
}

unint64_t sub_1C29A8360()
{
  unint64_t result = qword_1EBB91C88;
  if (!qword_1EBB91C88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB91C88);
  }
  return result;
}

uint64_t destroy for DiagramDataGroup()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for DiagramDataGroup(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for DiagramDataGroup(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for DiagramDataGroup(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[4];
  a1[3] = a2[3];
  a1[4] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DiagramDataGroup(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DiagramDataGroup(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DiagramDataGroup()
{
  return &type metadata for DiagramDataGroup;
}

ValueMetadata *type metadata accessor for DiagramDataKey()
{
  return &type metadata for DiagramDataKey;
}

uint64_t assignWithCopy for DiagramData(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  long long v4 = a2[1];
  *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for DiagramData(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DiagramData(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DiagramData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 40) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t method lookup function for DiagramFactory(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for DiagramFactory);
}

uint64_t dispatch thunk of DiagramFactory.__allocating_init(hbxViewControllerFactory:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of DiagramFactory.diagramTransformer(diagramSize:data:configuration:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

ValueMetadata *type metadata accessor for DiagramData.CodingKeys()
{
  return &type metadata for DiagramData.CodingKeys;
}

ValueMetadata *type metadata accessor for DiagramDataGroup.CodingKeys()
{
  return &type metadata for DiagramDataGroup.CodingKeys;
}

unint64_t sub_1C29A87C8()
{
  unint64_t result = qword_1EA31E5A8;
  if (!qword_1EA31E5A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA31E5A8);
  }
  return result;
}

unint64_t sub_1C29A8820()
{
  unint64_t result = qword_1EA31E5B0;
  if (!qword_1EA31E5B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA31E5B0);
  }
  return result;
}

uint64_t sub_1C29A8874(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x73746E696F70 && a2 == 0xE600000000000000;
  if (v2 || (sub_1C2A9E8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x697461746F6E6E61 && a2 == 0xEA00000000006E6FLL || (sub_1C2A9E8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x80000001C2AB7C90)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = sub_1C2A9E8D8();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_1C29A89CC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x65646F4D61746164 && a2 == 0xEE0065636170536CLL;
  if (v2 || (sub_1C2A9E8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x756F724761746164 && a2 == 0xEA00000000007370)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_1C2A9E8D8();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

void sub_1C29A8AF0()
{
  if (!qword_1EBB92218)
  {
    sub_1C2A9C928();
    sub_1C296291C();
    unint64_t v0 = sub_1C2A9E9F8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EBB92218);
    }
  }
}

unint64_t sub_1C29A8B5C()
{
  unint64_t result = qword_1EBB90D78;
  if (!qword_1EBB90D78)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EBB90D78);
  }
  return result;
}

unint64_t sub_1C29A8B9C()
{
  unint64_t result = qword_1EA31E5B8;
  if (!qword_1EA31E5B8)
  {
    sub_1C2938118(255, (unint64_t *)&qword_1EA31E440, (uint64_t (*)(uint64_t))sub_1C29A8B5C, MEMORY[0x1E4FBB320]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA31E5B8);
  }
  return result;
}

uint64_t sub_1C29A8C24()
{
  return swift_release();
}

uint64_t sub_1C29A8C2C(uint64_t a1)
{
  return sub_1C29A8C90(a1, qword_1EBB90270, MEMORY[0x1E4F26F40]);
}

uint64_t static DateComponents.oneHour.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C29A8FE8(&qword_1EBB90258, (uint64_t)qword_1EBB90270, a1);
}

uint64_t sub_1C29A8C70(uint64_t a1)
{
  return sub_1C29A8C90(a1, qword_1EBB91BF0, MEMORY[0x1E4F26F28]);
}

uint64_t sub_1C29A8C90(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, void))
{
  sub_1C2939CE8(0, (unint64_t *)&qword_1EBB92530, MEMORY[0x1E4F27D68]);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v16 - v6;
  sub_1C2939CE8(0, &qword_1EBB92528, MEMORY[0x1E4F27CA0]);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v16 - v9;
  uint64_t v11 = sub_1C2A9C468();
  __swift_allocate_value_buffer(v11, a2);
  __swift_project_value_buffer(v11, (uint64_t)a2);
  uint64_t v12 = sub_1C2A9C868();
  int64_t v13 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
  v13(v10, 1, 1, v12);
  uint64_t v14 = sub_1C2A9C8B8();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v7, 1, 1, v14);
  sub_1C2A9C438();
  sub_1C2A9C838();
  v13(v10, 0, 1, v12);
  sub_1C2A9C458();
  return a3(1, 0);
}

uint64_t static DateComponents.oneDay.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C29A8FE8(&qword_1EBB92318, (uint64_t)qword_1EBB91BF0, a1);
}

uint64_t sub_1C29A8F1C(uint64_t a1)
{
  return sub_1C29A8C90(a1, qword_1EBB8DEB8, MEMORY[0x1E4F26EF8]);
}

uint64_t static DateComponents.oneWeek.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C29A8FE8(&qword_1EBB8E230, (uint64_t)qword_1EBB8DEB8, a1);
}

uint64_t sub_1C29A8F60(uint64_t a1)
{
  return sub_1C29A8C90(a1, qword_1EBB8DEE8, MEMORY[0x1E4F26F60]);
}

uint64_t static DateComponents.oneMonth.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C29A8FE8(&qword_1EBB8E118, (uint64_t)qword_1EBB8DEE8, a1);
}

uint64_t sub_1C29A8FA4(uint64_t a1)
{
  return sub_1C29A8C90(a1, qword_1EBB8DED0, MEMORY[0x1E4F26F50]);
}

uint64_t static DateComponents.oneYear.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C29A8FE8(&qword_1EBB8E238, (uint64_t)qword_1EBB8DED0, a1);
}

uint64_t sub_1C29A8FE8@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = sub_1C2A9C468();
  uint64_t v6 = __swift_project_value_buffer(v5, a2);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v7(a3, v6, v5);
}

uint64_t DateComponents.negated.getter@<X0>(uint64_t a1@<X8>)
{
  sub_1C2939CE8(0, (unint64_t *)&qword_1EBB92530, MEMORY[0x1E4F27D68]);
  MEMORY[0x1F4188790](v2 - 8);
  long long v4 = (char *)v21 - v3;
  sub_1C2939CE8(0, &qword_1EBB92528, MEMORY[0x1E4F27CA0]);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t result = sub_1C2A9C3F8();
  uint64_t v7 = result;
  int v9 = v8;
  if ((v8 & 1) == 0)
  {
    uint64_t v7 = -result;
    if (__OFSUB__(0, result))
    {
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
  }
  uint64_t result = sub_1C2A9C408();
  uint64_t v10 = result;
  char v12 = v11;
  if ((v11 & 1) == 0)
  {
    uint64_t v10 = -result;
    if (__OFSUB__(0, result)) {
      goto LABEL_17;
    }
  }
  uint64_t result = sub_1C2A9C3A8();
  uint64_t v13 = result;
  if ((v14 & 1) == 0)
  {
    uint64_t v13 = -result;
    if (__OFSUB__(0, result)) {
      goto LABEL_18;
    }
  }
  int v28 = v9;
  uint64_t result = sub_1C2A9C3D8();
  if ((v15 & 1) == 0)
  {
    BOOL v16 = __OFSUB__(0, result);
    uint64_t result = -result;
    if (v16) {
      goto LABEL_19;
    }
  }
  uint64_t v26 = result;
  uint64_t v27 = v13;
  uint64_t result = sub_1C2A9C3E8();
  if ((v17 & 1) == 0)
  {
    BOOL v16 = __OFSUB__(0, result);
    uint64_t result = -result;
    if (v16) {
      goto LABEL_20;
    }
  }
  uint64_t v23 = result;
  uint64_t v24 = v10;
  uint64_t v25 = v7;
  uint64_t result = sub_1C2A9C418();
  if ((v18 & 1) == 0 && __OFSUB__(0, result)) {
    goto LABEL_21;
  }
  uint64_t v22 = a1;
  uint64_t result = sub_1C2A9C428();
  if ((v19 & 1) != 0 || !__OFSUB__(0, result))
  {
    v28 &= 1u;
    v21[1] = v12 & 1;
    sub_1C2A9C448();
    uint64_t v20 = sub_1C2A9C8B8();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v4, 1, 1, v20);
    return sub_1C2A9C438();
  }
LABEL_22:
  __break(1u);
  return result;
}

Swift::String __swiftcall DateComponents.stringWithNonLocalizedAbbreviatedFormat()()
{
  sub_1C2A9C3F8();
  if (v0)
  {
    uint64_t v2 = (void *)MEMORY[0x1E4FBC860];
  }
  else
  {
    uint64_t v42 = sub_1C2A9E898();
    uint64_t v49 = v1;
    sub_1C2A9DDB8();
    uint64_t v2 = sub_1C299D2E0(0, 1, 1, MEMORY[0x1E4FBC860]);
    unint64_t v4 = v2[2];
    unint64_t v3 = v2[3];
    if (v4 >= v3 >> 1) {
      uint64_t v2 = sub_1C299D2E0((void *)(v3 > 1), v4 + 1, 1, v2);
    }
    v2[2] = v4 + 1;
    uint64_t v5 = &v2[2 * v4];
    v5[4] = v42;
    v5[5] = v49;
  }
  sub_1C2A9C408();
  if ((v6 & 1) == 0)
  {
    uint64_t v43 = sub_1C2A9E898();
    uint64_t v50 = v7;
    sub_1C2A9DDB8();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = sub_1C299D2E0(0, v2[2] + 1, 1, v2);
    }
    unint64_t v9 = v2[2];
    unint64_t v8 = v2[3];
    if (v9 >= v8 >> 1) {
      uint64_t v2 = sub_1C299D2E0((void *)(v8 > 1), v9 + 1, 1, v2);
    }
    v2[2] = v9 + 1;
    uint64_t v10 = &v2[2 * v9];
    void v10[4] = v43;
    v10[5] = v50;
  }
  sub_1C2A9C3A8();
  if ((v11 & 1) == 0)
  {
    uint64_t v44 = sub_1C2A9E898();
    uint64_t v51 = v12;
    sub_1C2A9DDB8();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = sub_1C299D2E0(0, v2[2] + 1, 1, v2);
    }
    unint64_t v14 = v2[2];
    unint64_t v13 = v2[3];
    if (v14 >= v13 >> 1) {
      uint64_t v2 = sub_1C299D2E0((void *)(v13 > 1), v14 + 1, 1, v2);
    }
    v2[2] = v14 + 1;
    char v15 = &v2[2 * v14];
    v15[4] = v44;
    v15[5] = v51;
  }
  sub_1C2A9C3D8();
  if ((v16 & 1) == 0)
  {
    uint64_t v45 = sub_1C2A9E898();
    uint64_t v52 = v17;
    sub_1C2A9DDB8();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = sub_1C299D2E0(0, v2[2] + 1, 1, v2);
    }
    unint64_t v19 = v2[2];
    unint64_t v18 = v2[3];
    if (v19 >= v18 >> 1) {
      uint64_t v2 = sub_1C299D2E0((void *)(v18 > 1), v19 + 1, 1, v2);
    }
    v2[2] = v19 + 1;
    uint64_t v20 = &v2[2 * v19];
    v20[4] = v45;
    CGFloat v20[5] = v52;
  }
  sub_1C2A9C3E8();
  if ((v21 & 1) == 0)
  {
    uint64_t v46 = sub_1C2A9E898();
    uint64_t v53 = v22;
    sub_1C2A9DDB8();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = sub_1C299D2E0(0, v2[2] + 1, 1, v2);
    }
    unint64_t v24 = v2[2];
    unint64_t v23 = v2[3];
    if (v24 >= v23 >> 1) {
      uint64_t v2 = sub_1C299D2E0((void *)(v23 > 1), v24 + 1, 1, v2);
    }
    v2[2] = v24 + 1;
    uint64_t v25 = &v2[2 * v24];
    v25[4] = v46;
    v25[5] = v53;
  }
  sub_1C2A9C418();
  if ((v26 & 1) == 0)
  {
    uint64_t v47 = sub_1C2A9E898();
    uint64_t v54 = v27;
    sub_1C2A9DDB8();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = sub_1C299D2E0(0, v2[2] + 1, 1, v2);
    }
    unint64_t v29 = v2[2];
    unint64_t v28 = v2[3];
    if (v29 >= v28 >> 1) {
      uint64_t v2 = sub_1C299D2E0((void *)(v28 > 1), v29 + 1, 1, v2);
    }
    v2[2] = v29 + 1;
    BOOL v30 = &v2[2 * v29];
    v30[4] = v47;
    v30[5] = v54;
  }
  sub_1C2A9C428();
  if ((v31 & 1) == 0)
  {
    uint64_t v48 = sub_1C2A9E898();
    uint64_t v55 = v32;
    sub_1C2A9DDB8();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v2 = sub_1C299D2E0(0, v2[2] + 1, 1, v2);
    }
    unint64_t v34 = v2[2];
    unint64_t v33 = v2[3];
    if (v34 >= v33 >> 1) {
      uint64_t v2 = sub_1C299D2E0((void *)(v33 > 1), v34 + 1, 1, v2);
    }
    v2[2] = v34 + 1;
    int64_t v35 = &v2[2 * v34];
    v35[4] = v48;
    uint64_t v35[5] = v55;
  }
  sub_1C29A9864();
  sub_1C29A98BC();
  uint64_t v36 = sub_1C2A9DCA8();
  uint64_t v38 = v37;
  swift_bridgeObjectRelease();
  uint64_t v39 = v36;
  uint64_t v40 = v38;
  result._uint64_t object = v40;
  result._uint64_t countAndFlagsBits = v39;
  return result;
}

void sub_1C29A9864()
{
  if (!qword_1EBB920B0)
  {
    unint64_t v0 = sub_1C2A9DEF8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EBB920B0);
    }
  }
}

unint64_t sub_1C29A98BC()
{
  unint64_t result = qword_1EBB90268;
  if (!qword_1EBB90268)
  {
    sub_1C29A9864();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB90268);
  }
  return result;
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t static HighlightCalendarViewModel.numberOfDaysInWeek.getter()
{
  return 7;
}

uint64_t HighlightCalendarViewModel.weekViewModels.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t HighlightCalendarViewModel.longWeekdayStrings.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t HighlightCalendarViewModel.shortWeekdayStrings.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t HighlightCalendarViewModel.showsSeparatorBetweenHeaderAndWeeks.getter()
{
  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t HighlightCalendarViewModel.init(weekViewModels:longWeekdayStrings:shortWeekdayStrings:showsSeparatorBetweenHeaderAndWeeks:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  *(void *)a5 = result;
  *(void *)(a5 + 8) = a2;
  *(void *)(a5 + 16) = a3;
  *(unsigned char *)(a5 + 24) = a4;
  return result;
}

uint64_t HighlightCalendarWeekViewModel.dayViewModels.getter()
{
  return swift_bridgeObjectRetain();
}

HealthVisualization::HighlightCalendarWeekViewModel __swiftcall HighlightCalendarWeekViewModel.init(dayViewModels:)(HealthVisualization::HighlightCalendarWeekViewModel dayViewModels)
{
  v1->dayViewModels._rawValue = dayViewModels.dayViewModels._rawValue;
  return dayViewModels;
}

uint64_t HighlightCalendarDayViewModel.monthText.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t HighlightCalendarDayViewModel.hideMonthText.getter()
{
  return *(unsigned __int8 *)(v0 + 16);
}

id HighlightCalendarDayViewModel.circleState.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void **)(v1 + 24);
  uint64_t v3 = *(void **)(v1 + 32);
  uint64_t v4 = *(void *)(v1 + 40);
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  char v5 = *(unsigned char *)(v1 + 48);
  *(unsigned char *)(a1 + 24) = v5;
  return sub_1C29983CC(v2, v3, v4, v5);
}

id HighlightCalendarDayViewModel.accentColor.getter()
{
  return *(id *)(v0 + 56);
}

id HighlightCalendarDayViewModel.backgroundColor.getter()
{
  return *(id *)(v0 + 64);
}

void *HighlightCalendarDayViewModel.dayTextColor.getter()
{
  uint64_t v1 = *(void **)(v0 + 72);
  id v2 = v1;
  return v1;
}

void *HighlightCalendarDayViewModel.alternateDayTextColorWhenUnselected.getter()
{
  uint64_t v1 = *(void **)(v0 + 80);
  id v2 = v1;
  return v1;
}

void HighlightCalendarDayViewModel.dayNumberSize.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 88);
}

void HighlightCalendarDayViewModel.circleSize.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 89);
}

uint64_t HighlightCalendarDayViewModel.axProjectionState.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for HighlightCalendarDayViewModel(0);
  return sub_1C29AC70C(v1 + *(int *)(v3 + 52), a1, (uint64_t (*)(void))sub_1C29A9AF8);
}

uint64_t type metadata accessor for HighlightCalendarDayViewModel(uint64_t a1)
{
  return sub_1C296F4B8(a1, qword_1EBB90988);
}

void sub_1C29A9AF8()
{
  if (!qword_1EBB90668)
  {
    type metadata accessor for AXProjectionState(255);
    unint64_t v0 = sub_1C2A9E328();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EBB90668);
    }
  }
}

uint64_t type metadata accessor for AXProjectionState(uint64_t a1)
{
  return sub_1C296F4B8(a1, qword_1EBB90628);
}

double static HighlightCalendarDayViewModel.CircleState.Constants.defaultTodayRingAlpha.getter()
{
  return 0.4;
}

id HighlightCalendarDayViewModel.NumberSize.font.getter()
{
  if (!*v0)
  {
    if (byte_1EA31EF08 == 1)
    {
      if (qword_1EBB91258 != -1) {
        swift_once();
      }
      uint64_t v7 = (void *)qword_1EBB907C8;
      sub_1C29376D4(0, (unint64_t *)&qword_1EBB90DA0);
      id v8 = v7;
      unint64_t v9 = (void *)sub_1C2A9E2D8();
      id v4 = objc_msgSend(v8, sel_objectForKey_, v9);

      if (!v4)
      {
        uint64_t v10 = self;
        sub_1C2A9DD28();
        char v11 = (void *)sub_1C2A9DCF8();
        swift_bridgeObjectRelease();
        id v4 = objc_msgSend(v10, sel_hk_preferredFontForTextStyle_symbolicTraits_maximumContentSizeCategory_, v11, 32770, *MEMORY[0x1E4FB27B0]);

        if (byte_1EA31EF08 == 1) {
          goto LABEL_20;
        }
      }
      return v4;
    }
LABEL_22:
    char v21 = self;
    sub_1C2A9DD28();
    unint64_t v18 = (void *)sub_1C2A9DCF8();
    swift_bridgeObjectRelease();
    id v20 = objc_msgSend(v21, sel_hk_preferredFontForTextStyle_symbolicTraits_maximumContentSizeCategory_, v18, 32770, *MEMORY[0x1E4FB27B0]);
    goto LABEL_23;
  }
  if (*v0 != 1)
  {
    if (byte_1EA31EF08 == 1)
    {
      if (qword_1EBB91258 != -1) {
        swift_once();
      }
      uint64_t v12 = (void *)qword_1EBB907C8;
      sub_1C29376D4(0, (unint64_t *)&qword_1EBB90DA0);
      id v13 = v12;
      unint64_t v14 = (void *)sub_1C2A9E2D8();
      id v4 = objc_msgSend(v13, sel_objectForKey_, v14);

      if (!v4)
      {
        char v15 = self;
        sub_1C2A9DD28();
        char v16 = (void *)sub_1C2A9DCF8();
        swift_bridgeObjectRelease();
        id v4 = objc_msgSend(v15, sel_hk_preferredFontForTextStyle_symbolicTraits_maximumContentSizeCategory_, v16, 32770, *MEMORY[0x1E4FB27B0]);

        if (byte_1EA31EF08 == 1) {
          goto LABEL_20;
        }
      }
      return v4;
    }
    goto LABEL_22;
  }
  if (byte_1EA31EF08 != 1)
  {
    unint64_t v19 = self;
    sub_1C2A9DD28();
    unint64_t v18 = (void *)sub_1C2A9DCF8();
    swift_bridgeObjectRelease();
    id v20 = objc_msgSend(v19, sel_hk_preferredFontForTextStyle_symbolicTraits_maximumContentSizeCategory_, v18, 0x8000, *MEMORY[0x1E4FB27B0]);
LABEL_23:
    id v4 = v20;
    goto LABEL_24;
  }
  if (qword_1EBB91258 != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)qword_1EBB907C8;
  sub_1C29376D4(0, (unint64_t *)&qword_1EBB90DA0);
  id v2 = v1;
  uint64_t v3 = (void *)sub_1C2A9E2D8();
  id v4 = objc_msgSend(v2, sel_objectForKey_, v3);

  if (!v4)
  {
    char v5 = self;
    sub_1C2A9DD28();
    char v6 = (void *)sub_1C2A9DCF8();
    swift_bridgeObjectRelease();
    id v4 = objc_msgSend(v5, sel_hk_preferredFontForTextStyle_symbolicTraits_maximumContentSizeCategory_, v6, 0x8000, *MEMORY[0x1E4FB27B0]);

    if (byte_1EA31EF08 == 1)
    {
LABEL_20:
      id v17 = (id)qword_1EBB907C8;
      unint64_t v18 = (void *)sub_1C2A9E2D8();
      objc_msgSend(v17, sel_setObject_forKey_, v4, v18);

LABEL_24:
    }
  }
  return v4;
}

BOOL static HighlightCalendarDayViewModel.NumberSize.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t HighlightCalendarDayViewModel.NumberSize.hash(into:)()
{
  return sub_1C2A9E9C8();
}

uint64_t HighlightCalendarDayViewModel.NumberSize.hashValue.getter()
{
  return sub_1C2A9E9E8();
}

BOOL static HighlightCalendarDayViewModel.CircleSize.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t HighlightCalendarDayViewModel.CircleSize.hash(into:)()
{
  return sub_1C2A9E9C8();
}

uint64_t HighlightCalendarDayViewModel.CircleSize.hashValue.getter()
{
  return sub_1C2A9E9E8();
}

unint64_t HighlightCalendarDayViewModel.AXProbability.init(rawValue:)(unint64_t result)
{
  if (result > 2) {
    return 0;
  }
  return result;
}

uint64_t *sub_1C29AA1F4@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *result;
  BOOL v3 = (unint64_t)*result > 2;
  if ((unint64_t)*result > 2) {
    uint64_t v2 = 0;
  }
  *(void *)a2 = v2;
  *(unsigned char *)(a2 + 8) = v3;
  return result;
}

unint64_t HighlightCalendarDayViewModel.AXCircleState.init(rawValue:)(unint64_t a1)
{
  return sub_1C29AAADC(a1);
}

uint64_t sub_1C29AA230()
{
  return sub_1C2A9E9E8();
}

uint64_t sub_1C29AA278()
{
  return sub_1C2A9E9C8();
}

uint64_t sub_1C29AA2A4()
{
  return sub_1C2A9E9E8();
}

unint64_t sub_1C29AA2E8@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = sub_1C29AAADC(*a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t HighlightCalendarDayViewModel.init(monthText:hideMonthText:circleState:accentColor:backgroundColor:dayTextColor:alternateDayTextColorWhenUnselected:dayNumberSize:circleSize:axProjectionState:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, char *a10, char *a11, uint64_t a12)
{
  uint64_t v13 = *(void *)(a4 + 16);
  char v14 = *(unsigned char *)(a4 + 24);
  char v15 = *a10;
  char v16 = *a11;
  *(void *)a9 = a1;
  *(void *)(a9 + 8) = a2;
  *(unsigned char *)(a9 + 16) = a3;
  *(_OWORD *)(a9 + 24) = *(_OWORD *)a4;
  *(void *)(a9 + 40) = v13;
  *(unsigned char *)(a9 + 48) = v14;
  *(void *)(a9 + 56) = a5;
  *(void *)(a9 + 64) = a6;
  *(void *)(a9 + 72) = a7;
  *(void *)(a9 + 80) = a8;
  *(unsigned char *)(a9 + 88) = v15;
  *(unsigned char *)(a9 + 89) = v16;
  uint64_t v17 = type metadata accessor for HighlightCalendarDayViewModel(0);
  return sub_1C29AC8E4(a12, a9 + *(int *)(v17 + 52), (uint64_t (*)(void))sub_1C29A9AF8);
}

id static HighlightCalendarDayViewModel.emptyDayViewModel()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = self;
  id v3 = objc_msgSend(v2, sel_clearColor);
  uint64_t v4 = a1 + *(int *)(type metadata accessor for HighlightCalendarDayViewModel(0) + 52);
  uint64_t v5 = type metadata accessor for AXProjectionState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  id result = objc_msgSend(v2, sel_tertiaryLabelColor);
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0xE000000000000000;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 48) = 5;
  *(void *)(a1 + 56) = v3;
  *(void *)(a1 + 64) = result;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(_WORD *)(a1 + 88) = 0;
  return result;
}

id sub_1C29AA488()
{
  uint64_t v1 = *(void **)(v0 + 24);
  uint64_t v2 = *(void **)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 40);
  switch(*(unsigned char *)(v0 + 48))
  {
    case 1:
    case 2:
      uint64_t v4 = *(void **)(v0 + 56);
      goto LABEL_4;
    case 3:
    case 4:
      uint64_t v4 = *(void **)(v0 + 64);
LABEL_4:
      id result = v4;
      break;
    case 5:
      id v9 = objc_msgSend(self, sel_clearColor);
      id result = v9;
      break;
    default:
      unsigned int v6 = objc_msgSend(v1, sel_isPaused);
      uint64_t v7 = self;
      if (v6) {
        id v8 = objc_msgSend(v7, sel_clearColor);
      }
      else {
        id v8 = objc_msgSend(v7, sel_blackColor);
      }
      id v10 = v8;
      sub_1C2998420(v1, v2, v3, 0);
      id result = v10;
      break;
  }
  return result;
}

id sub_1C29AA5C0()
{
  uint64_t v1 = type metadata accessor for HighlightCalendarDayViewModel(0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(void *)(v2 + 64);
  MEMORY[0x1F4188790](v1 - 8);
  switch(*(unsigned char *)(v0 + 48))
  {
    case 1:
    case 2:
      uint64_t v4 = *(void **)(v0 + 72);
      if (v4)
      {
        return v4;
      }
      else
      {
        id v11 = objc_msgSend(self, sel_whiteColor);
LABEL_9:
        return v11;
      }
    case 3:
    case 4:
      sub_1C29AC70C(v0, (uint64_t)aBlock - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for HighlightCalendarDayViewModel);
      unint64_t v6 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
      uint64_t v7 = swift_allocObject();
      sub_1C29AC8E4((uint64_t)aBlock - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v7 + v6, type metadata accessor for HighlightCalendarDayViewModel);
      id v8 = objc_allocWithZone(MEMORY[0x1E4FB1618]);
      aBlock[4] = sub_1C29AC94C;
      aBlock[5] = v7;
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1C2932F80;
      aBlock[3] = &block_descriptor_1;
      id v9 = _Block_copy(aBlock);
      id v10 = objc_msgSend(v8, sel_initWithDynamicProvider_, v9);
      _Block_release(v9);
      swift_release();
      return v10;
    case 5:
      id v11 = objc_msgSend(self, sel_clearColor);
      goto LABEL_9;
    default:
      sub_1C2A9E628();
      __break(1u);
      JUMPOUT(0x1C29AA868);
  }
}

id sub_1C29AA880(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for HighlightCalendarDayViewModel(0);
  MEMORY[0x1F4188790](v4 - 8);
  unint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void **)(a2 + 80);
  sub_1C29AC70C(a2, (uint64_t)v6, type metadata accessor for HighlightCalendarDayViewModel);
  if (v7)
  {
    id v8 = v7;
  }
  else
  {
    id v9 = (void *)*((void *)v6 + 9);
    if (v9) {
      id v10 = v9;
    }
    else {
      id v10 = objc_msgSend(self, sel_secondaryLabelColor);
    }
    id v8 = v10;
  }
  id v11 = v7;
  sub_1C29AC9BC((uint64_t)v6, type metadata accessor for HighlightCalendarDayViewModel);
  sub_1C29376D4(0, (unint64_t *)&qword_1EBB90D88);
  uint64_t v12 = self;
  id v13 = objc_msgSend(v12, sel_secondaryLabelColor);
  char v14 = sub_1C2A9E2B8();

  if ((v14 & 1) == 0 || objc_msgSend(a1, sel_accessibilityContrast) != (id)1) {
    return v8;
  }
  id v15 = objc_msgSend(a1, sel_userInterfaceStyle);
  char v16 = &selRef_whiteColor;
  if (v15 != (id)2) {
    char v16 = &selRef_blackColor;
  }
  id v17 = [v12 *v16];

  return v17;
}

uint64_t AXProjectionState.init(axDate:axProbability:axProjectionKind:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = sub_1C2A9C6E8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(a5, a1, v10);
  uint64_t result = type metadata accessor for AXProjectionState(0);
  *(void *)(a5 + *(int *)(result + 20)) = a2;
  uint64_t v12 = (void *)(a5 + *(int *)(result + 24));
  *uint64_t v12 = a3;
  v12[1] = a4;
  return result;
}

unint64_t sub_1C29AAADC(unint64_t result)
{
  if (result > 3) {
    return 0;
  }
  return result;
}

unint64_t sub_1C29AAAF0()
{
  unint64_t result = qword_1EA31E5C0;
  if (!qword_1EA31E5C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA31E5C0);
  }
  return result;
}

unint64_t sub_1C29AAB48()
{
  unint64_t result = qword_1EA31E5C8;
  if (!qword_1EA31E5C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA31E5C8);
  }
  return result;
}

unint64_t sub_1C29AABA0()
{
  unint64_t result = qword_1EA31E5D0;
  if (!qword_1EA31E5D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA31E5D0);
  }
  return result;
}

unint64_t sub_1C29AABF8()
{
  unint64_t result = qword_1EA31E5D8;
  if (!qword_1EA31E5D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA31E5D8);
  }
  return result;
}

uint64_t destroy for HighlightCalendarViewModel()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for HighlightCalendarViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for HighlightCalendarViewModel(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for HighlightCalendarViewModel(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for HighlightCalendarViewModel(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 25)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HighlightCalendarViewModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 25) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HighlightCalendarViewModel()
{
  return &type metadata for HighlightCalendarViewModel;
}

ValueMetadata *type metadata accessor for HighlightCalendarWeekViewModel()
{
  return &type metadata for HighlightCalendarWeekViewModel;
}

uint64_t initializeBufferWithCopyOfBuffer for HighlightCalendarDayViewModel(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v26 = *a2;
    *(void *)a1 = *a2;
    a1 = v26 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    id v8 = (void *)a2[3];
    id v9 = (void *)a2[4];
    uint64_t v10 = a2[5];
    char v11 = *((unsigned char *)a2 + 48);
    swift_bridgeObjectRetain();
    sub_1C29983CC(v8, v9, v10, v11);
    *(void *)(a1 + 24) = v8;
    *(void *)(a1 + 32) = v9;
    *(void *)(a1 + 40) = v10;
    *(unsigned char *)(a1 + 48) = v11;
    uint64_t v12 = (void *)a2[7];
    id v13 = (void *)a2[8];
    *(void *)(a1 + 56) = v12;
    *(void *)(a1 + 64) = v13;
    char v14 = (void *)a2[9];
    id v15 = (void *)a2[10];
    *(void *)(a1 + 72) = v14;
    *(void *)(a1 + 80) = v15;
    *(unsigned char *)(a1 + 88) = *((unsigned char *)a2 + 88);
    uint64_t v16 = *(int *)(a3 + 52);
    id v17 = (char *)a2 + v16;
    __dst = (char *)(a1 + v16);
    *(unsigned char *)(a1 + 89) = *((unsigned char *)a2 + 89);
    uint64_t v18 = type metadata accessor for AXProjectionState(0);
    uint64_t v19 = *(void *)(v18 - 8);
    id v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
    id v21 = v12;
    id v22 = v13;
    id v23 = v14;
    id v24 = v15;
    if (v20(v17, 1, v18))
    {
      sub_1C29A9AF8();
      memcpy(__dst, v17, *(void *)(*(void *)(v25 - 8) + 64));
    }
    else
    {
      uint64_t v27 = sub_1C2A9C6E8();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 16))(__dst, v17, v27);
      *(void *)&__dst[*(int *)(v18 + 20)] = *(void *)&v17[*(int *)(v18 + 20)];
      uint64_t v28 = *(int *)(v18 + 24);
      unint64_t v29 = &__dst[v28];
      BOOL v30 = &v17[v28];
      uint64_t v31 = *((void *)v30 + 1);
      *(void *)unint64_t v29 = *(void *)v30;
      *((void *)v29 + 1) = v31;
      uint64_t v32 = *(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56);
      swift_bridgeObjectRetain();
      v32(__dst, 0, 1, v18);
    }
  }
  return a1;
}

uint64_t destroy for HighlightCalendarDayViewModel(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  sub_1C2998420(*(void **)(a1 + 24), *(id *)(a1 + 32), *(void *)(a1 + 40), *(unsigned char *)(a1 + 48));

  uint64_t v4 = a1 + *(int *)(a2 + 52);
  uint64_t v5 = type metadata accessor for AXProjectionState(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5);
  if (!result)
  {
    uint64_t v7 = sub_1C2A9C6E8();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v4, v7);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for HighlightCalendarDayViewModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v7 = *(void **)(a2 + 24);
  id v8 = *(void **)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  char v10 = *(unsigned char *)(a2 + 48);
  swift_bridgeObjectRetain();
  sub_1C29983CC(v7, v8, v9, v10);
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  *(unsigned char *)(a1 + 48) = v10;
  char v11 = *(void **)(a2 + 56);
  uint64_t v12 = *(void **)(a2 + 64);
  *(void *)(a1 + 56) = v11;
  *(void *)(a1 + 64) = v12;
  id v13 = *(void **)(a2 + 72);
  char v14 = *(void **)(a2 + 80);
  *(void *)(a1 + 72) = v13;
  *(void *)(a1 + 80) = v14;
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  char v15 = *(unsigned char *)(a2 + 89);
  uint64_t v16 = *(int *)(a3 + 52);
  id v17 = (char *)(a2 + v16);
  __dst = (char *)(a1 + v16);
  *(unsigned char *)(a1 + 89) = v15;
  uint64_t v18 = type metadata accessor for AXProjectionState(0);
  uint64_t v19 = *(void *)(v18 - 8);
  id v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
  id v21 = v11;
  id v22 = v12;
  id v23 = v13;
  id v24 = v14;
  if (v20(v17, 1, v18))
  {
    sub_1C29A9AF8();
    memcpy(__dst, v17, *(void *)(*(void *)(v25 - 8) + 64));
  }
  else
  {
    uint64_t v26 = sub_1C2A9C6E8();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 16))(__dst, v17, v26);
    *(void *)&__dst[*(int *)(v18 + 20)] = *(void *)&v17[*(int *)(v18 + 20)];
    uint64_t v27 = *(int *)(v18 + 24);
    uint64_t v28 = &__dst[v27];
    unint64_t v29 = &v17[v27];
    uint64_t v30 = *((void *)v29 + 1);
    *(void *)uint64_t v28 = *(void *)v29;
    *((void *)v28 + 1) = v30;
    uint64_t v31 = *(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56);
    swift_bridgeObjectRetain();
    v31(__dst, 0, 1, v18);
  }
  return a1;
}

uint64_t assignWithCopy for HighlightCalendarDayViewModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *(void **)(a2 + 24);
  uint64_t v7 = *(void **)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  char v9 = *(unsigned char *)(a2 + 48);
  sub_1C29983CC(v6, v7, v8, v9);
  char v10 = *(void **)(a1 + 24);
  char v11 = *(void **)(a1 + 32);
  uint64_t v12 = *(void *)(a1 + 40);
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  char v13 = *(unsigned char *)(a1 + 48);
  *(unsigned char *)(a1 + 48) = v9;
  sub_1C2998420(v10, v11, v12, v13);
  char v14 = *(void **)(a2 + 56);
  char v15 = *(void **)(a1 + 56);
  *(void *)(a1 + 56) = v14;
  id v16 = v14;

  id v17 = *(void **)(a2 + 64);
  uint64_t v18 = *(void **)(a1 + 64);
  *(void *)(a1 + 64) = v17;
  id v19 = v17;

  id v20 = *(void **)(a1 + 72);
  id v21 = *(void **)(a2 + 72);
  *(void *)(a1 + 72) = v21;
  id v22 = v21;

  id v23 = *(void **)(a1 + 80);
  id v24 = *(void **)(a2 + 80);
  *(void *)(a1 + 80) = v24;
  id v25 = v24;

  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(unsigned char *)(a1 + 89) = *(unsigned char *)(a2 + 89);
  uint64_t v26 = *(int *)(a3 + 52);
  uint64_t v27 = (char *)(a1 + v26);
  uint64_t v28 = (char *)(a2 + v26);
  uint64_t v29 = type metadata accessor for AXProjectionState(0);
  uint64_t v30 = *(void *)(v29 - 8);
  uint64_t v31 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v30 + 48);
  LODWORD(v7) = v31(v27, 1, v29);
  int v32 = v31(v28, 1, v29);
  if (!v7)
  {
    if (!v32)
    {
      uint64_t v40 = sub_1C2A9C6E8();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v40 - 8) + 24))(v27, v28, v40);
      *(void *)&v27[*(int *)(v29 + 20)] = *(void *)&v28[*(int *)(v29 + 20)];
      uint64_t v41 = *(int *)(v29 + 24);
      uint64_t v42 = &v27[v41];
      uint64_t v43 = &v28[v41];
      *(void *)uint64_t v42 = *(void *)v43;
      *((void *)v42 + 1) = *((void *)v43 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_1C29AC9BC((uint64_t)v27, type metadata accessor for AXProjectionState);
    goto LABEL_6;
  }
  if (v32)
  {
LABEL_6:
    sub_1C29A9AF8();
    memcpy(v27, v28, *(void *)(*(void *)(v38 - 8) + 64));
    return a1;
  }
  uint64_t v33 = sub_1C2A9C6E8();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 16))(v27, v28, v33);
  *(void *)&v27[*(int *)(v29 + 20)] = *(void *)&v28[*(int *)(v29 + 20)];
  uint64_t v34 = *(int *)(v29 + 24);
  int64_t v35 = &v27[v34];
  uint64_t v36 = &v28[v34];
  *(void *)int64_t v35 = *(void *)v36;
  *((void *)v35 + 1) = *((void *)v36 + 1);
  unint64_t v37 = *(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56);
  swift_bridgeObjectRetain();
  v37(v27, 0, 1, v29);
  return a1;
}

uint64_t initializeWithTake for HighlightCalendarDayViewModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 33) = *(_OWORD *)(a2 + 33);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  uint64_t v4 = *(int *)(a3 + 52);
  uint64_t v5 = (char *)(a2 + v4);
  uint64_t v6 = (char *)(a1 + v4);
  *(unsigned char *)(a1 + 89) = *(unsigned char *)(a2 + 89);
  uint64_t v7 = type metadata accessor for AXProjectionState(0);
  uint64_t v8 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v7))
  {
    sub_1C29A9AF8();
    memcpy(v6, v5, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    uint64_t v10 = sub_1C2A9C6E8();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v6, v5, v10);
    *(void *)&v6[*(int *)(v7 + 20)] = *(void *)&v5[*(int *)(v7 + 20)];
    *(_OWORD *)&v6[*(int *)(v7 + 24)] = *(_OWORD *)&v5[*(int *)(v7 + 24)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
  }
  return a1;
}

uint64_t assignWithTake for HighlightCalendarDayViewModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 40);
  char v8 = *(unsigned char *)(a2 + 48);
  uint64_t v9 = *(void **)(a1 + 24);
  uint64_t v10 = *(void **)(a1 + 32);
  uint64_t v11 = *(void *)(a1 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = v7;
  char v12 = *(unsigned char *)(a1 + 48);
  *(unsigned char *)(a1 + 48) = v8;
  sub_1C2998420(v9, v10, v11, v12);
  char v13 = *(void **)(a1 + 56);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);

  char v14 = *(void **)(a1 + 64);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);

  char v15 = *(void **)(a1 + 72);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);

  id v16 = *(void **)(a1 + 80);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);

  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(unsigned char *)(a1 + 89) = *(unsigned char *)(a2 + 89);
  uint64_t v17 = *(int *)(a3 + 52);
  uint64_t v18 = (char *)(a1 + v17);
  id v19 = (char *)(a2 + v17);
  uint64_t v20 = type metadata accessor for AXProjectionState(0);
  uint64_t v21 = *(void *)(v20 - 8);
  id v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48);
  int v23 = v22(v18, 1, v20);
  int v24 = v22(v19, 1, v20);
  if (!v23)
  {
    if (!v24)
    {
      uint64_t v28 = sub_1C2A9C6E8();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 40))(v18, v19, v28);
      *(void *)&v18[*(int *)(v20 + 20)] = *(void *)&v19[*(int *)(v20 + 20)];
      uint64_t v29 = *(int *)(v20 + 24);
      uint64_t v30 = &v18[v29];
      uint64_t v31 = &v19[v29];
      uint64_t v33 = *(void *)v31;
      uint64_t v32 = *((void *)v31 + 1);
      *(void *)uint64_t v30 = v33;
      *((void *)v30 + 1) = v32;
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_1C29AC9BC((uint64_t)v18, type metadata accessor for AXProjectionState);
    goto LABEL_6;
  }
  if (v24)
  {
LABEL_6:
    sub_1C29A9AF8();
    memcpy(v18, v19, *(void *)(*(void *)(v26 - 8) + 64));
    return a1;
  }
  uint64_t v25 = sub_1C2A9C6E8();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 32))(v18, v19, v25);
  *(void *)&v18[*(int *)(v20 + 20)] = *(void *)&v19[*(int *)(v20 + 20)];
  *(_OWORD *)&v18[*(int *)(v20 + 24)] = *(_OWORD *)&v19[*(int *)(v20 + 24)];
  (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  return a1;
}

uint64_t getEnumTagSinglePayload for HighlightCalendarDayViewModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C29ABA88);
}

uint64_t sub_1C29ABA88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    sub_1C29A9AF8();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 52);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for HighlightCalendarDayViewModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C29ABB4C);
}

uint64_t sub_1C29ABB4C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    sub_1C29A9AF8();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 52);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

void sub_1C29ABBF4()
{
  sub_1C29A9AF8();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void destroy for HighlightCalendarDayViewModel.CircleState(uint64_t a1)
{
}

uint64_t initializeWithCopy for HighlightCalendarDayViewModel.CircleState(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  unint64_t v4 = *(void **)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(unsigned char *)(a2 + 24);
  sub_1C29983CC(*(id *)a2, v4, v5, v6);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for HighlightCalendarDayViewModel.CircleState(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  unint64_t v4 = *(void **)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(unsigned char *)(a2 + 24);
  sub_1C29983CC(*(id *)a2, v4, v5, v6);
  uint64_t v7 = *(void **)a1;
  uint64_t v8 = *(void **)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  char v10 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v6;
  sub_1C2998420(v7, v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for HighlightCalendarDayViewModel.CircleState(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  char v4 = *(unsigned char *)(a2 + 24);
  uint64_t v5 = *(void **)a1;
  uint64_t v7 = *(void **)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v3;
  char v8 = *(unsigned char *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v4;
  sub_1C2998420(v5, v7, v6, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for HighlightCalendarDayViewModel.CircleState(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFB && *(unsigned char *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 251);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 5) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for HighlightCalendarDayViewModel.CircleState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFA)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)uint64_t result = a2 - 251;
    if (a3 >= 0xFB) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFB) {
      *(unsigned char *)(result + 25) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 24) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1C29ABE8C(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 24) <= 4u) {
    return *(unsigned __int8 *)(a1 + 24);
  }
  else {
    return (*(_DWORD *)a1 + 5);
  }
}

uint64_t sub_1C29ABEA4(uint64_t result, unsigned int a2)
{
  uint64_t v2 = a2 - 5;
  if (a2 >= 5)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    LOBYTE(a2) = 5;
    *(void *)uint64_t result = v2;
  }
  *(unsigned char *)(result + 24) = a2;
  return result;
}

ValueMetadata *type metadata accessor for HighlightCalendarDayViewModel.CircleState()
{
  return &type metadata for HighlightCalendarDayViewModel.CircleState;
}

ValueMetadata *type metadata accessor for HighlightCalendarDayViewModel.CircleState.Constants()
{
  return &type metadata for HighlightCalendarDayViewModel.CircleState.Constants;
}

unsigned char *storeEnumTagSinglePayload for HighlightCalendarDayViewModel.NumberSize(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C29ABFACLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HighlightCalendarDayViewModel.NumberSize()
{
  return &type metadata for HighlightCalendarDayViewModel.NumberSize;
}

unsigned char *storeEnumTagSinglePayload for HighlightCalendarDayViewModel.CircleSize(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C29AC0B0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HighlightCalendarDayViewModel.CircleSize()
{
  return &type metadata for HighlightCalendarDayViewModel.CircleSize;
}

ValueMetadata *type metadata accessor for HighlightCalendarDayViewModel.AXProbability()
{
  return &type metadata for HighlightCalendarDayViewModel.AXProbability;
}

ValueMetadata *type metadata accessor for HighlightCalendarDayViewModel.AXCircleState()
{
  return &type metadata for HighlightCalendarDayViewModel.AXCircleState;
}

uint64_t *initializeBufferWithCopyOfBuffer for AXProjectionState(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_1C2A9C6E8();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 24);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    uint64_t v9 = (uint64_t *)((char *)a1 + v8);
    char v10 = (uint64_t *)((char *)a2 + v8);
    uint64_t v11 = v10[1];
    *uint64_t v9 = *v10;
    v9[1] = v11;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for AXProjectionState(uint64_t a1)
{
  uint64_t v2 = sub_1C2A9C6E8();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AXProjectionState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1C2A9C6E8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AXProjectionState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1C2A9C6E8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for AXProjectionState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1C2A9C6E8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  return a1;
}

uint64_t assignWithTake for AXProjectionState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1C2A9C6E8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AXProjectionState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C29AC4C4);
}

uint64_t sub_1C29AC4C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1C2A9C6E8();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 24) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for AXProjectionState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C29AC5A8);
}

uint64_t sub_1C29AC5A8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_1C2A9C6E8();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24) + 8) = a2;
  }
  return result;
}

uint64_t sub_1C29AC668()
{
  uint64_t result = sub_1C2A9C6E8();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1C29AC70C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1C29AC774()
{
  unint64_t v1 = (int *)(type metadata accessor for HighlightCalendarDayViewModel(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*(void *)v1 + 64);
  swift_bridgeObjectRelease();
  sub_1C2998420(*(void **)(v0 + v3 + 24), *(id *)(v0 + v3 + 32), *(void *)(v0 + v3 + 40), *(unsigned char *)(v0 + v3 + 48));

  uint64_t v5 = v0 + v3 + v1[15];
  uint64_t v6 = type metadata accessor for AXProjectionState(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6))
  {
    uint64_t v7 = sub_1C2A9C6E8();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v5, v7);
    swift_bridgeObjectRelease();
  }
  return MEMORY[0x1F4186498](v0, v3 + v4, v2 | 7);
}

uint64_t sub_1C29AC8E4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

id sub_1C29AC94C(void *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for HighlightCalendarDayViewModel(0) - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  return sub_1C29AA880(a1, v4);
}

uint64_t sub_1C29AC9BC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1C29ACA24()
{
  return 0;
}

void sub_1C29ACA2C()
{
  if (!qword_1EA31E5E0)
  {
    sub_1C29ACA84();
    unint64_t v0 = sub_1C2A9E328();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EA31E5E0);
    }
  }
}

unint64_t sub_1C29ACA84()
{
  unint64_t result = qword_1EBB8F858;
  if (!qword_1EBB8F858)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EBB8F858);
  }
  return result;
}

uint64_t dispatch thunk of DisplayTypeProviding.displayType.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of DisplayTypeProviding.healthStore.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t sub_1C29ACAEC()
{
  return sub_1C29D4C10(*(void *)v0, *(void *)(v0 + 8), *(void **)(v0 + 16));
}

double CGSize.init(horizontalRange:)(double a1, double a2)
{
  return a2 - a1;
}

double CGSize.init(verticalRange:)()
{
  return 0.0;
}

void CGRect.horizontalRange.getter(double a1, double a2, double a3, double a4)
{
}

void CGRect.verticalRange.getter(double a1, double a2, double a3, double a4)
{
}

void sub_1C29ACB68(double (*a1)(void), double (*a2)(double, double, double, double), double a3, double a4, double a5, double a6)
{
  double v11 = a1();
  if (v11 > a2(a3, a4, a5, a6)) {
    __break(1u);
  }
}

double CGRect.adjusted(by:verticalCoordinateRange:)(uint64_t a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, char a10)
{
  if ((a7 & 1) == 0)
  {
    if (*(double *)&a1 >= a2) {
      double v15 = a2;
    }
    else {
      double v15 = *(double *)&a1;
    }
    CGRectGetMaxX(*(CGRect *)&a2);
    if (a10) {
      goto LABEL_6;
    }
LABEL_8:
    v18.origin.double x = a2;
    v18.origin.CGFloat y = a3;
    v18.size.CGFloat width = a4;
    v18.size.CGFloat height = a5;
    CGRectGetMaxY(v18);
    return v15;
  }
  CGRectGetWidth(*(CGRect *)&a2);
  double v15 = a2;
  if ((a10 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_6:
  v17.origin.double x = a2;
  v17.origin.CGFloat y = a3;
  v17.size.CGFloat width = a4;
  v17.size.CGFloat height = a5;
  CGRectGetHeight(v17);
  return v15;
}

uint64_t NSOperation.registerStateObservationSignposts(logHandle:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v63 = sub_1C2A9CF58();
  uint64_t v4 = *(void *)(v63 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  MEMORY[0x1F4188790](v63);
  uint64_t v6 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v52 - v8;
  swift_beginAccess();
  id v10 = objc_getAssociatedObject(v2, &unk_1EA31E5E8);
  swift_endAccess();
  if (v10)
  {
    sub_1C2A9E388();
    swift_unknownObjectRelease();
    return sub_1C2935868((uint64_t)v64);
  }
  else
  {
    memset(v64, 0, sizeof(v64));
    sub_1C2935868((uint64_t)v64);
    LODWORD(v60) = sub_1C2A9E0C8();
    sub_1C29624A4();
    uint64_t v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_1C2AA8230;
    id v13 = v2;
    id v14 = objc_msgSend(v13, sel_description);
    uint64_t v15 = sub_1C2A9DD28();
    id v16 = v9;
    uint64_t v18 = v17;

    uint64_t v62 = v4;
    uint64_t v19 = MEMORY[0x1E4FBB1A0];
    *(void *)(v12 + 56) = MEMORY[0x1E4FBB1A0];
    unint64_t v20 = sub_1C296250C();
    *(void *)(v12 + 32) = v15;
    *(void *)(v12 + 40) = v18;
    *(void *)(v12 + 96) = v19;
    *(void *)(v12 + 104) = v20;
    *(void *)(v12 + 64) = v20;
    *(void *)(v12 + 72) = 0xD00000000000002DLL;
    *(void *)(v12 + 80) = 0x80000001C2AB7E20;
    sub_1C2A9CF18();
    swift_bridgeObjectRelease();
    id v21 = v13;
    id v22 = a1;
    uint64_t v61 = v16;
    sub_1C2A9CF48();
    *(void *)&v64[0] = swift_getObjectType();
    sub_1C29AD334();
    uint64_t v52 = sub_1C2A9DD58();
    id v53 = v21;
    uint64_t v60 = v23;
    *(void *)&v64[0] = v21;
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v24 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v26 = v62;
    uint64_t v25 = v63;
    uint64_t v57 = *(void (**)(char *, char *, uint64_t))(v62 + 16);
    v57(v6, v16, v63);
    uint64_t v27 = *(unsigned __int8 *)(v26 + 80);
    uint64_t v28 = v26;
    uint64_t v29 = (v27 + 32) & ~v27;
    uint64_t v55 = v5 + 7;
    uint64_t v56 = v27 | 7;
    uint64_t v30 = swift_allocObject();
    *(void *)(v30 + 16) = v24;
    *(void *)(v30 + 24) = v22;
    uint64_t v54 = *(void (**)(uint64_t, char *, uint64_t))(v28 + 32);
    v54(v30 + v29, v6, v25);
    uint64_t v31 = (uint64_t *)(v30 + ((v5 + 7 + v29) & 0xFFFFFFFFFFFFFFF8));
    uint64_t v32 = v52;
    uint64_t v33 = v60;
    *uint64_t v31 = v52;
    v31[1] = v33;
    id v34 = v22;
    swift_bridgeObjectRetain();
    id v59 = (id)sub_1C2A9C5A8();
    swift_release();
    swift_release();
    int64_t v35 = v53;
    *(void *)&v64[0] = v53;
    swift_getKeyPath();
    uint64_t v36 = v6;
    unint64_t v37 = v6;
    uint64_t v38 = v63;
    v57(v37, v61, v63);
    uint64_t v39 = (v27 + 24) & ~v27;
    unint64_t v40 = (v55 + v39) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v41 = swift_allocObject();
    *(void *)(v41 + 16) = v34;
    uint64_t v42 = v41 + v39;
    uint64_t v43 = v38;
    v54(v42, v36, v38);
    uint64_t v44 = (uint64_t *)(v41 + v40);
    uint64_t v45 = v60;
    *uint64_t v44 = v32;
    v44[1] = v45;
    id v46 = v34;
    uint64_t v47 = (void *)sub_1C2A9C5A8();
    swift_release();
    swift_release();
    *(void *)&v64[0] = v35;
    swift_getKeyPath();
    swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v48 = (void *)sub_1C2A9C5A8();
    swift_release();
    swift_release();
    swift_beginAccess();
    id v49 = v59;
    objc_setAssociatedObject(v35, &unk_1EA31E5E8, v49, (void *)1);
    swift_endAccess();

    swift_beginAccess();
    id v50 = v47;
    objc_setAssociatedObject(v35, &unk_1EA31E5E9, v50, (void *)1);
    swift_endAccess();

    swift_beginAccess();
    id v51 = v48;
    objc_setAssociatedObject(v35, &unk_1EA31E5EA, v51, (void *)1);
    swift_endAccess();

    return (*(uint64_t (**)(char *, uint64_t))(v62 + 8))(v61, v43);
  }
}

unint64_t sub_1C29AD2DC()
{
  unint64_t result = qword_1EBB927E8;
  if (!qword_1EBB927E8)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EBB927E8);
  }
  return result;
}

unint64_t sub_1C29AD334()
{
  unint64_t result = qword_1EBB920F8;
  if (!qword_1EBB920F8)
  {
    sub_1C29AD370();
    unint64_t result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EBB920F8);
  }
  return result;
}

unint64_t sub_1C29AD370()
{
  unint64_t result = qword_1EBB920F0;
  if (!qword_1EBB920F0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EBB920F0);
  }
  return result;
}

char *keypath_get_selector_isExecuting()
{
  return sel_isExecuting;
}

uint64_t NSOperation.unregisterStateObservationSignposts(logHandle:)()
{
  sub_1C2A9E0C8();
  sub_1C29624A4();
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_1C2AA8230;
  id v2 = v0;
  id v3 = objc_msgSend(v2, sel_description);
  uint64_t v4 = sub_1C2A9DD28();
  uint64_t v6 = v5;

  uint64_t v7 = MEMORY[0x1E4FBB1A0];
  *(void *)(v1 + 56) = MEMORY[0x1E4FBB1A0];
  unint64_t v8 = sub_1C296250C();
  *(void *)(v1 + 32) = v4;
  *(void *)(v1 + 40) = v6;
  *(void *)(v1 + 96) = v7;
  *(void *)(v1 + 104) = v8;
  *(void *)(v1 + 64) = v8;
  *(void *)(v1 + 72) = 0xD00000000000002FLL;
  *(void *)(v1 + 80) = 0x80000001C2AB7E50;
  sub_1C2A9CF18();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  sub_1C29ADC50(&unk_1EA31E5E8);
  swift_endAccess();
  swift_beginAccess();
  sub_1C29ADC50(&unk_1EA31E5E9);
  swift_endAccess();
  swift_beginAccess();
  sub_1C29ADC50(&unk_1EA31E5EA);
  return swift_endAccess();
}

id sub_1C29AD54C@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_isExecuting);
  *a2 = (_BYTE)result;
  return result;
}

void sub_1C29AD580(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12 = sub_1C2A9CF58();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v33 - v17;
  swift_beginAccess();
  uint64_t v19 = (void *)MEMORY[0x1C87657D0](a3 + 16);
  if (v19)
  {
    uint64_t v33 = a6;
    id v34 = v19;
    uint64_t v20 = a7;
    id v21 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
    v21(v18, a5, v12);
    v21(v15, a5, v12);
    uint64_t v22 = v20;
    sub_1C29AE1E4(0, &qword_1EBB91C10, MEMORY[0x1E4FBB390], MEMORY[0x1E4F27650]);
    id v23 = a4;
    swift_bridgeObjectRetain();
    sub_1C2A9C598();
    char v24 = v35;
    if (v35 == 2 || (sub_1C2A9C588(), char v25 = v35, v35 == 2))
    {
      uint64_t v26 = *(void (**)(char *, uint64_t))(v13 + 8);
      v26(v15, v12);
      v26(v18, v12);
    }
    else
    {
      uint64_t v27 = *(void (**)(char *, uint64_t))(v13 + 8);
      if (v24)
      {
        v27(v18, v12);
        uint64_t v31 = v33;
        if ((v25 & 1) == 0)
        {
          sub_1C2A9E1A8();
          sub_1C29624A4();
          uint64_t v32 = swift_allocObject();
          *(_OWORD *)(v32 + 16) = xmmword_1C2AA6B00;
          *(void *)(v32 + 56) = MEMORY[0x1E4FBB1A0];
          *(void *)(v32 + 64) = sub_1C296250C();
          *(void *)(v32 + 32) = v31;
          *(void *)(v32 + 40) = v22;
          swift_bridgeObjectRetain();
          sub_1C2A9CF28();
          swift_bridgeObjectRelease();
        }
        uint64_t v30 = v15;
      }
      else
      {
        v27(v15, v12);
        uint64_t v28 = v33;
        if (v25)
        {
          sub_1C2A9E1B8();
          sub_1C29624A4();
          uint64_t v29 = swift_allocObject();
          *(_OWORD *)(v29 + 16) = xmmword_1C2AA6B00;
          *(void *)(v29 + 56) = MEMORY[0x1E4FBB1A0];
          *(void *)(v29 + 64) = sub_1C296250C();
          *(void *)(v29 + 32) = v28;
          *(void *)(v29 + 40) = v22;
          swift_bridgeObjectRetain();
          sub_1C2A9CF28();
          swift_bridgeObjectRelease();
        }
        uint64_t v30 = v18;
      }
      v27(v30, v12);
    }
    swift_bridgeObjectRelease();
  }
}

id sub_1C29AD92C(id *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id result = objc_msgSend(*a1, sel_isCancelled);
  if (result)
  {
    sub_1C2A9E1C8();
    sub_1C29624A4();
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_1C2AA6B00;
    *(void *)(v9 + 56) = MEMORY[0x1E4FBB1A0];
    *(void *)(v9 + 64) = sub_1C296250C();
    *(void *)(v9 + 32) = a5;
    *(void *)(v9 + 40) = a6;
    swift_bridgeObjectRetain();
    sub_1C2A9CF28();
    return (id)swift_bridgeObjectRelease();
  }
  return result;
}

void sub_1C29ADA40(id *a1, uint64_t a2, uint64_t a3)
{
  if (objc_msgSend(*a1, sel_isFinished))
  {
    swift_beginAccess();
    uint64_t v4 = MEMORY[0x1C87657D0](a3 + 16);
    if (v4)
    {
      uint64_t v5 = (void *)v4;
      if (qword_1EBB92320 != -1) {
        swift_once();
      }
      id v6 = (id)qword_1EBB91C48;
      sub_1C2A9E0C8();
      sub_1C29624A4();
      uint64_t v7 = swift_allocObject();
      *(_OWORD *)(v7 + 16) = xmmword_1C2AA8230;
      id v8 = v5;
      id v9 = objc_msgSend(v8, sel_description);
      uint64_t v10 = sub_1C2A9DD28();
      uint64_t v12 = v11;

      uint64_t v13 = MEMORY[0x1E4FBB1A0];
      *(void *)(v7 + 56) = MEMORY[0x1E4FBB1A0];
      unint64_t v14 = sub_1C296250C();
      *(void *)(v7 + 32) = v10;
      *(void *)(v7 + 40) = v12;
      *(void *)(v7 + 96) = v13;
      *(void *)(v7 + 104) = v14;
      *(void *)(v7 + 64) = v14;
      *(void *)(v7 + 72) = 0xD00000000000002FLL;
      *(void *)(v7 + 80) = 0x80000001C2AB7E50;
      sub_1C2A9CF18();
      swift_bridgeObjectRelease();
      swift_beginAccess();
      sub_1C29ADC50(&unk_1EA31E5E8);
      swift_endAccess();
      swift_beginAccess();
      sub_1C29ADC50(&unk_1EA31E5E9);
      swift_endAccess();
      swift_beginAccess();
      sub_1C29ADC50(&unk_1EA31E5EA);
      swift_endAccess();
    }
  }
}

void sub_1C29ADC50(void *key)
{
  if (objc_getAssociatedObject(v1, key))
  {
    sub_1C2A9E388();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v4, 0, sizeof(v4));
  }
  sub_1C29AE158((uint64_t)v4, (uint64_t)v5);
  if (v6)
  {
    sub_1C2A9C558();
    if (swift_dynamicCast())
    {
      sub_1C2A9C548();
      objc_setAssociatedObject(v1, key, 0, (void *)1);
    }
  }
  else
  {
    sub_1C2935868((uint64_t)v5);
  }
}

uint64_t sub_1C29ADD28()
{
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1C29ADD60()
{
  uint64_t v1 = sub_1C2A9CF58();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186498](v0, v6, v5);
}

void sub_1C29ADE54(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(sub_1C2A9CF58() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v2 + 16);
  id v8 = *(void **)(v2 + 24);
  uint64_t v9 = v2 + v6;
  uint64_t v10 = (uint64_t *)(v2 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  sub_1C29AD580(a1, a2, v7, v8, v9, v11, v12);
}

char *keypath_get_selector_isCancelled()
{
  return sel_isCancelled;
}

id sub_1C29ADF14@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_isCancelled);
  *a2 = (_BYTE)result;
  return result;
}

uint64_t sub_1C29ADF48()
{
  uint64_t v1 = sub_1C2A9CF58();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186498](v0, v6 + 16, v5);
}

id sub_1C29AE034(id *a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(sub_1C2A9CF58() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v2 + 16);
  uint64_t v8 = v2 + v6;
  uint64_t v9 = (uint64_t *)(v2 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  return sub_1C29AD92C(a1, a2, v7, v8, v10, v11);
}

char *keypath_get_selector_isFinished()
{
  return sel_isFinished;
}

id sub_1C29AE0F4@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_isFinished);
  *a2 = (_BYTE)result;
  return result;
}

void sub_1C29AE128(id *a1, uint64_t a2)
{
  sub_1C29ADA40(a1, a2, v2);
}

uint64_t dispatch thunk of OperationStateSignpostObserving.registerStateObservationSignposts(logHandle:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of OperationStateSignpostObserving.unregisterStateObservationSignposts(logHandle:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t sub_1C29AE158(uint64_t a1, uint64_t a2)
{
  sub_1C29AE1E4(0, (unint64_t *)&qword_1EBB927B0, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1C29AE1E4(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

id sub_1C29AE230()
{
  id v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28EE0]), sel_init);
  objc_msgSend(v0, sel_setNumberStyle_, 0);
  id result = objc_msgSend(v0, sel_setRoundingMode_, 4);
  qword_1EBB92388 = (uint64_t)v0;
  return result;
}

void HKActivitySummary.createCaloriesText(_:valueFont:unitFont:hbxViewControllerFactory:)(uint64_t a1, void *a2, void *a3, void *a4)
{
  unint64_t v5 = v4;
  uint64_t v10 = sub_1C2A9CFE8();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = &v50[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  *(void *)&double v15 = MEMORY[0x1F4188790](v14).n128_u64[0];
  uint64_t v17 = &v50[-v16];
  id v18 = objc_msgSend(v5, sel_activityMoveMode, v15);
  if (v18 == (id)2)
  {
    id v30 = objc_msgSend(v5, sel_appleMoveTime);
    id v31 = objc_msgSend(self, sel_minuteUnit);
    objc_msgSend(v30, sel_doubleValueForUnit_, v31);
    double v33 = v32;

    if (qword_1EBB92390 != -1) {
      swift_once();
    }
    id v34 = (void *)qword_1EBB92388;
    id v35 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithDouble_, v33);
    id v36 = objc_msgSend(v34, sel_stringFromNumber_, v35);

    if (v36)
    {
      uint64_t v23 = sub_1C2A9DD28();
      uint64_t v25 = v37;

      sub_1C29577B8(a1, (uint64_t)v51);
      if (qword_1EBB92310 != -1) {
        swift_once();
      }
      uint64_t v27 = sub_1C2934FE8(0xD000000000000021, 0x80000001C2AB7EE0, 0, (uint64_t)v51, 0, 0);
      uint64_t v29 = v38;
      sub_1C2935868((uint64_t)v51);
LABEL_11:
      sub_1C29B0158(0, &qword_1EBB923B8, (void (*)(uint64_t))sub_1C29A1210);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1C2AA8230;
      *(void *)(inited + 32) = 0x45554C4156;
      *(void *)(inited + 40) = 0xE500000000000000;
      *(void *)(inited + 48) = v23;
      *(void *)(inited + 56) = v25;
      *(void *)(inited + 64) = 1414090325;
      *(void *)(inited + 72) = 0xE400000000000000;
      *(void *)(inited + 80) = v27;
      *(void *)(inited + 88) = v29;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v40 = sub_1C2A7BC94(inited);
      sub_1C29577B8(a1, (uint64_t)v51);
      if (qword_1EBB92310 != -1) {
        swift_once();
      }
      uint64_t v41 = sub_1C2934FE8(0xD00000000000001DLL, 0x80000001C2AB7F10, v40, (uint64_t)v51, 0, 0);
      uint64_t v43 = v42;
      swift_bridgeObjectRelease();
      sub_1C2935868((uint64_t)v51);
      _sSo17HKActivitySummaryC19HealthVisualizationE22createAttributedString4from9valueText0I4Font04unitJ00lK0So012NSAttributedG0CSgSS_SSSo6UIFontCSSANtF_0(v41, v43, v23, v25, a2, v27, v29, a3);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
    sub_1C2A9CF98();
    uint64_t v47 = sub_1C2A9CFC8();
    os_log_type_t v48 = sub_1C2A9E0A8();
    if (os_log_type_enabled(v47, v48))
    {
      id v49 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v49 = 0;
      _os_log_impl(&dword_1C292A000, v47, v48, "Snippets: Unable to format apple move time text for Activity Summary.", v49, 2u);
      MEMORY[0x1C87656F0](v49, -1, -1);
    }

    (*(void (**)(unsigned char *, uint64_t))(v11 + 8))(v17, v10);
  }
  else
  {
    if (v18 == (id)1)
    {
      sub_1C29376D4(0, (unint64_t *)&qword_1EBB92500);
      uint64_t v19 = (void *)MEMORY[0x1C8763F70]((id)*MEMORY[0x1E4F2A5C0]);
      id v20 = objc_msgSend(a4, sel_preferredUnitForType_, v19);

      id v21 = objc_msgSend(v5, sel_activeEnergyBurned);
      id v22 = (id)HKLocalizedStringWithEnergy();

      if (!v22)
      {
        __break(1u);
        return;
      }
      uint64_t v23 = sub_1C2A9DD28();
      uint64_t v25 = v24;

      id v26 = objc_msgSend(a4, sel_localizedDisplayNameForUnit_, v20);
      uint64_t v27 = sub_1C2A9DD28();
      uint64_t v29 = v28;

      goto LABEL_11;
    }
    sub_1C2A9CF98();
    uint64_t v44 = sub_1C2A9CFC8();
    os_log_type_t v45 = sub_1C2A9E0A8();
    if (os_log_type_enabled(v44, v45))
    {
      id v46 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v46 = 0;
      _os_log_impl(&dword_1C292A000, v44, v45, "Snippets: Unsupported activity move mode.", v46, 2u);
      MEMORY[0x1C87656F0](v46, -1, -1);
    }

    (*(void (**)(unsigned char *, uint64_t))(v11 + 8))(v13, v10);
  }
}

id HKActivitySummary.createExerciseText(_:valueFont:unitFont:)(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = sub_1C2A9CFE8();
  uint64_t v9 = *(void *)(v8 - 8);
  *(void *)&double v10 = MEMORY[0x1F4188790](v8).n128_u64[0];
  uint64_t v12 = v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0) + 94;
  id v13 = objc_msgSend(v4, sel_appleExerciseTime, v10);
  id v14 = objc_msgSend(self, sel_minuteUnit);
  objc_msgSend(v13, sel_doubleValueForUnit_, v14);
  double v16 = v15;

  if (qword_1EBB92390 != -1) {
    swift_once();
  }
  uint64_t v17 = (void *)qword_1EBB92388;
  id v18 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithDouble_, v16);
  id v19 = objc_msgSend(v17, sel_stringFromNumber_, v18);

  if (v19)
  {
    uint64_t v20 = sub_1C2A9DD28();
    uint64_t v22 = v21;

    sub_1C29577B8(a1, (uint64_t)v37);
    if (qword_1EBB92310 != -1) {
      swift_once();
    }
    uint64_t v23 = sub_1C2934FE8(0xD00000000000001ELL, 0x80000001C2AB7F30, 0, (uint64_t)v37, 0, 0);
    uint64_t v25 = v24;
    sub_1C2935868((uint64_t)v37);
    sub_1C29B0158(0, &qword_1EBB923B8, (void (*)(uint64_t))sub_1C29A1210);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1C2AA8230;
    *(void *)(inited + 32) = 0x45554C4156;
    *(void *)(inited + 40) = 0xE500000000000000;
    *(void *)(inited + 48) = v20;
    *(void *)(inited + 56) = v22;
    *(void *)(inited + 64) = 1414090325;
    *(void *)(inited + 72) = 0xE400000000000000;
    *(void *)(inited + 80) = v23;
    *(void *)(inited + 88) = v25;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v27 = sub_1C2A7BC94(inited);
    sub_1C29577B8(a1, (uint64_t)v37);
    uint64_t v28 = sub_1C2934FE8(0xD00000000000001DLL, 0x80000001C2AB7F10, v27, (uint64_t)v37, 0, 0);
    uint64_t v30 = v29;
    swift_bridgeObjectRelease();
    sub_1C2935868((uint64_t)v37);
    id v31 = _sSo17HKActivitySummaryC19HealthVisualizationE22createAttributedString4from9valueText0I4Font04unitJ00lK0So012NSAttributedG0CSgSS_SSSo6UIFontCSSANtF_0(v28, v30, v20, v22, a2, v23, v25, a3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1C2A9CF98();
    double v32 = sub_1C2A9CFC8();
    os_log_type_t v33 = sub_1C2A9E0A8();
    if (os_log_type_enabled(v32, v33))
    {
      id v34 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v34 = 0;
      _os_log_impl(&dword_1C292A000, v32, v33, "Snippets: Unable to format exercise text for Activity Summary.", v34, 2u);
      MEMORY[0x1C87656F0](v34, -1, -1);
    }

    (*(void (**)(unsigned char *, uint64_t))(v9 + 8))(v12, v8);
    return 0;
  }
  return v31;
}

void HKActivitySummary.createStandHoursText(_:valueFont:unitFont:)(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = sub_1C2A9CFE8();
  uint64_t v9 = *(void *)(v8 - 8);
  *(void *)&double v10 = MEMORY[0x1F4188790](v8).n128_u64[0];
  uint64_t v12 = &v36[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  id v13 = objc_msgSend(v4, sel_appleStandHours, v10);
  id v14 = objc_msgSend(self, sel_countUnit);
  objc_msgSend(v13, sel_doubleValueForUnit_, v14);
  double v16 = v15;

  if (qword_1EBB92390 != -1) {
    swift_once();
  }
  uint64_t v17 = (void *)qword_1EBB92388;
  id v18 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithDouble_, v16);
  id v19 = objc_msgSend(v17, sel_stringFromNumber_, v18);

  if (v19)
  {
    uint64_t v20 = sub_1C2A9DD28();
    uint64_t v22 = v21;

    uint64_t v23 = (void *)sub_1C2A9DCF8();
    id v24 = (id)HKUILocalizedString();

    if (v24)
    {
      uint64_t v25 = sub_1C2A9DD28();
      uint64_t v27 = v26;

      sub_1C29B0158(0, &qword_1EBB923B8, (void (*)(uint64_t))sub_1C29A1210);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1C2AA8230;
      *(void *)(inited + 32) = 0x45554C4156;
      *(void *)(inited + 40) = 0xE500000000000000;
      *(void *)(inited + 48) = v20;
      *(void *)(inited + 56) = v22;
      *(void *)(inited + 64) = 1414090325;
      *(void *)(inited + 72) = 0xE400000000000000;
      *(void *)(inited + 80) = v25;
      *(void *)(inited + 88) = v27;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v29 = sub_1C2A7BC94(inited);
      sub_1C29577B8(a1, (uint64_t)v36);
      if (qword_1EBB92310 != -1) {
        swift_once();
      }
      uint64_t v30 = sub_1C2934FE8(0xD00000000000001DLL, 0x80000001C2AB7F10, v29, (uint64_t)v36, 0, 0);
      uint64_t v32 = v31;
      swift_bridgeObjectRelease();
      sub_1C2935868((uint64_t)v36);
      _sSo17HKActivitySummaryC19HealthVisualizationE22createAttributedString4from9valueText0I4Font04unitJ00lK0So012NSAttributedG0CSgSS_SSSo6UIFontCSSANtF_0(v30, v32, v20, v22, a2, v25, v27, a3);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    sub_1C2A9CF98();
    os_log_type_t v33 = sub_1C2A9CFC8();
    os_log_type_t v34 = sub_1C2A9E0A8();
    if (os_log_type_enabled(v33, v34))
    {
      id v35 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v35 = 0;
      _os_log_impl(&dword_1C292A000, v33, v34, "Snippets: Unable to format stand hours text for Activity Summary.", v35, 2u);
      MEMORY[0x1C87656F0](v35, -1, -1);
    }

    (*(void (**)(unsigned char *, uint64_t))(v9 + 8))(v12, v8);
  }
}

id HKActivitySummary.createMoveTitleText(_:titleFont:)(uint64_t a1, void *a2)
{
  sub_1C29577B8(a1, (uint64_t)v17);
  if (qword_1EBB92310 != -1) {
    swift_once();
  }
  sub_1C2934FE8(0xD00000000000001CLL, 0x80000001C2AB7F50, 0, (uint64_t)v17, 0, 0);
  sub_1C2935868((uint64_t)v17);
  id v3 = objc_msgSend(self, sel_hk_activityMoveGoalLineColor);
  sub_1C29B0158(0, &qword_1EBB923C0, (void (*)(uint64_t))sub_1C29B01AC);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C2AA8230;
  unint64_t v5 = (void *)*MEMORY[0x1E4FB06F8];
  *(void *)(inited + 32) = *MEMORY[0x1E4FB06F8];
  *(void *)(inited + 40) = a2;
  uint64_t v6 = (void *)*MEMORY[0x1E4FB0700];
  *(void *)(inited + 48) = *MEMORY[0x1E4FB0700];
  *(void *)(inited + 56) = v3;
  id v7 = v5;
  id v8 = a2;
  id v9 = v6;
  id v10 = v3;
  unint64_t v11 = sub_1C2A7BDE0(inited);
  swift_bridgeObjectRetain();
  sub_1C29AFAC0(v11);
  swift_bridgeObjectRelease();
  id v12 = objc_allocWithZone(MEMORY[0x1E4F28B18]);
  id v13 = (void *)sub_1C2A9DCF8();
  swift_bridgeObjectRelease();
  type metadata accessor for Key(0);
  sub_1C2942D7C();
  id v14 = (void *)sub_1C2A9DC58();
  swift_bridgeObjectRelease();
  id v15 = objc_msgSend(v12, sel_initWithString_attributes_, v13, v14);
  swift_bridgeObjectRelease();

  return v15;
}

NSAttributedString __swiftcall HKActivitySummary.createTitleAttributedString(text:titleFont:titleColor:)(Swift::String text, UIFont titleFont, UIColor titleColor)
{
  sub_1C29B0158(0, &qword_1EBB923C0, (void (*)(uint64_t))sub_1C29B01AC);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C2AA8230;
  uint64_t v6 = (void *)*MEMORY[0x1E4FB06F8];
  *(void *)(inited + 32) = *MEMORY[0x1E4FB06F8];
  *(UIFont *)(inited + 40) = titleFont;
  id v7 = (void *)*MEMORY[0x1E4FB0700];
  *(void *)(inited + 48) = *MEMORY[0x1E4FB0700];
  *(UIColor *)(inited + 56) = titleColor;
  id v8 = v6;
  id v9 = titleFont.super.isa;
  id v10 = v7;
  unint64_t v11 = titleColor.super.isa;
  unint64_t v12 = sub_1C2A7BDE0(inited);
  swift_bridgeObjectRetain();
  sub_1C29AFAC0(v12);
  swift_bridgeObjectRelease();
  id v13 = objc_allocWithZone(MEMORY[0x1E4F28B18]);
  id v14 = (void *)sub_1C2A9DCF8();
  swift_bridgeObjectRelease();
  type metadata accessor for Key(0);
  sub_1C2942D7C();
  id v15 = (void *)sub_1C2A9DC58();
  swift_bridgeObjectRelease();
  id v16 = objc_msgSend(v13, sel_initWithString_attributes_, v14, v15);

  return (NSAttributedString)v16;
}

id HKActivitySummary.createExerciseTitleText(_:titleFont:)(uint64_t a1, void *a2)
{
  sub_1C29577B8(a1, (uint64_t)v17);
  if (qword_1EBB92310 != -1) {
    swift_once();
  }
  sub_1C2934FE8(0xD000000000000020, 0x80000001C2AB7F70, 0, (uint64_t)v17, 0, 0);
  sub_1C2935868((uint64_t)v17);
  id v3 = objc_msgSend(self, sel_hk_activityExerciseGoalLineColor);
  sub_1C29B0158(0, &qword_1EBB923C0, (void (*)(uint64_t))sub_1C29B01AC);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C2AA8230;
  unint64_t v5 = (void *)*MEMORY[0x1E4FB06F8];
  *(void *)(inited + 32) = *MEMORY[0x1E4FB06F8];
  *(void *)(inited + 40) = a2;
  uint64_t v6 = (void *)*MEMORY[0x1E4FB0700];
  *(void *)(inited + 48) = *MEMORY[0x1E4FB0700];
  *(void *)(inited + 56) = v3;
  id v7 = v5;
  id v8 = a2;
  id v9 = v6;
  id v10 = v3;
  unint64_t v11 = sub_1C2A7BDE0(inited);
  swift_bridgeObjectRetain();
  sub_1C29AFAC0(v11);
  swift_bridgeObjectRelease();
  id v12 = objc_allocWithZone(MEMORY[0x1E4F28B18]);
  id v13 = (void *)sub_1C2A9DCF8();
  swift_bridgeObjectRelease();
  type metadata accessor for Key(0);
  sub_1C2942D7C();
  id v14 = (void *)sub_1C2A9DC58();
  swift_bridgeObjectRelease();
  id v15 = objc_msgSend(v12, sel_initWithString_attributes_, v13, v14);
  swift_bridgeObjectRelease();

  return v15;
}

id HKActivitySummary.createStandHourTitleText(_:titleFont:healthStore:)(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = (void *)sub_1C2A9DFC8();
  id result = objc_msgSend(a3, sel_displayTypeController);
  if (result)
  {
    id v8 = result;
    uint64_t v9 = 0xD00000000000001DLL;
    id v10 = objc_msgSend(result, sel_displayTypeWithIdentifier_, v6);

    unint64_t v11 = 0x80000001C2AB7FA0;
    if (v10 && objc_msgSend(v10, sel__isWheelchairUser))
    {
      uint64_t v9 = 0xD000000000000028;
      unint64_t v11 = 0x80000001C2AB7FC0;
    }
    sub_1C29577B8(a1, (uint64_t)v25);
    if (qword_1EBB92310 != -1) {
      swift_once();
    }
    sub_1C2934FE8(v9, v11, 0, (uint64_t)v25, 0, 0);
    swift_bridgeObjectRelease();
    sub_1C2935868((uint64_t)v25);
    id v12 = objc_msgSend(self, sel_hk_activityStandGoalLineColor);
    sub_1C29B0158(0, &qword_1EBB923C0, (void (*)(uint64_t))sub_1C29B01AC);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1C2AA8230;
    id v14 = (void *)*MEMORY[0x1E4FB06F8];
    *(void *)(inited + 32) = *MEMORY[0x1E4FB06F8];
    *(void *)(inited + 40) = a2;
    id v15 = (void *)*MEMORY[0x1E4FB0700];
    *(void *)(inited + 48) = *MEMORY[0x1E4FB0700];
    *(void *)(inited + 56) = v12;
    id v16 = v14;
    id v17 = a2;
    id v18 = v15;
    id v19 = v12;
    unint64_t v20 = sub_1C2A7BDE0(inited);
    swift_bridgeObjectRetain();
    sub_1C29AFAC0(v20);
    swift_bridgeObjectRelease();
    id v21 = objc_allocWithZone(MEMORY[0x1E4F28B18]);
    uint64_t v22 = (void *)sub_1C2A9DCF8();
    swift_bridgeObjectRelease();
    type metadata accessor for Key(0);
    sub_1C2942D7C();
    uint64_t v23 = (void *)sub_1C2A9DC58();
    swift_bridgeObjectRelease();
    id v24 = objc_msgSend(v21, sel_initWithString_attributes_, v22, v23);

    swift_bridgeObjectRelease();
    return v24;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id HKActivitySummary.createStandHourTitleText(_:titleFont:wheelchairUser:)(uint64_t a1, void *a2, char a3)
{
  sub_1C29577B8(a1, (uint64_t)v21);
  if (qword_1EBB92310 != -1) {
    swift_once();
  }
  if (a3) {
    unint64_t v5 = 0x80000001C2AB7FC0;
  }
  else {
    unint64_t v5 = 0x80000001C2AB7FA0;
  }
  if (a3) {
    uint64_t v6 = 0xD000000000000028;
  }
  else {
    uint64_t v6 = 0xD00000000000001DLL;
  }
  sub_1C2934FE8(v6, v5, 0, (uint64_t)v21, 0, 0);
  swift_bridgeObjectRelease();
  sub_1C2935868((uint64_t)v21);
  id v7 = objc_msgSend(self, sel_hk_activityStandGoalLineColor);
  sub_1C29B0158(0, &qword_1EBB923C0, (void (*)(uint64_t))sub_1C29B01AC);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C2AA8230;
  uint64_t v9 = (void *)*MEMORY[0x1E4FB06F8];
  *(void *)(inited + 32) = *MEMORY[0x1E4FB06F8];
  *(void *)(inited + 40) = a2;
  id v10 = (void *)*MEMORY[0x1E4FB0700];
  *(void *)(inited + 48) = *MEMORY[0x1E4FB0700];
  *(void *)(inited + 56) = v7;
  id v11 = v9;
  id v12 = a2;
  id v13 = v10;
  id v14 = v7;
  unint64_t v15 = sub_1C2A7BDE0(inited);
  swift_bridgeObjectRetain();
  sub_1C29AFAC0(v15);
  swift_bridgeObjectRelease();
  id v16 = objc_allocWithZone(MEMORY[0x1E4F28B18]);
  id v17 = (void *)sub_1C2A9DCF8();
  swift_bridgeObjectRelease();
  type metadata accessor for Key(0);
  sub_1C2942D7C();
  id v18 = (void *)sub_1C2A9DC58();
  swift_bridgeObjectRelease();
  id v19 = objc_msgSend(v16, sel_initWithString_attributes_, v17, v18);
  swift_bridgeObjectRelease();

  return v19;
}

uint64_t sub_1C29AFAC0(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_1C2937B6C();
    uint64_t v2 = sub_1C2A9E688();
  }
  else
  {
    uint64_t v2 = MEMORY[0x1E4FBC868];
  }
  uint64_t v29 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v28 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = v2 + 64;
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v30 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v10 = v9 | (v30 << 6);
      goto LABEL_28;
    }
    int64_t v11 = v30 + 1;
    if (__OFADD__(v30, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v11 >= v28) {
      goto LABEL_37;
    }
    unint64_t v12 = *(void *)(v29 + 8 * v11);
    int64_t v13 = v30 + 1;
    if (!v12)
    {
      int64_t v13 = v30 + 2;
      if (v30 + 2 >= v28) {
        goto LABEL_37;
      }
      unint64_t v12 = *(void *)(v29 + 8 * v13);
      if (!v12)
      {
        int64_t v13 = v30 + 3;
        if (v30 + 3 >= v28) {
          goto LABEL_37;
        }
        unint64_t v12 = *(void *)(v29 + 8 * v13);
        if (!v12)
        {
          int64_t v13 = v30 + 4;
          if (v30 + 4 >= v28) {
            goto LABEL_37;
          }
          unint64_t v12 = *(void *)(v29 + 8 * v13);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v13 << 6);
    int64_t v30 = v13;
LABEL_28:
    id v16 = *(void **)(*(void *)(a1 + 56) + 8 * v10);
    *(void *)&v33[0] = *(void *)(*(void *)(a1 + 48) + 8 * v10);
    unint64_t v15 = *(void **)&v33[0];
    *(void *)&v32[0] = v16;
    sub_1C29376D4(0, &qword_1EBB923A0);
    id v17 = v15;
    id v18 = v16;
    swift_dynamicCast();
    uint64_t v19 = *(void *)&v33[0];
    sub_1C2937880((_OWORD *)((char *)v33 + 8), v31);
    sub_1C2937880(v31, v33);
    sub_1C2937880(v33, v32);
    sub_1C2A9DD28();
    sub_1C2A9E9B8();
    sub_1C2A9DD78();
    uint64_t v20 = sub_1C2A9E9E8();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v21 = -1 << *(unsigned char *)(v2 + 32);
    unint64_t v22 = v20 & ~v21;
    unint64_t v23 = v22 >> 6;
    if (((-1 << v22) & ~*(void *)(v6 + 8 * (v22 >> 6))) != 0)
    {
      unint64_t v8 = __clz(__rbit64((-1 << v22) & ~*(void *)(v6 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v26 = v23 == v25;
        if (v23 == v25) {
          unint64_t v23 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v6 + 8 * v23);
      }
      while (v27 == -1);
      unint64_t v8 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(void *)(v6 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
    *(void *)(*(void *)(v2 + 48) + 8 * v8) = v19;
    uint64_t result = (uint64_t)sub_1C2937880(v32, (_OWORD *)(*(void *)(v2 + 56) + 32 * v8));
    ++*(void *)(v2 + 16);
  }
  int64_t v14 = v30 + 5;
  if (v30 + 5 >= v28)
  {
LABEL_37:
    swift_release();
    sub_1C29A8C24();
    return v2;
  }
  unint64_t v12 = *(void *)(v29 + 8 * v14);
  if (v12)
  {
    int64_t v13 = v30 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v13 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v13 >= v28) {
      goto LABEL_37;
    }
    unint64_t v12 = *(void *)(v29 + 8 * v13);
    ++v14;
    if (v12) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

id _sSo17HKActivitySummaryC19HealthVisualizationE22createAttributedString4from9valueText0I4Font04unitJ00lK0So012NSAttributedG0CSgSS_SSSo6UIFontCSSANtF_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, void *a8)
{
  sub_1C29B0158(0, &qword_1EBB923C0, (void (*)(uint64_t))sub_1C29B01AC);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C2AA8230;
  int64_t v11 = (void *)*MEMORY[0x1E4FB06F8];
  *(void *)(inited + 32) = *MEMORY[0x1E4FB06F8];
  *(void *)(inited + 40) = a5;
  unint64_t v12 = (void *)*MEMORY[0x1E4FB0700];
  *(void *)(inited + 48) = *MEMORY[0x1E4FB0700];
  int64_t v13 = self;
  id v14 = v11;
  id v15 = a5;
  id v16 = v12;
  *(void *)(inited + 56) = objc_msgSend(v13, sel_labelColor);
  unint64_t v17 = sub_1C2A7BDE0(inited);
  uint64_t v18 = swift_initStackObject();
  *(_OWORD *)(v18 + 16) = xmmword_1C2AA8230;
  *(void *)(v18 + 32) = v14;
  *(void *)(v18 + 40) = a8;
  *(void *)(v18 + 48) = v16;
  id v19 = v14;
  id v20 = v16;
  id v21 = a8;
  *(void *)(v18 + 56) = objc_msgSend(v13, sel_secondaryLabelColor);
  unint64_t v36 = sub_1C2A7BDE0(v18);
  unint64_t v22 = (void *)sub_1C2A9DCF8();
  id v23 = objc_allocWithZone(MEMORY[0x1E4F28E48]);
  swift_bridgeObjectRetain();
  char v24 = (void *)sub_1C2A9DCF8();
  swift_bridgeObjectRelease();
  id v25 = objc_msgSend(v23, sel_initWithString_, v24);

  BOOL v26 = (void *)sub_1C2A9DCF8();
  id v27 = objc_msgSend(v22, sel_rangeOfString_, v26);
  uint64_t v29 = v28;

  int64_t v30 = (void *)sub_1C2A9DCF8();
  id v37 = objc_msgSend(v22, sel_rangeOfString_, v30);
  uint64_t v32 = v31;

  sub_1C29AFAC0(v17);
  swift_bridgeObjectRelease();
  type metadata accessor for Key(0);
  sub_1C2942D7C();
  os_log_type_t v33 = (void *)sub_1C2A9DC58();
  swift_bridgeObjectRelease();
  objc_msgSend(v25, sel_addAttributes_range_, v33, v27, v29);

  sub_1C29AFAC0(v36);
  swift_bridgeObjectRelease();
  os_log_type_t v34 = (void *)sub_1C2A9DC58();
  swift_bridgeObjectRelease();
  objc_msgSend(v25, sel_addAttributes_range_, v34, v37, v32);

  return v25;
}

void sub_1C29B0158(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_1C2A9E8A8();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_1C29B01AC()
{
  if (!qword_1EBB92398)
  {
    type metadata accessor for Key(255);
    sub_1C29376D4(255, &qword_1EBB923A0);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EBB92398);
    }
  }
}

uint64_t MostRecentRangeQueryConfiguration.dateRange.getter()
{
  return *v0;
}

void *MostRecentRangeQueryConfiguration.statisticsOptions.getter()
{
  return &unk_1F1DEA2D8;
}

void MostRecentRangeQueryConfiguration.anchorDate.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 1);
}

uint64_t MostRecentRangeQueryConfiguration.aggregationInterval.getter()
{
  return *(unsigned __int8 *)(v0 + 2);
}

HealthVisualization::MostRecentRangeQueryConfiguration __swiftcall MostRecentRangeQueryConfiguration.init(dateRange:anchorDate:aggregationInterval:)(HealthVisualization::DateRange dateRange, HealthVisualization::AnchorDate anchorDate, HealthVisualization::StatisticsInterval aggregationInterval)
{
  char v4 = *(unsigned char *)anchorDate;
  *uint64_t v3 = dateRange;
  *((unsigned char *)v3 + 1) = v4;
  *((unsigned char *)v3 + 2) = aggregationInterval;
  result.dateRange = dateRange;
  return result;
}

uint64_t static MostRecentRangeQueryConfiguration.== infix(_:_:)(unsigned __int8 *a1, char *a2)
{
  unsigned __int8 v2 = a1[1];
  unsigned __int8 v3 = a1[2];
  char v4 = a2[1];
  char v5 = a2[2];
  if ((sub_1C29544B0(*a1, *a2) & 1) == 0 || (sub_1C29546FC(v2, v4) & 1) == 0) {
    return 0;
  }
  return sub_1C2954904(v3, v5);
}

uint64_t sub_1C29B02E8()
{
  unint64_t v1 = 0x6144726F68636E61;
  if (*v0 != 1) {
    unint64_t v1 = 0xD000000000000013;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x676E615265746164;
  }
}

uint64_t sub_1C29B0350@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1C29B0C9C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1C29B0378(uint64_t a1)
{
  unint64_t v2 = sub_1C29B05E0();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1C29B03B4(uint64_t a1)
{
  unint64_t v2 = sub_1C29B05E0();
  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t MostRecentRangeQueryConfiguration.encode(to:)(void *a1)
{
  sub_1C29B085C(0, &qword_1EBB8FFF0, MEMORY[0x1E4FBBDE0]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  unint64_t v8 = (char *)&v13 - v7;
  char v9 = *v1;
  int v10 = v1[1];
  int v14 = v1[2];
  int v15 = v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1C29B05E0();
  sub_1C2A9EA18();
  char v21 = v9;
  char v20 = 0;
  sub_1C295677C();
  sub_1C2A9E868();
  if (!v2)
  {
    char v11 = v14;
    char v19 = v15;
    char v18 = 1;
    sub_1C2966ED4();
    sub_1C2A9E868();
    char v17 = v11;
    char v16 = 2;
    sub_1C2975430();
    sub_1C2A9E868();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_1C29B05E0()
{
  unint64_t result = qword_1EBB8FEC8;
  if (!qword_1EBB8FEC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB8FEC8);
  }
  return result;
}

uint64_t MostRecentRangeQueryConfiguration.init(from:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  sub_1C29B085C(0, &qword_1EBB902E0, MEMORY[0x1E4FBBDC0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  char v9 = (char *)&v14 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1C29B05E0();
  sub_1C2A9EA08();
  if (!v2)
  {
    char v19 = 0;
    sub_1C2956834();
    sub_1C2A9E7A8();
    char v10 = v20;
    char v17 = 1;
    sub_1C29671CC();
    sub_1C2A9E7A8();
    char v11 = v18;
    char v15 = 2;
    sub_1C29755A8();
    sub_1C2A9E7A8();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    char v13 = v16;
    *a2 = v10;
    a2[1] = v11;
    a2[2] = v13;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

void sub_1C29B085C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = sub_1C29B05E0();
    unint64_t v7 = a3(a1, &type metadata for MostRecentRangeQueryConfiguration.CodingKeys, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t sub_1C29B08C0@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return MostRecentRangeQueryConfiguration.init(from:)(a1, a2);
}

uint64_t sub_1C29B08D8(void *a1)
{
  return MostRecentRangeQueryConfiguration.encode(to:)(a1);
}

uint64_t sub_1C29B08F0(unsigned __int8 *a1, char *a2)
{
  unsigned __int8 v2 = a1[1];
  unsigned __int8 v3 = a1[2];
  char v4 = a2[1];
  char v5 = a2[2];
  if ((sub_1C29544B0(*a1, *a2) & 1) == 0 || (sub_1C29546FC(v2, v4) & 1) == 0) {
    return 0;
  }
  return sub_1C2954904(v3, v5);
}

uint64_t __swift_memcpy3_1(uint64_t result, __int16 *a2)
{
  __int16 v2 = *a2;
  *(unsigned char *)(result + 2) = *((unsigned char *)a2 + 2);
  *(_WORD *)unint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for MostRecentRangeQueryConfiguration(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFC)
  {
    if ((a2 + 33554180) >> 24)
    {
      int v2 = a1[3];
      if (a1[3]) {
        return (*(unsigned __int16 *)a1 | (a1[2] << 16) | (v2 << 24)) - 16776964;
      }
    }
    else
    {
      int v2 = *(unsigned __int16 *)(a1 + 3);
      if (*(_WORD *)(a1 + 3)) {
        return (*(unsigned __int16 *)a1 | (a1[2] << 16) | (v2 << 24)) - 16776964;
      }
    }
  }
  unsigned int v4 = a1[1];
  BOOL v5 = v4 >= 5;
  int v6 = v4 - 5;
  if (!v5) {
    int v6 = -1;
  }
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for MostRecentRangeQueryConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if ((a3 + 33554180) >> 24) {
    int v3 = 1;
  }
  else {
    int v3 = 2;
  }
  if (a3 <= 0xFB) {
    int v3 = 0;
  }
  if (a2 > 0xFB)
  {
    *(_WORD *)unint64_t result = a2 - 252;
    *(unsigned char *)(result + 2) = (a2 - 252) >> 16;
    if (v3)
    {
      unsigned int v4 = ((a2 - 252) >> 24) + 1;
      if (v3 == 2) {
        *(_WORD *)(result + 3) = v4;
      }
      else {
        *(unsigned char *)(result + 3) = v4;
      }
    }
  }
  else
  {
    if (!v3) {
      goto LABEL_10;
    }
    if (v3 == 2)
    {
      *(_WORD *)(result + 3) = 0;
LABEL_10:
      if (!a2) {
        return result;
      }
LABEL_16:
      *(unsigned char *)(result + 1) = a2 + 4;
      return result;
    }
    *(unsigned char *)(result + 3) = 0;
    if (a2) {
      goto LABEL_16;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MostRecentRangeQueryConfiguration()
{
  return &type metadata for MostRecentRangeQueryConfiguration;
}

unsigned char *storeEnumTagSinglePayload for MostRecentRangeQueryConfiguration.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C29B0B5CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MostRecentRangeQueryConfiguration.CodingKeys()
{
  return &type metadata for MostRecentRangeQueryConfiguration.CodingKeys;
}

unint64_t sub_1C29B0B98()
{
  unint64_t result = qword_1EA31E5F0;
  if (!qword_1EA31E5F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA31E5F0);
  }
  return result;
}

unint64_t sub_1C29B0BF0()
{
  unint64_t result = qword_1EBB8FED8;
  if (!qword_1EBB8FED8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB8FED8);
  }
  return result;
}

unint64_t sub_1C29B0C48()
{
  unint64_t result = qword_1EBB8FED0;
  if (!qword_1EBB8FED0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB8FED0);
  }
  return result;
}

uint64_t sub_1C29B0C9C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x676E615265746164 && a2 == 0xE900000000000065;
  if (v2 || (sub_1C2A9E8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6144726F68636E61 && a2 == 0xEA00000000006574 || (sub_1C2A9E8D8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001C2AB6A20)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = sub_1C2A9E8D8();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t SwiftChartDiagramConfiguration.primaryDiagramTimeScope.getter()
{
  return *(void *)v0;
}

uint64_t SwiftChartDiagramConfiguration.sharingDiagramTimeScope.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t getEnumTagSinglePayload for CountComparisonQueryConfiguration(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for CountComparisonQueryConfiguration(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 25) = v3;
  return result;
}

ValueMetadata *type metadata accessor for SwiftChartDiagramConfiguration()
{
  return &type metadata for SwiftChartDiagramConfiguration;
}

uint64_t sub_1C29B0E80()
{
  uint64_t v0 = sub_1C2A9CFE8();
  v13[1] = *(void *)(v0 - 8);
  _OWORD v13[2] = v0;
  MEMORY[0x1F4188790](v0);
  sub_1C29B3DC4();
  uint64_t v2 = v1;
  v13[0] = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  unsigned int v4 = (char *)v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_1C2A9CE68();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C29376D4(0, (unint64_t *)&qword_1EBB8F888);
  sub_1C2A9CEC8();
  void v13[4] = sub_1C2A9CED8();
  sub_1C29B3FE8(0, &qword_1EBB8FFF8, MEMORY[0x1E4F66798], MEMORY[0x1E4FBBE00]);
  unint64_t v9 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_1C2AA6B00;
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 16))(v10 + v9, v8, v5);
  sub_1C29B2E98();
  sub_1C29B2F40(&qword_1EBB8FF70, (void (*)(uint64_t))sub_1C29B2E98);
  sub_1C2A9D4E8();
  swift_release();
  swift_bridgeObjectRelease();
  sub_1C29B2F40(&qword_1EBB8FF30, (void (*)(uint64_t))sub_1C29B3DC4);
  uint64_t v11 = sub_1C2A9D4A8();
  (*(void (**)(char *, uint64_t))(v13[0] + 8))(v4, v2);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return v11;
}

uint64_t static FeatureStatusChangePublisher.identifier(for:)()
{
  uint64_t v1 = sub_1C2A9DD28();
  swift_bridgeObjectRetain();
  sub_1C2A9DDB8();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_1C29B1424()
{
  uint64_t v1 = sub_1C2A9DD28();
  swift_bridgeObjectRetain();
  sub_1C2A9DDB8();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_1C29B1494()
{
  uint64_t v0 = sub_1C2A9CFE8();
  MEMORY[0x1F4188790](v0);
  sub_1C2A9C2E8();
  swift_allocObject();
  sub_1C2A9C2D8();
  swift_retain();
  sub_1C2A9C9B8();
  swift_release();
  sub_1C29B2370();
  uint64_t v1 = sub_1C2A9C2C8();
  swift_release();
  return v1;
}

uint64_t FeatureStatusChangePublisher.CacheData.previouslyAllowed.getter()
{
  return *v0;
}

uint64_t FeatureStatusChangePublisher.CacheData.previouslyAllowed.setter(uint64_t result)
{
  unsigned char *v1 = result;
  return result;
}

uint64_t (*FeatureStatusChangePublisher.CacheData.previouslyAllowed.modify())()
{
  return nullsub_1;
}

HealthVisualization::FeatureStatusChangePublisher::CacheData __swiftcall FeatureStatusChangePublisher.CacheData.init(previouslyAllowed:)(HealthVisualization::FeatureStatusChangePublisher::CacheData previouslyAllowed)
{
  v1->previouslyAllowed.value = previouslyAllowed.previouslyAllowed.value;
  return previouslyAllowed;
}

unint64_t sub_1C29B1818()
{
  return 0xD000000000000011;
}

uint64_t sub_1C29B1834@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1C29B2FD4(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1C29B1860(uint64_t a1)
{
  unint64_t v2 = sub_1C29B2D34();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1C29B189C(uint64_t a1)
{
  unint64_t v2 = sub_1C29B2D34();
  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t FeatureStatusChangePublisher.CacheData.encode(to:)(void *a1)
{
  sub_1C29B2D88(0, &qword_1EBB8F9A0, MEMORY[0x1E4FBBDE0]);
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v6 = (char *)&v8 - v5;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1C29B2D34();
  sub_1C2A9EA18();
  sub_1C2A9E7E8();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t FeatureStatusChangePublisher.CacheData.init(from:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  sub_1C29B2D88(0, &qword_1EBB8F918, MEMORY[0x1E4FBBDC0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  unint64_t v9 = (char *)&v12 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1C29B2D34();
  sub_1C2A9EA08();
  if (!v2)
  {
    char v10 = sub_1C2A9E728();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    *a2 = v10;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1C29B1BA0@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return FeatureStatusChangePublisher.CacheData.init(from:)(a1, a2);
}

uint64_t sub_1C29B1BB8(void *a1)
{
  sub_1C29B2D88(0, &qword_1EBB8F9A0, MEMORY[0x1E4FBBDE0]);
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v6 = (char *)&v8 - v5;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1C29B2D34();
  sub_1C2A9EA18();
  sub_1C2A9E7E8();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_1C29B1D00()
{
  sub_1C29B2DEC();
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(v1 - 8);
  __n128 v4 = MEMORY[0x1F4188790](v1);
  uint64_t v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9[1] = (*(uint64_t (**)(__n128))(v0 + 48))(v4);
  swift_allocObject();
  swift_weakInit();
  sub_1C29B2E98();
  sub_1C2A9C968();
  sub_1C29B2F40(&qword_1EBB8FF70, (void (*)(uint64_t))sub_1C29B2E98);
  sub_1C2A9D4B8();
  swift_release();
  swift_release();
  sub_1C29B2F40(&qword_1EBB8FF20, (void (*)(uint64_t))sub_1C29B2DEC);
  uint64_t v7 = sub_1C2A9D4A8();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  return v7;
}

uint64_t sub_1C29B1EDC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_1C2A9CFE8();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong) {
    goto LABEL_5;
  }
  uint64_t v7 = Strong;
  uint64_t v8 = (void *)sub_1C2A9CE78();
  unsigned int v9 = objc_msgSend(v8, sel_areAllRequirementsSatisfied);

  swift_retain();
  sub_1C2A9C9B8();
  uint64_t v10 = swift_release();
  if v25 != 2 && ((((v25 & 1) == 0) ^ v9))
  {
    swift_release();
LABEL_5:
    uint64_t v11 = sub_1C2A9C968();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(a1, 1, 1, v11);
  }
  MEMORY[0x1F4188790](v10);
  LOBYTE(v22[-2]) = v9;
  swift_retain();
  sub_1C2A9C9C8();
  swift_release();
  sub_1C2A9CF68();
  swift_retain_n();
  char v13 = sub_1C2A9CFC8();
  os_log_type_t v14 = sub_1C2A9E0C8();
  if (os_log_type_enabled(v13, v14))
  {
    char v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    uint64_t v23 = a1;
    uint64_t v24 = v7;
    uint64_t v17 = v16;
    uint64_t v25 = v16;
    *(_DWORD *)char v15 = 136446210;
    v22[1] = v15 + 4;
    type metadata accessor for FeatureStatusChangePublisher();
    swift_retain();
    uint64_t v18 = sub_1C2A9DD58();
    uint64_t v24 = sub_1C2957168(v18, v19, &v25);
    sub_1C2A9E358();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C292A000, v13, v14, "[%{public}s] Detected change to feature status, publishing changes", v15, 0xCu);
    swift_arrayDestroy();
    uint64_t v20 = v17;
    a1 = v23;
    MEMORY[0x1C87656F0](v20, -1, -1);
    MEMORY[0x1C87656F0](v15, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  sub_1C29B23C4(a1);
  swift_release();
  uint64_t v21 = sub_1C2A9C968();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(a1, 0, 1, v21);
}

uint64_t sub_1C29B2278@<X0>(unsigned char *a1@<X8>)
{
  swift_retain();
  sub_1C2A9C9B8();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_1C29B22C8()
{
  return swift_release();
}

uint64_t sub_1C29B2328()
{
  swift_retain();
  sub_1C2A9C9B8();
  return swift_release();
}

unint64_t sub_1C29B2370()
{
  unint64_t result = qword_1EBB8F270;
  if (!qword_1EBB8F270)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB8F270);
  }
  return result;
}

uint64_t sub_1C29B23C4@<X0>(uint64_t a1@<X8>)
{
  sub_1C29B3FE8(0, (unint64_t *)&qword_1EBB923C8, MEMORY[0x1E4F671C0], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = &v13[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = &v13[-v7];
  uint64_t v9 = v1 + OBJC_IVAR____TtC19HealthVisualization28FeatureStatusChangePublisher____lazy_storage___changeSetToUse;
  swift_beginAccess();
  sub_1C29B3A9C(v9, (uint64_t)v8);
  uint64_t v10 = sub_1C2A9C968();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10) != 1) {
    return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(v11 + 32))(a1, v8, v10);
  }
  sub_1C29B34C0((uint64_t)v8);
  sub_1C29B25C0();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v11 + 16))(v5, a1, v10);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v11 + 56))(v5, 0, 1, v10);
  swift_beginAccess();
  sub_1C29B3B30((uint64_t)v5, v9);
  return swift_endAccess();
}

uint64_t sub_1C29B25C0()
{
  unint64_t v0 = swift_bridgeObjectRetain();
  uint64_t v1 = sub_1C2A4191C(v0);
  swift_bridgeObjectRelease();
  unint64_t v27 = v1 & 0xC000000000000001;
  if ((v1 & 0xC000000000000001) != 0)
  {
    uint64_t v2 = sub_1C2A9E428();
    if (v2) {
      goto LABEL_3;
    }
LABEL_6:
    swift_bridgeObjectRelease();
    if (*(void *)(MEMORY[0x1E4FBC860] + 16))
    {
LABEL_22:
      sub_1C2960AA0();
      uint64_t v6 = sub_1C2A9E688();
      goto LABEL_23;
    }
LABEL_7:
    uint64_t v6 = MEMORY[0x1E4FBC868];
LABEL_23:
    v28[0] = v6;
    uint64_t v24 = (void *)swift_bridgeObjectRetain();
    sub_1C2A404B4(v24, 1, v28);
    swift_bridgeObjectRelease();
    return sub_1C2A9C938();
  }
  uint64_t v2 = *(void *)(v1 + 16);
  if (!v2) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t v32 = MEMORY[0x1E4FBC860];
  sub_1C2978A4C(0, v2 & ~(v2 >> 63), 0);
  if (v27)
  {
    uint64_t v3 = sub_1C2A9E3D8();
    char v5 = 1;
  }
  else
  {
    uint64_t v3 = sub_1C2A41894(v1);
    char v5 = v7 & 1;
  }
  uint64_t v29 = v3;
  uint64_t v30 = v4;
  char v31 = v5;
  if ((v2 & 0x8000000000000000) == 0)
  {
    id v26 = self;
    do
    {
      while (1)
      {
        int64_t v14 = v29;
        uint64_t v13 = v30;
        char v15 = v31;
        sub_1C2A4161C(v29, v30, v31, v1);
        uint64_t v17 = v16;
        id v18 = objc_msgSend(v26, sel_sampleTypeChangeWithSampleType_dateInterval_hasUnfrozenSeries_, v16, 0, 0);
        uint64_t v19 = v32;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1C2978A4C(0, *(void *)(v19 + 16) + 1, 1);
          uint64_t v19 = v32;
        }
        unint64_t v21 = *(void *)(v19 + 16);
        unint64_t v20 = *(void *)(v19 + 24);
        if (v21 >= v20 >> 1)
        {
          sub_1C2978A4C(v20 > 1, v21 + 1, 1);
          uint64_t v19 = v32;
        }
        *(void *)(v19 + 16) = v21 + 1;
        uint64_t v22 = v19 + 16 * v21;
        *(void *)(v22 + 32) = v17;
        *(void *)(v22 + 40) = v18;
        if (v27) {
          break;
        }
        int64_t v8 = sub_1C2A31630(v14, v13, v15, v1);
        uint64_t v10 = v9;
        char v12 = v11;
        sub_1C2942E7C(v14, v13, v15);
        uint64_t v29 = v8;
        uint64_t v30 = v10;
        char v31 = v12 & 1;
        if (!--v2) {
          goto LABEL_21;
        }
      }
      if ((v15 & 1) == 0) {
        goto LABEL_25;
      }
      if (sub_1C2A9E3F8()) {
        swift_isUniquelyReferenced_nonNull_native();
      }
      sub_1C29B3BC4();
      uint64_t v23 = (void (*)(void *, void))sub_1C2A9DFA8();
      sub_1C2A9E478();
      v23(v28, 0);
      --v2;
    }
    while (v2);
LABEL_21:
    sub_1C2942E7C(v29, v30, v31);
    swift_bridgeObjectRelease();
    if (*(void *)(v32 + 16)) {
      goto LABEL_22;
    }
    goto LABEL_7;
  }
  __break(1u);
LABEL_25:
  __break(1u);
  uint64_t result = swift_unexpectedError();
  __break(1u);
  return result;
}

void *FeatureStatusChangePublisher.__allocating_init(featureIdentifier:context:affectedSampleTypes:serializedCacheData:healthStore:publisherFactory:)(void *a1, void *a2, uint64_t a3, uint64_t a4, unint64_t a5, void *a6, uint64_t a7)
{
  char v15 = (void *)swift_allocObject();
  v15[2] = a1;
  v15[3] = a6;
  v15[4] = v7;
  type metadata accessor for FeatureStatusChangePublisher();
  swift_allocObject();
  id v16 = a1;
  id v17 = a6;
  id v18 = sub_1C29B305C(v16, a2, a3, a4, a5, (uint64_t)sub_1C29B2FC8, (uint64_t)v15);
  sub_1C29B349C(a4, a5);

  sub_1C29B34B0(a7);
  return v18;
}

uint64_t sub_1C29B29FC(uint64_t a1, uint64_t a2)
{
  id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F2B068]), sel_initWithFeatureIdentifier_healthStore_, a1, a2);
  uint64_t v3 = sub_1C29B0E80();

  return v3;
}

void *FeatureStatusChangePublisher.__allocating_init(featureIdentifier:context:affectedSampleTypes:serializedCacheData:publisherFactory:)(void *a1, void *a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  swift_allocObject();
  int64_t v14 = sub_1C29B305C(a1, a2, a3, a4, a5, a6, a7);
  sub_1C29B349C(a4, a5);

  return v14;
}

void *FeatureStatusChangePublisher.init(featureIdentifier:context:affectedSampleTypes:serializedCacheData:publisherFactory:)(void *a1, void *a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  char v11 = sub_1C29B305C(a1, a2, a3, a4, a5, a6, a7);
  sub_1C29B349C(a4, a5);

  return v11;
}

uint64_t FeatureStatusChangePublisher.deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  sub_1C29B34C0(v0 + OBJC_IVAR____TtC19HealthVisualization28FeatureStatusChangePublisher____lazy_storage___changeSetToUse);
  return v0;
}

uint64_t FeatureStatusChangePublisher.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  sub_1C29B34C0(v0 + OBJC_IVAR____TtC19HealthVisualization28FeatureStatusChangePublisher____lazy_storage___changeSetToUse);
  return swift_deallocClassInstance();
}

uint64_t sub_1C29B2C2C()
{
  uint64_t v1 = sub_1C2A9DD28();
  swift_bridgeObjectRetain();
  sub_1C2A9DDB8();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_1C29B2CA0()
{
  return sub_1C29B1494();
}

uint64_t sub_1C29B2CC4()
{
  return sub_1C29B1D00();
}

uint64_t type metadata accessor for FeatureStatusChangePublisher()
{
  uint64_t result = qword_1EBB8F280;
  if (!qword_1EBB8F280) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t sub_1C29B2D34()
{
  unint64_t result = qword_1EBB8F258;
  if (!qword_1EBB8F258)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB8F258);
  }
  return result;
}

void sub_1C29B2D88(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = sub_1C29B2D34();
    unint64_t v7 = a3(a1, &type metadata for FeatureStatusChangePublisher.CacheData.CodingKeys, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

void sub_1C29B2DEC()
{
  if (!qword_1EBB8FF28)
  {
    sub_1C29B2E98();
    sub_1C2A9C968();
    sub_1C29B2F40(&qword_1EBB8FF70, (void (*)(uint64_t))sub_1C29B2E98);
    unint64_t v0 = sub_1C2A9D398();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EBB8FF28);
    }
  }
}

void sub_1C29B2E98()
{
  if (!qword_1EBB8FF78)
  {
    sub_1C2A9CE68();
    unint64_t v0 = sub_1C2A9D3E8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EBB8FF78);
    }
  }
}

uint64_t sub_1C29B2F00()
{
  swift_weakDestroy();
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1C29B2F38@<X0>(uint64_t a1@<X8>)
{
  return sub_1C29B1EDC(a1);
}

uint64_t sub_1C29B2F40(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1C29B2F88()
{
  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t sub_1C29B2FC8()
{
  return sub_1C29B29FC(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1C29B2FD4(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000011 && a2 == 0x80000001C2AB80E0)
  {
    swift_bridgeObjectRelease();
    char v2 = 0;
  }
  else
  {
    char v3 = sub_1C2A9E8D8();
    swift_bridgeObjectRelease();
    char v2 = v3 ^ 1;
  }
  return v2 & 1;
}

void *sub_1C29B305C(void *a1, void *a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = v7;
  uint64_t v13 = sub_1C2A9CFE8();
  MEMORY[0x1F4188790](v13);
  int64_t v14 = (char *)v8
      + OBJC_IVAR____TtC19HealthVisualization28FeatureStatusChangePublisher____lazy_storage___changeSetToUse;
  uint64_t v15 = sub_1C2A9C968();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
  _OWORD v8[2] = a1;
  v8[3] = a2;
  v8[4] = a3;
  if (a5 >> 60 == 15)
  {
    id v16 = a1;
    id v17 = a2;
  }
  else
  {
    sub_1C2A9C2B8();
    swift_allocObject();
    id v18 = a1;
    id v19 = a2;
    sub_1C29B3D04(a4, a5);
    sub_1C2A9C2A8();
    sub_1C29B3D70();
    sub_1C2A9C298();
    sub_1C29B349C(a4, a5);
    swift_release();
  }
  sub_1C29B3CAC();
  swift_allocObject();
  v8[5] = sub_1C2A9C9F8();
  v8[6] = a6;
  v8[7] = a7;
  return v8;
}

uint64_t sub_1C29B349C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_1C2991910(a1, a2);
  }
  return a1;
}

uint64_t sub_1C29B34B0(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t sub_1C29B34C0(uint64_t a1)
{
  sub_1C29B3FE8(0, (unint64_t *)&qword_1EBB923C8, MEMORY[0x1E4F671C0], MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1C29B3554()
{
  return type metadata accessor for FeatureStatusChangePublisher();
}

void sub_1C29B355C()
{
  sub_1C29B3FE8(319, (unint64_t *)&qword_1EBB923C8, MEMORY[0x1E4F671C0], MEMORY[0x1E4FBB718]);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for FeatureStatusChangePublisher(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for FeatureStatusChangePublisher);
}

uint64_t dispatch thunk of FeatureStatusChangePublisher.identifier.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of FeatureStatusChangePublisher.serializedData.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of FeatureStatusChangePublisher.publisher.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of FeatureStatusChangePublisher.cacheData.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of FeatureStatusChangePublisher.__allocating_init(featureIdentifier:context:affectedSampleTypes:serializedCacheData:publisherFactory:)()
{
  return (*(uint64_t (**)(void))(v0 + 224))();
}

uint64_t getEnumTagSinglePayload for FeatureStatusChangePublisher.CacheData(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  if (v6 >= 2) {
    int v7 = ((v6 + 2147483646) & 0x7FFFFFFF) - 1;
  }
  else {
    int v7 = -2;
  }
  if (v7 < 0) {
    int v7 = -1;
  }
  return (v7 + 1);
}

unsigned char *storeEnumTagSinglePayload for FeatureStatusChangePublisher.CacheData(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C29B3888);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FeatureStatusChangePublisher.CacheData()
{
  return &type metadata for FeatureStatusChangePublisher.CacheData;
}

unsigned char *storeEnumTagSinglePayload for FeatureStatusChangePublisher.CacheData.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1C29B395CLL);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for FeatureStatusChangePublisher.CacheData.CodingKeys()
{
  return &type metadata for FeatureStatusChangePublisher.CacheData.CodingKeys;
}

unint64_t sub_1C29B3998()
{
  unint64_t result = qword_1EA31E5F8;
  if (!qword_1EA31E5F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA31E5F8);
  }
  return result;
}

unint64_t sub_1C29B39F0()
{
  unint64_t result = qword_1EBB8F268;
  if (!qword_1EBB8F268)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB8F268);
  }
  return result;
}

unint64_t sub_1C29B3A48()
{
  unint64_t result = qword_1EBB8F260;
  if (!qword_1EBB8F260)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB8F260);
  }
  return result;
}

uint64_t sub_1C29B3A9C(uint64_t a1, uint64_t a2)
{
  sub_1C29B3FE8(0, (unint64_t *)&qword_1EBB923C8, MEMORY[0x1E4F671C0], MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C29B3B30(uint64_t a1, uint64_t a2)
{
  sub_1C29B3FE8(0, (unint64_t *)&qword_1EBB923C8, MEMORY[0x1E4F671C0], MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void sub_1C29B3BC4()
{
  if (!qword_1EA31E600)
  {
    sub_1C29376D4(255, (unint64_t *)&qword_1EBB92468);
    sub_1C29B3C38();
    unint64_t v0 = sub_1C2A9DFB8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EA31E600);
    }
  }
}

unint64_t sub_1C29B3C38()
{
  unint64_t result = qword_1EBB92100;
  if (!qword_1EBB92100)
  {
    sub_1C29376D4(255, (unint64_t *)&qword_1EBB92468);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB92100);
  }
  return result;
}

unsigned char *sub_1C29B3CA0(unsigned char *result)
{
  *unint64_t result = *(unsigned char *)(v1 + 16);
  return result;
}

void sub_1C29B3CAC()
{
  if (!qword_1EBB8E890)
  {
    unint64_t v0 = sub_1C2A9C9D8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EBB8E890);
    }
  }
}

uint64_t sub_1C29B3D04(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_1C29B3D18(a1, a2);
  }
  return a1;
}

uint64_t sub_1C29B3D18(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }
  return swift_retain();
}

unint64_t sub_1C29B3D70()
{
  unint64_t result = qword_1EBB8F278;
  if (!qword_1EBB8F278)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB8F278);
  }
  return result;
}

void sub_1C29B3DC4()
{
  if (!qword_1EBB8FF38)
  {
    sub_1C29B3EB0();
    sub_1C29B2E98();
    sub_1C29B2F40(&qword_1EBB8FF60, (void (*)(uint64_t))sub_1C29B3EB0);
    sub_1C29B2F40(&qword_1EBB8FF70, (void (*)(uint64_t))sub_1C29B2E98);
    unint64_t v0 = sub_1C2A9D3A8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EBB8FF38);
    }
  }
}

void sub_1C29B3EB0()
{
  if (!qword_1EBB8FF68)
  {
    sub_1C29B3FE8(255, &qword_1EBB8FF80, MEMORY[0x1E4F66798], MEMORY[0x1E4FBB320]);
    sub_1C29B3F60();
    unint64_t v0 = sub_1C2A9D3D8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EBB8FF68);
    }
  }
}

unint64_t sub_1C29B3F60()
{
  unint64_t result = qword_1EBB8FF88;
  if (!qword_1EBB8FF88)
  {
    sub_1C29B3FE8(255, &qword_1EBB8FF80, MEMORY[0x1E4F66798], MEMORY[0x1E4FBB320]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB8FF88);
  }
  return result;
}

void sub_1C29B3FE8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

double DiagramMultiDayDateAxisMetricsCalculator.durationThreshold6HourTickIntervals.getter()
{
  return *(double *)(v0 + 32);
}

double DiagramMultiDayDateAxisMetricsCalculator.durationThreshold12HourTickIntervals.getter()
{
  return *(double *)(v0 + 40);
}

double DiagramMultiDayDateAxisMetricsCalculator.durationThreshold1DayTickIntervals.getter()
{
  return *(double *)(v0 + 48);
}

id sub_1C29B4068@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>, double a5@<D0>, double a6@<D1>)
{
  id v57 = (id)a3;
  sub_1C2939CE8(0, (unint64_t *)&qword_1EBB92530, MEMORY[0x1E4F27D68]);
  MEMORY[0x1F4188790](v12 - 8);
  int64_t v14 = (char *)&v54 - v13;
  sub_1C2939CE8(0, &qword_1EBB92528, MEMORY[0x1E4F27CA0]);
  MEMORY[0x1F4188790](v15 - 8);
  id v17 = (char *)&v54 - v16;
  uint64_t v18 = sub_1C2A9C468();
  MEMORY[0x1F4188790](v18);
  unint64_t v20 = (char *)&v54 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (char *)&v54 - v22;
  MEMORY[0x1F4188790](v24);
  id v26 = (char *)&v54 - v25;
  MEMORY[0x1F4188790](v27);
  char v31 = (char *)&v54 - v30;
  double v32 = a6 - a5;
  if (v6[4] >= a6 - a5)
  {
    uint64_t v40 = v29;
    uint64_t v41 = v28;
    uint64_t v42 = sub_1C2A9C868();
    uint64_t v43 = *(void *)(v42 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v43 + 16))(v17, a1, v42);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v43 + 56))(v17, 0, 1, v42);
    uint64_t v44 = sub_1C2A9C8B8();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56))(v14, 1, 1, v44);
    sub_1C2A9C438();
    id result = (id)HKDateFormatterFromTemplate();
    id v57 = result;
    if (result)
    {
      id v37 = (int *)type metadata accessor for DiagramDateAxisMetricsCalculator.DateTickIntervalStrategy();
      (*(void (**)(char *, char *, uint64_t))(v40 + 32))(&a4[v37[5]], v20, v41);
      char v38 = 1;
      uint64_t v39 = 6;
      goto LABEL_12;
    }
    __break(1u);
    goto LABEL_16;
  }
  if (v6[5] >= v32)
  {
    uint64_t v45 = v29;
    uint64_t v46 = v28;
    uint64_t v47 = sub_1C2A9C868();
    uint64_t v48 = *(void *)(v47 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v17, a1, v47);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v48 + 56))(v17, 0, 1, v47);
    uint64_t v49 = sub_1C2A9C8B8();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 56))(v14, 1, 1, v49);
    sub_1C2A9C438();
    id result = (id)HKDateFormatterFromTemplate();
    id v57 = result;
    if (result)
    {
      id v37 = (int *)type metadata accessor for DiagramDateAxisMetricsCalculator.DateTickIntervalStrategy();
      (*(void (**)(char *, char *, uint64_t))(v45 + 32))(&a4[v37[5]], v23, v46);
      char v38 = 1;
      uint64_t v39 = 12;
      goto LABEL_12;
    }
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v55 = v29;
  uint64_t v56 = v28;
  if (v6[6] >= v32)
  {
    uint64_t v50 = sub_1C2A9C868();
    uint64_t v51 = *(void *)(v50 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v51 + 16))(v17, a1, v50);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v51 + 56))(v17, 0, 1, v50);
    uint64_t v52 = sub_1C2A9C8B8();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v52 - 8) + 56))(v14, 1, 1, v52);
    sub_1C2A9C438();
    id result = (id)HKDateFormatterFromTemplate();
    id v57 = result;
    if (result)
    {
      id v37 = (int *)type metadata accessor for DiagramDateAxisMetricsCalculator.DateTickIntervalStrategy();
      (*(void (**)(char *, char *, uint64_t))(v55 + 32))(&a4[v37[5]], v26, v56);
      uint64_t v39 = 1;
      char v38 = 1;
      goto LABEL_12;
    }
LABEL_18:
    __break(1u);
    return result;
  }
  sub_1C2A947B8(a2, (uint64_t)v57, v32 / (double)(uint64_t)*MEMORY[0x1E4F296E8]);
  uint64_t v33 = sub_1C2A9C868();
  uint64_t v34 = *(void *)(v33 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v34 + 16))(v17, a1, v33);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(v17, 0, 1, v33);
  uint64_t v35 = sub_1C2A9C8B8();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v14, 1, 1, v35);
  sub_1C2A9C438();
  id result = (id)HKDateFormatterFromTemplate();
  id v57 = result;
  if (!result)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  id v37 = (int *)type metadata accessor for DiagramDateAxisMetricsCalculator.DateTickIntervalStrategy();
  (*(void (**)(char *, char *, uint64_t))(v55 + 32))(&a4[v37[5]], v31, v56);
  char v38 = 0;
  uint64_t v39 = 1;
LABEL_12:
  *(void *)&a4[v37[6]] = v39;
  a4[v37[7]] = 0;
  id v53 = v57;
  *(void *)&a4[v37[8]] = v57;
  *(void *)&a4[v37[9]] = v53;
  *a4 = v38;
  a4[v37[10]] = 1;
  return v53;
}

uint64_t DiagramMultiDayDateAxisMetricsCalculator.__allocating_init(boundsLabelsShouldShowDaySpan:customLabelDateFormatter:)(char a1, uint64_t a2)
{
  uint64_t result = swift_allocObject();
  uint64_t v5 = *MEMORY[0x1E4F296E8];
  if ((unint64_t)(*MEMORY[0x1E4F296E8] - 0x2000000000000000) >> 62 != 3)
  {
    __break(1u);
    goto LABEL_6;
  }
  *(double *)(result + 32) = (double)(4 * v5);
  if ((unsigned __int128)(v5 * (__int128)10) >> 64 != (10 * v5) >> 63)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  *(double *)(result + 40) = (double)(10 * v5);
  uint64_t v6 = (unsigned __int128)(v5 * (__int128)20) >> 64;
  uint64_t v7 = 20 * v5;
  if (v6 == v7 >> 63)
  {
    *(double *)(result + 48) = (double)v7;
    *(unsigned char *)(result + 16) = a1 & 1;
    *(void *)(result + 24) = a2;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t DiagramMultiDayDateAxisMetricsCalculator.init(boundsLabelsShouldShowDaySpan:customLabelDateFormatter:)(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *MEMORY[0x1E4F296E8];
  if ((unint64_t)(*MEMORY[0x1E4F296E8] - 0x2000000000000000) >> 62 != 3)
  {
    __break(1u);
    goto LABEL_6;
  }
  *(double *)(v2 + 32) = (double)(4 * v3);
  if ((unsigned __int128)(v3 * (__int128)10) >> 64 != (10 * v3) >> 63)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  *(double *)(v2 + 40) = (double)(10 * v3);
  uint64_t v4 = (unsigned __int128)(v3 * (__int128)20) >> 64;
  uint64_t v5 = 20 * v3;
  if (v4 == v5 >> 63)
  {
    *(double *)(v2 + 48) = (double)v5;
    *(unsigned char *)(v2 + 16) = result & 1;
    *(void *)(v2 + 24) = a2;
    return v2;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t DiagramMultiDayDateAxisMetricsCalculator.deinit()
{
  return v0;
}

uint64_t DiagramMultiDayDateAxisMetricsCalculator.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DiagramMultiDayDateAxisMetricsCalculator()
{
  return self;
}

void sub_1C29B4B58()
{
  qword_1EBB9F018 = 0x4014000000000000;
}

void sub_1C29B4B68()
{
  qword_1EBB9F028 = 0x4014000000000000;
}

void sub_1C29B4B78()
{
  qword_1EBB9EF48 = 0;
}

void sub_1C29B4B84()
{
  qword_1EBB9F030 = 0x4028000000000000;
}

void sub_1C29B4B94()
{
  qword_1EBB9F040 = 0x402C000000000000;
}

void sub_1C29B4BA4()
{
  qword_1EBB9F038 = 0x4030000000000000;
}

void sub_1C29B4BB4()
{
  qword_1EBB9F020 = 0x4010000000000000;
}

id sub_1C29B4BC4()
{
  uint64_t v1 = OBJC_IVAR____TtC19HealthVisualization21HighlightCalendarView____lazy_storage___ringsRenderer;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC19HealthVisualization21HighlightCalendarView____lazy_storage___ringsRenderer);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC19HealthVisualization21HighlightCalendarView____lazy_storage___ringsRenderer);
  }
  else
  {
    id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F496A8]), sel_init);
    uint64_t v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    uint64_t v2 = 0;
  }
  id v6 = v2;
  return v3;
}

id HighlightCalendarView.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void HighlightCalendarView.init(coder:)()
{
  *(void *)&v0[OBJC_IVAR____TtC19HealthVisualization21HighlightCalendarView_longWeekdayStrings] = 0;
  *(void *)&v0[OBJC_IVAR____TtC19HealthVisualization21HighlightCalendarView_shortWeekdayStrings] = 0;
  *(void *)&v0[OBJC_IVAR____TtC19HealthVisualization21HighlightCalendarView____lazy_storage___ringsRenderer] = 0;
  uint64_t v1 = MEMORY[0x1E4FBC860];
  *(void *)&v0[OBJC_IVAR____TtC19HealthVisualization21HighlightCalendarView_weekdayLabels] = MEMORY[0x1E4FBC860];
  *(void *)&v0[OBJC_IVAR____TtC19HealthVisualization21HighlightCalendarView_monthLabels] = v1;

  sub_1C2A9E628();
  __break(1u);
}

id HighlightCalendarView.__allocating_init(model:)(uint64_t a1)
{
  id v3 = objc_allocWithZone(v1);
  return HighlightCalendarView.init(model:)(a1);
}

id HighlightCalendarView.init(model:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for HighlightCalendarDayViewModel(0);
  uint64_t v32 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  char v9 = *(unsigned char *)(a1 + 24);
  uint64_t v10 = OBJC_IVAR____TtC19HealthVisualization21HighlightCalendarView_longWeekdayStrings;
  *(void *)&v1[OBJC_IVAR____TtC19HealthVisualization21HighlightCalendarView_longWeekdayStrings] = 0;
  uint64_t v11 = OBJC_IVAR____TtC19HealthVisualization21HighlightCalendarView_shortWeekdayStrings;
  *(void *)&v1[OBJC_IVAR____TtC19HealthVisualization21HighlightCalendarView_shortWeekdayStrings] = 0;
  *(void *)&v1[OBJC_IVAR____TtC19HealthVisualization21HighlightCalendarView____lazy_storage___ringsRenderer] = 0;
  uint64_t v12 = MEMORY[0x1E4FBC860];
  *(void *)&v1[OBJC_IVAR____TtC19HealthVisualization21HighlightCalendarView_weekdayLabels] = MEMORY[0x1E4FBC860];
  *(void *)&v1[OBJC_IVAR____TtC19HealthVisualization21HighlightCalendarView_monthLabels] = v12;
  *(void *)&v1[v10] = v6;
  uint64_t v13 = v1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&v1[v11] = v8;
  swift_bridgeObjectRetain();

  swift_bridgeObjectRelease();
  int64_t v14 = (objc_class *)type metadata accessor for HighlightCalendarView();
  v38.receiver = v13;
  v38.super_class = v14;
  id v15 = objc_msgSendSuper2(&v38, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  sub_1C29B52A0();
  sub_1C29B53B8();
  v36[0] = v7;
  v36[1] = v6;
  _OWORD v36[2] = v8;
  char v37 = v9;
  sub_1C29B5510(v36);
  uint64_t v35 = *(void *)(v7 + 16);
  if (v35)
  {
    uint64_t v16 = *(void *)(v7 + 32);
    uint64_t v34 = v7 + 32;
    uint64_t v17 = *(void *)(v16 + 16);
    v31[1] = v7;
    if (v17) {
      int v33 = *(unsigned __int8 *)(v16
    }
                               + ((*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80))
                               + 16);
    else {
      int v33 = 0;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v18 = 0;
    while (1)
    {
      uint64_t v19 = *(void *)(v34 + 8 * v18);
      if (v33)
      {
        swift_bridgeObjectRetain();
        uint64_t v20 = *(void *)(v19 + 16);
        if (!v20) {
          goto LABEL_19;
        }
      }
      else
      {
        v36[0] = *(void *)(v34 + 8 * v18);
        swift_bridgeObjectRetain();
        sub_1C29B5EF8(v36);
        uint64_t v20 = *(void *)(v19 + 16);
        if (!v20)
        {
LABEL_19:
          if (MEMORY[0x1E4FBC860] >> 62) {
            goto LABEL_20;
          }
          goto LABEL_15;
        }
      }
      v36[0] = MEMORY[0x1E4FBC860];
      swift_bridgeObjectRetain();
      sub_1C2A9E588();
      uint64_t v21 = v19 + ((*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80));
      uint64_t v22 = *(void *)(v32 + 72);
      do
      {
        int v24 = *(unsigned __int8 *)(v21 + 48);
        sub_1C29982C0(v21, (uint64_t)v5);
        if (v24)
        {
          id v23 = objc_allocWithZone((Class)type metadata accessor for HighlightCalendarDayView());
          sub_1C2A29C14((uint64_t)v5, 0);
        }
        else
        {
          id v25 = sub_1C29B4BC4();
          id v26 = objc_allocWithZone((Class)type metadata accessor for HighlightCalendarDayView());
          sub_1C2A29C14((uint64_t)v5, v25);
        }
        v21 += v22;
        sub_1C2A9E568();
        sub_1C2A9E598();
        sub_1C2A9E5A8();
        sub_1C2A9E578();
        --v20;
      }
      while (v20);
      unint64_t v27 = v36[0];
      swift_bridgeObjectRelease();
      if (v27 >> 62)
      {
LABEL_20:
        sub_1C29376D4(0, (unint64_t *)&qword_1EBB90D78);
        swift_bridgeObjectRetain();
        sub_1C2A9E638();
        swift_bridgeObjectRelease();
        goto LABEL_16;
      }
LABEL_15:
      swift_bridgeObjectRetain();
      sub_1C2A9E8E8();
      sub_1C29376D4(0, (unint64_t *)&qword_1EBB90D78);
LABEL_16:
      ++v18;
      swift_bridgeObjectRelease();
      sub_1C29376D4(0, (unint64_t *)&qword_1EBB90D78);
      uint64_t v28 = (void *)sub_1C2A9DE88();
      swift_bridgeObjectRelease();
      id v29 = objc_msgSend(v15, sel_addRowWithArrangedSubviews_, v28);
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();

      if (v18 == v35)
      {

        goto LABEL_21;
      }
    }
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_21:
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t type metadata accessor for HighlightCalendarView()
{
  return self;
}

uint64_t sub_1C29B52A0()
{
  swift_getObjectType();
  sub_1C2998474();
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1C2AA8230;
  uint64_t v1 = sub_1C2A9D018();
  uint64_t v2 = MEMORY[0x1E4FB1138];
  *(void *)(v0 + 32) = v1;
  *(void *)(v0 + 40) = v2;
  uint64_t v3 = sub_1C2A9D008();
  uint64_t v4 = MEMORY[0x1E4FB0F40];
  *(void *)(v0 + 48) = v3;
  *(void *)(v0 + 56) = v4;
  sub_1C2A9E268();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1C2AA6B00;
  *(void *)(v5 + 32) = v1;
  *(void *)(v5 + 40) = v2;
  sub_1C2A9E268();
  swift_unknownObjectRelease();
  return swift_bridgeObjectRelease();
}

id sub_1C29B53B8()
{
  objc_msgSend(v0, sel_setHorizontalDistribution_, 4);
  objc_msgSend(v0, sel_setHorizontalAlignment_, 3);
  if (qword_1EBB91228 != -1) {
    swift_once();
  }
  objc_msgSend(v0, sel_setRowSpacing_, *(double *)&qword_1EBB9F028);
  objc_msgSend(v0, sel_setColumnSpacing_, 1.0);
  objc_msgSend(v0, sel_setLayoutMarginsRelativeArrangement_, 1);
  if (qword_1EBB91240 != -1) {
    swift_once();
  }
  double v1 = *(double *)&qword_1EBB9EF48;
  if (qword_1EBB91220 != -1) {
    swift_once();
  }
  double v2 = *(double *)&qword_1EBB9F020;
  return objc_msgSend(v0, sel_setLayoutMargins_, v1, v1, v2);
}

void sub_1C29B5510(uint64_t *a1)
{
  double v2 = v1;
  uint64_t v3 = *a1;
  char v4 = *((unsigned char *)a1 + 24);
  id v5 = objc_msgSend(v1, sel_traitCollection);
  id v6 = objc_msgSend(v5, sel_preferredContentSizeCategory);

  LOBYTE(v5) = sub_1C2A9E228();
  if (v5)
  {
    uint64_t v7 = *(void *)&v2[OBJC_IVAR____TtC19HealthVisualization21HighlightCalendarView_shortWeekdayStrings];
    if (!v7)
    {
      uint64_t v8 = &OBJC_IVAR____TtC19HealthVisualization21HighlightCalendarView_longWeekdayStrings;
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v7 = *(void *)&v2[OBJC_IVAR____TtC19HealthVisualization21HighlightCalendarView_longWeekdayStrings];
    if (!v7)
    {
      uint64_t v8 = &OBJC_IVAR____TtC19HealthVisualization21HighlightCalendarView_shortWeekdayStrings;
LABEL_6:
      uint64_t v7 = *(void *)&v2[*v8];
      if (!v7) {
        return;
      }
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v9 = *(void *)(v7 + 16);
  if (v9)
  {
    uint64_t v31 = MEMORY[0x1E4FBC860];
    sub_1C2A9E588();
    uint64_t v10 = v7 + 40;
    do
    {
      swift_bridgeObjectRetain();
      sub_1C29B5A4C(&v30);
      swift_bridgeObjectRelease();
      v10 += 16;
      sub_1C2A9E568();
      sub_1C2A9E598();
      sub_1C2A9E5A8();
      sub_1C2A9E578();
      --v9;
    }
    while (v9);
    uint64_t v11 = v31;
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v11 = MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = OBJC_IVAR____TtC19HealthVisualization21HighlightCalendarView_weekdayLabels;
  *(void *)&v2[OBJC_IVAR____TtC19HealthVisualization21HighlightCalendarView_weekdayLabels] = v11;
  swift_bridgeObjectRelease();
  if (*(void *)&v2[v12] >> 62)
  {
    sub_1C29376D4(0, (unint64_t *)&qword_1EBB90D78);
    swift_bridgeObjectRetain();
    sub_1C2A9E638();
  }
  else
  {
    swift_bridgeObjectRetain_n();
    sub_1C2A9E8E8();
    sub_1C29376D4(0, (unint64_t *)&qword_1EBB90D78);
  }
  swift_bridgeObjectRelease();
  sub_1C29376D4(0, (unint64_t *)&qword_1EBB90D78);
  uint64_t v13 = (void *)sub_1C2A9DE88();
  swift_bridgeObjectRelease();
  id v14 = objc_msgSend(v2, sel_addRowWithArrangedSubviews_, v13);

  if (v4)
  {
    uint64_t v15 = qword_1EBB91230;
    swift_unknownObjectRetain();
    if (v15 != -1) {
      swift_once();
    }
    objc_msgSend(v14, sel_setSpacingAfter_, *(double *)&qword_1EBB9F030);
    swift_unknownObjectRelease();
    id v16 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1EB0]), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
    id v17 = objc_msgSend(self, sel_separatorColor);
    objc_msgSend(v16, sel_setBackgroundColor_, v17);

    double v18 = *MEMORY[0x1E4F4BEC8];
    HKUIOnePixel();
    LODWORD(v19) = 1148846080;
    objc_msgSend(v16, sel_setLayoutSize_withContentPriority_, v18, v20, v19);
    sub_1C296B238();
    uint64_t v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = xmmword_1C2AA7730;
    *(void *)(v21 + 32) = v16;
    sub_1C2A9DEA8();
    id v22 = v16;
    id v23 = (void *)sub_1C2A9DE88();
    swift_bridgeObjectRelease();
    id v24 = objc_msgSend(v2, sel_addRowWithArrangedSubviews_, v23);

    swift_unknownObjectRelease();
    objc_msgSend(v2, sel_setAlignment_forView_inAxis_, 0, v22, 0);

    id v14 = v24;
  }
  if (*(void *)(v3 + 16)
    && (uint64_t v25 = *(void *)(v3 + 32), *(void *)(v25 + 16))
    && (uint64_t v26 = *(void *)(type metadata accessor for HighlightCalendarDayViewModel(0) - 8),
        *(unsigned char *)(v25
                 + ((*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80))
                 + 16) == 1))
  {
    uint64_t v27 = qword_1EBB911F8;
    swift_unknownObjectRetain();
    if (v27 != -1) {
      swift_once();
    }
    uint64_t v28 = &qword_1EBB9F038;
  }
  else
  {
    uint64_t v29 = qword_1EBB91238;
    swift_unknownObjectRetain();
    if (v29 != -1) {
      swift_once();
    }
    uint64_t v28 = &qword_1EBB9F040;
  }
  objc_msgSend(v14, sel_setSpacingAfter_, *(double *)v28);
  swift_unknownObjectRelease_n();
}

id sub_1C29B5A4C@<X0>(void *a1@<X8>)
{
  id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1930]), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  uint64_t v3 = (void *)sub_1C2A9DCF8();
  objc_msgSend(v2, sel_setText_, v3);

  id v4 = objc_msgSend(self, sel_secondaryLabelColor);
  objc_msgSend(v2, sel_setTextColor_, v4);

  objc_msgSend(v2, sel_setTextAlignment_, 1);
  if (byte_1EA31EF08 != 1)
  {
    uint64_t v13 = self;
    sub_1C2A9DD28();
    uint64_t v12 = (void *)sub_1C2A9DCF8();
    swift_bridgeObjectRelease();
    id v8 = objc_msgSend(v13, sel_hk_preferredFontForTextStyle_symbolicTraits_maximumContentSizeCategory_, v12, 32770, *MEMORY[0x1E4FB27B0]);
    goto LABEL_8;
  }
  if (qword_1EBB91258 != -1) {
    swift_once();
  }
  id v5 = (void *)qword_1EBB907C8;
  sub_1C29376D4(0, (unint64_t *)&qword_1EBB90DA0);
  id v6 = v5;
  uint64_t v7 = (void *)sub_1C2A9E2D8();
  id v8 = objc_msgSend(v6, sel_objectForKey_, v7);

  if (!v8)
  {
    uint64_t v9 = self;
    sub_1C2A9DD28();
    uint64_t v10 = (void *)sub_1C2A9DCF8();
    swift_bridgeObjectRelease();
    id v8 = objc_msgSend(v9, sel_hk_preferredFontForTextStyle_symbolicTraits_maximumContentSizeCategory_, v10, 32770, *MEMORY[0x1E4FB27B0]);

    if (byte_1EA31EF08)
    {
      id v11 = (id)qword_1EBB907C8;
      uint64_t v12 = (void *)sub_1C2A9E2D8();
      objc_msgSend(v11, sel_setObject_forKey_, v8, v12);

LABEL_8:
    }
  }
  objc_msgSend(v2, sel_setFont_, v8);

  objc_msgSend(v2, sel_setAdjustsFontSizeToFitWidth_, 1);
  objc_msgSend(v2, sel_setAllowsDefaultTighteningForTruncation_, 1);
  if (qword_1EBB912A8 != -1) {
    swift_once();
  }
  double v14 = *(double *)&qword_1EBB9F080;
  double v15 = *MEMORY[0x1E4F4BEC8];
  type metadata accessor for UILayoutPriority(0);
  sub_1C2998268();
  sub_1C2A9CFF8();
  LODWORD(v16) = v18;
  id result = objc_msgSend(v2, sel_setLayoutSize_withContentPriority_, v14, v15, v16);
  *a1 = v2;
  return result;
}

uint64_t sub_1C29B5DF4(void *a1, uint64_t a2)
{
  if (a2 < 0)
  {
    uint64_t result = sub_1C2A9E618();
    __break(1u);
  }
  else
  {
    if (a2)
    {
      sub_1C29376D4(0, (unint64_t *)&qword_1EBB90D78);
      uint64_t v4 = sub_1C2A9DED8();
      uint64_t v5 = v4 & 0xFFFFFFFFFFFFFF8;
      *(void *)(v5 + 16) = a2;
      uint64_t v11 = v4;
      *(void *)(v5 + 32) = a1;
      if (a2 != 1)
      {
        *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x28) = a1;
        uint64_t v6 = a2 - 2;
        if (v6)
        {
          uint64_t v7 = (void *)(v5 + 48);
          do
          {
            *v7++ = a1;
            id v8 = a1;
            --v6;
          }
          while (v6);
        }
        id v9 = a1;
      }
    }
    else
    {
      uint64_t v11 = MEMORY[0x1E4FBC860];
    }
    sub_1C2A9DEA8();
    return v11;
  }
  return result;
}

uint64_t sub_1C29B5EF8(uint64_t *a1)
{
  id v2 = v1;
  uint64_t v3 = *a1;
  unint64_t v4 = MEMORY[0x1E4FBC860];
  unint64_t v24 = MEMORY[0x1E4FBC860];
  uint64_t v5 = *(void *)(*a1 + 16);
  if (v5)
  {
    id v23 = v1;
    uint64_t v6 = &v1[OBJC_IVAR____TtC19HealthVisualization21HighlightCalendarView_monthLabels];
    uint64_t v7 = *(void *)(type metadata accessor for HighlightCalendarDayViewModel(0) - 8);
    unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    uint64_t v9 = *(void *)(v7 + 72);
    swift_bridgeObjectRetain();
    uint64_t v10 = 0;
    uint64_t v11 = v5 - 1;
    uint64_t v12 = (void *)(v8 + v3 + 8);
    while (1)
    {
      uint64_t v13 = HIBYTE(*v12) & 0xFLL;
      if ((*v12 & 0x2000000000000000) == 0) {
        uint64_t v13 = *(v12 - 1) & 0xFFFFFFFFFFFFLL;
      }
      if (v13)
      {
        if (v10 < 1) {
          unint64_t v14 = MEMORY[0x1E4FBC860];
        }
        else {
          unint64_t v14 = sub_1C29B5DF4(objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1EB0]), sel_init), v10);
        }
        sub_1C29A7434(v14);
        id v16 = sub_1C29B6650();
        swift_beginAccess();
        id v17 = v16;
        MEMORY[0x1C8763D10]();
        if (*(void *)((*(void *)v6 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)v6 & 0xFFFFFFFFFFFFFF8)
                                                                                    + 0x18) >> 1)
          sub_1C2A9DEB8();
        sub_1C2A9DEE8();
        sub_1C2A9DEA8();
        swift_endAccess();
        id v18 = v17;
        MEMORY[0x1C8763D10]();
        if (*(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          sub_1C2A9DEB8();
        }
        sub_1C2A9DEE8();
        sub_1C2A9DEA8();

        uint64_t v10 = 0;
        if (!v11) {
          goto LABEL_18;
        }
      }
      else
      {
        if (__OFADD__(v10++, 1))
        {
          __break(1u);
          goto LABEL_32;
        }
        if (!v11)
        {
LABEL_18:
          swift_bridgeObjectRelease();
          unint64_t v4 = v24;
          id v2 = v23;
          if (v24 >> 62) {
            goto LABEL_23;
          }
LABEL_19:
          if (*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_20;
          }
LABEL_24:
          sub_1C29B6650();
          MEMORY[0x1C8763D10]();
          if (*(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            sub_1C2A9DEB8();
          }
          sub_1C2A9DEE8();
          sub_1C2A9DEA8();
          goto LABEL_29;
        }
      }
      uint64_t v12 = (void *)((char *)v12 + v9);
      --v11;
    }
  }
  uint64_t v10 = 0;
  if (!(MEMORY[0x1E4FBC860] >> 62)) {
    goto LABEL_19;
  }
LABEL_23:
  swift_bridgeObjectRetain();
  uint64_t v20 = sub_1C2A9E648();
  swift_bridgeObjectRelease();
  if (!v20) {
    goto LABEL_24;
  }
LABEL_20:
  if (v10 < 1) {
    unint64_t v19 = MEMORY[0x1E4FBC860];
  }
  else {
    unint64_t v19 = sub_1C29B5DF4(objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1EB0]), sel_init), v10);
  }
  sub_1C29A7434(v19);
LABEL_29:
  sub_1C29376D4(0, (unint64_t *)&qword_1EBB90D78);
  uint64_t v21 = (void *)sub_1C2A9DE88();
  swift_bridgeObjectRelease();
  uint64_t v12 = objc_msgSend(v2, sel_addRowWithArrangedSubviews_, v21);

  if (qword_1EBB91218 != -1) {
LABEL_32:
  }
    swift_once();
  objc_msgSend(v12, sel_setSpacingAfter_, *(double *)&qword_1EBB9F018);
  return swift_unknownObjectRelease();
}

id HighlightCalendarView.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  id v9 = objc_allocWithZone(v4);
  return objc_msgSend(v9, sel_initWithFrame_, a1, a2, a3, a4);
}

void HighlightCalendarView.init(frame:)()
{
}

id HighlightCalendarView.__allocating_init(arrangedSubviewRows:)(uint64_t a1)
{
  if (a1)
  {
    sub_1C2997990();
    id v2 = (void *)sub_1C2A9DE88();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v2 = 0;
  }
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithArrangedSubviewRows_, v2);

  return v3;
}

void HighlightCalendarView.init(arrangedSubviewRows:)()
{
}

id HighlightCalendarView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for HighlightCalendarView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t method lookup function for HighlightCalendarView(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for HighlightCalendarView);
}

uint64_t dispatch thunk of HighlightCalendarView.__allocating_init(model:)()
{
  return (*(uint64_t (**)(void))(v0 + 248))();
}

id sub_1C29B6650()
{
  id v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1930]), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v0, sel_setTextAlignment_, 1);
  double v1 = (void *)sub_1C2A9DCF8();
  objc_msgSend(v0, sel_setText_, v1);

  id v2 = objc_msgSend(self, sel_secondaryLabelColor);
  objc_msgSend(v0, sel_setTextColor_, v2);

  if (byte_1EA31EF08 != 1)
  {
    uint64_t v11 = self;
    sub_1C2A9DD28();
    uint64_t v10 = (void *)sub_1C2A9DCF8();
    swift_bridgeObjectRelease();
    id v6 = objc_msgSend(v11, sel_hk_preferredFontForTextStyle_symbolicTraits_maximumContentSizeCategory_, v10, 32770, *MEMORY[0x1E4FB27B0]);
    goto LABEL_8;
  }
  if (qword_1EBB91258 != -1) {
    swift_once();
  }
  id v3 = (void *)qword_1EBB907C8;
  sub_1C29376D4(0, (unint64_t *)&qword_1EBB90DA0);
  id v4 = v3;
  uint64_t v5 = (void *)sub_1C2A9E2D8();
  id v6 = objc_msgSend(v4, sel_objectForKey_, v5);

  if (!v6)
  {
    uint64_t v7 = self;
    sub_1C2A9DD28();
    unint64_t v8 = (void *)sub_1C2A9DCF8();
    swift_bridgeObjectRelease();
    id v6 = objc_msgSend(v7, sel_hk_preferredFontForTextStyle_symbolicTraits_maximumContentSizeCategory_, v8, 32770, *MEMORY[0x1E4FB27B0]);

    if (byte_1EA31EF08)
    {
      id v9 = (id)qword_1EBB907C8;
      uint64_t v10 = (void *)sub_1C2A9E2D8();
      objc_msgSend(v9, sel_setObject_forKey_, v6, v10);

LABEL_8:
    }
  }
  objc_msgSend(v0, sel_setFont_, v6);

  return v0;
}

void sub_1C29B6914(id *a1)
{
  unint64_t v2 = (unint64_t)a1;
  id v3 = (uint64_t *)((char *)a1 + OBJC_IVAR____TtC19HealthVisualization21HighlightCalendarView_monthLabels);
  swift_beginAccess();
  uint64_t v4 = *v3;
  uint64_t v44 = (char *)v2;
  if ((unint64_t)*v3 >> 62)
  {
    if (v4 < 0) {
      id v3 = (uint64_t *)*v3;
    }
    else {
      id v3 = (uint64_t *)(v4 & 0xFFFFFFFFFFFFFF8);
    }
    swift_bridgeObjectRetain_n();
    uint64_t v5 = sub_1C2A9E648();
    if (v5) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    if (v5)
    {
LABEL_3:
      if (v5 >= 1)
      {
        uint64_t v6 = 0;
        unint64_t v1 = v4 & 0xC000000000000001;
        uint64_t v7 = *MEMORY[0x1E4FB27B0];
        while (1)
        {
          if (v1) {
            uint64_t v10 = (uint64_t *)MEMORY[0x1C8764390](v6, v4);
          }
          else {
            uint64_t v10 = (uint64_t *)*(id *)(v4 + 8 * v6 + 32);
          }
          id v3 = v10;
          if (byte_1EA31EF08 == 1)
          {
            if (qword_1EBB91258 != -1) {
              swift_once();
            }
            uint64_t v11 = (void *)qword_1EBB907C8;
            unint64_t v2 = sub_1C29376D4(0, (unint64_t *)&qword_1EBB90DA0);
            id v12 = v11;
            uint64_t v13 = (void *)sub_1C2A9E2D8();
            id v9 = objc_msgSend(v12, sel_objectForKey_, v13);

            if (v9) {
              goto LABEL_7;
            }
            unint64_t v14 = self;
            sub_1C2A9DD28();
            double v15 = (void *)sub_1C2A9DCF8();
            swift_bridgeObjectRelease();
            id v9 = objc_msgSend(v14, sel_hk_preferredFontForTextStyle_symbolicTraits_maximumContentSizeCategory_, v15, 32770, v7);

            if ((byte_1EA31EF08 & 1) == 0) {
              goto LABEL_7;
            }
            id v16 = (id)qword_1EBB907C8;
            unint64_t v2 = sub_1C2A9E2D8();
            objc_msgSend(v16, sel_setObject_forKey_, v9, v2);
          }
          else
          {
            unint64_t v8 = self;
            sub_1C2A9DD28();
            unint64_t v2 = sub_1C2A9DCF8();
            swift_bridgeObjectRelease();
            id v9 = objc_msgSend(v8, sel_hk_preferredFontForTextStyle_symbolicTraits_maximumContentSizeCategory_, v2, 32770, v7);
          }

LABEL_7:
          ++v6;
          objc_msgSend(v3, sel_setFont_, v9);

          if (v5 == v6) {
            goto LABEL_21;
          }
        }
      }
      __break(1u);
LABEL_69:
      __break(1u);
      goto LABEL_70;
    }
  }
LABEL_21:
  swift_bridgeObjectRelease_n();
  uint64_t v43 = OBJC_IVAR____TtC19HealthVisualization21HighlightCalendarView_weekdayLabels;
  uint64_t v17 = *(void *)&v44[OBJC_IVAR____TtC19HealthVisualization21HighlightCalendarView_weekdayLabels];
  if ((unint64_t)v17 >> 62)
  {
    if (v17 < 0) {
      id v3 = *(uint64_t **)&v44[OBJC_IVAR____TtC19HealthVisualization21HighlightCalendarView_weekdayLabels];
    }
    else {
      id v3 = (uint64_t *)(v17 & 0xFFFFFFFFFFFFFF8);
    }
    swift_bridgeObjectRetain_n();
    uint64_t v5 = sub_1C2A9E648();
    if (v5) {
      goto LABEL_23;
    }
  }
  else
  {
    uint64_t v5 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    if (v5)
    {
LABEL_23:
      if (v5 < 1) {
        goto LABEL_69;
      }
      uint64_t v18 = 0;
      uint64_t v19 = *MEMORY[0x1E4FB27B0];
      do
      {
        if ((v17 & 0xC000000000000001) != 0) {
          id v23 = (id)MEMORY[0x1C8764390](v18, v17);
        }
        else {
          id v23 = *(id *)(v17 + 8 * v18 + 32);
        }
        unint64_t v24 = v23;
        if (byte_1EA31EF08 == 1)
        {
          if (qword_1EBB91258 != -1) {
            swift_once();
          }
          uint64_t v25 = (void *)qword_1EBB907C8;
          sub_1C29376D4(0, (unint64_t *)&qword_1EBB90DA0);
          id v26 = v25;
          uint64_t v27 = (void *)sub_1C2A9E2D8();
          id v22 = objc_msgSend(v26, sel_objectForKey_, v27);

          if (v22) {
            goto LABEL_27;
          }
          uint64_t v28 = self;
          sub_1C2A9DD28();
          uint64_t v29 = (void *)sub_1C2A9DCF8();
          swift_bridgeObjectRelease();
          id v22 = objc_msgSend(v28, sel_hk_preferredFontForTextStyle_symbolicTraits_maximumContentSizeCategory_, v29, 32770, v19);

          if ((byte_1EA31EF08 & 1) == 0) {
            goto LABEL_27;
          }
          id v30 = (id)qword_1EBB907C8;
          uint64_t v21 = (void *)sub_1C2A9E2D8();
          objc_msgSend(v30, sel_setObject_forKey_, v22, v21);
        }
        else
        {
          uint64_t v20 = self;
          sub_1C2A9DD28();
          uint64_t v21 = (void *)sub_1C2A9DCF8();
          swift_bridgeObjectRelease();
          id v22 = objc_msgSend(v20, sel_hk_preferredFontForTextStyle_symbolicTraits_maximumContentSizeCategory_, v21, 32770, v19);
        }

LABEL_27:
        ++v18;
        objc_msgSend(v24, sel_setFont_, v22, v43);
      }
      while (v5 != v18);
    }
  }
  swift_bridgeObjectRelease_n();
  id v31 = objc_msgSend(v44, sel_traitCollection);
  id v32 = objc_msgSend(v31, sel_preferredContentSizeCategory);

  LOBYTE(v31) = sub_1C2A9E228();
  if (v31)
  {
    id v3 = *(uint64_t **)&v44[OBJC_IVAR____TtC19HealthVisualization21HighlightCalendarView_shortWeekdayStrings];
    if (!v3)
    {
      int v33 = &OBJC_IVAR____TtC19HealthVisualization21HighlightCalendarView_longWeekdayStrings;
      goto LABEL_46;
    }
  }
  else
  {
    id v3 = *(uint64_t **)&v44[OBJC_IVAR____TtC19HealthVisualization21HighlightCalendarView_longWeekdayStrings];
    if (!v3)
    {
      int v33 = &OBJC_IVAR____TtC19HealthVisualization21HighlightCalendarView_shortWeekdayStrings;
LABEL_46:
      id v3 = *(uint64_t **)&v44[*v33];
      if (!v3) {
        return;
      }
    }
  }
  swift_bridgeObjectRetain();
  unint64_t v2 = *(void *)&v44[v43];
  if (v2 >> 62) {
    goto LABEL_64;
  }
  uint64_t v5 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v5; uint64_t v5 = sub_1C2A9E648())
  {
    unint64_t v1 = v2 & 0xC000000000000001;
    if ((v2 & 0xC000000000000001) != 0)
    {
LABEL_70:
      id v34 = (id)MEMORY[0x1C8764390](0, v2);
    }
    else
    {
      if (!*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        return;
      }
      id v34 = *(id *)(v2 + 32);
    }
    uint64_t v35 = v34;
    uint64_t v36 = v3[2];
    if (!v36)
    {
LABEL_61:
      swift_bridgeObjectRelease();

      goto LABEL_66;
    }
    unint64_t v37 = 0;
    objc_super v38 = v3 + 5;
    uint64_t v39 = v5 - 1;
    while (v37 < v3[2])
    {
      swift_bridgeObjectRetain();
      uint64_t v41 = (void *)sub_1C2A9DCF8();
      swift_bridgeObjectRelease();
      objc_msgSend(v35, sel_setText_, v41);

      if (v39 == v37) {
        goto LABEL_65;
      }
      unint64_t v42 = v37 + 1;
      if (v1)
      {
        id v40 = (id)MEMORY[0x1C8764390](v42, v2);
      }
      else
      {
        if (v42 >= *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_63;
        }
        id v40 = *(id *)(v2 + 40 + 8 * v37);
      }
      uint64_t v35 = v40;
      ++v37;
      v38 += 2;
      if (v36 == v37) {
        goto LABEL_61;
      }
    }
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    swift_bridgeObjectRetain();
  }
LABEL_65:
  swift_bridgeObjectRelease();
LABEL_66:
  swift_bridgeObjectRelease();
}

id StatisticsQueryOperation.__allocating_init(sampleType:configuration:configurationOverrides:name:queryQualityOfService:healthStore:resultHandler:)(void *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9)
{
  id v18 = objc_allocWithZone(v9);
  id v19 = sub_1C29B8F8C(a1, a2, a3, a4, a5, a6, a7, a8, a9);

  swift_release();
  return v19;
}

uint64_t sub_1C29B7160@<X0>(uint64_t a1@<X8>)
{
  swift_retain();
  sub_1C2A9C9B8();
  uint64_t result = swift_release();
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return result;
}

uint64_t sub_1C29B71C0(id *a1)
{
  id v1 = *a1;
  sub_1C29B9468(*a1);
  swift_retain();
  sub_1C2A9C9C8();
  sub_1C296FAA4(v1);
  return swift_release();
}

uint64_t sub_1C29B7250()
{
  swift_retain();
  sub_1C2A9C9B8();
  swift_release();
  return v1;
}

id sub_1C29B72A0()
{
  uint64_t v1 = qword_1EBB8F188;
  unint64_t v2 = *(void **)(v0 + qword_1EBB8F188);
  if (v2)
  {
    id v3 = *(id *)(v0 + qword_1EBB8F188);
  }
  else
  {
    id v4 = sub_1C29B7300();
    uint64_t v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    unint64_t v2 = 0;
  }
  id v6 = v2;
  return v3;
}

id sub_1C29B7300()
{
  uint64_t v1 = sub_1C2A9CF58();
  uint64_t v115 = *(void *)(v1 - 8);
  uint64_t v116 = v1;
  MEMORY[0x1F4188790](v1);
  uint64_t v113 = v2;
  uint64_t v114 = (char *)&v101 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v3);
  uint64_t v120 = (char *)&v101 - v4;
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  sub_1C29B93FC(0, (unint64_t *)&qword_1EBB92480, MEMORY[0x1E4F26E60], MEMORY[0x1E4FBB718]);
  uint64_t v111 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v112 = (uint64_t)&v101 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  unint64_t v117 = (char *)&v101 - v9;
  MEMORY[0x1F4188790](v10);
  uint64_t v124 = (uint64_t)&v101 - v11;
  MEMORY[0x1F4188790](v12);
  uint64_t v107 = (char *)&v101 - v13;
  uint64_t v110 = v14;
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v101 - v16;
  id v18 = (uint64_t (*)(uint64_t))sub_1C2A9C398();
  uint64_t v19 = *((void *)v18 - 1);
  MEMORY[0x1F4188790](v18);
  char v102 = (char *)&v101 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  id v23 = (char *)&v101 - v22;
  sub_1C29B93FC(0, &qword_1EBB91F38, (uint64_t (*)(uint64_t))type metadata accessor for StatisticsQueryConfigurationOverrides, v5);
  MEMORY[0x1F4188790](v24 - 8);
  uint64_t v108 = (uint64_t)&v101 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v26);
  uint64_t v28 = (char *)&v101 - v27;
  uint64_t v122 = sub_1C2A9C6E8();
  uint64_t v125 = *(void *)(v122 - 8);
  MEMORY[0x1F4188790](v122);
  uint64_t v109 = (char *)&v101 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v30);
  id v32 = (char *)&v101 - v31;
  MEMORY[0x1F4188790](v33);
  uint64_t v35 = (char *)&v101 - v34;
  MEMORY[0x1F4188790](v36);
  uint64_t v123 = (char *)&v101 - v37;
  _s19HealthVisualization25PresentationDateProvidingPAAE012presentationD010Foundation0D0VvgZ_0();
  unint64_t v121 = v0;
  uint64_t v106 = (uint64_t)v0 + qword_1EBB9EF88;
  sub_1C29B951C((uint64_t)v0 + qword_1EBB9EF88, (uint64_t)v28, &qword_1EBB91F38, (uint64_t (*)(uint64_t))type metadata accessor for StatisticsQueryConfigurationOverrides);
  uint64_t ConfigurationOverrides = type metadata accessor for StatisticsQueryConfigurationOverrides();
  uint64_t v39 = *(void *)(ConfigurationOverrides - 8);
  id v40 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v39 + 48);
  uint64_t v119 = (int *)ConfigurationOverrides;
  uint64_t v105 = v40;
  uint64_t v104 = v39 + 48;
  int v41 = ((uint64_t (*)(char *, uint64_t))v40)(v28, 1);
  uint64_t v118 = v18;
  if (v41 == 1)
  {
    sub_1C29B9474((uint64_t)v28, &qword_1EBB91F38, (uint64_t (*)(uint64_t))type metadata accessor for StatisticsQueryConfigurationOverrides);
    unint64_t v42 = 0;
    uint64_t v43 = v122;
    uint64_t v44 = v125;
    uint64_t v45 = (uint64_t)v117;
LABEL_7:
    uint64_t v47 = (void *)v19;
    goto LABEL_11;
  }
  sub_1C29B951C((uint64_t)v28, (uint64_t)v17, (unint64_t *)&qword_1EBB92480, MEMORY[0x1E4F26E60]);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t (*)(uint64_t)))(v19 + 48))(v17, 1, v18) == 1)
  {
    sub_1C29B9474((uint64_t)v17, (unint64_t *)&qword_1EBB92480, MEMORY[0x1E4F26E60]);
    unint64_t v42 = *(char **)&v28[v119[5]];
    uint64_t v44 = v125;
    uint64_t v45 = (uint64_t)v117;
    if (v42) {
      uint64_t v46 = v42;
    }
    sub_1C29B98C8((uint64_t)v28);
    uint64_t v43 = v122;
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t (*)(uint64_t)))(v19 + 32))(v23, v17, v18);
  uint64_t v48 = self;
  uint64_t v49 = (void *)sub_1C2A9C318();
  unint64_t v42 = (char *)objc_msgSend(v48, sel_predicateForSamplesWithinDateInterval_options_, v49, 0);

  uint64_t v103 = (void *)v19;
  (*(void (**)(char *, uint64_t (*)(uint64_t)))(v19 + 8))(v23, v18);
  uint64_t v50 = *(void **)&v28[v119[5]];
  if (v50)
  {
    sub_1C296B238();
    uint64_t v51 = swift_allocObject();
    *(_OWORD *)(v51 + 16) = xmmword_1C2AAA110;
    *(void *)(v51 + 32) = v42;
    *(void *)(v51 + 40) = v50;
    aBlock[0] = v51;
    sub_1C2A9DEA8();
    sub_1C29376D4(0, (unint64_t *)&qword_1EBB8E090);
    id v52 = v50;
    id v53 = v42;
    uint64_t v54 = (void *)sub_1C2A9DE88();
    swift_bridgeObjectRelease();
    unint64_t v42 = (char *)objc_msgSend(self, sel_andPredicateWithSubpredicates_, v54);
  }
  sub_1C29B98C8((uint64_t)v28);
  uint64_t v43 = v122;
  uint64_t v44 = v125;
  uint64_t v45 = (uint64_t)v117;
  uint64_t v47 = v103;
LABEL_11:
  uint64_t v103 = *(void **)(v44 + 16);
  ((void (*)(char *, char *, uint64_t))v103)(v35, v123, v43);
  if (!v42)
  {
    uint64_t v55 = v107;
    DateRange.dateInterval(endingAt:)(v35, *((unsigned char *)v121 + qword_1EBB8F178), (uint64_t)v107);
    uint64_t v56 = (unsigned int (*)(char *, uint64_t, uint64_t (*)(uint64_t)))v47[6];
    id v57 = v47;
    uint64_t v58 = v118;
    if (v56(v55, 1, v118) == 1)
    {
      sub_1C29B9474((uint64_t)v55, (unint64_t *)&qword_1EBB92480, MEMORY[0x1E4F26E60]);
      unint64_t v42 = 0;
    }
    else
    {
      id v59 = v102;
      ((void (*)(char *, char *, uint64_t (*)(uint64_t)))v57[4])(v102, v55, v58);
      uint64_t v107 = (char *)self;
      sub_1C2A9C378();
      uint64_t v60 = (void *)sub_1C2A9C658();
      uint64_t v61 = *(void (**)(char *, uint64_t))(v44 + 8);
      v61(v32, v122);
      sub_1C2A9C348();
      uint64_t v62 = (void *)sub_1C2A9C658();
      v61(v32, v122);
      uint64_t v44 = v125;
      uint64_t v43 = v122;
      uint64_t v63 = (char *)objc_msgSend(v107, sel_predicateForSamplesWithStartDate_endDate_options_, v60, v62, 0);

      unint64_t v42 = v63;
      uint64_t v64 = v59;
      uint64_t v45 = (uint64_t)v117;
      ((void (*)(char *, uint64_t (*)(uint64_t)))v57[1])(v64, v58);
    }
    uint64_t v47 = v57;
  }
  uint64_t v107 = v42;
  uint64_t v65 = *(void (**)(char *, uint64_t))(v44 + 8);
  uint64_t v125 = v44 + 8;
  v65(v35, v43);
  unint64_t v66 = (char *)v121 + qword_1EBB8F178;
  uint64_t v67 = *(void *)((char *)v121 + qword_1EBB8F178 + 8);
  uint64_t v68 = *(void *)(v67 + 16);
  if (v68)
  {
    swift_bridgeObjectRetain();
    uint64_t v69 = 0;
    uint64_t v70 = 0;
    while (2)
    {
      uint64_t v71 = *(unsigned __int8 *)(v67 + v70++ + 32);
      switch(v71)
      {
        case 1:
          if ((v69 & 4) == 0)
          {
            uint64_t v72 = 4;
            goto LABEL_18;
          }
          goto LABEL_19;
        case 2:
          if ((v69 & 8) == 0)
          {
            uint64_t v72 = 8;
            goto LABEL_18;
          }
          goto LABEL_19;
        case 3:
          if ((v69 & 0x10) == 0)
          {
            uint64_t v72 = 16;
            goto LABEL_18;
          }
          goto LABEL_19;
        case 4:
          if ((v69 & 0x20) == 0)
          {
            uint64_t v72 = 32;
            goto LABEL_18;
          }
          goto LABEL_19;
        case 5:
          if ((v69 & 0x40) == 0)
          {
            uint64_t v72 = 64;
            goto LABEL_18;
          }
          goto LABEL_19;
        case 6:
          uint64_t v72 = _HKStatisticOptionsAverageSampleDuration();
          goto LABEL_36;
        case 7:
          uint64_t v72 = _HKStatisticsOptionPresence();
          goto LABEL_36;
        case 8:
          uint64_t v72 = _HKStatisticsOptionBaselineRelativeQuantities();
          goto LABEL_36;
        case 9:
          uint64_t v73 = _HKStatisticsOptionAttenuateSamples();
          if ((v73 & 0xFFFFFFFFFFFFFFFDLL) == 0) {
            goto LABEL_38;
          }
          uint64_t v72 = v73 | 2;
LABEL_36:
          if ((v72 & ~v69) == 0) {
            goto LABEL_19;
          }
          goto LABEL_18;
        default:
LABEL_38:
          if ((v69 & 2) != 0) {
            goto LABEL_19;
          }
          uint64_t v72 = 2;
LABEL_18:
          v69 |= v72;
LABEL_19:
          if (v68 != v70) {
            continue;
          }
          swift_bridgeObjectRelease();
          break;
      }
      break;
    }
  }
  else
  {
    uint64_t v69 = 0;
  }
  uint64_t v74 = v108;
  sub_1C29B951C(v106, v108, &qword_1EBB91F38, (uint64_t (*)(uint64_t))type metadata accessor for StatisticsQueryConfigurationOverrides);
  int v75 = v105(v74, 1, v119);
  uint64_t v76 = v118;
  uint64_t v77 = v109;
  if (v75 == 1)
  {
    sub_1C29B9474(v74, &qword_1EBB91F38, (uint64_t (*)(uint64_t))type metadata accessor for StatisticsQueryConfigurationOverrides);
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t)))v47[7])(v45, 1, 1, v76);
  }
  else
  {
    sub_1C29B951C(v74, v45, (unint64_t *)&qword_1EBB92480, MEMORY[0x1E4F26E60]);
    sub_1C29B98C8(v74);
  }
  ((void (*)(char *, char *, uint64_t))v103)(v77, v123, v43);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t (*)(uint64_t)))v47[6])(v45, 1, v76) == 1)
  {
    DateRange.dateInterval(endingAt:)(v77, *v66, v124);
    v65(v77, v43);
    sub_1C29B9474(v45, (unint64_t *)&qword_1EBB92480, MEMORY[0x1E4F26E60]);
  }
  else
  {
    v65(v77, v43);
    uint64_t v78 = v124;
    ((void (*)(uint64_t, uint64_t, uint64_t (*)(uint64_t)))v47[4])(v124, v45, v76);
    ((void (*)(uint64_t, void, uint64_t, uint64_t (*)(uint64_t)))v47[7])(v78, 0, 1, v76);
  }
  uint64_t v119 = (int *)v65;
  if (qword_1EBB92338 != -1) {
    swift_once();
  }
  id v79 = (id)qword_1EBB91C60;
  uint64_t v80 = v121;
  uint64_t v81 = v120;
  sub_1C2A9CF48();
  unint64_t v117 = *(char **)((char *)v80 + qword_1EBB8F170);
  uint64_t v118 = v80;
  uint64_t v82 = swift_allocObject();
  swift_unknownObjectWeakInit();
  double v83 = v114;
  uint64_t v84 = v115;
  uint64_t v85 = v116;
  (*(void (**)(char *, char *, uint64_t))(v115 + 16))(v114, v81, v116);
  unint64_t v121 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F26E60];
  uint64_t v86 = v112;
  sub_1C29B951C(v124, v112, (unint64_t *)&qword_1EBB92480, MEMORY[0x1E4F26E60]);
  unint64_t v87 = (*(unsigned __int8 *)(v84 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v84 + 80);
  unint64_t v88 = (v113 + *(unsigned __int8 *)(v111 + 80) + v87) & ~(unint64_t)*(unsigned __int8 *)(v111 + 80);
  unint64_t v89 = (v110 + v88 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v90 = swift_allocObject();
  uint64_t v91 = v83;
  uint64_t v92 = v85;
  (*(void (**)(unint64_t, char *, uint64_t))(v84 + 32))(v90 + v87, v91, v85);
  sub_1C296FACC(v86, v90 + v88);
  *(void *)(v90 + v89) = v82;
  id v93 = objc_allocWithZone(MEMORY[0x1E4F2B5D0]);
  aBlock[4] = sub_1C29B9780;
  aBlock[5] = v90;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1C29B8EEC;
  aBlock[3] = &block_descriptor_2;
  uint64_t v94 = _Block_copy(aBlock);
  swift_retain();
  uint64_t v95 = v107;
  id v96 = objc_msgSend(v93, sel_initWithSampleType_samplePredicate_options_completionHandler_, v117, v107, v69, v94);
  _Block_release(v94);
  swift_release();
  swift_release();
  id v97 = v96;
  uint64_t v98 = v118;
  id v99 = objc_msgSend(v118, sel_name);
  objc_msgSend(v97, sel_setDebugIdentifier_, v99);

  objc_msgSend(v97, sel_setQualityOfService_, *(void *)((char *)v98 + qword_1EBB9EF80));
  (*(void (**)(char *, uint64_t))(v84 + 8))(v120, v92);
  sub_1C29B9474(v124, (unint64_t *)&qword_1EBB92480, v121);
  ((void (*)(char *, uint64_t))v119)(v123, v122);
  return v97;
}

id StatisticsQueryOperation.init(sampleType:configuration:configurationOverrides:name:queryQualityOfService:healthStore:resultHandler:)(void *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9)
{
  id v11 = sub_1C29B8F8C(a1, a2, a3, a4, a5, a6, a7, a8, a9);

  swift_release();
  return v11;
}

uint64_t sub_1C29B820C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1C2A9CF58();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = &v25[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1C2962438();
  uint64_t v6 = (void *)swift_allocError();
  *uint64_t v7 = 2;
  uint64_t v26 = v6;
  char v27 = 1;
  swift_retain();
  sub_1C2A9C9C8();

  swift_release();
  uint64_t v8 = *(void **)&v0[qword_1EBB8F170];
  id v9 = objc_msgSend(v8, sel_identifier);
  uint64_t v10 = sub_1C2A9DD28();
  uint64_t v12 = v11;

  v13._uint64_t countAndFlagsBits = 0x676E696E6E7572;
  v13._uint64_t object = (void *)0xE700000000000000;
  v14._uint64_t countAndFlagsBits = v10;
  v14._uint64_t object = v12;
  NSOperation.logLifeCycleEvent(_:withPrivateInfo:)(v13, v14);
  swift_bridgeObjectRelease();
  if (qword_1EBB92338 != -1) {
    swift_once();
  }
  id v15 = (id)qword_1EBB91C60;
  uint64_t v16 = v1;
  sub_1C2A9CF48();
  sub_1C2A9E1B8();
  sub_1C29624A4();
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_1C2AA6B00;
  id v18 = objc_msgSend(v8, sel_identifier);
  uint64_t v19 = sub_1C2A9DD28();
  uint64_t v21 = v20;

  *(void *)(v17 + 56) = MEMORY[0x1E4FBB1A0];
  *(void *)(v17 + 64) = sub_1C296250C();
  *(void *)(v17 + 32) = v19;
  *(void *)(v17 + 40) = v21;
  sub_1C2A9CF28();
  swift_bridgeObjectRelease();
  uint64_t v22 = *(void **)&v16[qword_1EBB9EF70];
  id v23 = sub_1C29B72A0();
  objc_msgSend(v22, sel_executeQuery_, v23);

  return (*(uint64_t (**)(unsigned char *, uint64_t))(v3 + 8))(v5, v2);
}

void sub_1C29B8500(void *a1)
{
  id v1 = a1;
  sub_1C29B820C();
}

void sub_1C29B8548()
{
  id v1 = v0;
  if (objc_msgSend(v0, sel_isCancelled))
  {
    sub_1C2962438();
    uint64_t v2 = (void *)swift_allocError();
    *uint64_t v3 = 3;
    MEMORY[0x1F4188790](v2);
    swift_retain();
    sub_1C2A9C9C8();

    swift_release();
    id v4 = objc_msgSend(*(id *)&v0[qword_1EBB8F170], sel_identifier);
    uint64_t v5 = sub_1C2A9DD28();
    uint64_t v7 = v6;

    v8._uint64_t countAndFlagsBits = 0x656C6C65636E6163;
    v8._uint64_t object = (void *)0xE900000000000064;
    v9._uint64_t countAndFlagsBits = v5;
    v9._uint64_t object = v7;
    NSOperation.logLifeCycleEvent(_:withPrivateInfo:)(v8, v9);
    swift_bridgeObjectRelease();
  }
  uint64_t v10 = *(void **)&v1[qword_1EBB9EF70];
  id v11 = sub_1C29B72A0();
  objc_msgSend(v10, sel_stopQuery_, v11);
}

id StatisticsQueryOperation.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

void StatisticsQueryOperation.init()()
{
}

void sub_1C29B8724()
{
}

void sub_1C29B8754()
{
  swift_release();

  swift_bridgeObjectRelease();
  sub_1C29B9474(v0 + qword_1EBB9EF88, &qword_1EBB91F38, (uint64_t (*)(uint64_t))type metadata accessor for StatisticsQueryConfigurationOverrides);

  swift_release();
  id v1 = *(void **)(v0 + qword_1EBB8F188);
}

id StatisticsQueryOperation.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for StatisticsQueryOperation();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void sub_1C29B8840(uint64_t a1)
{
  swift_release();

  swift_bridgeObjectRelease();
  sub_1C29B9474(a1 + qword_1EBB9EF88, &qword_1EBB91F38, (uint64_t (*)(uint64_t))type metadata accessor for StatisticsQueryConfigurationOverrides);

  swift_release();
  objc_super v2 = *(void **)(a1 + qword_1EBB8F188);
}

uint64_t sub_1C29B8900@<X0>(uint64_t a1@<X8>)
{
  swift_retain();
  sub_1C2A9C9B8();
  uint64_t result = swift_release();
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return result;
}

void sub_1C29B8960(uint64_t a1, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v41 = a3;
  unint64_t v42 = a2;
  sub_1C29B93FC(0, (unint64_t *)&qword_1EBB92480, MEMORY[0x1E4F26E60], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v40 - v9;
  uint64_t v11 = a6 + 16;
  sub_1C2A9E1A8();
  if (qword_1EBB92338 != -1) {
    swift_once();
  }
  sub_1C29624A4();
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_1C2AA6B00;
  sub_1C29B951C(a5, (uint64_t)v10, (unint64_t *)&qword_1EBB92480, MEMORY[0x1E4F26E60]);
  uint64_t v13 = sub_1C2A9C398();
  uint64_t v14 = *(void *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v10, 1, v13) == 1)
  {
    sub_1C29B9474((uint64_t)v10, (unint64_t *)&qword_1EBB92480, MEMORY[0x1E4F26E60]);
    uint64_t countAndFlagsBits = 0;
    uint64_t object = 0;
  }
  else
  {
    Swift::String v17 = DateInterval.stringWithISO8601Format()();
    uint64_t countAndFlagsBits = v17._countAndFlagsBits;
    uint64_t object = v17._object;
    (*(void (**)(char *, uint64_t))(v14 + 8))(v10, v13);
  }
  *(void *)(v12 + 56) = MEMORY[0x1E4FBB1A0];
  *(void *)(v12 + 64) = sub_1C296250C();
  uint64_t v18 = 0x3E656E6F6E3CLL;
  if (object) {
    uint64_t v18 = countAndFlagsBits;
  }
  unint64_t v19 = 0xE600000000000000;
  if (object) {
    unint64_t v19 = (unint64_t)object;
  }
  *(void *)(v12 + 32) = v18;
  *(void *)(v12 + 40) = v19;
  sub_1C2A9CF28();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v20 = (char *)MEMORY[0x1C87657D0](v11);
  if (v20)
  {
    uint64_t v21 = v20;
    if ((objc_msgSend(v20, sel_isCancelled) & 1) != 0
      || (objc_msgSend(v21, sel_isFinished) & 1) != 0)
    {
      v22._uint64_t countAndFlagsBits = 0xD00000000000002DLL;
      v22._uint64_t object = (void *)0x80000001C2AB6030;
      v23._uint64_t countAndFlagsBits = 0;
      v23._uint64_t object = (void *)0xE000000000000000;
      NSOperation.logLifeCycleEvent(_:withPrivateInfo:)(v22, v23);
    }
    else
    {
      uint64_t v24 = v42;
      uint64_t v25 = v42;
      if (!v42)
      {
        uint64_t v26 = (void *)v41;
        if (v41) {
          uint64_t v27 = 0xD00000000000001FLL;
        }
        else {
          uint64_t v27 = 0;
        }
        if (v41) {
          uint64_t v28 = 0x80000001C2AB8400;
        }
        else {
          uint64_t v28 = 0;
        }
        if (v41) {
          unint64_t v29 = v41 | 0x8000000000000000;
        }
        else {
          unint64_t v29 = 0xC000000000000000;
        }
        sub_1C296291C();
        uint64_t v30 = (void *)swift_allocError();
        *uint64_t v31 = v27;
        v31[1] = v28;
        void v31[2] = v29;
        swift_getErrorValue();
        id v32 = v26;
        sub_1C2962970(v27, v28, v29);
        v33._uint64_t countAndFlagsBits = sub_1C2A9E938();
        v34._uint64_t countAndFlagsBits = 0;
        v34._uint64_t object = (void *)0xE000000000000000;
        NSOperation.logErrorString(_:withInfo:)(v33, v34);
        swift_bridgeObjectRelease();

        uint64_t v25 = (void *)swift_allocError();
        *uint64_t v35 = v27;
        v35[1] = v28;
        v35[2] = v29;
        uint64_t v24 = v42;
      }
      BOOL v36 = v24 == 0;
      uint64_t v37 = *(void (**)(void *, BOOL))&v21[qword_1EBB9EF78];
      id v38 = v24;
      swift_retain();
      v37(v25, v36);
      uint64_t v39 = swift_release();
      MEMORY[0x1F4188790](v39);
      sub_1C2A9CA08();

      sub_1C296FAA4(v25);
    }
  }
}

uint64_t sub_1C29B8DFC(uint64_t a1, void *a2)
{
  sub_1C29B9468(a2);
  swift_retain();
  sub_1C2A9C9C8();
  sub_1C296FAA4(a2);
  swift_release();
  id v4 = objc_msgSend(*(id *)(a1 + qword_1EBB8F170), sel_identifier);
  uint64_t v5 = sub_1C2A9DD28();
  uint64_t v7 = v6;

  v8._uint64_t countAndFlagsBits = 0x64656873696E6966;
  v8._uint64_t object = (void *)0xE800000000000000;
  v9._uint64_t countAndFlagsBits = v5;
  v9._uint64_t object = v7;
  NSOperation.logLifeCycleEvent(_:withPrivateInfo:)(v8, v9);
  return swift_bridgeObjectRelease();
}

void sub_1C29B8EEC(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v7 = *(void (**)(id, void *, void *))(a1 + 32);
  swift_retain();
  id v10 = a2;
  id v8 = a3;
  id v9 = a4;
  v7(v10, a3, a4);
  swift_release();
}

id sub_1C29B8F8C(void *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9)
{
  char v27 = *a2;
  uint64_t v13 = *((void *)a2 + 1);
  __int16 v14 = *((_WORD *)a2 + 8);
  uint64_t v15 = qword_1EBB8F180;
  sub_1C2962438();
  uint64_t v16 = swift_allocError();
  *Swift::String v17 = 0;
  uint64_t v32 = v16;
  char v33 = 1;
  sub_1C29B93FC(0, &qword_1EBB8E8C8, (uint64_t (*)(uint64_t))sub_1C29B998C, MEMORY[0x1E4F674D8]);
  swift_allocObject();
  uint64_t v18 = v9;
  *(void *)&v9[v15] = sub_1C2A9C9F8();
  *(void *)&v18[qword_1EBB8F188] = 0;
  *(void *)&v18[qword_1EBB8F170] = a1;
  unint64_t v19 = &v18[qword_1EBB8F178];
  *unint64_t v19 = v27;
  *((void *)v19 + 1) = v13;
  *((_WORD *)v19 + 8) = v14;
  sub_1C29B951C(a3, (uint64_t)&v18[qword_1EBB9EF88], &qword_1EBB91F38, (uint64_t (*)(uint64_t))type metadata accessor for StatisticsQueryConfigurationOverrides);
  *(void *)&v18[qword_1EBB9EF80] = a6;
  *(void *)&v18[qword_1EBB9EF70] = a7;
  uint64_t v20 = &v18[qword_1EBB9EF78];
  *(void *)uint64_t v20 = a8;
  *((void *)v20 + 1) = a9;
  id v21 = a1;
  id v22 = a7;
  swift_retain();

  v31.receiver = v18;
  v31.super_class = (Class)type metadata accessor for StatisticsQueryOperation();
  id v23 = objc_msgSendSuper2(&v31, sel_init);
  id v24 = v23;
  if (a5)
  {
    uint64_t v25 = (void *)sub_1C2A9DCF8();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v25 = 0;
  }
  objc_msgSend(v23, sel_setName_, v25);

  sub_1C29B9474(a3, &qword_1EBB91F38, (uint64_t (*)(uint64_t))type metadata accessor for StatisticsQueryConfigurationOverrides);
  return v23;
}

uint64_t type metadata accessor for StatisticsQueryOperation()
{
  uint64_t result = qword_1EBB8F190;
  if (!qword_1EBB8F190) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1C29B9234()
{
  sub_1C29B93FC(319, &qword_1EBB91F38, (uint64_t (*)(uint64_t))type metadata accessor for StatisticsQueryConfigurationOverrides, MEMORY[0x1E4FBB718]);
  if (v0 <= 0x3F) {
    swift_initClassMetadata2();
  }
}

uint64_t method lookup function for StatisticsQueryOperation(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for StatisticsQueryOperation);
}

uint64_t dispatch thunk of StatisticsQueryOperation.result.getter()
{
  return (*(uint64_t (**)(void))(class metadata base offset for StatisticsQueryOperation
                              + (*MEMORY[0x1E4FBC8C8] & *v0)
                              + 88))();
}

uint64_t dispatch thunk of StatisticsQueryOperation.__allocating_init(sampleType:configuration:configurationOverrides:name:queryQualityOfService:healthStore:resultHandler:)()
{
  return (*(uint64_t (**)(void))(class metadata base offset for StatisticsQueryOperation + v0 + 136))();
}

void sub_1C29B93FC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_1C29B9460()
{
  return type metadata accessor for StatisticsQueryOperation();
}

id sub_1C29B9468(id a1)
{
  return a1;
}

uint64_t sub_1C29B9474(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  sub_1C29B93FC(0, a2, a3, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_1C29B94E4()
{
  swift_unknownObjectWeakDestroy();
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1C29B951C(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  sub_1C29B93FC(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t sub_1C29B959C()
{
  uint64_t v1 = sub_1C2A9CF58();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  sub_1C29B93FC(0, (unint64_t *)&qword_1EBB92480, MEMORY[0x1E4F26E60], MEMORY[0x1E4FBB718]);
  uint64_t v7 = *(unsigned __int8 *)(*(void *)(v6 - 8) + 80);
  uint64_t v8 = (v5 + v7) & ~v7;
  uint64_t v9 = *(void *)(*(void *)(v6 - 8) + 64);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  uint64_t v10 = sub_1C2A9C398();
  uint64_t v11 = *(void *)(v10 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v0 + v8, 1, v10)) {
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v0 + v8, v10);
  }
  swift_release();
  return MEMORY[0x1F4186498](v0, ((v9 + v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v3 | v7 | 7);
}

void sub_1C29B9780(uint64_t a1, void *a2, unint64_t a3)
{
  uint64_t v7 = *(void *)(sub_1C2A9CF58() - 8);
  unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  unint64_t v9 = v8 + *(void *)(v7 + 64);
  sub_1C29B93FC(0, (unint64_t *)&qword_1EBB92480, MEMORY[0x1E4F26E60], MEMORY[0x1E4FBB718]);
  uint64_t v11 = *(void *)(v10 - 8);
  unint64_t v12 = (v9 + *(unsigned __int8 *)(v11 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v13 = *(void *)(v3 + ((*(void *)(v11 + 64) + v12 + 7) & 0xFFFFFFFFFFFFFFF8));
  sub_1C29B8960(a1, a2, a3, v3 + v8, v3 + v12, v13);
}

uint64_t sub_1C29B98C8(uint64_t a1)
{
  uint64_t ConfigurationOverrides = type metadata accessor for StatisticsQueryConfigurationOverrides();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(ConfigurationOverrides - 8) + 8))(a1, ConfigurationOverrides);
  return a1;
}

uint64_t sub_1C29B9924()
{
  return sub_1C29B8DFC(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

id sub_1C29B9930(uint64_t a1)
{
  uint64_t v3 = *(void **)(v1 + 16);
  char v4 = *(unsigned char *)(v1 + 24);
  sub_1C296FAA4(*(id *)a1);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return sub_1C29B9468(v3);
}

void sub_1C29B998C()
{
  if (!qword_1EBB8FA38)
  {
    sub_1C29376D4(255, &qword_1EBB8F868);
    sub_1C29415E4(255, (unint64_t *)&qword_1EBB92210);
    unint64_t v0 = sub_1C2A9E9F8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EBB8FA38);
    }
  }
}

id HKObjectType.supplementaryLabelConfiguration.getter@<X0>(char *a1@<X8>)
{
  id result = objc_msgSend(v1, sel_code);
  char v4 = 1;
  switch((unint64_t)result)
  {
    case 0uLL:
    case 1uLL:
    case 2uLL:
    case 3uLL:
    case 4uLL:
    case 5uLL:
    case 0xEuLL:
    case 0xFuLL:
    case 0x12uLL:
    case 0x13uLL:
    case 0x3AuLL:
    case 0x3DuLL:
    case 0x3EuLL:
    case 0x47uLL:
    case 0x48uLL:
    case 0x49uLL:
    case 0x59uLL:
    case 0x5AuLL:
    case 0x72uLL:
    case 0x76uLL:
    case 0x89uLL:
    case 0x8BuLL:
    case 0xB6uLL:
    case 0xC3uLL:
    case 0xC4uLL:
    case 0xEDuLL:
    case 0x102uLL:
    case 0x103uLL:
    case 0x104uLL:
    case 0x10AuLL:
    case 0x10EuLL:
    case 0x110uLL:
    case 0x112uLL:
    case 0x115uLL:
    case 0x118uLL:
    case 0x119uLL:
    case 0x11AuLL:
    case 0x11BuLL:
    case 0x11EuLL:
    case 0x12DuLL:
    case 0x12EuLL:
    case 0x12FuLL:
      char v4 = 0;
      break;
    case 0xF8uLL:
    case 0xF9uLL:
      break;
    default:
      char v4 = 2;
      break;
  }
  *a1 = v4;
  return result;
}

id HKObjectType.swiftChartDiagramConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  id result = objc_msgSend(v1, sel_code);
  switch((unint64_t)result)
  {
    case 0uLL:
    case 1uLL:
    case 3uLL:
    case 4uLL:
    case 7uLL:
    case 8uLL:
    case 9uLL:
    case 0xAuLL:
    case 0xCuLL:
    case 0xDuLL:
    case 0xEuLL:
    case 0x13uLL:
    case 0x14uLL:
    case 0x15uLL:
    case 0x16uLL:
    case 0x17uLL:
    case 0x18uLL:
    case 0x19uLL:
    case 0x1AuLL:
    case 0x1BuLL:
    case 0x1CuLL:
    case 0x1DuLL:
    case 0x1EuLL:
    case 0x1FuLL:
    case 0x20uLL:
    case 0x21uLL:
    case 0x22uLL:
    case 0x23uLL:
    case 0x24uLL:
    case 0x25uLL:
    case 0x26uLL:
    case 0x27uLL:
    case 0x28uLL:
    case 0x29uLL:
    case 0x2AuLL:
    case 0x2BuLL:
    case 0x2CuLL:
    case 0x2DuLL:
    case 0x2EuLL:
    case 0x2FuLL:
    case 0x30uLL:
    case 0x31uLL:
    case 0x32uLL:
    case 0x33uLL:
    case 0x34uLL:
    case 0x35uLL:
    case 0x36uLL:
    case 0x37uLL:
    case 0x38uLL:
    case 0x39uLL:
    case 0x3AuLL:
    case 0x3CuLL:
    case 0x3DuLL:
    case 0x3EuLL:
    case 0x3FuLL:
    case 0x46uLL:
    case 0x47uLL:
    case 0x48uLL:
    case 0x49uLL:
    case 0x4BuLL:
    case 0x4EuLL:
    case 0x4FuLL:
    case 0x53uLL:
    case 0x57uLL:
    case 0x5AuLL:
    case 0x63uLL:
    case 0x65uLL:
    case 0x6EuLL:
    case 0x6FuLL:
    case 0x71uLL:
    case 0x72uLL:
    case 0x76uLL:
    case 0x7DuLL:
    case 0x89uLL:
    case 0x8AuLL:
    case 0x8BuLL:
    case 0xACuLL:
    case 0xADuLL:
    case 0xB3uLL:
    case 0xB6uLL:
    case 0xB7uLL:
    case 0xBAuLL:
    case 0xBBuLL:
    case 0xBCuLL:
    case 0xBDuLL:
    case 0xC2uLL:
    case 0xC3uLL:
    case 0xC4uLL:
    case 0xFBuLL:
    case 0x100uLL:
    case 0x102uLL:
    case 0x103uLL:
    case 0x104uLL:
    case 0x10AuLL:
    case 0x10EuLL:
    case 0x110uLL:
    case 0x112uLL:
    case 0x117uLL:
    case 0x118uLL:
    case 0x119uLL:
    case 0x11AuLL:
    case 0x11BuLL:
    case 0x11EuLL:
    case 0x126uLL:
    case 0x127uLL:
    case 0x128uLL:
    case 0x129uLL:
    case 0x12DuLL:
    case 0x12EuLL:
    case 0x12FuLL:
      long long v4 = xmmword_1C2AAA1C0;
      goto LABEL_3;
    case 5uLL:
    case 0xFuLL:
    case 0x10DuLL:
    case 0x115uLL:
      long long v4 = xmmword_1C2AAA1B0;
LABEL_3:
      *(_OWORD *)a1 = v4;
      uint64_t v5 = 5;
      goto LABEL_4;
    case 0x7CuLL:
      *(_OWORD *)a1 = xmmword_1C2AAA1A0;
      uint64_t v5 = 4;
LABEL_4:
      *(void *)(a1 + 16) = v5;
      *(_WORD *)(a1 + 24) = 0;
      break;
    default:
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
      *(_WORD *)(a1 + 24) = 256;
      break;
  }
  return result;
}

ValueMetadata *type metadata accessor for SharedDiagrams()
{
  return &type metadata for SharedDiagrams;
}

void sub_1C29BAE84()
{
  qword_1EBB8FBE8 = 0x4037000000000000;
}

uint64_t sub_1C29BAE94(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess();
  *(void *)(v3 + 16) = v2;
  swift_retain();
  return swift_release();
}

uint64_t sub_1C29BAEF4()
{
  return swift_retain();
}

uint64_t sub_1C29BAF2C(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 16) = a1;
  return swift_release();
}

uint64_t (*sub_1C29BAF74())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_1C29BAFC8(uint64_t a1, void *a2)
{
  sub_1C29BB114();
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C29CE868(a1, (uint64_t)v6, (uint64_t (*)(void))sub_1C29BB114);
  uint64_t v7 = *a2 + OBJC_IVAR____TtCV19HealthVisualization26ActivitySummarySnidgetView9ViewModel_currentValueViewModel;
  swift_beginAccess();
  sub_1C29C5994((uint64_t)v6, v7, (uint64_t (*)(void))sub_1C29BB114);
  return swift_endAccess();
}

uint64_t sub_1C29BB0AC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtCV19HealthVisualization26ActivitySummarySnidgetView9ViewModel_currentValueViewModel;
  swift_beginAccess();
  return sub_1C29CE868(v3, a1, (uint64_t (*)(void))sub_1C29BB114);
}

void sub_1C29BB114()
{
  if (!qword_1EBB91448)
  {
    type metadata accessor for ActivitySnidgetCurrentValueVisualizationView(255);
    sub_1C29C71F0(&qword_1EBB91538, (void (*)(uint64_t))type metadata accessor for ActivitySnidgetCurrentValueVisualizationView);
    unint64_t v0 = sub_1C2A9CC68();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EBB91448);
    }
  }
}

uint64_t type metadata accessor for ActivitySnidgetCurrentValueVisualizationView(uint64_t a1)
{
  return sub_1C296F4B8(a1, qword_1EBB91548);
}

uint64_t sub_1C29BB1C8(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtCV19HealthVisualization26ActivitySummarySnidgetView9ViewModel_currentValueViewModel;
  swift_beginAccess();
  sub_1C29C5994(a1, v3, (uint64_t (*)(void))sub_1C29BB114);
  return swift_endAccess();
}

uint64_t (*sub_1C29BB238())()
{
  return j__swift_endAccess;
}

uint64_t ActivitySummarySnidgetView.ViewModel.__allocating_init(headerModel:currentValueViewModel:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  sub_1C29CE800(a2, v4 + OBJC_IVAR____TtCV19HealthVisualization26ActivitySummarySnidgetView9ViewModel_currentValueViewModel, (uint64_t (*)(void))sub_1C29BB114);
  return v4;
}

uint64_t ActivitySummarySnidgetView.ViewModel.init(headerModel:currentValueViewModel:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  sub_1C29CE800(a2, v2 + OBJC_IVAR____TtCV19HealthVisualization26ActivitySummarySnidgetView9ViewModel_currentValueViewModel, (uint64_t (*)(void))sub_1C29BB114);
  return v2;
}

uint64_t sub_1C29BB34C()
{
  if (*v0) {
    return 0xD000000000000015;
  }
  else {
    return 0x6F4D726564616568;
  }
}

uint64_t sub_1C29BB394@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1C29CDF44(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1C29BB3BC(uint64_t a1)
{
  unint64_t v2 = sub_1C29BB7CC();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1C29BB3F8(uint64_t a1)
{
  unint64_t v2 = sub_1C29BB7CC();
  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t ActivitySummarySnidgetView.ViewModel.deinit()
{
  swift_release();
  sub_1C29CE8D0(v0 + OBJC_IVAR____TtCV19HealthVisualization26ActivitySummarySnidgetView9ViewModel_currentValueViewModel, (uint64_t (*)(void))sub_1C29BB114);
  return v0;
}

uint64_t ActivitySummarySnidgetView.ViewModel.__deallocating_deinit()
{
  swift_release();
  sub_1C29CE8D0(v0 + OBJC_IVAR____TtCV19HealthVisualization26ActivitySummarySnidgetView9ViewModel_currentValueViewModel, (uint64_t (*)(void))sub_1C29BB114);
  return swift_deallocClassInstance();
}

uint64_t sub_1C29BB4F8(void *a1)
{
  uint64_t v3 = v1;
  sub_1C29BB114();
  uint64_t v15 = v5;
  MEMORY[0x1F4188790](v5);
  uint64_t v16 = (uint64_t)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C29C5AA4(0, &qword_1EBB8FFE0, (uint64_t (*)(void))sub_1C29BB7CC, (uint64_t)&type metadata for ActivitySummarySnidgetView.ViewModel.CodingKeys, MEMORY[0x1E4FBBDE0]);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v15 - v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1C29BB7CC();
  sub_1C2A9EA18();
  swift_beginAccess();
  uint64_t v17 = *(void *)(v3 + 16);
  char v18 = 0;
  sub_1C2A9CC98();
  sub_1C29C71F0(&qword_1EBB8FDE8, MEMORY[0x1E4F66518]);
  sub_1C2A9E868();
  if (!v2)
  {
    uint64_t v12 = v3 + OBJC_IVAR____TtCV19HealthVisualization26ActivitySummarySnidgetView9ViewModel_currentValueViewModel;
    swift_beginAccess();
    uint64_t v13 = v16;
    sub_1C29CE868(v12, v16, (uint64_t (*)(void))sub_1C29BB114);
    char v18 = 1;
    sub_1C29BBBD0(&qword_1EBB8FDE0);
    sub_1C2A9E868();
    sub_1C29CE8D0(v13, (uint64_t (*)(void))sub_1C29BB114);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

unint64_t sub_1C29BB7CC()
{
  unint64_t result = qword_1EBB91680;
  if (!qword_1EBB91680)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB91680);
  }
  return result;
}

uint64_t type metadata accessor for ActivitySnidgetCurrentValueVisualizationView.ViewModel(uint64_t a1)
{
  return sub_1C296F4B8(a1, qword_1EBB91480);
}

uint64_t ActivitySummarySnidgetView.ViewModel.__allocating_init(from:)(uint64_t a1)
{
  return sub_1C29BC408(a1, (void (*)(uint64_t))ActivitySummarySnidgetView.ViewModel.init(from:));
}

uint64_t ActivitySummarySnidgetView.ViewModel.init(from:)(void *a1)
{
  sub_1C29BB114();
  MEMORY[0x1F4188790](v3);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C29C5AA4(0, &qword_1EBB8FD88, (uint64_t (*)(void))sub_1C29BB7CC, (uint64_t)&type metadata for ActivitySummarySnidgetView.ViewModel.CodingKeys, MEMORY[0x1E4FBBDC0]);
  uint64_t v17 = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v17 - v8;
  uint64_t v10 = a1[3];
  char v18 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v10);
  sub_1C29BB7CC();
  sub_1C2A9EA08();
  if (v1)
  {
    uint64_t v15 = v19;
    uint64_t v13 = (uint64_t)v18;
    type metadata accessor for ActivitySummarySnidgetView.ViewModel(0);
    swift_deallocPartialClassInstance();
    uint64_t v16 = v13;
  }
  else
  {
    uint64_t v11 = (uint64_t)v5;
    sub_1C2A9CC98();
    char v21 = 0;
    sub_1C29C71F0(&qword_1EBB8FBB0, MEMORY[0x1E4F66518]);
    uint64_t v12 = v17;
    sub_1C2A9E7A8();
    uint64_t v15 = v19;
    *(void *)(v19 + 16) = v22;
    char v20 = 1;
    sub_1C29BBBD0(&qword_1EBB8FBA0);
    sub_1C2A9E7A8();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v12);
    sub_1C29CE800(v11, v15 + OBJC_IVAR____TtCV19HealthVisualization26ActivitySummarySnidgetView9ViewModel_currentValueViewModel, (uint64_t (*)(void))sub_1C29BB114);
    uint64_t v16 = (uint64_t)v18;
  }
  __swift_destroy_boxed_opaque_existential_1(v16);
  return v15;
}

uint64_t type metadata accessor for ActivitySummarySnidgetView.ViewModel(uint64_t a1)
{
  return sub_1C296F4B8(a1, (uint64_t *)&unk_1EBB916B0);
}

uint64_t sub_1C29BBBD0(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1C29BB114();
    sub_1C29C71F0(&qword_1EBB91478, (void (*)(uint64_t))type metadata accessor for ActivitySnidgetCurrentValueVisualizationView.ViewModel);
    sub_1C29C71F0(&qword_1EBB91470, (void (*)(uint64_t))type metadata accessor for ActivitySnidgetCurrentValueVisualizationView.ViewModel);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1C29BBC98@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for ActivitySummarySnidgetView.ViewModel(0);
  uint64_t result = sub_1C2A9D408();
  *a1 = result;
  return result;
}

uint64_t sub_1C29BBCD8()
{
  return sub_1C2A9CC58();
}

uint64_t sub_1C29BBD50()
{
  return sub_1C2A9CC48();
}

uint64_t sub_1C29BBDA0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1C29BC834(a1, (void (*)(void))type metadata accessor for ActivitySummarySnidgetView.ViewModel, (uint64_t (*)(uint64_t))ActivitySummarySnidgetView.ViewModel.init(from:), a2);
}

uint64_t sub_1C29BBDE0(void *a1)
{
  return sub_1C29BB4F8(a1);
}

uint64_t ActivitySummarySnidgetView.ActionHandlerData.__allocating_init(relevantDateInterval:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  uint64_t v3 = v2 + OBJC_IVAR____TtCV19HealthVisualization26ActivitySummarySnidgetView17ActionHandlerData_relevantDateInterval;
  uint64_t v4 = sub_1C2A9C998();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  swift_beginAccess();
  sub_1C29C5994(a1, v3, (uint64_t (*)(void))sub_1C29BBF90);
  swift_endAccess();
  return v2;
}

uint64_t ActivitySummarySnidgetView.ActionHandlerData.init(relevantDateInterval:)(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtCV19HealthVisualization26ActivitySummarySnidgetView17ActionHandlerData_relevantDateInterval;
  uint64_t v4 = sub_1C2A9C998();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  swift_beginAccess();
  sub_1C29C5994(a1, v3, (uint64_t (*)(void))sub_1C29BBF90);
  swift_endAccess();
  return v1;
}

void sub_1C29BBF90(uint64_t a1)
{
}

unint64_t sub_1C29BBFC4()
{
  return 0xD000000000000014;
}

uint64_t sub_1C29BBFE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1C29CE04C(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1C29BC00C(uint64_t a1)
{
  unint64_t v2 = sub_1C29BC388();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1C29BC048(uint64_t a1)
{
  unint64_t v2 = sub_1C29BC388();
  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t ActivitySummarySnidgetView.ActionHandlerData.deinit()
{
  sub_1C29CE8D0(v0 + OBJC_IVAR____TtCV19HealthVisualization26ActivitySummarySnidgetView17ActionHandlerData_relevantDateInterval, (uint64_t (*)(void))sub_1C29BBF90);
  return v0;
}

uint64_t ActivitySummarySnidgetView.ActionHandlerData.__deallocating_deinit()
{
  sub_1C29CE8D0(v0 + OBJC_IVAR____TtCV19HealthVisualization26ActivitySummarySnidgetView17ActionHandlerData_relevantDateInterval, (uint64_t (*)(void))sub_1C29BBF90);
  return swift_deallocClassInstance();
}

uint64_t sub_1C29BC138(void *a1)
{
  uint64_t v2 = v1;
  sub_1C29BBF90(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C29C5AA4(0, &qword_1EBB8FFE8, (uint64_t (*)(void))sub_1C29BC388, (uint64_t)&type metadata for ActivitySummarySnidgetView.ActionHandlerData.CodingKeys, MEMORY[0x1E4FBBDE0]);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v14 - v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1C29BC388();
  sub_1C2A9EA18();
  uint64_t v12 = v2 + OBJC_IVAR____TtCV19HealthVisualization26ActivitySummarySnidgetView17ActionHandlerData_relevantDateInterval;
  swift_beginAccess();
  sub_1C29CE868(v12, (uint64_t)v6, (uint64_t (*)(void))sub_1C29BBF90);
  sub_1C2A9C998();
  sub_1C29C71F0(&qword_1EBB8FDD8, MEMORY[0x1E4F672E8]);
  sub_1C2A9E818();
  sub_1C29CE8D0((uint64_t)v6, (uint64_t (*)(void))sub_1C29BBF90);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

unint64_t sub_1C29BC388()
{
  unint64_t result = qword_1EBB917E0;
  if (!qword_1EBB917E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBB917E0);
  }
  return result;
}

uint64_t ActivitySummarySnidgetView.ActionHandlerData.__allocating_init(from:)(uint64_t a1)
{
  return sub_1C29BC408(a1, (void (*)(uint64_t))ActivitySummarySnidgetView.ActionHandlerData.init(from:));
}

uint64_t sub_1C29BC408(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v4 = swift_allocObject();
  a2(a1);
  return v4;
}

uint64_t ActivitySummarySnidgetView.ActionHandlerData.init(from:)(void *a1)
{
  sub_1C29BBF90(0);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v15 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C29C5AA4(0, &qword_1EBB8FD90, (uint64_t (*)(void))sub_1C29BC388, (uint64_t)&type metadata for ActivitySummarySnidgetView.ActionHandlerData.CodingKeys, MEMORY[0x1E4FBBDC0]);
  uint64_t v16 = v5;
  uint64_t v14 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v14 - v6;
  uint64_t v8 = v1 + OBJC_IVAR____TtCV19HealthVisualization26ActivitySummarySnidgetView17ActionHandlerData_relevantDateInterval;
  uint64_t v9 = sub_1C2A9C998();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1C29BC388();
  uint64_t v10 = v17;
  sub_1C2A9EA08();
  if (v10)
  {
    swift_release();
  }
  else
  {
    uint64_t v11 = v14;
    sub_1C29C71F0(&qword_1EBB8FB80, MEMORY[0x1E4F672E8]);
    uint64_t v12 = (uint64_t)v15;
    sub_1C2A9E758();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v7, v16);
    swift_beginAccess();
    sub_1C29C5994(v12, v8, (uint64_t (*)(void))sub_1C29BBF90);
    swift_endAccess();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v1;
}

uint64_t sub_1C29BC72C()
{
  return sub_1C2A9CC58();
}

uint64_t sub_1C29BC7A4()
{
  return sub_1C2A9CC48();
}

uint64_t sub_1C29BC7F4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1C29BC834(a1, (void (*)(void))type metadata accessor for ActivitySummarySnidgetView.ActionHandlerData, (uint64_t (*)(uint64_t))ActivitySummarySnidgetView.ActionHandlerData.init(from:), a2);
}

uint64_t sub_1C29BC834@<X0>(uint64_t a1@<X0>, void (*a2)(void)@<X3>, uint64_t (*a3)(uint64_t)@<X4>, uint64_t *a4@<X8>)
{
  a2(0);
  uint64_t v8 = swift_allocObject();
  uint64_t result = a3(a1);
  if (!v4) {
    *a4 = v8;
  }
  return result;
}

uint64_t sub_1C29BC8A4(void *a1)
{
  return sub_1C29BC138(a1);
}

void sub_1C29BC8C8()
{
  uint64_t v107 = *v0;
  uint64_t v1 = (void *)sub_1C2A9CFE8();
  uint64_t v121 = *(v1 - 1);
  id v122 = v1;
  MEMORY[0x1F4188790](v1);
  uint64_t v112 = (char *)&v92 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v3);
  uint64_t v120 = (char *)&v92 - v4;
  uint64_t v5 = sub_1C2A9CD08();
  uint64_t v116 = *(void *)(v5 - 8);
  uint64_t v117 = v5;
  MEMORY[0x1F4188790](v5);
  uint64_t v114 = (char *)&v92 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v113 = sub_1C2A9CCE8();
  uint64_t v115 = *(void *)(v113 - 8);
  MEMORY[0x1F4188790](v113);
  uint64_t v118 = (char *)&v92 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v110 = sub_1C2A9CAB8();
  MEMORY[0x1F4188790](v110);
  uint64_t v109 = (char *)&v92 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v106 = sub_1C2A9C398();
  uint64_t v105 = *(void *)(v106 - 8);
  MEMORY[0x1F4188790](v106);
  uint64_t v104 = (char *)&v92 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C29BBF90(0);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v111 = (char *)&v92 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C29CE930(0, &qword_1EBB92520, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v108 = (char *)&v92 - v13;
  sub_1C29BD838(0);
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v16 = (char *)&v92 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_1C2A9CDB8();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  char v20 = (char *)&v92 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  id v23 = (char *)&v92 - v22;
  MEMORY[0x1F4188790](v24);
  uint64_t v26 = (char *)&v92 - v25;
  MEMORY[0x1F4188790](v27);
  unint64_t v29 = (char *)&v92 - v28;
  MEMORY[0x1F4188790](v30);
  uint64_t v32 = (char *)&v92 - v31;
  char v33 = v0;
  sub_1C2A9CD18();
  uint64_t v34 = v17;
  uint64_t v119 = sub_1C2A9CD98();
  unint64_t v36 = v35;
  id v38 = *(void (**)(char *, uint64_t))(v18 + 8);
  uint64_t v37 = v18 + 8;
  uint64_t v39 = v32;
  uint64_t v40 = v38;
  v38(v39, v34);
  if (v36 >> 60 == 15)
  {
    unint64_t v41 = v120;
    sub_1C2A9CF98();
    unint64_t v42 = sub_1C2A9CFC8();
    os_log_type_t v43 = sub_1C2A9E0A8();
    if (os_log_type_enabled(v42, v43))
    {
      uint64_t v44 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v44 = 0;
      _os_log_impl(&dword_1C292A000, v42, v43, "ActivitySummarySnidgetView.ActionHandler: unable to read object type", v44, 2u);
      MEMORY[0x1C87656F0](v44, -1, -1);
    }

    (*(void (**)(char *, id))(v121 + 8))(v41, v122);
  }
  else
  {
    id v97 = v16;
    id v99 = v29;
    uint64_t v100 = v26;
    uint64_t v98 = v23;
    uint64_t v101 = v40;
    id v96 = v20;
    uint64_t v102 = v37;
    uint64_t v103 = v34;
    sub_1C2A9C2B8();
    swift_allocObject();
    sub_1C2A9C2A8();
    type metadata accessor for ActivitySummarySnidgetView.ActionHandlerData(0);
    sub_1C29C71F0(&qword_1EBB917F8, (void (*)(uint64_t))type metadata accessor for ActivitySummarySnidgetView.ActionHandlerData);
    sub_1C2A9C298();
    id v93 = 0;
    unint64_t v92 = v36;
    swift_release();
    uint64_t v120 = v124;
    uint64_t v45 = v99;
    sub_1C2A9CD18();
    sub_1C2A9CD88();
    uint64_t v46 = v45;
    uint64_t v47 = v103;
    uint64_t v48 = v101;
    v101(v46, v103);
    uint64_t v49 = (void *)sub_1C2A9CBE8();
    swift_release();
    id v50 = objc_msgSend(v49, sel_profileIdentifier);

    uint64_t v51 = v100;
    uint64_t v95 = v33;
    sub_1C2A9CD18();
    sub_1C2A9CD88();
    v48(v51, v47);
    uint64_t v52 = (uint64_t)v97;
    sub_1C2A9CBF8();
    swift_release();
    uint64_t v53 = sub_1C2A9CAF8();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v53 - 8) + 56))(v52, 0, 1, v53);
    int v94 = sub_1C2A9CBB8();
    unsigned int v54 = v94;

    sub_1C29CE8D0(v52, (uint64_t (*)(void))sub_1C29BD838);
    uint64_t v55 = 0;
    if (v54 <= 1)
    {
      uint64_t v56 = (uint64_t)&v120[OBJC_IVAR____TtCV19HealthVisualization26ActivitySummarySnidgetView17ActionHandlerData_relevantDateInterval];
      swift_beginAccess();
      id v57 = v111;
      sub_1C29CE868(v56, (uint64_t)v111, (uint64_t (*)(void))sub_1C29BBF90);
      uint64_t v58 = sub_1C2A9C998();
      if ((*(unsigned int (**)(id, uint64_t, uint64_t))(*(void *)(v58 - 8) + 48))(v57, 1, v58))
      {
        sub_1C29CE8D0((uint64_t)v57, (uint64_t (*)(void))sub_1C29BBF90);
        uint64_t v59 = sub_1C2A9C6E8();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v59 - 8) + 56))(v108, 1, 1, v59);
      }
      else
      {
        uint64_t v60 = v104;
        sub_1C2A9C988();
        uint64_t v61 = v108;
        sub_1C2A9C348();
        (*(void (**)(char *, uint64_t))(v105 + 8))(v60, v106);
        sub_1C29CE8D0((uint64_t)v57, (uint64_t (*)(void))sub_1C29BBF90);
        uint64_t v62 = sub_1C2A9C6E8();
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v62 - 8) + 56))(v61, 0, 1, v62);
      }
      sub_1C2A9CAE8();
      uint64_t v124 = (char *)MEMORY[0x1E4FBC860];
      sub_1C29C71F0(&qword_1EBB8FB88, MEMORY[0x1E4F66230]);
      sub_1C29C55B8(0);
      sub_1C29C71F0(&qword_1EBB8FD78, sub_1C29C55B8);
      sub_1C2A9E3A8();
      uint64_t v55 = (void *)sub_1C2A9CAD8();
    }
    sub_1C2A9CCD8();
    id v63 = objc_msgSend(self, sel_activitySummaryType);
    uint64_t v64 = v99;
    sub_1C2A9CD18();
    sub_1C2A9CD88();
    uint64_t v65 = v103;
    unint64_t v66 = v101;
    v101(v64, v103);
    sub_1C2A9CBD8();
    swift_release();
    uint64_t v67 = v100;
    sub_1C2A9CD18();
    sub_1C2A9CD88();
    v66(v67, v65);
    sub_1C2A9CBE8();
    swift_release();
    uint64_t v68 = v98;
    sub_1C2A9CD18();
    sub_1C2A9CD88();
    v66(v68, v65);
    sub_1C2A9CC08();
    swift_release();
    uint64_t v111 = v55;
    uint64_t v69 = v114;
    sub_1C2A9CCF8();
    uint64_t v70 = v63;
    uint64_t v71 = v118;
    uint64_t v72 = v93;
    uint64_t v73 = (void *)sub_1C2A9CCC8();
    uint64_t v75 = v116;
    uint64_t v74 = v117;
    if (v72)
    {

      (*(void (**)(char *, uint64_t))(v75 + 8))(v69, v74);
      (*(void (**)(char *, uint64_t))(v115 + 8))(v71, v113);
      uint64_t v76 = v112;
      sub_1C2A9CFB8();
      id v77 = v72;
      id v78 = v72;
      id v79 = sub_1C2A9CFC8();
      os_log_type_t v80 = sub_1C2A9E0A8();
      if (os_log_type_enabled(v79, v80))
      {
        uint64_t v81 = swift_slowAlloc();
        uint64_t v82 = swift_slowAlloc();
        uint64_t v124 = (char *)v82;
        *(_DWORD *)uint64_t v81 = 136315394;
        uint64_t v83 = sub_1C2A9EA58();
        uint64_t v123 = sub_1C2957168(v83, v84, (uint64_t *)&v124);
        sub_1C2A9E358();
        swift_bridgeObjectRelease();
        *(_WORD *)(v81 + 12) = 2080;
        uint64_t v123 = (uint64_t)v72;
        id v85 = v72;
        sub_1C2969188();
        uint64_t v86 = sub_1C2A9DD58();
        uint64_t v123 = sub_1C2957168(v86, v87, (uint64_t *)&v124);
        sub_1C2A9E358();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1C292A000, v79, v80, "[%s]: Error creating activity detail vc: %s", (uint8_t *)v81, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1C87656F0](v82, -1, -1);
        MEMORY[0x1C87656F0](v81, -1, -1);
        sub_1C29B349C(v119, v92);

        swift_release();
      }
      else
      {

        sub_1C29B349C(v119, v92);
        swift_release();
      }
      (*(void (**)(char *, id))(v121 + 8))(v76, v122);
    }
    else
    {
      id v122 = v73;

      (*(void (**)(char *, uint64_t))(v75 + 8))(v69, v74);
      (*(void (**)(char *, uint64_t))(v115 + 8))(v71, v113);
      unint64_t v88 = v96;
      sub_1C2A9CD18();
      unint64_t v89 = (void *)sub_1C2A9CDA8();
      v66(v88, v65);
      id v90 = objc_msgSend(v89, sel_navigationController);

      if (v90)
      {
        id v91 = v122;
        objc_msgSend(v90, sel_pushViewController_animated_, v122, 1);

        sub_1C29B349C(v119, v92);
        swift_release();
      }
      else
      {

        sub_1C29B349C(v119, v92);
        swift_release();
      }
    }
  }
}

void sub_1C29BD838(uint64_t a1)
{
}

uint64_t ActivitySummarySnidgetView.ActionHandler.__allocating_init(content:)(uint64_t a1)
{
  uint64_t v2 = sub_1C2A9CDB8();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  uint64_t v6 = sub_1C2A9CD28();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  return v6;
}

uint64_t ActivitySummarySnidgetView.ActionHandler.init(content:)(uint64_t a1)
{
  uint64_t v2 = sub_1C2A9CDB8();
  uint64_t v3 = *(void *)(v2 - 8);
  __n128 v4 = MEMORY[0x1F4188790](v2);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v3 + 16))((char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v4);
  uint64_t v6 = sub_1C2A9CD28();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  return v6;
}

uint64_t ActivitySummarySnidgetView.ActionHandler.__deallocating_deinit()
{
  _s19HealthVisualization26ActivitySummarySnidgetViewV13ActionHandlerCfd_0();
  return swift_deallocClassInstance();
}

uint64_t ActivitySummarySnidgetView.actionHandlerContent.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1C29CE868(v1, a1, (uint64_t (*)(void))sub_1C29C55EC);
}

uint64_t ActivitySummarySnidgetView.actionHandlerContent.setter(uint64_t a1)
{
  return sub_1C29C5994(a1, v1, (uint64_t (*)(void))sub_1C29C55EC);
}

uint64_t (*ActivitySummarySnidgetView.actionHandlerContent.modify())()
{
  return nullsub_1;
}

uint64_t ActivitySummarySnidgetView.previousViewModel.getter()
{
  type metadata accessor for ActivitySummarySnidgetView(0);
  return swift_retain();
}

uint64_t ActivitySummarySnidgetView.previousViewModel.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for ActivitySummarySnidgetView(0) + 28);
  uint64_t result = swift_release();
  *(void *)(v1 + v3) = a1;
  return result;
}

uint64_t (*ActivitySummarySnidgetView.previousViewModel.modify())(void)
{
  return nullsub_1;
}

uint64_t ActivitySummarySnidgetView.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_1C2A9CDB8();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(a2, 1, 1, v4);
  uint64_t v5 = (int *)type metadata accessor for ActivitySummarySnidgetView(0);
  uint64_t v6 = v5[7];
  *(void *)(a2 + v6) = 0;
  sub_1C29CE930(0, &qword_1EBB8FAF0, type metadata accessor for ActivitySummarySnidgetView.ViewModel, MEMORY[0x1E4F66310]);
  uint64_t v8 = v7;
  uint64_t v9 = sub_1C2A9CB58();
  uint64_t v10 = (uint64_t *)(a2 + v5[5]);
  *uint64_t v10 = v9;
  v10[1] = v11;
  sub_1C2A9CB28();
  uint64_t v12 = (uint64_t *)(a2 + v5[6]);
  type metadata accessor for ActivitySummarySnidgetView.ViewModel(0);
  sub_1C29C71F0(&qword_1EBB8FBD8, (void (*)(uint64_t))type metadata accessor for ActivitySummarySnidgetView.ViewModel);
  *uint64_t v12 = sub_1C2A9D588();
  v12[1] = v13;
  sub_1C2A9CB38();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(a1, v8);
  uint64_t result = swift_release();
  *(void *)(a2 + v6) = v15;
  return result;
}

uint64_t ActivitySummarySnidgetView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v24 = a1;
  uint64_t v2 = sub_1C2A9D818();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C29C5640();
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C29C5850();
  uint64_t v10 = v9;
  uint64_t v11 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C29C5904(0);
  uint64_t v23 = v14;
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v8 = sub_1C2A9D738();
  *((void *)v8 + 1) = 0;
  v8[16] = 0;
  sub_1C29CE794(0, &qword_1EBB8FCB8, sub_1C29C56D4);
  sub_1C29BE164(v1, &v8[*(int *)(v17 + 44)]);
  sub_1C2A9D808();
  sub_1C29C71F0(&qword_1EBB8FD30, (void (*)(uint64_t))sub_1C29C5640);
  sub_1C2A9DA88();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  sub_1C29CE8D0((uint64_t)v8, (uint64_t (*)(void))sub_1C29C5640);
  sub_1C2A9C8E8();
  sub_1C2A9DBA8();
  sub_1C2A9D5E8();
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v16, v13, v10);
  uint64_t v18 = &v16[*(int *)(v23 + 36)];
  long long v19 = v30;
  *((_OWORD *)v18 + 4) = v29;
  *((_OWORD *)v18 + 5) = v19;
  *((_OWORD *)v18 + 6) = v31;
  long long v20 = v26;
  *(_OWORD *)uint64_t v18 = v25;
  *((_OWORD *)v18 + 1) = v20;
  long long v21 = v28;
  *((_OWORD *)v18 + 2) = v27;
  *((_OWORD *)v18 + 3) = v21;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return sub_1C29CE800((uint64_t)v16, v24, (uint64_t (*)(void))sub_1C29C5904);
}

uint64_t sub_1C29BE164@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  id v63 = a2;
  sub_1C29CE930(0, &qword_1EBB8FB08, (uint64_t (*)(uint64_t))sub_1C29BB114, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v58 = (uint64_t)&v53 - v4;
  sub_1C29BB114();
  uint64_t v59 = v5;
  uint64_t v57 = *((void *)v5 - 1);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1C29CE930(0, &qword_1EBB8FB00, (uint64_t (*)(uint64_t))sub_1C29BB114, MEMORY[0x1E4F66310]);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v56 = (char *)&v53 - v9;
  sub_1C29C57BC();
  uint64_t v62 = v10;
  uint64_t v60 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v67 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v55 = (char *)&v53 - v13;
  MEMORY[0x1F4188790](v14);
  uint64_t v64 = (char *)&v53 - v15;
  uint64_t v66 = sub_1C2A9CCB8();
  uint64_t v61 = *(void *)(v66 - 8);
  MEMORY[0x1F4188790](v66);
  uint64_t v65 = (char *)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  long long v19 = (char *)&v53 - v18;
  uint64_t v20 = type metadata accessor for ActivitySummarySnidgetView(0);
  uint64_t v21 = *(void *)(a1 + *(int *)(v20 + 24) + 8);
  swift_beginAccess();
  swift_retain();
  uint64_t v22 = v19;
  sub_1C2A9CCA8();
  if (qword_1EBB8FBF0 != -1) {
    swift_once();
  }
  uint64_t v23 = qword_1EBB8FBE8;
  uint64_t v24 = sub_1C2A9DBA8();
  uint64_t v52 = v23;
  uint64_t v25 = 1;
  sub_1C29BE7F4(0.0, 1, 0.0, 1, 0.0, 1, 0.0, 1, (uint64_t)v76, 0.0, 1, INFINITY, 0, v24, v26, v52, 0);
  uint64_t v27 = v21 + OBJC_IVAR____TtCV19HealthVisualization26ActivitySummarySnidgetView9ViewModel_currentValueViewModel;
  swift_beginAccess();
  sub_1C29CE868(v27, (uint64_t)v7, (uint64_t (*)(void))sub_1C29BB114);
  uint64_t v28 = *(void *)(a1 + *(int *)(v20 + 28));
  if (v28)
  {
    uint64_t v29 = v28 + OBJC_IVAR____TtCV19HealthVisualization26ActivitySummarySnidgetView9ViewModel_currentValueViewModel;
    swift_beginAccess();
    uint64_t v30 = v58;
    sub_1C29CE868(v29, v58, (uint64_t (*)(void))sub_1C29BB114);
    uint64_t v25 = 0;
  }
  else
  {
    uint64_t v30 = v58;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, void (*)(char *, char *, uint64_t)))(v57 + 56))(v30, v25, 1, v59);
  swift_bridgeObjectRetain();
  sub_1C2A9CB48();
  type metadata accessor for ActivitySnidgetCurrentValueVisualizationView(0);
  sub_1C29C71F0(&qword_1EBB91538, (void (*)(uint64_t))type metadata accessor for ActivitySnidgetCurrentValueVisualizationView);
  long long v31 = v55;
  sub_1C2A9CC88();
  uint64_t v32 = v60;
  char v33 = v64;
  uint64_t v34 = v62;
  (*(void (**)(char *, char *, uint64_t))(v60 + 32))(v64, v31, v62);
  uint64_t v35 = v61;
  uint64_t v59 = *(void (**)(char *, char *, uint64_t))(v61 + 16);
  unint64_t v36 = v65;
  unsigned int v54 = v22;
  v59(v65, v22, v66);
  long long v72 = v76[4];
  long long v73 = v76[5];
  long long v74 = v76[6];
  long long v75 = v76[7];
  long long v68 = v76[0];
  long long v69 = v76[1];
  long long v70 = v76[2];
  long long v71 = v76[3];
  uint64_t v37 = *(void (**)(char *, char *, uint64_t))(v32 + 16);
  v37(v67, v33, v34);
  id v38 = v63;
  uint64_t v39 = v36;
  uint64_t v40 = v66;
  v59(v63, v39, v66);
  sub_1C29C5708();
  unint64_t v42 = &v38[*(int *)(v41 + 48)];
  long long v43 = v73;
  *((_OWORD *)v42 + 4) = v72;
  *((_OWORD *)v42 + 5) = v43;
  long long v44 = v75;
  *((_OWORD *)v42 + 6) = v74;
  *((_OWORD *)v42 + 7) = v44;
  long long v45 = v69;
  *(_OWORD *)unint64_t v42 = v68;
  *((_OWORD *)v42 + 1) = v45;
  long long v46 = v71;
  *((_OWORD *)v42 + 2) = v70;
  *((_OWORD *)v42 + 3) = v46;
  uint64_t v47 = &v38[*(int *)(v41 + 64)];
  uint64_t v48 = v67;
  v37(v47, v67, v34);
  uint64_t v49 = *(void (**)(char *, uint64_t))(v32 + 8);
  v49(v64, v34);
  id v50 = *(void (**)(char *, uint64_t))(v35 + 8);
  v50(v54, v40);
  v49(v48, v34);
  return ((uint64_t (*)(char *, uint64_t))v50)(v65, v40);
}

__n128 sub_1C29BE7F4@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  char v18 = a17;
  if (a2) {
    a1 = -INFINITY;
  }
  if (a4) {
    a3 = a1;
  }
  if (a6) {
    a5 = a3;
  }
  if (a1 > a3 || a3 > a5) {
    goto LABEL_22;
  }
  if (a8) {
    a7 = -INFINITY;
  }
  if (a11) {
    a10 = a7;
  }
  if (a13) {
    a12 = a10;
  }
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    sub_1C2A9E0B8();
    uint64_t v27 = (void *)sub_1C2A9D848();
    sub_1C2A9CF18();

    char v18 = a17;
  }
  sub_1C2A9D5E8();
  *(void *)a9 = a16;
  *(unsigned char *)(a9 + 8) = v18 & 1;
  *(_OWORD *)(a9 + 80) = v33;
  *(_OWORD *)(a9 + 96) = v34;
  *(_OWORD *)(a9 + 112) = v35;
  *(_OWORD *)(a9 + 16) = v29;
  *(_OWORD *)(a9 + 32) = v30;
  __n128 result = v32;
  *(_OWORD *)(a9 + 48) = v31;
  *(__n128 *)(a9 + 64) = v32;
  return result;
}

uint64_t sub_1C29BE9A4@<X0>(uint64_t a1@<X8>)
{
  return sub_1C29CE868(v1, a1, (uint64_t (*)(void))sub_1C29C55EC);
}

uint64_t sub_1C29BE9D8(uint64_t a1)
{
  return sub_1C29C5994(a1, v1, (uint64_t (*)(void))sub_1C29C55EC);
}

uint64_t (*sub_1C29BEA08())()
{
  return nullsub_1;
}

uint64_t ActivitySnidgetCurrentValueVisualizationView.viewModel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for ActivitySnidgetCurrentValueVisualizationView(0);
  return sub_1C29CE868(v1 + *(int *)(v3 + 20), a1, type metadata accessor for ActivitySnidgetCurrentValueVisualizationView.ViewModel);
}