BOOL AWDMETRICSBwpStatsReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v7;
  char v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  int v15;
  unint64_t v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  BOOL v24;
  int *v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  char v35;

  v3 = (int *)MEMORY[0x263F62298];
  v4 = (int *)MEMORY[0x263F62288];
  v5 = (int *)MEMORY[0x263F62270];
  if (*(void *)(a2 + (int)*MEMORY[0x263F62298]) < *(void *)(a2 + (int)*MEMORY[0x263F62288]))
  {
    v7 = (int *)MEMORY[0x263F62268];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      v8 = 0;
      v9 = 0;
      v10 = 0;
      while (1)
      {
        v11 = *v3;
        v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          v10 = 0;
          v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      v17 = v10 >> 3;
      if ((v10 >> 3) == 9)
      {
        v26 = 0;
        v27 = 0;
        v20 = 0;
        *(unsigned char *)(a1 + 20) |= 1u;
        while (1)
        {
          v28 = *v3;
          v29 = *(void *)(a2 + v28);
          if (v29 == -1 || v29 >= *(void *)(a2 + *v4)) {
            break;
          }
          v30 = *(unsigned char *)(*(void *)(a2 + *v7) + v29);
          *(void *)(a2 + v28) = v29 + 1;
          v20 |= (unint64_t)(v30 & 0x7F) << v26;
          if ((v30 & 0x80) == 0)
          {
            v25 = &OBJC_IVAR___AWDMETRICSBwpStats__bandwidth;
            goto LABEL_48;
          }
          v26 += 7;
          v24 = v27++ > 8;
          if (v24)
          {
            LODWORD(v20) = 0;
            v25 = &OBJC_IVAR___AWDMETRICSBwpStats__bandwidth;
            goto LABEL_50;
          }
        }
        v25 = &OBJC_IVAR___AWDMETRICSBwpStats__bandwidth;
LABEL_47:
        *(unsigned char *)(a2 + *v5) = 1;
        goto LABEL_48;
      }
      if (v17 == 4) {
        break;
      }
      if (v17 == 3)
      {
        v18 = 0;
        v19 = 0;
        v20 = 0;
        *(unsigned char *)(a1 + 20) |= 4u;
        while (1)
        {
          v21 = *v3;
          v22 = *(void *)(a2 + v21);
          if (v22 == -1 || v22 >= *(void *)(a2 + *v4))
          {
            v25 = &OBJC_IVAR___AWDMETRICSBwpStats__scsSpacing;
            goto LABEL_47;
          }
          v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
          *(void *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0) {
            break;
          }
          v18 += 7;
          v24 = v19++ > 8;
          if (v24)
          {
            LODWORD(v20) = 0;
            v25 = &OBJC_IVAR___AWDMETRICSBwpStats__scsSpacing;
            goto LABEL_50;
          }
        }
        v25 = &OBJC_IVAR___AWDMETRICSBwpStats__scsSpacing;
        goto LABEL_48;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_51:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    v31 = 0;
    v32 = 0;
    v20 = 0;
    *(unsigned char *)(a1 + 20) |= 2u;
    while (1)
    {
      v33 = *v3;
      v34 = *(void *)(a2 + v33);
      if (v34 == -1 || v34 >= *(void *)(a2 + *v4))
      {
        v25 = &OBJC_IVAR___AWDMETRICSBwpStats__duration;
        goto LABEL_47;
      }
      v35 = *(unsigned char *)(*(void *)(a2 + *v7) + v34);
      *(void *)(a2 + v33) = v34 + 1;
      v20 |= (unint64_t)(v35 & 0x7F) << v31;
      if ((v35 & 0x80) == 0) {
        break;
      }
      v31 += 7;
      v24 = v32++ > 8;
      if (v24)
      {
        LODWORD(v20) = 0;
        v25 = &OBJC_IVAR___AWDMETRICSBwpStats__duration;
        goto LABEL_50;
      }
    }
    v25 = &OBJC_IVAR___AWDMETRICSBwpStats__duration;
LABEL_48:
    if (*(unsigned char *)(a2 + *v5)) {
      LODWORD(v20) = 0;
    }
LABEL_50:
    *(_DWORD *)(a1 + *v25) = v20;
    goto LABEL_51;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularDynamicRatSelectionReadFrom(uint64_t a1, uint64_t a2)
{
  v3 = (int *)MEMORY[0x263F62298];
  v4 = (int *)MEMORY[0x263F62288];
  v5 = (int *)MEMORY[0x263F62270];
  if (*(void *)(a2 + (int)*MEMORY[0x263F62298]) < *(void *)(a2 + (int)*MEMORY[0x263F62288]))
  {
    unint64_t v7 = 0x26A0D1000uLL;
    unint64_t v8 = 0x26A0D1000uLL;
    v9 = (int *)MEMORY[0x263F62268];
    unint64_t v10 = 0x26A0D1000uLL;
    unint64_t v11 = 0x26A0D1000uLL;
    unint64_t v12 = 0x26A0D1000uLL;
    unint64_t v13 = 0x26A0D1000uLL;
    unint64_t v14 = 0x26A0D1000uLL;
    unint64_t v15 = 0x26A0D1000uLL;
    unint64_t v16 = 0x26A0D1000uLL;
    unint64_t v17 = 0x26A0D1000uLL;
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v18 = 0;
      unsigned int v19 = 0;
      unint64_t v20 = 0;
      while (1)
      {
        uint64_t v21 = *v3;
        unint64_t v22 = *(void *)(a2 + v21);
        if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v23 = *(unsigned char *)(*(void *)(a2 + *v9) + v22);
        *(void *)(a2 + v21) = v22 + 1;
        v20 |= (unint64_t)(v23 & 0x7F) << v18;
        if ((v23 & 0x80) == 0) {
          goto LABEL_12;
        }
        v18 += 7;
        BOOL v24 = v19++ >= 9;
        if (v24)
        {
          unint64_t v20 = 0;
          int v25 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v25 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v20 = 0;
      }
LABEL_14:
      if (v25 || (v20 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v27 = v20 >> 3;
      if ((int)(v20 >> 3) <= 16)
      {
        switch(v27)
        {
          case 1:
            char v69 = 0;
            unsigned int v70 = 0;
            uint64_t v71 = 0;
            *(_WORD *)(a1 + *(int *)(v7 + 2488)) |= 1u;
            while (1)
            {
              uint64_t v72 = *v3;
              unint64_t v73 = *(void *)(a2 + v72);
              if (v73 == -1 || v73 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v74 = *(unsigned char *)(*(void *)(a2 + *v9) + v73);
              *(void *)(a2 + v72) = v73 + 1;
              v71 |= (unint64_t)(v74 & 0x7F) << v69;
              if ((v74 & 0x80) == 0) {
                goto LABEL_128;
              }
              v69 += 7;
              BOOL v24 = v70++ >= 9;
              if (v24)
              {
                uint64_t v71 = 0;
                goto LABEL_130;
              }
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_128:
            if (*(unsigned char *)(a2 + *v5)) {
              uint64_t v71 = 0;
            }
LABEL_130:
            *(void *)(a1 + *(int *)(v8 + 2492)) = v71;
            continue;
          case 4:
            char v75 = 0;
            unsigned int v76 = 0;
            uint64_t v30 = 0;
            *(_WORD *)(a1 + *(int *)(v7 + 2488)) |= 0x40u;
            while (1)
            {
              uint64_t v77 = *v3;
              unint64_t v78 = *(void *)(a2 + v77);
              if (v78 == -1 || v78 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v79 = *(unsigned char *)(*(void *)(a2 + *v9) + v78);
              *(void *)(a2 + v77) = v78 + 1;
              v30 |= (unint64_t)(v79 & 0x7F) << v75;
              if ((v79 & 0x80) == 0) {
                goto LABEL_132;
              }
              v75 += 7;
              BOOL v24 = v76++ >= 9;
              if (v24)
              {
                LODWORD(v30) = 0;
                goto LABEL_134;
              }
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_132:
            if (*(unsigned char *)(a2 + *v5)) {
              LODWORD(v30) = 0;
            }
LABEL_134:
            uint64_t v86 = *(int *)(v10 + 2496);
            break;
          case 5:
            char v34 = 0;
            unsigned int v35 = 0;
            uint64_t v30 = 0;
            *(_WORD *)(a1 + *(int *)(v7 + 2488)) |= 8u;
            while (1)
            {
              uint64_t v36 = *v3;
              unint64_t v37 = *(void *)(a2 + v36);
              if (v37 == -1 || v37 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v38 = *(unsigned char *)(*(void *)(a2 + *v9) + v37);
              *(void *)(a2 + v36) = v37 + 1;
              v30 |= (unint64_t)(v38 & 0x7F) << v34;
              if ((v38 & 0x80) == 0) {
                goto LABEL_100;
              }
              v34 += 7;
              BOOL v24 = v35++ >= 9;
              if (v24)
              {
                LODWORD(v30) = 0;
                goto LABEL_102;
              }
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_100:
            if (*(unsigned char *)(a2 + *v5)) {
              LODWORD(v30) = 0;
            }
LABEL_102:
            uint64_t v86 = *(int *)(v11 + 2500);
            break;
          default:
LABEL_93:
            unint64_t v80 = v8;
            unint64_t v81 = v10;
            unint64_t v82 = v11;
            unint64_t v83 = v7;
            unint64_t v84 = v12;
            uint64_t result = PBReaderSkipValueWithTag();
            v5 = (int *)MEMORY[0x263F62270];
            unint64_t v12 = v84;
            unint64_t v13 = 0x26A0D1000;
            unint64_t v7 = v83;
            unint64_t v14 = 0x26A0D1000;
            unint64_t v11 = v82;
            unint64_t v15 = 0x26A0D1000;
            unint64_t v10 = v81;
            unint64_t v17 = 0x26A0D1000;
            unint64_t v8 = v80;
            unint64_t v16 = 0x26A0D1000;
            if (!result) {
              return result;
            }
            continue;
        }
      }
      else
      {
        switch((int)v27)
        {
          case 17:
            char v28 = 0;
            unsigned int v29 = 0;
            uint64_t v30 = 0;
            *(_WORD *)(a1 + *(int *)(v7 + 2488)) |= 0x20u;
            while (2)
            {
              uint64_t v31 = *v3;
              unint64_t v32 = *(void *)(a2 + v31);
              if (v32 == -1 || v32 >= *(void *)(a2 + *v4))
              {
                *(unsigned char *)(a2 + *v5) = 1;
              }
              else
              {
                char v33 = *(unsigned char *)(*(void *)(a2 + *v9) + v32);
                *(void *)(a2 + v31) = v32 + 1;
                v30 |= (unint64_t)(v33 & 0x7F) << v28;
                if (v33 < 0)
                {
                  v28 += 7;
                  BOOL v24 = v29++ >= 9;
                  if (v24)
                  {
                    LODWORD(v30) = 0;
                    goto LABEL_98;
                  }
                  continue;
                }
              }
              break;
            }
            if (*(unsigned char *)(a2 + *v5)) {
              LODWORD(v30) = 0;
            }
LABEL_98:
            uint64_t v86 = *(int *)(v12 + 2504);
            goto LABEL_135;
          case 18:
            char v39 = 0;
            unsigned int v40 = 0;
            uint64_t v30 = 0;
            *(_WORD *)(a1 + *(int *)(v7 + 2488)) |= 0x10u;
            while (2)
            {
              uint64_t v41 = *v3;
              unint64_t v42 = *(void *)(a2 + v41);
              if (v42 == -1 || v42 >= *(void *)(a2 + *v4))
              {
                *(unsigned char *)(a2 + *v5) = 1;
              }
              else
              {
                char v43 = *(unsigned char *)(*(void *)(a2 + *v9) + v42);
                *(void *)(a2 + v41) = v42 + 1;
                v30 |= (unint64_t)(v43 & 0x7F) << v39;
                if (v43 < 0)
                {
                  v39 += 7;
                  BOOL v24 = v40++ >= 9;
                  if (v24)
                  {
                    LODWORD(v30) = 0;
                    goto LABEL_106;
                  }
                  continue;
                }
              }
              break;
            }
            if (*(unsigned char *)(a2 + *v5)) {
              LODWORD(v30) = 0;
            }
LABEL_106:
            uint64_t v86 = *(int *)(v13 + 2508);
            goto LABEL_135;
          case 19:
            char v44 = 0;
            unsigned int v45 = 0;
            uint64_t v30 = 0;
            *(_WORD *)(a1 + *(int *)(v7 + 2488)) |= 4u;
            while (2)
            {
              uint64_t v46 = *v3;
              unint64_t v47 = *(void *)(a2 + v46);
              if (v47 == -1 || v47 >= *(void *)(a2 + *v4))
              {
                *(unsigned char *)(a2 + *v5) = 1;
              }
              else
              {
                char v48 = *(unsigned char *)(*(void *)(a2 + *v9) + v47);
                *(void *)(a2 + v46) = v47 + 1;
                v30 |= (unint64_t)(v48 & 0x7F) << v44;
                if (v48 < 0)
                {
                  v44 += 7;
                  BOOL v24 = v45++ >= 9;
                  if (v24)
                  {
                    LODWORD(v30) = 0;
                    goto LABEL_110;
                  }
                  continue;
                }
              }
              break;
            }
            if (*(unsigned char *)(a2 + *v5)) {
              LODWORD(v30) = 0;
            }
LABEL_110:
            uint64_t v86 = *(int *)(v14 + 2512);
            goto LABEL_135;
          case 20:
            char v49 = 0;
            unsigned int v50 = 0;
            uint64_t v30 = 0;
            *(_WORD *)(a1 + *(int *)(v7 + 2488)) |= 2u;
            while (2)
            {
              uint64_t v51 = *v3;
              unint64_t v52 = *(void *)(a2 + v51);
              if (v52 == -1 || v52 >= *(void *)(a2 + *v4))
              {
                *(unsigned char *)(a2 + *v5) = 1;
              }
              else
              {
                char v53 = *(unsigned char *)(*(void *)(a2 + *v9) + v52);
                *(void *)(a2 + v51) = v52 + 1;
                v30 |= (unint64_t)(v53 & 0x7F) << v49;
                if (v53 < 0)
                {
                  v49 += 7;
                  BOOL v24 = v50++ >= 9;
                  if (v24)
                  {
                    LODWORD(v30) = 0;
                    goto LABEL_114;
                  }
                  continue;
                }
              }
              break;
            }
            if (*(unsigned char *)(a2 + *v5)) {
              LODWORD(v30) = 0;
            }
LABEL_114:
            uint64_t v86 = *(int *)(v15 + 2516);
            goto LABEL_135;
          case 23:
            char v54 = 0;
            unsigned int v55 = 0;
            uint64_t v30 = 0;
            *(_WORD *)(a1 + *(int *)(v7 + 2488)) |= 0x200u;
            while (2)
            {
              uint64_t v56 = *v3;
              unint64_t v57 = *(void *)(a2 + v56);
              if (v57 == -1 || v57 >= *(void *)(a2 + *v4))
              {
                *(unsigned char *)(a2 + *v5) = 1;
              }
              else
              {
                char v58 = *(unsigned char *)(*(void *)(a2 + *v9) + v57);
                *(void *)(a2 + v56) = v57 + 1;
                v30 |= (unint64_t)(v58 & 0x7F) << v54;
                if (v58 < 0)
                {
                  v54 += 7;
                  BOOL v24 = v55++ >= 9;
                  if (v24)
                  {
                    LODWORD(v30) = 0;
                    goto LABEL_118;
                  }
                  continue;
                }
              }
              break;
            }
            if (*(unsigned char *)(a2 + *v5)) {
              LODWORD(v30) = 0;
            }
LABEL_118:
            uint64_t v86 = *(int *)(v16 + 2520);
            goto LABEL_135;
          case 24:
            char v59 = 0;
            unsigned int v60 = 0;
            uint64_t v30 = 0;
            *(_WORD *)(a1 + *(int *)(v7 + 2488)) |= 0x100u;
            while (2)
            {
              uint64_t v61 = *v3;
              unint64_t v62 = *(void *)(a2 + v61);
              if (v62 == -1 || v62 >= *(void *)(a2 + *v4))
              {
                *(unsigned char *)(a2 + *v5) = 1;
              }
              else
              {
                char v63 = *(unsigned char *)(*(void *)(a2 + *v9) + v62);
                *(void *)(a2 + v61) = v62 + 1;
                v30 |= (unint64_t)(v63 & 0x7F) << v59;
                if (v63 < 0)
                {
                  v59 += 7;
                  BOOL v24 = v60++ >= 9;
                  if (v24)
                  {
                    LODWORD(v30) = 0;
                    goto LABEL_122;
                  }
                  continue;
                }
              }
              break;
            }
            if (*(unsigned char *)(a2 + *v5)) {
              LODWORD(v30) = 0;
            }
LABEL_122:
            uint64_t v86 = *(int *)(v17 + 2524);
            goto LABEL_135;
          case 31:
            char v64 = 0;
            unsigned int v65 = 0;
            uint64_t v30 = 0;
            *(_WORD *)(a1 + *(int *)(v7 + 2488)) |= 0x80u;
            break;
          default:
            goto LABEL_93;
        }
        while (1)
        {
          uint64_t v66 = *v3;
          unint64_t v67 = *(void *)(a2 + v66);
          if (v67 == -1 || v67 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v68 = *(unsigned char *)(*(void *)(a2 + *v9) + v67);
          *(void *)(a2 + v66) = v67 + 1;
          v30 |= (unint64_t)(v68 & 0x7F) << v64;
          if ((v68 & 0x80) == 0) {
            goto LABEL_124;
          }
          v64 += 7;
          BOOL v24 = v65++ >= 9;
          if (v24)
          {
            LODWORD(v30) = 0;
            goto LABEL_126;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_124:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v30) = 0;
        }
LABEL_126:
        uint64_t v86 = 40;
      }
LABEL_135:
      *(_DWORD *)(a1 + v86) = v30;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularNrRadioStatsReadFrom(uint64_t a1, uint64_t a2)
{
  v3 = (int *)MEMORY[0x263F62298];
  v4 = (int *)MEMORY[0x263F62288];
  v5 = (int *)MEMORY[0x263F62270];
  if (*(void *)(a2 + (int)*MEMORY[0x263F62298]) < *(void *)(a2 + (int)*MEMORY[0x263F62288]))
  {
    unint64_t v7 = (int *)MEMORY[0x263F62268];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((int)(v10 >> 3) > 13)
      {
        if (v17 == 14)
        {
          char v31 = 0;
          unsigned int v32 = 0;
          uint64_t v21 = 0;
          *(unsigned char *)(a1 + 32) |= 4u;
          while (1)
          {
            uint64_t v33 = *v3;
            unint64_t v34 = *(void *)(a2 + v33);
            if (v34 == -1 || v34 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v35 = *(unsigned char *)(*(void *)(a2 + *v7) + v34);
            *(void *)(a2 + v33) = v34 + 1;
            v21 |= (unint64_t)(v35 & 0x7F) << v31;
            if ((v35 & 0x80) == 0) {
              goto LABEL_58;
            }
            v31 += 7;
            BOOL v14 = v32++ >= 9;
            if (v14)
            {
              LODWORD(v21) = 0;
              goto LABEL_60;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_58:
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v21) = 0;
          }
LABEL_60:
          uint64_t v37 = 28;
        }
        else
        {
          if (v17 != 47)
          {
LABEL_47:
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
            continue;
          }
          char v19 = 0;
          unsigned int v20 = 0;
          uint64_t v21 = 0;
          *(unsigned char *)(a1 + 32) |= 2u;
          while (1)
          {
            uint64_t v22 = *v3;
            unint64_t v23 = *(void *)(a2 + v22);
            if (v23 == -1 || v23 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
            *(void *)(a2 + v22) = v23 + 1;
            v21 |= (unint64_t)(v24 & 0x7F) << v19;
            if ((v24 & 0x80) == 0) {
              goto LABEL_50;
            }
            v19 += 7;
            BOOL v14 = v20++ >= 9;
            if (v14)
            {
              LODWORD(v21) = 0;
              goto LABEL_52;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_50:
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v21) = 0;
          }
LABEL_52:
          uint64_t v37 = 24;
        }
        *(_DWORD *)(a1 + v37) = v21;
      }
      else if (v17 == 1)
      {
        char v25 = 0;
        unsigned int v26 = 0;
        uint64_t v27 = 0;
        *(unsigned char *)(a1 + 32) |= 1u;
        while (1)
        {
          uint64_t v28 = *v3;
          unint64_t v29 = *(void *)(a2 + v28);
          if (v29 == -1 || v29 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v30 = *(unsigned char *)(*(void *)(a2 + *v7) + v29);
          *(void *)(a2 + v28) = v29 + 1;
          v27 |= (unint64_t)(v30 & 0x7F) << v25;
          if ((v30 & 0x80) == 0) {
            goto LABEL_54;
          }
          v25 += 7;
          BOOL v14 = v26++ >= 9;
          if (v14)
          {
            uint64_t v27 = 0;
            goto LABEL_56;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_54:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v27 = 0;
        }
LABEL_56:
        *(void *)(a1 + 8) = v27;
      }
      else
      {
        if (v17 != 3) {
          goto LABEL_47;
        }
        char v18 = objc_alloc_init(AWDMETRICSBwpStats);
        [(id)a1 addBwpInfo:v18];
        if (!PBReaderPlaceMark() || !AWDMETRICSBwpStatsReadFrom((uint64_t)v18, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularPowerLogWUSReadFrom(uint64_t a1, uint64_t a2)
{
  v3 = (int *)MEMORY[0x263F62298];
  v4 = (int *)MEMORY[0x263F62288];
  v5 = (int *)MEMORY[0x263F62270];
  if (*(void *)(a2 + (int)*MEMORY[0x263F62298]) < *(void *)(a2 + (int)*MEMORY[0x263F62288]))
  {
    unint64_t v7 = (int *)MEMORY[0x263F62268];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 28) |= 1u;
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              goto LABEL_50;
            }
            v17 += 7;
            BOOL v14 = v18++ >= 9;
            if (v14)
            {
              uint64_t v19 = 0;
              goto LABEL_52;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_50:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v19 = 0;
          }
LABEL_52:
          *(void *)(a1 + 8) = v19;
          continue;
        case 2u:
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 28) |= 2u;
          while (2)
          {
            uint64_t v27 = *v3;
            unint64_t v28 = *(void *)(a2 + v27);
            if (v28 == -1 || v28 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
              *(void *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                BOOL v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_56;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_56:
          uint64_t v40 = 16;
          goto LABEL_65;
        case 3u:
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 28) |= 8u;
          while (2)
          {
            uint64_t v32 = *v3;
            unint64_t v33 = *(void *)(a2 + v32);
            if (v33 == -1 || v33 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
              *(void *)(a2 + v32) = v33 + 1;
              v26 |= (unint64_t)(v34 & 0x7F) << v30;
              if (v34 < 0)
              {
                v30 += 7;
                BOOL v14 = v31++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_60;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_60:
          uint64_t v40 = 24;
          goto LABEL_65;
        case 4u:
          char v35 = 0;
          unsigned int v36 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 28) |= 4u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v37 = *v3;
        unint64_t v38 = *(void *)(a2 + v37);
        if (v38 == -1 || v38 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v39 = *(unsigned char *)(*(void *)(a2 + *v7) + v38);
        *(void *)(a2 + v37) = v38 + 1;
        v26 |= (unint64_t)(v39 & 0x7F) << v35;
        if ((v39 & 0x80) == 0) {
          goto LABEL_62;
        }
        v35 += 7;
        BOOL v14 = v36++ >= 9;
        if (v14)
        {
          LODWORD(v26) = 0;
          goto LABEL_64;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_62:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v26) = 0;
      }
LABEL_64:
      uint64_t v40 = 20;
LABEL_65:
      *(_DWORD *)(a1 + v40) = v26;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularPowerLogNRDCEventReadFrom(uint64_t a1, uint64_t a2)
{
  v3 = (int *)MEMORY[0x263F62298];
  v4 = (int *)MEMORY[0x263F62288];
  v5 = (int *)MEMORY[0x263F62270];
  if (*(void *)(a2 + (int)*MEMORY[0x263F62298]) < *(void *)(a2 + (int)*MEMORY[0x263F62288]))
  {
    unint64_t v7 = (int *)MEMORY[0x263F62268];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 28) |= 1u;
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              goto LABEL_50;
            }
            v17 += 7;
            BOOL v14 = v18++ >= 9;
            if (v14)
            {
              uint64_t v19 = 0;
              goto LABEL_52;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_50:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v19 = 0;
          }
LABEL_52:
          *(void *)(a1 + 8) = v19;
          continue;
        case 2u:
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 28) |= 2u;
          while (2)
          {
            uint64_t v27 = *v3;
            unint64_t v28 = *(void *)(a2 + v27);
            if (v28 == -1 || v28 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
              *(void *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                BOOL v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_56;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_56:
          uint64_t v40 = 16;
          goto LABEL_65;
        case 3u:
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 28) |= 8u;
          while (2)
          {
            uint64_t v32 = *v3;
            unint64_t v33 = *(void *)(a2 + v32);
            if (v33 == -1 || v33 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
              *(void *)(a2 + v32) = v33 + 1;
              v26 |= (unint64_t)(v34 & 0x7F) << v30;
              if (v34 < 0)
              {
                v30 += 7;
                BOOL v14 = v31++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_60;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_60:
          uint64_t v40 = 24;
          goto LABEL_65;
        case 4u:
          char v35 = 0;
          unsigned int v36 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 28) |= 4u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v37 = *v3;
        unint64_t v38 = *(void *)(a2 + v37);
        if (v38 == -1 || v38 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v39 = *(unsigned char *)(*(void *)(a2 + *v7) + v38);
        *(void *)(a2 + v37) = v38 + 1;
        v26 |= (unint64_t)(v39 & 0x7F) << v35;
        if ((v39 & 0x80) == 0) {
          goto LABEL_62;
        }
        v35 += 7;
        BOOL v14 = v36++ >= 9;
        if (v14)
        {
          LODWORD(v26) = 0;
          goto LABEL_64;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_62:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v26) = 0;
      }
LABEL_64:
      uint64_t v40 = 20;
LABEL_65:
      *(_DWORD *)(a1 + v40) = v26;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularPowerLogPagingDRXCycleReadFrom(uint64_t a1, uint64_t a2)
{
  v3 = (int *)MEMORY[0x263F62298];
  v4 = (int *)MEMORY[0x263F62288];
  v5 = (int *)MEMORY[0x263F62270];
  if (*(void *)(a2 + (int)*MEMORY[0x263F62298]) < *(void *)(a2 + (int)*MEMORY[0x263F62288]))
  {
    unint64_t v7 = (int *)MEMORY[0x263F62268];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 28) |= 1u;
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              goto LABEL_50;
            }
            v17 += 7;
            BOOL v14 = v18++ >= 9;
            if (v14)
            {
              uint64_t v19 = 0;
              goto LABEL_52;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_50:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v19 = 0;
          }
LABEL_52:
          *(void *)(a1 + 8) = v19;
          continue;
        case 2u:
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 28) |= 4u;
          while (2)
          {
            uint64_t v27 = *v3;
            unint64_t v28 = *(void *)(a2 + v27);
            if (v28 == -1 || v28 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
              *(void *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                BOOL v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_56;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_56:
          uint64_t v40 = 20;
          goto LABEL_65;
        case 3u:
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 28) |= 8u;
          while (2)
          {
            uint64_t v32 = *v3;
            unint64_t v33 = *(void *)(a2 + v32);
            if (v33 == -1 || v33 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
              *(void *)(a2 + v32) = v33 + 1;
              v26 |= (unint64_t)(v34 & 0x7F) << v30;
              if (v34 < 0)
              {
                v30 += 7;
                BOOL v14 = v31++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_60;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_60:
          uint64_t v40 = 24;
          goto LABEL_65;
        case 4u:
          char v35 = 0;
          unsigned int v36 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 28) |= 2u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v37 = *v3;
        unint64_t v38 = *(void *)(a2 + v37);
        if (v38 == -1 || v38 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v39 = *(unsigned char *)(*(void *)(a2 + *v7) + v38);
        *(void *)(a2 + v37) = v38 + 1;
        v26 |= (unint64_t)(v39 & 0x7F) << v35;
        if ((v39 & 0x80) == 0) {
          goto LABEL_62;
        }
        v35 += 7;
        BOOL v14 = v36++ >= 9;
        if (v14)
        {
          LODWORD(v26) = 0;
          goto LABEL_64;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_62:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v26) = 0;
      }
LABEL_64:
      uint64_t v40 = 16;
LABEL_65:
      *(_DWORD *)(a1 + v40) = v26;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularNrSDMActivationReadFrom(uint64_t a1, uint64_t a2)
{
  v3 = (int *)MEMORY[0x263F62298];
  v4 = (int *)MEMORY[0x263F62288];
  v5 = (int *)MEMORY[0x263F62270];
  if (*(void *)(a2 + (int)*MEMORY[0x263F62298]) < *(void *)(a2 + (int)*MEMORY[0x263F62288]))
  {
    unint64_t v7 = 0x26A0D1000uLL;
    unint64_t v8 = 0x26A0D1000uLL;
    unsigned int v9 = (int *)MEMORY[0x263F62268];
    unint64_t v10 = 0x26A0D1000uLL;
    unint64_t v11 = 0x26A0D1000uLL;
    unint64_t v12 = 0x26A0D1000uLL;
    unint64_t v13 = 0x26A0D1000uLL;
    unint64_t v14 = 0x26A0D1000uLL;
    unint64_t v15 = 0x26A0D1000uLL;
    unint64_t v16 = 0x26A0D1000uLL;
    unint64_t v17 = 0x26A0D1000uLL;
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v18 = 0;
      unsigned int v19 = 0;
      unint64_t v20 = 0;
      while (1)
      {
        uint64_t v21 = *v3;
        unint64_t v22 = *(void *)(a2 + v21);
        if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v23 = *(unsigned char *)(*(void *)(a2 + *v9) + v22);
        *(void *)(a2 + v21) = v22 + 1;
        v20 |= (unint64_t)(v23 & 0x7F) << v18;
        if ((v23 & 0x80) == 0) {
          goto LABEL_12;
        }
        v18 += 7;
        BOOL v24 = v19++ >= 9;
        if (v24)
        {
          unint64_t v20 = 0;
          int v25 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v25 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v20 = 0;
      }
LABEL_14:
      if (v25 || (v20 & 7) == 4) {
        break;
      }
      switch((v20 >> 3))
      {
        case 1u:
          char v27 = 0;
          unsigned int v28 = 0;
          uint64_t v29 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 2612)) |= 1u;
          while (1)
          {
            uint64_t v30 = *v3;
            unint64_t v31 = *(void *)(a2 + v30);
            if (v31 == -1 || v31 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v32 = *(unsigned char *)(*(void *)(a2 + *v9) + v31);
            *(void *)(a2 + v30) = v31 + 1;
            v29 |= (unint64_t)(v32 & 0x7F) << v27;
            if ((v32 & 0x80) == 0) {
              goto LABEL_127;
            }
            v27 += 7;
            BOOL v24 = v28++ >= 9;
            if (v24)
            {
              uint64_t v29 = 0;
              goto LABEL_129;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_127:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v29 = 0;
          }
LABEL_129:
          *(void *)(a1 + *(int *)(v8 + 2616)) = v29;
          continue;
        case 2u:
          char v33 = 0;
          unsigned int v34 = 0;
          uint64_t v35 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 2612)) |= 0x2000u;
          while (2)
          {
            uint64_t v36 = *v3;
            unint64_t v37 = *(void *)(a2 + v36);
            if (v37 == -1 || v37 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v38 = *(unsigned char *)(*(void *)(a2 + *v9) + v37);
              *(void *)(a2 + v36) = v37 + 1;
              v35 |= (unint64_t)(v38 & 0x7F) << v33;
              if (v38 < 0)
              {
                v33 += 7;
                BOOL v24 = v34++ >= 9;
                if (v24)
                {
                  uint64_t v35 = 0;
                  goto LABEL_133;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v35 = 0;
          }
LABEL_133:
          BOOL v114 = v35 != 0;
          uint64_t v115 = *(int *)(v10 + 2624);
          goto LABEL_150;
        case 3u:
          char v39 = 0;
          unsigned int v40 = 0;
          uint64_t v41 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 2612)) |= 0x4000u;
          while (2)
          {
            uint64_t v42 = *v3;
            unint64_t v43 = *(void *)(a2 + v42);
            if (v43 == -1 || v43 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v44 = *(unsigned char *)(*(void *)(a2 + *v9) + v43);
              *(void *)(a2 + v42) = v43 + 1;
              v41 |= (unint64_t)(v44 & 0x7F) << v39;
              if (v44 < 0)
              {
                v39 += 7;
                BOOL v24 = v40++ >= 9;
                if (v24)
                {
                  uint64_t v41 = 0;
                  goto LABEL_137;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v41 = 0;
          }
LABEL_137:
          BOOL v114 = v41 != 0;
          uint64_t v115 = *(int *)(v11 + 2628);
          goto LABEL_150;
        case 6u:
          char v51 = 0;
          unsigned int v52 = 0;
          uint64_t v53 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 2612)) |= 0x400u;
          while (2)
          {
            uint64_t v54 = *v3;
            unint64_t v55 = *(void *)(a2 + v54);
            if (v55 == -1 || v55 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v56 = *(unsigned char *)(*(void *)(a2 + *v9) + v55);
              *(void *)(a2 + v54) = v55 + 1;
              v53 |= (unint64_t)(v56 & 0x7F) << v51;
              if (v56 < 0)
              {
                v51 += 7;
                BOOL v24 = v52++ >= 9;
                if (v24)
                {
                  LODWORD(v53) = 0;
                  goto LABEL_141;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v53) = 0;
          }
LABEL_141:
          uint64_t v116 = *(int *)(v12 + 2632);
          goto LABEL_187;
        case 7u:
          char v57 = 0;
          unsigned int v58 = 0;
          uint64_t v59 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 2612)) |= 0x800u;
          while (2)
          {
            uint64_t v60 = *v3;
            unint64_t v61 = *(void *)(a2 + v60);
            if (v61 == -1 || v61 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v62 = *(unsigned char *)(*(void *)(a2 + *v9) + v61);
              *(void *)(a2 + v60) = v61 + 1;
              v59 |= (unint64_t)(v62 & 0x7F) << v57;
              if (v62 < 0)
              {
                v57 += 7;
                BOOL v24 = v58++ >= 9;
                if (v24)
                {
                  uint64_t v59 = 0;
                  goto LABEL_145;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v59 = 0;
          }
LABEL_145:
          BOOL v114 = v59 != 0;
          uint64_t v115 = *(int *)(v13 + 2640);
          goto LABEL_150;
        case 8u:
          char v63 = 0;
          unsigned int v64 = 0;
          uint64_t v65 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 2612)) |= 0x1000u;
          while (2)
          {
            uint64_t v66 = *v3;
            unint64_t v67 = *(void *)(a2 + v66);
            if (v67 == -1 || v67 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v68 = *(unsigned char *)(*(void *)(a2 + *v9) + v67);
              *(void *)(a2 + v66) = v67 + 1;
              v65 |= (unint64_t)(v68 & 0x7F) << v63;
              if (v68 < 0)
              {
                v63 += 7;
                BOOL v24 = v64++ >= 9;
                if (v24)
                {
                  uint64_t v65 = 0;
                  goto LABEL_149;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v65 = 0;
          }
LABEL_149:
          BOOL v114 = v65 != 0;
          uint64_t v115 = *(int *)(v14 + 2644);
LABEL_150:
          *(unsigned char *)(a1 + v115) = v114;
          continue;
        case 0xAu:
          char v69 = 0;
          unsigned int v70 = 0;
          uint64_t v53 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 2612)) |= 8u;
          while (2)
          {
            uint64_t v71 = *v3;
            unint64_t v72 = *(void *)(a2 + v71);
            if (v72 == -1 || v72 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v73 = *(unsigned char *)(*(void *)(a2 + *v9) + v72);
              *(void *)(a2 + v71) = v72 + 1;
              v53 |= (unint64_t)(v73 & 0x7F) << v69;
              if (v73 < 0)
              {
                v69 += 7;
                BOOL v24 = v70++ >= 9;
                if (v24)
                {
                  LODWORD(v53) = 0;
                  goto LABEL_154;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v53) = 0;
          }
LABEL_154:
          uint64_t v116 = *(int *)(v15 + 2648);
          goto LABEL_187;
        case 0xBu:
          char v74 = 0;
          unsigned int v75 = 0;
          uint64_t v53 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 2612)) |= 0x200u;
          while (2)
          {
            uint64_t v76 = *v3;
            unint64_t v77 = *(void *)(a2 + v76);
            if (v77 == -1 || v77 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v78 = *(unsigned char *)(*(void *)(a2 + *v9) + v77);
              *(void *)(a2 + v76) = v77 + 1;
              v53 |= (unint64_t)(v78 & 0x7F) << v74;
              if (v78 < 0)
              {
                v74 += 7;
                BOOL v24 = v75++ >= 9;
                if (v24)
                {
                  LODWORD(v53) = 0;
                  goto LABEL_158;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v53) = 0;
          }
LABEL_158:
          uint64_t v116 = *(int *)(v16 + 2652);
          goto LABEL_187;
        case 0xEu:
          char v79 = 0;
          unsigned int v80 = 0;
          uint64_t v53 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 2612)) |= 0x10u;
          while (2)
          {
            uint64_t v81 = *v3;
            unint64_t v82 = *(void *)(a2 + v81);
            if (v82 == -1 || v82 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v83 = *(unsigned char *)(*(void *)(a2 + *v9) + v82);
              *(void *)(a2 + v81) = v82 + 1;
              v53 |= (unint64_t)(v83 & 0x7F) << v79;
              if (v83 < 0)
              {
                v79 += 7;
                BOOL v24 = v80++ >= 9;
                if (v24)
                {
                  LODWORD(v53) = 0;
                  goto LABEL_162;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v53) = 0;
          }
LABEL_162:
          uint64_t v116 = *(int *)(v17 + 2656);
          goto LABEL_187;
        case 0x11u:
          char v84 = 0;
          unsigned int v85 = 0;
          uint64_t v53 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 2612)) |= 4u;
          while (2)
          {
            uint64_t v86 = *v3;
            unint64_t v87 = *(void *)(a2 + v86);
            if (v87 == -1 || v87 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v88 = *(unsigned char *)(*(void *)(a2 + *v9) + v87);
              *(void *)(a2 + v86) = v87 + 1;
              v53 |= (unint64_t)(v88 & 0x7F) << v84;
              if (v88 < 0)
              {
                v84 += 7;
                BOOL v24 = v85++ >= 9;
                if (v24)
                {
                  LODWORD(v53) = 0;
                  goto LABEL_166;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v53) = 0;
          }
LABEL_166:
          uint64_t v116 = 20;
          goto LABEL_187;
        case 0x12u:
          char v89 = 0;
          unsigned int v90 = 0;
          uint64_t v53 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 2612)) |= 0x40u;
          while (2)
          {
            uint64_t v91 = *v3;
            unint64_t v92 = *(void *)(a2 + v91);
            if (v92 == -1 || v92 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v93 = *(unsigned char *)(*(void *)(a2 + *v9) + v92);
              *(void *)(a2 + v91) = v92 + 1;
              v53 |= (unint64_t)(v93 & 0x7F) << v89;
              if (v93 < 0)
              {
                v89 += 7;
                BOOL v24 = v90++ >= 9;
                if (v24)
                {
                  LODWORD(v53) = 0;
                  goto LABEL_170;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v53) = 0;
          }
LABEL_170:
          uint64_t v116 = 36;
          goto LABEL_187;
        case 0x13u:
          char v94 = 0;
          unsigned int v95 = 0;
          uint64_t v53 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 2612)) |= 2u;
          while (2)
          {
            uint64_t v96 = *v3;
            unint64_t v97 = *(void *)(a2 + v96);
            if (v97 == -1 || v97 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v98 = *(unsigned char *)(*(void *)(a2 + *v9) + v97);
              *(void *)(a2 + v96) = v97 + 1;
              v53 |= (unint64_t)(v98 & 0x7F) << v94;
              if (v98 < 0)
              {
                v94 += 7;
                BOOL v24 = v95++ >= 9;
                if (v24)
                {
                  LODWORD(v53) = 0;
                  goto LABEL_174;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v53) = 0;
          }
LABEL_174:
          uint64_t v116 = 16;
          goto LABEL_187;
        case 0x14u:
          char v99 = 0;
          unsigned int v100 = 0;
          uint64_t v53 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 2612)) |= 0x80u;
          while (2)
          {
            uint64_t v101 = *v3;
            unint64_t v102 = *(void *)(a2 + v101);
            if (v102 == -1 || v102 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v103 = *(unsigned char *)(*(void *)(a2 + *v9) + v102);
              *(void *)(a2 + v101) = v102 + 1;
              v53 |= (unint64_t)(v103 & 0x7F) << v99;
              if (v103 < 0)
              {
                v99 += 7;
                BOOL v24 = v100++ >= 9;
                if (v24)
                {
                  LODWORD(v53) = 0;
                  goto LABEL_178;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v53) = 0;
          }
LABEL_178:
          uint64_t v116 = 40;
          goto LABEL_187;
        case 0x15u:
          char v104 = 0;
          unsigned int v105 = 0;
          uint64_t v53 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 2612)) |= 0x20u;
          while (2)
          {
            uint64_t v106 = *v3;
            unint64_t v107 = *(void *)(a2 + v106);
            if (v107 == -1 || v107 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v108 = *(unsigned char *)(*(void *)(a2 + *v9) + v107);
              *(void *)(a2 + v106) = v107 + 1;
              v53 |= (unint64_t)(v108 & 0x7F) << v104;
              if (v108 < 0)
              {
                v104 += 7;
                BOOL v24 = v105++ >= 9;
                if (v24)
                {
                  LODWORD(v53) = 0;
                  goto LABEL_182;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v53) = 0;
          }
LABEL_182:
          uint64_t v116 = 32;
          goto LABEL_187;
        case 0x16u:
          char v109 = 0;
          unsigned int v110 = 0;
          uint64_t v53 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 2612)) |= 0x100u;
          break;
        default:
          unint64_t v45 = v8;
          unint64_t v46 = v10;
          unint64_t v47 = v11;
          unint64_t v48 = v7;
          unint64_t v49 = v12;
          uint64_t result = PBReaderSkipValueWithTag();
          v5 = (int *)MEMORY[0x263F62270];
          unint64_t v12 = v49;
          unint64_t v13 = 0x26A0D1000;
          unint64_t v7 = v48;
          unint64_t v14 = 0x26A0D1000;
          unint64_t v11 = v47;
          unint64_t v15 = 0x26A0D1000;
          unint64_t v10 = v46;
          unint64_t v16 = 0x26A0D1000;
          unint64_t v8 = v45;
          unint64_t v17 = 0x26A0D1000;
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v111 = *v3;
        unint64_t v112 = *(void *)(a2 + v111);
        if (v112 == -1 || v112 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v113 = *(unsigned char *)(*(void *)(a2 + *v9) + v112);
        *(void *)(a2 + v111) = v112 + 1;
        v53 |= (unint64_t)(v113 & 0x7F) << v109;
        if ((v113 & 0x80) == 0) {
          goto LABEL_184;
        }
        v109 += 7;
        BOOL v24 = v110++ >= 9;
        if (v24)
        {
          LODWORD(v53) = 0;
          goto LABEL_186;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_184:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v53) = 0;
      }
LABEL_186:
      uint64_t v116 = 44;
LABEL_187:
      *(_DWORD *)(a1 + v116) = v53;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularNrSdmEndcReleaseReadFrom(uint64_t a1, uint64_t a2)
{
  v3 = (int *)MEMORY[0x263F62298];
  v4 = (int *)MEMORY[0x263F62288];
  v5 = (int *)MEMORY[0x263F62270];
  if (*(void *)(a2 + (int)*MEMORY[0x263F62298]) < *(void *)(a2 + (int)*MEMORY[0x263F62288]))
  {
    unint64_t v7 = (int *)MEMORY[0x263F62268];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 28) |= 1u;
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              goto LABEL_50;
            }
            v17 += 7;
            BOOL v14 = v18++ >= 9;
            if (v14)
            {
              uint64_t v19 = 0;
              goto LABEL_52;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_50:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v19 = 0;
          }
LABEL_52:
          *(void *)(a1 + 8) = v19;
          continue;
        case 2u:
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 28) |= 8u;
          while (2)
          {
            uint64_t v27 = *v3;
            unint64_t v28 = *(void *)(a2 + v27);
            if (v28 == -1 || v28 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
              *(void *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                BOOL v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_56;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_56:
          uint64_t v40 = 24;
          goto LABEL_65;
        case 3u:
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 28) |= 4u;
          while (2)
          {
            uint64_t v32 = *v3;
            unint64_t v33 = *(void *)(a2 + v32);
            if (v33 == -1 || v33 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
              *(void *)(a2 + v32) = v33 + 1;
              v26 |= (unint64_t)(v34 & 0x7F) << v30;
              if (v34 < 0)
              {
                v30 += 7;
                BOOL v14 = v31++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_60;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_60:
          uint64_t v40 = 20;
          goto LABEL_65;
        case 4u:
          char v35 = 0;
          unsigned int v36 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 28) |= 2u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v37 = *v3;
        unint64_t v38 = *(void *)(a2 + v37);
        if (v38 == -1 || v38 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v39 = *(unsigned char *)(*(void *)(a2 + *v7) + v38);
        *(void *)(a2 + v37) = v38 + 1;
        v26 |= (unint64_t)(v39 & 0x7F) << v35;
        if ((v39 & 0x80) == 0) {
          goto LABEL_62;
        }
        v35 += 7;
        BOOL v14 = v36++ >= 9;
        if (v14)
        {
          LODWORD(v26) = 0;
          goto LABEL_64;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_62:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v26) = 0;
      }
LABEL_64:
      uint64_t v40 = 16;
LABEL_65:
      *(_DWORD *)(a1 + v40) = v26;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularPerClientProfileTriggerCountReadFrom(uint64_t a1, uint64_t a2)
{
  v3 = (int *)MEMORY[0x263F62298];
  v4 = (int *)MEMORY[0x263F62288];
  v5 = (int *)MEMORY[0x263F62270];
  if (*(void *)(a2 + (int)*MEMORY[0x263F62298]) < *(void *)(a2 + (int)*MEMORY[0x263F62288]))
  {
    unint64_t v7 = (int *)MEMORY[0x263F62268];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        char v23 = 0;
        unsigned int v24 = 0;
        uint64_t v25 = 0;
        *(unsigned char *)(a1 + 20) |= 2u;
        while (1)
        {
          uint64_t v26 = *v3;
          unint64_t v27 = *(void *)(a2 + v26);
          if (v27 == -1 || v27 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v28 = *(unsigned char *)(*(void *)(a2 + *v7) + v27);
          *(void *)(a2 + v26) = v27 + 1;
          v25 |= (unint64_t)(v28 & 0x7F) << v23;
          if ((v28 & 0x80) == 0) {
            goto LABEL_41;
          }
          v23 += 7;
          BOOL v14 = v24++ >= 9;
          if (v14)
          {
            LODWORD(v25) = 0;
            goto LABEL_43;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_41:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v25) = 0;
        }
LABEL_43:
        *(_DWORD *)(a1 + 16) = v25;
      }
      else if ((v10 >> 3) == 1)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 20) |= 1u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_37;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            uint64_t v19 = 0;
            goto LABEL_39;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_37:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v19 = 0;
        }
LABEL_39:
        *(void *)(a1 + 8) = v19;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL AWDMETRICSCellularPowerLogReadFrom(void *a1, uint64_t a2)
{
  v3 = (int *)MEMORY[0x263F62298];
  v4 = (int *)MEMORY[0x263F62288];
  v5 = (int *)MEMORY[0x263F62270];
  if (*(void *)(a2 + (int)*MEMORY[0x263F62298]) < *(void *)(a2 + (int)*MEMORY[0x263F62288]))
  {
    unint64_t v7 = (int *)MEMORY[0x263F62268];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((int)(v10 >> 3) > 806952)
      {
        switch((int)v17)
        {
          case 816640:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogShutdown);
            [a1 addCellularPowerLogXOShutdown:v18];
            goto LABEL_41;
          case 816641:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogAPPSPerfLevels:v18];
            goto LABEL_180;
          case 816642:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogShutdown);
            [a1 addCellularPowerLogAPPSCXOShutdown:v18];
LABEL_41:
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogShutdownReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816643:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogAPPSSleepVeto:v18];
            goto LABEL_180;
          case 816644:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogMCPMSleepVeto:v18];
            goto LABEL_180;
          case 816645:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogMPSSPerfLevels:v18];
            goto LABEL_180;
          case 816646:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogGPSStates:v18];
            goto LABEL_180;
          case 816647:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogAOPUARTStates:v18];
            goto LABEL_180;
          case 816648:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogWLANUARTStates:v18];
            goto LABEL_180;
          case 816649:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogPCIeStates:v18];
            goto LABEL_180;
          case 816650:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogL1SleepStates:v18];
            goto LABEL_180;
          case 816651:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogLTEConfiguredCASCCStates:v18];
            goto LABEL_180;
          case 816652:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogLTEActivatedCASCCStates:v18];
            goto LABEL_180;
          case 816653:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogLTERxTxActivityStates:v18];
            goto LABEL_180;
          case 816654:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogLTECarrierComponentInfo);
            [a1 addCellularPowerLogLTECarrierComponentInfo:v18];
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogLTECarrierComponentInfoReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816655:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogLTEAggregatedDLTBS:v18];
            goto LABEL_180;
          case 816656:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogLTERSRP:v18];
            goto LABEL_180;
          case 816657:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogLTESINR:v18];
            goto LABEL_180;
          case 816658:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogLTETxPower:v18];
            goto LABEL_180;
          case 816659:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogLTERxDiversity:v18];
            goto LABEL_180;
          case 816660:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogLTEULCAState:v18];
            goto LABEL_180;
          case 816661:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogPowerEstimator:v18];
            goto LABEL_180;
          case 816662:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogPagingDRXCycle);
            [a1 addCellularPowerLogLTEPagingDRXCycle:v18];
            goto LABEL_67;
          case 816663:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogPagingDRXCycle);
            [a1 addCellularPowerLogNRPagingDRXCycle:v18];
LABEL_67:
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogPagingDRXCycleReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816664:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogProtocolState:v18];
            goto LABEL_180;
          case 816665:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogPLMNSearch:v18];
            goto LABEL_180;
          case 816666:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogGSMTxPower:v18];
            goto LABEL_180;
          case 816667:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogGSMRxRSSI:v18];
            goto LABEL_180;
          case 816668:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogGSMRABMode:v18];
            goto LABEL_180;
          case 816669:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogGSMRxDiversity:v18];
            goto LABEL_180;
          case 816670:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogWCDMATxPower:v18];
            goto LABEL_180;
          case 816671:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogWCDMARxRSSI:v18];
            goto LABEL_180;
          case 816672:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogNRSCGRel);
            [a1 addCellularPowerLogNRSCGRel:v18];
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogNRSCGRelReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816673:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogWCDMARxDiversity:v18];
            goto LABEL_180;
          case 816674:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogWCDMARABMode:v18];
            goto LABEL_180;
          case 816675:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogWCDMARABType:v18];
            goto LABEL_180;
          case 816676:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogEVDOTxPower:v18];
            goto LABEL_180;
          case 816677:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogEVDORxRSSI:v18];
            goto LABEL_180;
          case 816678:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogHybridRABMode:v18];
            goto LABEL_180;
          case 816679:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogEVDORxDiversity:v18];
            goto LABEL_180;
          case 816680:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogCDMA1XTxPower:v18];
            goto LABEL_180;
          case 816681:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogCDMA1XRxRSSI:v18];
            goto LABEL_180;
          case 816682:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogCDMA1XRABMode:v18];
            goto LABEL_180;
          case 816683:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogCDMA1XRxDiversity:v18];
            goto LABEL_180;
          case 816684:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogWCDMACDRXConfig);
            [a1 addCellularPowerLogWCDMACDRXConfig:v18];
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogWCDMACDRXConfigReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816685:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogLTECDRXConfig);
            [a1 addCellularPowerLogLTECDRXConfig:v18];
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogLTECDRXConfigReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816686:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogWCDMARRCStateChange);
            [a1 addCellularPowerLogWCDMARRCStateChange:v18];
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogWCDMARRCStateChangeReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816687:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogLTERRCStateChange);
            [a1 addCellularPowerLogLTERRCStateChange:v18];
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogLTERRCStateChangeReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816688:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogSystemEvent);
            [a1 addCellularPowerLogSystemEvent:v18];
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogSystemEventReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816689:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogRATChangeEvent);
            [a1 addCellularPowerLogRATReselectionEvent:v18];
            goto LABEL_109;
          case 816690:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogRATChangeEvent);
            [a1 addCellularPowerLogRATRedirectionEvent:v18];
LABEL_109:
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogRATChangeEventReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816691:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogGSMRRCStateChange);
            [a1 addCellularPowerLogGSMRRCStateChange:v18];
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogGSMRRCStateChangeReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816692:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLog1xEVDORRCStateChange);
            [a1 addCellularPowerLogCDMA1XRRCStateChange:v18];
            goto LABEL_117;
          case 816693:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLog1xEVDORRCStateChange);
            [a1 addCellularPowerLogHybridRRCStateChange:v18];
LABEL_117:
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLog1xEVDORRCStateChangeReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816694:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogServiceEvent);
            [a1 addCellularPowerLogServiceStateEvent:v18];
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogServiceEventReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816695:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogPLMNScanEvent);
            [a1 addCellularPowerLogPLMNScanEvent:v18];
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogPLMNScanEventReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816696:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogPLMNSearchEvent);
            [a1 addCellularPowerLogPLMNSearchEvent:v18];
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogPLMNSearchEventReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816697:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogNRSARRCStateChange);
            [a1 addCellularPowerLogNRSARRCStateChange:v18];
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogNRSARRCStateChangeReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816698:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogNRNSAENDCEvent);
            [a1 addCellularPowerLogNRNSAENDCEvent:v18];
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogNRNSAENDCEventReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816699:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogNRCDRXConfig);
            [a1 addCellularPowerLogNRCDRXConfig:v18];
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogNRCDRXConfigReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816700:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogNRsub6BWP:v18];
            goto LABEL_180;
          case 816701:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogRFTunerStatsHist:v18];
            goto LABEL_180;
          case 816702:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogNRsub6CASCCConfigured:v18];
            goto LABEL_180;
          case 816703:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogNRsub6CASCCActivated:v18];
            goto LABEL_180;
          case 816704:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogNRsub6RxTx:v18];
            goto LABEL_180;
          case 816705:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogNRCarrierComponentInfo);
            [a1 addCellularPowerLogNRsub6CarrierComponentInfo:v18];
            goto LABEL_163;
          case 816706:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogNRsub6DLTBS:v18];
            goto LABEL_180;
          case 816707:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogNRsub6RSRP:v18];
            goto LABEL_180;
          case 816708:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogNRsub6ULCAState:v18];
            goto LABEL_180;
          case 816709:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogNRsub6TxPower:v18];
            goto LABEL_180;
          case 816710:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogNRsub6RxDiversity:v18];
            goto LABEL_180;
          case 816711:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogSPMI:v18];
            goto LABEL_180;
          case 816712:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogNRmmWaveBWP:v18];
            goto LABEL_180;
          case 816713:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogNRmmWaveAntennaPanel:v18];
            goto LABEL_180;
          case 816714:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogNRFRCoverage);
            [a1 addCellularPowerLogNRFRCoverage:v18];
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogNRFRCoverageReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816715:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogNRmmWaveBeamID:v18];
            goto LABEL_180;
          case 816716:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogSFTStateEvent);
            [a1 addCellularPowerLogSFTState:v18];
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogSFTStateEventReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816717:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogNRmmWaveCASCCConfigured:v18];
            goto LABEL_180;
          case 816718:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogNRmmWaveCASCCActivated:v18];
            goto LABEL_180;
          case 816719:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogNRmmWaveRxTx:v18];
            goto LABEL_180;
          case 816720:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogNRCarrierComponentInfo);
            [a1 addCellularPowerLogNRmmWaveCarrierComponentInfo:v18];
LABEL_163:
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogNRCarrierComponentInfoReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816721:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogNRmmWaveDLTBS:v18];
            goto LABEL_180;
          case 816722:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogNRMmWaveRSRP:v18];
            goto LABEL_180;
          case 816723:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogSFTRxTx:v18];
            goto LABEL_180;
          case 816724:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogNRMmWaveTxPower:v18];
            goto LABEL_180;
          case 816725:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogNRMmWaveULCAState:v18];
            goto LABEL_180;
          case 816726:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogNRsub6BWPSCC:v18];
            goto LABEL_180;
          case 816727:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogNRmmWaveBWPSCC:v18];
            goto LABEL_180;
          case 816728:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogNRDCEvent);
            [a1 addCellularPowerLogNRDCEvent:v18];
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogNRDCEventReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816729:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogWUS);
            [a1 addCellularPowerLogWUS:v18];
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularPowerLogWUSReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
          case 816730:
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPowerLogHistogram);
            [a1 addCellularPowerLogNRsub6BWPSA:v18];
LABEL_180:
            if (PBReaderPlaceMark()
              && (AWDMETRICSCellularPowerLogHistogramReadFrom((uint64_t)v18, a2) & 1) != 0)
            {
              goto LABEL_182;
            }
            goto LABEL_186;
          default:
            if (v17 != 806953) {
              goto LABEL_37;
            }
            unsigned int v18 = objc_alloc_init(AWDMETRICSCellularDynamicRatSelection);
            [a1 addCellularDynamicRatSelection:v18];
            if (!PBReaderPlaceMark()
              || (AWDMETRICSCellularDynamicRatSelectionReadFrom((uint64_t)v18, a2) & 1) == 0)
            {
              goto LABEL_186;
            }
            goto LABEL_182;
        }
      }
      if (v17 == 786435)
      {
        unsigned int v18 = objc_alloc_init(AWDMETRICSCellularPerClientProfileTriggerCount);
        [a1 addCellularPerClientProfileTriggerCount:v18];
        if (!PBReaderPlaceMark()
          || (AWDMETRICSCellularPerClientProfileTriggerCountReadFrom((uint64_t)v18, a2) & 1) == 0)
        {
LABEL_186:

          return 0;
        }
        goto LABEL_182;
      }
      if (v17 == 806936) {
        break;
      }
      if (v17 == 806937)
      {
        unsigned int v18 = objc_alloc_init(AWDMETRICSCellularNrSdmEndcRelease);
        [a1 addCellularNrSdmEndcRelease:v18];
        if (!PBReaderPlaceMark()
          || (AWDMETRICSCellularNrSdmEndcReleaseReadFrom((uint64_t)v18, a2) & 1) == 0)
        {
          goto LABEL_186;
        }
LABEL_182:
        PBReaderRecallMark();

        goto LABEL_183;
      }
LABEL_37:
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_183:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    unsigned int v18 = objc_alloc_init(AWDMETRICSCellularNrSDMActivation);
    [a1 addCellularNrSDMActivation:v18];
    if (!PBReaderPlaceMark() || (AWDMETRICSCellularNrSDMActivationReadFrom((uint64_t)v18, a2) & 1) == 0) {
      goto LABEL_186;
    }
    goto LABEL_182;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularPowerLogHistogramReadFrom(uint64_t a1, uint64_t a2)
{
  v3 = (int *)MEMORY[0x263F62298];
  v4 = (int *)MEMORY[0x263F62288];
  v5 = (int *)MEMORY[0x263F62270];
  if (*(void *)(a2 + (int)*MEMORY[0x263F62298]) >= *(void *)(a2 + (int)*MEMORY[0x263F62288])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  unint64_t v7 = (int *)MEMORY[0x263F62268];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v14 = v9++ >= 9;
      if (v14)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 32) |= 1u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_46;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            uint64_t v19 = 0;
            goto LABEL_48;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_46:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v19 = 0;
        }
LABEL_48:
        *(void *)(a1 + 8) = v19;
        goto LABEL_58;
      case 2u:
        unsigned int v24 = objc_alloc_init(AWDMETRICSMBin);
        [(id)a1 addBin:v24];
        if (PBReaderPlaceMark() && AWDMETRICSMBinReadFrom((uint64_t)v24, a2))
        {
          PBReaderRecallMark();

LABEL_58:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }

        return 0;
      case 3u:
        char v25 = 0;
        unsigned int v26 = 0;
        uint64_t v27 = 0;
        *(unsigned char *)(a1 + 32) |= 4u;
        while (2)
        {
          uint64_t v28 = *v3;
          unint64_t v29 = *(void *)(a2 + v28);
          if (v29 == -1 || v29 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v30 = *(unsigned char *)(*(void *)(a2 + *v7) + v29);
            *(void *)(a2 + v28) = v29 + 1;
            v27 |= (unint64_t)(v30 & 0x7F) << v25;
            if (v30 < 0)
            {
              v25 += 7;
              BOOL v14 = v26++ >= 9;
              if (v14)
              {
                LODWORD(v27) = 0;
                goto LABEL_52;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v27) = 0;
        }
LABEL_52:
        uint64_t v36 = 28;
        goto LABEL_57;
      case 4u:
        char v31 = 0;
        unsigned int v32 = 0;
        uint64_t v27 = 0;
        *(unsigned char *)(a1 + 32) |= 2u;
        while (2)
        {
          uint64_t v33 = *v3;
          unint64_t v34 = *(void *)(a2 + v33);
          if (v34 == -1 || v34 >= *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v35 = *(unsigned char *)(*(void *)(a2 + *v7) + v34);
            *(void *)(a2 + v33) = v34 + 1;
            v27 |= (unint64_t)(v35 & 0x7F) << v31;
            if (v35 < 0)
            {
              v31 += 7;
              BOOL v14 = v32++ >= 9;
              if (v14)
              {
                LODWORD(v27) = 0;
                goto LABEL_56;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v27) = 0;
        }
LABEL_56:
        uint64_t v36 = 24;
LABEL_57:
        *(_DWORD *)(a1 + v36) = v27;
        goto LABEL_58;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_58;
    }
  }
}

uint64_t AWDMETRICSCellularPowerLog1xEVDORRCStateChangeReadFrom(uint64_t a1, uint64_t a2)
{
  v3 = (int *)MEMORY[0x263F62298];
  v4 = (int *)MEMORY[0x263F62288];
  v5 = (int *)MEMORY[0x263F62270];
  if (*(void *)(a2 + (int)*MEMORY[0x263F62298]) < *(void *)(a2 + (int)*MEMORY[0x263F62288]))
  {
    unint64_t v7 = (int *)MEMORY[0x263F62268];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 36) |= 1u;
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              goto LABEL_64;
            }
            v17 += 7;
            BOOL v14 = v18++ >= 9;
            if (v14)
            {
              uint64_t v19 = 0;
              goto LABEL_66;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_64:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v19 = 0;
          }
LABEL_66:
          *(void *)(a1 + 8) = v19;
          continue;
        case 2u:
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 36) |= 0x10u;
          while (2)
          {
            uint64_t v27 = *v3;
            unint64_t v28 = *(void *)(a2 + v27);
            if (v28 == -1 || v28 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
              *(void *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                BOOL v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_70;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_70:
          uint64_t v50 = 28;
          goto LABEL_87;
        case 3u:
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 36) |= 4u;
          while (2)
          {
            uint64_t v32 = *v3;
            unint64_t v33 = *(void *)(a2 + v32);
            if (v33 == -1 || v33 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
              *(void *)(a2 + v32) = v33 + 1;
              v26 |= (unint64_t)(v34 & 0x7F) << v30;
              if (v34 < 0)
              {
                v30 += 7;
                BOOL v14 = v31++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_74;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_74:
          uint64_t v50 = 20;
          goto LABEL_87;
        case 4u:
          char v35 = 0;
          unsigned int v36 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 36) |= 8u;
          while (2)
          {
            uint64_t v37 = *v3;
            unint64_t v38 = *(void *)(a2 + v37);
            if (v38 == -1 || v38 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v39 = *(unsigned char *)(*(void *)(a2 + *v7) + v38);
              *(void *)(a2 + v37) = v38 + 1;
              v26 |= (unint64_t)(v39 & 0x7F) << v35;
              if (v39 < 0)
              {
                v35 += 7;
                BOOL v14 = v36++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_78;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_78:
          uint64_t v50 = 24;
          goto LABEL_87;
        case 5u:
          char v40 = 0;
          unsigned int v41 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 36) |= 0x20u;
          while (2)
          {
            uint64_t v42 = *v3;
            unint64_t v43 = *(void *)(a2 + v42);
            if (v43 == -1 || v43 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v44 = *(unsigned char *)(*(void *)(a2 + *v7) + v43);
              *(void *)(a2 + v42) = v43 + 1;
              v26 |= (unint64_t)(v44 & 0x7F) << v40;
              if (v44 < 0)
              {
                v40 += 7;
                BOOL v14 = v41++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_82;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_82:
          uint64_t v50 = 32;
          goto LABEL_87;
        case 6u:
          char v45 = 0;
          unsigned int v46 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 36) |= 2u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v47 = *v3;
        unint64_t v48 = *(void *)(a2 + v47);
        if (v48 == -1 || v48 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v49 = *(unsigned char *)(*(void *)(a2 + *v7) + v48);
        *(void *)(a2 + v47) = v48 + 1;
        v26 |= (unint64_t)(v49 & 0x7F) << v45;
        if ((v49 & 0x80) == 0) {
          goto LABEL_84;
        }
        v45 += 7;
        BOOL v14 = v46++ >= 9;
        if (v14)
        {
          LODWORD(v26) = 0;
          goto LABEL_86;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_84:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v26) = 0;
      }
LABEL_86:
      uint64_t v50 = 16;
LABEL_87:
      *(_DWORD *)(a1 + v50) = v26;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularPowerLogGSMRRCStateChangeReadFrom(uint64_t a1, uint64_t a2)
{
  v3 = (int *)MEMORY[0x263F62298];
  v4 = (int *)MEMORY[0x263F62288];
  v5 = (int *)MEMORY[0x263F62270];
  if (*(void *)(a2 + (int)*MEMORY[0x263F62298]) < *(void *)(a2 + (int)*MEMORY[0x263F62288]))
  {
    unint64_t v7 = (int *)MEMORY[0x263F62268];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 36) |= 1u;
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              goto LABEL_64;
            }
            v17 += 7;
            BOOL v14 = v18++ >= 9;
            if (v14)
            {
              uint64_t v19 = 0;
              goto LABEL_66;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_64:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v19 = 0;
          }
LABEL_66:
          *(void *)(a1 + 8) = v19;
          continue;
        case 2u:
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 36) |= 0x10u;
          while (2)
          {
            uint64_t v27 = *v3;
            unint64_t v28 = *(void *)(a2 + v27);
            if (v28 == -1 || v28 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
              *(void *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                BOOL v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_70;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_70:
          uint64_t v50 = 28;
          goto LABEL_87;
        case 3u:
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 36) |= 4u;
          while (2)
          {
            uint64_t v32 = *v3;
            unint64_t v33 = *(void *)(a2 + v32);
            if (v33 == -1 || v33 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
              *(void *)(a2 + v32) = v33 + 1;
              v26 |= (unint64_t)(v34 & 0x7F) << v30;
              if (v34 < 0)
              {
                v30 += 7;
                BOOL v14 = v31++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_74;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_74:
          uint64_t v50 = 20;
          goto LABEL_87;
        case 4u:
          char v35 = 0;
          unsigned int v36 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 36) |= 8u;
          while (2)
          {
            uint64_t v37 = *v3;
            unint64_t v38 = *(void *)(a2 + v37);
            if (v38 == -1 || v38 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v39 = *(unsigned char *)(*(void *)(a2 + *v7) + v38);
              *(void *)(a2 + v37) = v38 + 1;
              v26 |= (unint64_t)(v39 & 0x7F) << v35;
              if (v39 < 0)
              {
                v35 += 7;
                BOOL v14 = v36++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_78;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_78:
          uint64_t v50 = 24;
          goto LABEL_87;
        case 5u:
          char v40 = 0;
          unsigned int v41 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 36) |= 0x20u;
          while (2)
          {
            uint64_t v42 = *v3;
            unint64_t v43 = *(void *)(a2 + v42);
            if (v43 == -1 || v43 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v44 = *(unsigned char *)(*(void *)(a2 + *v7) + v43);
              *(void *)(a2 + v42) = v43 + 1;
              v26 |= (unint64_t)(v44 & 0x7F) << v40;
              if (v44 < 0)
              {
                v40 += 7;
                BOOL v14 = v41++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_82;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_82:
          uint64_t v50 = 32;
          goto LABEL_87;
        case 6u:
          char v45 = 0;
          unsigned int v46 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 36) |= 2u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v47 = *v3;
        unint64_t v48 = *(void *)(a2 + v47);
        if (v48 == -1 || v48 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v49 = *(unsigned char *)(*(void *)(a2 + *v7) + v48);
        *(void *)(a2 + v47) = v48 + 1;
        v26 |= (unint64_t)(v49 & 0x7F) << v45;
        if ((v49 & 0x80) == 0) {
          goto LABEL_84;
        }
        v45 += 7;
        BOOL v14 = v46++ >= 9;
        if (v14)
        {
          LODWORD(v26) = 0;
          goto LABEL_86;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_84:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v26) = 0;
      }
LABEL_86:
      uint64_t v50 = 16;
LABEL_87:
      *(_DWORD *)(a1 + v50) = v26;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularPowerLogLTECarrierComponentInfoReadFrom(uint64_t a1, uint64_t a2)
{
  v3 = (int *)MEMORY[0x263F62298];
  v4 = (int *)MEMORY[0x263F62288];
  v5 = (int *)MEMORY[0x263F62270];
  if (*(void *)(a2 + (int)*MEMORY[0x263F62298]) < *(void *)(a2 + (int)*MEMORY[0x263F62288]))
  {
    unint64_t v7 = (int *)MEMORY[0x263F62268];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        char v24 = objc_alloc_init(AWDMETRICSMCarrierComponentInfo);
        [(id)a1 addCarrierInfo:v24];
        if (!PBReaderPlaceMark() || !AWDMETRICSMCarrierComponentInfoReadFrom((uint64_t)v24, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else if (v17 == 2)
      {
        char v25 = 0;
        unsigned int v26 = 0;
        uint64_t v27 = 0;
        *(unsigned char *)(a1 + 28) |= 2u;
        while (1)
        {
          uint64_t v28 = *v3;
          unint64_t v29 = *(void *)(a2 + v28);
          if (v29 == -1 || v29 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v30 = *(unsigned char *)(*(void *)(a2 + *v7) + v29);
          *(void *)(a2 + v28) = v29 + 1;
          v27 |= (unint64_t)(v30 & 0x7F) << v25;
          if ((v30 & 0x80) == 0) {
            goto LABEL_45;
          }
          v25 += 7;
          BOOL v14 = v26++ >= 9;
          if (v14)
          {
            LODWORD(v27) = 0;
            goto LABEL_47;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_45:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v27) = 0;
        }
LABEL_47:
        *(_DWORD *)(a1 + 24) = v27;
      }
      else if (v17 == 1)
      {
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v20 = 0;
        *(unsigned char *)(a1 + 28) |= 1u;
        while (1)
        {
          uint64_t v21 = *v3;
          unint64_t v22 = *(void *)(a2 + v21);
          if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
          *(void *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0) {
            goto LABEL_41;
          }
          v18 += 7;
          BOOL v14 = v19++ >= 9;
          if (v14)
          {
            uint64_t v20 = 0;
            goto LABEL_43;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_41:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v20 = 0;
        }
LABEL_43:
        *(void *)(a1 + 8) = v20;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularPowerLogLTECDRXConfigReadFrom(uint64_t a1, uint64_t a2)
{
  v3 = (int *)MEMORY[0x263F62298];
  v4 = (int *)MEMORY[0x263F62288];
  v5 = (int *)MEMORY[0x263F62270];
  if (*(void *)(a2 + (int)*MEMORY[0x263F62298]) < *(void *)(a2 + (int)*MEMORY[0x263F62288]))
  {
    unint64_t v7 = 0x26A0D1000uLL;
    unint64_t v8 = 0x26A0D1000uLL;
    unsigned int v9 = (int *)MEMORY[0x263F62268];
    unint64_t v10 = 0x26A0D1000uLL;
    unint64_t v11 = 0x26A0D1000uLL;
    unint64_t v12 = 0x26A0D1000uLL;
    unint64_t v13 = 0x26A0D1000uLL;
    unint64_t v14 = 0x26A0D1000uLL;
    unint64_t v15 = 0x26A0D1000uLL;
    unint64_t v16 = 0x26A0D1000uLL;
    unint64_t v17 = 0x26A0D1000uLL;
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v18 = 0;
      unsigned int v19 = 0;
      unint64_t v20 = 0;
      while (1)
      {
        uint64_t v21 = *v3;
        unint64_t v22 = *(void *)(a2 + v21);
        if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v23 = *(unsigned char *)(*(void *)(a2 + *v9) + v22);
        *(void *)(a2 + v21) = v22 + 1;
        v20 |= (unint64_t)(v23 & 0x7F) << v18;
        if ((v23 & 0x80) == 0) {
          goto LABEL_12;
        }
        v18 += 7;
        BOOL v24 = v19++ >= 9;
        if (v24)
        {
          unint64_t v20 = 0;
          int v25 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v25 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v20 = 0;
      }
LABEL_14:
      if (v25 || (v20 & 7) == 4) {
        break;
      }
      switch((v20 >> 3))
      {
        case 1u:
          char v27 = 0;
          unsigned int v28 = 0;
          uint64_t v29 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 3180)) |= 1u;
          while (1)
          {
            uint64_t v30 = *v3;
            unint64_t v31 = *(void *)(a2 + v30);
            if (v31 == -1 || v31 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v32 = *(unsigned char *)(*(void *)(a2 + *v9) + v31);
            *(void *)(a2 + v30) = v31 + 1;
            v29 |= (unint64_t)(v32 & 0x7F) << v27;
            if ((v32 & 0x80) == 0) {
              goto LABEL_99;
            }
            v27 += 7;
            BOOL v24 = v28++ >= 9;
            if (v24)
            {
              uint64_t v29 = 0;
              goto LABEL_101;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_99:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v29 = 0;
          }
LABEL_101:
          *(void *)(a1 + *(int *)(v8 + 3184)) = v29;
          continue;
        case 2u:
          char v39 = 0;
          unsigned int v40 = 0;
          uint64_t v41 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 3180)) |= 0x40u;
          while (2)
          {
            uint64_t v42 = *v3;
            unint64_t v43 = *(void *)(a2 + v42);
            if (v43 == -1 || v43 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v44 = *(unsigned char *)(*(void *)(a2 + *v9) + v43);
              *(void *)(a2 + v42) = v43 + 1;
              v41 |= (unint64_t)(v44 & 0x7F) << v39;
              if (v44 < 0)
              {
                v39 += 7;
                BOOL v24 = v40++ >= 9;
                if (v24)
                {
                  LODWORD(v41) = 0;
                  goto LABEL_105;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v41) = 0;
          }
LABEL_105:
          uint64_t v92 = *(int *)(v10 + 3188);
          goto LABEL_143;
        case 3u:
          char v45 = 0;
          unsigned int v46 = 0;
          uint64_t v41 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 3180)) |= 4u;
          while (2)
          {
            uint64_t v47 = *v3;
            unint64_t v48 = *(void *)(a2 + v47);
            if (v48 == -1 || v48 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v49 = *(unsigned char *)(*(void *)(a2 + *v9) + v48);
              *(void *)(a2 + v47) = v48 + 1;
              v41 |= (unint64_t)(v49 & 0x7F) << v45;
              if (v49 < 0)
              {
                v45 += 7;
                BOOL v24 = v46++ >= 9;
                if (v24)
                {
                  LODWORD(v41) = 0;
                  goto LABEL_109;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v41) = 0;
          }
LABEL_109:
          uint64_t v92 = *(int *)(v11 + 3192);
          goto LABEL_143;
        case 4u:
          char v50 = 0;
          unsigned int v51 = 0;
          uint64_t v41 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 3180)) |= 8u;
          while (2)
          {
            uint64_t v52 = *v3;
            unint64_t v53 = *(void *)(a2 + v52);
            if (v53 == -1 || v53 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v54 = *(unsigned char *)(*(void *)(a2 + *v9) + v53);
              *(void *)(a2 + v52) = v53 + 1;
              v41 |= (unint64_t)(v54 & 0x7F) << v50;
              if (v54 < 0)
              {
                v50 += 7;
                BOOL v24 = v51++ >= 9;
                if (v24)
                {
                  LODWORD(v41) = 0;
                  goto LABEL_113;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v41) = 0;
          }
LABEL_113:
          uint64_t v92 = *(int *)(v12 + 3196);
          goto LABEL_143;
        case 5u:
          char v55 = 0;
          unsigned int v56 = 0;
          uint64_t v41 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 3180)) |= 0x20u;
          while (2)
          {
            uint64_t v57 = *v3;
            unint64_t v58 = *(void *)(a2 + v57);
            if (v58 == -1 || v58 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v59 = *(unsigned char *)(*(void *)(a2 + *v9) + v58);
              *(void *)(a2 + v57) = v58 + 1;
              v41 |= (unint64_t)(v59 & 0x7F) << v55;
              if (v59 < 0)
              {
                v55 += 7;
                BOOL v24 = v56++ >= 9;
                if (v24)
                {
                  LODWORD(v41) = 0;
                  goto LABEL_117;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v41) = 0;
          }
LABEL_117:
          uint64_t v92 = *(int *)(v13 + 3200);
          goto LABEL_143;
        case 6u:
          char v60 = 0;
          unsigned int v61 = 0;
          uint64_t v41 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 3180)) |= 2u;
          while (2)
          {
            uint64_t v62 = *v3;
            unint64_t v63 = *(void *)(a2 + v62);
            if (v63 == -1 || v63 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v64 = *(unsigned char *)(*(void *)(a2 + *v9) + v63);
              *(void *)(a2 + v62) = v63 + 1;
              v41 |= (unint64_t)(v64 & 0x7F) << v60;
              if (v64 < 0)
              {
                v60 += 7;
                BOOL v24 = v61++ >= 9;
                if (v24)
                {
                  LODWORD(v41) = 0;
                  goto LABEL_121;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v41) = 0;
          }
LABEL_121:
          uint64_t v92 = *(int *)(v14 + 3204);
          goto LABEL_143;
        case 7u:
          char v65 = 0;
          unsigned int v66 = 0;
          uint64_t v67 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 3180)) |= 0x400u;
          while (2)
          {
            uint64_t v68 = *v3;
            unint64_t v69 = *(void *)(a2 + v68);
            if (v69 == -1 || v69 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v70 = *(unsigned char *)(*(void *)(a2 + *v9) + v69);
              *(void *)(a2 + v68) = v69 + 1;
              v67 |= (unint64_t)(v70 & 0x7F) << v65;
              if (v70 < 0)
              {
                v65 += 7;
                BOOL v24 = v66++ >= 9;
                if (v24)
                {
                  uint64_t v67 = 0;
                  goto LABEL_125;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v67 = 0;
          }
LABEL_125:
          BOOL v93 = v67 != 0;
          uint64_t v94 = *(int *)(v15 + 3208);
          goto LABEL_138;
        case 8u:
          char v71 = 0;
          unsigned int v72 = 0;
          uint64_t v41 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 3180)) |= 0x80u;
          while (2)
          {
            uint64_t v73 = *v3;
            unint64_t v74 = *(void *)(a2 + v73);
            if (v74 == -1 || v74 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v75 = *(unsigned char *)(*(void *)(a2 + *v9) + v74);
              *(void *)(a2 + v73) = v74 + 1;
              v41 |= (unint64_t)(v75 & 0x7F) << v71;
              if (v75 < 0)
              {
                v71 += 7;
                BOOL v24 = v72++ >= 9;
                if (v24)
                {
                  LODWORD(v41) = 0;
                  goto LABEL_129;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v41) = 0;
          }
LABEL_129:
          uint64_t v92 = *(int *)(v16 + 3212);
          goto LABEL_143;
        case 9u:
          char v76 = 0;
          unsigned int v77 = 0;
          uint64_t v41 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 3180)) |= 0x10u;
          while (2)
          {
            uint64_t v78 = *v3;
            unint64_t v79 = *(void *)(a2 + v78);
            if (v79 == -1 || v79 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v80 = *(unsigned char *)(*(void *)(a2 + *v9) + v79);
              *(void *)(a2 + v78) = v79 + 1;
              v41 |= (unint64_t)(v80 & 0x7F) << v76;
              if (v80 < 0)
              {
                v76 += 7;
                BOOL v24 = v77++ >= 9;
                if (v24)
                {
                  LODWORD(v41) = 0;
                  goto LABEL_133;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v41) = 0;
          }
LABEL_133:
          uint64_t v92 = *(int *)(v17 + 3216);
          goto LABEL_143;
        case 0xAu:
          char v81 = 0;
          unsigned int v82 = 0;
          uint64_t v83 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 3180)) |= 0x200u;
          while (2)
          {
            uint64_t v84 = *v3;
            unint64_t v85 = *(void *)(a2 + v84);
            if (v85 == -1 || v85 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v86 = *(unsigned char *)(*(void *)(a2 + *v9) + v85);
              *(void *)(a2 + v84) = v85 + 1;
              v83 |= (unint64_t)(v86 & 0x7F) << v81;
              if (v86 < 0)
              {
                v81 += 7;
                BOOL v24 = v82++ >= 9;
                if (v24)
                {
                  uint64_t v83 = 0;
                  goto LABEL_137;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v83 = 0;
          }
LABEL_137:
          BOOL v93 = v83 != 0;
          uint64_t v94 = 48;
LABEL_138:
          *(unsigned char *)(a1 + v94) = v93;
          continue;
        case 0xBu:
          char v87 = 0;
          unsigned int v88 = 0;
          uint64_t v41 = 0;
          *(_WORD *)(a1 + *(int *)(v7 + 3180)) |= 0x100u;
          break;
        default:
          unint64_t v33 = v8;
          unint64_t v34 = v10;
          unint64_t v35 = v11;
          unint64_t v36 = v7;
          unint64_t v37 = v12;
          uint64_t result = PBReaderSkipValueWithTag();
          v5 = (int *)MEMORY[0x263F62270];
          unint64_t v12 = v37;
          unint64_t v13 = 0x26A0D1000;
          unint64_t v7 = v36;
          unint64_t v14 = 0x26A0D1000;
          unint64_t v11 = v35;
          unint64_t v15 = 0x26A0D1000;
          unint64_t v10 = v34;
          unint64_t v16 = 0x26A0D1000;
          unint64_t v8 = v33;
          unint64_t v17 = 0x26A0D1000;
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v89 = *v3;
        unint64_t v90 = *(void *)(a2 + v89);
        if (v90 == -1 || v90 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v91 = *(unsigned char *)(*(void *)(a2 + *v9) + v90);
        *(void *)(a2 + v89) = v90 + 1;
        v41 |= (unint64_t)(v91 & 0x7F) << v87;
        if ((v91 & 0x80) == 0) {
          goto LABEL_140;
        }
        v87 += 7;
        BOOL v24 = v88++ >= 9;
        if (v24)
        {
          LODWORD(v41) = 0;
          goto LABEL_142;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_140:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v41) = 0;
      }
LABEL_142:
      uint64_t v92 = 44;
LABEL_143:
      *(_DWORD *)(a1 + v92) = v41;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularPowerLogLTERRCStateChangeReadFrom(uint64_t a1, uint64_t a2)
{
  v3 = (int *)MEMORY[0x263F62298];
  v4 = (int *)MEMORY[0x263F62288];
  v5 = (int *)MEMORY[0x263F62270];
  if (*(void *)(a2 + (int)*MEMORY[0x263F62298]) < *(void *)(a2 + (int)*MEMORY[0x263F62288]))
  {
    unint64_t v7 = (int *)MEMORY[0x263F62268];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 36) |= 1u;
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              goto LABEL_64;
            }
            v17 += 7;
            BOOL v14 = v18++ >= 9;
            if (v14)
            {
              uint64_t v19 = 0;
              goto LABEL_66;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_64:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v19 = 0;
          }
LABEL_66:
          *(void *)(a1 + 8) = v19;
          continue;
        case 2u:
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 36) |= 0x10u;
          while (2)
          {
            uint64_t v27 = *v3;
            unint64_t v28 = *(void *)(a2 + v27);
            if (v28 == -1 || v28 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
              *(void *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                BOOL v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_70;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_70:
          uint64_t v50 = 28;
          goto LABEL_87;
        case 3u:
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 36) |= 4u;
          while (2)
          {
            uint64_t v32 = *v3;
            unint64_t v33 = *(void *)(a2 + v32);
            if (v33 == -1 || v33 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
              *(void *)(a2 + v32) = v33 + 1;
              v26 |= (unint64_t)(v34 & 0x7F) << v30;
              if (v34 < 0)
              {
                v30 += 7;
                BOOL v14 = v31++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_74;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_74:
          uint64_t v50 = 20;
          goto LABEL_87;
        case 4u:
          char v35 = 0;
          unsigned int v36 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 36) |= 8u;
          while (2)
          {
            uint64_t v37 = *v3;
            unint64_t v38 = *(void *)(a2 + v37);
            if (v38 == -1 || v38 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v39 = *(unsigned char *)(*(void *)(a2 + *v7) + v38);
              *(void *)(a2 + v37) = v38 + 1;
              v26 |= (unint64_t)(v39 & 0x7F) << v35;
              if (v39 < 0)
              {
                v35 += 7;
                BOOL v14 = v36++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_78;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_78:
          uint64_t v50 = 24;
          goto LABEL_87;
        case 5u:
          char v40 = 0;
          unsigned int v41 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 36) |= 0x20u;
          while (2)
          {
            uint64_t v42 = *v3;
            unint64_t v43 = *(void *)(a2 + v42);
            if (v43 == -1 || v43 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v44 = *(unsigned char *)(*(void *)(a2 + *v7) + v43);
              *(void *)(a2 + v42) = v43 + 1;
              v26 |= (unint64_t)(v44 & 0x7F) << v40;
              if (v44 < 0)
              {
                v40 += 7;
                BOOL v14 = v41++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_82;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_82:
          uint64_t v50 = 32;
          goto LABEL_87;
        case 6u:
          char v45 = 0;
          unsigned int v46 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 36) |= 2u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v47 = *v3;
        unint64_t v48 = *(void *)(a2 + v47);
        if (v48 == -1 || v48 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v49 = *(unsigned char *)(*(void *)(a2 + *v7) + v48);
        *(void *)(a2 + v47) = v48 + 1;
        v26 |= (unint64_t)(v49 & 0x7F) << v45;
        if ((v49 & 0x80) == 0) {
          goto LABEL_84;
        }
        v45 += 7;
        BOOL v14 = v46++ >= 9;
        if (v14)
        {
          LODWORD(v26) = 0;
          goto LABEL_86;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_84:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v26) = 0;
      }
LABEL_86:
      uint64_t v50 = 16;
LABEL_87:
      *(_DWORD *)(a1 + v50) = v26;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularPowerLogNRCarrierComponentInfoReadFrom(uint64_t a1, uint64_t a2)
{
  v3 = (int *)MEMORY[0x263F62298];
  v4 = (int *)MEMORY[0x263F62288];
  v5 = (int *)MEMORY[0x263F62270];
  if (*(void *)(a2 + (int)*MEMORY[0x263F62298]) < *(void *)(a2 + (int)*MEMORY[0x263F62288]))
  {
    unint64_t v7 = (int *)MEMORY[0x263F62268];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        char v24 = objc_alloc_init(AWDMETRICSMCarrierComponentInfo);
        [(id)a1 addCarrierInfo:v24];
        if (!PBReaderPlaceMark() || !AWDMETRICSMCarrierComponentInfoReadFrom((uint64_t)v24, a2))
        {

          return 0;
        }
        PBReaderRecallMark();
      }
      else if (v17 == 2)
      {
        char v25 = 0;
        unsigned int v26 = 0;
        uint64_t v27 = 0;
        *(unsigned char *)(a1 + 28) |= 2u;
        while (1)
        {
          uint64_t v28 = *v3;
          unint64_t v29 = *(void *)(a2 + v28);
          if (v29 == -1 || v29 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v30 = *(unsigned char *)(*(void *)(a2 + *v7) + v29);
          *(void *)(a2 + v28) = v29 + 1;
          v27 |= (unint64_t)(v30 & 0x7F) << v25;
          if ((v30 & 0x80) == 0) {
            goto LABEL_45;
          }
          v25 += 7;
          BOOL v14 = v26++ >= 9;
          if (v14)
          {
            LODWORD(v27) = 0;
            goto LABEL_47;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_45:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v27) = 0;
        }
LABEL_47:
        *(_DWORD *)(a1 + 24) = v27;
      }
      else if (v17 == 1)
      {
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v20 = 0;
        *(unsigned char *)(a1 + 28) |= 1u;
        while (1)
        {
          uint64_t v21 = *v3;
          unint64_t v22 = *(void *)(a2 + v21);
          if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
          *(void *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0) {
            goto LABEL_41;
          }
          v18 += 7;
          BOOL v14 = v19++ >= 9;
          if (v14)
          {
            uint64_t v20 = 0;
            goto LABEL_43;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_41:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v20 = 0;
        }
LABEL_43:
        *(void *)(a1 + 8) = v20;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularPowerLogNRCDRXConfigReadFrom(uint64_t a1, uint64_t a2)
{
  v3 = (int *)MEMORY[0x263F62298];
  v4 = (int *)MEMORY[0x263F62288];
  v5 = (int *)MEMORY[0x263F62270];
  if (*(void *)(a2 + (int)*MEMORY[0x263F62298]) < *(void *)(a2 + (int)*MEMORY[0x263F62288]))
  {
    unint64_t v7 = 0x26A0D1000uLL;
    unint64_t v8 = 0x26A0D1000uLL;
    unsigned int v9 = (int *)MEMORY[0x263F62268];
    unint64_t v10 = 0x26A0D1000uLL;
    unint64_t v11 = 0x26A0D1000uLL;
    unint64_t v12 = 0x26A0D1000uLL;
    unint64_t v13 = 0x26A0D1000uLL;
    unint64_t v14 = 0x26A0D1000uLL;
    unint64_t v15 = 0x26A0D1000uLL;
    unint64_t v16 = 0x26A0D1000uLL;
    unint64_t v17 = 0x26A0D1000uLL;
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v18 = 0;
      unsigned int v19 = 0;
      unint64_t v20 = 0;
      while (1)
      {
        uint64_t v21 = *v3;
        unint64_t v22 = *(void *)(a2 + v21);
        if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v23 = *(unsigned char *)(*(void *)(a2 + *v9) + v22);
        *(void *)(a2 + v21) = v22 + 1;
        v20 |= (unint64_t)(v23 & 0x7F) << v18;
        if ((v23 & 0x80) == 0) {
          goto LABEL_12;
        }
        v18 += 7;
        BOOL v24 = v19++ >= 9;
        if (v24)
        {
          unint64_t v20 = 0;
          int v25 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v25 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v20 = 0;
      }
LABEL_14:
      if (v25 || (v20 & 7) == 4) {
        break;
      }
      switch((v20 >> 3))
      {
        case 1u:
          char v27 = 0;
          unsigned int v28 = 0;
          uint64_t v29 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 3272)) |= 1u;
          while (1)
          {
            uint64_t v30 = *v3;
            unint64_t v31 = *(void *)(a2 + v30);
            if (v31 == -1 || v31 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v32 = *(unsigned char *)(*(void *)(a2 + *v9) + v31);
            *(void *)(a2 + v30) = v31 + 1;
            v29 |= (unint64_t)(v32 & 0x7F) << v27;
            if ((v32 & 0x80) == 0) {
              goto LABEL_141;
            }
            v27 += 7;
            BOOL v24 = v28++ >= 9;
            if (v24)
            {
              uint64_t v29 = 0;
              goto LABEL_143;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_141:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v29 = 0;
          }
LABEL_143:
          *(void *)(a1 + *(int *)(v8 + 3276)) = v29;
          continue;
        case 2u:
          char v39 = 0;
          unsigned int v40 = 0;
          uint64_t v41 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 3272)) |= 0x8000u;
          while (2)
          {
            uint64_t v42 = *v3;
            unint64_t v43 = *(void *)(a2 + v42);
            if (v43 == -1 || v43 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v44 = *(unsigned char *)(*(void *)(a2 + *v9) + v43);
              *(void *)(a2 + v42) = v43 + 1;
              v41 |= (unint64_t)(v44 & 0x7F) << v39;
              if (v44 < 0)
              {
                v39 += 7;
                BOOL v24 = v40++ >= 9;
                if (v24)
                {
                  uint64_t v41 = 0;
                  goto LABEL_147;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v41 = 0;
          }
LABEL_147:
          BOOL v122 = v41 != 0;
          uint64_t v123 = *(int *)(v10 + 3280);
          goto LABEL_164;
        case 3u:
          char v45 = 0;
          unsigned int v46 = 0;
          uint64_t v47 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 3272)) |= 8u;
          while (2)
          {
            uint64_t v48 = *v3;
            unint64_t v49 = *(void *)(a2 + v48);
            if (v49 == -1 || v49 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v50 = *(unsigned char *)(*(void *)(a2 + *v9) + v49);
              *(void *)(a2 + v48) = v49 + 1;
              v47 |= (unint64_t)(v50 & 0x7F) << v45;
              if (v50 < 0)
              {
                v45 += 7;
                BOOL v24 = v46++ >= 9;
                if (v24)
                {
                  LODWORD(v47) = 0;
                  goto LABEL_151;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v47) = 0;
          }
LABEL_151:
          uint64_t v124 = *(int *)(v11 + 3284);
          goto LABEL_209;
        case 4u:
          char v51 = 0;
          unsigned int v52 = 0;
          uint64_t v47 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 3272)) |= 0x10u;
          while (2)
          {
            uint64_t v53 = *v3;
            unint64_t v54 = *(void *)(a2 + v53);
            if (v54 == -1 || v54 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v55 = *(unsigned char *)(*(void *)(a2 + *v9) + v54);
              *(void *)(a2 + v53) = v54 + 1;
              v47 |= (unint64_t)(v55 & 0x7F) << v51;
              if (v55 < 0)
              {
                v51 += 7;
                BOOL v24 = v52++ >= 9;
                if (v24)
                {
                  LODWORD(v47) = 0;
                  goto LABEL_155;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v47) = 0;
          }
LABEL_155:
          uint64_t v124 = *(int *)(v12 + 3288);
          goto LABEL_209;
        case 5u:
          char v56 = 0;
          unsigned int v57 = 0;
          uint64_t v47 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 3272)) |= 2u;
          while (2)
          {
            uint64_t v58 = *v3;
            unint64_t v59 = *(void *)(a2 + v58);
            if (v59 == -1 || v59 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v60 = *(unsigned char *)(*(void *)(a2 + *v9) + v59);
              *(void *)(a2 + v58) = v59 + 1;
              v47 |= (unint64_t)(v60 & 0x7F) << v56;
              if (v60 < 0)
              {
                v56 += 7;
                BOOL v24 = v57++ >= 9;
                if (v24)
                {
                  LODWORD(v47) = 0;
                  goto LABEL_159;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v47) = 0;
          }
LABEL_159:
          uint64_t v124 = *(int *)(v13 + 3292);
          goto LABEL_209;
        case 6u:
          char v61 = 0;
          unsigned int v62 = 0;
          uint64_t v63 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 3272)) |= 0x10000u;
          while (2)
          {
            uint64_t v64 = *v3;
            unint64_t v65 = *(void *)(a2 + v64);
            if (v65 == -1 || v65 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v66 = *(unsigned char *)(*(void *)(a2 + *v9) + v65);
              *(void *)(a2 + v64) = v65 + 1;
              v63 |= (unint64_t)(v66 & 0x7F) << v61;
              if (v66 < 0)
              {
                v61 += 7;
                BOOL v24 = v62++ >= 9;
                if (v24)
                {
                  uint64_t v63 = 0;
                  goto LABEL_163;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v63 = 0;
          }
LABEL_163:
          BOOL v122 = v63 != 0;
          uint64_t v123 = *(int *)(v14 + 3296);
LABEL_164:
          *(unsigned char *)(a1 + v123) = v122;
          continue;
        case 7u:
          char v67 = 0;
          unsigned int v68 = 0;
          uint64_t v47 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 3272)) |= 0x400u;
          while (2)
          {
            uint64_t v69 = *v3;
            unint64_t v70 = *(void *)(a2 + v69);
            if (v70 == -1 || v70 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v71 = *(unsigned char *)(*(void *)(a2 + *v9) + v70);
              *(void *)(a2 + v69) = v70 + 1;
              v47 |= (unint64_t)(v71 & 0x7F) << v67;
              if (v71 < 0)
              {
                v67 += 7;
                BOOL v24 = v68++ >= 9;
                if (v24)
                {
                  LODWORD(v47) = 0;
                  goto LABEL_168;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v47) = 0;
          }
LABEL_168:
          uint64_t v124 = *(int *)(v15 + 3300);
          goto LABEL_209;
        case 8u:
          char v72 = 0;
          unsigned int v73 = 0;
          uint64_t v47 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 3272)) |= 0x800u;
          while (2)
          {
            uint64_t v74 = *v3;
            unint64_t v75 = *(void *)(a2 + v74);
            if (v75 == -1 || v75 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v76 = *(unsigned char *)(*(void *)(a2 + *v9) + v75);
              *(void *)(a2 + v74) = v75 + 1;
              v47 |= (unint64_t)(v76 & 0x7F) << v72;
              if (v76 < 0)
              {
                v72 += 7;
                BOOL v24 = v73++ >= 9;
                if (v24)
                {
                  LODWORD(v47) = 0;
                  goto LABEL_172;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v47) = 0;
          }
LABEL_172:
          uint64_t v124 = *(int *)(v16 + 3304);
          goto LABEL_209;
        case 9u:
          char v77 = 0;
          unsigned int v78 = 0;
          uint64_t v47 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 3272)) |= 0x100u;
          while (2)
          {
            uint64_t v79 = *v3;
            unint64_t v80 = *(void *)(a2 + v79);
            if (v80 == -1 || v80 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v81 = *(unsigned char *)(*(void *)(a2 + *v9) + v80);
              *(void *)(a2 + v79) = v80 + 1;
              v47 |= (unint64_t)(v81 & 0x7F) << v77;
              if (v81 < 0)
              {
                v77 += 7;
                BOOL v24 = v78++ >= 9;
                if (v24)
                {
                  LODWORD(v47) = 0;
                  goto LABEL_176;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v47) = 0;
          }
LABEL_176:
          uint64_t v124 = *(int *)(v17 + 3308);
          goto LABEL_209;
        case 0xAu:
          char v82 = 0;
          unsigned int v83 = 0;
          uint64_t v47 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 3272)) |= 0x200u;
          while (2)
          {
            uint64_t v84 = *v3;
            unint64_t v85 = *(void *)(a2 + v84);
            if (v85 == -1 || v85 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v86 = *(unsigned char *)(*(void *)(a2 + *v9) + v85);
              *(void *)(a2 + v84) = v85 + 1;
              v47 |= (unint64_t)(v86 & 0x7F) << v82;
              if (v86 < 0)
              {
                v82 += 7;
                BOOL v24 = v83++ >= 9;
                if (v24)
                {
                  LODWORD(v47) = 0;
                  goto LABEL_180;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v47) = 0;
          }
LABEL_180:
          uint64_t v124 = 48;
          goto LABEL_209;
        case 0xBu:
          char v87 = 0;
          unsigned int v88 = 0;
          uint64_t v47 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 3272)) |= 0x20u;
          while (2)
          {
            uint64_t v89 = *v3;
            unint64_t v90 = *(void *)(a2 + v89);
            if (v90 == -1 || v90 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v91 = *(unsigned char *)(*(void *)(a2 + *v9) + v90);
              *(void *)(a2 + v89) = v90 + 1;
              v47 |= (unint64_t)(v91 & 0x7F) << v87;
              if (v91 < 0)
              {
                v87 += 7;
                BOOL v24 = v88++ >= 9;
                if (v24)
                {
                  LODWORD(v47) = 0;
                  goto LABEL_184;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v47) = 0;
          }
LABEL_184:
          uint64_t v124 = 32;
          goto LABEL_209;
        case 0xCu:
          char v92 = 0;
          unsigned int v93 = 0;
          uint64_t v47 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 3272)) |= 0x40u;
          while (2)
          {
            uint64_t v94 = *v3;
            unint64_t v95 = *(void *)(a2 + v94);
            if (v95 == -1 || v95 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v96 = *(unsigned char *)(*(void *)(a2 + *v9) + v95);
              *(void *)(a2 + v94) = v95 + 1;
              v47 |= (unint64_t)(v96 & 0x7F) << v92;
              if (v96 < 0)
              {
                v92 += 7;
                BOOL v24 = v93++ >= 9;
                if (v24)
                {
                  LODWORD(v47) = 0;
                  goto LABEL_188;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v47) = 0;
          }
LABEL_188:
          uint64_t v124 = 36;
          goto LABEL_209;
        case 0xDu:
          char v97 = 0;
          unsigned int v98 = 0;
          uint64_t v47 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 3272)) |= 0x80u;
          while (2)
          {
            uint64_t v99 = *v3;
            unint64_t v100 = *(void *)(a2 + v99);
            if (v100 == -1 || v100 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v101 = *(unsigned char *)(*(void *)(a2 + *v9) + v100);
              *(void *)(a2 + v99) = v100 + 1;
              v47 |= (unint64_t)(v101 & 0x7F) << v97;
              if (v101 < 0)
              {
                v97 += 7;
                BOOL v24 = v98++ >= 9;
                if (v24)
                {
                  LODWORD(v47) = 0;
                  goto LABEL_192;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v47) = 0;
          }
LABEL_192:
          uint64_t v124 = 40;
          goto LABEL_209;
        case 0xEu:
          char v102 = 0;
          unsigned int v103 = 0;
          uint64_t v47 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 3272)) |= 0x1000u;
          while (2)
          {
            uint64_t v104 = *v3;
            unint64_t v105 = *(void *)(a2 + v104);
            if (v105 == -1 || v105 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v106 = *(unsigned char *)(*(void *)(a2 + *v9) + v105);
              *(void *)(a2 + v104) = v105 + 1;
              v47 |= (unint64_t)(v106 & 0x7F) << v102;
              if (v106 < 0)
              {
                v102 += 7;
                BOOL v24 = v103++ >= 9;
                if (v24)
                {
                  LODWORD(v47) = 0;
                  goto LABEL_196;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v47) = 0;
          }
LABEL_196:
          uint64_t v124 = 60;
          goto LABEL_209;
        case 0xFu:
          char v107 = 0;
          unsigned int v108 = 0;
          uint64_t v47 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 3272)) |= 0x2000u;
          while (2)
          {
            uint64_t v109 = *v3;
            unint64_t v110 = *(void *)(a2 + v109);
            if (v110 == -1 || v110 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v111 = *(unsigned char *)(*(void *)(a2 + *v9) + v110);
              *(void *)(a2 + v109) = v110 + 1;
              v47 |= (unint64_t)(v111 & 0x7F) << v107;
              if (v111 < 0)
              {
                v107 += 7;
                BOOL v24 = v108++ >= 9;
                if (v24)
                {
                  LODWORD(v47) = 0;
                  goto LABEL_200;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v47) = 0;
          }
LABEL_200:
          uint64_t v124 = 64;
          goto LABEL_209;
        case 0x10u:
          char v112 = 0;
          unsigned int v113 = 0;
          uint64_t v47 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 3272)) |= 0x4000u;
          while (2)
          {
            uint64_t v114 = *v3;
            unint64_t v115 = *(void *)(a2 + v114);
            if (v115 == -1 || v115 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v116 = *(unsigned char *)(*(void *)(a2 + *v9) + v115);
              *(void *)(a2 + v114) = v115 + 1;
              v47 |= (unint64_t)(v116 & 0x7F) << v112;
              if (v116 < 0)
              {
                v112 += 7;
                BOOL v24 = v113++ >= 9;
                if (v24)
                {
                  LODWORD(v47) = 0;
                  goto LABEL_204;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v47) = 0;
          }
LABEL_204:
          uint64_t v124 = 68;
          goto LABEL_209;
        case 0x11u:
          char v117 = 0;
          unsigned int v118 = 0;
          uint64_t v47 = 0;
          *(_DWORD *)(a1 + *(int *)(v7 + 3272)) |= 4u;
          break;
        default:
          unint64_t v33 = v8;
          unint64_t v34 = v10;
          unint64_t v35 = v11;
          unint64_t v36 = v7;
          unint64_t v37 = v12;
          uint64_t result = PBReaderSkipValueWithTag();
          v5 = (int *)MEMORY[0x263F62270];
          unint64_t v12 = v37;
          unint64_t v13 = 0x26A0D1000;
          unint64_t v7 = v36;
          unint64_t v14 = 0x26A0D1000;
          unint64_t v11 = v35;
          unint64_t v15 = 0x26A0D1000;
          unint64_t v10 = v34;
          unint64_t v17 = 0x26A0D1000;
          unint64_t v8 = v33;
          unint64_t v16 = 0x26A0D1000;
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v119 = *v3;
        unint64_t v120 = *(void *)(a2 + v119);
        if (v120 == -1 || v120 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v121 = *(unsigned char *)(*(void *)(a2 + *v9) + v120);
        *(void *)(a2 + v119) = v120 + 1;
        v47 |= (unint64_t)(v121 & 0x7F) << v117;
        if ((v121 & 0x80) == 0) {
          goto LABEL_206;
        }
        v117 += 7;
        BOOL v24 = v118++ >= 9;
        if (v24)
        {
          LODWORD(v47) = 0;
          goto LABEL_208;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_206:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v47) = 0;
      }
LABEL_208:
      uint64_t v124 = 20;
LABEL_209:
      *(_DWORD *)(a1 + v124) = v47;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularPowerLogNRNSAENDCEventReadFrom(uint64_t a1, uint64_t a2)
{
  v3 = (int *)MEMORY[0x263F62298];
  v4 = (int *)MEMORY[0x263F62288];
  v5 = (int *)MEMORY[0x263F62270];
  if (*(void *)(a2 + (int)*MEMORY[0x263F62298]) < *(void *)(a2 + (int)*MEMORY[0x263F62288]))
  {
    unint64_t v7 = (int *)MEMORY[0x263F62268];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 28) |= 1u;
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              goto LABEL_50;
            }
            v17 += 7;
            BOOL v14 = v18++ >= 9;
            if (v14)
            {
              uint64_t v19 = 0;
              goto LABEL_52;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_50:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v19 = 0;
          }
LABEL_52:
          *(void *)(a1 + 8) = v19;
          continue;
        case 2u:
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 28) |= 2u;
          while (2)
          {
            uint64_t v27 = *v3;
            unint64_t v28 = *(void *)(a2 + v27);
            if (v28 == -1 || v28 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
              *(void *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                BOOL v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_56;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_56:
          uint64_t v40 = 16;
          goto LABEL_65;
        case 3u:
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 28) |= 8u;
          while (2)
          {
            uint64_t v32 = *v3;
            unint64_t v33 = *(void *)(a2 + v32);
            if (v33 == -1 || v33 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
              *(void *)(a2 + v32) = v33 + 1;
              v26 |= (unint64_t)(v34 & 0x7F) << v30;
              if (v34 < 0)
              {
                v30 += 7;
                BOOL v14 = v31++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_60;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_60:
          uint64_t v40 = 24;
          goto LABEL_65;
        case 4u:
          char v35 = 0;
          unsigned int v36 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 28) |= 4u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v37 = *v3;
        unint64_t v38 = *(void *)(a2 + v37);
        if (v38 == -1 || v38 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v39 = *(unsigned char *)(*(void *)(a2 + *v7) + v38);
        *(void *)(a2 + v37) = v38 + 1;
        v26 |= (unint64_t)(v39 & 0x7F) << v35;
        if ((v39 & 0x80) == 0) {
          goto LABEL_62;
        }
        v35 += 7;
        BOOL v14 = v36++ >= 9;
        if (v14)
        {
          LODWORD(v26) = 0;
          goto LABEL_64;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_62:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v26) = 0;
      }
LABEL_64:
      uint64_t v40 = 20;
LABEL_65:
      *(_DWORD *)(a1 + v40) = v26;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularPowerLogNRSARRCStateChangeReadFrom(uint64_t a1, uint64_t a2)
{
  v3 = (int *)MEMORY[0x263F62298];
  v4 = (int *)MEMORY[0x263F62288];
  v5 = (int *)MEMORY[0x263F62270];
  if (*(void *)(a2 + (int)*MEMORY[0x263F62298]) < *(void *)(a2 + (int)*MEMORY[0x263F62288]))
  {
    unint64_t v7 = (int *)MEMORY[0x263F62268];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 40) |= 1u;
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              goto LABEL_71;
            }
            v17 += 7;
            BOOL v14 = v18++ >= 9;
            if (v14)
            {
              uint64_t v19 = 0;
              goto LABEL_73;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_71:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v19 = 0;
          }
LABEL_73:
          *(void *)(a1 + 8) = v19;
          continue;
        case 2u:
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 40) |= 0x20u;
          while (2)
          {
            uint64_t v27 = *v3;
            unint64_t v28 = *(void *)(a2 + v27);
            if (v28 == -1 || v28 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
              *(void *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                BOOL v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_77;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_77:
          uint64_t v55 = 32;
          goto LABEL_98;
        case 3u:
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 40) |= 8u;
          while (2)
          {
            uint64_t v32 = *v3;
            unint64_t v33 = *(void *)(a2 + v32);
            if (v33 == -1 || v33 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
              *(void *)(a2 + v32) = v33 + 1;
              v26 |= (unint64_t)(v34 & 0x7F) << v30;
              if (v34 < 0)
              {
                v30 += 7;
                BOOL v14 = v31++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_81;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_81:
          uint64_t v55 = 24;
          goto LABEL_98;
        case 4u:
          char v35 = 0;
          unsigned int v36 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 40) |= 0x10u;
          while (2)
          {
            uint64_t v37 = *v3;
            unint64_t v38 = *(void *)(a2 + v37);
            if (v38 == -1 || v38 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v39 = *(unsigned char *)(*(void *)(a2 + *v7) + v38);
              *(void *)(a2 + v37) = v38 + 1;
              v26 |= (unint64_t)(v39 & 0x7F) << v35;
              if (v39 < 0)
              {
                v35 += 7;
                BOOL v14 = v36++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_85;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_85:
          uint64_t v55 = 28;
          goto LABEL_98;
        case 5u:
          char v40 = 0;
          unsigned int v41 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 40) |= 0x40u;
          while (2)
          {
            uint64_t v42 = *v3;
            unint64_t v43 = *(void *)(a2 + v42);
            if (v43 == -1 || v43 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v44 = *(unsigned char *)(*(void *)(a2 + *v7) + v43);
              *(void *)(a2 + v42) = v43 + 1;
              v26 |= (unint64_t)(v44 & 0x7F) << v40;
              if (v44 < 0)
              {
                v40 += 7;
                BOOL v14 = v41++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_89;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_89:
          uint64_t v55 = 36;
          goto LABEL_98;
        case 6u:
          char v45 = 0;
          unsigned int v46 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 40) |= 2u;
          while (2)
          {
            uint64_t v47 = *v3;
            unint64_t v48 = *(void *)(a2 + v47);
            if (v48 == -1 || v48 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v49 = *(unsigned char *)(*(void *)(a2 + *v7) + v48);
              *(void *)(a2 + v47) = v48 + 1;
              v26 |= (unint64_t)(v49 & 0x7F) << v45;
              if (v49 < 0)
              {
                v45 += 7;
                BOOL v14 = v46++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_93;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_93:
          uint64_t v55 = 16;
          goto LABEL_98;
        case 7u:
          char v50 = 0;
          unsigned int v51 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 40) |= 4u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v52 = *v3;
        unint64_t v53 = *(void *)(a2 + v52);
        if (v53 == -1 || v53 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v54 = *(unsigned char *)(*(void *)(a2 + *v7) + v53);
        *(void *)(a2 + v52) = v53 + 1;
        v26 |= (unint64_t)(v54 & 0x7F) << v50;
        if ((v54 & 0x80) == 0) {
          goto LABEL_95;
        }
        v50 += 7;
        BOOL v14 = v51++ >= 9;
        if (v14)
        {
          LODWORD(v26) = 0;
          goto LABEL_97;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_95:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v26) = 0;
      }
LABEL_97:
      uint64_t v55 = 20;
LABEL_98:
      *(_DWORD *)(a1 + v55) = v26;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularPowerLogNRSCGRelReadFrom(uint64_t a1, uint64_t a2)
{
  v3 = (int *)MEMORY[0x263F62298];
  v4 = (int *)MEMORY[0x263F62288];
  v5 = (int *)MEMORY[0x263F62270];
  if (*(void *)(a2 + (int)*MEMORY[0x263F62298]) < *(void *)(a2 + (int)*MEMORY[0x263F62288]))
  {
    unint64_t v7 = (int *)MEMORY[0x263F62268];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 28) |= 1u;
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              goto LABEL_50;
            }
            v17 += 7;
            BOOL v14 = v18++ >= 9;
            if (v14)
            {
              uint64_t v19 = 0;
              goto LABEL_52;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_50:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v19 = 0;
          }
LABEL_52:
          *(void *)(a1 + 8) = v19;
          continue;
        case 2u:
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 28) |= 2u;
          while (2)
          {
            uint64_t v27 = *v3;
            unint64_t v28 = *(void *)(a2 + v27);
            if (v28 == -1 || v28 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
              *(void *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                BOOL v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_56;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_56:
          uint64_t v40 = 16;
          goto LABEL_65;
        case 3u:
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 28) |= 8u;
          while (2)
          {
            uint64_t v32 = *v3;
            unint64_t v33 = *(void *)(a2 + v32);
            if (v33 == -1 || v33 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
              *(void *)(a2 + v32) = v33 + 1;
              v26 |= (unint64_t)(v34 & 0x7F) << v30;
              if (v34 < 0)
              {
                v30 += 7;
                BOOL v14 = v31++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_60;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_60:
          uint64_t v40 = 24;
          goto LABEL_65;
        case 4u:
          char v35 = 0;
          unsigned int v36 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 28) |= 4u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v37 = *v3;
        unint64_t v38 = *(void *)(a2 + v37);
        if (v38 == -1 || v38 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v39 = *(unsigned char *)(*(void *)(a2 + *v7) + v38);
        *(void *)(a2 + v37) = v38 + 1;
        v26 |= (unint64_t)(v39 & 0x7F) << v35;
        if ((v39 & 0x80) == 0) {
          goto LABEL_62;
        }
        v35 += 7;
        BOOL v14 = v36++ >= 9;
        if (v14)
        {
          LODWORD(v26) = 0;
          goto LABEL_64;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_62:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v26) = 0;
      }
LABEL_64:
      uint64_t v40 = 20;
LABEL_65:
      *(_DWORD *)(a1 + v40) = v26;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularPowerLogPLMNScanEventReadFrom(uint64_t a1, uint64_t a2)
{
  v3 = (int *)MEMORY[0x263F62298];
  v4 = (int *)MEMORY[0x263F62288];
  v5 = (int *)MEMORY[0x263F62270];
  if (*(void *)(a2 + (int)*MEMORY[0x263F62298]) < *(void *)(a2 + (int)*MEMORY[0x263F62288]))
  {
    unint64_t v7 = (int *)MEMORY[0x263F62268];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 36) |= 1u;
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              goto LABEL_64;
            }
            v17 += 7;
            BOOL v14 = v18++ >= 9;
            if (v14)
            {
              uint64_t v19 = 0;
              goto LABEL_66;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_64:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v19 = 0;
          }
LABEL_66:
          *(void *)(a1 + 8) = v19;
          continue;
        case 2u:
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 36) |= 8u;
          while (2)
          {
            uint64_t v27 = *v3;
            unint64_t v28 = *(void *)(a2 + v27);
            if (v28 == -1 || v28 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
              *(void *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                BOOL v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_70;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_70:
          uint64_t v50 = 24;
          goto LABEL_87;
        case 3u:
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 36) |= 0x10u;
          while (2)
          {
            uint64_t v32 = *v3;
            unint64_t v33 = *(void *)(a2 + v32);
            if (v33 == -1 || v33 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
              *(void *)(a2 + v32) = v33 + 1;
              v26 |= (unint64_t)(v34 & 0x7F) << v30;
              if (v34 < 0)
              {
                v30 += 7;
                BOOL v14 = v31++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_74;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_74:
          uint64_t v50 = 28;
          goto LABEL_87;
        case 4u:
          char v35 = 0;
          unsigned int v36 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 36) |= 4u;
          while (2)
          {
            uint64_t v37 = *v3;
            unint64_t v38 = *(void *)(a2 + v37);
            if (v38 == -1 || v38 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v39 = *(unsigned char *)(*(void *)(a2 + *v7) + v38);
              *(void *)(a2 + v37) = v38 + 1;
              v26 |= (unint64_t)(v39 & 0x7F) << v35;
              if (v39 < 0)
              {
                v35 += 7;
                BOOL v14 = v36++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_78;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_78:
          uint64_t v50 = 20;
          goto LABEL_87;
        case 5u:
          char v40 = 0;
          unsigned int v41 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 36) |= 2u;
          while (2)
          {
            uint64_t v42 = *v3;
            unint64_t v43 = *(void *)(a2 + v42);
            if (v43 == -1 || v43 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v44 = *(unsigned char *)(*(void *)(a2 + *v7) + v43);
              *(void *)(a2 + v42) = v43 + 1;
              v26 |= (unint64_t)(v44 & 0x7F) << v40;
              if (v44 < 0)
              {
                v40 += 7;
                BOOL v14 = v41++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_82;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_82:
          uint64_t v50 = 16;
          goto LABEL_87;
        case 6u:
          char v45 = 0;
          unsigned int v46 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 36) |= 0x20u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v47 = *v3;
        unint64_t v48 = *(void *)(a2 + v47);
        if (v48 == -1 || v48 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v49 = *(unsigned char *)(*(void *)(a2 + *v7) + v48);
        *(void *)(a2 + v47) = v48 + 1;
        v26 |= (unint64_t)(v49 & 0x7F) << v45;
        if ((v49 & 0x80) == 0) {
          goto LABEL_84;
        }
        v45 += 7;
        BOOL v14 = v46++ >= 9;
        if (v14)
        {
          LODWORD(v26) = 0;
          goto LABEL_86;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_84:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v26) = 0;
      }
LABEL_86:
      uint64_t v50 = 32;
LABEL_87:
      *(_DWORD *)(a1 + v50) = v26;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularPowerLogPLMNSearchEventReadFrom(uint64_t a1, uint64_t a2)
{
  v3 = (int *)MEMORY[0x263F62298];
  v4 = (int *)MEMORY[0x263F62288];
  v5 = (int *)MEMORY[0x263F62270];
  if (*(void *)(a2 + (int)*MEMORY[0x263F62298]) < *(void *)(a2 + (int)*MEMORY[0x263F62288]))
  {
    unint64_t v7 = (int *)MEMORY[0x263F62268];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 40) |= 1u;
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              goto LABEL_71;
            }
            v17 += 7;
            BOOL v14 = v18++ >= 9;
            if (v14)
            {
              uint64_t v19 = 0;
              goto LABEL_73;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_71:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v19 = 0;
          }
LABEL_73:
          *(void *)(a1 + 8) = v19;
          continue;
        case 2u:
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 40) |= 0x20u;
          while (2)
          {
            uint64_t v27 = *v3;
            unint64_t v28 = *(void *)(a2 + v27);
            if (v28 == -1 || v28 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
              *(void *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                BOOL v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_77;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_77:
          uint64_t v55 = 32;
          goto LABEL_98;
        case 3u:
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 40) |= 8u;
          while (2)
          {
            uint64_t v32 = *v3;
            unint64_t v33 = *(void *)(a2 + v32);
            if (v33 == -1 || v33 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
              *(void *)(a2 + v32) = v33 + 1;
              v26 |= (unint64_t)(v34 & 0x7F) << v30;
              if (v34 < 0)
              {
                v30 += 7;
                BOOL v14 = v31++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_81;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_81:
          uint64_t v55 = 24;
          goto LABEL_98;
        case 4u:
          char v35 = 0;
          unsigned int v36 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 40) |= 0x10u;
          while (2)
          {
            uint64_t v37 = *v3;
            unint64_t v38 = *(void *)(a2 + v37);
            if (v38 == -1 || v38 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v39 = *(unsigned char *)(*(void *)(a2 + *v7) + v38);
              *(void *)(a2 + v37) = v38 + 1;
              v26 |= (unint64_t)(v39 & 0x7F) << v35;
              if (v39 < 0)
              {
                v35 += 7;
                BOOL v14 = v36++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_85;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_85:
          uint64_t v55 = 28;
          goto LABEL_98;
        case 5u:
          char v40 = 0;
          unsigned int v41 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 40) |= 4u;
          while (2)
          {
            uint64_t v42 = *v3;
            unint64_t v43 = *(void *)(a2 + v42);
            if (v43 == -1 || v43 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v44 = *(unsigned char *)(*(void *)(a2 + *v7) + v43);
              *(void *)(a2 + v42) = v43 + 1;
              v26 |= (unint64_t)(v44 & 0x7F) << v40;
              if (v44 < 0)
              {
                v40 += 7;
                BOOL v14 = v41++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_89;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_89:
          uint64_t v55 = 20;
          goto LABEL_98;
        case 6u:
          char v45 = 0;
          unsigned int v46 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 40) |= 2u;
          while (2)
          {
            uint64_t v47 = *v3;
            unint64_t v48 = *(void *)(a2 + v47);
            if (v48 == -1 || v48 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v49 = *(unsigned char *)(*(void *)(a2 + *v7) + v48);
              *(void *)(a2 + v47) = v48 + 1;
              v26 |= (unint64_t)(v49 & 0x7F) << v45;
              if (v49 < 0)
              {
                v45 += 7;
                BOOL v14 = v46++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_93;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_93:
          uint64_t v55 = 16;
          goto LABEL_98;
        case 7u:
          char v50 = 0;
          unsigned int v51 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 40) |= 0x40u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v52 = *v3;
        unint64_t v53 = *(void *)(a2 + v52);
        if (v53 == -1 || v53 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v54 = *(unsigned char *)(*(void *)(a2 + *v7) + v53);
        *(void *)(a2 + v52) = v53 + 1;
        v26 |= (unint64_t)(v54 & 0x7F) << v50;
        if ((v54 & 0x80) == 0) {
          goto LABEL_95;
        }
        v50 += 7;
        BOOL v14 = v51++ >= 9;
        if (v14)
        {
          LODWORD(v26) = 0;
          goto LABEL_97;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_95:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v26) = 0;
      }
LABEL_97:
      uint64_t v55 = 36;
LABEL_98:
      *(_DWORD *)(a1 + v55) = v26;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularPowerLogRATChangeEventReadFrom(uint64_t a1, uint64_t a2)
{
  v3 = (int *)MEMORY[0x263F62298];
  v4 = (int *)MEMORY[0x263F62288];
  v5 = (int *)MEMORY[0x263F62270];
  if (*(void *)(a2 + (int)*MEMORY[0x263F62298]) < *(void *)(a2 + (int)*MEMORY[0x263F62288]))
  {
    unint64_t v7 = (int *)MEMORY[0x263F62268];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        char v24 = 0;
        unsigned int v25 = 0;
        uint64_t v26 = 0;
        *(unsigned char *)(a1 + 24) |= 4u;
        while (1)
        {
          uint64_t v27 = *v3;
          unint64_t v28 = *(void *)(a2 + v27);
          if (v28 == -1 || v28 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
          *(void *)(a2 + v27) = v28 + 1;
          v26 |= (unint64_t)(v29 & 0x7F) << v24;
          if ((v29 & 0x80) == 0) {
            goto LABEL_49;
          }
          v24 += 7;
          BOOL v14 = v25++ >= 9;
          if (v14)
          {
            LODWORD(v26) = 0;
            goto LABEL_51;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_49:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v26) = 0;
        }
LABEL_51:
        uint64_t v36 = 20;
      }
      else
      {
        if (v17 != 2)
        {
          if (v17 == 1)
          {
            char v18 = 0;
            unsigned int v19 = 0;
            uint64_t v20 = 0;
            *(unsigned char *)(a1 + 24) |= 1u;
            while (1)
            {
              uint64_t v21 = *v3;
              unint64_t v22 = *(void *)(a2 + v21);
              if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
              *(void *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0) {
                goto LABEL_45;
              }
              v18 += 7;
              BOOL v14 = v19++ >= 9;
              if (v14)
              {
                uint64_t v20 = 0;
                goto LABEL_47;
              }
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_45:
            if (*(unsigned char *)(a2 + *v5)) {
              uint64_t v20 = 0;
            }
LABEL_47:
            *(void *)(a1 + 8) = v20;
          }
          else
          {
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
          }
          continue;
        }
        char v30 = 0;
        unsigned int v31 = 0;
        uint64_t v26 = 0;
        *(unsigned char *)(a1 + 24) |= 2u;
        while (1)
        {
          uint64_t v32 = *v3;
          unint64_t v33 = *(void *)(a2 + v32);
          if (v33 == -1 || v33 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
          *(void *)(a2 + v32) = v33 + 1;
          v26 |= (unint64_t)(v34 & 0x7F) << v30;
          if ((v34 & 0x80) == 0) {
            goto LABEL_53;
          }
          v30 += 7;
          BOOL v14 = v31++ >= 9;
          if (v14)
          {
            LODWORD(v26) = 0;
            goto LABEL_55;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_53:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v26) = 0;
        }
LABEL_55:
        uint64_t v36 = 16;
      }
      *(_DWORD *)(a1 + v36) = v26;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularPowerLogServiceEventReadFrom(uint64_t a1, uint64_t a2)
{
  v3 = (int *)MEMORY[0x263F62298];
  v4 = (int *)MEMORY[0x263F62288];
  v5 = (int *)MEMORY[0x263F62270];
  if (*(void *)(a2 + (int)*MEMORY[0x263F62298]) < *(void *)(a2 + (int)*MEMORY[0x263F62288]))
  {
    unint64_t v7 = (int *)MEMORY[0x263F62268];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        char v24 = 0;
        unsigned int v25 = 0;
        uint64_t v26 = 0;
        *(unsigned char *)(a1 + 24) |= 4u;
        while (1)
        {
          uint64_t v27 = *v3;
          unint64_t v28 = *(void *)(a2 + v27);
          if (v28 == -1 || v28 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
          *(void *)(a2 + v27) = v28 + 1;
          v26 |= (unint64_t)(v29 & 0x7F) << v24;
          if ((v29 & 0x80) == 0) {
            goto LABEL_49;
          }
          v24 += 7;
          BOOL v14 = v25++ >= 9;
          if (v14)
          {
            LODWORD(v26) = 0;
            goto LABEL_51;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_49:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v26) = 0;
        }
LABEL_51:
        uint64_t v36 = 20;
      }
      else
      {
        if (v17 != 2)
        {
          if (v17 == 1)
          {
            char v18 = 0;
            unsigned int v19 = 0;
            uint64_t v20 = 0;
            *(unsigned char *)(a1 + 24) |= 1u;
            while (1)
            {
              uint64_t v21 = *v3;
              unint64_t v22 = *(void *)(a2 + v21);
              if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
              *(void *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0) {
                goto LABEL_45;
              }
              v18 += 7;
              BOOL v14 = v19++ >= 9;
              if (v14)
              {
                uint64_t v20 = 0;
                goto LABEL_47;
              }
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_45:
            if (*(unsigned char *)(a2 + *v5)) {
              uint64_t v20 = 0;
            }
LABEL_47:
            *(void *)(a1 + 8) = v20;
          }
          else
          {
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
          }
          continue;
        }
        char v30 = 0;
        unsigned int v31 = 0;
        uint64_t v26 = 0;
        *(unsigned char *)(a1 + 24) |= 2u;
        while (1)
        {
          uint64_t v32 = *v3;
          unint64_t v33 = *(void *)(a2 + v32);
          if (v33 == -1 || v33 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
          *(void *)(a2 + v32) = v33 + 1;
          v26 |= (unint64_t)(v34 & 0x7F) << v30;
          if ((v34 & 0x80) == 0) {
            goto LABEL_53;
          }
          v30 += 7;
          BOOL v14 = v31++ >= 9;
          if (v14)
          {
            LODWORD(v26) = 0;
            goto LABEL_55;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_53:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v26) = 0;
        }
LABEL_55:
        uint64_t v36 = 16;
      }
      *(_DWORD *)(a1 + v36) = v26;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularPowerLogShutdownReadFrom(uint64_t a1, uint64_t a2)
{
  v3 = (int *)MEMORY[0x263F62298];
  v4 = (int *)MEMORY[0x263F62288];
  v5 = (int *)MEMORY[0x263F62270];
  if (*(void *)(a2 + (int)*MEMORY[0x263F62298]) < *(void *)(a2 + (int)*MEMORY[0x263F62288]))
  {
    unint64_t v7 = (int *)MEMORY[0x263F62268];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 32) |= 2u;
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              goto LABEL_50;
            }
            v17 += 7;
            BOOL v14 = v18++ >= 9;
            if (v14)
            {
              uint64_t v19 = 0;
              goto LABEL_52;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_50:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v19 = 0;
          }
LABEL_52:
          uint64_t v40 = 16;
          goto LABEL_61;
        case 2u:
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 32) |= 4u;
          while (2)
          {
            uint64_t v27 = *v3;
            unint64_t v28 = *(void *)(a2 + v27);
            if (v28 == -1 || v28 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
              *(void *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                BOOL v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_56;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_56:
          uint64_t v41 = 24;
          goto LABEL_66;
        case 3u:
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 32) |= 1u;
          while (2)
          {
            uint64_t v32 = *v3;
            unint64_t v33 = *(void *)(a2 + v32);
            if (v33 == -1 || v33 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
              *(void *)(a2 + v32) = v33 + 1;
              v19 |= (unint64_t)(v34 & 0x7F) << v30;
              if (v34 < 0)
              {
                v30 += 7;
                BOOL v14 = v31++ >= 9;
                if (v14)
                {
                  uint64_t v19 = 0;
                  goto LABEL_60;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v19 = 0;
          }
LABEL_60:
          uint64_t v40 = 8;
LABEL_61:
          *(void *)(a1 + v40) = v19;
          continue;
        case 4u:
          char v35 = 0;
          unsigned int v36 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 32) |= 8u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v37 = *v3;
        unint64_t v38 = *(void *)(a2 + v37);
        if (v38 == -1 || v38 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v39 = *(unsigned char *)(*(void *)(a2 + *v7) + v38);
        *(void *)(a2 + v37) = v38 + 1;
        v26 |= (unint64_t)(v39 & 0x7F) << v35;
        if ((v39 & 0x80) == 0) {
          goto LABEL_63;
        }
        v35 += 7;
        BOOL v14 = v36++ >= 9;
        if (v14)
        {
          LODWORD(v26) = 0;
          goto LABEL_65;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_63:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v26) = 0;
      }
LABEL_65:
      uint64_t v41 = 28;
LABEL_66:
      *(_DWORD *)(a1 + v41) = v26;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularPowerLogSystemEventReadFrom(uint64_t a1, uint64_t a2)
{
  v3 = (int *)MEMORY[0x263F62298];
  v4 = (int *)MEMORY[0x263F62288];
  v5 = (int *)MEMORY[0x263F62270];
  if (*(void *)(a2 + (int)*MEMORY[0x263F62298]) < *(void *)(a2 + (int)*MEMORY[0x263F62288]))
  {
    unint64_t v7 = (int *)MEMORY[0x263F62268];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        char v24 = 0;
        unsigned int v25 = 0;
        uint64_t v26 = 0;
        *(unsigned char *)(a1 + 24) |= 4u;
        while (1)
        {
          uint64_t v27 = *v3;
          unint64_t v28 = *(void *)(a2 + v27);
          if (v28 == -1 || v28 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
          *(void *)(a2 + v27) = v28 + 1;
          v26 |= (unint64_t)(v29 & 0x7F) << v24;
          if ((v29 & 0x80) == 0) {
            goto LABEL_49;
          }
          v24 += 7;
          BOOL v14 = v25++ >= 9;
          if (v14)
          {
            LODWORD(v26) = 0;
            goto LABEL_51;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_49:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v26) = 0;
        }
LABEL_51:
        uint64_t v36 = 20;
      }
      else
      {
        if (v17 != 2)
        {
          if (v17 == 1)
          {
            char v18 = 0;
            unsigned int v19 = 0;
            uint64_t v20 = 0;
            *(unsigned char *)(a1 + 24) |= 1u;
            while (1)
            {
              uint64_t v21 = *v3;
              unint64_t v22 = *(void *)(a2 + v21);
              if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
              *(void *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0) {
                goto LABEL_45;
              }
              v18 += 7;
              BOOL v14 = v19++ >= 9;
              if (v14)
              {
                uint64_t v20 = 0;
                goto LABEL_47;
              }
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_45:
            if (*(unsigned char *)(a2 + *v5)) {
              uint64_t v20 = 0;
            }
LABEL_47:
            *(void *)(a1 + 8) = v20;
          }
          else
          {
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
          }
          continue;
        }
        char v30 = 0;
        unsigned int v31 = 0;
        uint64_t v26 = 0;
        *(unsigned char *)(a1 + 24) |= 2u;
        while (1)
        {
          uint64_t v32 = *v3;
          unint64_t v33 = *(void *)(a2 + v32);
          if (v33 == -1 || v33 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
          *(void *)(a2 + v32) = v33 + 1;
          v26 |= (unint64_t)(v34 & 0x7F) << v30;
          if ((v34 & 0x80) == 0) {
            goto LABEL_53;
          }
          v30 += 7;
          BOOL v14 = v31++ >= 9;
          if (v14)
          {
            LODWORD(v26) = 0;
            goto LABEL_55;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_53:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v26) = 0;
        }
LABEL_55:
        uint64_t v36 = 16;
      }
      *(_DWORD *)(a1 + v36) = v26;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularPowerLogWCDMACDRXConfigReadFrom(uint64_t a1, uint64_t a2)
{
  v3 = (int *)MEMORY[0x263F62298];
  v4 = (int *)MEMORY[0x263F62288];
  v5 = (int *)MEMORY[0x263F62270];
  if (*(void *)(a2 + (int)*MEMORY[0x263F62298]) < *(void *)(a2 + (int)*MEMORY[0x263F62288]))
  {
    unint64_t v7 = (int *)MEMORY[0x263F62268];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        char v24 = 0;
        unsigned int v25 = 0;
        uint64_t v26 = 0;
        *(unsigned char *)(a1 + 24) |= 4u;
        while (1)
        {
          uint64_t v27 = *v3;
          unint64_t v28 = *(void *)(a2 + v27);
          if (v28 == -1 || v28 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
          *(void *)(a2 + v27) = v28 + 1;
          v26 |= (unint64_t)(v29 & 0x7F) << v24;
          if ((v29 & 0x80) == 0) {
            goto LABEL_49;
          }
          v24 += 7;
          BOOL v14 = v25++ >= 9;
          if (v14)
          {
            LODWORD(v26) = 0;
            goto LABEL_51;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_49:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v26) = 0;
        }
LABEL_51:
        uint64_t v36 = 20;
      }
      else
      {
        if (v17 != 2)
        {
          if (v17 == 1)
          {
            char v18 = 0;
            unsigned int v19 = 0;
            uint64_t v20 = 0;
            *(unsigned char *)(a1 + 24) |= 1u;
            while (1)
            {
              uint64_t v21 = *v3;
              unint64_t v22 = *(void *)(a2 + v21);
              if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
              *(void *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0) {
                goto LABEL_45;
              }
              v18 += 7;
              BOOL v14 = v19++ >= 9;
              if (v14)
              {
                uint64_t v20 = 0;
                goto LABEL_47;
              }
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_45:
            if (*(unsigned char *)(a2 + *v5)) {
              uint64_t v20 = 0;
            }
LABEL_47:
            *(void *)(a1 + 8) = v20;
          }
          else
          {
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
          }
          continue;
        }
        char v30 = 0;
        unsigned int v31 = 0;
        uint64_t v26 = 0;
        *(unsigned char *)(a1 + 24) |= 2u;
        while (1)
        {
          uint64_t v32 = *v3;
          unint64_t v33 = *(void *)(a2 + v32);
          if (v33 == -1 || v33 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
          *(void *)(a2 + v32) = v33 + 1;
          v26 |= (unint64_t)(v34 & 0x7F) << v30;
          if ((v34 & 0x80) == 0) {
            goto LABEL_53;
          }
          v30 += 7;
          BOOL v14 = v31++ >= 9;
          if (v14)
          {
            LODWORD(v26) = 0;
            goto LABEL_55;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_53:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v26) = 0;
        }
LABEL_55:
        uint64_t v36 = 16;
      }
      *(_DWORD *)(a1 + v36) = v26;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularPowerLogWCDMARRCStateChangeReadFrom(uint64_t a1, uint64_t a2)
{
  v3 = (int *)MEMORY[0x263F62298];
  v4 = (int *)MEMORY[0x263F62288];
  v5 = (int *)MEMORY[0x263F62270];
  if (*(void *)(a2 + (int)*MEMORY[0x263F62298]) < *(void *)(a2 + (int)*MEMORY[0x263F62288]))
  {
    unint64_t v7 = (int *)MEMORY[0x263F62268];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 36) |= 1u;
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              goto LABEL_64;
            }
            v17 += 7;
            BOOL v14 = v18++ >= 9;
            if (v14)
            {
              uint64_t v19 = 0;
              goto LABEL_66;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_64:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v19 = 0;
          }
LABEL_66:
          *(void *)(a1 + 8) = v19;
          continue;
        case 2u:
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 36) |= 0x10u;
          while (2)
          {
            uint64_t v27 = *v3;
            unint64_t v28 = *(void *)(a2 + v27);
            if (v28 == -1 || v28 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
              *(void *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                BOOL v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_70;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_70:
          uint64_t v50 = 28;
          goto LABEL_87;
        case 3u:
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 36) |= 4u;
          while (2)
          {
            uint64_t v32 = *v3;
            unint64_t v33 = *(void *)(a2 + v32);
            if (v33 == -1 || v33 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
              *(void *)(a2 + v32) = v33 + 1;
              v26 |= (unint64_t)(v34 & 0x7F) << v30;
              if (v34 < 0)
              {
                v30 += 7;
                BOOL v14 = v31++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_74;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_74:
          uint64_t v50 = 20;
          goto LABEL_87;
        case 4u:
          char v35 = 0;
          unsigned int v36 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 36) |= 8u;
          while (2)
          {
            uint64_t v37 = *v3;
            unint64_t v38 = *(void *)(a2 + v37);
            if (v38 == -1 || v38 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v39 = *(unsigned char *)(*(void *)(a2 + *v7) + v38);
              *(void *)(a2 + v37) = v38 + 1;
              v26 |= (unint64_t)(v39 & 0x7F) << v35;
              if (v39 < 0)
              {
                v35 += 7;
                BOOL v14 = v36++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_78;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_78:
          uint64_t v50 = 24;
          goto LABEL_87;
        case 5u:
          char v40 = 0;
          unsigned int v41 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 36) |= 0x20u;
          while (2)
          {
            uint64_t v42 = *v3;
            unint64_t v43 = *(void *)(a2 + v42);
            if (v43 == -1 || v43 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v44 = *(unsigned char *)(*(void *)(a2 + *v7) + v43);
              *(void *)(a2 + v42) = v43 + 1;
              v26 |= (unint64_t)(v44 & 0x7F) << v40;
              if (v44 < 0)
              {
                v40 += 7;
                BOOL v14 = v41++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_82;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_82:
          uint64_t v50 = 32;
          goto LABEL_87;
        case 6u:
          char v45 = 0;
          unsigned int v46 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 36) |= 2u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v47 = *v3;
        unint64_t v48 = *(void *)(a2 + v47);
        if (v48 == -1 || v48 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v49 = *(unsigned char *)(*(void *)(a2 + *v7) + v48);
        *(void *)(a2 + v47) = v48 + 1;
        v26 |= (unint64_t)(v49 & 0x7F) << v45;
        if ((v49 & 0x80) == 0) {
          goto LABEL_84;
        }
        v45 += 7;
        BOOL v14 = v46++ >= 9;
        if (v14)
        {
          LODWORD(v26) = 0;
          goto LABEL_86;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_84:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v26) = 0;
      }
LABEL_86:
      uint64_t v50 = 16;
LABEL_87:
      *(_DWORD *)(a1 + v50) = v26;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL AWDMETRICSMBinReadFrom(uint64_t a1, uint64_t a2)
{
  v3 = (int *)MEMORY[0x263F62298];
  v4 = (int *)MEMORY[0x263F62288];
  v5 = (int *)MEMORY[0x263F62270];
  if (*(void *)(a2 + (int)*MEMORY[0x263F62298]) < *(void *)(a2 + (int)*MEMORY[0x263F62288]))
  {
    unint64_t v7 = (int *)MEMORY[0x263F62268];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 16) |= 1u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4))
          {
            char v24 = &OBJC_IVAR___AWDMETRICSMBin__binId;
            goto LABEL_38;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            break;
          }
          v17 += 7;
          BOOL v23 = v18++ > 8;
          if (v23)
          {
            LODWORD(v19) = 0;
            char v24 = &OBJC_IVAR___AWDMETRICSMBin__binId;
            goto LABEL_41;
          }
        }
        char v24 = &OBJC_IVAR___AWDMETRICSMBin__binId;
LABEL_39:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v19) = 0;
        }
LABEL_41:
        *(_DWORD *)(a1 + *v24) = v19;
        goto LABEL_42;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_42:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    char v25 = 0;
    unsigned int v26 = 0;
    uint64_t v19 = 0;
    *(unsigned char *)(a1 + 16) |= 2u;
    while (1)
    {
      uint64_t v27 = *v3;
      unint64_t v28 = *(void *)(a2 + v27);
      if (v28 == -1 || v28 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
      *(void *)(a2 + v27) = v28 + 1;
      v19 |= (unint64_t)(v29 & 0x7F) << v25;
      if ((v29 & 0x80) == 0)
      {
        char v24 = &OBJC_IVAR___AWDMETRICSMBin__duration;
        goto LABEL_39;
      }
      v25 += 7;
      BOOL v23 = v26++ > 8;
      if (v23)
      {
        LODWORD(v19) = 0;
        char v24 = &OBJC_IVAR___AWDMETRICSMBin__duration;
        goto LABEL_41;
      }
    }
    char v24 = &OBJC_IVAR___AWDMETRICSMBin__duration;
LABEL_38:
    *(unsigned char *)(a2 + *v5) = 1;
    goto LABEL_39;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL AWDMETRICSMCarrierComponentInfoReadFrom(uint64_t a1, uint64_t a2)
{
  v3 = (int *)MEMORY[0x263F62298];
  v4 = (int *)MEMORY[0x263F62288];
  v5 = (int *)MEMORY[0x263F62270];
  if (*(void *)(a2 + (int)*MEMORY[0x263F62298]) < *(void *)(a2 + (int)*MEMORY[0x263F62288]))
  {
    unint64_t v7 = (int *)MEMORY[0x263F62268];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 28) |= 1u;
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4))
            {
              char v24 = &OBJC_IVAR___AWDMETRICSMCarrierComponentInfo__band;
              goto LABEL_61;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              break;
            }
            v17 += 7;
            BOOL v23 = v18++ > 8;
            if (v23)
            {
              LODWORD(v19) = 0;
              char v24 = &OBJC_IVAR___AWDMETRICSMCarrierComponentInfo__band;
              goto LABEL_64;
            }
          }
          char v24 = &OBJC_IVAR___AWDMETRICSMCarrierComponentInfo__band;
          goto LABEL_62;
        case 2u:
          char v25 = 0;
          unsigned int v26 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 28) |= 2u;
          while (2)
          {
            uint64_t v27 = *v3;
            unint64_t v28 = *(void *)(a2 + v27);
            if (v28 == -1 || v28 >= *(void *)(a2 + *v4))
            {
              char v24 = &OBJC_IVAR___AWDMETRICSMCarrierComponentInfo__bandwidth;
              goto LABEL_61;
            }
            char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
            *(void *)(a2 + v27) = v28 + 1;
            v19 |= (unint64_t)(v29 & 0x7F) << v25;
            if (v29 < 0)
            {
              v25 += 7;
              BOOL v23 = v26++ > 8;
              if (v23)
              {
                LODWORD(v19) = 0;
                char v24 = &OBJC_IVAR___AWDMETRICSMCarrierComponentInfo__bandwidth;
                goto LABEL_64;
              }
              continue;
            }
            break;
          }
          char v24 = &OBJC_IVAR___AWDMETRICSMCarrierComponentInfo__bandwidth;
          goto LABEL_62;
        case 3u:
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 28) |= 8u;
          while (2)
          {
            uint64_t v32 = *v3;
            unint64_t v33 = *(void *)(a2 + v32);
            if (v33 == -1 || v33 >= *(void *)(a2 + *v4))
            {
              char v24 = &OBJC_IVAR___AWDMETRICSMCarrierComponentInfo__earfcn;
              goto LABEL_61;
            }
            char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
            *(void *)(a2 + v32) = v33 + 1;
            v19 |= (unint64_t)(v34 & 0x7F) << v30;
            if (v34 < 0)
            {
              v30 += 7;
              BOOL v23 = v31++ > 8;
              if (v23)
              {
                LODWORD(v19) = 0;
                char v24 = &OBJC_IVAR___AWDMETRICSMCarrierComponentInfo__earfcn;
                goto LABEL_64;
              }
              continue;
            }
            break;
          }
          char v24 = &OBJC_IVAR___AWDMETRICSMCarrierComponentInfo__earfcn;
          goto LABEL_62;
        case 4u:
          char v35 = 0;
          unsigned int v36 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 28) |= 0x10u;
          while (2)
          {
            uint64_t v37 = *v3;
            unint64_t v38 = *(void *)(a2 + v37);
            if (v38 == -1 || v38 >= *(void *)(a2 + *v4))
            {
              char v24 = &OBJC_IVAR___AWDMETRICSMCarrierComponentInfo__type;
              goto LABEL_61;
            }
            char v39 = *(unsigned char *)(*(void *)(a2 + *v7) + v38);
            *(void *)(a2 + v37) = v38 + 1;
            v19 |= (unint64_t)(v39 & 0x7F) << v35;
            if (v39 < 0)
            {
              v35 += 7;
              BOOL v23 = v36++ > 8;
              if (v23)
              {
                LODWORD(v19) = 0;
                char v24 = &OBJC_IVAR___AWDMETRICSMCarrierComponentInfo__type;
                goto LABEL_64;
              }
              continue;
            }
            break;
          }
          char v24 = &OBJC_IVAR___AWDMETRICSMCarrierComponentInfo__type;
          goto LABEL_62;
        case 5u:
          char v40 = 0;
          unsigned int v41 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 28) |= 4u;
          break;
        default:
          if (PBReaderSkipValueWithTag()) {
            continue;
          }
          return 0;
      }
      while (1)
      {
        uint64_t v42 = *v3;
        unint64_t v43 = *(void *)(a2 + v42);
        if (v43 == -1 || v43 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v44 = *(unsigned char *)(*(void *)(a2 + *v7) + v43);
        *(void *)(a2 + v42) = v43 + 1;
        v19 |= (unint64_t)(v44 & 0x7F) << v40;
        if ((v44 & 0x80) == 0)
        {
          char v24 = &OBJC_IVAR___AWDMETRICSMCarrierComponentInfo__duplex;
          goto LABEL_62;
        }
        v40 += 7;
        BOOL v23 = v41++ > 8;
        if (v23)
        {
          LODWORD(v19) = 0;
          char v24 = &OBJC_IVAR___AWDMETRICSMCarrierComponentInfo__duplex;
          goto LABEL_64;
        }
      }
      char v24 = &OBJC_IVAR___AWDMETRICSMCarrierComponentInfo__duplex;
LABEL_61:
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_62:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v19) = 0;
      }
LABEL_64:
      *(_DWORD *)(a1 + *v24) = v19;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularPowerLogNRFRCoverageReadFrom(uint64_t a1, uint64_t a2)
{
  v3 = (int *)MEMORY[0x263F62298];
  v4 = (int *)MEMORY[0x263F62288];
  v5 = (int *)MEMORY[0x263F62270];
  if (*(void *)(a2 + (int)*MEMORY[0x263F62298]) < *(void *)(a2 + (int)*MEMORY[0x263F62288]))
  {
    unint64_t v7 = (int *)MEMORY[0x263F62268];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 28) |= 1u;
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              goto LABEL_50;
            }
            v17 += 7;
            BOOL v14 = v18++ >= 9;
            if (v14)
            {
              uint64_t v19 = 0;
              goto LABEL_52;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_50:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v19 = 0;
          }
LABEL_52:
          *(void *)(a1 + 8) = v19;
          continue;
        case 2u:
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 28) |= 2u;
          while (2)
          {
            uint64_t v27 = *v3;
            unint64_t v28 = *(void *)(a2 + v27);
            if (v28 == -1 || v28 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
              *(void *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                BOOL v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_56;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_56:
          uint64_t v40 = 16;
          goto LABEL_65;
        case 3u:
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 28) |= 8u;
          while (2)
          {
            uint64_t v32 = *v3;
            unint64_t v33 = *(void *)(a2 + v32);
            if (v33 == -1 || v33 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
              *(void *)(a2 + v32) = v33 + 1;
              v26 |= (unint64_t)(v34 & 0x7F) << v30;
              if (v34 < 0)
              {
                v30 += 7;
                BOOL v14 = v31++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_60;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_60:
          uint64_t v40 = 24;
          goto LABEL_65;
        case 4u:
          char v35 = 0;
          unsigned int v36 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 28) |= 4u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v37 = *v3;
        unint64_t v38 = *(void *)(a2 + v37);
        if (v38 == -1 || v38 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v39 = *(unsigned char *)(*(void *)(a2 + *v7) + v38);
        *(void *)(a2 + v37) = v38 + 1;
        v26 |= (unint64_t)(v39 & 0x7F) << v35;
        if ((v39 & 0x80) == 0) {
          goto LABEL_62;
        }
        v35 += 7;
        BOOL v14 = v36++ >= 9;
        if (v14)
        {
          LODWORD(v26) = 0;
          goto LABEL_64;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_62:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v26) = 0;
      }
LABEL_64:
      uint64_t v40 = 20;
LABEL_65:
      *(_DWORD *)(a1 + v40) = v26;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t AWDMETRICSCellularPowerLogSFTStateEventReadFrom(uint64_t a1, uint64_t a2)
{
  v3 = (int *)MEMORY[0x263F62298];
  v4 = (int *)MEMORY[0x263F62288];
  v5 = (int *)MEMORY[0x263F62270];
  if (*(void *)(a2 + (int)*MEMORY[0x263F62298]) < *(void *)(a2 + (int)*MEMORY[0x263F62288]))
  {
    unint64_t v7 = (int *)MEMORY[0x263F62268];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        char v24 = 0;
        unsigned int v25 = 0;
        uint64_t v26 = 0;
        *(unsigned char *)(a1 + 24) |= 4u;
        while (1)
        {
          uint64_t v27 = *v3;
          unint64_t v28 = *(void *)(a2 + v27);
          if (v28 == -1 || v28 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
          *(void *)(a2 + v27) = v28 + 1;
          v26 |= (unint64_t)(v29 & 0x7F) << v24;
          if ((v29 & 0x80) == 0) {
            goto LABEL_49;
          }
          v24 += 7;
          BOOL v14 = v25++ >= 9;
          if (v14)
          {
            LODWORD(v26) = 0;
            goto LABEL_51;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_49:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v26) = 0;
        }
LABEL_51:
        uint64_t v36 = 20;
      }
      else
      {
        if (v17 != 2)
        {
          if (v17 == 1)
          {
            char v18 = 0;
            unsigned int v19 = 0;
            uint64_t v20 = 0;
            *(unsigned char *)(a1 + 24) |= 1u;
            while (1)
            {
              uint64_t v21 = *v3;
              unint64_t v22 = *(void *)(a2 + v21);
              if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
              *(void *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0) {
                goto LABEL_45;
              }
              v18 += 7;
              BOOL v14 = v19++ >= 9;
              if (v14)
              {
                uint64_t v20 = 0;
                goto LABEL_47;
              }
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_45:
            if (*(unsigned char *)(a2 + *v5)) {
              uint64_t v20 = 0;
            }
LABEL_47:
            *(void *)(a1 + 8) = v20;
          }
          else
          {
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
          }
          continue;
        }
        char v30 = 0;
        unsigned int v31 = 0;
        uint64_t v26 = 0;
        *(unsigned char *)(a1 + 24) |= 2u;
        while (1)
        {
          uint64_t v32 = *v3;
          unint64_t v33 = *(void *)(a2 + v32);
          if (v33 == -1 || v33 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
          *(void *)(a2 + v32) = v33 + 1;
          v26 |= (unint64_t)(v34 & 0x7F) << v30;
          if ((v34 & 0x80) == 0) {
            goto LABEL_53;
          }
          v30 += 7;
          BOOL v14 = v31++ >= 9;
          if (v14)
          {
            LODWORD(v26) = 0;
            goto LABEL_55;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_53:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v26) = 0;
        }
LABEL_55:
        uint64_t v36 = 16;
      }
      *(_DWORD *)(a1 + v36) = v26;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

id PPSCreateSubsystemCategoryPredicate(uint64_t a1, uint64_t a2, void *a3)
{
  v12[2] = *MEMORY[0x263EF8340];
  id v5 = a3;
  uint64_t v6 = [MEMORY[0x263F08A98] predicateWithFormat:@"(%K = %@ AND %K = %@)", @"subsystem", a1, @"category", a2];
  unint64_t v7 = (void *)v6;
  if (v5)
  {
    char v8 = (void *)MEMORY[0x263F08730];
    v12[0] = v6;
    v12[1] = v5;
    unsigned int v9 = [MEMORY[0x263EFF8C0] arrayWithObjects:v12 count:2];
    uint64_t v10 = [v8 andPredicateWithSubpredicates:v9];

    unint64_t v7 = (void *)v10;
  }

  return v7;
}

void sub_258F5D5B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
}

void sub_258F5D820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t _eventSortComparator(void *a1, const char *a2)
{
  return [a1 compare:a2];
}

id PPSConvertValueWithNSUnit(void *a1, void *a2, void *a3, void *a4)
{
  v23[1] = *MEMORY[0x263EF8340];
  id v7 = a1;
  id v8 = a2;
  id v9 = a3;
  id v10 = objc_alloc(MEMORY[0x263F08980]);
  [v7 doubleValue];
  uint64_t v11 = objc_msgSend(v10, "initWithDoubleValue:unit:", v8);
  if ([v11 canBeConvertedToUnit:v9])
  {
    unint64_t v12 = [v11 measurementByConvertingToUnit:v9];
    id v13 = objc_alloc(NSNumber);
    [v12 doubleValue];
    BOOL v14 = objc_msgSend(v13, "initWithDouble:");
  }
  else
  {
    int v15 = NSString;
    unint64_t v16 = [v8 description];
    unint64_t v17 = [v9 description];
    char v18 = [v15 stringWithFormat:@"Cannot convert value '%@' from unit type '%@' to unit type '%@'", v7, v16, v17];

    unsigned int v19 = (void *)MEMORY[0x263F087E8];
    uint64_t v22 = *MEMORY[0x263F08320];
    v23[0] = v18;
    uint64_t v20 = [NSDictionary dictionaryWithObjects:v23 forKeys:&v22 count:1];
    *a4 = [v19 errorWithDomain:@"com.apple.PerfPowerServicesReader" code:1 userInfo:v20];

    BOOL v14 = 0;
  }

  return v14;
}

id PPSConvertValueWithPPSUnit(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a1;
  id v9 = [a2 unit];
  id v10 = [v7 unit];

  uint64_t v11 = PPSConvertValueWithNSUnit(v8, v9, v10, a4);

  return v11;
}

void sub_258F60C3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
}

void sub_258F60F98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_258F61658(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F61734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_258F618C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F619C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F61B20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F61CDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F61E3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F61F44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F61FF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F62060(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F62108(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F621A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *boost::serialization::singleton_module::get_lock(boost::serialization::singleton_module *this)
{
  return &boost::serialization::singleton_module::get_lock(void)::lock;
}

void sub_258F62684(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint8_t buf,int a47,int a48,__int16 a49,int a50,__int16 a51,__int16 a52,uint64_t a53,__int16 a54)
{
  if (a2)
  {

    pps::Histogram_Internal::~Histogram_Internal(&a12);
    boost::archive::detail::basic_iarchive::~basic_iarchive((boost::archive::detail::basic_iarchive *)&__p);
    boost::archive::basic_text_iprimitive<std::istream>::~basic_text_iprimitive();
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::istringstream::basic_istringstream[abi:ne180100](uint64_t *a1, const std::string *a2, int a3)
{
  uint64_t v6 = MEMORY[0x263F8C338] + 64;
  a1[15] = MEMORY[0x263F8C338] + 64;
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = *(void *)(MEMORY[0x263F8C2C0] + 16);
  uint64_t v9 = *(void *)(MEMORY[0x263F8C2C0] + 8);
  *a1 = v9;
  *(uint64_t *)((char *)a1 + *(void *)(v9 - 24)) = v8;
  a1[1] = 0;
  id v10 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v10, a1 + 2);
  uint64_t v11 = MEMORY[0x263F8C338] + 24;
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  *a1 = v11;
  a1[15] = v6;
  std::stringbuf::basic_stringbuf[abi:ne180100](v7, a2, a3 | 8);
  return a1;
}

void sub_258F62A70(_Unwind_Exception *a1)
{
  std::istream::~istream();
  MEMORY[0x25A2D4B00](v1);
  _Unwind_Resume(a1);
}

void boost::archive::text_iarchive::~text_iarchive(boost::archive::text_iarchive *this)
{
}

{
  boost::archive::detail::basic_iarchive::~basic_iarchive(this);
  boost::archive::basic_text_iprimitive<std::istream>::~basic_text_iprimitive();
}

uint64_t std::istringstream::~istringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C2C0];
  uint64_t v3 = *MEMORY[0x263F8C2C0];
  *(void *)a1 = *MEMORY[0x263F8C2C0];
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 16) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x25A2D4B00](a1 + 120);
  return a1;
}

id logHandle(void)
{
  if (logHandle(void)::onceToken != -1) {
    dispatch_once(&logHandle(void)::onceToken, &__block_literal_global_0);
  }
  v0 = (void *)logHandle(void)::logHandle;
  return v0;
}

{
  void *v0;
  uint64_t vars8;

  if (logHandle(void)::onceToken != -1) {
    dispatch_once(&logHandle(void)::onceToken, &__block_literal_global_4);
  }
  v0 = (void *)logHandle(void)::__logHandle;
  return v0;
}

void __clang_call_terminate(void *a1)
{
}

void sub_258F62E4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint8_t buf,int a33,int a34,__int16 a35,int a36,__int16 a37,__int16 a38,uint64_t a39,__int16 a40)
{
  if (a2)
  {

    if (a15 < 0) {
      operator delete(__p);
    }
    boost::archive::detail::basic_oarchive::~basic_oarchive((boost::archive::detail::basic_oarchive *)&a16);
    boost::archive::basic_text_oprimitive<std::ostream>::~basic_text_oprimitive();
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C340] + 64;
  *(void *)(a1 + 112) = MEMORY[0x263F8C340] + 64;
  uint64_t v3 = *(void *)(MEMORY[0x263F8C2C8] + 16);
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2C8] + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + *(void *)(v4 - 24)) = v3;
  id v5 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v5, (void *)(a1 + 8));
  uint64_t v6 = MEMORY[0x263F8C340] + 24;
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  *(void *)a1 = v6;
  *(void *)(a1 + 112) = v2;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 8) = MEMORY[0x263F8C318] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_258F631CC(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x25A2D4B00](v1);
  _Unwind_Resume(a1);
}

void boost::archive::text_oarchive::~text_oarchive(boost::archive::text_oarchive *this)
{
}

{
  boost::archive::detail::basic_oarchive::~basic_oarchive(this);
  boost::archive::basic_text_oprimitive<std::ostream>::~basic_text_oprimitive();
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)a1 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 8) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x25A2D4B00](a1 + 112);
  return a1;
}

void sub_258F63480(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {

    __cxa_begin_catch(exception_object);
    uint64_t v6 = logHandle();
    BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
    if (a2 == 2)
    {
      if (v7) {
        -[PPSHistogram initWithBinCount:range:metricName:]();
      }

      __cxa_end_catch();
    }
    else
    {
      if (v7) {
        -[PPSHistogram initWithBinCount:range:metricName:]();
      }

      __cxa_end_catch();
    }
    JUMPOUT(0x258F63440);
  }
  _Unwind_Resume(exception_object);
}

void sub_258F636F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F63DC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__pa,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54,uint64_t a55,uint64_t a56,std::__split_buffer<std::string> *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  a44 = &a62;
  std::vector<pps::AxisConfig_Internal>::__destroy_vector::operator()[abi:ne180100]((void ***)&a44);

  _Unwind_Resume(a1);
}

void pps::AxisConfig_Internal::~AxisConfig_Internal(pps::AxisConfig_Internal *this)
{
  uint64_t v2 = (void *)*((void *)this + 7);
  if (v2)
  {
    *((void *)this + 8) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void **)((char *)this + 32);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void sub_258F64130(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F642E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F645C0(_Unwind_Exception *a1)
{
  id v5 = v3;

  _Unwind_Resume(a1);
}

void sub_258F64764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14)
{
  std::__function::__value_func<void ()(NSMutableArray *)>::~__value_func[abi:ne180100](&a14);

  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::function<void ()(NSMutableArray *)>::operator()(uint64_t a1, void *a2)
{
  id v4 = a2;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, id *))(*(void *)v3 + 48))(v3, &v4);
}

void sub_258F64810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_258F64DF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,char *a28,uint64_t a29,void *a30,uint64_t a31)
{
  if (__p) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::destroy((uint64_t)&a27, a28);
  if (a30)
  {
    a31 = (uint64_t)a30;
    operator delete(a30);
  }

  _Unwind_Resume(a1);
}

void std::vector<double>::reserve(void **a1, unint64_t a2)
{
  id v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v3, a2);
    BOOL v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    uint64_t v9 = &v6[8 * v8];
    id v10 = (char *)*a1;
    uint64_t v11 = (char *)a1[1];
    unint64_t v12 = v7;
    if (v11 != *a1)
    {
      unint64_t v12 = v7;
      do
      {
        uint64_t v13 = *((void *)v11 - 1);
        v11 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void sub_258F65488(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    uint64_t v32 = logHandle();
    BOOL v33 = os_log_type_enabled(v32, OS_LOG_TYPE_ERROR);
    if (a2 == 2)
    {
      if (v33) {
        -[PPSHistogram recordSample:]();
      }
    }
    else if (v33)
    {
      -[PPSHistogram recordSample:]();
    }

    __cxa_end_catch();
    JUMPOUT(0x258F65404);
  }
  _Unwind_Resume(exception_object);
}

void sub_258F65750(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F65880(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F65A3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F65AE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F65B50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F65BDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance()
{
  if (boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_is_destroyed(void)::is_destroyed_flag) {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance();
  }
  {
    boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::singleton_wrapper((boost::serialization::typeid_system::extended_type_info_typeid_0 *)&boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance(void)::t);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::~singleton_wrapper, &boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance(void)::t, &dword_258F16000);
  }
  return &boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance(void)::t;
}

void sub_258F65D08(_Unwind_Exception *a1)
{
}

void *boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::get_instance()
{
  if (boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::get_is_destroyed(void)::is_destroyed_flag) {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance();
  }
  {
    boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::singleton_wrapper((boost::serialization::typeid_system::extended_type_info_typeid_0 *)&boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::get_instance(void)::t);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::~singleton_wrapper, &boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::get_instance(void)::t, &dword_258F16000);
  }
  return &boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::get_instance(void)::t;
}

void sub_258F65DB4(_Unwind_Exception *a1)
{
}

void *boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::get_instance()
{
  if (boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::get_is_destroyed(void)::is_destroyed_flag) {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance();
  }
  {
    boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::singleton_wrapper((boost::serialization::typeid_system::extended_type_info_typeid_0 *)&boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::get_instance(void)::t);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::~singleton_wrapper, &boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::get_instance(void)::t, &dword_258F16000);
  }
  return &boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::get_instance(void)::t;
}

void sub_258F65E60(_Unwind_Exception *a1)
{
}

void *boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_instance()
{
  if (boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_is_destroyed(void)::is_destroyed_flag) {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance();
  }
  {
    boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::singleton_wrapper((boost::serialization::typeid_system::extended_type_info_typeid_0 *)&boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_instance(void)::t);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::~singleton_wrapper, &boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_instance(void)::t, &dword_258F16000);
  }
  return &boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_instance(void)::t;
}

void sub_258F65F0C(_Unwind_Exception *a1)
{
}

void *boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_instance()
{
  if (boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_is_destroyed(void)::is_destroyed_flag) {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance();
  }
  {
    boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::singleton_wrapper((boost::serialization::typeid_system::extended_type_info_typeid_0 *)&boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_instance(void)::t);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::~singleton_wrapper, &boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_instance(void)::t, &dword_258F16000);
  }
  return &boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_instance(void)::t;
}

void sub_258F65FB8(_Unwind_Exception *a1)
{
}

void *boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::get_instance()
{
  if (boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::get_is_destroyed(void)::is_destroyed_flag) {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance();
  }
  {
    boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::singleton_wrapper((boost::serialization::typeid_system::extended_type_info_typeid_0 *)&boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::get_instance(void)::t);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::~singleton_wrapper, &boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::get_instance(void)::t, &dword_258F16000);
  }
  return &boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::get_instance(void)::t;
}

void sub_258F66064(_Unwind_Exception *a1)
{
}

void *boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::axis::transform::id>>::get_instance()
{
  if (boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::axis::transform::id>>::get_is_destroyed(void)::is_destroyed_flag) {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance();
  }
  {
    boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::axis::transform::id>>::singleton_wrapper((boost::serialization::typeid_system::extended_type_info_typeid_0 *)&boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::axis::transform::id>>::get_instance(void)::t);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::axis::transform::id>>::~singleton_wrapper, &boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::axis::transform::id>>::get_instance(void)::t, &dword_258F16000);
  }
  return &boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::axis::transform::id>>::get_instance(void)::t;
}

void sub_258F66110(_Unwind_Exception *a1)
{
}

void *boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::transform::id>>::get_instance()
{
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::transform::id>>::get_is_destroyed(void)::is_destroyed_flag) {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance();
  }
  {
    boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::transform::id>>::singleton_wrapper(boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::transform::id>>::get_instance(void)::t);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::transform::id>>::~singleton_wrapper, boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::transform::id>>::get_instance(void)::t, &dword_258F16000);
  }
  return boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::transform::id>>::get_instance(void)::t;
}

void sub_258F661BC(_Unwind_Exception *a1)
{
}

void *boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::get_instance()
{
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::get_is_destroyed(void)::is_destroyed_flag) {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance();
  }
  {
    boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::singleton_wrapper(boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::get_instance(void)::t);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::~singleton_wrapper, boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::get_instance(void)::t, &dword_258F16000);
  }
  return boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::get_instance(void)::t;
}

void sub_258F66268(_Unwind_Exception *a1)
{
}

void *boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::get_instance()
{
  if (boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::get_is_destroyed(void)::is_destroyed_flag) {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance();
  }
  {
    boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::singleton_wrapper((boost::serialization::typeid_system::extended_type_info_typeid_0 *)&boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::get_instance(void)::t);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::~singleton_wrapper, &boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::get_instance(void)::t, &dword_258F16000);
  }
  return &boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::get_instance(void)::t;
}

void sub_258F66314(_Unwind_Exception *a1)
{
}

void *boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<double>>>::get_instance()
{
  if (boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<double>>>::get_is_destroyed(void)::is_destroyed_flag) {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance();
  }
  {
    boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<double>>>::singleton_wrapper((boost::serialization::typeid_system::extended_type_info_typeid_0 *)&boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<double>>>::get_instance(void)::t);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<double>>>::~singleton_wrapper, &boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<double>>>::get_instance(void)::t, &dword_258F16000);
  }
  return &boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<double>>>::get_instance(void)::t;
}

void sub_258F663C0(_Unwind_Exception *a1)
{
}

void *boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<double>>>::get_instance()
{
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<double>>>::get_is_destroyed(void)::is_destroyed_flag) {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance();
  }
  {
    boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<double>>>::singleton_wrapper(boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<double>>>::get_instance(void)::t);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<double>>>::~singleton_wrapper, boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<double>>>::get_instance(void)::t, &dword_258F16000);
  }
  return boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<double>>>::get_instance(void)::t;
}

void sub_258F6646C(_Unwind_Exception *a1)
{
}

void *boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::get_instance()
{
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::get_is_destroyed(void)::is_destroyed_flag) {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance();
  }
  {
    boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::singleton_wrapper(boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::get_instance(void)::t);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::~singleton_wrapper, boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::get_instance(void)::t, &dword_258F16000);
  }
  return boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::get_instance(void)::t;
}

void sub_258F66518(_Unwind_Exception *a1)
{
}

void *boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::get_instance()
{
  if (boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::get_is_destroyed(void)::is_destroyed_flag) {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance();
  }
  {
    boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::singleton_wrapper((boost::serialization::typeid_system::extended_type_info_typeid_0 *)&boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::get_instance(void)::t);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::~singleton_wrapper, &boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::get_instance(void)::t, &dword_258F16000);
  }
  return &boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::get_instance(void)::t;
}

void sub_258F665C4(_Unwind_Exception *a1)
{
}

void *boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::get_instance()
{
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::get_is_destroyed(void)::is_destroyed_flag) {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance();
  }
  {
    boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::singleton_wrapper(boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::get_instance(void)::t);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::~singleton_wrapper, boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::get_instance(void)::t, &dword_258F16000);
  }
  return boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::get_instance(void)::t;
}

void sub_258F66670(_Unwind_Exception *a1)
{
}

void *boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_instance()
{
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_is_destroyed(void)::is_destroyed_flag) {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance();
  }
  {
    boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::singleton_wrapper(boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_instance(void)::t);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::~singleton_wrapper, boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_instance(void)::t, &dword_258F16000);
  }
  return boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_instance(void)::t;
}

void sub_258F6671C(_Unwind_Exception *a1)
{
}

void *boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_instance()
{
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_is_destroyed(void)::is_destroyed_flag) {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance();
  }
  {
    boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::singleton_wrapper(boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_instance(void)::t);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::~singleton_wrapper, boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_instance(void)::t, &dword_258F16000);
  }
  return boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_instance(void)::t;
}

void sub_258F667C8(_Unwind_Exception *a1)
{
}

void *boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::get_instance()
{
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::get_is_destroyed(void)::is_destroyed_flag) {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance();
  }
  {
    boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::singleton_wrapper(boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::get_instance(void)::t);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::~singleton_wrapper, boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::get_instance(void)::t, &dword_258F16000);
  }
  return boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::get_instance(void)::t;
}

void sub_258F66874(_Unwind_Exception *a1)
{
}

void *boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::unlimited_storage<std::allocator<char>>>>::get_instance()
{
  if (boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::unlimited_storage<std::allocator<char>>>>::get_is_destroyed(void)::is_destroyed_flag) {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance();
  }
  {
    boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::unlimited_storage<std::allocator<char>>>>::singleton_wrapper((boost::serialization::typeid_system::extended_type_info_typeid_0 *)&boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::unlimited_storage<std::allocator<char>>>>::get_instance(void)::t);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::unlimited_storage<std::allocator<char>>>>::~singleton_wrapper, &boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::unlimited_storage<std::allocator<char>>>>::get_instance(void)::t, &dword_258F16000);
  }
  return &boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::unlimited_storage<std::allocator<char>>>>::get_instance(void)::t;
}

void sub_258F66920(_Unwind_Exception *a1)
{
}

void *boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::get_instance()
{
  if (boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::get_is_destroyed(void)::is_destroyed_flag) {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance();
  }
  {
    boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::singleton_wrapper((boost::serialization::typeid_system::extended_type_info_typeid_0 *)&boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::get_instance(void)::t);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::~singleton_wrapper, &boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::get_instance(void)::t, &dword_258F16000);
  }
  return &boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::get_instance(void)::t;
}

void sub_258F669CC(_Unwind_Exception *a1)
{
}

void *boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<unsigned long long>>>::get_instance()
{
  if (boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<unsigned long long>>>::get_is_destroyed(void)::is_destroyed_flag) {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance();
  }
  {
    boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<unsigned long long>>>::singleton_wrapper((boost::serialization::typeid_system::extended_type_info_typeid_0 *)&boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<unsigned long long>>>::get_instance(void)::t);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<unsigned long long>>>::~singleton_wrapper, &boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<unsigned long long>>>::get_instance(void)::t, &dword_258F16000);
  }
  return &boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<unsigned long long>>>::get_instance(void)::t;
}

void sub_258F66A78(_Unwind_Exception *a1)
{
}

void *boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<unsigned long long>>>::get_instance()
{
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<unsigned long long>>>::get_is_destroyed(void)::is_destroyed_flag) {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance();
  }
  {
    boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<unsigned long long>>>::singleton_wrapper(boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<unsigned long long>>>::get_instance(void)::t);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<unsigned long long>>>::~singleton_wrapper, boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<unsigned long long>>>::get_instance(void)::t, &dword_258F16000);
  }
  return boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<unsigned long long>>>::get_instance(void)::t;
}

void sub_258F66B24(_Unwind_Exception *a1)
{
}

void *boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::get_instance()
{
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::get_is_destroyed(void)::is_destroyed_flag) {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance();
  }
  {
    boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::singleton_wrapper(boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::get_instance(void)::t);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::~singleton_wrapper, boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::get_instance(void)::t, &dword_258F16000);
  }
  return boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::get_instance(void)::t;
}

void sub_258F66BD0(_Unwind_Exception *a1)
{
}

void *boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::unlimited_storage<std::allocator<char>>>>::get_instance()
{
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::unlimited_storage<std::allocator<char>>>>::get_is_destroyed(void)::is_destroyed_flag) {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance();
  }
  {
    boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::unlimited_storage<std::allocator<char>>>>::singleton_wrapper(boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::unlimited_storage<std::allocator<char>>>>::get_instance(void)::t);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::unlimited_storage<std::allocator<char>>>>::~singleton_wrapper, boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::unlimited_storage<std::allocator<char>>>>::get_instance(void)::t, &dword_258F16000);
  }
  return boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::unlimited_storage<std::allocator<char>>>>::get_instance(void)::t;
}

void sub_258F66C7C(_Unwind_Exception *a1)
{
}

void *boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::get_instance()
{
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::get_is_destroyed(void)::is_destroyed_flag) {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance();
  }
  {
    boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::singleton_wrapper(boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::get_instance(void)::t);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::~singleton_wrapper, boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::get_instance(void)::t, &dword_258F16000);
  }
  return boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::get_instance(void)::t;
}

void sub_258F66D28(_Unwind_Exception *a1)
{
}

void *boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<pps::AxisEnum>>>::get_instance()
{
  if (boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<pps::AxisEnum>>>::get_is_destroyed(void)::is_destroyed_flag) {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance();
  }
  {
    boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<pps::AxisEnum>>>::singleton_wrapper((boost::serialization::typeid_system::extended_type_info_typeid_0 *)&boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<pps::AxisEnum>>>::get_instance(void)::t);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<pps::AxisEnum>>>::~singleton_wrapper, &boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<pps::AxisEnum>>>::get_instance(void)::t, &dword_258F16000);
  }
  return &boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<pps::AxisEnum>>>::get_instance(void)::t;
}

void sub_258F66DD4(_Unwind_Exception *a1)
{
}

void *boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<pps::AxisEnum>>>::get_instance()
{
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<pps::AxisEnum>>>::get_is_destroyed(void)::is_destroyed_flag) {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance();
  }
  {
    boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<pps::AxisEnum>>>::singleton_wrapper(boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<pps::AxisEnum>>>::get_instance(void)::t);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<pps::AxisEnum>>>::~singleton_wrapper, boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<pps::AxisEnum>>>::get_instance(void)::t, &dword_258F16000);
  }
  return boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<pps::AxisEnum>>>::get_instance(void)::t;
}

void sub_258F66E80(_Unwind_Exception *a1)
{
}

void *boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::map<int,std::vector<std::string>>>>::get_instance()
{
  if (boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::map<int,std::vector<std::string>>>>::get_is_destroyed(void)::is_destroyed_flag) {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance();
  }
  {
    boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::map<int,std::vector<std::string>>>>::singleton_wrapper((boost::serialization::typeid_system::extended_type_info_typeid_0 *)&boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::map<int,std::vector<std::string>>>>::get_instance(void)::t);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::map<int,std::vector<std::string>>>>::~singleton_wrapper, &boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::map<int,std::vector<std::string>>>>::get_instance(void)::t, &dword_258F16000);
  }
  return &boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::map<int,std::vector<std::string>>>>::get_instance(void)::t;
}

void sub_258F66F2C(_Unwind_Exception *a1)
{
}

void *boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::pair<int const,std::vector<std::string>>>>::get_instance()
{
  if (boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::pair<int const,std::vector<std::string>>>>::get_is_destroyed(void)::is_destroyed_flag) {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance();
  }
  {
    boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::pair<int const,std::vector<std::string>>>>::singleton_wrapper((boost::serialization::typeid_system::extended_type_info_typeid_0 *)&boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::pair<int const,std::vector<std::string>>>>::get_instance(void)::t);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::pair<int const,std::vector<std::string>>>>::~singleton_wrapper, &boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::pair<int const,std::vector<std::string>>>>::get_instance(void)::t, &dword_258F16000);
  }
  return &boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::pair<int const,std::vector<std::string>>>>::get_instance(void)::t;
}

void sub_258F66FD8(_Unwind_Exception *a1)
{
}

void *boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<std::string>>>::get_instance()
{
  if (boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<std::string>>>::get_is_destroyed(void)::is_destroyed_flag) {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance();
  }
  {
    boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<std::string>>>::singleton_wrapper((boost::serialization::typeid_system::extended_type_info_typeid_0 *)&boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<std::string>>>::get_instance(void)::t);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<std::string>>>::~singleton_wrapper, &boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<std::string>>>::get_instance(void)::t, &dword_258F16000);
  }
  return &boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<std::string>>>::get_instance(void)::t;
}

void sub_258F67084(_Unwind_Exception *a1)
{
}

void *boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::string>>>::get_instance()
{
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::string>>>::get_is_destroyed(void)::is_destroyed_flag) {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance();
  }
  {
    boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::string>>>::singleton_wrapper(boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::string>>>::get_instance(void)::t);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::string>>>::~singleton_wrapper, boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::string>>>::get_instance(void)::t, &dword_258F16000);
  }
  return boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::string>>>::get_instance(void)::t;
}

void sub_258F67130(_Unwind_Exception *a1)
{
}

void *boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::pair<int const,std::vector<std::string>>>>::get_instance()
{
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::pair<int const,std::vector<std::string>>>>::get_is_destroyed(void)::is_destroyed_flag) {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance();
  }
  {
    boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::pair<int const,std::vector<std::string>>>>::singleton_wrapper(boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::pair<int const,std::vector<std::string>>>>::get_instance(void)::t);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::pair<int const,std::vector<std::string>>>>::~singleton_wrapper, boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::pair<int const,std::vector<std::string>>>>::get_instance(void)::t, &dword_258F16000);
  }
  return boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::pair<int const,std::vector<std::string>>>>::get_instance(void)::t;
}

void sub_258F671DC(_Unwind_Exception *a1)
{
}

void *boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::map<int,std::vector<std::string>>>>::get_instance()
{
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::map<int,std::vector<std::string>>>>::get_is_destroyed(void)::is_destroyed_flag) {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance();
  }
  {
    boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::map<int,std::vector<std::string>>>>::singleton_wrapper(boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::map<int,std::vector<std::string>>>>::get_instance(void)::t);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::map<int,std::vector<std::string>>>>::~singleton_wrapper, boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::map<int,std::vector<std::string>>>>::get_instance(void)::t, &dword_258F16000);
  }
  return boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::map<int,std::vector<std::string>>>>::get_instance(void)::t;
}

void sub_258F67288(_Unwind_Exception *a1)
{
}

void *boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,pps::Histogram_Internal>>::get_instance()
{
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,pps::Histogram_Internal>>::get_is_destroyed(void)::is_destroyed_flag) {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance();
  }
  {
    boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,pps::Histogram_Internal>>::singleton_wrapper(boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,pps::Histogram_Internal>>::get_instance(void)::t);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,pps::Histogram_Internal>>::~singleton_wrapper, boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,pps::Histogram_Internal>>::get_instance(void)::t, &dword_258F16000);
  }
  return boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,pps::Histogram_Internal>>::get_instance(void)::t;
}

void sub_258F67334(_Unwind_Exception *a1)
{
}

void *boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::transform::id>>::get_instance()
{
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::transform::id>>::get_is_destroyed(void)::is_destroyed_flag) {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance();
  }
  {
    boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::transform::id>>::singleton_wrapper(boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::transform::id>>::get_instance(void)::t);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::transform::id>>::~singleton_wrapper, boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::transform::id>>::get_instance(void)::t, &dword_258F16000);
  }
  return boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::transform::id>>::get_instance(void)::t;
}

void sub_258F673E0(_Unwind_Exception *a1)
{
}

void *boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::get_instance()
{
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::get_is_destroyed(void)::is_destroyed_flag) {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance();
  }
  {
    boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::singleton_wrapper(boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::get_instance(void)::t);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::~singleton_wrapper, boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::get_instance(void)::t, &dword_258F16000);
  }
  return boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::get_instance(void)::t;
}

void sub_258F6748C(_Unwind_Exception *a1)
{
}

void *boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<double>>>::get_instance()
{
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<double>>>::get_is_destroyed(void)::is_destroyed_flag) {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance();
  }
  {
    boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<double>>>::singleton_wrapper(boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<double>>>::get_instance(void)::t);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<double>>>::~singleton_wrapper, boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<double>>>::get_instance(void)::t, &dword_258F16000);
  }
  return boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<double>>>::get_instance(void)::t;
}

void sub_258F67538(_Unwind_Exception *a1)
{
}

void *boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::get_instance()
{
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::get_is_destroyed(void)::is_destroyed_flag) {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance();
  }
  {
    boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::singleton_wrapper(boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::get_instance(void)::t);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::~singleton_wrapper, boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::get_instance(void)::t, &dword_258F16000);
  }
  return boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::get_instance(void)::t;
}

void sub_258F675E4(_Unwind_Exception *a1)
{
}

void *boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::get_instance()
{
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::get_is_destroyed(void)::is_destroyed_flag) {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance();
  }
  {
    boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::singleton_wrapper(boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::get_instance(void)::t);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::~singleton_wrapper, boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::get_instance(void)::t, &dword_258F16000);
  }
  return boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::get_instance(void)::t;
}

void sub_258F67690(_Unwind_Exception *a1)
{
}

void *boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_instance()
{
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_is_destroyed(void)::is_destroyed_flag) {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance();
  }
  {
    boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::singleton_wrapper(boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_instance(void)::t);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::~singleton_wrapper, boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_instance(void)::t, &dword_258F16000);
  }
  return boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_instance(void)::t;
}

void sub_258F6773C(_Unwind_Exception *a1)
{
}

void *boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_instance()
{
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_is_destroyed(void)::is_destroyed_flag) {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance();
  }
  {
    boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::singleton_wrapper(boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_instance(void)::t);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::~singleton_wrapper, boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_instance(void)::t, &dword_258F16000);
  }
  return boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_instance(void)::t;
}

void sub_258F677E8(_Unwind_Exception *a1)
{
}

void *boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::get_instance()
{
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::get_is_destroyed(void)::is_destroyed_flag) {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance();
  }
  {
    boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::singleton_wrapper(boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::get_instance(void)::t);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::~singleton_wrapper, boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::get_instance(void)::t, &dword_258F16000);
  }
  return boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::get_instance(void)::t;
}

void sub_258F67894(_Unwind_Exception *a1)
{
}

void *boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<unsigned long long>>>::get_instance()
{
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<unsigned long long>>>::get_is_destroyed(void)::is_destroyed_flag) {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance();
  }
  {
    boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<unsigned long long>>>::singleton_wrapper(boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<unsigned long long>>>::get_instance(void)::t);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<unsigned long long>>>::~singleton_wrapper, boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<unsigned long long>>>::get_instance(void)::t, &dword_258F16000);
  }
  return boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<unsigned long long>>>::get_instance(void)::t;
}

void sub_258F67940(_Unwind_Exception *a1)
{
}

void *boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::get_instance()
{
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::get_is_destroyed(void)::is_destroyed_flag) {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance();
  }
  {
    boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::singleton_wrapper(boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::get_instance(void)::t);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::~singleton_wrapper, boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::get_instance(void)::t, &dword_258F16000);
  }
  return boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::get_instance(void)::t;
}

void sub_258F679EC(_Unwind_Exception *a1)
{
}

void *boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::unlimited_storage<std::allocator<char>>>>::get_instance()
{
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::unlimited_storage<std::allocator<char>>>>::get_is_destroyed(void)::is_destroyed_flag) {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance();
  }
  {
    boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::unlimited_storage<std::allocator<char>>>>::singleton_wrapper(boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::unlimited_storage<std::allocator<char>>>>::get_instance(void)::t);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::unlimited_storage<std::allocator<char>>>>::~singleton_wrapper, boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::unlimited_storage<std::allocator<char>>>>::get_instance(void)::t, &dword_258F16000);
  }
  return boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::unlimited_storage<std::allocator<char>>>>::get_instance(void)::t;
}

void sub_258F67A98(_Unwind_Exception *a1)
{
}

void *boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::get_instance()
{
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::get_is_destroyed(void)::is_destroyed_flag) {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance();
  }
  {
    boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::singleton_wrapper(boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::get_instance(void)::t);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::~singleton_wrapper, boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::get_instance(void)::t, &dword_258F16000);
  }
  return boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::get_instance(void)::t;
}

void sub_258F67B44(_Unwind_Exception *a1)
{
}

void *boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<pps::AxisEnum>>>::get_instance()
{
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<pps::AxisEnum>>>::get_is_destroyed(void)::is_destroyed_flag) {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance();
  }
  {
    boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<pps::AxisEnum>>>::singleton_wrapper(boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<pps::AxisEnum>>>::get_instance(void)::t);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<pps::AxisEnum>>>::~singleton_wrapper, boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<pps::AxisEnum>>>::get_instance(void)::t, &dword_258F16000);
  }
  return boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<pps::AxisEnum>>>::get_instance(void)::t;
}

void sub_258F67BF0(_Unwind_Exception *a1)
{
}

void *boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::string>>>::get_instance()
{
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::string>>>::get_is_destroyed(void)::is_destroyed_flag) {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance();
  }
  {
    boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::string>>>::singleton_wrapper(boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::string>>>::get_instance(void)::t);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::string>>>::~singleton_wrapper, boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::string>>>::get_instance(void)::t, &dword_258F16000);
  }
  return boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::string>>>::get_instance(void)::t;
}

void sub_258F67C9C(_Unwind_Exception *a1)
{
}

void *boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::pair<int const,std::vector<std::string>>>>::get_instance()
{
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::pair<int const,std::vector<std::string>>>>::get_is_destroyed(void)::is_destroyed_flag) {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance();
  }
  {
    boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::pair<int const,std::vector<std::string>>>>::singleton_wrapper(boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::pair<int const,std::vector<std::string>>>>::get_instance(void)::t);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::pair<int const,std::vector<std::string>>>>::~singleton_wrapper, boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::pair<int const,std::vector<std::string>>>>::get_instance(void)::t, &dword_258F16000);
  }
  return boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::pair<int const,std::vector<std::string>>>>::get_instance(void)::t;
}

void sub_258F67D48(_Unwind_Exception *a1)
{
}

void *boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::map<int,std::vector<std::string>>>>::get_instance()
{
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::map<int,std::vector<std::string>>>>::get_is_destroyed(void)::is_destroyed_flag) {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance();
  }
  {
    boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::map<int,std::vector<std::string>>>>::singleton_wrapper(boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::map<int,std::vector<std::string>>>>::get_instance(void)::t);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::map<int,std::vector<std::string>>>>::~singleton_wrapper, boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::map<int,std::vector<std::string>>>>::get_instance(void)::t, &dword_258F16000);
  }
  return boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::map<int,std::vector<std::string>>>>::get_instance(void)::t;
}

void sub_258F67DF4(_Unwind_Exception *a1)
{
}

void *boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,pps::Histogram_Internal>>::get_instance()
{
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,pps::Histogram_Internal>>::get_is_destroyed(void)::is_destroyed_flag) {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance();
  }
  {
    boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,pps::Histogram_Internal>>::singleton_wrapper(boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,pps::Histogram_Internal>>::get_instance(void)::t);
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,pps::Histogram_Internal>>::~singleton_wrapper, boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,pps::Histogram_Internal>>::get_instance(void)::t, &dword_258F16000);
  }
  return boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,pps::Histogram_Internal>>::get_instance(void)::t;
}

void sub_258F67EA0(_Unwind_Exception *a1)
{
}

void boost::archive::text_iarchive::text_iarchive()
{
}

void sub_258F67F0C()
{
  boost::archive::detail::basic_iarchive::~basic_iarchive(v0);
  boost::archive::basic_text_iprimitive<std::istream>::~basic_text_iprimitive();
}

void *boost::archive::detail::common_iarchive<boost::archive::text_iarchive>::vload(uint64_t a1, _DWORD *a2)
{
  uint64_t result = boost::archive::basic_text_iprimitive<std::istream>::load<unsigned int>((void *)(a1 + 40));
  *a2 = 0;
  return result;
}

void *boost::archive::detail::common_iarchive<boost::archive::text_iarchive>::vload(uint64_t a1)
{
  return boost::archive::basic_text_iprimitive<std::istream>::load<boost::archive::object_id_type>((void *)(a1 + 40));
}

{
  return boost::archive::basic_text_iprimitive<std::istream>::load<boost::archive::class_id_type>((void *)(a1 + 40));
}

{
  return boost::archive::basic_text_iprimitive<std::istream>::load<boost::archive::tracking_type>((void *)(a1 + 40));
}

void *boost::archive::basic_text_iprimitive<std::istream>::load<unsigned int>(void *a1)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  uint64_t result = (void *)MEMORY[0x25A2D4910](*a1);
  if ((*((unsigned char *)result + *(void *)(*result - 24) + 32) & 5) != 0)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v2, 8, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v2);
  }
  return result;
}

void sub_258F68078(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
}

void boost::serialization::throw_exception<boost::archive::archive_exception>(const boost::archive::archive_exception *a1)
{
  exception = (boost::archive::archive_exception *)__cxa_allocate_exception(0x90uLL);
  boost::archive::archive_exception::archive_exception(exception, a1);
}

void *boost::archive::basic_text_iprimitive<std::istream>::load<boost::archive::object_id_type>(void *a1)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  uint64_t result = (void *)MEMORY[0x25A2D4910](*a1);
  if ((*((unsigned char *)result + *(void *)(*result - 24) + 32) & 5) != 0)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v2, 8, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v2);
  }
  return result;
}

void sub_258F6816C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
}

void *boost::archive::basic_text_iprimitive<std::istream>::load<boost::archive::class_id_type>(void *a1)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  uint64_t result = (void *)MEMORY[0x25A2D4930](*a1);
  if ((*((unsigned char *)result + *(void *)(*result - 24) + 32) & 5) != 0)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v2, 8, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v2);
  }
  return result;
}

void sub_258F68220(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
}

void *boost::archive::basic_text_iprimitive<std::istream>::load<boost::archive::tracking_type>(void *a1)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  uint64_t result = (void *)MEMORY[0x25A2D48E0](*a1);
  if ((*((unsigned char *)result + *(void *)(*result - 24) + 32) & 5) != 0)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v2, 8, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v2);
  }
  return result;
}

void sub_258F682D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
}

void pps::Histogram_Internal::~Histogram_Internal(char **this)
{
  *this = (char *)&unk_2707027F0;
  std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::destroy((uint64_t)(this + 11), this[12]);
  uint64_t v2 = this[8];
  if (v2)
  {
    this[9] = v2;
    operator delete(v2);
  }
  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::destroy((uint64_t)(this + 4));
  uint64_t v3 = (void **)(this + 1);
  std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

{
  uint64_t vars8;

  pps::Histogram_Internal::~Histogram_Internal(this);
  JUMPOUT(0x25A2D4B50);
}

void boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::destroy(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if ((v1 == 0) != (*(void *)(a1 + 8) == 0)) {
    __assert_rtn("destroy", "unlimited_storage.hpp", 494, "(ptr == nullptr) == (size == 0)");
  }
  if (v1)
  {
    uint64_t v3 = a1;
    _ZNK5boost9histogram17unlimited_storageINSt3__19allocatorIcEEE11buffer_type5applyIZNS6_7destroyEvEUlPT_E_JEEEDcOS8_DpOT0_(a1, (uint64_t)&v3);
    *(void *)(a1 + 8) = 0;
    *(unsigned char *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
  }
}

void _ZNK5boost9histogram17unlimited_storageINSt3__19allocatorIcEEE11buffer_type5applyIZNS6_7destroyEvEUlPT_E_JEEEDcOS8_DpOT0_(uint64_t a1, uint64_t a2)
{
  switch(*(unsigned char *)(a1 + 16))
  {
    case 0:
      boost::histogram::detail::destroy_buffer<std::allocator<unsigned char>>((int)&v2, *(void **)(a1 + 24), *(void *)(*(void *)a2 + 8));
      break;
    case 1:
      boost::histogram::detail::destroy_buffer<std::allocator<unsigned char>>((int)&v3, *(void **)(a1 + 24), *(void *)(*(void *)a2 + 8));
      break;
    case 2:
      boost::histogram::detail::destroy_buffer<std::allocator<unsigned char>>((int)&v4, *(void **)(a1 + 24), *(void *)(*(void *)a2 + 8));
      break;
    case 3:
      boost::histogram::detail::destroy_buffer<std::allocator<unsigned char>>((int)&v5, *(void **)(a1 + 24), *(void *)(*(void *)a2 + 8));
      break;
    case 4:
      boost::histogram::detail::destroy_buffer<std::allocator<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>((int)&v6, *(char **)(a1 + 24), *(void *)(*(void *)a2 + 8));
      break;
    default:
      boost::histogram::detail::destroy_buffer<std::allocator<unsigned char>>((int)&v7, *(void **)(a1 + 24), *(void *)(*(void *)a2 + 8));
      break;
  }
}

void boost::histogram::detail::destroy_buffer<std::allocator<unsigned char>>(int a1, void *__p, uint64_t a3)
{
  if (!__p) {
    boost::histogram::detail::destroy_buffer<std::allocator<unsigned char>>();
  }
  if (!a3) {
    boost::histogram::detail::destroy_buffer<std::allocator<unsigned char>>();
  }
  operator delete(__p);
}

void boost::histogram::detail::destroy_buffer<std::allocator<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>(int a1, char *__p, uint64_t a3)
{
  if (!__p) {
    boost::histogram::detail::destroy_buffer<std::allocator<unsigned char>>();
  }
  if (!a3) {
    boost::histogram::detail::destroy_buffer<std::allocator<unsigned char>>();
  }
  uint64_t v4 = 24 * a3;
  do
  {
    char v5 = *(void **)&__p[v4 - 24];
    if (v5)
    {
      *(void *)&__p[v4 - 16] = v5;
      operator delete(v5);
    }
    v4 -= 24;
  }
  while (v4);
  operator delete(__p);
}

void std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  char v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    char v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content(v4);
      }
      while ((void *)v4 != v2);
      char v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content(uint64_t a1)
{
  int v1 = *(_DWORD *)a1 ^ (*(int *)a1 >> 31);
  if (v1 != 2)
  {
    if (v1 == 1)
    {
      boost::detail::variant::destroyer::internal_visit<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>((uint64_t)&v3, a1 + 8);
      return;
    }
    if (v1) {
      boost::detail::variant::forced_return<void>();
    }
  }
  if (*(char *)(a1 + 39) < 0)
  {
    char v2 = *(void **)(a1 + 16);
    operator delete(v2);
  }
}

void boost::detail::variant::destroyer::internal_visit<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 47) < 0) {
    operator delete(*(void **)(a2 + 24));
  }
  char v3 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + 8) = v3;
    operator delete(v3);
  }
}

uint64_t boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>::~variable(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  char v2 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

void boost::detail::variant::forced_return<void>()
{
  __assert_rtn("forced_return", "forced_return.hpp", 38, "false");
}

uint64_t ___ZL9logHandlev_block_invoke()
{
  logHandle(void)::logHandle = (uint64_t)os_log_create("com.apple.PerfPowerServicesReader", "PPSHistogram");
  return MEMORY[0x270F9A758]();
}

void boost::archive::text_oarchive::text_oarchive()
{
}

void sub_258F68824()
{
  boost::archive::detail::basic_oarchive::~basic_oarchive(v0);
  boost::archive::basic_text_oprimitive<std::ostream>::~basic_text_oprimitive();
}

void boost::archive::detail::common_oarchive<boost::archive::text_oarchive>::vsave(boost::archive::detail::basic_oarchive *a1)
{
  *((_DWORD *)a1 + 10) = 1;
  boost::archive::save_access::save_primitive<boost::archive::text_oarchive,boost::archive::object_id_type>(a1);
}

void boost::archive::save_access::save_primitive<boost::archive::text_oarchive,boost::archive::version_type>(boost::archive::detail::basic_oarchive *a1)
{
}

uint64_t boost::archive::basic_text_oprimitive<std::ostream>::save_impl<unsigned int>(void *a1)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  if ((*(unsigned char *)(*a1 + *(void *)(*(void *)*a1 - 24) + 32) & 5) != 0)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v2, 13, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v2);
  }
  return MEMORY[0x270F987B0]();
}

void sub_258F689B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
}

void boost::archive::save_access::save_primitive<boost::archive::text_oarchive,boost::archive::object_id_type>(boost::archive::detail::basic_oarchive *a1)
{
}

uint64_t boost::archive::basic_text_oprimitive<std::ostream>::save_impl<boost::archive::object_id_type>(void *a1)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  if ((*(unsigned char *)(*a1 + *(void *)(*(void *)*a1 - 24) + 32) & 5) != 0)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v2, 13, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v2);
  }
  return MEMORY[0x270F987B0]();
}

void sub_258F68AC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
}

void boost::archive::save_access::save_primitive<boost::archive::text_oarchive,boost::archive::object_reference_type>(boost::archive::detail::basic_oarchive *a1)
{
}

uint64_t boost::archive::basic_text_oprimitive<std::ostream>::save_impl<boost::archive::object_reference_type>(void *a1)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  if ((*(unsigned char *)(*a1 + *(void *)(*(void *)*a1 - 24) + 32) & 5) != 0)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v2, 13, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v2);
  }
  return MEMORY[0x270F987B0]();
}

void sub_258F68BD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
}

void boost::archive::save_access::save_primitive<boost::archive::text_oarchive,boost::archive::class_id_type>(boost::archive::detail::basic_oarchive *a1)
{
}

uint64_t boost::archive::basic_text_oprimitive<std::ostream>::save_impl<boost::archive::class_id_type>(void *a1)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  if ((*(unsigned char *)(*a1 + *(void *)(*(void *)*a1 - 24) + 32) & 5) != 0)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v2, 13, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v2);
  }
  return MEMORY[0x270F987C8]();
}

void sub_258F68CDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
}

void boost::archive::save_access::save_primitive<boost::archive::text_oarchive,boost::archive::class_id_reference_type>(boost::archive::detail::basic_oarchive *a1)
{
}

uint64_t boost::archive::basic_text_oprimitive<std::ostream>::save_impl<boost::archive::class_id_reference_type>(void *a1)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  if ((*(unsigned char *)(*a1 + *(void *)(*(void *)*a1 - 24) + 32) & 5) != 0)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v2, 13, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v2);
  }
  return MEMORY[0x270F987C8]();
}

void sub_258F68DE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
}

void boost::archive::save_access::save_primitive<boost::archive::text_oarchive,boost::archive::tracking_type>(boost::archive::detail::basic_oarchive *a1)
{
}

uint64_t boost::archive::basic_text_oprimitive<std::ostream>::save_impl<boost::archive::tracking_type>(void *a1)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  if ((*(unsigned char *)(*a1 + *(void *)(*(void *)*a1 - 24) + 32) & 5) != 0)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v2, 13, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v2);
  }
  return MEMORY[0x270F98788]();
}

void sub_258F68EF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
}

void *std::string::basic_string[abi:ne180100](void *__dst, void *__src, size_t __len)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    char v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((unsigned char *)__dst + 23) = __len;
    char v6 = __dst;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __dst;
}

void std::string::__throw_length_error[abi:ne180100]()
{
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_2654426C8, MEMORY[0x263F8C060]);
}

void sub_258F69014(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C388] + 16);
  return result;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  int v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x263F8C208], MEMORY[0x263F8C090]);
}

void *std::string::basic_string[abi:ne180100]<0>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    char v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    char v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

uint64_t std::stringbuf::basic_stringbuf[abi:ne180100](uint64_t a1, const std::string *a2, int a3)
{
  uint64_t v6 = std::streambuf::basic_streambuf();
  *(void *)uint64_t v6 = MEMORY[0x263F8C318] + 16;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_DWORD *)(v6 + 96) = a3;
  std::string::operator=((std::string *)(v6 + 64), a2);
  std::stringbuf::__init_buf_ptrs[abi:ne180100](a1);
  return a1;
}

void sub_258F691C0(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 87) < 0) {
    operator delete(*v2);
  }
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

void std::stringbuf::__init_buf_ptrs[abi:ne180100](uint64_t a1)
{
  *(void *)(a1 + 88) = 0;
  char v2 = (std::string *)(a1 + 64);
  char v3 = *(unsigned char *)(a1 + 87);
  if (v3 < 0)
  {
    size_t v4 = *(std::string **)(a1 + 64);
    unint64_t v5 = *(void *)(a1 + 72);
  }
  else
  {
    size_t v4 = v2;
    unint64_t v5 = *(unsigned __int8 *)(a1 + 87);
  }
  int v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
    *(void *)(a1 + 88) = (char *)v4 + v5;
    *(void *)(a1 + 16) = v4;
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 32) = (char *)v4 + v5;
  }
  if ((v6 & 0x10) != 0)
  {
    *(void *)(a1 + 88) = (char *)v4 + v5;
    std::string::size_type v7 = v3 < 0 ? (*(void *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22;
    std::string::resize(v2, v7, 0);
    uint64_t v8 = *(char *)(a1 + 87) < 0 ? *(void *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(void *)(a1 + 40) = v4;
    *(void *)(a1 + 48) = v4;
    *(void *)(a1 + 56) = (char *)v4 + v8;
    if ((*(unsigned char *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        uint64_t v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        unint64_t v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
        size_t v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
        unint64_t v5 = v5 - v10 - 0x7FFFFFFF;
        *(void *)(a1 + 48) = v4;
      }
      if (v5) {
        *(void *)(a1 + 48) = (char *)v4 + v5;
      }
    }
  }
}

void std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::destroy(a1, *(void *)a2);
    std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::destroy(a1, *((void *)a2 + 1));
    size_t v4 = (void **)(a2 + 40);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
    operator delete(a2);
  }
}

void boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::~singleton_wrapper(boost::serialization::extended_type_info *a1)
{
  *(void *)a1 = &unk_270702910;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::~extended_type_info_typeid(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_270702910;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::~extended_type_info_typeid(a1);
  JUMPOUT(0x25A2D4B50);
}

boost::serialization::typeid_system::extended_type_info_typeid_0 *boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::singleton_wrapper(boost::serialization::typeid_system::extended_type_info_typeid_0 *a1)
{
  *(void *)boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::extended_type_info_typeid(a1) = &unk_270702910;
  if (boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_is_destroyed(void)::is_destroyed_flag) {
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  }
  return a1;
}

void sub_258F693F8(_Unwind_Exception *a1)
{
  boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::~extended_type_info_typeid(v1);
  _Unwind_Resume(a1);
}

boost::serialization::typeid_system::extended_type_info_typeid_0 *boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::extended_type_info_typeid(boost::serialization::typeid_system::extended_type_info_typeid_0 *a1)
{
  char v2 = (boost::serialization::typeid_system::extended_type_info_typeid_0 *)boost::serialization::typeid_system::extended_type_info_typeid_0::extended_type_info_typeid_0(a1, 0);
  *(void *)char v2 = &unk_2707029B8;
  boost::serialization::extended_type_info::key_register((uint64_t *)a1);
  return a1;
}

void sub_258F69468(_Unwind_Exception *a1)
{
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(v1);
  _Unwind_Resume(a1);
}

void boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::~extended_type_info_typeid(boost::serialization::extended_type_info *a1)
{
  *(void *)a1 = &unk_2707029B8;
  boost::serialization::extended_type_info::key_unregister(a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::type_unregister((uint64_t *)a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(a1);
}

{
  uint64_t vars8;

  boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::~extended_type_info_typeid(a1);
  JUMPOUT(0x25A2D4B50);
}

uint64_t boost::serialization::typeid_system::extended_type_info_typeid_0::get_debug_info(boost::serialization::typeid_system::extended_type_info_typeid_0 *this)
{
  uint64_t v1 = *((void *)this + 3);
  if (v1) {
    return *(void *)(v1 + 8) & 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    return 0;
  }
}

void boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 0:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
    case 1:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
    case 2:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
    case 3:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
    case 4:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
    default:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
  }
}

uint64_t boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::destroy(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 8))(a2);
  }
  return result;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,pps::Histogram_Internal>::load_object_data(uint64_t a1, const void *a2, uint64_t a3)
{
  size_t v4 = (boost::archive::detail::basic_iarchive_impl **)boost::serialization::smart_cast_impl::reference<boost::archive::text_iarchive &>::polymorphic::cross::cast<boost::archive::detail::basic_iarchive>(a2);
  return pps::Histogram_Internal::serialize<boost::archive::text_iarchive>(a3, v4);
}

uint64_t pps::Histogram_Internal::serialize<boost::archive::text_iarchive>(uint64_t a1, boost::archive::detail::basic_iarchive_impl **a2)
{
  unint64_t v4 = a1 + 8;
  instance = (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::get_instance();
  boost::archive::detail::basic_iarchive::load_object(a2, v4, instance);
  int v6 = (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<pps::AxisEnum>>>::get_instance();
  boost::archive::detail::basic_iarchive::load_object(a2, a1 + 64, v6);
  std::string::size_type v7 = (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::map<int,std::vector<std::string>>>>::get_instance();
  return boost::archive::detail::basic_iarchive::load_object(a2, a1 + 88, v7);
}

void *boost::serialization::smart_cast_impl::reference<boost::archive::text_iarchive &>::polymorphic::cross::cast<boost::archive::detail::basic_iarchive>(const void *a1)
{
  if (!result) {
    __cxa_bad_cast();
  }
  return result;
}

void boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::~singleton_wrapper(boost::serialization::extended_type_info *a1)
{
  *(void *)a1 = &unk_270702A00;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>::~extended_type_info_typeid(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_270702A00;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>::~extended_type_info_typeid(a1);
  JUMPOUT(0x25A2D4B50);
}

boost::serialization::typeid_system::extended_type_info_typeid_0 *boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::singleton_wrapper(boost::serialization::typeid_system::extended_type_info_typeid_0 *a1)
{
  *(void *)boost::serialization::extended_type_info_typeid<boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>::extended_type_info_typeid(a1) = &unk_270702A00;
  if (boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::get_is_destroyed(void)::is_destroyed_flag) {
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  }
  return a1;
}

void sub_258F697F8(_Unwind_Exception *a1)
{
  boost::serialization::extended_type_info_typeid<boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>::~extended_type_info_typeid(v1);
  _Unwind_Resume(a1);
}

boost::serialization::typeid_system::extended_type_info_typeid_0 *boost::serialization::extended_type_info_typeid<boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>::extended_type_info_typeid(boost::serialization::typeid_system::extended_type_info_typeid_0 *a1)
{
  char v2 = (boost::serialization::typeid_system::extended_type_info_typeid_0 *)boost::serialization::typeid_system::extended_type_info_typeid_0::extended_type_info_typeid_0(a1, 0);
  *(void *)char v2 = &unk_270702AA8;
  boost::serialization::extended_type_info::key_register((uint64_t *)a1);
  return a1;
}

void sub_258F69868(_Unwind_Exception *a1)
{
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(v1);
  _Unwind_Resume(a1);
}

void boost::serialization::extended_type_info_typeid<boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>::~extended_type_info_typeid(boost::serialization::extended_type_info *a1)
{
  *(void *)a1 = &unk_270702AA8;
  boost::serialization::extended_type_info::key_unregister(a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::type_unregister((uint64_t *)a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(a1);
}

{
  uint64_t vars8;

  boost::serialization::extended_type_info_typeid<boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>::~extended_type_info_typeid(a1);
  JUMPOUT(0x25A2D4B50);
}

void boost::serialization::extended_type_info_typeid<boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>::construct(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 0:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
    case 1:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
    case 2:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
    case 3:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
    case 4:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
    default:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
  }
}

uint64_t boost::serialization::extended_type_info_typeid<boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>::destroy(uint64_t a1, uint64_t a2)
{
  return boost::serialization::access::destroy<boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>(a2);
}

uint64_t boost::serialization::access::destroy<boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (void **)result;
    boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::destroy(result + 24);
    char v2 = v1;
    std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__destroy_vector::operator()[abi:ne180100](&v2);
    return MEMORY[0x25A2D4B50](v1, 0x10A0C400559A86CLL);
  }
  return result;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>::load_object_data(uint64_t a1, const void *a2, unint64_t a3)
{
  unint64_t v4 = (boost::archive::detail::basic_iarchive_impl **)boost::serialization::smart_cast_impl::reference<boost::archive::text_iarchive &>::polymorphic::cross::cast<boost::archive::detail::basic_iarchive>(a2);
  return boost::histogram::serialize<boost::archive::text_iarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>(v4, a3);
}

uint64_t boost::histogram::serialize<boost::archive::text_iarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>(boost::archive::detail::basic_iarchive_impl **a1, unint64_t a2)
{
  instance = (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::get_instance();
  boost::archive::detail::basic_iarchive::load_object(a1, a2, instance);
  unint64_t v5 = (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::unlimited_storage<std::allocator<char>>>>::get_instance();
  return boost::archive::detail::basic_iarchive::load_object(a1, a2 + 24, v5);
}

void boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::~singleton_wrapper(boost::serialization::extended_type_info *a1)
{
  *(void *)a1 = &unk_270702B00;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::~extended_type_info_typeid(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_270702B00;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::~extended_type_info_typeid(a1);
  JUMPOUT(0x25A2D4B50);
}

boost::serialization::typeid_system::extended_type_info_typeid_0 *boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::singleton_wrapper(boost::serialization::typeid_system::extended_type_info_typeid_0 *a1)
{
  *(void *)boost::serialization::extended_type_info_typeid<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::extended_type_info_typeid(a1) = &unk_270702B00;
  if (boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::get_is_destroyed(void)::is_destroyed_flag) {
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  }
  return a1;
}

void sub_258F69B8C(_Unwind_Exception *a1)
{
  boost::serialization::extended_type_info_typeid<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::~extended_type_info_typeid(v1);
  _Unwind_Resume(a1);
}

boost::serialization::typeid_system::extended_type_info_typeid_0 *boost::serialization::extended_type_info_typeid<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::extended_type_info_typeid(boost::serialization::typeid_system::extended_type_info_typeid_0 *a1)
{
  char v2 = (boost::serialization::typeid_system::extended_type_info_typeid_0 *)boost::serialization::typeid_system::extended_type_info_typeid_0::extended_type_info_typeid_0(a1, 0);
  *(void *)char v2 = &unk_270702BA8;
  boost::serialization::extended_type_info::key_register((uint64_t *)a1);
  return a1;
}

void sub_258F69BFC(_Unwind_Exception *a1)
{
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(v1);
  _Unwind_Resume(a1);
}

void boost::serialization::extended_type_info_typeid<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::~extended_type_info_typeid(boost::serialization::extended_type_info *a1)
{
  *(void *)a1 = &unk_270702BA8;
  boost::serialization::extended_type_info::key_unregister(a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::type_unregister((uint64_t *)a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(a1);
}

{
  uint64_t vars8;

  boost::serialization::extended_type_info_typeid<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::~extended_type_info_typeid(a1);
  JUMPOUT(0x25A2D4B50);
}

void boost::serialization::extended_type_info_typeid<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::construct(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 0:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
    case 1:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
    case 2:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
    case 3:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
    case 4:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
    default:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
  }
}

void **boost::serialization::extended_type_info_typeid<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::destroy(uint64_t a1, void **a2)
{
  return boost::serialization::access::destroy<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>(a2);
}

void **boost::serialization::access::destroy<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>(void **result)
{
  if (result)
  {
    uint64_t v1 = result;
    char v2 = result;
    std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__destroy_vector::operator()[abi:ne180100](&v2);
    return (void **)MEMORY[0x25A2D4B50](v1, 0x20C40960023A9);
  }
  return result;
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::load_object_data(uint64_t a1, const void *a2, uint64_t *a3)
{
  unint64_t v4 = boost::serialization::smart_cast_impl::reference<boost::archive::text_iarchive &>::polymorphic::cross::cast<boost::archive::detail::basic_iarchive>(a2);
  boost::serialization::free_loader<boost::archive::text_iarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::invoke((uint64_t)v4, a3);
}

void boost::serialization::free_loader<boost::archive::text_iarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::invoke(uint64_t a1, uint64_t *a2)
{
  boost::archive::detail::basic_iarchive::get_library_version(a1, &v6);
  unint64_t v5 = 0;
  boost::archive::basic_text_iprimitive<std::istream>::load<boost::serialization::collection_size_type>((void *)(a1 + 40));
  if (v6 >= 4u) {
    boost::archive::basic_text_iprimitive<std::istream>::load<unsigned int>((void *)(a1 + 40));
  }
  std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::reserve(a2, v5);
  unint64_t v4 = v5;
  boost::serialization::stl::collection_load_impl<boost::archive::text_iarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>((boost::archive::detail::basic_iarchive_impl **)a1, a2, &v4);
}

uint64_t std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0x6DB6DB6DB6DB6DB7 * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x492492492492493) {
      std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 56 * v6;
    std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_258F69F6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void boost::serialization::stl::collection_load_impl<boost::archive::text_iarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>(boost::archive::detail::basic_iarchive_impl **a1, uint64_t *a2, unint64_t *a3)
{
  std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::resize(a2, *a3);
  unint64_t v6 = *a2;
  if ((*a3)--)
  {
    do
    {
      instance = (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_instance();
      boost::archive::detail::basic_iarchive::load_object(a1, v6, instance);
      unint64_t v9 = (*a3)--;
      v6 += 56;
    }
    while (v9);
  }
}

void *boost::archive::basic_text_iprimitive<std::istream>::load<boost::serialization::collection_size_type>(void *a1)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  uint64_t result = (void *)MEMORY[0x25A2D4920](*a1);
  if ((*((unsigned char *)result + *(void *)(*result - 24) + 32) & 5) != 0)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v2, 8, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v2);
  }
  return result;
}

void sub_258F6A09C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
}

void std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__throw_length_error[abi:ne180100]()
{
}

uint64_t std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t result = a2[1];
  while (v4 != v5)
  {
    v4 -= 56;
    uint64_t result = boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::variant(result - 56, v4);
  }
  a2[1] = result;
  uint64_t v7 = *a1;
  *a1 = result;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x492492492492493) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(56 * a2);
}

uint64_t boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::variant(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)a2 ^ (*(int *)a2 >> 31);
  if (v2 == 2)
  {
    *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
    long long v5 = *(_OWORD *)(a2 + 16);
    *(void *)(result + 32) = *(void *)(a2 + 32);
    *(_OWORD *)(result + 16) = v5;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 16) = 0;
    *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 40);
  }
  else if (v2 == 1)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(_OWORD *)(result + 8) = *(_OWORD *)(a2 + 8);
    *(void *)(result + 24) = *(void *)(a2 + 24);
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    long long v4 = *(_OWORD *)(a2 + 32);
    *(void *)(result + 48) = *(void *)(a2 + 48);
    *(_OWORD *)(result + 32) = v4;
    *(void *)(a2 + 40) = 0;
    *(void *)(a2 + 48) = 0;
    *(void *)(a2 + 32) = 0;
  }
  else
  {
    if (v2) {
      boost::detail::variant::forced_return<void>();
    }
    *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
    long long v3 = *(_OWORD *)(a2 + 16);
    *(void *)(result + 32) = *(void *)(a2 + 32);
    *(_OWORD *)(result + 16) = v3;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 16) = 0;
    *(_OWORD *)(result + 40) = *(_OWORD *)(a2 + 40);
  }
  *(_DWORD *)uint64_t result = *(_DWORD *)a2 ^ (*(int *)a2 >> 31);
  return result;
}

uint64_t std::__split_buffer<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 56;
    boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content(i - 56);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0x6DB6DB6DB6DB6DB7 * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 56 * a2;
    while (v3 != v7)
    {
      v3 -= 56;
      boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content(v3);
    }
    a1[1] = v7;
  }
}

uint64_t std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(result - 8);
  if (0x6DB6DB6DB6DB6DB7 * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      uint64_t v13 = v7 + 56 * a2;
      do
      {
        *(_OWORD *)(v7 + 16) = 0uLL;
        *(_OWORD *)(v7 + 32) = 0uLL;
        *(_OWORD *)uint64_t v7 = 0uLL;
        *(void *)(v7 + 48) = 0x3FF0000000000000;
        v7 += 56;
      }
      while (v7 != v13);
      uint64_t v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x492492492492492) {
      std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x6DB6DB6DB6DB6DB7 * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x249249249249249) {
      unint64_t v11 = 0x492492492492492;
    }
    else {
      unint64_t v11 = v9;
    }
    v16[4] = result;
    if (v11) {
      unint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>(result, v11);
    }
    else {
      unint64_t v12 = 0;
    }
    BOOL v14 = &v12[56 * v8];
    v16[0] = v12;
    v16[1] = v14;
    v16[3] = &v12[56 * v11];
    int v15 = &v14[56 * a2];
    do
    {
      *((_OWORD *)v14 + 1) = 0uLL;
      *((_OWORD *)v14 + 2) = 0uLL;
      *(_OWORD *)BOOL v14 = 0uLL;
      *((void *)v14 + 6) = 0x3FF0000000000000;
      v14 += 56;
    }
    while (v14 != v15);
    v16[2] = v15;
    std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__swap_out_circular_buffer(a1, v16);
    return std::__split_buffer<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::~__split_buffer((uint64_t)v16);
  }
  return result;
}

void sub_258F6A4CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::~singleton_wrapper(boost::serialization::extended_type_info *a1)
{
  *(void *)a1 = &unk_270702C00;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::~extended_type_info_typeid(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_270702C00;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::~extended_type_info_typeid(a1);
  JUMPOUT(0x25A2D4B50);
}

boost::serialization::typeid_system::extended_type_info_typeid_0 *boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::singleton_wrapper(boost::serialization::typeid_system::extended_type_info_typeid_0 *a1)
{
  *(void *)boost::serialization::extended_type_info_typeid<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::extended_type_info_typeid(a1) = &unk_270702C00;
  if (boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_is_destroyed(void)::is_destroyed_flag) {
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  }
  return a1;
}

void sub_258F6A580(_Unwind_Exception *a1)
{
  boost::serialization::extended_type_info_typeid<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::~extended_type_info_typeid(v1);
  _Unwind_Resume(a1);
}

boost::serialization::typeid_system::extended_type_info_typeid_0 *boost::serialization::extended_type_info_typeid<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::extended_type_info_typeid(boost::serialization::typeid_system::extended_type_info_typeid_0 *a1)
{
  int v2 = (boost::serialization::typeid_system::extended_type_info_typeid_0 *)boost::serialization::typeid_system::extended_type_info_typeid_0::extended_type_info_typeid_0(a1, 0);
  *(void *)int v2 = &unk_270702CA8;
  boost::serialization::extended_type_info::key_register((uint64_t *)a1);
  return a1;
}

void sub_258F6A5F0(_Unwind_Exception *a1)
{
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(v1);
  _Unwind_Resume(a1);
}

void boost::serialization::extended_type_info_typeid<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::~extended_type_info_typeid(boost::serialization::extended_type_info *a1)
{
  *(void *)a1 = &unk_270702CA8;
  boost::serialization::extended_type_info::key_unregister(a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::type_unregister((uint64_t *)a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(a1);
}

{
  uint64_t vars8;

  boost::serialization::extended_type_info_typeid<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::~extended_type_info_typeid(a1);
  JUMPOUT(0x25A2D4B50);
}

void boost::serialization::extended_type_info_typeid<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::construct(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 0:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
    case 1:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
    case 2:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
    case 3:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
    case 4:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
    default:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
  }
}

uint64_t boost::serialization::extended_type_info_typeid<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::destroy(uint64_t a1, uint64_t a2)
{
  return boost::serialization::access::destroy<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>(a2);
}

uint64_t boost::serialization::access::destroy<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>(uint64_t result)
{
  if (result)
  {
    boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content(result);
    JUMPOUT(0x25A2D4B50);
  }
  return result;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::load_object_data(uint64_t a1, const void *a2, unint64_t a3)
{
  unint64_t v4 = (boost::archive::detail::basic_iarchive_impl **)boost::serialization::smart_cast_impl::reference<boost::archive::text_iarchive &>::polymorphic::cross::cast<boost::archive::detail::basic_iarchive>(a2);
  instance = (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_instance();
  return boost::archive::detail::basic_iarchive::load_object(v4, a3, instance);
}

void boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::~singleton_wrapper(boost::serialization::extended_type_info *a1)
{
  *(void *)a1 = &unk_270702D18;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::~extended_type_info_typeid(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_270702D18;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::~extended_type_info_typeid(a1);
  JUMPOUT(0x25A2D4B50);
}

boost::serialization::typeid_system::extended_type_info_typeid_0 *boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::singleton_wrapper(boost::serialization::typeid_system::extended_type_info_typeid_0 *a1)
{
  *(void *)boost::serialization::extended_type_info_typeid<boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::extended_type_info_typeid(a1) = &unk_270702D18;
  if (boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_is_destroyed(void)::is_destroyed_flag) {
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  }
  return a1;
}

void sub_258F6A8B4(_Unwind_Exception *a1)
{
  boost::serialization::extended_type_info_typeid<boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::~extended_type_info_typeid(v1);
  _Unwind_Resume(a1);
}

boost::serialization::typeid_system::extended_type_info_typeid_0 *boost::serialization::extended_type_info_typeid<boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::extended_type_info_typeid(boost::serialization::typeid_system::extended_type_info_typeid_0 *a1)
{
  int v2 = (boost::serialization::typeid_system::extended_type_info_typeid_0 *)boost::serialization::typeid_system::extended_type_info_typeid_0::extended_type_info_typeid_0(a1, 0);
  *(void *)int v2 = &unk_270702DC0;
  boost::serialization::extended_type_info::key_register((uint64_t *)a1);
  return a1;
}

void sub_258F6A924(_Unwind_Exception *a1)
{
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(v1);
  _Unwind_Resume(a1);
}

void boost::serialization::extended_type_info_typeid<boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::~extended_type_info_typeid(boost::serialization::extended_type_info *a1)
{
  *(void *)a1 = &unk_270702DC0;
  boost::serialization::extended_type_info::key_unregister(a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::type_unregister((uint64_t *)a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(a1);
}

{
  uint64_t vars8;

  boost::serialization::extended_type_info_typeid<boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::~extended_type_info_typeid(a1);
  JUMPOUT(0x25A2D4B50);
}

void boost::serialization::extended_type_info_typeid<boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::construct(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 0:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
    case 1:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
    case 2:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
    case 3:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
    case 4:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
    default:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
  }
}

uint64_t boost::serialization::extended_type_info_typeid<boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::destroy(uint64_t a1, uint64_t a2)
{
  return boost::serialization::access::destroy<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>(a2);
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::load_object_data(uint64_t a1, const void *a2, int *a3)
{
  unint64_t v4 = boost::serialization::smart_cast_impl::reference<boost::archive::text_iarchive &>::polymorphic::cross::cast<boost::archive::detail::basic_iarchive>(a2);
  boost::serialization::load<boost::archive::text_iarchive,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>((uint64_t)v4, a3);
}

void boost::serialization::load<boost::archive::text_iarchive,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>(uint64_t a1, int *a2)
{
}

void sub_258F6ABA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
}

void *boost::archive::basic_text_iprimitive<std::istream>::load<int>(void *a1)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  uint64_t result = (void *)MEMORY[0x25A2D4900](*a1);
  if ((*((unsigned char *)result + *(void *)(*result - 24) + 32) & 5) != 0)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v2, 8, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v2);
  }
  return result;
}

void sub_258F6AC5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
}

void boost::serialization::variant_impl<boost::mpl::l_item<mpl_::long_<3l>,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::mpl::l_item<mpl_::long_<2l>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::mpl::l_item<mpl_::long_<1l>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>,boost::mpl::l_end>>>>::load_impl::invoke<boost::archive::text_iarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>(boost::archive::detail::basic_iarchive_impl **a1, int a2, int *a3)
{
  if (a2)
  {
    int v5 = a2 - 1;
    boost::serialization::variant_impl<boost::mpl::l_item<mpl_::long_<2l>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::mpl::l_item<mpl_::long_<1l>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>,boost::mpl::l_end>>>::load_impl::invoke<boost::archive::text_iarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>(a1, v5, a3);
  }
  else
  {
    int v8 = 0;
    *(_OWORD *)__p = 0u;
    long long v10 = 0u;
    uint64_t v11 = 0x3FF0000000000000;
    instance = (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::get_instance();
    boost::archive::detail::basic_iarchive::load_object(a1, (unint64_t)&v8, instance);
    boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::assign<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>((uint64_t)a3, &v8);
    uint64_t v7 = boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::apply_visitor<boost::detail::variant::get_visitor<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>(a3);
    if (!v7)
    {
      unint64_t v12 = &unk_270702F40;
      boost::throw_exception<boost::bad_get>();
    }
    boost::archive::detail::basic_iarchive::reset_object_address((uint64_t)a1, v7, &v8);
    if (SBYTE7(v10) < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_258F6AD5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::assign<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>(uint64_t a1, _DWORD *a2)
{
  v6[6] = *MEMORY[0x263EF8340];
  unint64_t v4 = a2;
  if ((boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::apply_visitor<boost::detail::variant::direct_assigner<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>(a1, &v4) & 1) == 0)
  {
    int v5 = boost::detail::variant::make_initializer_node::apply<boost::mpl::pair<boost::detail::variant::initializer_root,mpl_::int_<0>>,boost::mpl::l_iter<boost::mpl::list3<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::initializer_node::initialize((uint64_t)v6, (uint64_t)a2);
    boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::variant_assign(a1, (uint64_t)&v5);
    boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content((uint64_t)&v5);
  }
}

void sub_258F6AE24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::apply_visitor<boost::detail::variant::direct_assigner<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>(uint64_t a1, _DWORD **a2)
{
  int v2 = *(_DWORD *)a1 ^ (*(int *)a1 >> 31);
  if ((v2 - 1) < 2) {
    return 0;
  }
  if (v2) {
    boost::detail::variant::forced_return<void>();
  }
  int v5 = *a2;
  *(_DWORD *)(a1 + 8) = **a2;
  std::string::operator=((std::string *)(a1 + 16), (const std::string *)(v5 + 2));
  *(_OWORD *)(a1 + 40) = *((_OWORD *)v5 + 2);
  return 1;
}

void boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::variant_assign(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 == *(_DWORD *)a2)
  {
    int v5 = (_DWORD *)(a2 + 8);
    int v15 = (__n128 *)(a2 + 8);
    switch(v4 ^ (v4 >> 31))
    {
      case 0:
        *(_DWORD *)(a1 + 8) = *v5;
        uint64_t v6 = (void **)(a1 + 16);
        if (*(char *)(a1 + 39) < 0) {
          operator delete(*v6);
        }
        long long v7 = *(_OWORD *)(a2 + 16);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(_OWORD *)uint64_t v6 = v7;
        *(unsigned char *)(a2 + 39) = 0;
        *(unsigned char *)(a2 + 16) = 0;
        *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
        return;
      case 1:
        boost::detail::variant::move_storage::internal_visit<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>(&v15, a1 + 8);
        return;
      case 2:
        *(_DWORD *)(a1 + 8) = *v5;
        unint64_t v9 = (void **)(a1 + 16);
        if (*(char *)(a1 + 39) < 0) {
          operator delete(*v9);
        }
        long long v10 = *(_OWORD *)(a2 + 16);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(_OWORD *)unint64_t v9 = v10;
        *(unsigned char *)(a2 + 39) = 0;
        *(unsigned char *)(a2 + 16) = 0;
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
        return;
      default:
        goto LABEL_16;
    }
  }
  switch(*(_DWORD *)a2 ^ (*(int *)a2 >> 31))
  {
    case 0:
      boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content(a1);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
      long long v8 = *(_OWORD *)(a2 + 16);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(_OWORD *)(a1 + 16) = v8;
      *(void *)(a2 + 24) = 0;
      *(void *)(a2 + 32) = 0;
      *(void *)(a2 + 16) = 0;
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(_DWORD *)a1 = 0;
      return;
    case 1:
      uint64_t v11 = (void *)(a2 + 8);
      boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content(a1);
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
      *(void *)(a1 + 24) = 0;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *uint64_t v11 = 0;
      *(void *)(a2 + 16) = 0;
      *(void *)(a2 + 24) = 0;
      long long v12 = *(_OWORD *)(a2 + 32);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = v12;
      *(void *)(a2 + 40) = 0;
      *(void *)(a2 + 48) = 0;
      *(void *)(a2 + 32) = 0;
      int v13 = 1;
      goto LABEL_14;
    case 2:
      boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content(a1);
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
      long long v14 = *(_OWORD *)(a2 + 16);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(_OWORD *)(a1 + 16) = v14;
      *(void *)(a2 + 24) = 0;
      *(void *)(a2 + 32) = 0;
      *(void *)(a2 + 16) = 0;
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
      int v13 = 2;
LABEL_14:
      *(_DWORD *)a1 = v13;
      return;
    default:
LABEL_16:
      boost::detail::variant::forced_return<void>();
  }
}

{
  int v4;
  int v5;
  int *v6;
  const std::string *v7;
  int v8;

  int v4 = *(_DWORD *)a1;
  int v5 = *(_DWORD *)a2;
  if (*(_DWORD *)a1 == *(_DWORD *)a2)
  {
    long long v7 = (const std::string *)(a2 + 8);
    switch(v4 ^ (v4 >> 31))
    {
      case 0:
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
        std::string::operator=((std::string *)(a1 + 16), (const std::string *)(a2 + 16));
        *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
        return;
      case 1:
        boost::detail::variant::assign_storage::internal_visit<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>(&v7, (std::string *)(a1 + 8));
        return;
      case 2:
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
        std::string::operator=((std::string *)(a1 + 16), (const std::string *)(a2 + 16));
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
        return;
      default:
        goto LABEL_11;
    }
  }
  long long v7 = (const std::string *)a1;
  long long v8 = v5 ^ (v5 >> 31);
  uint64_t v6 = (int *)(a2 + 8);
  switch(v8)
  {
    case 0:
      boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::assigner::assign_impl<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::has_fallback_type_>((uint64_t)&v7, v6);
      break;
    case 1:
      boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::assigner::assign_impl<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::has_fallback_type_>((uint64_t)&v7, (uint64_t)v6);
      break;
    case 2:
      boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::assigner::assign_impl<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::has_fallback_type_>((uint64_t)&v7, v6);
      break;
    default:
LABEL_11:
      boost::detail::variant::forced_return<void>();
  }
}

uint64_t boost::detail::variant::make_initializer_node::apply<boost::mpl::pair<boost::detail::variant::initializer_root,mpl_::int_<0>>,boost::mpl::l_iter<boost::mpl::list3<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::initializer_node::initialize(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  int v4 = (std::string *)(a1 + 8);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 8);
    v4->__r_.__value_.__r.__words[2] = *(void *)(a2 + 24);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  return 0;
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  long long v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    long long v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    long long v5 = v8;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

__n128 boost::detail::variant::move_storage::internal_visit<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>(__n128 **a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  std::vector<double>::__move_assign(a2, *a1);
  int v4 = (void **)(a2 + 24);
  if (*(char *)(a2 + 47) < 0) {
    operator delete(*v4);
  }
  __n128 result = *(__n128 *)((char *)v3 + 24);
  *(void *)(a2 + 40) = v3[2].n128_u64[1];
  *(__n128 *)int v4 = result;
  v3[2].n128_u8[15] = 0;
  v3[1].n128_u8[8] = 0;
  return result;
}

__n128 std::vector<double>::__move_assign(uint64_t a1, __n128 *a2)
{
  int v4 = *(void **)a1;
  if (v4)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  __n128 result = *a2;
  *(__n128 *)a1 = *a2;
  *(void *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

void boost::throw_exception<boost::bad_get>()
{
  exception = __cxa_allocate_exception(0x38uLL);
  boost::wrapexcept<boost::bad_get>::wrapexcept((uint64_t)exception);
}

void sub_258F6B3B4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_DWORD *boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::apply_visitor<boost::detail::variant::get_visitor<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>(int *a1)
{
  int v2 = *a1;
  __n128 result = a1 + 2;
  switch(v2 ^ (v2 >> 31))
  {
    case 0:
      return result;
    case 1:
    case 2:
      __n128 result = 0;
      break;
    default:
      boost::detail::variant::forced_return<void>();
  }
  return result;
}

uint64_t boost::wrapexcept<boost::bad_get>::wrapexcept(uint64_t result)
{
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = 0;
  *(_DWORD *)(result + 48) = -1;
  *(void *)__n128 result = &unk_270702E98;
  *(void *)(result + 8) = &unk_270702EC8;
  *(void *)(result + 16) = &unk_270702EF0;
  return result;
}

uint64_t boost::wrapexcept<boost::bad_get>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 16) = &unk_270702F68;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::exception::~exception((std::exception *)(a1 + 8));
  return a1;
}

void boost::wrapexcept<boost::bad_get>::clone()
{
}

void sub_258F6B6EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a9);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a10);
  (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::bad_get>::rethrow(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x38uLL);
  boost::wrapexcept<boost::bad_get>::wrapexcept((uint64_t)exception, a1);
}

void sub_258F6B7AC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::bad_get>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 16) = &unk_270702F68;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::exception::~exception((std::exception *)(a1 + 8));
  JUMPOUT(0x25A2D4B50);
}

void non-virtual thunk to'boost::wrapexcept<boost::bad_get>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 8) = &unk_270702F68;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 16));
  std::exception::~exception((std::exception *)a1);
}

{
  uint64_t vars8;

  *(void *)(a1 + 8) = &unk_270702F68;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 16));
  std::exception::~exception((std::exception *)a1);
  JUMPOUT(0x25A2D4B50);
}

const char *boost::bad_get::what(boost::bad_get *this)
{
  return "boost::bad_get: failed value get using boost::get";
}

void non-virtual thunk to'boost::wrapexcept<boost::bad_get>::~wrapexcept(void *a1)
{
  *a1 = &unk_270702F68;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::exception::~exception((std::exception *)a1 - 1);
}

{
  uint64_t vars8;

  *a1 = &unk_270702F68;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::exception::~exception((std::exception *)a1 - 1);
  JUMPOUT(0x25A2D4B50);
}

void boost::bad_get::~bad_get(std::exception *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x25A2D4B50);
}

uint64_t *boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2 && (*(unsigned int (**)(uint64_t))(*(void *)v2 + 32))(v2)) {
    *a1 = 0;
  }
  return a1;
}

uint64_t boost::wrapexcept<boost::bad_get>::wrapexcept(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270702F10;
  *(void *)(a1 + 8) = &unk_270702F40;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = &unk_270702F68;
  *(void *)(a1 + 24) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(void *)a1 = &unk_270702E98;
  *(void *)(a1 + 8) = &unk_270702EC8;
  *(void *)(a1 + 16) = &unk_270702EF0;
  return a1;
}

void sub_258F6BB90(_Unwind_Exception *a1)
{
  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 32))(result);
  }
  *a1 = a2;
  if (a2)
  {
    long long v5 = *(uint64_t (**)(uint64_t))(*(void *)a2 + 24);
    return v5(a2);
  }
  return result;
}

void boost::serialization::variant_impl<boost::mpl::l_item<mpl_::long_<2l>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::mpl::l_item<mpl_::long_<1l>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>,boost::mpl::l_end>>>::load_impl::invoke<boost::archive::text_iarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>(boost::archive::detail::basic_iarchive_impl **a1, int a2, int *a3)
{
  if (a2)
  {
    int v5 = a2 - 1;
    boost::serialization::variant_impl<boost::mpl::l_item<mpl_::long_<1l>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>,boost::mpl::l_end>>::load_impl::invoke<boost::archive::text_iarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>(a1, v5, a3);
  }
  else
  {
    *(_OWORD *)__p = 0u;
    long long v10 = 0u;
    *(_OWORD *)long long v8 = 0u;
    instance = (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::get_instance();
    boost::archive::detail::basic_iarchive::load_object(a1, (unint64_t)v8, instance);
    boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::assign<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>((uint64_t)a3, (const std::string *)v8);
    std::string::size_type v7 = boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::apply_visitor<boost::detail::variant::get_visitor<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>(a3);
    if (!v7)
    {
      uint64_t v11 = &unk_270702F40;
      boost::throw_exception<boost::bad_get>();
    }
    boost::archive::detail::basic_iarchive::reset_object_address((uint64_t)a1, v7, v8);
    if (SHIBYTE(v10) < 0) {
      operator delete(__p[1]);
    }
    if (v8[0])
    {
      v8[1] = v8[0];
      operator delete(v8[0]);
    }
  }
}

void sub_258F6BD30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::assign<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>(uint64_t a1, const std::string *a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v4 = a2;
  if ((boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::apply_visitor<boost::detail::variant::direct_assigner<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>(a1, &v4) & 1) == 0)
  {
    int v5 = boost::detail::variant::make_initializer_node::apply<boost::mpl::pair<boost::detail::variant::make_initializer_node::apply<boost::mpl::pair<boost::detail::variant::initializer_root,mpl_::int_<0>>,boost::mpl::l_iter<boost::mpl::list3<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::initializer_node,mpl_::int_<1>>,boost::mpl::l_iter<boost::mpl::list2<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::initializer_node::initialize(v6, (uint64_t)a2);
    boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::variant_assign(a1, (uint64_t)&v5);
    boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content((uint64_t)&v5);
  }
}

void sub_258F6BDF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::apply_visitor<boost::detail::variant::direct_assigner<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>(uint64_t a1, const std::string **a2)
{
  switch(*(_DWORD *)a1 ^ (*(int *)a1 >> 31))
  {
    case 0:
    case 2:
      uint64_t result = 0;
      break;
    case 1:
      uint64_t result = boost::detail::variant::direct_assigner<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>::operator()(a2, (std::string *)(a1 + 8));
      break;
    default:
      boost::detail::variant::forced_return<void>();
  }
  return result;
}

uint64_t boost::detail::variant::direct_assigner<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>::operator()(const std::string **a1, std::string *a2)
{
  uint64_t v3 = *a1;
  if (*a1 != a2) {
    std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>((char *)a2, v3->__r_.__value_.__l.__data_, v3->__r_.__value_.__l.__size_, (uint64_t)(v3->__r_.__value_.__l.__size_ - v3->__r_.__value_.__r.__words[0]) >> 3);
  }
  std::string::operator=(a2 + 1, v3 + 1);
  return 1;
}

char *std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  unint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 3)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61) {
      std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = std::vector<double>::__vallocate[abi:ne180100](v7, v11);
    int v13 = (char *)v7[1];
    long long v12 = (void **)(v7 + 1);
    unint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      char v18 = v9;
      unsigned int v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  long long v12 = (void **)(result + 8);
  long long v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 3;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  unint64_t v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    unint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    char v18 = v9;
    unsigned int v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *long long v12 = &v9[v17];
  return result;
}

char *std::vector<double>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a2);
}

uint64_t boost::detail::variant::make_initializer_node::apply<boost::mpl::pair<boost::detail::variant::make_initializer_node::apply<boost::mpl::pair<boost::detail::variant::initializer_root,mpl_::int_<0>>,boost::mpl::l_iter<boost::mpl::list3<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::initializer_node,mpl_::int_<1>>,boost::mpl::l_iter<boost::mpl::list2<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::initializer_node::initialize(std::string *a1, uint64_t a2)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(a1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  uint64_t v4 = a1 + 1;
  if (*(char *)(a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 24);
    a1[1].__r_.__value_.__r.__words[2] = *(void *)(a2 + 40);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  return 1;
}

void sub_258F6C114(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    std::string::size_type v6 = result;
    uint64_t result = std::vector<double>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_258F6C190(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::apply_visitor<boost::detail::variant::get_visitor<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>(int *a1)
{
  uint64_t v1 = 0;
  switch(*a1 ^ (*a1 >> 31))
  {
    case 0:
    case 2:
      return v1;
    case 1:
      uint64_t v1 = a1 + 2;
      break;
    default:
      boost::detail::variant::forced_return<void>();
  }
  return v1;
}

void boost::serialization::variant_impl<boost::mpl::l_item<mpl_::long_<1l>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>,boost::mpl::l_end>>::load_impl::invoke<boost::archive::text_iarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>(boost::archive::detail::basic_iarchive_impl **a1, int a2, int *a3)
{
  if (!a2)
  {
    int v7 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    __p = 0;
    int v11 = 0;
    instance = (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::get_instance();
    boost::archive::detail::basic_iarchive::load_object(a1, (unint64_t)&v7, instance);
    boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::assign<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>((uint64_t)a3, &v7);
    std::string::size_type v6 = boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::apply_visitor<boost::detail::variant::get_visitor<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>(a3);
    if (!v6)
    {
      long long v12 = &unk_270702F40;
      boost::throw_exception<boost::bad_get>();
    }
    boost::archive::detail::basic_iarchive::reset_object_address((uint64_t)a1, v6, &v7);
    if (SHIBYTE(v10) < 0) {
      operator delete(__p);
    }
  }
}

void sub_258F6C30C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::assign<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>(uint64_t a1, _DWORD *a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v4 = a2;
  if ((boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::apply_visitor<boost::detail::variant::direct_assigner<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>(a1, &v4) & 1) == 0)
  {
    int v5 = boost::detail::variant::make_initializer_node::apply<boost::mpl::pair<boost::detail::variant::make_initializer_node::apply<boost::mpl::pair<boost::detail::variant::make_initializer_node::apply<boost::mpl::pair<boost::detail::variant::initializer_root,mpl_::int_<0>>,boost::mpl::l_iter<boost::mpl::list3<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::initializer_node,mpl_::int_<1>>,boost::mpl::l_iter<boost::mpl::list2<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::initializer_node,mpl_::int_<2>>,boost::mpl::l_iter<boost::mpl::list1<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::initializer_node::initialize(v6, (uint64_t)a2);
    boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::variant_assign(a1, (uint64_t)&v5);
    boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content((uint64_t)&v5);
  }
}

void sub_258F6C3D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::apply_visitor<boost::detail::variant::direct_assigner<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>(uint64_t a1, _DWORD **a2)
{
  unsigned int v2 = *(_DWORD *)a1 ^ (*(int *)a1 >> 31);
  if (v2 < 2) {
    return 0;
  }
  if (v2 != 2) {
    boost::detail::variant::forced_return<void>();
  }
  int v5 = *a2;
  *(_DWORD *)(a1 + 8) = **a2;
  std::string::operator=((std::string *)(a1 + 16), (const std::string *)(v5 + 2));
  *(_DWORD *)(a1 + 40) = v5[8];
  return 1;
}

uint64_t boost::detail::variant::make_initializer_node::apply<boost::mpl::pair<boost::detail::variant::make_initializer_node::apply<boost::mpl::pair<boost::detail::variant::make_initializer_node::apply<boost::mpl::pair<boost::detail::variant::initializer_root,mpl_::int_<0>>,boost::mpl::l_iter<boost::mpl::list3<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::initializer_node,mpl_::int_<1>>,boost::mpl::l_iter<boost::mpl::list2<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::initializer_node,mpl_::int_<2>>,boost::mpl::l_iter<boost::mpl::list1<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::initializer_node::initialize(_DWORD *a1, uint64_t a2)
{
  *a1 = *(_DWORD *)a2;
  uint64_t v4 = (std::string *)(a1 + 2);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 8);
    v4->__r_.__value_.__r.__words[2] = *(void *)(a2 + 24);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  a1[8] = *(_DWORD *)(a2 + 32);
  return 2;
}

int *boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::apply_visitor<boost::detail::variant::get_visitor<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>(int *a1)
{
  unsigned int v1 = *a1 ^ (*a1 >> 31);
  if (v1 < 2) {
    return 0;
  }
  if (v1 != 2) {
    boost::detail::variant::forced_return<void>();
  }
  return a1 + 2;
}

void boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::~singleton_wrapper(boost::serialization::extended_type_info *a1)
{
  *(void *)a1 = &unk_270702F88;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>::~extended_type_info_typeid(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_270702F88;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>::~extended_type_info_typeid(a1);
  JUMPOUT(0x25A2D4B50);
}

boost::serialization::typeid_system::extended_type_info_typeid_0 *boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::singleton_wrapper(boost::serialization::typeid_system::extended_type_info_typeid_0 *a1)
{
  *(void *)boost::serialization::extended_type_info_typeid<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>::extended_type_info_typeid(a1) = &unk_270702F88;
  if (boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::get_is_destroyed(void)::is_destroyed_flag) {
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  }
  return a1;
}

void sub_258F6C664(_Unwind_Exception *a1)
{
  boost::serialization::extended_type_info_typeid<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>::~extended_type_info_typeid(v1);
  _Unwind_Resume(a1);
}

boost::serialization::typeid_system::extended_type_info_typeid_0 *boost::serialization::extended_type_info_typeid<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>::extended_type_info_typeid(boost::serialization::typeid_system::extended_type_info_typeid_0 *a1)
{
  unsigned int v2 = (boost::serialization::typeid_system::extended_type_info_typeid_0 *)boost::serialization::typeid_system::extended_type_info_typeid_0::extended_type_info_typeid_0(a1, 0);
  *(void *)unsigned int v2 = &unk_270703030;
  boost::serialization::extended_type_info::key_register((uint64_t *)a1);
  return a1;
}

void sub_258F6C6D4(_Unwind_Exception *a1)
{
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(v1);
  _Unwind_Resume(a1);
}

void boost::serialization::extended_type_info_typeid<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>::~extended_type_info_typeid(boost::serialization::extended_type_info *a1)
{
  *(void *)a1 = &unk_270703030;
  boost::serialization::extended_type_info::key_unregister(a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::type_unregister((uint64_t *)a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(a1);
}

{
  uint64_t vars8;

  boost::serialization::extended_type_info_typeid<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>::~extended_type_info_typeid(a1);
  JUMPOUT(0x25A2D4B50);
}

void boost::serialization::extended_type_info_typeid<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>::construct(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 0:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
    case 1:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
    case 2:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
    case 3:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
    case 4:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
    default:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
  }
}

uint64_t boost::serialization::extended_type_info_typeid<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>::destroy(uint64_t a1, uint64_t a2)
{
  return boost::serialization::access::destroy<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>(a2);
}

uint64_t boost::serialization::access::destroy<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>(uint64_t result)
{
  if (result)
  {
    if (*(char *)(result + 31) < 0) {
      operator delete(*(void **)(result + 8));
    }
    JUMPOUT(0x25A2D4B50);
  }
  return result;
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>::load_object_data(uint64_t a1, const void *a2, unint64_t a3)
{
  uint64_t v4 = boost::serialization::smart_cast_impl::reference<boost::archive::text_iarchive &>::polymorphic::cross::cast<boost::archive::detail::basic_iarchive>(a2);
  boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>::serialize<boost::archive::text_iarchive>(a3, (uint64_t)v4);
}

void boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>::serialize<boost::archive::text_iarchive>(unint64_t a1, uint64_t a2)
{
  instance = (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::transform::id>>::get_instance();
  boost::archive::detail::basic_iarchive::load_object((boost::archive::detail::basic_iarchive_impl **)a2, a1, instance);
  boost::archive::basic_text_iprimitive<std::istream>::load<int>((void *)(a2 + 40));
  boost::archive::text_iarchive_impl<boost::archive::text_iarchive>::load();
}

void *boost::archive::basic_text_iprimitive<std::istream>::load<double>(void *a1)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  uint64_t result = (void *)MEMORY[0x25A2D48F0](*a1);
  if ((*((unsigned char *)result + *(void *)(*result - 24) + 32) & 5) != 0)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v2, 8, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v2);
  }
  return result;
}

void sub_258F6CA20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
}

void boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::axis::transform::id>>::~singleton_wrapper(boost::serialization::extended_type_info *a1)
{
  *(void *)a1 = &unk_2707030D0;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::axis::transform::id>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<boost::histogram::axis::transform::id>::~extended_type_info_typeid(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_2707030D0;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::axis::transform::id>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<boost::histogram::axis::transform::id>::~extended_type_info_typeid(a1);
  JUMPOUT(0x25A2D4B50);
}

boost::serialization::typeid_system::extended_type_info_typeid_0 *boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::axis::transform::id>>::singleton_wrapper(boost::serialization::typeid_system::extended_type_info_typeid_0 *a1)
{
  *(void *)boost::serialization::extended_type_info_typeid<boost::histogram::axis::transform::id>::extended_type_info_typeid(a1) = &unk_2707030D0;
  if (boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::axis::transform::id>>::get_is_destroyed(void)::is_destroyed_flag) {
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  }
  return a1;
}

void sub_258F6CAD4(_Unwind_Exception *a1)
{
  boost::serialization::extended_type_info_typeid<boost::histogram::axis::transform::id>::~extended_type_info_typeid(v1);
  _Unwind_Resume(a1);
}

boost::serialization::typeid_system::extended_type_info_typeid_0 *boost::serialization::extended_type_info_typeid<boost::histogram::axis::transform::id>::extended_type_info_typeid(boost::serialization::typeid_system::extended_type_info_typeid_0 *a1)
{
  unsigned int v2 = (boost::serialization::typeid_system::extended_type_info_typeid_0 *)boost::serialization::typeid_system::extended_type_info_typeid_0::extended_type_info_typeid_0(a1, 0);
  *(void *)unsigned int v2 = &unk_270703178;
  boost::serialization::extended_type_info::key_register((uint64_t *)a1);
  return a1;
}

void sub_258F6CB44(_Unwind_Exception *a1)
{
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(v1);
  _Unwind_Resume(a1);
}

void boost::serialization::extended_type_info_typeid<boost::histogram::axis::transform::id>::~extended_type_info_typeid(boost::serialization::extended_type_info *a1)
{
  *(void *)a1 = &unk_270703178;
  boost::serialization::extended_type_info::key_unregister(a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::type_unregister((uint64_t *)a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(a1);
}

{
  uint64_t vars8;

  boost::serialization::extended_type_info_typeid<boost::histogram::axis::transform::id>::~extended_type_info_typeid(a1);
  JUMPOUT(0x25A2D4B50);
}

void boost::serialization::extended_type_info_typeid<boost::histogram::axis::transform::id>::construct(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 0:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
    case 1:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
    case 2:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
    case 3:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
    case 4:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
    default:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
  }
}

void boost::serialization::extended_type_info_typeid<boost::histogram::axis::transform::id>::destroy(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x25A2D4B50);
  }
}

void *boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::transform::id>::load_object_data(uint64_t a1, const void *a2)
{
  return boost::serialization::smart_cast_impl::reference<boost::archive::text_iarchive &>::polymorphic::cross::cast<boost::archive::detail::basic_iarchive>(a2);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::transform::id>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(void *)a1 = &unk_2707031C0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::transform::id>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_2707031C0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::transform::id>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x25A2D4B50);
}

void *boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::transform::id>>::singleton_wrapper(void *a1)
{
  instance = boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::axis::transform::id>>::get_instance();
  boost::archive::detail::basic_iserializer::basic_iserializer(a1, (uint64_t)instance);
  *a1 = &unk_2707031C0;
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::transform::id>>::get_is_destroyed(void)::is_destroyed_flag) {
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  }
  return a1;
}

void sub_258F6CD94(_Unwind_Exception *a1)
{
  boost::archive::detail::basic_iserializer::~basic_iserializer(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::transform::id>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::transform::id>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::transform::id>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::transform::id>::is_polymorphic()
{
  return 0;
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::transform::id>::destroy(uint64_t a1, uint64_t a2)
{
  if (a2) {
    JUMPOUT(0x25A2D4B50);
  }
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(void *)a1 = &unk_270703240;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_270703240;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x25A2D4B50);
}

void *boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::singleton_wrapper(void *a1)
{
  instance = boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::get_instance();
  boost::archive::detail::basic_iserializer::basic_iserializer(a1, (uint64_t)instance);
  *a1 = &unk_270703240;
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::get_is_destroyed(void)::is_destroyed_flag) {
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  }
  return a1;
}

void sub_258F6CEF8(_Unwind_Exception *a1)
{
  boost::archive::detail::basic_iserializer::~basic_iserializer(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>::is_polymorphic()
{
  return 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>::destroy(uint64_t a1, uint64_t a2)
{
  return boost::serialization::access::destroy<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>(a2);
}

void boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::~singleton_wrapper(boost::serialization::extended_type_info *a1)
{
  *(void *)a1 = &unk_2707032C0;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>::~extended_type_info_typeid(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_2707032C0;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>::~extended_type_info_typeid(a1);
  JUMPOUT(0x25A2D4B50);
}

boost::serialization::typeid_system::extended_type_info_typeid_0 *boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::singleton_wrapper(boost::serialization::typeid_system::extended_type_info_typeid_0 *a1)
{
  *(void *)boost::serialization::extended_type_info_typeid<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>::extended_type_info_typeid(a1) = &unk_2707032C0;
  if (boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::get_is_destroyed(void)::is_destroyed_flag) {
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  }
  return a1;
}

void sub_258F6D03C(_Unwind_Exception *a1)
{
  boost::serialization::extended_type_info_typeid<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>::~extended_type_info_typeid(v1);
  _Unwind_Resume(a1);
}

boost::serialization::typeid_system::extended_type_info_typeid_0 *boost::serialization::extended_type_info_typeid<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>::extended_type_info_typeid(boost::serialization::typeid_system::extended_type_info_typeid_0 *a1)
{
  unsigned int v2 = (boost::serialization::typeid_system::extended_type_info_typeid_0 *)boost::serialization::typeid_system::extended_type_info_typeid_0::extended_type_info_typeid_0(a1, 0);
  *(void *)unsigned int v2 = &unk_270703368;
  boost::serialization::extended_type_info::key_register((uint64_t *)a1);
  return a1;
}

void sub_258F6D0AC(_Unwind_Exception *a1)
{
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(v1);
  _Unwind_Resume(a1);
}

void boost::serialization::extended_type_info_typeid<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>::~extended_type_info_typeid(boost::serialization::extended_type_info *a1)
{
  *(void *)a1 = &unk_270703368;
  boost::serialization::extended_type_info::key_unregister(a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::type_unregister((uint64_t *)a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(a1);
}

{
  uint64_t vars8;

  boost::serialization::extended_type_info_typeid<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>::~extended_type_info_typeid(a1);
  JUMPOUT(0x25A2D4B50);
}

void boost::serialization::extended_type_info_typeid<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>::construct(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 0:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
    case 1:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
    case 2:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
    case 3:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
    case 4:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
    default:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
  }
}

uint64_t boost::serialization::extended_type_info_typeid<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>::destroy(uint64_t a1, uint64_t a2)
{
  return boost::serialization::access::destroy<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>(a2);
}

uint64_t boost::serialization::access::destroy<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (*(char *)(result + 47) < 0) {
      operator delete(*(void **)(result + 24));
    }
    unsigned int v2 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v2;
      operator delete(v2);
    }
    JUMPOUT(0x25A2D4B50);
  }
  return result;
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>::load_object_data(uint64_t a1, const void *a2, unint64_t a3)
{
  uint64_t v4 = (boost::archive::detail::basic_iarchive_impl **)boost::serialization::smart_cast_impl::reference<boost::archive::text_iarchive &>::polymorphic::cross::cast<boost::archive::detail::basic_iarchive>(a2);
  instance = (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<double>>>::get_instance();
  boost::archive::detail::basic_iarchive::load_object(v4, a3, instance);
  boost::archive::text_iarchive_impl<boost::archive::text_iarchive>::load();
}

void boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<double>>>::~singleton_wrapper(boost::serialization::extended_type_info *a1)
{
  *(void *)a1 = &unk_2707033D8;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<double>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<std::vector<double>>::~extended_type_info_typeid(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_2707033D8;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<double>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<std::vector<double>>::~extended_type_info_typeid(a1);
  JUMPOUT(0x25A2D4B50);
}

boost::serialization::typeid_system::extended_type_info_typeid_0 *boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<double>>>::singleton_wrapper(boost::serialization::typeid_system::extended_type_info_typeid_0 *a1)
{
  *(void *)boost::serialization::extended_type_info_typeid<std::vector<double>>::extended_type_info_typeid(a1) = &unk_2707033D8;
  if (boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<double>>>::get_is_destroyed(void)::is_destroyed_flag) {
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  }
  return a1;
}

void sub_258F6D398(_Unwind_Exception *a1)
{
  boost::serialization::extended_type_info_typeid<std::vector<double>>::~extended_type_info_typeid(v1);
  _Unwind_Resume(a1);
}

boost::serialization::typeid_system::extended_type_info_typeid_0 *boost::serialization::extended_type_info_typeid<std::vector<double>>::extended_type_info_typeid(boost::serialization::typeid_system::extended_type_info_typeid_0 *a1)
{
  unsigned int v2 = (boost::serialization::typeid_system::extended_type_info_typeid_0 *)boost::serialization::typeid_system::extended_type_info_typeid_0::extended_type_info_typeid_0(a1, 0);
  *(void *)unsigned int v2 = &unk_270703480;
  boost::serialization::extended_type_info::key_register((uint64_t *)a1);
  return a1;
}

void sub_258F6D408(_Unwind_Exception *a1)
{
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(v1);
  _Unwind_Resume(a1);
}

void boost::serialization::extended_type_info_typeid<std::vector<double>>::~extended_type_info_typeid(boost::serialization::extended_type_info *a1)
{
  *(void *)a1 = &unk_270703480;
  boost::serialization::extended_type_info::key_unregister(a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::type_unregister((uint64_t *)a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(a1);
}

{
  uint64_t vars8;

  boost::serialization::extended_type_info_typeid<std::vector<double>>::~extended_type_info_typeid(a1);
  JUMPOUT(0x25A2D4B50);
}

void boost::serialization::extended_type_info_typeid<std::vector<double>>::construct(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 0:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
    case 1:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
    case 2:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
    case 3:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
    case 4:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
    default:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
  }
}

void **boost::serialization::extended_type_info_typeid<std::vector<double>>::destroy(uint64_t a1, void **a2)
{
  return boost::serialization::access::destroy<std::vector<double>>(a2);
}

void **boost::serialization::access::destroy<std::vector<double>>(void **result)
{
  if (result)
  {
    uint64_t v1 = result;
    unsigned int v2 = *result;
    if (v2)
    {
      v1[1] = v2;
      operator delete(v2);
    }
    JUMPOUT(0x25A2D4B50);
  }
  return result;
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<double>>::load_object_data(uint64_t a1, const void *a2, void **a3)
{
  uint64_t v4 = boost::serialization::smart_cast_impl::reference<boost::archive::text_iarchive &>::polymorphic::cross::cast<boost::archive::detail::basic_iarchive>(a2);
  boost::serialization::free_loader<boost::archive::text_iarchive,std::vector<double>>::invoke((uint64_t)v4, a3);
}

void boost::serialization::free_loader<boost::archive::text_iarchive,std::vector<double>>::invoke(uint64_t a1, void **a2)
{
  boost::archive::detail::basic_iarchive::get_library_version(a1, &v6);
  unint64_t v5 = 0;
  boost::archive::basic_text_iprimitive<std::istream>::load<boost::serialization::collection_size_type>((void *)(a1 + 40));
  if (v6 >= 4u) {
    boost::archive::basic_text_iprimitive<std::istream>::load<unsigned int>((void *)(a1 + 40));
  }
  std::vector<double>::reserve(a2, v5);
  unint64_t v4 = v5;
  boost::serialization::stl::collection_load_impl<boost::archive::text_iarchive,std::vector<double>>(a1, (uint64_t *)a2, &v4);
}

void boost::serialization::stl::collection_load_impl<boost::archive::text_iarchive,std::vector<double>>(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  std::vector<double>::resize((uint64_t)a2, *a3);
  uint64_t v6 = *a2;
  if ((*a3)--)
  {
    size_t v8 = (void *)(a1 + 40);
    do
    {
      uint64_t v9 = v6 + 8;
      boost::archive::basic_text_iprimitive<std::istream>::load<double>(v8);
      unint64_t v10 = (*a3)--;
      uint64_t v6 = v9;
    }
    while (v10);
  }
}

void std::vector<double>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<double>::__append((char **)a1, a2 - v2);
  }
}

void std::vector<double>::__append(char **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    size_t v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 3);
    if (v10 >> 61) {
      std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 3;
    uint64_t v12 = v5 - v8;
    if (v12 >> 2 > v10) {
      unint64_t v10 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      long long v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v4, v13);
      size_t v8 = *a1;
      uint64_t v7 = a1[1];
    }
    else
    {
      long long v14 = 0;
    }
    unint64_t v15 = &v14[8 * v11];
    unint64_t v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    size_t v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      uint64_t v18 = *((void *)v7 - 1);
      v7 -= 8;
      *((void *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<double>>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(void *)a1 = &unk_2707034D8;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<double>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_2707034D8;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<double>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x25A2D4B50);
}

void *boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<double>>>::singleton_wrapper(void *a1)
{
  instance = boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<double>>>::get_instance();
  boost::archive::detail::basic_iserializer::basic_iserializer(a1, (uint64_t)instance);
  *a1 = &unk_2707034D8;
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<double>>>::get_is_destroyed(void)::is_destroyed_flag) {
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  }
  return a1;
}

void sub_258F6D940(_Unwind_Exception *a1)
{
  boost::archive::detail::basic_iserializer::~basic_iserializer(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<double>>::class_info()
{
  return 0;
}

BOOL boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<double>>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<double>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<double>>::is_polymorphic()
{
  return 0;
}

void **boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<double>>::destroy(uint64_t a1, void **a2)
{
  return boost::serialization::access::destroy<std::vector<double>>(a2);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(void *)a1 = &unk_270703558;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_270703558;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x25A2D4B50);
}

void *boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::singleton_wrapper(void *a1)
{
  instance = boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::get_instance();
  boost::archive::detail::basic_iserializer::basic_iserializer(a1, (uint64_t)instance);
  *a1 = &unk_270703558;
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::get_is_destroyed(void)::is_destroyed_flag) {
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  }
  return a1;
}

void sub_258F6DA90(_Unwind_Exception *a1)
{
  boost::archive::detail::basic_iserializer::~basic_iserializer(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>::is_polymorphic()
{
  return 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>::destroy(uint64_t a1, uint64_t a2)
{
  return boost::serialization::access::destroy<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>(a2);
}

void boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::~singleton_wrapper(boost::serialization::extended_type_info *a1)
{
  *(void *)a1 = &unk_2707035D8;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::~extended_type_info_typeid(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_2707035D8;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::~extended_type_info_typeid(a1);
  JUMPOUT(0x25A2D4B50);
}

boost::serialization::typeid_system::extended_type_info_typeid_0 *boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::singleton_wrapper(boost::serialization::typeid_system::extended_type_info_typeid_0 *a1)
{
  *(void *)boost::serialization::extended_type_info_typeid<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::extended_type_info_typeid(a1) = &unk_2707035D8;
  if (boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::get_is_destroyed(void)::is_destroyed_flag) {
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  }
  return a1;
}

void sub_258F6DBD4(_Unwind_Exception *a1)
{
  boost::serialization::extended_type_info_typeid<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::~extended_type_info_typeid(v1);
  _Unwind_Resume(a1);
}

boost::serialization::typeid_system::extended_type_info_typeid_0 *boost::serialization::extended_type_info_typeid<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::extended_type_info_typeid(boost::serialization::typeid_system::extended_type_info_typeid_0 *a1)
{
  unint64_t v2 = (boost::serialization::typeid_system::extended_type_info_typeid_0 *)boost::serialization::typeid_system::extended_type_info_typeid_0::extended_type_info_typeid_0(a1, 0);
  *(void *)unint64_t v2 = &unk_270703680;
  boost::serialization::extended_type_info::key_register((uint64_t *)a1);
  return a1;
}

void sub_258F6DC44(_Unwind_Exception *a1)
{
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(v1);
  _Unwind_Resume(a1);
}

void boost::serialization::extended_type_info_typeid<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::~extended_type_info_typeid(boost::serialization::extended_type_info *a1)
{
  *(void *)a1 = &unk_270703680;
  boost::serialization::extended_type_info::key_unregister(a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::type_unregister((uint64_t *)a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(a1);
}

{
  uint64_t vars8;

  boost::serialization::extended_type_info_typeid<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::~extended_type_info_typeid(a1);
  JUMPOUT(0x25A2D4B50);
}

void boost::serialization::extended_type_info_typeid<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::construct(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 0:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
    case 1:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
    case 2:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
    case 3:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
    case 4:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
    default:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
  }
}

uint64_t boost::serialization::extended_type_info_typeid<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy(uint64_t a1, uint64_t a2)
{
  return boost::serialization::access::destroy<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>(a2);
}

uint64_t boost::serialization::access::destroy<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>(uint64_t result)
{
  if (result)
  {
    if (*(char *)(result + 31) < 0) {
      operator delete(*(void **)(result + 8));
    }
    JUMPOUT(0x25A2D4B50);
  }
  return result;
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::load_object_data(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t v4 = boost::serialization::smart_cast_impl::reference<boost::archive::text_iarchive &>::polymorphic::cross::cast<boost::archive::detail::basic_iarchive>(a2);
  boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>::serialize<boost::archive::text_iarchive>(a3, (uint64_t)v4);
}

void boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>::serialize<boost::archive::text_iarchive>(uint64_t a1, uint64_t a2)
{
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(void *)a1 = &unk_2707036F0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_2707036F0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x25A2D4B50);
}

void *boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::singleton_wrapper(void *a1)
{
  instance = boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::get_instance();
  boost::archive::detail::basic_iserializer::basic_iserializer(a1, (uint64_t)instance);
  *a1 = &unk_2707036F0;
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::get_is_destroyed(void)::is_destroyed_flag) {
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  }
  return a1;
}

void sub_258F6DF7C(_Unwind_Exception *a1)
{
  boost::archive::detail::basic_iserializer::~basic_iserializer(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::is_polymorphic()
{
  return 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy(uint64_t a1, uint64_t a2)
{
  return boost::serialization::access::destroy<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>(a2);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(void *)a1 = &unk_270703770;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_270703770;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x25A2D4B50);
}

void *boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::singleton_wrapper(void *a1)
{
  instance = boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_instance();
  boost::archive::detail::basic_iserializer::basic_iserializer(a1, (uint64_t)instance);
  *a1 = &unk_270703770;
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_is_destroyed(void)::is_destroyed_flag) {
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  }
  return a1;
}

void sub_258F6E0CC(_Unwind_Exception *a1)
{
  boost::archive::detail::basic_iserializer::~basic_iserializer(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::class_info()
{
  return 1;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::tracking()
{
  return 1;
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::is_polymorphic()
{
  return 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::destroy(uint64_t a1, uint64_t a2)
{
  return boost::serialization::access::destroy<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>(a2);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(void *)a1 = &unk_2707037F0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_2707037F0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x25A2D4B50);
}

void *boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::singleton_wrapper(void *a1)
{
  instance = boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_instance();
  boost::archive::detail::basic_iserializer::basic_iserializer(a1, (uint64_t)instance);
  *a1 = &unk_2707037F0;
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_is_destroyed(void)::is_destroyed_flag) {
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  }
  return a1;
}

void sub_258F6E214(_Unwind_Exception *a1)
{
  boost::archive::detail::basic_iserializer::~basic_iserializer(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::is_polymorphic()
{
  return 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::destroy(uint64_t a1, uint64_t a2)
{
  return boost::serialization::access::destroy<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>(a2);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(void *)a1 = &unk_270703870;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_270703870;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x25A2D4B50);
}

void *boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::singleton_wrapper(void *a1)
{
  instance = boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::get_instance();
  boost::archive::detail::basic_iserializer::basic_iserializer(a1, (uint64_t)instance);
  *a1 = &unk_270703870;
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::get_is_destroyed(void)::is_destroyed_flag) {
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  }
  return a1;
}

void sub_258F6E364(_Unwind_Exception *a1)
{
  boost::archive::detail::basic_iserializer::~basic_iserializer(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::is_polymorphic()
{
  return 0;
}

void **boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::destroy(uint64_t a1, void **a2)
{
  return boost::serialization::access::destroy<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>(a2);
}

void boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::unlimited_storage<std::allocator<char>>>>::~singleton_wrapper(boost::serialization::extended_type_info *a1)
{
  *(void *)a1 = &unk_2707038F0;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::unlimited_storage<std::allocator<char>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<boost::histogram::unlimited_storage<std::allocator<char>>>::~extended_type_info_typeid(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_2707038F0;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::unlimited_storage<std::allocator<char>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<boost::histogram::unlimited_storage<std::allocator<char>>>::~extended_type_info_typeid(a1);
  JUMPOUT(0x25A2D4B50);
}

boost::serialization::typeid_system::extended_type_info_typeid_0 *boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::unlimited_storage<std::allocator<char>>>>::singleton_wrapper(boost::serialization::typeid_system::extended_type_info_typeid_0 *a1)
{
  *(void *)boost::serialization::extended_type_info_typeid<boost::histogram::unlimited_storage<std::allocator<char>>>::extended_type_info_typeid(a1) = &unk_2707038F0;
  if (boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::unlimited_storage<std::allocator<char>>>>::get_is_destroyed(void)::is_destroyed_flag) {
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  }
  return a1;
}

void sub_258F6E4A8(_Unwind_Exception *a1)
{
  boost::serialization::extended_type_info_typeid<boost::histogram::unlimited_storage<std::allocator<char>>>::~extended_type_info_typeid(v1);
  _Unwind_Resume(a1);
}

boost::serialization::typeid_system::extended_type_info_typeid_0 *boost::serialization::extended_type_info_typeid<boost::histogram::unlimited_storage<std::allocator<char>>>::extended_type_info_typeid(boost::serialization::typeid_system::extended_type_info_typeid_0 *a1)
{
  unint64_t v2 = (boost::serialization::typeid_system::extended_type_info_typeid_0 *)boost::serialization::typeid_system::extended_type_info_typeid_0::extended_type_info_typeid_0(a1, 0);
  *(void *)unint64_t v2 = &unk_270703998;
  boost::serialization::extended_type_info::key_register((uint64_t *)a1);
  return a1;
}

void sub_258F6E518(_Unwind_Exception *a1)
{
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(v1);
  _Unwind_Resume(a1);
}

void boost::serialization::extended_type_info_typeid<boost::histogram::unlimited_storage<std::allocator<char>>>::~extended_type_info_typeid(boost::serialization::extended_type_info *a1)
{
  *(void *)a1 = &unk_270703998;
  boost::serialization::extended_type_info::key_unregister(a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::type_unregister((uint64_t *)a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(a1);
}

{
  uint64_t vars8;

  boost::serialization::extended_type_info_typeid<boost::histogram::unlimited_storage<std::allocator<char>>>::~extended_type_info_typeid(a1);
  JUMPOUT(0x25A2D4B50);
}

void boost::serialization::extended_type_info_typeid<boost::histogram::unlimited_storage<std::allocator<char>>>::construct(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 0:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
    case 1:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
    case 2:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
    case 3:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
    case 4:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
    default:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
  }
}

uint64_t boost::serialization::extended_type_info_typeid<boost::histogram::unlimited_storage<std::allocator<char>>>::destroy(uint64_t a1, uint64_t a2)
{
  return boost::serialization::access::destroy<boost::histogram::unlimited_storage<std::allocator<char>>>(a2);
}

uint64_t boost::serialization::access::destroy<boost::histogram::unlimited_storage<std::allocator<char>>>(uint64_t result)
{
  if (result)
  {
    boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::destroy(result);
    JUMPOUT(0x25A2D4B50);
  }
  return result;
}

void *boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::unlimited_storage<std::allocator<char>>>::load_object_data(uint64_t a1, const void *a2, void *a3)
{
  uint64_t v4 = boost::serialization::smart_cast_impl::reference<boost::archive::text_iarchive &>::polymorphic::cross::cast<boost::archive::detail::basic_iarchive>(a2);
  return boost::histogram::unlimited_storage<std::allocator<char>>::serialize<boost::archive::text_iarchive>(a3, (uint64_t)v4);
}

void *boost::histogram::unlimited_storage<std::allocator<char>>::serialize<boost::archive::text_iarchive>(void *a1, uint64_t a2)
{
  uint64_t v8 = 0;
  uint64_t v10 = 0;
  std::string v6[2] = 0;
  uint64_t v4 = (void *)(a2 + 40);
  boost::archive::basic_text_iprimitive<std::istream>::load<short>((void *)(a2 + 40));
  char v9 = 0;
  boost::archive::basic_text_iprimitive<std::istream>::load<unsigned long>(v4);
  v6[0] = (uint64_t)a1;
  v6[1] = 0;
  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::apply<void boost::histogram::unlimited_storage<std::allocator<char>>::serialize<boost::archive::text_iarchive>(boost::archive::text_iarchive &,unsigned int)::{lambda(boost::archive::text_iarchive*)#1}>((uint64_t)&v7, v6);
  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::destroy((uint64_t)&v7);
  uint64_t v7 = a1;
  uint64_t v8 = a2;
  return boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::apply<void boost::histogram::unlimited_storage<std::allocator<char>>::serialize<boost::archive::text_iarchive>(boost::archive::text_iarchive &,unsigned int)::{lambda(boost::archive::text_iarchive*)#2}>(a1, &v7);
}

void sub_258F6E7D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

void boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::apply<void boost::histogram::unlimited_storage<std::allocator<char>>::serialize<boost::archive::text_iarchive>(boost::archive::text_iarchive &,unsigned int)::{lambda(boost::archive::text_iarchive*)#1}>(uint64_t a1, uint64_t *a2)
{
  switch(*(unsigned char *)(a1 + 16))
  {
    case 0:
      if (*(void *)(a1 + 24)) {
        boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::apply<void boost::histogram::unlimited_storage<std::allocator<char>>::serialize<boost::archive::text_iarchive>(boost::archive::text_iarchive &,unsigned int)::{lambda(boost::archive::text_iarchive*)#1}>();
      }
      uint64_t v2 = *a2;
      size_t v3 = a2[1];
      boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::make<unsigned char>(v2, v3);
      break;
    case 1:
      if (*(void *)(a1 + 24)) {
        boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::apply<void boost::histogram::unlimited_storage<std::allocator<char>>::serialize<boost::archive::text_iarchive>(boost::archive::text_iarchive &,unsigned int)::{lambda(boost::archive::text_iarchive*)#1}>();
      }
      uint64_t v6 = *a2;
      uint64_t v7 = a2[1];
      boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::make<unsigned short>(v6, v7);
      break;
    case 2:
      if (*(void *)(a1 + 24)) {
        boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::apply<void boost::histogram::unlimited_storage<std::allocator<char>>::serialize<boost::archive::text_iarchive>(boost::archive::text_iarchive &,unsigned int)::{lambda(boost::archive::text_iarchive*)#1}>();
      }
      uint64_t v8 = *a2;
      unint64_t v9 = a2[1];
      boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::make<unsigned int>(v8, v9);
      break;
    case 3:
      if (*(void *)(a1 + 24)) {
        boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::apply<void boost::histogram::unlimited_storage<std::allocator<char>>::serialize<boost::archive::text_iarchive>(boost::archive::text_iarchive &,unsigned int)::{lambda(boost::archive::text_iarchive*)#1}>();
      }
      uint64_t v10 = *a2;
      unint64_t v11 = a2[1];
      boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::make<unsigned long long>(v10, v11);
      break;
    case 4:
      if (*(void *)(a1 + 24)) {
        boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::apply<void boost::histogram::unlimited_storage<std::allocator<char>>::serialize<boost::archive::text_iarchive>(boost::archive::text_iarchive &,unsigned int)::{lambda(boost::archive::text_iarchive*)#1}>();
      }
      uint64_t v12 = *a2;
      unint64_t v13 = a2[1];
      boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::make<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>(v12, v13);
      break;
    default:
      if (*(void *)(a1 + 24)) {
        boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::apply<void boost::histogram::unlimited_storage<std::allocator<char>>::serialize<boost::archive::text_iarchive>(boost::archive::text_iarchive &,unsigned int)::{lambda(boost::archive::text_iarchive*)#1}>();
      }
      uint64_t v4 = *a2;
      unint64_t v5 = a2[1];
      boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::make<double>(v4, v5);
      break;
  }
}

void *boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::apply<void boost::histogram::unlimited_storage<std::allocator<char>>::serialize<boost::archive::text_iarchive>(boost::archive::text_iarchive &,unsigned int)::{lambda(boost::archive::text_iarchive*)#2}>(void *result, void *a2)
{
  switch(*((unsigned char *)result + 16))
  {
    case 0:
      uint64_t v2 = *(void *)(*a2 + 8);
      if (v2)
      {
        size_t v3 = *(unsigned char **)(*a2 + 24);
        uint64_t v4 = (void *)(a2[1] + 40);
        do
        {
          --v2;
          uint64_t result = boost::archive::basic_text_iprimitive<std::istream>::load<unsigned short>(v4);
          *v3++ = 0;
        }
        while (v2);
      }
      break;
    case 1:
      uint64_t v9 = *(void *)(*a2 + 8);
      if (v9)
      {
        uint64_t v10 = *(void *)(*a2 + 24);
        unint64_t v11 = (void *)(a2[1] + 40);
        do
        {
          --v9;
          uint64_t v12 = v10 + 2;
          uint64_t result = boost::archive::basic_text_iprimitive<std::istream>::load<unsigned short>(v11);
          uint64_t v10 = v12;
        }
        while (v9);
      }
      break;
    case 2:
      uint64_t v13 = *(void *)(*a2 + 8);
      if (v13)
      {
        uint64_t v14 = *(void *)(*a2 + 24);
        unint64_t v15 = (void *)(a2[1] + 40);
        do
        {
          --v13;
          uint64_t v16 = v14 + 4;
          uint64_t result = boost::archive::basic_text_iprimitive<std::istream>::load<unsigned int>(v15);
          uint64_t v14 = v16;
        }
        while (v13);
      }
      break;
    case 3:
      uint64_t v17 = *(void *)(*a2 + 8);
      if (v17)
      {
        uint64_t v18 = *(void *)(*a2 + 24);
        unsigned int v19 = (void *)(a2[1] + 40);
        do
        {
          --v17;
          uint64_t v20 = v18 + 8;
          uint64_t result = boost::archive::basic_text_iprimitive<std::istream>::load<unsigned long long>(v19);
          uint64_t v18 = v20;
        }
        while (v17);
      }
      break;
    case 4:
      uint64_t v22 = *a2;
      uint64_t v21 = (boost::archive::detail::basic_iarchive_impl **)a2[1];
      unint64_t v23 = *(void *)(v22 + 24);
      unint64_t v24 = *(void *)(v22 + 8);
      v25[0] = v23;
      v25[1] = v24;
      uint64_t result = boost::serialization::array_wrapper<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>::serialize_optimized<boost::archive::text_iarchive>(v25, v21);
      break;
    default:
      uint64_t v5 = *(void *)(*a2 + 8);
      if (v5)
      {
        uint64_t v6 = *(void *)(*a2 + 24);
        uint64_t v7 = (void *)(a2[1] + 40);
        do
        {
          --v5;
          uint64_t v8 = v6 + 8;
          uint64_t result = boost::archive::basic_text_iprimitive<std::istream>::load<double>(v7);
          uint64_t v6 = v8;
        }
        while (v5);
      }
      break;
  }
  return result;
}

void *boost::archive::basic_text_iprimitive<std::istream>::load<short>(void *a1)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  uint64_t result = (void *)MEMORY[0x25A2D4930](*a1);
  if ((*((unsigned char *)result + *(void *)(*result - 24) + 32) & 5) != 0)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v2, 8, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v2);
  }
  return result;
}

void sub_258F6EB6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
}

void *boost::archive::basic_text_iprimitive<std::istream>::load<unsigned long>(void *a1)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  uint64_t result = (void *)MEMORY[0x25A2D4920](*a1);
  if ((*((unsigned char *)result + *(void *)(*result - 24) + 32) & 5) != 0)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v2, 8, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v2);
  }
  return result;
}

void sub_258F6EC20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
}

void boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::make<unsigned char>(uint64_t a1, size_t a2)
{
  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::destroy(a1);
  if (a2)
  {
    uint64_t v4 = operator new(a2);
    bzero(v4, a2);
    *(void *)(a1 + 24) = v4;
  }
  *(void *)(a1 + 8) = a2;
  *(unsigned char *)(a1 + 16) = 0;
}

void boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::make<unsigned short>(uint64_t a1, uint64_t a2)
{
  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::destroy(a1);
  if (a2) {
    *(void *)(a1 + 24) = boost::histogram::detail::create_buffer<std::allocator<unsigned short>>((uint64_t)&v4, a2);
  }
  *(void *)(a1 + 8) = a2;
  *(unsigned char *)(a1 + 16) = 1;
}

void *boost::histogram::detail::create_buffer<std::allocator<unsigned short>>(uint64_t a1, uint64_t a2)
{
  if (a2 < 0) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  size_t v3 = 2 * a2;
  char v4 = operator new(2 * a2);
  uint64_t v5 = v4;
  if (a2) {
    bzero(v4, v3);
  }
  return v5;
}

void boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::make<unsigned int>(uint64_t a1, unint64_t a2)
{
  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::destroy(a1);
  if (a2) {
    *(void *)(a1 + 24) = boost::histogram::detail::create_buffer<std::allocator<unsigned int>>((uint64_t)&v4, a2);
  }
  *(void *)(a1 + 8) = a2;
  *(unsigned char *)(a1 + 16) = 2;
}

void *boost::histogram::detail::create_buffer<std::allocator<unsigned int>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  size_t v3 = 4 * a2;
  char v4 = operator new(4 * a2);
  uint64_t v5 = v4;
  if (a2) {
    bzero(v4, v3);
  }
  return v5;
}

void boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::make<unsigned long long>(uint64_t a1, unint64_t a2)
{
  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::destroy(a1);
  if (a2) {
    *(void *)(a1 + 24) = boost::histogram::detail::create_buffer<std::allocator<unsigned long long>>((uint64_t)&v4, a2);
  }
  *(void *)(a1 + 8) = a2;
  *(unsigned char *)(a1 + 16) = 3;
}

void *boost::histogram::detail::create_buffer<std::allocator<unsigned long long>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  size_t v3 = 8 * a2;
  char v4 = operator new(8 * a2);
  uint64_t v5 = v4;
  if (a2) {
    bzero(v4, v3);
  }
  return v5;
}

void boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::make<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>(uint64_t a1, unint64_t a2)
{
  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::destroy(a1);
  if (a2) {
    *(void *)(a1 + 24) = boost::histogram::detail::create_buffer<std::allocator<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>((uint64_t)&v4, a2);
  }
  *(void *)(a1 + 8) = a2;
  *(unsigned char *)(a1 + 16) = 4;
}

char *boost::histogram::detail::create_buffer<std::allocator<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v3 = 3 * a2;
  char v4 = (char *)operator new(24 * a2);
  uint64_t v5 = v4;
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = &v4[8 * v3];
    do
    {
      uint64_t v8 = operator new(8uLL);
      uint64_t v9 = &v5[v6];
      *uint64_t v8 = 0;
      *(void *)uint64_t v9 = v8;
      *((void *)v9 + 1) = v8 + 1;
      *((void *)v9 + 2) = v8 + 1;
      v6 += 24;
    }
    while (v9 + 24 != v7);
  }
  return v5;
}

void sub_258F6EF90(_Unwind_Exception *a1)
{
}

void boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::make<double>(uint64_t a1, unint64_t a2)
{
  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::destroy(a1);
  if (a2) {
    *(void *)(a1 + 24) = boost::histogram::detail::create_buffer<std::allocator<unsigned long long>>((uint64_t)&v4, a2);
  }
  *(void *)(a1 + 8) = a2;
  *(unsigned char *)(a1 + 16) = 5;
}

void *boost::archive::basic_text_iprimitive<std::istream>::load<unsigned short>(void *a1)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  uint64_t result = (void *)MEMORY[0x25A2D4940](*a1);
  if ((*((unsigned char *)result + *(void *)(*result - 24) + 32) & 5) != 0)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v2, 8, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v2);
  }
  return result;
}

void sub_258F6F094(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
}

void *boost::archive::basic_text_iprimitive<std::istream>::load<unsigned long long>(void *a1)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  uint64_t result = (void *)MEMORY[0x25A2D4950](*a1);
  if ((*((unsigned char *)result + *(void *)(*result - 24) + 32) & 5) != 0)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v2, 8, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v2);
  }
  return result;
}

void sub_258F6F148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
}

unint64_t *boost::serialization::array_wrapper<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>::serialize_optimized<boost::archive::text_iarchive>(unint64_t *result, boost::archive::detail::basic_iarchive_impl **a2)
{
  unint64_t v2 = result[1];
  if (v2)
  {
    unint64_t v4 = *result;
    do
    {
      --v2;
      instance = (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::get_instance();
      uint64_t result = (unint64_t *)boost::archive::detail::basic_iarchive::load_object(a2, v4, instance);
      v4 += 24;
    }
    while (v2);
  }
  return result;
}

void boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::~singleton_wrapper(boost::serialization::extended_type_info *a1)
{
  *(void *)a1 = &unk_2707039F0;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>::~extended_type_info_typeid(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_2707039F0;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>::~extended_type_info_typeid(a1);
  JUMPOUT(0x25A2D4B50);
}

boost::serialization::typeid_system::extended_type_info_typeid_0 *boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::singleton_wrapper(boost::serialization::typeid_system::extended_type_info_typeid_0 *a1)
{
  *(void *)boost::serialization::extended_type_info_typeid<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>::extended_type_info_typeid(a1) = &unk_2707039F0;
  if (boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::get_is_destroyed(void)::is_destroyed_flag) {
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  }
  return a1;
}

void sub_258F6F254(_Unwind_Exception *a1)
{
  boost::serialization::extended_type_info_typeid<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>::~extended_type_info_typeid(v1);
  _Unwind_Resume(a1);
}

boost::serialization::typeid_system::extended_type_info_typeid_0 *boost::serialization::extended_type_info_typeid<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>::extended_type_info_typeid(boost::serialization::typeid_system::extended_type_info_typeid_0 *a1)
{
  unint64_t v2 = (boost::serialization::typeid_system::extended_type_info_typeid_0 *)boost::serialization::typeid_system::extended_type_info_typeid_0::extended_type_info_typeid_0(a1, 0);
  *(void *)unint64_t v2 = &unk_270703A98;
  boost::serialization::extended_type_info::key_register((uint64_t *)a1);
  return a1;
}

void sub_258F6F2C4(_Unwind_Exception *a1)
{
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(v1);
  _Unwind_Resume(a1);
}

void boost::serialization::extended_type_info_typeid<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>::~extended_type_info_typeid(boost::serialization::extended_type_info *a1)
{
  *(void *)a1 = &unk_270703A98;
  boost::serialization::extended_type_info::key_unregister(a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::type_unregister((uint64_t *)a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(a1);
}

{
  uint64_t vars8;

  boost::serialization::extended_type_info_typeid<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>::~extended_type_info_typeid(a1);
  JUMPOUT(0x25A2D4B50);
}

void boost::serialization::extended_type_info_typeid<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>::construct(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 0:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
    case 1:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
    case 2:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
    case 3:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
    case 4:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
    default:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
  }
}

void **boost::serialization::extended_type_info_typeid<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>::destroy(uint64_t a1, void **a2)
{
  return boost::serialization::access::destroy<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>(a2);
}

void **boost::serialization::access::destroy<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>(void **result)
{
  if (result)
  {
    uint64_t v1 = result;
    unint64_t v2 = *result;
    if (v2)
    {
      v1[1] = v2;
      operator delete(v2);
    }
    JUMPOUT(0x25A2D4B50);
  }
  return result;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>::load_object_data(uint64_t a1, const void *a2, unint64_t a3)
{
  unint64_t v4 = (boost::archive::detail::basic_iarchive_impl **)boost::serialization::smart_cast_impl::reference<boost::archive::text_iarchive &>::polymorphic::cross::cast<boost::archive::detail::basic_iarchive>(a2);
  instance = (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<unsigned long long>>>::get_instance();
  return boost::archive::detail::basic_iarchive::load_object(v4, a3, instance);
}

void boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<unsigned long long>>>::~singleton_wrapper(boost::serialization::extended_type_info *a1)
{
  *(void *)a1 = &unk_270703AF0;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<unsigned long long>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<std::vector<unsigned long long>>::~extended_type_info_typeid(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_270703AF0;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<unsigned long long>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<std::vector<unsigned long long>>::~extended_type_info_typeid(a1);
  JUMPOUT(0x25A2D4B50);
}

boost::serialization::typeid_system::extended_type_info_typeid_0 *boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<unsigned long long>>>::singleton_wrapper(boost::serialization::typeid_system::extended_type_info_typeid_0 *a1)
{
  *(void *)boost::serialization::extended_type_info_typeid<std::vector<unsigned long long>>::extended_type_info_typeid(a1) = &unk_270703AF0;
  if (boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<unsigned long long>>>::get_is_destroyed(void)::is_destroyed_flag) {
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  }
  return a1;
}

void sub_258F6F594(_Unwind_Exception *a1)
{
  boost::serialization::extended_type_info_typeid<std::vector<unsigned long long>>::~extended_type_info_typeid(v1);
  _Unwind_Resume(a1);
}

boost::serialization::typeid_system::extended_type_info_typeid_0 *boost::serialization::extended_type_info_typeid<std::vector<unsigned long long>>::extended_type_info_typeid(boost::serialization::typeid_system::extended_type_info_typeid_0 *a1)
{
  unint64_t v2 = (boost::serialization::typeid_system::extended_type_info_typeid_0 *)boost::serialization::typeid_system::extended_type_info_typeid_0::extended_type_info_typeid_0(a1, 0);
  *(void *)unint64_t v2 = &unk_270703B98;
  boost::serialization::extended_type_info::key_register((uint64_t *)a1);
  return a1;
}

void sub_258F6F604(_Unwind_Exception *a1)
{
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(v1);
  _Unwind_Resume(a1);
}

void boost::serialization::extended_type_info_typeid<std::vector<unsigned long long>>::~extended_type_info_typeid(boost::serialization::extended_type_info *a1)
{
  *(void *)a1 = &unk_270703B98;
  boost::serialization::extended_type_info::key_unregister(a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::type_unregister((uint64_t *)a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(a1);
}

{
  uint64_t vars8;

  boost::serialization::extended_type_info_typeid<std::vector<unsigned long long>>::~extended_type_info_typeid(a1);
  JUMPOUT(0x25A2D4B50);
}

void boost::serialization::extended_type_info_typeid<std::vector<unsigned long long>>::construct(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 0:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
    case 1:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
    case 2:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
    case 3:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
    case 4:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
    default:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
  }
}

void **boost::serialization::extended_type_info_typeid<std::vector<unsigned long long>>::destroy(uint64_t a1, void **a2)
{
  return boost::serialization::access::destroy<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>(a2);
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<unsigned long long>>::load_object_data(uint64_t a1, const void *a2, void **a3)
{
  unint64_t v4 = boost::serialization::smart_cast_impl::reference<boost::archive::text_iarchive &>::polymorphic::cross::cast<boost::archive::detail::basic_iarchive>(a2);
  boost::serialization::free_loader<boost::archive::text_iarchive,std::vector<unsigned long long>>::invoke((uint64_t)v4, a3);
}

void boost::serialization::free_loader<boost::archive::text_iarchive,std::vector<unsigned long long>>::invoke(uint64_t a1, void **a2)
{
  boost::archive::detail::basic_iarchive::get_library_version(a1, &v6);
  unint64_t v5 = 0;
  boost::archive::basic_text_iprimitive<std::istream>::load<boost::serialization::collection_size_type>((void *)(a1 + 40));
  if (v6 >= 4u) {
    boost::archive::basic_text_iprimitive<std::istream>::load<unsigned int>((void *)(a1 + 40));
  }
  std::vector<unsigned long long>::reserve(a2, v5);
  unint64_t v4 = v5;
  boost::serialization::stl::collection_load_impl<boost::archive::text_iarchive,std::vector<unsigned long long>>(a1, (uint64_t *)a2, &v4);
}

void std::vector<unsigned long long>::reserve(void **a1, unint64_t a2)
{
  unint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    unsigned __int16 v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    uint64_t v9 = &v6[8 * v8];
    uint64_t v10 = (char *)*a1;
    unint64_t v11 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v11 != *a1)
    {
      uint64_t v12 = v7;
      do
      {
        uint64_t v13 = *((void *)v11 - 1);
        v11 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void boost::serialization::stl::collection_load_impl<boost::archive::text_iarchive,std::vector<unsigned long long>>(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  std::vector<unsigned long long>::resize((uint64_t)a2, *a3);
  uint64_t v6 = *a2;
  if ((*a3)--)
  {
    uint64_t v8 = (void *)(a1 + 40);
    do
    {
      uint64_t v9 = v6 + 8;
      boost::archive::basic_text_iprimitive<std::istream>::load<unsigned long long>(v8);
      unint64_t v10 = (*a3)--;
      uint64_t v6 = v9;
    }
    while (v10);
  }
}

void std::vector<unsigned long long>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<unsigned long long>::__append((char **)a1, a2 - v2);
  }
}

void std::vector<unsigned long long>::__append(char **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  int64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 3);
    if (v10 >> 61) {
      std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 3;
    uint64_t v12 = v5 - v8;
    if (v12 >> 2 > v10) {
      unint64_t v10 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v4, v13);
      uint64_t v8 = *a1;
      uint64_t v7 = a1[1];
    }
    else
    {
      uint64_t v14 = 0;
    }
    unint64_t v15 = &v14[8 * v11];
    uint64_t v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    uint64_t v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      uint64_t v18 = *((void *)v7 - 1);
      v7 -= 8;
      *((void *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<unsigned long long>>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(void *)a1 = &unk_270703BF0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<unsigned long long>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_270703BF0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<unsigned long long>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x25A2D4B50);
}

void *boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<unsigned long long>>>::singleton_wrapper(void *a1)
{
  instance = boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<unsigned long long>>>::get_instance();
  boost::archive::detail::basic_iserializer::basic_iserializer(a1, (uint64_t)instance);
  *a1 = &unk_270703BF0;
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<unsigned long long>>>::get_is_destroyed(void)::is_destroyed_flag) {
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  }
  return a1;
}

void sub_258F6FB88(_Unwind_Exception *a1)
{
  boost::archive::detail::basic_iserializer::~basic_iserializer(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<unsigned long long>>::class_info()
{
  return 0;
}

BOOL boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<unsigned long long>>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<unsigned long long>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<unsigned long long>>::is_polymorphic()
{
  return 0;
}

void **boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<unsigned long long>>::destroy(uint64_t a1, void **a2)
{
  return boost::serialization::access::destroy<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>(a2);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(void *)a1 = &unk_270703C70;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_270703C70;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x25A2D4B50);
}

void *boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::singleton_wrapper(void *a1)
{
  instance = boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::get_instance();
  boost::archive::detail::basic_iserializer::basic_iserializer(a1, (uint64_t)instance);
  *a1 = &unk_270703C70;
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::get_is_destroyed(void)::is_destroyed_flag) {
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  }
  return a1;
}

void sub_258F6FCD8(_Unwind_Exception *a1)
{
  boost::archive::detail::basic_iserializer::~basic_iserializer(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>::is_polymorphic()
{
  return 0;
}

void **boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>::destroy(uint64_t a1, void **a2)
{
  return boost::serialization::access::destroy<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>(a2);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::unlimited_storage<std::allocator<char>>>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(void *)a1 = &unk_270703CF0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::unlimited_storage<std::allocator<char>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_270703CF0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::unlimited_storage<std::allocator<char>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x25A2D4B50);
}

void *boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::unlimited_storage<std::allocator<char>>>>::singleton_wrapper(void *a1)
{
  instance = boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::unlimited_storage<std::allocator<char>>>>::get_instance();
  boost::archive::detail::basic_iserializer::basic_iserializer(a1, (uint64_t)instance);
  *a1 = &unk_270703CF0;
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::unlimited_storage<std::allocator<char>>>>::get_is_destroyed(void)::is_destroyed_flag) {
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  }
  return a1;
}

void sub_258F6FE28(_Unwind_Exception *a1)
{
  boost::archive::detail::basic_iserializer::~basic_iserializer(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::unlimited_storage<std::allocator<char>>>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::unlimited_storage<std::allocator<char>>>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::unlimited_storage<std::allocator<char>>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::unlimited_storage<std::allocator<char>>>::is_polymorphic()
{
  return 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::unlimited_storage<std::allocator<char>>>::destroy(uint64_t a1, uint64_t a2)
{
  return boost::serialization::access::destroy<boost::histogram::unlimited_storage<std::allocator<char>>>(a2);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(void *)a1 = &unk_270703D70;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_270703D70;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x25A2D4B50);
}

void *boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::singleton_wrapper(void *a1)
{
  instance = boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::get_instance();
  boost::archive::detail::basic_iserializer::basic_iserializer(a1, (uint64_t)instance);
  *a1 = &unk_270703D70;
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::get_is_destroyed(void)::is_destroyed_flag) {
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  }
  return a1;
}

void sub_258F6FF78(_Unwind_Exception *a1)
{
  boost::archive::detail::basic_iserializer::~basic_iserializer(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>::is_polymorphic()
{
  return 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>::destroy(uint64_t a1, uint64_t a2)
{
  return boost::serialization::access::destroy<boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>(a2);
}

void boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<pps::AxisEnum>>>::~singleton_wrapper(boost::serialization::extended_type_info *a1)
{
  *(void *)a1 = &unk_270703DF0;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<pps::AxisEnum>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<std::vector<pps::AxisEnum>>::~extended_type_info_typeid(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_270703DF0;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<pps::AxisEnum>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<std::vector<pps::AxisEnum>>::~extended_type_info_typeid(a1);
  JUMPOUT(0x25A2D4B50);
}

boost::serialization::typeid_system::extended_type_info_typeid_0 *boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<pps::AxisEnum>>>::singleton_wrapper(boost::serialization::typeid_system::extended_type_info_typeid_0 *a1)
{
  *(void *)boost::serialization::extended_type_info_typeid<std::vector<pps::AxisEnum>>::extended_type_info_typeid(a1) = &unk_270703DF0;
  if (boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<pps::AxisEnum>>>::get_is_destroyed(void)::is_destroyed_flag) {
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  }
  return a1;
}

void sub_258F700BC(_Unwind_Exception *a1)
{
  boost::serialization::extended_type_info_typeid<std::vector<pps::AxisEnum>>::~extended_type_info_typeid(v1);
  _Unwind_Resume(a1);
}

boost::serialization::typeid_system::extended_type_info_typeid_0 *boost::serialization::extended_type_info_typeid<std::vector<pps::AxisEnum>>::extended_type_info_typeid(boost::serialization::typeid_system::extended_type_info_typeid_0 *a1)
{
  unint64_t v2 = (boost::serialization::typeid_system::extended_type_info_typeid_0 *)boost::serialization::typeid_system::extended_type_info_typeid_0::extended_type_info_typeid_0(a1, 0);
  *(void *)unint64_t v2 = &unk_270703E98;
  boost::serialization::extended_type_info::key_register((uint64_t *)a1);
  return a1;
}

void sub_258F7012C(_Unwind_Exception *a1)
{
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(v1);
  _Unwind_Resume(a1);
}

void boost::serialization::extended_type_info_typeid<std::vector<pps::AxisEnum>>::~extended_type_info_typeid(boost::serialization::extended_type_info *a1)
{
  *(void *)a1 = &unk_270703E98;
  boost::serialization::extended_type_info::key_unregister(a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::type_unregister((uint64_t *)a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(a1);
}

{
  uint64_t vars8;

  boost::serialization::extended_type_info_typeid<std::vector<pps::AxisEnum>>::~extended_type_info_typeid(a1);
  JUMPOUT(0x25A2D4B50);
}

void boost::serialization::extended_type_info_typeid<std::vector<pps::AxisEnum>>::construct(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 0:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
    case 1:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
    case 2:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
    case 3:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
    case 4:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
    default:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
  }
}

void **boost::serialization::extended_type_info_typeid<std::vector<pps::AxisEnum>>::destroy(uint64_t a1, void **a2)
{
  return boost::serialization::access::destroy<std::vector<double>>(a2);
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<pps::AxisEnum>>::load_object_data(uint64_t a1, const void *a2, void **a3)
{
  uint64_t v4 = boost::serialization::smart_cast_impl::reference<boost::archive::text_iarchive &>::polymorphic::cross::cast<boost::archive::detail::basic_iarchive>(a2);
  boost::serialization::free_loader<boost::archive::text_iarchive,std::vector<pps::AxisEnum>>::invoke((uint64_t)v4, a3);
}

void boost::serialization::free_loader<boost::archive::text_iarchive,std::vector<pps::AxisEnum>>::invoke(uint64_t a1, void **a2)
{
  boost::archive::detail::basic_iarchive::get_library_version(a1, &v6);
  unint64_t v5 = 0;
  boost::archive::basic_text_iprimitive<std::istream>::load<boost::serialization::collection_size_type>((void *)(a1 + 40));
  if (v6 >= 4u) {
    boost::archive::basic_text_iprimitive<std::istream>::load<unsigned int>((void *)(a1 + 40));
  }
  std::vector<pps::AxisEnum>::reserve(a2, v5);
  unint64_t v4 = v5;
  boost::serialization::stl::collection_load_impl<boost::archive::text_iarchive,std::vector<pps::AxisEnum>>(a1, a2, &v4);
}

void std::vector<pps::AxisEnum>::reserve(void **a1, unint64_t a2)
{
  unint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 2)
  {
    if (a2 >> 62) {
      std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    unsigned __int16 v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pps::AxisEnum>>(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    uint64_t v9 = &v6[4 * v8];
    unint64_t v10 = (char *)*a1;
    uint64_t v11 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v11 != *a1)
    {
      uint64_t v12 = v7;
      do
      {
        int v13 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v12 - 1) = v13;
        v12 -= 4;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void boost::serialization::stl::collection_load_impl<boost::archive::text_iarchive,std::vector<pps::AxisEnum>>(uint64_t a1, void *a2, unint64_t *a3)
{
  std::vector<pps::AxisEnum>::resize((uint64_t)a2, *a3);
  unsigned __int16 v6 = (_DWORD *)*a2;
  if ((*a3)--)
  {
    uint64_t v8 = (void *)(a1 + 40);
    do
    {
      boost::archive::basic_text_iprimitive<std::istream>::load<int>(v8);
      *v6++ = 0;
    }
    while ((*a3)--);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<pps::AxisEnum>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(4 * a2);
}

void std::vector<pps::AxisEnum>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 4 * a2;
    }
  }
  else
  {
    std::vector<pps::AxisEnum>::__append((char **)a1, a2 - v2);
  }
}

void std::vector<pps::AxisEnum>::__append(char **a1, unint64_t a2)
{
  unsigned __int16 v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  int64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 2)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 4 * a2);
      v7 += 4 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 2);
    if (v10 >> 62) {
      std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 2;
    uint64_t v12 = v5 - v8;
    if (v12 >> 1 > v10) {
      unint64_t v10 = v12 >> 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pps::AxisEnum>>(v4, v13);
      uint64_t v8 = *a1;
      uint64_t v7 = a1[1];
    }
    else
    {
      uint64_t v14 = 0;
    }
    unint64_t v15 = &v14[4 * v11];
    uint64_t v16 = &v14[4 * v13];
    bzero(v15, 4 * a2);
    uint64_t v17 = &v15[4 * a2];
    while (v7 != v8)
    {
      int v18 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<pps::AxisEnum>>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(void *)a1 = &unk_270703EF0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<pps::AxisEnum>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_270703EF0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<pps::AxisEnum>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x25A2D4B50);
}

void *boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<pps::AxisEnum>>>::singleton_wrapper(void *a1)
{
  instance = boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<pps::AxisEnum>>>::get_instance();
  boost::archive::detail::basic_iserializer::basic_iserializer(a1, (uint64_t)instance);
  *a1 = &unk_270703EF0;
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<pps::AxisEnum>>>::get_is_destroyed(void)::is_destroyed_flag) {
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  }
  return a1;
}

void sub_258F706F8(_Unwind_Exception *a1)
{
  boost::archive::detail::basic_iserializer::~basic_iserializer(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<pps::AxisEnum>>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<pps::AxisEnum>>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<pps::AxisEnum>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<pps::AxisEnum>>::is_polymorphic()
{
  return 0;
}

void **boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<pps::AxisEnum>>::destroy(uint64_t a1, void **a2)
{
  return boost::serialization::access::destroy<std::vector<double>>(a2);
}

void boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::map<int,std::vector<std::string>>>>::~singleton_wrapper(boost::serialization::extended_type_info *a1)
{
  *(void *)a1 = &unk_270703F70;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::map<int,std::vector<std::string>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<std::map<int,std::vector<std::string>>>::~extended_type_info_typeid(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_270703F70;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::map<int,std::vector<std::string>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<std::map<int,std::vector<std::string>>>::~extended_type_info_typeid(a1);
  JUMPOUT(0x25A2D4B50);
}

boost::serialization::typeid_system::extended_type_info_typeid_0 *boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::map<int,std::vector<std::string>>>>::singleton_wrapper(boost::serialization::typeid_system::extended_type_info_typeid_0 *a1)
{
  *(void *)boost::serialization::extended_type_info_typeid<std::map<int,std::vector<std::string>>>::extended_type_info_typeid(a1) = &unk_270703F70;
  if (boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::map<int,std::vector<std::string>>>>::get_is_destroyed(void)::is_destroyed_flag) {
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  }
  return a1;
}

void sub_258F7083C(_Unwind_Exception *a1)
{
  boost::serialization::extended_type_info_typeid<std::map<int,std::vector<std::string>>>::~extended_type_info_typeid(v1);
  _Unwind_Resume(a1);
}

boost::serialization::typeid_system::extended_type_info_typeid_0 *boost::serialization::extended_type_info_typeid<std::map<int,std::vector<std::string>>>::extended_type_info_typeid(boost::serialization::typeid_system::extended_type_info_typeid_0 *a1)
{
  unint64_t v2 = (boost::serialization::typeid_system::extended_type_info_typeid_0 *)boost::serialization::typeid_system::extended_type_info_typeid_0::extended_type_info_typeid_0(a1, 0);
  *(void *)unint64_t v2 = &unk_270704018;
  boost::serialization::extended_type_info::key_register((uint64_t *)a1);
  return a1;
}

void sub_258F708AC(_Unwind_Exception *a1)
{
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(v1);
  _Unwind_Resume(a1);
}

void boost::serialization::extended_type_info_typeid<std::map<int,std::vector<std::string>>>::~extended_type_info_typeid(boost::serialization::extended_type_info *a1)
{
  *(void *)a1 = &unk_270704018;
  boost::serialization::extended_type_info::key_unregister(a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::type_unregister((uint64_t *)a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(a1);
}

{
  uint64_t vars8;

  boost::serialization::extended_type_info_typeid<std::map<int,std::vector<std::string>>>::~extended_type_info_typeid(a1);
  JUMPOUT(0x25A2D4B50);
}

void boost::serialization::extended_type_info_typeid<std::map<int,std::vector<std::string>>>::construct(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 0:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
    case 1:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
    case 2:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
    case 3:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
    case 4:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
    default:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
  }
}

uint64_t boost::serialization::extended_type_info_typeid<std::map<int,std::vector<std::string>>>::destroy(uint64_t a1, uint64_t a2)
{
  return boost::serialization::access::destroy<std::map<int,std::vector<std::string>>>(a2);
}

uint64_t boost::serialization::access::destroy<std::map<int,std::vector<std::string>>>(uint64_t result)
{
  if (result)
  {
    std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::destroy(result, *(char **)(result + 8));
    JUMPOUT(0x25A2D4B50);
  }
  return result;
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,std::map<int,std::vector<std::string>>>::load_object_data(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t v4 = boost::serialization::smart_cast_impl::reference<boost::archive::text_iarchive &>::polymorphic::cross::cast<boost::archive::detail::basic_iarchive>(a2);
  boost::serialization::load_map_collection<boost::archive::text_iarchive,std::map<int,std::vector<std::string>>>((uint64_t)v4, a3);
}

void boost::serialization::load_map_collection<boost::archive::text_iarchive,std::map<int,std::vector<std::string>>>(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v4 = (void *)(a2 + 8);
  std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::destroy(a2, *(char **)(a2 + 8));
  *(void *)a2 = v4;
  *(void *)(a2 + 16) = 0;
  void *v4 = 0;
  boost::archive::detail::basic_iarchive::get_library_version(a1, &v5);
  boost::archive::basic_text_iprimitive<std::istream>::load<boost::serialization::collection_size_type>((void *)(a1 + 40));
  if (v5 >= 4u)
  {
    int v6 = 0;
    boost::archive::basic_text_iprimitive<std::istream>::load<unsigned int>((void *)(a1 + 40));
  }
}

void sub_258F70C30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
}

char *std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::__emplace_hint_unique_key_args<int,std::pair<int const,std::vector<std::string>>>(uint64_t **a1, uint64_t *a2, int *a3, uint64_t a4)
{
  int v6 = std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::__find_equal<int>(a1, a2, &v11, &v10, a3);
  uint64_t v7 = (char *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = (char *)operator new(0x40uLL);
    *((_DWORD *)v7 + 8) = *(_DWORD *)a4;
    *(_OWORD *)(v7 + 40) = *(_OWORD *)(a4 + 8);
    *((void *)v7 + 7) = *(void *)(a4 + 24);
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    *(void *)(a4 + 24) = 0;
    std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::__insert_node_at(a1, (uint64_t)v11, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::__find_equal<int>(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, int *a5)
{
  unsigned __int16 v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, int v7 = *((_DWORD *)a2 + 8), *a5 < v7))
  {
    uint64_t v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      uint64_t v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        uint64_t v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      unint64_t v13 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        unint64_t v13 = v10;
      }
      while (v14);
    }
    int v15 = *a5;
    if (*((_DWORD *)v10 + 8) < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v17 = (uint64_t *)v16;
          int v18 = *(_DWORD *)(v16 + 32);
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *v17;
          unsigned __int16 v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        unsigned __int16 v5 = v17 + 1;
        uint64_t v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      uint64_t v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    uint64_t v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      uint64_t v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    unsigned int v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      unsigned int v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 8))
  {
    uint64_t v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v21 = (uint64_t *)v20;
          int v22 = *(_DWORD *)(v20 + 32);
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = *v21;
          unsigned __int16 v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        unsigned __int16 v5 = v21 + 1;
        uint64_t v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      uint64_t v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t *std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  unsigned __int16 v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  uint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      unint64_t v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      uint64_t v3 = (uint64_t *)v2[2];
      uint64_t v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (int v8 = *(unsigned __int8 *)(v7 + 24), v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            uint64_t v9 = (uint64_t **)a2[2];
          }
          else
          {
            uint64_t v9 = (uint64_t **)v2[1];
            uint64_t v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              uint64_t v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            uint64_t *v9 = v2;
            v2[2] = (uint64_t)v9;
            uint64_t v3 = v9[2];
            unint64_t v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          uint64_t *v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), unsigned __int16 v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          uint64_t *v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            uint64_t v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          uint64_t v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        unint64_t v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        uint64_t *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      unsigned char *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::pair<int const,std::vector<std::string>>>>::~singleton_wrapper(boost::serialization::extended_type_info *a1)
{
  *(void *)a1 = &unk_270704070;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::pair<int const,std::vector<std::string>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<std::pair<int const,std::vector<std::string>>>::~extended_type_info_typeid(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_270704070;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::pair<int const,std::vector<std::string>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<std::pair<int const,std::vector<std::string>>>::~extended_type_info_typeid(a1);
  JUMPOUT(0x25A2D4B50);
}

boost::serialization::typeid_system::extended_type_info_typeid_0 *boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::pair<int const,std::vector<std::string>>>>::singleton_wrapper(boost::serialization::typeid_system::extended_type_info_typeid_0 *a1)
{
  *(void *)boost::serialization::extended_type_info_typeid<std::pair<int const,std::vector<std::string>>>::extended_type_info_typeid(a1) = &unk_270704070;
  if (boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::pair<int const,std::vector<std::string>>>>::get_is_destroyed(void)::is_destroyed_flag) {
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  }
  return a1;
}

void sub_258F7112C(_Unwind_Exception *a1)
{
  boost::serialization::extended_type_info_typeid<std::pair<int const,std::vector<std::string>>>::~extended_type_info_typeid(v1);
  _Unwind_Resume(a1);
}

boost::serialization::typeid_system::extended_type_info_typeid_0 *boost::serialization::extended_type_info_typeid<std::pair<int const,std::vector<std::string>>>::extended_type_info_typeid(boost::serialization::typeid_system::extended_type_info_typeid_0 *a1)
{
  unint64_t v2 = (boost::serialization::typeid_system::extended_type_info_typeid_0 *)boost::serialization::typeid_system::extended_type_info_typeid_0::extended_type_info_typeid_0(a1, 0);
  *(void *)unint64_t v2 = &unk_270704118;
  boost::serialization::extended_type_info::key_register((uint64_t *)a1);
  return a1;
}

void sub_258F7119C(_Unwind_Exception *a1)
{
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(v1);
  _Unwind_Resume(a1);
}

void boost::serialization::extended_type_info_typeid<std::pair<int const,std::vector<std::string>>>::~extended_type_info_typeid(boost::serialization::extended_type_info *a1)
{
  *(void *)a1 = &unk_270704118;
  boost::serialization::extended_type_info::key_unregister(a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::type_unregister((uint64_t *)a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(a1);
}

{
  uint64_t vars8;

  boost::serialization::extended_type_info_typeid<std::pair<int const,std::vector<std::string>>>::~extended_type_info_typeid(a1);
  JUMPOUT(0x25A2D4B50);
}

void boost::serialization::extended_type_info_typeid<std::pair<int const,std::vector<std::string>>>::construct(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 0:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
    case 1:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
    case 2:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
    case 3:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
    case 4:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
    default:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
  }
}

uint64_t boost::serialization::extended_type_info_typeid<std::pair<int const,std::vector<std::string>>>::destroy(uint64_t a1, uint64_t a2)
{
  return boost::serialization::access::destroy<std::pair<int const,std::vector<std::string>>>(a2);
}

uint64_t boost::serialization::access::destroy<std::pair<int const,std::vector<std::string>>>(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    unint64_t v2 = (void **)(result + 8);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
    return MEMORY[0x25A2D4B50](v1, 0x1020C40E72D6CFBLL);
  }
  return result;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,std::pair<int const,std::vector<std::string>>>::load_object_data(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t v4 = (boost::archive::detail::basic_iarchive_impl **)boost::serialization::smart_cast_impl::reference<boost::archive::text_iarchive &>::polymorphic::cross::cast<boost::archive::detail::basic_iarchive>(a2);
  boost::archive::basic_text_iprimitive<std::istream>::load<int>(v4 + 5);
  instance = (const boost::archive::detail::basic_iserializer *)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::string>>>::get_instance();
  return boost::archive::detail::basic_iarchive::load_object(v4, a3 + 8, instance);
}

void boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<std::string>>>::~singleton_wrapper(boost::serialization::extended_type_info *a1)
{
  *(void *)a1 = &unk_270704170;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<std::string>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<std::vector<std::string>>::~extended_type_info_typeid(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_270704170;
  boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<std::string>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::serialization::extended_type_info_typeid<std::vector<std::string>>::~extended_type_info_typeid(a1);
  JUMPOUT(0x25A2D4B50);
}

boost::serialization::typeid_system::extended_type_info_typeid_0 *boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<std::string>>>::singleton_wrapper(boost::serialization::typeid_system::extended_type_info_typeid_0 *a1)
{
  *(void *)boost::serialization::extended_type_info_typeid<std::vector<std::string>>::extended_type_info_typeid(a1) = &unk_270704170;
  if (boost::serialization::detail::singleton_wrapper<boost::serialization::extended_type_info_typeid<std::vector<std::string>>>::get_is_destroyed(void)::is_destroyed_flag) {
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  }
  return a1;
}

void sub_258F71478(_Unwind_Exception *a1)
{
  boost::serialization::extended_type_info_typeid<std::vector<std::string>>::~extended_type_info_typeid(v1);
  _Unwind_Resume(a1);
}

boost::serialization::typeid_system::extended_type_info_typeid_0 *boost::serialization::extended_type_info_typeid<std::vector<std::string>>::extended_type_info_typeid(boost::serialization::typeid_system::extended_type_info_typeid_0 *a1)
{
  unint64_t v2 = (boost::serialization::typeid_system::extended_type_info_typeid_0 *)boost::serialization::typeid_system::extended_type_info_typeid_0::extended_type_info_typeid_0(a1, 0);
  *(void *)unint64_t v2 = &unk_270704218;
  boost::serialization::extended_type_info::key_register((uint64_t *)a1);
  return a1;
}

void sub_258F714E8(_Unwind_Exception *a1)
{
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(v1);
  _Unwind_Resume(a1);
}

void boost::serialization::extended_type_info_typeid<std::vector<std::string>>::~extended_type_info_typeid(boost::serialization::extended_type_info *a1)
{
  *(void *)a1 = &unk_270704218;
  boost::serialization::extended_type_info::key_unregister(a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::type_unregister((uint64_t *)a1);
  boost::serialization::typeid_system::extended_type_info_typeid_0::~extended_type_info_typeid_0(a1);
}

{
  uint64_t vars8;

  boost::serialization::extended_type_info_typeid<std::vector<std::string>>::~extended_type_info_typeid(a1);
  JUMPOUT(0x25A2D4B50);
}

void boost::serialization::extended_type_info_typeid<std::vector<std::string>>::construct(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 0:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
    case 1:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
    case 2:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
    case 3:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
    case 4:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
    default:
      boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct();
  }
}

void **boost::serialization::extended_type_info_typeid<std::vector<std::string>>::destroy(uint64_t a1, void **a2)
{
  return boost::serialization::access::destroy<std::vector<std::string>>(a2);
}

void **boost::serialization::access::destroy<std::vector<std::string>>(void **result)
{
  if (result)
  {
    uint64_t v1 = result;
    unint64_t v2 = result;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
    return (void **)MEMORY[0x25A2D4B50](v1, 0x20C40960023A9);
  }
  return result;
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::string>>::load_object_data(uint64_t a1, const void *a2, std::vector<std::string> *a3)
{
  uint64_t v4 = boost::serialization::smart_cast_impl::reference<boost::archive::text_iarchive &>::polymorphic::cross::cast<boost::archive::detail::basic_iarchive>(a2);
  boost::serialization::free_loader<boost::archive::text_iarchive,std::vector<std::string>>::invoke((uint64_t)v4, a3);
}

void boost::serialization::free_loader<boost::archive::text_iarchive,std::vector<std::string>>::invoke(uint64_t a1, std::vector<std::string> *a2)
{
  boost::archive::detail::basic_iarchive::get_library_version(a1, &v6);
  std::vector<std::string>::size_type __n = 0;
  boost::archive::basic_text_iprimitive<std::istream>::load<boost::serialization::collection_size_type>((void *)(a1 + 40));
  if (v6 >= 4u) {
    boost::archive::basic_text_iprimitive<std::istream>::load<unsigned int>((void *)(a1 + 40));
  }
  std::vector<std::string>::reserve(a2, __n);
  std::vector<std::string>::size_type v4 = __n;
  boost::serialization::stl::collection_load_impl<boost::archive::text_iarchive,std::vector<std::string>>(a1, a2, &v4);
}

void std::vector<std::string>::reserve(std::vector<std::string> *this, std::vector<std::string>::size_type __n)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3) < __n)
  {
    if (__n >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (char *)this->__end_ - (char *)this->__begin_;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)p_end_cap;
    __v.__first_ = (std::__split_buffer<std::string>::pointer)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)p_end_cap, __n);
    __v.__begin_ = (std::__split_buffer<std::string>::pointer)((char *)__v.__first_ + v5);
    __v.__end_ = (std::__split_buffer<std::string>::pointer)((char *)__v.__first_ + v5);
    __v.__end_cap_.__value_ = &__v.__first_[v6];
    std::vector<std::string>::__swap_out_circular_buffer(this, &__v);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
}

void sub_258F7184C(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void boost::serialization::stl::collection_load_impl<boost::archive::text_iarchive,std::vector<std::string>>(int a1, std::vector<std::string> *this, std::vector<std::string>::size_type *a3)
{
  if ((*a3)--) {
    boost::archive::text_iarchive_impl<boost::archive::text_iarchive>::load();
  }
}

void std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v)
{
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(24 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      *(void *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((void *)&v15 + 1) = v9;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    v1 += 24;
  }
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  if (this->__first_) {
    operator delete(this->__first_);
  }
}

void std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      int64_t v5 = v2 - 3;
      *(void *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        int64_t v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

void std::vector<std::string>::resize(std::vector<std::string> *this, std::vector<std::string>::size_type __sz)
{
  std::vector<std::string>::pointer end = this->__end_;
  std::vector<std::string>::size_type v4 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
  BOOL v5 = __sz >= v4;
  std::vector<std::string>::size_type v6 = __sz - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::string>::__append(this, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = &this->__begin_[__sz];
    while (end != v7)
    {
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(end[-1].__r_.__value_.__l.__data_);
      }
      --end;
    }
    this->__end_ = v7;
  }
}

void std::vector<std::string>::__append(std::vector<std::string> *this, std::vector<std::string>::size_type __n)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  BOOL v5 = value;
  uint64_t v7 = p_end_cap[-1].__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)v7) >> 3) >= __n)
  {
    if (__n)
    {
      size_t v13 = 24 * ((24 * __n - 24) / 0x18) + 24;
      bzero(p_end_cap[-1].__value_, v13);
      uint64_t v7 = (std::string *)((char *)v7 + v13);
    }
    this->__end_ = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)this->__begin_) >> 3);
    unint64_t v9 = v8 + __n;
    if (v8 + __n > 0xAAAAAAAAAAAAAAALL) {
      std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)this->__begin_) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)p_end_cap;
    if (v11) {
      uint64_t v12 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)p_end_cap, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    __v.__first_ = v12;
    __v.__begin_ = v12 + v8;
    __v.__end_cap_.__value_ = &v12[v11];
    size_t v14 = 24 * ((24 * __n - 24) / 0x18) + 24;
    bzero(__v.__begin_, v14);
    __v.__end_ = (std::__split_buffer<std::string>::pointer)((char *)__v.__begin_ + v14);
    std::vector<std::string>::__swap_out_circular_buffer(this, &__v);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
}

void sub_258F71D34(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::string>>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(void *)a1 = &unk_270704270;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::string>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_270704270;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::string>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x25A2D4B50);
}

void *boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::string>>>::singleton_wrapper(void *a1)
{
  instance = boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<std::string>>>::get_instance();
  boost::archive::detail::basic_iserializer::basic_iserializer(a1, (uint64_t)instance);
  *a1 = &unk_270704270;
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::string>>>::get_is_destroyed(void)::is_destroyed_flag) {
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  }
  return a1;
}

void sub_258F71DF4(_Unwind_Exception *a1)
{
  boost::archive::detail::basic_iserializer::~basic_iserializer(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::string>>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::string>>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::string>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::string>>::is_polymorphic()
{
  return 0;
}

void **boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::string>>::destroy(uint64_t a1, void **a2)
{
  return boost::serialization::access::destroy<std::vector<std::string>>(a2);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::pair<int const,std::vector<std::string>>>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(void *)a1 = &unk_2707042F0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::pair<int const,std::vector<std::string>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_2707042F0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::pair<int const,std::vector<std::string>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x25A2D4B50);
}

void *boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::pair<int const,std::vector<std::string>>>>::singleton_wrapper(void *a1)
{
  instance = boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::pair<int const,std::vector<std::string>>>>::get_instance();
  boost::archive::detail::basic_iserializer::basic_iserializer(a1, (uint64_t)instance);
  *a1 = &unk_2707042F0;
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::pair<int const,std::vector<std::string>>>>::get_is_destroyed(void)::is_destroyed_flag) {
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  }
  return a1;
}

void sub_258F71F44(_Unwind_Exception *a1)
{
  boost::archive::detail::basic_iserializer::~basic_iserializer(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,std::pair<int const,std::vector<std::string>>>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::iserializer<boost::archive::text_iarchive,std::pair<int const,std::vector<std::string>>>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,std::pair<int const,std::vector<std::string>>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,std::pair<int const,std::vector<std::string>>>::is_polymorphic()
{
  return 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,std::pair<int const,std::vector<std::string>>>::destroy(uint64_t a1, uint64_t a2)
{
  return boost::serialization::access::destroy<std::pair<int const,std::vector<std::string>>>(a2);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::map<int,std::vector<std::string>>>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(void *)a1 = &unk_270704370;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::map<int,std::vector<std::string>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_270704370;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::map<int,std::vector<std::string>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x25A2D4B50);
}

void *boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::map<int,std::vector<std::string>>>>::singleton_wrapper(void *a1)
{
  instance = boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::map<int,std::vector<std::string>>>>::get_instance();
  boost::archive::detail::basic_iserializer::basic_iserializer(a1, (uint64_t)instance);
  *a1 = &unk_270704370;
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::map<int,std::vector<std::string>>>>::get_is_destroyed(void)::is_destroyed_flag) {
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  }
  return a1;
}

void sub_258F72094(_Unwind_Exception *a1)
{
  boost::archive::detail::basic_iserializer::~basic_iserializer(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,std::map<int,std::vector<std::string>>>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::iserializer<boost::archive::text_iarchive,std::map<int,std::vector<std::string>>>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,std::map<int,std::vector<std::string>>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,std::map<int,std::vector<std::string>>>::is_polymorphic()
{
  return 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,std::map<int,std::vector<std::string>>>::destroy(uint64_t a1, uint64_t a2)
{
  return boost::serialization::access::destroy<std::map<int,std::vector<std::string>>>(a2);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,pps::Histogram_Internal>>::~singleton_wrapper(boost::archive::detail::basic_iserializer *a1)
{
  *(void *)a1 = &unk_2707043F0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,pps::Histogram_Internal>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_2707043F0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,pps::Histogram_Internal>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_iserializer::~basic_iserializer(a1);
  JUMPOUT(0x25A2D4B50);
}

void *boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,pps::Histogram_Internal>>::singleton_wrapper(void *a1)
{
  instance = boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance();
  boost::archive::detail::basic_iserializer::basic_iserializer(a1, (uint64_t)instance);
  *a1 = &unk_2707043F0;
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::iserializer<boost::archive::text_iarchive,pps::Histogram_Internal>>::get_is_destroyed(void)::is_destroyed_flag) {
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  }
  return a1;
}

void sub_258F721E4(_Unwind_Exception *a1)
{
  boost::archive::detail::basic_iserializer::~basic_iserializer(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,pps::Histogram_Internal>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::iserializer<boost::archive::text_iarchive,pps::Histogram_Internal>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

void boost::archive::detail::iserializer<boost::archive::text_iarchive,pps::Histogram_Internal>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,pps::Histogram_Internal>::is_polymorphic()
{
  return 1;
}

uint64_t boost::archive::detail::iserializer<boost::archive::text_iarchive,pps::Histogram_Internal>::destroy(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 8))(a2);
  }
  return result;
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,pps::Histogram_Internal>::save_object_data(uint64_t a1, const void *a2, uint64_t a3)
{
  BOOL v5 = (boost::archive::detail::basic_oarchive_impl **)boost::serialization::smart_cast_impl::reference<boost::archive::text_oarchive &>::polymorphic::cross::cast<boost::archive::detail::basic_oarchive>(a2);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 40))(&v7, a1);
  return pps::Histogram_Internal::serialize<boost::archive::text_oarchive>(a3, v5);
}

uint64_t pps::Histogram_Internal::serialize<boost::archive::text_oarchive>(uint64_t a1, boost::archive::detail::basic_oarchive_impl **a2)
{
  unint64_t v4 = a1 + 8;
  instance = (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::get_instance();
  boost::archive::detail::basic_oarchive::save_object(a2, v4, instance);
  std::vector<std::string>::size_type v6 = (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<pps::AxisEnum>>>::get_instance();
  boost::archive::detail::basic_oarchive::save_object(a2, a1 + 64, v6);
  uint64_t v7 = (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::map<int,std::vector<std::string>>>>::get_instance();
  return boost::archive::detail::basic_oarchive::save_object(a2, a1 + 88, v7);
}

void *boost::serialization::smart_cast_impl::reference<boost::archive::text_oarchive &>::polymorphic::cross::cast<boost::archive::detail::basic_oarchive>(const void *a1)
{
  if (!result) {
    __cxa_bad_cast();
  }
  return result;
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>::save_object_data(uint64_t a1, const void *a2, unint64_t a3)
{
  BOOL v5 = (boost::archive::detail::basic_oarchive_impl **)boost::serialization::smart_cast_impl::reference<boost::archive::text_oarchive &>::polymorphic::cross::cast<boost::archive::detail::basic_oarchive>(a2);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 40))(&v7, a1);
  return boost::histogram::serialize<boost::archive::text_oarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>(v5, a3);
}

uint64_t boost::histogram::serialize<boost::archive::text_oarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>(boost::archive::detail::basic_oarchive_impl **a1, unint64_t a2)
{
  instance = (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::get_instance();
  boost::archive::detail::basic_oarchive::save_object(a1, a2, instance);
  BOOL v5 = (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::unlimited_storage<std::allocator<char>>>>::get_instance();
  return boost::archive::detail::basic_oarchive::save_object(a1, a2 + 24, v5);
}

void boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::save_object_data(uint64_t a1, const void *a2)
{
  uint64_t v3 = (boost::archive::detail::basic_oarchive *)boost::serialization::smart_cast_impl::reference<boost::archive::text_oarchive &>::polymorphic::cross::cast<boost::archive::detail::basic_oarchive>(a2);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 40))(&v4, a1);
  boost::serialization::free_saver<boost::archive::text_oarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::invoke(v3);
}

void boost::serialization::free_saver<boost::archive::text_oarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::invoke(boost::archive::detail::basic_oarchive *a1)
{
}

void boost::archive::save_access::save_primitive<boost::archive::text_oarchive,boost::serialization::collection_size_type>(boost::archive::detail::basic_oarchive *a1)
{
}

uint64_t boost::archive::basic_text_oprimitive<std::ostream>::save_impl<boost::serialization::collection_size_type>(void *a1)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  if ((*(unsigned char *)(*a1 + *(void *)(*(void *)*a1 - 24) + 32) & 5) != 0)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v2, 13, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v2);
  }
  return MEMORY[0x270F987C0]();
}

void sub_258F72704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::save_object_data(uint64_t a1, const void *a2, unint64_t a3)
{
  BOOL v5 = (boost::archive::detail::basic_oarchive_impl **)boost::serialization::smart_cast_impl::reference<boost::archive::text_oarchive &>::polymorphic::cross::cast<boost::archive::detail::basic_oarchive>(a2);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 40))(&v8, a1);
  instance = (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_instance();
  return boost::archive::detail::basic_oarchive::save_object(v5, a3, instance);
}

void boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::save_object_data(uint64_t a1, const void *a2, int *a3)
{
  BOOL v5 = (boost::archive::detail::basic_oarchive *)boost::serialization::smart_cast_impl::reference<boost::archive::text_oarchive &>::polymorphic::cross::cast<boost::archive::detail::basic_oarchive>(a2);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 40))(&v6, a1);
  int v7 = *a3 ^ (*a3 >> 31);
  boost::archive::save_access::save_primitive<boost::archive::text_oarchive,int>(v5);
}

uint64_t boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::apply_visitor<boost::serialization::variant_save_visitor<boost::archive::text_oarchive>>(int *a1, boost::archive::detail::basic_oarchive_impl ***a2)
{
  unint64_t v2 = (unint64_t)(a1 + 2);
  switch(*a1 ^ (*a1 >> 31))
  {
    case 0:
      uint64_t v3 = *a2;
      instance = (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::get_instance();
      break;
    case 1:
      uint64_t v3 = *a2;
      instance = (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::get_instance();
      break;
    case 2:
      uint64_t v3 = *a2;
      instance = (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::get_instance();
      break;
    default:
      boost::detail::variant::forced_return<void>();
  }
  return boost::archive::detail::basic_oarchive::save_object(v3, v2, instance);
}

void boost::archive::save_access::save_primitive<boost::archive::text_oarchive,int>(boost::archive::detail::basic_oarchive *a1)
{
}

uint64_t boost::archive::basic_text_oprimitive<std::ostream>::save_impl<int>(void *a1)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  if ((*(unsigned char *)(*a1 + *(void *)(*(void *)*a1 - 24) + 32) & 5) != 0)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v2, 13, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v2);
  }
  return MEMORY[0x270F987A8]();
}

void sub_258F72A04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
}

void boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>::save_object_data(uint64_t a1, const void *a2, unint64_t a3)
{
  BOOL v5 = (boost::archive::detail::basic_oarchive_impl **)boost::serialization::smart_cast_impl::reference<boost::archive::text_oarchive &>::polymorphic::cross::cast<boost::archive::detail::basic_oarchive>(a2);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 40))(&v6, a1);
  boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>::serialize<boost::archive::text_oarchive>(a3, v5);
}

void boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>::serialize<boost::archive::text_oarchive>(unint64_t a1, boost::archive::detail::basic_oarchive_impl **a2)
{
  instance = (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::transform::id>>::get_instance();
  boost::archive::detail::basic_oarchive::save_object(a2, a1, instance);
  boost::archive::save_access::save_primitive<boost::archive::text_oarchive,int>((boost::archive::detail::basic_oarchive *)a2);
}

void boost::archive::save_access::save_primitive<boost::archive::text_oarchive,double>(boost::archive::detail::basic_oarchive *a1)
{
}

uint64_t boost::archive::basic_text_oprimitive<std::ostream>::save_impl<double>(uint64_t **a1, unint64_t *a2, __n128 a3)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  uint64_t v4 = *v3;
  BOOL v5 = (char *)v3 + *(void *)(*v3 - 24);
  if ((v5[32] & 5) != 0)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v7, 13, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v7);
  }
  *((void *)v5 + 2) = 17;
  *(_DWORD *)((char *)v3 + *(void *)(v4 - 24) + 8) = *(_DWORD *)((unsigned char *)v3 + *(void *)(v4 - 24) + 8) & 0xFFFFFEFB | 0x100;
  a3.n128_u64[0] = *a2;
  return MEMORY[0x270F98790](a3);
}

void sub_258F72C60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
}

void *boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::transform::id>::save_object_data(uint64_t a1, const void *a2)
{
  boost::serialization::smart_cast_impl::reference<boost::archive::text_oarchive &>::polymorphic::cross::cast<boost::archive::detail::basic_oarchive>(a2);
  return (*(void *(**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 40))(&v4, a1);
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::transform::id>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(void *)a1 = &unk_270704470;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::transform::id>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_270704470;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::transform::id>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x25A2D4B50);
}

void *boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::transform::id>>::singleton_wrapper(void *a1)
{
  instance = boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::axis::transform::id>>::get_instance();
  boost::archive::detail::basic_oserializer::basic_oserializer(a1, (uint64_t)instance);
  *a1 = &unk_270704470;
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::transform::id>>::get_is_destroyed(void)::is_destroyed_flag) {
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  }
  return a1;
}

void sub_258F72D7C(_Unwind_Exception *a1)
{
  boost::archive::detail::basic_oserializer::~basic_oserializer(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::transform::id>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::transform::id>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

void boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::transform::id>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::transform::id>::is_polymorphic()
{
  return 0;
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(void *)a1 = &unk_2707044E8;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_2707044E8;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x25A2D4B50);
}

void *boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::singleton_wrapper(void *a1)
{
  instance = boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::get_instance();
  boost::archive::detail::basic_oserializer::basic_oserializer(a1, (uint64_t)instance);
  *a1 = &unk_2707044E8;
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::get_is_destroyed(void)::is_destroyed_flag) {
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  }
  return a1;
}

void sub_258F72EC4(_Unwind_Exception *a1)
{
  boost::archive::detail::basic_oserializer::~basic_oserializer(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

void boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>::is_polymorphic()
{
  return 0;
}

void boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>::save_object_data(uint64_t a1, const void *a2, unint64_t a3)
{
  BOOL v5 = (boost::archive::detail::basic_oarchive_impl **)boost::serialization::smart_cast_impl::reference<boost::archive::text_oarchive &>::polymorphic::cross::cast<boost::archive::detail::basic_oarchive>(a2);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 40))(&v6, a1);
  boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>::serialize<boost::archive::text_oarchive>(a3, v5);
}

void boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>::serialize<boost::archive::text_oarchive>(unint64_t a1, boost::archive::detail::basic_oarchive_impl **a2)
{
  instance = (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<double>>>::get_instance();
  boost::archive::detail::basic_oarchive::save_object(a2, a1, instance);
  boost::archive::detail::basic_oarchive::end_preamble((boost::archive::detail::basic_oarchive *)a2);
  boost::archive::text_oarchive_impl<boost::archive::text_oarchive>::save();
}

void boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<double>>::save_object_data(uint64_t a1, const void *a2)
{
  uint64_t v3 = (boost::archive::detail::basic_oarchive *)boost::serialization::smart_cast_impl::reference<boost::archive::text_oarchive &>::polymorphic::cross::cast<boost::archive::detail::basic_oarchive>(a2);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 40))(&v4, a1);
  boost::serialization::free_saver<boost::archive::text_oarchive,std::vector<double>>::invoke(v3);
}

void boost::serialization::free_saver<boost::archive::text_oarchive,std::vector<double>>::invoke(boost::archive::detail::basic_oarchive *a1)
{
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<double>>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(void *)a1 = &unk_270704560;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<double>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_270704560;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<double>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x25A2D4B50);
}

void *boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<double>>>::singleton_wrapper(void *a1)
{
  instance = boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<double>>>::get_instance();
  boost::archive::detail::basic_oserializer::basic_oserializer(a1, (uint64_t)instance);
  *a1 = &unk_270704560;
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<double>>>::get_is_destroyed(void)::is_destroyed_flag) {
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  }
  return a1;
}

void sub_258F731E8(_Unwind_Exception *a1)
{
  boost::archive::detail::basic_oserializer::~basic_oserializer(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<double>>::class_info()
{
  return 0;
}

BOOL boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<double>>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

void boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<double>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<double>>::is_polymorphic()
{
  return 0;
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(void *)a1 = &unk_2707045D8;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_2707045D8;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x25A2D4B50);
}

void *boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::singleton_wrapper(void *a1)
{
  instance = boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::get_instance();
  boost::archive::detail::basic_oserializer::basic_oserializer(a1, (uint64_t)instance);
  *a1 = &unk_2707045D8;
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::get_is_destroyed(void)::is_destroyed_flag) {
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  }
  return a1;
}

void sub_258F73330(_Unwind_Exception *a1)
{
  boost::archive::detail::basic_oserializer::~basic_oserializer(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

void boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>::is_polymorphic()
{
  return 0;
}

void boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::save_object_data(uint64_t a1, const void *a2, uint64_t a3)
{
  BOOL v5 = (boost::archive::detail::basic_oarchive *)boost::serialization::smart_cast_impl::reference<boost::archive::text_oarchive &>::polymorphic::cross::cast<boost::archive::detail::basic_oarchive>(a2);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 40))(&v6, a1);
  boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>::serialize<boost::archive::text_oarchive>(a3, v5);
}

void boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>::serialize<boost::archive::text_oarchive>(uint64_t a1, boost::archive::detail::basic_oarchive *a2)
{
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(void *)a1 = &unk_270704650;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_270704650;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x25A2D4B50);
}

void *boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::singleton_wrapper(void *a1)
{
  instance = boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::get_instance();
  boost::archive::detail::basic_oserializer::basic_oserializer(a1, (uint64_t)instance);
  *a1 = &unk_270704650;
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::get_is_destroyed(void)::is_destroyed_flag) {
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  }
  return a1;
}

void sub_258F7355C(_Unwind_Exception *a1)
{
  boost::archive::detail::basic_oserializer::~basic_oserializer(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

void boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::is_polymorphic()
{
  return 0;
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(void *)a1 = &unk_2707046C8;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_2707046C8;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x25A2D4B50);
}

void *boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::singleton_wrapper(void *a1)
{
  instance = boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_instance();
  boost::archive::detail::basic_oserializer::basic_oserializer(a1, (uint64_t)instance);
  *a1 = &unk_2707046C8;
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_is_destroyed(void)::is_destroyed_flag) {
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  }
  return a1;
}

void sub_258F736A4(_Unwind_Exception *a1)
{
  boost::archive::detail::basic_oserializer::~basic_oserializer(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::class_info()
{
  return 1;
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::tracking()
{
  return 1;
}

void boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::is_polymorphic()
{
  return 0;
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(void *)a1 = &unk_270704740;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_270704740;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x25A2D4B50);
}

void *boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::singleton_wrapper(void *a1)
{
  instance = boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_instance();
  boost::archive::detail::basic_oserializer::basic_oserializer(a1, (uint64_t)instance);
  *a1 = &unk_270704740;
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_is_destroyed(void)::is_destroyed_flag) {
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  }
  return a1;
}

void sub_258F737E4(_Unwind_Exception *a1)
{
  boost::archive::detail::basic_oserializer::~basic_oserializer(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

void boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::is_polymorphic()
{
  return 0;
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(void *)a1 = &unk_2707047B8;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_2707047B8;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x25A2D4B50);
}

void *boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::singleton_wrapper(void *a1)
{
  instance = boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::get_instance();
  boost::archive::detail::basic_oserializer::basic_oserializer(a1, (uint64_t)instance);
  *a1 = &unk_2707047B8;
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::get_is_destroyed(void)::is_destroyed_flag) {
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  }
  return a1;
}

void sub_258F7392C(_Unwind_Exception *a1)
{
  boost::archive::detail::basic_oserializer::~basic_oserializer(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

void boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::is_polymorphic()
{
  return 0;
}

void boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::unlimited_storage<std::allocator<char>>>::save_object_data(uint64_t a1, const void *a2, uint64_t a3)
{
  BOOL v5 = (boost::archive::detail::basic_oarchive *)boost::serialization::smart_cast_impl::reference<boost::archive::text_oarchive &>::polymorphic::cross::cast<boost::archive::detail::basic_oarchive>(a2);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 40))(&v6, a1);
  boost::histogram::unlimited_storage<std::allocator<char>>::serialize<boost::archive::text_oarchive>(a3, v5);
}

void boost::histogram::unlimited_storage<std::allocator<char>>::serialize<boost::archive::text_oarchive>(uint64_t a1, boost::archive::detail::basic_oarchive *a2)
{
}

unint64_t *boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::apply<void boost::histogram::unlimited_storage<std::allocator<char>>::serialize<boost::archive::text_oarchive>(boost::archive::text_oarchive &,unsigned int)::{lambda(boost::archive::text_oarchive*)#2}>(unint64_t *result, boost::archive::detail::basic_oarchive **a2)
{
  switch(*((unsigned char *)result + 16))
  {
    case 0:
      if (*((void *)*a2 + 1)) {
        boost::archive::save_access::save_primitive<boost::archive::text_oarchive,unsigned char>(a2[1]);
      }
      return result;
    case 1:
      if (*((void *)*a2 + 1)) {
        boost::archive::save_access::save_primitive<boost::archive::text_oarchive,unsigned short>(a2[1]);
      }
      return result;
    case 2:
      if (*((void *)*a2 + 1)) {
        boost::archive::save_access::save_primitive<boost::archive::text_oarchive,unsigned int>(a2[1]);
      }
      return result;
    case 3:
      if (*((void *)*a2 + 1)) {
        boost::archive::save_access::save_primitive<boost::archive::text_oarchive,unsigned long long>(a2[1]);
      }
      return result;
    case 4:
      uint64_t v3 = *a2;
      unint64_t v2 = (boost::archive::detail::basic_oarchive_impl **)a2[1];
      unint64_t v4 = *((void *)v3 + 3);
      unint64_t v5 = *((void *)v3 + 1);
      v6[0] = v4;
      v6[1] = v5;
      uint64_t result = boost::serialization::array_wrapper<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>::serialize_optimized<boost::archive::text_oarchive>(v6, v2);
      break;
    default:
      if (*((void *)*a2 + 1)) {
        boost::archive::save_access::save_primitive<boost::archive::text_oarchive,double>(a2[1]);
      }
      return result;
  }
  return result;
}

void boost::archive::save_access::save_primitive<boost::archive::text_oarchive,char>(boost::archive::detail::basic_oarchive *a1)
{
}

uint64_t boost::archive::basic_text_oprimitive<std::ostream>::save_impl<short>(void *a1)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  if ((*(unsigned char *)(*a1 + *(void *)(*(void *)*a1 - 24) + 32) & 5) != 0)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v2, 13, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v2);
  }
  return MEMORY[0x270F987C8]();
}

void sub_258F73D10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
}

void boost::archive::save_access::save_primitive<boost::archive::text_oarchive,unsigned long>(boost::archive::detail::basic_oarchive *a1)
{
}

uint64_t boost::archive::basic_text_oprimitive<std::ostream>::save_impl<unsigned long>(void *a1)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  if ((*(unsigned char *)(*a1 + *(void *)(*(void *)*a1 - 24) + 32) & 5) != 0)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v2, 13, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v2);
  }
  return MEMORY[0x270F987C0]();
}

void sub_258F73E1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
}

void boost::archive::save_access::save_primitive<boost::archive::text_oarchive,unsigned char>(boost::archive::detail::basic_oarchive *a1)
{
}

uint64_t boost::archive::basic_text_oprimitive<std::ostream>::save_impl<unsigned short>(void *a1)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  if ((*(unsigned char *)(*a1 + *(void *)(*(void *)*a1 - 24) + 32) & 5) != 0)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v2, 13, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v2);
  }
  return MEMORY[0x270F987D0]();
}

void sub_258F73F30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
}

void boost::archive::save_access::save_primitive<boost::archive::text_oarchive,unsigned short>(boost::archive::detail::basic_oarchive *a1)
{
}

void boost::archive::save_access::save_primitive<boost::archive::text_oarchive,unsigned int>(boost::archive::detail::basic_oarchive *a1)
{
}

void boost::archive::save_access::save_primitive<boost::archive::text_oarchive,unsigned long long>(boost::archive::detail::basic_oarchive *a1)
{
}

uint64_t boost::archive::basic_text_oprimitive<std::ostream>::save_impl<unsigned long long>(void *a1)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  if ((*(unsigned char *)(*a1 + *(void *)(*(void *)*a1 - 24) + 32) & 5) != 0)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v2, 13, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v2);
  }
  return MEMORY[0x270F987E0]();
}

void sub_258F740CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
}

unint64_t *boost::serialization::array_wrapper<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>::serialize_optimized<boost::archive::text_oarchive>(unint64_t *result, boost::archive::detail::basic_oarchive_impl **a2)
{
  unint64_t v2 = result[1];
  if (v2)
  {
    unint64_t v4 = *result;
    do
    {
      --v2;
      instance = (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::get_instance();
      uint64_t result = (unint64_t *)boost::archive::detail::basic_oarchive::save_object(a2, v4, instance);
      v4 += 24;
    }
    while (v2);
  }
  return result;
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>::save_object_data(uint64_t a1, const void *a2, unint64_t a3)
{
  unint64_t v5 = (boost::archive::detail::basic_oarchive_impl **)boost::serialization::smart_cast_impl::reference<boost::archive::text_oarchive &>::polymorphic::cross::cast<boost::archive::detail::basic_oarchive>(a2);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 40))(&v8, a1);
  instance = (const boost::archive::detail::basic_oserializer *)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<unsigned long long>>>::get_instance();
  return boost::archive::detail::basic_oarchive::save_object(v5, a3, instance);
}

void boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<unsigned long long>>::save_object_data(uint64_t a1, const void *a2)
{
  uint64_t v3 = (boost::archive::detail::basic_oarchive *)boost::serialization::smart_cast_impl::reference<boost::archive::text_oarchive &>::polymorphic::cross::cast<boost::archive::detail::basic_oarchive>(a2);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 40))(&v4, a1);
  boost::serialization::free_saver<boost::archive::text_oarchive,std::vector<unsigned long long>>::invoke(v3);
}

void boost::serialization::free_saver<boost::archive::text_oarchive,std::vector<unsigned long long>>::invoke(boost::archive::detail::basic_oarchive *a1)
{
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<unsigned long long>>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(void *)a1 = &unk_270704830;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<unsigned long long>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_270704830;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<unsigned long long>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x25A2D4B50);
}

void *boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<unsigned long long>>>::singleton_wrapper(void *a1)
{
  instance = boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<unsigned long long>>>::get_instance();
  boost::archive::detail::basic_oserializer::basic_oserializer(a1, (uint64_t)instance);
  *a1 = &unk_270704830;
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<unsigned long long>>>::get_is_destroyed(void)::is_destroyed_flag) {
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  }
  return a1;
}

void sub_258F74368(_Unwind_Exception *a1)
{
  boost::archive::detail::basic_oserializer::~basic_oserializer(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<unsigned long long>>::class_info()
{
  return 0;
}

BOOL boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<unsigned long long>>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

void boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<unsigned long long>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<unsigned long long>>::is_polymorphic()
{
  return 0;
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(void *)a1 = &unk_2707048A8;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_2707048A8;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x25A2D4B50);
}

void *boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::singleton_wrapper(void *a1)
{
  instance = boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::get_instance();
  boost::archive::detail::basic_oserializer::basic_oserializer(a1, (uint64_t)instance);
  *a1 = &unk_2707048A8;
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::get_is_destroyed(void)::is_destroyed_flag) {
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  }
  return a1;
}

void sub_258F744B0(_Unwind_Exception *a1)
{
  boost::archive::detail::basic_oserializer::~basic_oserializer(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

void boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>::is_polymorphic()
{
  return 0;
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::unlimited_storage<std::allocator<char>>>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(void *)a1 = &unk_270704920;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::unlimited_storage<std::allocator<char>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_270704920;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::unlimited_storage<std::allocator<char>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x25A2D4B50);
}

void *boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::unlimited_storage<std::allocator<char>>>>::singleton_wrapper(void *a1)
{
  instance = boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::unlimited_storage<std::allocator<char>>>>::get_instance();
  boost::archive::detail::basic_oserializer::basic_oserializer(a1, (uint64_t)instance);
  *a1 = &unk_270704920;
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::unlimited_storage<std::allocator<char>>>>::get_is_destroyed(void)::is_destroyed_flag) {
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  }
  return a1;
}

void sub_258F745F8(_Unwind_Exception *a1)
{
  boost::archive::detail::basic_oserializer::~basic_oserializer(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::unlimited_storage<std::allocator<char>>>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::unlimited_storage<std::allocator<char>>>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

void boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::unlimited_storage<std::allocator<char>>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::unlimited_storage<std::allocator<char>>>::is_polymorphic()
{
  return 0;
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(void *)a1 = &unk_270704998;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_270704998;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x25A2D4B50);
}

void *boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::singleton_wrapper(void *a1)
{
  instance = boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::get_instance();
  boost::archive::detail::basic_oserializer::basic_oserializer(a1, (uint64_t)instance);
  *a1 = &unk_270704998;
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::get_is_destroyed(void)::is_destroyed_flag) {
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  }
  return a1;
}

void sub_258F74740(_Unwind_Exception *a1)
{
  boost::archive::detail::basic_oserializer::~basic_oserializer(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

void boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>::is_polymorphic()
{
  return 0;
}

void boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<pps::AxisEnum>>::save_object_data(uint64_t a1, const void *a2)
{
  uint64_t v3 = (boost::archive::detail::basic_oarchive *)boost::serialization::smart_cast_impl::reference<boost::archive::text_oarchive &>::polymorphic::cross::cast<boost::archive::detail::basic_oarchive>(a2);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 40))(&v4, a1);
  boost::serialization::free_saver<boost::archive::text_oarchive,std::vector<pps::AxisEnum>>::invoke(v3);
}

void boost::serialization::free_saver<boost::archive::text_oarchive,std::vector<pps::AxisEnum>>::invoke(boost::archive::detail::basic_oarchive *a1)
{
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<pps::AxisEnum>>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(void *)a1 = &unk_270704A10;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<pps::AxisEnum>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_270704A10;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<pps::AxisEnum>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x25A2D4B50);
}

void *boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<pps::AxisEnum>>>::singleton_wrapper(void *a1)
{
  instance = boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<pps::AxisEnum>>>::get_instance();
  boost::archive::detail::basic_oserializer::basic_oserializer(a1, (uint64_t)instance);
  *a1 = &unk_270704A10;
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<pps::AxisEnum>>>::get_is_destroyed(void)::is_destroyed_flag) {
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  }
  return a1;
}

void sub_258F74984(_Unwind_Exception *a1)
{
  boost::archive::detail::basic_oserializer::~basic_oserializer(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<pps::AxisEnum>>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<pps::AxisEnum>>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

void boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<pps::AxisEnum>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<pps::AxisEnum>>::is_polymorphic()
{
  return 0;
}

void boost::archive::detail::oserializer<boost::archive::text_oarchive,std::map<int,std::vector<std::string>>>::save_object_data(uint64_t a1, const void *a2)
{
  uint64_t v3 = (boost::archive::detail::basic_oarchive *)boost::serialization::smart_cast_impl::reference<boost::archive::text_oarchive &>::polymorphic::cross::cast<boost::archive::detail::basic_oarchive>(a2);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 40))(&v4, a1);
  boost::serialization::free_saver<boost::archive::text_oarchive,std::map<int,std::vector<std::string>>>::invoke(v3);
}

void boost::serialization::free_saver<boost::archive::text_oarchive,std::map<int,std::vector<std::string>>>::invoke(boost::archive::detail::basic_oarchive *a1)
{
}

void boost::archive::detail::oserializer<boost::archive::text_oarchive,std::pair<int const,std::vector<std::string>>>::save_object_data(uint64_t a1, const void *a2)
{
  uint64_t v3 = (boost::archive::detail::basic_oarchive *)boost::serialization::smart_cast_impl::reference<boost::archive::text_oarchive &>::polymorphic::cross::cast<boost::archive::detail::basic_oarchive>(a2);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 40))(&v4, a1);
  boost::archive::save_access::save_primitive<boost::archive::text_oarchive,int>(v3);
}

void boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::string>>::save_object_data(uint64_t a1, const void *a2)
{
  uint64_t v3 = (boost::archive::detail::basic_oarchive *)boost::serialization::smart_cast_impl::reference<boost::archive::text_oarchive &>::polymorphic::cross::cast<boost::archive::detail::basic_oarchive>(a2);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 40))(&v4, a1);
  boost::serialization::free_saver<boost::archive::text_oarchive,std::vector<std::string>>::invoke(v3);
}

void boost::serialization::free_saver<boost::archive::text_oarchive,std::vector<std::string>>::invoke(boost::archive::detail::basic_oarchive *a1)
{
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::string>>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(void *)a1 = &unk_270704A88;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::string>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_270704A88;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::string>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x25A2D4B50);
}

void *boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::string>>>::singleton_wrapper(void *a1)
{
  instance = boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<std::string>>>::get_instance();
  boost::archive::detail::basic_oserializer::basic_oserializer(a1, (uint64_t)instance);
  *a1 = &unk_270704A88;
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::string>>>::get_is_destroyed(void)::is_destroyed_flag) {
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  }
  return a1;
}

void sub_258F74DC0(_Unwind_Exception *a1)
{
  boost::archive::detail::basic_oserializer::~basic_oserializer(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::string>>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::string>>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

void boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::string>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::string>>::is_polymorphic()
{
  return 0;
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::pair<int const,std::vector<std::string>>>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(void *)a1 = &unk_270704B00;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::pair<int const,std::vector<std::string>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_270704B00;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::pair<int const,std::vector<std::string>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x25A2D4B50);
}

void *boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::pair<int const,std::vector<std::string>>>>::singleton_wrapper(void *a1)
{
  instance = boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::pair<int const,std::vector<std::string>>>>::get_instance();
  boost::archive::detail::basic_oserializer::basic_oserializer(a1, (uint64_t)instance);
  *a1 = &unk_270704B00;
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::pair<int const,std::vector<std::string>>>>::get_is_destroyed(void)::is_destroyed_flag) {
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  }
  return a1;
}

void sub_258F74F08(_Unwind_Exception *a1)
{
  boost::archive::detail::basic_oserializer::~basic_oserializer(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,std::pair<int const,std::vector<std::string>>>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::oserializer<boost::archive::text_oarchive,std::pair<int const,std::vector<std::string>>>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

void boost::archive::detail::oserializer<boost::archive::text_oarchive,std::pair<int const,std::vector<std::string>>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,std::pair<int const,std::vector<std::string>>>::is_polymorphic()
{
  return 0;
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::map<int,std::vector<std::string>>>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(void *)a1 = &unk_270704B78;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::map<int,std::vector<std::string>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_270704B78;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::map<int,std::vector<std::string>>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x25A2D4B50);
}

void *boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::map<int,std::vector<std::string>>>>::singleton_wrapper(void *a1)
{
  instance = boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::map<int,std::vector<std::string>>>>::get_instance();
  boost::archive::detail::basic_oserializer::basic_oserializer(a1, (uint64_t)instance);
  *a1 = &unk_270704B78;
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::map<int,std::vector<std::string>>>>::get_is_destroyed(void)::is_destroyed_flag) {
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  }
  return a1;
}

void sub_258F75050(_Unwind_Exception *a1)
{
  boost::archive::detail::basic_oserializer::~basic_oserializer(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,std::map<int,std::vector<std::string>>>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::oserializer<boost::archive::text_oarchive,std::map<int,std::vector<std::string>>>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

void boost::archive::detail::oserializer<boost::archive::text_oarchive,std::map<int,std::vector<std::string>>>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,std::map<int,std::vector<std::string>>>::is_polymorphic()
{
  return 0;
}

void boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,pps::Histogram_Internal>>::~singleton_wrapper(boost::archive::detail::basic_oserializer *a1)
{
  *(void *)a1 = &unk_270704BF0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,pps::Histogram_Internal>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_270704BF0;
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,pps::Histogram_Internal>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  boost::archive::detail::basic_oserializer::~basic_oserializer(a1);
  JUMPOUT(0x25A2D4B50);
}

void *boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,pps::Histogram_Internal>>::singleton_wrapper(void *a1)
{
  instance = boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance();
  boost::archive::detail::basic_oserializer::basic_oserializer(a1, (uint64_t)instance);
  *a1 = &unk_270704BF0;
  if (boost::serialization::detail::singleton_wrapper<boost::archive::detail::oserializer<boost::archive::text_oarchive,pps::Histogram_Internal>>::get_is_destroyed(void)::is_destroyed_flag) {
    __assert_rtn("singleton_wrapper", "singleton.hpp", 148, "! is_destroyed()");
  }
  return a1;
}

void sub_258F75198(_Unwind_Exception *a1)
{
  boost::archive::detail::basic_oserializer::~basic_oserializer(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,pps::Histogram_Internal>::class_info()
{
  return 1;
}

BOOL boost::archive::detail::oserializer<boost::archive::text_oarchive,pps::Histogram_Internal>::tracking(uint64_t a1)
{
  return *(void *)(a1 + 16) != 0;
}

void boost::archive::detail::oserializer<boost::archive::text_oarchive,pps::Histogram_Internal>::version(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t boost::archive::detail::oserializer<boost::archive::text_oarchive,pps::Histogram_Internal>::is_polymorphic()
{
  return 1;
}

void std::vector<pps::AxisConfig_Internal>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 80;
        std::allocator<pps::AxisConfig_Internal>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<pps::AxisConfig_Internal>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 56);
  if (v3)
  {
    *(void *)(a2 + 64) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void **)(a2 + 32);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  unint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::string>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

uint64_t std::vector<pps::AxisConfig_Internal>::__emplace_back_slow_path<pps::AxisConfig_Internal&>(uint64_t *a1, long long *a2)
{
  unint64_t v3 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x333333333333333) {
    std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__throw_length_error[abi:ne180100]();
  }
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v4) {
    unint64_t v4 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999) {
    unint64_t v6 = 0x333333333333333;
  }
  else {
    unint64_t v6 = v4;
  }
  size_t v14 = a1 + 2;
  if (v6) {
    int v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pps::AxisConfig_Internal>>((uint64_t)(a1 + 2), v6);
  }
  else {
    int v7 = 0;
  }
  unint64_t v10 = v7;
  unint64_t v11 = &v7[80 * v3];
  size_t v13 = &v7[80 * v6];
  std::allocator<pps::AxisConfig_Internal>::construct[abi:ne180100]<pps::AxisConfig_Internal,pps::AxisConfig_Internal&>((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  uint64_t v12 = v11 + 80;
  std::vector<pps::AxisConfig_Internal>::__swap_out_circular_buffer(a1, &v10);
  uint64_t v8 = a1[1];
  std::__split_buffer<pps::AxisConfig_Internal>::~__split_buffer(&v10);
  return v8;
}

void sub_258F754B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<pps::AxisConfig_Internal>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void *std::allocator<pps::AxisConfig_Internal>::construct[abi:ne180100]<pps::AxisConfig_Internal,pps::AxisConfig_Internal&>(uint64_t a1, uint64_t a2, long long *a3)
{
  unint64_t v4 = (void *)a2;
  long long v5 = *a3;
  *(_OWORD *)(a2 + 9) = *(long long *)((char *)a3 + 9);
  *(_OWORD *)a2 = v5;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a2 + 32), *((long long **)a3 + 4), *((long long **)a3 + 5), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a3 + 5) - *((void *)a3 + 4)) >> 3));
  v4[7] = 0;
  v4[8] = 0;
  v4 += 7;
  v4[2] = 0;
  return std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(v4, *((const void **)a3 + 7), *((void *)a3 + 8), (uint64_t)(*((void *)a3 + 8) - *((void *)a3 + 7)) >> 3);
}

void sub_258F75554(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<pps::AxisConfig_Internal>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<pps::AxisConfig_Internal>,std::reverse_iterator<pps::AxisConfig_Internal*>,std::reverse_iterator<pps::AxisConfig_Internal*>,std::reverse_iterator<pps::AxisConfig_Internal*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<pps::AxisConfig_Internal>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x333333333333334) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(80 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<pps::AxisConfig_Internal>,std::reverse_iterator<pps::AxisConfig_Internal*>,std::reverse_iterator<pps::AxisConfig_Internal*>,std::reverse_iterator<pps::AxisConfig_Internal*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 80);
      *(_OWORD *)(v7 - 71) = *(_OWORD *)(a3 - 71);
      *(_OWORD *)(v7 - 80) = v8;
      *(void *)(v7 - 40) = 0;
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - 48) = 0;
      *(_OWORD *)(v7 - 48) = *(_OWORD *)(a3 - 48);
      *(void *)(v7 - 32) = *(void *)(a3 - 32);
      *(void *)(a3 - 48) = 0;
      *(void *)(a3 - 40) = 0;
      *(void *)(a3 - 32) = 0;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 - 24);
      *(void *)(v7 - 8) = *(void *)(a3 - 8);
      *(void *)(a3 - 24) = 0;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 80;
      *((void *)&v14 + 1) -= 80;
      a3 -= 80;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<pps::AxisConfig_Internal>,std::reverse_iterator<pps::AxisConfig_Internal*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<pps::AxisConfig_Internal>,std::reverse_iterator<pps::AxisConfig_Internal*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<pps::AxisConfig_Internal>,std::reverse_iterator<pps::AxisConfig_Internal*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<pps::AxisConfig_Internal>,std::reverse_iterator<pps::AxisConfig_Internal*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<pps::AxisConfig_Internal>::destroy[abi:ne180100](v3, v1);
      v1 += 80;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<pps::AxisConfig_Internal>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<pps::AxisConfig_Internal>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 80;
    std::allocator<pps::AxisConfig_Internal>::destroy[abi:ne180100](v4, i - 80);
  }
}

void *std::__function::__value_func<void ()(NSMutableArray *)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x25A2D4B50);
}

void sub_258F75B30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v2 == v3) {
    return 1;
  }
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3)) {
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  }
  return 0;
}

void *std::__function::__value_func<void ()(NSMutableArray *)>::swap[abi:ne180100](void *result, void *a2)
{
  uint64_t v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_258F75E58(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(std::string *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_258F75ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::string>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  uint64_t v4 = this;
  unint64_t v11 = this;
  char v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        uint64_t v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      uint64_t v6 = (long long *)((char *)v6 + 24);
      char v12 = ++v4;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_258F75FEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0) {
      operator delete(*(void **)(v1 - 24));
    }
    v1 -= 24;
  }
}

void OUTLINED_FUNCTION_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void OUTLINED_FUNCTION_2(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

uint64_t OUTLINED_FUNCTION_4(uint64_t a1, uint64_t a2)
{
  return a2;
}

void __cxx_global_var_init()
{
  {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::m_instance = (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance();
  }
}

void __cxx_global_var_init_82()
{
  {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::m_instance = (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::get_instance();
  }
}

void __cxx_global_var_init_83()
{
  {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::m_instance = (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::get_instance();
  }
}

void __cxx_global_var_init_84()
{
  {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::m_instance = (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_instance();
  }
}

void __cxx_global_var_init_85()
{
  {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::m_instance = (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_instance();
  }
}

void __cxx_global_var_init_86()
{
  {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::m_instance = (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::get_instance();
  }
}

void __cxx_global_var_init_87()
{
  {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::axis::transform::id>>::m_instance = (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::axis::transform::id>>::get_instance();
  }
}

void __cxx_global_var_init_88()
{
  {
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::transform::id>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::transform::id>>::get_instance();
  }
}

void __cxx_global_var_init_89()
{
  {
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::get_instance();
  }
}

void __cxx_global_var_init_90()
{
  {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::m_instance = (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::get_instance();
  }
}

void __cxx_global_var_init_91()
{
  {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<double>>>::m_instance = (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<double>>>::get_instance();
  }
}

void __cxx_global_var_init_92()
{
  {
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<double>>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<double>>>::get_instance();
  }
}

void __cxx_global_var_init_93()
{
  {
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::get_instance();
  }
}

void __cxx_global_var_init_94()
{
  {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::m_instance = (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::get_instance();
  }
}

void __cxx_global_var_init_95()
{
  {
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::get_instance();
  }
}

void __cxx_global_var_init_96()
{
  {
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_instance();
  }
}

void __cxx_global_var_init_97()
{
  {
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_instance();
  }
}

void __cxx_global_var_init_98()
{
  {
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::get_instance();
  }
}

void __cxx_global_var_init_99()
{
  {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::unlimited_storage<std::allocator<char>>>>::m_instance = (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::unlimited_storage<std::allocator<char>>>>::get_instance();
  }
}

void __cxx_global_var_init_100()
{
  {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::m_instance = (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::get_instance();
  }
}

void __cxx_global_var_init_101()
{
  {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<unsigned long long>>>::m_instance = (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<unsigned long long>>>::get_instance();
  }
}

void __cxx_global_var_init_102()
{
  {
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<unsigned long long>>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<unsigned long long>>>::get_instance();
  }
}

void __cxx_global_var_init_103()
{
  {
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::get_instance();
  }
}

void __cxx_global_var_init_104()
{
  {
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::unlimited_storage<std::allocator<char>>>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::unlimited_storage<std::allocator<char>>>>::get_instance();
  }
}

void __cxx_global_var_init_105()
{
  {
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::get_instance();
  }
}

void __cxx_global_var_init_106()
{
  {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<pps::AxisEnum>>>::m_instance = (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<pps::AxisEnum>>>::get_instance();
  }
}

void __cxx_global_var_init_107()
{
  {
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<pps::AxisEnum>>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<pps::AxisEnum>>>::get_instance();
  }
}

void __cxx_global_var_init_108()
{
  {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::map<int,std::vector<std::string>>>>::m_instance = (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::map<int,std::vector<std::string>>>>::get_instance();
  }
}

void __cxx_global_var_init_109()
{
  {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::pair<int const,std::vector<std::string>>>>::m_instance = (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::pair<int const,std::vector<std::string>>>>::get_instance();
  }
}

void __cxx_global_var_init_110()
{
  {
    boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<std::string>>>::m_instance = (uint64_t)boost::serialization::singleton<boost::serialization::extended_type_info_typeid<std::vector<std::string>>>::get_instance();
  }
}

void __cxx_global_var_init_111()
{
  {
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::string>>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::vector<std::string>>>::get_instance();
  }
}

void __cxx_global_var_init_112()
{
  {
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::pair<int const,std::vector<std::string>>>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::pair<int const,std::vector<std::string>>>>::get_instance();
  }
}

void __cxx_global_var_init_113()
{
  {
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::map<int,std::vector<std::string>>>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,std::map<int,std::vector<std::string>>>>::get_instance();
  }
}

void __cxx_global_var_init_114()
{
  {
    boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,pps::Histogram_Internal>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::iserializer<boost::archive::text_iarchive,pps::Histogram_Internal>>::get_instance();
  }
}

void __cxx_global_var_init_115()
{
  {
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::transform::id>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::transform::id>>::get_instance();
  }
}

void __cxx_global_var_init_116()
{
  {
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>::get_instance();
  }
}

void __cxx_global_var_init_117()
{
  {
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<double>>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<double>>>::get_instance();
  }
}

void __cxx_global_var_init_118()
{
  {
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>::get_instance();
  }
}

void __cxx_global_var_init_119()
{
  {
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::get_instance();
  }
}

void __cxx_global_var_init_120()
{
  {
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_instance();
  }
}

void __cxx_global_var_init_121()
{
  {
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::get_instance();
  }
}

void __cxx_global_var_init_122()
{
  {
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>>::get_instance();
  }
}

void __cxx_global_var_init_123()
{
  {
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<unsigned long long>>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<unsigned long long>>>::get_instance();
  }
}

void __cxx_global_var_init_124()
{
  {
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>>::get_instance();
  }
}

void __cxx_global_var_init_125()
{
  {
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::unlimited_storage<std::allocator<char>>>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::unlimited_storage<std::allocator<char>>>>::get_instance();
  }
}

void __cxx_global_var_init_126()
{
  {
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>>>::get_instance();
  }
}

void __cxx_global_var_init_127()
{
  {
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<pps::AxisEnum>>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<pps::AxisEnum>>>::get_instance();
  }
}

void __cxx_global_var_init_128()
{
  {
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::string>>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::vector<std::string>>>::get_instance();
  }
}

void __cxx_global_var_init_129()
{
  {
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::pair<int const,std::vector<std::string>>>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::pair<int const,std::vector<std::string>>>>::get_instance();
  }
}

void __cxx_global_var_init_130()
{
  {
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::map<int,std::vector<std::string>>>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,std::map<int,std::vector<std::string>>>>::get_instance();
  }
}

void __cxx_global_var_init_131()
{
  {
    boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,pps::Histogram_Internal>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::oserializer<boost::archive::text_oarchive,pps::Histogram_Internal>>::get_instance();
  }
}

id PPSReaderLog()
{
  if (PPSReaderLog_onceToken != -1) {
    dispatch_once(&PPSReaderLog_onceToken, &__block_literal_global_2);
  }
  v0 = (void *)PPSReaderLog___logObj;
  return v0;
}

uint64_t __PPSReaderLog_block_invoke()
{
  PPSReaderLog___logObj = (uint64_t)os_log_create("com.apple.PerfPowerServicesReader", "");
  return MEMORY[0x270F9A758]();
}

id PPSFetchTimeSeries(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a1;
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  unint64_t v11 = (void *)MEMORY[0x25A2D4DD0]();
  char v12 = [[PPSTimeSeriesRequest alloc] initWithMetrics:v9 predicate:v8 timeFilter:v10];
  uint64_t v15 = 0;
  long long v13 = [v7 dataForRequest:v12 withError:&v15];

  return v13;
}

void sub_258F7AB80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F7AC10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)PPSSQLiteDatabase;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_258F7AD00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id lastErrorForDatabase(sqlite3 *a1, int a2)
{
  uint64_t v2 = 0;
  v11[1] = *MEMORY[0x263EF8340];
  if (a1 && a2)
  {
    uint64_t v3 = sqlite3_errmsg(a1);
    uint64_t v4 = (void *)MEMORY[0x263F087E8];
    uint64_t v5 = [NSString stringWithUTF8String:"com.apple.PerfPowerServicesReader.SQLite"];
    uint64_t v10 = *MEMORY[0x263F08320];
    if (v3) {
      uint64_t v6 = v3;
    }
    else {
      uint64_t v6 = "";
    }
    id v7 = [NSString stringWithUTF8String:v6];
    v11[0] = v7;
    id v8 = [NSDictionary dictionaryWithObjects:v11 forKeys:&v10 count:1];
    uint64_t v2 = [v4 errorWithDomain:v5 code:2 userInfo:v8];
  }
  return v2;
}

void sub_258F7AE38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F7B040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_258F7B1E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void PPSSQLiteRow::~PPSSQLiteRow(id *this)
{
}

{
  uint64_t vars8;

  JUMPOUT(0x25A2D4B50);
}

void sub_258F7B3B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__1(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__1(uint64_t a1)
{
}

void sub_258F7B488(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F7B5F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);

  _Unwind_Resume(a1);
}

void sub_258F7B6A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F7B780(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F7B8F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_258F7B9D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F7BA5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_258F7BB78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_258F7BCC4(_Unwind_Exception *a1)
{
}

void sub_258F7C048(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F7C294(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t PPSSQLiteBindFoundationValueToStatement(sqlite3_stmt *a1, int a2, void *a3)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  id v5 = a3;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v6 = [v5 UTF8String];
    if (v6) {
      id v7 = (const char *)v6;
    }
    else {
      id v7 = "";
    }
    sqlite3_bind_text(a1, a2, v7, -1, 0);
    goto LABEL_9;
  }
  if (!v5 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
LABEL_8:
    sqlite3_bind_null(a1, a2);
    goto LABEL_9;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    [v5 timeIntervalSinceReferenceDate];
    sqlite3_bind_double(a1, a2, v9);
    goto LABEL_9;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v10 = [v5 bytes];
    int v11 = [v5 length];
    if (v10) {
      char v12 = (const char *)v10;
    }
    else {
      char v12 = "";
    }
    sqlite3_bind_blob(a1, a2, v12, v11, 0);
  }
  else
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      uint64_t v15 = logHandle();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v17 = (objc_class *)objc_opt_class();
        int v18 = NSStringFromClass(v17);
        v19[0] = 67109634;
        v19[1] = a2;
        __int16 v20 = 2112;
        id v21 = v5;
        __int16 v22 = 2114;
        unint64_t v23 = v18;
        _os_log_debug_impl(&dword_258F16000, v15, OS_LOG_TYPE_DEBUG, "PPSSQLiteBindFoundationValueToStatement: Parameter (index %i) with value '%@' is of unsupported bind type '%{public}@'.", (uint8_t *)v19, 0x1Cu);
      }
      goto LABEL_8;
    }
    id v13 = v5;
    long long v14 = (const char *)[v13 objCType];
    if (!strcmp(v14, "d") || !strcmp(v14, "f"))
    {
      [v13 doubleValue];
      sqlite3_bind_double(a1, a2, v16);
    }
    else
    {
      sqlite3_bind_int64(a1, a2, [v13 longLongValue]);
    }
  }
LABEL_9:

  return (a2 + 1);
}

void sub_258F7C5A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id PPSQLiteFoundationValueForStatementColumn(sqlite3_stmt *a1, int a2)
{
  int v4 = sqlite3_column_type(a1, a2) - 1;
  id v5 = 0;
  switch(v4)
  {
    case 0:
      id v5 = objc_msgSend(objc_alloc(NSNumber), "initWithLongLong:", sqlite3_column_int64(a1, a2));
      break;
    case 1:
      id v5 = objc_msgSend(objc_alloc(NSNumber), "initWithDouble:", sqlite3_column_double(a1, a2));
      break;
    case 2:
      id v5 = objc_msgSend([NSString alloc], "initWithUTF8String:", sqlite3_column_text(a1, a2));
      break;
    case 4:
      break;
    default:
      uint64_t v6 = sqlite3_column_blob(a1, a2);
      id v5 = objc_msgSend(objc_alloc(MEMORY[0x263EFF8F8]), "initWithBytes:length:", v6, sqlite3_column_bytes(a1, a2));
      break;
  }
  return v5;
}

uint64_t ___ZL9logHandlev_block_invoke_0()
{
  logHandle(void)::__logHandle = (uint64_t)os_log_create("com.apple.PerfPowerServicesReader", "sqlite");
  return MEMORY[0x270F9A758]();
}

uint64_t PPSSQLiteRow::PPSSQLiteRow(uint64_t a1, sqlite3_stmt *a2, void *a3)
{
  id v5 = a3;
  *(void *)a1 = &unk_270704DB8;
  *(void *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 20) = sqlite3_column_count(a2);
  *(void *)(a1 + 24) = MEMORY[0x263EFFA78];
  if (v5) {
    PPSSQLiteRow::setColumnNames(a1, v5);
  }

  return a1;
}

void sub_258F7C7D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void PPSSQLiteRow::setColumnNames(uint64_t a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  id v13 = a2;
  uint64_t v3 = objc_opt_new();
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v4 = v13;
  uint64_t v5 = [v4 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v5)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)v15;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v15 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = *(void *)(*((void *)&v14 + 1) + 8 * v8);
        uint64_t v10 = [NSNumber numberWithInt:v6 + v8];
        [v3 setObject:v10 forKeyedSubscript:v9];

        ++v8;
      }
      while (v5 != v8);
      uint64_t v5 = [v4 countByEnumeratingWithState:&v14 objects:v18 count:16];
      uint64_t v6 = (v6 + v8);
    }
    while (v5);
  }

  uint64_t v11 = [v3 copy];
  char v12 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = v11;
}

void sub_258F7C95C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t sqlite3StatementRelease(const __CFAllocator *a1, sqlite3_stmt *pStmt)
{
  return sqlite3_finalize(pStmt);
}

pps::Histogram_Internal *pps::Histogram_Internal::Histogram_Internal(pps::Histogram_Internal *this)
{
  *(void *)this = &unk_2707027F0;
  *((void *)this + 1) = 0;
  uint64_t v2 = (char *)this + 8;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 11) = (char *)this + 96;
  *((unsigned char *)this + 48) = 0;
  *((void *)this + 13) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  uint64_t v3 = std::__allocate_at_least[abi:ne180100]<std::allocator<pps::AxisEnum>>((uint64_t)this + 80, 1uLL);
  id v4 = (char *)*((void *)this + 8);
  uint64_t v5 = (char *)*((void *)this + 9);
  uint64_t v7 = &v3[v6];
  _DWORD *v3 = 0;
  uint64_t v8 = v3 + 1;
  while (v5 != v4)
  {
    int v9 = *((_DWORD *)v5 - 1);
    v5 -= 4;
    *--uint64_t v3 = v9;
  }
  *((void *)this + 8) = v3;
  *((void *)this + 9) = v8;
  *((void *)this + 10) = v7;
  if (v4) {
    operator delete(v4);
  }
  *((void *)this + 9) = v8;
  v11[1] = 0;
  uint64_t v12 = 0;
  v11[0] = 0;
  boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>::regular((uint64_t)&v13, 1, (uint64_t)v11, 0.0, 1.0);
  _ZN5boost9histogram14make_histogramINS0_4axis7regularIdNS_11use_defaultES4_S4_EEJENS0_6detail13requires_axisIS5_vEEEEDaOT_DpOT0_(&v13, (uint64_t)v16);
  boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>::operator=<std::tuple<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>,boost::histogram::unlimited_storage<std::allocator<char>>>((uint64_t)v2, (uint64_t)v16);
  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::destroy((uint64_t)&v19);
  if (v18 < 0) {
    operator delete(__p);
  }
  if (v15 < 0) {
    operator delete(v14);
  }
  if (SHIBYTE(v12) < 0) {
    operator delete(v11[0]);
  }
  return this;
}

void sub_258F7CB38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,char a25)
{
  boost::histogram::histogram<std::tuple<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>,boost::histogram::unlimited_storage<std::allocator<char>>>::~histogram((uint64_t)&a25);
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::destroy(v27, *(char **)(v25 + 96));
  char v29 = *(void **)(v25 + 64);
  if (v29)
  {
    *(void *)(v25 + 72) = v29;
    operator delete(v29);
  }
  boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>::~histogram(v26);
  _Unwind_Resume(a1);
}

void _ZN5boost9histogram14make_histogramINS0_4axis7regularIdNS_11use_defaultES4_S4_EEJENS0_6detail13requires_axisIS5_vEEEEDaOT_DpOT0_(int *a1@<X0>, uint64_t a2@<X8>)
{
  v2[1] = 0;
  char v3 = 0;
  uint64_t v4 = 0;
  _ZN5boost9histogram19make_histogram_withINS0_17unlimited_storageINSt3__19allocatorIcEEEENS0_4axis7regularIdNS_11use_defaultES9_S9_EEJENS0_6detail13requires_axisISA_vEEEEDaOT_OT0_DpOT1_((uint64_t)v2, a1, a2);
  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::destroy((uint64_t)v2);
}

void sub_258F7CBEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>::regular(uint64_t a1, int a2, uint64_t a3, double a4, double a5)
{
  *(_OWORD *)__p = *(_OWORD *)a3;
  uint64_t v8 = *(void *)(a3 + 16);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>::regular(a1, a2, (long long *)__p, a4, a5);
  if (SHIBYTE(v8) < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_258F7CC5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>::operator=<std::tuple<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>,boost::histogram::unlimited_storage<std::allocator<char>>>(uint64_t a1, uint64_t a2)
{
  std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::resize((uint64_t *)a1, 1uLL);
  boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::assign<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>(*(void *)a1, (_DWORD *)a2);
  if (a1 + 24 != a2 + 48)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = *(void *)(a2 + 56);
    *(void *)(a2 + 56) = v4;
    LOBYTE(v4) = *(unsigned char *)(a1 + 40);
    *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 64);
    *(unsigned char *)(a2 + 64) = v4;
    uint64_t v5 = *(void *)(a1 + 48);
    *(void *)(a1 + 48) = *(void *)(a2 + 72);
    *(void *)(a2 + 72) = v5;
  }
  return a1;
}

uint64_t boost::histogram::histogram<std::tuple<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>,boost::histogram::unlimited_storage<std::allocator<char>>>::~histogram(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void **boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>::~histogram(void **a1)
{
  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::destroy((uint64_t)(a1 + 3));
  char v3 = a1;
  std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

pps::Histogram_Internal *pps::Histogram_Internal::Histogram_Internal(pps::Histogram_Internal *this, int a2, double a3, double a4)
{
  *(void *)this = &unk_2707027F0;
  *((void *)this + 1) = 0;
  uint64_t v6 = (char *)this + 8;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 11) = (char *)this + 96;
  *((unsigned char *)this + 48) = 0;
  *((void *)this + 13) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  if (a4 <= a3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "maxRange is less than or equal to minRange");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_2654426D0, MEMORY[0x263F8C080]);
  }
  int v9 = std::__allocate_at_least[abi:ne180100]<std::allocator<pps::AxisEnum>>((uint64_t)this + 80, 1uLL);
  uint64_t v10 = (char *)*((void *)this + 8);
  uint64_t v11 = (char *)*((void *)this + 9);
  int v13 = &v9[v12];
  _DWORD *v9 = 0;
  long long v14 = v9 + 1;
  while (v11 != v10)
  {
    int v15 = *((_DWORD *)v11 - 1);
    v11 -= 4;
    *--int v9 = v15;
  }
  *((void *)this + 8) = v9;
  *((void *)this + 9) = v14;
  *((void *)this + 10) = v13;
  if (v10) {
    operator delete(v10);
  }
  *((void *)this + 9) = v14;
  v18[1] = 0;
  uint64_t v19 = 0;
  v18[0] = 0;
  boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>::regular((uint64_t)&v20, a2, (uint64_t)v18, a3, a4);
  _ZN5boost9histogram14make_histogramINS0_4axis7regularIdNS_11use_defaultES4_S4_EEJENS0_6detail13requires_axisIS5_vEEEEDaOT_DpOT0_(&v20, (uint64_t)v23);
  boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>::operator=<std::tuple<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>,boost::histogram::unlimited_storage<std::allocator<char>>>((uint64_t)v6, (uint64_t)v23);
  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::destroy((uint64_t)&v26);
  if (v25 < 0) {
    operator delete(__p);
  }
  if (v22 < 0) {
    operator delete(v21);
  }
  if (SHIBYTE(v19) < 0) {
    operator delete(v18[0]);
  }
  return this;
}

void sub_258F7CF38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,char a25)
{
  std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::destroy(v27, *(char **)(v25 + 96));
  char v29 = *(void **)(v25 + 64);
  if (v29)
  {
    *(void *)(v25 + 72) = v29;
    operator delete(v29);
  }
  boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>::~histogram(v26);
  _Unwind_Resume(a1);
}

std::logic_error *std::invalid_argument::invalid_argument[abi:ne180100](std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
  return result;
}

uint64_t pps::Histogram_Internal::Histogram_Internal(uint64_t a1, uint64_t *a2)
{
  *(void *)a1 = &unk_2707027F0;
  *(void *)(a1 + 8) = 0;
  uint64_t v62 = a1 + 8;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 88) = a1 + 96;
  uint64_t v64 = (uint64_t **)(a1 + 88);
  char v3 = (void **)(a1 + 64);
  *(void *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (0xCCCCCCCCCCCCCCCDLL * ((v5 - *a2) >> 4) >= 0xB)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Histogram supports up to 10 dimensions only");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_2654426D0, MEMORY[0x263F8C080]);
  }
  int64x2_t v76 = 0uLL;
  char v77 = 0;
  int v75 = 0;
  if (v4 != v5)
  {
    uint64_t v63 = a1 + 80;
    do
    {
      if (*(void *)(v4 + 64) != *(void *)(v4 + 56) && *(unsigned char *)(v4 + 24) == 0)
      {
        uint64_t v12 = *(char **)(a1 + 72);
        unint64_t v11 = *(void *)(a1 + 80);
        if ((unint64_t)v12 >= v11)
        {
          long long v14 = (char *)*v3;
          uint64_t v15 = (v12 - (unsigned char *)*v3) >> 2;
          unint64_t v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 62) {
            std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v17 = v11 - (void)v14;
          if (v17 >> 1 > v16) {
            unint64_t v16 = v17 >> 1;
          }
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v18 = v16;
          }
          if (v18)
          {
            uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pps::AxisEnum>>(v63, v18);
            long long v14 = *(char **)(a1 + 64);
            uint64_t v12 = *(char **)(a1 + 72);
          }
          else
          {
            uint64_t v19 = 0;
          }
          char v29 = &v19[4 * v15];
          *(_DWORD *)char v29 = 1;
          int v13 = v29 + 4;
          while (v12 != v14)
          {
            int v30 = *((_DWORD *)v12 - 1);
            v12 -= 4;
            *((_DWORD *)v29 - 1) = v30;
            v29 -= 4;
          }
          *(void *)(a1 + 64) = v29;
          *(void *)(a1 + 72) = v13;
          *(void *)(a1 + 80) = &v19[4 * v18];
          if (v14) {
            operator delete(v14);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v12 = 1;
          int v13 = v12 + 4;
        }
        *(void *)(a1 + 72) = v13;
        v73[1] = 0;
        uint64_t v74 = 0;
        v73[0] = 0;
        boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>::variable<std::vector<double>,boost::histogram::detail::requires_iterable<std::vector<double>,void>>((uint64_t)v65, v4 + 56, (uint64_t)v73);
        uint64_t v31 = v76.i64[1];
        if (v76.i64[1] >= (unint64_t)v77)
        {
          uint64_t v34 = 0x6DB6DB6DB6DB6DB7 * ((v76.i64[1] - v76.i64[0]) >> 3);
          unint64_t v35 = v34 + 1;
          if ((unint64_t)(v34 + 1) > 0x492492492492492) {
            std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__throw_length_error[abi:ne180100]();
          }
          if (0xDB6DB6DB6DB6DB6ELL * (((uint64_t)v77 - v76.i64[0]) >> 3) > v35) {
            unint64_t v35 = 0xDB6DB6DB6DB6DB6ELL * (((uint64_t)v77 - v76.i64[0]) >> 3);
          }
          if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (((uint64_t)v77 - v76.i64[0]) >> 3)) >= 0x249249249249249) {
            unint64_t v36 = 0x492492492492492;
          }
          else {
            unint64_t v36 = v35;
          }
          char v81 = &v77;
          if (v36) {
            uint64_t v37 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>((uint64_t)&v77, v36);
          }
          else {
            uint64_t v37 = 0;
          }
          unint64_t v38 = &v37[7 * v34];
          unsigned int v78 = v37;
          v79.i64[0] = (uint64_t)v38;
          unint64_t v80 = &v37[7 * v36];
          *((void *)v38 + 1) = 0;
          *((void *)v38 + 2) = 0;
          *((void *)v38 + 3) = 0;
          *(_OWORD *)(v38 + 2) = *(_OWORD *)v65;
          *((void *)v38 + 3) = v66;
          v65[0] = 0;
          v65[1] = 0;
          uint64_t v66 = 0;
          long long v39 = __p;
          *((void *)v38 + 6) = v68;
          *((_OWORD *)v38 + 2) = v39;
          uint64_t v68 = 0;
          long long __p = 0uLL;
          *unint64_t v38 = 1;
          BOOL v33 = v38 + 14;
          v79.i64[1] = (uint64_t)(v38 + 14);
          uint64_t v41 = v76.i64[1];
          uint64_t v40 = v76.i64[0];
          uint64_t v42 = v79.i64[0];
          if (v76.i64[1] == v76.i64[0])
          {
            int64x2_t v43 = vdupq_n_s64(v76.u64[1]);
          }
          else
          {
            do
            {
              v41 -= 56;
              uint64_t v42 = boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::variant(v42 - 56, v41);
            }
            while (v41 != v40);
            int64x2_t v43 = v76;
            BOOL v33 = (_DWORD *)v79.i64[1];
          }
          v76.i64[0] = v42;
          v76.i64[1] = (uint64_t)v33;
          int64x2_t v79 = v43;
          char v44 = v77;
          char v77 = v80;
          unint64_t v80 = v44;
          unsigned int v78 = (void **)v43.i64[0];
          std::__split_buffer<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::~__split_buffer((uint64_t)&v78);
        }
        else
        {
          *(void *)(v76.i64[1] + 16) = 0;
          *(void *)(v31 + 24) = 0;
          *(_OWORD *)(v31 + 8) = *(_OWORD *)v65;
          *(void *)(v31 + 24) = v66;
          v65[0] = 0;
          v65[1] = 0;
          uint64_t v66 = 0;
          uint64_t v32 = v68;
          *(_OWORD *)(v31 + 32) = __p;
          *(void *)(v31 + 48) = v32;
          uint64_t v68 = 0;
          long long __p = 0uLL;
          *(_DWORD *)uint64_t v31 = 1;
          BOOL v33 = (_DWORD *)(v31 + 56);
        }
        v76.i64[1] = (uint64_t)v33;
        if (SHIBYTE(v68) < 0) {
          operator delete((void *)__p);
        }
        if (v65[0])
        {
          v65[1] = v65[0];
          operator delete(v65[0]);
        }
        if ((SHIBYTE(v74) & 0x80000000) == 0) {
          goto LABEL_91;
        }
        char v45 = (void *)v73[0];
      }
      else if (*(void *)(v4 + 40) == *(void *)(v4 + 32))
      {
        if (!*(_DWORD *)v4) {
          goto LABEL_91;
        }
        id v21 = *(char **)(a1 + 72);
        unint64_t v20 = *(void *)(a1 + 80);
        if ((unint64_t)v21 >= v20)
        {
          unsigned int v46 = (char *)*v3;
          uint64_t v47 = (v21 - (unsigned char *)*v3) >> 2;
          unint64_t v48 = v47 + 1;
          if ((unint64_t)(v47 + 1) >> 62) {
            std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v49 = v20 - (void)v46;
          if (v49 >> 1 > v48) {
            unint64_t v48 = v49 >> 1;
          }
          if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v50 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v50 = v48;
          }
          if (v50)
          {
            unsigned int v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pps::AxisEnum>>(v63, v50);
            unsigned int v46 = *(char **)(a1 + 64);
            id v21 = *(char **)(a1 + 72);
          }
          else
          {
            unsigned int v51 = 0;
          }
          uint64_t v55 = &v51[4 * v47];
          *(_DWORD *)uint64_t v55 = 0;
          char v22 = v55 + 4;
          while (v21 != v46)
          {
            int v56 = *((_DWORD *)v21 - 1);
            v21 -= 4;
            *((_DWORD *)v55 - 1) = v56;
            v55 -= 4;
          }
          *(void *)(a1 + 64) = v55;
          *(void *)(a1 + 72) = v22;
          *(void *)(a1 + 80) = &v51[4 * v50];
          if (v46) {
            operator delete(v46);
          }
        }
        else
        {
          *(_DWORD *)id v21 = 0;
          char v22 = v21 + 4;
        }
        *(void *)(a1 + 72) = v22;
        int v57 = *(_DWORD *)v4;
        double v58 = *(double *)(v4 + 8);
        double v59 = *(double *)(v4 + 16);
        v69[0] = 0;
        v69[1] = 0;
        uint64_t v70 = 0;
        boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>::regular((uint64_t)v65, v57, (uint64_t)v69, v58, v59);
        std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::emplace_back<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>(v76.i64, (uint64_t)v65);
        if (SBYTE7(__p) < 0) {
          operator delete(v65[1]);
        }
        if ((SHIBYTE(v70) & 0x80000000) == 0) {
          goto LABEL_91;
        }
        char v45 = v69[0];
      }
      else
      {
        unsigned int v78 = (void **)&v75;
        uint64_t v7 = (std::vector<std::string> *)(std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v64, &v75, (uint64_t)&std::piecewise_construct, (_DWORD **)&v78)+ 5);
        if (v7 != (std::vector<std::string> *)(v4 + 32)) {
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v7, *(std::string **)(v4 + 32), *(long long **)(v4 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v4 + 40) - *(void *)(v4 + 32)) >> 3));
        }
        int v9 = *(char **)(a1 + 72);
        unint64_t v8 = *(void *)(a1 + 80);
        if ((unint64_t)v9 >= v8)
        {
          unint64_t v23 = (char *)*v3;
          uint64_t v24 = (v9 - (unsigned char *)*v3) >> 2;
          unint64_t v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 62) {
            std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v26 = v8 - (void)v23;
          if (v26 >> 1 > v25) {
            unint64_t v25 = v26 >> 1;
          }
          if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v27 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v27 = v25;
          }
          if (v27)
          {
            unint64_t v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pps::AxisEnum>>(v63, v27);
            unint64_t v23 = *(char **)(a1 + 64);
            int v9 = *(char **)(a1 + 72);
          }
          else
          {
            unint64_t v28 = 0;
          }
          uint64_t v52 = &v28[4 * v24];
          *(_DWORD *)uint64_t v52 = 2;
          uint64_t v10 = v52 + 4;
          while (v9 != v23)
          {
            int v53 = *((_DWORD *)v9 - 1);
            v9 -= 4;
            *((_DWORD *)v52 - 1) = v53;
            v52 -= 4;
          }
          *(void *)(a1 + 64) = v52;
          *(void *)(a1 + 72) = v10;
          *(void *)(a1 + 80) = &v28[4 * v27];
          if (v23) {
            operator delete(v23);
          }
        }
        else
        {
          *(_DWORD *)int v9 = 2;
          uint64_t v10 = v9 + 4;
        }
        *(void *)(a1 + 72) = v10;
        int v54 = -1431655765 * ((*(void *)(v4 + 40) - *(void *)(v4 + 32)) >> 3);
        uint64_t v72 = 0;
        __n128 v71 = 0uLL;
        boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>::integer((uint64_t)v65, 0, v54, &v71);
        std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::emplace_back<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>(v76.i64, (uint64_t)v65);
        if (SBYTE7(__p) < 0) {
          operator delete(v65[1]);
        }
        if ((SHIBYTE(v72) & 0x80000000) == 0) {
          goto LABEL_91;
        }
        char v45 = (void *)v71.n128_u64[0];
      }
      operator delete(v45);
LABEL_91:
      ++v75;
      v4 += 80;
    }
    while (v4 != v5);
  }
  boost::histogram::make_histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::detail::requires_sequence_of_any_axis<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,void>>((uint64_t)&v76, (uint64_t)v65);
  boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>::operator=(v62, (uint64_t)v65);
  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::destroy((uint64_t)&__p);
  unsigned int v78 = v65;
  std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__destroy_vector::operator()[abi:ne180100](&v78);
  v65[0] = &v76;
  std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v65);
  return a1;
}

void sub_258F7D6F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char **a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::destroy(a12, *a9);
  char v44 = *v42;
  if (*v42)
  {
    *(void *)(v41 + 72) = v44;
    operator delete(v44);
  }
  boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>::~histogram(a10);
  _Unwind_Resume(a1);
}

uint64_t boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>::variable<std::vector<double>,boost::histogram::detail::requires_iterable<std::vector<double>,void>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(double **)(a2 + 8);
  *(_OWORD *)long long __p = *(_OWORD *)a3;
  uint64_t v8 = *(void *)(a3 + 16);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>::variable<std::__wrap_iter<double const*>,boost::histogram::detail::requires_iterator<std::__wrap_iter<double const*>,void>>(a1, v4, v5, (long long *)__p);
  if (SHIBYTE(v8) < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_258F7D858(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::emplace_back<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    uint64_t v10 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v7 - *a1) >> 3);
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) > 0x492492492492492) {
      std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v12 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x249249249249249) {
      unint64_t v13 = 0x492492492492492;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = v4;
    if (v13) {
      long long v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>(v4, v13);
    }
    else {
      long long v14 = 0;
    }
    uint64_t v15 = &v14[56 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[56 * v13];
    *((_DWORD *)v15 + 2) = *(_DWORD *)a2;
    long long v16 = *(_OWORD *)(a2 + 8);
    *((void *)v15 + 4) = *(void *)(a2 + 24);
    *((_OWORD *)v15 + 1) = v16;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    *((_DWORD *)v15 + 10) = *(_DWORD *)(a2 + 32);
    *(_DWORD *)uint64_t v15 = 2;
    v18[2] = v15 + 56;
    std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__swap_out_circular_buffer(a1, v18);
    uint64_t v9 = a1[1];
    std::__split_buffer<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::~__split_buffer((uint64_t)v18);
  }
  else
  {
    *(_DWORD *)(v7 + 8) = *(_DWORD *)a2;
    long long v8 = *(_OWORD *)(a2 + 8);
    *(void *)(v7 + 32) = *(void *)(a2 + 24);
    *(_OWORD *)(v7 + 16) = v8;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    *(_DWORD *)(v7 + 40) = *(_DWORD *)(a2 + 32);
    *(_DWORD *)unint64_t v7 = 2;
    uint64_t v9 = v7 + 56;
    a1[1] = v7 + 56;
  }
  a1[1] = v9;
  return v9 - 56;
}

void sub_258F7D9E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::emplace_back<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    uint64_t v10 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v7 - *a1) >> 3);
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) > 0x492492492492492) {
      std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v12 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x249249249249249) {
      unint64_t v13 = 0x492492492492492;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = v4;
    if (v13) {
      long long v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>(v4, v13);
    }
    else {
      long long v14 = 0;
    }
    uint64_t v15 = &v14[56 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[56 * v13];
    *((_DWORD *)v15 + 2) = *(_DWORD *)a2;
    long long v16 = *(_OWORD *)(a2 + 8);
    *((void *)v15 + 4) = *(void *)(a2 + 24);
    *((_OWORD *)v15 + 1) = v16;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    *(_OWORD *)(v15 + 40) = *(_OWORD *)(a2 + 32);
    *(_DWORD *)uint64_t v15 = 0;
    v18[2] = v15 + 56;
    std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__swap_out_circular_buffer(a1, v18);
    uint64_t v9 = a1[1];
    std::__split_buffer<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::~__split_buffer((uint64_t)v18);
  }
  else
  {
    *(_DWORD *)(v7 + 8) = *(_DWORD *)a2;
    long long v8 = *(_OWORD *)(a2 + 8);
    *(void *)(v7 + 32) = *(void *)(a2 + 24);
    *(_OWORD *)(v7 + 16) = v8;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    *(_OWORD *)(v7 + 40) = *(_OWORD *)(a2 + 32);
    *(_DWORD *)unint64_t v7 = 0;
    uint64_t v9 = v7 + 56;
    a1[1] = v7 + 56;
  }
  a1[1] = v9;
  return v9 - 56;
}

void sub_258F7DB68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void boost::histogram::make_histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::detail::requires_sequence_of_any_axis<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,void>>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v2[1] = 0;
  char v3 = 0;
  uint64_t v4 = 0;
  boost::histogram::make_histogram_with<boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::detail::requires_sequence_of_any_axis<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,void>>((uint64_t)v2, a1, a2);
  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::destroy((uint64_t)v2);
}

void sub_258F7DBC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>::operator=(uint64_t a1, uint64_t a2)
{
  std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__vdeallocate((void **)a1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  if (a1 != a2)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a2 + 32) = v4;
    LOBYTE(v4) = *(unsigned char *)(a1 + 40);
    *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
    *(unsigned char *)(a2 + 40) = v4;
    uint64_t v5 = *(void *)(a1 + 48);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(void *)(a2 + 48) = v5;
  }
  return a1;
}

pps::Histogram_Internal *pps::Histogram_Internal::Histogram_Internal(pps::Histogram_Internal *this, const pps::Histogram_Internal *a2)
{
  *(void *)this = &unk_2707027F0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 5) = 0;
  *((unsigned char *)this + 48) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 11) = (char *)this + 96;
  uint64_t v4 = (uint64_t **)((char *)this + 88);
  uint64_t v5 = (char *)this + 64;
  *((void *)this + 13) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>::operator=((uint64_t)this + 8, (uint64_t *)a2 + 1);
  if (this != a2)
  {
    std::vector<pps::AxisEnum>::__assign_with_size[abi:ne180100]<pps::AxisEnum*,pps::AxisEnum*>(v5, *((char **)a2 + 8), *((void *)a2 + 9), (uint64_t)(*((void *)a2 + 9) - *((void *)a2 + 8)) >> 2);
    std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<int,std::vector<std::string>>,std::__tree_node<std::__value_type<int,std::vector<std::string>>,void *> *,long>>(v4, *((void **)a2 + 11), (void *)a2 + 12);
  }
  return this;
}

void sub_258F7DD18(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::destroy(v4, *v5);
  unint64_t v7 = *v3;
  if (*v3)
  {
    *(void *)(v2 + 72) = v7;
    operator delete(v7);
  }
  boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>::~histogram(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>::operator=(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2) {
    std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__assign_with_size[abi:ne180100]<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>*,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>*>(a1, *a2, a2[1], 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3));
  }
  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::operator=(a1 + 24, (uint64_t)(a2 + 3));
  return a1;
}

uint64_t pps::Histogram_Internal::operator==(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 == a2) {
    return 1;
  }
  uint64_t v19 = v2;
  uint64_t v20 = v3;
  uint64_t result = boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>::operator==<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>((int **)(a1 + 8), a2 + 1);
  if (result)
  {
    long long v8 = *(char **)(a1 + 64);
    unint64_t v7 = *(char **)(a1 + 72);
    uint64_t v9 = (_DWORD *)a2[8];
    if (v7 - v8 != a2[9] - (void)v9) {
      return 0;
    }
    while (v8 != v7)
    {
      if (*(_DWORD *)v8 != *v9) {
        return 0;
      }
      v8 += 4;
      ++v9;
    }
    if (*(void *)(a1 + 104) == a2[13])
    {
      uint64_t v10 = *(void **)(a1 + 88);
      unint64_t v11 = (void *)(a1 + 96);
      if (v10 == v11)
      {
        return 1;
      }
      else
      {
        unint64_t v12 = (void *)a2[11];
        do
        {
          uint64_t result = std::__equal_to::operator()[abi:ne180100]<std::pair<int const,std::vector<std::string>>,std::pair<int const,std::vector<std::string>>>((uint64_t)&v18, (uint64_t)(v10 + 4), (uint64_t)(v12 + 4));
          if (!result) {
            break;
          }
          unint64_t v13 = (void *)v10[1];
          long long v14 = v10;
          if (v13)
          {
            do
            {
              uint64_t v10 = v13;
              unint64_t v13 = (void *)*v13;
            }
            while (v13);
          }
          else
          {
            do
            {
              uint64_t v10 = (void *)v14[2];
              BOOL v15 = *v10 == (void)v14;
              long long v14 = v10;
            }
            while (!v15);
          }
          long long v16 = (void *)v12[1];
          if (v16)
          {
            do
            {
              uint64_t v17 = v16;
              long long v16 = (void *)*v16;
            }
            while (v16);
          }
          else
          {
            do
            {
              uint64_t v17 = (void *)v12[2];
              BOOL v15 = *v17 == (void)v12;
              unint64_t v12 = v17;
            }
            while (!v15);
          }
          unint64_t v12 = v17;
        }
        while (v10 != v11);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>::operator==<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>(int **a1, uint64_t *a2)
{
  uint64_t result = boost::histogram::detail::axes_equal<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>(a1, a2);
  if (result)
  {
    return boost::histogram::unlimited_storage<std::allocator<char>>::operator==((uint64_t)(a1 + 3), (uint64_t)(a2 + 3));
  }
  return result;
}

uint64_t pps::Histogram_Internal::axisCount(pps::Histogram_Internal *this)
{
  return -1227133513 * ((*((void *)this + 2) - *((void *)this + 1)) >> 3);
}

double pps::Histogram_Internal::axisRangeOfBinAt(pps::Histogram_Internal *this, int a2, signed int a3)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v4 = *((void *)this + 12);
  if (!v4) {
    goto LABEL_11;
  }
  uint64_t v5 = (_DWORD *)((char *)this + 96);
  do
  {
    signed int v6 = *(_DWORD *)(v4 + 32);
    BOOL v7 = v6 < a3;
    if (v6 >= a3) {
      long long v8 = (uint64_t *)v4;
    }
    else {
      long long v8 = (uint64_t *)(v4 + 8);
    }
    if (!v7) {
      uint64_t v5 = (_DWORD *)v4;
    }
    uint64_t v4 = *v8;
  }
  while (*v8);
  if (v5 == (_DWORD *)((char *)this + 96) || (double v9 = 0.0, v5[8] > a3))
  {
LABEL_11:
    pps::Histogram_Internal::axis(this, a3, v13);
    int v11 = a2;
    unint64_t v12 = &v11;
    double v9 = _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNKS2_7variantIJS5_SA_SF_EE3binEiEUlRKT_E_RKSG_EEEENSN_11result_typeERSN_(v13, &v12);
    boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content((uint64_t)v13);
  }
  return v9;
}

void sub_258F7E044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pps::Histogram_Internal::isCategoryAxis(pps::Histogram_Internal *this, int a2)
{
  uint64_t v4 = (char *)*((void *)this + 12);
  uint64_t v2 = (char *)this + 96;
  uint64_t v3 = v4;
  if (!v4) {
    goto LABEL_11;
  }
  uint64_t v5 = v2;
  do
  {
    int v6 = *((_DWORD *)v3 + 8);
    BOOL v7 = v6 < a2;
    if (v6 >= a2) {
      long long v8 = (char **)v3;
    }
    else {
      long long v8 = (char **)(v3 + 8);
    }
    if (!v7) {
      uint64_t v5 = v3;
    }
    uint64_t v3 = *v8;
  }
  while (*v8);
  if (v5 == v2 || *((_DWORD *)v5 + 8) > a2) {
LABEL_11:
  }
    uint64_t v5 = v2;
  return v5 != v2;
}

void pps::Histogram_Internal::axis(pps::Histogram_Internal *this@<X0>, unsigned int a2@<W1>, _DWORD *a3@<X8>)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v4 = *((void *)this + 1);
  if (0x6DB6DB6DB6DB6DB7 * ((*((void *)this + 2) - v4) >> 3) <= (unint64_t)a2) {
    pps::Histogram_Internal::axis();
  }
  boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::variant((uint64_t)v17, v4 + 56 * a2);
  long long v13 = 0u;
  long long v14 = 0u;
  uint64_t v15 = 0;
  uint64_t v16 = 0x3FF0000000000000;
  int v12 = 0;
  int v7 = *(_DWORD *)(*((void *)this + 8) + 4 * (int)a2);
  if (v7 == 2)
  {
    uint64_t v10 = boost::histogram::axis::get<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>(v17);
    int v9 = boost::detail::variant::make_initializer_node::apply<boost::mpl::pair<boost::detail::variant::make_initializer_node::apply<boost::mpl::pair<boost::detail::variant::make_initializer_node::apply<boost::mpl::pair<boost::detail::variant::initializer_root,mpl_::int_<0>>,boost::mpl::l_iter<boost::mpl::list3<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::initializer_node,mpl_::int_<1>>,boost::mpl::l_iter<boost::mpl::list2<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::initializer_node,mpl_::int_<2>>,boost::mpl::l_iter<boost::mpl::list1<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::initializer_node::initialize(a3 + 2, (uint64_t)v10);
  }
  else if (v7 == 1)
  {
    long long v8 = boost::histogram::axis::get<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>(v17);
    int v9 = boost::detail::variant::make_initializer_node::apply<boost::mpl::pair<boost::detail::variant::make_initializer_node::apply<boost::mpl::pair<boost::detail::variant::initializer_root,mpl_::int_<0>>,boost::mpl::l_iter<boost::mpl::list3<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::initializer_node,mpl_::int_<1>>,boost::mpl::l_iter<boost::mpl::list2<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::initializer_node::initialize((std::string *)(a3 + 2), (uint64_t)v8);
  }
  else
  {
    int v11 = boost::histogram::axis::get<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>(v17);
    int v9 = boost::detail::variant::make_initializer_node::apply<boost::mpl::pair<boost::detail::variant::initializer_root,mpl_::int_<0>>,boost::mpl::l_iter<boost::mpl::list3<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>::initializer_node::initialize((uint64_t)(a3 + 2), (uint64_t)v11);
  }
  *a3 = v9;
  boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content((uint64_t)&v12);
  boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content((uint64_t)v17);
}

void sub_258F7E1D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content((uint64_t)va);
  boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t pps::Histogram_Internal::binCount(pps::Histogram_Internal *this)
{
  return *((void *)this + 5);
}

uint64_t *pps::Histogram_Internal::categoriesPerAxis@<X0>(pps::Histogram_Internal *this@<X0>, uint64_t *a2@<X8>)
{
  return std::map<int,std::vector<std::string>>::map[abi:ne180100](a2, (uint64_t)this + 88);
}

void pps::Histogram_Internal::cumulativeData(pps::Histogram_Internal *this@<X0>, int a2@<W1>, void *a3@<X8>, double a4@<D0>)
{
  pps::Histogram_Internal::data(this, a2, (uint64_t)&v12, a4);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::vector<unsigned long long>::resize((uint64_t)a3, (v13 - v12) >> 3);
  uint64_t v5 = v12;
  uint64_t v6 = v13;
  if (v12 == v13)
  {
LABEL_5:
    if (!v5) {
      return;
    }
    goto LABEL_6;
  }
  uint64_t v7 = (void *)*a3;
  uint64_t v8 = v12 + 8;
  uint64_t v9 = *(void *)v12;
  *(void *)*a3 = *(void *)v12;
  if (v5 + 8 != v6)
  {
    uint64_t v10 = v7 + 1;
    do
    {
      uint64_t v11 = *(void *)v8;
      v8 += 8;
      v9 += v11;
      *v10++ = v9;
    }
    while (v8 != v6);
    goto LABEL_5;
  }
LABEL_6:
  long long v13 = v5;
  operator delete(v5);
}

void sub_258F7E2A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  long long v13 = *(void **)v11;
  if (*(void *)v11)
  {
    *(void *)(v11 + 8) = v13;
    operator delete(v13);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pps::Histogram_Internal::data(pps::Histogram_Internal *this@<X0>, int a2@<W1>, uint64_t a3@<X8>, double a4@<D0>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  if (a2)
  {
    uint64_t v5 = *((void *)this + 5);
    if (v5)
    {
      uint64_t v6 = 0;
      uint64_t v7 = 0;
      uint64_t v8 = (char *)this + 32;
      do
      {
        v22[0] = (uint64_t)v8;
        v22[1] = v7;
        if ((unint64_t)v6 >= *(void *)(a3 + 16))
        {
          uint64_t v6 = std::vector<unsigned long>::__emplace_back_slow_path<boost::histogram::unlimited_storage<std::allocator<char>>::reference_t<boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type const> &>((void **)a3, v22, a4);
        }
        else
        {
          uint64_t v19 = v22;
          a4 = _ZNK5boost9histogram17unlimited_storageINSt3__19allocatorIcEEE11buffer_type5applyIZNKS5_11reference_tIKS6_EcvdEvEUlPKT_E_JEEEDcOSB_DpOT0_((uint64_t)v8, (uint64_t)&v19, a4);
          *v6++ = (unint64_t)a4;
          *(void *)(a3 + 8) = v6;
        }
        *(void *)(a3 + 8) = v6;
        ++v7;
      }
      while (v5 != v7);
    }
  }
  else
  {
    boost::histogram::indexed_range<boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>> const>::indexed_range((uint64_t)v22, (int **)this + 1, 0);
    uint64_t v11 = v23;
    uint64_t v10 = v24;
    uint64_t v19 = (uint64_t *)v23;
    uint64_t v20 = v24;
    id v21 = v22;
    int v12 = v25;
    uint64_t v13 = v26;
    if (v24 != v26 || v23 != (void)v25)
    {
      do
      {
        v18[0] = v10;
        v18[1] = v11;
        uint64_t v15 = *(void **)(a3 + 8);
        if ((unint64_t)v15 >= *(void *)(a3 + 16))
        {
          uint64_t v16 = std::vector<unsigned long>::__emplace_back_slow_path<boost::histogram::unlimited_storage<std::allocator<char>>::reference_t<boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type const>>((void **)a3, v18, v9);
        }
        else
        {
          unint64_t v27 = v18;
          *uint64_t v15 = (unint64_t)_ZNK5boost9histogram17unlimited_storageINSt3__19allocatorIcEEE11buffer_type5applyIZNKS5_11reference_tIKS6_EcvdEvEUlPKT_E_JEEEDcOSB_DpOT0_(v10, (uint64_t)&v27, v9);
          uint64_t v16 = v15 + 1;
          *(void *)(a3 + 8) = v16;
        }
        *(void *)(a3 + 8) = v16;
        boost::histogram::indexed_range<boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>> const>::range_iterator::increment((uint64_t *)&v19);
        uint64_t v11 = (uint64_t)v19;
        uint64_t v10 = v20;
      }
      while (v20 != v13 || v19 != v12);
    }
  }
}

void sub_258F7E414(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t pps::Histogram_Internal::hash(pps::Histogram_Internal *this, double a2)
{
  uint64_t v2 = *((void *)this + 5);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = 0;
  uint64_t v4 = (char *)this + 32;
  unint64_t v5 = *((void *)this + 5);
  do
  {
    v7[0] = v4;
    v7[1] = v3;
    uint64_t v8 = v7;
    a2 = _ZNK5boost9histogram17unlimited_storageINSt3__19allocatorIcEEE11buffer_type5applyIZNKS5_11reference_tIKS6_EcvdEvEUlPKT_E_JEEEDcOSB_DpOT0_((uint64_t)v4, (uint64_t)&v8, a2);
    v5 ^= (v5 << 6) + (v5 >> 2) + 2654435769u + (unint64_t)a2;
    ++v3;
  }
  while (v2 != v3);
  return v5;
}

uint64_t pps::Histogram_Internal::indexOfSample(pps::Histogram_Internal *this, double a2, unsigned int a3)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  double v5 = a2;
  pps::Histogram_Internal::axis(this, a3, v8);
  uint64_t v6 = &v5;
  uint64_t v7 = &v6;
  uint64_t v3 = boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::apply_visitor<boost::detail::variant::result_wrapper1<int boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::index<double>(double const&)::{lambda(double const&)#1},boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>> const&>>((uint64_t)v8, &v7);
  boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content((uint64_t)v8);
  return v3;
}

void sub_258F7E570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content((uint64_t)va);
  _Unwind_Resume(a1);
}

void pps::Histogram_Internal::indicesOfSample(pps::Histogram_Internal *this@<X0>, void *a2@<X1>, char **a3@<X8>)
{
  uint64_t v4 = -1227133513 * ((*((void *)this + 2) - *((void *)this + 1)) >> 3);
  if (v4 != (uint64_t)(a2[1] - *a2) >> 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Sample size must match number of dimensions");
    __cxa_throw(exception, (struct type_info *)off_2654426D0, MEMORY[0x263F8C080]);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (v4)
  {
    unint64_t v7 = 0;
    do
    {
      int v8 = pps::Histogram_Internal::indexOfSample(this, *(double *)(*a2 + 8 * v7), v7);
      int v9 = v8;
      uint64_t v11 = a3[1];
      unint64_t v10 = (unint64_t)a3[2];
      if ((unint64_t)v11 >= v10)
      {
        uint64_t v13 = *a3;
        uint64_t v14 = (v11 - *a3) >> 2;
        unint64_t v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 62) {
          std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v16 = v10 - (void)v13;
        if (v16 >> 1 > v15) {
          unint64_t v15 = v16 >> 1;
        }
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v15;
        }
        if (v17)
        {
          uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pps::AxisEnum>>((uint64_t)(a3 + 2), v17);
          uint64_t v13 = *a3;
          uint64_t v11 = a3[1];
        }
        else
        {
          uint64_t v18 = 0;
        }
        uint64_t v19 = &v18[4 * v14];
        *(_DWORD *)uint64_t v19 = v9;
        int v12 = v19 + 4;
        while (v11 != v13)
        {
          int v20 = *((_DWORD *)v11 - 1);
          v11 -= 4;
          *((_DWORD *)v19 - 1) = v20;
          v19 -= 4;
        }
        *a3 = v19;
        a3[1] = v12;
        a3[2] = &v18[4 * v17];
        if (v13) {
          operator delete(v13);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v11 = v8;
        int v12 = v11 + 4;
      }
      a3[1] = v12;
      ++v7;
    }
    while (v7 < -1227133513 * ((*((void *)this + 2) - *((void *)this + 1)) >> 3));
  }
}

void sub_258F7E734(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double pps::Histogram_Internal::maxRangeForAxis(pps::Histogram_Internal *this, signed int a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 12);
  if (!v2) {
    goto LABEL_11;
  }
  uint64_t v3 = (_DWORD *)((char *)this + 96);
  do
  {
    signed int v4 = *(_DWORD *)(v2 + 32);
    BOOL v5 = v4 < a2;
    if (v4 >= a2) {
      uint64_t v6 = (uint64_t *)v2;
    }
    else {
      uint64_t v6 = (uint64_t *)(v2 + 8);
    }
    if (!v5) {
      uint64_t v3 = (_DWORD *)v2;
    }
    uint64_t v2 = *v6;
  }
  while (*v6);
  if (v3 == (_DWORD *)((char *)this + 96) || (double v7 = 0.0, v3[8] > a2))
  {
LABEL_11:
    pps::Histogram_Internal::axis(this, a2, v12);
    uint64_t v11 = &v10;
    if ((int)_ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNKS2_7variantIJS5_SA_SF_EE4sizeEvEUlRKT_E_RKSG_EEEENSN_11result_typeERSN_((uint64_t)v12) < 1)
    {
      double v7 = 0.0;
    }
    else
    {
      uint64_t v11 = &v10;
      int v10 = _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNKS2_7variantIJS5_SA_SF_EE4sizeEvEUlRKT_E_RKSG_EEEENSN_11result_typeERSN_((uint64_t)v12)
          - 1;
      uint64_t v11 = &v10;
      _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNKS2_7variantIJS5_SA_SF_EE3binEiEUlRKT_E_RKSG_EEEENSN_11result_typeERSN_(v12, &v11);
      double v7 = v8;
    }
    boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content((uint64_t)v12);
  }
  return v7;
}

void sub_258F7E868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content((uint64_t)va);
  _Unwind_Resume(a1);
}

double pps::Histogram_Internal::maxSampleForAxis(pps::Histogram_Internal *this, signed int a2)
{
  uint64_t v4 = *((void *)this + 12);
  if (!v4) {
    goto LABEL_11;
  }
  BOOL v5 = (_DWORD *)((char *)this + 96);
  do
  {
    signed int v6 = *(_DWORD *)(v4 + 32);
    BOOL v7 = v6 < a2;
    if (v6 >= a2) {
      double v8 = (uint64_t *)v4;
    }
    else {
      double v8 = (uint64_t *)(v4 + 8);
    }
    if (!v7) {
      BOOL v5 = (_DWORD *)v4;
    }
    uint64_t v4 = *v8;
  }
  while (*v8);
  if (v5 == (_DWORD *)((char *)this + 96) || (double v9 = 0.0, v5[8] > a2))
  {
LABEL_11:
    pps::Histogram_Internal::binCountsForAxis((int **)this, a2, &__p);
    int v10 = v16;
    unint64_t v11 = (unint64_t)(v16 - (unsigned char *)__p) >> 3;
    while (v10 != __p)
    {
      LODWORD(v11) = v11 - 1;
      uint64_t v12 = *((void *)v10 - 1);
      v10 -= 8;
      if (v12)
      {
        double v13 = pps::Histogram_Internal::rightEdgeOfBin(this, v11, a2);
        goto LABEL_16;
      }
    }
    double v13 = pps::Histogram_Internal::maxRangeForAxis(this, a2);
LABEL_16:
    double v9 = v13;
    if (__p)
    {
      uint64_t v16 = (char *)__p;
      operator delete(__p);
    }
  }
  return v9;
}

void sub_258F7E964(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pps::Histogram_Internal::binCountsForAxis(int **this@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  pps::Histogram_Internal::axis((pps::Histogram_Internal *)this, a2, v25);
  v19[0] = &v16;
  int v6 = _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNKS2_7variantIJS5_SA_SF_EE4sizeEvEUlRKT_E_RKSG_EEEENSN_11result_typeERSN_((uint64_t)v25);
  std::vector<unsigned long>::vector(a3, v6);
  boost::histogram::indexed_range<boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>> const>::indexed_range((uint64_t)v19, this + 1, 0);
  uint64_t v9 = v20;
  uint64_t v8 = v21;
  uint64_t v16 = v20;
  uint64_t v17 = v21;
  uint64_t v18 = v19;
  uint64_t v10 = v22;
  uint64_t v11 = v23;
  if (v21 != v23 || v20 != v22)
  {
    do
    {
      do
      {
        uint64_t v12 = v18;
        v15[0] = v8;
        v15[1] = v9;
        uint64_t v24 = v15;
        double v13 = _ZNK5boost9histogram17unlimited_storageINSt3__19allocatorIcEEE11buffer_type5applyIZNKS5_11reference_tIKS6_EcvdEvEUlPKT_E_JEEEDcOSB_DpOT0_(v8, (uint64_t)&v24, v7);
        uint64_t v14 = SLODWORD(v12[2 * a2 + 6]);
        *(void *)(*a3 + 8 * v14) = (unint64_t)(v13 + (double)*(unint64_t *)(*a3 + 8 * v14));
        boost::histogram::indexed_range<boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>> const>::range_iterator::increment(&v16);
        uint64_t v9 = v16;
        uint64_t v8 = v17;
      }
      while (v17 != v11);
    }
    while (v16 != v10);
  }
  boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content((uint64_t)v25);
}

void sub_258F7EAB4(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v4;
    operator delete(v4);
  }
  boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content(v2 - 128);
  _Unwind_Resume(a1);
}

double pps::Histogram_Internal::rightEdgeOfBin(pps::Histogram_Internal *this, int a2, signed int a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v4 = *((void *)this + 12);
  if (!v4) {
    goto LABEL_11;
  }
  BOOL v5 = (_DWORD *)((char *)this + 96);
  do
  {
    signed int v6 = *(_DWORD *)(v4 + 32);
    BOOL v7 = v6 < a3;
    if (v6 >= a3) {
      uint64_t v8 = (uint64_t *)v4;
    }
    else {
      uint64_t v8 = (uint64_t *)(v4 + 8);
    }
    if (!v7) {
      BOOL v5 = (_DWORD *)v4;
    }
    uint64_t v4 = *v8;
  }
  while (*v8);
  if (v5 == (_DWORD *)((char *)this + 96) || (double v9 = 0.0, v5[8] > a3))
  {
LABEL_11:
    pps::Histogram_Internal::axis(this, a3, v14);
    int v12 = a2;
    double v13 = &v12;
    _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNKS2_7variantIJS5_SA_SF_EE3binEiEUlRKT_E_RKSG_EEEENSN_11result_typeERSN_(v14, &v13);
    double v9 = v10;
    boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content((uint64_t)v14);
  }
  return v9;
}

void sub_258F7EBC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content((uint64_t)va);
  _Unwind_Resume(a1);
}

void pps::Histogram_Internal::meanForAxis(pps::Histogram_Internal *this, signed int a2, double a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v5 = *((void *)this + 12);
  if (!v5) {
    goto LABEL_19;
  }
  signed int v6 = (_DWORD *)((char *)this + 96);
  do
  {
    signed int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      double v9 = (uint64_t *)v5;
    }
    else {
      double v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      signed int v6 = (_DWORD *)v5;
    }
    uint64_t v5 = *v9;
  }
  while (*v9);
  if (v6 == (_DWORD *)((char *)this + 96) || (a3 = 0.0, v6[8] > a2))
  {
LABEL_19:
    if (pps::Histogram_Internal::sum(this, 0, a3))
    {
      pps::Histogram_Internal::binCountsForAxis((int **)this, a2, __p);
      pps::Histogram_Internal::axis(this, a2, v17);
      uint64_t v10 = 0;
      for (double i = 0.0; ; double i = i + (v12 + v13) * 0.5 * (double)*((unint64_t *)__p[0] + v10++))
      {
        uint64_t v16 = &v15;
        if (v10 >= (int)_ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNKS2_7variantIJS5_SA_SF_EE4sizeEvEUlRKT_E_RKSG_EEEENSN_11result_typeERSN_((uint64_t)v17)) {
          break;
        }
        double v12 = pps::Histogram_Internal::leftEdgeOfBin(this, v10, a2);
        double v13 = pps::Histogram_Internal::rightEdgeOfBin(this, v10, a2);
      }
      boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content((uint64_t)v17);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
  }
}

void sub_258F7ED60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t pps::Histogram_Internal::sum(pps::Histogram_Internal *this, int a2, double a3)
{
  if (a2)
  {
    uint64_t v3 = *((void *)this + 5);
    if (v3)
    {
      unint64_t v4 = 0;
      uint64_t v5 = 0;
      signed int v6 = (char *)this + 32;
      do
      {
        v19[0] = v6;
        v19[1] = v5;
        uint64_t v16 = v19;
        a3 = _ZNK5boost9histogram17unlimited_storageINSt3__19allocatorIcEEE11buffer_type5applyIZNKS5_11reference_tIKS6_EcvdEvEUlPKT_E_JEEEDcOSB_DpOT0_((uint64_t)v6, (uint64_t)&v16, a3)+ (double)v4;
        unint64_t v4 = (unint64_t)a3;
        ++v5;
      }
      while (v3 != v5);
    }
    else
    {
      return 0;
    }
  }
  else
  {
    boost::histogram::indexed_range<boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>> const>::indexed_range((uint64_t)v19, (int **)this + 1, 0);
    uint64_t v9 = v20;
    uint64_t v8 = v21;
    uint64_t v16 = (void *)v20;
    uint64_t v17 = v21;
    uint64_t v18 = v19;
    uint64_t v10 = v22;
    uint64_t v11 = v23;
    unint64_t v4 = 0;
    if (v21 != v23 || v20 != (void)v22)
    {
      do
      {
        v15[0] = v8;
        v15[1] = v9;
        uint64_t v24 = v15;
        unint64_t v4 = (unint64_t)(_ZNK5boost9histogram17unlimited_storageINSt3__19allocatorIcEEE11buffer_type5applyIZNKS5_11reference_tIKS6_EcvdEvEUlPKT_E_JEEEDcOSB_DpOT0_(v8, (uint64_t)&v24, v7)+ (double)v4);
        boost::histogram::indexed_range<boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>> const>::range_iterator::increment((uint64_t *)&v16);
        uint64_t v9 = (uint64_t)v16;
        uint64_t v8 = v17;
      }
      while (v17 != v11 || v16 != v10);
    }
  }
  return v4;
}

double pps::Histogram_Internal::midPointOfBin(pps::Histogram_Internal *this, int a2, signed int a3)
{
  double v6 = pps::Histogram_Internal::leftEdgeOfBin(this, a2, a3);
  return (v6 + pps::Histogram_Internal::rightEdgeOfBin(this, a2, a3)) * 0.5;
}

double pps::Histogram_Internal::medianForAxis(pps::Histogram_Internal *this, signed int a2)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v4 = *((void *)this + 12);
  if (!v4) {
    goto LABEL_11;
  }
  uint64_t v5 = (_DWORD *)((char *)this + 96);
  do
  {
    signed int v6 = *(_DWORD *)(v4 + 32);
    BOOL v7 = v6 < a2;
    if (v6 >= a2) {
      uint64_t v8 = (uint64_t *)v4;
    }
    else {
      uint64_t v8 = (uint64_t *)(v4 + 8);
    }
    if (!v7) {
      uint64_t v5 = (_DWORD *)v4;
    }
    uint64_t v4 = *v8;
  }
  while (*v8);
  if (v5 == (_DWORD *)((char *)this + 96) || (double v9 = 0.0, v5[8] > a2))
  {
LABEL_11:
    pps::Histogram_Internal::axis(this, a2, v30);
    __p[0] = &v29;
    unsigned int v10 = _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNKS2_7variantIJS5_SA_SF_EE4sizeEvEUlRKT_E_RKSG_EEEENSN_11result_typeERSN_((uint64_t)v30);
    if ((int)v10 < 1)
    {
      double v9 = 0.0;
    }
    else
    {
      pps::Histogram_Internal::binCountsForAxis((int **)this, a2, __p);
      uint64_t v11 = v10 >> 1;
      unsigned int v28 = v10 >> 1;
      char v29 = &v28;
      double v12 = _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNKS2_7variantIJS5_SA_SF_EE3binEiEUlRKT_E_RKSG_EEEENSN_11result_typeERSN_(v30, (int **)&v29);
      double v14 = v13;
      double v15 = pps::Histogram_Internal::leftEdgeOfBin(this, v10 >> 1, a2);
      double v16 = v15;
      uint64_t v17 = __p[0];
      double v18 = 0.0;
      if (v10 >= 2)
      {
        int v19 = 0;
        uint64_t v20 = 8 * v11;
        uint64_t v21 = (int *)__p[0];
        do
        {
          int v22 = *v21;
          v21 += 2;
          v19 += v22;
          v20 -= 8;
        }
        while (v20);
        double v18 = (double)v19;
      }
      double v23 = v14 - v12;
      unint64_t v24 = *((void *)__p[0] + v11);
      if (v24)
      {
        double v25 = ((double)pps::Histogram_Internal::sum(this, 0, v15) * 0.5 - v18) / (double)v24;
        uint64_t v17 = __p[0];
        double v9 = v16 + v25 * v23;
        if (!__p[0]) {
          goto LABEL_22;
        }
      }
      else
      {
        double v9 = v15 + v23 * 0.0;
      }
      __p[1] = v17;
      operator delete(v17);
    }
LABEL_22:
    boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content((uint64_t)v30);
  }
  return v9;
}

void sub_258F7F0A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (__p) {
    operator delete(__p);
  }
  boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content((uint64_t)&a15);
  _Unwind_Resume(a1);
}

double pps::Histogram_Internal::leftEdgeOfBin(pps::Histogram_Internal *this, int a2, signed int a3)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v4 = *((void *)this + 12);
  if (!v4) {
    goto LABEL_11;
  }
  uint64_t v5 = (_DWORD *)((char *)this + 96);
  do
  {
    signed int v6 = *(_DWORD *)(v4 + 32);
    BOOL v7 = v6 < a3;
    if (v6 >= a3) {
      uint64_t v8 = (uint64_t *)v4;
    }
    else {
      uint64_t v8 = (uint64_t *)(v4 + 8);
    }
    if (!v7) {
      uint64_t v5 = (_DWORD *)v4;
    }
    uint64_t v4 = *v8;
  }
  while (*v8);
  if (v5 == (_DWORD *)((char *)this + 96) || (double v9 = 0.0, v5[8] > a3))
  {
LABEL_11:
    pps::Histogram_Internal::axis(this, a3, v13);
    int v11 = a2;
    double v12 = &v11;
    double v9 = _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNKS2_7variantIJS5_SA_SF_EE3binEiEUlRKT_E_RKSG_EEEENSN_11result_typeERSN_(v13, &v12);
    boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content((uint64_t)v13);
  }
  return v9;
}

void sub_258F7F1BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content((uint64_t)va);
  _Unwind_Resume(a1);
}

double pps::Histogram_Internal::minRangeForAxis(pps::Histogram_Internal *this, signed int a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 12);
  if (!v2) {
    goto LABEL_11;
  }
  uint64_t v3 = (_DWORD *)((char *)this + 96);
  do
  {
    signed int v4 = *(_DWORD *)(v2 + 32);
    BOOL v5 = v4 < a2;
    if (v4 >= a2) {
      signed int v6 = (uint64_t *)v2;
    }
    else {
      signed int v6 = (uint64_t *)(v2 + 8);
    }
    if (!v5) {
      uint64_t v3 = (_DWORD *)v2;
    }
    uint64_t v2 = *v6;
  }
  while (*v6);
  if (v3 == (_DWORD *)((char *)this + 96) || (double v7 = 0.0, v3[8] > a2))
  {
LABEL_11:
    pps::Histogram_Internal::axis(this, a2, v11);
    int v9 = 0;
    unsigned int v10 = &v9;
    double v7 = _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNKS2_7variantIJS5_SA_SF_EE3binEiEUlRKT_E_RKSG_EEEENSN_11result_typeERSN_(v11, &v10);
    boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content((uint64_t)v11);
  }
  return v7;
}

void sub_258F7F2A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content((uint64_t)va);
  _Unwind_Resume(a1);
}

double pps::Histogram_Internal::minSampleForAxis(pps::Histogram_Internal *this, signed int a2)
{
  uint64_t v4 = *((void *)this + 12);
  if (!v4) {
    goto LABEL_11;
  }
  BOOL v5 = (_DWORD *)((char *)this + 96);
  do
  {
    signed int v6 = *(_DWORD *)(v4 + 32);
    BOOL v7 = v6 < a2;
    if (v6 >= a2) {
      uint64_t v8 = (uint64_t *)v4;
    }
    else {
      uint64_t v8 = (uint64_t *)(v4 + 8);
    }
    if (!v7) {
      BOOL v5 = (_DWORD *)v4;
    }
    uint64_t v4 = *v8;
  }
  while (*v8);
  if (v5 == (_DWORD *)((char *)this + 96) || (double v9 = 0.0, v5[8] > a2))
  {
LABEL_11:
    pps::Histogram_Internal::binCountsForAxis((int **)this, a2, &__p);
    if (v14 == __p)
    {
LABEL_15:
      double v11 = pps::Histogram_Internal::minRangeForAxis(this, a2);
    }
    else
    {
      uint64_t v10 = 0;
      while (!*((void *)__p + v10))
      {
        if ((v14 - (unsigned char *)__p) >> 3 == ++v10) {
          goto LABEL_15;
        }
      }
      double v11 = pps::Histogram_Internal::leftEdgeOfBin(this, v10, a2);
    }
    double v9 = v11;
    if (__p)
    {
      uint64_t v14 = __p;
      operator delete(__p);
    }
  }
  return v9;
}

void sub_258F7F3A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pps::Histogram_Internal::modeForAxis(pps::Histogram_Internal *this, signed int a2)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v4 = *((void *)this + 12);
  if (!v4) {
    goto LABEL_26;
  }
  BOOL v5 = (_DWORD *)((char *)this + 96);
  do
  {
    signed int v6 = *(_DWORD *)(v4 + 32);
    BOOL v7 = v6 < a2;
    if (v6 >= a2) {
      uint64_t v8 = (uint64_t *)v4;
    }
    else {
      uint64_t v8 = (uint64_t *)(v4 + 8);
    }
    if (!v7) {
      BOOL v5 = (_DWORD *)v4;
    }
    uint64_t v4 = *v8;
  }
  while (*v8);
  if (v5 == (_DWORD *)((char *)this + 96) || v5[8] > a2)
  {
LABEL_26:
    if (*((void *)this + 5))
    {
      pps::Histogram_Internal::binCountsForAxis((int **)this, a2, &__p);
      double v9 = (char *)__p + 8;
      BOOL v10 = __p == v19 || v9 == v19;
      double v11 = __p;
      if (!v10)
      {
        unint64_t v12 = *(void *)__p;
        double v11 = __p;
        double v13 = (char *)__p + 8;
        do
        {
          unint64_t v15 = *(void *)v13;
          v13 += 8;
          unint64_t v14 = v15;
          BOOL v16 = v12 >= v15;
          if (v12 <= v15) {
            unint64_t v12 = v14;
          }
          if (!v16) {
            double v11 = v9;
          }
          double v9 = v13;
        }
        while (v13 != v19);
      }
      unint64_t v17 = (unint64_t)(v11 - (unsigned char *)__p) >> 3;
      pps::Histogram_Internal::leftEdgeOfBin(this, v17, a2);
      pps::Histogram_Internal::axis(this, a2, v22);
      int v20 = v17;
      uint64_t v21 = &v20;
      _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNKS2_7variantIJS5_SA_SF_EE3binEiEUlRKT_E_RKSG_EEEENSN_11result_typeERSN_(v22, &v21);
      boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content((uint64_t)v22);
      if (__p)
      {
        int v19 = (char *)__p;
        operator delete(__p);
      }
    }
  }
}

void sub_258F7F540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t pps::Histogram_Internal::record(uint64_t result, void **a2)
{
  uint64_t v3 = result + 8;
  uint64_t v4 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(result + 16) - *(void *)(result + 8)) >> 3);
  signed int v6 = a2;
  BOOL v5 = *a2;
  if (v6[1] - v5 != v4)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Sample size must match number of dimensions");
    __cxa_throw(exception, (struct type_info *)off_2654426D0, MEMORY[0x263F8C080]);
  }
  switch((int)v4)
  {
    case 1:
      *(void *)&long long v19 = *v5;
      uint64_t result = boost::histogram::detail::fill<boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,double>(result + 32, v3, (const char *)&v19);
      break;
    case 2:
      long long v19 = *(_OWORD *)v5;
      uint64_t result = boost::histogram::detail::fill<boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,double,double>(result + 32, v3, (uint64_t)&v19);
      break;
    case 3:
      uint64_t v7 = v5[2];
      long long v19 = *(_OWORD *)v5;
      *(void *)&long long v20 = v7;
      uint64_t result = boost::histogram::detail::fill<boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,double,double,double>(result + 32, v3, (uint64_t)&v19);
      break;
    case 4:
      long long v8 = *((_OWORD *)v5 + 1);
      long long v19 = *(_OWORD *)v5;
      long long v20 = v8;
      uint64_t result = boost::histogram::detail::fill<boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,double,double,double,double>(result + 32, v3, (uint64_t)&v19);
      break;
    case 5:
      long long v9 = *((_OWORD *)v5 + 1);
      long long v19 = *(_OWORD *)v5;
      long long v20 = v9;
      *(void *)&long long v21 = v5[4];
      uint64_t result = boost::histogram::detail::fill<boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,double,double,double,double,double>(result + 32, v3, (uint64_t)&v19);
      break;
    case 6:
      long long v14 = *((_OWORD *)v5 + 1);
      long long v19 = *(_OWORD *)v5;
      long long v20 = v14;
      long long v21 = *((_OWORD *)v5 + 2);
      uint64_t result = boost::histogram::detail::fill<boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,double,double,double,double,double,double>(result + 32, v3, (uint64_t)&v19);
      break;
    case 7:
      long long v15 = *((_OWORD *)v5 + 1);
      long long v19 = *(_OWORD *)v5;
      long long v20 = v15;
      long long v21 = *((_OWORD *)v5 + 2);
      *(void *)&long long v22 = v5[6];
      uint64_t result = boost::histogram::detail::fill<boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,double,double,double,double,double,double,double>(result + 32, v3, (uint64_t)&v19);
      break;
    case 8:
      long long v10 = *((_OWORD *)v5 + 1);
      long long v19 = *(_OWORD *)v5;
      long long v20 = v10;
      long long v11 = *((_OWORD *)v5 + 3);
      long long v21 = *((_OWORD *)v5 + 2);
      long long v22 = v11;
      uint64_t result = boost::histogram::detail::fill<boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,double,double,double,double,double,double,double,double>(result + 32, v3, (uint64_t)&v19);
      break;
    case 9:
      long long v16 = *((_OWORD *)v5 + 1);
      long long v19 = *(_OWORD *)v5;
      long long v20 = v16;
      long long v17 = *((_OWORD *)v5 + 3);
      long long v21 = *((_OWORD *)v5 + 2);
      long long v22 = v17;
      *(void *)&long long v23 = v5[8];
      uint64_t result = boost::histogram::detail::fill<boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,double,double,double,double,double,double,double,double,double>(result + 32, v3, (uint64_t)&v19);
      break;
    case 10:
      long long v12 = *((_OWORD *)v5 + 1);
      long long v19 = *(_OWORD *)v5;
      long long v20 = v12;
      long long v13 = *((_OWORD *)v5 + 3);
      long long v21 = *((_OWORD *)v5 + 2);
      long long v22 = v13;
      long long v23 = *((_OWORD *)v5 + 4);
      uint64_t result = boost::histogram::detail::fill<boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,double,double,double,double,double,double,double,double,double,double>(result + 32, v3, (uint64_t)&v19);
      break;
    default:
      return result;
  }
  return result;
}

void sub_258F7F778(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void pps::Histogram_Internal::reset(pps::Histogram_Internal *this)
{
}

double pps::Histogram_Internal::valueForPercentileInAxis(pps::Histogram_Internal *this, double a2, signed int a3)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  uint64_t v6 = *((void *)this + 12);
  if (v6)
  {
    uint64_t v7 = (_DWORD *)((char *)this + 96);
    do
    {
      signed int v8 = *(_DWORD *)(v6 + 32);
      BOOL v9 = v8 < a3;
      if (v8 >= a3) {
        long long v10 = (uint64_t *)v6;
      }
      else {
        long long v10 = (uint64_t *)(v6 + 8);
      }
      if (!v9) {
        uint64_t v7 = (_DWORD *)v6;
      }
      uint64_t v6 = *v10;
    }
    while (*v10);
    if (v7 != (_DWORD *)((char *)this + 96))
    {
      double v11 = 0.0;
      if (v7[8] <= a3) {
        return v11;
      }
    }
  }
  if (a2 <= 0.0)
  {
    return pps::Histogram_Internal::minSampleForAxis(this, a3);
  }
  else
  {
    if (a2 < 1.0)
    {
      if (pps::Histogram_Internal::sum(this, 0, 1.0))
      {
        pps::Histogram_Internal::axis(this, a3, v27);
        unint64_t v13 = pps::Histogram_Internal::sum(this, 0, v12);
        pps::Histogram_Internal::binCountsForAxis((int **)this, a3, __p);
        uint64_t v14 = 0;
        unint64_t v15 = 0;
        double v16 = (double)v13;
        unint64_t v17 = vcvtad_u64_f64((double)v13 * a2);
        while (1)
        {
          uint64_t v26 = &v25;
          if (v14 >= (int)_ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNKS2_7variantIJS5_SA_SF_EE4sizeEvEUlRKT_E_RKSG_EEEENSN_11result_typeERSN_((uint64_t)v27))
          {
            double v11 = pps::Histogram_Internal::minRangeForAxis(this, a3);
            goto LABEL_27;
          }
          unint64_t v18 = *((void *)__p[0] + v14);
          if (v18 + v15 >= v17) {
            break;
          }
          ++v14;
          v15 += v18;
        }
        double v21 = pps::Histogram_Internal::leftEdgeOfBin(this, v14, a3);
        int v25 = v14;
        uint64_t v26 = &v25;
        double v22 = _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNKS2_7variantIJS5_SA_SF_EE3binEiEUlRKT_E_RKSG_EEEENSN_11result_typeERSN_(v27, &v26);
        double v11 = v21 + -((double)v15 - a2 * v16) / (double)v18 * (v23 - v22);
LABEL_27:
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content((uint64_t)v27);
      }
      else
      {
        double v20 = pps::Histogram_Internal::maxRangeForAxis(this, a3);
        return (v20 - pps::Histogram_Internal::minRangeForAxis(this, a3)) * a2;
      }
      return v11;
    }
    return pps::Histogram_Internal::maxSampleForAxis(this, a3);
  }
}

void sub_258F7FA74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (__p) {
    operator delete(__p);
  }
  boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content((uint64_t)&a15);
  _Unwind_Resume(a1);
}

double pps::Histogram_Internal::varianceForAxis(pps::Histogram_Internal *this, signed int a2, double a3)
{
  uint64_t v5 = *((void *)this + 12);
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = (_DWORD *)((char *)this + 96);
  do
  {
    signed int v7 = *(_DWORD *)(v5 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      BOOL v9 = (uint64_t *)v5;
    }
    else {
      BOOL v9 = (uint64_t *)(v5 + 8);
    }
    if (!v8) {
      uint64_t v6 = (_DWORD *)v5;
    }
    uint64_t v5 = *v9;
  }
  while (*v9);
  if (v6 == (_DWORD *)((char *)this + 96) || (double v10 = 0.0, v6[8] > a2))
  {
LABEL_11:
    pps::Histogram_Internal::meanForAxis(this, a2, a3);
    double v12 = v11;
    boost::histogram::indexed_range<boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>> const>::indexed_range((uint64_t)v30, (int **)this + 1, 0);
    uint64_t v15 = v31;
    uint64_t v14 = v32;
    uint64_t v27 = v31;
    uint64_t v28 = v32;
    char v29 = v30;
    uint64_t v16 = v33;
    uint64_t v17 = v34;
    double v10 = 0.0;
    BOOL v18 = v32 == v34 && v31 == v33;
    double v19 = 0.0;
    if (!v18)
    {
      do
      {
        int v20 = *(_DWORD *)&v29[16 * a2 + 48];
        double v21 = pps::Histogram_Internal::leftEdgeOfBin(this, v20, a2);
        double v22 = v21 + pps::Histogram_Internal::rightEdgeOfBin(this, v20, a2);
        v26[0] = v14;
        v26[1] = v15;
        unint64_t v35 = v26;
        double v19 = v19
            + (v22 * 0.5 - v12)
            * _ZNK5boost9histogram17unlimited_storageINSt3__19allocatorIcEEE11buffer_type5applyIZNKS5_11reference_tIKS6_EcvdEvEUlPKT_E_JEEEDcOSB_DpOT0_(v14, (uint64_t)&v35, v22)* (v22 * 0.5 - v12);
        boost::histogram::indexed_range<boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>> const>::range_iterator::increment(&v27);
        uint64_t v15 = v27;
        uint64_t v14 = v28;
      }
      while (v28 != v17 || v27 != v16);
    }
    unint64_t v24 = pps::Histogram_Internal::sum(this, 0, v13);
    if (v24) {
      return v19 / (double)v24;
    }
  }
  return v10;
}

_DWORD *boost::histogram::axis::get<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>(int *a1)
{
  uint64_t result = boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::apply_visitor<boost::detail::variant::get_visitor<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>(a1);
  if (!result) {
    boost::throw_exception<boost::bad_get>();
  }
  return result;
}

void sub_258F7FC9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception a9)
{
}

_DWORD *boost::histogram::axis::get<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>(int *a1)
{
  uint64_t result = boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::apply_visitor<boost::detail::variant::get_visitor<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>>(a1);
  if (!result) {
    boost::throw_exception<boost::bad_get>();
  }
  return result;
}

void sub_258F7FD10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception a9)
{
}

int *boost::histogram::axis::get<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>(int *a1)
{
  uint64_t result = boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::apply_visitor<boost::detail::variant::get_visitor<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>(a1);
  if (!result) {
    boost::throw_exception<boost::bad_get>();
  }
  return result;
}

void sub_258F7FD84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception a9)
{
}

void pps::Histogram_Internal::binCategory(pps::Histogram_Internal *this@<X0>, int a2@<W1>, int a3@<W2>, std::string *a4@<X8>)
{
  signed int v7 = (char *)*((void *)this + 12);
  uint64_t v5 = (char *)this + 96;
  uint64_t v6 = v7;
  if (!v7) {
    goto LABEL_11;
  }
  BOOL v8 = v5;
  do
  {
    int v9 = *((_DWORD *)v6 + 8);
    BOOL v10 = v9 < a3;
    if (v9 >= a3) {
      double v11 = (char **)v6;
    }
    else {
      double v11 = (char **)(v6 + 8);
    }
    if (!v10) {
      BOOL v8 = v6;
    }
    uint64_t v6 = *v11;
  }
  while (*v11);
  if (v8 != v5 && *((_DWORD *)v8 + 8) <= a3)
  {
    uint64_t v13 = *((void *)v8 + 5) + 24 * a2;
    if (*(char *)(v13 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a4, *(const std::string::value_type **)v13, *(void *)(v13 + 8));
    }
    else
    {
      long long v14 = *(_OWORD *)v13;
      a4->__r_.__value_.__r.__words[2] = *(void *)(v13 + 16);
      *(_OWORD *)&a4->__r_.__value_.__l.__data_ = v14;
    }
    char v12 = 1;
  }
  else
  {
LABEL_11:
    char v12 = 0;
    a4->__r_.__value_.__s.__data_[0] = 0;
  }
  a4[1].__r_.__value_.__s.__data_[0] = v12;
}

void _ZN5boost9histogram19make_histogram_withINS0_17unlimited_storageINSt3__19allocatorIcEEEENS0_4axis7regularIdNS_11use_defaultES9_S9_EEJENS0_6detail13requires_axisISA_vEEEEDaOT_OT0_DpOT1_(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  int v6 = *a2;
  *(_OWORD *)long long __p = *(_OWORD *)(a2 + 2);
  uint64_t v8 = *((void *)a2 + 3);
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  long long v9 = *((_OWORD *)a2 + 2);
  v3[1] = *(void *)(a1 + 8);
  char v4 = *(unsigned char *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  boost::histogram::histogram<std::tuple<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>,boost::histogram::unlimited_storage<std::allocator<char>>>::histogram<std::tuple<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>,boost::histogram::unlimited_storage<std::allocator<char>>>(a3, (uint64_t)&v6, (uint64_t)v3);
  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::destroy((uint64_t)v3);
  if (SHIBYTE(v8) < 0) {
    operator delete(__p[0]);
  }
}

void sub_258F7FED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t boost::histogram::histogram<std::tuple<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>,boost::histogram::unlimited_storage<std::allocator<char>>>::histogram<std::tuple<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>,boost::histogram::unlimited_storage<std::allocator<char>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  long long v4 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v4;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 8) = 0;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v5 = a1 + 48;
  *(void *)(a1 + 56) = *(void *)(a3 + 8);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a3 + 16);
  *(void *)(a1 + 72) = *(void *)(a3 + 24);
  *(void *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  size_t v8 = 1;
  signed int v7 = &v8;
  boost::mp11::detail::tuple_for_each_impl<std::tuple<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>> const&,0ul,unsigned long boost::histogram::detail::bincount<std::tuple<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>(std::tuple<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>> const&)::{lambda(std::tuple<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>> const&)#1}>((int *)a1, &v7);
  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::make<unsigned char>(v5, v8);
  return a1;
}

void sub_258F7FFA8(_Unwind_Exception *a1)
{
  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::destroy(v2);
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v3);
  }
  _Unwind_Resume(a1);
}

unint64_t *boost::mp11::detail::tuple_for_each_impl<std::tuple<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>> const&,0ul,unsigned long boost::histogram::detail::bincount<std::tuple<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>>>(std::tuple<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>> const&)::{lambda(std::tuple<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>> const&)#1}>(int *a1, unint64_t **a2)
{
  uint64_t result = *a2;
  unint64_t v4 = **a2;
  uint64_t v5 = *a1;
  unint64_t v6 = v4 * (v5 + 2);
  **a2 = v6;
  if ((int)v5 >= -1 && v6 < v4)
  {
    std::runtime_error::runtime_error(&v9, "bincount overflow");
    v9.__vftable = (std::runtime_error_vtbl *)(MEMORY[0x263F8C398] + 16);
    v8[0] = "PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/detail/axes.hpp";
    v8[1] = "auto boost::histogram::detail::bincount(const std::tuple<boost::histogram::axis::regular<>> &)::(anonymous c"
            "lass)::operator()(const auto &) const [a:auto = boost::histogram::axis::regular<>]";
    v8[2] = 167;
    boost::throw_exception<std::overflow_error>((uint64_t)&v9, (uint64_t)v8);
  }
  return result;
}

void boost::throw_exception<std::overflow_error>(uint64_t a1, uint64_t a2)
{
  exception = __cxa_allocate_exception(0x40uLL);
  boost::wrapexcept<std::overflow_error>::wrapexcept(exception, a1, a2);
}

void sub_258F800E0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::wrapexcept<std::overflow_error>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_270702F68;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  MEMORY[0x25A2D4800](a1 + 8);
  return a1;
}

uint64_t boost::wrapexcept<std::overflow_error>::wrapexcept(uint64_t a1, const std::runtime_error *a2, int8x16_t *a3)
{
  *(void *)a1 = &unk_270702F10;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), a2);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)a1 = &unk_270704E30;
  *(void *)(a1 + 8) = &unk_270704E60;
  *(void *)(a1 + 24) = &unk_270704E88;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 56) = a3[1].i32[0];
  *(int8x16_t *)(a1 + 40) = vextq_s8(*a3, *a3, 8uLL);
  return a1;
}

void boost::wrapexcept<std::overflow_error>::clone()
{
}

void sub_258F803D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a9);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a10);
  (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<std::overflow_error>::rethrow(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x40uLL);
  boost::wrapexcept<std::overflow_error>::wrapexcept((uint64_t)exception, a1);
}

void sub_258F80490(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<std::overflow_error>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_270702F68;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  MEMORY[0x25A2D4800](a1 + 8);
  JUMPOUT(0x25A2D4B50);
}

void non-virtual thunk to'boost::wrapexcept<std::overflow_error>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 16) = &unk_270702F68;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  JUMPOUT(0x25A2D4800);
}

{
  uint64_t vars8;

  *(void *)(a1 + 16) = &unk_270702F68;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  MEMORY[0x25A2D4800](a1);
  JUMPOUT(0x25A2D4B50);
}

void non-virtual thunk to'boost::wrapexcept<std::overflow_error>::~wrapexcept(void *a1)
{
  *a1 = &unk_270702F68;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  JUMPOUT(0x25A2D4800);
}

{
  uint64_t vars8;

  *a1 = &unk_270702F68;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  MEMORY[0x25A2D4800](a1 - 2);
  JUMPOUT(0x25A2D4B50);
}

uint64_t boost::wrapexcept<std::overflow_error>::wrapexcept(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270702F10;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), (const std::runtime_error *)(a2 + 8));
  *(void *)(a1 + 8) = MEMORY[0x263F8C398] + 16;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = &unk_270702F68;
  *(void *)(a1 + 32) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(void *)a1 = &unk_270704E30;
  *(void *)(a1 + 8) = &unk_270704E60;
  *(void *)(a1 + 24) = &unk_270704E88;
  return a1;
}

void boost::histogram::make_histogram_with<boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::detail::requires_sequence_of_any_axis<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,void>>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v3[1] = *(void *)(a1 + 8);
  char v4 = *(unsigned char *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>(a3, a2, (uint64_t)v3);
  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::destroy((uint64_t)v3);
}

void sub_258F80850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v4 = a1 + 24;
  *(void *)(a1 + 32) = *(void *)(a3 + 8);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a3 + 16);
  *(void *)(a1 + 48) = *(void *)(a3 + 24);
  *(void *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  size_t v5 = boost::histogram::detail::bincount<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>((int **)a1);
  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::make<unsigned char>(v4, v5);
  return a1;
}

void sub_258F808F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::destroy(v2);
  std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t boost::histogram::detail::bincount<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>(int **a1)
{
  uint64_t result = 1;
  size_t v5 = &v6;
  uint64_t v6 = 1;
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1 != v4)
  {
    do
    {
      signed int v7 = (unint64_t **)&v5;
      boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::apply_visitor<boost::detail::variant::result_wrapper1<unsigned long boost::histogram::detail::bincount<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>(std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>> const&)::{lambda(std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>> const&)#1},boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>> const&>>(v3, &v7);
      v3 += 14;
    }
    while (v3 != v4);
    return v6;
  }
  return result;
}

unint64_t ***boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::apply_visitor<boost::detail::variant::result_wrapper1<unsigned long boost::histogram::detail::bincount<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>(std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>> const&)::{lambda(std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>> const&)#1},boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>> const&>>(int *a1, unint64_t ***a2)
{
  uint64_t v2 = a1 + 2;
  switch(*a1 ^ (*a1 >> 31))
  {
    case 0:
      uint64_t result = boost::detail::variant::result_wrapper1<unsigned long boost::histogram::detail::bincount<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>(std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>> const&)::{lambda(std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>> const&)#1},boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>> const&>::operator()<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default> const&>(a2, v2);
      break;
    case 1:
      uint64_t result = boost::detail::variant::result_wrapper1<unsigned long boost::histogram::detail::bincount<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>(std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>> const&)::{lambda(std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>> const&)#1},boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>> const&>::operator()<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>> const&>(a2, v2);
      break;
    case 2:
      uint64_t result = boost::detail::variant::result_wrapper1<unsigned long boost::histogram::detail::bincount<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>(std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>> const&)::{lambda(std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>> const&)#1},boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>> const&>::operator()<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>> const&>(a2, v2);
      break;
    default:
      boost::detail::variant::forced_return<void>();
  }
  return result;
}

unint64_t ***boost::detail::variant::result_wrapper1<unsigned long boost::histogram::detail::bincount<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>(std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>> const&)::{lambda(std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>> const&)#1},boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>> const&>::operator()<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default> const&>(unint64_t ***result, int *a2)
{
  uint64_t v2 = **result;
  unint64_t v3 = *v2;
  uint64_t v4 = *a2;
  unint64_t v5 = *v2 * (v4 + 2);
  unint64_t *v2 = v5;
  if ((int)v4 >= -1 && v5 < v3)
  {
    std::runtime_error::runtime_error(&v7, "bincount overflow");
    v7.__vftable = (std::runtime_error_vtbl *)(MEMORY[0x263F8C398] + 16);
    v6[0] = "PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/detail/axes.hpp";
    v6[1] = "auto boost::histogram::detail::bincount(const std::vector<boost::histogram::axis::variant<boost::histogram::"
            "axis::regular<>, boost::histogram::axis::variable<>, boost::histogram::axis::integer<int, boost::use_default"
            ", boost::histogram::axis::option::bit<1>>>> &)::(anonymous class)::operator()(const auto &) const [a:auto = "
            "boost::histogram::axis::regular<>]";
    unint64_t v6[2] = 167;
    boost::throw_exception<std::overflow_error>((uint64_t)&v7, (uint64_t)v6);
  }
  return result;
}

unint64_t ***boost::detail::variant::result_wrapper1<unsigned long boost::histogram::detail::bincount<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>(std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>> const&)::{lambda(std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>> const&)#1},boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>> const&>::operator()<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>> const&>(unint64_t ***result, void *a2)
{
  uint64_t v2 = **result;
  unint64_t v3 = *v2;
  uint64_t v4 = a2[1] - *a2;
  unint64_t v5 = (((v4 << 29) + 0x100000000) >> 32) * *v2;
  unint64_t *v2 = v5;
  if ((v4 & 0x400000000) == 0 && v5 < v3)
  {
    std::runtime_error::runtime_error(&v7, "bincount overflow");
    v7.__vftable = (std::runtime_error_vtbl *)(MEMORY[0x263F8C398] + 16);
    v6[0] = "PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/detail/axes.hpp";
    v6[1] = "auto boost::histogram::detail::bincount(const std::vector<boost::histogram::axis::variant<boost::histogram::"
            "axis::regular<>, boost::histogram::axis::variable<>, boost::histogram::axis::integer<int, boost::use_default"
            ", boost::histogram::axis::option::bit<1>>>> &)::(anonymous class)::operator()(const auto &) const [a:auto = "
            "boost::histogram::axis::variable<>]";
    unint64_t v6[2] = 167;
    boost::throw_exception<std::overflow_error>((uint64_t)&v7, (uint64_t)v6);
  }
  return result;
}

unint64_t ***boost::detail::variant::result_wrapper1<unsigned long boost::histogram::detail::bincount<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>(std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>> const&)::{lambda(std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>> const&)#1},boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>> const&>::operator()<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>> const&>(unint64_t ***result, int *a2)
{
  uint64_t v2 = **result;
  unint64_t v3 = *v2;
  uint64_t v4 = *a2;
  unint64_t v5 = v3 + v3 * v4;
  unint64_t *v2 = v5;
  if ((v4 & 0x80000000) == 0 && v5 < v3)
  {
    std::runtime_error::runtime_error(&v7, "bincount overflow");
    v7.__vftable = (std::runtime_error_vtbl *)(MEMORY[0x263F8C398] + 16);
    v6[0] = "PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/detail/axes.hpp";
    v6[1] = "auto boost::histogram::detail::bincount(const std::vector<boost::histogram::axis::variant<boost::histogram::"
            "axis::regular<>, boost::histogram::axis::variable<>, boost::histogram::axis::integer<int, boost::use_default"
            ", boost::histogram::axis::option::bit<1>>>> &)::(anonymous class)::operator()(const auto &) const [a:auto = "
            "boost::histogram::axis::integer<int, boost::use_default, boost::histogram::axis::option::bit<1>>]";
    unint64_t v6[2] = 167;
    boost::throw_exception<std::overflow_error>((uint64_t)&v7, (uint64_t)v6);
  }
  return result;
}

void std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__vdeallocate(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 56;
        boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content(v3);
      }
      while ((void *)v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__assign_with_size[abi:ne180100]<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>*,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  std::runtime_error v9 = *(void **)a1;
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__vdeallocate((void **)a1);
    if (a4 > 0x492492492492492) {
      std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3)) >= 0x249249249249249) {
      unint64_t v11 = 0x492492492492492;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__vallocate[abi:ne180100]((void *)a1, v11);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>*,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>*,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>*>(v8, a2, a3, *(void *)(a1 + 8));
    goto LABEL_11;
  }
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    uint64_t v13 = a2 + 8 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3);
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>> *,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>> *,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>> *,0>(a2, v13, (uint64_t)v9);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>*,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>*,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>*>(v8, v13, a3, *(void *)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>> *,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>> *,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>> *,0>(a2, a3, (uint64_t)v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 56;
      boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content(v16);
    }
    while (v16 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_258F80EA4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_258F80EAC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x492492492492493) {
    std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[56 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>*,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>*,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::variant(a4 + v7, a2 + v7);
      v7 += 56;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_258F80F6C(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 56;
    do
    {
      boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content(v4 + v2);
      v2 -= 56;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>> *,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>> *,boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>> *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::variant_assign(a3, v4);
      v4 += 56;
      a3 += 56;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

std::string *boost::detail::variant::assign_storage::internal_visit<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>(const std::string **a1, std::string *a2)
{
  uint64_t v3 = *a1;
  if (*a1 != a2) {
    std::vector<double>::__assign_with_size[abi:ne180100]<double *,double *>((char *)a2, v3->__r_.__value_.__l.__data_, v3->__r_.__value_.__l.__size_, (uint64_t)(v3->__r_.__value_.__l.__size_ - v3->__r_.__value_.__r.__words[0]) >> 3);
  }
  return std::string::operator=(a2 + 1, v3 + 1);
}

void boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::assigner::assign_impl<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::has_fallback_type_>(uint64_t a1, int *a2)
{
  int v6 = *a2;
  if (*((char *)a2 + 31) < 0) {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
  }
  else {
    std::string __p = *(std::string *)(a2 + 2);
  }
  long long v8 = *((_OWORD *)a2 + 2);
  boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content(*(void *)a1);
  uint64_t v4 = *(void *)a1;
  *(_DWORD *)(v4 + 8) = v6;
  std::string::size_type v5 = __p.__r_.__value_.__r.__words[2];
  *(_OWORD *)(v4 + 16) = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(void *)(v4 + 32) = v5;
  memset(&__p, 0, sizeof(__p));
  *(_OWORD *)(v4 + 40) = v8;
  **(_DWORD **)a1 = *(_DWORD *)(a1 + 8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::assigner::assign_impl<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::has_fallback_type_>(uint64_t a1, uint64_t a2)
{
  v6[0] = 0;
  v6[1] = 0;
  uint64_t v7 = 0;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(v6, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  if (*(char *)(a2 + 47) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
  }
  else {
    std::string __p = *(std::string *)(a2 + 24);
  }
  boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content(*(void *)a1);
  uint64_t v4 = *(void *)a1;
  *(void *)(v4 + 16) = 0;
  *(void *)(v4 + 24) = 0;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)v6;
  *(void *)(v4 + 24) = v7;
  v6[0] = 0;
  v6[1] = 0;
  uint64_t v7 = 0;
  std::string::size_type v5 = __p.__r_.__value_.__r.__words[2];
  *(_OWORD *)(v4 + 32) = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(void *)(v4 + 48) = v5;
  memset(&__p, 0, sizeof(__p));
  **(_DWORD **)a1 = *(_DWORD *)(a1 + 8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v6[0])
    {
      v6[1] = v6[0];
      operator delete(v6[0]);
    }
  }
}

void sub_258F813C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::assigner::assign_impl<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>,boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::has_fallback_type_>(uint64_t a1, int *a2)
{
  int v6 = *a2;
  if (*((char *)a2 + 31) < 0) {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
  }
  else {
    std::string __p = *(std::string *)(a2 + 2);
  }
  int v8 = a2[8];
  boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::destroy_content(*(void *)a1);
  uint64_t v4 = *(void *)a1;
  *(_DWORD *)(v4 + 8) = v6;
  std::string::size_type v5 = __p.__r_.__value_.__r.__words[2];
  *(_OWORD *)(v4 + 16) = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(void *)(v4 + 32) = v5;
  memset(&__p, 0, sizeof(__p));
  *(_DWORD *)(v4 + 40) = v8;
  **(_DWORD **)a1 = *(_DWORD *)(a1 + 8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

uint64_t boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  v10[0] = (uint64_t)&v6;
  v10[1] = a2;
  _ZNK5boost9histogram17unlimited_storageINSt3__19allocatorIcEEE11buffer_type5applyIZNS6_C1ERKS6_EUlPT_E_JEEEDcOSA_DpOT0_(a2, v10);
  if (&v6 != (uint64_t *)a1)
  {
    uint64_t v3 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v7;
    uint64_t v7 = v3;
    LOBYTE(v3) = *(unsigned char *)(a1 + 16);
    *(unsigned char *)(a1 + 16) = v8;
    char v8 = v3;
    uint64_t v4 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v9;
    uint64_t v9 = v4;
  }
  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::destroy((uint64_t)&v6);
  return a1;
}

void _ZNK5boost9histogram17unlimited_storageINSt3__19allocatorIcEEE11buffer_type5applyIZNS6_C1ERKS6_EUlPT_E_JEEEDcOSA_DpOT0_(uint64_t a1, uint64_t *a2)
{
  switch(*(unsigned char *)(a1 + 16))
  {
    case 0:
      boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::make<unsigned char,unsigned char *>(*a2, *(void *)(a2[1] + 8), *(const void **)(a1 + 24));
      break;
    case 1:
      boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::make<unsigned short,unsigned short *>(*a2, *(void *)(a2[1] + 8), *(const void **)(a1 + 24));
      break;
    case 2:
      boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::make<unsigned int,unsigned int *>(*a2, *(void *)(a2[1] + 8), *(const void **)(a1 + 24));
      break;
    case 3:
      boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::make<unsigned long long,unsigned long long *>(*a2, *(void *)(a2[1] + 8), *(const void **)(a1 + 24));
      break;
    case 4:
      boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::make<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>*>(*a2, *(void *)(a2[1] + 8), *(void *)(a1 + 24));
      break;
    default:
      boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::make<double,double *>(*a2, *(void *)(a2[1] + 8), *(const void **)(a1 + 24));
      break;
  }
}

void boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::make<unsigned char,unsigned char *>(uint64_t a1, size_t __sz, const void *a3)
{
  if (__sz) {
    std::string::size_type v5 = boost::histogram::detail::create_buffer<std::allocator<unsigned char>,unsigned char *>((int)&v6, __sz, a3);
  }
  else {
    std::string::size_type v5 = 0;
  }
  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::destroy(a1);
  *(void *)(a1 + 8) = __sz;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = v5;
}

void *boost::histogram::detail::create_buffer<std::allocator<unsigned char>,unsigned char *>(int a1, size_t __sz, const void *a3)
{
  if (!__sz) {
    boost::histogram::detail::create_buffer<std::allocator<unsigned char>,unsigned char *>();
  }
  std::string::size_type v5 = operator new(__sz);
  return memcpy(v5, a3, __sz);
}

void boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::make<unsigned short,unsigned short *>(uint64_t a1, uint64_t a2, const void *a3)
{
  if (a2) {
    std::string::size_type v5 = boost::histogram::detail::create_buffer<std::allocator<unsigned short>,unsigned short *>((uint64_t)&v6, a2, a3);
  }
  else {
    std::string::size_type v5 = 0;
  }
  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::destroy(a1);
  *(void *)(a1 + 8) = a2;
  *(unsigned char *)(a1 + 16) = 1;
  *(void *)(a1 + 24) = v5;
}

void *boost::histogram::detail::create_buffer<std::allocator<unsigned short>,unsigned short *>(uint64_t a1, uint64_t a2, const void *a3)
{
  if (!a2) {
    boost::histogram::detail::create_buffer<std::allocator<unsigned char>,unsigned char *>();
  }
  if (a2 < 0) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  size_t v4 = 2 * a2;
  std::string::size_type v5 = operator new(2 * a2);
  return memcpy(v5, a3, v4);
}

void boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::make<unsigned int,unsigned int *>(uint64_t a1, unint64_t a2, const void *a3)
{
  if (a2) {
    std::string::size_type v5 = boost::histogram::detail::create_buffer<std::allocator<unsigned int>,unsigned int *>((uint64_t)&v6, a2, a3);
  }
  else {
    std::string::size_type v5 = 0;
  }
  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::destroy(a1);
  *(void *)(a1 + 8) = a2;
  *(unsigned char *)(a1 + 16) = 2;
  *(void *)(a1 + 24) = v5;
}

void *boost::histogram::detail::create_buffer<std::allocator<unsigned int>,unsigned int *>(uint64_t a1, unint64_t a2, const void *a3)
{
  if (!a2) {
    boost::histogram::detail::create_buffer<std::allocator<unsigned char>,unsigned char *>();
  }
  if (a2 >> 62) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  size_t v4 = 4 * a2;
  std::string::size_type v5 = operator new(4 * a2);
  return memcpy(v5, a3, v4);
}

void boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::make<unsigned long long,unsigned long long *>(uint64_t a1, unint64_t a2, const void *a3)
{
  if (a2) {
    std::string::size_type v5 = boost::histogram::detail::create_buffer<std::allocator<unsigned long long>,unsigned long long *>((uint64_t)&v6, a2, a3);
  }
  else {
    std::string::size_type v5 = 0;
  }
  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::destroy(a1);
  *(void *)(a1 + 8) = a2;
  *(unsigned char *)(a1 + 16) = 3;
  *(void *)(a1 + 24) = v5;
}

void *boost::histogram::detail::create_buffer<std::allocator<unsigned long long>,unsigned long long *>(uint64_t a1, unint64_t a2, const void *a3)
{
  if (!a2) {
    boost::histogram::detail::create_buffer<std::allocator<unsigned char>,unsigned char *>();
  }
  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  size_t v4 = 8 * a2;
  std::string::size_type v5 = operator new(8 * a2);
  return memcpy(v5, a3, v4);
}

void boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::make<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>*>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (a2) {
    std::string::size_type v5 = boost::histogram::detail::create_buffer<std::allocator<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>*>((uint64_t)&v6, a2, a3);
  }
  else {
    std::string::size_type v5 = 0;
  }
  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::destroy(a1);
  *(void *)(a1 + 8) = a2;
  *(unsigned char *)(a1 + 16) = 4;
  *(void *)(a1 + 24) = v5;
}

char *boost::histogram::detail::create_buffer<std::allocator<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>,boost::histogram::detail::mp_int<std::allocator<unsigned long long>>*>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (!a2) {
    boost::histogram::detail::create_buffer<std::allocator<unsigned char>,unsigned char *>();
  }
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v4 = 24 * a2;
  std::string::size_type v5 = (char *)operator new(24 * a2);
  for (uint64_t i = 0; v4 != i; i += 24)
  {
    uint64_t v7 = &v5[i];
    *(void *)uint64_t v7 = 0;
    *((void *)v7 + 1) = 0;
    *((void *)v7 + 2) = 0;
    char v8 = *(const void **)(a3 + i);
    uint64_t v9 = *(void *)(a3 + i + 8);
    std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(v7, v8, v9, (v9 - (uint64_t)v8) >> 3);
  }
  return v5;
}

void sub_258F819F4(_Unwind_Exception *a1)
{
}

void *std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    char v6 = result;
    uint64_t result = std::vector<double>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_258F81A68(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::make<double,double *>(uint64_t a1, unint64_t a2, const void *a3)
{
  if (a2) {
    std::string::size_type v5 = boost::histogram::detail::create_buffer<std::allocator<unsigned long long>,unsigned long long *>((uint64_t)&v6, a2, a3);
  }
  else {
    std::string::size_type v5 = 0;
  }
  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::destroy(a1);
  *(void *)(a1 + 8) = a2;
  *(unsigned char *)(a1 + 16) = 5;
  *(void *)(a1 + 24) = v5;
}

double _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNKS2_7variantIJS5_SA_SF_EE3binEiEUlRKT_E_RKSG_EEEENSN_11result_typeERSN_(_DWORD *a1, int **a2)
{
  uint64_t v2 = a1 + 2;
  switch(*a1 ^ ((int)*a1 >> 31))
  {
    case 0:
      _ZN5boost9histogram6detail11static_if_cILb0EZZNKS0_4axis7variantIJNS3_7regularIdNS_11use_defaultES6_S6_EENS3_8variableIdS6_S6_NSt3__19allocatorIdEEEENS3_7integerIiS6_NS3_6option3bitILj1EEEEEEE3binEiENKUlRKT_E_clIS7_EEDaSL_EUlSL_E_ZZNKSI_3binEiENKSN_IS7_EESO_SL_EUlSL_E0_JRKS7_EEEDcOT0_OT1_DpOT2_();
      break;
    case 1:
      double result = _ZNK5boost6detail7variant15result_wrapper1IZNKS_9histogram4axis7variantIJNS4_7regularIdNS_11use_defaultES7_S7_EENS4_8variableIdS7_S7_NSt3__19allocatorIdEEEENS4_7integerIiS7_NS4_6option3bitILj1EEEEEEE3binEiEUlRKT_E_RKNS_7variantIS8_JSD_SI_EEEEclIRKSD_EENS4_15polymorphic_binIdEEOSK_(a2, v2);
      break;
    case 2:
      int v4 = **a2;
      if (v4 < 0)
      {
        double result = -2147483650.0;
      }
      else if (*(_DWORD *)v2 >= v4)
      {
        double result = (double)(a1[10] + v4);
      }
      else
      {
        double result = 2147483650.0;
      }
      break;
    default:
      boost::detail::variant::forced_return<void>();
  }
  return result;
}

double _ZNK5boost6detail7variant15result_wrapper1IZNKS_9histogram4axis7variantIJNS4_7regularIdNS_11use_defaultES7_S7_EENS4_8variableIdS7_S7_NSt3__19allocatorIdEEEENS4_7integerIiS7_NS4_6option3bitILj1EEEEEEE3binEiEUlRKT_E_RKNS_7variantIS8_JSD_SI_EEEEclIRKSD_EENS4_15polymorphic_binIdEEOSK_(int **a1, void *a2)
{
  int v3 = **a1;
  double v4 = boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>::value(a2, (double)v3);
  boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>::value(a2, (double)(v3 + 1));
  return v4;
}

double boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>::value(void *a1, double a2)
{
  if (a2 < 0.0) {
    return -INFINITY;
  }
  uint64_t v4 = a1[1];
  double v5 = (double)(int)(((unint64_t)(v4 - *a1) >> 3) - 1);
  if (v5 == a2) {
    return *(double *)(v4 - 8);
  }
  if (v5 < a2) {
    return INFINITY;
  }
  return (a2 - (double)(int)a2) * *(double *)(*a1 + 8 * (int)a2 + 8)
       + (1.0 - (a2 - (double)(int)a2)) * *(double *)(*a1 + 8 * (int)a2);
}

uint64_t boost::histogram::indexed_range<boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>> const>::indexed_range(uint64_t a1, int **a2, int a3)
{
  *(void *)a1 = a2;
  *(unsigned char *)(a1 + 8) = a3 == 1;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = a2 + 3;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 16);
  uint64_t v11 = a1 + 48;
  uint64_t v4 = *a2;
  double v5 = a2[1];
  unint64_t v6 = a1 + 48 + 0xFFFFFFFB6DB6DB70 * ((unint64_t)((char *)v5 - (char *)*a2) >> 3) - 16;
  uint64_t v9 = 1;
  unint64_t v10 = v6;
  v8[0] = a1;
  v8[1] = &v11;
  v8[2] = &v9;
  for (void v8[3] = &v10; v4 != v5; v4 += 14)
  {
    uint64_t v12 = v8;
    _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_13indexed_rangeIKNS1_9histogramINS7_6vectorINS2_7variantIJS5_SA_SF_EEENS8_ISP_EEEENS1_17unlimited_storageINS8_IcEEEEEEEC1ERSW_NS1_8coverageEEUlRKT_E_RKSG_EEEENS10_11result_typeERS10_(v4, &v12);
  }
  return a1;
}

uint64_t **_ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_13indexed_rangeIKNS1_9histogramINS7_6vectorINS2_7variantIJS5_SA_SF_EEENS8_ISP_EEEENS1_17unlimited_storageINS8_IcEEEEEEEC1ERSW_NS1_8coverageEEUlRKT_E_RKSG_EEEENS10_11result_typeERS10_(int *a1, uint64_t **a2)
{
  uint64_t v2 = a1 + 2;
  switch(*a1 ^ (*a1 >> 31))
  {
    case 0:
      double result = _ZNK5boost6detail7variant15result_wrapper1IZNS_9histogram13indexed_rangeIKNS3_9histogramINSt3__16vectorINS3_4axis7variantIJNS8_7regularIdNS_11use_defaultESB_SB_EENS8_8variableIdSB_SB_NS6_9allocatorIdEEEENS8_7integerIiSB_NS8_6option3bitILj1EEEEEEEENSE_ISM_EEEENS3_17unlimited_storageINSE_IcEEEEEEEC1ERST_NS3_8coverageEEUlRKT_E_RKNS_7variantISC_JSG_SL_EEEEclIRKSC_EEvOSX_(a2, v2);
      break;
    case 1:
      double result = _ZNK5boost6detail7variant15result_wrapper1IZNS_9histogram13indexed_rangeIKNS3_9histogramINSt3__16vectorINS3_4axis7variantIJNS8_7regularIdNS_11use_defaultESB_SB_EENS8_8variableIdSB_SB_NS6_9allocatorIdEEEENS8_7integerIiSB_NS8_6option3bitILj1EEEEEEEENSE_ISM_EEEENS3_17unlimited_storageINSE_IcEEEEEEEC1ERST_NS3_8coverageEEUlRKT_E_RKNS_7variantISC_JSG_SL_EEEEclIRKSG_EEvOSX_(a2, v2);
      break;
    case 2:
      double result = _ZNK5boost6detail7variant15result_wrapper1IZNS_9histogram13indexed_rangeIKNS3_9histogramINSt3__16vectorINS3_4axis7variantIJNS8_7regularIdNS_11use_defaultESB_SB_EENS8_8variableIdSB_SB_NS6_9allocatorIdEEEENS8_7integerIiSB_NS8_6option3bitILj1EEEEEEEENSE_ISM_EEEENS3_17unlimited_storageINSE_IcEEEEEEEC1ERST_NS3_8coverageEEUlRKT_E_RKNS_7variantISC_JSG_SL_EEEEclIRKSL_EEvOSX_(a2, v2);
      break;
    default:
      boost::detail::variant::forced_return<void>();
  }
  return result;
}

uint64_t **_ZNK5boost6detail7variant15result_wrapper1IZNS_9histogram13indexed_rangeIKNS3_9histogramINSt3__16vectorINS3_4axis7variantIJNS8_7regularIdNS_11use_defaultESB_SB_EENS8_8variableIdSB_SB_NS6_9allocatorIdEEEENS8_7integerIiSB_NS8_6option3bitILj1EEEEEEEENSE_ISM_EEEENS3_17unlimited_storageINSE_IcEEEEEEEC1ERST_NS3_8coverageEEUlRKT_E_RKNS_7variantISC_JSG_SL_EEEEclIRKSC_EEvOSX_(uint64_t **result, int *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = *a2;
  uint64_t v4 = v3 + 2;
  uint64_t v5 = **result;
  unint64_t v6 = (_DWORD **)(*result)[1];
  uint64_t v7 = *v6;
  uint64_t v8 = *(unsigned __int8 *)(v5 + 8);
  uint64_t v9 = v3 + v8;
  void v7[2] = v9;
  v7[3] = v4;
  *uint64_t v7 = -(int)v8;
  v7[1] = -(int)v8;
  uint64_t v10 = v8 ^ 1;
  uint64_t v12 = (void *)v2[2];
  uint64_t v11 = (void *)v2[3];
  *(void *)(v5 + 16) += *v12 * v10;
  if ((unint64_t)v7 >= *v11) {
    uint64_t v13 = v9 + 1;
  }
  else {
    uint64_t v13 = v10;
  }
  *(void *)(v5 + 32) += v13 * *v12;
  *v12 *= v4;
  *unint64_t v6 = v7 + 4;
  return result;
}

uint64_t **_ZNK5boost6detail7variant15result_wrapper1IZNS_9histogram13indexed_rangeIKNS3_9histogramINSt3__16vectorINS3_4axis7variantIJNS8_7regularIdNS_11use_defaultESB_SB_EENS8_8variableIdSB_SB_NS6_9allocatorIdEEEENS8_7integerIiSB_NS8_6option3bitILj1EEEEEEEENSE_ISM_EEEENS3_17unlimited_storageINSE_IcEEEEEEEC1ERST_NS3_8coverageEEUlRKT_E_RKNS_7variantISC_JSG_SL_EEEEclIRKSG_EEvOSX_(uint64_t **result, void *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = (a2[1] - *a2) >> 3;
  int v4 = v3 + 1;
  uint64_t v5 = **result;
  unint64_t v6 = (_DWORD **)(*result)[1];
  uint64_t v7 = *v6;
  int v8 = *(unsigned __int8 *)(v5 + 8);
  int v9 = v8 + v3;
  void v7[2] = v9 - 1;
  v7[3] = v4;
  *uint64_t v7 = -v8;
  v7[1] = -v8;
  uint64_t v10 = v8 ^ 1u;
  uint64_t v12 = (void *)v2[2];
  uint64_t v11 = (void *)v2[3];
  *(void *)(v5 + 16) += *v12 * v10;
  if ((unint64_t)v7 >= *v11) {
    uint64_t v13 = v9;
  }
  else {
    uint64_t v13 = v10;
  }
  *(void *)(v5 + 32) += v13 * *v12;
  *v12 *= v4;
  *unint64_t v6 = v7 + 4;
  return result;
}

uint64_t **_ZNK5boost6detail7variant15result_wrapper1IZNS_9histogram13indexed_rangeIKNS3_9histogramINSt3__16vectorINS3_4axis7variantIJNS8_7regularIdNS_11use_defaultESB_SB_EENS8_8variableIdSB_SB_NS6_9allocatorIdEEEENS8_7integerIiSB_NS8_6option3bitILj1EEEEEEEENSE_ISM_EEEENS3_17unlimited_storageINSE_IcEEEEEEEC1ERST_NS3_8coverageEEUlRKT_E_RKNS_7variantISC_JSG_SL_EEEEclIRKSL_EEvOSX_(uint64_t **result, int *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = *a2;
  uint64_t v4 = v3 + 1;
  uint64_t v6 = **result;
  uint64_t v5 = (unint64_t *)(*result)[1];
  unint64_t v7 = *v5;
  if (*(unsigned char *)(v6 + 8)) {
    int v8 = v3 + 1;
  }
  else {
    int v8 = *a2;
  }
  *(_DWORD *)(v7 + 8) = v8;
  *(_DWORD *)(v7 + 12) = v4;
  *(void *)unint64_t v7 = 0;
  int v9 = (void *)v2[2];
  if (v7 >= *(void *)v2[3]) {
    *(void *)(v6 + 32) += *v9 * v8;
  }
  *v9 *= v4;
  unint64_t *v5 = v7 + 16;
  return result;
}

uint64_t boost::histogram::detail::fill<boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,double>(uint64_t a1, uint64_t a2, const char *a3)
{
  uint64_t v4 = boost::histogram::detail::args_to_index<0u,1u,boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,std::tuple<double>>(a1, a2, a3);
  if (!v5) {
    return *(void *)(a1 + 8);
  }
  uint64_t v6 = v4;
  uint64_t v8 = v4;
  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::apply<boost::histogram::unlimited_storage<std::allocator<char>>::incrementor,boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type&,unsigned long &>(a1, (uint64_t)&v9, a1, &v8);
  return v6;
}

uint64_t boost::histogram::detail::args_to_index<0u,1u,boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,std::tuple<double>>(uint64_t a1, uint64_t a2, const char *a3)
{
  long long v9 = xmmword_258FB60A0;
  uint64_t v3 = *(int **)a2;
  if (*(void *)(a2 + 8) - *(void *)a2 != 56)
  {
    std::logic_error::logic_error(&v8, "number of arguments != histogram rank");
    v8.__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    uint64_t v5 = (long long *)"PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/detail/linearize.hpp";
    uint64_t v6 = "optional_index boost::histogram::detail::args_to_index(std::false_type, S &, const T &, const U &) [I = 0U, N ="
         " 1U, S = boost::histogram::unlimited_storage<>, T = std::vector<boost::histogram::axis::variant<boost::histogra"
         "m::axis::regular<>, boost::histogram::axis::variable<>, boost::histogram::axis::integer<int, boost::use_default"
         ", boost::histogram::axis::option::bit<1>>>>, U = std::tuple<double>]";
    uint64_t v7 = 192;
    boost::throw_exception<std::invalid_argument>((uint64_t)&v8, (uint64_t)&v5);
  }
  uint64_t v5 = &v9;
  uint64_t v6 = a3;
  v8.__vftable = (std::logic_error_vtbl *)&v5;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v3, (uint64_t ***)&v8);
  return v9;
}

void boost::throw_exception<std::invalid_argument>(uint64_t a1, uint64_t a2)
{
  exception = __cxa_allocate_exception(0x40uLL);
  boost::wrapexcept<std::invalid_argument>::wrapexcept(exception, a1, a2);
}

void sub_258F82220(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::histogram::detail::cat<std::string,char [35],std::string,char [5],std::string>(uint64_t a1, char *a2, uint64_t a3, char *a4, uint64_t a5)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v14);
  int v10 = *(char *)(a1 + 23);
  if (v10 >= 0) {
    uint64_t v11 = a1;
  }
  else {
    uint64_t v11 = *(void *)a1;
  }
  if (v10 >= 0) {
    uint64_t v12 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v12 = *(void *)(a1 + 8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v11, v12);
  boost::histogram::detail::cat_impl<char [35],std::string,char [5],std::string>(v14, a2, a3, a4, a5);
  std::stringbuf::str();
  v14[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v14 + *(void *)(v14[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v14[1] = MEMORY[0x263F8C318] + 16;
  if (v15 < 0) {
    operator delete((void *)v14[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x25A2D4B00](&v16);
}

void sub_258F823B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void *boost::histogram::detail::cat_impl<char [35],std::string,char [5],std::string>(void *a1, char *__s, uint64_t a3, char *a4, uint64_t a5)
{
  size_t v10 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)__s, v10);
  int v11 = *(char *)(a3 + 23);
  if (v11 >= 0) {
    uint64_t v12 = a3;
  }
  else {
    uint64_t v12 = *(void *)a3;
  }
  if (v11 >= 0) {
    uint64_t v13 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v13 = *(void *)(a3 + 8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, v12, v13);
  return boost::histogram::detail::cat_impl<char [5],std::string>(a1, a4, a5);
}

void *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(void *a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x25A2D4990](v13, a1);
  if (v13[0])
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *(void *)(v6 + 40);
    int v8 = *(_DWORD *)(v6 + 8);
    int v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      size_t v10 = std::locale::use_facet(&v14, MEMORY[0x263F8C108]);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v11 = a2 + a3;
    }
    else {
      uint64_t v11 = a2;
    }
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9)) {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x25A2D49A0](v13);
  return a1;
}

void sub_258F82598(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  MEMORY[0x25A2D49A0](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x258F82578);
}

void sub_258F825EC(_Unwind_Exception *a1)
{
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      int64_t v12 = 0;
    }
    else {
      int64_t v12 = v11 - (a4 - a2);
    }
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1) != a3 - a2) {
      return 0;
    }
    if (v12 >= 1)
    {
      std::string::basic_string[abi:ne180100](__p, v12, __c);
      uint64_t v13 = v18 >= 0 ? __p : (void **)__p[0];
      uint64_t v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(void *)v6 + 96))(v6, v13, v12);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if (v14 != v12) {
        return 0;
      }
    }
    uint64_t v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a3, v15) == v15) {
      *(void *)(a5 + 24) = 0;
    }
    else {
      return 0;
    }
  }
  return v6;
}

void sub_258F8276C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::string::basic_string[abi:ne180100](void *__b, size_t __len, int __c)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((unsigned char *)__b + 23) = __len;
    uint64_t v6 = __b;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memset(v6, __c, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __b;
}

void *boost::histogram::detail::cat_impl<char [5],std::string>(void *a1, char *__s, uint64_t a3)
{
  size_t v6 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)__s, v6);
  int v7 = *(char *)(a3 + 23);
  if (v7 >= 0) {
    uint64_t v8 = a3;
  }
  else {
    uint64_t v8 = *(void *)a3;
  }
  if (v7 >= 0) {
    uint64_t v9 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v9 = *(void *)(a3 + 8);
  }
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, v8, v9);
}

boost::core::scoped_demangled_name *boost::core::scoped_demangled_name::scoped_demangled_name(boost::core::scoped_demangled_name *this, const char *lpmangled)
{
  int status = 0;
  size_t v4 = 0;
  *(void *)this = __cxa_demangle(lpmangled, 0, &v4, &status);
  return this;
}

uint64_t boost::wrapexcept<std::invalid_argument>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_270702F68;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  MEMORY[0x25A2D4820](a1 + 8);
  return a1;
}

uint64_t boost::wrapexcept<std::invalid_argument>::wrapexcept(uint64_t a1, const std::logic_error *a2, int8x16_t *a3)
{
  *(void *)a1 = &unk_270702F10;
  std::logic_error::logic_error((std::logic_error *)(a1 + 8), a2);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)a1 = &unk_270704EF0;
  *(void *)(a1 + 8) = &unk_270704F20;
  *(void *)(a1 + 24) = &unk_270704F48;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 56) = a3[1].i32[0];
  *(int8x16_t *)(a1 + 40) = vextq_s8(*a3, *a3, 8uLL);
  return a1;
}

void boost::wrapexcept<std::invalid_argument>::clone()
{
}

void sub_258F82BD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a9);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a10);
  (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<std::invalid_argument>::rethrow(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x40uLL);
  boost::wrapexcept<std::invalid_argument>::wrapexcept((uint64_t)exception, a1);
}

void sub_258F82C94(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<std::invalid_argument>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_270702F68;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  MEMORY[0x25A2D4820](a1 + 8);
  JUMPOUT(0x25A2D4B50);
}

void non-virtual thunk to'boost::wrapexcept<std::invalid_argument>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 16) = &unk_270702F68;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  JUMPOUT(0x25A2D4820);
}

{
  uint64_t vars8;

  *(void *)(a1 + 16) = &unk_270702F68;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  MEMORY[0x25A2D4820](a1);
  JUMPOUT(0x25A2D4B50);
}

void non-virtual thunk to'boost::wrapexcept<std::invalid_argument>::~wrapexcept(void *a1)
{
  *a1 = &unk_270702F68;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  JUMPOUT(0x25A2D4820);
}

{
  uint64_t vars8;

  *a1 = &unk_270702F68;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  MEMORY[0x25A2D4820](a1 - 2);
  JUMPOUT(0x25A2D4B50);
}

uint64_t boost::wrapexcept<std::invalid_argument>::wrapexcept(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270702F10;
  std::logic_error::logic_error((std::logic_error *)(a1 + 8), (const std::logic_error *)(a2 + 8));
  *(void *)(a1 + 8) = MEMORY[0x263F8C3A0] + 16;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = &unk_270702F68;
  *(void *)(a1 + 32) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(void *)a1 = &unk_270704EF0;
  *(void *)(a1 + 8) = &unk_270704F20;
  *(void *)(a1 + 24) = &unk_270704F48;
  return a1;
}

uint64_t _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(int *a1, uint64_t ***a2)
{
  uint64_t v2 = a1 + 2;
  switch(*a1 ^ (*a1 >> 31))
  {
    case 0:
      uint64_t v3 = **a2;
      uint64_t v4 = (double *)(*a2)[1];
      uint64_t result = (uint64_t)boost::histogram::detail::linearize_value<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,double>(v3, (uint64_t)v2, v4);
      break;
    case 1:
      size_t v6 = **a2;
      int v7 = (double *)(*a2)[1];
      uint64_t result = boost::histogram::detail::linearize_value<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,double>(v6, (uint64_t)v2, v7);
      break;
    case 2:
      uint64_t result = (uint64_t)_ZNK5boost6detail7variant15result_wrapper1IZNS_9histogram6detail15linearize_valueIJNS3_4axis7regularIdNS_11use_defaultES8_S8_EENS6_8variableIdS8_S8_NSt3__19allocatorIdEEEENS6_7integerIiS8_NS6_6option3bitILj1EEEEEEdEEvRNS4_14optional_indexERKNS6_7variantIJDpT_EEERKT0_EUlRKT_E_RKNS_7variantIS9_JSE_SJ_EEEEclIRKSJ_EEvOSV_(a2, v2);
      break;
    default:
      boost::detail::variant::forced_return<void>();
  }
  return result;
}

void *boost::histogram::detail::linearize_value<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,double>(void *result, uint64_t a2, double *a3)
{
  double v3 = (*a3 - *(double *)(a2 + 32)) / *(double *)(a2 + 40);
  if (v3 >= 1.0)
  {
    int v4 = *(_DWORD *)a2;
    int v5 = *(_DWORD *)a2;
  }
  else
  {
    int v4 = *(_DWORD *)a2;
    if (v3 >= 0.0) {
      int v5 = (int)(v3 * (double)v4);
    }
    else {
      int v5 = -1;
    }
  }
  LODWORD(v6) = v4 + 2;
  uint64_t v7 = result[1];
  BOOL v8 = v5 + 1 >= (int)v6 || v5 <= -2;
  uint64_t v6 = (int)v6;
  if (v8) {
    uint64_t v6 = 0;
  }
  *result += v7 * (v5 + 1);
  result[1] = v6 * v7;
  return result;
}

uint64_t boost::histogram::detail::linearize_value<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,double>(void *a1, uint64_t a2, double *a3)
{
  uint64_t result = boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>::index((double **)a2, *a3);
  unint64_t v6 = *(void *)(a2 + 8) - *(void *)a2;
  uint64_t v7 = a1[1];
  BOOL v8 = (int)result >= (int)(v6 >> 3) || (int)result <= -2;
  uint64_t v9 = (uint64_t)((v6 << 29) + 0x100000000) >> 32;
  if (v8) {
    uint64_t v9 = 0;
  }
  *a1 += v7 * ((int)result + 1);
  a1[1] = v9 * v7;
  return result;
}

uint64_t boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>::index(double **a1, double a2)
{
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    unint64_t v3 = v2 - *a1;
    uint64_t v2 = *a1;
    do
    {
      unint64_t v4 = v3 >> 1;
      int v5 = &v2[v3 >> 1];
      double v7 = *v5;
      unint64_t v6 = v5 + 1;
      v3 += ~(v3 >> 1);
      if (v7 > a2) {
        unint64_t v3 = v4;
      }
      else {
        uint64_t v2 = v6;
      }
    }
    while (v3);
  }
  return ((unint64_t)((char *)v2 - (char *)*a1) >> 3) - 1;
}

uint64_t ***_ZNK5boost6detail7variant15result_wrapper1IZNS_9histogram6detail15linearize_valueIJNS3_4axis7regularIdNS_11use_defaultES8_S8_EENS6_8variableIdS8_S8_NSt3__19allocatorIdEEEENS6_7integerIiS8_NS6_6option3bitILj1EEEEEEdEEvRNS4_14optional_indexERKNS6_7variantIJDpT_EEERKT0_EUlRKT_E_RKNS_7variantIS9_JSE_SJ_EEEEclIRKSJ_EEvOSV_(uint64_t ***result, int *a2)
{
  uint64_t v2 = **result;
  double v3 = *(double *)(*result)[1];
  int v4 = a2[8];
  int v5 = (int)v3 - v4;
  BOOL v11 = (int)v3 < v4;
  uint64_t v6 = *a2;
  if (v11) {
    int v7 = -1;
  }
  else {
    int v7 = v5;
  }
  if (v5 >= (int)v6) {
    int v8 = *a2;
  }
  else {
    int v8 = v7;
  }
  uint64_t v9 = v2[1];
  uint64_t v10 = *v2 + v9 * v8;
  BOOL v11 = v8 > (int)v6 || v8 <= -1;
  if (v11) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = v6 + 1;
  }
  uint64_t *v2 = v10;
  v2[1] = v12 * v9;
  return result;
}

void boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::apply<boost::histogram::unlimited_storage<std::allocator<char>>::incrementor,boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type&,unsigned long &>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  switch(*(unsigned char *)(a1 + 16))
  {
    case 0:
      int v5 = *(unsigned __int8 **)(a1 + 24);
      uint64_t v6 = *a4;
      int v7 = v5[*a4];
      if (v7 == 255)
      {
        boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::make<unsigned short,unsigned char *>(a3, *(void *)(a3 + 8), v5);
        ++*(_WORD *)(*(void *)(a3 + 24) + 2 * v6);
      }
      else
      {
        v5[v6] = v7 + 1;
      }
      break;
    case 1:
      int v8 = *(unsigned __int16 **)(a1 + 24);
      uint64_t v9 = *a4;
      int v10 = v8[*a4];
      if (v10 == 0xFFFF)
      {
        boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::make<unsigned int,unsigned short *>(a3, *(void *)(a3 + 8), v8);
        ++*(_DWORD *)(*(void *)(a3 + 24) + 4 * v9);
      }
      else
      {
        v8[v9] = v10 + 1;
      }
      break;
    case 2:
      BOOL v11 = *(unsigned int **)(a1 + 24);
      uint64_t v12 = *a4;
      unsigned int v13 = v11[*a4];
      if (v13 == -1)
      {
        boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::make<unsigned long long,unsigned int *>(a3, *(void *)(a3 + 8), v11);
        ++*(void *)(*(void *)(a3 + 24) + 8 * v12);
      }
      else
      {
        v11[v12] = v13 + 1;
      }
      break;
    case 3:
      uint64_t v14 = *(uint64_t **)(a1 + 24);
      uint64_t v15 = *a4;
      boost::histogram::unlimited_storage<std::allocator<char>>::incrementor::operator()<unsigned long long,boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type>(a2, v14, a3, v15);
      break;
    case 4:
      uint64_t v16 = *(void *)(a1 + 24) + 24 * *a4;
      boost::histogram::detail::mp_int<std::allocator<unsigned long long>>::operator++(v16);
      break;
    default:
      *(double *)(*(void *)(a1 + 24) + 8 * *a4) = *(double *)(*(void *)(a1 + 24) + 8 * *a4) + 1.0;
      break;
  }
}

void boost::histogram::unlimited_storage<std::allocator<char>>::incrementor::operator()<unsigned long long,boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a2[a4];
  if (v6 == -1)
  {
    boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::make<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>,unsigned long long *>(a3, *(void *)(a3 + 8), a2);
    uint64_t v7 = *(void *)(a3 + 24) + 24 * a4;
    boost::histogram::detail::mp_int<std::allocator<unsigned long long>>::operator++(v7);
  }
  else
  {
    a2[a4] = v6 + 1;
  }
}

void boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::make<unsigned short,unsigned char *>(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  if (a2) {
    int v5 = boost::histogram::detail::create_buffer<std::allocator<unsigned short>,unsigned char *>((uint64_t)&v6, a2, a3);
  }
  else {
    int v5 = 0;
  }
  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::destroy(a1);
  *(void *)(a1 + 8) = a2;
  *(unsigned char *)(a1 + 16) = 1;
  *(void *)(a1 + 24) = v5;
}

char *boost::histogram::detail::create_buffer<std::allocator<unsigned short>,unsigned char *>(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  if (!a2) {
    boost::histogram::detail::create_buffer<std::allocator<unsigned char>,unsigned char *>();
  }
  if (a2 < 0) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v4 = 2 * a2;
  uint64_t result = (char *)operator new(2 * a2);
  uint64_t v6 = 0;
  do
  {
    __int16 v7 = *a3++;
    *(_WORD *)&result[v6] = v7;
    v6 += 2;
  }
  while (v4 != v6);
  return result;
}

void boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::make<unsigned int,unsigned short *>(uint64_t a1, unint64_t a2, unsigned __int16 *a3)
{
  if (a2) {
    int v5 = boost::histogram::detail::create_buffer<std::allocator<unsigned int>,unsigned short *>((uint64_t)&v6, a2, a3);
  }
  else {
    int v5 = 0;
  }
  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::destroy(a1);
  *(void *)(a1 + 8) = a2;
  *(unsigned char *)(a1 + 16) = 2;
  *(void *)(a1 + 24) = v5;
}

char *boost::histogram::detail::create_buffer<std::allocator<unsigned int>,unsigned short *>(uint64_t a1, unint64_t a2, unsigned __int16 *a3)
{
  if (!a2) {
    boost::histogram::detail::create_buffer<std::allocator<unsigned char>,unsigned char *>();
  }
  if (a2 >> 62) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v4 = 4 * a2;
  uint64_t result = (char *)operator new(4 * a2);
  uint64_t v6 = 0;
  do
  {
    int v7 = *a3++;
    *(_DWORD *)&result[v6] = v7;
    v6 += 4;
  }
  while (v4 != v6);
  return result;
}

void boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::make<unsigned long long,unsigned int *>(uint64_t a1, unint64_t a2, unsigned int *a3)
{
  if (a2) {
    int v5 = boost::histogram::detail::create_buffer<std::allocator<unsigned long long>,unsigned int *>((uint64_t)&v6, a2, a3);
  }
  else {
    int v5 = 0;
  }
  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::destroy(a1);
  *(void *)(a1 + 8) = a2;
  *(unsigned char *)(a1 + 16) = 3;
  *(void *)(a1 + 24) = v5;
}

char *boost::histogram::detail::create_buffer<std::allocator<unsigned long long>,unsigned int *>(uint64_t a1, unint64_t a2, unsigned int *a3)
{
  if (!a2) {
    boost::histogram::detail::create_buffer<std::allocator<unsigned char>,unsigned char *>();
  }
  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v4 = 8 * a2;
  uint64_t result = (char *)operator new(8 * a2);
  uint64_t v6 = 0;
  do
  {
    unsigned int v7 = *a3++;
    *(void *)&result[v6] = v7;
    v6 += 8;
  }
  while (v4 != v6);
  return result;
}

void boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::make<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>,unsigned long long *>(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  if (a2) {
    int v5 = boost::histogram::detail::create_buffer<std::allocator<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>,unsigned long long *>((uint64_t)&v6, a2, a3);
  }
  else {
    int v5 = 0;
  }
  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::destroy(a1);
  *(void *)(a1 + 8) = a2;
  *(unsigned char *)(a1 + 16) = 4;
  *(void *)(a1 + 24) = v5;
}

uint64_t boost::histogram::detail::mp_int<std::allocator<unsigned long long>>::operator++(uint64_t a1)
{
  uint64_t v2 = *(char **)a1;
  double v3 = *(char **)(a1 + 8);
  if (v3 == v2) {
    boost::histogram::detail::mp_int<std::allocator<unsigned long long>>::operator++();
  }
  uint64_t v5 = 0;
  uint64_t v6 = (v3 - v2) >> 3;
  do
  {
    uint64_t v7 = *(void *)&v2[8 * v5];
    if (v7 != -1)
    {
      *(void *)&v2[8 * v5] = v7 + 1;
      return a1;
    }
    *(void *)&v2[8 * v5++] = 0;
  }
  while (v6 != v5);
  unint64_t v8 = *(void *)(a1 + 16);
  if ((unint64_t)v3 >= v8)
  {
    unint64_t v10 = v6 + 1;
    if ((unint64_t)(v6 + 1) >> 61) {
      std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v8 - (void)v2;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      unsigned int v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a1 + 16, v12);
      uint64_t v2 = *(char **)a1;
      double v3 = *(char **)(a1 + 8);
    }
    else
    {
      unsigned int v13 = 0;
    }
    uint64_t v14 = &v13[8 * v6];
    uint64_t v15 = &v13[8 * v12];
    *(void *)uint64_t v14 = 1;
    uint64_t v9 = v14 + 8;
    while (v3 != v2)
    {
      uint64_t v16 = *((void *)v3 - 1);
      v3 -= 8;
      *((void *)v14 - 1) = v16;
      v14 -= 8;
    }
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v9;
    *(void *)(a1 + 16) = v15;
    if (v2) {
      operator delete(v2);
    }
  }
  else
  {
    *(void *)double v3 = 1;
    uint64_t v9 = v3 + 8;
  }
  *(void *)(a1 + 8) = v9;
  return a1;
}

char *boost::histogram::detail::create_buffer<std::allocator<boost::histogram::detail::mp_int<std::allocator<unsigned long long>>>,unsigned long long *>(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  if (!a2) {
    boost::histogram::detail::create_buffer<std::allocator<unsigned char>,unsigned char *>();
  }
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v4 = 3 * a2;
  uint64_t v5 = (char *)operator new(24 * a2);
  uint64_t v6 = 0;
  uint64_t v7 = &v5[8 * v4];
  do
  {
    unint64_t v8 = &v5[v6];
    uint64_t v9 = *a3;
    *((void *)v8 + 1) = 0;
    *((void *)v8 + 2) = 0;
    *(void *)unint64_t v8 = 0;
    unint64_t v10 = operator new(8uLL);
    *(void *)unint64_t v8 = v10;
    *v10++ = v9;
    ++a3;
    *((void *)v8 + 1) = v10;
    *((void *)v8 + 2) = v10;
    v6 += 24;
  }
  while (v8 + 24 != v7);
  return v5;
}

void sub_258F83914(_Unwind_Exception *a1)
{
}

uint64_t boost::histogram::detail::fill<boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,double,double>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = boost::histogram::detail::args_to_index<0u,2u,boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,std::tuple<double,double>>(a1, a2, a3);
  if (!v5) {
    return *(void *)(a1 + 8);
  }
  uint64_t v6 = v4;
  uint64_t v8 = v4;
  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::apply<boost::histogram::unlimited_storage<std::allocator<char>>::incrementor,boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type&,unsigned long &>(a1, (uint64_t)&v9, a1, &v8);
  return v6;
}

uint64_t boost::histogram::detail::args_to_index<0u,2u,boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,std::tuple<double,double>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v10 = xmmword_258FB60A0;
  double v3 = *(int **)a2;
  uint64_t v4 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  if (v4 != 2)
  {
    if (v4 == 1)
    {
      v6.__vftable = (std::logic_error_vtbl *)a3;
      v6.__imp_.__imp_ = (const char *)(a3 + 8);
      uint64_t v7 = &v10;
      uint64_t v8 = (const char *)&v6;
      uint64_t v11 = &v7;
      _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_ENS7_5tupleIJRKdSP_EEEEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENS12_11result_typeERS12_(v3);
    }
    std::logic_error::logic_error(&v6, "number of arguments != histogram rank");
    v6.__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    uint64_t v7 = (long long *)"PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/detail/linearize.hpp";
    uint64_t v8 = "optional_index boost::histogram::detail::args_to_index(std::false_type, S &, const T &, const U &) [I = 0U, N ="
         " 2U, S = boost::histogram::unlimited_storage<>, T = std::vector<boost::histogram::axis::variant<boost::histogra"
         "m::axis::regular<>, boost::histogram::axis::variable<>, boost::histogram::axis::integer<int, boost::use_default"
         ", boost::histogram::axis::option::bit<1>>>>, U = std::tuple<double, double>]";
    uint64_t v9 = 192;
    boost::throw_exception<std::invalid_argument>((uint64_t)&v6, (uint64_t)&v7);
  }
  uint64_t v7 = &v10;
  uint64_t v8 = (const char *)a2;
  uint64_t v9 = a3;
  boost::mp11::detail::mp_for_each_impl<std::integral_constant<unsigned long,0ul>,std::integral_constant<unsigned long,1ul>,boost::histogram::detail::optional_index boost::histogram::detail::args_to_index<0u,2u,boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,std::tuple<double,double>>(std::integral_constant<BOOL,false>,boost::histogram::unlimited_storage<std::allocator<char>> &,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>> const&,std::tuple<double,double> const&)::{lambda(std::integral_constant<unsigned long,0ul>,std::integral_constant<unsigned long,1ul>)#1}>((uint64_t *)&v7, (uint64_t)&v6);
  return v10;
}

void _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_ENS7_5tupleIJRKdSP_EEEEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENS12_11result_typeERS12_(int *a1)
{
  switch(*a1 ^ (*a1 >> 31))
  {
    case 0:
      boost::histogram::detail::linearize_value<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,std::tuple<double const&,double const&>>();
    case 1:
      boost::histogram::detail::linearize_value<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,std::tuple<double const&,double const&>>();
    case 2:
      boost::histogram::detail::linearize_value<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>,std::tuple<double const&,double const&>>();
    default:
      boost::detail::variant::forced_return<void>();
  }
}

void boost::histogram::detail::linearize_value<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,std::tuple<double const&,double const&>>()
{
}

uint64_t sub_258F83BC4(uint64_t result)
{
  uint64_t v3 = v2[1];
  if ((int)result + 1 >= *v1 + 2 || (int)result <= -2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *v1 + 2;
  }
  *v2 += v3 * ((int)result + 1);
  v2[1] = v5 * v3;
  return result;
}

void _ZZN5boost9histogram4axis6traits5indexINS1_7regularIdNS_11use_defaultES5_S5_EENSt3__15tupleIJRKdSA_EEEEEDaRKT_RKT0_ENKUlRKS6_E_clESK_()
{
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v9, (const char *)(0x8000000258FB1BABLL & 0x7FFFFFFFFFFFFFFFLL));
  if (v9.__r_.__value_.__r.__words[0]) {
    v0 = (char *)v9.__r_.__value_.__r.__words[0];
  }
  else {
    v0 = (char *)(0x8000000258FB1BABLL & 0x7FFFFFFFFFFFFFFFLL);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, v0);
  free(v9.__r_.__value_.__l.__data_);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v9, (const char *)(0x8000000258FB6104 & 0x7FFFFFFFFFFFFFFFLL));
  if (v9.__r_.__value_.__r.__words[0]) {
    uint64_t v1 = (char *)v9.__r_.__value_.__r.__words[0];
  }
  else {
    uint64_t v1 = (char *)(0x8000000258FB6104 & 0x7FFFFFFFFFFFFFFFLL);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, v1);
  free(v9.__r_.__value_.__l.__data_);
  uint64_t v2 = (const char *)(*(void *)(MEMORY[0x263F8C240] + 8) & 0x7FFFFFFFFFFFFFFFLL);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v9, v2);
  if (v9.__r_.__value_.__r.__words[0]) {
    uint64_t v3 = (char *)v9.__r_.__value_.__r.__words[0];
  }
  else {
    uint64_t v3 = (char *)v2;
  }
  std::string::basic_string[abi:ne180100]<0>(v6, v3);
  free(v9.__r_.__value_.__l.__data_);
  boost::histogram::detail::cat<std::string,char [35],std::string,char [5],std::string>((uint64_t)v8, ": cannot convert argument of type ", (uint64_t)v7, " to ", (uint64_t)v6);
  uint64_t v4 = std::logic_error::logic_error(&v10, &v9);
  v10.__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
  v5[0] = "PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/axis/traits.hpp";
  v5[1] = "auto boost::histogram::axis::traits::index(const boost::histogram::axis::regular<> &, const std::tuple<const d"
          "ouble &, const double &> &)::(anonymous class)::operator()(const Axis &) const";
  v5[2] = 190;
  boost::throw_exception<std::invalid_argument>((uint64_t)v4, (uint64_t)v5);
}

void boost::histogram::detail::linearize_value<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,std::tuple<double const&,double const&>>()
{
}

uint64_t sub_258F83DF8(uint64_t result)
{
  unint64_t v3 = v1[1] - *v1;
  uint64_t v4 = v2[1];
  BOOL v5 = (int)result >= (int)(v3 >> 3) || (int)result <= -2;
  uint64_t v6 = (uint64_t)((v3 << 29) + 0x100000000) >> 32;
  if (v5) {
    uint64_t v6 = 0;
  }
  *v2 += v4 * ((int)result + 1);
  v2[1] = v6 * v4;
  return result;
}

void _ZZN5boost9histogram4axis6traits5indexINS1_8variableIdNS_11use_defaultES5_NSt3__19allocatorIdEEEENS6_5tupleIJRKdSC_EEEEEDaRKT_RKT0_ENKUlRKS9_E_clESM_()
{
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v9, (const char *)(0x8000000258FB2129 & 0x7FFFFFFFFFFFFFFFLL));
  if (v9.__r_.__value_.__r.__words[0]) {
    v0 = (char *)v9.__r_.__value_.__r.__words[0];
  }
  else {
    v0 = (char *)(0x8000000258FB2129 & 0x7FFFFFFFFFFFFFFFLL);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, v0);
  free(v9.__r_.__value_.__l.__data_);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v9, (const char *)(0x8000000258FB6104 & 0x7FFFFFFFFFFFFFFFLL));
  if (v9.__r_.__value_.__r.__words[0]) {
    uint64_t v1 = (char *)v9.__r_.__value_.__r.__words[0];
  }
  else {
    uint64_t v1 = (char *)(0x8000000258FB6104 & 0x7FFFFFFFFFFFFFFFLL);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, v1);
  free(v9.__r_.__value_.__l.__data_);
  uint64_t v2 = (const char *)(*(void *)(MEMORY[0x263F8C240] + 8) & 0x7FFFFFFFFFFFFFFFLL);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v9, v2);
  if (v9.__r_.__value_.__r.__words[0]) {
    unint64_t v3 = (char *)v9.__r_.__value_.__r.__words[0];
  }
  else {
    unint64_t v3 = (char *)v2;
  }
  std::string::basic_string[abi:ne180100]<0>(v6, v3);
  free(v9.__r_.__value_.__l.__data_);
  boost::histogram::detail::cat<std::string,char [35],std::string,char [5],std::string>((uint64_t)v8, ": cannot convert argument of type ", (uint64_t)v7, " to ", (uint64_t)v6);
  uint64_t v4 = std::logic_error::logic_error(&v10, &v9);
  v10.__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
  v5[0] = "PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/axis/traits.hpp";
  v5[1] = "auto boost::histogram::axis::traits::index(const boost::histogram::axis::variable<> &, const std::tuple<const "
          "double &, const double &> &)::(anonymous class)::operator()(const Axis &) const";
  v5[2] = 190;
  boost::throw_exception<std::invalid_argument>((uint64_t)v4, (uint64_t)v5);
}

void boost::histogram::detail::linearize_value<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>,std::tuple<double const&,double const&>>()
{
}

uint64_t sub_258F8403C(uint64_t result)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v2[1];
  if ((int)result > (int)v3 || (int)result <= -1) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = v3 + 1;
  }
  *v2 += v4 * (int)result;
  v2[1] = v6 * v4;
  return result;
}

void _ZZN5boost9histogram4axis6traits5indexINS1_7integerIiNS_11use_defaultENS1_6option3bitILj1EEEEENSt3__15tupleIJRKdSD_EEEEEDaRKT_RKT0_ENKUlRKS9_E_clESN_()
{
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v9, (const char *)(0x8000000258FB26FDLL & 0x7FFFFFFFFFFFFFFFLL));
  if (v9.__r_.__value_.__r.__words[0]) {
    v0 = (char *)v9.__r_.__value_.__r.__words[0];
  }
  else {
    v0 = (char *)(0x8000000258FB26FDLL & 0x7FFFFFFFFFFFFFFFLL);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, v0);
  free(v9.__r_.__value_.__l.__data_);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v9, (const char *)(0x8000000258FB6104 & 0x7FFFFFFFFFFFFFFFLL));
  if (v9.__r_.__value_.__r.__words[0]) {
    uint64_t v1 = (char *)v9.__r_.__value_.__r.__words[0];
  }
  else {
    uint64_t v1 = (char *)(0x8000000258FB6104 & 0x7FFFFFFFFFFFFFFFLL);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, v1);
  free(v9.__r_.__value_.__l.__data_);
  uint64_t v2 = (const char *)(*(void *)(MEMORY[0x263F8C258] + 8) & 0x7FFFFFFFFFFFFFFFLL);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v9, v2);
  if (v9.__r_.__value_.__r.__words[0]) {
    uint64_t v3 = (char *)v9.__r_.__value_.__r.__words[0];
  }
  else {
    uint64_t v3 = (char *)v2;
  }
  std::string::basic_string[abi:ne180100]<0>(v6, v3);
  free(v9.__r_.__value_.__l.__data_);
  boost::histogram::detail::cat<std::string,char [35],std::string,char [5],std::string>((uint64_t)v8, ": cannot convert argument of type ", (uint64_t)v7, " to ", (uint64_t)v6);
  uint64_t v4 = std::logic_error::logic_error(&v10, &v9);
  v10.__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
  v5[0] = "PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/axis/traits.hpp";
  v5[1] = "auto boost::histogram::axis::traits::index(const boost::histogram::axis::integer<int, boost::use_default, boos"
          "t::histogram::axis::option::bit<1>> &, const std::tuple<const double &, const double &> &)::(anonymous class):"
          ":operator()(const Axis &) const";
  v5[2] = 190;
  boost::throw_exception<std::invalid_argument>((uint64_t)v4, (uint64_t)v5);
}

__n128 boost::mp11::detail::mp_for_each_impl<std::integral_constant<unsigned long,0ul>,std::integral_constant<unsigned long,1ul>,boost::histogram::detail::optional_index boost::histogram::detail::args_to_index<0u,2u,boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,std::tuple<double,double>>(std::integral_constant<BOOL,false>,boost::histogram::unlimited_storage<std::allocator<char>> &,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>> const&,std::tuple<double,double> const&)::{lambda(std::integral_constant<unsigned long,0ul>,std::integral_constant<unsigned long,1ul>)#1}>@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *a1;
  BOOL v5 = *(int **)a1[1];
  uint64_t v6 = a1[2];
  uint64_t v10 = v4;
  uint64_t v11 = v6;
  unint64_t v12 = (uint64_t **)&v10;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v5, &v12);
  uint64_t v7 = (int *)(*(void *)a1[1] + 56);
  uint64_t v8 = a1[2] + 8;
  uint64_t v10 = *a1;
  uint64_t v11 = v8;
  unint64_t v12 = (uint64_t **)&v10;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v7, &v12);
  __n128 result = *(__n128 *)a1;
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(void *)(a2 + 16) = a1[2];
  return result;
}

uint64_t boost::histogram::detail::fill<boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,double,double,double>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = boost::histogram::detail::args_to_index<0u,3u,boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,std::tuple<double,double,double>>(a1, a2, a3);
  if (!v5) {
    return *(void *)(a1 + 8);
  }
  uint64_t v6 = v4;
  uint64_t v8 = v4;
  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::apply<boost::histogram::unlimited_storage<std::allocator<char>>::incrementor,boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type&,unsigned long &>(a1, (uint64_t)&v9, a1, &v8);
  return v6;
}

uint64_t boost::histogram::detail::args_to_index<0u,3u,boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,std::tuple<double,double,double>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v10 = xmmword_258FB60A0;
  uint64_t v3 = *(int **)a2;
  uint64_t v4 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  if (v4 != 3)
  {
    if (v4 == 1)
    {
      uint64_t v7 = (long long *)a3;
      uint64_t v8 = (const char *)(a3 + 8);
      uint64_t v9 = a3 + 16;
      v6.__vftable = (std::logic_error_vtbl *)&v10;
      v6.__imp_.__imp_ = (const char *)&v7;
      uint64_t v11 = &v6;
      _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_ENS7_5tupleIJRKdSP_SP_EEEEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENS12_11result_typeERS12_(v3);
    }
    std::logic_error::logic_error(&v6, "number of arguments != histogram rank");
    v6.__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    uint64_t v7 = (long long *)"PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/detail/linearize.hpp";
    uint64_t v8 = "optional_index boost::histogram::detail::args_to_index(std::false_type, S &, const T &, const U &) [I = 0U, N ="
         " 3U, S = boost::histogram::unlimited_storage<>, T = std::vector<boost::histogram::axis::variant<boost::histogra"
         "m::axis::regular<>, boost::histogram::axis::variable<>, boost::histogram::axis::integer<int, boost::use_default"
         ", boost::histogram::axis::option::bit<1>>>>, U = std::tuple<double, double, double>]";
    uint64_t v9 = 192;
    boost::throw_exception<std::invalid_argument>((uint64_t)&v6, (uint64_t)&v7);
  }
  uint64_t v7 = &v10;
  uint64_t v8 = (const char *)a2;
  uint64_t v9 = a3;
  boost::mp11::detail::mp_for_each_impl<std::integral_constant<unsigned long,0ul>,std::integral_constant<unsigned long,1ul>,std::integral_constant<unsigned long,2ul>,boost::histogram::detail::optional_index boost::histogram::detail::args_to_index<0u,3u,boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,std::tuple<double,double,double>>(std::integral_constant<BOOL,false>,boost::histogram::unlimited_storage<std::allocator<char>> &,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>> const&,std::tuple<double,double,double> const&)::{lambda(std::integral_constant<unsigned long,0ul>,std::integral_constant<unsigned long,1ul>,std::integral_constant<unsigned long,2ul>)#1}>((uint64_t *)&v7, (uint64_t)&v6);
  return v10;
}

void _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_ENS7_5tupleIJRKdSP_SP_EEEEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENS12_11result_typeERS12_(int *a1)
{
  switch(*a1 ^ (*a1 >> 31))
  {
    case 0:
      boost::histogram::detail::linearize_value<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,std::tuple<double const&,double const&,double const&>>();
    case 1:
      boost::histogram::detail::linearize_value<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,std::tuple<double const&,double const&,double const&>>();
    case 2:
      boost::histogram::detail::linearize_value<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>,std::tuple<double const&,double const&,double const&>>();
    default:
      boost::detail::variant::forced_return<void>();
  }
}

void boost::histogram::detail::linearize_value<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,std::tuple<double const&,double const&,double const&>>()
{
}

uint64_t sub_258F84570(uint64_t result)
{
  uint64_t v3 = v2[1];
  if ((int)result + 1 >= *v1 + 2 || (int)result <= -2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *v1 + 2;
  }
  *v2 += v3 * ((int)result + 1);
  v2[1] = v5 * v3;
  return result;
}

void _ZZN5boost9histogram4axis6traits5indexINS1_7regularIdNS_11use_defaultES5_S5_EENSt3__15tupleIJRKdSA_SA_EEEEEDaRKT_RKT0_ENKUlRKS6_E_clESK_()
{
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v9, (const char *)(0x8000000258FB1BABLL & 0x7FFFFFFFFFFFFFFFLL));
  if (v9.__r_.__value_.__r.__words[0]) {
    v0 = (char *)v9.__r_.__value_.__r.__words[0];
  }
  else {
    v0 = (char *)(0x8000000258FB1BABLL & 0x7FFFFFFFFFFFFFFFLL);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, v0);
  free(v9.__r_.__value_.__l.__data_);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v9, (const char *)(0x8000000258FB611DLL & 0x7FFFFFFFFFFFFFFFLL));
  if (v9.__r_.__value_.__r.__words[0]) {
    uint64_t v1 = (char *)v9.__r_.__value_.__r.__words[0];
  }
  else {
    uint64_t v1 = (char *)(0x8000000258FB611DLL & 0x7FFFFFFFFFFFFFFFLL);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, v1);
  free(v9.__r_.__value_.__l.__data_);
  uint64_t v2 = (const char *)(*(void *)(MEMORY[0x263F8C240] + 8) & 0x7FFFFFFFFFFFFFFFLL);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v9, v2);
  if (v9.__r_.__value_.__r.__words[0]) {
    uint64_t v3 = (char *)v9.__r_.__value_.__r.__words[0];
  }
  else {
    uint64_t v3 = (char *)v2;
  }
  std::string::basic_string[abi:ne180100]<0>(v6, v3);
  free(v9.__r_.__value_.__l.__data_);
  boost::histogram::detail::cat<std::string,char [35],std::string,char [5],std::string>((uint64_t)v8, ": cannot convert argument of type ", (uint64_t)v7, " to ", (uint64_t)v6);
  uint64_t v4 = std::logic_error::logic_error(&v10, &v9);
  v10.__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
  v5[0] = "PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/axis/traits.hpp";
  v5[1] = "auto boost::histogram::axis::traits::index(const boost::histogram::axis::regular<> &, const std::tuple<const d"
          "ouble &, const double &, const double &> &)::(anonymous class)::operator()(const Axis &) const";
  v5[2] = 190;
  boost::throw_exception<std::invalid_argument>((uint64_t)v4, (uint64_t)v5);
}

void boost::histogram::detail::linearize_value<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,std::tuple<double const&,double const&,double const&>>()
{
}

uint64_t sub_258F847A4(uint64_t result)
{
  unint64_t v3 = v1[1] - *v1;
  uint64_t v4 = v2[1];
  BOOL v5 = (int)result >= (int)(v3 >> 3) || (int)result <= -2;
  uint64_t v6 = (uint64_t)((v3 << 29) + 0x100000000) >> 32;
  if (v5) {
    uint64_t v6 = 0;
  }
  *v2 += v4 * ((int)result + 1);
  v2[1] = v6 * v4;
  return result;
}

void _ZZN5boost9histogram4axis6traits5indexINS1_8variableIdNS_11use_defaultES5_NSt3__19allocatorIdEEEENS6_5tupleIJRKdSC_SC_EEEEEDaRKT_RKT0_ENKUlRKS9_E_clESM_()
{
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v9, (const char *)(0x8000000258FB2129 & 0x7FFFFFFFFFFFFFFFLL));
  if (v9.__r_.__value_.__r.__words[0]) {
    v0 = (char *)v9.__r_.__value_.__r.__words[0];
  }
  else {
    v0 = (char *)(0x8000000258FB2129 & 0x7FFFFFFFFFFFFFFFLL);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, v0);
  free(v9.__r_.__value_.__l.__data_);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v9, (const char *)(0x8000000258FB611DLL & 0x7FFFFFFFFFFFFFFFLL));
  if (v9.__r_.__value_.__r.__words[0]) {
    uint64_t v1 = (char *)v9.__r_.__value_.__r.__words[0];
  }
  else {
    uint64_t v1 = (char *)(0x8000000258FB611DLL & 0x7FFFFFFFFFFFFFFFLL);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, v1);
  free(v9.__r_.__value_.__l.__data_);
  uint64_t v2 = (const char *)(*(void *)(MEMORY[0x263F8C240] + 8) & 0x7FFFFFFFFFFFFFFFLL);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v9, v2);
  if (v9.__r_.__value_.__r.__words[0]) {
    unint64_t v3 = (char *)v9.__r_.__value_.__r.__words[0];
  }
  else {
    unint64_t v3 = (char *)v2;
  }
  std::string::basic_string[abi:ne180100]<0>(v6, v3);
  free(v9.__r_.__value_.__l.__data_);
  boost::histogram::detail::cat<std::string,char [35],std::string,char [5],std::string>((uint64_t)v8, ": cannot convert argument of type ", (uint64_t)v7, " to ", (uint64_t)v6);
  uint64_t v4 = std::logic_error::logic_error(&v10, &v9);
  v10.__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
  v5[0] = "PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/axis/traits.hpp";
  v5[1] = "auto boost::histogram::axis::traits::index(const boost::histogram::axis::variable<> &, const std::tuple<const "
          "double &, const double &, const double &> &)::(anonymous class)::operator()(const Axis &) const";
  v5[2] = 190;
  boost::throw_exception<std::invalid_argument>((uint64_t)v4, (uint64_t)v5);
}

void boost::histogram::detail::linearize_value<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>,std::tuple<double const&,double const&,double const&>>()
{
}

uint64_t sub_258F849E8(uint64_t result)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v2[1];
  if ((int)result > (int)v3 || (int)result <= -1) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = v3 + 1;
  }
  *v2 += v4 * (int)result;
  v2[1] = v6 * v4;
  return result;
}

void _ZZN5boost9histogram4axis6traits5indexINS1_7integerIiNS_11use_defaultENS1_6option3bitILj1EEEEENSt3__15tupleIJRKdSD_SD_EEEEEDaRKT_RKT0_ENKUlRKS9_E_clESN_()
{
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v9, (const char *)(0x8000000258FB26FDLL & 0x7FFFFFFFFFFFFFFFLL));
  if (v9.__r_.__value_.__r.__words[0]) {
    v0 = (char *)v9.__r_.__value_.__r.__words[0];
  }
  else {
    v0 = (char *)(0x8000000258FB26FDLL & 0x7FFFFFFFFFFFFFFFLL);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, v0);
  free(v9.__r_.__value_.__l.__data_);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v9, (const char *)(0x8000000258FB611DLL & 0x7FFFFFFFFFFFFFFFLL));
  if (v9.__r_.__value_.__r.__words[0]) {
    uint64_t v1 = (char *)v9.__r_.__value_.__r.__words[0];
  }
  else {
    uint64_t v1 = (char *)(0x8000000258FB611DLL & 0x7FFFFFFFFFFFFFFFLL);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, v1);
  free(v9.__r_.__value_.__l.__data_);
  uint64_t v2 = (const char *)(*(void *)(MEMORY[0x263F8C258] + 8) & 0x7FFFFFFFFFFFFFFFLL);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v9, v2);
  if (v9.__r_.__value_.__r.__words[0]) {
    uint64_t v3 = (char *)v9.__r_.__value_.__r.__words[0];
  }
  else {
    uint64_t v3 = (char *)v2;
  }
  std::string::basic_string[abi:ne180100]<0>(v6, v3);
  free(v9.__r_.__value_.__l.__data_);
  boost::histogram::detail::cat<std::string,char [35],std::string,char [5],std::string>((uint64_t)v8, ": cannot convert argument of type ", (uint64_t)v7, " to ", (uint64_t)v6);
  uint64_t v4 = std::logic_error::logic_error(&v10, &v9);
  v10.__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
  v5[0] = "PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/axis/traits.hpp";
  v5[1] = "auto boost::histogram::axis::traits::index(const boost::histogram::axis::integer<int, boost::use_default, boos"
          "t::histogram::axis::option::bit<1>> &, const std::tuple<const double &, const double &, const double &> &)::(a"
          "nonymous class)::operator()(const Axis &) const";
  v5[2] = 190;
  boost::throw_exception<std::invalid_argument>((uint64_t)v4, (uint64_t)v5);
}

__n128 boost::mp11::detail::mp_for_each_impl<std::integral_constant<unsigned long,0ul>,std::integral_constant<unsigned long,1ul>,std::integral_constant<unsigned long,2ul>,boost::histogram::detail::optional_index boost::histogram::detail::args_to_index<0u,3u,boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,std::tuple<double,double,double>>(std::integral_constant<BOOL,false>,boost::histogram::unlimited_storage<std::allocator<char>> &,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>> const&,std::tuple<double,double,double> const&)::{lambda(std::integral_constant<unsigned long,0ul>,std::integral_constant<unsigned long,1ul>,std::integral_constant<unsigned long,2ul>)#1}>@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *a1;
  BOOL v5 = *(int **)a1[1];
  uint64_t v6 = a1[2];
  uint64_t v12 = v4;
  uint64_t v13 = v6;
  uint64_t v14 = (uint64_t **)&v12;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v5, &v14);
  uint64_t v7 = (int *)(*(void *)a1[1] + 56);
  uint64_t v8 = a1[2] + 8;
  uint64_t v12 = *a1;
  uint64_t v13 = v8;
  uint64_t v14 = (uint64_t **)&v12;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v7, &v14);
  std::string v9 = (int *)(*(void *)a1[1] + 112);
  uint64_t v10 = a1[2] + 16;
  uint64_t v12 = *a1;
  uint64_t v13 = v10;
  uint64_t v14 = (uint64_t **)&v12;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v9, &v14);
  __n128 result = *(__n128 *)a1;
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(void *)(a2 + 16) = a1[2];
  return result;
}

uint64_t boost::histogram::detail::fill<boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,double,double,double,double>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = boost::histogram::detail::args_to_index<0u,4u,boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,std::tuple<double,double,double,double>>(a1, a2, a3);
  if (!v5) {
    return *(void *)(a1 + 8);
  }
  uint64_t v6 = v4;
  uint64_t v8 = v4;
  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::apply<boost::histogram::unlimited_storage<std::allocator<char>>::incrementor,boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type&,unsigned long &>(a1, (uint64_t)&v9, a1, &v8);
  return v6;
}

uint64_t boost::histogram::detail::args_to_index<0u,4u,boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,std::tuple<double,double,double,double>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v11 = xmmword_258FB60A0;
  uint64_t v3 = *(int **)a2;
  uint64_t v4 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  if (v4 != 4)
  {
    if (v4 == 1)
    {
      uint64_t v7 = (long long *)a3;
      uint64_t v8 = (const char *)(a3 + 8);
      uint64_t v9 = a3 + 16;
      uint64_t v10 = a3 + 24;
      v6.__vftable = (std::logic_error_vtbl *)&v11;
      v6.__imp_.__imp_ = (const char *)&v7;
      uint64_t v12 = &v6;
      _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_ENS7_5tupleIJRKdSP_SP_SP_EEEEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENS12_11result_typeERS12_(v3);
    }
    std::logic_error::logic_error(&v6, "number of arguments != histogram rank");
    v6.__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    uint64_t v7 = (long long *)"PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/detail/linearize.hpp";
    uint64_t v8 = "optional_index boost::histogram::detail::args_to_index(std::false_type, S &, const T &, const U &) [I = 0U, N ="
         " 4U, S = boost::histogram::unlimited_storage<>, T = std::vector<boost::histogram::axis::variant<boost::histogra"
         "m::axis::regular<>, boost::histogram::axis::variable<>, boost::histogram::axis::integer<int, boost::use_default"
         ", boost::histogram::axis::option::bit<1>>>>, U = std::tuple<double, double, double, double>]";
    uint64_t v9 = 192;
    boost::throw_exception<std::invalid_argument>((uint64_t)&v6, (uint64_t)&v7);
  }
  uint64_t v7 = &v11;
  uint64_t v8 = (const char *)a2;
  uint64_t v9 = a3;
  boost::mp11::detail::mp_for_each_impl<std::integral_constant<unsigned long,0ul>,std::integral_constant<unsigned long,1ul>,std::integral_constant<unsigned long,2ul>,std::integral_constant<unsigned long,3ul>,boost::histogram::detail::optional_index boost::histogram::detail::args_to_index<0u,4u,boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,std::tuple<double,double,double,double>>(std::integral_constant<BOOL,false>,boost::histogram::unlimited_storage<std::allocator<char>> &,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>> const&,std::tuple<double,double,double,double> const&)::{lambda(std::integral_constant<unsigned long,0ul>,std::integral_constant<unsigned long,1ul>,std::integral_constant<unsigned long,2ul>,std::integral_constant<unsigned long,3ul>)#1}>((uint64_t *)&v7, (uint64_t)&v6);
  return v11;
}

void _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_ENS7_5tupleIJRKdSP_SP_SP_EEEEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENS12_11result_typeERS12_(int *a1)
{
  switch(*a1 ^ (*a1 >> 31))
  {
    case 0:
      boost::histogram::detail::linearize_value<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,std::tuple<double const&,double const&,double const&,double const&>>();
    case 1:
      boost::histogram::detail::linearize_value<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,std::tuple<double const&,double const&,double const&,double const&>>();
    case 2:
      boost::histogram::detail::linearize_value<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>,std::tuple<double const&,double const&,double const&,double const&>>();
    default:
      boost::detail::variant::forced_return<void>();
  }
}

void boost::histogram::detail::linearize_value<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,std::tuple<double const&,double const&,double const&,double const&>>()
{
}

uint64_t sub_258F84F44(uint64_t result)
{
  uint64_t v3 = v2[1];
  if ((int)result + 1 >= *v1 + 2 || (int)result <= -2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *v1 + 2;
  }
  *v2 += v3 * ((int)result + 1);
  v2[1] = v5 * v3;
  return result;
}

void _ZZN5boost9histogram4axis6traits5indexINS1_7regularIdNS_11use_defaultES5_S5_EENSt3__15tupleIJRKdSA_SA_SA_EEEEEDaRKT_RKT0_ENKUlRKS6_E_clESK_()
{
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v9, (const char *)(0x8000000258FB1BABLL & 0x7FFFFFFFFFFFFFFFLL));
  if (v9.__r_.__value_.__r.__words[0]) {
    v0 = (char *)v9.__r_.__value_.__r.__words[0];
  }
  else {
    v0 = (char *)(0x8000000258FB1BABLL & 0x7FFFFFFFFFFFFFFFLL);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, v0);
  free(v9.__r_.__value_.__l.__data_);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v9, (const char *)(0x8000000258FB6139 & 0x7FFFFFFFFFFFFFFFLL));
  if (v9.__r_.__value_.__r.__words[0]) {
    uint64_t v1 = (char *)v9.__r_.__value_.__r.__words[0];
  }
  else {
    uint64_t v1 = (char *)(0x8000000258FB6139 & 0x7FFFFFFFFFFFFFFFLL);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, v1);
  free(v9.__r_.__value_.__l.__data_);
  uint64_t v2 = (const char *)(*(void *)(MEMORY[0x263F8C240] + 8) & 0x7FFFFFFFFFFFFFFFLL);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v9, v2);
  if (v9.__r_.__value_.__r.__words[0]) {
    uint64_t v3 = (char *)v9.__r_.__value_.__r.__words[0];
  }
  else {
    uint64_t v3 = (char *)v2;
  }
  std::string::basic_string[abi:ne180100]<0>(v6, v3);
  free(v9.__r_.__value_.__l.__data_);
  boost::histogram::detail::cat<std::string,char [35],std::string,char [5],std::string>((uint64_t)v8, ": cannot convert argument of type ", (uint64_t)v7, " to ", (uint64_t)v6);
  uint64_t v4 = std::logic_error::logic_error(&v10, &v9);
  v10.__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
  v5[0] = "PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/axis/traits.hpp";
  v5[1] = "auto boost::histogram::axis::traits::index(const boost::histogram::axis::regular<> &, const std::tuple<const d"
          "ouble &, const double &, const double &, const double &> &)::(anonymous class)::operator()(const Axis &) const";
  v5[2] = 190;
  boost::throw_exception<std::invalid_argument>((uint64_t)v4, (uint64_t)v5);
}

void boost::histogram::detail::linearize_value<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,std::tuple<double const&,double const&,double const&,double const&>>()
{
}

uint64_t sub_258F85178(uint64_t result)
{
  unint64_t v3 = v1[1] - *v1;
  uint64_t v4 = v2[1];
  BOOL v5 = (int)result >= (int)(v3 >> 3) || (int)result <= -2;
  uint64_t v6 = (uint64_t)((v3 << 29) + 0x100000000) >> 32;
  if (v5) {
    uint64_t v6 = 0;
  }
  *v2 += v4 * ((int)result + 1);
  v2[1] = v6 * v4;
  return result;
}

void _ZZN5boost9histogram4axis6traits5indexINS1_8variableIdNS_11use_defaultES5_NSt3__19allocatorIdEEEENS6_5tupleIJRKdSC_SC_SC_EEEEEDaRKT_RKT0_ENKUlRKS9_E_clESM_()
{
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v9, (const char *)(0x8000000258FB2129 & 0x7FFFFFFFFFFFFFFFLL));
  if (v9.__r_.__value_.__r.__words[0]) {
    v0 = (char *)v9.__r_.__value_.__r.__words[0];
  }
  else {
    v0 = (char *)(0x8000000258FB2129 & 0x7FFFFFFFFFFFFFFFLL);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, v0);
  free(v9.__r_.__value_.__l.__data_);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v9, (const char *)(0x8000000258FB6139 & 0x7FFFFFFFFFFFFFFFLL));
  if (v9.__r_.__value_.__r.__words[0]) {
    uint64_t v1 = (char *)v9.__r_.__value_.__r.__words[0];
  }
  else {
    uint64_t v1 = (char *)(0x8000000258FB6139 & 0x7FFFFFFFFFFFFFFFLL);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, v1);
  free(v9.__r_.__value_.__l.__data_);
  uint64_t v2 = (const char *)(*(void *)(MEMORY[0x263F8C240] + 8) & 0x7FFFFFFFFFFFFFFFLL);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v9, v2);
  if (v9.__r_.__value_.__r.__words[0]) {
    unint64_t v3 = (char *)v9.__r_.__value_.__r.__words[0];
  }
  else {
    unint64_t v3 = (char *)v2;
  }
  std::string::basic_string[abi:ne180100]<0>(v6, v3);
  free(v9.__r_.__value_.__l.__data_);
  boost::histogram::detail::cat<std::string,char [35],std::string,char [5],std::string>((uint64_t)v8, ": cannot convert argument of type ", (uint64_t)v7, " to ", (uint64_t)v6);
  uint64_t v4 = std::logic_error::logic_error(&v10, &v9);
  v10.__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
  v5[0] = "PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/axis/traits.hpp";
  v5[1] = "auto boost::histogram::axis::traits::index(const boost::histogram::axis::variable<> &, const std::tuple<const "
          "double &, const double &, const double &, const double &> &)::(anonymous class)::operator()(const Axis &) const";
  v5[2] = 190;
  boost::throw_exception<std::invalid_argument>((uint64_t)v4, (uint64_t)v5);
}

void boost::histogram::detail::linearize_value<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>,std::tuple<double const&,double const&,double const&,double const&>>()
{
}

uint64_t sub_258F853BC(uint64_t result)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v2[1];
  if ((int)result > (int)v3 || (int)result <= -1) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = v3 + 1;
  }
  *v2 += v4 * (int)result;
  v2[1] = v6 * v4;
  return result;
}

void _ZZN5boost9histogram4axis6traits5indexINS1_7integerIiNS_11use_defaultENS1_6option3bitILj1EEEEENSt3__15tupleIJRKdSD_SD_SD_EEEEEDaRKT_RKT0_ENKUlRKS9_E_clESN_()
{
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v9, (const char *)(0x8000000258FB26FDLL & 0x7FFFFFFFFFFFFFFFLL));
  if (v9.__r_.__value_.__r.__words[0]) {
    v0 = (char *)v9.__r_.__value_.__r.__words[0];
  }
  else {
    v0 = (char *)(0x8000000258FB26FDLL & 0x7FFFFFFFFFFFFFFFLL);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, v0);
  free(v9.__r_.__value_.__l.__data_);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v9, (const char *)(0x8000000258FB6139 & 0x7FFFFFFFFFFFFFFFLL));
  if (v9.__r_.__value_.__r.__words[0]) {
    uint64_t v1 = (char *)v9.__r_.__value_.__r.__words[0];
  }
  else {
    uint64_t v1 = (char *)(0x8000000258FB6139 & 0x7FFFFFFFFFFFFFFFLL);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, v1);
  free(v9.__r_.__value_.__l.__data_);
  uint64_t v2 = (const char *)(*(void *)(MEMORY[0x263F8C258] + 8) & 0x7FFFFFFFFFFFFFFFLL);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v9, v2);
  if (v9.__r_.__value_.__r.__words[0]) {
    uint64_t v3 = (char *)v9.__r_.__value_.__r.__words[0];
  }
  else {
    uint64_t v3 = (char *)v2;
  }
  std::string::basic_string[abi:ne180100]<0>(v6, v3);
  free(v9.__r_.__value_.__l.__data_);
  boost::histogram::detail::cat<std::string,char [35],std::string,char [5],std::string>((uint64_t)v8, ": cannot convert argument of type ", (uint64_t)v7, " to ", (uint64_t)v6);
  uint64_t v4 = std::logic_error::logic_error(&v10, &v9);
  v10.__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
  v5[0] = "PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/axis/traits.hpp";
  v5[1] = "auto boost::histogram::axis::traits::index(const boost::histogram::axis::integer<int, boost::use_default, boos"
          "t::histogram::axis::option::bit<1>> &, const std::tuple<const double &, const double &, const double &, const "
          "double &> &)::(anonymous class)::operator()(const Axis &) const";
  v5[2] = 190;
  boost::throw_exception<std::invalid_argument>((uint64_t)v4, (uint64_t)v5);
}

__n128 boost::mp11::detail::mp_for_each_impl<std::integral_constant<unsigned long,0ul>,std::integral_constant<unsigned long,1ul>,std::integral_constant<unsigned long,2ul>,std::integral_constant<unsigned long,3ul>,boost::histogram::detail::optional_index boost::histogram::detail::args_to_index<0u,4u,boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,std::tuple<double,double,double,double>>(std::integral_constant<BOOL,false>,boost::histogram::unlimited_storage<std::allocator<char>> &,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>> const&,std::tuple<double,double,double,double> const&)::{lambda(std::integral_constant<unsigned long,0ul>,std::integral_constant<unsigned long,1ul>,std::integral_constant<unsigned long,2ul>,std::integral_constant<unsigned long,3ul>)#1}>@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *a1;
  BOOL v5 = *(int **)a1[1];
  uint64_t v6 = a1[2];
  uint64_t v14 = v4;
  uint64_t v15 = v6;
  uint64_t v16 = (uint64_t **)&v14;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v5, &v16);
  uint64_t v7 = (int *)(*(void *)a1[1] + 56);
  uint64_t v8 = a1[2] + 8;
  uint64_t v14 = *a1;
  uint64_t v15 = v8;
  uint64_t v16 = (uint64_t **)&v14;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v7, &v16);
  std::string v9 = (int *)(*(void *)a1[1] + 112);
  uint64_t v10 = a1[2] + 16;
  uint64_t v14 = *a1;
  uint64_t v15 = v10;
  uint64_t v16 = (uint64_t **)&v14;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v9, &v16);
  long long v11 = (int *)(*(void *)a1[1] + 168);
  uint64_t v12 = a1[2] + 24;
  uint64_t v14 = *a1;
  uint64_t v15 = v12;
  uint64_t v16 = (uint64_t **)&v14;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v11, &v16);
  __n128 result = *(__n128 *)a1;
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(void *)(a2 + 16) = a1[2];
  return result;
}

uint64_t boost::histogram::detail::fill<boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,double,double,double,double,double>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = boost::histogram::detail::args_to_index<0u,5u,boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,std::tuple<double,double,double,double,double>>(a1, a2, a3);
  if (!v5) {
    return *(void *)(a1 + 8);
  }
  uint64_t v6 = v4;
  uint64_t v8 = v4;
  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::apply<boost::histogram::unlimited_storage<std::allocator<char>>::incrementor,boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type&,unsigned long &>(a1, (uint64_t)&v9, a1, &v8);
  return v6;
}

uint64_t boost::histogram::detail::args_to_index<0u,5u,boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,std::tuple<double,double,double,double,double>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v12 = xmmword_258FB60A0;
  uint64_t v3 = *(int **)a2;
  uint64_t v4 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  if (v4 != 5)
  {
    if (v4 == 1)
    {
      uint64_t v7 = (long long *)a3;
      uint64_t v8 = (const char *)(a3 + 8);
      uint64_t v9 = a3 + 16;
      uint64_t v10 = a3 + 24;
      uint64_t v11 = a3 + 32;
      v6.__vftable = (std::logic_error_vtbl *)&v12;
      v6.__imp_.__imp_ = (const char *)&v7;
      uint64_t v13 = &v6;
      _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_ENS7_5tupleIJRKdSP_SP_SP_SP_EEEEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENS12_11result_typeERS12_(v3);
    }
    std::logic_error::logic_error(&v6, "number of arguments != histogram rank");
    v6.__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    uint64_t v7 = (long long *)"PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/detail/linearize.hpp";
    uint64_t v8 = "optional_index boost::histogram::detail::args_to_index(std::false_type, S &, const T &, const U &) [I = 0U, N ="
         " 5U, S = boost::histogram::unlimited_storage<>, T = std::vector<boost::histogram::axis::variant<boost::histogra"
         "m::axis::regular<>, boost::histogram::axis::variable<>, boost::histogram::axis::integer<int, boost::use_default"
         ", boost::histogram::axis::option::bit<1>>>>, U = std::tuple<double, double, double, double, double>]";
    uint64_t v9 = 192;
    boost::throw_exception<std::invalid_argument>((uint64_t)&v6, (uint64_t)&v7);
  }
  uint64_t v7 = &v12;
  uint64_t v8 = (const char *)a2;
  uint64_t v9 = a3;
  boost::mp11::detail::mp_for_each_impl<std::integral_constant<unsigned long,0ul>,std::integral_constant<unsigned long,1ul>,std::integral_constant<unsigned long,2ul>,std::integral_constant<unsigned long,3ul>,std::integral_constant<unsigned long,4ul>,boost::histogram::detail::optional_index boost::histogram::detail::args_to_index<0u,5u,boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,std::tuple<double,double,double,double,double>>(std::integral_constant<BOOL,false>,boost::histogram::unlimited_storage<std::allocator<char>> &,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>> const&,std::tuple<double,double,double,double,double> const&)::{lambda(std::integral_constant<unsigned long,0ul>,std::integral_constant<unsigned long,1ul>,std::integral_constant<unsigned long,2ul>,std::integral_constant<unsigned long,3ul>,std::integral_constant<unsigned long,4ul>)#1}>((uint64_t *)&v7, (uint64_t)&v6);
  return v12;
}

void _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_ENS7_5tupleIJRKdSP_SP_SP_SP_EEEEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENS12_11result_typeERS12_(int *a1)
{
  switch(*a1 ^ (*a1 >> 31))
  {
    case 0:
      boost::histogram::detail::linearize_value<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,std::tuple<double const&,double const&,double const&,double const&,double const&>>();
    case 1:
      boost::histogram::detail::linearize_value<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,std::tuple<double const&,double const&,double const&,double const&,double const&>>();
    case 2:
      boost::histogram::detail::linearize_value<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>,std::tuple<double const&,double const&,double const&,double const&,double const&>>();
    default:
      boost::detail::variant::forced_return<void>();
  }
}

void boost::histogram::detail::linearize_value<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,std::tuple<double const&,double const&,double const&,double const&,double const&>>()
{
}

uint64_t sub_258F85944(uint64_t result)
{
  uint64_t v3 = v2[1];
  if ((int)result + 1 >= *v1 + 2 || (int)result <= -2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *v1 + 2;
  }
  *v2 += v3 * ((int)result + 1);
  v2[1] = v5 * v3;
  return result;
}

void _ZZN5boost9histogram4axis6traits5indexINS1_7regularIdNS_11use_defaultES5_S5_EENSt3__15tupleIJRKdSA_SA_SA_SA_EEEEEDaRKT_RKT0_ENKUlRKS6_E_clESK_()
{
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v9, (const char *)(0x8000000258FB1BABLL & 0x7FFFFFFFFFFFFFFFLL));
  if (v9.__r_.__value_.__r.__words[0]) {
    v0 = (char *)v9.__r_.__value_.__r.__words[0];
  }
  else {
    v0 = (char *)(0x8000000258FB1BABLL & 0x7FFFFFFFFFFFFFFFLL);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, v0);
  free(v9.__r_.__value_.__l.__data_);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v9, (const char *)(0x8000000258FB6158 & 0x7FFFFFFFFFFFFFFFLL));
  if (v9.__r_.__value_.__r.__words[0]) {
    uint64_t v1 = (char *)v9.__r_.__value_.__r.__words[0];
  }
  else {
    uint64_t v1 = (char *)(0x8000000258FB6158 & 0x7FFFFFFFFFFFFFFFLL);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, v1);
  free(v9.__r_.__value_.__l.__data_);
  uint64_t v2 = (const char *)(*(void *)(MEMORY[0x263F8C240] + 8) & 0x7FFFFFFFFFFFFFFFLL);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v9, v2);
  if (v9.__r_.__value_.__r.__words[0]) {
    uint64_t v3 = (char *)v9.__r_.__value_.__r.__words[0];
  }
  else {
    uint64_t v3 = (char *)v2;
  }
  std::string::basic_string[abi:ne180100]<0>(v6, v3);
  free(v9.__r_.__value_.__l.__data_);
  boost::histogram::detail::cat<std::string,char [35],std::string,char [5],std::string>((uint64_t)v8, ": cannot convert argument of type ", (uint64_t)v7, " to ", (uint64_t)v6);
  uint64_t v4 = std::logic_error::logic_error(&v10, &v9);
  v10.__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
  v5[0] = "PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/axis/traits.hpp";
  v5[1] = "auto boost::histogram::axis::traits::index(const boost::histogram::axis::regular<> &, const std::tuple<const d"
          "ouble &, const double &, const double &, const double &, const double &> &)::(anonymous class)::operator()(con"
          "st Axis &) const";
  v5[2] = 190;
  boost::throw_exception<std::invalid_argument>((uint64_t)v4, (uint64_t)v5);
}

void boost::histogram::detail::linearize_value<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,std::tuple<double const&,double const&,double const&,double const&,double const&>>()
{
}

uint64_t sub_258F85B78(uint64_t result)
{
  unint64_t v3 = v1[1] - *v1;
  uint64_t v4 = v2[1];
  BOOL v5 = (int)result >= (int)(v3 >> 3) || (int)result <= -2;
  uint64_t v6 = (uint64_t)((v3 << 29) + 0x100000000) >> 32;
  if (v5) {
    uint64_t v6 = 0;
  }
  *v2 += v4 * ((int)result + 1);
  v2[1] = v6 * v4;
  return result;
}

void _ZZN5boost9histogram4axis6traits5indexINS1_8variableIdNS_11use_defaultES5_NSt3__19allocatorIdEEEENS6_5tupleIJRKdSC_SC_SC_SC_EEEEEDaRKT_RKT0_ENKUlRKS9_E_clESM_()
{
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v9, (const char *)(0x8000000258FB2129 & 0x7FFFFFFFFFFFFFFFLL));
  if (v9.__r_.__value_.__r.__words[0]) {
    v0 = (char *)v9.__r_.__value_.__r.__words[0];
  }
  else {
    v0 = (char *)(0x8000000258FB2129 & 0x7FFFFFFFFFFFFFFFLL);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, v0);
  free(v9.__r_.__value_.__l.__data_);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v9, (const char *)(0x8000000258FB6158 & 0x7FFFFFFFFFFFFFFFLL));
  if (v9.__r_.__value_.__r.__words[0]) {
    uint64_t v1 = (char *)v9.__r_.__value_.__r.__words[0];
  }
  else {
    uint64_t v1 = (char *)(0x8000000258FB6158 & 0x7FFFFFFFFFFFFFFFLL);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, v1);
  free(v9.__r_.__value_.__l.__data_);
  uint64_t v2 = (const char *)(*(void *)(MEMORY[0x263F8C240] + 8) & 0x7FFFFFFFFFFFFFFFLL);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v9, v2);
  if (v9.__r_.__value_.__r.__words[0]) {
    unint64_t v3 = (char *)v9.__r_.__value_.__r.__words[0];
  }
  else {
    unint64_t v3 = (char *)v2;
  }
  std::string::basic_string[abi:ne180100]<0>(v6, v3);
  free(v9.__r_.__value_.__l.__data_);
  boost::histogram::detail::cat<std::string,char [35],std::string,char [5],std::string>((uint64_t)v8, ": cannot convert argument of type ", (uint64_t)v7, " to ", (uint64_t)v6);
  uint64_t v4 = std::logic_error::logic_error(&v10, &v9);
  v10.__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
  v5[0] = "PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/axis/traits.hpp";
  v5[1] = "auto boost::histogram::axis::traits::index(const boost::histogram::axis::variable<> &, const std::tuple<const "
          "double &, const double &, const double &, const double &, const double &> &)::(anonymous class)::operator()(co"
          "nst Axis &) const";
  v5[2] = 190;
  boost::throw_exception<std::invalid_argument>((uint64_t)v4, (uint64_t)v5);
}

void boost::histogram::detail::linearize_value<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>,std::tuple<double const&,double const&,double const&,double const&,double const&>>()
{
}

uint64_t sub_258F85DBC(uint64_t result)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v2[1];
  if ((int)result > (int)v3 || (int)result <= -1) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = v3 + 1;
  }
  *v2 += v4 * (int)result;
  v2[1] = v6 * v4;
  return result;
}

void _ZZN5boost9histogram4axis6traits5indexINS1_7integerIiNS_11use_defaultENS1_6option3bitILj1EEEEENSt3__15tupleIJRKdSD_SD_SD_SD_EEEEEDaRKT_RKT0_ENKUlRKS9_E_clESN_()
{
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v9, (const char *)(0x8000000258FB26FDLL & 0x7FFFFFFFFFFFFFFFLL));
  if (v9.__r_.__value_.__r.__words[0]) {
    v0 = (char *)v9.__r_.__value_.__r.__words[0];
  }
  else {
    v0 = (char *)(0x8000000258FB26FDLL & 0x7FFFFFFFFFFFFFFFLL);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, v0);
  free(v9.__r_.__value_.__l.__data_);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v9, (const char *)(0x8000000258FB6158 & 0x7FFFFFFFFFFFFFFFLL));
  if (v9.__r_.__value_.__r.__words[0]) {
    uint64_t v1 = (char *)v9.__r_.__value_.__r.__words[0];
  }
  else {
    uint64_t v1 = (char *)(0x8000000258FB6158 & 0x7FFFFFFFFFFFFFFFLL);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, v1);
  free(v9.__r_.__value_.__l.__data_);
  uint64_t v2 = (const char *)(*(void *)(MEMORY[0x263F8C258] + 8) & 0x7FFFFFFFFFFFFFFFLL);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v9, v2);
  if (v9.__r_.__value_.__r.__words[0]) {
    uint64_t v3 = (char *)v9.__r_.__value_.__r.__words[0];
  }
  else {
    uint64_t v3 = (char *)v2;
  }
  std::string::basic_string[abi:ne180100]<0>(v6, v3);
  free(v9.__r_.__value_.__l.__data_);
  boost::histogram::detail::cat<std::string,char [35],std::string,char [5],std::string>((uint64_t)v8, ": cannot convert argument of type ", (uint64_t)v7, " to ", (uint64_t)v6);
  uint64_t v4 = std::logic_error::logic_error(&v10, &v9);
  v10.__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
  v5[0] = "PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/axis/traits.hpp";
  v5[1] = "auto boost::histogram::axis::traits::index(const boost::histogram::axis::integer<int, boost::use_default, boos"
          "t::histogram::axis::option::bit<1>> &, const std::tuple<const double &, const double &, const double &, const "
          "double &, const double &> &)::(anonymous class)::operator()(const Axis &) const";
  v5[2] = 190;
  boost::throw_exception<std::invalid_argument>((uint64_t)v4, (uint64_t)v5);
}

__n128 boost::mp11::detail::mp_for_each_impl<std::integral_constant<unsigned long,0ul>,std::integral_constant<unsigned long,1ul>,std::integral_constant<unsigned long,2ul>,std::integral_constant<unsigned long,3ul>,std::integral_constant<unsigned long,4ul>,boost::histogram::detail::optional_index boost::histogram::detail::args_to_index<0u,5u,boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,std::tuple<double,double,double,double,double>>(std::integral_constant<BOOL,false>,boost::histogram::unlimited_storage<std::allocator<char>> &,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>> const&,std::tuple<double,double,double,double,double> const&)::{lambda(std::integral_constant<unsigned long,0ul>,std::integral_constant<unsigned long,1ul>,std::integral_constant<unsigned long,2ul>,std::integral_constant<unsigned long,3ul>,std::integral_constant<unsigned long,4ul>)#1}>@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *a1;
  BOOL v5 = *(int **)a1[1];
  uint64_t v6 = a1[2];
  uint64_t v16 = v4;
  uint64_t v17 = v6;
  char v18 = (uint64_t **)&v16;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v5, &v18);
  uint64_t v7 = (int *)(*(void *)a1[1] + 56);
  uint64_t v8 = a1[2] + 8;
  uint64_t v16 = *a1;
  uint64_t v17 = v8;
  char v18 = (uint64_t **)&v16;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v7, &v18);
  std::string v9 = (int *)(*(void *)a1[1] + 112);
  uint64_t v10 = a1[2] + 16;
  uint64_t v16 = *a1;
  uint64_t v17 = v10;
  char v18 = (uint64_t **)&v16;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v9, &v18);
  uint64_t v11 = (int *)(*(void *)a1[1] + 168);
  uint64_t v12 = a1[2] + 24;
  uint64_t v16 = *a1;
  uint64_t v17 = v12;
  char v18 = (uint64_t **)&v16;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v11, &v18);
  uint64_t v13 = (int *)(*(void *)a1[1] + 224);
  uint64_t v14 = a1[2] + 32;
  uint64_t v16 = *a1;
  uint64_t v17 = v14;
  char v18 = (uint64_t **)&v16;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v13, &v18);
  __n128 result = *(__n128 *)a1;
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(void *)(a2 + 16) = a1[2];
  return result;
}

uint64_t boost::histogram::detail::fill<boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,double,double,double,double,double,double>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = boost::histogram::detail::args_to_index<0u,6u,boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,std::tuple<double,double,double,double,double,double>>(a1, a2, a3);
  if (!v5) {
    return *(void *)(a1 + 8);
  }
  uint64_t v6 = v4;
  uint64_t v8 = v4;
  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::apply<boost::histogram::unlimited_storage<std::allocator<char>>::incrementor,boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type&,unsigned long &>(a1, (uint64_t)&v9, a1, &v8);
  return v6;
}

uint64_t boost::histogram::detail::args_to_index<0u,6u,boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,std::tuple<double,double,double,double,double,double>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v13 = xmmword_258FB60A0;
  uint64_t v3 = *(int **)a2;
  uint64_t v4 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  if (v4 != 6)
  {
    if (v4 == 1)
    {
      uint64_t v7 = (long long *)a3;
      uint64_t v8 = (const char *)(a3 + 8);
      uint64_t v9 = a3 + 16;
      uint64_t v10 = a3 + 24;
      uint64_t v11 = a3 + 32;
      uint64_t v12 = a3 + 40;
      v6.__vftable = (std::logic_error_vtbl *)&v13;
      v6.__imp_.__imp_ = (const char *)&v7;
      uint64_t v14 = &v6;
      _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_ENS7_5tupleIJRKdSP_SP_SP_SP_SP_EEEEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENS12_11result_typeERS12_(v3);
    }
    std::logic_error::logic_error(&v6, "number of arguments != histogram rank");
    v6.__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    uint64_t v7 = (long long *)"PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/detail/linearize.hpp";
    uint64_t v8 = "optional_index boost::histogram::detail::args_to_index(std::false_type, S &, const T &, const U &) [I = 0U, N ="
         " 6U, S = boost::histogram::unlimited_storage<>, T = std::vector<boost::histogram::axis::variant<boost::histogra"
         "m::axis::regular<>, boost::histogram::axis::variable<>, boost::histogram::axis::integer<int, boost::use_default"
         ", boost::histogram::axis::option::bit<1>>>>, U = std::tuple<double, double, double, double, double, double>]";
    uint64_t v9 = 192;
    boost::throw_exception<std::invalid_argument>((uint64_t)&v6, (uint64_t)&v7);
  }
  uint64_t v7 = &v13;
  uint64_t v8 = (const char *)a2;
  uint64_t v9 = a3;
  boost::mp11::detail::mp_for_each_impl<std::integral_constant<unsigned long,0ul>,std::integral_constant<unsigned long,1ul>,std::integral_constant<unsigned long,2ul>,std::integral_constant<unsigned long,3ul>,std::integral_constant<unsigned long,4ul>,std::integral_constant<unsigned long,5ul>,boost::histogram::detail::optional_index boost::histogram::detail::args_to_index<0u,6u,boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,std::tuple<double,double,double,double,double,double>>(std::integral_constant<BOOL,false>,boost::histogram::unlimited_storage<std::allocator<char>> &,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>> const&,std::tuple<double,double,double,double,double,double> const&)::{lambda(std::integral_constant<unsigned long,0ul>,std::integral_constant<unsigned long,1ul>,std::integral_constant<unsigned long,2ul>,std::integral_constant<unsigned long,3ul>,std::integral_constant<unsigned long,4ul>,std::integral_constant<unsigned long,5ul>)#1}>((uint64_t *)&v7, (uint64_t)&v6);
  return v13;
}

void _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_ENS7_5tupleIJRKdSP_SP_SP_SP_SP_EEEEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENS12_11result_typeERS12_(int *a1)
{
  switch(*a1 ^ (*a1 >> 31))
  {
    case 0:
      boost::histogram::detail::linearize_value<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,std::tuple<double const&,double const&,double const&,double const&,double const&,double const&>>();
    case 1:
      boost::histogram::detail::linearize_value<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,std::tuple<double const&,double const&,double const&,double const&,double const&,double const&>>();
    case 2:
      boost::histogram::detail::linearize_value<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>,std::tuple<double const&,double const&,double const&,double const&,double const&,double const&>>();
    default:
      boost::detail::variant::forced_return<void>();
  }
}

void boost::histogram::detail::linearize_value<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,std::tuple<double const&,double const&,double const&,double const&,double const&,double const&>>()
{
}

uint64_t sub_258F8636C(uint64_t result)
{
  uint64_t v3 = v2[1];
  if ((int)result + 1 >= *v1 + 2 || (int)result <= -2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *v1 + 2;
  }
  *v2 += v3 * ((int)result + 1);
  v2[1] = v5 * v3;
  return result;
}

void _ZZN5boost9histogram4axis6traits5indexINS1_7regularIdNS_11use_defaultES5_S5_EENSt3__15tupleIJRKdSA_SA_SA_SA_SA_EEEEEDaRKT_RKT0_ENKUlRKS6_E_clESK_()
{
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v9, (const char *)(0x8000000258FB1BABLL & 0x7FFFFFFFFFFFFFFFLL));
  if (v9.__r_.__value_.__r.__words[0]) {
    v0 = (char *)v9.__r_.__value_.__r.__words[0];
  }
  else {
    v0 = (char *)(0x8000000258FB1BABLL & 0x7FFFFFFFFFFFFFFFLL);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, v0);
  free(v9.__r_.__value_.__l.__data_);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v9, (const char *)(0x8000000258FB617ALL & 0x7FFFFFFFFFFFFFFFLL));
  if (v9.__r_.__value_.__r.__words[0]) {
    uint64_t v1 = (char *)v9.__r_.__value_.__r.__words[0];
  }
  else {
    uint64_t v1 = (char *)(0x8000000258FB617ALL & 0x7FFFFFFFFFFFFFFFLL);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, v1);
  free(v9.__r_.__value_.__l.__data_);
  uint64_t v2 = (const char *)(*(void *)(MEMORY[0x263F8C240] + 8) & 0x7FFFFFFFFFFFFFFFLL);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v9, v2);
  if (v9.__r_.__value_.__r.__words[0]) {
    uint64_t v3 = (char *)v9.__r_.__value_.__r.__words[0];
  }
  else {
    uint64_t v3 = (char *)v2;
  }
  std::string::basic_string[abi:ne180100]<0>(v6, v3);
  free(v9.__r_.__value_.__l.__data_);
  boost::histogram::detail::cat<std::string,char [35],std::string,char [5],std::string>((uint64_t)v8, ": cannot convert argument of type ", (uint64_t)v7, " to ", (uint64_t)v6);
  uint64_t v4 = std::logic_error::logic_error(&v10, &v9);
  v10.__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
  v5[0] = "PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/axis/traits.hpp";
  v5[1] = "auto boost::histogram::axis::traits::index(const boost::histogram::axis::regular<> &, const std::tuple<const d"
          "ouble &, const double &, const double &, const double &, const double &, const double &> &)::(anonymous class)"
          "::operator()(const Axis &) const";
  v5[2] = 190;
  boost::throw_exception<std::invalid_argument>((uint64_t)v4, (uint64_t)v5);
}

void boost::histogram::detail::linearize_value<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,std::tuple<double const&,double const&,double const&,double const&,double const&,double const&>>()
{
}

uint64_t sub_258F865A0(uint64_t result)
{
  unint64_t v3 = v1[1] - *v1;
  uint64_t v4 = v2[1];
  BOOL v5 = (int)result >= (int)(v3 >> 3) || (int)result <= -2;
  uint64_t v6 = (uint64_t)((v3 << 29) + 0x100000000) >> 32;
  if (v5) {
    uint64_t v6 = 0;
  }
  *v2 += v4 * ((int)result + 1);
  v2[1] = v6 * v4;
  return result;
}

void _ZZN5boost9histogram4axis6traits5indexINS1_8variableIdNS_11use_defaultES5_NSt3__19allocatorIdEEEENS6_5tupleIJRKdSC_SC_SC_SC_SC_EEEEEDaRKT_RKT0_ENKUlRKS9_E_clESM_()
{
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v9, (const char *)(0x8000000258FB2129 & 0x7FFFFFFFFFFFFFFFLL));
  if (v9.__r_.__value_.__r.__words[0]) {
    v0 = (char *)v9.__r_.__value_.__r.__words[0];
  }
  else {
    v0 = (char *)(0x8000000258FB2129 & 0x7FFFFFFFFFFFFFFFLL);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, v0);
  free(v9.__r_.__value_.__l.__data_);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v9, (const char *)(0x8000000258FB617ALL & 0x7FFFFFFFFFFFFFFFLL));
  if (v9.__r_.__value_.__r.__words[0]) {
    uint64_t v1 = (char *)v9.__r_.__value_.__r.__words[0];
  }
  else {
    uint64_t v1 = (char *)(0x8000000258FB617ALL & 0x7FFFFFFFFFFFFFFFLL);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, v1);
  free(v9.__r_.__value_.__l.__data_);
  uint64_t v2 = (const char *)(*(void *)(MEMORY[0x263F8C240] + 8) & 0x7FFFFFFFFFFFFFFFLL);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v9, v2);
  if (v9.__r_.__value_.__r.__words[0]) {
    unint64_t v3 = (char *)v9.__r_.__value_.__r.__words[0];
  }
  else {
    unint64_t v3 = (char *)v2;
  }
  std::string::basic_string[abi:ne180100]<0>(v6, v3);
  free(v9.__r_.__value_.__l.__data_);
  boost::histogram::detail::cat<std::string,char [35],std::string,char [5],std::string>((uint64_t)v8, ": cannot convert argument of type ", (uint64_t)v7, " to ", (uint64_t)v6);
  uint64_t v4 = std::logic_error::logic_error(&v10, &v9);
  v10.__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
  v5[0] = "PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/axis/traits.hpp";
  v5[1] = "auto boost::histogram::axis::traits::index(const boost::histogram::axis::variable<> &, const std::tuple<const "
          "double &, const double &, const double &, const double &, const double &, const double &> &)::(anonymous class"
          ")::operator()(const Axis &) const";
  v5[2] = 190;
  boost::throw_exception<std::invalid_argument>((uint64_t)v4, (uint64_t)v5);
}

void boost::histogram::detail::linearize_value<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>,std::tuple<double const&,double const&,double const&,double const&,double const&,double const&>>()
{
}

uint64_t sub_258F867E4(uint64_t result)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v2[1];
  if ((int)result > (int)v3 || (int)result <= -1) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = v3 + 1;
  }
  *v2 += v4 * (int)result;
  v2[1] = v6 * v4;
  return result;
}

void _ZZN5boost9histogram4axis6traits5indexINS1_7integerIiNS_11use_defaultENS1_6option3bitILj1EEEEENSt3__15tupleIJRKdSD_SD_SD_SD_SD_EEEEEDaRKT_RKT0_ENKUlRKS9_E_clESN_()
{
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v9, (const char *)(0x8000000258FB26FDLL & 0x7FFFFFFFFFFFFFFFLL));
  if (v9.__r_.__value_.__r.__words[0]) {
    v0 = (char *)v9.__r_.__value_.__r.__words[0];
  }
  else {
    v0 = (char *)(0x8000000258FB26FDLL & 0x7FFFFFFFFFFFFFFFLL);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, v0);
  free(v9.__r_.__value_.__l.__data_);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v9, (const char *)(0x8000000258FB617ALL & 0x7FFFFFFFFFFFFFFFLL));
  if (v9.__r_.__value_.__r.__words[0]) {
    uint64_t v1 = (char *)v9.__r_.__value_.__r.__words[0];
  }
  else {
    uint64_t v1 = (char *)(0x8000000258FB617ALL & 0x7FFFFFFFFFFFFFFFLL);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, v1);
  free(v9.__r_.__value_.__l.__data_);
  uint64_t v2 = (const char *)(*(void *)(MEMORY[0x263F8C258] + 8) & 0x7FFFFFFFFFFFFFFFLL);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v9, v2);
  if (v9.__r_.__value_.__r.__words[0]) {
    uint64_t v3 = (char *)v9.__r_.__value_.__r.__words[0];
  }
  else {
    uint64_t v3 = (char *)v2;
  }
  std::string::basic_string[abi:ne180100]<0>(v6, v3);
  free(v9.__r_.__value_.__l.__data_);
  boost::histogram::detail::cat<std::string,char [35],std::string,char [5],std::string>((uint64_t)v8, ": cannot convert argument of type ", (uint64_t)v7, " to ", (uint64_t)v6);
  uint64_t v4 = std::logic_error::logic_error(&v10, &v9);
  v10.__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
  v5[0] = "PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/axis/traits.hpp";
  v5[1] = "auto boost::histogram::axis::traits::index(const boost::histogram::axis::integer<int, boost::use_default, boos"
          "t::histogram::axis::option::bit<1>> &, const std::tuple<const double &, const double &, const double &, const "
          "double &, const double &, const double &> &)::(anonymous class)::operator()(const Axis &) const";
  v5[2] = 190;
  boost::throw_exception<std::invalid_argument>((uint64_t)v4, (uint64_t)v5);
}

__n128 boost::mp11::detail::mp_for_each_impl<std::integral_constant<unsigned long,0ul>,std::integral_constant<unsigned long,1ul>,std::integral_constant<unsigned long,2ul>,std::integral_constant<unsigned long,3ul>,std::integral_constant<unsigned long,4ul>,std::integral_constant<unsigned long,5ul>,boost::histogram::detail::optional_index boost::histogram::detail::args_to_index<0u,6u,boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,std::tuple<double,double,double,double,double,double>>(std::integral_constant<BOOL,false>,boost::histogram::unlimited_storage<std::allocator<char>> &,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>> const&,std::tuple<double,double,double,double,double,double> const&)::{lambda(std::integral_constant<unsigned long,0ul>,std::integral_constant<unsigned long,1ul>,std::integral_constant<unsigned long,2ul>,std::integral_constant<unsigned long,3ul>,std::integral_constant<unsigned long,4ul>,std::integral_constant<unsigned long,5ul>)#1}>@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *a1;
  BOOL v5 = *(int **)a1[1];
  uint64_t v6 = a1[2];
  uint64_t v18 = v4;
  uint64_t v19 = v6;
  int v20 = (uint64_t **)&v18;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v5, &v20);
  uint64_t v7 = (int *)(*(void *)a1[1] + 56);
  uint64_t v8 = a1[2] + 8;
  uint64_t v18 = *a1;
  uint64_t v19 = v8;
  int v20 = (uint64_t **)&v18;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v7, &v20);
  std::string v9 = (int *)(*(void *)a1[1] + 112);
  uint64_t v10 = a1[2] + 16;
  uint64_t v18 = *a1;
  uint64_t v19 = v10;
  int v20 = (uint64_t **)&v18;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v9, &v20);
  uint64_t v11 = (int *)(*(void *)a1[1] + 168);
  uint64_t v12 = a1[2] + 24;
  uint64_t v18 = *a1;
  uint64_t v19 = v12;
  int v20 = (uint64_t **)&v18;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v11, &v20);
  long long v13 = (int *)(*(void *)a1[1] + 224);
  uint64_t v14 = a1[2] + 32;
  uint64_t v18 = *a1;
  uint64_t v19 = v14;
  int v20 = (uint64_t **)&v18;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v13, &v20);
  uint64_t v15 = (int *)(*(void *)a1[1] + 280);
  uint64_t v16 = a1[2] + 40;
  uint64_t v18 = *a1;
  uint64_t v19 = v16;
  int v20 = (uint64_t **)&v18;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v15, &v20);
  __n128 result = *(__n128 *)a1;
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(void *)(a2 + 16) = a1[2];
  return result;
}

uint64_t boost::histogram::detail::fill<boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,double,double,double,double,double,double,double>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = boost::histogram::detail::args_to_index<0u,7u,boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,std::tuple<double,double,double,double,double,double,double>>(a1, a2, a3);
  if (!v5) {
    return *(void *)(a1 + 8);
  }
  uint64_t v6 = v4;
  uint64_t v8 = v4;
  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::apply<boost::histogram::unlimited_storage<std::allocator<char>>::incrementor,boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type&,unsigned long &>(a1, (uint64_t)&v9, a1, &v8);
  return v6;
}

uint64_t boost::histogram::detail::args_to_index<0u,7u,boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,std::tuple<double,double,double,double,double,double,double>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v14 = xmmword_258FB60A0;
  uint64_t v3 = *(int **)a2;
  uint64_t v4 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  if (v4 != 7)
  {
    if (v4 == 1)
    {
      uint64_t v7 = (long long *)a3;
      uint64_t v8 = (const char *)(a3 + 8);
      uint64_t v9 = a3 + 16;
      uint64_t v10 = a3 + 24;
      uint64_t v11 = a3 + 32;
      uint64_t v12 = a3 + 40;
      uint64_t v13 = a3 + 48;
      v6.__vftable = (std::logic_error_vtbl *)&v14;
      v6.__imp_.__imp_ = (const char *)&v7;
      uint64_t v15 = &v6;
      _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_ENS7_5tupleIJRKdSP_SP_SP_SP_SP_SP_EEEEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENS12_11result_typeERS12_(v3);
    }
    std::logic_error::logic_error(&v6, "number of arguments != histogram rank");
    v6.__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    uint64_t v7 = (long long *)"PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/detail/linearize.hpp";
    uint64_t v8 = "optional_index boost::histogram::detail::args_to_index(std::false_type, S &, const T &, const U &) [I = 0U, N ="
         " 7U, S = boost::histogram::unlimited_storage<>, T = std::vector<boost::histogram::axis::variant<boost::histogra"
         "m::axis::regular<>, boost::histogram::axis::variable<>, boost::histogram::axis::integer<int, boost::use_default"
         ", boost::histogram::axis::option::bit<1>>>>, U = std::tuple<double, double, double, double, double, double, double>]";
    uint64_t v9 = 192;
    boost::throw_exception<std::invalid_argument>((uint64_t)&v6, (uint64_t)&v7);
  }
  uint64_t v7 = &v14;
  uint64_t v8 = (const char *)a2;
  uint64_t v9 = a3;
  boost::mp11::detail::mp_for_each_impl<std::integral_constant<unsigned long,0ul>,std::integral_constant<unsigned long,1ul>,std::integral_constant<unsigned long,2ul>,std::integral_constant<unsigned long,3ul>,std::integral_constant<unsigned long,4ul>,std::integral_constant<unsigned long,5ul>,std::integral_constant<unsigned long,6ul>,boost::histogram::detail::optional_index boost::histogram::detail::args_to_index<0u,7u,boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,std::tuple<double,double,double,double,double,double,double>>(std::integral_constant<BOOL,false>,boost::histogram::unlimited_storage<std::allocator<char>> &,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>> const&,std::tuple<double,double,double,double,double,double,double> const&)::{lambda(std::integral_constant<unsigned long,0ul>,std::integral_constant<unsigned long,1ul>,std::integral_constant<unsigned long,2ul>,std::integral_constant<unsigned long,3ul>,std::integral_constant<unsigned long,4ul>,std::integral_constant<unsigned long,5ul>,std::integral_constant<unsigned long,6ul>)#1}>((uint64_t *)&v7, (uint64_t)&v6);
  return v14;
}

void _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_ENS7_5tupleIJRKdSP_SP_SP_SP_SP_SP_EEEEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENS12_11result_typeERS12_(int *a1)
{
  switch(*a1 ^ (*a1 >> 31))
  {
    case 0:
      boost::histogram::detail::linearize_value<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,std::tuple<double const&,double const&,double const&,double const&,double const&,double const&,double const&>>();
    case 1:
      boost::histogram::detail::linearize_value<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,std::tuple<double const&,double const&,double const&,double const&,double const&,double const&,double const&>>();
    case 2:
      boost::histogram::detail::linearize_value<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>,std::tuple<double const&,double const&,double const&,double const&,double const&,double const&,double const&>>();
    default:
      boost::detail::variant::forced_return<void>();
  }
}

void boost::histogram::detail::linearize_value<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,std::tuple<double const&,double const&,double const&,double const&,double const&,double const&,double const&>>()
{
}

uint64_t sub_258F86DC0(uint64_t result)
{
  uint64_t v3 = v2[1];
  if ((int)result + 1 >= *v1 + 2 || (int)result <= -2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *v1 + 2;
  }
  *v2 += v3 * ((int)result + 1);
  v2[1] = v5 * v3;
  return result;
}

void _ZZN5boost9histogram4axis6traits5indexINS1_7regularIdNS_11use_defaultES5_S5_EENSt3__15tupleIJRKdSA_SA_SA_SA_SA_SA_EEEEEDaRKT_RKT0_ENKUlRKS6_E_clESK_()
{
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v9, (const char *)(0x8000000258FB1BABLL & 0x7FFFFFFFFFFFFFFFLL));
  if (v9.__r_.__value_.__r.__words[0]) {
    v0 = (char *)v9.__r_.__value_.__r.__words[0];
  }
  else {
    v0 = (char *)(0x8000000258FB1BABLL & 0x7FFFFFFFFFFFFFFFLL);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, v0);
  free(v9.__r_.__value_.__l.__data_);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v9, (const char *)(0x8000000258FB619FLL & 0x7FFFFFFFFFFFFFFFLL));
  if (v9.__r_.__value_.__r.__words[0]) {
    uint64_t v1 = (char *)v9.__r_.__value_.__r.__words[0];
  }
  else {
    uint64_t v1 = (char *)(0x8000000258FB619FLL & 0x7FFFFFFFFFFFFFFFLL);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, v1);
  free(v9.__r_.__value_.__l.__data_);
  uint64_t v2 = (const char *)(*(void *)(MEMORY[0x263F8C240] + 8) & 0x7FFFFFFFFFFFFFFFLL);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v9, v2);
  if (v9.__r_.__value_.__r.__words[0]) {
    uint64_t v3 = (char *)v9.__r_.__value_.__r.__words[0];
  }
  else {
    uint64_t v3 = (char *)v2;
  }
  std::string::basic_string[abi:ne180100]<0>(v6, v3);
  free(v9.__r_.__value_.__l.__data_);
  boost::histogram::detail::cat<std::string,char [35],std::string,char [5],std::string>((uint64_t)v8, ": cannot convert argument of type ", (uint64_t)v7, " to ", (uint64_t)v6);
  uint64_t v4 = std::logic_error::logic_error(&v10, &v9);
  v10.__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
  v5[0] = "PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/axis/traits.hpp";
  v5[1] = "auto boost::histogram::axis::traits::index(const boost::histogram::axis::regular<> &, const std::tuple<const d"
          "ouble &, const double &, const double &, const double &, const double &, const double &, const double &> &)::("
          "anonymous class)::operator()(const Axis &) const";
  v5[2] = 190;
  boost::throw_exception<std::invalid_argument>((uint64_t)v4, (uint64_t)v5);
}

void boost::histogram::detail::linearize_value<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,std::tuple<double const&,double const&,double const&,double const&,double const&,double const&,double const&>>()
{
}

uint64_t sub_258F86FF4(uint64_t result)
{
  unint64_t v3 = v1[1] - *v1;
  uint64_t v4 = v2[1];
  BOOL v5 = (int)result >= (int)(v3 >> 3) || (int)result <= -2;
  uint64_t v6 = (uint64_t)((v3 << 29) + 0x100000000) >> 32;
  if (v5) {
    uint64_t v6 = 0;
  }
  *v2 += v4 * ((int)result + 1);
  v2[1] = v6 * v4;
  return result;
}

void _ZZN5boost9histogram4axis6traits5indexINS1_8variableIdNS_11use_defaultES5_NSt3__19allocatorIdEEEENS6_5tupleIJRKdSC_SC_SC_SC_SC_SC_EEEEEDaRKT_RKT0_ENKUlRKS9_E_clESM_()
{
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v9, (const char *)(0x8000000258FB2129 & 0x7FFFFFFFFFFFFFFFLL));
  if (v9.__r_.__value_.__r.__words[0]) {
    v0 = (char *)v9.__r_.__value_.__r.__words[0];
  }
  else {
    v0 = (char *)(0x8000000258FB2129 & 0x7FFFFFFFFFFFFFFFLL);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, v0);
  free(v9.__r_.__value_.__l.__data_);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v9, (const char *)(0x8000000258FB619FLL & 0x7FFFFFFFFFFFFFFFLL));
  if (v9.__r_.__value_.__r.__words[0]) {
    uint64_t v1 = (char *)v9.__r_.__value_.__r.__words[0];
  }
  else {
    uint64_t v1 = (char *)(0x8000000258FB619FLL & 0x7FFFFFFFFFFFFFFFLL);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, v1);
  free(v9.__r_.__value_.__l.__data_);
  uint64_t v2 = (const char *)(*(void *)(MEMORY[0x263F8C240] + 8) & 0x7FFFFFFFFFFFFFFFLL);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v9, v2);
  if (v9.__r_.__value_.__r.__words[0]) {
    unint64_t v3 = (char *)v9.__r_.__value_.__r.__words[0];
  }
  else {
    unint64_t v3 = (char *)v2;
  }
  std::string::basic_string[abi:ne180100]<0>(v6, v3);
  free(v9.__r_.__value_.__l.__data_);
  boost::histogram::detail::cat<std::string,char [35],std::string,char [5],std::string>((uint64_t)v8, ": cannot convert argument of type ", (uint64_t)v7, " to ", (uint64_t)v6);
  uint64_t v4 = std::logic_error::logic_error(&v10, &v9);
  v10.__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
  v5[0] = "PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/axis/traits.hpp";
  v5[1] = "auto boost::histogram::axis::traits::index(const boost::histogram::axis::variable<> &, const std::tuple<const "
          "double &, const double &, const double &, const double &, const double &, const double &, const double &> &)::"
          "(anonymous class)::operator()(const Axis &) const";
  v5[2] = 190;
  boost::throw_exception<std::invalid_argument>((uint64_t)v4, (uint64_t)v5);
}

void boost::histogram::detail::linearize_value<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>,std::tuple<double const&,double const&,double const&,double const&,double const&,double const&,double const&>>()
{
}

uint64_t sub_258F87238(uint64_t result)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v2[1];
  if ((int)result > (int)v3 || (int)result <= -1) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = v3 + 1;
  }
  *v2 += v4 * (int)result;
  v2[1] = v6 * v4;
  return result;
}

void _ZZN5boost9histogram4axis6traits5indexINS1_7integerIiNS_11use_defaultENS1_6option3bitILj1EEEEENSt3__15tupleIJRKdSD_SD_SD_SD_SD_SD_EEEEEDaRKT_RKT0_ENKUlRKS9_E_clESN_()
{
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v9, (const char *)(0x8000000258FB26FDLL & 0x7FFFFFFFFFFFFFFFLL));
  if (v9.__r_.__value_.__r.__words[0]) {
    v0 = (char *)v9.__r_.__value_.__r.__words[0];
  }
  else {
    v0 = (char *)(0x8000000258FB26FDLL & 0x7FFFFFFFFFFFFFFFLL);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, v0);
  free(v9.__r_.__value_.__l.__data_);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v9, (const char *)(0x8000000258FB619FLL & 0x7FFFFFFFFFFFFFFFLL));
  if (v9.__r_.__value_.__r.__words[0]) {
    uint64_t v1 = (char *)v9.__r_.__value_.__r.__words[0];
  }
  else {
    uint64_t v1 = (char *)(0x8000000258FB619FLL & 0x7FFFFFFFFFFFFFFFLL);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, v1);
  free(v9.__r_.__value_.__l.__data_);
  uint64_t v2 = (const char *)(*(void *)(MEMORY[0x263F8C258] + 8) & 0x7FFFFFFFFFFFFFFFLL);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v9, v2);
  if (v9.__r_.__value_.__r.__words[0]) {
    uint64_t v3 = (char *)v9.__r_.__value_.__r.__words[0];
  }
  else {
    uint64_t v3 = (char *)v2;
  }
  std::string::basic_string[abi:ne180100]<0>(v6, v3);
  free(v9.__r_.__value_.__l.__data_);
  boost::histogram::detail::cat<std::string,char [35],std::string,char [5],std::string>((uint64_t)v8, ": cannot convert argument of type ", (uint64_t)v7, " to ", (uint64_t)v6);
  uint64_t v4 = std::logic_error::logic_error(&v10, &v9);
  v10.__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
  v5[0] = "PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/axis/traits.hpp";
  v5[1] = "auto boost::histogram::axis::traits::index(const boost::histogram::axis::integer<int, boost::use_default, boos"
          "t::histogram::axis::option::bit<1>> &, const std::tuple<const double &, const double &, const double &, const "
          "double &, const double &, const double &, const double &> &)::(anonymous class)::operator()(const Axis &) const";
  v5[2] = 190;
  boost::throw_exception<std::invalid_argument>((uint64_t)v4, (uint64_t)v5);
}

__n128 boost::mp11::detail::mp_for_each_impl<std::integral_constant<unsigned long,0ul>,std::integral_constant<unsigned long,1ul>,std::integral_constant<unsigned long,2ul>,std::integral_constant<unsigned long,3ul>,std::integral_constant<unsigned long,4ul>,std::integral_constant<unsigned long,5ul>,std::integral_constant<unsigned long,6ul>,boost::histogram::detail::optional_index boost::histogram::detail::args_to_index<0u,7u,boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,std::tuple<double,double,double,double,double,double,double>>(std::integral_constant<BOOL,false>,boost::histogram::unlimited_storage<std::allocator<char>> &,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>> const&,std::tuple<double,double,double,double,double,double,double> const&)::{lambda(std::integral_constant<unsigned long,0ul>,std::integral_constant<unsigned long,1ul>,std::integral_constant<unsigned long,2ul>,std::integral_constant<unsigned long,3ul>,std::integral_constant<unsigned long,4ul>,std::integral_constant<unsigned long,5ul>,std::integral_constant<unsigned long,6ul>)#1}>@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *a1;
  BOOL v5 = *(int **)a1[1];
  uint64_t v6 = a1[2];
  uint64_t v20 = v4;
  uint64_t v21 = v6;
  double v22 = (uint64_t **)&v20;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v5, &v22);
  uint64_t v7 = (int *)(*(void *)a1[1] + 56);
  uint64_t v8 = a1[2] + 8;
  uint64_t v20 = *a1;
  uint64_t v21 = v8;
  double v22 = (uint64_t **)&v20;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v7, &v22);
  std::string v9 = (int *)(*(void *)a1[1] + 112);
  uint64_t v10 = a1[2] + 16;
  uint64_t v20 = *a1;
  uint64_t v21 = v10;
  double v22 = (uint64_t **)&v20;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v9, &v22);
  uint64_t v11 = (int *)(*(void *)a1[1] + 168);
  uint64_t v12 = a1[2] + 24;
  uint64_t v20 = *a1;
  uint64_t v21 = v12;
  double v22 = (uint64_t **)&v20;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v11, &v22);
  uint64_t v13 = (int *)(*(void *)a1[1] + 224);
  uint64_t v14 = a1[2] + 32;
  uint64_t v20 = *a1;
  uint64_t v21 = v14;
  double v22 = (uint64_t **)&v20;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v13, &v22);
  uint64_t v15 = (int *)(*(void *)a1[1] + 280);
  uint64_t v16 = a1[2] + 40;
  uint64_t v20 = *a1;
  uint64_t v21 = v16;
  double v22 = (uint64_t **)&v20;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v15, &v22);
  uint64_t v17 = (int *)(*(void *)a1[1] + 336);
  uint64_t v18 = a1[2] + 48;
  uint64_t v20 = *a1;
  uint64_t v21 = v18;
  double v22 = (uint64_t **)&v20;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v17, &v22);
  __n128 result = *(__n128 *)a1;
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(void *)(a2 + 16) = a1[2];
  return result;
}

uint64_t boost::histogram::detail::fill<boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,double,double,double,double,double,double,double,double>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = boost::histogram::detail::args_to_index<0u,8u,boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,std::tuple<double,double,double,double,double,double,double,double>>(a1, a2, a3);
  if (!v5) {
    return *(void *)(a1 + 8);
  }
  uint64_t v6 = v4;
  uint64_t v8 = v4;
  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::apply<boost::histogram::unlimited_storage<std::allocator<char>>::incrementor,boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type&,unsigned long &>(a1, (uint64_t)&v9, a1, &v8);
  return v6;
}

uint64_t boost::histogram::detail::args_to_index<0u,8u,boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,std::tuple<double,double,double,double,double,double,double,double>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v15 = xmmword_258FB60A0;
  uint64_t v3 = *(int **)a2;
  uint64_t v4 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  if (v4 != 8)
  {
    if (v4 == 1)
    {
      uint64_t v7 = (long long *)a3;
      uint64_t v8 = (const char *)(a3 + 8);
      uint64_t v9 = a3 + 16;
      uint64_t v10 = a3 + 24;
      uint64_t v11 = a3 + 32;
      uint64_t v12 = a3 + 40;
      uint64_t v13 = a3 + 48;
      uint64_t v14 = a3 + 56;
      v6.__vftable = (std::logic_error_vtbl *)&v15;
      v6.__imp_.__imp_ = (const char *)&v7;
      uint64_t v16 = &v6;
      _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_ENS7_5tupleIJRKdSP_SP_SP_SP_SP_SP_SP_EEEEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENS12_11result_typeERS12_(v3);
    }
    std::logic_error::logic_error(&v6, "number of arguments != histogram rank");
    v6.__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    uint64_t v7 = (long long *)"PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/detail/linearize.hpp";
    uint64_t v8 = "optional_index boost::histogram::detail::args_to_index(std::false_type, S &, const T &, const U &) [I = 0U, N ="
         " 8U, S = boost::histogram::unlimited_storage<>, T = std::vector<boost::histogram::axis::variant<boost::histogra"
         "m::axis::regular<>, boost::histogram::axis::variable<>, boost::histogram::axis::integer<int, boost::use_default"
         ", boost::histogram::axis::option::bit<1>>>>, U = std::tuple<double, double, double, double, double, double, double, double>]";
    uint64_t v9 = 192;
    boost::throw_exception<std::invalid_argument>((uint64_t)&v6, (uint64_t)&v7);
  }
  uint64_t v7 = &v15;
  uint64_t v8 = (const char *)a2;
  uint64_t v9 = a3;
  boost::mp11::detail::mp_for_each_impl<std::integral_constant<unsigned long,0ul>,std::integral_constant<unsigned long,1ul>,std::integral_constant<unsigned long,2ul>,std::integral_constant<unsigned long,3ul>,std::integral_constant<unsigned long,4ul>,std::integral_constant<unsigned long,5ul>,std::integral_constant<unsigned long,6ul>,std::integral_constant<unsigned long,7ul>,boost::histogram::detail::optional_index boost::histogram::detail::args_to_index<0u,8u,boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,std::tuple<double,double,double,double,double,double,double,double>>(std::integral_constant<BOOL,false>,boost::histogram::unlimited_storage<std::allocator<char>> &,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>> const&,std::tuple<double,double,double,double,double,double,double,double> const&)::{lambda(std::integral_constant<unsigned long,0ul>,std::integral_constant<unsigned long,1ul>,std::integral_constant<unsigned long,2ul>,std::integral_constant<unsigned long,3ul>,std::integral_constant<unsigned long,4ul>,std::integral_constant<unsigned long,5ul>,std::integral_constant<unsigned long,6ul>,std::integral_constant<unsigned long,7ul>)#1}>((uint64_t *)&v7, (uint64_t)&v6);
  return v15;
}

void _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_ENS7_5tupleIJRKdSP_SP_SP_SP_SP_SP_SP_EEEEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENS12_11result_typeERS12_(int *a1)
{
  switch(*a1 ^ (*a1 >> 31))
  {
    case 0:
      boost::histogram::detail::linearize_value<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,std::tuple<double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&>>();
    case 1:
      boost::histogram::detail::linearize_value<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,std::tuple<double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&>>();
    case 2:
      boost::histogram::detail::linearize_value<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>,std::tuple<double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&>>();
    default:
      boost::detail::variant::forced_return<void>();
  }
}

void boost::histogram::detail::linearize_value<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,std::tuple<double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&>>()
{
}

uint64_t sub_258F8783C(uint64_t result)
{
  uint64_t v3 = v2[1];
  if ((int)result + 1 >= *v1 + 2 || (int)result <= -2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *v1 + 2;
  }
  *v2 += v3 * ((int)result + 1);
  v2[1] = v5 * v3;
  return result;
}

void _ZZN5boost9histogram4axis6traits5indexINS1_7regularIdNS_11use_defaultES5_S5_EENSt3__15tupleIJRKdSA_SA_SA_SA_SA_SA_SA_EEEEEDaRKT_RKT0_ENKUlRKS6_E_clESK_()
{
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v9, (const char *)(0x8000000258FB1BABLL & 0x7FFFFFFFFFFFFFFFLL));
  if (v9.__r_.__value_.__r.__words[0]) {
    v0 = (char *)v9.__r_.__value_.__r.__words[0];
  }
  else {
    v0 = (char *)(0x8000000258FB1BABLL & 0x7FFFFFFFFFFFFFFFLL);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, v0);
  free(v9.__r_.__value_.__l.__data_);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v9, (const char *)(0x8000000258FB61C7 & 0x7FFFFFFFFFFFFFFFLL));
  if (v9.__r_.__value_.__r.__words[0]) {
    uint64_t v1 = (char *)v9.__r_.__value_.__r.__words[0];
  }
  else {
    uint64_t v1 = (char *)(0x8000000258FB61C7 & 0x7FFFFFFFFFFFFFFFLL);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, v1);
  free(v9.__r_.__value_.__l.__data_);
  uint64_t v2 = (const char *)(*(void *)(MEMORY[0x263F8C240] + 8) & 0x7FFFFFFFFFFFFFFFLL);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v9, v2);
  if (v9.__r_.__value_.__r.__words[0]) {
    uint64_t v3 = (char *)v9.__r_.__value_.__r.__words[0];
  }
  else {
    uint64_t v3 = (char *)v2;
  }
  std::string::basic_string[abi:ne180100]<0>(v6, v3);
  free(v9.__r_.__value_.__l.__data_);
  boost::histogram::detail::cat<std::string,char [35],std::string,char [5],std::string>((uint64_t)v8, ": cannot convert argument of type ", (uint64_t)v7, " to ", (uint64_t)v6);
  uint64_t v4 = std::logic_error::logic_error(&v10, &v9);
  v10.__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
  v5[0] = "PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/axis/traits.hpp";
  v5[1] = "auto boost::histogram::axis::traits::index(const boost::histogram::axis::regular<> &, const std::tuple<const d"
          "ouble &, const double &, const double &, const double &, const double &, const double &, const double &, const"
          " double &> &)::(anonymous class)::operator()(const Axis &) const";
  v5[2] = 190;
  boost::throw_exception<std::invalid_argument>((uint64_t)v4, (uint64_t)v5);
}

void boost::histogram::detail::linearize_value<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,std::tuple<double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&>>()
{
}

uint64_t sub_258F87A70(uint64_t result)
{
  unint64_t v3 = v1[1] - *v1;
  uint64_t v4 = v2[1];
  BOOL v5 = (int)result >= (int)(v3 >> 3) || (int)result <= -2;
  uint64_t v6 = (uint64_t)((v3 << 29) + 0x100000000) >> 32;
  if (v5) {
    uint64_t v6 = 0;
  }
  *v2 += v4 * ((int)result + 1);
  v2[1] = v6 * v4;
  return result;
}

void _ZZN5boost9histogram4axis6traits5indexINS1_8variableIdNS_11use_defaultES5_NSt3__19allocatorIdEEEENS6_5tupleIJRKdSC_SC_SC_SC_SC_SC_SC_EEEEEDaRKT_RKT0_ENKUlRKS9_E_clESM_()
{
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v9, (const char *)(0x8000000258FB2129 & 0x7FFFFFFFFFFFFFFFLL));
  if (v9.__r_.__value_.__r.__words[0]) {
    v0 = (char *)v9.__r_.__value_.__r.__words[0];
  }
  else {
    v0 = (char *)(0x8000000258FB2129 & 0x7FFFFFFFFFFFFFFFLL);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, v0);
  free(v9.__r_.__value_.__l.__data_);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v9, (const char *)(0x8000000258FB61C7 & 0x7FFFFFFFFFFFFFFFLL));
  if (v9.__r_.__value_.__r.__words[0]) {
    uint64_t v1 = (char *)v9.__r_.__value_.__r.__words[0];
  }
  else {
    uint64_t v1 = (char *)(0x8000000258FB61C7 & 0x7FFFFFFFFFFFFFFFLL);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, v1);
  free(v9.__r_.__value_.__l.__data_);
  uint64_t v2 = (const char *)(*(void *)(MEMORY[0x263F8C240] + 8) & 0x7FFFFFFFFFFFFFFFLL);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v9, v2);
  if (v9.__r_.__value_.__r.__words[0]) {
    unint64_t v3 = (char *)v9.__r_.__value_.__r.__words[0];
  }
  else {
    unint64_t v3 = (char *)v2;
  }
  std::string::basic_string[abi:ne180100]<0>(v6, v3);
  free(v9.__r_.__value_.__l.__data_);
  boost::histogram::detail::cat<std::string,char [35],std::string,char [5],std::string>((uint64_t)v8, ": cannot convert argument of type ", (uint64_t)v7, " to ", (uint64_t)v6);
  uint64_t v4 = std::logic_error::logic_error(&v10, &v9);
  v10.__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
  v5[0] = "PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/axis/traits.hpp";
  v5[1] = "auto boost::histogram::axis::traits::index(const boost::histogram::axis::variable<> &, const std::tuple<const "
          "double &, const double &, const double &, const double &, const double &, const double &, const double &, cons"
          "t double &> &)::(anonymous class)::operator()(const Axis &) const";
  v5[2] = 190;
  boost::throw_exception<std::invalid_argument>((uint64_t)v4, (uint64_t)v5);
}

void boost::histogram::detail::linearize_value<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>,std::tuple<double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&>>()
{
}

uint64_t sub_258F87CB4(uint64_t result)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v2[1];
  if ((int)result > (int)v3 || (int)result <= -1) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = v3 + 1;
  }
  *v2 += v4 * (int)result;
  v2[1] = v6 * v4;
  return result;
}

void _ZZN5boost9histogram4axis6traits5indexINS1_7integerIiNS_11use_defaultENS1_6option3bitILj1EEEEENSt3__15tupleIJRKdSD_SD_SD_SD_SD_SD_SD_EEEEEDaRKT_RKT0_ENKUlRKS9_E_clESN_()
{
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v9, (const char *)(0x8000000258FB26FDLL & 0x7FFFFFFFFFFFFFFFLL));
  if (v9.__r_.__value_.__r.__words[0]) {
    v0 = (char *)v9.__r_.__value_.__r.__words[0];
  }
  else {
    v0 = (char *)(0x8000000258FB26FDLL & 0x7FFFFFFFFFFFFFFFLL);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, v0);
  free(v9.__r_.__value_.__l.__data_);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v9, (const char *)(0x8000000258FB61C7 & 0x7FFFFFFFFFFFFFFFLL));
  if (v9.__r_.__value_.__r.__words[0]) {
    uint64_t v1 = (char *)v9.__r_.__value_.__r.__words[0];
  }
  else {
    uint64_t v1 = (char *)(0x8000000258FB61C7 & 0x7FFFFFFFFFFFFFFFLL);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, v1);
  free(v9.__r_.__value_.__l.__data_);
  uint64_t v2 = (const char *)(*(void *)(MEMORY[0x263F8C258] + 8) & 0x7FFFFFFFFFFFFFFFLL);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v9, v2);
  if (v9.__r_.__value_.__r.__words[0]) {
    uint64_t v3 = (char *)v9.__r_.__value_.__r.__words[0];
  }
  else {
    uint64_t v3 = (char *)v2;
  }
  std::string::basic_string[abi:ne180100]<0>(v6, v3);
  free(v9.__r_.__value_.__l.__data_);
  boost::histogram::detail::cat<std::string,char [35],std::string,char [5],std::string>((uint64_t)v8, ": cannot convert argument of type ", (uint64_t)v7, " to ", (uint64_t)v6);
  uint64_t v4 = std::logic_error::logic_error(&v10, &v9);
  v10.__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
  v5[0] = "PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/axis/traits.hpp";
  v5[1] = "auto boost::histogram::axis::traits::index(const boost::histogram::axis::integer<int, boost::use_default, boos"
          "t::histogram::axis::option::bit<1>> &, const std::tuple<const double &, const double &, const double &, const "
          "double &, const double &, const double &, const double &, const double &> &)::(anonymous class)::operator()(co"
          "nst Axis &) const";
  v5[2] = 190;
  boost::throw_exception<std::invalid_argument>((uint64_t)v4, (uint64_t)v5);
}

__n128 boost::mp11::detail::mp_for_each_impl<std::integral_constant<unsigned long,0ul>,std::integral_constant<unsigned long,1ul>,std::integral_constant<unsigned long,2ul>,std::integral_constant<unsigned long,3ul>,std::integral_constant<unsigned long,4ul>,std::integral_constant<unsigned long,5ul>,std::integral_constant<unsigned long,6ul>,std::integral_constant<unsigned long,7ul>,boost::histogram::detail::optional_index boost::histogram::detail::args_to_index<0u,8u,boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,std::tuple<double,double,double,double,double,double,double,double>>(std::integral_constant<BOOL,false>,boost::histogram::unlimited_storage<std::allocator<char>> &,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>> const&,std::tuple<double,double,double,double,double,double,double,double> const&)::{lambda(std::integral_constant<unsigned long,0ul>,std::integral_constant<unsigned long,1ul>,std::integral_constant<unsigned long,2ul>,std::integral_constant<unsigned long,3ul>,std::integral_constant<unsigned long,4ul>,std::integral_constant<unsigned long,5ul>,std::integral_constant<unsigned long,6ul>,std::integral_constant<unsigned long,7ul>)#1}>@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *a1;
  BOOL v5 = *(int **)a1[1];
  uint64_t v6 = a1[2];
  uint64_t v22 = v4;
  uint64_t v23 = v6;
  unint64_t v24 = (uint64_t **)&v22;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v5, &v24);
  uint64_t v7 = (int *)(*(void *)a1[1] + 56);
  uint64_t v8 = a1[2] + 8;
  uint64_t v22 = *a1;
  uint64_t v23 = v8;
  unint64_t v24 = (uint64_t **)&v22;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v7, &v24);
  std::string v9 = (int *)(*(void *)a1[1] + 112);
  uint64_t v10 = a1[2] + 16;
  uint64_t v22 = *a1;
  uint64_t v23 = v10;
  unint64_t v24 = (uint64_t **)&v22;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v9, &v24);
  uint64_t v11 = (int *)(*(void *)a1[1] + 168);
  uint64_t v12 = a1[2] + 24;
  uint64_t v22 = *a1;
  uint64_t v23 = v12;
  unint64_t v24 = (uint64_t **)&v22;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v11, &v24);
  uint64_t v13 = (int *)(*(void *)a1[1] + 224);
  uint64_t v14 = a1[2] + 32;
  uint64_t v22 = *a1;
  uint64_t v23 = v14;
  unint64_t v24 = (uint64_t **)&v22;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v13, &v24);
  long long v15 = (int *)(*(void *)a1[1] + 280);
  uint64_t v16 = a1[2] + 40;
  uint64_t v22 = *a1;
  uint64_t v23 = v16;
  unint64_t v24 = (uint64_t **)&v22;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v15, &v24);
  uint64_t v17 = (int *)(*(void *)a1[1] + 336);
  uint64_t v18 = a1[2] + 48;
  uint64_t v22 = *a1;
  uint64_t v23 = v18;
  unint64_t v24 = (uint64_t **)&v22;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v17, &v24);
  uint64_t v19 = (int *)(*(void *)a1[1] + 392);
  uint64_t v20 = a1[2] + 56;
  uint64_t v22 = *a1;
  uint64_t v23 = v20;
  unint64_t v24 = (uint64_t **)&v22;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v19, &v24);
  __n128 result = *(__n128 *)a1;
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(void *)(a2 + 16) = a1[2];
  return result;
}

uint64_t boost::histogram::detail::fill<boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,double,double,double,double,double,double,double,double,double>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = boost::histogram::detail::args_to_index<0u,9u,boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,std::tuple<double,double,double,double,double,double,double,double,double>>(a1, a2, a3);
  if (!v5) {
    return *(void *)(a1 + 8);
  }
  uint64_t v6 = v4;
  uint64_t v8 = v4;
  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::apply<boost::histogram::unlimited_storage<std::allocator<char>>::incrementor,boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type&,unsigned long &>(a1, (uint64_t)&v9, a1, &v8);
  return v6;
}

uint64_t boost::histogram::detail::args_to_index<0u,9u,boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,std::tuple<double,double,double,double,double,double,double,double,double>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v16 = xmmword_258FB60A0;
  uint64_t v3 = *(int **)a2;
  uint64_t v4 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  if (v4 != 9)
  {
    if (v4 == 1)
    {
      uint64_t v7 = (long long *)a3;
      uint64_t v8 = (const char *)(a3 + 8);
      uint64_t v9 = a3 + 16;
      uint64_t v10 = a3 + 24;
      uint64_t v11 = a3 + 32;
      uint64_t v12 = a3 + 40;
      uint64_t v13 = a3 + 48;
      uint64_t v14 = a3 + 56;
      uint64_t v15 = a3 + 64;
      v6.__vftable = (std::logic_error_vtbl *)&v16;
      v6.__imp_.__imp_ = (const char *)&v7;
      uint64_t v17 = &v6;
      _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_ENS7_5tupleIJRKdSP_SP_SP_SP_SP_SP_SP_SP_EEEEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENS12_11result_typeERS12_(v3);
    }
    std::logic_error::logic_error(&v6, "number of arguments != histogram rank");
    v6.__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    uint64_t v7 = (long long *)"PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/detail/linearize.hpp";
    uint64_t v8 = "optional_index boost::histogram::detail::args_to_index(std::false_type, S &, const T &, const U &) [I = 0U, N ="
         " 9U, S = boost::histogram::unlimited_storage<>, T = std::vector<boost::histogram::axis::variant<boost::histogra"
         "m::axis::regular<>, boost::histogram::axis::variable<>, boost::histogram::axis::integer<int, boost::use_default"
         ", boost::histogram::axis::option::bit<1>>>>, U = std::tuple<double, double, double, double, double, double, dou"
         "ble, double, double>]";
    uint64_t v9 = 192;
    boost::throw_exception<std::invalid_argument>((uint64_t)&v6, (uint64_t)&v7);
  }
  uint64_t v7 = &v16;
  uint64_t v8 = (const char *)a2;
  uint64_t v9 = a3;
  boost::mp11::detail::mp_for_each_impl<std::integral_constant<unsigned long,0ul>,std::integral_constant<unsigned long,1ul>,std::integral_constant<unsigned long,2ul>,std::integral_constant<unsigned long,3ul>,std::integral_constant<unsigned long,4ul>,std::integral_constant<unsigned long,5ul>,std::integral_constant<unsigned long,6ul>,std::integral_constant<unsigned long,7ul>,std::integral_constant<unsigned long,8ul>,boost::histogram::detail::optional_index boost::histogram::detail::args_to_index<0u,9u,boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,std::tuple<double,double,double,double,double,double,double,double,double>>(std::integral_constant<BOOL,false>,boost::histogram::unlimited_storage<std::allocator<char>> &,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>> const&,std::tuple<double,double,double,double,double,double,double,double,double> const&)::{lambda(std::integral_constant<unsigned long,0ul>,std::integral_constant<unsigned long,1ul>,std::integral_constant<unsigned long,2ul>,std::integral_constant<unsigned long,3ul>,std::integral_constant<unsigned long,4ul>,std::integral_constant<unsigned long,5ul>,std::integral_constant<unsigned long,6ul>,std::integral_constant<unsigned long,7ul>,std::integral_constant<unsigned long,8ul>)#1}>((uint64_t *)&v7, (uint64_t)&v6);
  return v16;
}

void _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_ENS7_5tupleIJRKdSP_SP_SP_SP_SP_SP_SP_SP_EEEEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENS12_11result_typeERS12_(int *a1)
{
  switch(*a1 ^ (*a1 >> 31))
  {
    case 0:
      boost::histogram::detail::linearize_value<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,std::tuple<double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&>>();
    case 1:
      boost::histogram::detail::linearize_value<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,std::tuple<double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&>>();
    case 2:
      boost::histogram::detail::linearize_value<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>,std::tuple<double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&>>();
    default:
      boost::detail::variant::forced_return<void>();
  }
}

void boost::histogram::detail::linearize_value<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,std::tuple<double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&>>()
{
}

uint64_t sub_258F882E4(uint64_t result)
{
  uint64_t v3 = v2[1];
  if ((int)result + 1 >= *v1 + 2 || (int)result <= -2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *v1 + 2;
  }
  *v2 += v3 * ((int)result + 1);
  v2[1] = v5 * v3;
  return result;
}

void _ZZN5boost9histogram4axis6traits5indexINS1_7regularIdNS_11use_defaultES5_S5_EENSt3__15tupleIJRKdSA_SA_SA_SA_SA_SA_SA_SA_EEEEEDaRKT_RKT0_ENKUlRKS6_E_clESK_()
{
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v9, (const char *)(0x8000000258FB1BABLL & 0x7FFFFFFFFFFFFFFFLL));
  if (v9.__r_.__value_.__r.__words[0]) {
    v0 = (char *)v9.__r_.__value_.__r.__words[0];
  }
  else {
    v0 = (char *)(0x8000000258FB1BABLL & 0x7FFFFFFFFFFFFFFFLL);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, v0);
  free(v9.__r_.__value_.__l.__data_);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v9, (const char *)(0x8000000258FB61F2 & 0x7FFFFFFFFFFFFFFFLL));
  if (v9.__r_.__value_.__r.__words[0]) {
    uint64_t v1 = (char *)v9.__r_.__value_.__r.__words[0];
  }
  else {
    uint64_t v1 = (char *)(0x8000000258FB61F2 & 0x7FFFFFFFFFFFFFFFLL);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, v1);
  free(v9.__r_.__value_.__l.__data_);
  uint64_t v2 = (const char *)(*(void *)(MEMORY[0x263F8C240] + 8) & 0x7FFFFFFFFFFFFFFFLL);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v9, v2);
  if (v9.__r_.__value_.__r.__words[0]) {
    uint64_t v3 = (char *)v9.__r_.__value_.__r.__words[0];
  }
  else {
    uint64_t v3 = (char *)v2;
  }
  std::string::basic_string[abi:ne180100]<0>(v6, v3);
  free(v9.__r_.__value_.__l.__data_);
  boost::histogram::detail::cat<std::string,char [35],std::string,char [5],std::string>((uint64_t)v8, ": cannot convert argument of type ", (uint64_t)v7, " to ", (uint64_t)v6);
  uint64_t v4 = std::logic_error::logic_error(&v10, &v9);
  v10.__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
  v5[0] = "PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/axis/traits.hpp";
  v5[1] = "auto boost::histogram::axis::traits::index(const boost::histogram::axis::regular<> &, const std::tuple<const d"
          "ouble &, const double &, const double &, const double &, const double &, const double &, const double &, const"
          " double &, const double &> &)::(anonymous class)::operator()(const Axis &) const";
  v5[2] = 190;
  boost::throw_exception<std::invalid_argument>((uint64_t)v4, (uint64_t)v5);
}

void boost::histogram::detail::linearize_value<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,std::tuple<double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&>>()
{
}

uint64_t sub_258F88518(uint64_t result)
{
  unint64_t v3 = v1[1] - *v1;
  uint64_t v4 = v2[1];
  BOOL v5 = (int)result >= (int)(v3 >> 3) || (int)result <= -2;
  uint64_t v6 = (uint64_t)((v3 << 29) + 0x100000000) >> 32;
  if (v5) {
    uint64_t v6 = 0;
  }
  *v2 += v4 * ((int)result + 1);
  v2[1] = v6 * v4;
  return result;
}

void _ZZN5boost9histogram4axis6traits5indexINS1_8variableIdNS_11use_defaultES5_NSt3__19allocatorIdEEEENS6_5tupleIJRKdSC_SC_SC_SC_SC_SC_SC_SC_EEEEEDaRKT_RKT0_ENKUlRKS9_E_clESM_()
{
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v9, (const char *)(0x8000000258FB2129 & 0x7FFFFFFFFFFFFFFFLL));
  if (v9.__r_.__value_.__r.__words[0]) {
    v0 = (char *)v9.__r_.__value_.__r.__words[0];
  }
  else {
    v0 = (char *)(0x8000000258FB2129 & 0x7FFFFFFFFFFFFFFFLL);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, v0);
  free(v9.__r_.__value_.__l.__data_);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v9, (const char *)(0x8000000258FB61F2 & 0x7FFFFFFFFFFFFFFFLL));
  if (v9.__r_.__value_.__r.__words[0]) {
    uint64_t v1 = (char *)v9.__r_.__value_.__r.__words[0];
  }
  else {
    uint64_t v1 = (char *)(0x8000000258FB61F2 & 0x7FFFFFFFFFFFFFFFLL);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, v1);
  free(v9.__r_.__value_.__l.__data_);
  uint64_t v2 = (const char *)(*(void *)(MEMORY[0x263F8C240] + 8) & 0x7FFFFFFFFFFFFFFFLL);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v9, v2);
  if (v9.__r_.__value_.__r.__words[0]) {
    unint64_t v3 = (char *)v9.__r_.__value_.__r.__words[0];
  }
  else {
    unint64_t v3 = (char *)v2;
  }
  std::string::basic_string[abi:ne180100]<0>(v6, v3);
  free(v9.__r_.__value_.__l.__data_);
  boost::histogram::detail::cat<std::string,char [35],std::string,char [5],std::string>((uint64_t)v8, ": cannot convert argument of type ", (uint64_t)v7, " to ", (uint64_t)v6);
  uint64_t v4 = std::logic_error::logic_error(&v10, &v9);
  v10.__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
  v5[0] = "PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/axis/traits.hpp";
  v5[1] = "auto boost::histogram::axis::traits::index(const boost::histogram::axis::variable<> &, const std::tuple<const "
          "double &, const double &, const double &, const double &, const double &, const double &, const double &, cons"
          "t double &, const double &> &)::(anonymous class)::operator()(const Axis &) const";
  v5[2] = 190;
  boost::throw_exception<std::invalid_argument>((uint64_t)v4, (uint64_t)v5);
}

void boost::histogram::detail::linearize_value<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>,std::tuple<double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&>>()
{
}

uint64_t sub_258F8875C(uint64_t result)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v2[1];
  if ((int)result > (int)v3 || (int)result <= -1) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = v3 + 1;
  }
  *v2 += v4 * (int)result;
  v2[1] = v6 * v4;
  return result;
}

void _ZZN5boost9histogram4axis6traits5indexINS1_7integerIiNS_11use_defaultENS1_6option3bitILj1EEEEENSt3__15tupleIJRKdSD_SD_SD_SD_SD_SD_SD_SD_EEEEEDaRKT_RKT0_ENKUlRKS9_E_clESN_()
{
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v9, (const char *)(0x8000000258FB26FDLL & 0x7FFFFFFFFFFFFFFFLL));
  if (v9.__r_.__value_.__r.__words[0]) {
    v0 = (char *)v9.__r_.__value_.__r.__words[0];
  }
  else {
    v0 = (char *)(0x8000000258FB26FDLL & 0x7FFFFFFFFFFFFFFFLL);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, v0);
  free(v9.__r_.__value_.__l.__data_);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v9, (const char *)(0x8000000258FB61F2 & 0x7FFFFFFFFFFFFFFFLL));
  if (v9.__r_.__value_.__r.__words[0]) {
    uint64_t v1 = (char *)v9.__r_.__value_.__r.__words[0];
  }
  else {
    uint64_t v1 = (char *)(0x8000000258FB61F2 & 0x7FFFFFFFFFFFFFFFLL);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, v1);
  free(v9.__r_.__value_.__l.__data_);
  uint64_t v2 = (const char *)(*(void *)(MEMORY[0x263F8C258] + 8) & 0x7FFFFFFFFFFFFFFFLL);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v9, v2);
  if (v9.__r_.__value_.__r.__words[0]) {
    uint64_t v3 = (char *)v9.__r_.__value_.__r.__words[0];
  }
  else {
    uint64_t v3 = (char *)v2;
  }
  std::string::basic_string[abi:ne180100]<0>(v6, v3);
  free(v9.__r_.__value_.__l.__data_);
  boost::histogram::detail::cat<std::string,char [35],std::string,char [5],std::string>((uint64_t)v8, ": cannot convert argument of type ", (uint64_t)v7, " to ", (uint64_t)v6);
  uint64_t v4 = std::logic_error::logic_error(&v10, &v9);
  v10.__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
  v5[0] = "PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/axis/traits.hpp";
  v5[1] = "auto boost::histogram::axis::traits::index(const boost::histogram::axis::integer<int, boost::use_default, boos"
          "t::histogram::axis::option::bit<1>> &, const std::tuple<const double &, const double &, const double &, const "
          "double &, const double &, const double &, const double &, const double &, const double &> &)::(anonymous class"
          ")::operator()(const Axis &) const";
  v5[2] = 190;
  boost::throw_exception<std::invalid_argument>((uint64_t)v4, (uint64_t)v5);
}

__n128 boost::mp11::detail::mp_for_each_impl<std::integral_constant<unsigned long,0ul>,std::integral_constant<unsigned long,1ul>,std::integral_constant<unsigned long,2ul>,std::integral_constant<unsigned long,3ul>,std::integral_constant<unsigned long,4ul>,std::integral_constant<unsigned long,5ul>,std::integral_constant<unsigned long,6ul>,std::integral_constant<unsigned long,7ul>,std::integral_constant<unsigned long,8ul>,boost::histogram::detail::optional_index boost::histogram::detail::args_to_index<0u,9u,boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,std::tuple<double,double,double,double,double,double,double,double,double>>(std::integral_constant<BOOL,false>,boost::histogram::unlimited_storage<std::allocator<char>> &,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>> const&,std::tuple<double,double,double,double,double,double,double,double,double> const&)::{lambda(std::integral_constant<unsigned long,0ul>,std::integral_constant<unsigned long,1ul>,std::integral_constant<unsigned long,2ul>,std::integral_constant<unsigned long,3ul>,std::integral_constant<unsigned long,4ul>,std::integral_constant<unsigned long,5ul>,std::integral_constant<unsigned long,6ul>,std::integral_constant<unsigned long,7ul>,std::integral_constant<unsigned long,8ul>)#1}>@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *a1;
  BOOL v5 = *(int **)a1[1];
  uint64_t v6 = a1[2];
  uint64_t v24 = v4;
  uint64_t v25 = v6;
  uint64_t v26 = (uint64_t **)&v24;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v5, &v26);
  uint64_t v7 = (int *)(*(void *)a1[1] + 56);
  uint64_t v8 = a1[2] + 8;
  uint64_t v24 = *a1;
  uint64_t v25 = v8;
  uint64_t v26 = (uint64_t **)&v24;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v7, &v26);
  std::string v9 = (int *)(*(void *)a1[1] + 112);
  uint64_t v10 = a1[2] + 16;
  uint64_t v24 = *a1;
  uint64_t v25 = v10;
  uint64_t v26 = (uint64_t **)&v24;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v9, &v26);
  uint64_t v11 = (int *)(*(void *)a1[1] + 168);
  uint64_t v12 = a1[2] + 24;
  uint64_t v24 = *a1;
  uint64_t v25 = v12;
  uint64_t v26 = (uint64_t **)&v24;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v11, &v26);
  uint64_t v13 = (int *)(*(void *)a1[1] + 224);
  uint64_t v14 = a1[2] + 32;
  uint64_t v24 = *a1;
  uint64_t v25 = v14;
  uint64_t v26 = (uint64_t **)&v24;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v13, &v26);
  uint64_t v15 = (int *)(*(void *)a1[1] + 280);
  uint64_t v16 = a1[2] + 40;
  uint64_t v24 = *a1;
  uint64_t v25 = v16;
  uint64_t v26 = (uint64_t **)&v24;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v15, &v26);
  uint64_t v17 = (int *)(*(void *)a1[1] + 336);
  uint64_t v18 = a1[2] + 48;
  uint64_t v24 = *a1;
  uint64_t v25 = v18;
  uint64_t v26 = (uint64_t **)&v24;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v17, &v26);
  uint64_t v19 = (int *)(*(void *)a1[1] + 392);
  uint64_t v20 = a1[2] + 56;
  uint64_t v24 = *a1;
  uint64_t v25 = v20;
  uint64_t v26 = (uint64_t **)&v24;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v19, &v26);
  uint64_t v21 = (int *)(*(void *)a1[1] + 448);
  uint64_t v22 = a1[2] + 64;
  uint64_t v24 = *a1;
  uint64_t v25 = v22;
  uint64_t v26 = (uint64_t **)&v24;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v21, &v26);
  __n128 result = *(__n128 *)a1;
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(void *)(a2 + 16) = a1[2];
  return result;
}

uint64_t boost::histogram::detail::fill<boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,double,double,double,double,double,double,double,double,double,double>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = boost::histogram::detail::args_to_index<0u,10u,boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,std::tuple<double,double,double,double,double,double,double,double,double,double>>(a1, a2, a3);
  if (!v5) {
    return *(void *)(a1 + 8);
  }
  uint64_t v6 = v4;
  uint64_t v8 = v4;
  boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::apply<boost::histogram::unlimited_storage<std::allocator<char>>::incrementor,boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type&,unsigned long &>(a1, (uint64_t)&v9, a1, &v8);
  return v6;
}

uint64_t boost::histogram::detail::args_to_index<0u,10u,boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,std::tuple<double,double,double,double,double,double,double,double,double,double>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v17 = xmmword_258FB60A0;
  uint64_t v3 = *(int **)a2;
  uint64_t v4 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  if (v4 != 10)
  {
    if (v4 == 1)
    {
      uint64_t v7 = (long long *)a3;
      uint64_t v8 = (const char *)(a3 + 8);
      uint64_t v9 = a3 + 16;
      uint64_t v10 = a3 + 24;
      uint64_t v11 = a3 + 32;
      uint64_t v12 = a3 + 40;
      uint64_t v13 = a3 + 48;
      uint64_t v14 = a3 + 56;
      uint64_t v15 = a3 + 64;
      uint64_t v16 = a3 + 72;
      v6.__vftable = (std::logic_error_vtbl *)&v17;
      v6.__imp_.__imp_ = (const char *)&v7;
      uint64_t v18 = &v6;
      _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_ENS7_5tupleIJRKdSP_SP_SP_SP_SP_SP_SP_SP_SP_EEEEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENS12_11result_typeERS12_(v3);
    }
    std::logic_error::logic_error(&v6, "number of arguments != histogram rank");
    v6.__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    uint64_t v7 = (long long *)"PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/detail/linearize.hpp";
    uint64_t v8 = "optional_index boost::histogram::detail::args_to_index(std::false_type, S &, const T &, const U &) [I = 0U, N ="
         " 10U, S = boost::histogram::unlimited_storage<>, T = std::vector<boost::histogram::axis::variant<boost::histogr"
         "am::axis::regular<>, boost::histogram::axis::variable<>, boost::histogram::axis::integer<int, boost::use_defaul"
         "t, boost::histogram::axis::option::bit<1>>>>, U = std::tuple<double, double, double, double, double, double, do"
         "uble, double, double, double>]";
    uint64_t v9 = 192;
    boost::throw_exception<std::invalid_argument>((uint64_t)&v6, (uint64_t)&v7);
  }
  uint64_t v7 = &v17;
  uint64_t v8 = (const char *)a2;
  uint64_t v9 = a3;
  boost::mp11::detail::mp_for_each_impl<std::integral_constant<unsigned long,0ul>,std::integral_constant<unsigned long,1ul>,std::integral_constant<unsigned long,2ul>,std::integral_constant<unsigned long,3ul>,std::integral_constant<unsigned long,4ul>,std::integral_constant<unsigned long,5ul>,std::integral_constant<unsigned long,6ul>,std::integral_constant<unsigned long,7ul>,std::integral_constant<unsigned long,8ul>,std::integral_constant<unsigned long,9ul>,boost::histogram::detail::optional_index boost::histogram::detail::args_to_index<0u,10u,boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,std::tuple<double,double,double,double,double,double,double,double,double,double>>(std::integral_constant<BOOL,false>,boost::histogram::unlimited_storage<std::allocator<char>> &,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>> const&,std::tuple<double,double,double,double,double,double,double,double,double,double> const&)::{lambda(std::integral_constant<unsigned long,0ul>,std::integral_constant<unsigned long,1ul>,std::integral_constant<unsigned long,2ul>,std::integral_constant<unsigned long,3ul>,std::integral_constant<unsigned long,4ul>,std::integral_constant<unsigned long,5ul>,std::integral_constant<unsigned long,6ul>,std::integral_constant<unsigned long,7ul>,std::integral_constant<unsigned long,8ul>,std::integral_constant<unsigned long,9ul>)#1}>((uint64_t *)&v7, (uint64_t)&v6);
  return v17;
}

void _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_ENS7_5tupleIJRKdSP_SP_SP_SP_SP_SP_SP_SP_SP_EEEEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENS12_11result_typeERS12_(int *a1)
{
  switch(*a1 ^ (*a1 >> 31))
  {
    case 0:
      boost::histogram::detail::linearize_value<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,std::tuple<double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&>>();
    case 1:
      boost::histogram::detail::linearize_value<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,std::tuple<double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&>>();
    case 2:
      boost::histogram::detail::linearize_value<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>,std::tuple<double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&>>();
    default:
      boost::detail::variant::forced_return<void>();
  }
}

void boost::histogram::detail::linearize_value<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,std::tuple<double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&>>()
{
}

uint64_t sub_258F88DB4(uint64_t result)
{
  uint64_t v3 = v2[1];
  if ((int)result + 1 >= *v1 + 2 || (int)result <= -2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *v1 + 2;
  }
  *v2 += v3 * ((int)result + 1);
  v2[1] = v5 * v3;
  return result;
}

void _ZZN5boost9histogram4axis6traits5indexINS1_7regularIdNS_11use_defaultES5_S5_EENSt3__15tupleIJRKdSA_SA_SA_SA_SA_SA_SA_SA_SA_EEEEEDaRKT_RKT0_ENKUlRKS6_E_clESK_()
{
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v9, (const char *)(0x8000000258FB1BABLL & 0x7FFFFFFFFFFFFFFFLL));
  if (v9.__r_.__value_.__r.__words[0]) {
    v0 = (char *)v9.__r_.__value_.__r.__words[0];
  }
  else {
    v0 = (char *)(0x8000000258FB1BABLL & 0x7FFFFFFFFFFFFFFFLL);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, v0);
  free(v9.__r_.__value_.__l.__data_);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v9, (const char *)(0x8000000258FB6220 & 0x7FFFFFFFFFFFFFFFLL));
  if (v9.__r_.__value_.__r.__words[0]) {
    uint64_t v1 = (char *)v9.__r_.__value_.__r.__words[0];
  }
  else {
    uint64_t v1 = (char *)(0x8000000258FB6220 & 0x7FFFFFFFFFFFFFFFLL);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, v1);
  free(v9.__r_.__value_.__l.__data_);
  uint64_t v2 = (const char *)(*(void *)(MEMORY[0x263F8C240] + 8) & 0x7FFFFFFFFFFFFFFFLL);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v9, v2);
  if (v9.__r_.__value_.__r.__words[0]) {
    uint64_t v3 = (char *)v9.__r_.__value_.__r.__words[0];
  }
  else {
    uint64_t v3 = (char *)v2;
  }
  std::string::basic_string[abi:ne180100]<0>(v6, v3);
  free(v9.__r_.__value_.__l.__data_);
  boost::histogram::detail::cat<std::string,char [35],std::string,char [5],std::string>((uint64_t)v8, ": cannot convert argument of type ", (uint64_t)v7, " to ", (uint64_t)v6);
  uint64_t v4 = std::logic_error::logic_error(&v10, &v9);
  v10.__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
  v5[0] = "PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/axis/traits.hpp";
  v5[1] = "auto boost::histogram::axis::traits::index(const boost::histogram::axis::regular<> &, const std::tuple<const d"
          "ouble &, const double &, const double &, const double &, const double &, const double &, const double &, const"
          " double &, const double &, const double &> &)::(anonymous class)::operator()(const Axis &) const";
  v5[2] = 190;
  boost::throw_exception<std::invalid_argument>((uint64_t)v4, (uint64_t)v5);
}

void boost::histogram::detail::linearize_value<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,std::tuple<double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&>>()
{
}

uint64_t sub_258F88FE8(uint64_t result)
{
  unint64_t v3 = v1[1] - *v1;
  uint64_t v4 = v2[1];
  BOOL v5 = (int)result >= (int)(v3 >> 3) || (int)result <= -2;
  uint64_t v6 = (uint64_t)((v3 << 29) + 0x100000000) >> 32;
  if (v5) {
    uint64_t v6 = 0;
  }
  *v2 += v4 * ((int)result + 1);
  v2[1] = v6 * v4;
  return result;
}

void _ZZN5boost9histogram4axis6traits5indexINS1_8variableIdNS_11use_defaultES5_NSt3__19allocatorIdEEEENS6_5tupleIJRKdSC_SC_SC_SC_SC_SC_SC_SC_SC_EEEEEDaRKT_RKT0_ENKUlRKS9_E_clESM_()
{
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v9, (const char *)(0x8000000258FB2129 & 0x7FFFFFFFFFFFFFFFLL));
  if (v9.__r_.__value_.__r.__words[0]) {
    v0 = (char *)v9.__r_.__value_.__r.__words[0];
  }
  else {
    v0 = (char *)(0x8000000258FB2129 & 0x7FFFFFFFFFFFFFFFLL);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, v0);
  free(v9.__r_.__value_.__l.__data_);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v9, (const char *)(0x8000000258FB6220 & 0x7FFFFFFFFFFFFFFFLL));
  if (v9.__r_.__value_.__r.__words[0]) {
    uint64_t v1 = (char *)v9.__r_.__value_.__r.__words[0];
  }
  else {
    uint64_t v1 = (char *)(0x8000000258FB6220 & 0x7FFFFFFFFFFFFFFFLL);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, v1);
  free(v9.__r_.__value_.__l.__data_);
  uint64_t v2 = (const char *)(*(void *)(MEMORY[0x263F8C240] + 8) & 0x7FFFFFFFFFFFFFFFLL);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v9, v2);
  if (v9.__r_.__value_.__r.__words[0]) {
    unint64_t v3 = (char *)v9.__r_.__value_.__r.__words[0];
  }
  else {
    unint64_t v3 = (char *)v2;
  }
  std::string::basic_string[abi:ne180100]<0>(v6, v3);
  free(v9.__r_.__value_.__l.__data_);
  boost::histogram::detail::cat<std::string,char [35],std::string,char [5],std::string>((uint64_t)v8, ": cannot convert argument of type ", (uint64_t)v7, " to ", (uint64_t)v6);
  uint64_t v4 = std::logic_error::logic_error(&v10, &v9);
  v10.__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
  v5[0] = "PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/axis/traits.hpp";
  v5[1] = "auto boost::histogram::axis::traits::index(const boost::histogram::axis::variable<> &, const std::tuple<const "
          "double &, const double &, const double &, const double &, const double &, const double &, const double &, cons"
          "t double &, const double &, const double &> &)::(anonymous class)::operator()(const Axis &) const";
  v5[2] = 190;
  boost::throw_exception<std::invalid_argument>((uint64_t)v4, (uint64_t)v5);
}

void boost::histogram::detail::linearize_value<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>,std::tuple<double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&,double const&>>()
{
}

uint64_t sub_258F8922C(uint64_t result)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v2[1];
  if ((int)result > (int)v3 || (int)result <= -1) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = v3 + 1;
  }
  *v2 += v4 * (int)result;
  v2[1] = v6 * v4;
  return result;
}

void _ZZN5boost9histogram4axis6traits5indexINS1_7integerIiNS_11use_defaultENS1_6option3bitILj1EEEEENSt3__15tupleIJRKdSD_SD_SD_SD_SD_SD_SD_SD_SD_EEEEEDaRKT_RKT0_ENKUlRKS9_E_clESN_()
{
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v9, (const char *)(0x8000000258FB26FDLL & 0x7FFFFFFFFFFFFFFFLL));
  if (v9.__r_.__value_.__r.__words[0]) {
    v0 = (char *)v9.__r_.__value_.__r.__words[0];
  }
  else {
    v0 = (char *)(0x8000000258FB26FDLL & 0x7FFFFFFFFFFFFFFFLL);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, v0);
  free(v9.__r_.__value_.__l.__data_);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v9, (const char *)(0x8000000258FB6220 & 0x7FFFFFFFFFFFFFFFLL));
  if (v9.__r_.__value_.__r.__words[0]) {
    uint64_t v1 = (char *)v9.__r_.__value_.__r.__words[0];
  }
  else {
    uint64_t v1 = (char *)(0x8000000258FB6220 & 0x7FFFFFFFFFFFFFFFLL);
  }
  std::string::basic_string[abi:ne180100]<0>(v7, v1);
  free(v9.__r_.__value_.__l.__data_);
  uint64_t v2 = (const char *)(*(void *)(MEMORY[0x263F8C258] + 8) & 0x7FFFFFFFFFFFFFFFLL);
  boost::core::scoped_demangled_name::scoped_demangled_name((boost::core::scoped_demangled_name *)&v9, v2);
  if (v9.__r_.__value_.__r.__words[0]) {
    uint64_t v3 = (char *)v9.__r_.__value_.__r.__words[0];
  }
  else {
    uint64_t v3 = (char *)v2;
  }
  std::string::basic_string[abi:ne180100]<0>(v6, v3);
  free(v9.__r_.__value_.__l.__data_);
  boost::histogram::detail::cat<std::string,char [35],std::string,char [5],std::string>((uint64_t)v8, ": cannot convert argument of type ", (uint64_t)v7, " to ", (uint64_t)v6);
  uint64_t v4 = std::logic_error::logic_error(&v10, &v9);
  v10.__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
  v5[0] = "PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/axis/traits.hpp";
  v5[1] = "auto boost::histogram::axis::traits::index(const boost::histogram::axis::integer<int, boost::use_default, boos"
          "t::histogram::axis::option::bit<1>> &, const std::tuple<const double &, const double &, const double &, const "
          "double &, const double &, const double &, const double &, const double &, const double &, const double &> &)::"
          "(anonymous class)::operator()(const Axis &) const";
  v5[2] = 190;
  boost::throw_exception<std::invalid_argument>((uint64_t)v4, (uint64_t)v5);
}

__n128 boost::mp11::detail::mp_for_each_impl<std::integral_constant<unsigned long,0ul>,std::integral_constant<unsigned long,1ul>,std::integral_constant<unsigned long,2ul>,std::integral_constant<unsigned long,3ul>,std::integral_constant<unsigned long,4ul>,std::integral_constant<unsigned long,5ul>,std::integral_constant<unsigned long,6ul>,std::integral_constant<unsigned long,7ul>,std::integral_constant<unsigned long,8ul>,std::integral_constant<unsigned long,9ul>,boost::histogram::detail::optional_index boost::histogram::detail::args_to_index<0u,10u,boost::histogram::unlimited_storage<std::allocator<char>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,std::tuple<double,double,double,double,double,double,double,double,double,double>>(std::integral_constant<BOOL,false>,boost::histogram::unlimited_storage<std::allocator<char>> &,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>> const&,std::tuple<double,double,double,double,double,double,double,double,double,double> const&)::{lambda(std::integral_constant<unsigned long,0ul>,std::integral_constant<unsigned long,1ul>,std::integral_constant<unsigned long,2ul>,std::integral_constant<unsigned long,3ul>,std::integral_constant<unsigned long,4ul>,std::integral_constant<unsigned long,5ul>,std::integral_constant<unsigned long,6ul>,std::integral_constant<unsigned long,7ul>,std::integral_constant<unsigned long,8ul>,std::integral_constant<unsigned long,9ul>)#1}>@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *a1;
  BOOL v5 = *(int **)a1[1];
  uint64_t v6 = a1[2];
  uint64_t v26 = v4;
  uint64_t v27 = v6;
  uint64_t v28 = (uint64_t **)&v26;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v5, &v28);
  uint64_t v7 = (int *)(*(void *)a1[1] + 56);
  uint64_t v8 = a1[2] + 8;
  uint64_t v26 = *a1;
  uint64_t v27 = v8;
  uint64_t v28 = (uint64_t **)&v26;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v7, &v28);
  std::string v9 = (int *)(*(void *)a1[1] + 112);
  uint64_t v10 = a1[2] + 16;
  uint64_t v26 = *a1;
  uint64_t v27 = v10;
  uint64_t v28 = (uint64_t **)&v26;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v9, &v28);
  uint64_t v11 = (int *)(*(void *)a1[1] + 168);
  uint64_t v12 = a1[2] + 24;
  uint64_t v26 = *a1;
  uint64_t v27 = v12;
  uint64_t v28 = (uint64_t **)&v26;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v11, &v28);
  uint64_t v13 = (int *)(*(void *)a1[1] + 224);
  uint64_t v14 = a1[2] + 32;
  uint64_t v26 = *a1;
  uint64_t v27 = v14;
  uint64_t v28 = (uint64_t **)&v26;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v13, &v28);
  uint64_t v15 = (int *)(*(void *)a1[1] + 280);
  uint64_t v16 = a1[2] + 40;
  uint64_t v26 = *a1;
  uint64_t v27 = v16;
  uint64_t v28 = (uint64_t **)&v26;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v15, &v28);
  long long v17 = (int *)(*(void *)a1[1] + 336);
  uint64_t v18 = a1[2] + 48;
  uint64_t v26 = *a1;
  uint64_t v27 = v18;
  uint64_t v28 = (uint64_t **)&v26;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v17, &v28);
  uint64_t v19 = (int *)(*(void *)a1[1] + 392);
  uint64_t v20 = a1[2] + 56;
  uint64_t v26 = *a1;
  uint64_t v27 = v20;
  uint64_t v28 = (uint64_t **)&v26;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v19, &v28);
  uint64_t v21 = (int *)(*(void *)a1[1] + 448);
  uint64_t v22 = a1[2] + 64;
  uint64_t v26 = *a1;
  uint64_t v27 = v22;
  uint64_t v28 = (uint64_t **)&v26;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v21, &v28);
  uint64_t v23 = (int *)(*(void *)a1[1] + 504);
  uint64_t v24 = a1[2] + 72;
  uint64_t v26 = *a1;
  uint64_t v27 = v24;
  uint64_t v28 = (uint64_t **)&v26;
  _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNS1_6detail15linearize_valueIJS5_SA_SF_EdEEvRNSL_14optional_indexERKNS2_7variantIJDpT_EEERKT0_EUlRKT_E_RKSG_EEEENSY_11result_typeERSY_(v23, &v28);
  __n128 result = *(__n128 *)a1;
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(void *)(a2 + 16) = a1[2];
  return result;
}

uint64_t boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::variant(uint64_t a1, uint64_t a2)
{
  std::string v9 = (std::string *)(a1 + 8);
  int v4 = *(_DWORD *)a2;
  uint64_t v3 = a2 + 8;
  switch(v4 ^ (v4 >> 31))
  {
    case 0:
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
      uint64_t v6 = (std::string *)(a1 + 16);
      if (*(char *)(a2 + 39) < 0)
      {
        std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 16), *(void *)(a2 + 24));
      }
      else
      {
        long long v7 = *(_OWORD *)(a2 + 16);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
      }
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      break;
    case 1:
      boost::detail::variant::copy_into::internal_visit<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>(&v9, v3);
      break;
    case 2:
      boost::detail::variant::copy_into::internal_visit<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>(&v9, v3);
      break;
    default:
      boost::detail::variant::forced_return<void>();
  }
  *(_DWORD *)a1 = *(_DWORD *)a2 ^ (*(int *)a2 >> 31);
  return a1;
}

void boost::detail::variant::copy_into::internal_visit<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>>(std::string **a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  v3->__r_.__value_.__r.__words[0] = 0;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(v3, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  int v4 = v3 + 1;
  if (*(char *)(a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 24);
    v3[1].__r_.__value_.__r.__words[2] = *(void *)(a2 + 40);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
}

void sub_258F89770(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void boost::detail::variant::copy_into::internal_visit<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>(void *a1, uint64_t a2)
{
  uint64_t v3 = (_DWORD *)*a1;
  int v4 = (_DWORD *)*a1;
  _DWORD *v4 = *(_DWORD *)a2;
  long long v5 = (std::string *)(v4 + 2);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 8);
    v5->__r_.__value_.__r.__words[2] = *(void *)(a2 + 24);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  v3[8] = *(_DWORD *)(a2 + 32);
}

uint64_t boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>::regular(uint64_t result, int a2, long long *a3, double a4, double a5)
{
  *(_DWORD *)__n128 result = a2;
  long long v5 = *a3;
  *(void *)(result + 24) = *((void *)a3 + 2);
  *(_OWORD *)(result + 8) = v5;
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = 0;
  *(void *)a3 = 0;
  double v6 = a5 - a4;
  *(double *)(result + 32) = a4;
  *(double *)(result + 40) = v6;
  if (!*(_DWORD *)result)
  {
    std::logic_error::logic_error(&v10, "bins > 0 required");
    v10.__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    long long v7 = "PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/axis/regular.hpp";
    uint64_t v8 = "boost::histogram::axis::regular<>::regular(transform_type, unsigned int, value_type, value_type, metadata_type)"
         " [Value = double, Transform = boost::use_default, MetaData = boost::use_default, Options = boost::use_default]";
    uint64_t v9 = 158;
    boost::throw_exception<std::invalid_argument>((uint64_t)&v10, (uint64_t)&v7);
  }
  if ((*(void *)&a4 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*(void *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    std::logic_error::logic_error(&v10, "forward transform of start or stop invalid");
    v10.__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    long long v7 = "PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/axis/regular.hpp";
    uint64_t v8 = "boost::histogram::axis::regular<>::regular(transform_type, unsigned int, value_type, value_type, metadata_type)"
         " [Value = double, Transform = boost::use_default, MetaData = boost::use_default, Options = boost::use_default]";
    uint64_t v9 = 161;
    boost::throw_exception<std::invalid_argument>((uint64_t)&v10, (uint64_t)&v7);
  }
  if (v6 == 0.0)
  {
    std::logic_error::logic_error(&v10, "range of axis is zero");
    v10.__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    long long v7 = "PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/axis/regular.hpp";
    uint64_t v8 = "boost::histogram::axis::regular<>::regular(transform_type, unsigned int, value_type, value_type, metadata_type)"
         " [Value = double, Transform = boost::use_default, MetaData = boost::use_default, Options = boost::use_default]";
    uint64_t v9 = 163;
    boost::throw_exception<std::invalid_argument>((uint64_t)&v10, (uint64_t)&v7);
  }
  return result;
}

void sub_258F89994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  MEMORY[0x25A2D4810](va);
  if (*(char *)(v5 + 31) < 0) {
    operator delete(*(void **)(v5 + 8));
  }
  _Unwind_Resume(a1);
}

uint64_t boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>::variable<std::__wrap_iter<double const*>,boost::histogram::detail::requires_iterator<std::__wrap_iter<double const*>,void>>(uint64_t a1, void *a2, double *a3, long long *a4)
{
  *(void *)(a1 + 16) = 0;
  uint64_t v5 = (void *)(a1 + 16);
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  long long v6 = *a4;
  *(void *)(a1 + 40) = *((void *)a4 + 2);
  *(_OWORD *)(a1 + 24) = v6;
  *((void *)a4 + 1) = 0;
  *((void *)a4 + 2) = 0;
  *(void *)a4 = 0;
  if ((char *)a3 - (char *)a2 <= 15)
  {
    std::logic_error::logic_error(&v36, "bins > 0 required");
    v36.__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    uint64_t v33 = "PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/axis/variable.hpp";
    uint64_t v34 = "boost::histogram::axis::variable<>::variable(It, It, metadata_type, allocator_type) [Value = double, MetaData "
          "= boost::use_default, Options = boost::use_default, Allocator = std::allocator<double>, It = std::__wrap_iter<"
          "const double *>]";
    uint64_t v35 = 68;
    boost::throw_exception<std::invalid_argument>((uint64_t)&v36, (uint64_t)&v33);
  }
  std::vector<double>::reserve((void **)a1, (unint64_t)((char *)a3 - (char *)a2) >> 3);
  std::logic_error v10 = *(void **)(a1 + 8);
  unint64_t v9 = *(void *)(a1 + 16);
  if ((unint64_t)v10 >= v9)
  {
    uint64_t v12 = *(void **)a1;
    uint64_t v13 = ((uint64_t)v10 - *(void *)a1) >> 3;
    unint64_t v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 61) {
      std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = v9 - (void)v12;
    if (v15 >> 2 > v14) {
      unint64_t v14 = v15 >> 2;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v14;
    }
    if (v16)
    {
      long long v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v5, v16);
      uint64_t v12 = *(void **)a1;
      std::logic_error v10 = *(void **)(a1 + 8);
    }
    else
    {
      long long v17 = 0;
    }
    uint64_t v18 = &v17[8 * v13];
    uint64_t v19 = &v17[8 * v16];
    *(void *)uint64_t v18 = *a2;
    uint64_t v11 = (double *)(v18 + 8);
    while (v10 != v12)
    {
      uint64_t v20 = *--v10;
      *((void *)v18 - 1) = v20;
      v18 -= 8;
    }
    *(void *)a1 = v18;
    *(void *)(a1 + 8) = v11;
    *(void *)(a1 + 16) = v19;
    if (v12) {
      operator delete(v12);
    }
  }
  else
  {
    *std::logic_error v10 = *a2;
    uint64_t v11 = (double *)(v10 + 1);
  }
  uint64_t v21 = (double *)(a2 + 1);
  for (*(void *)(a1 + 8) = v11; v21 != a3; uint64_t v11 = v23)
  {
    double v22 = *v21;
    if (*v21 <= *(v11 - 1))
    {
      std::logic_error::logic_error(&v36, "input sequence must be strictly ascending");
      v36.__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
      uint64_t v33 = "PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/axis/variable.hpp";
      uint64_t v34 = "boost::histogram::axis::variable<>::variable(It, It, metadata_type, allocator_type) [Value = double, MetaDat"
            "a = boost::use_default, Options = boost::use_default, Allocator = std::allocator<double>, It = std::__wrap_i"
            "ter<const double *>]";
      uint64_t v35 = 76;
      boost::throw_exception<std::invalid_argument>((uint64_t)&v36, (uint64_t)&v33);
    }
    if ((unint64_t)v11 >= *v5)
    {
      uint64_t v24 = *(double **)a1;
      uint64_t v25 = ((uint64_t)v11 - *(void *)a1) >> 3;
      unint64_t v26 = v25 + 1;
      if ((unint64_t)(v25 + 1) >> 61) {
        std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v27 = *v5 - (void)v24;
      if (v27 >> 2 > v26) {
        unint64_t v26 = v27 >> 2;
      }
      if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v28 = v26;
      }
      if (v28)
      {
        char v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v5, v28);
        uint64_t v24 = *(double **)a1;
        uint64_t v11 = *(double **)(a1 + 8);
        double v22 = *v21;
      }
      else
      {
        char v29 = 0;
      }
      int v30 = (double *)&v29[8 * v25];
      *int v30 = v22;
      uint64_t v23 = v30 + 1;
      while (v11 != v24)
      {
        uint64_t v31 = *((void *)v11-- - 1);
        *((void *)v30-- - 1) = v31;
      }
      *(void *)a1 = v30;
      *(void *)(a1 + 8) = v23;
      *(void *)(a1 + 16) = &v29[8 * v28];
      if (v24) {
        operator delete(v24);
      }
    }
    else
    {
      *uint64_t v11 = v22;
      uint64_t v23 = v11 + 1;
    }
    ++v21;
    *(void *)(a1 + 8) = v23;
  }
  return a1;
}

void sub_258F89CB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  MEMORY[0x25A2D4810](va);
  boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>::~variable(v5);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  long long v7 = a1 + 1;
  long long v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        long long v6 = *v9;
        long long v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      long long v6 = v9[1];
      if (!v6)
      {
        long long v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unint64_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = operator new(0x40uLL);
    v11[8] = **a4;
    *((void *)v11 + 6) = 0;
    *((void *)v11 + 7) = 0;
    *((void *)v11 + 5) = 0;
    std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<int,std::vector<std::string>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v3 = __p + 5;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  if (__p) {
    operator delete(__p);
  }
}

void std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(std::vector<std::string> *this, std::string *__str, long long *a3, unint64_t a4)
{
  p_end_cap = &this->__end_cap_;
  begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) < a4)
  {
    std::vector<std::string>::__vdeallocate(this);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x5555555555555556 * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<std::string>::__vallocate[abi:ne180100](this, v11);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)p_end_cap, (long long *)__str, a3, this->__end_);
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)begin) >> 3) < a4)
  {
    uint64_t v13 = (std::string *)((char *)__str + 8 * (((char *)this->__end_ - (char *)begin) >> 3));
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(__str, v13, begin);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)p_end_cap, (long long *)v13, a3, this->__end_);
LABEL_11:
    this->__end_ = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(__str, (std::string *)a3, begin);
  uint64_t v15 = v14;
  std::vector<std::string>::pointer end = this->__end_;
  if (end != v14)
  {
    do
    {
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(end[-1].__r_.__value_.__l.__data_);
      }
      --end;
    }
    while (end != v15);
  }
  this->__end_ = v15;
}

void sub_258F89F6C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_258F89F74(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__vdeallocate(std::vector<std::string> *this)
{
  if (this->__begin_)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this);
    operator delete(this->__begin_);
    this->__begin_ = 0;
    this->__end_ = 0;
    this->__end_cap_.__value_ = 0;
  }
}

std::string *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(std::string *__str, std::string *a2, std::string *this)
{
  int v4 = __str;
  if (__str != a2)
  {
    do
      std::string::operator=(this++, v4++);
    while (v4 != a2);
    return a2;
  }
  return (std::string *)v4;
}

__n128 boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>::integer(uint64_t a1, int a2, int a3, __n128 *a4)
{
  *(_DWORD *)a1 = a3 - a2;
  __n128 result = *a4;
  *(void *)(a1 + 24) = a4[1].n128_u64[0];
  *(__n128 *)(a1 + 8) = result;
  a4->n128_u64[1] = 0;
  a4[1].n128_u64[0] = 0;
  a4->n128_u64[0] = 0;
  *(_DWORD *)(a1 + 32) = a2;
  if (a3 <= a2)
  {
    std::logic_error::logic_error(&v6, "bins > 0 required");
    v6.__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    v5[0] = "PerfPowerServicesReader/external/lib/boostorg/histogram/include/boost/histogram/axis/integer.hpp";
    v5[1] = "boost::histogram::axis::integer<int, boost::use_default, boost::histogram::axis::option::bit<1>>::integer(va"
            "lue_type, value_type, metadata_type) [Value = int, MetaData = boost::use_default, Options = boost::histogram"
            "::axis::option::bit<1>]";
    v5[2] = 64;
    boost::throw_exception<std::invalid_argument>((uint64_t)&v6, (uint64_t)v5);
  }
  return result;
}

char *std::vector<pps::AxisEnum>::__assign_with_size[abi:ne180100]<pps::AxisEnum*,pps::AxisEnum*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  long long v7 = result;
  uint64_t v8 = *((void *)result + 2);
  unint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 2)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *long long v7 = 0;
      v7[1] = 0;
      void v7[2] = 0;
    }
    if (a4 >> 62) {
      std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    __n128 result = std::vector<pps::AxisEnum>::__vallocate[abi:ne180100](v7, v11);
    uint64_t v13 = (char *)v7[1];
    uint64_t v12 = (void **)(v7 + 1);
    unint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  uint64_t v12 = (void **)(result + 8);
  unint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 2;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  unint64_t v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    __n128 result = (char *)memmove(*(void **)result, __src, v14 - v9);
    unint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    __n128 result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *uint64_t v12 = &v9[v17];
  return result;
}

char *std::vector<pps::AxisEnum>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<pps::AxisEnum>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

uint64_t **std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<int,std::vector<std::string>>,std::__tree_node<std::__value_type<int,std::vector<std::string>>,void *> *,long>>(uint64_t **result, void *a2, void *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    std::logic_error v6 = *result;
    long long v7 = result[1];
    *__n128 result = (uint64_t *)(result + 1);
    void v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      uint64_t v8 = (uint64_t *)v6[1];
    }
    else {
      uint64_t v8 = v6;
    }
    unint64_t v14 = result;
    unint64_t v15 = v8;
    unint64_t v16 = v8;
    if (v8)
    {
      unint64_t v15 = std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        unint64_t v9 = a2;
        do
        {
          v17[0] = v8 + 4;
          v17[1] = v8 + 5;
          std::pair<int &,std::vector<std::string> &>::operator=[abi:ne180100]<int const,std::vector<std::string>,(void *)0>((uint64_t)v17, (uint64_t)(v9 + 4));
          std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::__node_insert_multi(v5, (uint64_t)v16);
          unint64_t v16 = v15;
          if (v15) {
            unint64_t v15 = std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::_DetachedTreeCache::__detach_next((uint64_t)v15);
          }
          uint64_t v10 = (void *)v9[1];
          if (v10)
          {
            do
            {
              a2 = v10;
              uint64_t v10 = (void *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (void *)v9[2];
              BOOL v11 = *a2 == (void)v9;
              unint64_t v9 = a2;
            }
            while (!v11);
          }
          uint64_t v8 = v16;
          if (v16) {
            BOOL v11 = a2 == a3;
          }
          else {
            BOOL v11 = 1;
          }
          unint64_t v9 = a2;
        }
        while (!v11);
      }
    }
    __n128 result = (uint64_t **)std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      __n128 result = (uint64_t **)std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::__emplace_multi<std::pair<int const,std::vector<std::string>> const&>((uint64_t)v5, (uint64_t)(a2 + 4));
      uint64_t v12 = (void *)a2[1];
      if (v12)
      {
        do
        {
          uint64_t v13 = v12;
          uint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          uint64_t v13 = (void *)a2[2];
          BOOL v11 = *v13 == (void)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_258F8A3AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::__node_insert_multi(uint64_t **a1, uint64_t a2)
{
  uint64_t v3 = a1 + 1;
  uint64_t v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v3 = (uint64_t **)v4;
        if (*(_DWORD *)(a2 + 32) >= *((_DWORD *)v4 + 8)) {
          break;
        }
        uint64_t v4 = (uint64_t *)*v4;
        uint64_t v5 = v3;
        if (!*v3) {
          goto LABEL_8;
        }
      }
      uint64_t v4 = (uint64_t *)v4[1];
    }
    while (v4);
    uint64_t v5 = v3 + 1;
  }
  else
  {
    uint64_t v5 = a1 + 1;
  }
LABEL_8:
  std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::__insert_node_at(a1, (uint64_t)v3, v5, (uint64_t *)a2);
  return a2;
}

uint64_t std::pair<int &,std::vector<std::string> &>::operator=[abi:ne180100]<int const,std::vector<std::string>,(void *)0>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(_DWORD **)a1;
  uint64_t v3 = *(std::vector<std::string> **)(a1 + 8);
  _DWORD *v4 = *(_DWORD *)a2;
  if (v3 != (std::vector<std::string> *)(a2 + 8)) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v3, *(std::string **)(a2 + 8), *(long long **)(a2 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3));
  }
  return a1;
}

void *std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::_DetachedTreeCache::__detach_next(uint64_t a1)
{
  __n128 result = *(void **)(a1 + 16);
  if (result)
  {
    uint64_t v3 = (void *)*result;
    if (*result == a1)
    {
      *__n128 result = 0;
      while (1)
      {
        uint64_t v4 = (void *)result[1];
        if (!v4) {
          break;
        }
        do
        {
          __n128 result = v4;
          uint64_t v4 = (void *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; uint64_t v3 = (void *)result[1])
      {
        do
        {
          __n128 result = v3;
          uint64_t v3 = (void *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

uint64_t std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::destroy(*(void *)a1, *(char **)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = *(void *)(v3 + 16);
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::destroy(*(void *)a1, (char *)v2);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::__emplace_multi<std::pair<int const,std::vector<std::string>> const&>(uint64_t a1, uint64_t a2)
{
  std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::__construct_node<std::pair<int const,std::vector<std::string>> const&>(a1, a2, (uint64_t)&v7);
  uint64_t v3 = (uint64_t **)(a1 + 8);
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v3 = (uint64_t **)v4;
        if (*((_DWORD *)v7 + 8) >= *((_DWORD *)v4 + 8)) {
          break;
        }
        uint64_t v4 = (uint64_t *)*v4;
        uint64_t v5 = v3;
        if (!*v3) {
          goto LABEL_8;
        }
      }
      uint64_t v4 = (uint64_t *)v4[1];
    }
    while (v4);
    uint64_t v5 = v3 + 1;
  }
  else
  {
    uint64_t v5 = (uint64_t **)(a1 + 8);
  }
LABEL_8:
  std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v3, v5, v7);
  return v7;
}

std::string *std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::__construct_node<std::pair<int const,std::vector<std::string>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  std::logic_error v6 = (char *)operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  *((_DWORD *)v6 + 8) = *(_DWORD *)a2;
  *((void *)v6 + 6) = 0;
  *((void *)v6 + 7) = 0;
  *((void *)v6 + 5) = 0;
  __n128 result = std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(v6 + 40), *(long long **)(a2 + 8), *(long long **)(a2 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3));
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_258F8A644(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<int,std::vector<std::string>>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t boost::histogram::detail::axes_equal<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>>(int **a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *a2;
  if ((char *)v3 - (char *)*a1 != a2[1] - *a2) {
    return 0;
  }
  if (v2 == v3) {
    return 1;
  }
  do
  {
    uint64_t v6 = v4;
    long long v7 = (int **)&v6;
    uint64_t result = _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNKS2_7variantIJS5_SA_SF_EEeqIJS5_SA_SF_EEEbRKNSL_IJDpT_EEEEUlRKT_E_RKSG_EEEENST_11result_typeERST_(v2, &v7);
    if (!result) {
      break;
    }
    v2 += 14;
    v4 += 56;
  }
  while (v2 != v3);
  return result;
}

uint64_t boost::histogram::unlimited_storage<std::allocator<char>>::operator==(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8) != *(void *)(a2 + 8)) {
    return 0;
  }
  uint64_t v3 = a2;
  return _ZNK5boost9histogram17unlimited_storageINSt3__19allocatorIcEEE11buffer_type5applyIZNKS5_eqERKS5_EUlPKT_E_JEEEDcOSA_DpOT0_(a1, &v3);
}

uint64_t _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNKS2_7variantIJS5_SA_SF_EEeqIJS5_SA_SF_EEEbRKNSL_IJDpT_EEEEUlRKT_E_RKSG_EEEENST_11result_typeERST_(int *a1, int ***a2)
{
  uint64_t v2 = (uint64_t)(a1 + 2);
  switch(*a1 ^ (*a1 >> 31))
  {
    case 0:
      uint64_t result = (uint64_t)_ZNK5boost6detail7variant15result_wrapper1IZNKS_9histogram4axis7variantIJNS4_7regularIdNS_11use_defaultES7_S7_EENS4_8variableIdS7_S7_NSt3__19allocatorIdEEEENS4_7integerIiS7_NS4_6option3bitILj1EEEEEEEeqIJS8_SD_SI_EEEbRKNS5_IJDpT_EEEEUlRKT_E_RKNS_7variantIS8_JSD_SI_EEEEclIRKS8_EEbOSQ_(a2, v2);
      break;
    case 1:
      uint64_t result = (uint64_t)_ZNK5boost6detail7variant15result_wrapper1IZNKS_9histogram4axis7variantIJNS4_7regularIdNS_11use_defaultES7_S7_EENS4_8variableIdS7_S7_NSt3__19allocatorIdEEEENS4_7integerIiS7_NS4_6option3bitILj1EEEEEEEeqIJS8_SD_SI_EEEbRKNS5_IJDpT_EEEEUlRKT_E_RKNS_7variantIS8_JSD_SI_EEEEclIRKSD_EEbOSQ_(a2, v2);
      break;
    case 2:
      uint64_t v4 = **a2;
      uint64_t result = boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::operator==<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>(v4, v2);
      break;
    default:
      boost::detail::variant::forced_return<void>();
  }
  return result;
}

int *_ZNK5boost6detail7variant15result_wrapper1IZNKS_9histogram4axis7variantIJNS4_7regularIdNS_11use_defaultES7_S7_EENS4_8variableIdS7_S7_NSt3__19allocatorIdEEEENS4_7integerIiS7_NS4_6option3bitILj1EEEEEEEeqIJS8_SD_SI_EEEbRKNS5_IJDpT_EEEEUlRKT_E_RKNS_7variantIS8_JSD_SI_EEEEclIRKS8_EEbOSQ_(int ***a1, uint64_t a2)
{
  uint64_t result = boost::histogram::axis::get_if<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>(**a1);
  if (result)
  {
    return (int *)boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>::operator==<double,boost::use_default,boost::use_default,boost::use_default>((uint64_t)result, a2);
  }
  return result;
}

int *boost::histogram::axis::get_if<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>(int *result)
{
  if (result) {
    return boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::apply_visitor<boost::detail::variant::get_visitor<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default> const>>(result);
  }
  return result;
}

_DWORD *boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::apply_visitor<boost::detail::variant::get_visitor<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default> const>>(int *a1)
{
  int v2 = *a1;
  uint64_t result = a1 + 2;
  switch(v2 ^ (v2 >> 31))
  {
    case 0:
      return result;
    case 1:
    case 2:
      uint64_t result = 0;
      break;
    default:
      boost::detail::variant::forced_return<void>();
  }
  return result;
}

uint64_t boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>::operator==<double,boost::use_default,boost::use_default,boost::use_default>(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 != *(_DWORD *)a2) {
    return 0;
  }
  uint64_t result = boost::histogram::detail::relaxed_equal<std::string>((unsigned __int8 *)(a1 + 8), (unsigned __int8 *)(a2 + 8));
  if (!result) {
    return result;
  }
  return *(double *)(a1 + 32) == *(double *)(a2 + 32) && *(double *)(a1 + 40) == *(double *)(a2 + 40);
}

uint64_t boost::histogram::detail::relaxed_equal<std::string>(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return _ZN5boost9histogram6detail11static_if_cILb1EZNS1_13relaxed_equalINSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEbRKT_SD_EUlSD_RKT0_E_ZNS3_ISA_EEbSD_SD_EUlSD_SG_E0_JRKSA_SK_EEEDcOSE_OT1_DpOT2_((uint64_t)&v4, (uint64_t)&v3, a1, a2);
}

uint64_t _ZN5boost9histogram6detail11static_if_cILb1EZNS1_13relaxed_equalINSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEbRKT_SD_EUlSD_RKT0_E_ZNS3_ISA_EEbSD_SD_EUlSD_SG_E0_JRKSA_SK_EEEDcOSE_OT1_DpOT2_(uint64_t a1, uint64_t a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  uint64_t v4 = a3[23];
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = a3[23];
  }
  else {
    uint64_t v5 = *((void *)a3 + 1);
  }
  uint64_t v6 = a4[23];
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *((void *)a4 + 1);
  }
  if (v5 != v6) {
    return 0;
  }
  if (v7 >= 0) {
    uint64_t v8 = a4;
  }
  else {
    uint64_t v8 = *(unsigned __int8 **)a4;
  }
  if ((v4 & 0x80) != 0) {
    return memcmp(*(const void **)a3, v8, *((void *)a3 + 1)) == 0;
  }
  if (!a3[23]) {
    return 1;
  }
  uint64_t v9 = v4 - 1;
  do
  {
    int v11 = *a3++;
    int v10 = v11;
    int v13 = *v8++;
    int v12 = v13;
    BOOL v15 = v9-- != 0;
    uint64_t result = v10 == v12;
  }
  while (v10 == v12 && v15);
  return result;
}

int *_ZNK5boost6detail7variant15result_wrapper1IZNKS_9histogram4axis7variantIJNS4_7regularIdNS_11use_defaultES7_S7_EENS4_8variableIdS7_S7_NSt3__19allocatorIdEEEENS4_7integerIiS7_NS4_6option3bitILj1EEEEEEEeqIJS8_SD_SI_EEEbRKNS5_IJDpT_EEEEUlRKT_E_RKNS_7variantIS8_JSD_SI_EEEEclIRKSD_EEbOSQ_(int ***a1, uint64_t a2)
{
  uint64_t result = boost::histogram::axis::get_if<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>(**a1);
  if (result)
  {
    return (int *)boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>::operator==<double,boost::use_default,boost::use_default,std::allocator<double>>((uint64_t)result, a2);
  }
  return result;
}

int *boost::histogram::axis::get_if<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>(int *result)
{
  if (result) {
    return boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::apply_visitor<boost::detail::variant::get_visitor<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>> const>>(result);
  }
  return result;
}

_DWORD *boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::apply_visitor<boost::detail::variant::get_visitor<boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>> const>>(int *a1)
{
  uint64_t v1 = 0;
  switch(*a1 ^ (*a1 >> 31))
  {
    case 0:
    case 2:
      return v1;
    case 1:
      uint64_t v1 = a1 + 2;
      break;
    default:
      boost::detail::variant::forced_return<void>();
  }
  return v1;
}

uint64_t boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>::operator==<double,boost::use_default,boost::use_default,std::allocator<double>>(uint64_t a1, uint64_t a2)
{
  int v2 = *(double **)a1;
  char v3 = *(double **)(a1 + 8);
  uint64_t v4 = *(double **)a2;
  uint64_t v5 = *(double **)(a2 + 8);
  if ((char *)v3 - *(void *)a1 == (char *)v5 - *(void *)a2)
  {
    if (v2 == v3 || v4 == v5)
    {
LABEL_7:
      if (v2 == v3 && v4 == v5) {
        return boost::histogram::detail::relaxed_equal<std::string>((unsigned __int8 *)(a1 + 24), (unsigned __int8 *)(a2 + 24));
      }
    }
    else
    {
      while (*v2 == *v4)
      {
        ++v2;
        ++v4;
        if (v2 == v3 || v4 == v5) {
          goto LABEL_7;
        }
      }
    }
  }
  return 0;
}

uint64_t boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::operator==<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>(int *a1, uint64_t a2)
{
  uint64_t result = (uint64_t)boost::histogram::axis::get_if<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>(a1);
  if (result)
  {
    uint64_t v4 = result;
    if (*(_DWORD *)result == *(_DWORD *)a2)
    {
      uint64_t result = boost::histogram::detail::relaxed_equal<std::string>((unsigned __int8 *)(result + 8), (unsigned __int8 *)(a2 + 8));
      if (result) {
        return *(_DWORD *)(v4 + 32) == *(_DWORD *)(a2 + 32);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

int *boost::histogram::axis::get_if<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>,boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>(int *result)
{
  if (result) {
    return boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::apply_visitor<boost::detail::variant::get_visitor<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>> const>>(result);
  }
  return result;
}

int *boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::apply_visitor<boost::detail::variant::get_visitor<boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>> const>>(int *a1)
{
  unsigned int v1 = *a1 ^ (*a1 >> 31);
  if (v1 < 2) {
    return 0;
  }
  if (v1 != 2) {
    boost::detail::variant::forced_return<void>();
  }
  return a1 + 2;
}

uint64_t _ZNK5boost9histogram17unlimited_storageINSt3__19allocatorIcEEE11buffer_type5applyIZNKS5_eqERKS5_EUlPKT_E_JEEEDcOSA_DpOT0_(uint64_t a1, uint64_t *a2)
{
  switch(*(unsigned char *)(a1 + 16))
  {
    case 0:
      int v2 = *(unsigned __int8 **)(a1 + 24);
      uint64_t v3 = *a2;
      BOOL v15 = v2;
      uint64_t v16 = v3;
      uint64_t result = _ZNK5boost9histogram17unlimited_storageINSt3__19allocatorIcEEE11buffer_type5applyIZZNKS5_eqERKS5_ENKUlPKT_E_clIhEEDaSC_EUlSC_E_JEEEDcOSA_DpOT0_(v3, &v15);
      break;
    case 1:
      int v7 = *(unsigned __int8 **)(a1 + 24);
      uint64_t v8 = *a2;
      BOOL v15 = v7;
      uint64_t v16 = v8;
      uint64_t result = _ZNK5boost9histogram17unlimited_storageINSt3__19allocatorIcEEE11buffer_type5applyIZZNKS5_eqERKS5_ENKUlPKT_E_clItEEDaSC_EUlSC_E_JEEEDcOSA_DpOT0_(v8, (unsigned __int16 **)&v15);
      break;
    case 2:
      uint64_t v9 = *(unsigned __int8 **)(a1 + 24);
      uint64_t v10 = *a2;
      BOOL v15 = v9;
      uint64_t v16 = v10;
      uint64_t result = _ZNK5boost9histogram17unlimited_storageINSt3__19allocatorIcEEE11buffer_type5applyIZZNKS5_eqERKS5_ENKUlPKT_E_clIjEEDaSC_EUlSC_E_JEEEDcOSA_DpOT0_(v10, (unsigned int **)&v15);
      break;
    case 3:
      int v11 = *(unsigned __int8 **)(a1 + 24);
      uint64_t v12 = *a2;
      BOOL v15 = v11;
      uint64_t v16 = v12;
      uint64_t result = _ZNK5boost9histogram17unlimited_storageINSt3__19allocatorIcEEE11buffer_type5applyIZZNKS5_eqERKS5_ENKUlPKT_E_clIyEEDaSC_EUlSC_E_JEEEDcOSA_DpOT0_(v12, (uint64_t)&v15);
      break;
    case 4:
      int v13 = *(unsigned __int8 **)(a1 + 24);
      uint64_t v14 = *a2;
      BOOL v15 = v13;
      uint64_t v16 = v14;
      uint64_t result = _ZNK5boost9histogram17unlimited_storageINSt3__19allocatorIcEEE11buffer_type5applyIZZNKS5_eqERKS5_ENKUlPKT_E_clINS0_6detail6mp_intINS3_IyEEEEEEDaSC_EUlSC_E_JEEEDcOSA_DpOT0_(v14, (uint64_t *)&v15);
      break;
    default:
      uint64_t v5 = *(unsigned __int8 **)(a1 + 24);
      uint64_t v6 = *a2;
      BOOL v15 = v5;
      uint64_t v16 = v6;
      uint64_t result = _ZNK5boost9histogram17unlimited_storageINSt3__19allocatorIcEEE11buffer_type5applyIZZNKS5_eqERKS5_ENKUlPKT_E_clIdEEDaSC_EUlSC_E_JEEEDcOSA_DpOT0_(v6, (uint64_t)&v15);
      break;
  }
  return result;
}

uint64_t _ZNK5boost9histogram17unlimited_storageINSt3__19allocatorIcEEE11buffer_type5applyIZZNKS5_eqERKS5_ENKUlPKT_E_clIhEEDaSC_EUlSC_E_JEEEDcOSA_DpOT0_(uint64_t a1, unsigned __int8 **a2)
{
  switch(*(unsigned char *)(a1 + 16))
  {
    case 0:
      uint64_t v2 = *((void *)a2[1] + 1);
      if (!v2) {
        goto LABEL_50;
      }
      uint64_t v3 = *a2;
      uint64_t v4 = *(unsigned __int8 **)(a1 + 24);
      uint64_t v5 = v2 - 1;
      do
      {
        int v7 = *v3++;
        int v6 = v7;
        int v8 = *v4++;
        uint64_t result = v6 == v8;
      }
      while (v6 == v8 && v5-- != 0);
      break;
    case 1:
      uint64_t v19 = *((void *)a2[1] + 1);
      if (!v19) {
        goto LABEL_50;
      }
      uint64_t v20 = *a2;
      uint64_t v21 = *(unsigned __int16 **)(a1 + 24);
      uint64_t v22 = v19 - 1;
      do
      {
        int v24 = *v20++;
        int v23 = v24;
        int v25 = *v21++;
        uint64_t result = v25 == v23;
      }
      while (v25 == v23 && v22-- != 0);
      break;
    case 2:
      uint64_t v27 = *((void *)a2[1] + 1);
      if (!v27) {
        goto LABEL_50;
      }
      unint64_t v28 = *a2;
      char v29 = *(int **)(a1 + 24);
      uint64_t v30 = v27 - 1;
      do
      {
        int v32 = *v28++;
        int v31 = v32;
        int v33 = *v29++;
        uint64_t result = v33 == v31;
      }
      while (v33 == v31 && v30-- != 0);
      break;
    case 3:
      uint64_t v35 = *((void *)a2[1] + 1);
      if (!v35) {
        goto LABEL_50;
      }
      std::logic_error v36 = *a2;
      uint64_t v37 = *(uint64_t **)(a1 + 24);
      uint64_t v38 = v35 - 1;
      do
      {
        unsigned int v40 = *v36++;
        uint64_t v39 = v40;
        uint64_t v41 = *v37++;
        uint64_t result = v41 == v39;
      }
      while (v41 == v39 && v38-- != 0);
      break;
    case 4:
      uint64_t v43 = *((void *)a2[1] + 1);
      if (!v43) {
        goto LABEL_50;
      }
      char v44 = *a2;
      char v45 = *(void **)(a1 + 24);
      uint64_t v46 = v43 - 1;
      do
      {
        uint64_t result = boost::histogram::detail::mp_int<std::allocator<unsigned long long>>::operator==<unsigned char>(v45, v44);
        if (!result) {
          break;
        }
        ++v44;
        v45 += 3;
      }
      while (v46--);
      break;
    default:
      uint64_t v11 = *((void *)a2[1] + 1);
      if (v11)
      {
        uint64_t v12 = *a2;
        int v13 = *(double **)(a1 + 24);
        uint64_t v14 = v11 - 1;
        do
        {
          double v15 = *v13++;
          double v16 = v15;
          BOOL v17 = v15 >= 0.0;
          LODWORD(v15) = *v12++;
          uint64_t result = v16 == (double)LODWORD(v15) && v17;
        }
        while (result == 1 && v14-- != 0);
      }
      else
      {
LABEL_50:
        uint64_t result = 1;
      }
      break;
  }
  return result;
}

BOOL boost::histogram::detail::mp_int<std::allocator<unsigned long long>>::operator==<unsigned char>(void *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1[1] - *a1;
  if (!v2) {
    __assert_rtn("operator==", "unlimited_storage.hpp", 280, "data.size() > 0u");
  }
  return v2 == 8 && *(void *)*a1 == *a2;
}

uint64_t _ZNK5boost9histogram17unlimited_storageINSt3__19allocatorIcEEE11buffer_type5applyIZZNKS5_eqERKS5_ENKUlPKT_E_clItEEDaSC_EUlSC_E_JEEEDcOSA_DpOT0_(uint64_t a1, unsigned __int16 **a2)
{
  switch(*(unsigned char *)(a1 + 16))
  {
    case 0:
      uint64_t v2 = *((void *)a2[1] + 1);
      if (!v2) {
        goto LABEL_50;
      }
      uint64_t v3 = *a2;
      uint64_t v4 = *(unsigned __int8 **)(a1 + 24);
      uint64_t v5 = 2 * v2 - 2;
      do
      {
        int v7 = *v3++;
        int v6 = v7;
        int v8 = *v4++;
        uint64_t result = v6 == v8;
        BOOL v10 = v6 != v8 || v5 == 0;
        v5 -= 2;
      }
      while (!v10);
      break;
    case 1:
      uint64_t v19 = *((void *)a2[1] + 1);
      if (!v19) {
        goto LABEL_50;
      }
      uint64_t v20 = *a2;
      uint64_t v21 = *(unsigned __int16 **)(a1 + 24);
      uint64_t v22 = 2 * v19 - 2;
      do
      {
        int v24 = *v20++;
        int v23 = v24;
        int v25 = *v21++;
        uint64_t result = v23 == v25;
        BOOL v26 = v23 != v25 || v22 == 0;
        v22 -= 2;
      }
      while (!v26);
      break;
    case 2:
      uint64_t v27 = *((void *)a2[1] + 1);
      if (!v27) {
        goto LABEL_50;
      }
      unint64_t v28 = *a2;
      char v29 = *(int **)(a1 + 24);
      uint64_t v30 = 2 * v27 - 2;
      do
      {
        int v32 = *v28++;
        int v31 = v32;
        int v33 = *v29++;
        uint64_t result = v33 == v31;
        BOOL v34 = v33 != v31 || v30 == 0;
        v30 -= 2;
      }
      while (!v34);
      break;
    case 3:
      uint64_t v35 = *((void *)a2[1] + 1);
      if (!v35) {
        goto LABEL_50;
      }
      std::logic_error v36 = *a2;
      uint64_t v37 = *(uint64_t **)(a1 + 24);
      uint64_t v38 = 2 * v35 - 2;
      do
      {
        unsigned int v40 = *v36++;
        uint64_t v39 = v40;
        uint64_t v41 = *v37++;
        uint64_t result = v41 == v39;
        BOOL v42 = v41 != v39 || v38 == 0;
        v38 -= 2;
      }
      while (!v42);
      break;
    case 4:
      uint64_t v43 = *((void *)a2[1] + 1);
      if (!v43) {
        goto LABEL_50;
      }
      char v44 = *a2;
      char v45 = *(void **)(a1 + 24);
      uint64_t v46 = 2 * v43 - 2;
      do
      {
        uint64_t result = boost::histogram::detail::mp_int<std::allocator<unsigned long long>>::operator==<unsigned short>(v45, v44);
        if (!result) {
          break;
        }
        ++v44;
        v45 += 3;
        uint64_t v47 = v46;
        v46 -= 2;
      }
      while (v47);
      break;
    default:
      uint64_t v11 = *((void *)a2[1] + 1);
      if (v11)
      {
        uint64_t v12 = *a2;
        int v13 = *(double **)(a1 + 24);
        uint64_t v14 = 2 * v11 - 2;
        do
        {
          double v15 = *v13++;
          double v16 = v15;
          BOOL v17 = v15 >= 0.0;
          LODWORD(v15) = *v12++;
          uint64_t result = v16 == (double)LODWORD(v15) && v17;
          BOOL v18 = result != 1 || v14 == 0;
          v14 -= 2;
        }
        while (!v18);
      }
      else
      {
LABEL_50:
        uint64_t result = 1;
      }
      break;
  }
  return result;
}

BOOL boost::histogram::detail::mp_int<std::allocator<unsigned long long>>::operator==<unsigned short>(void *a1, unsigned __int16 *a2)
{
  uint64_t v2 = a1[1] - *a1;
  if (!v2) {
    __assert_rtn("operator==", "unlimited_storage.hpp", 280, "data.size() > 0u");
  }
  return v2 == 8 && *(void *)*a1 == *a2;
}

uint64_t _ZNK5boost9histogram17unlimited_storageINSt3__19allocatorIcEEE11buffer_type5applyIZZNKS5_eqERKS5_ENKUlPKT_E_clIjEEDaSC_EUlSC_E_JEEEDcOSA_DpOT0_(uint64_t a1, unsigned int **a2)
{
  switch(*(unsigned char *)(a1 + 16))
  {
    case 0:
      uint64_t v2 = *((void *)a2[1] + 1);
      if (!v2) {
        goto LABEL_50;
      }
      uint64_t v3 = *a2;
      uint64_t v4 = *(unsigned __int8 **)(a1 + 24);
      uint64_t v5 = 4 * v2 - 4;
      do
      {
        int v7 = *v3++;
        int v6 = v7;
        int v8 = *v4++;
        uint64_t result = v6 == v8;
        BOOL v10 = v6 != v8 || v5 == 0;
        v5 -= 4;
      }
      while (!v10);
      break;
    case 1:
      uint64_t v19 = *((void *)a2[1] + 1);
      if (!v19) {
        goto LABEL_50;
      }
      uint64_t v20 = *a2;
      uint64_t v21 = *(unsigned __int16 **)(a1 + 24);
      uint64_t v22 = 4 * v19 - 4;
      do
      {
        int v24 = *v20++;
        int v23 = v24;
        int v25 = *v21++;
        uint64_t result = v23 == v25;
        BOOL v26 = v23 != v25 || v22 == 0;
        v22 -= 4;
      }
      while (!v26);
      break;
    case 2:
      uint64_t v27 = *((void *)a2[1] + 1);
      if (!v27) {
        goto LABEL_50;
      }
      unint64_t v28 = *a2;
      char v29 = *(int **)(a1 + 24);
      uint64_t v30 = 4 * v27 - 4;
      do
      {
        int v32 = *v28++;
        int v31 = v32;
        int v33 = *v29++;
        uint64_t result = v31 == v33;
        BOOL v34 = v31 != v33 || v30 == 0;
        v30 -= 4;
      }
      while (!v34);
      break;
    case 3:
      uint64_t v35 = *((void *)a2[1] + 1);
      if (!v35) {
        goto LABEL_50;
      }
      std::logic_error v36 = *a2;
      uint64_t v37 = *(uint64_t **)(a1 + 24);
      uint64_t v38 = 4 * v35 - 4;
      do
      {
        unsigned int v40 = *v36++;
        uint64_t v39 = v40;
        uint64_t v41 = *v37++;
        uint64_t result = v41 == v39;
        BOOL v42 = v41 != v39 || v38 == 0;
        v38 -= 4;
      }
      while (!v42);
      break;
    case 4:
      uint64_t v43 = *((void *)a2[1] + 1);
      if (!v43) {
        goto LABEL_50;
      }
      char v44 = *a2;
      char v45 = *(void **)(a1 + 24);
      uint64_t v46 = 4 * v43 - 4;
      do
      {
        uint64_t result = boost::histogram::detail::mp_int<std::allocator<unsigned long long>>::operator==<unsigned int>(v45, v44);
        if (!result) {
          break;
        }
        ++v44;
        v45 += 3;
        uint64_t v47 = v46;
        v46 -= 4;
      }
      while (v47);
      break;
    default:
      uint64_t v11 = *((void *)a2[1] + 1);
      if (v11)
      {
        uint64_t v12 = *a2;
        int v13 = *(double **)(a1 + 24);
        uint64_t v14 = 4 * v11 - 4;
        do
        {
          double v15 = *v13++;
          double v16 = v15;
          BOOL v17 = v15 >= 0.0;
          LODWORD(v15) = *v12++;
          uint64_t result = v16 == (double)LODWORD(v15) && v17;
          BOOL v18 = result != 1 || v14 == 0;
          v14 -= 4;
        }
        while (!v18);
      }
      else
      {
LABEL_50:
        uint64_t result = 1;
      }
      break;
  }
  return result;
}

BOOL boost::histogram::detail::mp_int<std::allocator<unsigned long long>>::operator==<unsigned int>(void *a1, unsigned int *a2)
{
  uint64_t v2 = a1[1] - *a1;
  if (!v2) {
    __assert_rtn("operator==", "unlimited_storage.hpp", 280, "data.size() > 0u");
  }
  return v2 == 8 && *(void *)*a1 == *a2;
}

uint64_t _ZNK5boost9histogram17unlimited_storageINSt3__19allocatorIcEEE11buffer_type5applyIZZNKS5_eqERKS5_ENKUlPKT_E_clIyEEDaSC_EUlSC_E_JEEEDcOSA_DpOT0_(uint64_t a1, uint64_t a2)
{
  switch(*(unsigned char *)(a1 + 16))
  {
    case 0:
      uint64_t v2 = *(void *)(*(void *)(a2 + 8) + 8);
      if (!v2) {
        goto LABEL_50;
      }
      uint64_t v3 = *(unint64_t **)a2;
      uint64_t v4 = *(unsigned __int8 **)(a1 + 24);
      uint64_t v5 = 8 * v2 - 8;
      do
      {
        uint64_t v7 = *v3++;
        uint64_t v6 = v7;
        LODWORD(v7) = *v4++;
        uint64_t result = v6 == v7;
        BOOL v9 = v6 != v7 || v5 == 0;
        v5 -= 8;
      }
      while (!v9);
      break;
    case 1:
      uint64_t v19 = *(void *)(*(void *)(a2 + 8) + 8);
      if (!v19) {
        goto LABEL_50;
      }
      uint64_t v20 = *(unint64_t **)a2;
      uint64_t v21 = *(unsigned __int16 **)(a1 + 24);
      uint64_t v22 = 8 * v19 - 8;
      do
      {
        uint64_t v24 = *v20++;
        uint64_t v23 = v24;
        LODWORD(v24) = *v21++;
        uint64_t result = v23 == v24;
        BOOL v25 = v23 != v24 || v22 == 0;
        v22 -= 8;
      }
      while (!v25);
      break;
    case 2:
      uint64_t v26 = *(void *)(*(void *)(a2 + 8) + 8);
      if (!v26) {
        goto LABEL_50;
      }
      uint64_t v27 = *(unint64_t **)a2;
      unint64_t v28 = *(_DWORD **)(a1 + 24);
      uint64_t v29 = 8 * v26 - 8;
      do
      {
        uint64_t v31 = *v27++;
        uint64_t v30 = v31;
        LODWORD(v31) = *v28++;
        uint64_t result = v30 == v31;
        BOOL v32 = v30 != v31 || v29 == 0;
        v29 -= 8;
      }
      while (!v32);
      break;
    case 3:
      uint64_t v33 = *(void *)(*(void *)(a2 + 8) + 8);
      if (!v33) {
        goto LABEL_50;
      }
      BOOL v34 = *(unint64_t **)a2;
      uint64_t v35 = *(uint64_t **)(a1 + 24);
      uint64_t v36 = 8 * v33 - 8;
      do
      {
        uint64_t v38 = *v34++;
        uint64_t v37 = v38;
        uint64_t v39 = *v35++;
        uint64_t result = v37 == v39;
        BOOL v40 = v37 != v39 || v36 == 0;
        v36 -= 8;
      }
      while (!v40);
      break;
    case 4:
      uint64_t v41 = *(void *)(*(void *)(a2 + 8) + 8);
      if (!v41) {
        goto LABEL_50;
      }
      BOOL v42 = *(unint64_t **)a2;
      uint64_t v43 = *(void **)(a1 + 24);
      uint64_t v44 = 8 * v41 - 8;
      do
      {
        uint64_t result = boost::histogram::detail::mp_int<std::allocator<unsigned long long>>::operator==<unsigned long long>(v43, v42);
        if (!result) {
          break;
        }
        ++v42;
        v43 += 3;
        uint64_t v45 = v44;
        v44 -= 8;
      }
      while (v45);
      break;
    default:
      uint64_t v10 = *(void *)(*(void *)(a2 + 8) + 8);
      if (v10)
      {
        uint64_t v11 = *(unint64_t **)a2;
        uint64_t v12 = *(double **)(a1 + 24);
        uint64_t v13 = 8 * v10 - 8;
        do
        {
          double v14 = *v12++;
          double v15 = v14;
          BOOL v16 = v14 >= 0.0;
          unint64_t v17 = *v11++;
          uint64_t result = v15 == (double)v17 && v16;
          BOOL v18 = result != 1 || v13 == 0;
          v13 -= 8;
        }
        while (!v18);
      }
      else
      {
LABEL_50:
        uint64_t result = 1;
      }
      break;
  }
  return result;
}

BOOL boost::histogram::detail::mp_int<std::allocator<unsigned long long>>::operator==<unsigned long long>(void *a1, void *a2)
{
  uint64_t v2 = a1[1] - *a1;
  if (!v2) {
    __assert_rtn("operator==", "unlimited_storage.hpp", 280, "data.size() > 0u");
  }
  return v2 == 8 && *(void *)*a1 == *a2;
}

BOOL _ZNK5boost9histogram17unlimited_storageINSt3__19allocatorIcEEE11buffer_type5applyIZZNKS5_eqERKS5_ENKUlPKT_E_clINS0_6detail6mp_intINS3_IyEEEEEEDaSC_EUlSC_E_JEEEDcOSA_DpOT0_(uint64_t a1, uint64_t *a2)
{
  switch(*(unsigned char *)(a1 + 16))
  {
    case 0:
      uint64_t v2 = *(void *)(a2[1] + 8);
      if (!v2) {
        goto LABEL_33;
      }
      uint64_t v3 = (void *)*a2;
      uint64_t v4 = *(unsigned __int8 **)(a1 + 24);
      uint64_t v5 = 24 * v2 - 24;
      do
      {
        BOOL result = boost::histogram::detail::mp_int<std::allocator<unsigned long long>>::operator==<unsigned char>(v3, v4);
        if (!result) {
          break;
        }
        v3 += 3;
        ++v4;
        uint64_t v7 = v5;
        v5 -= 24;
      }
      while (v7);
      break;
    case 1:
      uint64_t v13 = *(void *)(a2[1] + 8);
      if (!v13) {
        goto LABEL_33;
      }
      double v14 = (void *)*a2;
      double v15 = *(unsigned __int16 **)(a1 + 24);
      uint64_t v16 = 24 * v13 - 24;
      do
      {
        BOOL result = boost::histogram::detail::mp_int<std::allocator<unsigned long long>>::operator==<unsigned short>(v14, v15);
        if (!result) {
          break;
        }
        v14 += 3;
        ++v15;
        uint64_t v17 = v16;
        v16 -= 24;
      }
      while (v17);
      break;
    case 2:
      uint64_t v18 = *(void *)(a2[1] + 8);
      if (!v18) {
        goto LABEL_33;
      }
      uint64_t v19 = (void *)*a2;
      uint64_t v20 = *(unsigned int **)(a1 + 24);
      uint64_t v21 = 24 * v18 - 24;
      do
      {
        BOOL result = boost::histogram::detail::mp_int<std::allocator<unsigned long long>>::operator==<unsigned int>(v19, v20);
        if (!result) {
          break;
        }
        v19 += 3;
        ++v20;
        uint64_t v22 = v21;
        v21 -= 24;
      }
      while (v22);
      break;
    case 3:
      uint64_t v23 = *(void *)(a2[1] + 8);
      if (!v23) {
        goto LABEL_33;
      }
      uint64_t v24 = (void *)*a2;
      BOOL v25 = *(void **)(a1 + 24);
      uint64_t v26 = 24 * v23 - 24;
      do
      {
        BOOL result = boost::histogram::detail::mp_int<std::allocator<unsigned long long>>::operator==<unsigned long long>(v24, v25);
        if (!result) {
          break;
        }
        v24 += 3;
        ++v25;
        uint64_t v27 = v26;
        v26 -= 24;
      }
      while (v27);
      break;
    case 4:
      uint64_t v28 = *(void *)(a2[1] + 8);
      if (!v28) {
        goto LABEL_33;
      }
      uint64_t v29 = *a2;
      uint64_t v30 = *(void *)(a1 + 24);
      uint64_t v31 = 24 * v28 - 24;
      do
      {
        BOOL result = boost::histogram::detail::mp_int<std::allocator<unsigned long long>>::operator==(v29, v30);
        if (!result) {
          break;
        }
        v29 += 24;
        v30 += 24;
        uint64_t v32 = v31;
        v31 -= 24;
      }
      while (v32);
      break;
    default:
      uint64_t v8 = *(void *)(a2[1] + 8);
      if (v8)
      {
        BOOL v9 = (void *)*a2;
        uint64_t v10 = *(double **)(a1 + 24);
        uint64_t v11 = 24 * v8 - 24;
        while (*v10 >= 0.0)
        {
          double v33 = *v10;
          BOOL result = boost::histogram::detail::mp_int<std::allocator<unsigned long long>>::operator==<double>(v9, &v33);
          if (result)
          {
            v9 += 3;
            ++v10;
            uint64_t v12 = v11;
            v11 -= 24;
            if (v12) {
              continue;
            }
          }
          return result;
        }
        BOOL result = 0;
      }
      else
      {
LABEL_33:
        BOOL result = 1;
      }
      break;
  }
  return result;
}

BOOL boost::histogram::detail::mp_int<std::allocator<unsigned long long>>::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned char **)a1;
  uint64_t v3 = *(unsigned char **)(a1 + 8);
  size_t v5 = v3 - v2;
  if (v3 == v2)
  {
    uint64_t v11 = "data.size() > 0u";
    int v12 = 245;
    goto LABEL_15;
  }
  uint64_t v6 = *(unsigned char **)a2;
  uint64_t v7 = *(unsigned char **)(a2 + 8);
  int64_t v9 = v7 - v6;
  if (v7 == v6)
  {
    uint64_t v11 = "o.data.size() > 0u";
    int v12 = 246;
    goto LABEL_15;
  }
  if (v5 != 8 && !*((void *)v3 - 1))
  {
    uint64_t v11 = "data.size() == 1 || data.back() > 0u";
    int v12 = 248;
    goto LABEL_15;
  }
  if (v9 != 8 && !*((void *)v7 - 1))
  {
    uint64_t v11 = "o.data.size() == 1 || o.data.back() > 0u";
    int v12 = 249;
LABEL_15:
    __assert_rtn("operator==", "unlimited_storage.hpp", v12, v11);
  }
  return v5 == v9 && memcmp(v2, v6, v5) == 0;
}

BOOL boost::histogram::detail::mp_int<std::allocator<unsigned long long>>::operator==<double>(void *a1, double *a2)
{
  if (a1[1] == *a1) {
    __assert_rtn("operator==", "unlimited_storage.hpp", 280, "data.size() > 0u");
  }
  double v2 = *a2;
  return boost::histogram::detail::mp_int<std::allocator<unsigned long long>>::operator double((uint64_t)a1) == v2;
}

double boost::histogram::detail::mp_int<std::allocator<unsigned long long>>::operator double(uint64_t a1)
{
  unsigned int v1 = *(unint64_t **)a1;
  uint64_t v2 = *(void *)(a1 + 8) - *(void *)a1;
  if (!v2) {
    __assert_rtn("operator double", "unlimited_storage.hpp", 218, "data.size() > 0u");
  }
  double v3 = (double)*v1;
  if ((unint64_t)v2 >= 9)
  {
    unint64_t v4 = v2 >> 3;
    if (v4 <= 2) {
      unint64_t v4 = 2;
    }
    unint64_t v5 = v4 - 1;
    uint64_t v6 = v1 + 1;
    unint64_t v7 = 64;
    do
    {
      unint64_t v8 = *v6++;
      double v3 = v3 + (double)v8 * exp2((double)v7);
      v7 += 64;
      --v5;
    }
    while (v5);
  }
  return v3;
}

uint64_t _ZNK5boost9histogram17unlimited_storageINSt3__19allocatorIcEEE11buffer_type5applyIZZNKS5_eqERKS5_ENKUlPKT_E_clIdEEDaSC_EUlSC_E_JEEEDcOSA_DpOT0_(uint64_t a1, uint64_t a2)
{
  switch(*(unsigned char *)(a1 + 16))
  {
    case 0:
      uint64_t v2 = *(void *)(*(void *)(a2 + 8) + 8);
      if (!v2) {
        goto LABEL_60;
      }
      double v3 = *(double **)a2;
      unint64_t v4 = *(unsigned __int8 **)(a1 + 24);
      uint64_t v5 = 8 * v2 - 8;
      do
      {
        double v6 = *v3++;
        double v7 = v6;
        BOOL v8 = v6 >= 0.0;
        LODWORD(v6) = *v4++;
        uint64_t result = v7 == (double)LODWORD(v6) && v8;
        BOOL v10 = result != 1 || v5 == 0;
        v5 -= 8;
      }
      while (!v10);
      break;
    case 1:
      uint64_t v19 = *(void *)(*(void *)(a2 + 8) + 8);
      if (!v19) {
        goto LABEL_60;
      }
      uint64_t v20 = *(double **)a2;
      uint64_t v21 = *(unsigned __int16 **)(a1 + 24);
      uint64_t v22 = 8 * v19 - 8;
      do
      {
        double v23 = *v20++;
        double v24 = v23;
        BOOL v25 = v23 >= 0.0;
        LODWORD(v23) = *v21++;
        uint64_t result = v24 == (double)LODWORD(v23) && v25;
        BOOL v26 = result != 1 || v22 == 0;
        v22 -= 8;
      }
      while (!v26);
      break;
    case 2:
      uint64_t v27 = *(void *)(*(void *)(a2 + 8) + 8);
      if (!v27) {
        goto LABEL_60;
      }
      uint64_t v28 = *(double **)a2;
      uint64_t v29 = *(_DWORD **)(a1 + 24);
      uint64_t v30 = 8 * v27 - 8;
      do
      {
        double v31 = *v28++;
        double v32 = v31;
        BOOL v33 = v31 >= 0.0;
        LODWORD(v31) = *v29++;
        uint64_t result = v32 == (double)LODWORD(v31) && v33;
        BOOL v34 = result != 1 || v30 == 0;
        v30 -= 8;
      }
      while (!v34);
      break;
    case 3:
      uint64_t v35 = *(void *)(*(void *)(a2 + 8) + 8);
      if (!v35) {
        goto LABEL_60;
      }
      uint64_t v36 = *(double **)a2;
      uint64_t v37 = *(unint64_t **)(a1 + 24);
      uint64_t v38 = 8 * v35 - 8;
      do
      {
        double v39 = *v36++;
        double v40 = v39;
        BOOL v41 = v39 >= 0.0;
        unint64_t v42 = *v37++;
        uint64_t result = v40 == (double)v42 && v41;
        BOOL v43 = result != 1 || v38 == 0;
        v38 -= 8;
      }
      while (!v43);
      break;
    case 4:
      uint64_t v44 = *(void *)(*(void *)(a2 + 8) + 8);
      if (!v44) {
        goto LABEL_60;
      }
      uint64_t v45 = *(double **)a2;
      uint64_t v46 = *(void **)(a1 + 24);
      uint64_t v47 = 8 * v44 - 8;
      while (*v45 >= 0.0)
      {
        double v49 = *v45;
        uint64_t result = boost::histogram::detail::mp_int<std::allocator<unsigned long long>>::operator==<double>(v46, &v49);
        if (result)
        {
          ++v45;
          v46 += 3;
          uint64_t v48 = v47;
          v47 -= 8;
          if (v48) {
            continue;
          }
        }
        return result;
      }
      uint64_t result = 0;
      break;
    default:
      uint64_t v11 = *(void *)(*(void *)(a2 + 8) + 8);
      if (v11)
      {
        int v12 = *(double **)a2;
        uint64_t v13 = *(double **)(a1 + 24);
        uint64_t v14 = 8 * v11 - 8;
        do
        {
          double v15 = *v12++;
          double v16 = v15;
          double v17 = *v13++;
          uint64_t result = v16 == v17;
          BOOL v18 = v16 != v17 || v14 == 0;
          v14 -= 8;
        }
        while (!v18);
      }
      else
      {
LABEL_60:
        uint64_t result = 1;
      }
      break;
  }
  return result;
}

uint64_t std::__equal_to::operator()[abi:ne180100]<std::pair<int const,std::vector<std::string>>,std::pair<int const,std::vector<std::string>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)a2 != *(_DWORD *)a3) {
    return 0;
  }
  double v3 = *(unsigned __int8 **)(a2 + 8);
  unint64_t v4 = *(unsigned __int8 **)(a2 + 16);
  uint64_t v5 = *(unsigned __int8 **)(a3 + 8);
  if (v4 - v3 != *(void *)(a3 + 16) - (void)v5) {
    return 0;
  }
  if (v3 == v4) {
    return 1;
  }
  do
  {
    uint64_t result = std::__equal_to::operator()[abi:ne180100]<std::string,std::string>((uint64_t)&v7, v3, v5);
    if (!result) {
      break;
    }
    v3 += 24;
    v5 += 24;
  }
  while (v3 != v4);
  return result;
}

uint64_t std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  double v3 = a3;
  uint64_t v4 = a2[23];
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = a2[23];
  }
  else {
    uint64_t v5 = *((void *)a2 + 1);
  }
  uint64_t v6 = a3[23];
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *((void *)a3 + 1);
  }
  if (v5 != v6) {
    return 0;
  }
  if (v7 < 0) {
    double v3 = *(unsigned __int8 **)a3;
  }
  if ((v4 & 0x80) != 0) {
    return memcmp(*(const void **)a2, v3, *((void *)a2 + 1)) == 0;
  }
  if (!a2[23]) {
    return 1;
  }
  uint64_t v8 = v4 - 1;
  do
  {
    int v10 = *a2++;
    int v9 = v10;
    int v12 = *v3++;
    int v11 = v12;
    BOOL v14 = v8-- != 0;
    uint64_t result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

uint64_t *std::map<int,std::vector<std::string>>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<int,std::vector<std::string>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<int,std::vector<std::string>>,std::__tree_node<std::__value_type<int,std::vector<std::string>>,void *> *,long>>>(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_258F8BF0C(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<int,std::vector<std::string>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<int,std::vector<std::string>>,std::__tree_node<std::__value_type<int,std::vector<std::string>>,void *> *,long>>>(uint64_t *result, int *a2, int *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      uint64_t result = std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::__emplace_hint_unique_key_args<int,std::pair<int const,std::vector<std::string>> const&>(v5, v6, v4 + 8, (uint64_t)(v4 + 8));
      int v7 = (int *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          int v7 = *(int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (int *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::__emplace_hint_unique_key_args<int,std::pair<int const,std::vector<std::string>> const&>(uint64_t **a1, uint64_t *a2, int *a3, uint64_t a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::__find_equal<int>(a1, a2, &v10, &v9, a3);
  uint64_t result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::__construct_node<std::pair<int const,std::vector<std::string>> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

void *std::vector<unsigned long>::__emplace_back_slow_path<boost::histogram::unlimited_storage<std::allocator<char>>::reference_t<boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type const> &>(void **a1, uint64_t *a2, double a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = ((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 61) {
    std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v8 = (uint64_t)(a1 + 2);
  uint64_t v9 = (unsigned char *)a1[2] - v4;
  if (v9 >> 2 > v6) {
    unint64_t v6 = v9 >> 2;
  }
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    int v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v8, v10);
    uint64_t v13 = v12;
  }
  else
  {
    int v11 = 0;
    uint64_t v13 = 0;
  }
  uint64_t v14 = *a2;
  uint64_t v22 = a2;
  double v15 = _ZNK5boost9histogram17unlimited_storageINSt3__19allocatorIcEEE11buffer_type5applyIZNKS5_11reference_tIKS6_EcvdEvEUlPKT_E_JEEEDcOSB_DpOT0_(v14, (uint64_t)&v22, a3);
  double v16 = &v11[8 * v5];
  *(void *)double v16 = (unint64_t)v15;
  double v17 = v16 + 8;
  BOOL v18 = (char *)*a1;
  for (uint64_t i = (char *)a1[1]; i != v18; i -= 8)
  {
    uint64_t v20 = *((void *)i - 1);
    *((void *)v16 - 1) = v20;
    v16 -= 8;
  }
  *a1 = v16;
  a1[1] = v17;
  a1[2] = &v11[8 * v13];
  if (v18) {
    operator delete(v18);
  }
  return v17;
}

void sub_258F8C124(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *boost::histogram::indexed_range<boost::histogram::histogram<std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>,boost::histogram::unlimited_storage<std::allocator<char>>> const>::range_iterator::increment(uint64_t *result)
{
  uint64_t v1 = (_DWORD *)result[2];
  uint64_t v2 = v1 + 12;
  int v3 = v1[12] + 1;
  v1[12] = v3;
  uint64_t v4 = *result + 1;
  if (v3 == v1[14])
  {
    unint64_t v5 = 0xFFFFFFFB6DB6DB70 * ((*(void *)(*(void *)v1 + 8) - **(void **)v1) >> 3) - 16;
    uint64_t v6 = 1;
    do
    {
      if (!v5) {
        break;
      }
      int v7 = v2[1];
      _DWORD *v2 = v7;
      uint64_t v8 = v4 - v6 * (v3 - v7);
      v6 *= (int)v2[3];
      int v9 = v2[6];
      int v10 = v2[4];
      v2 += 4;
      int v3 = v10 + 1;
      _DWORD *v2 = v10 + 1;
      uint64_t v4 = v6 + v8;
      v5 -= 16;
    }
    while (v10 + 1 == v9);
  }
  *uint64_t result = v4;
  return result;
}

void *std::vector<unsigned long>::__emplace_back_slow_path<boost::histogram::unlimited_storage<std::allocator<char>>::reference_t<boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type const>>(void **a1, uint64_t *a2, double a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = ((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 61) {
    std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v8 = (uint64_t)(a1 + 2);
  uint64_t v9 = (unsigned char *)a1[2] - v4;
  if (v9 >> 2 > v6) {
    unint64_t v6 = v9 >> 2;
  }
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v10 = v6;
  }
  if (v10)
  {
    int v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v8, v10);
    uint64_t v13 = v12;
  }
  else
  {
    int v11 = 0;
    uint64_t v13 = 0;
  }
  uint64_t v14 = *a2;
  uint64_t v22 = a2;
  double v15 = _ZNK5boost9histogram17unlimited_storageINSt3__19allocatorIcEEE11buffer_type5applyIZNKS5_11reference_tIKS6_EcvdEvEUlPKT_E_JEEEDcOSB_DpOT0_(v14, (uint64_t)&v22, a3);
  double v16 = &v11[8 * v5];
  *(void *)double v16 = (unint64_t)v15;
  double v17 = v16 + 8;
  BOOL v18 = (char *)*a1;
  for (uint64_t i = (char *)a1[1]; i != v18; i -= 8)
  {
    uint64_t v20 = *((void *)i - 1);
    *((void *)v16 - 1) = v20;
    v16 -= 8;
  }
  *a1 = v16;
  a1[1] = v17;
  a1[2] = &v11[8 * v13];
  if (v18) {
    operator delete(v18);
  }
  return v17;
}

void sub_258F8C2C4(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

double _ZNK5boost9histogram17unlimited_storageINSt3__19allocatorIcEEE11buffer_type5applyIZNKS5_11reference_tIKS6_EcvdEvEUlPKT_E_JEEEDcOSB_DpOT0_(uint64_t a1, uint64_t a2, double a3)
{
  switch(*(unsigned char *)(a1 + 16))
  {
    case 0:
      LOBYTE(a3) = *(unsigned char *)(*(void *)(a1 + 24) + *(void *)(*(void *)a2 + 8));
      goto LABEL_7;
    case 1:
      LOWORD(a3) = *(_WORD *)(*(void *)(a1 + 24) + 2 * *(void *)(*(void *)a2 + 8));
      goto LABEL_7;
    case 2:
      LODWORD(a3) = *(_DWORD *)(*(void *)(a1 + 24) + 4 * *(void *)(*(void *)a2 + 8));
      goto LABEL_7;
    case 3:
      a3 = *(double *)(*(void *)(a1 + 24) + 8 * *(void *)(*(void *)a2 + 8));
LABEL_7:
      double result = (double)*(unint64_t *)&a3;
      break;
    case 4:
      double result = boost::histogram::detail::mp_int<std::allocator<unsigned long long>>::operator double(*(void *)(a1 + 24) + 24 * *(void *)(*(void *)a2 + 8));
      break;
    default:
      double result = *(double *)(*(void *)(a1 + 24) + 8 * *(void *)(*(void *)a2 + 8));
      break;
  }
  return result;
}

uint64_t boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::apply_visitor<boost::detail::variant::result_wrapper1<int boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>::index<double>(double const&)::{lambda(double const&)#1},boost::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>> const&>>(uint64_t a1, double ***a2)
{
  int v4 = *(_DWORD *)a1;
  int v3 = (double **)(a1 + 8);
  switch(v4 ^ (v4 >> 31))
  {
    case 0:
      double v5 = (***a2 - *(double *)(a1 + 40)) / *(double *)(a1 + 48);
      if (v5 >= 1.0)
      {
        uint64_t result = *(unsigned int *)v3;
      }
      else if (v5 >= 0.0)
      {
        uint64_t result = (int)(v5 * (double)*(int *)v3);
      }
      else
      {
        uint64_t result = 0xFFFFFFFFLL;
      }
      break;
    case 1:
      double v7 = ***a2;
      uint64_t result = boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>::index(v3, v7);
      break;
    case 2:
      double v8 = ***a2;
      int v9 = *(_DWORD *)(a1 + 40);
      int v10 = (int)v8 - v9;
      unsigned int v11 = *(_DWORD *)(a1 + 8);
      if ((int)v8 < v9) {
        unsigned int v12 = -1;
      }
      else {
        unsigned int v12 = (int)v8 - v9;
      }
      if (v10 >= (int)v11) {
        uint64_t result = v11;
      }
      else {
        uint64_t result = v12;
      }
      break;
    default:
      boost::detail::variant::forced_return<void>();
  }
  return result;
}

uint64_t _ZNKR5boost7variantINS_9histogram4axis7regularIdNS_11use_defaultES4_S4_EEJNS2_8variableIdS4_S4_NSt3__19allocatorIdEEEENS2_7integerIiS4_NS2_6option3bitILj1EEEEEEE13apply_visitorINS_6detail7variant15result_wrapper1IZNKS2_7variantIJS5_SA_SF_EE4sizeEvEUlRKT_E_RKSG_EEEENSN_11result_typeERSN_(uint64_t a1)
{
  switch(*(_DWORD *)a1 ^ (*(int *)a1 >> 31))
  {
    case 0:
    case 2:
      uint64_t result = *(unsigned int *)(a1 + 8);
      break;
    case 1:
      uint64_t result = ((*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3) - 1;
      break;
    default:
      boost::detail::variant::forced_return<void>();
  }
  return result;
}

void *std::vector<unsigned long>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<double>::__vallocate[abi:ne180100](a1, a2);
    int v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_258F8C5E0(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_258F8C6A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F8C744(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F8CECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,void *a21,uint64_t a22,void *a23,void *a24)
{
  _Unwind_Resume(a1);
}

uint64_t PPSValidateIntervalStart(void *a1, void *a2, void *a3)
{
  double v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (v5) {
    uint64_t v8 = v5[2](v5, v6, v7);
  }
  else {
    uint64_t v8 = 1;
  }

  return v8;
}

void sub_258F8D13C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void PPSAddInterval(PPSTimeIntervalSet *a1, double a2, double a3, NSDictionary *a4)
{
  int v9 = a1;
  id v7 = a4;
  uint64_t v8 = [[PPSTimeInterval alloc] initWithStartTimestamp:v7 endTimestamp:a2 payload:a3];
  if (v8) {
    [(PPSTimeIntervalSet *)v9 addTimeInterval:v8];
  }
}

void sub_258F8D1F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_258F8D604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, uint64_t a19, uint64_t a20,void *a21)
{
  _Unwind_Resume(a1);
}

void sub_258F8D878(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F8D9A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F8DA98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_1_0(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x16u);
}

void OUTLINED_FUNCTION_3_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void sub_258F8FD20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F8FDB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F8FE74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F8FED8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F8FF38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F8FFB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F90038(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F901B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F903C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_258F90590(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F906FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F909FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F90AA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t OUTLINED_FUNCTION_0_1(uint64_t result, uint64_t a2, uint64_t a3, float a4)
{
  *(float *)a3 = a4;
  *(void *)(a3 + 4) = result;
  *(_WORD *)(a3 + 12) = 2112;
  *(void *)(a3 + 14) = a2;
  return result;
}

void sub_258F91F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

uint64_t __Block_byref_object_copy__2(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__2(uint64_t a1)
{
}

void sub_258F9354C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__3(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__3(uint64_t a1)
{
}

void sub_258F93798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_258F93888(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F9396C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F93A14(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_258F93BA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F93D48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F93E50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F93F04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F93F6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F940A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F94194(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F942D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F94360(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F943E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F94810(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F94A00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F94AFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F94B90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F94C84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F94D00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_258F94DFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F94E78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F94F6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F9504C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F95234(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F95398(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F95494(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id _stringEscapingSpecialCharactersForLikePredicate(NSString *a1)
{
  uint64_t v1 = a1;
  id v2 = objc_alloc_init(MEMORY[0x263F089D8]);
  uint64_t v3 = [(NSString *)v1 length];
  v6[0] = MEMORY[0x263EF8330];
  v6[1] = 3221225472;
  unint64_t v6[2] = ___ZL48_stringEscapingSpecialCharactersForLikePredicateP8NSString_block_invoke;
  void v6[3] = &unk_265443550;
  id v4 = v2;
  id v7 = v4;
  -[NSString enumerateSubstringsInRange:options:usingBlock:](v1, "enumerateSubstringsInRange:options:usingBlock:", 0, v3, 2, v6);

  return v4;
}

void sub_258F95594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_258F95670(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F95748(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F957D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F958EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F95BC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F95CBC(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

void sub_258F95D90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F95EAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F95FEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F960B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F961F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F96274(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F96310(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F963D8(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

void sub_258F964C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F96744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_258F969CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_258F96B20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F96CC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_258F96D9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F96E34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F96F48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F9708C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F97310(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F974F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F976E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F978CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F979C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F97B7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F97CB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F97E00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F97F68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F98180(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F98298(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F98338(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F983D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F984A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F9856C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F98684(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL48_stringEscapingSpecialCharactersForLikePredicateP8NSString_block_invoke(uint64_t a1, void *a2)
{
  id v5 = a2;
  if ([v5 isEqualToString:@"~"])
  {
    [*(id *)(a1 + 32) appendString:@"~"];
    [*(id *)(a1 + 32) appendString:@"~"];
  }
  else
  {
    if (([v5 isEqualToString:@"%"] & 1) != 0
      || [v5 isEqualToString:@"_"])
    {
      id v4 = *(void **)(a1 + 32);
      uint64_t v3 = (id *)(a1 + 32);
      [v4 appendString:@"~"];
    }
    else
    {
      uint64_t v3 = (id *)(a1 + 32);
    }
    [*v3 appendString:v5];
  }
}

void sub_258F987C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___ZL43_stringEscapingGlobPatternsForLikePredicateP8NSString_block_invoke(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v12 = v3;
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
  {
    if (([v3 isEqualToString:@"%"] & 1) != 0
      || [v12 isEqualToString:@"_"])
    {
      [*(id *)(a1 + 32) appendString:@"~"];
    }
    [*(id *)(a1 + 32) appendString:v12];
    char v4 = 0;
    goto LABEL_8;
  }
  if ([v3 isEqualToString:@"\\""])
  {
    char v4 = 1;
LABEL_8:
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v4;
    goto LABEL_9;
  }
  if ([v12 isEqualToString:@"*"])
  {
    id v5 = (id *)(a1 + 32);
LABEL_14:
    id v6 = @"%";
LABEL_20:
    [*v5 appendString:v6];
    goto LABEL_9;
  }
  if ([v12 isEqualToString:@"?"])
  {
    id v5 = (id *)(a1 + 32);
LABEL_17:
    id v6 = @"_";
    goto LABEL_20;
  }
  if ([v12 isEqualToString:@"~"])
  {
    id v7 = *(void **)(a1 + 32);
    id v5 = (id *)(a1 + 32);
    id v6 = @"~";
    [v7 appendString:@"~"];
    goto LABEL_20;
  }
  if ([v12 isEqualToString:@"%"])
  {
    uint64_t v8 = *(void **)(a1 + 32);
    id v5 = (id *)(a1 + 32);
    [v8 appendString:@"~"];
    goto LABEL_14;
  }
  int v9 = [v12 isEqualToString:@"_"];
  unsigned int v11 = *(void **)(a1 + 32);
  id v5 = (id *)(a1 + 32);
  int v10 = v11;
  if (v9)
  {
    [v10 appendString:@"~"];
    goto LABEL_17;
  }
  [v10 appendString:v12];
LABEL_9:
}

void sub_258F98974(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_258F99B8C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__4(uint64_t a1)
{
}

void sub_258F9A444(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F9A5A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F9A7AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_258F9A88C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F9AA70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  _Block_object_dispose((const void *)(v19 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_258F9ACE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F9AE5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F9AF54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F9B4A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

BOOL PPSSQLiteColumnValueIsNull(uint64_t a1, int a2)
{
  return sqlite3_column_type(*(sqlite3_stmt **)(a1 + 8), *(_DWORD *)(a1 + 16) + a2) == 5;
}

BOOL PPSSQLiteColumnValueAsBoolean(uint64_t a1, int a2)
{
  return sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), *(_DWORD *)(a1 + 16) + a2) != 0;
}

uint64_t PPSSQLiteColumnValueAsInt(uint64_t a1, int a2)
{
  return sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), *(_DWORD *)(a1 + 16) + a2);
}

sqlite3_int64 PPSSQLiteColumnValuesAsInt64(uint64_t a1, int a2)
{
  return sqlite3_column_int64(*(sqlite3_stmt **)(a1 + 8), *(_DWORD *)(a1 + 16) + a2);
}

double PPSSQLiteColumnValueAsDouble(uint64_t a1, int a2)
{
  return sqlite3_column_double(*(sqlite3_stmt **)(a1 + 8), *(_DWORD *)(a1 + 16) + a2);
}

unsigned __int8 *PPSSQLiteRow::columnValueAsString(sqlite3_stmt **this, int a2)
{
  id v2 = (unsigned __int8 *)sqlite3_column_text(this[1], *((_DWORD *)this + 4) + a2);
  if (v2) {
    id v2 = (unsigned __int8 *)[[NSString alloc] initWithUTF8String:v2];
  }
  return v2;
}

id PPSSQLiteColumnValueAsNonEmptyString(sqlite3_stmt **a1, int a2)
{
  id v2 = PPSSQLiteRow::columnValueAsString(a1, a2);
  if ([v2 length]) {
    id v3 = v2;
  }
  else {
    id v3 = 0;
  }
  id v4 = v3;

  return v4;
}

void sub_258F9B878(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

const void *PPSSQLiteRow::columnValueAsBytes(sqlite3_stmt **this, int a2)
{
  if (sqlite3_column_type(this[1], *((_DWORD *)this + 4) + a2) == 5) {
    return 0;
  }
  int v5 = *((_DWORD *)this + 4) + a2;
  id v6 = this[1];
  return sqlite3_column_blob(v6, v5);
}

id PPSSQLiteRow::columnValueAsData(PPSSQLiteRow *this, int a2)
{
  if (sqlite3_column_type(*((sqlite3_stmt **)this + 1), *((_DWORD *)this + 4) + a2) == 5)
  {
    id v4 = 0;
  }
  else
  {
    int v5 = *((_DWORD *)this + 4) + a2;
    id v6 = sqlite3_column_blob(*((sqlite3_stmt **)this + 1), v5);
    id v4 = objc_msgSend(objc_alloc(MEMORY[0x263EFF8F8]), "initWithBytes:length:", v6, sqlite3_column_bytes(*((sqlite3_stmt **)this + 1), v5));
  }
  return v4;
}

id PPSSQLiteRow::columnValueAsDate(sqlite3_stmt **this, int a2)
{
  if (sqlite3_column_type(this[1], *((_DWORD *)this + 4) + a2) == 5) {
    id v4 = 0;
  }
  else {
    id v4 = objc_msgSend(objc_alloc(MEMORY[0x263EFF910]), "initWithTimeIntervalSinceReferenceDate:", sqlite3_column_double(this[1], *((_DWORD *)this + 4) + a2));
  }
  return v4;
}

id PPSSQLiteRow::columnValueAsNumber(sqlite3_stmt **this, int a2)
{
  int v4 = sqlite3_column_type(this[1], *((_DWORD *)this + 4) + a2);
  if (v4 == 1)
  {
    int v5 = objc_msgSend(objc_alloc(NSNumber), "initWithLongLong:", sqlite3_column_int64(this[1], *((_DWORD *)this + 4) + a2));
  }
  else if (v4 == 2)
  {
    int v5 = objc_msgSend(objc_alloc(NSNumber), "initWithDouble:", sqlite3_column_double(this[1], *((_DWORD *)this + 4) + a2));
  }
  else
  {
    int v5 = 0;
  }
  return v5;
}

id PPSSQLiteRow::columnValueAsFoundationType(sqlite3_stmt **this, int a2)
{
  switch(sqlite3_column_type(this[1], *((_DWORD *)this + 4) + a2))
  {
    case 1:
      int v4 = objc_msgSend(objc_alloc(NSNumber), "initWithLongLong:", sqlite3_column_int64(this[1], *((_DWORD *)this + 4) + a2));
      break;
    case 2:
      int v4 = objc_msgSend(objc_alloc(NSNumber), "initWithDouble:", sqlite3_column_double(this[1], *((_DWORD *)this + 4) + a2));
      break;
    case 3:
      int v4 = PPSSQLiteRow::columnValueAsString(this, a2);
      break;
    case 4:
      int v4 = PPSSQLiteRow::columnValueAsData((PPSSQLiteRow *)this, a2);
      break;
    default:
      int v4 = 0;
      break;
  }
  return v4;
}

uint64_t PPSSQLiteRow::indexOfColumn(PPSSQLiteRow *this, NSString *a2)
{
  id v3 = a2;
  if ([*((id *)this + 3) count] != *((_DWORD *)this + 5))
  {
    int v4 = objc_opt_new();
    if (*((int *)this + 5) >= 1)
    {
      uint64_t v5 = 0;
      do
      {
        id v6 = sqlite3_column_name(*((sqlite3_stmt **)this + 1), v5);
        id v7 = [NSNumber numberWithInt:v5];
        uint64_t v8 = [NSString stringWithUTF8String:v6];
        [v4 setObject:v7 forKeyedSubscript:v8];

        uint64_t v5 = (v5 + 1);
      }
      while ((int)v5 < *((_DWORD *)this + 5));
    }
    uint64_t v9 = [v4 copy];
    int v10 = (void *)*((void *)this + 3);
    *((void *)this + 3) = v9;
  }
  unsigned int v11 = [*((id *)this + 3) objectForKey:v3];
  id v12 = v11;
  if (v11) {
    uint64_t v13 = [v11 intValue] - *((_DWORD *)this + 4);
  }
  else {
    uint64_t v13 = 0xFFFFFFFFLL;
  }

  return v13;
}

void sub_258F9BD24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL PPSSQLiteColumnValueWithNameIsNull(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = PPSSQLiteRow::indexOfColumn((PPSSQLiteRow *)a1, v3);
  BOOL v5 = sqlite3_column_type(*(sqlite3_stmt **)(a1 + 8), *(_DWORD *)(a1 + 16) + v4) == 5;

  return v5;
}

void sub_258F9BDC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL PPSSQLiteColumnValueWithNameAsBoolean(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = PPSSQLiteRow::indexOfColumn((PPSSQLiteRow *)a1, v3);
  BOOL v5 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), *(_DWORD *)(a1 + 16) + v4) != 0;

  return v5;
}

void sub_258F9BE28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t PPSSQLiteColumnValueWithNameAsInt(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = PPSSQLiteRow::indexOfColumn((PPSSQLiteRow *)a1, v3);
  uint64_t v5 = sqlite3_column_int(*(sqlite3_stmt **)(a1 + 8), *(_DWORD *)(a1 + 16) + v4);

  return v5;
}

void sub_258F9BE8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

sqlite3_int64 PPSSQLiteColumnValueWithNameAsInt64(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = PPSSQLiteRow::indexOfColumn((PPSSQLiteRow *)a1, v3);
  sqlite3_int64 v5 = sqlite3_column_int64(*(sqlite3_stmt **)(a1 + 8), *(_DWORD *)(a1 + 16) + v4);

  return v5;
}

void sub_258F9BEF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double PPSSQLiteColumnValueWithNameAsDouble(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = PPSSQLiteRow::indexOfColumn((PPSSQLiteRow *)a1, v3);
  double v5 = sqlite3_column_double(*(sqlite3_stmt **)(a1 + 8), *(_DWORD *)(a1 + 16) + v4);

  return v5;
}

void sub_258F9BF5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id PPSSQLiteColumnValueWithNameAsString(PPSSQLiteRow *a1, void *a2)
{
  id v3 = a2;
  int v4 = PPSSQLiteRow::indexOfColumn(a1, v3);
  double v5 = PPSSQLiteRow::columnValueAsString((sqlite3_stmt **)a1, v4);

  return v5;
}

void sub_258F9BFCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id PPSSQLiteColumnValueWithNameAsNonEmptyString(PPSSQLiteRow *a1, void *a2)
{
  id v2 = PPSSQLiteColumnValueWithNameAsString(a1, a2);
  if ([v2 length]) {
    id v3 = v2;
  }
  else {
    id v3 = 0;
  }
  id v4 = v3;

  return v4;
}

void sub_258F9C020(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id PPSSQLiteColumnValueWithNameAsData(PPSSQLiteRow *a1, void *a2)
{
  id v3 = a2;
  int v4 = PPSSQLiteRow::indexOfColumn(a1, v3);
  double v5 = PPSSQLiteRow::columnValueAsData(a1, v4);

  return v5;
}

void sub_258F9C090(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id PPSSQLiteColumnValueWithNameAsDate(PPSSQLiteRow *a1, void *a2)
{
  id v3 = a2;
  int v4 = PPSSQLiteRow::indexOfColumn(a1, v3);
  double v5 = PPSSQLiteRow::columnValueAsDate((sqlite3_stmt **)a1, v4);

  return v5;
}

void sub_258F9C100(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id PPSSQLiteColumnValueWithNameAsNumber(PPSSQLiteRow *a1, void *a2)
{
  id v3 = a2;
  int v4 = PPSSQLiteRow::indexOfColumn(a1, v3);
  double v5 = PPSSQLiteRow::columnValueAsNumber((sqlite3_stmt **)a1, v4);

  return v5;
}

void sub_258F9C170(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id PPSSQLiteColumnValueWithNameAsFoundationType(PPSSQLiteRow *a1, void *a2)
{
  id v3 = a2;
  int v4 = PPSSQLiteRow::indexOfColumn(a1, v3);
  double v5 = PPSSQLiteRow::columnValueAsFoundationType((sqlite3_stmt **)a1, v4);

  return v5;
}

void sub_258F9C1E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F9D220(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F9D2AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F9D380(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_258F9D468(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_258F9DA54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,char a29)
{
  if (v34) {
    operator delete(v34);
  }

  _Block_object_dispose(&a20, 8);
  if (__p)
  {
    a27 = (uint64_t)__p;
    operator delete(__p);
  }
  _Block_object_dispose(&a29, 8);

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__5(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void __Block_byref_object_dispose__5(uint64_t a1)
{
  id v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_258F9DCEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F9DE7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_258F9E214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,char a29)
{
  if (v34) {
    operator delete(v34);
  }

  _Block_object_dispose(&a20, 8);
  if (__p)
  {
    a27 = (uint64_t)__p;
    operator delete(__p);
  }
  _Block_object_dispose(&a29, 8);

  _Unwind_Resume(a1);
}

void sub_258F9E46C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

char *std::vector<std::pair<double,double>>::__init_with_size[abi:ne180100]<std::pair<double,double>*,std::pair<double,double>*>(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    id v6 = result;
    __n128 result = std::vector<std::pair<double,double>>::__vallocate[abi:ne180100](result, a4);
    id v7 = (_OWORD *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      long long v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_258F9E648(_Unwind_Exception *exception_object)
{
  id v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::pair<double,double>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<double,double>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<double,double>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(16 * a2);
}

void *std::get_temporary_buffer[abi:ne180100]<std::pair<double,double>>(uint64_t a1)
{
  if (a1 < 1) {
    return 0;
  }
  if (a1 >= 0x7FFFFFFFFFFFFFFLL) {
    unint64_t v1 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v1 = a1;
  }
  id v2 = (const std::nothrow_t *)MEMORY[0x263F8C180];
  while (1)
  {
    __n128 result = operator new(16 * v1, v2);
    if (result) {
      break;
    }
    BOOL v4 = v1 > 1;
    v1 >>= 1;
    if (!v4) {
      return 0;
    }
  }
  return result;
}

double std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<double,double> *>>(__n128 *a1, __n128 *a2, uint64_t a3, unint64_t a4, __n128 *a5, uint64_t a6, double result)
{
  if (a4 >= 2)
  {
    if (a4 == 2)
    {
      __n128 result = a2[-1].n128_f64[0];
      double v9 = a1->n128_f64[0];
      if (result < a1->n128_f64[0] || v9 >= result && a2[-1].n128_f64[1] < a1->n128_f64[1])
      {
        a1->n128_f64[0] = result;
        a2[-1].n128_f64[0] = v9;
        __n128 result = a1->n128_f64[1];
        a1->n128_u64[1] = a2[-1].n128_u64[1];
        a2[-1].n128_f64[1] = result;
      }
    }
    else if ((uint64_t)a4 <= 0)
    {
      std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<double,double> *>>(a1->n128_f64, a2->n128_f64);
    }
    else
    {
      unint64_t v14 = a4 >> 1;
      double v15 = &a1[a4 >> 1];
      unint64_t v16 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<double,double> *>>(a1, v15, a3, v16, a5);
        std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<double,double> *>>(&a1[a4 >> 1], a2, a3, a4 - (a4 >> 1), &a5[v14]);
        return std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,double> *,std::pair<double,double> *,std::__wrap_iter<std::pair<double,double> *>>(a5->n128_f64, a5[v14].n128_f64, a5[v14].n128_f64, a5[a4].n128_f64, a1->n128_f64, v18);
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<double,double> *>>(a1, v15, a3, v16, a5, a6);
        std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<double,double> *>>(&a1[a4 >> 1], a2, a3, a4 - (a4 >> 1), a5, a6);
        return std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<double,double> *>>(a1->n128_f64, a1[a4 >> 1].n128_f64, a2->n128_f64, a3, a4 >> 1, a4 - (a4 >> 1), a5->n128_f64, a6, v17);
      }
    }
  }
  return result;
}

double *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<double,double> *>>(double *result, double *a2)
{
  if (result == a2) {
    return result;
  }
  id v2 = result + 2;
  if (result + 2 == a2) {
    return result;
  }
  uint64_t v3 = 0;
  BOOL v4 = result;
  do
  {
    double v5 = v4;
    BOOL v4 = v2;
    double v6 = *v2;
    double v7 = *v5;
    if (*v2 >= *v5)
    {
      if (v7 < v6) {
        goto LABEL_17;
      }
      double v8 = v5[3];
      if (v8 >= v5[1]) {
        goto LABEL_17;
      }
    }
    else
    {
      double v8 = v5[3];
    }
    double *v2 = v7;
    v2[1] = v5[1];
    if (v5 == result)
    {
LABEL_13:
      double v5 = result;
      goto LABEL_14;
    }
    uint64_t v9 = v3;
    while (1)
    {
      double v10 = *(double *)((char *)result + v9 - 16);
      if (v6 >= v10) {
        break;
      }
      double v11 = *(double *)((char *)result + v9 - 8);
LABEL_12:
      v5 -= 2;
      id v12 = (double *)((char *)result + v9);
      *id v12 = v10;
      v12[1] = v11;
      v9 -= 16;
      if (!v9) {
        goto LABEL_13;
      }
    }
    if (v10 < v6) {
      goto LABEL_14;
    }
    double v11 = *(double *)((char *)result + v9 - 8);
    if (v8 < v11) {
      goto LABEL_12;
    }
    double v5 = (double *)((char *)result + v9);
LABEL_14:
    double *v5 = v6;
    v5[1] = v8;
LABEL_17:
    id v2 = v4 + 2;
    v3 += 16;
  }
  while (v4 + 2 != a2);
  return result;
}

void std::__stable_sort_move<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<double,double> *>>(__n128 *a1, __n128 *a2, uint64_t a3, unint64_t a4, __n128 *a5)
{
  if (a4)
  {
    if (a4 == 2)
    {
      uint64_t v9 = a2 - 1;
      double v10 = a2[-1].n128_f64[0];
      if (v10 >= a1->n128_f64[0] && (a1->n128_f64[0] < v10 || a2[-1].n128_f64[1] >= a1->n128_f64[1]))
      {
        *a5 = *a1;
        __n128 v11 = *v9;
      }
      else
      {
        *a5 = *v9;
        __n128 v11 = *a1;
      }
      a5[1] = v11;
    }
    else if (a4 == 1)
    {
      *a5 = *a1;
    }
    else if ((uint64_t)a4 > 8)
    {
      std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<double,double> *>>(a1, &a1[a4 >> 1], a3, a4 >> 1, a5, a4 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<double,double> *>>(&a1[a4 >> 1], a2, a3, a4 - (a4 >> 1), &a5[a4 >> 1], a4 - (a4 >> 1));
      std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<double,double> *>,std::__wrap_iter<std::pair<double,double> *>>(a1, &a1[a4 >> 1], &a1[a4 >> 1], a2, a5, v13);
    }
    else
    {
      std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<double,double> *>>(a1->n128_f64, a2->n128_f64, a5->n128_f64);
    }
  }
}

double std::__merge_move_assign[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,double> *,std::pair<double,double> *,std::__wrap_iter<std::pair<double,double> *>>(double *a1, double *a2, double *a3, double *a4, double *a5, double result)
{
  while (1)
  {
    if (a1 == a2)
    {
      while (a3 != a4)
      {
        *a5 = *a3;
        __n128 result = a3[1];
        a5[1] = result;
        a3 += 2;
        a5 += 2;
      }
      return result;
    }
    if (a3 == a4) {
      break;
    }
    double v6 = *a3;
    double v7 = *a1;
    if (*a3 >= *a1 && (v7 < v6 || a3[1] >= a1[1]))
    {
      *a5 = v7;
      __n128 result = a1[1];
      a5[1] = result;
      a1 += 2;
    }
    else
    {
      *a5 = v6;
      __n128 result = a3[1];
      a5[1] = result;
      a3 += 2;
    }
    a5 += 2;
  }
  if (a1 != a2)
  {
    uint64_t v8 = 0;
    do
    {
      uint64_t v9 = &a1[v8];
      double v10 = &a5[v8];
      *double v10 = a1[v8];
      __n128 result = a1[v8 + 1];
      v10[1] = result;
      v8 += 2;
    }
    while (v9 + 2 != a2);
  }
  return result;
}

double std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<double,double> *>>(double *a1, double *a2, double *a3, uint64_t a4, uint64_t a5, uint64_t a6, double *a7, uint64_t a8, double result)
{
  if (a6)
  {
    uint64_t v9 = a6;
    uint64_t v38 = a8;
    while (v9 > a8 && a5 > a8)
    {
      if (!a5) {
        return result;
      }
      unint64_t v12 = 0;
      __n128 result = *a2;
      uint64_t v13 = -a5;
      while (1)
      {
        double v14 = a1[v12 / 8];
        if (result < v14 || v14 >= result && a2[1] < a1[v12 / 8 + 1]) {
          break;
        }
        v12 += 16;
        if (__CFADD__(v13++, 1)) {
          return result;
        }
      }
      uint64_t v16 = -v13;
      if (-v13 >= v9)
      {
        if (v13 == -1)
        {
          uint64_t v37 = &a1[v12 / 8];
          *uint64_t v37 = result;
          *a2 = v14;
          __n128 result = a1[v12 / 8 + 1];
          v37[1] = a2[1];
          a2[1] = result;
          return result;
        }
        if (v13 > 0) {
          uint64_t v16 = 1 - v13;
        }
        uint64_t v25 = v16 >> 1;
        uint64_t v20 = &a1[2 * (v16 >> 1) + v12 / 8];
        uint64_t v19 = a2;
        if (a2 != a3)
        {
          unint64_t v26 = ((char *)a3 - (char *)a2) >> 4;
          double v27 = *v20;
          uint64_t v19 = a2;
          do
          {
            unint64_t v28 = v26 >> 1;
            uint64_t v29 = &v19[2 * (v26 >> 1)];
            if (*v29 < v27 || v27 >= *v29 && v19[2 * v28 + 1] < v20[1])
            {
              uint64_t v19 = v29 + 2;
              unint64_t v28 = v26 + ~v28;
            }
            unint64_t v26 = v28;
          }
          while (v28);
        }
        uint64_t v18 = ((char *)v19 - (char *)a2) >> 4;
      }
      else
      {
        if (v9 >= 0) {
          uint64_t v17 = v9;
        }
        else {
          uint64_t v17 = v9 + 1;
        }
        uint64_t v18 = v17 >> 1;
        uint64_t v19 = &a2[2 * (v17 >> 1)];
        uint64_t v20 = &a1[v12 / 8];
        if ((char *)a2 - (char *)a1 != v12)
        {
          unint64_t v21 = (uint64_t)((char *)a2 - (char *)a1 - v12) >> 4;
          double v22 = *v19;
          uint64_t v20 = &a1[v12 / 8];
          do
          {
            unint64_t v23 = v21 >> 1;
            double v24 = &v20[2 * (v21 >> 1)];
            if (v22 >= *v24 && (*v24 < v22 || v19[1] >= v20[2 * v23 + 1]))
            {
              uint64_t v20 = v24 + 2;
              unint64_t v23 = v21 + ~v23;
            }
            unint64_t v21 = v23;
          }
          while (v23);
        }
        uint64_t v25 = (uint64_t)((char *)v20 - (char *)a1 - v12) >> 4;
      }
      uint64_t v30 = (uint64_t *)v19;
      if (v20 != a2)
      {
        uint64_t v30 = (uint64_t *)v20;
        if (v19 != a2)
        {
          double v31 = a3;
          uint64_t v32 = v18;
          BOOL v33 = std::__rotate_forward[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<std::pair<double,double> *>>((uint64_t *)v20, (uint64_t *)a2, (uint64_t *)v19);
          uint64_t v18 = v32;
          a3 = v31;
          a8 = v38;
          uint64_t v30 = v33;
        }
      }
      a5 = -(v25 + v13);
      uint64_t v34 = v9 - v18;
      if (v25 + v18 >= v9 - (v25 + v18) - v13)
      {
        uint64_t v36 = v18;
        std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<double,double> *>>(v30, v19, a3, a4, -(v25 + v13), v34, a7, a8);
        uint64_t v19 = v20;
        uint64_t v34 = v36;
        a5 = v25;
        a3 = (double *)v30;
        a1 = (double *)((char *)a1 + v12);
      }
      else
      {
        uint64_t v35 = a3;
        std::__inplace_merge<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<double,double> *>>(&a1[v12 / 8], v20, v30, a4, v25, v18, a7, a8);
        a3 = v35;
        a1 = (double *)v30;
      }
      uint64_t v9 = v34;
      a2 = v19;
      a8 = v38;
      if (!v34) {
        return result;
      }
    }
    return std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<double,double> *>>(a1, a2, a3, result, a4, a5, v9, a7);
  }
  return result;
}

double *std::__insertion_sort_move[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<double,double> *>>(double *result, double *a2, double *a3)
{
  if (result == a2) {
    return result;
  }
  *(_OWORD *)a3 = *(_OWORD *)result;
  uint64_t v3 = result + 2;
  if (result + 2 == a2) {
    return result;
  }
  uint64_t v4 = 0;
  double v5 = a3;
  double v6 = a3;
  do
  {
    double v7 = v3;
    double v8 = *v6;
    v6 += 2;
    double v9 = v8;
    if (*v3 >= v8 && (v9 < *v3 || result[3] >= v5[1]))
    {
      *(_OWORD *)double v6 = *(_OWORD *)v3;
      goto LABEL_18;
    }
    *(_OWORD *)double v6 = *(_OWORD *)v5;
    double v10 = a3;
    if (v5 == a3) {
      goto LABEL_17;
    }
    uint64_t v11 = v4;
    while (1)
    {
      double v12 = *(double *)((char *)a3 + v11 - 16);
      if (*v7 >= v12) {
        break;
      }
      double v13 = *(double *)((char *)a3 + v11 - 8);
LABEL_11:
      v5 -= 2;
      double v14 = (double *)((char *)a3 + v11);
      *double v14 = v12;
      v14[1] = v13;
      v11 -= 16;
      if (!v11)
      {
        double v10 = a3;
        goto LABEL_17;
      }
    }
    if (v12 >= *v7)
    {
      double v10 = (double *)((char *)a3 + v11);
      double v13 = *(double *)((char *)a3 + v11 - 8);
      if (result[3] >= v13) {
        goto LABEL_17;
      }
      goto LABEL_11;
    }
    double v10 = v5;
LABEL_17:
    *double v10 = *v7;
    v10[1] = result[3];
LABEL_18:
    uint64_t v3 = v7 + 2;
    v4 += 16;
    double v5 = v6;
    __n128 result = v7;
  }
  while (v7 + 2 != a2);
  return result;
}

__n128 std::__merge_move_construct[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<double,double> *>,std::__wrap_iter<std::pair<double,double> *>>(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 *a5, __n128 result)
{
  while (1)
  {
    if (a1 == a2)
    {
      while (a3 != a4)
      {
        __n128 v8 = *a3++;
        result.n128_u64[0] = v8.n128_u64[0];
        *a5++ = v8;
      }
      return result;
    }
    if (a3 == a4) {
      break;
    }
    if (a3->n128_f64[0] >= a1->n128_f64[0] && (a1->n128_f64[0] < a3->n128_f64[0] || a3->n128_f64[1] >= a1->n128_f64[1]))
    {
      __n128 v7 = *a1++;
      __n128 result = v7;
    }
    else
    {
      __n128 v6 = *a3++;
      __n128 result = v6;
    }
    *a5++ = result;
  }
  if (a1 != a2)
  {
    uint64_t v9 = 0;
    do
    {
      __n128 result = a1[v9];
      a5[v9++] = result;
    }
    while (&a1[v9] != a2);
  }
  return result;
}

double std::__buffered_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<std::pair<double,double> *>>(double *a1, double *a2, double *a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, double *a8)
{
  if (a6 <= a7)
  {
    double v14 = a8;
    if (a1 != a2)
    {
      double v14 = a8;
      double v15 = a1;
      do
      {
        long long v16 = *(_OWORD *)v15;
        v15 += 2;
        a4 = *(double *)&v16;
        *(_OWORD *)double v14 = v16;
        v14 += 2;
      }
      while (v15 != a2);
    }
    return std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,double> *,std::pair<double,double> *,std::__wrap_iter<std::pair<double,double> *>,std::__wrap_iter<std::pair<double,double> *>,std::__wrap_iter<std::pair<double,double> *>>(a8, v14, a2, a3, a1, a4);
  }
  else
  {
    double v10 = a8;
    if (a2 != a3)
    {
      double v10 = a8;
      uint64_t v11 = a2;
      do
      {
        long long v12 = *(_OWORD *)v11;
        v11 += 2;
        a4 = *(double *)&v12;
        *(_OWORD *)double v10 = v12;
        v10 += 2;
      }
      while (v11 != a3);
    }
    return std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__invert<std::__less<void,void> &>,std::reverse_iterator<std::pair<double,double> *>,std::reverse_iterator<std::pair<double,double> *>,std::reverse_iterator<std::__wrap_iter<std::pair<double,double> *>>,std::reverse_iterator<std::__wrap_iter<std::pair<double,double> *>>,std::reverse_iterator<std::__wrap_iter<std::pair<double,double> *>>>(a4, (uint64_t)v10, (uint64_t)v10, (uint64_t)a8, (uint64_t)a8, (uint64_t)a2, (uint64_t)a2, (uint64_t)a1, (uint64_t)a1, (uint64_t)a3, (uint64_t)a3);
  }
}

double std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,double> *,std::pair<double,double> *,std::__wrap_iter<std::pair<double,double> *>,std::__wrap_iter<std::pair<double,double> *>,std::__wrap_iter<std::pair<double,double> *>>(double *a1, double *a2, double *a3, double *a4, double *a5, double result)
{
  while (a1 != a2)
  {
    if (a3 == a4)
    {
      uint64_t v8 = 0;
      do
      {
        uint64_t v9 = &a5[v8];
        double v10 = &a1[v8];
        double *v9 = a1[v8];
        __n128 result = a1[v8 + 1];
        v9[1] = result;
        v8 += 2;
      }
      while (v10 + 2 != a2);
      return result;
    }
    double v6 = *a3;
    double v7 = *a1;
    if (*a3 < *a1 || v7 >= v6 && a3[1] < a1[1])
    {
      *a5 = v6;
      __n128 result = a3[1];
      a5[1] = result;
      a3 += 2;
    }
    else
    {
      *a5 = v7;
      __n128 result = a1[1];
      a5[1] = result;
      a1 += 2;
    }
    a5 += 2;
  }
  return result;
}

double std::__half_inplace_merge[abi:ne180100]<std::_ClassicAlgPolicy,std::__invert<std::__less<void,void> &>,std::reverse_iterator<std::pair<double,double> *>,std::reverse_iterator<std::pair<double,double> *>,std::reverse_iterator<std::__wrap_iter<std::pair<double,double> *>>,std::reverse_iterator<std::__wrap_iter<std::pair<double,double> *>>,std::reverse_iterator<std::__wrap_iter<std::pair<double,double> *>>>(double result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a3 != a5)
  {
    uint64_t v11 = (double *)(a11 - 8);
    while (a7 != a9)
    {
      double v12 = *(double *)(a7 - 16);
      double v13 = *(double *)(a3 - 16);
      if (v13 >= v12 && (v12 < v13 || *(double *)(a3 - 8) >= *(double *)(a7 - 8)))
      {
        uint64_t v14 = a3;
        a3 -= 16;
      }
      else
      {
        double v13 = *(double *)(a7 - 16);
        uint64_t v14 = a7;
        a7 -= 16;
      }
      *(v11 - 1) = v13;
      __n128 result = *(double *)(v14 - 8);
      *uint64_t v11 = result;
      v11 -= 2;
      if (a3 == a5) {
        return result;
      }
    }
    unint64_t v15 = 0;
    do
    {
      long long v16 = &v11[v15 / 8];
      *(v16 - 1) = *(double *)(a3 + v15 - 16);
      __n128 result = *(double *)(a3 + v15 - 8);
      *long long v16 = result;
      v15 -= 16;
    }
    while (a3 + v15 != a5);
  }
  return result;
}

uint64_t *std::__rotate_forward[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<std::pair<double,double> *>>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a1;
  *a1 = *a2;
  *a2 = v3;
  uint64_t v4 = a1[1];
  a1[1] = a2[1];
  a2[1] = v4;
  __n128 result = a1 + 2;
  for (uint64_t i = a2 + 2; i != a3; i += 2)
  {
    if (result == a2) {
      a2 = i;
    }
    uint64_t v7 = *result;
    *__n128 result = *i;
    *uint64_t i = v7;
    uint64_t v8 = result[1];
    result[1] = i[1];
    i[1] = v8;
    result += 2;
  }
  if (result != a2)
  {
    uint64_t v9 = result;
    double v10 = a2;
    do
    {
      while (1)
      {
        uint64_t v11 = *v9;
        uint64_t *v9 = *v10;
        *double v10 = v11;
        uint64_t v12 = v9[1];
        v9[1] = v10[1];
        v10[1] = v12;
        v9 += 2;
        v10 += 2;
        if (v10 == a3) {
          break;
        }
        if (v9 == a2) {
          a2 = v10;
        }
      }
      double v10 = a2;
    }
    while (v9 != a2);
  }
  return result;
}

void sub_258F9F8EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__6(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__6(uint64_t a1)
{
}

id logHandle()
{
  if (logHandle_onceToken != -1) {
    dispatch_once(&logHandle_onceToken, &__block_literal_global_38);
  }
  v0 = (void *)logHandle__logHandle;
  return v0;
}

uint64_t __logHandle_block_invoke()
{
  logHandle__logHandle = (uint64_t)os_log_create("com.apple.PerfPowerServicesReader", "client");
  return MEMORY[0x270F9A758]();
}

id PerfPowerServicesGetData(void *a1, uint64_t a2)
{
  id v3 = a1;
  uint64_t v4 = objc_opt_new();
  double v5 = [v4 postDataRequest:v3 outError:a2];

  return v5;
}

id PerfPowerServicesGetLogLines(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  double v5 = objc_msgSend(MEMORY[0x263EFFA08], "setWithObjects:", @"GenerativeFunctionMetrics", @"BasebandMetrics", 0);
  double v6 = objc_msgSend(MEMORY[0x263EFFA08], "setWithObjects:", @"appleDiffusion", @"assetLoad", @"mmExecuteRequest", @"tgiExecuteRequest", @"Summarization", @"SmartReplySession", @"Events", @"Histogram", 0);
  if (v4)
  {
    uint64_t v7 = [NSURL fileURLWithPath:v4 isDirectory:0];
    uint64_t v8 = objc_opt_new();
    uint64_t v9 = [MEMORY[0x263F5D3B0] getSubsystemsForFilepath:v7];
    double v10 = +[PPSTimestampConverterRegistry converterForFilepath:v7];
    id v11 = objc_alloc_init(MEMORY[0x263F08790]);
    [v11 setDateFormat:@"MM/dd/yy HH:mm:ss"];
    uint64_t v12 = [MEMORY[0x263EFFA18] timeZoneWithAbbreviation:@"GMT"];
    [v11 setTimeZone:v12];

    v25[0] = MEMORY[0x263EF8330];
    v25[1] = 3221225472;
    unint64_t v25[2] = __PerfPowerServicesGetLogLines_block_invoke;
    v25[3] = &unk_2654437C0;
    id v26 = v5;
    id v27 = v6;
    id v28 = v3;
    id v29 = v7;
    id v30 = v11;
    id v31 = v10;
    id v13 = v8;
    id v32 = v13;
    id v24 = v10;
    id v14 = v11;
    id v15 = v7;
    id v16 = v4;
    uint64_t v17 = v6;
    uint64_t v18 = v5;
    uint64_t v19 = v9;
    [v9 enumerateObjectsUsingBlock:v25];
    id v20 = v3;
    unint64_t v21 = v32;
    id v22 = v13;

    id v3 = v20;
    double v5 = v18;
    double v6 = v17;
    id v4 = v16;
  }
  else
  {
    id v22 = 0;
  }

  return v22;
}

void __PerfPowerServicesGetLogLines_block_invoke(id *a1, void *a2)
{
  id v3 = a2;
  id v4 = [MEMORY[0x263F5D3B0] getMetadataByCategoryForSubsystem:v3];
  v6[0] = MEMORY[0x263EF8330];
  v6[1] = 3221225472;
  unint64_t v6[2] = __PerfPowerServicesGetLogLines_block_invoke_2;
  void v6[3] = &unk_265443798;
  id v7 = a1[4];
  id v8 = v3;
  id v9 = a1[5];
  id v10 = a1[6];
  id v11 = a1[7];
  id v12 = a1[8];
  id v13 = a1[9];
  id v14 = a1[10];
  id v5 = v3;
  [v4 enumerateKeysAndObjectsUsingBlock:v6];
}

void __PerfPowerServicesGetLogLines_block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  id v5 = a2;
  id v6 = a3;
  id v7 = (void *)MEMORY[0x25A2D4DD0]();
  if (![*(id *)(a1 + 32) containsObject:*(void *)(a1 + 40)]
    || ([*(id *)(a1 + 48) containsObject:v5] & 1) == 0)
  {
    id v8 = PPSCreateSubsystemCategoryPredicate(*(void *)(a1 + 40), (uint64_t)v5, 0);
    id v9 = [[PPSTimeSeriesRequest alloc] initWithMetrics:0 predicate:v8 timeFilter:*(void *)(a1 + 56)];
    id v10 = [[PPSRequestDispatcher alloc] initWithFilepath:*(void *)(a1 + 64)];
    id v43 = 0;
    id v11 = [(PPSRequestDispatcher *)v10 dataForRequest:v9 withError:&v43];
    id v12 = v43;
    if (!v12)
    {
      id v31 = v10;
      id v32 = v9;
      BOOL v33 = v8;
      uint64_t v34 = v7;
      id v35 = v6;
      id v36 = v5;
      long long v41 = 0u;
      long long v42 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      id v30 = v11;
      id obj = v11;
      uint64_t v13 = [obj countByEnumeratingWithState:&v39 objects:v44 count:16];
      if (v13)
      {
        uint64_t v14 = v13;
        uint64_t v38 = *(void *)v40;
        do
        {
          for (uint64_t i = 0; i != v14; ++i)
          {
            if (*(void *)v40 != v38) {
              objc_enumerationMutation(obj);
            }
            id v16 = *(void **)(*((void *)&v39 + 1) + 8 * i);
            uint64_t v17 = (void *)MEMORY[0x25A2D4DD0]();
            uint64_t v18 = [MEMORY[0x263EFF980] arrayWithCapacity:2];
            uint64_t v19 = [v16 logLine];
            id v20 = (void *)MEMORY[0x263EFF910];
            unint64_t v21 = *(void **)(a1 + 72);
            id v22 = *(void **)(a1 + 80);
            [v16 monotonicTimestamp];
            objc_msgSend(v22, "localTimeFromMonotonicTime:");
            unint64_t v23 = objc_msgSend(v20, "dateWithTimeIntervalSince1970:");
            id v24 = [v21 stringFromDate:v23];

            if (v19)
            {
              uint64_t v25 = NSNumber;
              [v16 monotonicTimestamp];
              id v26 = objc_msgSend(v25, "numberWithDouble:");
              [v18 addObject:v26];

              id v27 = NSString;
              id v28 = [v16 label];
              id v29 = [v27 stringWithFormat:@"%@ [%@] %@", v24, v28, v19];
              [v18 addObject:v29];

              [*(id *)(a1 + 88) addObject:v18];
            }
          }
          uint64_t v14 = [obj countByEnumeratingWithState:&v39 objects:v44 count:16];
        }
        while (v14);
      }

      id v6 = v35;
      id v5 = v36;
      id v8 = v33;
      id v7 = v34;
      id v10 = v31;
      id v9 = v32;
      id v11 = v30;
      id v12 = 0;
    }
  }
}

uint64_t boost::archive::archive_exception::append(boost::archive::archive_exception *this, uint64_t a2, char *a3)
{
  if (a2 <= 0x7E)
  {
    a2 = a2;
    while (1)
    {
      char v3 = *a3;
      if (!*a3) {
        break;
      }
      ++a3;
      *((unsigned char *)this + a2++ + 8) = v3;
      if (a2 == 127)
      {
        a2 = 127;
        break;
      }
    }
  }
  *((unsigned char *)this + a2 + 8) = 0;
  return a2;
}

uint64_t boost::archive::archive_exception::archive_exception(uint64_t result, uint64_t *a2, int a3, const char *a4, const char *a5)
{
  uint64_t v5 = *a2;
  *(void *)__n128 result = *a2;
  *(void *)(result + *(void *)(v5 - 40)) = a2[1];
  *(_DWORD *)(result + 136) = a3;
  switch(a3)
  {
    case 0:
      uint64_t v6 = 0;
      uint64_t v7 = 23;
      do
      {
        *(unsigned char *)(result + 8 + v6) = aUninitializedE[v6];
        ++v6;
      }
      while (v6 != 23);
      goto LABEL_115;
    case 1:
      uint64_t v9 = 0;
      uint64_t v7 = 25;
      do
      {
        *(unsigned char *)(result + 8 + v9) = aUnknownDerived[v9];
        ++v9;
      }
      while (v9 != 25);
      goto LABEL_115;
    case 2:
      for (uint64_t i = 0; i != 18; ++i)
        *(unsigned char *)(result + 8 + i) = aUnregisteredCl[i];
      *(unsigned char *)(result + 26) = 0;
      if (!a4) {
        return result;
      }
      uint64_t v11 = 0;
      *(_DWORD *)(result + 26) = 2108704;
      uint64_t v7 = 127;
      while (a4[v11])
      {
        *(unsigned char *)(result + 29 + v11) = a4[v11];
        BOOL v12 = v11++ == 105;
        if (v12) {
          goto LABEL_115;
        }
      }
      uint64_t v7 = (v11 + 21);
      goto LABEL_115;
    case 3:
      uint64_t v13 = 0;
      uint64_t v7 = 17;
      do
      {
        *(unsigned char *)(result + 8 + v13) = aInvalidSignatu[v13];
        ++v13;
      }
      while (v13 != 17);
      goto LABEL_115;
    case 4:
      uint64_t v14 = 0;
      uint64_t v7 = 19;
      do
      {
        *(unsigned char *)(result + 8 + v14) = aUnsupportedVer[v14];
        ++v14;
      }
      while (v14 != 19);
      goto LABEL_115;
    case 5:
      uint64_t v15 = 0;
      uint64_t v7 = 16;
      do
      {
        *(unsigned char *)(result + 8 + v15) = aPointerConflic[v15];
        ++v15;
      }
      while (v15 != 16);
      goto LABEL_115;
    case 6:
      for (uint64_t j = 0; j != 26; ++j)
        *(unsigned char *)(result + 8 + j) = aIncompatibleNa[j];
      *(unsigned char *)(result + 34) = 0;
      if (!a4) {
        return result;
      }
      uint64_t v17 = 0;
      *(_DWORD *)(result + 34) = 2108704;
      uint64_t v7 = 127;
      while (a4[v17])
      {
        *(unsigned char *)(result + 37 + v17) = a4[v17];
        BOOL v12 = v17++ == 97;
        if (v12) {
          goto LABEL_115;
        }
      }
      uint64_t v7 = v17 + 29;
      goto LABEL_115;
    case 7:
      uint64_t v18 = 0;
      uint64_t v7 = 20;
      do
      {
        *(unsigned char *)(result + 8 + v18) = aArraySizeTooSh[v18];
        ++v18;
      }
      while (v18 != 20);
      goto LABEL_115;
    case 8:
      for (uint64_t k = 0; k != 18; ++k)
        *(unsigned char *)(result + 8 + k) = aInputStreamErr[k];
      *(unsigned char *)(result + 26) = 0;
      if (!a4)
      {
        if (!a5) {
          return result;
        }
        LODWORD(v7) = 18;
        goto LABEL_101;
      }
      uint64_t v7 = 0;
      *(_WORD *)(result + 26) = 45;
      while (a4[v7])
      {
        *(unsigned char *)(result + 27 + v7) = a4[v7];
        BOOL v12 = v7++ == 107;
        if (v12)
        {
          LODWORD(v7) = 127;
          goto LABEL_99;
        }
      }
      LODWORD(v7) = v7 + 19;
LABEL_99:
      *(unsigned char *)(result + v7 + 8) = 0;
      if (!a5) {
        return result;
      }
      if (v7 > 0x7E) {
        goto LABEL_113;
      }
LABEL_101:
      uint64_t v34 = 0;
      uint64_t v35 = v7;
      uint64_t v36 = result + v7 + 8;
      while (v34 != 1)
      {
        int v37 = v35 + v34;
        *(unsigned char *)(v36 + v34) = asc_258FBCF98[v34];
        ++v34;
        if (v37 == 126) {
          goto LABEL_112;
        }
      }
      LODWORD(v7) = v35 + 1;
      *(unsigned char *)(v35 + 1 + result + 8) = 0;
      if ((v35 + 1) >= 0x7F) {
        goto LABEL_114;
      }
      uint64_t v41 = 0;
      do
      {
        if (!a5[v41]) {
          goto LABEL_135;
        }
        int v42 = v7 + v41;
        *(unsigned char *)(v35 + result + 8 + v41 + 1) = a5[v41];
        ++v41;
      }
      while (v42 != 126);
      goto LABEL_134;
    case 9:
      uint64_t v20 = 0;
      uint64_t v7 = 19;
      do
      {
        *(unsigned char *)(result + 8 + v20) = aClassNameTooLo[v20];
        ++v20;
      }
      while (v20 != 19);
      goto LABEL_115;
    case 10:
      for (uint64_t m = 0; m != 23; ++m)
        *(unsigned char *)(result + 8 + m) = aUnregisteredVo[m];
      uint64_t v22 = 0;
      *(unsigned char *)(result + 31) = 0;
      unint64_t v23 = "?";
      if (a4) {
        id v24 = a4;
      }
      else {
        id v24 = "?";
      }
      while (v24[v22])
      {
        *(unsigned char *)(result + 31 + v22) = v24[v22];
        BOOL v12 = v22++ == 103;
        if (v12)
        {
          *(unsigned char *)(result + 135) = 0;
LABEL_112:
          LODWORD(v7) = 127;
          goto LABEL_113;
        }
      }
      LODWORD(v7) = v22 + 23;
      *(unsigned char *)(result + (v22 + 23) + 8) = 0;
      if ((v22 + 23) >= 0x7F)
      {
LABEL_113:
        *(unsigned char *)(result + v7 + 8) = 0;
        goto LABEL_114;
      }
      uint64_t v32 = 0;
      while (v32 != 2)
      {
        int v33 = v7 + v32;
        *(unsigned char *)(result + v7 + 8 + v32) = asc_258FBDAA4[v32];
        ++v32;
        if (v33 == 126) {
          goto LABEL_112;
        }
      }
      *(unsigned char *)(result + (v22 + 25) + 8) = 0;
      if ((v22 + 25) >= 0x7F)
      {
        LODWORD(v7) = v22 + 25;
      }
      else
      {
        if (a5) {
          unint64_t v23 = a5;
        }
        uint64_t v7 = (v22 + 25);
        uint64_t v44 = v7 + 8;
        while (1)
        {
          char v45 = *v23;
          if (!*v23) {
            break;
          }
          ++v23;
          *(unsigned char *)(result + v44) = v45;
          LODWORD(v7) = v7 + 1;
          BOOL v12 = v44++ == 134;
          if (v12)
          {
LABEL_134:
            LODWORD(v7) = 127;
            goto LABEL_114;
          }
        }
      }
      goto LABEL_114;
    case 11:
      for (uint64_t n = 0; n != 14; ++n)
        *(unsigned char *)(result + 8 + n) = aClassVersion[n];
      uint64_t v26 = 0;
      *(unsigned char *)(result + 22) = 0;
      if (a4) {
        id v27 = a4;
      }
      else {
        id v27 = "<unknown class>";
      }
      unsigned int v28 = 127;
      while (v27[v26])
      {
        *(unsigned char *)(result + 22 + v26) = v27[v26];
        BOOL v12 = v26++ == 112;
        if (v12) {
          goto LABEL_91;
        }
      }
      unsigned int v28 = v26 + 14;
LABEL_91:
      uint64_t v7 = v28;
      goto LABEL_115;
    case 12:
      for (iuint64_t i = 0; ii != 41; ++ii)
        *(unsigned char *)(result + 8 + ii) = aCodeInstantiat[ii];
      *(unsigned char *)(result + 49) = 0;
      if (!a4) {
        return result;
      }
      uint64_t v30 = 0;
      *(_DWORD *)(result + 49) = 2108704;
      uint64_t v7 = 127;
      while (a4[v30])
      {
        *(unsigned char *)(result + 52 + v30) = a4[v30];
        BOOL v12 = v30++ == 82;
        if (v12) {
          goto LABEL_115;
        }
      }
      uint64_t v7 = v30 + 44;
      goto LABEL_115;
    case 13:
      for (juint64_t j = 0; jj != 19; ++jj)
        *(unsigned char *)(result + 8 + jj) = aOutputStreamEr[jj];
      *(unsigned char *)(result + 27) = 0;
      if (!a4)
      {
        if (!a5) {
          return result;
        }
        LODWORD(v7) = 19;
        goto LABEL_109;
      }
      uint64_t v7 = 0;
      *(_WORD *)(result + 27) = 45;
      break;
    default:
      uint64_t v8 = 0;
      uint64_t v7 = 17;
      do
      {
        *(unsigned char *)(result + 8 + v8) = aProgrammingErr[v8];
        ++v8;
      }
      while (v8 != 17);
      goto LABEL_115;
  }
  while (a4[v7])
  {
    *(unsigned char *)(result + 28 + v7) = a4[v7];
    BOOL v12 = v7++ == 106;
    if (v12)
    {
      LODWORD(v7) = 127;
      goto LABEL_107;
    }
  }
  LODWORD(v7) = v7 + 20;
LABEL_107:
  *(unsigned char *)(result + v7 + 8) = 0;
  if (!a5) {
    return result;
  }
  if (v7 > 0x7E) {
    goto LABEL_113;
  }
LABEL_109:
  uint64_t v38 = 0;
  uint64_t v35 = v7;
  uint64_t v39 = result + v7 + 8;
  while (v38 != 1)
  {
    int v40 = v35 + v38;
    *(unsigned char *)(v39 + v38) = asc_258FBCF98[v38];
    ++v38;
    if (v40 == 126) {
      goto LABEL_112;
    }
  }
  LODWORD(v7) = v35 + 1;
  *(unsigned char *)(v35 + 1 + result + 8) = 0;
  if ((v35 + 1) < 0x7F)
  {
    uint64_t v41 = 0;
    while (a5[v41])
    {
      int v43 = v7 + v41;
      *(unsigned char *)(v35 + result + 8 + v41 + 1) = a5[v41];
      ++v41;
      if (v43 == 126) {
        goto LABEL_134;
      }
    }
LABEL_135:
    LODWORD(v7) = v35 + 1 + v41;
  }
LABEL_114:
  uint64_t v7 = v7;
LABEL_115:
  *(unsigned char *)(result + v7 + 8) = 0;
  return result;
}

uint64_t boost::archive::archive_exception::archive_exception(uint64_t result, int a2, const char *a3, const char *a4)
{
  *(void *)__n128 result = &unk_2707050C0;
  *(_DWORD *)(result + 136) = a2;
  switch(a2)
  {
    case 0:
      uint64_t v4 = 0;
      uint64_t v5 = 23;
      do
      {
        *(unsigned char *)(result + 8 + v4) = aUninitializedE[v4];
        ++v4;
      }
      while (v4 != 23);
      goto LABEL_115;
    case 1:
      uint64_t v7 = 0;
      uint64_t v5 = 25;
      do
      {
        *(unsigned char *)(result + 8 + v7) = aUnknownDerived[v7];
        ++v7;
      }
      while (v7 != 25);
      goto LABEL_115;
    case 2:
      for (uint64_t i = 0; i != 18; ++i)
        *(unsigned char *)(result + 8 + i) = aUnregisteredCl[i];
      *(unsigned char *)(result + 26) = 0;
      if (!a3) {
        return result;
      }
      uint64_t v9 = 0;
      *(_DWORD *)(result + 26) = 2108704;
      uint64_t v5 = 127;
      while (a3[v9])
      {
        *(unsigned char *)(result + 29 + v9) = a3[v9];
        BOOL v10 = v9++ == 105;
        if (v10) {
          goto LABEL_115;
        }
      }
      uint64_t v5 = (v9 + 21);
      goto LABEL_115;
    case 3:
      uint64_t v11 = 0;
      uint64_t v5 = 17;
      do
      {
        *(unsigned char *)(result + 8 + v11) = aInvalidSignatu[v11];
        ++v11;
      }
      while (v11 != 17);
      goto LABEL_115;
    case 4:
      uint64_t v12 = 0;
      uint64_t v5 = 19;
      do
      {
        *(unsigned char *)(result + 8 + v12) = aUnsupportedVer[v12];
        ++v12;
      }
      while (v12 != 19);
      goto LABEL_115;
    case 5:
      uint64_t v13 = 0;
      uint64_t v5 = 16;
      do
      {
        *(unsigned char *)(result + 8 + v13) = aPointerConflic[v13];
        ++v13;
      }
      while (v13 != 16);
      goto LABEL_115;
    case 6:
      for (uint64_t j = 0; j != 26; ++j)
        *(unsigned char *)(result + 8 + j) = aIncompatibleNa[j];
      *(unsigned char *)(result + 34) = 0;
      if (!a3) {
        return result;
      }
      uint64_t v15 = 0;
      *(_DWORD *)(result + 34) = 2108704;
      uint64_t v5 = 127;
      while (a3[v15])
      {
        *(unsigned char *)(result + 37 + v15) = a3[v15];
        BOOL v10 = v15++ == 97;
        if (v10) {
          goto LABEL_115;
        }
      }
      uint64_t v5 = v15 + 29;
      goto LABEL_115;
    case 7:
      uint64_t v16 = 0;
      uint64_t v5 = 20;
      do
      {
        *(unsigned char *)(result + 8 + v16) = aArraySizeTooSh[v16];
        ++v16;
      }
      while (v16 != 20);
      goto LABEL_115;
    case 8:
      for (uint64_t k = 0; k != 18; ++k)
        *(unsigned char *)(result + 8 + k) = aInputStreamErr[k];
      *(unsigned char *)(result + 26) = 0;
      if (!a3)
      {
        if (!a4) {
          return result;
        }
        LODWORD(v5) = 18;
        goto LABEL_101;
      }
      uint64_t v5 = 0;
      *(_WORD *)(result + 26) = 45;
      while (a3[v5])
      {
        *(unsigned char *)(result + 27 + v5) = a3[v5];
        BOOL v10 = v5++ == 107;
        if (v10)
        {
          LODWORD(v5) = 127;
          goto LABEL_99;
        }
      }
      LODWORD(v5) = v5 + 19;
LABEL_99:
      *(unsigned char *)(result + v5 + 8) = 0;
      if (!a4) {
        return result;
      }
      if (v5 > 0x7E) {
        goto LABEL_113;
      }
LABEL_101:
      uint64_t v32 = 0;
      uint64_t v33 = v5;
      uint64_t v34 = result + v5 + 8;
      while (v32 != 1)
      {
        int v35 = v33 + v32;
        *(unsigned char *)(v34 + v32) = asc_258FBCF98[v32];
        ++v32;
        if (v35 == 126) {
          goto LABEL_112;
        }
      }
      LODWORD(v5) = v33 + 1;
      *(unsigned char *)(v33 + 1 + result + 8) = 0;
      if ((v33 + 1) >= 0x7F) {
        goto LABEL_114;
      }
      uint64_t v39 = 0;
      do
      {
        if (!a4[v39]) {
          goto LABEL_135;
        }
        int v40 = v5 + v39;
        *(unsigned char *)(v33 + result + 8 + v39 + 1) = a4[v39];
        ++v39;
      }
      while (v40 != 126);
      goto LABEL_134;
    case 9:
      uint64_t v18 = 0;
      uint64_t v5 = 19;
      do
      {
        *(unsigned char *)(result + 8 + v18) = aClassNameTooLo[v18];
        ++v18;
      }
      while (v18 != 19);
      goto LABEL_115;
    case 10:
      for (uint64_t m = 0; m != 23; ++m)
        *(unsigned char *)(result + 8 + m) = aUnregisteredVo[m];
      uint64_t v20 = 0;
      *(unsigned char *)(result + 31) = 0;
      unint64_t v21 = "?";
      if (a3) {
        uint64_t v22 = a3;
      }
      else {
        uint64_t v22 = "?";
      }
      while (v22[v20])
      {
        *(unsigned char *)(result + 31 + v20) = v22[v20];
        BOOL v10 = v20++ == 103;
        if (v10)
        {
          *(unsigned char *)(result + 135) = 0;
LABEL_112:
          LODWORD(v5) = 127;
          goto LABEL_113;
        }
      }
      LODWORD(v5) = v20 + 23;
      *(unsigned char *)(result + (v20 + 23) + 8) = 0;
      if ((v20 + 23) >= 0x7F)
      {
LABEL_113:
        *(unsigned char *)(result + v5 + 8) = 0;
        goto LABEL_114;
      }
      uint64_t v30 = 0;
      while (v30 != 2)
      {
        int v31 = v5 + v30;
        *(unsigned char *)(result + v5 + 8 + v30) = asc_258FBDAA4[v30];
        ++v30;
        if (v31 == 126) {
          goto LABEL_112;
        }
      }
      *(unsigned char *)(result + (v20 + 25) + 8) = 0;
      if ((v20 + 25) >= 0x7F)
      {
        LODWORD(v5) = v20 + 25;
      }
      else
      {
        if (a4) {
          unint64_t v21 = a4;
        }
        uint64_t v5 = (v20 + 25);
        uint64_t v42 = v5 + 8;
        while (1)
        {
          char v43 = *v21;
          if (!*v21) {
            break;
          }
          ++v21;
          *(unsigned char *)(result + v42) = v43;
          LODWORD(v5) = v5 + 1;
          BOOL v10 = v42++ == 134;
          if (v10)
          {
LABEL_134:
            LODWORD(v5) = 127;
            goto LABEL_114;
          }
        }
      }
      goto LABEL_114;
    case 11:
      for (uint64_t n = 0; n != 14; ++n)
        *(unsigned char *)(result + 8 + n) = aClassVersion[n];
      uint64_t v24 = 0;
      *(unsigned char *)(result + 22) = 0;
      if (a3) {
        uint64_t v25 = a3;
      }
      else {
        uint64_t v25 = "<unknown class>";
      }
      unsigned int v26 = 127;
      while (v25[v24])
      {
        *(unsigned char *)(result + 22 + v24) = v25[v24];
        BOOL v10 = v24++ == 112;
        if (v10) {
          goto LABEL_91;
        }
      }
      unsigned int v26 = v24 + 14;
LABEL_91:
      uint64_t v5 = v26;
      goto LABEL_115;
    case 12:
      for (iuint64_t i = 0; ii != 41; ++ii)
        *(unsigned char *)(result + 8 + ii) = aCodeInstantiat[ii];
      *(unsigned char *)(result + 49) = 0;
      if (!a3) {
        return result;
      }
      uint64_t v28 = 0;
      *(_DWORD *)(result + 49) = 2108704;
      uint64_t v5 = 127;
      while (a3[v28])
      {
        *(unsigned char *)(result + 52 + v28) = a3[v28];
        BOOL v10 = v28++ == 82;
        if (v10) {
          goto LABEL_115;
        }
      }
      uint64_t v5 = v28 + 44;
      goto LABEL_115;
    case 13:
      for (juint64_t j = 0; jj != 19; ++jj)
        *(unsigned char *)(result + 8 + jj) = aOutputStreamEr[jj];
      *(unsigned char *)(result + 27) = 0;
      if (!a3)
      {
        if (!a4) {
          return result;
        }
        LODWORD(v5) = 19;
        goto LABEL_109;
      }
      uint64_t v5 = 0;
      *(_WORD *)(result + 27) = 45;
      break;
    default:
      uint64_t v6 = 0;
      uint64_t v5 = 17;
      do
      {
        *(unsigned char *)(result + 8 + v6) = aProgrammingErr[v6];
        ++v6;
      }
      while (v6 != 17);
      goto LABEL_115;
  }
  while (a3[v5])
  {
    *(unsigned char *)(result + 28 + v5) = a3[v5];
    BOOL v10 = v5++ == 106;
    if (v10)
    {
      LODWORD(v5) = 127;
      goto LABEL_107;
    }
  }
  LODWORD(v5) = v5 + 20;
LABEL_107:
  *(unsigned char *)(result + v5 + 8) = 0;
  if (!a4) {
    return result;
  }
  if (v5 > 0x7E) {
    goto LABEL_113;
  }
LABEL_109:
  uint64_t v36 = 0;
  uint64_t v33 = v5;
  uint64_t v37 = result + v5 + 8;
  while (v36 != 1)
  {
    int v38 = v33 + v36;
    *(unsigned char *)(v37 + v36) = asc_258FBCF98[v36];
    ++v36;
    if (v38 == 126) {
      goto LABEL_112;
    }
  }
  LODWORD(v5) = v33 + 1;
  *(unsigned char *)(v33 + 1 + result + 8) = 0;
  if ((v33 + 1) < 0x7F)
  {
    uint64_t v39 = 0;
    while (a4[v39])
    {
      int v41 = v5 + v39;
      *(unsigned char *)(v33 + result + 8 + v39 + 1) = a4[v39];
      ++v39;
      if (v41 == 126) {
        goto LABEL_134;
      }
    }
LABEL_135:
    LODWORD(v5) = v33 + 1 + v39;
  }
LABEL_114:
  uint64_t v5 = v5;
LABEL_115:
  *(unsigned char *)(result + v5 + 8) = 0;
  return result;
}

__n128 boost::archive::archive_exception::archive_exception(boost::archive::archive_exception *this, const boost::archive::archive_exception *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)a2;
  *(void *)this = *(void *)a2;
  *(void *)((char *)this + *(void *)(v3 - 40)) = *((void *)a2 + 1);
  *((_DWORD *)this + 34) = *(_DWORD *)(a3 + 136);
  long long v4 = *(_OWORD *)(a3 + 8);
  long long v5 = *(_OWORD *)(a3 + 24);
  long long v6 = *(_OWORD *)(a3 + 40);
  *(_OWORD *)((char *)this + 56) = *(_OWORD *)(a3 + 56);
  *(_OWORD *)((char *)this + 40) = v6;
  *(_OWORD *)((char *)this + 24) = v5;
  *(_OWORD *)((char *)this + 8) = v4;
  __n128 result = *(__n128 *)(a3 + 72);
  long long v8 = *(_OWORD *)(a3 + 88);
  long long v9 = *(_OWORD *)(a3 + 104);
  *(_OWORD *)((char *)this + 120) = *(_OWORD *)(a3 + 120);
  *(_OWORD *)((char *)this + 104) = v9;
  *(_OWORD *)((char *)this + 88) = v8;
  *(__n128 *)((char *)this + 72) = result;
  return result;
}

__n128 boost::archive::archive_exception::archive_exception(boost::archive::archive_exception *this, const boost::archive::archive_exception *a2)
{
  *(void *)this = &unk_2707050C0;
  *((_DWORD *)this + 34) = *((_DWORD *)a2 + 34);
  long long v2 = *(_OWORD *)((char *)a2 + 8);
  long long v3 = *(_OWORD *)((char *)a2 + 24);
  long long v4 = *(_OWORD *)((char *)a2 + 40);
  *(_OWORD *)((char *)this + 56) = *(_OWORD *)((char *)a2 + 56);
  *(_OWORD *)((char *)this + 40) = v4;
  *(_OWORD *)((char *)this + 24) = v3;
  *(_OWORD *)((char *)this + 8) = v2;
  __n128 result = *(__n128 *)((char *)a2 + 72);
  long long v6 = *(_OWORD *)((char *)a2 + 88);
  long long v7 = *(_OWORD *)((char *)a2 + 104);
  *(_OWORD *)((char *)this + 120) = *(_OWORD *)((char *)a2 + 120);
  *(_OWORD *)((char *)this + 104) = v7;
  *(_OWORD *)((char *)this + 88) = v6;
  *(__n128 *)((char *)this + 72) = result;
  return result;
}

void virtual thunk to'boost::archive::archive_exception::~archive_exception(boost::archive::archive_exception *this)
{
}

{
  void *v1;
  uint64_t vars8;

  std::exception::~exception((std::exception *)((char *)this + *(void *)(*(void *)this - 24)));
  operator delete(v1);
}

void boost::archive::archive_exception::~archive_exception(std::exception *this)
{
  std::exception::~exception(this);
  operator delete(v1);
}

uint64_t boost::archive::archive_exception::what(boost::archive::archive_exception *this)
{
  return (uint64_t)this + 8;
}

uint64_t virtual thunk to'boost::archive::archive_exception::what(boost::archive::archive_exception *this)
{
  return (uint64_t)this + *(void *)(*(void *)this - 32) + 8;
}

uint64_t boost::archive::archive_exception::archive_exception(uint64_t this, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(void *)this = *a2;
  *(void *)(this + *(void *)(v2 - 40)) = a2[1];
  *(_DWORD *)(this + 136) = 0;
  return this;
}

uint64_t boost::archive::archive_exception::archive_exception(uint64_t this)
{
  *(void *)this = &unk_2707050C0;
  *(_DWORD *)(this + 136) = 0;
  return this;
}

const char *boost::archive::BOOST_ARCHIVE_SIGNATURE(boost::archive *this)
{
  return "serialization::archive";
}

void boost::archive::BOOST_ARCHIVE_VERSION(_WORD *a1@<X8>)
{
  *a1 = 19;
}

void *boost::archive::detail::basic_iarchive_impl::load_preamble(void *result, uint64_t a2, unsigned char *a3)
{
  if (!a3[21])
  {
    long long v5 = result;
    if ((*(unsigned int (**)(void))(**(void **)a3 + 24))())
    {
      HIWORD(v6) = 0;
      (*(void (**)(uint64_t, char *))(*(void *)a2 + 24))(a2, (char *)&v6 + 6);
      (*(void (**)(uint64_t, unsigned char *))(*(void *)a2 + 40))(a2, a3 + 20);
      __n128 result = (void *)(**(uint64_t (***)(uint64_t, uint64_t))a2)(a2, (uint64_t)(a3 + 16));
    }
    else
    {
      a3[20] = (*(uint64_t (**)(void, void))(**(void **)a3 + 32))(*(void *)a3, *((unsigned int *)v5 + 1));
      __n128 result = (*(void *(**)(uint64_t *__return_ptr))(**(void **)a3 + 40))(&v6);
      *((_DWORD *)a3 + 4) = v6;
    }
    a3[21] = 1;
  }
  return result;
}

BOOL boost::archive::detail::basic_iarchive_impl::track(uint64_t a1, uint64_t a2, void *a3)
{
  unsigned int v9 = 0;
  (*(void (**)(uint64_t, unsigned int *))(*(void *)a2 + 8))(a2, &v9);
  uint64_t v5 = *(void *)(a1 + 8);
  unint64_t v6 = (unint64_t)(*(void *)(a1 + 16) - v5) >> 4;
  unsigned int v7 = v9;
  if (v9 < v6) {
    *a3 = *(void *)(v5 + 16 * v9);
  }
  return v7 >= v6;
}

uint64_t boost::archive::detail::basic_iarchive::next_object_pointer(uint64_t this, void *a2)
{
  *(void *)(*(void *)(this + 32) + 96) = a2;
  return this;
}

boost::archive::detail::basic_iarchive *boost::archive::detail::basic_iarchive::basic_iarchive(boost::archive::detail::basic_iarchive *this, int a2)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *(void *)this = &unk_270705120;
  long long v4 = (char *)operator new(0x78uLL);
  boost::archive::BOOST_ARCHIVE_VERSION(v4);
  *((_DWORD *)v4 + 1) = a2;
  *((void *)v4 + 8) = 0;
  *((void *)v4 + 7) = 0;
  *(_OWORD *)(v4 + 8) = 0u;
  *(_OWORD *)(v4 + 24) = 0u;
  *(void *)(v4 + 37) = 0;
  *((void *)v4 + 6) = v4 + 56;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 100) = 0u;
  *((void *)this + 4) = v4;
  return this;
}

void sub_258FA1934(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  operator delete(v10);
  std::vector<std::pair<void const*,boost::shared_ptr<void>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  _Unwind_Resume(a1);
}

void boost::archive::detail::basic_iarchive::~basic_iarchive(boost::archive::detail::basic_iarchive *this)
{
  *(void *)this = &unk_270705120;
  unint64_t v1 = (void **)((char *)this + 8);
  boost::scoped_ptr<boost::archive::detail::basic_iarchive_impl>::~scoped_ptr((uint64_t *)this + 4);
  uint64_t v2 = v1;
  std::vector<std::pair<void const*,boost::shared_ptr<void>>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

uint64_t boost::archive::detail::basic_iarchive::set_library_version(uint64_t result, _WORD *a2)
{
  **(_WORD **)(result + 32) = *a2;
  return result;
}

uint64_t boost::archive::detail::basic_iarchive::reset_object_address(uint64_t this, unsigned char *a2, unsigned char *a3)
{
  uint64_t v3 = *(void *)(this + 32);
  if (!*(unsigned char *)(v3 + 44))
  {
    uint64_t v5 = *(unsigned int *)(v3 + 36);
    uint64_t v4 = *(unsigned int *)(v3 + 40);
    if (v4 < v5)
    {
      for (uint64_t i = (const void **)(*(void *)(v3 + 8) + 16 * v4); *i != a3; i += 2)
      {
        if (v5 == ++v4) {
          return this;
        }
      }
    }
    if (v4 < v5)
    {
      uint64_t v7 = *(void *)(v3 + 8) + 16 * v4;
      uint64_t v8 = v5 - v4;
      do
      {
        if (!*(unsigned char *)(v7 + 8)) {
          *(void *)v7 += a2 - a3;
        }
        v7 += 16;
        --v8;
      }
      while (v8);
    }
  }
  return this;
}

uint64_t boost::archive::detail::basic_iarchive::load_object(boost::archive::detail::basic_iarchive_impl **this, unint64_t a2, const boost::archive::detail::basic_iserializer *a3)
{
  return boost::archive::detail::basic_iarchive_impl::load_object(this[4], (boost::archive::detail::basic_iarchive *)this, a2, a3);
}

uint64_t boost::archive::detail::basic_iarchive_impl::load_object(boost::archive::detail::basic_iarchive_impl *this, boost::archive::detail::basic_iarchive *a2, unint64_t a3, const boost::archive::detail::basic_iserializer *a4)
{
  unint64_t v5 = a3;
  unint64_t v36 = a3;
  *((unsigned char *)this + 44) = 0;
  if (*((_OWORD *)this + 6) != __PAIR128__((unint64_t)a4, a3))
  {
    uint64_t v8 = *((void *)this + 8);
    uint64_t v39 = a4;
    __int16 v40 = v8;
    unsigned int v9 = std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::__emplace_unique_key_args<boost::archive::detail::basic_iarchive_impl::cobject_type,boost::archive::detail::basic_iarchive_impl::cobject_type const&>((uint64_t **)this + 6, (uint64_t)&v39, (uint64_t)&v39);
    if (v10)
    {
      uint64_t v37 = a4;
      v38[0] = 0;
      *(void *)((char *)v38 + 6) = 0;
      uint64_t v11 = (void *)*((void *)this + 10);
      if ((unint64_t)v11 >= *((void *)this + 11))
      {
        uint64_t v12 = std::vector<boost::archive::detail::basic_iarchive_impl::cobject_id>::__push_back_slow_path<boost::archive::detail::basic_iarchive_impl::cobject_id>((uint64_t *)this + 9, (uint64_t)&v37);
      }
      else
      {
        uint64_t v12 = (uint64_t)(v11 + 3);
        *uint64_t v11 = a4;
        v11[1] = 0;
        *(void *)((char *)v11 + 14) = 0;
      }
      *((void *)this + 10) = v12;
    }
    int v13 = *((__int16 *)v9 + 20);
    uint64_t v14 = *((void *)this + 9);
    uint64_t v15 = v14 + 24 * *((__int16 *)v9 + 20);
    *(void *)(v15 + 8) = *((void *)a4 + 2);
    boost::archive::detail::basic_iarchive_impl::load_preamble(this, (uint64_t)a2, (unsigned char *)v15);
    uint64_t v16 = (uint64_t *)((char *)this + 8);
    int v17 = *((_DWORD *)this + 8);
    int v18 = *(unsigned __int8 *)(v14 + 24 * v13 + 20);
    uint64_t v19 = (*((void *)this + 2) - *((void *)this + 1)) >> 4;
    *((_DWORD *)this + 8) = v19;
    if (v18)
    {
      uint64_t result = boost::archive::detail::basic_iarchive_impl::track((uint64_t)this, (uint64_t)a2, &v36);
      if ((result & 1) == 0)
      {
LABEL_25:
        *((_DWORD *)this + 8) = v17;
        goto LABEL_26;
      }
      unint64_t v5 = v36;
      unint64_t v20 = *((void *)this + 3);
      unint64_t v21 = *((void *)this + 2);
      if (v21 >= v20)
      {
        uint64_t v24 = (uint64_t)(v21 - *v16) >> 4;
        unint64_t v25 = v24 + 1;
        if ((unint64_t)(v24 + 1) >> 60) {
          std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v26 = v20 - *v16;
        if (v26 >> 3 > v25) {
          unint64_t v25 = v26 >> 3;
        }
        if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v27 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v27 = v25;
        }
        uint64_t v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<double,double>>>((uint64_t)this + 24, v27);
        id v29 = &v28[16 * v24];
        int v31 = &v28[16 * v30];
        *(void *)id v29 = v5;
        v29[8] = 0;
        *((_WORD *)v29 + 5) = v13;
        uint64_t v22 = v29 + 16;
        uint64_t v33 = *((void *)this + 1);
        uint64_t v32 = *((void *)this + 2);
        if (v32 != v33)
        {
          do
          {
            uint64_t v34 = *(void *)(v32 - 16);
            v32 -= 16;
            char v35 = *(unsigned char *)(v32 + 8);
            *((void *)v29 - 2) = v34;
            v29 -= 16;
            v29[8] = v35;
            *((_WORD *)v29 + 5) = *(_WORD *)(v32 + 10);
          }
          while (v32 != v33);
          uint64_t v32 = *v16;
        }
        *((void *)this + 1) = v29;
        *((void *)this + 2) = v22;
        *((void *)this + 3) = v31;
        if (v32) {
          operator delete((void *)v32);
        }
      }
      else
      {
        *(void *)unint64_t v21 = v36;
        *(unsigned char *)(v21 + 8) = 0;
        uint64_t v22 = (char *)(v21 + 16);
        *(_WORD *)(v21 + 10) = v13;
      }
      *((void *)this + 2) = v22;
      *((_DWORD *)this + 9) = (unint64_t)&v22[-*((void *)this + 1)] >> 4;
    }
    uint64_t result = (*(uint64_t (**)(const boost::archive::detail::basic_iserializer *, boost::archive::detail::basic_iarchive *, unint64_t, void))(*(void *)a4 + 16))(a4, a2, v5, *(unsigned int *)(v14 + 24 * v13 + 16));
    *((_DWORD *)this + 10) = v19;
    goto LABEL_25;
  }
  uint64_t result = (*(uint64_t (**)(const boost::archive::detail::basic_iserializer *, boost::archive::detail::basic_iarchive *, unint64_t, void))(*(void *)a4 + 16))(a4, a2, a3, *((unsigned int *)this + 28));
LABEL_26:
  *((unsigned char *)this + 44) = 0;
  return result;
}

void sub_258FA1D08(_Unwind_Exception *a1)
{
  *(unsigned char *)(v1 + 44) = 0;
  _Unwind_Resume(a1);
}

uint64_t boost::archive::detail::basic_iarchive::load_pointer(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t (*a4)(void))
{
  return boost::archive::detail::basic_iarchive_impl::load_pointer(*(void *)(a1 + 32), a1, a2, a3, a4);
}

uint64_t boost::archive::detail::basic_iarchive_impl::load_pointer(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  *(unsigned char *)(a1 + 44) = 1;
  __int16 v49 = 0;
  (*(void (**)(uint64_t, __int16 *))(*(void *)a2 + 16))(a2, &v49);
  int v10 = v49;
  if (v49 == -1)
  {
    *a3 = 0;
  }
  else
  {
    if (v49 >= *(__int16 *)(a1 + 64))
    {
      if (!a4
        || (uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)a4 + 24))(a4),
            (*(unsigned int (**)(uint64_t))(*(void *)v12 + 48))(v12)))
      {
        uint64_t v48 = &v52;
        (*(void (**)(uint64_t, uint64_t **))(*(void *)a2 + 32))(a2, &v48);
        if (!(_BYTE)v52
          || !boost::serialization::extended_type_info::find((boost::serialization::extended_type_info *)&v52, v13))
        {
          boost::archive::archive_exception::archive_exception((uint64_t)&v50, 2, 0, 0);
          boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)&v50);
        }
        a4 = a5();
      }
      uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)a4 + 24))(a4);
      uint64_t v15 = *(void *)(a1 + 64);
      uint64_t v52 = v14;
      __int16 v53 = v15;
      uint64_t v16 = std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::__emplace_unique_key_args<boost::archive::detail::basic_iarchive_impl::cobject_type,boost::archive::detail::basic_iarchive_impl::cobject_type const&>((uint64_t **)(a1 + 48), (uint64_t)&v52, (uint64_t)&v52);
      if (v17)
      {
        uint64_t v50 = v14;
        v51[0] = 0;
        *(void *)((char *)v51 + 6) = 0;
        int v18 = *(uint64_t **)(a1 + 80);
        if ((unint64_t)v18 >= *(void *)(a1 + 88))
        {
          uint64_t v19 = std::vector<boost::archive::detail::basic_iarchive_impl::cobject_id>::__push_back_slow_path<boost::archive::detail::basic_iarchive_impl::cobject_id>((uint64_t *)(a1 + 72), (uint64_t)&v50);
        }
        else
        {
          uint64_t v19 = (uint64_t)(v18 + 3);
          *int v18 = v14;
          v18[1] = 0;
          *(uint64_t *)((char *)v18 + 14) = 0;
        }
        *(void *)(a1 + 80) = v19;
      }
      uint64_t v11 = *(void *)(a1 + 72);
      *(void *)(v11 + 24 * *((__int16 *)v16 + 20) + 8) = *(void *)(v14 + 16);
      int v10 = v49;
      *(void *)(v11 + 24 * v49 + 8) = a4;
    }
    else
    {
      uint64_t v11 = *(void *)(a1 + 72);
      a4 = *(void *)(v11 + 24 * v49 + 8);
      if (!a4)
      {
        boost::archive::archive_exception::archive_exception((uint64_t)&v50, 2, 0, 0);
        boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)&v50);
      }
    }
    boost::archive::detail::basic_iarchive_impl::load_preamble((void *)a1, a2, (unsigned char *)(v11 + 24 * v10));
    uint64_t v20 = v11 + 24 * v10;
    int v21 = *(unsigned __int8 *)(v20 + 20);
    if (!*(unsigned char *)(v20 + 20) || boost::archive::detail::basic_iarchive_impl::track(a1, a2, a3))
    {
      int v22 = *(_DWORD *)(a1 + 32);
      uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)a4 + 16))(a4);
      *a3 = v23;
      if (v21)
      {
        uint64_t v46 = *(void *)(a1 + 104);
        uint64_t v47 = *(void *)(a1 + 96);
        int v45 = *(_DWORD *)(a1 + 112);
        uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)a4 + 24))(a4);
        uint64_t v25 = *(void *)(a1 + 8);
        *(void *)(a1 + 104) = v24;
        *(_DWORD *)(a1 + 112) = *(_DWORD *)(v11 + 24 * v10 + 16);
        unint64_t v26 = *(void *)(a1 + 16);
        uint64_t v27 = (uint64_t)(v26 - v25) >> 4;
        int v28 = *(_DWORD *)(a1 + 36);
        uint64_t v29 = *a3;
        __int16 v30 = v49;
        unint64_t v31 = *(void *)(a1 + 24);
        if (v26 >= v31)
        {
          unint64_t v33 = v27 + 1;
          if ((unint64_t)(v27 + 1) >> 60) {
            std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v34 = v31 - v25;
          if (v34 >> 3 > v33) {
            unint64_t v33 = v34 >> 3;
          }
          if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v35 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v35 = v33;
          }
          unint64_t v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<double,double>>>(a1 + 24, v35);
          uint64_t v37 = &v36[16 * v27];
          uint64_t v39 = &v36[16 * v38];
          *(void *)uint64_t v37 = v29;
          v37[8] = 0;
          *((_WORD *)v37 + 5) = v30;
          uint64_t v32 = v37 + 16;
          uint64_t v41 = *(void *)(a1 + 8);
          uint64_t v40 = *(void *)(a1 + 16);
          if (v40 != v41)
          {
            do
            {
              uint64_t v42 = *(void *)(v40 - 16);
              v40 -= 16;
              char v43 = *(unsigned char *)(v40 + 8);
              *((void *)v37 - 2) = v42;
              v37 -= 16;
              v37[8] = v43;
              *((_WORD *)v37 + 5) = *(_WORD *)(v40 + 10);
            }
            while (v40 != v41);
            uint64_t v40 = *(void *)(a1 + 8);
          }
          *(void *)(a1 + 8) = v37;
          *(void *)(a1 + 16) = v32;
          *(void *)(a1 + 24) = v39;
          if (v40) {
            operator delete((void *)v40);
          }
        }
        else
        {
          *(void *)unint64_t v26 = v29;
          *(unsigned char *)(v26 + 8) = 0;
          uint64_t v32 = (char *)(v26 + 16);
          *(_WORD *)(v26 + 10) = v30;
        }
        *(void *)(a1 + 16) = v32;
        (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)a4 + 32))(a4, a2, *a3, *(unsigned int *)(a1 + 112));
        *(unsigned char *)(*(void *)(a1 + 8) + 16 * v27 + 8) = 1;
        *(_DWORD *)(a1 + 36) = v28;
        *(_DWORD *)(a1 + 112) = v45;
        *(void *)(a1 + 96) = v47;
        *(void *)(a1 + 104) = v46;
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)a4 + 32))(a4, a2, v23, *(unsigned int *)(v11 + 24 * v10 + 16));
      }
      *(_DWORD *)(a1 + 32) = v22;
    }
  }
  *(unsigned char *)(a1 + 44) = 1;
  return a4;
}

void sub_258FA2200(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::exception a16)
{
  *(unsigned char *)(v16 + 44) = 1;
  _Unwind_Resume(exception_object);
}

void *boost::archive::detail::basic_iarchive::register_basic_serializer(boost::archive::detail::basic_iarchive *this, const boost::archive::detail::basic_iserializer *a2)
{
  uint64_t v3 = *((void *)this + 4);
  uint64_t v4 = *(void *)(v3 + 64);
  uint64_t v11 = a2;
  __int16 v12 = v4;
  uint64_t result = std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::__emplace_unique_key_args<boost::archive::detail::basic_iarchive_impl::cobject_type,boost::archive::detail::basic_iarchive_impl::cobject_type const&>((uint64_t **)(v3 + 48), (uint64_t)&v11, (uint64_t)&v11);
  uint64_t v6 = (uint64_t)result;
  if (v7)
  {
    unsigned int v9 = a2;
    v10[0] = 0;
    *(void *)((char *)v10 + 6) = 0;
    uint64_t v8 = *(void **)(v3 + 80);
    if ((unint64_t)v8 >= *(void *)(v3 + 88))
    {
      uint64_t result = (void *)std::vector<boost::archive::detail::basic_iarchive_impl::cobject_id>::__push_back_slow_path<boost::archive::detail::basic_iarchive_impl::cobject_id>((uint64_t *)(v3 + 72), (uint64_t)&v9);
    }
    else
    {
      uint64_t result = v8 + 3;
      *uint64_t v8 = a2;
      v8[1] = 0;
      *(void *)((char *)v8 + 14) = 0;
    }
    *(void *)(v3 + 80) = result;
  }
  *(void *)(*(void *)(v3 + 72) + 24 * *(__int16 *)(v6 + 40) + 8) = *((void *)a2 + 2);
  return result;
}

uint64_t boost::archive::detail::basic_iarchive::delete_created_pointers(uint64_t this)
{
  uint64_t v1 = *(void **)(this + 32);
  uint64_t v3 = v1[1];
  for (uint64_t i = v1[2]; v3 != i; v3 += 16)
  {
    if (*(unsigned char *)(v3 + 8))
    {
      uint64_t v4 = *(void *)(v1[9] + 24 * *(__int16 *)(v3 + 10));
      this = (*(uint64_t (**)(uint64_t, void))(*(void *)v4 + 56))(v4, *(void *)v3);
      uint64_t i = v1[2];
    }
  }
  return this;
}

uint64_t boost::archive::detail::basic_iarchive::get_library_version@<X0>(uint64_t this@<X0>, _WORD *a2@<X8>)
{
  *a2 = **(_WORD **)(this + 32);
  return this;
}

uint64_t boost::archive::detail::basic_iarchive::get_flags(boost::archive::detail::basic_iarchive *this)
{
  return *(unsigned int *)(*((void *)this + 4) + 4);
}

void std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::destroy(a1, *a2);
    std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

void std::vector<std::pair<void const*,boost::shared_ptr<void>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (atomic_uint **)**a1;
  if (v2)
  {
    uint64_t v4 = (atomic_uint **)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = v4 - 3;
        boost::detail::shared_count::~shared_count(v4 - 1);
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void boost::detail::shared_count::~shared_count(atomic_uint **this)
{
  uint64_t v1 = *this;
  if (v1) {
    boost::detail::sp_counted_base::release(v1);
  }
}

atomic_uint *boost::detail::sp_counted_base::release(atomic_uint *this)
{
  if (atomic_fetch_add(this + 2, 0xFFFFFFFF) == 1)
  {
    uint64_t v1 = this;
    uint64_t v2 = this + 3;
    this = (atomic_uint *)(*(uint64_t (**)(atomic_uint *))(*(void *)this + 16))(this);
    if (atomic_fetch_add(v2, 0xFFFFFFFF) == 1)
    {
      uint64_t v3 = *(uint64_t (**)(atomic_uint *))(*(void *)v1 + 24);
      return (atomic_uint *)v3(v1);
    }
  }
  return this;
}

void *std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::__emplace_unique_key_args<boost::archive::detail::basic_iarchive_impl::cobject_type,boost::archive::detail::basic_iarchive_impl::cobject_type const&>(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = (void **)std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::__find_equal<boost::archive::detail::basic_iarchive_impl::cobject_type>((uint64_t)a1, &v9, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    char v7 = (uint64_t **)v5;
    uint64_t v6 = operator new(0x30uLL);
    void v6[4] = *(void *)a3;
    *((_WORD *)v6 + 20) = *(_WORD *)(a3 + 8);
    std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::__insert_node_at(a1, v9, v7, v6);
  }
  return v6;
}

void *std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::__find_equal<boost::archive::detail::basic_iarchive_impl::cobject_type>(uint64_t a1, void *a2, uint64_t a3)
{
  unint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        char v7 = v4;
        if (!boost::serialization::extended_type_info::operator<(*(void *)(*(void *)a3 + 8), *(void *)(v4[4] + 8)))break; {
        uint64_t v4 = (void *)*v7;
        }
        unint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (!boost::serialization::extended_type_info::operator<(*(void *)(v7[4] + 8), *(void *)(*(void *)a3 + 8)))break; {
      unint64_t v5 = v7 + 1;
      }
      uint64_t v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    char v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t std::vector<boost::archive::detail::basic_iarchive_impl::cobject_id>::__push_back_slow_path<boost::archive::detail::basic_iarchive_impl::cobject_id>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<boost::histogram::axis::variant<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default>,boost::histogram::axis::variable<double,boost::use_default,boost::use_default,std::allocator<double>>,boost::histogram::axis::integer<int,boost::use_default,boost::histogram::axis::option::bit<1u>>>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v19 = a1 + 2;
  int v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  uint64_t v11 = &v10[24 * v4];
  std::string __p = v10;
  uint64_t v16 = v11;
  int v18 = &v10[24 * v12];
  *(_OWORD *)uint64_t v11 = *(_OWORD *)a2;
  *((_DWORD *)v11 + 4) = *(_DWORD *)(a2 + 16);
  *((_WORD *)v11 + 10) = *(_WORD *)(a2 + 20);
  char v17 = v11 + 24;
  std::vector<boost::archive::detail::basic_iarchive_impl::cobject_id>::__swap_out_circular_buffer(a1, &__p);
  uint64_t v13 = a1[1];
  if (v17 != v16) {
    char v17 = &v16[(v17 - v16 - 24) % 0x18uLL];
  }
  if (__p) {
    operator delete(__p);
  }
  return v13;
}

void sub_258FA27D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<boost::archive::detail::basic_iarchive_impl::cobject_id>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 + v5;
      *(_OWORD *)(v6 - 24) = *(_OWORD *)(v2 + v5 - 24);
      *(_DWORD *)(v6 - 8) = *(_DWORD *)(v2 + v5 - 8);
      *(_WORD *)(v6 - 4) = *(_WORD *)(v2 + v5 - 4);
      v5 -= 24;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v7 = *result;
  *uint64_t result = v4;
  a2[1] = v7;
  uint64_t v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t *boost::scoped_ptr<boost::archive::detail::basic_iarchive_impl>::~scoped_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = *(void **)(v2 + 72);
    if (v3)
    {
      *(void *)(v2 + 80) = v3;
      operator delete(v3);
    }
    std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::destroy(v2 + 48, *(void **)(v2 + 56));
    uint64_t v4 = *(void **)(v2 + 8);
    if (v4)
    {
      *(void *)(v2 + 16) = v4;
      operator delete(v4);
    }
    operator delete((void *)v2);
  }
  return a1;
}

void *boost::archive::detail::basic_iserializer::basic_iserializer(void *result, uint64_t a2)
{
  *uint64_t result = &unk_2707051F0;
  result[1] = a2;
  result[2] = 0;
  return result;
}

boost::archive::detail::basic_oarchive *boost::archive::detail::basic_oarchive::basic_oarchive(boost::archive::detail::basic_oarchive *this, int a2)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *(void *)this = &unk_270705290;
  uint64_t v4 = operator new(0x60uLL);
  *(_DWORD *)uint64_t v4 = a2;
  v4[2] = 0;
  v4[1] = v4 + 2;
  v4[5] = 0;
  v4[3] = 0;
  v4[4] = v4 + 5;
  v4[8] = 0;
  v4[6] = 0;
  v4[7] = v4 + 8;
  v4[10] = 0;
  v4[11] = 0;
  v4[9] = 0;
  *((void *)this + 4) = v4;
  return this;
}

void sub_258FA29CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::pair<void const*,boost::shared_ptr<void>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void boost::archive::detail::basic_oarchive::~basic_oarchive(boost::archive::detail::basic_oarchive *this)
{
  *(void *)this = &unk_270705290;
  uint64_t v1 = (void **)((char *)this + 8);
  boost::scoped_ptr<boost::archive::detail::basic_oarchive_impl>::~scoped_ptr((void ***)this + 4);
  uint64_t v2 = v1;
  std::vector<std::pair<void const*,boost::shared_ptr<void>>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

uint64_t boost::archive::detail::basic_oarchive::save_object(boost::archive::detail::basic_oarchive_impl **this, unint64_t a2, const boost::archive::detail::basic_oserializer *a3)
{
  return boost::archive::detail::basic_oarchive_impl::save_object(this[4], (boost::archive::detail::basic_oarchive *)this, a2, a3);
}

uint64_t boost::archive::detail::basic_oarchive_impl::save_object(boost::archive::detail::basic_oarchive_impl *this, boost::archive::detail::basic_oarchive *a2, unint64_t a3, const boost::archive::detail::basic_oserializer *a4)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  if (*((_OWORD *)this + 5) == __PAIR128__((unint64_t)a4, a3))
  {
    int v22 = *(uint64_t (**)(const boost::archive::detail::basic_oserializer *))(*(void *)a4 + 16);
    return v22(a4);
  }
  else
  {
    uint64_t v8 = *((void *)this + 6);
    uint64_t v29 = a4;
    __int16 v30 = v8;
    char v31 = 0;
    uint64_t v9 = std::__tree<boost::archive::detail::basic_oarchive_impl::cobject_type>::__emplace_unique_key_args<boost::archive::detail::basic_oarchive_impl::cobject_type,boost::archive::detail::basic_oarchive_impl::cobject_type const&>((uint64_t **)this + 4, (uint64_t)&v29, (uint64_t)&v29);
    if ((*(unsigned int (**)(const boost::archive::detail::basic_oserializer *))(*(void *)a4 + 24))(a4)
      && !*((unsigned char *)v9 + 42))
    {
      HIWORD(v28) = *((_WORD *)v9 + 20);
      (*(void (**)(boost::archive::detail::basic_oarchive *, char *))(*(void *)a2 + 32))(a2, (char *)&v28 + 6);
      BYTE5(v28) = (*(uint64_t (**)(const boost::archive::detail::basic_oserializer *, void))(*(void *)a4 + 32))(a4, *(unsigned int *)this);
      (*(void (**)(boost::archive::detail::basic_oarchive *, char *))(*(void *)a2 + 56))(a2, (char *)&v28 + 5);
      (*(void (**)(uint64_t *__return_ptr, const boost::archive::detail::basic_oserializer *))(*(void *)a4 + 40))(&v28, a4);
      (**(void (***)(boost::archive::detail::basic_oarchive *, uint64_t *))a2)(a2, &v28);
      *((unsigned char *)v9 + 42) = 1;
    }
    if ((*(uint64_t (**)(const boost::archive::detail::basic_oserializer *, void))(*(void *)a4 + 32))(a4, *(unsigned int *)this))
    {
      uint64_t v10 = *((void *)this + 3);
      __int16 v11 = *((_WORD *)v9 + 20);
      unint64_t v25 = a3;
      __int16 v26 = v11;
      int v27 = v10;
      unsigned int v12 = *((_DWORD *)std::__tree<boost::archive::detail::basic_oarchive_impl::aobject>::__emplace_unique_key_args<boost::archive::detail::basic_oarchive_impl::aobject,boost::archive::detail::basic_oarchive_impl::aobject const&>((uint64_t **)this + 1, &v25, (uint64_t)&v25)+ 11);
      if (v13)
      {
        unsigned int v24 = v12;
        (*(void (**)(boost::archive::detail::basic_oarchive *, unsigned int *))(*(void *)a2 + 8))(a2, &v24);
        return (*(uint64_t (**)(const boost::archive::detail::basic_oserializer *, boost::archive::detail::basic_oarchive *, unint64_t))(*(void *)a4 + 16))(a4, a2, a3);
      }
      else
      {
        char v17 = (char *)*((void *)this + 8);
        uint64_t v16 = (char *)this + 64;
        uint64_t v15 = v17;
        if (v17)
        {
          int v18 = v16;
          do
          {
            unsigned int v19 = *((_DWORD *)v15 + 7);
            BOOL v20 = v19 >= v12;
            if (v19 >= v12) {
              int v21 = (char **)v15;
            }
            else {
              int v21 = (char **)(v15 + 8);
            }
            if (v20) {
              int v18 = v15;
            }
            uint64_t v15 = *v21;
          }
          while (*v21);
          if (v18 != v16 && v12 >= *((_DWORD *)v18 + 7))
          {
            boost::archive::archive_exception::archive_exception((uint64_t)&v29, 5, 0, 0);
            boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)&v29);
          }
        }
        unsigned int v23 = v12;
        return (*(uint64_t (**)(boost::archive::detail::basic_oarchive *, unsigned int *))(*(void *)a2 + 16))(a2, &v23);
      }
    }
    else
    {
      return (*(uint64_t (**)(const boost::archive::detail::basic_oserializer *, boost::archive::detail::basic_oarchive *, unint64_t))(*(void *)a4 + 16))(a4, a2, a3);
    }
  }
}

void sub_258FA2E24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::exception a14)
{
}

uint64_t **boost::archive::detail::basic_oarchive::save_pointer(uint64_t a1, unint64_t a2, uint64_t a3)
{
  return boost::archive::detail::basic_oarchive_impl::save_pointer(*(unsigned int **)(a1 + 32), a1, a2, a3);
}

uint64_t **boost::archive::detail::basic_oarchive_impl::save_pointer(unsigned int *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v8 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a4 + 16))(a4);
  unint64_t v9 = *((void *)a1 + 6);
  __int16 v26 = v8;
  __int16 v27 = v9;
  char v28 = 0;
  uint64_t v10 = std::__tree<boost::archive::detail::basic_oarchive_impl::cobject_type>::__emplace_unique_key_args<boost::archive::detail::basic_oarchive_impl::cobject_type,boost::archive::detail::basic_oarchive_impl::cobject_type const&>((uint64_t **)a1 + 4, (uint64_t)&v26, (uint64_t)&v26);
  if (*((unsigned char *)v10 + 42))
  {
    __int16 v22 = *((_WORD *)v10 + 20);
    (*(void (**)(uint64_t, __int16 *))(*(void *)a2 + 40))(a2, &v22);
  }
  else
  {
    __int16 v25 = *((_WORD *)v10 + 20);
    (*(void (**)(uint64_t, __int16 *))(*(void *)a2 + 24))(a2, &v25);
    if (*((void *)a1 + 6) > v9 && (*(unsigned int (**)(void *))(*v8 + 48))(v8))
    {
      uint64_t v11 = v8[1];
      unsigned int v12 = *(const char **)(v11 + 16);
      if (!v12)
      {
        boost::archive::archive_exception::archive_exception((uint64_t)&v26, 2, 0, 0);
        boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)&v26);
      }
      *(void *)unsigned int v24 = *(void *)(v11 + 16);
      if (strlen(v12) >= 0x80)
      {
        boost::archive::archive_exception::archive_exception((uint64_t)&v26, 9, 0, 0);
        boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)&v26);
      }
      (*(void (**)(uint64_t, unsigned int *))(*(void *)a2 + 48))(a2, v24);
    }
    if ((*(unsigned int (**)(void *))(*v8 + 24))(v8))
    {
      HIBYTE(v23) = (*(uint64_t (**)(void *, void))(*v8 + 32))(v8, *a1);
      (*(void (**)(uint64_t, char *))(*(void *)a2 + 56))(a2, (char *)&v23 + 7);
      (*(void (**)(uint64_t *__return_ptr, void *))(*v8 + 40))(&v23, v8);
      (**(void (***)(uint64_t, uint64_t *))a2)(a2, &v23);
    }
    *((unsigned char *)v10 + 42) = 1;
  }
  if ((*(uint64_t (**)(void *, void))(*v8 + 32))(v8, *a1))
  {
    uint64_t v13 = *((void *)a1 + 3);
    __int16 v14 = *((_WORD *)v10 + 20);
    __int16 v26 = (void *)a3;
    __int16 v27 = v14;
    int v29 = v13;
    unsigned int v15 = *((_DWORD *)std::__tree<boost::archive::detail::basic_oarchive_impl::aobject>::__emplace_unique_key_args<boost::archive::detail::basic_oarchive_impl::aobject,boost::archive::detail::basic_oarchive_impl::aobject const&>((uint64_t **)a1 + 1, (unint64_t *)&v26, (uint64_t)&v26)+ 11);
    v24[0] = v15;
    if (!v16)
    {
      unsigned int v21 = v15;
      return (uint64_t **)(*(uint64_t (**)(uint64_t, unsigned int *))(*(void *)a2 + 16))(a2, &v21);
    }
    unsigned int v20 = v15;
    (*(void (**)(uint64_t, unsigned int *))(*(void *)a2 + 8))(a2, &v20);
    uint64_t v17 = *((void *)a1 + 10);
    uint64_t v18 = *((void *)a1 + 11);
    *((void *)a1 + 10) = a3;
    *((void *)a1 + 11) = (*(uint64_t (**)(uint64_t))(*(void *)a4 + 16))(a4);
    (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)a4 + 24))(a4, a2, a3);
    uint64_t result = std::__tree<boost::archive::object_id_type>::__emplace_unique_key_args<boost::archive::object_id_type,boost::archive::object_id_type const&>((uint64_t **)a1 + 7, v24, v24);
  }
  else
  {
    uint64_t v17 = *((void *)a1 + 10);
    uint64_t v18 = *((void *)a1 + 11);
    *((void *)a1 + 10) = a3;
    *((void *)a1 + 11) = (*(uint64_t (**)(uint64_t))(*(void *)a4 + 16))(a4);
    uint64_t result = (uint64_t **)(*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(void *)a4 + 24))(a4, a2, a3);
  }
  *((void *)a1 + 10) = v17;
  *((void *)a1 + 11) = v18;
  return result;
}

void sub_258FA32D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::exception a14)
{
}

void *boost::archive::detail::basic_oarchive::register_basic_serializer(boost::archive::detail::basic_oarchive *this, const boost::archive::detail::basic_oserializer *a2)
{
  uint64_t v2 = *((void *)this + 4);
  uint64_t v3 = (uint64_t **)(v2 + 32);
  uint64_t v4 = *(void *)(v2 + 48);
  uint64_t v6 = a2;
  __int16 v7 = v4;
  char v8 = 0;
  return std::__tree<boost::archive::detail::basic_oarchive_impl::cobject_type>::__emplace_unique_key_args<boost::archive::detail::basic_oarchive_impl::cobject_type,boost::archive::detail::basic_oarchive_impl::cobject_type const&>(v3, (uint64_t)&v6, (uint64_t)&v6);
}

uint64_t boost::archive::detail::basic_oarchive::get_flags(boost::archive::detail::basic_oarchive *this)
{
  return **((unsigned int **)this + 4);
}

uint64_t boost::archive::detail::basic_oarchive::get_helper_collection(boost::archive::detail::basic_oarchive *this)
{
  return (uint64_t)this + 8;
}

void *std::__tree<boost::archive::detail::basic_oarchive_impl::aobject>::__emplace_unique_key_args<boost::archive::detail::basic_oarchive_impl::aobject,boost::archive::detail::basic_oarchive_impl::aobject const&>(uint64_t **a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v5 = std::__tree<boost::archive::detail::basic_oarchive_impl::aobject>::__find_equal<boost::archive::detail::basic_oarchive_impl::aobject>((uint64_t)a1, &v9, a2);
  uint64_t v6 = (void *)*v5;
  if (!*v5)
  {
    __int16 v7 = (uint64_t **)v5;
    uint64_t v6 = operator new(0x30uLL);
    void v6[4] = *(void *)a3;
    *((_WORD *)v6 + 20) = *(_WORD *)(a3 + 8);
    *((_DWORD *)v6 + 11) = *(_DWORD *)(a3 + 12);
    std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::__insert_node_at(a1, v9, v7, v6);
  }
  return v6;
}

uint64_t *std::__tree<boost::archive::detail::basic_oarchive_impl::aobject>::__find_equal<boost::archive::detail::basic_oarchive_impl::aobject>(uint64_t a1, void *a2, unint64_t *a3)
{
  uint64_t v5 = *(uint64_t **)(a1 + 8);
  uint64_t result = (uint64_t *)(a1 + 8);
  uint64_t v4 = v5;
  if (v5)
  {
    unint64_t v6 = *a3;
    int v7 = *((__int16 *)a3 + 4);
    while (1)
    {
      while (1)
      {
        char v8 = v4;
        unint64_t v9 = v4[4];
        if (v6 >= v9) {
          break;
        }
LABEL_4:
        uint64_t v4 = (uint64_t *)*v8;
        uint64_t result = v8;
        if (!*v8) {
          goto LABEL_12;
        }
      }
      if (v6 <= v9)
      {
        int v10 = *((__int16 *)v8 + 20);
        if (v7 < v10) {
          goto LABEL_4;
        }
        if (v10 >= v7) {
          goto LABEL_12;
        }
      }
      uint64_t result = v8 + 1;
      uint64_t v4 = (uint64_t *)v8[1];
      if (!v4) {
        goto LABEL_12;
      }
    }
  }
  char v8 = result;
LABEL_12:
  *a2 = v8;
  return result;
}

uint64_t **std::__tree<boost::archive::object_id_type>::__emplace_unique_key_args<boost::archive::object_id_type,boost::archive::object_id_type const&>(uint64_t **a1, unsigned int *a2, _DWORD *a3)
{
  unint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    unsigned int v7 = *a2;
    while (1)
    {
      while (1)
      {
        char v8 = (uint64_t **)v5;
        unsigned int v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        unint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        unint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    char v8 = a1 + 1;
LABEL_10:
    int v10 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v10 + 7) = *a3;
    std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

void *std::__tree<boost::archive::detail::basic_oarchive_impl::cobject_type>::__emplace_unique_key_args<boost::archive::detail::basic_oarchive_impl::cobject_type,boost::archive::detail::basic_oarchive_impl::cobject_type const&>(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void **)std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::__find_equal<boost::archive::detail::basic_iarchive_impl::cobject_type>((uint64_t)a1, &v9, a2);
  unint64_t v6 = *v5;
  if (!*v5)
  {
    unsigned int v7 = (uint64_t **)v5;
    unint64_t v6 = operator new(0x30uLL);
    void v6[4] = *(void *)a3;
    *((_WORD *)v6 + 20) = *(_WORD *)(a3 + 8);
    *((unsigned char *)v6 + 42) = *(unsigned char *)(a3 + 10);
    std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::__insert_node_at(a1, v9, v7, v6);
  }
  return v6;
}

void ***boost::scoped_ptr<boost::archive::detail::basic_oarchive_impl>::~scoped_ptr(void ***a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::destroy((uint64_t)(v2 + 7), v2[8]);
    std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::destroy((uint64_t)(v2 + 4), v2[5]);
    std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::destroy((uint64_t)(v2 + 1), v2[2]);
    operator delete(v2);
  }
  return a1;
}

void *boost::archive::detail::basic_oserializer::basic_oserializer(void *result, uint64_t a2)
{
  *uint64_t result = &unk_270705328;
  result[1] = a2;
  result[2] = 0;
  return result;
}

uint64_t boost::archive::detail::basic_serializer_map::type_info_pointer_compare::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  return boost::serialization::extended_type_info::operator<(*a2, *a3);
}

uint64_t boost::archive::detail::basic_serializer_map::insert(uint64_t **a1, uint64_t *a2)
{
  uint64_t v3 = a2;
  std::__tree<boost::archive::detail::basic_serializer const*,boost::archive::detail::basic_serializer_map::type_info_pointer_compare,std::allocator<boost::archive::detail::basic_serializer const*>>::__emplace_unique_key_args<boost::archive::detail::basic_serializer const*,boost::archive::detail::basic_serializer const* const&>(a1, &v3, (uint64_t *)&v3);
  return 1;
}

void boost::archive::detail::basic_serializer_map::erase(uint64_t **a1, uint64_t a2)
{
  uint64_t v3 = a1 + 1;
  uint64_t v2 = *a1;
  if (*a1 != (uint64_t *)(a1 + 1))
  {
    do
    {
      unint64_t v6 = (uint64_t *)v2[1];
      if (v2[4] == a2)
      {
        uint64_t v9 = v2;
        if (v6)
        {
          do
          {
            unsigned int v7 = v6;
            unint64_t v6 = (uint64_t *)*v6;
          }
          while (v6);
        }
        else
        {
          do
          {
            unsigned int v7 = (uint64_t *)v9[2];
            BOOL v8 = *v7 == (void)v9;
            uint64_t v9 = v7;
          }
          while (!v8);
        }
        std::__tree<boost::archive::detail::basic_serializer const*,boost::archive::detail::basic_serializer_map::type_info_pointer_compare,std::allocator<boost::archive::detail::basic_serializer const*>>::__remove_node_pointer(a1, v2);
        operator delete(v2);
      }
      else if (v6)
      {
        do
        {
          unsigned int v7 = v6;
          unint64_t v6 = (uint64_t *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          unsigned int v7 = (uint64_t *)v2[2];
          BOOL v8 = *v7 == (void)v2;
          uint64_t v2 = v7;
        }
        while (!v8);
      }
      uint64_t v2 = v7;
    }
    while (v7 != (uint64_t *)v3);
  }
}

uint64_t boost::archive::detail::basic_serializer_map::find(boost::archive::detail::basic_serializer_map *this, const boost::serialization::extended_type_info *a2)
{
  uint64_t v5 = &v6;
  unint64_t v6 = a2;
  uint64_t v3 = (void *)std::__tree<boost::archive::detail::basic_serializer const*,boost::archive::detail::basic_serializer_map::type_info_pointer_compare,std::allocator<boost::archive::detail::basic_serializer const*>>::find<boost::archive::detail::basic_serializer const*>((uint64_t)this, (uint64_t **)&v5);
  if ((void *)((char *)this + 8) == v3) {
    return 0;
  }
  else {
    return v3[4];
  }
}

uint64_t *std::__tree<boost::archive::detail::basic_serializer const*,boost::archive::detail::basic_serializer_map::type_info_pointer_compare,std::allocator<boost::archive::detail::basic_serializer const*>>::__emplace_unique_key_args<boost::archive::detail::basic_serializer const*,boost::archive::detail::basic_serializer const* const&>(uint64_t **a1, uint64_t **a2, uint64_t *a3)
{
  uint64_t v5 = std::__tree<boost::archive::detail::basic_serializer const*,boost::archive::detail::basic_serializer_map::type_info_pointer_compare,std::allocator<boost::archive::detail::basic_serializer const*>>::__find_equal<boost::archive::detail::basic_serializer const*>((uint64_t)a1, &v9, a2);
  unint64_t v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    unsigned int v7 = (uint64_t **)v5;
    unint64_t v6 = (uint64_t *)operator new(0x28uLL);
    void v6[4] = *a3;
    std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::__insert_node_at(a1, v9, v7, v6);
  }
  return v6;
}

uint64_t *std::__tree<boost::archive::detail::basic_serializer const*,boost::archive::detail::basic_serializer_map::type_info_pointer_compare,std::allocator<boost::archive::detail::basic_serializer const*>>::__find_equal<boost::archive::detail::basic_serializer const*>(uint64_t a1, void *a2, uint64_t **a3)
{
  uint64_t v5 = (uint64_t *)(a1 + 8);
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        unsigned int v7 = v4;
        if (!boost::serialization::extended_type_info::operator<(**a3, *(void *)v4[4])) {
          break;
        }
        uint64_t v4 = (uint64_t *)*v7;
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (!boost::serialization::extended_type_info::operator<(*(void *)v7[4], **a3)) {
        break;
      }
      uint64_t v5 = v7 + 1;
      uint64_t v4 = (uint64_t *)v7[1];
    }
    while (v4);
  }
  else
  {
    unsigned int v7 = (uint64_t *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t *std::__tree<boost::archive::detail::basic_serializer const*,boost::archive::detail::basic_serializer_map::type_info_pointer_compare,std::allocator<boost::archive::detail::basic_serializer const*>>::__remove_node_pointer(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      uint64_t v3 = v2;
      uint64_t v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    uint64_t v4 = a2;
    do
    {
      uint64_t v3 = (uint64_t *)v4[2];
      BOOL v5 = *v3 == (void)v4;
      uint64_t v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2) {
    *a1 = v3;
  }
  unint64_t v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v6, a2);
  return v3;
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2;
  if (*a2)
  {
    uint64_t v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      uint64_t v3 = a2;
      goto LABEL_7;
    }
    do
    {
      uint64_t v3 = v4;
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  uint64_t v2 = v3[1];
  if (v2)
  {
LABEL_7:
    int v5 = 0;
    *(void *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  int v5 = 1;
LABEL_8:
  unint64_t v6 = (uint64_t **)v3[2];
  unsigned int v7 = *v6;
  if (*v6 == v3)
  {
    *unint64_t v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      unsigned int v7 = 0;
      uint64_t result = (uint64_t *)v2;
    }
    else
    {
      unsigned int v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    uint64_t v9 = a2[2];
    void v3[2] = v9;
    *(void *)(v9 + 8 * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    uint64_t *v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((unsigned char *)v3 + 24) = *((unsigned char *)a2 + 24);
    if (result == a2) {
      uint64_t result = v3;
    }
  }
  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(unsigned char *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    uint64_t v12 = v7[2];
    if (*(uint64_t **)v12 == v7) {
      break;
    }
    if (!*((unsigned char *)v7 + 24))
    {
      *((unsigned char *)v7 + 24) = 1;
      *(unsigned char *)(v12 + 24) = 0;
      uint64_t v13 = *(uint64_t **)(v12 + 8);
      uint64_t v14 = *v13;
      *(void *)(v12 + 8) = *v13;
      if (v14) {
        *(void *)(v14 + 16) = v12;
      }
      v13[2] = *(void *)(v12 + 16);
      *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v13;
      *uint64_t v13 = v12;
      *(void *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7) {
        uint64_t result = v7;
      }
      unsigned int v7 = *(uint64_t **)(*v7 + 8);
    }
    unsigned int v15 = (void *)*v7;
    if (*v7 && !*((unsigned char *)v15 + 24))
    {
      char v16 = (uint64_t *)v7[1];
      if (!v16) {
        goto LABEL_56;
      }
LABEL_55:
      if (*((unsigned char *)v16 + 24))
      {
LABEL_56:
        *((unsigned char *)v15 + 24) = 1;
        *((unsigned char *)v7 + 24) = 0;
        uint64_t v22 = v15[1];
        *unsigned int v7 = v22;
        if (v22) {
          *(void *)(v22 + 16) = v7;
        }
        void v15[2] = v7[2];
        *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v15;
        v15[1] = v7;
        void v7[2] = (uint64_t)v15;
        char v16 = v7;
      }
      else
      {
        unsigned int v15 = v7;
      }
      uint64_t v23 = v15[2];
      *((unsigned char *)v15 + 24) = *(unsigned char *)(v23 + 24);
      *(unsigned char *)(v23 + 24) = 1;
      *((unsigned char *)v16 + 24) = 1;
      unsigned int v24 = *(uint64_t **)(v23 + 8);
      uint64_t v25 = *v24;
      *(void *)(v23 + 8) = *v24;
      if (v25) {
        *(void *)(v25 + 16) = v23;
      }
      v24[2] = *(void *)(v23 + 16);
      *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
      *unsigned int v24 = v23;
      goto LABEL_72;
    }
    char v16 = (uint64_t *)v7[1];
    if (v16 && !*((unsigned char *)v16 + 24)) {
      goto LABEL_55;
    }
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      uint64_t v17 = result;
LABEL_53:
      *((unsigned char *)v17 + 24) = 1;
      return result;
    }
    if (!*((unsigned char *)v17 + 24)) {
      goto LABEL_53;
    }
LABEL_49:
    unsigned int v7 = *(uint64_t **)(v17[2] + 8 * (*(void *)v17[2] == (void)v17));
  }
  if (!*((unsigned char *)v7 + 24))
  {
    *((unsigned char *)v7 + 24) = 1;
    *(unsigned char *)(v12 + 24) = 0;
    uint64_t v18 = v7[1];
    *(void *)uint64_t v12 = v18;
    if (v18) {
      *(void *)(v18 + 16) = v12;
    }
    void v7[2] = *(void *)(v12 + 16);
    *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(void *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12) {
      uint64_t result = v7;
    }
    unsigned int v7 = *(uint64_t **)v12;
  }
  unsigned int v19 = (void *)*v7;
  if (*v7 && !*((unsigned char *)v19 + 24)) {
    goto LABEL_68;
  }
  unsigned int v20 = (uint64_t *)v7[1];
  if (!v20 || *((unsigned char *)v20 + 24))
  {
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v17 = (uint64_t *)v7[2];
    if (*((unsigned char *)v17 + 24)) {
      BOOL v21 = v17 == result;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21) {
      goto LABEL_53;
    }
    goto LABEL_49;
  }
  if (v19 && !*((unsigned char *)v19 + 24))
  {
LABEL_68:
    unsigned int v20 = v7;
  }
  else
  {
    *((unsigned char *)v20 + 24) = 1;
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v26 = *v20;
    v7[1] = *v20;
    if (v26) {
      *(void *)(v26 + 16) = v7;
    }
    v20[2] = v7[2];
    *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v20;
    *unsigned int v20 = (uint64_t)v7;
    void v7[2] = (uint64_t)v20;
    unsigned int v19 = v7;
  }
  uint64_t v23 = v20[2];
  *((unsigned char *)v20 + 24) = *(unsigned char *)(v23 + 24);
  *(unsigned char *)(v23 + 24) = 1;
  *((unsigned char *)v19 + 24) = 1;
  unsigned int v24 = *(uint64_t **)v23;
  uint64_t v27 = *(void *)(*(void *)v23 + 8);
  *(void *)uint64_t v23 = v27;
  if (v27) {
    *(void *)(v27 + 16) = v23;
  }
  v24[2] = *(void *)(v23 + 16);
  *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(void *)(v23 + 16) = v24;
  return result;
}

uint64_t std::__tree<boost::archive::detail::basic_serializer const*,boost::archive::detail::basic_serializer_map::type_info_pointer_compare,std::allocator<boost::archive::detail::basic_serializer const*>>::find<boost::archive::detail::basic_serializer const*>(uint64_t a1, uint64_t **a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 8;
  do
  {
    int v6 = boost::serialization::extended_type_info::operator<(**(void **)(v3 + 32), **a2);
    unsigned int v7 = (uint64_t *)(v3 + 8);
    if (!v6)
    {
      unsigned int v7 = (uint64_t *)v3;
      uint64_t v5 = v3;
    }
    uint64_t v3 = *v7;
  }
  while (*v7);
  if (v5 == v2 || boost::serialization::extended_type_info::operator<(**a2, **(void **)(v5 + 32))) {
    return v2;
  }
  return v5;
}

void *boost::archive::basic_text_iprimitive<std::istream>::load(void *a1, unsigned char *a2)
{
  uint64_t result = boost::archive::basic_text_iprimitive<std::istream>::load<short>(a1);
  *a2 = 0;
  return result;
}

{
  void *result;

  uint64_t result = boost::archive::basic_text_iprimitive<std::istream>::load<short>(a1);
  *a2 = 0;
  return result;
}

{
  void *result;

  uint64_t result = boost::archive::basic_text_iprimitive<std::istream>::load<unsigned short>(a1);
  *a2 = 0;
  return result;
}

void *boost::archive::basic_text_iprimitive<std::istream>::load(void *a1, _DWORD *a2)
{
  uint64_t result = boost::archive::basic_text_iprimitive<std::istream>::load<int>(a1);
  *a2 = 0;
  return result;
}

uint64_t boost::archive::basic_text_iprimitive<std::istream>::basic_text_iprimitive(uint64_t a1, uint64_t *a2, char a3)
{
  *(void *)a1 = a2;
  uint64_t v6 = *a2;
  unsigned int v7 = (char *)a2 + *(void *)(*a2 - 24);
  *(void *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = *((_DWORD *)v7 + 2);
  int v8 = (char *)a2 + *(void *)(v6 - 24);
  *(void *)(a1 + 24) = v8;
  uint64_t v9 = *((void *)v8 + 2);
  uint64_t v10 = (std::locale::facet *)(a1 + 40);
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = v9;
  *(void *)(a1 + 40) = &unk_270705398;
  std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)));
  uint64_t v11 = std::locale::id::__get(MEMORY[0x263F8C120]);
  std::locale::__install_ctor((std::locale *)(a1 + 56), &v18, v10, v11);
  std::locale::~locale(&v18);
  uint64_t v12 = *(void **)a1;
  *(void *)(a1 + 64) = *(void *)a1;
  std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  if ((a3 & 1) == 0)
  {
    std::istream::sync();
    uint64_t v13 = (std::ios_base *)((char *)a2 + *(void *)(*a2 - 24));
    std::ios_base::getloc(v13);
    std::ios_base::imbue(v13, (const std::locale *)(a1 + 56));
    std::locale::~locale(&v18);
    rdbuf = (std::locale *)v13->__rdbuf_;
    if (rdbuf)
    {
      (*((void (**)(std::locale *, uint64_t))rdbuf->__locale_ + 2))(rdbuf, a1 + 56);
      std::locale::locale(&v17, rdbuf + 1);
      std::locale::operator=(rdbuf + 1, (const std::locale *)(a1 + 56));
      std::locale::~locale(&v17);
    }
    std::locale::~locale(&v16);
  }
  *(_DWORD *)((char *)a2 + *(void *)(*a2 - 24) + 8) &= ~1u;
  return a1;
}

void sub_258FA402C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, char a12)
{
  std::locale::~locale(&a10);
  boost::archive::basic_istream_locale_saver<char,std::char_traits<char>>::~basic_istream_locale_saver(v15);
  std::locale::~locale(v14);
  MEMORY[0x25A2D4AB0](v13);
  *(void *)(*(void *)(v12 + 24) + 16) = *(void *)(v12 + 32);
  *(_DWORD *)(*(void *)(v12 + 8) + 8) = *(_DWORD *)(v12 + 16);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::basic_text_iprimitive<std::istream>::~basic_text_iprimitive(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 24) + 16) = *(void *)(a1 + 32);
  *(_DWORD *)(*(void *)(a1 + 8) + 8) = *(_DWORD *)(a1 + 16);
  return a1;
}

uint64_t boost::archive::basic_text_iprimitive<std::istream>::load_binary(uint64_t result, unsigned char *a2, uint64_t a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (a3)
  {
    uint64_t v3 = (void *)result;
    if ((*(unsigned char *)(*(void *)result + *(void *)(**(void **)result - 24) + 32) & 5) != 0)
    {
      boost::archive::archive_exception::archive_exception((uint64_t)v7, 8, 0, 0);
      boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v7);
    }
    uint64_t v4 = a3;
    v7[0] = *(void *)result;
    char v8 = 0;
    __int16 v9 = 0;
    uint64_t v10 = 0;
    char v11 = 0;
    do
    {
      boost::archive::iterators::transform_width<boost::archive::iterators::binary_from_base64<boost::archive::iterators::remove_whitespace<boost::archive::iterators::istream_iterator<char>>,int>,8,6,char>::fill((uint64_t)v7);
      LOBYTE(v9) = 0;
      *a2++ = HIBYTE(v9);
      --v4;
    }
    while (v4);
    uint64_t v6 = MEMORY[0x263EF8318];
    do
    {
      uint64_t result = std::istream::get();
      if ((*(unsigned char *)(*v3 + *(void *)(*(void *)*v3 - 24) + 32) & 2) != 0) {
        break;
      }
      uint64_t result = (result & 0x80) != 0
             ? __maskrune((char)result, 0x4000uLL)
             : *(_DWORD *)(v6 + 4 * (char)result + 60) & 0x4000u;
    }
    while (!result);
  }
  return result;
}

void sub_258FA422C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
}

void boost::archive::codecvt_null<char>::~codecvt_null()
{
  v0 = (void *)MEMORY[0x25A2D4AB0]();
  operator delete(v0);
}

uint64_t boost::archive::codecvt_null<char>::do_always_noconv()
{
  return 1;
}

std::locale *boost::archive::basic_istream_locale_saver<char,std::char_traits<char>>::~basic_istream_locale_saver(std::locale *a1)
{
  std::istream::sync();
  uint64_t v2 = (std::ios_base *)((char *)a1->__locale_ + *(void *)(*(void *)a1->__locale_ - 24));
  std::ios_base::getloc(v2);
  std::ios_base::imbue(v2, a1 + 1);
  std::locale::~locale(&v8);
  rdbuf = (std::locale *)v2->__rdbuf_;
  if (rdbuf)
  {
    (*((void (**)(std::locale *, std::locale *))rdbuf->__locale_ + 2))(rdbuf, a1 + 1);
    uint64_t v4 = rdbuf + 1;
    std::locale::locale(&v7, v4);
    std::locale::operator=(v4, a1 + 1);
    std::locale::~locale(&v7);
  }
  std::locale::~locale(&v6);
  std::locale::~locale(a1 + 1);
  return a1;
}

void sub_258FA4360(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t boost::archive::iterators::transform_width<boost::archive::iterators::binary_from_base64<boost::archive::iterators::remove_whitespace<boost::archive::iterators::istream_iterator<char>>,int>,8,6,char>::fill(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = 0;
  *(unsigned char *)(result + 33) = 0;
  unsigned int v3 = *(_DWORD *)(result + 40);
  unsigned int v4 = 8;
  do
  {
    if (v3)
    {
      int v5 = *(_DWORD *)(v1 + 36);
    }
    else if (*(unsigned char *)(v1 + 44))
    {
      int v5 = 0;
      *(_DWORD *)(v1 + 36) = 0;
      unsigned int v3 = v4;
    }
    else
    {
      int v5 = boost::iterators::transform_iterator<boost::archive::iterators::detail::to_6_bit<int>,boost::archive::iterators::remove_whitespace<boost::archive::iterators::istream_iterator<char>>,boost::use_default,boost::use_default>::dereference(v1);
      *(unsigned char *)(v1 + 17) = 0;
      uint64_t result = *(void *)v1;
      if (*(void *)v1) {
        uint64_t result = std::istream::ignore();
      }
      *(_DWORD *)(v1 + 36) = v5;
      int v2 = *(unsigned __int8 *)(v1 + 33);
      unsigned int v3 = 6;
    }
    if (v3 >= v4) {
      unsigned int v6 = v4;
    }
    else {
      unsigned int v6 = v3;
    }
    int v7 = (v2 << v6) | (v5 >> (v3 - v6)) & ~(-1 << v6);
    int v2 = (((_BYTE)v2 << v6) | (v5 >> (v3 - v6)) & ~(-1 << v6));
    *(unsigned char *)(v1 + 33) = v7;
    *(_DWORD *)(v1 + 40) = v3 - v6;
    BOOL v8 = v4 > v3;
    v3 -= v6;
    v4 -= v6;
  }
  while (v8);
  *(unsigned char *)(v1 + 32) = 1;
  return result;
}

uint64_t boost::iterators::transform_iterator<boost::archive::iterators::detail::to_6_bit<int>,boost::archive::iterators::remove_whitespace<boost::archive::iterators::istream_iterator<char>>,boost::use_default,boost::use_default>::dereference(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 17))
  {
    uint64_t v2 = MEMORY[0x263EF8318];
    while (1)
    {
      unsigned __int8 v3 = std::istream::peek();
      if ((v3 & 0x80) != 0)
      {
        if (!__maskrune(v3, 0x4000uLL))
        {
LABEL_9:
          *(unsigned char *)(a1 + 17) = 1;
          break;
        }
      }
      else if ((*(_DWORD *)(v2 + 4 * v3 + 60) & 0x4000) == 0)
      {
        goto LABEL_9;
      }
      if (*(void *)a1) {
        std::istream::ignore();
      }
    }
  }
  unsigned int v4 = (char)std::istream::peek();
  return boost::archive::iterators::detail::to_6_bit<int>::operator()(a1 + 24, v4);
}

uint64_t boost::archive::iterators::detail::to_6_bit<int>::operator()(uint64_t a1, unsigned int a2)
{
  if (a2 > 0x7F
    || (uint64_t result = boost::archive::iterators::detail::to_6_bit<int>::operator()(int)const::lookup_table[a2],
        result == -1))
  {
    unsigned __int8 v3 = &unk_270705428;
    int v4 = 1;
    boost::serialization::throw_exception<boost::archive::iterators::dataflow_exception>((uint64_t)&v3);
  }
  return result;
}

void sub_258FA456C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::exception a9)
{
}

void boost::serialization::throw_exception<boost::archive::iterators::dataflow_exception>(uint64_t a1)
{
  exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
  *(void *)exceptiouint64_t n = &unk_270705428;
  exception[2] = *(_DWORD *)(a1 + 8);
}

void boost::archive::iterators::dataflow_exception::~dataflow_exception(std::exception *this)
{
  std::exception::~exception(this);
  operator delete(v1);
}

const char *boost::archive::iterators::dataflow_exception::what(boost::archive::iterators::dataflow_exception *this)
{
  uint64_t v1 = *((int *)this + 2);
  if (v1 > 4) {
    return "unknown exception code";
  }
  else {
    return off_2654437E0[v1];
  }
}

uint64_t boost::archive::basic_text_oprimitive<std::ostream>::save(void *a1)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  if ((*(unsigned char *)(*a1 + *(void *)(*(void *)*a1 - 24) + 32) & 5) != 0)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v2, 13, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v2);
  }
  return MEMORY[0x270F98788]();
}

{
  return boost::archive::basic_text_oprimitive<std::ostream>::save_impl<short>(a1);
}

{
  return boost::archive::basic_text_oprimitive<std::ostream>::save_impl<unsigned short>(a1);
}

{
  return boost::archive::basic_text_oprimitive<std::ostream>::save_impl<short>(a1);
}

{
  return boost::archive::basic_text_oprimitive<std::ostream>::save_impl<int>(a1);
}

void sub_258FA46DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
}

uint64_t boost::archive::basic_text_oprimitive<std::ostream>::basic_text_oprimitive(uint64_t a1, uint64_t *a2, char a3)
{
  *(void *)a1 = a2;
  uint64_t v6 = *a2;
  int v7 = (char *)a2 + *(void *)(*a2 - 24);
  *(void *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = *((_DWORD *)v7 + 2);
  BOOL v8 = (char *)a2 + *(void *)(v6 - 24);
  *(void *)(a1 + 24) = v8;
  uint64_t v9 = *((void *)v8 + 2);
  uint64_t v10 = (std::locale::facet *)(a1 + 40);
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = v9;
  *(void *)(a1 + 40) = &unk_270705398;
  std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(void *)(*a2 - 24)));
  uint64_t v11 = std::locale::id::__get(MEMORY[0x263F8C120]);
  std::locale::__install_ctor((std::locale *)(a1 + 56), &v18, v10, v11);
  std::locale::~locale(&v18);
  uint64_t v12 = *(void **)a1;
  *(void *)(a1 + 64) = *(void *)a1;
  std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  if ((a3 & 1) == 0)
  {
    std::ostream::flush();
    uint64_t v13 = (std::ios_base *)((char *)a2 + *(void *)(*a2 - 24));
    std::ios_base::getloc(v13);
    std::ios_base::imbue(v13, (const std::locale *)(a1 + 56));
    std::locale::~locale(&v18);
    rdbuf = (std::locale *)v13->__rdbuf_;
    if (rdbuf)
    {
      (*((void (**)(std::locale *, uint64_t))rdbuf->__locale_ + 2))(rdbuf, a1 + 56);
      std::locale::locale(&v17, rdbuf + 1);
      std::locale::operator=(rdbuf + 1, (const std::locale *)(a1 + 56));
      std::locale::~locale(&v17);
    }
    std::locale::~locale(&v16);
  }
  *(_DWORD *)((char *)a2 + *(void *)(*a2 - 24) + 8) &= ~1u;
  return a1;
}

void sub_258FA49B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, char a12)
{
  std::locale::~locale(&a10);
  boost::archive::basic_ostream_locale_saver<char,std::char_traits<char>>::~basic_ostream_locale_saver(v15);
  std::locale::~locale(v14);
  MEMORY[0x25A2D4AB0](v13);
  *(void *)(*(void *)(v12 + 24) + 16) = *(void *)(v12 + 32);
  *(_DWORD *)(*(void *)(v12 + 8) + 8) = *(_DWORD *)(v12 + 16);
  _Unwind_Resume(a1);
}

uint64_t boost::archive::basic_text_oprimitive<std::ostream>::~basic_text_oprimitive(uint64_t a1)
{
  if (!MEMORY[0x25A2D4B20]())
  {
    std::ios_base::getloc((const std::ios_base *)(*(void *)a1 + *(void *)(**(void **)a1 - 24)));
    uint64_t v2 = std::locale::use_facet(&v4, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
    std::locale::~locale(&v4);
    std::ostream::put();
    std::ostream::flush();
  }
  boost::archive::basic_ostream_locale_saver<char,std::char_traits<char>>::~basic_ostream_locale_saver((std::locale *)(a1 + 64));
  std::locale::~locale((std::locale *)(a1 + 56));
  MEMORY[0x25A2D4AB0](a1 + 40);
  *(void *)(*(void *)(a1 + 24) + 16) = *(void *)(a1 + 32);
  *(_DWORD *)(*(void *)(a1 + 8) + 8) = *(_DWORD *)(a1 + 16);
  return a1;
}

void sub_258FA4AFC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t boost::archive::basic_text_oprimitive<std::ostream>::put(void *a1)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  if ((*(unsigned char *)(*a1 + *(void *)(*(void *)*a1 - 24) + 32) & 5) != 0)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v2, 13, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v2);
  }
  return std::ostream::put();
}

void sub_258FA4BC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
}

uint64_t boost::archive::basic_text_oprimitive<std::ostream>::put(uint64_t a1, unsigned char *a2)
{
  if (*a2)
  {
    uint64_t v2 = a2 + 1;
    do
      uint64_t result = std::ostream::put();
    while (*v2++);
  }
  return result;
}

uint64_t *boost::archive::basic_text_oprimitive<std::ostream>::save_binary(uint64_t *result, uint64_t a2, unint64_t a3)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  if (a3)
  {
    uint64_t v3 = result;
    if ((*(unsigned char *)(*result + *(void *)(*(void *)*result - 24) + 32) & 5) != 0)
    {
      boost::archive::archive_exception::archive_exception((uint64_t)v22, 13, 0, 0);
      boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v22);
    }
    std::ostream::put();
    uint64_t v6 = *v3;
    uint64_t v16 = a2;
    __int16 v17 = 0;
    char v18 = 0;
    int v19 = 0;
    char v20 = 0;
    int v21 = 0;
    uint64_t v9 = v6;
    uint64_t v10 = a2 + a3;
    __int16 v11 = 0;
    char v12 = 0;
    int v13 = 0;
    char v14 = 0;
    int v15 = 0;
    uint64_t result = std::__dispatch_copy_or_move[abi:ne180100]<std::_ClassicAlgPolicy,std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial,boost::archive::iterators::insert_linebreaks<boost::archive::iterators::base64_from_binary<boost::archive::iterators::transform_width<char const*,6,8,char>,char>,76,char const>,boost::archive::iterators::insert_linebreaks<boost::archive::iterators::base64_from_binary<boost::archive::iterators::transform_width<char const*,6,8,char>,char>,76,char const>,boost::archive::iterators::ostream_iterator<char>>((uint64_t)&v16, (uint64_t)&v10, &v9, (uint64_t)v22);
    unint64_t v7 = a3 % 3;
    if (v7) {
      BOOL v8 = v6 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8)
    {
      uint64_t result = (uint64_t *)std::ostream::put();
      if (v7 == 1) {
        return (uint64_t *)std::ostream::put();
      }
    }
  }
  return result;
}

void sub_258FA4D6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::exception a20)
{
}

void *std::__dispatch_copy_or_move[abi:ne180100]<std::_ClassicAlgPolicy,std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial,boost::archive::iterators::insert_linebreaks<boost::archive::iterators::base64_from_binary<boost::archive::iterators::transform_width<char const*,6,8,char>,char>,76,char const>,boost::archive::iterators::insert_linebreaks<boost::archive::iterators::base64_from_binary<boost::archive::iterators::transform_width<char const*,6,8,char>,char>,76,char const>,boost::archive::iterators::ostream_iterator<char>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  __int16 v4 = *(_WORD *)(a1 + 8);
  char v5 = *(unsigned char *)(a1 + 10);
  int v6 = *(_DWORD *)(a1 + 12);
  uint64_t v18 = *(void *)a1;
  __int16 v19 = v4;
  char v20 = v5;
  int v21 = v6;
  char v22 = 0;
  int v23 = *(_DWORD *)(a1 + 32);
  __int16 v7 = *(_WORD *)(a2 + 8);
  char v8 = *(unsigned char *)(a2 + 10);
  int v9 = *(_DWORD *)(a2 + 12);
  uint64_t v12 = *(void *)a2;
  __int16 v13 = v7;
  char v14 = v8;
  int v15 = v9;
  char v16 = 0;
  int v17 = *(_DWORD *)(a2 + 32);
  uint64_t v11 = *a3;
  return std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,boost::archive::iterators::insert_linebreaks<boost::archive::iterators::base64_from_binary<boost::archive::iterators::transform_width<char const*,6,8,char>,char>,76,char const>,boost::archive::iterators::insert_linebreaks<boost::archive::iterators::base64_from_binary<boost::archive::iterators::transform_width<char const*,6,8,char>,char>,76,char const>,boost::archive::iterators::ostream_iterator<char>,0>(&v18, &v12, &v11, a4);
}

void *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,boost::archive::iterators::insert_linebreaks<boost::archive::iterators::base64_from_binary<boost::archive::iterators::transform_width<char const*,6,8,char>,char>,76,char const>,boost::archive::iterators::insert_linebreaks<boost::archive::iterators::base64_from_binary<boost::archive::iterators::transform_width<char const*,6,8,char>,char>,76,char const>,boost::archive::iterators::ostream_iterator<char>,0>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  __int16 v5 = *((_WORD *)a1 + 4);
  char v6 = *((unsigned char *)a1 + 10);
  int v7 = *((_DWORD *)a1 + 3);
  int v8 = *((_DWORD *)a1 + 8);
  uint64_t v9 = *a2;
  __int16 v10 = *((_WORD *)a2 + 4);
  char v11 = *((unsigned char *)a2 + 10);
  int v12 = *((_DWORD *)a2 + 3);
  int v13 = *((_DWORD *)a2 + 8);
  uint64_t v27 = *a1;
  __int16 v28 = v5;
  char v29 = v6;
  int v30 = v7;
  char v31 = 0;
  int v32 = v8;
  __int16 v22 = v10;
  char v23 = v11;
  int v24 = v12;
  char v25 = 0;
  int v26 = v13;
  uint64_t v20 = *a3;
  uint64_t v21 = v9;
  uint64_t result = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<boost::archive::iterators::insert_linebreaks<boost::archive::iterators::base64_from_binary<boost::archive::iterators::transform_width<char const*,6,8,char>,char>,76,char const>,boost::archive::iterators::insert_linebreaks<boost::archive::iterators::base64_from_binary<boost::archive::iterators::transform_width<char const*,6,8,char>,char>,76,char const>,boost::archive::iterators::ostream_iterator<char>>((uint64_t)&v27, &v21, &v20, (uint64_t)&v33);
  __int16 v15 = v34;
  char v16 = v35;
  int v17 = v36;
  int v18 = v37;
  uint64_t v19 = v38;
  *(void *)a4 = v33;
  *(_WORD *)(a4 + 8) = v15;
  *(unsigned char *)(a4 + 10) = v16;
  *(_DWORD *)(a4 + 12) = v17;
  *(unsigned char *)(a4 + 16) = 0;
  *(_DWORD *)(a4 + 32) = v18;
  *(void *)(a4 + 40) = v19;
  return result;
}

void *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<boost::archive::iterators::insert_linebreaks<boost::archive::iterators::base64_from_binary<boost::archive::iterators::transform_width<char const*,6,8,char>,char>,76,char const>,boost::archive::iterators::insert_linebreaks<boost::archive::iterators::base64_from_binary<boost::archive::iterators::transform_width<char const*,6,8,char>,char>,76,char const>,boost::archive::iterators::ostream_iterator<char>>@<X0>(uint64_t a1@<X1>, void *a2@<X2>, void *a3@<X3>, uint64_t a4@<X8>)
{
  while (1)
  {
    uint64_t v8 = *(void *)a1;
    if (*(void *)a1 == *a2) {
      break;
    }
    int v9 = *(_DWORD *)(a1 + 32);
LABEL_4:
    if (v9 != 76 && !*(unsigned char *)(a1 + 8)) {
      boost::archive::iterators::transform_width<char const*,6,8,char>::fill(a1);
    }
    uint64_t result = boost::archive::iterators::ostream_iterator<char>::put_val(a3);
    int v11 = *(_DWORD *)(a1 + 32);
    if (v11 == 76)
    {
      int v12 = 0;
    }
    else
    {
      int v12 = v11 + 1;
      *(unsigned char *)(a1 + 8) = 0;
    }
    *(_DWORD *)(a1 + 32) = v12;
  }
  *(unsigned char *)(a1 + 16) = 1;
  int v9 = *(_DWORD *)(a1 + 32);
  if (*(_DWORD *)(a1 + 12)) {
    goto LABEL_4;
  }
  __int16 v13 = *(_WORD *)(a1 + 8);
  char v14 = *(unsigned char *)(a1 + 10);
  *(void *)a4 = v8;
  *(_WORD *)(a4 + 8) = v13;
  *(unsigned char *)(a4 + 10) = v14;
  *(_DWORD *)(a4 + 12) = 0;
  *(unsigned char *)(a4 + 16) = 0;
  *(_DWORD *)(a4 + 32) = v9;
  *(void *)(a4 + 40) = *a3;
  return result;
}

uint64_t boost::archive::iterators::transform_width<char const*,6,8,char>::fill(uint64_t result)
{
  LOBYTE(v1) = 0;
  *(unsigned char *)(result + 9) = 0;
  unsigned int v2 = *(_DWORD *)(result + 12);
  char v3 = *(unsigned char *)(result + 10);
  unsigned int v4 = 6;
  do
  {
    if (!v2)
    {
      if (*(unsigned char *)(result + 16))
      {
        char v3 = 0;
        unsigned int v2 = v4;
      }
      else
      {
        __int16 v5 = (char *)(*(void *)result)++;
        char v3 = *v5;
        unsigned int v2 = 8;
      }
      *(unsigned char *)(result + 10) = v3;
    }
    if (v2 >= v4) {
      unsigned int v6 = v4;
    }
    else {
      unsigned int v6 = v2;
    }
    int v1 = (v1 << v6) | (v3 >> (v2 - v6)) & ~(-1 << v6);
    *(unsigned char *)(result + 9) = v1;
    *(_DWORD *)(result + 12) = v2 - v6;
    BOOL v7 = v4 > v2;
    v2 -= v6;
    v4 -= v6;
  }
  while (v7);
  *(unsigned char *)(result + 8) = 1;
  return result;
}

std::locale *boost::archive::basic_ostream_locale_saver<char,std::char_traits<char>>::~basic_ostream_locale_saver(std::locale *a1)
{
  std::ostream::flush();
  unsigned int v2 = (std::ios_base *)((char *)a1->__locale_ + *(void *)(*(void *)a1->__locale_ - 24));
  std::ios_base::getloc(v2);
  std::ios_base::imbue(v2, a1 + 1);
  std::locale::~locale(&v8);
  rdbuf = (std::locale *)v2->__rdbuf_;
  if (rdbuf)
  {
    (*((void (**)(std::locale *, std::locale *))rdbuf->__locale_ + 2))(rdbuf, a1 + 1);
    unsigned int v4 = rdbuf + 1;
    std::locale::locale(&v7, v4);
    std::locale::operator=(v4, a1 + 1);
    std::locale::~locale(&v7);
  }
  std::locale::~locale(&v6);
  std::locale::~locale(a1 + 1);
  return a1;
}

void sub_258FA5154(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void *boost::archive::iterators::ostream_iterator<char>::put_val(void *a1)
{
  uint64_t result = (void *)*a1;
  if (result)
  {
    uint64_t result = (void *)std::ostream::put();
    if (*(_DWORD *)(*a1 + *(void *)(*(void *)*a1 - 24) + 32)) {
      *a1 = 0;
    }
  }
  return result;
}

uint64_t *boost::serialization::extended_type_info::key_register(uint64_t *this)
{
  if (this[2])
  {
    int v1 = this;
    instance = boost::serialization::singleton<std::multiset<boost::serialization::extended_type_info const*,boost::serialization::detail::key_compare,std::allocator<boost::serialization::extended_type_info const*>>>::get_instance();
    char v3 = v1;
    return std::__tree<boost::serialization::extended_type_info const*,boost::serialization::detail::key_compare,std::allocator<boost::serialization::extended_type_info const*>>::__emplace_multi<boost::serialization::extended_type_info const*>((uint64_t **)instance, (uint64_t *)&v3);
  }
  return this;
}

void boost::serialization::extended_type_info::key_unregister(boost::serialization::extended_type_info *this)
{
  if (*((void *)this + 2)) {
    BOOL v1 = boost::serialization::detail::singleton_wrapper<std::multiset<boost::serialization::extended_type_info const*,boost::serialization::detail::key_compare,std::allocator<boost::serialization::extended_type_info const*>>>::get_is_destroyed(void)::is_destroyed_flag == 0;
  }
  else {
    BOOL v1 = 0;
  }
  if (v1)
  {
    instance = boost::serialization::singleton<std::multiset<boost::serialization::extended_type_info const*,boost::serialization::detail::key_compare,std::allocator<boost::serialization::extended_type_info const*>>>::get_instance();
    std::locale v8 = this;
    unsigned int v4 = std::__tree<boost::serialization::extended_type_info const*,boost::serialization::detail::key_compare,std::allocator<boost::serialization::extended_type_info const*>>::__lower_bound<boost::serialization::extended_type_info const*>((uint64_t)instance, (uint64_t *)&v8, (void *)instance[1], instance + 1);
    std::locale v8 = this;
    __int16 v5 = std::__tree<boost::serialization::extended_type_info const*,boost::serialization::detail::key_compare,std::allocator<boost::serialization::extended_type_info const*>>::__upper_bound<boost::serialization::extended_type_info const*>((uint64_t)instance, (uint64_t *)&v8, (void *)instance[1], instance + 1);
    if (v4 != v5)
    {
      while ((boost::serialization::extended_type_info *)v4[4] != this)
      {
        std::locale v6 = (uint64_t *)v4[1];
        if (v6)
        {
          do
          {
            std::locale v7 = v6;
            std::locale v6 = (uint64_t *)*v6;
          }
          while (v6);
        }
        else
        {
          do
          {
            std::locale v7 = (uint64_t *)v4[2];
            BOOL v1 = *v7 == (void)v4;
            unsigned int v4 = v7;
          }
          while (!v1);
        }
        unsigned int v4 = v7;
        if (v7 == v5) {
          return;
        }
      }
      std::__tree<boost::archive::detail::basic_serializer const*,boost::archive::detail::basic_serializer_map::type_info_pointer_compare,std::allocator<boost::archive::detail::basic_serializer const*>>::__remove_node_pointer((uint64_t **)instance, v4);
      operator delete(v4);
    }
  }
}

uint64_t boost::serialization::extended_type_info::find(boost::serialization::extended_type_info *this, const char *a2)
{
  instance = boost::serialization::singleton<std::multiset<boost::serialization::extended_type_info const*,boost::serialization::detail::key_compare,std::allocator<boost::serialization::extended_type_info const*>>>::get_instance();
  int v8 = 0;
  int v9 = this;
  std::locale v6 = &v7;
  std::locale v7 = &unk_2707054C0;
  unsigned int v4 = std::__tree<boost::serialization::extended_type_info const*,boost::serialization::detail::key_compare,std::allocator<boost::serialization::extended_type_info const*>>::find<boost::serialization::extended_type_info const*>((uint64_t)instance, (uint64_t *)&v6);
  if (instance + 1 == v4) {
    return 0;
  }
  else {
    return v4[4];
  }
}

uint64_t boost::serialization::extended_type_info::extended_type_info(uint64_t this, int a2, const char *a3)
{
  *(void *)this = &unk_270705450;
  *(_DWORD *)(this + 8) = a2;
  *(void *)(this + 16) = a3;
  return this;
}

uint64_t boost::serialization::extended_type_info::operator<(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 0;
  }
  unsigned int v2 = *(_DWORD *)(a1 + 8);
  unsigned int v3 = *(_DWORD *)(a2 + 8);
  if (v2 == v3) {
    return (**(uint64_t (***)(uint64_t))a1)(a1);
  }
  else {
    return v2 < v3;
  }
}

uint64_t boost::serialization::extended_type_info::operator==(_DWORD *a1, _DWORD *a2)
{
  if (a1 == a2) {
    return 1;
  }
  if (a1[2] == a2[2]) {
    return (*(uint64_t (**)(void))(*(void *)a1 + 8))();
  }
  return 0;
}

uint64_t *boost::serialization::singleton<std::multiset<boost::serialization::extended_type_info const*,boost::serialization::detail::key_compare,std::allocator<boost::serialization::extended_type_info const*>>>::get_instance()
{
  {
    qword_26B2F2928 = 0;
    qword_26B2F2920 = 0;
    boost::serialization::singleton<std::multiset<boost::serialization::extended_type_info const*,boost::serialization::detail::key_compare,std::allocator<boost::serialization::extended_type_info const*>>>::get_instance(void)::t = (uint64_t)&qword_26B2F2920;
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<std::multiset<boost::serialization::extended_type_info const*,boost::serialization::detail::key_compare,std::allocator<boost::serialization::extended_type_info const*>>>::~singleton_wrapper, &boost::serialization::singleton<std::multiset<boost::serialization::extended_type_info const*,boost::serialization::detail::key_compare,std::allocator<boost::serialization::extended_type_info const*>>>::get_instance(void)::t, &dword_258F16000);
  }
  return &boost::serialization::singleton<std::multiset<boost::serialization::extended_type_info const*,boost::serialization::detail::key_compare,std::allocator<boost::serialization::extended_type_info const*>>>::get_instance(void)::t;
}

uint64_t boost::serialization::detail::extended_type_info_arg::is_less_than(boost::serialization::detail::extended_type_info_arg *this, const boost::serialization::extended_type_info *a2)
{
  return 0;
}

uint64_t boost::serialization::detail::extended_type_info_arg::is_equal(boost::serialization::detail::extended_type_info_arg *this, const boost::serialization::extended_type_info *a2)
{
  return 0;
}

uint64_t boost::serialization::detail::extended_type_info_arg::get_debug_info(boost::serialization::detail::extended_type_info_arg *this)
{
  return *((void *)this + 2);
}

uint64_t boost::serialization::detail::extended_type_info_arg::construct(boost::serialization::detail::extended_type_info_arg *this, uint64_t a2, ...)
{
  return 0;
}

uint64_t boost::serialization::detail::singleton_wrapper<std::multiset<boost::serialization::extended_type_info const*,boost::serialization::detail::key_compare,std::allocator<boost::serialization::extended_type_info const*>>>::~singleton_wrapper(uint64_t a1)
{
  boost::serialization::detail::singleton_wrapper<std::multiset<boost::serialization::extended_type_info const*,boost::serialization::detail::key_compare,std::allocator<boost::serialization::extended_type_info const*>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::destroy(a1, *(void **)(a1 + 8));
  return a1;
}

uint64_t *std::__tree<boost::serialization::extended_type_info const*,boost::serialization::detail::key_compare,std::allocator<boost::serialization::extended_type_info const*>>::__emplace_multi<boost::serialization::extended_type_info const*>(uint64_t **a1, uint64_t *a2)
{
  unsigned int v4 = (uint64_t *)operator new(0x28uLL);
  v4[4] = *a2;
  leaf_high = (uint64_t **)std::__tree<boost::serialization::extended_type_info const*,boost::serialization::detail::key_compare,std::allocator<boost::serialization::extended_type_info const*>>::__find_leaf_high((uint64_t)a1, &v7, v4 + 4);
  std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::__insert_node_at(a1, v7, leaf_high, v4);
  return v4;
}

void sub_258FA5584(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__tree<boost::serialization::extended_type_info const*,boost::serialization::detail::key_compare,std::allocator<boost::serialization::extended_type_info const*>>::__find_leaf_high(uint64_t a1, void *a2, uint64_t *a3)
{
  __int16 v5 = (void *)(a1 + 8);
  unsigned int v4 = *(void **)(a1 + 8);
  if (v4)
  {
    uint64_t v6 = *a3;
    do
    {
      while (1)
      {
        __int16 v5 = v4;
        uint64_t v7 = v4[4];
        if (v6 == v7) {
          break;
        }
        int v8 = *(const char **)(v6 + 16);
        int v9 = *(const char **)(v7 + 16);
        if (v8 == v9 || (strcmp(v8, v9) & 0x80000000) == 0) {
          break;
        }
        unsigned int v4 = (void *)*v5;
        uint64_t result = v5;
        if (!*v5) {
          goto LABEL_11;
        }
      }
      unsigned int v4 = (void *)v5[1];
    }
    while (v4);
    uint64_t result = v5 + 1;
  }
  else
  {
    uint64_t result = (void *)(a1 + 8);
  }
LABEL_11:
  *a2 = v5;
  return result;
}

void *std::__tree<boost::serialization::extended_type_info const*,boost::serialization::detail::key_compare,std::allocator<boost::serialization::extended_type_info const*>>::__lower_bound<boost::serialization::extended_type_info const*>(uint64_t a1, uint64_t *a2, void *a3, void *a4)
{
  if (a3)
  {
    __int16 v5 = a3;
    uint64_t v6 = *a2;
    do
    {
      uint64_t v7 = v5[4];
      if (v7 == v6 || (int v8 = *(const char **)(v7 + 16), v9 = *(const char **)(v6 + 16), v8 == v9))
      {
        a4 = v5;
      }
      else if (strcmp(v8, v9) < 0)
      {
        ++v5;
      }
      else
      {
        a4 = v5;
      }
      __int16 v5 = (void *)*v5;
    }
    while (v5);
  }
  return a4;
}

void *std::__tree<boost::serialization::extended_type_info const*,boost::serialization::detail::key_compare,std::allocator<boost::serialization::extended_type_info const*>>::__upper_bound<boost::serialization::extended_type_info const*>(uint64_t a1, uint64_t *a2, void *a3, void *a4)
{
  if (a3)
  {
    __int16 v5 = a3;
    uint64_t v6 = *a2;
    do
    {
      uint64_t v7 = v5[4];
      if (v6 == v7 || (int v8 = *(const char **)(v6 + 16), v9 = *(const char **)(v7 + 16), v8 == v9))
      {
        int v11 = v5 + 1;
      }
      else
      {
        int v10 = strcmp(v8, v9);
        int v11 = v5 + 1;
        if (v10 < 0)
        {
          int v11 = v5;
          a4 = v5;
        }
      }
      __int16 v5 = (void *)*v11;
    }
    while (*v11);
  }
  return a4;
}

void *std::__tree<boost::serialization::extended_type_info const*,boost::serialization::detail::key_compare,std::allocator<boost::serialization::extended_type_info const*>>::find<boost::serialization::extended_type_info const*>(uint64_t a1, uint64_t *a2)
{
  unsigned int v3 = (void *)(a1 + 8);
  unsigned int v4 = std::__tree<boost::serialization::extended_type_info const*,boost::serialization::detail::key_compare,std::allocator<boost::serialization::extended_type_info const*>>::__lower_bound<boost::serialization::extended_type_info const*>(a1, a2, *(void **)(a1 + 8), (void *)(a1 + 8));
  if (v3 == v4) {
    return v3;
  }
  __int16 v5 = v4;
  uint64_t v6 = v4[4];
  if (*a2 != v6)
  {
    uint64_t v7 = *(const char **)(*a2 + 16);
    int v8 = *(const char **)(v6 + 16);
    if (v7 != v8 && strcmp(v7, v8) < 0) {
      return v3;
    }
  }
  return v5;
}

void __cxx_global_var_init_0()
{
  {
    boost::serialization::singleton<std::multiset<boost::serialization::extended_type_info const*,boost::serialization::detail::key_compare,std::allocator<boost::serialization::extended_type_info const*>>>::m_instance = (uint64_t)boost::serialization::singleton<std::multiset<boost::serialization::extended_type_info const*,boost::serialization::detail::key_compare,std::allocator<boost::serialization::extended_type_info const*>>>::get_instance();
  }
}

BOOL boost::serialization::typeid_system::extended_type_info_typeid_0::is_less_than(boost::serialization::typeid_system::extended_type_info_typeid_0 *this, const boost::serialization::extended_type_info *a2)
{
  return this != a2 && std::type_info::before[abi:ne180100](*((void *)this + 3), *((void *)a2 + 3));
}

BOOL std::type_info::before[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 8);
  unint64_t v3 = *(void *)(a2 + 8);
  if ((v2 & 0x8000000000000000) != 0 && (v3 & 0x8000000000000000) != 0) {
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) >> 31;
  }
  else {
    return v2 < v3;
  }
}

BOOL boost::serialization::typeid_system::extended_type_info_typeid_0::is_equal(boost::serialization::typeid_system::extended_type_info_typeid_0 *this, const boost::serialization::extended_type_info *a2)
{
  return std::type_info::operator==[abi:ne180100](*((void *)this + 3), *((void *)a2 + 3));
}

void *boost::serialization::typeid_system::extended_type_info_typeid_0::extended_type_info_typeid_0(boost::serialization::typeid_system::extended_type_info_typeid_0 *this, const char *a2)
{
  uint64_t result = (void *)boost::serialization::extended_type_info::extended_type_info((uint64_t)this, 1, a2);
  *uint64_t result = &unk_270705520;
  result[3] = 0;
  return result;
}

uint64_t *boost::serialization::typeid_system::extended_type_info_typeid_0::type_register(boost::serialization::typeid_system::extended_type_info_typeid_0 *this, const std::type_info *a2)
{
  *((void *)this + 3) = a2;
  instance = boost::serialization::singleton<std::multiset<boost::serialization::typeid_system::extended_type_info_typeid_0 const*,boost::serialization::typeid_system::type_compare,std::allocator<boost::serialization::typeid_system::extended_type_info_typeid_0 const*>>>::get_instance();
  __int16 v5 = this;
  return std::__tree<boost::serialization::typeid_system::extended_type_info_typeid_0 const*,boost::serialization::typeid_system::type_compare,std::allocator<boost::serialization::typeid_system::extended_type_info_typeid_0 const*>>::__emplace_multi<boost::serialization::typeid_system::extended_type_info_typeid_0 const*>((uint64_t **)instance, (uint64_t *)&v5);
}

uint64_t *boost::serialization::typeid_system::extended_type_info_typeid_0::type_unregister(uint64_t *this)
{
  uint64_t v1 = (uint64_t)this;
  if (this[3]) {
    BOOL v2 = boost::serialization::detail::singleton_wrapper<std::multiset<boost::serialization::typeid_system::extended_type_info_typeid_0 const*,boost::serialization::typeid_system::type_compare,std::allocator<boost::serialization::typeid_system::extended_type_info_typeid_0 const*>>>::get_is_destroyed(void)::is_destroyed_flag == 0;
  }
  else {
    BOOL v2 = 0;
  }
  if (v2)
  {
    instance = boost::serialization::singleton<std::multiset<boost::serialization::typeid_system::extended_type_info_typeid_0 const*,boost::serialization::typeid_system::type_compare,std::allocator<boost::serialization::typeid_system::extended_type_info_typeid_0 const*>>>::get_instance();
    uint64_t v5 = v1;
    this = (uint64_t *)std::__tree<boost::serialization::typeid_system::extended_type_info_typeid_0 const*,boost::serialization::typeid_system::type_compare,std::allocator<boost::serialization::typeid_system::extended_type_info_typeid_0 const*>>::find<boost::serialization::typeid_system::extended_type_info_typeid_0 const*>((uint64_t)instance, &v5);
    if (instance + 1 != this)
    {
      unsigned int v4 = this;
      do
      {
        std::__tree<boost::archive::detail::basic_serializer const*,boost::archive::detail::basic_serializer_map::type_info_pointer_compare,std::allocator<boost::archive::detail::basic_serializer const*>>::__remove_node_pointer((uint64_t **)instance, v4);
        operator delete(v4);
        uint64_t v5 = v1;
        this = (uint64_t *)std::__tree<boost::serialization::typeid_system::extended_type_info_typeid_0 const*,boost::serialization::typeid_system::type_compare,std::allocator<boost::serialization::typeid_system::extended_type_info_typeid_0 const*>>::find<boost::serialization::typeid_system::extended_type_info_typeid_0 const*>((uint64_t)instance, &v5);
        unsigned int v4 = this;
      }
      while (instance + 1 != this);
    }
  }
  *(void *)(v1 + 24) = 0;
  return this;
}

uint64_t boost::serialization::typeid_system::extended_type_info_typeid_0::get_extended_type_info(boost::serialization::typeid_system::extended_type_info_typeid_0 *this, const std::type_info *a2)
{
  boost::serialization::extended_type_info::extended_type_info((uint64_t)v8, 1, 0);
  v8[0] = &unk_270705580;
  int v9 = a2;
  instance = boost::serialization::singleton<std::multiset<boost::serialization::typeid_system::extended_type_info_typeid_0 const*,boost::serialization::typeid_system::type_compare,std::allocator<boost::serialization::typeid_system::extended_type_info_typeid_0 const*>>>::get_instance();
  uint64_t v7 = v8;
  uint64_t v4 = std::__tree<boost::serialization::typeid_system::extended_type_info_typeid_0 const*,boost::serialization::typeid_system::type_compare,std::allocator<boost::serialization::typeid_system::extended_type_info_typeid_0 const*>>::find<boost::serialization::typeid_system::extended_type_info_typeid_0 const*>((uint64_t)instance, &v7);
  if (instance + 1 == (uint64_t *)v4) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = *(void *)(v4 + 32);
  }
  v8[0] = &unk_270705580;
  int v9 = 0;
  boost::serialization::extended_type_info::~extended_type_info((boost::serialization::extended_type_info *)v8);
  return v5;
}

void sub_258FA59F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  a14 = 0;
  boost::serialization::extended_type_info::~extended_type_info((boost::serialization::extended_type_info *)&a11);
  _Unwind_Resume(a1);
}

void boost::serialization::typeid_system::extended_type_info_typeid_arg::~extended_type_info_typeid_arg(boost::serialization::typeid_system::extended_type_info_typeid_arg *this)
{
  *(void *)this = &unk_270705580;
  *((void *)this + 3) = 0;
  boost::serialization::extended_type_info::~extended_type_info(this);
}

{
  void *v1;
  uint64_t vars8;

  *(void *)this = &unk_270705580;
  *((void *)this + 3) = 0;
  boost::serialization::extended_type_info::~extended_type_info(this);
  operator delete(v1);
}

uint64_t *boost::serialization::singleton<std::multiset<boost::serialization::typeid_system::extended_type_info_typeid_0 const*,boost::serialization::typeid_system::type_compare,std::allocator<boost::serialization::typeid_system::extended_type_info_typeid_0 const*>>>::get_instance()
{
  {
    qword_26B2F2910 = 0;
    qword_26B2F2908 = 0;
    boost::serialization::singleton<std::multiset<boost::serialization::typeid_system::extended_type_info_typeid_0 const*,boost::serialization::typeid_system::type_compare,std::allocator<boost::serialization::typeid_system::extended_type_info_typeid_0 const*>>>::get_instance(void)::t = (uint64_t)&qword_26B2F2908;
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<std::multiset<boost::serialization::typeid_system::extended_type_info_typeid_0 const*,boost::serialization::typeid_system::type_compare,std::allocator<boost::serialization::typeid_system::extended_type_info_typeid_0 const*>>>::~singleton_wrapper, &boost::serialization::singleton<std::multiset<boost::serialization::typeid_system::extended_type_info_typeid_0 const*,boost::serialization::typeid_system::type_compare,std::allocator<boost::serialization::typeid_system::extended_type_info_typeid_0 const*>>>::get_instance(void)::t, &dword_258F16000);
  }
  return &boost::serialization::singleton<std::multiset<boost::serialization::typeid_system::extended_type_info_typeid_0 const*,boost::serialization::typeid_system::type_compare,std::allocator<boost::serialization::typeid_system::extended_type_info_typeid_0 const*>>>::get_instance(void)::t;
}

uint64_t boost::serialization::typeid_system::extended_type_info_typeid_arg::construct(boost::serialization::typeid_system::extended_type_info_typeid_arg *this, uint64_t a2, ...)
{
  return 0;
}

uint64_t boost::serialization::detail::singleton_wrapper<std::multiset<boost::serialization::typeid_system::extended_type_info_typeid_0 const*,boost::serialization::typeid_system::type_compare,std::allocator<boost::serialization::typeid_system::extended_type_info_typeid_0 const*>>>::~singleton_wrapper(uint64_t a1)
{
  boost::serialization::detail::singleton_wrapper<std::multiset<boost::serialization::typeid_system::extended_type_info_typeid_0 const*,boost::serialization::typeid_system::type_compare,std::allocator<boost::serialization::typeid_system::extended_type_info_typeid_0 const*>>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::destroy(a1, *(void **)(a1 + 8));
  return a1;
}

uint64_t *std::__tree<boost::serialization::typeid_system::extended_type_info_typeid_0 const*,boost::serialization::typeid_system::type_compare,std::allocator<boost::serialization::typeid_system::extended_type_info_typeid_0 const*>>::__emplace_multi<boost::serialization::typeid_system::extended_type_info_typeid_0 const*>(uint64_t **a1, uint64_t *a2)
{
  uint64_t v4 = (uint64_t *)operator new(0x28uLL);
  v4[4] = *a2;
  leaf_high = (uint64_t **)std::__tree<boost::serialization::typeid_system::extended_type_info_typeid_0 const*,boost::serialization::typeid_system::type_compare,std::allocator<boost::serialization::typeid_system::extended_type_info_typeid_0 const*>>::__find_leaf_high((uint64_t)a1, &v7, v4 + 4);
  std::__tree<std::__value_type<int,std::vector<std::string>>,std::__map_value_compare<int,std::__value_type<int,std::vector<std::string>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::vector<std::string>>>>::__insert_node_at(a1, v7, leaf_high, v4);
  return v4;
}

void sub_258FA5BB0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__tree<boost::serialization::typeid_system::extended_type_info_typeid_0 const*,boost::serialization::typeid_system::type_compare,std::allocator<boost::serialization::typeid_system::extended_type_info_typeid_0 const*>>::__find_leaf_high(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v5 = v4;
        if (!(**(unsigned int (***)(void, void))*a3)(*a3, v4[4])) {
          break;
        }
        uint64_t v4 = (void *)*v5;
        uint64_t result = v5;
        if (!*v5) {
          goto LABEL_8;
        }
      }
      uint64_t v4 = (void *)v5[1];
    }
    while (v4);
    uint64_t result = v5 + 1;
  }
  else
  {
    uint64_t result = (void *)(a1 + 8);
  }
LABEL_8:
  *a2 = v5;
  return result;
}

uint64_t std::__tree<boost::serialization::typeid_system::extended_type_info_typeid_0 const*,boost::serialization::typeid_system::type_compare,std::allocator<boost::serialization::typeid_system::extended_type_info_typeid_0 const*>>::find<boost::serialization::typeid_system::extended_type_info_typeid_0 const*>(uint64_t a1, void *a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 8;
  do
  {
    int v6 = (***(uint64_t (****)(void, void))(v3 + 32))(*(void *)(v3 + 32), *a2);
    uint64_t v7 = (uint64_t *)(v3 + 8);
    if (!v6)
    {
      uint64_t v7 = (uint64_t *)v3;
      uint64_t v5 = v3;
    }
    uint64_t v3 = *v7;
  }
  while (*v7);
  if (v5 == v2 || (**(unsigned int (***)(void, void))*a2)(*a2, *(void *)(v5 + 32))) {
    return v2;
  }
  return v5;
}

void __cxx_global_var_init_1()
{
  {
    boost::serialization::singleton<std::multiset<boost::serialization::typeid_system::extended_type_info_typeid_0 const*,boost::serialization::typeid_system::type_compare,std::allocator<boost::serialization::typeid_system::extended_type_info_typeid_0 const*>>>::m_instance = (uint64_t)boost::serialization::singleton<std::multiset<boost::serialization::typeid_system::extended_type_info_typeid_0 const*,boost::serialization::typeid_system::type_compare,std::allocator<boost::serialization::typeid_system::extended_type_info_typeid_0 const*>>>::get_instance();
  }
}

uint64_t boost::archive::detail::archive_serializer_map<boost::archive::text_iarchive>::insert(uint64_t *a1)
{
  instance = boost::serialization::singleton<boost::archive::detail::extra_detail::map<boost::archive::text_iarchive>>::get_instance();
  return boost::archive::detail::basic_serializer_map::insert((uint64_t **)instance, a1);
}

void boost::archive::detail::archive_serializer_map<boost::archive::text_iarchive>::erase(uint64_t a1)
{
  if (!boost::serialization::detail::singleton_wrapper<boost::archive::detail::extra_detail::map<boost::archive::text_iarchive>>::get_is_destroyed(void)::is_destroyed_flag)
  {
    instance = boost::serialization::singleton<boost::archive::detail::extra_detail::map<boost::archive::text_iarchive>>::get_instance();
    boost::archive::detail::basic_serializer_map::erase((uint64_t **)instance, a1);
  }
}

uint64_t boost::archive::detail::archive_serializer_map<boost::archive::text_iarchive>::find(const boost::serialization::extended_type_info *a1)
{
  instance = boost::serialization::singleton<boost::archive::detail::extra_detail::map<boost::archive::text_iarchive>>::get_instance();
  return boost::archive::detail::basic_serializer_map::find((boost::archive::detail::basic_serializer_map *)instance, a1);
}

void boost::archive::basic_text_iarchive<boost::archive::text_iarchive>::load_override()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  memset(&__src, 0, sizeof(__src));
  std::string::reserve(&__src, 0x80uLL);
  boost::archive::text_iarchive_impl<boost::archive::text_iarchive>::load();
}

{
  while (1)
    ;
}

void sub_258FA5EFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::exception a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void boost::archive::basic_text_iarchive<boost::archive::text_iarchive>::init()
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  std::string __p = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  boost::archive::text_iarchive_impl<boost::archive::text_iarchive>::load();
}

{
  while (1)
    ;
}

void sub_258FA6068(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, std::exception a17)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

boost::archive::detail::basic_iarchive *boost::archive::basic_text_iarchive<boost::archive::text_iarchive>::basic_text_iarchive(boost::archive::detail::basic_iarchive *a1, int a2)
{
  uint64_t result = boost::archive::detail::basic_iarchive::basic_iarchive(a1, a2);
  *(void *)uint64_t result = &unk_2707055E0;
  return result;
}

{
  boost::archive::detail::basic_iarchive *result;

  uint64_t result = boost::archive::detail::basic_iarchive::basic_iarchive(a1, a2);
  *(void *)uint64_t result = &unk_2707055E0;
  return result;
}

void boost::archive::basic_text_iarchive<boost::archive::text_iarchive>::~basic_text_iarchive(boost::archive::detail::basic_iarchive *a1)
{
  boost::archive::detail::basic_iarchive::~basic_iarchive(a1);
  operator delete(v1);
}

void *boost::archive::text_iarchive_impl<boost::archive::text_iarchive>::load(uint64_t a1, _DWORD *a2)
{
  uint64_t result = boost::archive::basic_text_iprimitive<std::istream>::load<unsigned int>((void *)(a1 + 40));
  *a2 = 0;
  return result;
}

{
  void *result;

  uint64_t result = boost::archive::basic_text_iprimitive<std::istream>::load<unsigned int>((void *)(a1 + 40));
  *a2 = 0;
  return result;
}

uint64_t boost::archive::text_iarchive_impl<boost::archive::text_iarchive>::load(uint64_t a1, unsigned char *a2)
{
  boost::archive::basic_text_iprimitive<std::istream>::load<unsigned long>((void *)(a1 + 40));
  std::istream::get();
  uint64_t result = std::istream::read();
  *a2 = 0;
  return result;
}

uint64_t boost::archive::text_iarchive_impl<boost::archive::text_iarchive>::load(uint64_t a1, _DWORD *a2)
{
  boost::archive::basic_text_iprimitive<std::istream>::load<unsigned long>((void *)(a1 + 40));
  std::istream::get();
  uint64_t result = std::istream::read();
  *a2 = 0;
  return result;
}

void boost::archive::text_iarchive_impl<boost::archive::text_iarchive>::load(uint64_t a1, std::string *a2)
{
}

uint64_t boost::archive::text_iarchive_impl<boost::archive::text_iarchive>::load(uint64_t a1, std::wstring *a2)
{
  return std::istream::read();
}

void boost::archive::text_iarchive_impl<boost::archive::text_iarchive>::text_iarchive_impl()
{
}

{
  while (1)
    ;
}

void sub_258FA63D8()
{
}

void boost::archive::text_iarchive_impl<boost::archive::text_iarchive>::~text_iarchive_impl(boost::archive::detail::basic_iarchive *a1)
{
}

{
  boost::archive::detail::basic_iarchive::~basic_iarchive(a1);
  boost::archive::basic_text_iprimitive<std::istream>::~basic_text_iprimitive();
}

{
  boost::archive::detail::basic_iarchive::~basic_iarchive(a1);
  boost::archive::basic_text_iprimitive<std::istream>::~basic_text_iprimitive();
}

uint64_t *boost::serialization::singleton<boost::archive::detail::extra_detail::map<boost::archive::text_iarchive>>::get_instance()
{
  {
    qword_26B2F28E0 = 0;
    qword_26B2F28D8 = 0;
    boost::serialization::singleton<boost::archive::detail::extra_detail::map<boost::archive::text_iarchive>>::get_instance(void)::t = (uint64_t)&qword_26B2F28D8;
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::archive::detail::extra_detail::map<boost::archive::text_iarchive>>::~singleton_wrapper, &boost::serialization::singleton<boost::archive::detail::extra_detail::map<boost::archive::text_iarchive>>::get_instance(void)::t, &dword_258F16000);
  }
  return &boost::serialization::singleton<boost::archive::detail::extra_detail::map<boost::archive::text_iarchive>>::get_instance(void)::t;
}

uint64_t boost::serialization::detail::singleton_wrapper<boost::archive::detail::extra_detail::map<boost::archive::text_iarchive>>::~singleton_wrapper(uint64_t a1)
{
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::extra_detail::map<boost::archive::text_iarchive>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::destroy(a1, *(void **)(a1 + 8));
  return a1;
}

void *boost::archive::basic_text_iprimitive<std::istream>::load<boost::serialization::library_version_type>(void *a1)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  uint64_t result = (void *)MEMORY[0x25A2D4940](*a1);
  if ((*((unsigned char *)result + *(void *)(*result - 24) + 32) & 5) != 0)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v2, 8, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v2);
  }
  return result;
}

void sub_258FA65E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
}

void __cxx_global_var_init_2()
{
  {
    boost::serialization::singleton<boost::archive::detail::extra_detail::map<boost::archive::text_iarchive>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::extra_detail::map<boost::archive::text_iarchive>>::get_instance();
  }
}

uint64_t boost::archive::detail::archive_serializer_map<boost::archive::text_oarchive>::insert(uint64_t *a1)
{
  instance = boost::serialization::singleton<boost::archive::detail::extra_detail::map<boost::archive::text_oarchive>>::get_instance();
  return boost::archive::detail::basic_serializer_map::insert((uint64_t **)instance, a1);
}

void boost::archive::detail::archive_serializer_map<boost::archive::text_oarchive>::erase(uint64_t a1)
{
  if (!boost::serialization::detail::singleton_wrapper<boost::archive::detail::extra_detail::map<boost::archive::text_oarchive>>::get_is_destroyed(void)::is_destroyed_flag)
  {
    instance = boost::serialization::singleton<boost::archive::detail::extra_detail::map<boost::archive::text_oarchive>>::get_instance();
    boost::archive::detail::basic_serializer_map::erase((uint64_t **)instance, a1);
  }
}

uint64_t boost::archive::detail::archive_serializer_map<boost::archive::text_oarchive>::find(const boost::serialization::extended_type_info *a1)
{
  instance = boost::serialization::singleton<boost::archive::detail::extra_detail::map<boost::archive::text_oarchive>>::get_instance();
  return boost::archive::detail::basic_serializer_map::find((boost::archive::detail::basic_serializer_map *)instance, a1);
}

uint64_t boost::archive::basic_text_oarchive<boost::archive::text_oarchive>::newtoken(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 40);
  if (v1)
  {
    if (v1 == 2)
    {
      boost::archive::basic_text_oprimitive<std::ostream>::put();
    }
    if (v1 == 1) {
      boost::archive::basic_text_oprimitive<std::ostream>::put();
    }
  }
  else
  {
    *(_DWORD *)(result + 40) = 2;
  }
  return result;
}

uint64_t boost::archive::basic_text_oarchive<boost::archive::text_oarchive>::newline(uint64_t result)
{
  *(_DWORD *)(result + 40) = 1;
  return result;
}

void boost::archive::basic_text_oarchive<boost::archive::text_oarchive>::save_override(boost::archive::detail::basic_oarchive *a1)
{
  *((_DWORD *)a1 + 10) = 1;
  boost::archive::save_access::save_primitive<boost::archive::text_oarchive,boost::archive::object_id_type>(a1);
}

void boost::archive::basic_text_oarchive<boost::archive::text_oarchive>::save_override(boost::archive::detail::basic_oarchive *a1, char **a2)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, *a2);
  boost::archive::detail::basic_oarchive::end_preamble(a1);
  boost::archive::text_oarchive_impl<boost::archive::text_oarchive>::save();
}

void sub_258FA67D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void boost::archive::basic_text_oarchive<boost::archive::text_oarchive>::init(boost::archive *a1)
{
  uint64_t v2 = (char *)boost::archive::BOOST_ARCHIVE_SIGNATURE(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, v2);
  boost::archive::detail::basic_oarchive::end_preamble(a1);
  boost::archive::text_oarchive_impl<boost::archive::text_oarchive>::save();
}

void sub_258FA6860(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

boost::archive::detail::basic_oarchive *boost::archive::basic_text_oarchive<boost::archive::text_oarchive>::basic_text_oarchive(boost::archive::detail::basic_oarchive *a1, int a2)
{
  uint64_t result = boost::archive::detail::basic_oarchive::basic_oarchive(a1, a2);
  *(void *)uint64_t result = &unk_2707056D0;
  *((_DWORD *)result + 10) = 0;
  return result;
}

{
  boost::archive::detail::basic_oarchive *result;

  uint64_t result = boost::archive::detail::basic_oarchive::basic_oarchive(a1, a2);
  *(void *)uint64_t result = &unk_2707056D0;
  *((_DWORD *)result + 10) = 0;
  return result;
}

void boost::archive::basic_text_oarchive<boost::archive::text_oarchive>::~basic_text_oarchive(boost::archive::detail::basic_oarchive *a1)
{
  boost::archive::detail::basic_oarchive::~basic_oarchive(a1);
  operator delete(v1);
}

void boost::archive::text_oarchive_impl<boost::archive::text_oarchive>::save()
{
}

{
  boost::archive::basic_text_oarchive<boost::archive::text_oarchive>::newtoken();
}

{
  while (1)
    ;
}

void boost::archive::text_oarchive_impl<boost::archive::text_oarchive>::save(boost::archive::detail::basic_oarchive *a1, char *__s)
{
}

void boost::archive::text_oarchive_impl<boost::archive::text_oarchive>::save(boost::archive::detail::basic_oarchive *a1, __int32 *a2)
{
}

void boost::archive::text_oarchive_impl<boost::archive::text_oarchive>::save(boost::archive::detail::basic_oarchive *a1)
{
}

{
  boost::archive::save_access::save_primitive<boost::archive::text_oarchive,unsigned long>(a1);
}

void boost::archive::text_oarchive_impl<boost::archive::text_oarchive>::text_oarchive_impl()
{
}

{
  while (1)
    ;
}

void sub_258FA6BC4()
{
}

void boost::archive::text_oarchive_impl<boost::archive::text_oarchive>::~text_oarchive_impl(boost::archive::detail::basic_oarchive *a1)
{
}

{
  boost::archive::detail::basic_oarchive::~basic_oarchive(a1);
  boost::archive::basic_text_oprimitive<std::ostream>::~basic_text_oprimitive();
}

{
  boost::archive::detail::basic_oarchive::~basic_oarchive(a1);
  boost::archive::basic_text_oprimitive<std::ostream>::~basic_text_oprimitive();
}

void boost::archive::text_oarchive_impl<boost::archive::text_oarchive>::save_binary()
{
}

uint64_t *boost::serialization::singleton<boost::archive::detail::extra_detail::map<boost::archive::text_oarchive>>::get_instance()
{
  {
    qword_26B2F28F8 = 0;
    qword_26B2F28F0 = 0;
    boost::serialization::singleton<boost::archive::detail::extra_detail::map<boost::archive::text_oarchive>>::get_instance(void)::t = (uint64_t)&qword_26B2F28F0;
    __cxa_atexit((void (*)(void *))boost::serialization::detail::singleton_wrapper<boost::archive::detail::extra_detail::map<boost::archive::text_oarchive>>::~singleton_wrapper, &boost::serialization::singleton<boost::archive::detail::extra_detail::map<boost::archive::text_oarchive>>::get_instance(void)::t, &dword_258F16000);
  }
  return &boost::serialization::singleton<boost::archive::detail::extra_detail::map<boost::archive::text_oarchive>>::get_instance(void)::t;
}

uint64_t boost::serialization::detail::singleton_wrapper<boost::archive::detail::extra_detail::map<boost::archive::text_oarchive>>::~singleton_wrapper(uint64_t a1)
{
  boost::serialization::detail::singleton_wrapper<boost::archive::detail::extra_detail::map<boost::archive::text_oarchive>>::get_is_destroyed(void)::is_destroyed_flag = 1;
  std::__tree<boost::archive::detail::basic_iarchive_impl::cobject_type>::destroy(a1, *(void **)(a1 + 8));
  return a1;
}

void boost::archive::save_access::save_primitive<boost::archive::text_oarchive,boost::serialization::library_version_type>(boost::archive::detail::basic_oarchive *a1)
{
}

uint64_t boost::archive::basic_text_oprimitive<std::ostream>::save_impl<boost::serialization::library_version_type>(void *a1)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  if ((*(unsigned char *)(*a1 + *(void *)(*(void *)*a1 - 24) + 32) & 5) != 0)
  {
    boost::archive::archive_exception::archive_exception((uint64_t)v2, 13, 0, 0);
    boost::serialization::throw_exception<boost::archive::archive_exception>((const boost::archive::archive_exception *)v2);
  }
  return MEMORY[0x270F987D0]();
}

void sub_258FA6E8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10)
{
}

void __cxx_global_var_init_3()
{
  {
    boost::serialization::singleton<boost::archive::detail::extra_detail::map<boost::archive::text_oarchive>>::m_instance = (uint64_t)boost::serialization::singleton<boost::archive::detail::extra_detail::map<boost::archive::text_oarchive>>::get_instance();
  }
}

void boost::serialization::singleton<boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>>::get_instance()
{
}

void boost::histogram::detail::destroy_buffer<std::allocator<unsigned char>>()
{
}

{
  __assert_rtn("destroy_buffer", "unlimited_storage.hpp", 393, "n > 0u");
}

void boost::serialization::extended_type_info_typeid<pps::Histogram_Internal>::construct()
{
}

{
  __assert_rtn("factory", "factory.hpp", 38, "false");
}

void boost::histogram::unlimited_storage<std::allocator<char>>::buffer_type::apply<void boost::histogram::unlimited_storage<std::allocator<char>>::serialize<boost::archive::text_iarchive>(boost::archive::text_iarchive &,unsigned int)::{lambda(boost::archive::text_iarchive*)#1}>()
{
  __assert_rtn("operator()", "serialization.hpp", 187, "tp == nullptr");
}

void pps::Histogram_Internal::axis()
{
}

void boost::histogram::detail::create_buffer<std::allocator<unsigned char>,unsigned char *>()
{
}

void boost::histogram::detail::mp_int<std::allocator<unsigned long long>>::operator++()
{
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x270EE4528]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x270EE4530](BOOLean);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x270EE4920](allocator, capacity, keyCallBacks, valueCallBacks);
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x270EE4958](theDict, key);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x270EE4A30](cf);
}

void CFRelease(CFTypeRef cf)
{
}

Class NSClassFromString(NSString *aClassName)
{
  return (Class)MEMORY[0x270EF2A50](aClassName);
}

void NSLog(NSString *format, ...)
{
}

uint64_t NSRequestConcreteImplementation()
{
  return MEMORY[0x270EF2BB8]();
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x270EF2C08](aClass);
}

uint64_t PBDataWriterWriteBOOLField()
{
  return MEMORY[0x270F58538]();
}

uint64_t PBDataWriterWriteInt32Field()
{
  return MEMORY[0x270F58560]();
}

uint64_t PBDataWriterWriteSubmessage()
{
  return MEMORY[0x270F585A0]();
}

uint64_t PBDataWriterWriteUint32Field()
{
  return MEMORY[0x270F585B0]();
}

uint64_t PBDataWriterWriteUint64Field()
{
  return MEMORY[0x270F585B8]();
}

uint64_t PBReaderPlaceMark()
{
  return MEMORY[0x270F585D8]();
}

uint64_t PBReaderRecallMark()
{
  return MEMORY[0x270F585F8]();
}

uint64_t PBReaderSkipValueWithTag()
{
  return MEMORY[0x270F58600]();
}

CFTypeRef SecTaskCopyValueForEntitlement(SecTaskRef task, CFStringRef entitlement, CFErrorRef *error)
{
  return (CFTypeRef)MEMORY[0x270EFDCB0](task, entitlement, error);
}

SecTaskRef SecTaskCreateFromSelf(CFAllocatorRef allocator)
{
  return (SecTaskRef)MEMORY[0x270EFDCD0](allocator);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

void boost::archive::text_iarchive_impl<boost::archive::text_iarchive>::load_override()
{
  while (1)
    ;
}

void boost::archive::text_iarchive_impl<boost::archive::text_iarchive>::init()
{
  while (1)
    ;
}

void boost::archive::text_iarchive_impl<boost::archive::text_iarchive>::load()
{
  while (1)
    ;
}

void boost::archive::basic_text_oarchive<boost::archive::text_oarchive>::save_override()
{
  while (1)
    ;
}

void boost::archive::basic_text_oarchive<boost::archive::text_oarchive>::init()
{
  while (1)
    ;
}

void boost::archive::basic_text_oarchive<boost::archive::text_oarchive>::newtoken()
{
  while (1)
    ;
}

void boost::archive::basic_text_iprimitive<std::istream>::basic_text_iprimitive()
{
  while (1)
    ;
}

void boost::archive::basic_text_iprimitive<std::istream>::~basic_text_iprimitive()
{
  while (1)
    ;
}

void boost::archive::basic_text_oprimitive<std::ostream>::save_binary()
{
  while (1)
    ;
}

void boost::archive::basic_text_oprimitive<std::ostream>::put()
{
  while (1)
    ;
}

void boost::archive::basic_text_oprimitive<std::ostream>::basic_text_oprimitive()
{
  while (1)
    ;
}

void boost::archive::basic_text_oprimitive<std::ostream>::~basic_text_oprimitive()
{
  while (1)
    ;
}

uint64_t std::stringbuf::str()
{
  return MEMORY[0x270F98268]();
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x270F982E8](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x270F982F8](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x270F98330](this, a2);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const std::string *a2)
{
  return (std::logic_error *)MEMORY[0x270F98338](this, a2);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const std::logic_error *a2)
{
  return (std::logic_error *)MEMORY[0x270F98340](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const char *a2)
{
  return (std::runtime_error *)MEMORY[0x270F983C8](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::runtime_error *a2)
{
  return (std::runtime_error *)MEMORY[0x270F983D8](this, a2);
}

void std::overflow_error::~overflow_error(std::overflow_error *this)
{
}

{
  MEMORY[0x270F98400](this);
}

void std::invalid_argument::~invalid_argument(std::invalid_argument *this)
{
}

{
  MEMORY[0x270F98410](this);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x270F98428](this);
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
}

void std::string::reserve(std::string *this, std::string::size_type __requested_capacity)
{
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x270F98560](this, __str);
}

void std::wstring::resize(std::wstring *this, std::wstring::size_type __n, std::wstring::value_type __c)
{
}

uint64_t std::istream::get()
{
  return MEMORY[0x270F98668]();
}

uint64_t std::istream::peek()
{
  return MEMORY[0x270F98670]();
}

uint64_t std::istream::read()
{
  return MEMORY[0x270F98678]();
}

uint64_t std::istream::sync()
{
  return MEMORY[0x270F98680]();
}

uint64_t std::istream::ignore()
{
  return MEMORY[0x270F986A8]();
}

uint64_t std::istream::~istream()
{
  return MEMORY[0x270F986D0]();
}

uint64_t std::istream::operator>>()
{
  return MEMORY[0x270F986D8]();
}

{
  return MEMORY[0x270F986E0]();
}

{
  return MEMORY[0x270F986F0]();
}

{
  return MEMORY[0x270F986F8]();
}

{
  return MEMORY[0x270F98708]();
}

{
  return MEMORY[0x270F98710]();
}

{
  return MEMORY[0x270F98718]();
}

{
  return MEMORY[0x270F98728]();
}

uint64_t std::ostream::put()
{
  return MEMORY[0x270F98740]();
}

uint64_t std::ostream::flush()
{
  return MEMORY[0x270F98748]();
}

uint64_t std::ostream::write()
{
  return MEMORY[0x270F98750]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x270F98758]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x270F98760]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x270F98770]();
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x270F988A8]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x270F988B0]();
}

void std::locale::__install_ctor(std::locale *this, const std::locale *a2, std::locale::facet *a3, uint64_t a4)
{
}

uint64_t std::locale::id::__get(std::locale::id *this)
{
  return MEMORY[0x270F98C58](this);
}

std::locale *__cdecl std::locale::locale(std::locale *this, const std::locale *a2)
{
  return (std::locale *)MEMORY[0x270F98C70](this, a2);
}

void std::locale::~locale(std::locale *this)
{
}

const std::locale *__cdecl std::locale::operator=(std::locale *this, const std::locale *a2)
{
  return (const std::locale *)MEMORY[0x270F98C88](this, a2);
}

void std::codecvt<char,char,__mbstate_t>::~codecvt(std::codecvt<char, char, mbstate_t> *this)
{
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
}

std::locale std::ios_base::imbue(std::ios_base *this, const std::locale *__loc)
{
  return (std::locale)MEMORY[0x270F98D58](this, __loc);
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x270F98DE8]();
}

void std::exception::~exception(std::exception *this)
{
}

int std::uncaught_exceptions(void)
{
  return MEMORY[0x270F98EB0]();
}

void std::terminate(void)
{
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz, const std::nothrow_t *a2)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x270F98EC0](thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x270ED7DA0](lpfunc, obj, lpdso_handle);
}

void __cxa_bad_cast(void)
{
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x270F98ED8](a1);
}

char *__cxa_demangle(const char *lpmangled, char *lpout, size_t *lpoutlen, int *lpstatus)
{
  return (char *)MEMORY[0x270F98EE8](lpmangled, lpout, lpoutlen, lpstatus);
}

void __cxa_end_catch(void)
{
}

void __cxa_free_exception(void *a1)
{
}

void __cxa_guard_abort(__guard *a1)
{
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x270F98F10](a1);
}

void __cxa_guard_release(__guard *a1)
{
}

void __cxa_rethrow(void)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

void *__dynamic_cast(const void *lpsrc, const struct __class_type_info *lpstype, const struct __class_type_info *lpdtype, ptrdiff_t s2d)
{
  return (void *)MEMORY[0x270F98F30](lpsrc, lpstype, lpdtype, s2d);
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x270ED7E28](*(void *)&a1, a2);
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void bzero(void *a1, size_t a2)
{
}

void *__cdecl dispatch_get_specific(const void *key)
{
  return (void *)MEMORY[0x270ED9320](key);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x270ED9448](attr, frequency);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x270ED9460](label, attr);
}

void dispatch_queue_set_specific(dispatch_queue_t queue, const void *key, void *context, dispatch_function_t destructor)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

long double exp2(long double __x)
{
  MEMORY[0x270ED9860](__x);
  return result;
}

void free(void *a1)
{
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x270EDA468](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x270EDA470](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x270EDA488](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x270EDA498](__b, *(void *)&__c, __len);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x270F9A528](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x270F9A540]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x270F9A568](a1);
}

{
  MEMORY[0x270F9A570](context);
}

{
  return (void *)MEMORY[0x270F9A588]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A590](a1);
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x270F9A598](exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x270F9A5A8]();
}

void objc_copyStruct(void *dest, const void *src, ptrdiff_t size, BOOL atomic, BOOL hasStrong)
{
}

void objc_end_catch(void)
{
}

void objc_enumerationMutation(id obj)
{
}

void objc_exception_rethrow(void)
{
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x270F9A678](self, _cmd, offset, atomic);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x270F9A6E8](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x270F9A6F8]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x270F9A700]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x270F9A710]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x270F9A870](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x270F9A880](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A888](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A890](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x270F9A898](a1);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_atomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x270F9AA18](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x270F9AA20](obj);
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x270F9AA38](a1);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x270EDA9A0](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x270EDA9D0](oslog, type);
}

int sqlite3_bind_blob(sqlite3_stmt *a1, int a2, const void *a3, int n, void (__cdecl *a5)(void *))
{
  return MEMORY[0x270F9B490](a1, *(void *)&a2, a3, *(void *)&n, a5);
}

int sqlite3_bind_double(sqlite3_stmt *a1, int a2, double a3)
{
  return MEMORY[0x270F9B4A0](a1, *(void *)&a2, a3);
}

int sqlite3_bind_int(sqlite3_stmt *a1, int a2, int a3)
{
  return MEMORY[0x270F9B4A8](a1, *(void *)&a2, *(void *)&a3);
}

int sqlite3_bind_int64(sqlite3_stmt *a1, int a2, sqlite3_int64 a3)
{
  return MEMORY[0x270F9B4B0](a1, *(void *)&a2, a3);
}

int sqlite3_bind_null(sqlite3_stmt *a1, int a2)
{
  return MEMORY[0x270F9B4B8](a1, *(void *)&a2);
}

int sqlite3_bind_text(sqlite3_stmt *a1, int a2, const char *a3, int a4, void (__cdecl *a5)(void *))
{
  return MEMORY[0x270F9B4E0](a1, *(void *)&a2, a3, *(void *)&a4, a5);
}

int sqlite3_busy_timeout(sqlite3 *a1, int ms)
{
  return MEMORY[0x270F9B538](a1, *(void *)&ms);
}

int sqlite3_clear_bindings(sqlite3_stmt *a1)
{
  return MEMORY[0x270F9B550](a1);
}

int sqlite3_close_v2(sqlite3 *a1)
{
  return MEMORY[0x270F9B560](a1);
}

const void *__cdecl sqlite3_column_blob(sqlite3_stmt *a1, int iCol)
{
  return (const void *)MEMORY[0x270F9B568](a1, *(void *)&iCol);
}

int sqlite3_column_bytes(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x270F9B570](a1, *(void *)&iCol);
}

int sqlite3_column_count(sqlite3_stmt *pStmt)
{
  return MEMORY[0x270F9B580](pStmt);
}

double sqlite3_column_double(sqlite3_stmt *a1, int iCol)
{
  MEMORY[0x270F9B590](a1, *(void *)&iCol);
  return result;
}

int sqlite3_column_int(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x270F9B598](a1, *(void *)&iCol);
}

sqlite3_int64 sqlite3_column_int64(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x270F9B5A0](a1, *(void *)&iCol);
}

const char *__cdecl sqlite3_column_name(sqlite3_stmt *a1, int N)
{
  return (const char *)MEMORY[0x270F9B5A8](a1, *(void *)&N);
}

const unsigned __int8 *__cdecl sqlite3_column_text(sqlite3_stmt *a1, int iCol)
{
  return (const unsigned __int8 *)MEMORY[0x270F9B5C0](a1, *(void *)&iCol);
}

int sqlite3_column_type(sqlite3_stmt *a1, int iCol)
{
  return MEMORY[0x270F9B5D0](a1, *(void *)&iCol);
}

sqlite3 *__cdecl sqlite3_db_handle(sqlite3_stmt *a1)
{
  return (sqlite3 *)MEMORY[0x270F9B628](a1);
}

const char *__cdecl sqlite3_errmsg(sqlite3 *a1)
{
  return (const char *)MEMORY[0x270F9B658](a1);
}

int sqlite3_exec(sqlite3 *a1, const char *sql, int (__cdecl *callback)(void *, int, char **, char **), void *a4, char **errmsg)
{
  return MEMORY[0x270F9B668](a1, sql, callback, a4, errmsg);
}

int sqlite3_finalize(sqlite3_stmt *pStmt)
{
  return MEMORY[0x270F9B690](pStmt);
}

int sqlite3_open_v2(const char *filename, sqlite3 **ppDb, int flags, const char *zVfs)
{
  return MEMORY[0x270F9B710](filename, ppDb, *(void *)&flags, zVfs);
}

int sqlite3_prepare_v2(sqlite3 *db, const char *zSql, int nByte, sqlite3_stmt **ppStmt, const char **pzTail)
{
  return MEMORY[0x270F9B720](db, zSql, *(void *)&nByte, ppStmt, pzTail);
}

int sqlite3_reset(sqlite3_stmt *pStmt)
{
  return MEMORY[0x270F9B730](pStmt);
}

const char *__cdecl sqlite3_sql(sqlite3_stmt *pStmt)
{
  return (const char *)MEMORY[0x270F9B7F8](pStmt);
}

int sqlite3_step(sqlite3_stmt *a1)
{
  return MEMORY[0x270F9B800](a1);
}

int sqlite3_table_column_metadata(sqlite3 *db, const char *zDbName, const char *zTableName, const char *zColumnName, const char **pzDataType, const char **pzCollSeq, int *pNotNull, int *pPrimaryKey, int *pAutoinc)
{
  return MEMORY[0x270F9B828](db, zDbName, zTableName, zColumnName, pzDataType, pzCollSeq, pNotNull, pPrimaryKey);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x270EDB5B0](__s1, __s2);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x270EDB610](__s);
}

unint64_t strtoul(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x270EDB708](__str, __endptr, *(void *)&__base);
}

int usleep(useconds_t a1)
{
  return MEMORY[0x270EDB9E8](*(void *)&a1);
}

size_t wcslen(const __int32 *a1)
{
  return MEMORY[0x270EDBBA0](a1);
}