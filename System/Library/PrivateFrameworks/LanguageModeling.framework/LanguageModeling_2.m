void sub_19E475834(void *a1, uint64_t a2)
{
  *a1 = &unk_1EF0BC5A0;
  a1[1] = 72 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_19E4758C8(_Unwind_Exception *exception_object)
{
  if (v1[5])
  {
    uint64_t v5 = v1[3];
    v4 = (uint64_t *)v1[4];
    uint64_t v6 = *v4;
    *(void *)(v6 + 8) = *(void *)(v5 + 8);
    **(void **)(v5 + 8) = v6;
    v1[5] = 0;
    if (v4 != v2)
    {
      do
      {
        v7 = (uint64_t *)v4[1];
        operator delete(v4);
        v4 = v7;
      }
      while (v7 != v2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E475914()
{
  return 72;
}

void sub_19E47591C(void *a1)
{
  *a1 = &unk_1EF0BC5A0;
  v2 = a1 + 3;
  for (i = (uint64_t *)a1[4]; i != v2; i = (uint64_t *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x19F3BDCC0](v4, 0x1000C8077774924);
    }
  }
  if (a1[5])
  {
    uint64_t v6 = a1[3];
    uint64_t v5 = (uint64_t *)a1[4];
    uint64_t v7 = *v5;
    *(void *)(v7 + 8) = *(void *)(v6 + 8);
    **(void **)(v6 + 8) = v7;
    a1[5] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        uint64_t v5 = v8;
      }
      while (v8 != v2);
    }
  }
  JUMPOUT(0x19F3BDCF0);
}

void *sub_19E4759FC(void *a1)
{
  *a1 = &unk_1EF0BC5A0;
  v2 = a1 + 3;
  for (i = (uint64_t *)a1[4]; i != v2; i = (uint64_t *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x19F3BDCC0](v4, 0x1000C8077774924);
    }
  }
  if (a1[5])
  {
    uint64_t v6 = a1[3];
    uint64_t v5 = (uint64_t *)a1[4];
    uint64_t v7 = *v5;
    *(void *)(v7 + 8) = *(void *)(v6 + 8);
    **(void **)(v6 + 8) = v7;
    a1[5] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        uint64_t v5 = v8;
      }
      while (v8 != v2);
    }
  }
  return a1;
}

uint64_t sub_19E475ABC()
{
  return 64;
}

void sub_19E475AC4(void *a1)
{
  *a1 = &unk_1EF0BC2A8;
  a1[1] = &unk_1EF0BC5A0;
  v2 = a1 + 4;
  for (i = (uint64_t *)a1[5]; i != v2; i = (uint64_t *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x19F3BDCC0](v4, 0x1000C8077774924);
    }
  }
  if (a1[6])
  {
    uint64_t v6 = a1[4];
    uint64_t v5 = (uint64_t *)a1[5];
    uint64_t v7 = *v5;
    *(void *)(v7 + 8) = *(void *)(v6 + 8);
    **(void **)(v6 + 8) = v7;
    a1[6] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        uint64_t v5 = v8;
      }
      while (v8 != v2);
    }
  }
  JUMPOUT(0x19F3BDCF0);
}

void *sub_19E475BC4(void *a1)
{
  *a1 = &unk_1EF0BC2A8;
  a1[1] = &unk_1EF0BC5A0;
  v2 = a1 + 4;
  for (i = (uint64_t *)a1[5]; i != v2; i = (uint64_t *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x19F3BDCC0](v4, 0x1000C8077774924);
    }
  }
  if (a1[6])
  {
    uint64_t v6 = a1[4];
    uint64_t v5 = (uint64_t *)a1[5];
    uint64_t v7 = *v5;
    *(void *)(v7 + 8) = *(void *)(v6 + 8);
    **(void **)(v6 + 8) = v7;
    a1[6] = 0;
    if (v5 != v2)
    {
      do
      {
        v8 = (uint64_t *)v5[1];
        operator delete(v5);
        uint64_t v5 = v8;
      }
      while (v8 != v2);
    }
  }
  return a1;
}

void sub_19E475CA4(uint64_t *a1, void *__p, unint64_t a3)
{
  if (a3 == 2)
  {
    v9 = (unint64_t *)(*a1 + 16);
    unint64_t v8 = *v9;
    unint64_t v10 = *(void *)(*a1 + 24) - *v9;
    if (v10 <= 0x107)
    {
      uint64_t v29 = 0;
      sub_19E46BA20(v9, 33 - (v10 >> 3), (const double *)&v29);
      unint64_t v8 = *v9;
    }
    uint64_t v11 = *(void *)(v8 + 256);
    if (!v11) {
      operator new();
    }
    __p[4] = *(void *)(v11 + 56);
    *(void *)(v11 + 56) = __p;
  }
  else if (a3 == 1)
  {
    uint64_t v5 = (unint64_t *)(*a1 + 16);
    unint64_t v4 = *v5;
    unint64_t v6 = *(void *)(*a1 + 24) - *v5;
    if (v6 <= 0x87)
    {
      uint64_t v29 = 0;
      sub_19E46BA20(v5, 17 - (v6 >> 3), (const double *)&v29);
      unint64_t v4 = *v5;
    }
    uint64_t v7 = *(void *)(v4 + 128);
    if (!v7) {
      operator new();
    }
    __p[2] = *(void *)(v7 + 56);
    *(void *)(v7 + 56) = __p;
  }
  else if (a3 > 4)
  {
    if (a3 > 8)
    {
      if (a3 > 0x10)
      {
        if (a3 > 0x20)
        {
          if (a3 > 0x40)
          {
            operator delete(__p);
          }
          else
          {
            uint64_t v28 = sub_19E47666C(*a1);
            __p[128] = *(void *)(v28 + 56);
            *(void *)(v28 + 56) = __p;
          }
        }
        else
        {
          v25 = (unint64_t *)(*a1 + 16);
          unint64_t v24 = *v25;
          unint64_t v26 = *(void *)(*a1 + 24) - *v25;
          if (v26 >> 3 <= 0x200)
          {
            uint64_t v29 = 0;
            sub_19E46BA20(v25, 513 - (v26 >> 3), (const double *)&v29);
            unint64_t v24 = *v25;
          }
          uint64_t v27 = *(void *)(v24 + 4096);
          if (!v27) {
            operator new();
          }
          __p[64] = *(void *)(v27 + 56);
          *(void *)(v27 + 56) = __p;
        }
      }
      else
      {
        v21 = (unint64_t *)(*a1 + 16);
        unint64_t v20 = *v21;
        unint64_t v22 = *(void *)(*a1 + 24) - *v21;
        if (v22 <= 0x807)
        {
          uint64_t v29 = 0;
          sub_19E46BA20(v21, 257 - (v22 >> 3), (const double *)&v29);
          unint64_t v20 = *v21;
        }
        uint64_t v23 = *(void *)(v20 + 2048);
        if (!v23) {
          operator new();
        }
        __p[32] = *(void *)(v23 + 56);
        *(void *)(v23 + 56) = __p;
      }
    }
    else
    {
      v17 = (unint64_t *)(*a1 + 16);
      unint64_t v16 = *v17;
      unint64_t v18 = *(void *)(*a1 + 24) - *v17;
      if (v18 <= 0x407)
      {
        uint64_t v29 = 0;
        sub_19E46BA20(v17, 129 - (v18 >> 3), (const double *)&v29);
        unint64_t v16 = *v17;
      }
      uint64_t v19 = *(void *)(v16 + 1024);
      if (!v19) {
        operator new();
      }
      __p[16] = *(void *)(v19 + 56);
      *(void *)(v19 + 56) = __p;
    }
  }
  else
  {
    v13 = (unint64_t *)(*a1 + 16);
    unint64_t v12 = *v13;
    unint64_t v14 = *(void *)(*a1 + 24) - *v13;
    if (v14 <= 0x207)
    {
      uint64_t v29 = 0;
      sub_19E46BA20(v13, 65 - (v14 >> 3), (const double *)&v29);
      unint64_t v12 = *v13;
    }
    uint64_t v15 = *(void *)(v12 + 512);
    if (!v15) {
      operator new();
    }
    __p[8] = *(void *)(v15 + 56);
    *(void *)(v15 + 56) = __p;
  }
}

void sub_19E4760F4(_Unwind_Exception *a1)
{
  MEMORY[0x19F3BDCF0](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

void sub_19E47612C(void *a1, uint64_t a2)
{
  *a1 = &unk_1EF0BC5F0;
  a1[1] = 24 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_19E4761C0(_Unwind_Exception *exception_object)
{
  if (v1[5])
  {
    uint64_t v5 = v1[3];
    unint64_t v4 = (uint64_t *)v1[4];
    uint64_t v6 = *v4;
    *(void *)(v6 + 8) = *(void *)(v5 + 8);
    **(void **)(v5 + 8) = v6;
    v1[5] = 0;
    if (v4 != v2)
    {
      do
      {
        uint64_t v7 = (uint64_t *)v4[1];
        operator delete(v4);
        unint64_t v4 = v7;
      }
      while (v7 != v2);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_19E47620C(void *a1, uint64_t a2)
{
  *a1 = &unk_1EF0BC618;
  a1[1] = 40 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_19E4762A0(_Unwind_Exception *exception_object)
{
  if (v1[5])
  {
    uint64_t v5 = v1[3];
    unint64_t v4 = (uint64_t *)v1[4];
    uint64_t v6 = *v4;
    *(void *)(v6 + 8) = *(void *)(v5 + 8);
    **(void **)(v5 + 8) = v6;
    v1[5] = 0;
    if (v4 != v2)
    {
      do
      {
        uint64_t v7 = (uint64_t *)v4[1];
        operator delete(v4);
        unint64_t v4 = v7;
      }
      while (v7 != v2);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_19E4762EC(void *a1, uint64_t a2)
{
  *a1 = &unk_1EF0BC668;
  a1[1] = 72 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_19E476380(_Unwind_Exception *exception_object)
{
  if (v1[5])
  {
    uint64_t v5 = v1[3];
    unint64_t v4 = (uint64_t *)v1[4];
    uint64_t v6 = *v4;
    *(void *)(v6 + 8) = *(void *)(v5 + 8);
    **(void **)(v5 + 8) = v6;
    v1[5] = 0;
    if (v4 != v2)
    {
      do
      {
        uint64_t v7 = (uint64_t *)v4[1];
        operator delete(v4);
        unint64_t v4 = v7;
      }
      while (v7 != v2);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_19E4763CC(void *a1, uint64_t a2)
{
  *a1 = &unk_1EF0BC6B8;
  a1[1] = 136 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_19E476460(_Unwind_Exception *exception_object)
{
  if (v1[5])
  {
    uint64_t v5 = v1[3];
    unint64_t v4 = (uint64_t *)v1[4];
    uint64_t v6 = *v4;
    *(void *)(v6 + 8) = *(void *)(v5 + 8);
    **(void **)(v5 + 8) = v6;
    v1[5] = 0;
    if (v4 != v2)
    {
      do
      {
        uint64_t v7 = (uint64_t *)v4[1];
        operator delete(v4);
        unint64_t v4 = v7;
      }
      while (v7 != v2);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_19E4764AC(void *a1, uint64_t a2)
{
  *a1 = &unk_1EF0BC5C8;
  a1[1] = 264 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_19E476540(_Unwind_Exception *exception_object)
{
  if (v1[5])
  {
    uint64_t v5 = v1[3];
    unint64_t v4 = (uint64_t *)v1[4];
    uint64_t v6 = *v4;
    *(void *)(v6 + 8) = *(void *)(v5 + 8);
    **(void **)(v5 + 8) = v6;
    v1[5] = 0;
    if (v4 != v2)
    {
      do
      {
        uint64_t v7 = (uint64_t *)v4[1];
        operator delete(v4);
        unint64_t v4 = v7;
      }
      while (v7 != v2);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_19E47658C(void *a1, uint64_t a2)
{
  *a1 = &unk_1EF0BC640;
  a1[1] = 520 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  operator new[]();
}

void sub_19E476620(_Unwind_Exception *exception_object)
{
  if (v1[5])
  {
    uint64_t v5 = v1[3];
    unint64_t v4 = (uint64_t *)v1[4];
    uint64_t v6 = *v4;
    *(void *)(v6 + 8) = *(void *)(v5 + 8);
    **(void **)(v5 + 8) = v6;
    v1[5] = 0;
    if (v4 != v2)
    {
      do
      {
        uint64_t v7 = (uint64_t *)v4[1];
        operator delete(v4);
        unint64_t v4 = v7;
      }
      while (v7 != v2);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E47666C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  v2 = (uint64_t *)(a1 + 16);
  unint64_t v3 = *(void *)(a1 + 24) - v1;
  if (v3 >> 3 <= 0x400)
  {
    uint64_t v5 = 0;
    sub_19E46BA20((unint64_t *)(a1 + 16), 1025 - (v3 >> 3), (const double *)&v5);
    uint64_t v1 = *v2;
  }
  if (!*(void *)(v1 + 0x2000)) {
    operator new();
  }
  return *(void *)(v1 + 0x2000);
}

void sub_19E476790(_Unwind_Exception *a1)
{
  if (v1[6])
  {
    uint64_t v5 = v1[4];
    unint64_t v4 = (uint64_t *)v1[5];
    uint64_t v6 = *v4;
    *(void *)(v6 + 8) = *(void *)(v5 + 8);
    **(void **)(v5 + 8) = v6;
    v1[6] = 0;
    if (v4 != v2)
    {
      do
      {
        uint64_t v7 = (uint64_t *)v4[1];
        operator delete(v4);
        unint64_t v4 = v7;
      }
      while (v7 != v2);
    }
  }
  MEMORY[0x19F3BDCF0](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

uint64_t sub_19E4767F4()
{
  return 1032;
}

void sub_19E4767FC(void *a1)
{
  *a1 = &unk_1EF0BC690;
  v2 = a1 + 3;
  for (i = (uint64_t *)a1[4]; i != v2; i = (uint64_t *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x19F3BDCC0](v4, 0x1000C8077774924);
    }
  }
  if (a1[5])
  {
    uint64_t v6 = a1[3];
    uint64_t v5 = (uint64_t *)a1[4];
    uint64_t v7 = *v5;
    *(void *)(v7 + 8) = *(void *)(v6 + 8);
    **(void **)(v6 + 8) = v7;
    a1[5] = 0;
    if (v5 != v2)
    {
      do
      {
        unint64_t v8 = (uint64_t *)v5[1];
        operator delete(v5);
        uint64_t v5 = v8;
      }
      while (v8 != v2);
    }
  }
  JUMPOUT(0x19F3BDCF0);
}

void *sub_19E4768DC(void *a1)
{
  *a1 = &unk_1EF0BC690;
  v2 = a1 + 3;
  for (i = (uint64_t *)a1[4]; i != v2; i = (uint64_t *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x19F3BDCC0](v4, 0x1000C8077774924);
    }
  }
  if (a1[5])
  {
    uint64_t v6 = a1[3];
    uint64_t v5 = (uint64_t *)a1[4];
    uint64_t v7 = *v5;
    *(void *)(v7 + 8) = *(void *)(v6 + 8);
    **(void **)(v6 + 8) = v7;
    a1[5] = 0;
    if (v5 != v2)
    {
      do
      {
        unint64_t v8 = (uint64_t *)v5[1];
        operator delete(v5);
        uint64_t v5 = v8;
      }
      while (v8 != v2);
    }
  }
  return a1;
}

uint64_t sub_19E47699C()
{
  return 1024;
}

void sub_19E4769A4(void *a1)
{
  *a1 = &unk_1EF0BC398;
  a1[1] = &unk_1EF0BC690;
  v2 = a1 + 4;
  for (i = (uint64_t *)a1[5]; i != v2; i = (uint64_t *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x19F3BDCC0](v4, 0x1000C8077774924);
    }
  }
  if (a1[6])
  {
    uint64_t v6 = a1[4];
    uint64_t v5 = (uint64_t *)a1[5];
    uint64_t v7 = *v5;
    *(void *)(v7 + 8) = *(void *)(v6 + 8);
    **(void **)(v6 + 8) = v7;
    a1[6] = 0;
    if (v5 != v2)
    {
      do
      {
        unint64_t v8 = (uint64_t *)v5[1];
        operator delete(v5);
        uint64_t v5 = v8;
      }
      while (v8 != v2);
    }
  }
  JUMPOUT(0x19F3BDCF0);
}

void *sub_19E476AA4(void *a1)
{
  *a1 = &unk_1EF0BC398;
  a1[1] = &unk_1EF0BC690;
  v2 = a1 + 4;
  for (i = (uint64_t *)a1[5]; i != v2; i = (uint64_t *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x19F3BDCC0](v4, 0x1000C8077774924);
    }
  }
  if (a1[6])
  {
    uint64_t v6 = a1[4];
    uint64_t v5 = (uint64_t *)a1[5];
    uint64_t v7 = *v5;
    *(void *)(v7 + 8) = *(void *)(v6 + 8);
    **(void **)(v6 + 8) = v7;
    a1[6] = 0;
    if (v5 != v2)
    {
      do
      {
        unint64_t v8 = (uint64_t *)v5[1];
        operator delete(v5);
        uint64_t v5 = v8;
      }
      while (v8 != v2);
    }
  }
  return a1;
}

uint64_t sub_19E476B84()
{
  return 520;
}

void sub_19E476B8C(void *a1)
{
  *a1 = &unk_1EF0BC640;
  v2 = a1 + 3;
  for (i = (uint64_t *)a1[4]; i != v2; i = (uint64_t *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x19F3BDCC0](v4, 0x1000C8077774924);
    }
  }
  if (a1[5])
  {
    uint64_t v6 = a1[3];
    uint64_t v5 = (uint64_t *)a1[4];
    uint64_t v7 = *v5;
    *(void *)(v7 + 8) = *(void *)(v6 + 8);
    **(void **)(v6 + 8) = v7;
    a1[5] = 0;
    if (v5 != v2)
    {
      do
      {
        unint64_t v8 = (uint64_t *)v5[1];
        operator delete(v5);
        uint64_t v5 = v8;
      }
      while (v8 != v2);
    }
  }
  JUMPOUT(0x19F3BDCF0);
}

void *sub_19E476C6C(void *a1)
{
  *a1 = &unk_1EF0BC640;
  v2 = a1 + 3;
  for (i = (uint64_t *)a1[4]; i != v2; i = (uint64_t *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x19F3BDCC0](v4, 0x1000C8077774924);
    }
  }
  if (a1[5])
  {
    uint64_t v6 = a1[3];
    uint64_t v5 = (uint64_t *)a1[4];
    uint64_t v7 = *v5;
    *(void *)(v7 + 8) = *(void *)(v6 + 8);
    **(void **)(v6 + 8) = v7;
    a1[5] = 0;
    if (v5 != v2)
    {
      do
      {
        unint64_t v8 = (uint64_t *)v5[1];
        operator delete(v5);
        uint64_t v5 = v8;
      }
      while (v8 != v2);
    }
  }
  return a1;
}

uint64_t sub_19E476D2C()
{
  return 512;
}

void sub_19E476D34(void *a1)
{
  *a1 = &unk_1EF0BC348;
  a1[1] = &unk_1EF0BC640;
  v2 = a1 + 4;
  for (i = (uint64_t *)a1[5]; i != v2; i = (uint64_t *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x19F3BDCC0](v4, 0x1000C8077774924);
    }
  }
  if (a1[6])
  {
    uint64_t v6 = a1[4];
    uint64_t v5 = (uint64_t *)a1[5];
    uint64_t v7 = *v5;
    *(void *)(v7 + 8) = *(void *)(v6 + 8);
    **(void **)(v6 + 8) = v7;
    a1[6] = 0;
    if (v5 != v2)
    {
      do
      {
        unint64_t v8 = (uint64_t *)v5[1];
        operator delete(v5);
        uint64_t v5 = v8;
      }
      while (v8 != v2);
    }
  }
  JUMPOUT(0x19F3BDCF0);
}

void *sub_19E476E34(void *a1)
{
  *a1 = &unk_1EF0BC348;
  a1[1] = &unk_1EF0BC640;
  v2 = a1 + 4;
  for (i = (uint64_t *)a1[5]; i != v2; i = (uint64_t *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x19F3BDCC0](v4, 0x1000C8077774924);
    }
  }
  if (a1[6])
  {
    uint64_t v6 = a1[4];
    uint64_t v5 = (uint64_t *)a1[5];
    uint64_t v7 = *v5;
    *(void *)(v7 + 8) = *(void *)(v6 + 8);
    **(void **)(v6 + 8) = v7;
    a1[6] = 0;
    if (v5 != v2)
    {
      do
      {
        unint64_t v8 = (uint64_t *)v5[1];
        operator delete(v5);
        uint64_t v5 = v8;
      }
      while (v8 != v2);
    }
  }
  return a1;
}

uint64_t sub_19E476F14()
{
  return 264;
}

void sub_19E476F1C(void *a1)
{
  *a1 = &unk_1EF0BC5C8;
  v2 = a1 + 3;
  for (i = (uint64_t *)a1[4]; i != v2; i = (uint64_t *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x19F3BDCC0](v4, 0x1000C8077774924);
    }
  }
  if (a1[5])
  {
    uint64_t v6 = a1[3];
    uint64_t v5 = (uint64_t *)a1[4];
    uint64_t v7 = *v5;
    *(void *)(v7 + 8) = *(void *)(v6 + 8);
    **(void **)(v6 + 8) = v7;
    a1[5] = 0;
    if (v5 != v2)
    {
      do
      {
        unint64_t v8 = (uint64_t *)v5[1];
        operator delete(v5);
        uint64_t v5 = v8;
      }
      while (v8 != v2);
    }
  }
  JUMPOUT(0x19F3BDCF0);
}

void *sub_19E476FFC(void *a1)
{
  *a1 = &unk_1EF0BC5C8;
  v2 = a1 + 3;
  for (i = (uint64_t *)a1[4]; i != v2; i = (uint64_t *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x19F3BDCC0](v4, 0x1000C8077774924);
    }
  }
  if (a1[5])
  {
    uint64_t v6 = a1[3];
    uint64_t v5 = (uint64_t *)a1[4];
    uint64_t v7 = *v5;
    *(void *)(v7 + 8) = *(void *)(v6 + 8);
    **(void **)(v6 + 8) = v7;
    a1[5] = 0;
    if (v5 != v2)
    {
      do
      {
        unint64_t v8 = (uint64_t *)v5[1];
        operator delete(v5);
        uint64_t v5 = v8;
      }
      while (v8 != v2);
    }
  }
  return a1;
}

uint64_t sub_19E4770BC()
{
  return 256;
}

void sub_19E4770C4(void *a1)
{
  *a1 = &unk_1EF0BC2D0;
  a1[1] = &unk_1EF0BC5C8;
  v2 = a1 + 4;
  for (i = (uint64_t *)a1[5]; i != v2; i = (uint64_t *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x19F3BDCC0](v4, 0x1000C8077774924);
    }
  }
  if (a1[6])
  {
    uint64_t v6 = a1[4];
    uint64_t v5 = (uint64_t *)a1[5];
    uint64_t v7 = *v5;
    *(void *)(v7 + 8) = *(void *)(v6 + 8);
    **(void **)(v6 + 8) = v7;
    a1[6] = 0;
    if (v5 != v2)
    {
      do
      {
        unint64_t v8 = (uint64_t *)v5[1];
        operator delete(v5);
        uint64_t v5 = v8;
      }
      while (v8 != v2);
    }
  }
  JUMPOUT(0x19F3BDCF0);
}

void *sub_19E4771C4(void *a1)
{
  *a1 = &unk_1EF0BC2D0;
  a1[1] = &unk_1EF0BC5C8;
  v2 = a1 + 4;
  for (i = (uint64_t *)a1[5]; i != v2; i = (uint64_t *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x19F3BDCC0](v4, 0x1000C8077774924);
    }
  }
  if (a1[6])
  {
    uint64_t v6 = a1[4];
    uint64_t v5 = (uint64_t *)a1[5];
    uint64_t v7 = *v5;
    *(void *)(v7 + 8) = *(void *)(v6 + 8);
    **(void **)(v6 + 8) = v7;
    a1[6] = 0;
    if (v5 != v2)
    {
      do
      {
        unint64_t v8 = (uint64_t *)v5[1];
        operator delete(v5);
        uint64_t v5 = v8;
      }
      while (v8 != v2);
    }
  }
  return a1;
}

uint64_t sub_19E4772A4()
{
  return 136;
}

void sub_19E4772AC(void *a1)
{
  *a1 = &unk_1EF0BC6B8;
  v2 = a1 + 3;
  for (i = (uint64_t *)a1[4]; i != v2; i = (uint64_t *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x19F3BDCC0](v4, 0x1000C8077774924);
    }
  }
  if (a1[5])
  {
    uint64_t v6 = a1[3];
    uint64_t v5 = (uint64_t *)a1[4];
    uint64_t v7 = *v5;
    *(void *)(v7 + 8) = *(void *)(v6 + 8);
    **(void **)(v6 + 8) = v7;
    a1[5] = 0;
    if (v5 != v2)
    {
      do
      {
        unint64_t v8 = (uint64_t *)v5[1];
        operator delete(v5);
        uint64_t v5 = v8;
      }
      while (v8 != v2);
    }
  }
  JUMPOUT(0x19F3BDCF0);
}

void *sub_19E47738C(void *a1)
{
  *a1 = &unk_1EF0BC6B8;
  v2 = a1 + 3;
  for (i = (uint64_t *)a1[4]; i != v2; i = (uint64_t *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x19F3BDCC0](v4, 0x1000C8077774924);
    }
  }
  if (a1[5])
  {
    uint64_t v6 = a1[3];
    uint64_t v5 = (uint64_t *)a1[4];
    uint64_t v7 = *v5;
    *(void *)(v7 + 8) = *(void *)(v6 + 8);
    **(void **)(v6 + 8) = v7;
    a1[5] = 0;
    if (v5 != v2)
    {
      do
      {
        unint64_t v8 = (uint64_t *)v5[1];
        operator delete(v5);
        uint64_t v5 = v8;
      }
      while (v8 != v2);
    }
  }
  return a1;
}

uint64_t sub_19E47744C()
{
  return 128;
}

void sub_19E477454(void *a1)
{
  *a1 = &unk_1EF0BC3C0;
  a1[1] = &unk_1EF0BC6B8;
  v2 = a1 + 4;
  for (i = (uint64_t *)a1[5]; i != v2; i = (uint64_t *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x19F3BDCC0](v4, 0x1000C8077774924);
    }
  }
  if (a1[6])
  {
    uint64_t v6 = a1[4];
    uint64_t v5 = (uint64_t *)a1[5];
    uint64_t v7 = *v5;
    *(void *)(v7 + 8) = *(void *)(v6 + 8);
    **(void **)(v6 + 8) = v7;
    a1[6] = 0;
    if (v5 != v2)
    {
      do
      {
        unint64_t v8 = (uint64_t *)v5[1];
        operator delete(v5);
        uint64_t v5 = v8;
      }
      while (v8 != v2);
    }
  }
  JUMPOUT(0x19F3BDCF0);
}

void *sub_19E477554(void *a1)
{
  *a1 = &unk_1EF0BC3C0;
  a1[1] = &unk_1EF0BC6B8;
  v2 = a1 + 4;
  for (i = (uint64_t *)a1[5]; i != v2; i = (uint64_t *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x19F3BDCC0](v4, 0x1000C8077774924);
    }
  }
  if (a1[6])
  {
    uint64_t v6 = a1[4];
    uint64_t v5 = (uint64_t *)a1[5];
    uint64_t v7 = *v5;
    *(void *)(v7 + 8) = *(void *)(v6 + 8);
    **(void **)(v6 + 8) = v7;
    a1[6] = 0;
    if (v5 != v2)
    {
      do
      {
        unint64_t v8 = (uint64_t *)v5[1];
        operator delete(v5);
        uint64_t v5 = v8;
      }
      while (v8 != v2);
    }
  }
  return a1;
}

uint64_t sub_19E477634()
{
  return 72;
}

void sub_19E47763C(void *a1)
{
  *a1 = &unk_1EF0BC668;
  v2 = a1 + 3;
  for (i = (uint64_t *)a1[4]; i != v2; i = (uint64_t *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x19F3BDCC0](v4, 0x1000C8077774924);
    }
  }
  if (a1[5])
  {
    uint64_t v6 = a1[3];
    uint64_t v5 = (uint64_t *)a1[4];
    uint64_t v7 = *v5;
    *(void *)(v7 + 8) = *(void *)(v6 + 8);
    **(void **)(v6 + 8) = v7;
    a1[5] = 0;
    if (v5 != v2)
    {
      do
      {
        unint64_t v8 = (uint64_t *)v5[1];
        operator delete(v5);
        uint64_t v5 = v8;
      }
      while (v8 != v2);
    }
  }
  JUMPOUT(0x19F3BDCF0);
}

void *sub_19E47771C(void *a1)
{
  *a1 = &unk_1EF0BC668;
  v2 = a1 + 3;
  for (i = (uint64_t *)a1[4]; i != v2; i = (uint64_t *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x19F3BDCC0](v4, 0x1000C8077774924);
    }
  }
  if (a1[5])
  {
    uint64_t v6 = a1[3];
    uint64_t v5 = (uint64_t *)a1[4];
    uint64_t v7 = *v5;
    *(void *)(v7 + 8) = *(void *)(v6 + 8);
    **(void **)(v6 + 8) = v7;
    a1[5] = 0;
    if (v5 != v2)
    {
      do
      {
        unint64_t v8 = (uint64_t *)v5[1];
        operator delete(v5);
        uint64_t v5 = v8;
      }
      while (v8 != v2);
    }
  }
  return a1;
}

uint64_t sub_19E4777DC()
{
  return 64;
}

void sub_19E4777E4(void *a1)
{
  *a1 = &unk_1EF0BC370;
  a1[1] = &unk_1EF0BC668;
  v2 = a1 + 4;
  for (i = (uint64_t *)a1[5]; i != v2; i = (uint64_t *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x19F3BDCC0](v4, 0x1000C8077774924);
    }
  }
  if (a1[6])
  {
    uint64_t v6 = a1[4];
    uint64_t v5 = (uint64_t *)a1[5];
    uint64_t v7 = *v5;
    *(void *)(v7 + 8) = *(void *)(v6 + 8);
    **(void **)(v6 + 8) = v7;
    a1[6] = 0;
    if (v5 != v2)
    {
      do
      {
        unint64_t v8 = (uint64_t *)v5[1];
        operator delete(v5);
        uint64_t v5 = v8;
      }
      while (v8 != v2);
    }
  }
  JUMPOUT(0x19F3BDCF0);
}

void *sub_19E4778E4(void *a1)
{
  *a1 = &unk_1EF0BC370;
  a1[1] = &unk_1EF0BC668;
  v2 = a1 + 4;
  for (i = (uint64_t *)a1[5]; i != v2; i = (uint64_t *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x19F3BDCC0](v4, 0x1000C8077774924);
    }
  }
  if (a1[6])
  {
    uint64_t v6 = a1[4];
    uint64_t v5 = (uint64_t *)a1[5];
    uint64_t v7 = *v5;
    *(void *)(v7 + 8) = *(void *)(v6 + 8);
    **(void **)(v6 + 8) = v7;
    a1[6] = 0;
    if (v5 != v2)
    {
      do
      {
        unint64_t v8 = (uint64_t *)v5[1];
        operator delete(v5);
        uint64_t v5 = v8;
      }
      while (v8 != v2);
    }
  }
  return a1;
}

uint64_t sub_19E4779C4()
{
  return 40;
}

void sub_19E4779CC(void *a1)
{
  *a1 = &unk_1EF0BC618;
  v2 = a1 + 3;
  for (i = (uint64_t *)a1[4]; i != v2; i = (uint64_t *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x19F3BDCC0](v4, 0x1000C8077774924);
    }
  }
  if (a1[5])
  {
    uint64_t v6 = a1[3];
    uint64_t v5 = (uint64_t *)a1[4];
    uint64_t v7 = *v5;
    *(void *)(v7 + 8) = *(void *)(v6 + 8);
    **(void **)(v6 + 8) = v7;
    a1[5] = 0;
    if (v5 != v2)
    {
      do
      {
        unint64_t v8 = (uint64_t *)v5[1];
        operator delete(v5);
        uint64_t v5 = v8;
      }
      while (v8 != v2);
    }
  }
  JUMPOUT(0x19F3BDCF0);
}

void *sub_19E477AAC(void *a1)
{
  *a1 = &unk_1EF0BC618;
  v2 = a1 + 3;
  for (i = (uint64_t *)a1[4]; i != v2; i = (uint64_t *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x19F3BDCC0](v4, 0x1000C8077774924);
    }
  }
  if (a1[5])
  {
    uint64_t v6 = a1[3];
    uint64_t v5 = (uint64_t *)a1[4];
    uint64_t v7 = *v5;
    *(void *)(v7 + 8) = *(void *)(v6 + 8);
    **(void **)(v6 + 8) = v7;
    a1[5] = 0;
    if (v5 != v2)
    {
      do
      {
        unint64_t v8 = (uint64_t *)v5[1];
        operator delete(v5);
        uint64_t v5 = v8;
      }
      while (v8 != v2);
    }
  }
  return a1;
}

uint64_t sub_19E477B6C()
{
  return 32;
}

void sub_19E477B74(void *a1)
{
  *a1 = &unk_1EF0BC320;
  a1[1] = &unk_1EF0BC618;
  v2 = a1 + 4;
  for (i = (uint64_t *)a1[5]; i != v2; i = (uint64_t *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x19F3BDCC0](v4, 0x1000C8077774924);
    }
  }
  if (a1[6])
  {
    uint64_t v6 = a1[4];
    uint64_t v5 = (uint64_t *)a1[5];
    uint64_t v7 = *v5;
    *(void *)(v7 + 8) = *(void *)(v6 + 8);
    **(void **)(v6 + 8) = v7;
    a1[6] = 0;
    if (v5 != v2)
    {
      do
      {
        unint64_t v8 = (uint64_t *)v5[1];
        operator delete(v5);
        uint64_t v5 = v8;
      }
      while (v8 != v2);
    }
  }
  JUMPOUT(0x19F3BDCF0);
}

void *sub_19E477C74(void *a1)
{
  *a1 = &unk_1EF0BC320;
  a1[1] = &unk_1EF0BC618;
  v2 = a1 + 4;
  for (i = (uint64_t *)a1[5]; i != v2; i = (uint64_t *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x19F3BDCC0](v4, 0x1000C8077774924);
    }
  }
  if (a1[6])
  {
    uint64_t v6 = a1[4];
    uint64_t v5 = (uint64_t *)a1[5];
    uint64_t v7 = *v5;
    *(void *)(v7 + 8) = *(void *)(v6 + 8);
    **(void **)(v6 + 8) = v7;
    a1[6] = 0;
    if (v5 != v2)
    {
      do
      {
        unint64_t v8 = (uint64_t *)v5[1];
        operator delete(v5);
        uint64_t v5 = v8;
      }
      while (v8 != v2);
    }
  }
  return a1;
}

uint64_t sub_19E477D54()
{
  return 24;
}

void sub_19E477D5C(void *a1)
{
  *a1 = &unk_1EF0BC5F0;
  v2 = a1 + 3;
  for (i = (uint64_t *)a1[4]; i != v2; i = (uint64_t *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x19F3BDCC0](v4, 0x1000C8077774924);
    }
  }
  if (a1[5])
  {
    uint64_t v6 = a1[3];
    uint64_t v5 = (uint64_t *)a1[4];
    uint64_t v7 = *v5;
    *(void *)(v7 + 8) = *(void *)(v6 + 8);
    **(void **)(v6 + 8) = v7;
    a1[5] = 0;
    if (v5 != v2)
    {
      do
      {
        unint64_t v8 = (uint64_t *)v5[1];
        operator delete(v5);
        uint64_t v5 = v8;
      }
      while (v8 != v2);
    }
  }
  JUMPOUT(0x19F3BDCF0);
}

void *sub_19E477E3C(void *a1)
{
  *a1 = &unk_1EF0BC5F0;
  v2 = a1 + 3;
  for (i = (uint64_t *)a1[4]; i != v2; i = (uint64_t *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x19F3BDCC0](v4, 0x1000C8077774924);
    }
  }
  if (a1[5])
  {
    uint64_t v6 = a1[3];
    uint64_t v5 = (uint64_t *)a1[4];
    uint64_t v7 = *v5;
    *(void *)(v7 + 8) = *(void *)(v6 + 8);
    **(void **)(v6 + 8) = v7;
    a1[5] = 0;
    if (v5 != v2)
    {
      do
      {
        unint64_t v8 = (uint64_t *)v5[1];
        operator delete(v5);
        uint64_t v5 = v8;
      }
      while (v8 != v2);
    }
  }
  return a1;
}

uint64_t sub_19E477EFC()
{
  return 16;
}

void sub_19E477F04(void *a1)
{
  *a1 = &unk_1EF0BC2F8;
  a1[1] = &unk_1EF0BC5F0;
  v2 = a1 + 4;
  for (i = (uint64_t *)a1[5]; i != v2; i = (uint64_t *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x19F3BDCC0](v4, 0x1000C8077774924);
    }
  }
  if (a1[6])
  {
    uint64_t v6 = a1[4];
    uint64_t v5 = (uint64_t *)a1[5];
    uint64_t v7 = *v5;
    *(void *)(v7 + 8) = *(void *)(v6 + 8);
    **(void **)(v6 + 8) = v7;
    a1[6] = 0;
    if (v5 != v2)
    {
      do
      {
        unint64_t v8 = (uint64_t *)v5[1];
        operator delete(v5);
        uint64_t v5 = v8;
      }
      while (v8 != v2);
    }
  }
  JUMPOUT(0x19F3BDCF0);
}

void *sub_19E478004(void *a1)
{
  *a1 = &unk_1EF0BC2F8;
  a1[1] = &unk_1EF0BC5F0;
  v2 = a1 + 4;
  for (i = (uint64_t *)a1[5]; i != v2; i = (uint64_t *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x19F3BDCC0](v4, 0x1000C8077774924);
    }
  }
  if (a1[6])
  {
    uint64_t v6 = a1[4];
    uint64_t v5 = (uint64_t *)a1[5];
    uint64_t v7 = *v5;
    *(void *)(v7 + 8) = *(void *)(v6 + 8);
    **(void **)(v6 + 8) = v7;
    a1[6] = 0;
    if (v5 != v2)
    {
      do
      {
        unint64_t v8 = (uint64_t *)v5[1];
        operator delete(v5);
        uint64_t v5 = v8;
      }
      while (v8 != v2);
    }
  }
  return a1;
}

uint64_t sub_19E4780E4(uint64_t a1, int a2)
{
  int v42 = a2;
  uint64_t v3 = a2;
  uint64_t v4 = *(char **)(a1 + 8);
  uint64_t v5 = *(char **)(a1 + 16);
  unint64_t v6 = (v5 - v4) >> 3;
  if (v6 > a2)
  {
    uint64_t v7 = *(void *)&v4[8 * a2];
    if (v7) {
      return v7;
    }
    goto LABEL_44;
  }
  unint64_t v8 = a2 + 1;
  uint64_t v40 = 0;
  unint64_t v9 = v8 - v6;
  if (v8 <= v6)
  {
    if (a2 + 1 >= v6) {
      goto LABEL_44;
    }
    v30 = &v4[8 * v8];
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 24);
    if (v9 > (v10 - (uint64_t)v5) >> 3)
    {
      if (a2 <= -2) {
        sub_19E37C7C4();
      }
      uint64_t v11 = v10 - (void)v4;
      uint64_t v12 = v11 >> 2;
      if (v11 >> 2 <= v8) {
        uint64_t v12 = a2 + 1;
      }
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v12;
      }
      if (v13 >> 61) {
        sub_19E37C2B8();
      }
      unint64_t v14 = operator new(8 * v13);
      uint64_t v15 = &v14[8 * v6];
      unint64_t v16 = &v14[8 * v8];
      unint64_t v17 = (v3 - v6) & 0x1FFFFFFFFFFFFFFFLL;
      unint64_t v18 = v15;
      if (v17 >= 0x13)
      {
        if (v15 >= (void *)v41 || (unint64_t v18 = &v14[8 * v6], &v14[8 * v9 + v5 - v4] <= (unsigned char *)&v40))
        {
          uint64_t v19 = (v17 + 1) & 0x3FFFFFFFFFFFFFFCLL;
          unint64_t v20 = &v14[8 * v6];
          uint64_t v21 = v19;
          do
          {
            *unint64_t v20 = 0uLL;
            v20[1] = 0uLL;
            v20 += 2;
            v21 -= 4;
          }
          while (v21);
          if (v17 + 1 == v19) {
            goto LABEL_22;
          }
          unint64_t v18 = &v15[v19];
        }
      }
      uint64_t v22 = v40;
      do
        *v18++ = v22;
      while (v18 != v16);
LABEL_22:
      if (v5 == v4)
      {
        uint64_t v4 = v5;
      }
      else
      {
        unint64_t v23 = v5 - v4 - 8;
        if (v23 < 0x58) {
          goto LABEL_51;
        }
        if ((unint64_t)(v4 - v14) < 0x20) {
          goto LABEL_51;
        }
        uint64_t v24 = (v23 >> 3) + 1;
        v25 = &v14[8 * v6 - 16];
        unint64_t v26 = v5 - 16;
        uint64_t v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v28 = *(_OWORD *)v26;
          *(v25 - 1) = *((_OWORD *)v26 - 1);
          _OWORD *v25 = v28;
          v25 -= 2;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        v15 -= v24 & 0x3FFFFFFFFFFFFFFCLL;
        v5 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_51:
          do
          {
            uint64_t v29 = *((void *)v5 - 1);
            v5 -= 8;
            *--uint64_t v15 = v29;
          }
          while (v5 != v4);
          uint64_t v4 = *(char **)(a1 + 8);
        }
      }
      *(void *)(a1 + 8) = v15;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = &v14[8 * v13];
      if (v4) {
        operator delete(v4);
      }
      goto LABEL_44;
    }
    v30 = &v5[8 * v9];
    unint64_t v31 = (a2 - v6) & 0x1FFFFFFFFFFFFFFFLL;
    if (v31 >= 0xF && (v5 >= v41 || v30 <= (char *)&v40))
    {
      unint64_t v32 = v31 + 1;
      v33 = v5;
      uint64_t v34 = v32 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        *(_OWORD *)v33 = 0uLL;
        *((_OWORD *)v33 + 1) = 0uLL;
        v33 += 32;
        v34 -= 4;
      }
      while (v34);
      if (v32 == (v32 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_40;
      }
      v5 += 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
    }
    do
    {
      *(void *)uint64_t v5 = 0;
      v5 += 8;
    }
    while (v5 != v30);
  }
LABEL_40:
  *(void *)(a1 + 16) = v30;
LABEL_44:
  uint64_t v7 = sub_19E4783D8(a1 + 72);
  *(_DWORD *)uint64_t v7 = 2139095039;
  *(_OWORD *)(v7 + 8) = 0u;
  *(_OWORD *)(v7 + 24) = 0u;
  *(void *)(v7 + 40) = 0;
  uint64_t v35 = *(void *)(a1 + 80);
  *(void *)(v7 + 48) = v35;
  ++*(void *)(v35 + 8);
  *(void *)(v7 + 56) = 0;
  *(void *)(*(void *)(a1 + 8) + 8 * v3) = v7;
  if (*(unsigned char *)a1)
  {
    v36 = (void *)sub_19E478598(*(void **)(a1 + 56), &v42);
    uint64_t v38 = *(void *)(a1 + 32);
    v37 = (void *)(a1 + 32);
    void *v36 = v38;
    v36[1] = v37;
    *(void *)(v38 + 8) = v36;
    void *v37 = v36;
    ++v37[2];
  }
  return v7;
}

uint64_t sub_19E4783D8(uint64_t a1)
{
  v2 = (unint64_t *)(*(void *)a1 + 16);
  unint64_t v1 = *v2;
  unint64_t v3 = *(void *)(*(void *)a1 + 24) - *v2;
  if (v3 <= 0x207)
  {
    uint64_t v9 = 0;
    sub_19E46BA20(v2, 65 - (v3 >> 3), (const double *)&v9);
    unint64_t v1 = *v2;
  }
  uint64_t v4 = *(void **)(v1 + 512);
  if (!v4) {
    operator new();
  }
  uint64_t v5 = v4[7];
  if (v5)
  {
    v4[7] = *(void *)(v5 + 64);
  }
  else
  {
    unint64_t v6 = v4[2];
    if (v6 <= 0x11F) {
      operator new[]();
    }
    uint64_t v7 = v4[3];
    if (v7 + 72 > v6) {
      operator new[]();
    }
    uint64_t v5 = *(void *)(v4[5] + 16) + v7;
    v4[3] = v7 + 72;
    *(void *)(v5 + 64) = 0;
  }
  return v5;
}

void sub_19E478574(_Unwind_Exception *a1)
{
  MEMORY[0x19F3BDCF0](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

uint64_t sub_19E478598(void *a1, _DWORD *a2)
{
  a1[1] += 2;
  uint64_t v5 = a1 + 2;
  uint64_t v4 = a1[2];
  unint64_t v6 = a1[3] - v4;
  if (v6 <= 0xC7)
  {
    uint64_t v22 = 0;
    sub_19E46BA20(a1 + 2, 25 - (v6 >> 3), (const double *)&v22);
    uint64_t v4 = *v5;
  }
  uint64_t v7 = *(void **)(v4 + 192);
  if (!v7) {
    operator new();
  }
  uint64_t v8 = v7[7];
  if (v8)
  {
    v7[7] = *(void *)(v8 + 24);
  }
  else
  {
    unint64_t v9 = v7[2];
    if (v9 <= 0x7F) {
      operator new[]();
    }
    uint64_t v10 = v7[3];
    if (v10 + 32 > v9) {
      operator new[]();
    }
    uint64_t v8 = *(void *)(v7[5] + 16) + v10;
    v7[3] = v10 + 32;
    *(void *)(v8 + 24) = 0;
  }
  uint64_t v11 = a1[1] - 1;
  a1[1] = v11;
  if (!v11)
  {
    uint64_t v12 = (void *)a1[2];
    unint64_t v13 = (unsigned char *)a1[3];
    if (v13 == (unsigned char *)v12)
    {
      uint64_t v12 = (void *)a1[3];
    }
    else
    {
      unint64_t v14 = 0;
      do
      {
        uint64_t v15 = v12[v14];
        if (v15)
        {
          (*(void (**)(void))(*(void *)v15 + 8))(v12[v14]);
          uint64_t v12 = (void *)a1[2];
          unint64_t v13 = (unsigned char *)a1[3];
        }
        ++v14;
      }
      while (v14 < (v13 - (unsigned char *)v12) >> 3);
    }
    if (v12)
    {
      a1[3] = v12;
      operator delete(v12);
    }
    MEMORY[0x19F3BDCF0](a1, 0x1080C40B69A5871);
    uint64_t v11 = a1[1];
  }
  *(void *)uint64_t v8 = 0;
  *(void *)(v8 + 8) = 0;
  *(_DWORD *)(v8 + 16) = *a2;
  uint64_t v16 = v11 - 1;
  a1[1] = v16;
  if (!v16)
  {
    unint64_t v17 = (void *)a1[2];
    unint64_t v18 = (unsigned char *)a1[3];
    if (v18 == (unsigned char *)v17)
    {
      unint64_t v17 = (void *)a1[3];
    }
    else
    {
      unint64_t v19 = 0;
      do
      {
        uint64_t v20 = v17[v19];
        if (v20)
        {
          (*(void (**)(void))(*(void *)v20 + 8))(v17[v19]);
          unint64_t v17 = (void *)a1[2];
          unint64_t v18 = (unsigned char *)a1[3];
        }
        ++v19;
      }
      while (v19 < (v18 - (unsigned char *)v17) >> 3);
    }
    if (v17)
    {
      a1[3] = v17;
      operator delete(v17);
    }
    MEMORY[0x19F3BDCF0](a1, 0x1080C40B69A5871);
  }
  return v8;
}

void sub_19E478884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  MEMORY[0x19F3BDCF0](v10, 0x10A1C40E79ACBF4);
  uint64_t v12 = v9[1] - 1;
  v9[1] = v12;
  if (!v12)
  {
    unint64_t v13 = (void *)v9[2];
    unint64_t v14 = (unsigned char *)v9[3];
    if (v14 == (unsigned char *)v13)
    {
      unint64_t v13 = (void *)v9[3];
    }
    else
    {
      unint64_t v15 = 0;
      do
      {
        uint64_t v16 = v13[v15];
        if (v16)
        {
          (*(void (**)(void))(*(void *)v16 + 8))(v13[v15]);
          unint64_t v13 = (void *)v9[2];
          unint64_t v14 = (unsigned char *)v9[3];
        }
        ++v15;
      }
      while (v15 < (v14 - (unsigned char *)v13) >> 3);
    }
    if (v13)
    {
      v9[3] = v13;
      operator delete(v13);
    }
    MEMORY[0x19F3BDCF0](v9, 0x1080C40B69A5871);
  }
  sub_19E47894C(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_19E47894C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 8) - 1;
  *(void *)(*a1 + 8) = v3;
  if (!v3)
  {
    uint64_t v4 = *(void **)(v2 + 16);
    uint64_t v5 = *(unsigned char **)(v2 + 24);
    if (v5 == (unsigned char *)v4)
    {
      uint64_t v4 = *(void **)(v2 + 24);
    }
    else
    {
      unint64_t v6 = 0;
      do
      {
        uint64_t v7 = v4[v6];
        if (v7)
        {
          (*(void (**)(void))(*(void *)v7 + 8))(v4[v6]);
          uint64_t v4 = *(void **)(v2 + 16);
          uint64_t v5 = *(unsigned char **)(v2 + 24);
        }
        ++v6;
      }
      while (v6 < (v5 - (unsigned char *)v4) >> 3);
    }
    if (v4)
    {
      *(void *)(v2 + 24) = v4;
      operator delete(v4);
    }
    MEMORY[0x19F3BDCF0](v2, 0x1080C40B69A5871);
  }
  return a1;
}

void sub_19E478A10(uint64_t a1, int a2, float *a3, uint64_t a4, char *a5)
{
  int v8 = *(_DWORD *)(a4 + 12);
  *(float *)&uint64_t v47 = a3[3];
  HIDWORD(v47) = v8;
  char v48 = *a5;
  uint64_t v9 = *(unsigned int *)a3;
  uint64_t v10 = *(unsigned int *)(a4 + 4);
  float v11 = a3[2];
  uint64_t v12 = (float *)&unk_1EC009000;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EC009378, memory_order_acquire) & 1) == 0)
  {
    int v42 = a3;
    int v43 = __cxa_guard_acquire(&qword_1EC009378);
    uint64_t v12 = (float *)&unk_1EC009000;
    a3 = v42;
    if (v43)
    {
      dword_1EC009380 = -8388609;
      __cxa_guard_release(&qword_1EC009378);
      uint64_t v12 = (float *)&unk_1EC009000;
      a3 = v42;
    }
  }
  if (v11 == v12[224]) {
    goto LABEL_11;
  }
  float v13 = *(float *)(a4 + 8);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EC009378, memory_order_acquire) & 1) == 0)
  {
    v46 = a3;
    v44 = v12;
    int v45 = __cxa_guard_acquire(&qword_1EC009378);
    uint64_t v12 = v44;
    a3 = v46;
    if (v45)
    {
      v44[224] = -3.4028e38;
      __cxa_guard_release(&qword_1EC009378);
      uint64_t v12 = v44;
      a3 = v46;
    }
  }
  if (v13 == v12[224])
  {
LABEL_11:
    float v18 = NAN;
  }
  else
  {
    float v14 = a3[2];
    float v15 = *(float *)(a4 + 8);
    BOOL v16 = v15 == 3.4028e38 || v14 == 3.4028e38;
    float v17 = v15 + v14;
    if (v16) {
      float v18 = 3.4028e38;
    }
    else {
      float v18 = v17;
    }
  }
  int v19 = sub_19E470994(*(void **)(a1 + 176), &v47);
  uint64_t v20 = *(void *)(a1 + 120);
  uint64_t v21 = sub_19E472B88(v20, a2);
  uint64_t v22 = (void *)v21;
  if (*(unsigned char *)(v20 + 104))
  {
    int v23 = *(_DWORD *)(v21 + 56);
    if ((v23 & 4) == 0)
    {
      *(_DWORD *)(v21 + 56) = v23 | 4;
      unint64_t v24 = *(void *)(v21 + 32) - *(void *)(v21 + 24) + *(void *)(v20 + 128) + 64;
      *(void *)(v20 + 128) = v24;
      *(unsigned char *)(v20 + 120) = 1;
      if (v24 > *(void *)(v20 + 112)) {
        sub_19E472D04(v20, v21);
      }
    }
  }
  uint64_t v25 = v9 | (v10 << 32);
  unint64_t v27 = v22[4];
  unint64_t v26 = v22[5];
  if (v27 >= v26)
  {
    uint64_t v29 = v22[3];
    uint64_t v30 = (uint64_t)(v27 - v29) >> 4;
    unint64_t v31 = v30 + 1;
    if ((unint64_t)(v30 + 1) >> 60) {
      sub_19E37C7C4();
    }
    uint64_t v32 = v26 - v29;
    if (v32 >> 3 > v31) {
      unint64_t v31 = v32 >> 3;
    }
    if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v33 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v33 = v31;
    }
    uint64_t v34 = sub_19E478CD4(v22 + 6, v33);
    uint64_t v35 = (float *)&v34[2 * v30];
    v36 = &v34[2 * v33];
    *(void *)uint64_t v35 = v25;
    v35[2] = v18;
    *((_DWORD *)v35 + 3) = v19;
    long long v28 = v35 + 4;
    uint64_t v38 = (void *)v22[3];
    v37 = (void *)v22[4];
    if (v37 != v38)
    {
      unint64_t v39 = 0;
      do
      {
        uint64_t v40 = &v35[v39 / 4];
        *((void *)v40 - 2) = v37[v39 / 8 - 2];
        *(v40 - 2) = *(float *)&v37[v39 / 8 - 1];
        *(v40 - 1) = *((float *)&v37[v39 / 8 - 1] + 1);
        v39 -= 16;
      }
      while (&v37[v39 / 8] != v38);
      uint64_t v35 = (float *)((char *)v35 + v39);
      v37 = (void *)v22[3];
    }
    v22[3] = v35;
    v22[4] = v28;
    uint64_t v41 = v22[5];
    v22[5] = v36;
    if (v37) {
      sub_19E475CA4(v22 + 6, v37, (v41 - (uint64_t)v37) >> 4);
    }
  }
  else
  {
    *(void *)unint64_t v27 = v25;
    *(float *)(v27 + 8) = v18;
    long long v28 = (void *)(v27 + 16);
    *(_DWORD *)(v27 + 12) = v19;
  }
  v22[4] = v28;
}

void *sub_19E478CD4(uint64_t *a1, unint64_t a2)
{
  if (a2 == 2)
  {
    uint64_t v9 = (unint64_t *)(*a1 + 16);
    unint64_t v8 = *v9;
    unint64_t v10 = *(void *)(*a1 + 24) - *v9;
    if (v10 <= 0x107)
    {
      uint64_t v33 = 0;
      sub_19E46BA20(v9, 33 - (v10 >> 3), (const double *)&v33);
      unint64_t v8 = *v9;
    }
    uint64_t v5 = *(void **)(v8 + 256);
    if (!v5) {
      operator new();
    }
    unint64_t v6 = (void *)v5[7];
    if (!v6)
    {
      unint64_t v18 = v5[2];
      if (v18 <= 0x9F) {
        operator new[]();
      }
      uint64_t v24 = v5[3];
      if (v24 + 40 > v18) {
        operator new[]();
      }
      unint64_t v6 = (void *)(*(void *)(v5[5] + 16) + v24);
      v5[3] = v24 + 40;
      v6[4] = 0;
      return v6;
    }
    uint64_t v7 = v6[4];
    goto LABEL_53;
  }
  if (a2 == 1)
  {
    uint64_t v3 = (unint64_t *)(*a1 + 16);
    unint64_t v2 = *v3;
    unint64_t v4 = *(void *)(*a1 + 24) - *v3;
    if (v4 <= 0x87)
    {
      uint64_t v33 = 0;
      sub_19E46BA20(v3, 17 - (v4 >> 3), (const double *)&v33);
      unint64_t v2 = *v3;
    }
    uint64_t v5 = *(void **)(v2 + 128);
    if (!v5) {
      operator new();
    }
    unint64_t v6 = (void *)v5[7];
    if (!v6)
    {
      unint64_t v17 = v5[2];
      if (v17 <= 0x5F) {
        operator new[]();
      }
      uint64_t v23 = v5[3];
      if (v23 + 24 > v17) {
        operator new[]();
      }
      unint64_t v6 = (void *)(*(void *)(v5[5] + 16) + v23);
      v5[3] = v23 + 24;
      v6[2] = 0;
      return v6;
    }
    uint64_t v7 = v6[2];
    goto LABEL_53;
  }
  if (a2 <= 4)
  {
    uint64_t v12 = (unint64_t *)(*a1 + 16);
    unint64_t v11 = *v12;
    unint64_t v13 = *(void *)(*a1 + 24) - *v12;
    if (v13 <= 0x207)
    {
      uint64_t v33 = 0;
      sub_19E46BA20(v12, 65 - (v13 >> 3), (const double *)&v33);
      unint64_t v11 = *v12;
    }
    uint64_t v5 = *(void **)(v11 + 512);
    if (!v5) {
      operator new();
    }
    unint64_t v6 = (void *)v5[7];
    if (!v6)
    {
      unint64_t v22 = v5[2];
      if (v22 <= 0x11F) {
        operator new[]();
      }
      uint64_t v30 = v5[3];
      if (v30 + 72 > v22) {
        operator new[]();
      }
      unint64_t v6 = (void *)(*(void *)(v5[5] + 16) + v30);
      v5[3] = v30 + 72;
      v6[8] = 0;
      return v6;
    }
    uint64_t v7 = v6[8];
    goto LABEL_53;
  }
  if (a2 <= 8)
  {
    float v15 = (unint64_t *)(*a1 + 16);
    unint64_t v14 = *v15;
    unint64_t v16 = *(void *)(*a1 + 24) - *v15;
    if (v16 <= 0x407)
    {
      uint64_t v33 = 0;
      sub_19E46BA20(v15, 129 - (v16 >> 3), (const double *)&v33);
      unint64_t v14 = *v15;
    }
    uint64_t v5 = *(void **)(v14 + 1024);
    if (!v5) {
      operator new();
    }
    unint64_t v6 = (void *)v5[7];
    if (!v6)
    {
      unint64_t v29 = v5[2];
      if (v29 <= 0x21F) {
        operator new[]();
      }
      uint64_t v32 = v5[3];
      if (v32 + 136 > v29) {
        operator new[]();
      }
      unint64_t v6 = (void *)(*(void *)(v5[5] + 16) + v32);
      v5[3] = v32 + 136;
      v6[16] = 0;
      return v6;
    }
    uint64_t v7 = v6[16];
    goto LABEL_53;
  }
  if (a2 <= 0x10)
  {
    uint64_t v20 = (unint64_t *)(*a1 + 16);
    unint64_t v19 = *v20;
    unint64_t v21 = *(void *)(*a1 + 24) - *v20;
    if (v21 <= 0x807)
    {
      uint64_t v33 = 0;
      sub_19E46BA20(v20, 257 - (v21 >> 3), (const double *)&v33);
      unint64_t v19 = *v20;
    }
    uint64_t v5 = *(void **)(v19 + 2048);
    if (!v5) {
      operator new();
    }
    unint64_t v6 = (void *)v5[7];
    if (!v6)
    {
      unint64_t v6 = (void *)sub_19E46EE68(v5 + 1);
      v6[32] = 0;
      return v6;
    }
    uint64_t v7 = v6[32];
LABEL_53:
    v5[7] = v7;
    return v6;
  }
  if (a2 <= 0x20)
  {
    unint64_t v26 = (unint64_t *)(*a1 + 16);
    unint64_t v25 = *v26;
    unint64_t v27 = *(void *)(*a1 + 24) - *v26;
    if (v27 >> 3 <= 0x200)
    {
      uint64_t v33 = 0;
      sub_19E46BA20(v26, 513 - (v27 >> 3), (const double *)&v33);
      unint64_t v25 = *v26;
    }
    uint64_t v5 = *(void **)(v25 + 4096);
    if (!v5) {
      operator new();
    }
    unint64_t v6 = (void *)v5[7];
    if (!v6)
    {
      unint64_t v6 = (void *)sub_19E46EF50(v5 + 1);
      v6[64] = 0;
      return v6;
    }
    uint64_t v7 = v6[64];
    goto LABEL_53;
  }
  if (a2 <= 0x40)
  {
    uint64_t v31 = sub_19E47666C(*a1);
    unint64_t v6 = *(void **)(v31 + 56);
    if (v6)
    {
      *(void *)(v31 + 56) = v6[128];
    }
    else
    {
      unint64_t v6 = (void *)sub_19E479514((void *)(v31 + 8));
      v6[128] = 0;
    }
    return v6;
  }
  if (a2 >> 60) {
    sub_19E37C2B8();
  }
  return operator new(16 * a2);
}

void sub_19E4794DC(_Unwind_Exception *a1)
{
  MEMORY[0x19F3BDCF0](v1, 0x10A1C40E79ACBF4);
  _Unwind_Resume(a1);
}

uint64_t sub_19E479514(void *a1)
{
  unint64_t v2 = a1[1];
  if (v2 >> 5 <= 0x80) {
    operator new[]();
  }
  uint64_t v3 = a1[2];
  if (v3 + 1032 > v2) {
    operator new[]();
  }
  uint64_t v4 = *(void *)(a1[4] + 16) + v3;
  a1[2] = v3 + 1032;
  return v4;
}

void sub_19E479600()
{
}

void sub_19E479840(_Unwind_Exception *a1)
{
  MEMORY[0x19F3BDCF0](v2, 0x10E0C401DE81863);
  sub_19E46B1C8(v1);
  MEMORY[0x19F3BDCF0](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

void sub_19E4798D4(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 39) = 4;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(void *)a1 = &unk_1EF0BC938;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_DWORD *)(a1 + 100) = -1;
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  operator new();
}

void sub_19E47A050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  MEMORY[0x19F3BDCF0](v10, 0x10A0C40690396FALL);
  if (*a9) {
    operator delete(*a9);
  }
  sub_19E47A394(v9);
  _Unwind_Resume(a1);
}

void sub_19E47A0D0(void *a1, void *a2)
{
  if (*a2) {
    operator new();
  }
  *a1 = 0;
  if (a2[1]) {
    operator new();
  }
  a1[1] = 0;
  a1[2] = a1;
  a1[3] = a1;
  sub_19E46B414();
}

void sub_19E47A22C(_Unwind_Exception *a1)
{
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 112) = v5;
    operator delete(v5);
  }
  sub_19E46B83C(v2);
  _Unwind_Resume(a1);
}

void sub_19E47A254(uint64_t a1, char a2)
{
  *(unsigned char *)a1 = a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = a1 + 32;
  *(void *)(a1 + 40) = a1 + 32;
  *(void *)(a1 + 48) = 0;
  operator new();
}

void sub_19E47A344(_Unwind_Exception *a1)
{
  uint64_t v5 = v3;
  sub_19E47894C(v5);
  sub_19E47894C((uint64_t *)(v1 + 72));
  sub_19E47A620(v2);
  uint64_t v7 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 16) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_19E47A394(uint64_t a1)
{
  *(void *)a1 = &unk_1EF0BCF98;
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 48);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_19E47A43C(void *a1)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3)
  {
    uint64_t v3 = a1[2];
  }
  else
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(v3 + 8 * v4);
      if (v5)
      {
        sub_19E47328C(v5 + 24);
        sub_19E473374((uint64_t)(a1 + 9), v5);
        uint64_t v3 = a1[1];
        uint64_t v2 = a1[2];
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  a1[2] = v3;
  if (a1[6])
  {
    unint64_t v6 = a1 + 4;
    uint64_t v8 = a1[4];
    uint64_t v7 = (uint64_t *)a1[5];
    uint64_t v9 = *v7;
    *(void *)(v9 + 8) = *(void *)(v8 + 8);
    **(void **)(v8 + 8) = v9;
    a1[6] = 0;
    uint64_t v10 = a1 + 7;
    while (v7 != v6)
    {
      unint64_t v11 = (uint64_t *)v7[1];
      sub_19E473460(v10, v7, 1uLL);
      uint64_t v7 = v11;
    }
  }
}

uint64_t **sub_19E47A508(uint64_t **a1)
{
  if (!*((unsigned char *)a1 + 8))
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (void *)**a1;
    if (v3)
    {
      v2[1] = (uint64_t)v3;
      sub_19E475CA4(v2 + 3, v3, (v2[2] - (uint64_t)v3) >> 4);
    }
  }
  return a1;
}

uint64_t sub_19E47A55C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t v3 = v2[1] - 1;
  v2[1] = v3;
  if (!v3)
  {
    unint64_t v4 = (void *)v2[2];
    uint64_t v5 = (unsigned char *)v2[3];
    if (v5 == (unsigned char *)v4)
    {
      unint64_t v4 = (void *)v2[3];
    }
    else
    {
      unint64_t v6 = 0;
      do
      {
        uint64_t v7 = v4[v6];
        if (v7)
        {
          (*(void (**)(void))(*(void *)v7 + 8))(v4[v6]);
          unint64_t v4 = (void *)v2[2];
          uint64_t v5 = (unsigned char *)v2[3];
        }
        ++v6;
      }
      while (v6 < (v5 - (unsigned char *)v4) >> 3);
    }
    if (v4)
    {
      v2[3] = v4;
      operator delete(v4);
    }
    MEMORY[0x19F3BDCF0](v2, 0x1080C40B69A5871);
  }
  return a1;
}

uint64_t *sub_19E47A620(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v3 = *a1;
    uint64_t v2 = (uint64_t *)a1[1];
    uint64_t v4 = *v2;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v3 + 8) = v4;
    a1[2] = 0;
    while (v2 != a1)
    {
      uint64_t v5 = (uint64_t *)v2[1];
      sub_19E473460(a1 + 3, v2, 1uLL);
      uint64_t v2 = v5;
    }
  }
  unint64_t v6 = (void *)a1[3];
  uint64_t v7 = v6[1] - 1;
  v6[1] = v7;
  if (!v7)
  {
    uint64_t v8 = (void *)v6[2];
    uint64_t v9 = (unsigned char *)v6[3];
    if (v9 == (unsigned char *)v8)
    {
      uint64_t v8 = (void *)v6[3];
    }
    else
    {
      unint64_t v10 = 0;
      do
      {
        uint64_t v11 = v8[v10];
        if (v11)
        {
          (*(void (**)(void))(*(void *)v11 + 8))(v8[v10]);
          uint64_t v8 = (void *)v6[2];
          uint64_t v9 = (unsigned char *)v6[3];
        }
        ++v10;
      }
      while (v10 < (v9 - (unsigned char *)v8) >> 3);
    }
    if (v8)
    {
      v6[3] = v8;
      operator delete(v8);
    }
    MEMORY[0x19F3BDCF0](v6, 0x1080C40B69A5871);
  }
  return a1;
}

void sub_19E47A730(uint64_t a1)
{
  sub_19E46B1C8(a1);
  JUMPOUT(0x19F3BDCF0);
}

uint64_t sub_19E47A76C(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && ((*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 160) + 56))(*(void *)(a1 + 160), 4, 0)|| (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 168) + 56))(*(void *)(a1 + 168), 4, 0)|| ((*(uint64_t (**)(void, void))(***(void ***)(a1 + 144) + 40))(**(void **)(a1 + 144), 0) & 4) != 0|| ((*(uint64_t (**)(void, void))(***(void ***)(a1 + 152) + 40))(**(void **)(a1 + 152), 0) & 4) != 0))
  {
    *(void *)(a1 + 8) |= 4uLL;
  }
  return *(void *)(a1 + 8) & a2;
}

uint64_t sub_19E47A878(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 24))(a1, 0x3FFFFFFF0007);
}

void sub_19E47A8A4(void *a1)
{
  sub_19E47A8DC(a1);
  JUMPOUT(0x19F3BDCF0);
}

uint64_t sub_19E47A8DC(void *a1)
{
  *a1 = &unk_1EF0BCAB0;
  uint64_t v2 = a1[17];
  if (v2)
  {
    uint64_t v3 = *(void **)v2;
    if (*(void *)v2)
    {
      if (*v3) {
        (*(void (**)(void))(*(void *)*v3 + 8))(*v3);
      }
      MEMORY[0x19F3BDCF0](v3, 0x20C4093837F09);
    }
    uint64_t v4 = *(void **)(v2 + 8);
    if (v4)
    {
      if (*v4) {
        (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
      }
      MEMORY[0x19F3BDCF0](v4, 0x20C4093837F09);
    }
    MEMORY[0x19F3BDCF0](v2, 0x1060C4035244DBALL);
  }
  uint64_t v5 = (void *)a1[22];
  if (v5)
  {
    if (*v5) {
      MEMORY[0x19F3BDCF0](*v5, 0xC400A2AC0F1);
    }
    uint64_t v6 = v5[1];
    if (v6) {
      MEMORY[0x19F3BDCF0](v6, 0xC400A2AC0F1);
    }
    uint64_t v7 = (void *)v5[13];
    if (v7)
    {
      v5[14] = v7;
      operator delete(v7);
    }
    sub_19E46B83C((uint64_t)(v5 + 4));
    MEMORY[0x19F3BDCF0](v5, 0x10E0C401DE81863);
  }
  return sub_19E46B1C8((uint64_t)a1);
}

uint64_t sub_19E47AA58()
{
  return 0;
}

void sub_19E47AA68(uint64_t a1@<X0>, int a2@<W1>, float *a3@<X8>)
{
  uint64_t v6 = *(void *)(*(void *)(a1 + 176) + 104);
  uint64_t v7 = (int *)(v6 + 12 * a2);
  int v8 = *v7;
  (*(void (**)(char *__return_ptr))(***(void ***)(a1 + 144) + 96))((char *)&v25 + 4);
  float v9 = *((float *)&v25 + 1);
  int v27 = HIDWORD(v25);
  HIDWORD(v26) = 2139095039;
  if (*((float *)&v25 + 1) != 3.4028e38)
  {
    uint64_t v10 = v7[1];
    (*(void (**)(uint64_t *__return_ptr))(***(void ***)(a1 + 152) + 96))(&v25);
    float v9 = *(float *)&v25;
    int v27 = v25;
    HIDWORD(v26) = 2139095039;
    if (*(float *)&v25 != 3.4028e38)
    {
      int v11 = a2;
      uint64_t v12 = *(void *)(a1 + 136);
      int v13 = *(unsigned __int8 *)(v6 + 12 * v11 + 8);
      if (*(_DWORD *)(v12 + 24) != v8 || *(_DWORD *)(v12 + 28) != v10 || v13 != *(unsigned __int8 *)(v12 + 32))
      {
        *(_DWORD *)(v12 + 24) = v8;
        *(_DWORD *)(v12 + 28) = v10;
        *(unsigned char *)(v12 + 32) = v13;
        uint64_t v14 = (*(uint64_t (**)(void, uint64_t))(**(void **)(v12 + 16) + 32))(*(void *)(v12 + 16), v10);
        uint64_t v15 = (*(uint64_t (**)(void, uint64_t))(**(void **)(v12 + 16) + 40))(*(void *)(v12 + 16), v10);
        (*(void (**)(uint64_t *__return_ptr))(**(void **)(v12 + 16) + 24))(&v26);
        int v27 = v26;
        HIDWORD(v26) = 2139095039;
        BOOL v17 = *(float *)&v26 == 3.4028e38 && v14 == v15;
        *(unsigned char *)(v12 + 33) = v17;
        *(unsigned char *)(v12 + 34) = v15 == 0;
      }
      float v18 = *((float *)&v25 + 1);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EC009378, memory_order_acquire) & 1) == 0)
      {
        float v23 = v18;
        int v21 = __cxa_guard_acquire(&qword_1EC009378);
        float v18 = v23;
        if (v21)
        {
          dword_1EC009380 = -8388609;
          __cxa_guard_release(&qword_1EC009378);
          float v18 = v23;
        }
      }
      if (v18 == *(float *)&dword_1EC009380) {
        goto LABEL_23;
      }
      float v19 = *(float *)&v25;
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EC009378, memory_order_acquire) & 1) == 0)
      {
        float v24 = v19;
        int v22 = __cxa_guard_acquire(&qword_1EC009378);
        float v19 = v24;
        if (v22)
        {
          dword_1EC009380 = -8388609;
          __cxa_guard_release(&qword_1EC009378);
          float v19 = v24;
        }
      }
      if (v19 == *(float *)&dword_1EC009380)
      {
LABEL_23:
        float v9 = NAN;
      }
      else
      {
        BOOL v20 = *(float *)&v25 == 3.4028e38 || *((float *)&v25 + 1) == 3.4028e38;
        float v9 = *(float *)&v25 + *((float *)&v25 + 1);
        if (v20) {
          float v9 = 3.4028e38;
        }
      }
    }
  }
  *a3 = v9;
}

uint64_t sub_19E47AD58(void **a1)
{
  uint64_t result = (*(uint64_t (**)(void *))(*a1[20] + 16))(a1[20]);
  if (result != -1)
  {
    unsigned int v3 = result;
    uint64_t result = (*(uint64_t (**)(void *))(*a1[21] + 16))(a1[21]);
    if (result != -1)
    {
      unint64_t v4 = __PAIR64__(result, v3);
      char v5 = 0;
      return sub_19E470994(a1[22], (uint64_t *)&v4);
    }
  }
  return result;
}

uint64_t sub_19E47ADF8(uint64_t a1, uint64_t a2, int a3)
{
  if ((*(unsigned int (**)(void, void))(***(void ***)(a1 + 144) + 24))(**(void **)(a1 + 144), 0) == a3
    && (*(unsigned int (**)(void, void))(***(void ***)(a1 + 152) + 24))(**(void **)(a1 + 152), 0) == a3)
  {
    operator new();
  }
  return 0;
}

void sub_19E47AFC0(_Unwind_Exception *a1)
{
  MEMORY[0x19F3BDCF0](v2, 0x20C4093837F09);
  MEMORY[0x19F3BDCF0](v1, 0x10E1C40868C5753);
  _Unwind_Resume(a1);
}

uint64_t sub_19E47B008(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 32))();
}

uint64_t sub_19E47B030(uint64_t result)
{
  if (*(unsigned char *)(result + 48))
  {
    *(unsigned char *)(result + 48) = 0;
  }
  else
  {
    if (*(_DWORD *)(result + 28))
    {
      uint64_t v2 = *(void **)(result + 32);
      uint64_t v1 = *(void *)(result + 40);
    }
    else
    {
      uint64_t v1 = *(void *)(result + 32);
      uint64_t v2 = *(void **)(result + 40);
    }
    return sub_19E47B058(result, v1, v2);
  }
  return result;
}

uint64_t sub_19E47B058(uint64_t a1, uint64_t a2, void *a3)
{
uint64_t sub_19E47B43C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48)) {
    return a1 + 52;
  }
  else {
    return a1 + 68;
  }
}

uint64_t sub_19E47B454(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48)
    || !(*(unsigned int (**)(void))(***(void ***)(a1 + 32) + 72))(**(void **)(a1 + 32)))
  {
    return 0;
  }
  uint64_t v2 = *(uint64_t (**)(void))(***(void ***)(a1 + 40) + 72);
  return v2();
}

uint64_t sub_19E47B4F4(uint64_t a1, int a2)
{
  *(unsigned char *)(a1 + 48) = a2 == 0;
  if (*(_DWORD *)(a1 + 28))
  {
    if (a2)
    {
      unint64_t v4 = *(void **)(a1 + 32);
      uint64_t v3 = *(void *)(a1 + 40);
      goto LABEL_6;
    }
    return 1;
  }
  if (!a2) {
    return 1;
  }
  uint64_t v3 = *(void *)(a1 + 32);
  unint64_t v4 = *(void **)(a1 + 40);
LABEL_6:
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v3 + 64))();
  if (result)
  {
    int v6 = *(_DWORD *)(a1 + 28);
    uint64_t v7 = (*(uint64_t (**)(void))(**(void **)v3 + 80))();
    int v8 = (unsigned int *)(v7 + 4);
    if (v6) {
      int v8 = (unsigned int *)v7;
    }
    (*(void (**)(void, void))(*(void *)*v4 + 64))(*v4, *v8);
    return sub_19E47B058(a1, v3, v4);
  }
  return result;
}

uint64_t sub_19E47B604(uint64_t result, int a2)
{
  if (*(_DWORD *)(result + 24) != a2)
  {
    uint64_t v2 = result;
    *(_DWORD *)(result + 24) = a2;
    uint64_t v3 = (unsigned int *)(*(void *)(*(void *)(*(void *)(result + 16) + 176) + 104) + 12 * a2);
    uint64_t v4 = v3[1];
    (*(void (**)(void, void))(***(void ***)(result + 32) + 56))(**(void **)(result + 32), *v3);
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(v2 + 40) + 56))(**(void **)(v2 + 40), v4);
    *(_DWORD *)(v2 + 64) = *(_DWORD *)(v2 + 24);
  }
  return result;
}

uint64_t sub_19E47B6B0(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 84)) {
    return a2 | 4;
  }
  else {
    return a2;
  }
}

uint64_t sub_19E47B6C4(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_19E47B6CC(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(void))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32));
  if (result != 3)
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2);
    if (result != 3)
    {
      if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32), a2) != 4|| (uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2), result != 4))
      {
        if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32), a2) == 4&& (*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2) == *(_DWORD *)(a1 + 28))
        {
          return 4;
        }
        else if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32), a2) != *(_DWORD *)(a1 + 28)|| (uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2), result != 4))
        {
          if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32), a2) != *(_DWORD *)(a1 + 28))return 3; {
          uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2);
          }
          if (result != *(_DWORD *)(a1 + 28)) {
            return 3;
          }
        }
      }
    }
  }
  return result;
}

void sub_19E47B938()
{
}

void sub_19E47BB18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_19E43C8CC();
  if (a15 < 0) {
    operator delete(__p);
  }
  MEMORY[0x19F3BDCF0](v15, 0x10E1C40868C5753);
  _Unwind_Resume(a1);
}

void sub_19E47BB84(void *a1)
{
  *a1 = &unk_1EF0BCDE8;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    MEMORY[0x19F3BDCF0](v2, 0x20C4093837F09);
  }
  uint64_t v3 = (void *)a1[5];
  if (v3)
  {
    if (*v3) {
      (*(void (**)(void))(*(void *)*v3 + 8))(*v3);
    }
    MEMORY[0x19F3BDCF0](v3, 0x20C4093837F09);
  }
  JUMPOUT(0x19F3BDCF0);
}

void *sub_19E47BC7C(void *a1)
{
  *a1 = &unk_1EF0BCDE8;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    MEMORY[0x19F3BDCF0](v2, 0x20C4093837F09);
  }
  uint64_t v3 = (void *)a1[5];
  if (v3)
  {
    if (*v3) {
      (*(void (**)(void))(*(void *)*v3 + 8))(*v3);
    }
    MEMORY[0x19F3BDCF0](v3, 0x20C4093837F09);
  }
  return a1;
}

void sub_19E47BD54(uint64_t a1, int a2, __n128 a3)
{
  char v5 = (unsigned int *)(*(void *)(*(void *)(a1 + 176) + 104) + 12 * a2);
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  uint64_t v8 = *(void *)(a1 + 136);
  int v9 = *((unsigned __int8 *)v5 + 8);
  if (*(void *)(v8 + 24) != __PAIR64__(v7, v6) || v9 != *(unsigned __int8 *)(v8 + 32))
  {
    *(_DWORD *)(v8 + 24) = v6;
    *(_DWORD *)(v8 + 28) = v7;
    *(unsigned char *)(v8 + 32) = v9;
    uint64_t v10 = (*(uint64_t (**)(void, uint64_t))(**(void **)(v8 + 16) + 32))(*(void *)(v8 + 16), v7);
    uint64_t v11 = (*(uint64_t (**)(void, uint64_t))(**(void **)(v8 + 16) + 40))(*(void *)(v8 + 16), v7);
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(v8 + 16) + 24))(&v29);
    LODWORD(__p[0]) = v29;
    HIDWORD(v29) = 2139095039;
    a3.n128_u32[0] = v29;
    BOOL v13 = *(float *)&v29 == 3.4028e38 && v10 == v11;
    *(unsigned char *)(v8 + 33) = v13;
    *(unsigned char *)(v8 + 34) = v11 == 0;
  }
  int v14 = *(_DWORD *)(a1 + 184);
  if (!v14) {
    goto LABEL_31;
  }
  if (v14 != 1)
  {
    uint64_t v15 = (*(uint64_t (**)(void, uint64_t, __n128))(***(void ***)(a1 + 144) + 104))(**(void **)(a1 + 144), v6, a3);
    uint64_t v16 = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 152) + 104))(**(void **)(a1 + 152), v7);
    if (v15 == -1 && v16 == -1)
    {
      char v31 = 5;
      strcpy((char *)__p, "FATAL");
      float v28 = sub_19E37CA70(MEMORY[0x1E4FBA240], (uint64_t)__p, 5);
      sub_19E37CA70(v28, (uint64_t)": ", 2);
      sub_19E37CA70(MEMORY[0x1E4FBA240], (uint64_t)"ComposeFst: both sides can't require match", 42);
      sub_19E43C8CC();
      if (v31 < 0) {
        operator delete(__p[0]);
      }
      *(void *)(a1 + 8) |= 4uLL;
      goto LABEL_31;
    }
    BOOL v19 = v16 == -1 || v15 <= v16;
    if (v15 != -1 && v19)
    {
LABEL_31:
      char v22 = *(void **)(a1 + 152);
      uint64_t v21 = *(void *)(a1 + 160);
      uint64_t v23 = a1;
      int v24 = a2;
      uint64_t v25 = v7;
      uint64_t v26 = v6;
      int v27 = 1;
      goto LABEL_32;
    }
  }
  uint64_t v21 = *(void *)(a1 + 168);
  char v22 = *(void **)(a1 + 144);
  uint64_t v23 = a1;
  int v24 = a2;
  uint64_t v25 = v6;
  uint64_t v26 = v7;
  int v27 = 0;
LABEL_32:
  sub_19E47C020(v23, v24, v25, v21, v26, v22, v27);
}

void sub_19E47BFF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_19E47C020(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, int a7)
{
  (*(void (**)(void, uint64_t))(*(void *)*a6 + 56))(*a6, a3);
  v18[0] = a7 - 1;
  v18[1] = a7 << 31 >> 31;
  v18[2] = 0;
  v18[3] = a5;
  sub_19E47C270(a1, a2, a6, v18, a7);
  unint64_t v17 = 0;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a4 + 120))(a4, a5, v15);
  while (1)
  {
    if (!v15[0])
    {
      unint64_t v14 = v17;
      if (v17 >= v15[2]) {
        goto LABEL_15;
      }
      goto LABEL_10;
    }
    if ((*(unsigned int (**)(void))(*(void *)v15[0] + 16))(v15[0])) {
      break;
    }
    if (!v15[0])
    {
      unint64_t v14 = v17;
LABEL_10:
      BOOL v13 = (unsigned int *)(v15[1] + 16 * v14);
      goto LABEL_11;
    }
    BOOL v13 = (unsigned int *)(*(uint64_t (**)(void))(*(void *)v15[0] + 24))();
LABEL_11:
    sub_19E47C270(a1, a2, a6, v13, a7);
    if (v15[0]) {
      (*(void (**)(void))(*(void *)v15[0] + 32))(v15[0]);
    }
    else {
      ++v17;
    }
  }
  if (v15[0])
  {
    (*(void (**)(void))(*(void *)v15[0] + 8))();
    goto LABEL_17;
  }
LABEL_15:
  if (v16) {
    --*v16;
  }
LABEL_17:
  sub_19E472A04(a1, a2);
}

void sub_19E47C21C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _DWORD *a13)
{
  if (!a10)
  {
    if (a13) {
      --*a13;
    }
    _Unwind_Resume(exception_object);
  }
  (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E47C270(uint64_t a1, int a2, void *a3, unsigned int *a4, int a5)
{
  char v5 = a5;
  uint64_t v10 = a4 + 1;
  if (!a5) {
    uint64_t v10 = a4;
  }
  uint64_t result = (*(uint64_t (**)(void, void))(*(void *)*a3 + 64))(*a3, *v10);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)*a3 + 72))();
    if ((result & 1) == 0)
    {
      if (v5)
      {
        while (1)
        {
          uint64_t v12 = (*(uint64_t (**)(void))(*(void *)*a3 + 80))();
          unint64_t v31 = *(void *)v12;
          int v32 = *(_DWORD *)(v12 + 8);
          int v33 = *(_DWORD *)(v12 + 12);
          unint64_t v13 = *(void *)a4;
          uint64_t v28 = *(void *)a4;
          unsigned int v29 = a4[2];
          unsigned int v30 = a4[3];
          unint64_t v14 = *(unsigned __int8 **)(a1 + 136);
          if (v31 == -1)
          {
            if (!v14[33])
            {
              char v19 = v14[34] ^ 1;
              goto LABEL_20;
            }
          }
          else
          {
            unint64_t v15 = HIDWORD(v13);
            if (v15)
            {
              if (v15 == -1)
              {
                int v16 = v14[32];
                BOOL v17 = v16 == 1;
                if (v16 == 1) {
                  char v18 = -1;
                }
                else {
                  char v18 = 0;
                }
                char v27 = v18;
                if (v17) {
                  goto LABEL_9;
                }
                goto LABEL_21;
              }
              char v19 = 0;
LABEL_20:
              char v27 = v19;
LABEL_21:
              sub_19E47C55C(a1, a2, (float *)&v28, (uint64_t)&v31, &v27);
            }
          }
LABEL_9:
          (*(void (**)(void))(*(void *)*a3 + 88))();
          uint64_t result = (*(uint64_t (**)(void))(*(void *)*a3 + 72))();
          if (result) {
            return result;
          }
        }
      }
      do
      {
        uint64_t v20 = (*(uint64_t (**)(void))(*(void *)*a3 + 80))();
        unint64_t v21 = *(void *)v20;
        unint64_t v31 = *(void *)v20;
        int v32 = *(_DWORD *)(v20 + 8);
        int v33 = *(_DWORD *)(v20 + 12);
        uint64_t v28 = *(void *)a4;
        unsigned int v29 = a4[2];
        unsigned int v30 = a4[3];
        char v22 = *(unsigned __int8 **)(a1 + 136);
        if (v28 == -1)
        {
          if (v22[33]) {
            goto LABEL_23;
          }
          char v27 = v22[34] ^ 1;
        }
        else
        {
          unint64_t v23 = HIDWORD(v21);
          if (v23 == -1)
          {
            int v24 = v22[32];
            BOOL v25 = v24 == 1;
            if (v24 == 1) {
              char v26 = -1;
            }
            else {
              char v26 = 0;
            }
            char v27 = v26;
            if (v25) {
              goto LABEL_23;
            }
          }
          else
          {
            if (!v23) {
              goto LABEL_23;
            }
            char v27 = 0;
          }
        }
        sub_19E47C55C(a1, a2, (float *)&v31, (uint64_t)&v28, &v27);
LABEL_23:
        (*(void (**)(void))(*(void *)*a3 + 88))();
        uint64_t result = (*(uint64_t (**)(void))(*(void *)*a3 + 72))();
      }
      while (!result);
    }
  }
  return result;
}

void sub_19E47C55C(uint64_t a1, int a2, float *a3, uint64_t a4, char *a5)
{
  int v8 = *(_DWORD *)(a4 + 12);
  *(float *)&uint64_t v47 = a3[3];
  HIDWORD(v47) = v8;
  char v48 = *a5;
  uint64_t v9 = *(unsigned int *)a3;
  uint64_t v10 = *(unsigned int *)(a4 + 4);
  float v11 = a3[2];
  uint64_t v12 = (float *)&unk_1EC009000;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EC009378, memory_order_acquire) & 1) == 0)
  {
    int v42 = a3;
    int v43 = __cxa_guard_acquire(&qword_1EC009378);
    uint64_t v12 = (float *)&unk_1EC009000;
    a3 = v42;
    if (v43)
    {
      dword_1EC009380 = -8388609;
      __cxa_guard_release(&qword_1EC009378);
      uint64_t v12 = (float *)&unk_1EC009000;
      a3 = v42;
    }
  }
  if (v11 == v12[224]) {
    goto LABEL_11;
  }
  float v13 = *(float *)(a4 + 8);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EC009378, memory_order_acquire) & 1) == 0)
  {
    v46 = a3;
    v44 = v12;
    int v45 = __cxa_guard_acquire(&qword_1EC009378);
    uint64_t v12 = v44;
    a3 = v46;
    if (v45)
    {
      v44[224] = -3.4028e38;
      __cxa_guard_release(&qword_1EC009378);
      uint64_t v12 = v44;
      a3 = v46;
    }
  }
  if (v13 == v12[224])
  {
LABEL_11:
    float v18 = NAN;
  }
  else
  {
    float v14 = a3[2];
    float v15 = *(float *)(a4 + 8);
    BOOL v16 = v15 == 3.4028e38 || v14 == 3.4028e38;
    float v17 = v15 + v14;
    if (v16) {
      float v18 = 3.4028e38;
    }
    else {
      float v18 = v17;
    }
  }
  int v19 = sub_19E470994(*(void **)(a1 + 176), &v47);
  uint64_t v20 = *(void *)(a1 + 120);
  uint64_t v21 = sub_19E472B88(v20, a2);
  char v22 = (void *)v21;
  if (*(unsigned char *)(v20 + 104))
  {
    int v23 = *(_DWORD *)(v21 + 56);
    if ((v23 & 4) == 0)
    {
      *(_DWORD *)(v21 + 56) = v23 | 4;
      unint64_t v24 = *(void *)(v21 + 32) - *(void *)(v21 + 24) + *(void *)(v20 + 128) + 64;
      *(void *)(v20 + 128) = v24;
      *(unsigned char *)(v20 + 120) = 1;
      if (v24 > *(void *)(v20 + 112)) {
        sub_19E472D04(v20, v21);
      }
    }
  }
  uint64_t v25 = v9 | (v10 << 32);
  unint64_t v27 = v22[4];
  unint64_t v26 = v22[5];
  if (v27 >= v26)
  {
    uint64_t v29 = v22[3];
    uint64_t v30 = (uint64_t)(v27 - v29) >> 4;
    unint64_t v31 = v30 + 1;
    if ((unint64_t)(v30 + 1) >> 60) {
      sub_19E37C7C4();
    }
    uint64_t v32 = v26 - v29;
    if (v32 >> 3 > v31) {
      unint64_t v31 = v32 >> 3;
    }
    if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v33 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v33 = v31;
    }
    uint64_t v34 = sub_19E478CD4(v22 + 6, v33);
    uint64_t v35 = (float *)&v34[2 * v30];
    v36 = &v34[2 * v33];
    *(void *)uint64_t v35 = v25;
    v35[2] = v18;
    *((_DWORD *)v35 + 3) = v19;
    uint64_t v28 = v35 + 4;
    uint64_t v38 = (void *)v22[3];
    v37 = (void *)v22[4];
    if (v37 != v38)
    {
      unint64_t v39 = 0;
      do
      {
        uint64_t v40 = &v35[v39 / 4];
        *((void *)v40 - 2) = v37[v39 / 8 - 2];
        *(v40 - 2) = *(float *)&v37[v39 / 8 - 1];
        *(v40 - 1) = *((float *)&v37[v39 / 8 - 1] + 1);
        v39 -= 16;
      }
      while (&v37[v39 / 8] != v38);
      uint64_t v35 = (float *)((char *)v35 + v39);
      v37 = (void *)v22[3];
    }
    v22[3] = v35;
    v22[4] = v28;
    uint64_t v41 = v22[5];
    v22[5] = v36;
    if (v37) {
      sub_19E475CA4(v22 + 6, v37, (v41 - (uint64_t)v37) >> 4);
    }
  }
  else
  {
    *(void *)unint64_t v27 = v25;
    *(float *)(v27 + 8) = v18;
    uint64_t v28 = (void *)(v27 + 16);
    *(_DWORD *)(v27 + 12) = v19;
  }
  v22[4] = v28;
}

void sub_19E47C820()
{
}

void sub_19E47CA28(_Unwind_Exception *a1)
{
  MEMORY[0x19F3BDCF0](v2, 0x10E0C401DE81863);
  sub_19E46B1C8(v1);
  MEMORY[0x19F3BDCF0](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

uint64_t sub_19E47CABC(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && ((*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 160) + 56))(*(void *)(a1 + 160), 4, 0)|| (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 168) + 56))(*(void *)(a1 + 168), 4, 0)|| ((*(uint64_t (**)(void, void))(***(void ***)(a1 + 144) + 40))(**(void **)(a1 + 144), 0) & 4) != 0|| ((*(uint64_t (**)(void, void))(***(void ***)(a1 + 152) + 40))(**(void **)(a1 + 152), 0) & 4) != 0))
  {
    *(void *)(a1 + 8) |= 4uLL;
  }
  return *(void *)(a1 + 8) & a2;
}

uint64_t sub_19E47CBC8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 24))(a1, 0x3FFFFFFF0007);
}

void sub_19E47CBF4(void *a1)
{
  sub_19E47CC2C(a1);
  JUMPOUT(0x19F3BDCF0);
}

uint64_t sub_19E47CC2C(void *a1)
{
  *a1 = &unk_1EF0BCC10;
  uint64_t v2 = a1[17];
  if (v2)
  {
    uint64_t v3 = *(void **)v2;
    if (*(void *)v2)
    {
      if (*v3) {
        (*(void (**)(void))(*(void *)*v3 + 8))(*v3);
      }
      MEMORY[0x19F3BDCF0](v3, 0x20C4093837F09);
    }
    uint64_t v4 = *(void **)(v2 + 8);
    if (v4)
    {
      if (*v4) {
        (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
      }
      MEMORY[0x19F3BDCF0](v4, 0x20C4093837F09);
    }
    MEMORY[0x19F3BDCF0](v2, 0x1060C40AD892F49);
  }
  char v5 = (void *)a1[22];
  if (v5)
  {
    if (*v5) {
      MEMORY[0x19F3BDCF0](*v5, 0xC400A2AC0F1);
    }
    uint64_t v6 = v5[1];
    if (v6) {
      MEMORY[0x19F3BDCF0](v6, 0xC400A2AC0F1);
    }
    uint64_t v7 = (void *)v5[13];
    if (v7)
    {
      v5[14] = v7;
      operator delete(v7);
    }
    sub_19E46B83C((uint64_t)(v5 + 4));
    MEMORY[0x19F3BDCF0](v5, 0x10E0C401DE81863);
  }
  return sub_19E46B1C8((uint64_t)a1);
}

void sub_19E47CDA8(uint64_t a1@<X0>, int a2@<W1>, float *a3@<X8>)
{
  uint64_t v6 = *(void *)(*(void *)(a1 + 176) + 104);
  uint64_t v7 = (unsigned int *)(v6 + 12 * a2);
  uint64_t v8 = *v7;
  (*(void (**)(char *__return_ptr))(***(void ***)(a1 + 144) + 96))((char *)&v24 + 4);
  float v9 = *((float *)&v24 + 1);
  int v26 = HIDWORD(v24);
  HIDWORD(v25) = 2139095039;
  if (*((float *)&v24 + 1) != 3.4028e38)
  {
    unsigned int v10 = v7[1];
    (*(void (**)(uint64_t *__return_ptr))(***(void ***)(a1 + 152) + 96))(&v24);
    float v9 = *(float *)&v24;
    int v26 = v24;
    HIDWORD(v25) = 2139095039;
    if (*(float *)&v24 != 3.4028e38)
    {
      uint64_t v11 = *(void *)(a1 + 136);
      int v12 = *(unsigned __int8 *)(v6 + 12 * a2 + 8);
      if (*(_DWORD *)(v11 + 24) != v8 || *(_DWORD *)(v11 + 28) != v10 || v12 != *(unsigned __int8 *)(v11 + 32))
      {
        *(_DWORD *)(v11 + 24) = v8;
        *(_DWORD *)(v11 + 28) = v10;
        *(unsigned char *)(v11 + 32) = v12;
        uint64_t v13 = (*(uint64_t (**)(void, uint64_t))(**(void **)(v11 + 16) + 32))(*(void *)(v11 + 16), v8);
        uint64_t v14 = (*(uint64_t (**)(void, uint64_t))(**(void **)(v11 + 16) + 48))(*(void *)(v11 + 16), v8);
        (*(void (**)(uint64_t *__return_ptr))(**(void **)(v11 + 16) + 24))(&v25);
        int v26 = v25;
        HIDWORD(v25) = 2139095039;
        BOOL v16 = *(float *)&v25 == 3.4028e38 && v13 == v14;
        *(unsigned char *)(v11 + 33) = v16;
        *(unsigned char *)(v11 + 34) = v14 == 0;
      }
      float v17 = *((float *)&v24 + 1);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EC009378, memory_order_acquire) & 1) == 0)
      {
        float v22 = v17;
        int v20 = __cxa_guard_acquire(&qword_1EC009378);
        float v17 = v22;
        if (v20)
        {
          dword_1EC009380 = -8388609;
          __cxa_guard_release(&qword_1EC009378);
          float v17 = v22;
        }
      }
      if (v17 == *(float *)&dword_1EC009380) {
        goto LABEL_23;
      }
      float v18 = *(float *)&v24;
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EC009378, memory_order_acquire) & 1) == 0)
      {
        float v23 = v18;
        int v21 = __cxa_guard_acquire(&qword_1EC009378);
        float v18 = v23;
        if (v21)
        {
          dword_1EC009380 = -8388609;
          __cxa_guard_release(&qword_1EC009378);
          float v18 = v23;
        }
      }
      if (v18 == *(float *)&dword_1EC009380)
      {
LABEL_23:
        float v9 = NAN;
      }
      else
      {
        BOOL v19 = *(float *)&v24 == 3.4028e38 || *((float *)&v24 + 1) == 3.4028e38;
        float v9 = *(float *)&v24 + *((float *)&v24 + 1);
        if (v19) {
          float v9 = 3.4028e38;
        }
      }
    }
  }
  *a3 = v9;
}

uint64_t sub_19E47D098(void **a1)
{
  uint64_t result = (*(uint64_t (**)(void *))(*a1[20] + 16))(a1[20]);
  if (result != -1)
  {
    unsigned int v3 = result;
    uint64_t result = (*(uint64_t (**)(void *))(*a1[21] + 16))(a1[21]);
    if (result != -1)
    {
      unint64_t v4 = __PAIR64__(result, v3);
      char v5 = 0;
      return sub_19E470994(a1[22], (uint64_t *)&v4);
    }
  }
  return result;
}

uint64_t sub_19E47D138(uint64_t a1, uint64_t a2, int a3)
{
  if ((*(unsigned int (**)(void, void))(***(void ***)(a1 + 144) + 24))(**(void **)(a1 + 144), 0) == a3
    && (*(unsigned int (**)(void, void))(***(void ***)(a1 + 152) + 24))(**(void **)(a1 + 152), 0) == a3)
  {
    operator new();
  }
  return 0;
}

void sub_19E47D300(_Unwind_Exception *a1)
{
  MEMORY[0x19F3BDCF0](v2, 0x20C4093837F09);
  MEMORY[0x19F3BDCF0](v1, 0x10E1C40868C5753);
  _Unwind_Resume(a1);
}

uint64_t sub_19E47D348(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 32))();
}

uint64_t sub_19E47D370(uint64_t result)
{
  if (*(unsigned char *)(result + 48))
  {
    *(unsigned char *)(result + 48) = 0;
  }
  else
  {
    if (*(_DWORD *)(result + 28))
    {
      uint64_t v2 = *(void **)(result + 32);
      uint64_t v1 = *(void *)(result + 40);
    }
    else
    {
      uint64_t v1 = *(void *)(result + 32);
      uint64_t v2 = *(void **)(result + 40);
    }
    return sub_19E47D398(result, v1, v2);
  }
  return result;
}

uint64_t sub_19E47D398(uint64_t a1, uint64_t a2, void *a3)
{
uint64_t sub_19E47D77C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48)) {
    return a1 + 52;
  }
  else {
    return a1 + 68;
  }
}

uint64_t sub_19E47D794(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48)
    || !(*(unsigned int (**)(void))(***(void ***)(a1 + 32) + 72))(**(void **)(a1 + 32)))
  {
    return 0;
  }
  uint64_t v2 = *(uint64_t (**)(void))(***(void ***)(a1 + 40) + 72);
  return v2();
}

uint64_t sub_19E47D834(uint64_t a1, int a2)
{
  *(unsigned char *)(a1 + 48) = a2 == 0;
  if (*(_DWORD *)(a1 + 28))
  {
    if (a2)
    {
      unint64_t v4 = *(void **)(a1 + 32);
      uint64_t v3 = *(void *)(a1 + 40);
      goto LABEL_6;
    }
    return 1;
  }
  if (!a2) {
    return 1;
  }
  uint64_t v3 = *(void *)(a1 + 32);
  unint64_t v4 = *(void **)(a1 + 40);
LABEL_6:
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v3 + 64))();
  if (result)
  {
    int v6 = *(_DWORD *)(a1 + 28);
    uint64_t v7 = (*(uint64_t (**)(void))(**(void **)v3 + 80))();
    uint64_t v8 = (unsigned int *)(v7 + 4);
    if (v6) {
      uint64_t v8 = (unsigned int *)v7;
    }
    (*(void (**)(void, void))(*(void *)*v4 + 64))(*v4, *v8);
    return sub_19E47D398(a1, v3, v4);
  }
  return result;
}

uint64_t sub_19E47D944(uint64_t result, int a2)
{
  if (*(_DWORD *)(result + 24) != a2)
  {
    uint64_t v2 = result;
    *(_DWORD *)(result + 24) = a2;
    uint64_t v3 = (unsigned int *)(*(void *)(*(void *)(*(void *)(result + 16) + 176) + 104) + 12 * a2);
    uint64_t v4 = v3[1];
    (*(void (**)(void, void))(***(void ***)(result + 32) + 56))(**(void **)(result + 32), *v3);
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(v2 + 40) + 56))(**(void **)(v2 + 40), v4);
    *(_DWORD *)(v2 + 64) = *(_DWORD *)(v2 + 24);
  }
  return result;
}

uint64_t sub_19E47D9F0(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 84)) {
    return a2 | 4;
  }
  else {
    return a2;
  }
}

uint64_t sub_19E47DA04(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_19E47DA0C(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(void))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32));
  if (result != 3)
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2);
    if (result != 3)
    {
      if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32), a2) != 4|| (uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2), result != 4))
      {
        if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32), a2) == 4&& (*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2) == *(_DWORD *)(a1 + 28))
        {
          return 4;
        }
        else if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32), a2) != *(_DWORD *)(a1 + 28)|| (uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2), result != 4))
        {
          if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32), a2) != *(_DWORD *)(a1 + 28))return 3; {
          uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2);
          }
          if (result != *(_DWORD *)(a1 + 28)) {
            return 3;
          }
        }
      }
    }
  }
  return result;
}

void sub_19E47DC78()
{
}

void sub_19E47DE58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_19E43C8CC();
  if (a15 < 0) {
    operator delete(__p);
  }
  MEMORY[0x19F3BDCF0](v15, 0x10E1C40868C5753);
  _Unwind_Resume(a1);
}

void sub_19E47DEC4(void *a1)
{
  *a1 = &unk_1EF0BCD68;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    MEMORY[0x19F3BDCF0](v2, 0x20C4093837F09);
  }
  uint64_t v3 = (void *)a1[5];
  if (v3)
  {
    if (*v3) {
      (*(void (**)(void))(*(void *)*v3 + 8))(*v3);
    }
    MEMORY[0x19F3BDCF0](v3, 0x20C4093837F09);
  }
  JUMPOUT(0x19F3BDCF0);
}

void *sub_19E47DFBC(void *a1)
{
  *a1 = &unk_1EF0BCD68;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    MEMORY[0x19F3BDCF0](v2, 0x20C4093837F09);
  }
  uint64_t v3 = (void *)a1[5];
  if (v3)
  {
    if (*v3) {
      (*(void (**)(void))(*(void *)*v3 + 8))(*v3);
    }
    MEMORY[0x19F3BDCF0](v3, 0x20C4093837F09);
  }
  return a1;
}

void sub_19E47E094(uint64_t a1, int a2, __n128 a3)
{
  char v5 = (unsigned int *)(*(void *)(*(void *)(a1 + 176) + 104) + 12 * a2);
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  uint64_t v8 = *(void *)(a1 + 136);
  int v9 = *((unsigned __int8 *)v5 + 8);
  if (*(void *)(v8 + 24) != __PAIR64__(v7, v6) || v9 != *(unsigned __int8 *)(v8 + 32))
  {
    *(_DWORD *)(v8 + 24) = v6;
    *(_DWORD *)(v8 + 28) = v7;
    *(unsigned char *)(v8 + 32) = v9;
    uint64_t v10 = (*(uint64_t (**)(void, uint64_t))(**(void **)(v8 + 16) + 32))(*(void *)(v8 + 16), v6);
    uint64_t v11 = (*(uint64_t (**)(void, uint64_t))(**(void **)(v8 + 16) + 48))(*(void *)(v8 + 16), v6);
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(v8 + 16) + 24))(&v29);
    LODWORD(__p[0]) = v29;
    HIDWORD(v29) = 2139095039;
    a3.n128_u32[0] = v29;
    BOOL v13 = *(float *)&v29 == 3.4028e38 && v10 == v11;
    *(unsigned char *)(v8 + 33) = v13;
    *(unsigned char *)(v8 + 34) = v11 == 0;
  }
  int v14 = *(_DWORD *)(a1 + 184);
  if (!v14) {
    goto LABEL_31;
  }
  if (v14 != 1)
  {
    uint64_t v15 = (*(uint64_t (**)(void, uint64_t, __n128))(***(void ***)(a1 + 144) + 104))(**(void **)(a1 + 144), v6, a3);
    uint64_t v16 = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 152) + 104))(**(void **)(a1 + 152), v7);
    if (v15 == -1 && v16 == -1)
    {
      char v31 = 5;
      strcpy((char *)__p, "FATAL");
      int v28 = sub_19E37CA70(MEMORY[0x1E4FBA240], (uint64_t)__p, 5);
      sub_19E37CA70(v28, (uint64_t)": ", 2);
      sub_19E37CA70(MEMORY[0x1E4FBA240], (uint64_t)"ComposeFst: both sides can't require match", 42);
      sub_19E43C8CC();
      if (v31 < 0) {
        operator delete(__p[0]);
      }
      *(void *)(a1 + 8) |= 4uLL;
      goto LABEL_31;
    }
    BOOL v19 = v16 == -1 || v15 <= v16;
    if (v15 != -1 && v19)
    {
LABEL_31:
      float v22 = *(void **)(a1 + 152);
      uint64_t v21 = *(void *)(a1 + 160);
      uint64_t v23 = a1;
      int v24 = a2;
      uint64_t v25 = v7;
      uint64_t v26 = v6;
      int v27 = 1;
      goto LABEL_32;
    }
  }
  uint64_t v21 = *(void *)(a1 + 168);
  float v22 = *(void **)(a1 + 144);
  uint64_t v23 = a1;
  int v24 = a2;
  uint64_t v25 = v6;
  uint64_t v26 = v7;
  int v27 = 0;
LABEL_32:
  sub_19E47E360(v23, v24, v25, v21, v26, v22, v27);
}

void sub_19E47E338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_19E47E360(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, int a7)
{
  (*(void (**)(void, uint64_t))(*(void *)*a6 + 56))(*a6, a3);
  v18[0] = a7 - 1;
  v18[1] = a7 << 31 >> 31;
  v18[2] = 0;
  v18[3] = a5;
  sub_19E47E5B0(a1, a2, a6, v18, a7);
  unint64_t v17 = 0;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a4 + 120))(a4, a5, v15);
  while (1)
  {
    if (!v15[0])
    {
      unint64_t v14 = v17;
      if (v17 >= v15[2]) {
        goto LABEL_15;
      }
      goto LABEL_10;
    }
    if ((*(unsigned int (**)(void))(*(void *)v15[0] + 16))(v15[0])) {
      break;
    }
    if (!v15[0])
    {
      unint64_t v14 = v17;
LABEL_10:
      BOOL v13 = (unsigned int *)(v15[1] + 16 * v14);
      goto LABEL_11;
    }
    BOOL v13 = (unsigned int *)(*(uint64_t (**)(void))(*(void *)v15[0] + 24))();
LABEL_11:
    sub_19E47E5B0(a1, a2, a6, v13, a7);
    if (v15[0]) {
      (*(void (**)(void))(*(void *)v15[0] + 32))(v15[0]);
    }
    else {
      ++v17;
    }
  }
  if (v15[0])
  {
    (*(void (**)(void))(*(void *)v15[0] + 8))();
    goto LABEL_17;
  }
LABEL_15:
  if (v16) {
    --*v16;
  }
LABEL_17:
  sub_19E472A04(a1, a2);
}

void sub_19E47E55C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _DWORD *a13)
{
  if (!a10)
  {
    if (a13) {
      --*a13;
    }
    _Unwind_Resume(exception_object);
  }
  (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E47E5B0(uint64_t a1, int a2, void *a3, unsigned int *a4, int a5)
{
  char v5 = a5;
  uint64_t v10 = a4 + 1;
  if (!a5) {
    uint64_t v10 = a4;
  }
  uint64_t result = (*(uint64_t (**)(void, void))(*(void *)*a3 + 64))(*a3, *v10);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)*a3 + 72))();
    if ((result & 1) == 0)
    {
      if (v5)
      {
        while (1)
        {
          uint64_t v13 = (*(uint64_t (**)(void))(*(void *)*a3 + 80))();
          uint64_t v14 = *(void *)v13;
          uint64_t v28 = *(void *)v13;
          int v29 = *(_DWORD *)(v13 + 8);
          int v30 = *(_DWORD *)(v13 + 12);
          uint64_t v25 = *(void *)a4;
          unsigned int v26 = a4[2];
          unsigned int v27 = a4[3];
          uint64_t v15 = *(unsigned __int8 **)(a1 + 136);
          if (HIDWORD(v25) == -1)
          {
            if (v15[33]) {
              goto LABEL_13;
            }
            char v24 = v15[34] ^ 1;
          }
          else if (v14 == -1)
          {
            int v16 = v15[32];
            if (v15[32]) {
              char v17 = -1;
            }
            else {
              char v17 = 0;
            }
            char v24 = v17;
            if (v16) {
              goto LABEL_13;
            }
          }
          else
          {
            if (HIDWORD(v25)) {
              char v12 = 0;
            }
            else {
              char v12 = -1;
            }
            char v24 = v12;
            if (!HIDWORD(v25)) {
              goto LABEL_13;
            }
          }
          sub_19E47E8A0(a1, a2, (float *)&v25, (uint64_t)&v28, &v24);
LABEL_13:
          (*(void (**)(void))(*(void *)*a3 + 88))();
          uint64_t result = (*(uint64_t (**)(void))(*(void *)*a3 + 72))();
          if (result) {
            return result;
          }
        }
      }
      do
      {
        uint64_t v19 = (*(uint64_t (**)(void))(*(void *)*a3 + 80))();
        uint64_t v28 = *(void *)v19;
        int v29 = *(_DWORD *)(v19 + 8);
        int v30 = *(_DWORD *)(v19 + 12);
        uint64_t v20 = *(void *)a4;
        uint64_t v25 = *(void *)a4;
        unsigned int v26 = a4[2];
        unsigned int v27 = a4[3];
        uint64_t v21 = *(unsigned __int8 **)(a1 + 136);
        if (HIDWORD(v28) == -1)
        {
          if (v21[33]) {
            goto LABEL_28;
          }
          char v24 = v21[34] ^ 1;
        }
        else if (v20 == -1)
        {
          int v22 = v21[32];
          if (v22) {
            char v23 = -1;
          }
          else {
            char v23 = 0;
          }
          char v24 = v23;
          if (v22) {
            goto LABEL_28;
          }
        }
        else
        {
          if (HIDWORD(v28)) {
            char v18 = 0;
          }
          else {
            char v18 = -1;
          }
          char v24 = v18;
          if (!HIDWORD(v28)) {
            goto LABEL_28;
          }
        }
        sub_19E47E8A0(a1, a2, (float *)&v28, (uint64_t)&v25, &v24);
LABEL_28:
        (*(void (**)(void))(*(void *)*a3 + 88))();
        uint64_t result = (*(uint64_t (**)(void))(*(void *)*a3 + 72))();
      }
      while (!result);
    }
  }
  return result;
}

void sub_19E47E8A0(uint64_t a1, int a2, float *a3, uint64_t a4, char *a5)
{
  int v8 = *(_DWORD *)(a4 + 12);
  *(float *)&uint64_t v47 = a3[3];
  HIDWORD(v47) = v8;
  char v48 = *a5;
  uint64_t v9 = *(unsigned int *)a3;
  uint64_t v10 = *(unsigned int *)(a4 + 4);
  float v11 = a3[2];
  char v12 = (float *)&unk_1EC009000;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EC009378, memory_order_acquire) & 1) == 0)
  {
    int v42 = a3;
    int v43 = __cxa_guard_acquire(&qword_1EC009378);
    char v12 = (float *)&unk_1EC009000;
    a3 = v42;
    if (v43)
    {
      dword_1EC009380 = -8388609;
      __cxa_guard_release(&qword_1EC009378);
      char v12 = (float *)&unk_1EC009000;
      a3 = v42;
    }
  }
  if (v11 == v12[224]) {
    goto LABEL_11;
  }
  float v13 = *(float *)(a4 + 8);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EC009378, memory_order_acquire) & 1) == 0)
  {
    v46 = a3;
    v44 = v12;
    int v45 = __cxa_guard_acquire(&qword_1EC009378);
    char v12 = v44;
    a3 = v46;
    if (v45)
    {
      v44[224] = -3.4028e38;
      __cxa_guard_release(&qword_1EC009378);
      char v12 = v44;
      a3 = v46;
    }
  }
  if (v13 == v12[224])
  {
LABEL_11:
    float v18 = NAN;
  }
  else
  {
    float v14 = a3[2];
    float v15 = *(float *)(a4 + 8);
    BOOL v16 = v15 == 3.4028e38 || v14 == 3.4028e38;
    float v17 = v15 + v14;
    if (v16) {
      float v18 = 3.4028e38;
    }
    else {
      float v18 = v17;
    }
  }
  int v19 = sub_19E470994(*(void **)(a1 + 176), &v47);
  uint64_t v20 = *(void *)(a1 + 120);
  uint64_t v21 = sub_19E472B88(v20, a2);
  int v22 = (void *)v21;
  if (*(unsigned char *)(v20 + 104))
  {
    int v23 = *(_DWORD *)(v21 + 56);
    if ((v23 & 4) == 0)
    {
      *(_DWORD *)(v21 + 56) = v23 | 4;
      unint64_t v24 = *(void *)(v21 + 32) - *(void *)(v21 + 24) + *(void *)(v20 + 128) + 64;
      *(void *)(v20 + 128) = v24;
      *(unsigned char *)(v20 + 120) = 1;
      if (v24 > *(void *)(v20 + 112)) {
        sub_19E472D04(v20, v21);
      }
    }
  }
  uint64_t v25 = v9 | (v10 << 32);
  unint64_t v27 = v22[4];
  unint64_t v26 = v22[5];
  if (v27 >= v26)
  {
    uint64_t v29 = v22[3];
    uint64_t v30 = (uint64_t)(v27 - v29) >> 4;
    unint64_t v31 = v30 + 1;
    if ((unint64_t)(v30 + 1) >> 60) {
      sub_19E37C7C4();
    }
    uint64_t v32 = v26 - v29;
    if (v32 >> 3 > v31) {
      unint64_t v31 = v32 >> 3;
    }
    if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v33 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v33 = v31;
    }
    char v34 = sub_19E478CD4(v22 + 6, v33);
    uint64_t v35 = (float *)&v34[2 * v30];
    v36 = &v34[2 * v33];
    *(void *)uint64_t v35 = v25;
    v35[2] = v18;
    *((_DWORD *)v35 + 3) = v19;
    uint64_t v28 = v35 + 4;
    uint64_t v38 = (void *)v22[3];
    v37 = (void *)v22[4];
    if (v37 != v38)
    {
      unint64_t v39 = 0;
      do
      {
        uint64_t v40 = &v35[v39 / 4];
        *((void *)v40 - 2) = v37[v39 / 8 - 2];
        *(v40 - 2) = *(float *)&v37[v39 / 8 - 1];
        *(v40 - 1) = *((float *)&v37[v39 / 8 - 1] + 1);
        v39 -= 16;
      }
      while (&v37[v39 / 8] != v38);
      uint64_t v35 = (float *)((char *)v35 + v39);
      v37 = (void *)v22[3];
    }
    v22[3] = v35;
    v22[4] = v28;
    uint64_t v41 = v22[5];
    v22[5] = v36;
    if (v37) {
      sub_19E475CA4(v22 + 6, v37, (v41 - (uint64_t)v37) >> 4);
    }
  }
  else
  {
    *(void *)unint64_t v27 = v25;
    *(float *)(v27 + 8) = v18;
    uint64_t v28 = (void *)(v27 + 16);
    *(_DWORD *)(v27 + 12) = v19;
  }
  v22[4] = v28;
}

void sub_19E47EB64()
{
}

void sub_19E47ED74(_Unwind_Exception *a1)
{
  MEMORY[0x19F3BDCF0](v2, 0x10E0C401DE81863);
  sub_19E46B1C8(v1);
  MEMORY[0x19F3BDCF0](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

uint64_t sub_19E47EE08(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && ((*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 160) + 56))(*(void *)(a1 + 160), 4, 0)|| (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 168) + 56))(*(void *)(a1 + 168), 4, 0)|| ((*(uint64_t (**)(void, void))(***(void ***)(a1 + 144) + 40))(**(void **)(a1 + 144), 0) & 4) != 0|| ((*(uint64_t (**)(void, void))(***(void ***)(a1 + 152) + 40))(**(void **)(a1 + 152), 0) & 4) != 0))
  {
    *(void *)(a1 + 8) |= 4uLL;
  }
  return *(void *)(a1 + 8) & a2;
}

uint64_t sub_19E47EF14(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 24))(a1, 0x3FFFFFFF0007);
}

void sub_19E47EF40(void *a1)
{
  sub_19E47EF78(a1);
  JUMPOUT(0x19F3BDCF0);
}

uint64_t sub_19E47EF78(void *a1)
{
  *a1 = &unk_1EF0BCB08;
  uint64_t v2 = a1[17];
  if (v2)
  {
    uint64_t v3 = *(void **)v2;
    if (*(void *)v2)
    {
      if (*v3) {
        (*(void (**)(void))(*(void *)*v3 + 8))(*v3);
      }
      MEMORY[0x19F3BDCF0](v3, 0x20C4093837F09);
    }
    uint64_t v4 = *(void **)(v2 + 8);
    if (v4)
    {
      if (*v4) {
        (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
      }
      MEMORY[0x19F3BDCF0](v4, 0x20C4093837F09);
    }
    MEMORY[0x19F3BDCF0](v2, 0x1060C40AD892F49);
  }
  char v5 = (void *)a1[22];
  if (v5)
  {
    if (*v5) {
      MEMORY[0x19F3BDCF0](*v5, 0xC400A2AC0F1);
    }
    uint64_t v6 = v5[1];
    if (v6) {
      MEMORY[0x19F3BDCF0](v6, 0xC400A2AC0F1);
    }
    uint64_t v7 = (void *)v5[13];
    if (v7)
    {
      v5[14] = v7;
      operator delete(v7);
    }
    sub_19E46B83C((uint64_t)(v5 + 4));
    MEMORY[0x19F3BDCF0](v5, 0x10E0C401DE81863);
  }
  return sub_19E46B1C8((uint64_t)a1);
}

void sub_19E47F0F4(uint64_t a1@<X0>, float *a2@<X8>)
{
  (*(void (**)(char *__return_ptr))(***(void ***)(a1 + 144) + 96))((char *)&v12 + 4);
  float v4 = *((float *)&v12 + 1);
  int v14 = HIDWORD(v12);
  int v13 = 2139095039;
  if (*((float *)&v12 + 1) != 3.4028e38)
  {
    (*(void (**)(uint64_t *__return_ptr))(***(void ***)(a1 + 152) + 96))(&v12);
    float v4 = *(float *)&v12;
    int v14 = v12;
    int v13 = 2139095039;
    if (*(float *)&v12 != 3.4028e38)
    {
      float v5 = *((float *)&v12 + 1);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EC009378, memory_order_acquire) & 1) == 0)
      {
        float v10 = v5;
        int v8 = __cxa_guard_acquire(&qword_1EC009378);
        float v5 = v10;
        if (v8)
        {
          dword_1EC009380 = -8388609;
          __cxa_guard_release(&qword_1EC009378);
          float v5 = v10;
        }
      }
      if (v5 == *(float *)&dword_1EC009380) {
        goto LABEL_13;
      }
      float v6 = *(float *)&v12;
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EC009378, memory_order_acquire) & 1) == 0)
      {
        float v11 = v6;
        int v9 = __cxa_guard_acquire(&qword_1EC009378);
        float v6 = v11;
        if (v9)
        {
          dword_1EC009380 = -8388609;
          __cxa_guard_release(&qword_1EC009378);
          float v6 = v11;
        }
      }
      if (v6 == *(float *)&dword_1EC009380)
      {
LABEL_13:
        float v4 = NAN;
      }
      else
      {
        BOOL v7 = *(float *)&v12 == 3.4028e38 || *((float *)&v12 + 1) == 3.4028e38;
        float v4 = *(float *)&v12 + *((float *)&v12 + 1);
        if (v7) {
          float v4 = 3.4028e38;
        }
      }
    }
  }
  *a2 = v4;
}

uint64_t sub_19E47F2BC(void **a1)
{
  uint64_t result = (*(uint64_t (**)(void *))(*a1[20] + 16))(a1[20]);
  if (result != -1)
  {
    unsigned int v3 = result;
    uint64_t result = (*(uint64_t (**)(void *))(*a1[21] + 16))(a1[21]);
    if (result != -1)
    {
      unint64_t v4 = __PAIR64__(result, v3);
      char v5 = 0;
      return sub_19E470994(a1[22], (uint64_t *)&v4);
    }
  }
  return result;
}

uint64_t sub_19E47F35C(uint64_t a1, uint64_t a2, int a3)
{
  if ((*(unsigned int (**)(void, void))(***(void ***)(a1 + 144) + 24))(**(void **)(a1 + 144), 0) == a3
    && (*(unsigned int (**)(void, void))(***(void ***)(a1 + 152) + 24))(**(void **)(a1 + 152), 0) == a3)
  {
    operator new();
  }
  return 0;
}

void sub_19E47F524(_Unwind_Exception *a1)
{
  MEMORY[0x19F3BDCF0](v2, 0x20C4093837F09);
  MEMORY[0x19F3BDCF0](v1, 0x10E1C40868C5753);
  _Unwind_Resume(a1);
}

uint64_t sub_19E47F56C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 32))();
}

uint64_t sub_19E47F594(uint64_t result)
{
  if (*(unsigned char *)(result + 48))
  {
    *(unsigned char *)(result + 48) = 0;
  }
  else
  {
    if (*(_DWORD *)(result + 28))
    {
      uint64_t v2 = *(void **)(result + 32);
      uint64_t v1 = *(void *)(result + 40);
    }
    else
    {
      uint64_t v1 = *(void *)(result + 32);
      uint64_t v2 = *(void **)(result + 40);
    }
    return sub_19E47F5BC(result, v1, v2);
  }
  return result;
}

uint64_t sub_19E47F5BC(uint64_t a1, uint64_t a2, void *a3)
{
  while (!(*(unsigned int (**)(void))(**(void **)a2 + 72))()
       || ((*(uint64_t (**)(void))(*(void *)*a3 + 72))() & 1) == 0)
  {
    if ((*(unsigned int (**)(void))(*(void *)*a3 + 72))())
    {
      (*(void (**)(void))(**(void **)a2 + 88))();
      if (((*(uint64_t (**)(void))(**(void **)a2 + 72))() & 1) == 0)
      {
        do
        {
          int v6 = *(_DWORD *)(a1 + 28);
          uint64_t v7 = (*(uint64_t (**)(void))(**(void **)a2 + 80))();
          int v8 = (unsigned int *)(v7 + 4);
          if (v6) {
            int v8 = (unsigned int *)v7;
          }
          if ((*(uint64_t (**)(void, void))(*(void *)*a3 + 64))(*a3, *v8)) {
            break;
          }
          (*(void (**)(void))(**(void **)a2 + 88))();
        }
        while (!(*(unsigned int (**)(void))(**(void **)a2 + 72))());
      }
    }
    while (((*(uint64_t (**)(void))(*(void *)*a3 + 72))() & 1) == 0)
    {
      uint64_t v9 = (*(uint64_t (**)(void))(**(void **)a2 + 80))();
      uint64_t v10 = (*(uint64_t (**)(void))(*(void *)*a3 + 80))();
      (*(void (**)(void))(*(void *)*a3 + 88))();
      int v11 = *(_DWORD *)(a1 + 28);
      if (v11) {
        uint64_t v12 = v10;
      }
      else {
        uint64_t v12 = v9;
      }
      uint64_t v13 = *(void *)v12;
      if (*(void *)v12 <= 0xFFFFFFFEFFFFFFFFLL)
      {
        uint64_t v14 = v11 ? v9 : v10;
        uint64_t v15 = *(void *)v14;
        if (*(void *)v14 != -1)
        {
          float v16 = *(float *)(v14 + 8);
          float v17 = *(float *)(v12 + 8);
          int v18 = *(_DWORD *)(v14 + 12);
          LODWORD(v28) = *(_DWORD *)(v12 + 12);
          HIDWORD(v28) = v18;
          char v29 = 0;
          *(_DWORD *)(a1 + 68) = v13;
          *(_DWORD *)(a1 + 72) = HIDWORD(v15);
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EC009378, memory_order_acquire) & 1) == 0)
          {
            float v24 = v17;
            float v26 = v16;
            int v22 = __cxa_guard_acquire(&qword_1EC009378);
            float v17 = v24;
            float v16 = v26;
            if (v22)
            {
              dword_1EC009380 = -8388609;
              __cxa_guard_release(&qword_1EC009378);
              float v17 = v24;
              float v16 = v26;
            }
          }
          if (v17 == *(float *)&dword_1EC009380) {
            goto LABEL_28;
          }
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EC009378, memory_order_acquire) & 1) == 0)
          {
            float v25 = v17;
            float v27 = v16;
            int v23 = __cxa_guard_acquire(&qword_1EC009378);
            float v17 = v25;
            float v16 = v27;
            if (v23)
            {
              dword_1EC009380 = -8388609;
              __cxa_guard_release(&qword_1EC009378);
              float v17 = v25;
              float v16 = v27;
            }
          }
          if (v16 == *(float *)&dword_1EC009380)
          {
LABEL_28:
            float v20 = NAN;
          }
          else
          {
            BOOL v19 = v16 == 3.4028e38 || v17 == 3.4028e38;
            float v20 = v16 + v17;
            if (v19) {
              float v20 = 3.4028e38;
            }
          }
          *(float *)(a1 + 76) = v20;
          *(_DWORD *)(a1 + 80) = sub_19E470994(*(void **)(*(void *)(a1 + 16) + 176), &v28);
          return 1;
        }
      }
    }
  }
  return 0;
}

uint64_t sub_19E47F970(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48)) {
    return a1 + 52;
  }
  else {
    return a1 + 68;
  }
}

uint64_t sub_19E47F988(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48)
    || !(*(unsigned int (**)(void))(***(void ***)(a1 + 32) + 72))(**(void **)(a1 + 32)))
  {
    return 0;
  }
  uint64_t v2 = *(uint64_t (**)(void))(***(void ***)(a1 + 40) + 72);
  return v2();
}

uint64_t sub_19E47FA28(uint64_t a1, int a2)
{
  *(unsigned char *)(a1 + 48) = a2 == 0;
  if (*(_DWORD *)(a1 + 28))
  {
    if (a2)
    {
      unint64_t v4 = *(void **)(a1 + 32);
      uint64_t v3 = *(void *)(a1 + 40);
      goto LABEL_6;
    }
    return 1;
  }
  if (!a2) {
    return 1;
  }
  uint64_t v3 = *(void *)(a1 + 32);
  unint64_t v4 = *(void **)(a1 + 40);
LABEL_6:
  uint64_t result = (*(uint64_t (**)(void))(**(void **)v3 + 64))();
  if (result)
  {
    int v6 = *(_DWORD *)(a1 + 28);
    uint64_t v7 = (*(uint64_t (**)(void))(**(void **)v3 + 80))();
    int v8 = (unsigned int *)(v7 + 4);
    if (v6) {
      int v8 = (unsigned int *)v7;
    }
    (*(void (**)(void, void))(*(void *)*v4 + 64))(*v4, *v8);
    return sub_19E47F5BC(a1, v3, v4);
  }
  return result;
}

uint64_t sub_19E47FB38(uint64_t result, int a2)
{
  if (*(_DWORD *)(result + 24) != a2)
  {
    uint64_t v2 = result;
    *(_DWORD *)(result + 24) = a2;
    uint64_t v3 = (unsigned int *)(*(void *)(*(void *)(*(void *)(result + 16) + 176) + 104) + 12 * a2);
    uint64_t v4 = v3[1];
    (*(void (**)(void, void))(***(void ***)(result + 32) + 56))(**(void **)(result + 32), *v3);
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(v2 + 40) + 56))(**(void **)(v2 + 40), v4);
    *(_DWORD *)(v2 + 64) = *(_DWORD *)(v2 + 24);
  }
  return result;
}

uint64_t sub_19E47FBE4(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 84)) {
    return a2 | 4;
  }
  else {
    return a2;
  }
}

uint64_t sub_19E47FBF8(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_19E47FC00(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(void))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32));
  if (result != 3)
  {
    uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2);
    if (result != 3)
    {
      if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32), a2) != 4|| (uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2), result != 4))
      {
        if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32), a2) == 4&& (*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2) == *(_DWORD *)(a1 + 28))
        {
          return 4;
        }
        else if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32), a2) != *(_DWORD *)(a1 + 28)|| (uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2), result != 4))
        {
          if ((*(unsigned int (**)(void, uint64_t))(***(void ***)(a1 + 32) + 24))(**(void **)(a1 + 32), a2) != *(_DWORD *)(a1 + 28))return 3; {
          uint64_t result = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 40) + 24))(**(void **)(a1 + 40), a2);
          }
          if (result != *(_DWORD *)(a1 + 28)) {
            return 3;
          }
        }
      }
    }
  }
  return result;
}

void sub_19E47FE6C()
{
}

void sub_19E48004C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_19E43C8CC();
  if (a15 < 0) {
    operator delete(__p);
  }
  MEMORY[0x19F3BDCF0](v15, 0x10E1C40868C5753);
  _Unwind_Resume(a1);
}

void sub_19E4800B8(void *a1)
{
  *a1 = &unk_1EF0BCC68;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    MEMORY[0x19F3BDCF0](v2, 0x20C4093837F09);
  }
  uint64_t v3 = (void *)a1[5];
  if (v3)
  {
    if (*v3) {
      (*(void (**)(void))(*(void *)*v3 + 8))(*v3);
    }
    MEMORY[0x19F3BDCF0](v3, 0x20C4093837F09);
  }
  JUMPOUT(0x19F3BDCF0);
}

void *sub_19E4801B0(void *a1)
{
  *a1 = &unk_1EF0BCC68;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    MEMORY[0x19F3BDCF0](v2, 0x20C4093837F09);
  }
  uint64_t v3 = (void *)a1[5];
  if (v3)
  {
    if (*v3) {
      (*(void (**)(void))(*(void *)*v3 + 8))(*v3);
    }
    MEMORY[0x19F3BDCF0](v3, 0x20C4093837F09);
  }
  return a1;
}

void sub_19E480288(uint64_t a1, int a2)
{
  uint64_t v4 = (unsigned int *)(*(void *)(*(void *)(a1 + 176) + 104) + 12 * a2);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  int v7 = *(_DWORD *)(a1 + 184);
  if (v7)
  {
    if (v7 == 1) {
      goto LABEL_18;
    }
    uint64_t v8 = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 144) + 104))(**(void **)(a1 + 144), v5);
    uint64_t v9 = (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 152) + 104))(**(void **)(a1 + 152), v6);
    if (v8 == -1 && v9 == -1)
    {
      char v23 = 5;
      strcpy((char *)__p, "FATAL");
      uint64_t v21 = sub_19E37CA70(MEMORY[0x1E4FBA240], (uint64_t)__p, 5);
      sub_19E37CA70(v21, (uint64_t)": ", 2);
      sub_19E37CA70(MEMORY[0x1E4FBA240], (uint64_t)"ComposeFst: both sides can't require match", 42);
      sub_19E43C8CC();
      if (v23 < 0) {
        operator delete(__p[0]);
      }
      *(void *)(a1 + 8) |= 4uLL;
      goto LABEL_22;
    }
    BOOL v11 = v9 == -1 || v8 <= v9;
    BOOL v12 = v11;
    if (v8 == -1 || !v12)
    {
LABEL_18:
      uint64_t v14 = *(void *)(a1 + 168);
      uint64_t v15 = *(void **)(a1 + 144);
      uint64_t v16 = a1;
      int v17 = a2;
      uint64_t v18 = v5;
      uint64_t v19 = v6;
      int v20 = 0;
      goto LABEL_23;
    }
  }
LABEL_22:
  uint64_t v15 = *(void **)(a1 + 152);
  uint64_t v14 = *(void *)(a1 + 160);
  uint64_t v16 = a1;
  int v17 = a2;
  uint64_t v18 = v6;
  uint64_t v19 = v5;
  int v20 = 1;
LABEL_23:
  sub_19E480458(v16, v17, v18, v14, v19, v15, v20);
}

void sub_19E480430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_19E480458(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, int a7)
{
  (*(void (**)(void, uint64_t))(*(void *)*a6 + 56))(*a6, a3);
  v18[0] = a7 - 1;
  v18[1] = a7 << 31 >> 31;
  v18[2] = 0;
  v18[3] = a5;
  sub_19E4806A8(a1, a2, a6, v18, a7);
  unint64_t v17 = 0;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a4 + 120))(a4, a5, v15);
  while (1)
  {
    if (!v15[0])
    {
      unint64_t v14 = v17;
      if (v17 >= v15[2]) {
        goto LABEL_15;
      }
      goto LABEL_10;
    }
    if ((*(unsigned int (**)(void))(*(void *)v15[0] + 16))(v15[0])) {
      break;
    }
    if (!v15[0])
    {
      unint64_t v14 = v17;
LABEL_10:
      uint64_t v13 = (unsigned int *)(v15[1] + 16 * v14);
      goto LABEL_11;
    }
    uint64_t v13 = (unsigned int *)(*(uint64_t (**)(void))(*(void *)v15[0] + 24))();
LABEL_11:
    sub_19E4806A8(a1, a2, a6, v13, a7);
    if (v15[0]) {
      (*(void (**)(void))(*(void *)v15[0] + 32))(v15[0]);
    }
    else {
      ++v17;
    }
  }
  if (v15[0])
  {
    (*(void (**)(void))(*(void *)v15[0] + 8))();
    goto LABEL_17;
  }
LABEL_15:
  if (v16) {
    --*v16;
  }
LABEL_17:
  sub_19E472A04(a1, a2);
}

void sub_19E480654(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _DWORD *a13)
{
  if (!a10)
  {
    if (a13) {
      --*a13;
    }
    _Unwind_Resume(exception_object);
  }
  (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E4806A8(uint64_t a1, int a2, void *a3, unsigned int *a4, int a5)
{
  char v5 = a5;
  uint64_t v10 = a4 + 1;
  if (!a5) {
    uint64_t v10 = a4;
  }
  uint64_t result = (*(uint64_t (**)(void, void))(*(void *)*a3 + 64))(*a3, *v10);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(void))(*(void *)*a3 + 72))();
    if ((result & 1) == 0)
    {
      if (v5)
      {
        do
        {
          uint64_t v12 = (*(uint64_t (**)(void))(*(void *)*a3 + 80))();
          unint64_t v13 = *(void *)v12;
          unint64_t v24 = *(void *)v12;
          int v25 = *(_DWORD *)(v12 + 8);
          int v26 = *(_DWORD *)(v12 + 12);
          unint64_t v21 = *(void *)a4;
          unsigned int v22 = a4[2];
          unsigned int v23 = a4[3];
          if (v21 <= 0xFFFFFFFEFFFFFFFFLL)
          {
            BOOL v14 = v13 == 0xFFFFFFFFLL;
            if (v13 == 0xFFFFFFFFLL) {
              char v15 = -1;
            }
            else {
              char v15 = 0;
            }
            char v20 = v15;
            if (!v14) {
              sub_19E48093C(a1, a2, (float *)&v21, (uint64_t)&v24, &v20);
            }
          }
          (*(void (**)(void))(*(void *)*a3 + 88))();
          uint64_t result = (*(uint64_t (**)(void))(*(void *)*a3 + 72))();
        }
        while ((result & 1) == 0);
      }
      else
      {
        do
        {
          uint64_t v16 = (*(uint64_t (**)(void))(*(void *)*a3 + 80))();
          unint64_t v24 = *(void *)v16;
          int v25 = *(_DWORD *)(v16 + 8);
          int v26 = *(_DWORD *)(v16 + 12);
          unint64_t v17 = *(void *)a4;
          unint64_t v21 = *(void *)a4;
          unsigned int v22 = a4[2];
          unsigned int v23 = a4[3];
          if (v24 <= 0xFFFFFFFEFFFFFFFFLL)
          {
            BOOL v18 = v17 == 0xFFFFFFFFLL;
            char v19 = v17 == 0xFFFFFFFFLL ? -1 : 0;
            char v20 = v19;
            if (!v18) {
              sub_19E48093C(a1, a2, (float *)&v24, (uint64_t)&v21, &v20);
            }
          }
          (*(void (**)(void))(*(void *)*a3 + 88))();
          uint64_t result = (*(uint64_t (**)(void))(*(void *)*a3 + 72))();
        }
        while (!result);
      }
    }
  }
  return result;
}

void sub_19E48093C(uint64_t a1, int a2, float *a3, uint64_t a4, char *a5)
{
  int v8 = *(_DWORD *)(a4 + 12);
  *(float *)&uint64_t v47 = a3[3];
  HIDWORD(v47) = v8;
  char v48 = *a5;
  uint64_t v9 = *(unsigned int *)a3;
  uint64_t v10 = *(unsigned int *)(a4 + 4);
  float v11 = a3[2];
  uint64_t v12 = (float *)&unk_1EC009000;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EC009378, memory_order_acquire) & 1) == 0)
  {
    int v42 = a3;
    int v43 = __cxa_guard_acquire(&qword_1EC009378);
    uint64_t v12 = (float *)&unk_1EC009000;
    a3 = v42;
    if (v43)
    {
      dword_1EC009380 = -8388609;
      __cxa_guard_release(&qword_1EC009378);
      uint64_t v12 = (float *)&unk_1EC009000;
      a3 = v42;
    }
  }
  if (v11 == v12[224]) {
    goto LABEL_11;
  }
  float v13 = *(float *)(a4 + 8);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EC009378, memory_order_acquire) & 1) == 0)
  {
    v46 = a3;
    v44 = v12;
    int v45 = __cxa_guard_acquire(&qword_1EC009378);
    uint64_t v12 = v44;
    a3 = v46;
    if (v45)
    {
      v44[224] = -3.4028e38;
      __cxa_guard_release(&qword_1EC009378);
      uint64_t v12 = v44;
      a3 = v46;
    }
  }
  if (v13 == v12[224])
  {
LABEL_11:
    float v18 = NAN;
  }
  else
  {
    float v14 = a3[2];
    float v15 = *(float *)(a4 + 8);
    BOOL v16 = v15 == 3.4028e38 || v14 == 3.4028e38;
    float v17 = v15 + v14;
    if (v16) {
      float v18 = 3.4028e38;
    }
    else {
      float v18 = v17;
    }
  }
  int v19 = sub_19E470994(*(void **)(a1 + 176), &v47);
  uint64_t v20 = *(void *)(a1 + 120);
  uint64_t v21 = sub_19E472B88(v20, a2);
  unsigned int v22 = (void *)v21;
  if (*(unsigned char *)(v20 + 104))
  {
    int v23 = *(_DWORD *)(v21 + 56);
    if ((v23 & 4) == 0)
    {
      *(_DWORD *)(v21 + 56) = v23 | 4;
      unint64_t v24 = *(void *)(v21 + 32) - *(void *)(v21 + 24) + *(void *)(v20 + 128) + 64;
      *(void *)(v20 + 128) = v24;
      *(unsigned char *)(v20 + 120) = 1;
      if (v24 > *(void *)(v20 + 112)) {
        sub_19E472D04(v20, v21);
      }
    }
  }
  uint64_t v25 = v9 | (v10 << 32);
  unint64_t v27 = v22[4];
  unint64_t v26 = v22[5];
  if (v27 >= v26)
  {
    uint64_t v29 = v22[3];
    uint64_t v30 = (uint64_t)(v27 - v29) >> 4;
    unint64_t v31 = v30 + 1;
    if ((unint64_t)(v30 + 1) >> 60) {
      sub_19E37C7C4();
    }
    uint64_t v32 = v26 - v29;
    if (v32 >> 3 > v31) {
      unint64_t v31 = v32 >> 3;
    }
    if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v33 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v33 = v31;
    }
    char v34 = sub_19E478CD4(v22 + 6, v33);
    uint64_t v35 = (float *)&v34[2 * v30];
    v36 = &v34[2 * v33];
    *(void *)uint64_t v35 = v25;
    v35[2] = v18;
    *((_DWORD *)v35 + 3) = v19;
    uint64_t v28 = v35 + 4;
    uint64_t v38 = (void *)v22[3];
    v37 = (void *)v22[4];
    if (v37 != v38)
    {
      unint64_t v39 = 0;
      do
      {
        uint64_t v40 = &v35[v39 / 4];
        *((void *)v40 - 2) = v37[v39 / 8 - 2];
        *(v40 - 2) = *(float *)&v37[v39 / 8 - 1];
        *(v40 - 1) = *((float *)&v37[v39 / 8 - 1] + 1);
        v39 -= 16;
      }
      while (&v37[v39 / 8] != v38);
      uint64_t v35 = (float *)((char *)v35 + v39);
      v37 = (void *)v22[3];
    }
    v22[3] = v35;
    v22[4] = v28;
    uint64_t v41 = v22[5];
    v22[5] = v36;
    if (v37) {
      sub_19E475CA4(v22 + 6, v37, (v41 - (uint64_t)v37) >> 4);
    }
  }
  else
  {
    *(void *)unint64_t v27 = v25;
    *(float *)(v27 + 8) = v18;
    uint64_t v28 = (void *)(v27 + 16);
    *(_DWORD *)(v27 + 12) = v19;
  }
  v22[4] = v28;
}

void sub_19E480C00()
{
}

void sub_19E480E38(_Unwind_Exception *a1)
{
  MEMORY[0x19F3BDCF0](v2, 0x10E0C401DE81863);
  sub_19E46B1C8(v1);
  MEMORY[0x19F3BDCF0](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

uint64_t sub_19E480ECC(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && ((*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 160) + 56))(*(void *)(a1 + 160), 4, 0)|| (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 168) + 56))(*(void *)(a1 + 168), 4, 0)|| ((*(uint64_t (**)(void, void))(***(void ***)(a1 + 144) + 40))(**(void **)(a1 + 144), 0) & 4) != 0|| ((*(uint64_t (**)(void, void))(***(void ***)(a1 + 152) + 40))(**(void **)(a1 + 152), 0) & 4) != 0))
  {
    *(void *)(a1 + 8) |= 4uLL;
  }
  return *(void *)(a1 + 8) & a2;
}

uint64_t sub_19E480FD8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 24))(a1, 0x3FFFFFFF0007);
}

void sub_19E481004(void *a1)
{
  sub_19E48103C(a1);
  JUMPOUT(0x19F3BDCF0);
}

uint64_t sub_19E48103C(void *a1)
{
  *a1 = &unk_1EF0BCA58;
  uint64_t v2 = a1[17];
  if (v2)
  {
    uint64_t v3 = *(void **)v2;
    if (*(void *)v2)
    {
      if (*v3) {
        (*(void (**)(void))(*(void *)*v3 + 8))(*v3);
      }
      MEMORY[0x19F3BDCF0](v3, 0x20C4093837F09);
    }
    uint64_t v4 = *(void **)(v2 + 8);
    if (v4)
    {
      if (*v4) {
        (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
      }
      MEMORY[0x19F3BDCF0](v4, 0x20C4093837F09);
    }
    MEMORY[0x19F3BDCF0](v2, 0x60C40FFD3A10ELL);
  }
  char v5 = (void *)a1[22];
  if (v5)
  {
    if (*v5) {
      MEMORY[0x19F3BDCF0](*v5, 0xC400A2AC0F1);
    }
    uint64_t v6 = v5[1];
    if (v6) {
      MEMORY[0x19F3BDCF0](v6, 0xC400A2AC0F1);
    }
    int v7 = (void *)v5[13];
    if (v7)
    {
      v5[14] = v7;
      operator delete(v7);
    }
    sub_19E46B83C((uint64_t)(v5 + 4));
    MEMORY[0x19F3BDCF0](v5, 0x10E0C401DE81863);
  }
  return sub_19E46B1C8((uint64_t)a1);
}

uint64_t sub_19E4811B8(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 48);
}

uint64_t sub_19E4811C4(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 40);
}

uint64_t sub_19E4811D0(uint64_t a1)
{
  return *(void *)(a1 + 8) + 16;
}

uint64_t sub_19E4811DC(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    uint64_t v8 = 0;
    unint64_t v5 = sub_19E4614A8(a1, a2, &v8);
    *(void *)(*(void *)(a1 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8) & (~v8 | 4) | v8 & v5;
    return v5 & a2;
  }
  else
  {
    int v7 = *(uint64_t (**)(void))(**(void **)(a1 + 8) + 24);
    return v7();
  }
}

uint64_t sub_19E481290(uint64_t a1, uint64_t a2)
{
  int v2 = a2;
  uint64_t v3 = *(void **)(a1 + 8);
  uint64_t v4 = v3[15];
  int v5 = *(_DWORD *)(v4 + 92);
  if (v5 == a2)
  {
    uint64_t v6 = *(void *)(v4 + 96);
    if (!v6) {
      goto LABEL_7;
    }
  }
  else
  {
    unint64_t v7 = (int)a2 + 1;
    uint64_t v8 = *(void *)(v4 + 8);
    if (v7 >= (*(void *)(v4 + 16) - v8) >> 3) {
      goto LABEL_7;
    }
    uint64_t v6 = *(void *)(v8 + 8 * v7);
    if (!v6) {
      goto LABEL_7;
    }
  }
  int v9 = *(_DWORD *)(v6 + 56);
  if ((v9 & 2) != 0)
  {
    *(_DWORD *)(v6 + 56) = v9 | 8;
    if (v5 == a2) {
      goto LABEL_8;
    }
LABEL_10:
    uint64_t v10 = *(void *)(v4 + 8) + 8 * v2 + 8;
    return *(void *)(*(void *)v10 + 16);
  }
LABEL_7:
  (*(void (**)(void, uint64_t))(*v3 + 40))(*(void *)(a1 + 8), a2);
  uint64_t v4 = v3[15];
  if (*(_DWORD *)(v4 + 92) != v2) {
    goto LABEL_10;
  }
LABEL_8:
  uint64_t v10 = v4 + 96;
  return *(void *)(*(void *)v10 + 16);
}

uint64_t sub_19E481368(uint64_t a1, uint64_t a2)
{
  int v2 = a2;
  uint64_t v3 = *(void **)(a1 + 8);
  uint64_t v4 = v3[15];
  int v5 = *(_DWORD *)(v4 + 92);
  if (v5 == a2)
  {
    uint64_t v6 = *(void *)(v4 + 96);
    if (!v6) {
      goto LABEL_7;
    }
  }
  else
  {
    unint64_t v7 = (int)a2 + 1;
    uint64_t v8 = *(void *)(v4 + 8);
    if (v7 >= (*(void *)(v4 + 16) - v8) >> 3) {
      goto LABEL_7;
    }
    uint64_t v6 = *(void *)(v8 + 8 * v7);
    if (!v6) {
      goto LABEL_7;
    }
  }
  int v9 = *(_DWORD *)(v6 + 56);
  if ((v9 & 2) != 0)
  {
    *(_DWORD *)(v6 + 56) = v9 | 8;
    if (v5 == a2) {
      goto LABEL_8;
    }
LABEL_10:
    uint64_t v10 = *(void *)(v4 + 8) + 8 * v2 + 8;
    return *(void *)(*(void *)v10 + 8);
  }
LABEL_7:
  (*(void (**)(void, uint64_t))(*v3 + 40))(*(void *)(a1 + 8), a2);
  uint64_t v4 = v3[15];
  if (*(_DWORD *)(v4 + 92) != v2) {
    goto LABEL_10;
  }
LABEL_8:
  uint64_t v10 = v4 + 96;
  return *(void *)(*(void *)v10 + 8);
}

uint64_t sub_19E481440(uint64_t a1, uint64_t a2)
{
  int v2 = a2;
  uint64_t v3 = *(void **)(a1 + 8);
  uint64_t v4 = v3[15];
  int v5 = *(_DWORD *)(v4 + 92);
  if (v5 == a2)
  {
    uint64_t v6 = *(void *)(v4 + 96);
    if (!v6) {
      goto LABEL_7;
    }
  }
  else
  {
    unint64_t v7 = (int)a2 + 1;
    uint64_t v8 = *(void *)(v4 + 8);
    if (v7 >= (*(void *)(v4 + 16) - v8) >> 3) {
      goto LABEL_7;
    }
    uint64_t v6 = *(void *)(v8 + 8 * v7);
    if (!v6) {
      goto LABEL_7;
    }
  }
  int v9 = *(_DWORD *)(v6 + 56);
  if ((v9 & 2) != 0)
  {
    *(_DWORD *)(v6 + 56) = v9 | 8;
    if (v5 == a2) {
      goto LABEL_8;
    }
LABEL_10:
    uint64_t v10 = *(void *)(v4 + 8) + 8 * v2 + 8;
    return (uint64_t)(*(void *)(*(void *)v10 + 32) - *(void *)(*(void *)v10 + 24)) >> 4;
  }
LABEL_7:
  (*(void (**)(void, uint64_t))(*v3 + 40))(*(void *)(a1 + 8), a2);
  uint64_t v4 = v3[15];
  if (*(_DWORD *)(v4 + 92) != v2) {
    goto LABEL_10;
  }
LABEL_8:
  uint64_t v10 = v4 + 96;
  return (uint64_t)(*(void *)(*(void *)v10 + 32) - *(void *)(*(void *)v10 + 24)) >> 4;
}

float sub_19E481520@<S0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  int v3 = a2;
  int v5 = *(void **)(a1 + 8);
  uint64_t v6 = v5[15];
  int v7 = *(_DWORD *)(v6 + 92);
  if (v7 == a2)
  {
    uint64_t v8 = *(void *)(v6 + 96);
    if (!v8) {
      goto LABEL_7;
    }
  }
  else
  {
    unint64_t v9 = (int)a2 + 1;
    uint64_t v10 = *(void *)(v6 + 8);
    if (v9 >= (*(void *)(v6 + 16) - v10) >> 3 || (uint64_t v8 = *(void *)(v10 + 8 * v9)) == 0)
    {
LABEL_7:
      (*(void (**)(uint64_t *__return_ptr, void, uint64_t))(*v5 + 64))(&v21, *(void *)(a1 + 8), a2);
      int v12 = v21;
      uint64_t v13 = v5[15];
      uint64_t v14 = sub_19E472B88(v13, v3);
      float v15 = (_DWORD *)v14;
      if (*(unsigned char *)(v13 + 104))
      {
        int v16 = *(_DWORD *)(v14 + 56);
        if ((v16 & 4) == 0)
        {
          *(_DWORD *)(v14 + 56) = v16 | 4;
          unint64_t v17 = *(void *)(v14 + 32) - *(void *)(v14 + 24) + *(void *)(v13 + 128) + 64;
          *(void *)(v13 + 128) = v17;
          *(unsigned char *)(v13 + 120) = 1;
          if (v17 > *(void *)(v13 + 112)) {
            sub_19E472D04(v13, v14);
          }
        }
      }
      *float v15 = v12;
      v15[14] |= 9u;
      uint64_t v6 = v5[15];
      if (*(_DWORD *)(v6 + 92) == v3) {
        goto LABEL_12;
      }
LABEL_14:
      float v18 = (float **)(*(void *)(v6 + 8) + 8 * v3 + 8);
      goto LABEL_15;
    }
  }
  int v11 = *(_DWORD *)(v8 + 56);
  if ((v11 & 1) == 0) {
    goto LABEL_7;
  }
  *(_DWORD *)(v8 + 56) = v11 | 8;
  if (v7 != a2) {
    goto LABEL_14;
  }
LABEL_12:
  float v18 = (float **)(v6 + 96);
LABEL_15:
  int v19 = *v18;
  float result = *v19;
  *a3 = *(_DWORD *)v19;
  return result;
}

uint64_t sub_19E4816A0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (!*(unsigned char *)(v1 + 60))
  {
    if ((*(uint64_t (**)(void, uint64_t))(*(void *)v1 + 24))(*(void *)(a1 + 8), 4))
    {
      *(unsigned char *)(v1 + 60) = 1;
    }
    else if (!*(unsigned char *)(v1 + 60))
    {
      int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 56))(v1);
      if (v3 != -1)
      {
        *(_DWORD *)(v1 + 64) = v3;
        *(unsigned char *)(v1 + 60) = 1;
        if (*(_DWORD *)(v1 + 68) <= v3) {
          *(_DWORD *)(v1 + 68) = v3 + 1;
        }
      }
    }
  }
  return *(unsigned int *)(v1 + 64);
}

uint64_t sub_19E48176C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8), a1, a2);
}

uint64_t sub_19E48179C(uint64_t result, uint64_t a2, void *a3)
{
  int v4 = a2;
  int v5 = *(void **)(result + 8);
  uint64_t v6 = v5[15];
  int v7 = *(_DWORD *)(v6 + 92);
  if (v7 == a2)
  {
    uint64_t v8 = *(void *)(v6 + 96);
    if (!v8) {
      goto LABEL_7;
    }
  }
  else
  {
    unint64_t v9 = (int)a2 + 1;
    uint64_t v10 = *(void *)(v6 + 8);
    if (v9 >= (*(void *)(v6 + 16) - v10) >> 3) {
      goto LABEL_7;
    }
    uint64_t v8 = *(void *)(v10 + 8 * v9);
    if (!v8) {
      goto LABEL_7;
    }
  }
  int v11 = *(_DWORD *)(v8 + 56);
  if ((v11 & 2) != 0)
  {
    *(_DWORD *)(v8 + 56) = v11 | 8;
    if (v7 == a2) {
      goto LABEL_8;
    }
    goto LABEL_10;
  }
LABEL_7:
  float result = (*(uint64_t (**)(void, uint64_t))(*v5 + 40))(*(void *)(result + 8), a2);
  uint64_t v6 = v5[15];
  if (*(_DWORD *)(v6 + 92) == v4)
  {
LABEL_8:
    int v12 = (uint64_t *)(v6 + 96);
    goto LABEL_11;
  }
LABEL_10:
  int v12 = (uint64_t *)(*(void *)(v6 + 8) + 8 * v4 + 8);
LABEL_11:
  uint64_t v13 = *v12;
  int v16 = *(_DWORD *)(v13 + 60);
  uint64_t v14 = (_DWORD *)(v13 + 60);
  int v15 = v16;
  uint64_t v17 = *(void *)(v14 - 9);
  uint64_t v18 = (*(void *)(v14 - 7) - v17) >> 4;
  if (*(void *)(v14 - 7) == v17) {
    uint64_t v17 = 0;
  }
  *a3 = 0;
  a3[1] = v17;
  a3[2] = v18;
  a3[3] = v14;
  *uint64_t v14 = v15 + 1;
  return result;
}

void sub_19E4818A4()
{
}

void sub_19E48195C(_Unwind_Exception *a1)
{
  MEMORY[0x19F3BDCF0](v1, 0x10E1C408BA93049);
  _Unwind_Resume(a1);
}

uint64_t sub_19E481980(uint64_t result)
{
  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t sub_19E481988(uint64_t result)
{
  return result;
}

uint64_t sub_19E481998(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_19E4819A0(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 16);
  if (v2 >= *(_DWORD *)(v3 + 68))
  {
    uint64_t v5 = sub_19E481BA8(v3);
    uint64_t v4 = 1;
    if ((int)v5 >= *(_DWORD *)(*(void *)(a1 + 16) + 68)) {
      return v4;
    }
    uint64_t v6 = v5;
    while (1)
    {
      uint64_t v7 = *(void *)(a1 + 8);
      uint64_t v8 = *(void *)(*(void *)(v7 + 8) + 120);
      uint64_t v9 = sub_19E472B88(v8, v6);
      uint64_t v10 = v9;
      if (*(unsigned char *)(v8 + 104))
      {
        int v11 = *(_DWORD *)(v9 + 56);
        if ((v11 & 4) == 0)
        {
          *(_DWORD *)(v9 + 56) = v11 | 4;
          unint64_t v12 = *(void *)(v9 + 32) - *(void *)(v9 + 24) + *(void *)(v8 + 128) + 64;
          *(void *)(v8 + 128) = v12;
          *(unsigned char *)(v8 + 120) = 1;
          if (v12 > *(void *)(v8 + 112)) {
            sub_19E472D04(v8, v9);
          }
        }
      }
      ++*(_DWORD *)(v10 + 60);
      uint64_t v13 = *(void **)(v7 + 8);
      uint64_t v14 = v13[15];
      if (*(_DWORD *)(v14 + 92) == v6)
      {
        uint64_t v15 = *(void *)(v14 + 96);
        if (!v15) {
          goto LABEL_15;
        }
      }
      else
      {
        unint64_t v16 = (int)v6 + 1;
        uint64_t v18 = v14 + 8;
        uint64_t v17 = *(void *)(v14 + 8);
        if (v16 >= (*(void *)(v18 + 8) - v17) >> 3 || (uint64_t v15 = *(void *)(v17 + 8 * v16)) == 0)
        {
LABEL_15:
          (*(void (**)(void *, uint64_t))(*v13 + 40))(v13, v6);
          goto LABEL_17;
        }
      }
      int v19 = *(_DWORD *)(v15 + 56);
      if ((v19 & 2) == 0) {
        goto LABEL_15;
      }
      *(_DWORD *)(v15 + 56) = v19 | 8;
LABEL_17:
      uint64_t v20 = *(void *)(v10 + 24);
      uint64_t v21 = *(void *)(a1 + 16);
      uint64_t v22 = *(void *)(v10 + 32) - v20;
      if (v22)
      {
        uint64_t v23 = v22 >> 4;
        int v24 = *(_DWORD *)(v21 + 68);
        uint64_t v25 = (int *)(v20 + 12);
        do
        {
          int v27 = *v25;
          v25 += 4;
          int v26 = v27;
          if (v24 <= v27)
          {
            int v24 = v26 + 1;
            *(_DWORD *)(v21 + 68) = v26 + 1;
          }
          --v23;
        }
        while (v23);
      }
      sub_19E472F9C(v21, v6);
      int v28 = *(_DWORD *)(a1 + 24);
      uint64_t v29 = *(void *)(a1 + 16);
      int v30 = *(_DWORD *)(v29 + 68);
      --*(_DWORD *)(v10 + 60);
      BOOL v31 = v28 < v30;
      BOOL v32 = v28 >= v30;
      if (v31) {
        return v32;
      }
      uint64_t v6 = sub_19E481BA8(v29);
      if ((int)v6 >= *(_DWORD *)(*(void *)(a1 + 16) + 68)) {
        return 1;
      }
    }
  }
  return 0;
}

void sub_19E481B94(_Unwind_Exception *a1)
{
  --*(_DWORD *)(v1 + 60);
  _Unwind_Resume(a1);
}

uint64_t sub_19E481BA8(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 96);
  int v2 = *(_DWORD *)(a1 + 100);
  if ((int)v1 > v2) {
    return v1;
  }
  unint64_t v3 = (int)v1;
  if (*(unsigned char *)(a1 + 104))
  {
    uint64_t v4 = *(void *)(a1 + 72);
    uint64_t v5 = (v2 + 1);
    int v6 = v1 - 1;
    while (((*(void *)(v4 + ((v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v3) & 1) != 0)
    {
      ++v3;
      *(_DWORD *)(a1 + 96) = v6 + 2;
      if (v2 == ++v6) {
        return v5;
      }
    }
    return v3;
  }
  if (!*(void *)(a1 + 112))
  {
    uint64_t v14 = *(void *)(a1 + 72);
    uint64_t v5 = (v2 + 1);
    int v15 = v1 - 1;
    while (((*(void *)(v14 + ((v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v3) & 1) != 0)
    {
      ++v3;
      *(_DWORD *)(a1 + 96) = v15 + 2;
      if (v2 == ++v15) {
        return v5;
      }
    }
    return v3;
  }
  if (*(unsigned char *)(a1 + 128))
  {
    uint64_t v8 = *(void *)(a1 + 120);
    uint64_t v9 = *(int *)(v8 + 92);
    uint64_t v10 = 8 * (int)v1 + 8;
    int v11 = v1 - 1;
    while (1)
    {
      unint64_t v12 = (void *)(v8 + 96);
      if (v9 != v3)
      {
        uint64_t v13 = *(void *)(v8 + 8);
        if (v3 + 1 >= (*(void *)(v8 + 16) - v13) >> 3) {
          return v3;
        }
        unint64_t v12 = (void *)(v13 + v10);
      }
      if (!*v12) {
        break;
      }
      ++v3;
      *(_DWORD *)(a1 + 96) = v11 + 2;
      v10 += 8;
      if (v2 == ++v11) {
        return (v2 + 1);
      }
    }
    return v3;
  }
  return v1;
}

void sub_19E481CCC()
{
}

void sub_19E481CE4()
{
}

void sub_19E481CFC()
{
}

void sub_19E481DE8(_Unwind_Exception *a1)
{
  void *v1 = &unk_1EF0BD230;
  unint64_t v3 = (_DWORD *)v1[1];
  int v4 = v3[14] - 1;
  v3[14] = v4;
  if (!v4) {
    (*(void (**)(_DWORD *))(*(void *)v3 + 8))(v3);
  }
  MEMORY[0x19F3BDCF0](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

void sub_19E481E60(void *a1)
{
  *a1 = &unk_1EF0BD230;
  uint64_t v1 = (_DWORD *)a1[1];
  int v2 = v1[14] - 1;
  v1[14] = v2;
  if (!v2) {
    (*(void (**)(_DWORD *))(*(void *)v1 + 8))(v1);
  }
  JUMPOUT(0x19F3BDCF0);
}

void sub_19E481EF8()
{
}

void sub_19E482060(_Unwind_Exception *a1)
{
  sub_19E482240(v1);
  _Unwind_Resume(a1);
}

void sub_19E482074(_Unwind_Exception *a1)
{
  sub_19E46B5A4(v1);
  _Unwind_Resume(a1);
}

void sub_19E482088(uint64_t a1, unint64_t a2)
{
  if (!a2)
  {
    int v15 = *(void **)a1;
    *(void *)a1 = 0;
    if (v15) {
      sub_19E46C948((uint64_t *)(a1 + 16), v15, *(void *)(a1 + 8));
    }
    *(void *)(a1 + 8) = 0;
    return;
  }
  int v4 = sub_19E46C10C((uint64_t *)(a1 + 16), a2);
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = v4;
  if (v5) {
    sub_19E46C948((uint64_t *)(a1 + 16), v5, *(void *)(a1 + 8));
  }
  uint64_t v6 = 0;
  *(void *)(a1 + 8) = a2;
  do
    *(void *)(*(void *)a1 + 8 * v6++) = 0;
  while (a2 != v6);
  uint64_t v8 = a1 + 24;
  uint64_t v7 = *(void **)(a1 + 24);
  if (v7)
  {
    unint64_t v9 = v7[1];
    unint64_t v10 = a2 - 1;
    if ((a2 & (a2 - 1)) == 0)
    {
      unint64_t v11 = v9 & v10;
      *(void *)(*(void *)a1 + 8 * v11) = v8;
      while (1)
      {
        unint64_t v12 = (void *)*v7;
        if (!*v7) {
          break;
        }
        unint64_t v13 = v12[1] & v10;
        if (v13 == v11)
        {
          uint64_t v7 = (void *)*v7;
        }
        else if (*(void *)(*(void *)a1 + 8 * v13))
        {
          void *v7 = *v12;
          uint64_t v14 = 8 * v13;
          *unint64_t v12 = **(void **)(*(void *)a1 + v14);
          **(void **)(*(void *)a1 + v14) = v12;
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v13) = v7;
          uint64_t v7 = v12;
          unint64_t v11 = v13;
        }
      }
      return;
    }
    if (v9 >= a2) {
      v9 %= a2;
    }
    *(void *)(*(void *)a1 + 8 * v9) = v8;
    unint64_t v16 = (void *)*v7;
    if (*v7)
    {
      do
      {
        unint64_t v18 = v16[1];
        if (v18 >= a2) {
          v18 %= a2;
        }
        if (v18 != v9)
        {
          if (!*(void *)(*(void *)a1 + 8 * v18))
          {
            *(void *)(*(void *)a1 + 8 * v18) = v7;
            goto LABEL_25;
          }
          void *v7 = *v16;
          uint64_t v17 = 8 * v18;
          *unint64_t v16 = **(void **)(*(void *)a1 + v17);
          **(void **)(*(void *)a1 + v17) = v16;
          unint64_t v16 = v7;
        }
        unint64_t v18 = v9;
LABEL_25:
        uint64_t v7 = v16;
        unint64_t v16 = (void *)*v16;
        unint64_t v9 = v18;
      }
      while (v16);
    }
  }
}

uint64_t sub_19E482240(uint64_t a1)
{
  int v2 = *(void **)(a1 + 24);
  unint64_t v3 = (void *)(a1 + 32);
  while (v2)
  {
    int v4 = (void *)*v2;
    sub_19E46B934((uint64_t)v3, (uint64_t)v2);
    int v2 = v4;
  }
  uint64_t v5 = (void *)*v3;
  uint64_t v6 = v5[1] - 1;
  v5[1] = v6;
  if (!v6)
  {
    uint64_t v7 = (void *)v5[2];
    uint64_t v8 = (unsigned char *)v5[3];
    if (v8 == (unsigned char *)v7)
    {
      uint64_t v7 = (void *)v5[3];
    }
    else
    {
      unint64_t v9 = 0;
      do
      {
        uint64_t v10 = v7[v9];
        if (v10)
        {
          (*(void (**)(void))(*(void *)v10 + 8))(v7[v9]);
          uint64_t v7 = (void *)v5[2];
          uint64_t v8 = (unsigned char *)v5[3];
        }
        ++v9;
      }
      while (v9 < (v8 - (unsigned char *)v7) >> 3);
    }
    if (v7)
    {
      v5[3] = v7;
      operator delete(v7);
    }
    MEMORY[0x19F3BDCF0](v5, 0x1080C40B69A5871);
  }
  return sub_19E46B5A4(a1);
}

uint64_t sub_19E482338(uint64_t result, uint64_t a2, int a3, int a4, uint64_t a5)
{
  if (!a5) {
    operator new();
  }
  *(void *)float result = a5;
  *(_DWORD *)(result + 8) = a4;
  *(unsigned char *)(result + 12) = a5 == 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + ++*(_DWORD *)(result + 24) = 0;
  *(void *)(result + 16) = result + 24;
  *(void *)(result + 40) = -1;
  *(void *)(result + 48) = 0;
  if (a3) {
    int v5 = 0;
  }
  else {
    int v5 = -1;
  }
  if (a3) {
    int v6 = -1;
  }
  else {
    int v6 = 0;
  }
  *(_DWORD *)(result + 60) = v5;
  *(_DWORD *)(result + 64) = v6;
  *(void *)(result + 68) = 0xFFFFFFFF00000000;
  return result;
}

void sub_19E482454(_Unwind_Exception *a1)
{
  MEMORY[0x19F3BDCF0](v2, 0x10E1C4003B7394BLL);
  MEMORY[0x19F3BDCF0](v1, 0x1020C405F07FB98);
  _Unwind_Resume(a1);
}

uint64_t sub_19E482498(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 12))
  {
    uint64_t v2 = *(void **)a1;
    if (*(void *)a1)
    {
      if (*v2) {
        (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
      }
      MEMORY[0x19F3BDCF0](v2, 0x1020C405F07FB98);
    }
  }
  sub_19E418864(*(void **)(a1 + 24));
  return a1;
}

uint64_t sub_19E482518(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    MEMORY[0x19F3BDCF0](v2, 0x1020C405F07FB98);
  }
  unint64_t v3 = *(void **)(a1 + 56);
  if (v3)
  {
    if (*v3) {
      (*(void (**)(void))(*(void *)*v3 + 8))(*v3);
    }
    MEMORY[0x19F3BDCF0](v3, 0x1020C405F07FB98);
  }
  int v4 = *(void **)a1;
  if (*(void *)a1)
  {
    if (*v4) {
      (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
    }
    MEMORY[0x19F3BDCF0](v4, 0x1020C405F07FB98);
  }
  int v5 = *(void **)(a1 + 8);
  if (v5)
  {
    if (*v5) {
      (*(void (**)(void))(*(void *)*v5 + 8))(*v5);
    }
    MEMORY[0x19F3BDCF0](v5, 0x1020C405F07FB98);
  }
  return a1;
}

uint64_t sub_19E48266C(void *a1, void *a2)
{
  int v4 = (*(uint64_t (**)(void, void))(*(void *)*a1 + 24))(*a1, 0);
  int v5 = (*(uint64_t (**)(void, void))(*(void *)*a2 + 24))(*a2, 0);
  if (v4 == 1 && ((*(uint64_t (**)(void))(*(void *)*a1 + 48))() & 0x20) != 0) {
    return 1;
  }
  if (!v5 && ((*(uint64_t (**)(void))(*(void *)*a2 + 48))() & 0x10) != 0) {
    return 0;
  }
  if (((*(uint64_t (**)(void))(*(void *)*a1 + 48))() & 0x20) == 0
    || (uint64_t v6 = *a1,
        uint64_t v7 = *(unsigned int (**)(uint64_t, uint64_t))(*(void *)*a1 + 24),
        uint64_t v8 = 1,
        v7(v6, 1) != 1))
  {
    if (((*(uint64_t (**)(void))(*(void *)*a2 + 48))() & 0x10) == 0
      || (*(unsigned int (**)(void, uint64_t))(*(void *)*a2 + 24))(*a2, 1))
    {
      return 3;
    }
    return 0;
  }
  return v8;
}

BOOL sub_19E482834(unsigned __int8 *a1)
{
  int v1 = a1[8];
  if (!a1[8])
  {
    int v3 = (*(uint64_t (**)(void))(**(void **)a1 + 48))(*(void *)a1) & 0x30;
    int v1 = v3 != 0;
    a1[8] = v1;
    if (!v3)
    {
      char v7 = 5;
      strcpy((char *)__p, "FATAL");
      int v4 = sub_19E37CA70(MEMORY[0x1E4FBA240], (uint64_t)__p, 5);
      sub_19E37CA70(v4, (uint64_t)": ", 2);
      sub_19E37CA70(MEMORY[0x1E4FBA240], (uint64_t)"LookAheadMatcher: No look-ahead matcher defined", 47);
      sub_19E43C8CC();
      if (v7 < 0) {
        operator delete(__p[0]);
      }
      int v1 = a1[8];
    }
  }
  return v1 != 0;
}

void sub_19E482914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_19E48293C(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (*(void *)a1)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    MEMORY[0x19F3BDCF0](v2, 0x1020C405F07FB98);
  }
  int v3 = *(void **)(a1 + 8);
  if (v3)
  {
    if (*v3) {
      (*(void (**)(void))(*(void *)*v3 + 8))(*v3);
    }
    MEMORY[0x19F3BDCF0](v3, 0x1020C405F07FB98);
  }
  return a1;
}

void sub_19E4829F8(uint64_t a1@<X0>, int a2@<W1>, _DWORD *a3@<X8>)
{
  uint64_t v6 = *(void *)(*(void *)(a1 + 176) + 104);
  char v7 = (unsigned int *)(v6 + 20 * a2);
  uint64_t v8 = *v7;
  (*(void (**)(char *__return_ptr))(****(void ****)(a1 + 144) + 96))((char *)&v33 + 4);
  v9.n128_u32[0] = HIDWORD(v33);
  int v30 = HIDWORD(v33);
  int v34 = 2139095039;
  if (*((float *)&v33 + 1) != 3.4028e38)
  {
    int v10 = v7[1];
    (*(void (**)(uint64_t *__return_ptr))(****(void ****)(a1 + 152) + 96))(&v33);
    v9.n128_u32[0] = v33;
    int v30 = v33;
    int v34 = 2139095039;
    if (*(float *)&v33 != 3.4028e38)
    {
      uint64_t v11 = *(void *)(a1 + 136);
      uint64_t v12 = v6 + 20 * a2;
      LOBYTE(v30) = *(unsigned char *)(v12 + 8);
      unsigned __int32 v31 = *(_DWORD *)(v12 + 12);
      v9.n128_u32[0] = v31;
      int v32 = *(_DWORD *)(v12 + 16);
      sub_19E482D64(v11, v8, v10, (unsigned __int8 *)&v30, v9);
      uint64_t v13 = *(void *)(a1 + 136);
      int v14 = *(_DWORD *)(v13 + 72);
      if ((v14 & 0x40) != 0)
      {
        float v15 = *((float *)&v33 + 1);
        int v30 = HIDWORD(v33);
        int v34 = 2139095039;
        if (*((float *)&v33 + 1) != 3.4028e38)
        {
          float v16 = *(float *)(v13 + 84);
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EC009378, memory_order_acquire) & 1) == 0)
          {
            float v25 = v15;
            float v28 = v16;
            int v23 = __cxa_guard_acquire(&qword_1EC009378);
            float v15 = v25;
            float v16 = v28;
            if (v23)
            {
              dword_1EC009380 = -8388609;
              __cxa_guard_release(&qword_1EC009378);
              float v15 = v25;
              float v16 = v28;
            }
          }
          if (v15 == *(float *)&dword_1EC009380) {
            goto LABEL_10;
          }
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EC009378, memory_order_acquire) & 1) == 0)
          {
            float v29 = v16;
            int v24 = __cxa_guard_acquire(&qword_1EC009378);
            float v16 = v29;
            if (v24)
            {
              dword_1EC009380 = -8388609;
              __cxa_guard_release(&qword_1EC009378);
              float v16 = v29;
            }
          }
          if (v16 == *(float *)&dword_1EC009380 || v16 == 3.4028e38)
          {
LABEL_10:
            float v17 = NAN;
          }
          else
          {
            float v17 = 3.4028e38;
            if (*((float *)&v33 + 1) != 3.4028e38) {
              float v17 = *((float *)&v33 + 1) - v16;
            }
          }
          *((float *)&v33 + 1) = v17;
          int v14 = *(_DWORD *)(v13 + 72);
        }
      }
      if ((v14 & 0x80) != 0)
      {
        float v18 = *((float *)&v33 + 1);
        int v30 = HIDWORD(v33);
        int v34 = 2139095039;
        if (*((float *)&v33 + 1) != 3.4028e38 && *(_DWORD *)(v13 + 96) != -1)
        {
          HIDWORD(v33) = 2139095039;
          float v18 = 3.4028e38;
        }
      }
      else
      {
        float v18 = *((float *)&v33 + 1);
      }
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EC009378, memory_order_acquire) & 1) == 0)
      {
        float v26 = v18;
        int v21 = __cxa_guard_acquire(&qword_1EC009378);
        float v18 = v26;
        if (v21)
        {
          dword_1EC009380 = -8388609;
          __cxa_guard_release(&qword_1EC009378);
          float v18 = v26;
        }
      }
      if (v18 == *(float *)&dword_1EC009380) {
        goto LABEL_27;
      }
      float v19 = *(float *)&v33;
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EC009378, memory_order_acquire) & 1) == 0)
      {
        float v27 = v19;
        int v22 = __cxa_guard_acquire(&qword_1EC009378);
        float v19 = v27;
        if (v22)
        {
          dword_1EC009380 = -8388609;
          __cxa_guard_release(&qword_1EC009378);
          float v19 = v27;
        }
      }
      if (v19 == *(float *)&dword_1EC009380)
      {
LABEL_27:
        v9.n128_u32[0] = 2143289344;
      }
      else
      {
        BOOL v20 = *(float *)&v33 == 3.4028e38 || *((float *)&v33 + 1) == 3.4028e38;
        v9.n128_f32[0] = *(float *)&v33 + *((float *)&v33 + 1);
        if (v20) {
          v9.n128_f32[0] = 3.4028e38;
        }
      }
    }
  }
  *a3 = v9.n128_u32[0];
}

void sub_19E482D64(uint64_t a1, uint64_t a2, int a3, unsigned __int8 *a4, __n128 a5)
{
  *(unsigned char *)(a1 + 88) = *a4;
  *(_DWORD *)(a1 + 92) = *((_DWORD *)a4 + 1);
  *(_DWORD *)(a1 + 96) = *((_DWORD *)a4 + 2);
  *(unsigned char *)(a1 + 80) = *a4;
  a5.n128_u32[0] = *((_DWORD *)a4 + 1);
  *(_DWORD *)(a1 + 84) = a5.n128_u32[0];
  if (*(_DWORD *)(a1 + 24) != a2 || *(_DWORD *)(a1 + 28) != a3 || *a4 != *(unsigned __int8 *)(a1 + 32))
  {
    *(_DWORD *)(a1 + ++*(_DWORD *)(result + 24) = a2;
    *(_DWORD *)(a1 + 28) = a3;
    *(unsigned char *)(a1 + 32) = *a4;
    uint64_t v7 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), a2);
    uint64_t v8 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 48))(*(void *)(a1 + 16), a2);
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 16) + 24))(&v14);
    int v15 = v14;
    HIDWORD(v14) = 2139095039;
    a5.n128_u32[0] = v14;
    BOOL v10 = *(float *)&v14 == 3.4028e38 && v7 == v8;
    *(unsigned char *)(a1 + 33) = v10;
    *(unsigned char *)(a1 + 34) = v8 == 0;
  }
  if ((*(unsigned char *)(a1 + 72) & 0x80) != 0)
  {
    uint64_t v11 = *(_DWORD *)(a1 + 40) == 1
        ? (*(uint64_t (**)(__n128))(**(void **)(a1 + 104) + 32))(a5)
        : (*(uint64_t (**)(__n128))(**(void **)(a1 + 112) + 32))(a5);
    *(void *)(a1 + 280) = v11;
    unsigned int v12 = *(_DWORD *)(a1 + 96);
    sub_19E418864(*(void **)(a1 + 144));
    uint64_t v13 = *(void **)(a1 + 224);
    *(void *)(a1 + 136) = a1 + 144;
    *(void *)(a1 + 144) = 0;
    *(void *)(a1 + 152) = 0;
    *(void *)(a1 + 160) = -1;
    sub_19E418864(v13);
    *(void *)(a1 + 216) = a1 + 224;
    *(void *)(a1 + 2++*(_DWORD *)(result + 24) = 0;
    *(void *)(a1 + 232) = 0;
    *(void *)(a1 + 240) = -1;
    if (v12 != -1)
    {
      sub_19E482FBC(a1 + 120, v12);
      sub_19E482FBC(a1 + 200, v12);
    }
  }
}

void sub_19E482FBC(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    int v5 = (uint64_t **)(a1 + 24);
    int v4 = *(uint64_t **)(a1 + 24);
    if (v4)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v6 = (uint64_t **)v4;
          unsigned int v7 = *((_DWORD *)v4 + 7);
          if (v7 <= a2) {
            break;
          }
          int v4 = *v6;
          int v5 = v6;
          if (!*v6) {
            goto LABEL_9;
          }
        }
        if (v7 >= a2) {
          break;
        }
        int v4 = v6[1];
        if (!v4)
        {
          int v5 = v6 + 1;
          goto LABEL_9;
        }
      }
    }
    else
    {
      uint64_t v6 = (uint64_t **)(a1 + 24);
LABEL_9:
      uint64_t v8 = operator new(0x20uLL);
      v8[7] = a2;
      *(void *)uint64_t v8 = 0;
      *((void *)v8 + 1) = 0;
      *((void *)v8 + 2) = v6;
      *int v5 = (uint64_t *)v8;
      uint64_t v9 = **(void **)(a1 + 16);
      if (v9)
      {
        *(void *)(a1 + 16) = v9;
        BOOL v10 = *v5;
      }
      else
      {
        BOOL v10 = (uint64_t *)v8;
      }
      sub_19E37D324(*(uint64_t **)(a1 + 24), v10);
      ++*(void *)(a1 + 32);
    }
    unsigned int v12 = *(_DWORD *)(a1 + 40);
    if (v12 == -1 || v12 > a2) {
      *(_DWORD *)(a1 + 40) = a2;
    }
    unsigned int v14 = *(_DWORD *)(a1 + 44);
    if (v14 == -1 || v14 < a2) {
      *(_DWORD *)(a1 + 44) = a2;
    }
  }
  else
  {
    char v17 = 5;
    strcpy((char *)__p, "FATAL");
    uint64_t v11 = sub_19E37CA70(MEMORY[0x1E4FBA240], (uint64_t)__p, 5);
    sub_19E37CA70(v11, (uint64_t)": ", 2);
    sub_19E37CA70(MEMORY[0x1E4FBA240], (uint64_t)"MultiEpsMatcher: Bad multi-eps label: 0", 39);
    sub_19E43C8CC();
    if (v17 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_19E483114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_19E48313C(uint64_t a1)
{
  unsigned int v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 160) + 16))(*(void *)(a1 + 160));
  if (v2 == -1) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v3 = v2;
  unsigned int v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 168) + 16))(*(void *)(a1 + 168));
  if (v4 == -1) {
    return 0xFFFFFFFFLL;
  }
  unint64_t v23 = __PAIR64__(v4, v3);
  char v24 = 0;
  unint64_t v25 = 0xFFFFFFFF00000000;
  int v5 = *(void **)(a1 + 176);
  v5[16] = &v23;
  uint64_t v6 = sub_19E483360(v5 + 4);
  if (v6) {
    return *((unsigned int *)v6 + 4);
  }
  uint64_t v9 = (unint64_t *)v5[13];
  BOOL v10 = (unint64_t *)v5[14];
  uint64_t v11 = ((char *)v10 - (char *)v9) >> 2;
  unint64_t v7 = 0xCCCCCCCCCCCCCCCDLL * v11;
  int v26 = -858993459 * v11;
  unint64_t v12 = v5[15];
  if ((unint64_t)v10 >= v12)
  {
    unint64_t v14 = v7 + 1;
    if (v7 + 1 > 0xCCCCCCCCCCCCCCCLL) {
      sub_19E37C7C4();
    }
    unint64_t v15 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v12 - (void)v9) >> 2);
    if (2 * v15 > v14) {
      unint64_t v14 = 2 * v15;
    }
    if (v15 >= 0x666666666666666) {
      unint64_t v16 = 0xCCCCCCCCCCCCCCCLL;
    }
    else {
      unint64_t v16 = v14;
    }
    if (v16 > 0xCCCCCCCCCCCCCCCLL) {
      sub_19E37C2B8();
    }
    uint64_t v17 = 20 * v16;
    float v18 = (char *)operator new(20 * v16);
    float v19 = &v18[20 * v7];
    BOOL v20 = &v18[v17];
    *(void *)float v19 = v23;
    v19[8] = 0;
    *(void *)(v19 + 12) = 0xFFFFFFFF00000000;
    uint64_t v13 = v19 + 20;
    if (v10 != v9)
    {
      uint64_t v21 = 0;
      do
      {
        int v22 = &v19[v21];
        *(void *)(v22 - 20) = *(unint64_t *)((char *)v10 + v21 - 20);
        *(v22 - 12) = *((unsigned char *)v10 + v21 - 12);
        *((_DWORD *)v22 - 2) = *(_DWORD *)((char *)v10 + v21 - 8);
        *((_DWORD *)v22 - 1) = *(_DWORD *)((char *)v10 + v21 - 4);
        v21 -= 20;
      }
      while ((unint64_t *)((char *)v10 + v21) != v9);
      v19 += v21;
    }
    v5[13] = v19;
    v5[14] = v13;
    v5[15] = v20;
    if (v9) {
      operator delete(v9);
    }
  }
  else
  {
    *BOOL v10 = v23;
    *((unsigned char *)v10 + 8) = v24;
    *(unint64_t *)((char *)v10 + 12) = v25;
    uint64_t v13 = (char *)v10 + 20;
  }
  v5[14] = v13;
  sub_19E4834A0((uint64_t)(v5 + 4), v7, &v26);
  return v7;
}

uint64_t *sub_19E483360(void *a1)
{
  int8x8_t v1 = (int8x8_t)a1[1];
  if (!*(void *)&v1) {
    return 0;
  }
  unsigned int v2 = *(int **)(a1[6] + 128);
  unint64_t v3 = *v2
     + 7853 * v2[1]
     + 7867 * (v2[4] ^ __ROR8__(v2[3] ^ __ROR8__(*((char *)v2 + 8), 59), 59));
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v1);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = v3;
    if (v3 >= *(void *)&v1) {
      unint64_t v5 = v3 % *(void *)&v1;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v1 - 1) & v3;
  }
  uint64_t v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  unint64_t v7 = *v6;
  if (*v6)
  {
    uint64_t v8 = a1 + 8;
    if (v4.u32[0] < 2uLL)
    {
      uint64_t v9 = *(void *)&v1 - 1;
      while (1)
      {
        uint64_t v11 = v7[1];
        if (v11 == v3)
        {
          if (sub_19E48380C(v8, *((_DWORD *)v7 + 4), -1)) {
            return v7;
          }
        }
        else if ((v11 & v9) != v5)
        {
          return 0;
        }
        unint64_t v7 = (uint64_t *)*v7;
        if (!v7) {
          return v7;
        }
      }
    }
    do
    {
      unint64_t v10 = v7[1];
      if (v10 == v3)
      {
        if (sub_19E48380C(v8, *((_DWORD *)v7 + 4), -1)) {
          return v7;
        }
      }
      else
      {
        if (v10 >= *(void *)&v1) {
          v10 %= *(void *)&v1;
        }
        if (v10 != v5) {
          return 0;
        }
      }
      unint64_t v7 = (uint64_t *)*v7;
    }
    while (v7);
  }
  return v7;
}

void sub_19E4834A0(uint64_t a1, int a2, _DWORD *a3)
{
  if (a2 < -1)
  {
    unint64_t v9 = 0;
    unint64_t v10 = *(void *)(a1 + 8);
    if (!v10) {
      goto LABEL_27;
    }
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 48);
    if (a2 == -1) {
      uint64_t v8 = *(int **)(v7 + 128);
    }
    else {
      uint64_t v8 = (int *)(*(void *)(v7 + 104) + 20 * a2);
    }
    unint64_t v9 = *v8
       + 7853 * v8[1]
       + 7867 * (v8[4] ^ __ROR8__(v8[3] ^ __ROR8__(*((char *)v8 + 8), 59), 59));
    unint64_t v10 = *(void *)(a1 + 8);
    if (!v10) {
      goto LABEL_27;
    }
  }
  uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
  v11.i16[0] = vaddlv_u8(v11);
  if (v11.u32[0] > 1uLL)
  {
    unint64_t v3 = v9;
    if (v9 >= v10) {
      unint64_t v3 = v9 % v10;
    }
  }
  else
  {
    unint64_t v3 = (v10 - 1) & v9;
  }
  unint64_t v12 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
  if (v12)
  {
    uint64_t v13 = *v12;
    if (*v12)
    {
      if (v11.u32[0] < 2uLL)
      {
        while (1)
        {
          uint64_t v15 = v13[1];
          if (v15 == v9)
          {
            if (sub_19E48380C((void *)(a1 + 64), *((_DWORD *)v13 + 4), a2)) {
              return;
            }
          }
          else if ((v15 & (v10 - 1)) != v3)
          {
            goto LABEL_27;
          }
          uint64_t v13 = (uint64_t *)*v13;
          if (!v13) {
            goto LABEL_27;
          }
        }
      }
      do
      {
        unint64_t v14 = v13[1];
        if (v14 == v9)
        {
          if (sub_19E48380C((void *)(a1 + 64), *((_DWORD *)v13 + 4), a2)) {
            return;
          }
        }
        else
        {
          if (v14 >= v10) {
            v14 %= v10;
          }
          if (v14 != v3) {
            break;
          }
        }
        uint64_t v13 = (uint64_t *)*v13;
      }
      while (v13);
    }
  }
LABEL_27:
  uint64_t v16 = sub_19E471038(a1 + 32);
  *(void *)uint64_t v16 = 0;
  *(void *)(v16 + 8) = v9;
  *(_DWORD *)(v16 + 16) = *a3;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 40) + 1);
  float v18 = *(float *)(a1 + 56);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    BOOL v19 = 1;
    if (v10 >= 3) {
      BOOL v19 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v10);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t prime = v21;
    }
    else {
      size_t prime = v20;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v23 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v23) {
      goto LABEL_39;
    }
    if (prime < *(void *)&v23)
    {
      unint64_t v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 40) / *(float *)(a1 + 56));
      if (*(void *)&v23 < 3uLL || (uint8x8_t v25 = (uint8x8_t)vcnt_s8(v23), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        unint64_t v24 = std::__next_prime(v24);
      }
      else
      {
        uint64_t v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2) {
          unint64_t v24 = v26;
        }
      }
      if (prime <= v24) {
        size_t prime = v24;
      }
      if (prime < *(void *)&v23) {
LABEL_39:
      }
        sub_19E482088(a1, prime);
    }
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  float v27 = *(uint64_t **)(*(void *)a1 + 8 * v3);
  if (v27)
  {
    *(void *)uint64_t v16 = *v27;
LABEL_63:
    *float v27 = v16;
    goto LABEL_64;
  }
  *(void *)uint64_t v16 = *(void *)(a1 + 24);
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = v16;
  *(void *)(*(void *)a1 + 8 * v3) = a1 + 24;
  if (*(void *)v16)
  {
    unint64_t v28 = *(void *)(*(void *)v16 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v28 >= v10) {
        v28 %= v10;
      }
    }
    else
    {
      v28 &= v10 - 1;
    }
    float v27 = (uint64_t *)(*(void *)a1 + 8 * v28);
    goto LABEL_63;
  }
LABEL_64:
  ++*(void *)(a1 + 40);
}

void sub_19E4837F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E4711F8((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL sub_19E48380C(void *a1, int a2, int a3)
{
  if (a2 < -1 || a3 < -1) {
    return a2 == a3;
  }
  unint64_t v3 = (void *)*a1;
  if (a2 == -1) {
    uint64_t v4 = v3[16];
  }
  else {
    uint64_t v4 = v3[13] + 20 * a2;
  }
  uint64_t v6 = v3[1];
  if (a3 != -1)
  {
    uint64_t v7 = v3[13] + 20 * a3;
    BOOL v8 = v4 == v7;
    if (v6) {
      goto LABEL_9;
    }
LABEL_20:
    if (!v8) {
      goto LABEL_10;
    }
    return 1;
  }
  uint64_t v7 = v3[16];
  BOOL v8 = v4 == v7;
  if (!v6) {
    goto LABEL_20;
  }
LABEL_9:
  if (v8) {
    return 1;
  }
LABEL_10:
  BOOL v9 = *(_DWORD *)v4 == *(_DWORD *)v7 && *(_DWORD *)(v4 + 4) == *(_DWORD *)(v7 + 4);
  return v9
      && *(unsigned __int8 *)(v4 + 8) == *(unsigned __int8 *)(v7 + 8)
      && *(float *)(v4 + 12) == *(float *)(v7 + 12)
      && *(_DWORD *)(v4 + 16) == *(_DWORD *)(v7 + 16);
}

uint64_t sub_19E4838FC(uint64_t a1, uint64_t a2, int a3)
{
  if ((*(unsigned int (**)(void, void))(****(void ****)(a1 + 144) + 24))(***(void ***)(a1 + 144), 0) == a3)(*(void (**)(void, void))(****(void ****)(a1 + 152) + 24))(***(void ***)(a1 + 152), 0); {
  return 0;
  }
}

void sub_19E483994(uint64_t a1, int a2, __n128 a3)
{
  unint64_t v5 = (unsigned int *)(*(void *)(*(void *)(a1 + 176) + 104) + 20 * a2);
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  uint64_t v8 = *(void *)(a1 + 136);
  LOBYTE(__p) = *((unsigned char *)v5 + 8);
  HIDWORD(__p) = v5[3];
  a3.n128_u32[0] = HIDWORD(__p);
  unsigned int v20 = v5[4];
  sub_19E482D64(v8, v6, v7, (unsigned __int8 *)&__p, a3);
  int v9 = *(_DWORD *)(a1 + 184);
  if (!v9) {
    goto LABEL_24;
  }
  if (v9 != 1)
  {
    uint64_t v10 = (*(uint64_t (**)(void, uint64_t))(****(void ****)(a1 + 144) + 104))(***(void ***)(a1 + 144), v6);
    uint64_t v11 = (*(uint64_t (**)(void, uint64_t))(****(void ****)(a1 + 152) + 104))(***(void ***)(a1 + 152), v7);
    if (v10 == -1 && v11 == -1)
    {
      char v21 = 5;
      strcpy((char *)&__p, "FATAL");
      float v18 = sub_19E37CA70(MEMORY[0x1E4FBA240], (uint64_t)&__p, 5);
      sub_19E37CA70(v18, (uint64_t)": ", 2);
      sub_19E37CA70(MEMORY[0x1E4FBA240], (uint64_t)"ComposeFst: both sides can't require match", 42);
      sub_19E43C8CC();
      if (v21 < 0) {
        operator delete(__p);
      }
      *(void *)(a1 + 8) |= 4uLL;
      goto LABEL_24;
    }
    BOOL v13 = v11 == -1 || v10 <= v11;
    BOOL v14 = v13;
    if (v10 != -1 && v14)
    {
LABEL_24:
      sub_19E483BB0(a1, a2, v7, *(void *)(a1 + 160), v6, *(void ***)(a1 + 152), 1);
      return;
    }
  }
  uint64_t v16 = *(void *)(a1 + 168);
  float v17 = *(void ***)(a1 + 144);
  sub_19E483BB0(a1, a2, v6, v16, v7, v17, 0);
}

void sub_19E483B88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_19E483BB0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, void **a6, int a7)
{
  int v11 = a3;
  (*(void (**)(void, uint64_t))(*(void *)**a6 + 56))(**a6, a3);
  *((_DWORD *)a6 + 18) = v11;
  v19[0] = a7 - 1;
  v19[1] = a7 << 31 >> 31;
  v19[2] = 0;
  v19[3] = a5;
  sub_19E483E14(a1, a2, a6, v19, a7);
  unint64_t v18 = 0;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a4 + 120))(a4, a5, v16);
  while (1)
  {
    if (!v16[0])
    {
      unint64_t v15 = v18;
      if (v18 >= v16[2]) {
        goto LABEL_15;
      }
      goto LABEL_10;
    }
    if ((*(unsigned int (**)(void))(*(void *)v16[0] + 16))(v16[0])) {
      break;
    }
    if (!v16[0])
    {
      unint64_t v15 = v18;
LABEL_10:
      BOOL v14 = (unsigned int *)(v16[1] + 16 * v15);
      goto LABEL_11;
    }
    BOOL v14 = (unsigned int *)(*(uint64_t (**)(void))(*(void *)v16[0] + 24))();
LABEL_11:
    sub_19E483E14(a1, a2, a6, v14, a7);
    if (v16[0]) {
      (*(void (**)(void))(*(void *)v16[0] + 32))(v16[0]);
    }
    else {
      ++v18;
    }
  }
  if (v16[0])
  {
    (*(void (**)(void))(*(void *)v16[0] + 8))();
    goto LABEL_17;
  }
LABEL_15:
  if (v17) {
    --*v17;
  }
LABEL_17:
  sub_19E472A04(a1, a2);
}

void sub_19E483DC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _DWORD *a13)
{
  if (!a10)
  {
    if (a13) {
      --*a13;
    }
    _Unwind_Resume(exception_object);
  }
  (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E483E14(uint64_t a1, int a2, void **a3, unsigned int *a4, int a5)
{
  char v5 = a5;
  uint64_t v10 = a4 + 1;
  if (!a5) {
    uint64_t v10 = a4;
  }
  uint64_t result = sub_19E484060(a3, *v10);
  if (result && !*((unsigned char *)a3 + 76))
  {
    if (v5)
    {
      do
      {
        uint64_t v12 = (uint64_t)a3 + 60;
        if (!*((unsigned char *)a3 + 56)) {
          uint64_t v12 = (*(uint64_t (**)(void))(*(void *)**a3 + 80))(**a3);
        }
        uint64_t v20 = *(void *)v12;
        int v21 = *(_DWORD *)(v12 + 8);
        int v22 = *(_DWORD *)(v12 + 12);
        uint64_t v17 = *(void *)a4;
        unsigned int v18 = a4[2];
        unsigned int v19 = a4[3];
        sub_19E4841F0((uint64_t)v14, *(void *)(a1 + 136), (uint64_t)&v17, (uint64_t)&v20);
        if (v14[0] != 255 || (v24 = v15, int v23 = 2139095039, v15 != 3.4028e38) || v16 != -1) {
          sub_19E484350(a1, a2, (float *)&v17, (uint64_t)&v20, (uint64_t)v14);
        }
        uint64_t result = sub_19E484764((uint64_t)a3);
      }
      while (!*((unsigned char *)a3 + 76));
    }
    else
    {
      do
      {
        uint64_t v13 = (uint64_t)a3 + 60;
        if (!*((unsigned char *)a3 + 56)) {
          uint64_t v13 = (*(uint64_t (**)(void))(*(void *)**a3 + 80))(**a3);
        }
        uint64_t v20 = *(void *)v13;
        int v21 = *(_DWORD *)(v13 + 8);
        int v22 = *(_DWORD *)(v13 + 12);
        uint64_t v17 = *(void *)a4;
        unsigned int v18 = a4[2];
        unsigned int v19 = a4[3];
        sub_19E4841F0((uint64_t)v14, *(void *)(a1 + 136), (uint64_t)&v20, (uint64_t)&v17);
        if (v14[0] != 255 || (v24 = v15, int v23 = 2139095039, v15 != 3.4028e38) || v16 != -1) {
          sub_19E484350(a1, a2, (float *)&v20, (uint64_t)&v17, (uint64_t)v14);
        }
        uint64_t result = sub_19E484764((uint64_t)a3);
      }
      while (!*((unsigned char *)a3 + 76));
    }
  }
  return result;
}

uint64_t sub_19E484060(void **a1, unsigned int a2)
{
  unint64_t v3 = (uint64_t *)(a1 + 3);
  a1[6] = a1 + 3;
  *((unsigned char *)a1 + 56) = 0;
  if (a2 == -1)
  {
    if ((_BYTE)a1[1])
    {
      uint64_t v13 = a1[2];
      while (1)
      {
        a1[6] = v13;
        if (v13 == v3) {
          break;
        }
        char v14 = (*(uint64_t (**)(void, void))(*(void *)**a1 + 64))(**a1, *((unsigned int *)v13 + 7));
        float v15 = a1[6];
        if (v14)
        {
          if (v15 == v3) {
            break;
          }
          uint64_t result = 1;
          goto LABEL_24;
        }
        int v16 = (void *)v15[1];
        if (v16)
        {
          do
          {
            uint64_t v13 = v16;
            int v16 = (void *)*v16;
          }
          while (v16);
        }
        else
        {
          do
          {
            uint64_t v13 = (void *)v15[2];
            BOOL v17 = *v13 == (void)v15;
            float v15 = v13;
          }
          while (!v17);
        }
      }
    }
    int v11 = *(uint64_t (**)(void))(*(void *)**a1 + 64);
  }
  else
  {
    if (a2 && ((_BYTE)a1[1] & 2) != 0)
    {
      unsigned int v4 = *((_DWORD *)a1 + 10);
      if (v4 != -1 && v4 <= a2 && *((_DWORD *)a1 + 11) >= a2)
      {
        uint64_t v6 = *v3;
        if (*v3)
        {
          uint64_t v7 = (uint64_t *)(a1 + 3);
          do
          {
            unsigned int v8 = *(_DWORD *)(v6 + 28);
            BOOL v9 = v8 >= a2;
            if (v8 >= a2) {
              uint64_t v10 = (uint64_t *)v6;
            }
            else {
              uint64_t v10 = (uint64_t *)(v6 + 8);
            }
            if (v9) {
              uint64_t v7 = (uint64_t *)v6;
            }
            uint64_t v6 = *v10;
          }
          while (*v10);
          if (v7 != v3 && *((_DWORD *)v7 + 7) <= a2)
          {
            uint64_t result = 1;
            *((unsigned char *)a1 + 56) = 1;
            goto LABEL_24;
          }
        }
      }
    }
    int v11 = *(uint64_t (**)(void))(*(void *)**a1 + 64);
  }
  uint64_t result = v11();
LABEL_24:
  *((unsigned char *)a1 + 76) = result ^ 1;
  return result;
}

float sub_19E4841F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if ((*(unsigned char *)(a2 + 72) & 0x80) == 0)
  {
    sub_19E4848EC((uint64_t)v13, a2, a3, a4);
    char v8 = v13[0];
LABEL_3:
    *(unsigned char *)a1 = v8;
    float result = v14;
    *(float *)(a1 + 4) = v14;
    *(_DWORD *)(a1 + 8) = -1;
    return result;
  }
  uint64_t v10 = *(unsigned int *)(a2 + 96);
  if (v10 == -1)
  {
    sub_19E4848EC((uint64_t)v13, a2, a3, a4);
    char v8 = v13[0];
    if (v13[0] == 255)
    {
      float v16 = v14;
      int v15 = 2139095039;
      float result = v14;
      if (v14 == 3.4028e38)
      {
        *(unsigned char *)a1 = -1;
        *(void *)(a1 + 4) = -2155872257;
        return result;
      }
    }
    if (!*(unsigned char *)(a2 + 76)) {
      goto LABEL_3;
    }
    if (*(_DWORD *)(a2 + 40) == 1)
    {
      uint64_t v11 = v5;
      uint64_t v12 = v4;
    }
    else
    {
      uint64_t v11 = v4;
      uint64_t v12 = v5;
    }
    return sub_19E484DA0(a1, a2, v11, v12, (uint64_t)v13);
  }
  else
  {
    if (*(_DWORD *)(a2 + 40) != 1)
    {
      a3 = a4;
      a4 = v5;
    }
    return sub_19E484C60(a1, a2, a3, a4, v10);
  }
}

void sub_19E484350(uint64_t a1, int a2, float *a3, uint64_t a4, uint64_t a5)
{
  int v9 = *(_DWORD *)(a4 + 12);
  *(float *)&uint64_t v58 = a3[3];
  HIDWORD(v58) = v9;
  char v59 = *(unsigned char *)a5;
  int v60 = *(_DWORD *)(a5 + 4);
  int v61 = *(_DWORD *)(a5 + 8);
  uint64_t v10 = *(unsigned int *)a3;
  uint64_t v11 = *(unsigned int *)(a4 + 4);
  float v12 = a3[2];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EC009378, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EC009378))
  {
    dword_1EC009380 = -8388609;
    __cxa_guard_release(&qword_1EC009378);
  }
  if (v12 == *(float *)&dword_1EC009380) {
    goto LABEL_11;
  }
  float v13 = *(float *)(a4 + 8);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EC009378, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EC009378))
  {
    dword_1EC009380 = -8388609;
    __cxa_guard_release(&qword_1EC009378);
  }
  if (v13 == *(float *)&dword_1EC009380)
  {
LABEL_11:
    float v18 = NAN;
  }
  else
  {
    float v14 = a3[2];
    float v15 = *(float *)(a4 + 8);
    BOOL v16 = v15 == 3.4028e38 || v14 == 3.4028e38;
    float v17 = v15 + v14;
    if (v16) {
      float v18 = 3.4028e38;
    }
    else {
      float v18 = v17;
    }
  }
  unsigned int v19 = *(void **)(a1 + 176);
  v19[16] = &v58;
  uint64_t v20 = sub_19E483360(v19 + 4);
  if (v20)
  {
    LODWORD(v21) = *((_DWORD *)v20 + 4);
  }
  else
  {
    int v22 = (char *)v19[13];
    int v23 = (char *)v19[14];
    uint64_t v24 = (v23 - v22) >> 2;
    unint64_t v21 = 0xCCCCCCCCCCCCCCCDLL * v24;
    int v62 = -858993459 * v24;
    unint64_t v25 = v19[15];
    if ((unint64_t)v23 >= v25)
    {
      unint64_t v27 = v21 + 1;
      if (v21 + 1 > 0xCCCCCCCCCCCCCCCLL) {
        sub_19E37C7C4();
      }
      unint64_t v28 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v25 - (void)v22) >> 2);
      if (2 * v28 > v27) {
        unint64_t v27 = 2 * v28;
      }
      if (v28 >= 0x666666666666666) {
        unint64_t v29 = 0xCCCCCCCCCCCCCCCLL;
      }
      else {
        unint64_t v29 = v27;
      }
      if (v29 > 0xCCCCCCCCCCCCCCCLL) {
        sub_19E37C2B8();
      }
      uint64_t v30 = 20 * v29;
      unsigned __int32 v31 = (char *)operator new(20 * v29);
      int v32 = &v31[20 * v21];
      uint64_t v33 = &v31[v30];
      *(void *)int v32 = v58;
      v32[8] = v59;
      *((_DWORD *)v32 + 3) = v60;
      *((_DWORD *)v32 + 4) = v61;
      uint64_t v26 = v32 + 20;
      if (v23 != v22)
      {
        uint64_t v34 = 0;
        do
        {
          uint64_t v35 = &v32[v34];
          *(void *)(v35 - 20) = *(void *)&v23[v34 - 20];
          *(v35 - 12) = v23[v34 - 12];
          *((_DWORD *)v35 - 2) = *(_DWORD *)&v23[v34 - 8];
          *((_DWORD *)v35 - 1) = *(_DWORD *)&v23[v34 - 4];
          v34 -= 20;
        }
        while (&v23[v34] != v22);
        v32 += v34;
      }
      v19[13] = v32;
      v19[14] = v26;
      v19[15] = v33;
      if (v22) {
        operator delete(v22);
      }
    }
    else
    {
      *(void *)int v23 = v58;
      v23[8] = v59;
      *((_DWORD *)v23 + 3) = v60;
      *((_DWORD *)v23 + 4) = v61;
      uint64_t v26 = v23 + 20;
    }
    v19[14] = v26;
    sub_19E4834A0((uint64_t)(v19 + 4), v21, &v62);
  }
  uint64_t v36 = *(void *)(a1 + 120);
  uint64_t v37 = sub_19E472B88(v36, a2);
  uint64_t v38 = (void *)v37;
  if (*(unsigned char *)(v36 + 104))
  {
    int v39 = *(_DWORD *)(v37 + 56);
    if ((v39 & 4) == 0)
    {
      *(_DWORD *)(v37 + 56) = v39 | 4;
      unint64_t v40 = *(void *)(v37 + 32) - *(void *)(v37 + 24) + *(void *)(v36 + 128) + 64;
      *(void *)(v36 + 128) = v40;
      *(unsigned char *)(v36 + 120) = 1;
      if (v40 > *(void *)(v36 + 112)) {
        sub_19E472D04(v36, v37);
      }
    }
  }
  uint64_t v41 = v10 | (v11 << 32);
  unint64_t v43 = v38[4];
  unint64_t v42 = v38[5];
  if (v43 >= v42)
  {
    uint64_t v45 = v38[3];
    uint64_t v46 = (uint64_t)(v43 - v45) >> 4;
    unint64_t v47 = v46 + 1;
    if ((unint64_t)(v46 + 1) >> 60) {
      sub_19E37C7C4();
    }
    uint64_t v48 = v42 - v45;
    if (v48 >> 3 > v47) {
      unint64_t v47 = v48 >> 3;
    }
    if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v49 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v49 = v47;
    }
    v50 = sub_19E478CD4(v38 + 6, v49);
    v51 = (float *)&v50[2 * v46];
    v52 = &v50[2 * v49];
    *(void *)v51 = v41;
    v51[2] = v18;
    *((_DWORD *)v51 + 3) = v21;
    v44 = v51 + 4;
    v54 = (void *)v38[3];
    v53 = (void *)v38[4];
    if (v53 != v54)
    {
      unint64_t v55 = 0;
      do
      {
        v56 = &v51[v55 / 4];
        *((void *)v56 - 2) = v53[v55 / 8 - 2];
        *(v56 - 2) = *(float *)&v53[v55 / 8 - 1];
        *(v56 - 1) = *((float *)&v53[v55 / 8 - 1] + 1);
        v55 -= 16;
      }
      while (&v53[v55 / 8] != v54);
      v51 = (float *)((char *)v51 + v55);
      v53 = (void *)v38[3];
    }
    v38[3] = v51;
    v38[4] = v44;
    uint64_t v57 = v38[5];
    v38[5] = v52;
    if (v53) {
      sub_19E475CA4(v38 + 6, v53, (v57 - (uint64_t)v53) >> 4);
    }
  }
  else
  {
    *(void *)unint64_t v43 = v41;
    *(float *)(v43 + 8) = v18;
    v44 = (void *)(v43 + 16);
    *(_DWORD *)(v43 + 12) = v21;
  }
  v38[4] = v44;
}

uint64_t sub_19E484764(uint64_t result)
{
  int8x8_t v1 = (void **)result;
  if (*(unsigned char *)(result + 56))
  {
    char v2 = 1;
LABEL_3:
    *((unsigned char *)v1 + 76) = v2;
  }
  else
  {
    (*(void (**)(void))(***(void ***)result + 88))(**(void **)result);
    float result = (*(uint64_t (**)(void))(*(void *)**v1 + 72))(**v1);
    *((unsigned char *)v1 + 76) = result;
    if (result)
    {
      unint64_t v3 = v1 + 3;
      uint64_t v4 = v1[6];
      if (v4 != v1 + 3)
      {
        uint64_t v5 = (void *)v4[1];
        if (v5)
        {
          do
          {
            uint64_t v6 = v5;
            uint64_t v5 = (void *)*v5;
          }
          while (v5);
        }
        else
        {
          do
          {
            uint64_t v6 = (void *)v4[2];
            BOOL v7 = *v6 == (void)v4;
            uint64_t v4 = v6;
          }
          while (!v7);
        }
        while (1)
        {
          v1[6] = v6;
          if (v6 == v3) {
            goto LABEL_19;
          }
          float result = (*(uint64_t (**)(void, void))(*(void *)**v1 + 64))(**v1, *((unsigned int *)v6 + 7));
          char v8 = v1[6];
          if (result) {
            break;
          }
          int v9 = (void *)v8[1];
          if (v9)
          {
            do
            {
              uint64_t v6 = v9;
              int v9 = (void *)*v9;
            }
            while (v9);
          }
          else
          {
            do
            {
              uint64_t v6 = (void *)v8[2];
              BOOL v7 = *v6 == (void)v8;
              char v8 = v6;
            }
            while (!v7);
          }
        }
        if (v8 == v3)
        {
LABEL_19:
          float result = (*(uint64_t (**)(void, uint64_t))(*(void *)**v1 + 64))(**v1, 0xFFFFFFFFLL);
          char v2 = result ^ 1;
          goto LABEL_3;
        }
        *((unsigned char *)v1 + 76) = 0;
      }
    }
  }
  return result;
}

void sub_19E4848EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(unsigned char *)(a2 + 76) = 0;
  int v7 = *(_DWORD *)(a3 + 4);
  if (v7 == -1)
  {
    if (*(unsigned char *)(a2 + 33))
    {
LABEL_14:
      char v11 = -1;
      float v12 = 3.4028e38;
      goto LABEL_53;
    }
    unsigned __int8 v36 = *(unsigned char *)(a2 + 34) ^ 1;
  }
  else if (*(_DWORD *)a4 == -1)
  {
    int v9 = *(unsigned __int8 *)(a2 + 32);
    if (*(unsigned char *)(a2 + 32)) {
      unsigned __int8 v10 = -1;
    }
    else {
      unsigned __int8 v10 = 0;
    }
    unsigned __int8 v36 = v10;
    if (v9) {
      goto LABEL_14;
    }
  }
  else
  {
    if (v7) {
      unsigned __int8 v8 = 0;
    }
    else {
      unsigned __int8 v8 = -1;
    }
    unsigned __int8 v36 = v8;
    if (!v7) {
      goto LABEL_14;
    }
  }
  if (*(_DWORD *)(a2 + 40) == 1)
  {
    uint64_t v14 = a3;
    a3 = a4;
  }
  else
  {
    uint64_t v14 = a4;
  }
  char v11 = sub_19E484F68(a2, v14, a3, &v36);
  if (v11 == -1)
  {
    float v12 = 3.4028e38;
    char v11 = -1;
  }
  else
  {
    float v12 = 0.0;
    if ((*(unsigned char *)(a2 + 72) & 0x40) != 0)
    {
      float v15 = 0.0;
      if (*(unsigned char *)(a2 + 76))
      {
        uint64_t v16 = 56;
        if (*(_DWORD *)(a2 + 64) == 1) {
          uint64_t v16 = 48;
        }
        float v17 = *(unsigned __int8 **)(a2 + v16);
        if (sub_19E482834(v17)) {
          float v15 = *(float *)(*(void *)v17 + 8);
        }
      }
      float v18 = *(float *)(a2 + 84);
      float v38 = v15;
      int v37 = 2139095039;
      if (v15 == 3.4028e38)
      {
        char v11 = -1;
        float v12 = 3.4028e38;
      }
      else
      {
        float v19 = *(float *)(a4 + 8);
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EC009378, memory_order_acquire) & 1) == 0)
        {
          float v29 = v19;
          float v32 = v18;
          int v25 = __cxa_guard_acquire(&qword_1EC009378);
          float v19 = v29;
          float v18 = v32;
          if (v25)
          {
            dword_1EC009380 = -8388609;
            __cxa_guard_release(&qword_1EC009378);
            float v19 = v29;
            float v18 = v32;
          }
        }
        if (v19 == *(float *)&dword_1EC009380) {
          goto LABEL_38;
        }
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EC009378, memory_order_acquire) & 1) == 0)
        {
          float v34 = v18;
          int v27 = __cxa_guard_acquire(&qword_1EC009378);
          float v18 = v34;
          if (v27)
          {
            dword_1EC009380 = -8388609;
            __cxa_guard_release(&qword_1EC009378);
            float v18 = v34;
          }
        }
        if (v15 == *(float *)&dword_1EC009380)
        {
LABEL_38:
          float v22 = NAN;
        }
        else
        {
          float v20 = *(float *)(a4 + 8);
          BOOL v21 = v15 == 3.4028e38 || v20 == 3.4028e38;
          float v22 = v20 + v15;
          if (v21) {
            float v22 = 3.4028e38;
          }
        }
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EC009378, memory_order_acquire) & 1) == 0)
        {
          float v30 = v22;
          float v33 = v18;
          int v26 = __cxa_guard_acquire(&qword_1EC009378);
          float v22 = v30;
          float v18 = v33;
          if (v26)
          {
            dword_1EC009380 = -8388609;
            __cxa_guard_release(&qword_1EC009378);
            float v22 = v30;
            float v18 = v33;
          }
        }
        if (v22 == *(float *)&dword_1EC009380)
        {
          float v23 = NAN;
        }
        else
        {
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EC009378, memory_order_acquire) & 1) == 0)
          {
            float v31 = v22;
            float v35 = v18;
            int v28 = __cxa_guard_acquire(&qword_1EC009378);
            float v22 = v31;
            float v18 = v35;
            if (v28)
            {
              dword_1EC009380 = -8388609;
              __cxa_guard_release(&qword_1EC009378);
              float v22 = v31;
              float v18 = v35;
            }
          }
          float v23 = NAN;
          if (v18 != *(float *)&dword_1EC009380 && v18 != 3.4028e38)
          {
            float v23 = 3.4028e38;
            if (v22 != 3.4028e38) {
              float v23 = v22 - v18;
            }
          }
        }
        *(float *)(a4 + 8) = v23;
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EC009378, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_1EC009378))
        {
          dword_1EC009380 = -8388609;
          __cxa_guard_release(&qword_1EC009378);
        }
        BOOL v24 = v15 == 3.4028e38 || v15 == *(float *)&dword_1EC009380;
        float v12 = floorf((float)(v15 * 1024.0) + 0.5) * 0.00097656;
        if (v24) {
          float v12 = v15;
        }
      }
    }
  }
LABEL_53:
  *(unsigned char *)a1 = v11;
  *(float *)(a1 + 4) = v12;
}

float sub_19E484C60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v6 = *(_DWORD *)(a2 + 40);
  BOOL v7 = v6 != 1;
  BOOL v8 = v6 == 1;
  if (*(_DWORD *)(a4 + 4 * v7) != -1) {
    goto LABEL_2;
  }
  uint64_t v11 = 4 * v8;
  int v12 = *(_DWORD *)(a3 + v11);
  if (v12 == a5)
  {
    *(_DWORD *)(a3 + v11) = 0;
    *(unsigned char *)a1 = 0;
    unint64_t v9 = 0xFFFFFFFF00000000;
    goto LABEL_3;
  }
  if (v12
    || *(void *)(a2 + 280) != 1
    && (*(_DWORD *)(a2 + 64) != 1 ? (uint64_t v14 = 56) : (uint64_t v14 = 48),
        ((*(void (**)(void, void))(***(void ***)(a2 + v14) + 56))(**(void **)(a2 + v14), *(unsigned int *)(a3 + 12)), *(_DWORD *)(a2 + 64) != 1)? (uint64_t v15 = 56): (uint64_t v15 = 48), (v16 = *(unsigned __int8 **)(a2 + v15), sub_19E482834(v16))&& !(*(unsigned int (**)(void, uint64_t))(**(void **)v16 + 120))(*(void *)v16, a5)))
  {
LABEL_2:
    *(unsigned char *)a1 = -1;
    unint64_t v9 = -2155872257;
LABEL_3:
    *(void *)(a1 + 4) = v9;
    return result;
  }
  *(unsigned char *)a1 = *(unsigned char *)(a2 + 88);
  float result = *(float *)(a2 + 92);
  *(float *)(a1 + 4) = result;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 96);
  return result;
}

float sub_19E484DA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = 4 * (*(_DWORD *)(a2 + 40) == 1);
  if (*(_DWORD *)(a4 + v7) || *(_DWORD *)(a3 + 4 * (*(_DWORD *)(a2 + 40) == 1)) && (*(unsigned char *)(a2 + 73) & 4) != 0) {
    goto LABEL_2;
  }
  uint64_t v13 = 56;
  if (*(_DWORD *)(a2 + 64) == 1) {
    uint64_t v13 = 48;
  }
  uint64_t v14 = *(unsigned __int8 **)(a2 + v13);
  if (!sub_19E482834(v14) || (uint64_t v15 = *(void *)v14, v16 = *(_DWORD *)(*(void *)v14 + 24), v16 == -1))
  {
LABEL_2:
    int v8 = -1;
  }
  else
  {
    int v18 = *(_DWORD *)(v15 + 12);
    int v17 = *(_DWORD *)(v15 + 16);
    float v19 = *(float *)(v15 + 20);
    if (*(_DWORD *)(a2 + 40) == 1) {
      int v20 = *(_DWORD *)(v15 + 12);
    }
    else {
      int v20 = *(_DWORD *)(v15 + 16);
    }
    *(_DWORD *)(a3 + v7) = v20;
    *(_DWORD *)a4 = v18;
    *(_DWORD *)(a4 + 4) = v17;
    float v21 = *(float *)(a4 + 8);
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EC009378, memory_order_acquire) & 1) == 0)
    {
      float v27 = v21;
      float v28 = v19;
      int v25 = __cxa_guard_acquire(&qword_1EC009378);
      float v21 = v27;
      float v19 = v28;
      if (v25)
      {
        dword_1EC009380 = -8388609;
        __cxa_guard_release(&qword_1EC009378);
        float v21 = v27;
        float v19 = v28;
      }
    }
    if (v21 == *(float *)&dword_1EC009380) {
      goto LABEL_23;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EC009378, memory_order_acquire) & 1) == 0)
    {
      float v29 = v19;
      int v26 = __cxa_guard_acquire(&qword_1EC009378);
      float v19 = v29;
      if (v26)
      {
        dword_1EC009380 = -8388609;
        __cxa_guard_release(&qword_1EC009378);
        float v19 = v29;
      }
    }
    if (v19 == *(float *)&dword_1EC009380)
    {
LABEL_23:
      float v24 = NAN;
    }
    else
    {
      float v22 = *(float *)(a4 + 8);
      BOOL v23 = v19 == 3.4028e38 || v22 == 3.4028e38;
      float v24 = v22 + v19;
      if (v23) {
        float v24 = 3.4028e38;
      }
    }
    *(float *)(a4 + 8) = v24;
    *(_DWORD *)(a4 + 12) = v16;
    int v8 = *(_DWORD *)(a3 + v7);
  }
  *(unsigned char *)a1 = *(unsigned char *)a5;
  float result = *(float *)(a5 + 4);
  *(float *)(a1 + 4) = result;
  *(_DWORD *)(a1 + 8) = v8;
  return result;
}

uint64_t sub_19E484F68(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  int v7 = *(_DWORD *)(a1 + 72);
  if (*(_DWORD *)(a2 + 4 * (*(_DWORD *)(a1 + 40) == 1)))
  {
    if ((v7 & 0x100) == 0) {
      return *a4;
    }
  }
  else if ((v7 & 0x200) == 0)
  {
    return *a4;
  }
  *(unsigned char *)(a1 + 76) = 1;
  if (*(_DWORD *)(a1 + 64) == 1) {
    uint64_t v8 = 48;
  }
  else {
    uint64_t v8 = 56;
  }
  (*(void (**)(void, void))(***(void ***)(a1 + v8) + 56))(**(void **)(a1 + v8), *(unsigned int *)(a2 + 12));
  int v9 = *(_DWORD *)(a1 + 64);
  BOOL v10 = v9 == 1;
  if (v9 == 1) {
    uint64_t v11 = 48;
  }
  else {
    uint64_t v11 = 56;
  }
  int v12 = *(unsigned __int8 **)(a1 + v11);
  if (v10) {
    uint64_t v13 = 56;
  }
  else {
    uint64_t v13 = 48;
  }
  uint64_t v14 = (*(uint64_t (**)(void))(***(void ***)(a1 + v13) + 32))(**(void **)(a1 + v13));
  uint64_t v15 = *(unsigned int *)(a3 + 12);
  if (!sub_19E482834(v12)
    || (*(unsigned int (**)(void, uint64_t, uint64_t))(**(void **)v12 + 128))(*(void *)v12, v14, v15))
  {
    return *a4;
  }
  return 255;
}

void sub_19E4850A4()
{
}

void sub_19E4854E8(_Unwind_Exception *a1)
{
  MEMORY[0x19F3BDCF0](v2, 0x10E0C401DE81863);
  sub_19E46B1C8(v1);
  MEMORY[0x19F3BDCF0](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

void sub_19E4855D8()
{
}

void sub_19E4855E0(void *a1, void *a2)
{
  if (*a2) {
    operator new();
  }
  *a1 = 0;
  if (a2[1]) {
    operator new();
  }
  a1[1] = 0;
  a1[2] = a1;
  a1[3] = a1;
  sub_19E481EF8();
}

void sub_19E485738(_Unwind_Exception *a1)
{
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 112) = v5;
    operator delete(v5);
  }
  sub_19E482240(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_19E485760(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0)
  {
    if ((*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 160) + 56))(*(void *)(a1 + 160), 4, 0)|| (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 168) + 56))(*(void *)(a1 + 168), 4, 0)|| ((*(uint64_t (**)(void, void))(****(void ****)(a1 + 144) + 40))(***(void ***)(a1 + 144), 0) & 4) != 0|| (char v4 = (*(uint64_t (**)(void, void))(****(void ****)(a1 + 152) + 40))(***(void ***)(a1 + 152), 0), *(_DWORD *)(*(void *)(a1 + 136) + 40) == 3)|| (v4 & 4) != 0)
    {
      *(void *)(a1 + 8) |= 4uLL;
    }
  }
  return *(void *)(a1 + 8) & a2;
}

uint64_t sub_19E485884(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 24))(a1, 0x3FFFFFFF0007);
}

void sub_19E4858B0(void *a1)
{
  sub_19E4858E8(a1);
  JUMPOUT(0x19F3BDCF0);
}

uint64_t sub_19E4858E8(void *a1)
{
  *a1 = &unk_1EF0BCB60;
  uint64_t v2 = a1[17];
  if (v2)
  {
    if (*(unsigned char *)(v2 + 212))
    {
      unint64_t v3 = *(void **)(v2 + 200);
      if (v3)
      {
        if (*v3) {
          (*(void (**)(void))(*(void *)*v3 + 8))(*v3);
        }
        MEMORY[0x19F3BDCF0](v3, 0x1020C405F07FB98);
      }
    }
    sub_19E418864(*(void **)(v2 + 224));
    if (*(unsigned char *)(v2 + 132))
    {
      char v4 = *(void **)(v2 + 120);
      if (v4)
      {
        if (*v4) {
          (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
        }
        MEMORY[0x19F3BDCF0](v4, 0x1020C405F07FB98);
      }
    }
    sub_19E418864(*(void **)(v2 + 144));
    uint64_t v5 = sub_19E482518(v2);
    MEMORY[0x19F3BDCF0](v5, 0x1060C409DA32DC3);
  }
  int v6 = (void *)a1[22];
  if (v6)
  {
    if (*v6) {
      MEMORY[0x19F3BDCF0](*v6, 0xC400A2AC0F1);
    }
    uint64_t v7 = v6[1];
    if (v7) {
      MEMORY[0x19F3BDCF0](v7, 0xC400A2AC0F1);
    }
    uint64_t v8 = (void *)v6[13];
    if (v8)
    {
      v6[14] = v8;
      operator delete(v8);
    }
    sub_19E482240((uint64_t)(v6 + 4));
    MEMORY[0x19F3BDCF0](v6, 0x10E0C401DE81863);
  }
  return sub_19E46B1C8((uint64_t)a1);
}

void sub_19E485A88(uint64_t a1@<X0>, int a2@<W1>, _DWORD *a3@<X8>)
{
  uint64_t v6 = *(void *)(*(void *)(a1 + 176) + 104);
  uint64_t v7 = v6 + 20 * a2;
  int v8 = *(_DWORD *)v7;
  (*(void (**)(char *__return_ptr))(****(void ****)(a1 + 144) + 96))((char *)&v33 + 4);
  v9.n128_u32[0] = HIDWORD(v33);
  int v30 = HIDWORD(v33);
  int v34 = 2139095039;
  if (*((float *)&v33 + 1) != 3.4028e38)
  {
    uint64_t v10 = *(unsigned int *)(v7 + 4);
    (*(void (**)(uint64_t *__return_ptr))(****(void ****)(a1 + 152) + 96))(&v33);
    v9.n128_u32[0] = v33;
    int v30 = v33;
    int v34 = 2139095039;
    if (*(float *)&v33 != 3.4028e38)
    {
      uint64_t v11 = *(void *)(a1 + 136);
      uint64_t v12 = v6 + 20 * a2;
      LOBYTE(v30) = *(unsigned char *)(v12 + 8);
      unsigned __int32 v31 = *(_DWORD *)(v12 + 12);
      v9.n128_u32[0] = v31;
      int v32 = *(_DWORD *)(v12 + 16);
      sub_19E485DF4(v11, v8, v10, (unsigned __int8 *)&v30, v9);
      uint64_t v13 = *(void *)(a1 + 136);
      int v14 = *(_DWORD *)(v13 + 72);
      if ((v14 & 0x40) != 0)
      {
        float v15 = *((float *)&v33 + 1);
        int v30 = HIDWORD(v33);
        int v34 = 2139095039;
        if (*((float *)&v33 + 1) != 3.4028e38)
        {
          float v16 = *(float *)(v13 + 84);
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EC009378, memory_order_acquire) & 1) == 0)
          {
            float v25 = v15;
            float v28 = v16;
            int v23 = __cxa_guard_acquire(&qword_1EC009378);
            float v15 = v25;
            float v16 = v28;
            if (v23)
            {
              dword_1EC009380 = -8388609;
              __cxa_guard_release(&qword_1EC009378);
              float v15 = v25;
              float v16 = v28;
            }
          }
          if (v15 == *(float *)&dword_1EC009380) {
            goto LABEL_10;
          }
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EC009378, memory_order_acquire) & 1) == 0)
          {
            float v29 = v16;
            int v24 = __cxa_guard_acquire(&qword_1EC009378);
            float v16 = v29;
            if (v24)
            {
              dword_1EC009380 = -8388609;
              __cxa_guard_release(&qword_1EC009378);
              float v16 = v29;
            }
          }
          if (v16 == *(float *)&dword_1EC009380 || v16 == 3.4028e38)
          {
LABEL_10:
            float v17 = NAN;
          }
          else
          {
            float v17 = 3.4028e38;
            if (*((float *)&v33 + 1) != 3.4028e38) {
              float v17 = *((float *)&v33 + 1) - v16;
            }
          }
          *((float *)&v33 + 1) = v17;
          int v14 = *(_DWORD *)(v13 + 72);
        }
      }
      if ((v14 & 0x80) != 0)
      {
        float v18 = *((float *)&v33 + 1);
        int v30 = HIDWORD(v33);
        int v34 = 2139095039;
        if (*((float *)&v33 + 1) != 3.4028e38 && *(_DWORD *)(v13 + 96) != -1)
        {
          HIDWORD(v33) = 2139095039;
          float v18 = 3.4028e38;
        }
      }
      else
      {
        float v18 = *((float *)&v33 + 1);
      }
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EC009378, memory_order_acquire) & 1) == 0)
      {
        float v26 = v18;
        int v21 = __cxa_guard_acquire(&qword_1EC009378);
        float v18 = v26;
        if (v21)
        {
          dword_1EC009380 = -8388609;
          __cxa_guard_release(&qword_1EC009378);
          float v18 = v26;
        }
      }
      if (v18 == *(float *)&dword_1EC009380) {
        goto LABEL_27;
      }
      float v19 = *(float *)&v33;
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EC009378, memory_order_acquire) & 1) == 0)
      {
        float v27 = v19;
        int v22 = __cxa_guard_acquire(&qword_1EC009378);
        float v19 = v27;
        if (v22)
        {
          dword_1EC009380 = -8388609;
          __cxa_guard_release(&qword_1EC009378);
          float v19 = v27;
        }
      }
      if (v19 == *(float *)&dword_1EC009380)
      {
LABEL_27:
        v9.n128_u32[0] = 2143289344;
      }
      else
      {
        BOOL v20 = *(float *)&v33 == 3.4028e38 || *((float *)&v33 + 1) == 3.4028e38;
        v9.n128_f32[0] = *(float *)&v33 + *((float *)&v33 + 1);
        if (v20) {
          v9.n128_f32[0] = 3.4028e38;
        }
      }
    }
  }
  *a3 = v9.n128_u32[0];
}

void sub_19E485DF4(uint64_t a1, int a2, uint64_t a3, unsigned __int8 *a4, __n128 a5)
{
  *(unsigned char *)(a1 + 88) = *a4;
  *(_DWORD *)(a1 + 92) = *((_DWORD *)a4 + 1);
  *(_DWORD *)(a1 + 96) = *((_DWORD *)a4 + 2);
  *(unsigned char *)(a1 + 80) = *a4;
  a5.n128_u32[0] = *((_DWORD *)a4 + 1);
  *(_DWORD *)(a1 + 84) = a5.n128_u32[0];
  if (*(_DWORD *)(a1 + 24) != a2 || *(_DWORD *)(a1 + 28) != a3 || *a4 != *(unsigned __int8 *)(a1 + 32))
  {
    *(_DWORD *)(a1 + ++*(_DWORD *)(result + 24) = a2;
    *(_DWORD *)(a1 + 28) = a3;
    *(unsigned char *)(a1 + 32) = *a4;
    uint64_t v7 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), a3);
    uint64_t v8 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16), a3);
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 16) + 24))(&v14);
    int v15 = v14;
    HIDWORD(v14) = 2139095039;
    a5.n128_u32[0] = v14;
    BOOL v10 = *(float *)&v14 == 3.4028e38 && v7 == v8;
    *(unsigned char *)(a1 + 33) = v10;
    *(unsigned char *)(a1 + 34) = v8 == 0;
  }
  if ((*(unsigned char *)(a1 + 72) & 0x80) != 0)
  {
    uint64_t v11 = *(_DWORD *)(a1 + 40) == 1
        ? (*(uint64_t (**)(__n128))(**(void **)(a1 + 104) + 32))(a5)
        : (*(uint64_t (**)(__n128))(**(void **)(a1 + 112) + 32))(a5);
    *(void *)(a1 + 280) = v11;
    unsigned int v12 = *(_DWORD *)(a1 + 96);
    sub_19E418864(*(void **)(a1 + 144));
    uint64_t v13 = *(void **)(a1 + 224);
    *(void *)(a1 + 136) = a1 + 144;
    *(void *)(a1 + 144) = 0;
    *(void *)(a1 + 152) = 0;
    *(void *)(a1 + 160) = -1;
    sub_19E418864(v13);
    *(void *)(a1 + 216) = a1 + 224;
    *(void *)(a1 + 2++*(_DWORD *)(result + 24) = 0;
    *(void *)(a1 + 232) = 0;
    *(void *)(a1 + 240) = -1;
    if (v12 != -1)
    {
      sub_19E482FBC(a1 + 120, v12);
      sub_19E482FBC(a1 + 200, v12);
    }
  }
}

uint64_t sub_19E48604C(uint64_t a1)
{
  unsigned int v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 160) + 16))(*(void *)(a1 + 160));
  if (v2 == -1) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v3 = v2;
  unsigned int v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 168) + 16))(*(void *)(a1 + 168));
  if (v4 == -1) {
    return 0xFFFFFFFFLL;
  }
  unint64_t v23 = __PAIR64__(v4, v3);
  char v24 = 0;
  unint64_t v25 = 0xFFFFFFFF00000000;
  uint64_t v5 = *(void **)(a1 + 176);
  v5[16] = &v23;
  uint64_t v6 = sub_19E483360(v5 + 4);
  if (v6) {
    return *((unsigned int *)v6 + 4);
  }
  __n128 v9 = (unint64_t *)v5[13];
  BOOL v10 = (unint64_t *)v5[14];
  uint64_t v11 = ((char *)v10 - (char *)v9) >> 2;
  unint64_t v7 = 0xCCCCCCCCCCCCCCCDLL * v11;
  int v26 = -858993459 * v11;
  unint64_t v12 = v5[15];
  if ((unint64_t)v10 >= v12)
  {
    unint64_t v14 = v7 + 1;
    if (v7 + 1 > 0xCCCCCCCCCCCCCCCLL) {
      sub_19E37C7C4();
    }
    unint64_t v15 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v12 - (void)v9) >> 2);
    if (2 * v15 > v14) {
      unint64_t v14 = 2 * v15;
    }
    if (v15 >= 0x666666666666666) {
      unint64_t v16 = 0xCCCCCCCCCCCCCCCLL;
    }
    else {
      unint64_t v16 = v14;
    }
    if (v16 > 0xCCCCCCCCCCCCCCCLL) {
      sub_19E37C2B8();
    }
    uint64_t v17 = 20 * v16;
    float v18 = (char *)operator new(20 * v16);
    float v19 = &v18[20 * v7];
    BOOL v20 = &v18[v17];
    *(void *)float v19 = v23;
    v19[8] = 0;
    *(void *)(v19 + 12) = 0xFFFFFFFF00000000;
    uint64_t v13 = v19 + 20;
    if (v10 != v9)
    {
      uint64_t v21 = 0;
      do
      {
        int v22 = &v19[v21];
        *(void *)(v22 - 20) = *(unint64_t *)((char *)v10 + v21 - 20);
        *(v22 - 12) = *((unsigned char *)v10 + v21 - 12);
        *((_DWORD *)v22 - 2) = *(_DWORD *)((char *)v10 + v21 - 8);
        *((_DWORD *)v22 - 1) = *(_DWORD *)((char *)v10 + v21 - 4);
        v21 -= 20;
      }
      while ((unint64_t *)((char *)v10 + v21) != v9);
      v19 += v21;
    }
    v5[13] = v19;
    v5[14] = v13;
    v5[15] = v20;
    if (v9) {
      operator delete(v9);
    }
  }
  else
  {
    *BOOL v10 = v23;
    *((unsigned char *)v10 + 8) = v24;
    *(unint64_t *)((char *)v10 + 12) = v25;
    uint64_t v13 = (char *)v10 + 20;
  }
  v5[14] = v13;
  sub_19E4834A0((uint64_t)(v5 + 4), v7, &v26);
  return v7;
}

uint64_t sub_19E486270(uint64_t a1, uint64_t a2, int a3)
{
  if ((*(unsigned int (**)(void, void))(****(void ****)(a1 + 144) + 24))(***(void ***)(a1 + 144), 0) == a3)(*(void (**)(void, void))(****(void ****)(a1 + 152) + 24))(***(void ***)(a1 + 152), 0); {
  return 0;
  }
}

void sub_19E486308(uint64_t a1, int a2, __n128 a3)
{
  uint64_t v5 = (unsigned int *)(*(void *)(*(void *)(a1 + 176) + 104) + 20 * a2);
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  uint64_t v8 = *(void *)(a1 + 136);
  LOBYTE(__p) = *((unsigned char *)v5 + 8);
  HIDWORD(__p) = v5[3];
  a3.n128_u32[0] = HIDWORD(__p);
  unsigned int v20 = v5[4];
  sub_19E485DF4(v8, v6, v7, (unsigned __int8 *)&__p, a3);
  int v9 = *(_DWORD *)(a1 + 184);
  if (!v9) {
    goto LABEL_24;
  }
  if (v9 != 1)
  {
    uint64_t v10 = (*(uint64_t (**)(void, uint64_t))(****(void ****)(a1 + 144) + 104))(***(void ***)(a1 + 144), v6);
    uint64_t v11 = (*(uint64_t (**)(void, uint64_t))(****(void ****)(a1 + 152) + 104))(***(void ***)(a1 + 152), v7);
    if (v10 == -1 && v11 == -1)
    {
      char v21 = 5;
      strcpy((char *)&__p, "FATAL");
      float v18 = sub_19E37CA70(MEMORY[0x1E4FBA240], (uint64_t)&__p, 5);
      sub_19E37CA70(v18, (uint64_t)": ", 2);
      sub_19E37CA70(MEMORY[0x1E4FBA240], (uint64_t)"ComposeFst: both sides can't require match", 42);
      sub_19E43C8CC();
      if (v21 < 0) {
        operator delete(__p);
      }
      *(void *)(a1 + 8) |= 4uLL;
      goto LABEL_24;
    }
    BOOL v13 = v11 == -1 || v10 <= v11;
    BOOL v14 = v13;
    if (v10 != -1 && v14)
    {
LABEL_24:
      sub_19E486524(a1, a2, v7, *(void *)(a1 + 160), v6, *(void ***)(a1 + 152), 1);
      return;
    }
  }
  uint64_t v16 = *(void *)(a1 + 168);
  uint64_t v17 = *(void ***)(a1 + 144);
  sub_19E486524(a1, a2, v6, v16, v7, v17, 0);
}

void sub_19E4864FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_19E486524(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, void **a6, int a7)
{
  int v11 = a3;
  (*(void (**)(void, uint64_t))(*(void *)**a6 + 56))(**a6, a3);
  *((_DWORD *)a6 + 18) = v11;
  v19[0] = a7 - 1;
  v19[1] = a7 << 31 >> 31;
  v19[2] = 0;
  v19[3] = a5;
  sub_19E486788(a1, a2, a6, v19, a7);
  unint64_t v18 = 0;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a4 + 120))(a4, a5, v16);
  while (1)
  {
    if (!v16[0])
    {
      unint64_t v15 = v18;
      if (v18 >= v16[2]) {
        goto LABEL_15;
      }
      goto LABEL_10;
    }
    if ((*(unsigned int (**)(void))(*(void *)v16[0] + 16))(v16[0])) {
      break;
    }
    if (!v16[0])
    {
      unint64_t v15 = v18;
LABEL_10:
      BOOL v14 = (unsigned int *)(v16[1] + 16 * v15);
      goto LABEL_11;
    }
    BOOL v14 = (unsigned int *)(*(uint64_t (**)(void))(*(void *)v16[0] + 24))();
LABEL_11:
    sub_19E486788(a1, a2, a6, v14, a7);
    if (v16[0]) {
      (*(void (**)(void))(*(void *)v16[0] + 32))(v16[0]);
    }
    else {
      ++v18;
    }
  }
  if (v16[0])
  {
    (*(void (**)(void))(*(void *)v16[0] + 8))();
    goto LABEL_17;
  }
LABEL_15:
  if (v17) {
    --*v17;
  }
LABEL_17:
  sub_19E472A04(a1, a2);
}

void sub_19E486734(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _DWORD *a13)
{
  if (!a10)
  {
    if (a13) {
      --*a13;
    }
    _Unwind_Resume(exception_object);
  }
  (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E486788(uint64_t a1, int a2, void **a3, unsigned int *a4, int a5)
{
  char v5 = a5;
  uint64_t v10 = a4 + 1;
  if (!a5) {
    uint64_t v10 = a4;
  }
  uint64_t result = sub_19E484060(a3, *v10);
  if (result && !*((unsigned char *)a3 + 76))
  {
    if (v5)
    {
      do
      {
        uint64_t v12 = (uint64_t)a3 + 60;
        if (!*((unsigned char *)a3 + 56)) {
          uint64_t v12 = (*(uint64_t (**)(void))(*(void *)**a3 + 80))(**a3);
        }
        uint64_t v20 = *(void *)v12;
        int v21 = *(_DWORD *)(v12 + 8);
        int v22 = *(_DWORD *)(v12 + 12);
        uint64_t v17 = *(void *)a4;
        unsigned int v18 = a4[2];
        unsigned int v19 = a4[3];
        sub_19E4869D4((uint64_t)v14, *(void *)(a1 + 136), (uint64_t)&v17, (uint64_t)&v20);
        if (v14[0] != 255 || (v24 = v15, int v23 = 2139095039, v15 != 3.4028e38) || v16 != -1) {
          sub_19E486B34(a1, a2, (float *)&v17, (uint64_t)&v20, (uint64_t)v14);
        }
        uint64_t result = sub_19E484764((uint64_t)a3);
      }
      while (!*((unsigned char *)a3 + 76));
    }
    else
    {
      do
      {
        uint64_t v13 = (uint64_t)a3 + 60;
        if (!*((unsigned char *)a3 + 56)) {
          uint64_t v13 = (*(uint64_t (**)(void))(*(void *)**a3 + 80))(**a3);
        }
        uint64_t v20 = *(void *)v13;
        int v21 = *(_DWORD *)(v13 + 8);
        int v22 = *(_DWORD *)(v13 + 12);
        uint64_t v17 = *(void *)a4;
        unsigned int v18 = a4[2];
        unsigned int v19 = a4[3];
        sub_19E4869D4((uint64_t)v14, *(void *)(a1 + 136), (uint64_t)&v20, (uint64_t)&v17);
        if (v14[0] != 255 || (v24 = v15, int v23 = 2139095039, v15 != 3.4028e38) || v16 != -1) {
          sub_19E486B34(a1, a2, (float *)&v20, (uint64_t)&v17, (uint64_t)v14);
        }
        uint64_t result = sub_19E484764((uint64_t)a3);
      }
      while (!*((unsigned char *)a3 + 76));
    }
  }
  return result;
}

float sub_19E4869D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if ((*(unsigned char *)(a2 + 72) & 0x80) == 0)
  {
    sub_19E486F48((uint64_t)v13, a2, a3, a4);
    char v8 = v13[0];
LABEL_3:
    *(unsigned char *)a1 = v8;
    float result = v14;
    *(float *)(a1 + 4) = v14;
    *(_DWORD *)(a1 + 8) = -1;
    return result;
  }
  uint64_t v10 = *(unsigned int *)(a2 + 96);
  if (v10 == -1)
  {
    sub_19E486F48((uint64_t)v13, a2, a3, a4);
    char v8 = v13[0];
    if (v13[0] == 255)
    {
      float v16 = v14;
      int v15 = 2139095039;
      float result = v14;
      if (v14 == 3.4028e38)
      {
        *(unsigned char *)a1 = -1;
        *(void *)(a1 + 4) = -2155872257;
        return result;
      }
    }
    if (!*(unsigned char *)(a2 + 76)) {
      goto LABEL_3;
    }
    if (*(_DWORD *)(a2 + 40) == 1)
    {
      uint64_t v11 = v5;
      uint64_t v12 = v4;
    }
    else
    {
      uint64_t v11 = v4;
      uint64_t v12 = v5;
    }
    return sub_19E484DA0(a1, a2, v11, v12, (uint64_t)v13);
  }
  else
  {
    if (*(_DWORD *)(a2 + 40) != 1)
    {
      a3 = a4;
      a4 = v5;
    }
    return sub_19E484C60(a1, a2, a3, a4, v10);
  }
}

void sub_19E486B34(uint64_t a1, int a2, float *a3, uint64_t a4, uint64_t a5)
{
  int v9 = *(_DWORD *)(a4 + 12);
  *(float *)&uint64_t v58 = a3[3];
  HIDWORD(v58) = v9;
  char v59 = *(unsigned char *)a5;
  int v60 = *(_DWORD *)(a5 + 4);
  int v61 = *(_DWORD *)(a5 + 8);
  uint64_t v10 = *(unsigned int *)a3;
  uint64_t v11 = *(unsigned int *)(a4 + 4);
  float v12 = a3[2];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EC009378, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EC009378))
  {
    dword_1EC009380 = -8388609;
    __cxa_guard_release(&qword_1EC009378);
  }
  if (v12 == *(float *)&dword_1EC009380) {
    goto LABEL_11;
  }
  float v13 = *(float *)(a4 + 8);
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EC009378, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EC009378))
  {
    dword_1EC009380 = -8388609;
    __cxa_guard_release(&qword_1EC009378);
  }
  if (v13 == *(float *)&dword_1EC009380)
  {
LABEL_11:
    float v18 = NAN;
  }
  else
  {
    float v14 = a3[2];
    float v15 = *(float *)(a4 + 8);
    BOOL v16 = v15 == 3.4028e38 || v14 == 3.4028e38;
    float v17 = v15 + v14;
    if (v16) {
      float v18 = 3.4028e38;
    }
    else {
      float v18 = v17;
    }
  }
  unsigned int v19 = *(void **)(a1 + 176);
  v19[16] = &v58;
  uint64_t v20 = sub_19E483360(v19 + 4);
  if (v20)
  {
    LODWORD(v21) = *((_DWORD *)v20 + 4);
  }
  else
  {
    int v22 = (char *)v19[13];
    int v23 = (char *)v19[14];
    uint64_t v24 = (v23 - v22) >> 2;
    unint64_t v21 = 0xCCCCCCCCCCCCCCCDLL * v24;
    int v62 = -858993459 * v24;
    unint64_t v25 = v19[15];
    if ((unint64_t)v23 >= v25)
    {
      unint64_t v27 = v21 + 1;
      if (v21 + 1 > 0xCCCCCCCCCCCCCCCLL) {
        sub_19E37C7C4();
      }
      unint64_t v28 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v25 - (void)v22) >> 2);
      if (2 * v28 > v27) {
        unint64_t v27 = 2 * v28;
      }
      if (v28 >= 0x666666666666666) {
        unint64_t v29 = 0xCCCCCCCCCCCCCCCLL;
      }
      else {
        unint64_t v29 = v27;
      }
      if (v29 > 0xCCCCCCCCCCCCCCCLL) {
        sub_19E37C2B8();
      }
      uint64_t v30 = 20 * v29;
      unsigned __int32 v31 = (char *)operator new(20 * v29);
      int v32 = &v31[20 * v21];
      uint64_t v33 = &v31[v30];
      *(void *)int v32 = v58;
      v32[8] = v59;
      *((_DWORD *)v32 + 3) = v60;
      *((_DWORD *)v32 + 4) = v61;
      int v26 = v32 + 20;
      if (v23 != v22)
      {
        uint64_t v34 = 0;
        do
        {
          float v35 = &v32[v34];
          *(void *)(v35 - 20) = *(void *)&v23[v34 - 20];
          *(v35 - 12) = v23[v34 - 12];
          *((_DWORD *)v35 - 2) = *(_DWORD *)&v23[v34 - 8];
          *((_DWORD *)v35 - 1) = *(_DWORD *)&v23[v34 - 4];
          v34 -= 20;
        }
        while (&v23[v34] != v22);
        v32 += v34;
      }
      v19[13] = v32;
      v19[14] = v26;
      v19[15] = v33;
      if (v22) {
        operator delete(v22);
      }
    }
    else
    {
      *(void *)int v23 = v58;
      v23[8] = v59;
      *((_DWORD *)v23 + 3) = v60;
      *((_DWORD *)v23 + 4) = v61;
      int v26 = v23 + 20;
    }
    v19[14] = v26;
    sub_19E4834A0((uint64_t)(v19 + 4), v21, &v62);
  }
  uint64_t v36 = *(void *)(a1 + 120);
  uint64_t v37 = sub_19E472B88(v36, a2);
  float v38 = (void *)v37;
  if (*(unsigned char *)(v36 + 104))
  {
    int v39 = *(_DWORD *)(v37 + 56);
    if ((v39 & 4) == 0)
    {
      *(_DWORD *)(v37 + 56) = v39 | 4;
      unint64_t v40 = *(void *)(v37 + 32) - *(void *)(v37 + 24) + *(void *)(v36 + 128) + 64;
      *(void *)(v36 + 128) = v40;
      *(unsigned char *)(v36 + 120) = 1;
      if (v40 > *(void *)(v36 + 112)) {
        sub_19E472D04(v36, v37);
      }
    }
  }
  uint64_t v41 = v10 | (v11 << 32);
  unint64_t v43 = v38[4];
  unint64_t v42 = v38[5];
  if (v43 >= v42)
  {
    uint64_t v45 = v38[3];
    uint64_t v46 = (uint64_t)(v43 - v45) >> 4;
    unint64_t v47 = v46 + 1;
    if ((unint64_t)(v46 + 1) >> 60) {
      sub_19E37C7C4();
    }
    uint64_t v48 = v42 - v45;
    if (v48 >> 3 > v47) {
      unint64_t v47 = v48 >> 3;
    }
    if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v49 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v49 = v47;
    }
    v50 = sub_19E478CD4(v38 + 6, v49);
    v51 = (float *)&v50[2 * v46];
    v52 = &v50[2 * v49];
    *(void *)v51 = v41;
    v51[2] = v18;
    *((_DWORD *)v51 + 3) = v21;
    v44 = v51 + 4;
    v54 = (void *)v38[3];
    v53 = (void *)v38[4];
    if (v53 != v54)
    {
      unint64_t v55 = 0;
      do
      {
        v56 = &v51[v55 / 4];
        *((void *)v56 - 2) = v53[v55 / 8 - 2];
        *(v56 - 2) = *(float *)&v53[v55 / 8 - 1];
        *(v56 - 1) = *((float *)&v53[v55 / 8 - 1] + 1);
        v55 -= 16;
      }
      while (&v53[v55 / 8] != v54);
      v51 = (float *)((char *)v51 + v55);
      v53 = (void *)v38[3];
    }
    v38[3] = v51;
    v38[4] = v44;
    uint64_t v57 = v38[5];
    v38[5] = v52;
    if (v53) {
      sub_19E475CA4(v38 + 6, v53, (v57 - (uint64_t)v53) >> 4);
    }
  }
  else
  {
    *(void *)unint64_t v43 = v41;
    *(float *)(v43 + 8) = v18;
    v44 = (void *)(v43 + 16);
    *(_DWORD *)(v43 + 12) = v21;
  }
  v38[4] = v44;
}

void sub_19E486F48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(unsigned char *)(a2 + 76) = 0;
  if (*(_DWORD *)a4 == -1)
  {
    if (*(unsigned char *)(a2 + 33)) {
      goto LABEL_12;
    }
    unsigned __int8 v36 = *(unsigned char *)(a2 + 34) ^ 1;
  }
  else
  {
    int v7 = *(_DWORD *)(a3 + 4);
    if (v7 != -1)
    {
      if (v7)
      {
        unsigned __int8 v36 = 0;
        goto LABEL_13;
      }
LABEL_12:
      char v11 = -1;
      float v12 = 3.4028e38;
      goto LABEL_51;
    }
    int v8 = *(unsigned __int8 *)(a2 + 32);
    BOOL v9 = v8 == 1;
    if (v8 == 1) {
      unsigned __int8 v10 = -1;
    }
    else {
      unsigned __int8 v10 = 0;
    }
    unsigned __int8 v36 = v10;
    if (v9) {
      goto LABEL_12;
    }
  }
LABEL_13:
  if (*(_DWORD *)(a2 + 40) == 1)
  {
    uint64_t v14 = a3;
    a3 = a4;
  }
  else
  {
    uint64_t v14 = a4;
  }
  char v11 = sub_19E484F68(a2, v14, a3, &v36);
  if (v11 == -1)
  {
    float v12 = 3.4028e38;
    char v11 = -1;
  }
  else
  {
    float v12 = 0.0;
    if ((*(unsigned char *)(a2 + 72) & 0x40) != 0)
    {
      float v15 = 0.0;
      if (*(unsigned char *)(a2 + 76))
      {
        uint64_t v16 = 56;
        if (*(_DWORD *)(a2 + 64) == 1) {
          uint64_t v16 = 48;
        }
        float v17 = *(unsigned __int8 **)(a2 + v16);
        if (sub_19E482834(v17)) {
          float v15 = *(float *)(*(void *)v17 + 8);
        }
      }
      float v18 = *(float *)(a2 + 84);
      float v38 = v15;
      int v37 = 2139095039;
      if (v15 == 3.4028e38)
      {
        char v11 = -1;
        float v12 = 3.4028e38;
      }
      else
      {
        float v19 = *(float *)(a4 + 8);
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EC009378, memory_order_acquire) & 1) == 0)
        {
          float v29 = v19;
          float v32 = v18;
          int v25 = __cxa_guard_acquire(&qword_1EC009378);
          float v19 = v29;
          float v18 = v32;
          if (v25)
          {
            dword_1EC009380 = -8388609;
            __cxa_guard_release(&qword_1EC009378);
            float v19 = v29;
            float v18 = v32;
          }
        }
        if (v19 == *(float *)&dword_1EC009380) {
          goto LABEL_36;
        }
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EC009378, memory_order_acquire) & 1) == 0)
        {
          float v34 = v18;
          int v27 = __cxa_guard_acquire(&qword_1EC009378);
          float v18 = v34;
          if (v27)
          {
            dword_1EC009380 = -8388609;
            __cxa_guard_release(&qword_1EC009378);
            float v18 = v34;
          }
        }
        if (v15 == *(float *)&dword_1EC009380)
        {
LABEL_36:
          float v22 = NAN;
        }
        else
        {
          float v20 = *(float *)(a4 + 8);
          BOOL v21 = v15 == 3.4028e38 || v20 == 3.4028e38;
          float v22 = v20 + v15;
          if (v21) {
            float v22 = 3.4028e38;
          }
        }
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EC009378, memory_order_acquire) & 1) == 0)
        {
          float v30 = v22;
          float v33 = v18;
          int v26 = __cxa_guard_acquire(&qword_1EC009378);
          float v22 = v30;
          float v18 = v33;
          if (v26)
          {
            dword_1EC009380 = -8388609;
            __cxa_guard_release(&qword_1EC009378);
            float v22 = v30;
            float v18 = v33;
          }
        }
        if (v22 == *(float *)&dword_1EC009380)
        {
          float v23 = NAN;
        }
        else
        {
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EC009378, memory_order_acquire) & 1) == 0)
          {
            float v31 = v22;
            float v35 = v18;
            int v28 = __cxa_guard_acquire(&qword_1EC009378);
            float v22 = v31;
            float v18 = v35;
            if (v28)
            {
              dword_1EC009380 = -8388609;
              __cxa_guard_release(&qword_1EC009378);
              float v22 = v31;
              float v18 = v35;
            }
          }
          float v23 = NAN;
          if (v18 != *(float *)&dword_1EC009380 && v18 != 3.4028e38)
          {
            float v23 = 3.4028e38;
            if (v22 != 3.4028e38) {
              float v23 = v22 - v18;
            }
          }
        }
        *(float *)(a4 + 8) = v23;
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EC009378, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_1EC009378))
        {
          dword_1EC009380 = -8388609;
          __cxa_guard_release(&qword_1EC009378);
        }
        BOOL v24 = v15 == 3.4028e38 || v15 == *(float *)&dword_1EC009380;
        float v12 = floorf((float)(v15 * 1024.0) + 0.5) * 0.00097656;
        if (v24) {
          float v12 = v15;
        }
      }
    }
  }
LABEL_51:
  *(unsigned char *)a1 = v11;
  *(float *)(a1 + 4) = v12;
}

void sub_19E4872B8()
{
}

void sub_19E4876F4(_Unwind_Exception *a1)
{
  MEMORY[0x19F3BDCF0](v2, 0x10E0C401DE81863);
  sub_19E46B1C8(v1);
  MEMORY[0x19F3BDCF0](v1, 0x10F3C405A371F01);
  _Unwind_Resume(a1);
}

void sub_19E4877E4()
{
}

uint64_t sub_19E4877EC(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0)
  {
    if ((*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 160) + 56))(*(void *)(a1 + 160), 4, 0)|| (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 168) + 56))(*(void *)(a1 + 168), 4, 0)|| ((*(uint64_t (**)(void, void))(****(void ****)(a1 + 144) + 40))(***(void ***)(a1 + 144), 0) & 4) != 0|| (char v4 = (*(uint64_t (**)(void, void))(****(void ****)(a1 + 152) + 40))(***(void ***)(a1 + 152), 0), *(_DWORD *)(*(void *)(a1 + 136) + 40) == 3)|| (v4 & 4) != 0)
    {
      *(void *)(a1 + 8) |= 4uLL;
    }
  }
  return *(void *)(a1 + 8) & a2;
}

uint64_t sub_19E487910(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 24))(a1, 0x3FFFFFFF0007);
}

void sub_19E48793C(void *a1)
{
  sub_19E487974(a1);
  JUMPOUT(0x19F3BDCF0);
}

uint64_t sub_19E487974(void *a1)
{
  *a1 = &unk_1EF0BCBB8;
  uint64_t v2 = a1[17];
  if (v2)
  {
    if (*(unsigned char *)(v2 + 212))
    {
      unsigned int v3 = *(void **)(v2 + 200);
      if (v3)
      {
        if (*v3) {
          (*(void (**)(void))(*(void *)*v3 + 8))(*v3);
        }
        MEMORY[0x19F3BDCF0](v3, 0x1020C405F07FB98);
      }
    }
    sub_19E418864(*(void **)(v2 + 224));
    if (*(unsigned char *)(v2 + 132))
    {
      char v4 = *(void **)(v2 + 120);
      if (v4)
      {
        if (*v4) {
          (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
        }
        MEMORY[0x19F3BDCF0](v4, 0x1020C405F07FB98);
      }
    }
    sub_19E418864(*(void **)(v2 + 144));
    uint64_t v5 = sub_19E482518(v2);
    MEMORY[0x19F3BDCF0](v5, 0x1060C409DA32DC3);
  }
  uint64_t v6 = (void *)a1[22];
  if (v6)
  {
    if (*v6) {
      MEMORY[0x19F3BDCF0](*v6, 0xC400A2AC0F1);
    }
    uint64_t v7 = v6[1];
    if (v7) {
      MEMORY[0x19F3BDCF0](v7, 0xC400A2AC0F1);
    }
    int v8 = (void *)v6[13];
    if (v8)
    {
      v6[14] = v8;
      operator delete(v8);
    }
    sub_19E482240((uint64_t)(v6 + 4));
    MEMORY[0x19F3BDCF0](v6, 0x10E0C401DE81863);
  }
  return sub_19E46B1C8((uint64_t)a1);
}

void sub_19E487B14(void *a1, CFDictionaryRef theDict)
{
  Value = CFDictionaryGetValue(theDict, @"URL");
  if (!Value)
  {
    CFURLRef url = 0;
LABEL_16:
    exception = __cxa_allocate_exception(0x20uLL);
    sub_19E382340(anURL, "URL missing for CoreLM tokenizer resource");
    sub_19E3F5604(exception, (long long *)anURL);
    __cxa_throw(exception, (struct type_info *)&unk_1EF0B7540, (void (*)(void *))sub_19E3F56B0);
  }
  char v4 = Value;
  CFRetain(Value);
  sub_19E36F3C4(&url, v4);
  if (!url) {
    goto LABEL_16;
  }
  CFURLRef PathComponent = CFURLCreateCopyDeletingLastPathComponent(0, url);
  sub_19E36F3C4(&v13, PathComponent);
  if (!v13)
  {
    BOOL v9 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3BD790](v9, "Could not construct");
    __cxa_throw(v9, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFURLRef v6 = CFURLCreateCopyAppendingPathComponent(0, v13, @"sp.dat", 0);
  sub_19E36F3C4(anURL, v6);
  if (v13) {
    CFRelease(v13);
  }
  if (!anURL[0])
  {
    unsigned __int8 v10 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3BD790](v10, "Could not construct");
    __cxa_throw(v10, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFStringRef v7 = CFURLCopyFileSystemPath(anURL[0], kCFURLPOSIXPathStyle);
  sub_19E372124(&v13, v7);
  if (!v13)
  {
    char v11 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3BD790](v11, "Could not construct");
    __cxa_throw(v11, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  sub_19E4143C4(a1, (const __CFString *)v13);
  if (v13) {
    CFRelease(v13);
  }
  if (anURL[0]) {
    CFRelease(anURL[0]);
  }
  if (url) {
    CFRelease(url);
  }
}

void sub_19E487D1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, const void *a16, const void *a17)
{
  __cxa_free_exception(v17);
  sub_19E3C6F1C(&a16);
  sub_19E410F68((const void **)&__p);
  sub_19E410F68(&a17);
  _Unwind_Resume(a1);
}

void sub_19E487DD4(void *a1, CFDictionaryRef theDict)
{
  Value = CFDictionaryGetValue(theDict, @"URL");
  if (!Value)
  {
    CFURLRef url = 0;
LABEL_16:
    exception = __cxa_allocate_exception(0x20uLL);
    sub_19E382340(anURL, "URL missing for CoreLM tokenizer resource");
    sub_19E3F5604(exception, (long long *)anURL);
    __cxa_throw(exception, (struct type_info *)&unk_1EF0B7540, (void (*)(void *))sub_19E3F56B0);
  }
  char v4 = Value;
  CFRetain(Value);
  sub_19E36F3C4(&url, v4);
  if (!url) {
    goto LABEL_16;
  }
  CFURLRef PathComponent = CFURLCreateCopyDeletingLastPathComponent(0, url);
  sub_19E36F3C4(&v13, PathComponent);
  if (!v13)
  {
    BOOL v9 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3BD790](v9, "Could not construct");
    __cxa_throw(v9, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFURLRef v6 = CFURLCreateCopyAppendingPathComponent(0, v13, @"modelInfo.plist", 0);
  sub_19E36F3C4(anURL, v6);
  if (v13) {
    CFRelease(v13);
  }
  if (!anURL[0])
  {
    unsigned __int8 v10 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3BD790](v10, "Could not construct");
    __cxa_throw(v10, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFStringRef v7 = CFURLCopyFileSystemPath(anURL[0], kCFURLPOSIXPathStyle);
  sub_19E372124(&v13, v7);
  if (!v13)
  {
    char v11 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3BD790](v11, "Could not construct");
    __cxa_throw(v11, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  sub_19E4143C4(a1, (const __CFString *)v13);
  if (v13) {
    CFRelease(v13);
  }
  if (anURL[0]) {
    CFRelease(anURL[0]);
  }
  if (url) {
    CFRelease(url);
  }
}

void sub_19E487FDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, const void *a16, const void *a17)
{
  __cxa_free_exception(v17);
  sub_19E3C6F1C(&a16);
  sub_19E410F68((const void **)&__p);
  sub_19E410F68(&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_19E488094(CFDictionaryRef theDict)
{
  sub_19E487DD4(__p, theDict);
  if (v8 >= 0) {
    uint64_t v1 = __p;
  }
  else {
    uint64_t v1 = (void **)__p[0];
  }
  uint64_t v2 = objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithContentsOfFile:", objc_msgSend(NSString, "stringWithUTF8String:", v1));
  unsigned int v3 = v2;
  if (v2
    && (char v4 = (void *)[v2 allKeys],
        objc_msgSend(v4, "containsObject:", objc_msgSend(NSString, "stringWithUTF8String:", "MaximumSequenceLength"))))
  {
    uint64_t v5 = (int)objc_msgSend((id)objc_msgSend(v3, "objectForKeyedSubscript:", objc_msgSend(NSString, "stringWithUTF8String:", "MaximumSequenceLength")), "intValue");
    if (v8 < 0) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v5 = 256;
    if (v8 < 0) {
LABEL_9:
    }
      operator delete(__p[0]);
  }
  return v5;
}

void sub_19E48817C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E4881A0(void *a1)
{
  if (a1)
  {
    sub_19E4881A0(*a1);
    sub_19E4881A0(a1[1]);
    uint64_t v2 = (void *)a1[5];
    if (v2)
    {
      a1[6] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

uint64_t sub_19E4881FC()
{
  uint64_t result = MGIsQuestionValid();
  if (result)
  {
    uint64_t result = MGGetSInt64Answer();
    byte_1E9459D98 = result > 31;
  }
  return result;
}

void *sub_19E488240(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v5[0] = 0;
  if (!qword_1E9459E88)
  {
    v5[1] = MEMORY[0x1E4F143A8];
    v5[2] = 3221225472;
    v5[3] = sub_19E4884C0;
    v5[4] = &unk_1E59A00A0;
    v5[5] = v5;
    long long v6 = xmmword_1E59A0088;
    uint64_t v7 = 0;
    qword_1E9459E88 = _sl_dlopen();
    unsigned int v3 = (void *)v5[0];
    uint64_t v2 = (void *)qword_1E9459E88;
    if (qword_1E9459E88)
    {
      if (!v5[0]) {
        goto LABEL_5;
      }
    }
    else
    {
      unsigned int v3 = (void *)abort_report_np();
    }
    free(v3);
    goto LABEL_5;
  }
  uint64_t v2 = (void *)qword_1E9459E88;
LABEL_5:
  uint64_t result = dlsym(v2, "kNLGazetteerCompressedModelURL");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + ++*(_DWORD *)(result + 24) = result;
  qword_1EC009480 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_19E488380(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v5[0] = 0;
  if (!qword_1E9459E88)
  {
    v5[1] = MEMORY[0x1E4F143A8];
    v5[2] = 3221225472;
    v5[3] = sub_19E4884C0;
    v5[4] = &unk_1E59A00A0;
    v5[5] = v5;
    long long v6 = xmmword_1E59A0088;
    uint64_t v7 = 0;
    qword_1E9459E88 = _sl_dlopen();
    unsigned int v3 = (void *)v5[0];
    uint64_t v2 = (void *)qword_1E9459E88;
    if (qword_1E9459E88)
    {
      if (!v5[0]) {
        goto LABEL_5;
      }
    }
    else
    {
      unsigned int v3 = (void *)abort_report_np();
    }
    free(v3);
    goto LABEL_5;
  }
  uint64_t v2 = (void *)qword_1E9459E88;
LABEL_5:
  uint64_t result = dlsym(v2, "NLGazetteerCreate");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + ++*(_DWORD *)(result + 24) = result;
  off_1E9459E90 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_19E4884C0()
{
  uint64_t result = _sl_dlopen();
  qword_1E9459E88 = result;
  return result;
}

uint64_t sub_19E488534(uint64_t *a1, const char *a2)
{
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (a2[23] < 0) {
    a2 = *(const char **)a2;
  }
  CFStringRef v4 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, 0x8000100u);
  CFStringRef v30 = v4;
  if (!v4) {
    return 0;
  }
  CFStringRef v5 = v4;
  CFStringRef MutableCopy = CFStringCreateMutableCopy(v3, 0, v4);
  uint64_t v7 = (__CFString *)MutableCopy;
  CFStringRef v29 = MutableCopy;
  if (!MutableCopy)
  {
    uint64_t v10 = 0;
LABEL_71:
    CFRelease(v5);
    return v10;
  }
  CFIndex Length = CFStringGetLength(MutableCopy);
  v39.location = 0;
  v39.length = Length;
  if (CFStringFindWithOptions(v7, @"'s", v39, 0xCuLL, 0))
  {
    CFIndex v9 = CFStringGetLength(@"'s");
LABEL_11:
    v38.length = v9;
    v38.location = Length - v9;
    CFStringDelete(v7, v38);
    int v11 = 1;
    goto LABEL_12;
  }
  CFIndex Length = CFStringGetLength(v7);
  v40.location = 0;
  v40.length = Length;
  if (CFStringFindWithOptions(v7, @"'", v40, 0xCuLL, 0))
  {
    CFIndex v9 = CFStringGetLength(@"'");
    goto LABEL_11;
  }
  int v11 = 0;
LABEL_12:
  CFStringTransform(v7, 0, (CFStringRef)*MEMORY[0x1E4F1D4F0], 0);
  v27.__r_.__value_.__s.__data_[0] = 0;
  char v28 = 0;
  uint64_t v12 = *a1;
  uint64_t v34 = 0;
  float v35 = &v34;
  uint64_t v36 = 0x2020000000;
  CFURLRef v13 = (uint64_t (*)(uint64_t, __CFString *))off_1E9459DB0;
  int v37 = off_1E9459DB0;
  if (!off_1E9459DB0)
  {
    v31.__r_.__value_.__r.__words[0] = MEMORY[0x1E4F143A8];
    v31.__r_.__value_.__l.__size_ = 3221225472;
    v31.__r_.__value_.__r.__words[2] = (std::string::size_type)sub_19E4889BC;
    float v32 = &unk_1E59A0068;
    float v33 = &v34;
    sub_19E4889BC((uint64_t)&v31);
    CFURLRef v13 = (uint64_t (*)(uint64_t, __CFString *))v35[3];
  }
  _Block_object_dispose(&v34, 8);
  if (v13)
  {
    CFStringRef v14 = (const __CFString *)v13(v12, v7);
    CFStringRef v15 = v14;
    if (!v14)
    {
      uint64_t v10 = 0;
LABEL_70:
      CFRelease(v7);
      goto LABEL_71;
    }
    sub_19E37774C(v14, &v31);
    std::string v27 = v31;
    char v28 = 1;
    if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v31.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v31.__r_.__value_.__l.__size_;
    }
    if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      float v17 = &v27;
    }
    else {
      float v17 = (std::string *)v31.__r_.__value_.__r.__words[0];
    }
    if (size >= 4) {
      size_t v18 = 4;
    }
    else {
      size_t v18 = size;
    }
    if (!memcmp(v17, "NAME", v18) && size == 4)
    {
      BOOL v19 = v11 == 0;
      unsigned int v20 = 1;
    }
    else
    {
      if (size >= 0xE) {
        size_t v21 = 14;
      }
      else {
        size_t v21 = size;
      }
      if (!memcmp(v17, "AMBIGIOUS_NAME", v21) && size == 14)
      {
        BOOL v19 = v11 == 0;
        unsigned int v20 = 3;
      }
      else
      {
        if (size >= 0xA) {
          size_t v22 = 10;
        }
        else {
          size_t v22 = size;
        }
        if (!memcmp(v17, "PLACE_NAME", v22) && size == 10)
        {
          BOOL v19 = v11 == 0;
          unsigned int v20 = 5;
        }
        else
        {
          if (size >= 0xD) {
            size_t v23 = 13;
          }
          else {
            size_t v23 = size;
          }
          if (!memcmp(v17, "RACE_SINGULAR", v23) && size == 13)
          {
            BOOL v19 = v11 == 0;
            unsigned int v20 = 7;
          }
          else if (!std::string::compare(&v27, "RACE_PLURAL"))
          {
            BOOL v19 = v11 == 0;
            unsigned int v20 = 9;
          }
          else if (!std::string::compare(&v27, "COLOR_RACE_SINGULAR"))
          {
            BOOL v19 = v11 == 0;
            unsigned int v20 = 11;
          }
          else if (!std::string::compare(&v27, "COLOR_RACE_PLURAL"))
          {
            BOOL v19 = v11 == 0;
            unsigned int v20 = 13;
          }
          else if (!std::string::compare(&v27, "RELIGION_NAME"))
          {
            BOOL v19 = v11 == 0;
            unsigned int v20 = 15;
          }
          else
          {
            if (std::string::compare(&v27, "RELIGION_PEOPLE_SINGULAR"))
            {
              int v24 = std::string::compare(&v27, "RELIGION_PEOPLE_PLURAL");
              if (v11) {
                unsigned int v25 = 20;
              }
              else {
                unsigned int v25 = 19;
              }
              if (v24) {
                uint64_t v10 = 0;
              }
              else {
                uint64_t v10 = v25;
              }
              goto LABEL_67;
            }
            BOOL v19 = v11 == 0;
            unsigned int v20 = 17;
          }
        }
      }
    }
    if (v19) {
      uint64_t v10 = v20;
    }
    else {
      uint64_t v10 = v20 + 1;
    }
LABEL_67:
    CFRelease(v15);
    if (v28)
    {
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v27.__r_.__value_.__l.__data_);
      }
    }
    goto LABEL_70;
  }
  dlerror();
  uint64_t result = abort_report_np();
  __break(1u);
  return result;
}

void sub_19E488964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v10 = va_arg(va1, const void *);
  _Block_object_dispose((const void *)(v8 - 80), 8);
  sub_19E422428((const void **)va);
  sub_19E3DCC24((const void **)va1);
  _Unwind_Resume(a1);
}

void *sub_19E4889BC(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v5[0] = 0;
  if (!qword_1E9459E88)
  {
    v5[1] = MEMORY[0x1E4F143A8];
    v5[2] = 3221225472;
    v5[3] = sub_19E4884C0;
    v5[4] = &unk_1E59A00A0;
    v5[5] = v5;
    long long v6 = xmmword_1E59A0088;
    uint64_t v7 = 0;
    qword_1E9459E88 = _sl_dlopen();
    CFAllocatorRef v3 = (void *)v5[0];
    uint64_t v2 = (void *)qword_1E9459E88;
    if (qword_1E9459E88)
    {
      if (!v5[0]) {
        goto LABEL_5;
      }
    }
    else
    {
      CFAllocatorRef v3 = (void *)abort_report_np();
    }
    free(v3);
    goto LABEL_5;
  }
  uint64_t v2 = (void *)qword_1E9459E88;
LABEL_5:
  uint64_t result = dlsym(v2, "NLGazetteerCopyLabel");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + ++*(_DWORD *)(result + 24) = result;
  off_1E9459DB0 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_19E488AFC(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  sub_19E452978(v13, a2);
  if (v13[0].__r_.__value_.__l.__size_ >= 0x10)
  {
    BOOL v3 = *(_DWORD *)sub_19E4C4A24(v13) == -1635387661;
    CFStringRef v4 = (void *)v13[0].__r_.__value_.__r.__words[0];
    if (!v13[0].__r_.__value_.__r.__words[0]) {
      goto LABEL_6;
    }
  }
  else
  {
    BOOL v3 = 0;
    CFStringRef v4 = (void *)v13[0].__r_.__value_.__r.__words[0];
    if (!v13[0].__r_.__value_.__r.__words[0])
    {
LABEL_6:
      if (v3) {
        operator new();
      }
      sub_19E452978(v13, a2);
      if (v13[0].__r_.__value_.__l.__size_ >= 0x30)
      {
        BOOL v5 = *(_DWORD *)sub_19E452BF0(v13) == 2142173355;
        long long v6 = (void *)v13[0].__r_.__value_.__r.__words[0];
        if (!v13[0].__r_.__value_.__r.__words[0]) {
          goto LABEL_13;
        }
      }
      else
      {
        BOOL v5 = 0;
        long long v6 = (void *)v13[0].__r_.__value_.__r.__words[0];
        if (!v13[0].__r_.__value_.__r.__words[0])
        {
LABEL_13:
          if (v5) {
            operator new();
          }
          sub_19E439BDC((uint64_t *)v13);
          if ((v13[1].__r_.__value_.__s.__data_[*(void *)(v13[0].__r_.__value_.__r.__words[0] - 24) + 8] & 5) == 0)
          {
            std::istream::read();
            if ((v13[1].__r_.__value_.__s.__data_[*(void *)(v13[0].__r_.__value_.__r.__words[0] - 24) + 8] & 5) != 0)
            {
              exception = __cxa_allocate_exception(0x10uLL);
              MEMORY[0x19F3BD790](exception, "Failed to read from input file stream");
              __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            std::istream::read();
            if ((v13[1].__r_.__value_.__s.__data_[*(void *)(v13[0].__r_.__value_.__r.__words[0] - 24) + 8] & 5) != 0)
            {
              CFIndex v9 = __cxa_allocate_exception(0x10uLL);
              MEMORY[0x19F3BD790](v9, "Failed to read from input file stream");
              __cxa_throw(v9, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            std::istream::read();
            if ((v13[1].__r_.__value_.__s.__data_[*(void *)(v13[0].__r_.__value_.__r.__words[0] - 24) + 8] & 5) != 0)
            {
              uint64_t v10 = __cxa_allocate_exception(0x10uLL);
              MEMORY[0x19F3BD790](v10, "Failed to read from input file stream");
              __cxa_throw(v10, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            std::istream::read();
            if ((v13[1].__r_.__value_.__s.__data_[*(void *)(v13[0].__r_.__value_.__r.__words[0] - 24) + 8] & 5) != 0)
            {
              int v11 = __cxa_allocate_exception(0x10uLL);
              MEMORY[0x19F3BD790](v11, "Failed to read from input file stream");
              __cxa_throw(v11, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            std::istream::read();
            if ((v13[1].__r_.__value_.__s.__data_[*(void *)(v13[0].__r_.__value_.__r.__words[0] - 24) + 8] & 5) != 0)
            {
              uint64_t v12 = __cxa_allocate_exception(0x10uLL);
              MEMORY[0x19F3BD790](v12, "Failed to read from input file stream");
              __cxa_throw(v12, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
          }
          v13[0].__r_.__value_.__r.__words[0] = *MEMORY[0x1E4FBA3F8];
          *(std::string::size_type *)((char *)v13[0].__r_.__value_.__r.__words
                                    + *(void *)(v13[0].__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x1E4FBA3F8] + 24);
          MEMORY[0x19F3BD8C0](&v13[0].__r_.__value_.__r.__words[2]);
          std::istream::~istream();
          MEMORY[0x19F3BDC30](&v14);
          uint64_t v7 = __cxa_allocate_exception(0x20uLL);
          std::operator+<char>();
          sub_19E48B618(v13, &buf, "'");
          sub_19E3F5604(v7, (long long *)v13);
          __cxa_throw(v7, (struct type_info *)&unk_1EF0B7540, (void (*)(void *))sub_19E3F56B0);
        }
      }
      munmap(v6, v13[0].__r_.__value_.__l.__size_);
      goto LABEL_13;
    }
  }
  munmap(v4, v13[0].__r_.__value_.__l.__size_);
  goto LABEL_6;
}

void sub_19E48AAB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, const void *a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  std::exception::~exception(v41);
  operator delete(v43);
  __cxa_free_exception(v41);
  a20 = (void *)*MEMORY[0x1E4FBA408];
  uint64_t v45 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void **)((char *)&a20 + *(a20 - 3)) = *(void **)(MEMORY[0x1E4FBA408] + 64);
  a22 = v45;
  a23 = MEMORY[0x1E4FBA470] + 16;
  if (a36 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x19F3BDC30](&a39);
  shared_weak_owners = (std::__shared_weak_count_vtbl *)v40[8].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    v40[9].__vftable = shared_weak_owners;
    operator delete(shared_weak_owners);
    unint64_t v47 = (std::__shared_weak_count_vtbl *)v40[7].__shared_weak_owners_;
    if (!v47)
    {
LABEL_5:
      uint64_t v48 = (std::__shared_weak_count_vtbl *)v40[6].__shared_weak_owners_;
      if (!v48) {
        goto LABEL_6;
      }
      goto LABEL_10;
    }
  }
  else
  {
    unint64_t v47 = (std::__shared_weak_count_vtbl *)v40[7].__shared_weak_owners_;
    if (!v47) {
      goto LABEL_5;
    }
  }
  v40[8].__vftable = v47;
  operator delete(v47);
  uint64_t v48 = (std::__shared_weak_count_vtbl *)v40[6].__shared_weak_owners_;
  if (!v48)
  {
LABEL_6:
    unint64_t v49 = *v42;
    if (!*v42)
    {
LABEL_12:
      v40[1].__shared_weak_owners_ = 0;
      std::__shared_weak_count::~__shared_weak_count(v40);
      operator delete(v50);
      if (a13) {
        CFRelease(a13);
      }
      MEMORY[0x19F3BDCF0](v39, 0xB1C404273B650);
      _Unwind_Resume(a1);
    }
LABEL_11:
    munmap(v49, v40[1].__shared_weak_owners_);
    goto LABEL_12;
  }
LABEL_10:
  v40[7].__vftable = v48;
  operator delete(v48);
  unint64_t v49 = *v42;
  if (!*v42) {
    goto LABEL_12;
  }
  goto LABEL_11;
}

__n128 sub_19E48B618(std::string *a1, std::string *a2, char *__s)
{
  std::string::size_type v6 = strlen(__s);
  uint64_t v7 = (__n128 *)std::string::append(a2, __s, v6);
  __n128 result = *v7;
  *a1 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

uint64_t sub_19E48B678()
{
  uint64_t result = _sl_dlopen();
  qword_1EC009288 = result;
  return result;
}

void *sub_19E48B6EC(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v5[0] = 0;
  if (!qword_1EC009288)
  {
    v5[1] = MEMORY[0x1E4F143A8];
    v5[2] = 0x40000000;
    v5[3] = sub_19E48B678;
    v5[4] = &unk_1E59A00D8;
    v5[5] = v5;
    long long v6 = xmmword_1E59A00C0;
    uint64_t v7 = 0;
    qword_1EC009288 = _sl_dlopen();
    BOOL v3 = (void *)v5[0];
    uint64_t v2 = (void *)qword_1EC009288;
    if (qword_1EC009288)
    {
      if (!v5[0]) {
        goto LABEL_5;
      }
    }
    else
    {
      BOOL v3 = (void *)abort_report_np();
    }
    free(v3);
    goto LABEL_5;
  }
  uint64_t v2 = (void *)qword_1EC009288;
LABEL_5:
  uint64_t result = dlsym(v2, "DDScannerCreate");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + ++*(_DWORD *)(result + 24) = result;
  off_1EC009280 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_19E48B82C()
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  qword_1EC009330 = 850045863;
  unk_1EC009338 = 0u;
  unk_1EC009348 = 0u;
  unk_1EC009358 = 0u;
  qword_1EC009368 = 0;
  if (qword_1EC009288) {
    goto LABEL_2;
  }
  uint64_t v2 = MEMORY[0x1E4F143A8];
  uint64_t v3 = 0x40000000;
  CFStringRef v4 = sub_19E48B678;
  BOOL v5 = &unk_1E59A00D8;
  long long v6 = 0;
  long long v7 = xmmword_1E59A00C0;
  uint64_t v8 = 0;
  qword_1EC009288 = _sl_dlopen();
  if (qword_1EC009288)
  {
LABEL_2:
    *(void *)&long long v7 = 0;
    *((void *)&v7 + 1) = &v7;
    uint64_t v8 = 0x2000000000;
    v0 = off_1EC009280;
    CFIndex v9 = off_1EC009280;
    if (!off_1EC009280)
    {
      uint64_t v2 = MEMORY[0x1E4F143A8];
      uint64_t v3 = 0x40000000;
      CFStringRef v4 = sub_19E48B6EC;
      BOOL v5 = &unk_1E59A0100;
      long long v6 = &v7;
      sub_19E48B6EC((uint64_t)&v2);
      v0 = *(void **)(*((void *)&v7 + 1) + 24);
    }
    _Block_object_dispose(&v7, 8);
    if (!v0)
    {
      dlerror();
      abort_report_np();
      __break(1u);
    }
    uint64_t result = ((uint64_t (*)(uint64_t, void, void))v0)(1, 0, 0);
  }
  else
  {
    uint64_t result = 0;
  }
  qword_1EC009370 = result;
  return result;
}

void sub_19E48B9F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  std::mutex::~mutex((std::mutex *)&qword_1EC009330);
  _Unwind_Resume(a1);
}

void *sub_19E48BA24(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v5[0] = 0;
  if (!qword_1EC009288)
  {
    v5[1] = MEMORY[0x1E4F143A8];
    v5[2] = 0x40000000;
    v5[3] = sub_19E48B678;
    v5[4] = &unk_1E59A00D8;
    v5[5] = v5;
    long long v6 = xmmword_1E59A00C0;
    uint64_t v7 = 0;
    qword_1EC009288 = _sl_dlopen();
    uint64_t v3 = (void *)v5[0];
    uint64_t v2 = (void *)qword_1EC009288;
    if (qword_1EC009288)
    {
      if (!v5[0]) {
        goto LABEL_5;
      }
    }
    else
    {
      uint64_t v3 = (void *)abort_report_np();
    }
    free(v3);
    goto LABEL_5;
  }
  uint64_t v2 = (void *)qword_1EC009288;
LABEL_5:
  uint64_t result = dlsym(v2, "DDScannerScanStringWithRange");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + ++*(_DWORD *)(result + 24) = result;
  off_1EC009298 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_19E48BB64(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v5[0] = 0;
  if (!qword_1EC009288)
  {
    v5[1] = MEMORY[0x1E4F143A8];
    v5[2] = 0x40000000;
    v5[3] = sub_19E48B678;
    v5[4] = &unk_1E59A00D8;
    v5[5] = v5;
    long long v6 = xmmword_1E59A00C0;
    uint64_t v7 = 0;
    qword_1EC009288 = _sl_dlopen();
    uint64_t v3 = (void *)v5[0];
    uint64_t v2 = (void *)qword_1EC009288;
    if (qword_1EC009288)
    {
      if (!v5[0]) {
        goto LABEL_5;
      }
    }
    else
    {
      uint64_t v3 = (void *)abort_report_np();
    }
    free(v3);
    goto LABEL_5;
  }
  uint64_t v2 = (void *)qword_1EC009288;
LABEL_5:
  uint64_t result = dlsym(v2, "DDScannerCopyResultsWithOptions");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + ++*(_DWORD *)(result + 24) = result;
  off_1EC0092A8 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_19E48BCA4(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v5[0] = 0;
  if (!qword_1EC009288)
  {
    v5[1] = MEMORY[0x1E4F143A8];
    v5[2] = 0x40000000;
    v5[3] = sub_19E48B678;
    v5[4] = &unk_1E59A00D8;
    v5[5] = v5;
    long long v6 = xmmword_1E59A00C0;
    uint64_t v7 = 0;
    qword_1EC009288 = _sl_dlopen();
    uint64_t v3 = (void *)v5[0];
    uint64_t v2 = (void *)qword_1EC009288;
    if (qword_1EC009288)
    {
      if (!v5[0]) {
        goto LABEL_5;
      }
    }
    else
    {
      uint64_t v3 = (void *)abort_report_np();
    }
    free(v3);
    goto LABEL_5;
  }
  uint64_t v2 = (void *)qword_1EC009288;
LABEL_5:
  uint64_t result = dlsym(v2, "DDResultGetRangeForURLification");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + ++*(_DWORD *)(result + 24) = result;
  off_1EC0092A0 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_19E48BDE4(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v5[0] = 0;
  if (!qword_1EC009288)
  {
    v5[1] = MEMORY[0x1E4F143A8];
    v5[2] = 0x40000000;
    v5[3] = sub_19E48B678;
    v5[4] = &unk_1E59A00D8;
    v5[5] = v5;
    long long v6 = xmmword_1E59A00C0;
    uint64_t v7 = 0;
    qword_1EC009288 = _sl_dlopen();
    uint64_t v3 = (void *)v5[0];
    uint64_t v2 = (void *)qword_1EC009288;
    if (qword_1EC009288)
    {
      if (!v5[0]) {
        goto LABEL_5;
      }
    }
    else
    {
      uint64_t v3 = (void *)abort_report_np();
    }
    free(v3);
    goto LABEL_5;
  }
  uint64_t v2 = (void *)qword_1EC009288;
LABEL_5:
  uint64_t result = dlsym(v2, "DDResultGetCategory");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + ++*(_DWORD *)(result + 24) = result;
  off_1EC009290 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_19E48BF24(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v5[0] = 0;
  if (!qword_1EC009288)
  {
    v5[1] = MEMORY[0x1E4F143A8];
    v5[2] = 0x40000000;
    v5[3] = sub_19E48B678;
    v5[4] = &unk_1E59A00D8;
    v5[5] = v5;
    long long v6 = xmmword_1E59A00C0;
    uint64_t v7 = 0;
    qword_1EC009288 = _sl_dlopen();
    uint64_t v3 = (void *)v5[0];
    uint64_t v2 = (void *)qword_1EC009288;
    if (qword_1EC009288)
    {
      if (!v5[0]) {
        goto LABEL_5;
      }
    }
    else
    {
      uint64_t v3 = (void *)abort_report_np();
    }
    free(v3);
    goto LABEL_5;
  }
  uint64_t v2 = (void *)qword_1EC009288;
LABEL_5:
  uint64_t result = dlsym(v2, "DDScannerReset");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + ++*(_DWORD *)(result + 24) = result;
  off_1EC009278 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_19E48C064(void *result)
{
  result[3] = 0;
  result[4] = 0;
  result[2] = &unk_1EF0B83D0;
  return result;
}

uint64_t sub_19E48C08C()
{
  return 0;
}

uint64_t sub_19E48C094()
{
  return 0;
}

uint64_t sub_19E48C09C()
{
  return 0;
}

uint64_t sub_19E48C0A4()
{
  return 0;
}

uint64_t sub_19E48C0AC()
{
  return 0;
}

void sub_19E48C0B4(void *a1)
{
  *a1 = &unk_1EF0B83D0;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x19F3BDCF0);
}

void *sub_19E48C15C(void *a1)
{
  *a1 = &unk_1EF0B83D0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

uint64_t sub_19E48C1E4(uint64_t result)
{
  *(void *)(result + 16) = &unk_1EF0B85C0;
  return result;
}

void sub_19E48C208(void *a1)
{
  *a1 = &unk_1EF0B85C0;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  JUMPOUT(0x19F3BDCF0);
}

void *sub_19E48C294(void *a1)
{
  *a1 = &unk_1EF0B85C0;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_19E48C300(void *a1)
{
  *a1 = &unk_1EF0B8540;
  uint64_t v1 = a1[1];
  if (v1)
  {
    uint64_t v2 = sub_19E3709A0(v1);
    MEMORY[0x19F3BDCF0](v2, 0x10F0C4069D522A4);
  }
  JUMPOUT(0x19F3BDCF0);
}

uint64_t sub_19E48C380(uint64_t result)
{
  *(void *)(result + 16) = &unk_1EF0B8388;
  return result;
}

void sub_19E48C3A4(void *a1)
{
  *a1 = &unk_1EF0B8388;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  JUMPOUT(0x19F3BDCF0);
}

void *sub_19E48C430(void *a1)
{
  *a1 = &unk_1EF0B8388;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t sub_19E48C49C(uint64_t result)
{
  *(void *)(result + 16) = &unk_1EF0B84F8;
  return result;
}

void sub_19E48C4C0(void *a1)
{
  *a1 = &unk_1EF0B84F8;
  uint64_t v1 = a1[1];
  if (v1)
  {
    uint64_t v2 = sub_19E48C540(v1);
    MEMORY[0x19F3BDCF0](v2, 0x1032C40D853B9C0);
  }
  JUMPOUT(0x19F3BDCF0);
}

uint64_t sub_19E48C540(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 80);
    CFStringRef v4 = *(void **)(a1 + 72);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 9) < 0) {
          operator delete(*(void **)(v3 - 32));
        }
        v3 -= 32;
      }
      while (v3 != v2);
      CFStringRef v4 = *(void **)(a1 + 72);
    }
    *(void *)(a1 + 80) = v2;
    operator delete(v4);
  }
  uint64_t v5 = *(void *)(a1 + 48);
  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 56);
    uint64_t v7 = *(void **)(a1 + 48);
    if (v6 != v5)
    {
      do
      {
        if (*(char *)(v6 - 1) < 0) {
          operator delete(*(void **)(v6 - 24));
        }
        v6 -= 24;
      }
      while (v6 != v5);
      uint64_t v7 = *(void **)(a1 + 48);
    }
    *(void *)(a1 + 56) = v5;
    operator delete(v7);
  }
  if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
      return a1;
    }
LABEL_21:
    operator delete(*(void **)a1);
    return a1;
  }
  if (*(char *)(a1 + 23) < 0) {
    goto LABEL_21;
  }
  return a1;
}

void *sub_19E48C628(void *a1)
{
  *a1 = &unk_1EF0B84F8;
  uint64_t v2 = a1[1];
  if (v2)
  {
    uint64_t v3 = sub_19E48C540(v2);
    MEMORY[0x19F3BDCF0](v3, 0x1032C40D853B9C0);
  }
  return a1;
}

uint64_t sub_19E48C688(uint64_t result)
{
  *(void *)(result + 16) = &unk_1EF0B8608;
  return result;
}

void sub_19E48C6AC(void *a1)
{
  *a1 = &unk_1EF0B8608;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  JUMPOUT(0x19F3BDCF0);
}

void *sub_19E48C738(void *a1)
{
  *a1 = &unk_1EF0B8608;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t sub_19E48C7A4(uint64_t a1)
{
  CFAllocatorGetDefault();
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EC0093A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EC0093A8))
  {
    qword_1EC305050 = 0;
    unk_1EC305060 = 0u;
    unk_1EC305070 = 0u;
    qword_1EC0093B0 = _CFRuntimeRegisterClass();
    __cxa_guard_release(&qword_1EC0093A8);
  }
  uint64_t result = _CFRuntimeCreateInstance();
  *(void *)(result + ++*(_DWORD *)(result + 24) = a1;
  return result;
}

void sub_19E48C858(_Unwind_Exception *a1)
{
}

uint64_t sub_19E48C870(uint64_t a1)
{
  CFAllocatorGetDefault();
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EC0093F0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EC0093F0))
  {
    qword_1EC304FF0 = 0;
    unk_1EC305000 = 0u;
    unk_1EC305010 = 0u;
    qword_1EC009400 = _CFRuntimeRegisterClass();
    __cxa_guard_release(&qword_1EC0093F0);
  }
  uint64_t result = _CFRuntimeCreateInstance();
  *(void *)(result + ++*(_DWORD *)(result + 24) = a1;
  return result;
}

void sub_19E48C924(_Unwind_Exception *a1)
{
}

void sub_19E48C93C(uint64_t a1, int a2, double a3)
{
  int v3 = (int)((a3 - *(double *)(a1 + 256)) * 0.0000115740741);
  if (a2)
  {
    if (v3 <= 1) {
      int v3 = 1;
    }
  }
  else if (v3 < 1)
  {
    return;
  }
  CFStringRef v4 = *(void **)(a1 + 152);
  if (v4 != (void *)(a1 + 160))
  {
    do
    {
      uint64_t v5 = (void *)v4[7];
      int v6 = v3;
      if (v5 != v4 + 8)
      {
        do
        {
          uint64_t v10 = v5;
          do
          {
            *((_DWORD *)v10 + 14) = (int)((double)*((int *)v10 + 14) * 0.95);
            int v11 = (void *)v10[1];
            if (v11)
            {
              do
              {
                uint64_t v12 = v11;
                int v11 = (void *)*v11;
              }
              while (v11);
            }
            else
            {
              do
              {
                uint64_t v12 = (void *)v10[2];
                BOOL v13 = *v12 == (void)v10;
                uint64_t v10 = v12;
              }
              while (!v13);
            }
            uint64_t v10 = v12;
          }
          while (v12 != v4 + 8);
          BOOL v9 = __OFSUB__(v6--, 1);
        }
        while (!((v6 < 0) ^ v9 | (v6 == 0)));
      }
      uint64_t v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (void *)v4[2];
          BOOL v13 = *v8 == (void)v4;
          CFStringRef v4 = v8;
        }
        while (!v13);
      }
      CFStringRef v4 = v8;
    }
    while (v8 != (void *)(a1 + 160));
  }
  *(CFAbsoluteTime *)(a1 + 256) = CFAbsoluteTimeGetCurrent();
}

void sub_19E48CA64(uint64_t a1)
{
}

double sub_19E48CA6C(uint64_t a1, const __CFString *a2)
{
  if (!a2) {
    return 0.0;
  }
  int v3 = __p;
  sub_19E37774C(a2, __p);
  int v6 = *(double **)(a1 + 208);
  CFStringRef v4 = (double *)(a1 + 208);
  uint64_t v5 = v6;
  unsigned __int8 v7 = v23;
  double v8 = 0.0;
  if (!v6) {
    goto LABEL_35;
  }
  if ((v23 & 0x80u) == 0)
  {
    size_t v9 = v23;
  }
  else
  {
    int v3 = (void **)__p[0];
    size_t v9 = (size_t)__p[1];
  }
  uint64_t v10 = v4;
  do
  {
    while (1)
    {
      int v11 = *((char *)v5 + 55);
      uint64_t v12 = v11 >= 0 ? (uint64_t *)(v5 + 4) : (uint64_t *)*((void *)v5 + 4);
      size_t v13 = v11 >= 0 ? *((unsigned __int8 *)v5 + 55) : *((void *)v5 + 5);
      size_t v14 = v9 >= v13 ? v13 : v9;
      int v15 = memcmp(v12, v3, v14);
      if (v15) {
        break;
      }
      if (v13 >= v9) {
        goto LABEL_21;
      }
LABEL_7:
      uint64_t v5 = (double *)*((void *)v5 + 1);
      if (!v5) {
        goto LABEL_22;
      }
    }
    if (v15 < 0) {
      goto LABEL_7;
    }
LABEL_21:
    uint64_t v10 = v5;
    uint64_t v5 = *(double **)v5;
  }
  while (v5);
LABEL_22:
  if (v10 != v4)
  {
    int v16 = *((char *)v10 + 55);
    if (v16 >= 0) {
      float v17 = v10 + 4;
    }
    else {
      float v17 = (const void *)*((void *)v10 + 4);
    }
    if (v16 >= 0) {
      size_t v18 = *((unsigned __int8 *)v10 + 55);
    }
    else {
      size_t v18 = *((void *)v10 + 5);
    }
    if (v18 >= v9) {
      size_t v19 = v9;
    }
    else {
      size_t v19 = v18;
    }
    int v20 = memcmp(v3, v17, v19);
    if (v20)
    {
      if ((v20 & 0x80000000) == 0) {
        goto LABEL_34;
      }
    }
    else if (v9 >= v18)
    {
LABEL_34:
      double v8 = v10[7];
    }
  }
LABEL_35:
  if ((v7 & 0x80) != 0) {
    operator delete(__p[0]);
  }
  return v8;
}

uint64_t sub_19E48CBB8(uint64_t result)
{
  if (*(unsigned char *)(result + 248))
  {
    double v8 = (sqlite3 **)(result + 56);
    int v7 = sub_19E3F79C4((sqlite3 **)(result + 56), "BEGIN IMMEDIATE");
    if ((v7 == 0) != (v7 != 5))
    {
      if (qword_1EC009490 != -1) {
        dispatch_once(&qword_1EC009490, &unk_1EF0BEE38);
      }
      sub_19E4E4498((int *)qword_1EC009488, v1, "Could not begin transaction, error %d", v2, v3, v4, v5, v6, v7);
    }
    sub_19E3F79C4(v8, "DELETE FROM RecipientByLangMatrix");
    sub_19E3F79C4(v8, "DELETE FROM EmojiByApp");
    sub_19E3F79C4(v8, "DELETE FROM OfflineAdaptationTimeByApp");
    operator new();
  }
  return result;
}

void sub_19E48D2C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  if (a2 != 1) {
    _Unwind_Resume(exception_object);
  }
  CFStringRef v29 = __cxa_begin_catch(exception_object);
  if (qword_1EC009490 != -1) {
    dispatch_once(&qword_1EC009490, &unk_1EF0BEE38);
  }
  CFStringRef v30 = (int *)qword_1EC009488;
  char v31 = (*(uint64_t (**)(void *))(*(void *)v29 + 16))(v29);
  sub_19E4E4498(v30, v32, "Serialization of languagelikelihood.dat model failed due to busy signal: %s", v33, v34, v35, v36, v37, v31);
  __cxa_end_catch();
}

void sub_19E48D5BC(uint64_t a1, const __CFString *a2, uint64_t a3)
{
  uint64_t v4 = a1 + 56;
  if (a2)
  {
    sub_19E37774C(a2, __p);
    sub_19E3F7DC0(v4, (const void **)__p, a3);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    char v6 = 0;
    LOBYTE(__p[0]) = 0;
    sub_19E3F7DC0(a1 + 56, (const void **)__p, a3);
  }
}

void sub_19E48D634(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E48D650(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  uint64_t v157 = *MEMORY[0x1E4F143B8];
  if (!a2 && a3) {
    return 0;
  }
  if (!a2)
  {
    v135[1] = 0;
    v136 = 0;
    v135[0] = &v135[1];
    *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
    __p.__r_.__value_.__s.__data_[0] = 0;
    sub_19E3F7DC0(a1 + 56, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)v135);
    sub_19E3CD3E0((char *)v135[1]);
  }
  LOBYTE(v131) = 0;
  __n128 v5 = 0uLL;
  memset(v132, 0, 49);
  v128 = 0;
  v129 = 0;
  unint64_t v130 = 0;
  uint64_t v127 = v4;
  if (a3 < 1)
  {
    uint64_t v39 = 0;
    uint64_t v38 = 0;
  }
  else
  {
    uint64_t v6 = 0;
    do
    {
      int v7 = *(long long **)(*(void *)(v4 + 8 * v6) + 24);
      if (*((char *)v7 + 23) < 0)
      {
        sub_19E39369C(&__p, *(void **)v7, *((void *)v7 + 1));
      }
      else
      {
        long long v8 = *v7;
        __p.__r_.__value_.__r.__words[2] = *((void *)v7 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v8;
      }
      size_t v9 = v129;
      if ((unint64_t)v129 >= v130)
      {
        v129 = sub_19E3EB1B8(&v128, (uint64_t)&__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        long long v10 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *((void *)v129 + 2) = *((void *)&__p.__r_.__value_.__l + 2);
        _OWORD *v9 = v10;
        v129 = (char *)v9 + 24;
      }
      uint64_t v11 = *(void *)(*(void *)(v4 + 8 * v6) + 24);
      if (*(char *)(v11 + 47) < 0) {
        sub_19E39369C(&__p, *(void **)(v11 + 24), *(void *)(v11 + 32));
      }
      else {
        std::string __p = *(std::string *)(v11 + 24);
      }
      v151 = 0;
      v152 = 0;
      uint64_t v153 = 0;
      sub_19E3938C0((char *)&v151, *(long long **)(v11 + 48), *(long long **)(v11 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v11 + 56) - *(void *)(v11 + 48)) >> 3));
      v154 = 0;
      v155 = 0;
      v156 = 0;
      uint64_t v12 = *(void *)(v11 + 72);
      uint64_t v13 = *(void *)(v11 + 80);
      v135[0] = &v154;
      LOBYTE(v135[1]) = 0;
      uint64_t v14 = v13 - v12;
      if (v13 == v12)
      {
        size_t v19 = 0;
      }
      else
      {
        if (v14 < 0) {
          sub_19E37C7C4();
        }
        int v15 = (char *)operator new(v13 - v12);
        uint64_t v16 = 0;
        v154 = v15;
        v155 = v15;
        v156 = &v15[32 * (v14 >> 5)];
        do
        {
          float v17 = (__n128 *)&v15[v16];
          uint64_t v18 = v12 + v16;
          if (*(char *)(v12 + v16 + 23) < 0)
          {
            sub_19E39369C(&v15[v16], *(void **)v18, *(void *)(v18 + 8));
          }
          else
          {
            __n128 v5 = *(__n128 *)v18;
            v17[1].n128_u64[0] = *(void *)(v18 + 16);
            __n128 *v17 = v5;
          }
          v5.n128_u64[0] = *(void *)(v12 + v16 + 24);
          *(void *)&v15[v16 + 24] = v5.n128_u64[0];
          v16 += 32;
        }
        while (v12 + v16 != v13);
        size_t v19 = &v15[v16];
        v155 = v19;
      }
      int v20 = (std::string *)v151;
      if (v151 != v152)
      {
        size_t v21 = *(char **)&v132[9];
        do
        {
          if ((unint64_t)v21 < *(void *)&v132[17])
          {
            if (SHIBYTE(v20->__r_.__value_.__r.__words[2]) < 0)
            {
              sub_19E39369C(v21, v20->__r_.__value_.__l.__data_, v20->__r_.__value_.__l.__size_);
            }
            else
            {
              __n128 v5 = *(__n128 *)&v20->__r_.__value_.__l.__data_;
              *((void *)v21 + 2) = *((void *)&v20->__r_.__value_.__l + 2);
              *(__n128 *)size_t v21 = v5;
            }
            v21 += 24;
          }
          else
          {
            size_t v21 = sub_19E3FC244((char **)&v132[1], (uint64_t)v20);
          }
          *(void *)&v132[9] = v21;
          ++v20;
        }
        while (v20 != v152);
        size_t v19 = v155;
      }
      size_t v22 = v19;
      if (v154 != v19)
      {
        unsigned __int8 v23 = *(char **)&v132[33];
        size_t v19 = v154;
        do
        {
          if ((unint64_t)v23 < *(void *)&v132[41])
          {
            if (v19[23] < 0)
            {
              sub_19E39369C(v23, *(void **)v19, *((void *)v19 + 1));
            }
            else
            {
              __n128 v5 = *(__n128 *)v19;
              *((void *)v23 + 2) = *((void *)v19 + 2);
              *(__n128 *)unsigned __int8 v23 = v5;
            }
            v5.n128_u64[0] = *((void *)v19 + 3);
            *((void *)v23 + 3) = v5.n128_u64[0];
            v23 += 32;
          }
          else
          {
            int v24 = *(char **)&v132[25];
            uint64_t v25 = (uint64_t)&v23[-*(void *)&v132[25]] >> 5;
            unint64_t v26 = v25 + 1;
            if ((unint64_t)(v25 + 1) >> 59) {
              sub_19E37C7C4();
            }
            uint64_t v27 = *(void *)&v132[41] - *(void *)&v132[25];
            if ((uint64_t)(*(void *)&v132[41] - *(void *)&v132[25]) >> 4 > v26) {
              unint64_t v26 = v27 >> 4;
            }
            if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFE0) {
              unint64_t v28 = 0x7FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v28 = v26;
            }
            v138 = &v132[41];
            if (v28)
            {
              if (v28 >> 59) {
                sub_19E37C2B8();
              }
              CFStringRef v29 = (char *)operator new(32 * v28);
            }
            else
            {
              CFStringRef v29 = 0;
            }
            CFStringRef v30 = (__n128 *)&v29[32 * v25];
            v135[0] = v29;
            v135[1] = v30;
            v136 = v30;
            uint64_t v137 = (uint64_t)&v29[32 * v28];
            if (v19[23] < 0)
            {
              sub_19E39369C(v30, *(void **)v19, *((void *)v19 + 1));
              int v24 = *(char **)&v132[25];
              unsigned __int8 v23 = *(char **)&v132[33];
              CFStringRef v30 = (__n128 *)v135[1];
              char v31 = v136;
            }
            else
            {
              __n128 v5 = *(__n128 *)v19;
              v30[1].n128_u64[0] = *((void *)v19 + 2);
              __n128 *v30 = v5;
              char v31 = (__n128 *)&v29[32 * v25];
            }
            v5.n128_u64[0] = *((void *)v19 + 3);
            *(void *)&v29[32 * v25 + 24] = v5.n128_u64[0];
            if (v23 == v24)
            {
              uint64_t v32 = v24;
            }
            else
            {
              do
              {
                __n128 v5 = *((__n128 *)v23 - 2);
                v30[-1].n128_u64[0] = *((void *)v23 - 2);
                v30[-2] = v5;
                *((void *)v23 - 3) = 0;
                *((void *)v23 - 2) = 0;
                *((void *)v23 - 4) = 0;
                v5.n128_u64[0] = *((void *)v23 - 1);
                v30[-1].n128_u64[1] = v5.n128_u64[0];
                v30 -= 2;
                v23 -= 32;
              }
              while (v23 != v24);
              uint64_t v32 = *(char **)&v132[25];
              int v24 = *(char **)&v132[33];
            }
            unsigned __int8 v23 = (char *)&v31[2];
            *(void *)&v132[25] = v30;
            *(void *)&v132[33] = v31 + 2;
            uint64_t v33 = *(void *)&v132[41];
            *(void *)&v132[41] = v137;
            uint64_t v137 = v33;
            v135[0] = v32;
            v135[1] = v32;
            if (v24 != v32)
            {
              uint64_t v34 = (__n128 *)(v24 - 32);
              do
              {
                v136 = v34;
                if (v34[1].n128_i8[7] < 0) {
                  operator delete((void *)v34->n128_u64[0]);
                }
                v34 -= 2;
              }
              while (&v34[2] != (__n128 *)v32);
              int v24 = v32;
            }
            if (v24) {
              operator delete(v24);
            }
          }
          *(void *)&v132[33] = v23;
          v19 += 32;
        }
        while (v19 != v155);
        size_t v22 = v154;
      }
      if (v22)
      {
        if (v19 != v22)
        {
          do
          {
            if (*(v19 - 9) < 0) {
              operator delete(*((void **)v19 - 4));
            }
            v19 -= 32;
          }
          while (v19 != v22);
          size_t v19 = v154;
        }
        v155 = v22;
        operator delete(v19);
      }
      uint64_t v35 = (std::string *)v151;
      if (v151)
      {
        uint64_t v36 = v152;
        uint64_t v37 = v151;
        if (v152 != v151)
        {
          do
          {
            if (SHIBYTE(v36[-1].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v36[-1].__r_.__value_.__l.__data_);
            }
            --v36;
          }
          while (v36 != v35);
          uint64_t v37 = v151;
        }
        v152 = v35;
        operator delete(v37);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      ++v6;
      uint64_t v4 = v127;
    }
    while (v6 != a3);
    uint64_t v38 = (const void **)v128;
    uint64_t v39 = (const void **)v129;
  }
  unint64_t v40 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (v39 - v38));
  if (v39 == v38) {
    uint64_t v41 = 0;
  }
  else {
    uint64_t v41 = v40;
  }
  sub_19E49018C((unint64_t)v38, v39, v41, 1, v5);
  sub_19E393108((uint64_t)v135);
  if (v129 != v128)
  {
    int v42 = *((char *)v128 + 23);
    unint64_t v43 = v42 >= 0 ? v128 : *(void **)v128;
    uint64_t v44 = v42 >= 0 ? *((unsigned __int8 *)v128 + 23) : *((void *)v128 + 1);
    sub_19E37CA70(&v136, (uint64_t)v43, v44);
    if (0xAAAAAAAAAAAAAAABLL * ((v129 - (unsigned char *)v128) >> 3) >= 2)
    {
      uint64_t v45 = 0;
      unint64_t v46 = 1;
      do
      {
        sub_19E37CA70(&v136, (uint64_t)"-", 1);
        int v47 = *((char *)v128 + v45 + 47);
        if (v47 >= 0) {
          uint64_t v48 = (char *)v128 + v45 + 24;
        }
        else {
          uint64_t v48 = *(char **)((char *)v128 + v45 + 24);
        }
        if (v47 >= 0) {
          uint64_t v49 = *((unsigned __int8 *)v128 + v45 + 47);
        }
        else {
          uint64_t v49 = *(void *)((char *)v128 + v45 + 32);
        }
        sub_19E37CA70(&v136, (uint64_t)v48, v49);
        ++v46;
        v45 += 24;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((v129 - (unsigned char *)v128) >> 3) > v46);
    }
  }
  if ((v146 & 0x10) != 0)
  {
    unint64_t v52 = v145;
    if (v145 < v142)
    {
      unint64_t v145 = v142;
      unint64_t v52 = v142;
    }
    v53 = (const void **)&v141;
  }
  else
  {
    if ((v146 & 8) == 0)
    {
      std::string::size_type v50 = 0;
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 0;
      p_dst = &__dst;
      goto LABEL_125;
    }
    v53 = (const void **)v139;
    unint64_t v52 = v140;
  }
  v54 = *v53;
  std::string::size_type v50 = v52 - (void)*v53;
  if (v50 > 0x7FFFFFFFFFFFFFF7) {
    sub_19E37C958();
  }
  if (v50 >= 0x17)
  {
    uint64_t v55 = (v50 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v50 | 7) != 0x17) {
      uint64_t v55 = v50 | 7;
    }
    uint64_t v56 = v55 + 1;
    p_dst = (std::string *)operator new(v55 + 1);
    __dst.__r_.__value_.__r.__words[2] = v56 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    __dst.__r_.__value_.__l.__size_ = v50;
    goto LABEL_124;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v52 - *(unsigned char *)v53;
  p_dst = &__dst;
  if (v50) {
LABEL_124:
  }
    memmove(p_dst, v54, v50);
LABEL_125:
  p_dst->__r_.__value_.__s.__data_[v50] = 0;
  uint64_t v57 = std::string::insert(&__dst, 0, "Multilingual-", 0xDuLL);
  long long v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v57->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v58;
  v57->__r_.__value_.__l.__size_ = 0;
  v57->__r_.__value_.__r.__words[2] = 0;
  v57->__r_.__value_.__r.__words[0] = 0;
  char v59 = std::string::append(&__p, ".model", 6uLL);
  std::string v134 = *v59;
  v59->__r_.__value_.__l.__size_ = 0;
  v59->__r_.__value_.__r.__words[2] = 0;
  v59->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_127;
    }
LABEL_192:
    operator delete(__dst.__r_.__value_.__l.__data_);
    goto LABEL_127;
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_192;
  }
LABEL_127:
  int v60 = (const char *)v128;
  if (*((char *)v128 + 23) < 0) {
    int v60 = *(const char **)v128;
  }
  CFStringRef v61 = CFStringCreateWithCString(0, v60, 0x8000100u);
  CFLocaleRef v62 = CFLocaleCreate(0, v61);
  uint64_t v63 = *MEMORY[0x1E4F724F8];
  __dst.__r_.__value_.__r.__words[0] = 0;
  __dst.__r_.__value_.__l.__size_ = (std::string::size_type)&__dst;
  __dst.__r_.__value_.__r.__words[2] = 0x2000000000;
  CFMutableArrayRef Mutable = 0;
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  __p.__r_.__value_.__r.__words[0] = MEMORY[0x1E4F143A8];
  __p.__r_.__value_.__l.__size_ = 0x40000000;
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)sub_19E377330;
  v151 = &unk_1E599F320;
  uint64_t v153 = v63;
  v152 = &__dst;
  CFLocaleRef cf = v62;
  LDEnumerateAssetDataItems();
  v64 = *(const void **)(__dst.__r_.__value_.__l.__size_ + 24);
  _Block_object_dispose(&__dst, 8);
  CFStringRef PathComponent = 0;
  CFIndex v66 = 0;
  CFTypeRef v133 = v64;
  memset(&v132[49], 0, 24);
  if ((v134.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v134.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v134.__r_.__value_.__l.__size_;
  }
  if ((v134.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v68 = &v134;
  }
  else {
    v68 = (std::string *)v134.__r_.__value_.__r.__words[0];
  }
  while (1)
  {
    uint64_t v69 = a1;
    if (v66 >= CFArrayGetCount((CFArrayRef)v64)) {
      break;
    }
    CFURLRef ValueAtIndex = (const __CFURL *)CFArrayGetValueAtIndex((CFArrayRef)v64, v66);
    CFStringRef PathComponent = CFURLCopyLastPathComponent(ValueAtIndex);
    sub_19E37774C(PathComponent, &__p);
    int v71 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    v72 = (void *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v73 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v73 = __p.__r_.__value_.__l.__size_;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if (v73 >= size) {
      size_t v75 = size;
    }
    else {
      size_t v75 = v73;
    }
    BOOL v76 = memcmp(v68, p_p, v75) == 0;
    BOOL v77 = v73 == size && v76;
    if (v71 < 0) {
      operator delete(v72);
    }
    ++v66;
    if (v77)
    {
      CFStringRef v78 = CFURLCopyPath(ValueAtIndex);
      sub_19E37774C(v78, &__p);
      *(std::string *)&v132[49] = __p;
      uint64_t v69 = a1;
      break;
    }
  }
  CFRelease(cf);
  CFRelease(PathComponent);
  uint64_t v85 = v132[72];
  if (v132[72] < 0) {
    uint64_t v85 = *(void *)&v132[57];
  }
  if (!v85)
  {
    if (qword_1EC009490 != -1) {
      dispatch_once(&qword_1EC009490, &unk_1EF0BEE38);
    }
    v103 = (int *)qword_1EC009488;
    if ((v146 & 0x10) != 0)
    {
      unint64_t v106 = v145;
      if (v145 < v142)
      {
        unint64_t v145 = v142;
        unint64_t v106 = v142;
      }
      v107 = (const void **)&v141;
    }
    else
    {
      if ((v146 & 8) == 0)
      {
        std::string::size_type v104 = 0;
        *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
        v105 = &__p;
        goto LABEL_210;
      }
      v107 = (const void **)v139;
      unint64_t v106 = v140;
    }
    v108 = *v107;
    std::string::size_type v104 = v106 - (void)*v107;
    if (v104 > 0x7FFFFFFFFFFFFFF7) {
      sub_19E37C958();
    }
    if (v104 >= 0x17)
    {
      uint64_t v109 = (v104 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v104 | 7) != 0x17) {
        uint64_t v109 = v104 | 7;
      }
      uint64_t v110 = v109 + 1;
      v105 = (std::string *)operator new(v109 + 1);
      __p.__r_.__value_.__r.__words[2] = v110 | 0x8000000000000000;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v105;
      __p.__r_.__value_.__l.__size_ = v104;
    }
    else
    {
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = v106 - *(unsigned char *)v107;
      v105 = &__p;
      if (!v104) {
        goto LABEL_210;
      }
    }
    memmove(v105, v108, v104);
LABEL_210:
    v105->__r_.__value_.__s.__data_[v104] = 0;
    v111 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      LOBYTE(v111) = __p.__r_.__value_.__s.__data_[0];
    }
    sub_19E4E4498(v103, v79, "Could not find Multilingual Classifier for language: %s", v80, v81, v82, v83, v84, (char)v111);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    goto LABEL_216;
  }
  v86 = *(uint64_t **)(v69 + 16);
  v124 = (uint64_t *)(v69 + 16);
  if (!v86) {
    goto LABEL_215;
  }
  if ((v134.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v87 = &v134;
  }
  else {
    v87 = (std::string *)v134.__r_.__value_.__r.__words[0];
  }
  if ((v134.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v88 = HIBYTE(v134.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v88 = v134.__r_.__value_.__l.__size_;
  }
  v89 = (uint64_t *)(v69 + 16);
  do
  {
    while (1)
    {
      int v90 = *((char *)v86 + 55);
      v91 = v90 >= 0 ? v86 + 4 : (uint64_t *)v86[4];
      std::string::size_type v92 = v90 >= 0 ? *((unsigned __int8 *)v86 + 55) : v86[5];
      size_t v93 = v88 >= v92 ? v92 : v88;
      int v94 = memcmp(v91, v87, v93);
      if (v94) {
        break;
      }
      if (v92 >= v88) {
        goto LABEL_177;
      }
LABEL_163:
      v86 = (uint64_t *)v86[1];
      if (!v86) {
        goto LABEL_178;
      }
    }
    if (v94 < 0) {
      goto LABEL_163;
    }
LABEL_177:
    v89 = v86;
    v86 = (uint64_t *)*v86;
  }
  while (v86);
LABEL_178:
  if (v89 == v124) {
    goto LABEL_215;
  }
  v97 = (uint64_t *)v89[4];
  v96 = v89 + 4;
  v95 = v97;
  int v98 = *((char *)v96 + 23);
  if (v98 >= 0) {
    v99 = v96;
  }
  else {
    v99 = v95;
  }
  if (v98 >= 0) {
    size_t v100 = *((unsigned __int8 *)v96 + 23);
  }
  else {
    size_t v100 = v96[1];
  }
  if (v100 >= v88) {
    size_t v101 = v88;
  }
  else {
    size_t v101 = v100;
  }
  int v102 = memcmp(v87, v99, v101);
  if (v102)
  {
    if (v102 < 0) {
LABEL_215:
    }
      operator new();
  }
  else if (v88 < v100)
  {
    goto LABEL_215;
  }
LABEL_216:
  if ((v132[72] & 0x80000000) != 0)
  {
    operator delete(*(void **)&v132[49]);
    CFTypeRef v112 = v133;
    if (v133) {
LABEL_221:
    }
      CFRelease(v112);
  }
  else
  {
    CFTypeRef v112 = v133;
    if (v133) {
      goto LABEL_221;
    }
  }
  if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v134.__r_.__value_.__l.__data_);
  }
  v135[0] = *(void **)MEMORY[0x1E4FBA408];
  v113 = *(__n128 **)(MEMORY[0x1E4FBA408] + 72);
  *(void **)((char *)v135 + *((void *)v135[0] - 3)) = *(void **)(MEMORY[0x1E4FBA408] + 64);
  v136 = v113;
  uint64_t v137 = MEMORY[0x1E4FBA470] + 16;
  if (v144 < 0) {
    operator delete(v143);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x19F3BDC30](&v147);
  v114 = (char *)v128;
  if (v128)
  {
    v115 = v129;
    v116 = v128;
    if (v129 != v128)
    {
      do
      {
        if (*(v115 - 1) < 0) {
          operator delete(*((void **)v115 - 3));
        }
        v115 -= 24;
      }
      while (v115 != v114);
      v116 = v128;
    }
    v129 = v114;
    operator delete(v116);
  }
  uint64_t v117 = *(void *)&v132[25];
  if (*(void *)&v132[25])
  {
    uint64_t v118 = *(void *)&v132[33];
    v119 = *(void **)&v132[25];
    if (*(void *)&v132[33] != *(void *)&v132[25])
    {
      do
      {
        if (*(char *)(v118 - 9) < 0) {
          operator delete(*(void **)(v118 - 32));
        }
        v118 -= 32;
      }
      while (v118 != v117);
      v119 = *(void **)&v132[25];
    }
    *(void *)&v132[33] = v117;
    operator delete(v119);
  }
  uint64_t v120 = *(void *)&v132[1];
  if (*(void *)&v132[1])
  {
    uint64_t v121 = *(void *)&v132[9];
    v122 = *(void **)&v132[1];
    if (*(void *)&v132[9] != *(void *)&v132[1])
    {
      do
      {
        if (*(char *)(v121 - 1) < 0) {
          operator delete(*(void **)(v121 - 24));
        }
        v121 -= 24;
      }
      while (v121 != v120);
      v122 = *(void **)&v132[1];
    }
    *(void *)&v132[9] = v120;
    operator delete(v122);
  }
  if ((v132[0] & 0x80000000) != 0) {
    operator delete(v131);
  }
  return 0;
}

void sub_19E48FDC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,const void *a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47)
{
  operator delete(v47);
  if (a38 < 0) {
    operator delete(__p);
  }
  sub_19E3F6850(&a39);
  if (a45 < 0) {
    operator delete(a40);
  }
  sub_19E3933E0((uint64_t)&a47);
  sub_19E3EB09C(&a21);
  sub_19E3FBF24((uint64_t)&a24);
  _Unwind_Resume(a1);
}

double sub_19E49018C(unint64_t a1, const void **a2, uint64_t a3, char a4, __n128 a5)
{
  uint64_t v274 = *MEMORY[0x1E4F143B8];
LABEL_2:
  size_t v9 = (__n128 *)(a2 - 3);
  v258 = a2 - 9;
  v259 = a2 - 6;
  unint64_t j = a1;
  v267 = a2;
  __s2 = a2 - 3;
  while (1)
  {
    uint64_t v11 = j;
    uint64_t v12 = (uint64_t)a2 - j;
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - j) >> 3);
    a1 = v11;
    if (v6 || !v5)
    {
      switch(v13)
      {
        case 0uLL:
        case 1uLL:
          return a5.n128_f64[0];
        case 2uLL:
          int v118 = *((char *)a2 - 1);
          if (v118 >= 0) {
            v119 = v9;
          }
          else {
            v119 = (__n128 *)*(a2 - 3);
          }
          if (v118 >= 0) {
            size_t v120 = *((unsigned __int8 *)a2 - 1);
          }
          else {
            size_t v120 = (size_t)*(a2 - 2);
          }
          int v121 = *(char *)(v11 + 23);
          if (v121 >= 0) {
            v122 = (const void *)v11;
          }
          else {
            v122 = *(const void **)v11;
          }
          if (v121 >= 0) {
            size_t v123 = *(unsigned __int8 *)(v11 + 23);
          }
          else {
            size_t v123 = *(void *)(v11 + 8);
          }
          if (v123 >= v120) {
            size_t v124 = v120;
          }
          else {
            size_t v124 = v123;
          }
          int v125 = memcmp(v119, v122, v124);
          if (v125)
          {
            if ((v125 & 0x80000000) == 0) {
              return a5.n128_f64[0];
            }
          }
          else if (v120 >= v123)
          {
            return a5.n128_f64[0];
          }
          __n128 v255 = *(__n128 *)v11;
          int64_t v271 = *(void *)(v11 + 16);
          __n128 v270 = v255;
          __n128 v256 = *v9;
          *(void *)(v11 + 16) = v9[1].n128_u64[0];
          *(__n128 *)uint64_t v11 = v256;
          a5 = v270;
          v9[1].n128_u64[0] = v271;
          __n128 *v9 = a5;
          break;
        case 3uLL:
          a5.n128_u64[0] = sub_19E4915AC((const void **)v11, (const void **)(v11 + 24), (const void **)v9).n128_u64[0];
          return a5.n128_f64[0];
        case 4uLL:
          a5.n128_u64[0] = sub_19E4917F0(v11, (long long *)(v11 + 24), (long long *)(v11 + 48), (const void **)v9).n128_u64[0];
          return a5.n128_f64[0];
        case 5uLL:
          a5.n128_u64[0] = sub_19E491988(v11, v11 + 24, v11 + 48, (long long *)(v11 + 72), (const void **)v9).n128_u64[0];
          return a5.n128_f64[0];
        default:
          JUMPOUT(0);
      }
      return a5.n128_f64[0];
    }
    if (v12 <= 575)
    {
      if (a4)
      {
        if ((const void **)v11 == a2) {
          return a5.n128_f64[0];
        }
        v126 = (const void *)(v11 + 24);
        if ((const void **)(v11 + 24) == a2) {
          return a5.n128_f64[0];
        }
        uint64_t v127 = 0;
        uint64_t v128 = v11;
        while (2)
        {
          v174 = (__n128 *)v128;
          uint64_t v128 = (uint64_t)v126;
          int v175 = v174[2].n128_i8[15];
          if (v175 >= 0) {
            v176 = v126;
          }
          else {
            v176 = (const void *)v174[1].n128_u64[1];
          }
          if (v175 >= 0) {
            size_t v177 = v174[2].n128_u8[15];
          }
          else {
            size_t v177 = v174[2].n128_u64[0];
          }
          int v178 = v174[1].n128_i8[7];
          if (v178 >= 0) {
            v179 = v174;
          }
          else {
            v179 = (__n128 *)v174->n128_u64[0];
          }
          if (v178 >= 0) {
            size_t v180 = v174[1].n128_u8[7];
          }
          else {
            size_t v180 = v174->n128_u64[1];
          }
          if (v180 >= v177) {
            size_t v181 = v177;
          }
          else {
            size_t v181 = v180;
          }
          int v182 = memcmp(v176, v179, v181);
          if (v182)
          {
            if (v182 < 0)
            {
LABEL_374:
              __n128 v183 = *(__n128 *)v128;
              int64_t v271 = *(void *)(v128 + 16);
              __n128 v270 = v183;
              if (v271 >= 0) {
                v184 = &v270;
              }
              else {
                v184 = (__n128 *)v183.n128_u64[0];
              }
              if (v271 >= 0) {
                size_t v185 = HIBYTE(v271);
              }
              else {
                size_t v185 = v183.n128_u64[1];
              }
              *(void *)(v128 + 16) = v174[1].n128_u64[0];
              *(__n128 *)uint64_t v128 = *v174;
              v174[1].n128_u8[7] = 0;
              v174->n128_u8[0] = 0;
              v173 = (__n128 *)a1;
              if (v174 != (__n128 *)a1)
              {
                uint64_t v186 = v127;
                while (1)
                {
                  uint64_t v187 = a1 + v186;
                  int v188 = *(char *)(a1 + v186 - 1);
                  if (v188 >= 0) {
                    v189 = (const void *)(a1 + v186 - 24);
                  }
                  else {
                    v189 = *(const void **)(a1 + v186 - 24);
                  }
                  if (v188 >= 0) {
                    size_t v190 = *(unsigned __int8 *)(a1 + v186 - 1);
                  }
                  else {
                    size_t v190 = *(void *)(a1 + v186 - 16);
                  }
                  if (v190 >= v185) {
                    size_t v191 = v185;
                  }
                  else {
                    size_t v191 = v190;
                  }
                  int v192 = memcmp(v184, v189, v191);
                  if (v192)
                  {
                    if ((v192 & 0x80000000) == 0)
                    {
                      v173 = (__n128 *)(a1 + v186);
                      break;
                    }
                  }
                  else if (v185 >= v190)
                  {
                    v173 = v174;
                    break;
                  }
                  v174 = (__n128 *)((char *)v174 - 24);
                  *(_OWORD *)uint64_t v187 = *(_OWORD *)(a1 + v186 - 24);
                  *(void *)(v187 + 16) = *(void *)(a1 + v186 - 8);
                  *(unsigned char *)(v187 - 1) = 0;
                  *(unsigned char *)(v187 - ++*(_DWORD *)(result + 24) = 0;
                  v186 -= 24;
                  if (!v186)
                  {
                    v173 = (__n128 *)a1;
                    break;
                  }
                }
              }
              a5 = v270;
              v173[1].n128_u64[0] = v271;
              __n128 *v173 = a5;
            }
          }
          else if (v177 < v180)
          {
            goto LABEL_374;
          }
          v126 = (const void *)(v128 + 24);
          v127 += 24;
          if ((const void **)(v128 + 24) == v267) {
            return a5.n128_f64[0];
          }
          continue;
        }
      }
      if ((const void **)v11 == a2) {
        return a5.n128_f64[0];
      }
      v235 = (const void *)(v11 + 24);
      if ((const void **)(v11 + 24) == a2) {
        return a5.n128_f64[0];
      }
LABEL_476:
      unint64_t v237 = (unint64_t)v235;
      int v238 = *(char *)(a1 + 47);
      if (v238 >= 0) {
        v239 = v235;
      }
      else {
        v239 = *(const void **)(a1 + 24);
      }
      if (v238 >= 0) {
        size_t v240 = *(unsigned __int8 *)(a1 + 47);
      }
      else {
        size_t v240 = *(void *)(a1 + 32);
      }
      int v241 = *(char *)(a1 + 23);
      if (v241 >= 0) {
        v242 = (const void *)a1;
      }
      else {
        v242 = *(const void **)a1;
      }
      if (v241 >= 0) {
        size_t v243 = *(unsigned __int8 *)(a1 + 23);
      }
      else {
        size_t v243 = *(void *)(a1 + 8);
      }
      if (v243 >= v240) {
        size_t v244 = v240;
      }
      else {
        size_t v244 = v243;
      }
      int v245 = memcmp(v239, v242, v244);
      if (v245)
      {
        if ((v245 & 0x80000000) == 0) {
          goto LABEL_475;
        }
      }
      else if (v240 >= v243)
      {
        goto LABEL_475;
      }
      __n128 v246 = *(__n128 *)v237;
      int64_t v271 = *(void *)(v237 + 16);
      __n128 v270 = v246;
      *(void *)(v237 + 8) = 0;
      *(void *)(v237 + 16) = 0;
      *(void *)unint64_t v237 = 0;
      if (v271 >= 0) {
        v247 = &v270;
      }
      else {
        v247 = (__n128 *)v270.n128_u64[0];
      }
      if (v271 >= 0) {
        size_t v248 = HIBYTE(v271);
      }
      else {
        size_t v248 = v270.n128_u64[1];
      }
      for (unint64_t i = v237; ; i -= 24)
      {
        *(_OWORD *)unint64_t i = *(_OWORD *)(i - 24);
        *(void *)(i + 16) = *(void *)(i - 8);
        *(unsigned char *)(i - 1) = 0;
        *(unsigned char *)(i - ++*(_DWORD *)(result + 24) = 0;
        int v250 = *(char *)(i - 25);
        if (v250 >= 0) {
          v251 = (const void *)(i - 48);
        }
        else {
          v251 = *(const void **)(i - 48);
        }
        if (v250 >= 0) {
          size_t v252 = *(unsigned __int8 *)(i - 25);
        }
        else {
          size_t v252 = *(void *)(i - 40);
        }
        if (v252 >= v248) {
          size_t v253 = v248;
        }
        else {
          size_t v253 = v252;
        }
        int v254 = memcmp(v247, v251, v253);
        if (v254)
        {
          if ((v254 & 0x80000000) == 0)
          {
LABEL_474:
            v236 = (__n128 *)(i - 24);
            a5 = v270;
            v236[1].n128_u64[0] = v271;
            __n128 *v236 = a5;
LABEL_475:
            a1 = v237;
            v235 = (const void *)(v237 + 24);
            if ((const void **)(v237 + 24) == v267) {
              return a5.n128_f64[0];
            }
            goto LABEL_476;
          }
        }
        else if (v248 >= v252)
        {
          goto LABEL_474;
        }
      }
    }
    if (!a3) {
      break;
    }
    unint64_t v14 = v13 >> 1;
    unint64_t v15 = v11 + 24 * (v13 >> 1);
    if ((unint64_t)v12 < 0xC01)
    {
      sub_19E4915AC((const void **)v15, (const void **)v11, (const void **)v9);
    }
    else
    {
      sub_19E4915AC((const void **)v11, (const void **)v15, (const void **)v9);
      sub_19E4915AC((const void **)(v11 + 24), (const void **)(24 * v14 + v11 - 24), v259);
      sub_19E4915AC((const void **)(v11 + 48), (const void **)(v11 + 24 + 24 * v14), v258);
      sub_19E4915AC((const void **)(24 * v14 + v11 - 24), (const void **)v15, (const void **)(v11 + 24 + 24 * v14));
      __n128 v16 = *(__n128 *)v11;
      int64_t v271 = *(void *)(v11 + 16);
      __n128 v270 = v16;
      uint64_t v17 = *(void *)(v15 + 16);
      *(_OWORD *)uint64_t v11 = *(_OWORD *)v15;
      *(void *)(v11 + 16) = v17;
      __n128 v18 = v270;
      *(void *)(v15 + 16) = v271;
      *(__n128 *)unint64_t v15 = v18;
    }
    --a3;
    if ((a4 & 1) == 0)
    {
      int v19 = *(char *)(v11 - 1);
      if (v19 >= 0) {
        int v20 = (const void *)(v11 - 24);
      }
      else {
        int v20 = *(const void **)(v11 - 24);
      }
      if (v19 >= 0) {
        size_t v21 = *(unsigned __int8 *)(v11 - 1);
      }
      else {
        size_t v21 = *(void *)(v11 - 16);
      }
      int v22 = *(char *)(v11 + 23);
      if (v22 >= 0) {
        unsigned __int8 v23 = (const void *)v11;
      }
      else {
        unsigned __int8 v23 = *(const void **)v11;
      }
      if (v22 >= 0) {
        size_t v24 = *(unsigned __int8 *)(v11 + 23);
      }
      else {
        size_t v24 = *(void *)(v11 + 8);
      }
      if (v24 >= v21) {
        size_t v25 = v21;
      }
      else {
        size_t v25 = v24;
      }
      int v26 = memcmp(v20, v23, v25);
      if (v26)
      {
        if ((v26 & 0x80000000) == 0) {
          goto LABEL_127;
        }
      }
      else if (v21 >= v24)
      {
LABEL_127:
        __n128 v71 = *(__n128 *)v11;
        uint64_t v273 = *(void *)(v11 + 16);
        __n128 v272 = v71;
        *(void *)(v11 + 8) = 0;
        *(void *)(v11 + 16) = 0;
        *(void *)uint64_t v11 = 0;
        if (v273 >= 0) {
          v72 = &v272;
        }
        else {
          v72 = (__n128 *)v272.n128_u64[0];
        }
        if (v273 >= 0) {
          size_t v73 = HIBYTE(v273);
        }
        else {
          size_t v73 = v272.n128_u64[1];
        }
        size_t v74 = *((unsigned __int8 *)v267 - 1);
        size_t v75 = v9;
        BOOL v76 = *(v267 - 3);
        size_t v77 = (size_t)*(v267 - 2);
        if ((v74 & 0x80u) == 0) {
          CFStringRef v78 = v75;
        }
        else {
          CFStringRef v78 = (__n128 *)*(v267 - 3);
        }
        if ((v74 & 0x80u) == 0) {
          size_t v79 = *((unsigned __int8 *)v267 - 1);
        }
        else {
          size_t v79 = (size_t)*(v267 - 2);
        }
        if (v79 >= v73) {
          size_t v80 = v73;
        }
        else {
          size_t v80 = v79;
        }
        int v81 = memcmp(v72, v78, v80);
        if (v81)
        {
          if ((v81 & 0x80000000) == 0)
          {
LABEL_144:
            for (unint64_t j = a1 + 24; j < (unint64_t)v267; j += 24)
            {
              int v82 = *(char *)(j + 23);
              if (v82 >= 0) {
                uint64_t v83 = (const void *)j;
              }
              else {
                uint64_t v83 = *(const void **)j;
              }
              if (v82 >= 0) {
                size_t v84 = *(unsigned __int8 *)(j + 23);
              }
              else {
                size_t v84 = *(void *)(j + 8);
              }
              if (v84 >= v73) {
                size_t v85 = v73;
              }
              else {
                size_t v85 = v84;
              }
              int v86 = memcmp(v72, v83, v85);
              if (v86)
              {
                if (v86 < 0) {
                  break;
                }
              }
              else if (v73 < v84)
              {
                break;
              }
            }
LABEL_174:
            k = v267;
            if (j < (unint64_t)v267)
            {
              for (k = __s2; ; size_t v77 = *((void *)k + 1))
              {
                if ((v74 & 0x80u) == 0) {
                  v95 = k;
                }
                else {
                  v95 = v76;
                }
                if ((v74 & 0x80u) == 0) {
                  size_t v96 = v74;
                }
                else {
                  size_t v96 = v77;
                }
                if (v96 >= v73) {
                  size_t v97 = v73;
                }
                else {
                  size_t v97 = v96;
                }
                int v98 = memcmp(v72, v95, v97);
                if (v98)
                {
                  if ((v98 & 0x80000000) == 0) {
                    break;
                  }
                }
                else if (v73 >= v96)
                {
                  break;
                }
                int v94 = (const void *)*((void *)k - 3);
                k = (_OWORD *)((char *)k - 24);
                BOOL v76 = v94;
                size_t v74 = *((unsigned __int8 *)k + 23);
              }
            }
LABEL_222:
            while (j < (unint64_t)k)
            {
              __n128 v99 = *(__n128 *)j;
              int64_t v271 = *(void *)(j + 16);
              __n128 v270 = v99;
              long long v100 = *k;
              *(void *)(j + 16) = *((void *)k + 2);
              *(_OWORD *)unint64_t j = v100;
              __n128 v101 = v270;
              *((void *)k + 2) = v271;
              _OWORD *k = v101;
              if (v273 >= 0) {
                int v102 = &v272;
              }
              else {
                int v102 = (__n128 *)v272.n128_u64[0];
              }
              if (v273 >= 0) {
                unint64_t v103 = HIBYTE(v273);
              }
              else {
                unint64_t v103 = v272.n128_u64[1];
              }
              unint64_t v104 = j + 24;
              do
              {
                while (1)
                {
                  unint64_t j = v104;
                  uint64_t v105 = *(unsigned __int8 *)(v104 + 23);
                  unint64_t v106 = (v105 & 0x80u) == 0 ? (const void *)j : *(const void **)j;
                  unint64_t v107 = (v105 & 0x80u) == 0 ? v105 : *(void *)(j + 8);
                  size_t v108 = v107 >= v103 ? v103 : v107;
                  int v109 = memcmp(v102, v106, v108);
                  unint64_t v104 = j + 24;
                  if (v109) {
                    break;
                  }
                  if (v103 < v107) {
                    goto LABEL_209;
                  }
                }
              }
              while ((v109 & 0x80000000) == 0);
LABEL_209:
              uint64_t v110 = (char *)k - 24;
              do
              {
                while (1)
                {
                  k = v110;
                  uint64_t v111 = v110[23];
                  CFTypeRef v112 = (v111 & 0x80u) == 0 ? k : *(_OWORD **)k;
                  unint64_t v113 = (v111 & 0x80u) == 0 ? v111 : *((void *)k + 1);
                  size_t v114 = v113 >= v103 ? v103 : v113;
                  int v115 = memcmp(v102, v112, v114);
                  uint64_t v110 = (char *)k - 24;
                  if (v115) {
                    break;
                  }
                  if (v103 >= v113) {
                    goto LABEL_222;
                  }
                }
              }
              while (v115 < 0);
            }
            v116 = (__n128 *)(j - 24);
            BOOL v5 = j - 24 >= a1;
            BOOL v6 = j - 24 == a1;
            if (j - 24 == a1)
            {
              a2 = v267;
              size_t v9 = (__n128 *)__s2;
              if (*(char *)(j - 1) < 0) {
                operator delete(*(void **)a1);
              }
            }
            else
            {
              a2 = v267;
              size_t v9 = (__n128 *)__s2;
              if (*(char *)(a1 + 23) < 0) {
                operator delete(*(void **)a1);
              }
              __n128 v117 = *v116;
              *(void *)(a1 + 16) = *(void *)(j - 8);
              *(__n128 *)a1 = v117;
              *(unsigned char *)(j - 1) = 0;
              *(unsigned char *)(j - ++*(_DWORD *)(result + 24) = 0;
            }
            a4 = 0;
            a5 = v272;
            *(void *)(j - 8) = v273;
            __n128 *v116 = a5;
            continue;
          }
        }
        else if (v73 >= v79)
        {
          goto LABEL_144;
        }
        unint64_t v87 = a1 + 24;
        do
        {
          while (1)
          {
            unint64_t j = v87;
            uint64_t v88 = *(unsigned __int8 *)(v87 + 23);
            v89 = (v88 & 0x80u) == 0 ? (const void *)j : *(const void **)j;
            size_t v90 = (v88 & 0x80u) == 0 ? v88 : *(void *)(j + 8);
            size_t v91 = v90 >= v73 ? v73 : v90;
            int v92 = memcmp(v72, v89, v91);
            unint64_t v87 = j + 24;
            if (v92) {
              break;
            }
            if (v73 < v90) {
              goto LABEL_174;
            }
          }
        }
        while ((v92 & 0x80000000) == 0);
        goto LABEL_174;
      }
    }
    __n128 v27 = *(__n128 *)v11;
    uint64_t v273 = *(void *)(v11 + 16);
    __n128 v272 = v27;
    *(void *)(v11 + 8) = 0;
    *(void *)(v11 + 16) = 0;
    *(void *)uint64_t v11 = 0;
    if (v273 >= 0) {
      unint64_t v28 = &v272;
    }
    else {
      unint64_t v28 = (__n128 *)v272.n128_u64[0];
    }
    if (v273 >= 0) {
      unint64_t v29 = HIBYTE(v273);
    }
    else {
      unint64_t v29 = v272.n128_u64[1];
    }
    for (unint64_t m = v11 + 24; ; m += 24)
    {
      int v31 = *(char *)(m + 23);
      uint64_t v32 = v31 >= 0 ? (const void *)m : *(const void **)m;
      unint64_t v33 = v31 >= 0 ? *(unsigned __int8 *)(m + 23) : *(void *)(m + 8);
      size_t v34 = v29 >= v33 ? v33 : v29;
      int v35 = memcmp(v32, v28, v34);
      if (v35) {
        break;
      }
      if (v33 >= v29) {
        goto LABEL_48;
      }
LABEL_36:
      ;
    }
    if (v35 < 0) {
      goto LABEL_36;
    }
LABEL_48:
    uint64_t v36 = v9;
    if (m - 24 == v11)
    {
      n128_u64 = v267;
      if (m < (unint64_t)v267)
      {
        do
        {
          while (1)
          {
            n128_u64 = v9->n128_u64;
            int v62 = v9[1].n128_i8[7];
            uint64_t v63 = v62 >= 0 ? v9 : (__n128 *)v9->n128_u64[0];
            unint64_t v64 = v62 >= 0 ? v9[1].n128_u8[7] : v9->n128_u64[1];
            size_t v65 = v29 >= v64 ? v64 : v29;
            int v66 = memcmp(v63, v28, v65);
            size_t v9 = (__n128 *)((char *)v9 - 24);
            if (!v66) {
              break;
            }
            if (v66 < 0 || m >= (unint64_t)n128_u64) {
              goto LABEL_63;
            }
          }
        }
        while (v64 >= v29 && m < (unint64_t)n128_u64);
      }
    }
    else
    {
      do
      {
        while (1)
        {
          n128_u64 = v36->n128_u64;
          uint64_t v38 = v36[1].n128_u8[7];
          uint64_t v39 = (v38 & 0x80u) == 0 ? n128_u64 : (void *)*n128_u64;
          unint64_t v40 = (v38 & 0x80u) == 0 ? v38 : n128_u64[1];
          size_t v41 = v29 >= v40 ? v40 : v29;
          int v42 = memcmp(v39, v28, v41);
          uint64_t v36 = (__n128 *)(n128_u64 - 3);
          if (v42) {
            break;
          }
          if (v40 < v29) {
            goto LABEL_63;
          }
        }
      }
      while ((v42 & 0x80000000) == 0);
    }
LABEL_63:
    unint64_t j = m;
    if (m < (unint64_t)n128_u64)
    {
      unint64_t j = m;
      unint64_t v43 = n128_u64;
      do
      {
        __n128 v44 = *(__n128 *)j;
        int64_t v271 = *(void *)(j + 16);
        __n128 v270 = v44;
        long long v45 = *(_OWORD *)v43;
        *(void *)(j + 16) = v43[2];
        *(_OWORD *)unint64_t j = v45;
        __n128 v46 = v270;
        v43[2] = v271;
        *(__n128 *)unint64_t v43 = v46;
        if (v273 >= 0) {
          int v47 = &v272;
        }
        else {
          int v47 = (__n128 *)v272.n128_u64[0];
        }
        if (v273 >= 0) {
          unint64_t v48 = HIBYTE(v273);
        }
        else {
          unint64_t v48 = v272.n128_u64[1];
        }
        unint64_t v49 = j + 24;
        do
        {
          while (1)
          {
            unint64_t j = v49;
            uint64_t v50 = *(unsigned __int8 *)(v49 + 23);
            v51 = (v50 & 0x80u) == 0 ? (const void *)j : *(const void **)j;
            unint64_t v52 = (v50 & 0x80u) == 0 ? v50 : *(void *)(j + 8);
            size_t v53 = v48 >= v52 ? v52 : v48;
            int v54 = memcmp(v51, v47, v53);
            unint64_t v49 = j + 24;
            if (v54) {
              break;
            }
            if (v52 >= v48) {
              goto LABEL_85;
            }
          }
        }
        while (v54 < 0);
LABEL_85:
        uint64_t v55 = v43 - 3;
        do
        {
          while (1)
          {
            unint64_t v43 = v55;
            uint64_t v56 = *((unsigned __int8 *)v55 + 23);
            uint64_t v57 = (v56 & 0x80u) == 0 ? v43 : (void *)*v43;
            unint64_t v58 = (v56 & 0x80u) == 0 ? v56 : v43[1];
            size_t v59 = v48 >= v58 ? v58 : v48;
            int v60 = memcmp(v57, v47, v59);
            uint64_t v55 = v43 - 3;
            if (v60) {
              break;
            }
            if (v58 < v48) {
              goto LABEL_65;
            }
          }
        }
        while ((v60 & 0x80000000) == 0);
LABEL_65:
        ;
      }
      while (j < (unint64_t)v43);
    }
    v67 = (__n128 *)(j - 24);
    if (j - 24 == a1)
    {
      a2 = v267;
      size_t v9 = (__n128 *)__s2;
      if (*(char *)(j - 1) < 0) {
        operator delete(*(void **)a1);
      }
    }
    else
    {
      a2 = v267;
      if (*(char *)(a1 + 23) < 0) {
        operator delete(*(void **)a1);
      }
      __n128 v68 = *v67;
      *(void *)(a1 + 16) = *(void *)(j - 8);
      *(__n128 *)a1 = v68;
      *(unsigned char *)(j - 1) = 0;
      *(unsigned char *)(j - ++*(_DWORD *)(result + 24) = 0;
      size_t v9 = (__n128 *)__s2;
    }
    __n128 v69 = v272;
    *(void *)(j - 8) = v273;
    __n128 *v67 = v69;
    if (m < (unint64_t)n128_u64)
    {
LABEL_125:
      sub_19E49018C(a1, j - 24, a3, a4 & 1);
      a4 = 0;
    }
    else
    {
      BOOL v70 = sub_19E491B9C(a1, (const void **)(j - 24));
      if (sub_19E491B9C(j, a2))
      {
        a2 = (const void **)(j - 24);
        if (v70) {
          return a5.n128_f64[0];
        }
        goto LABEL_2;
      }
      if (!v70) {
        goto LABEL_125;
      }
    }
  }
  if ((const void **)v11 == a2) {
    return a5.n128_f64[0];
  }
  int64_t v129 = (v13 - 2) >> 1;
  int64_t v265 = v129;
  unint64_t v130 = v11;
  while (2)
  {
    int64_t v132 = v129;
    if (v265 >= v129)
    {
      unint64_t v133 = v130 + 24 * ((2 * v129) | 1);
      uint64_t v134 = 2 * v129 + 2;
      if (v134 >= (uint64_t)v13) {
        goto LABEL_289;
      }
      v135 = (const void **)(v133 + 24);
      int v136 = *(char *)(v133 + 23);
      if (v136 >= 0) {
        uint64_t v137 = (const void *)(v130 + 24 * ((2 * v129) | 1));
      }
      else {
        uint64_t v137 = *(const void **)v133;
      }
      if (v136 >= 0) {
        size_t v138 = *(unsigned __int8 *)(v133 + 23);
      }
      else {
        size_t v138 = *(void *)(v133 + 8);
      }
      int v139 = *(char *)(v133 + 47);
      if (v139 >= 0) {
        unint64_t v140 = (const void *)(v133 + 24);
      }
      else {
        unint64_t v140 = *(const void **)(v133 + 24);
      }
      if (v139 >= 0) {
        size_t v141 = *(unsigned __int8 *)(v133 + 47);
      }
      else {
        size_t v141 = *(void *)(v133 + 32);
      }
      if (v141 >= v138) {
        size_t v142 = v138;
      }
      else {
        size_t v142 = v141;
      }
      int v143 = memcmp(v137, v140, v142);
      if (v143)
      {
        unint64_t v130 = a1;
        if ((v143 & 0x80000000) == 0) {
          goto LABEL_289;
        }
      }
      else
      {
        BOOL v5 = v138 >= v141;
        unint64_t v130 = a1;
        if (v5)
        {
LABEL_289:
          v135 = (const void **)v133;
          uint64_t v134 = (2 * v132) | 1;
        }
      }
      char v144 = (__n128 *)(v130 + 24 * v132);
      int v145 = *((char *)v135 + 23);
      if (v145 >= 0) {
        int v146 = v135;
      }
      else {
        int v146 = *v135;
      }
      if (v145 >= 0) {
        size_t v147 = *((unsigned __int8 *)v135 + 23);
      }
      else {
        size_t v147 = (size_t)v135[1];
      }
      int v148 = v144[1].n128_i8[7];
      if (v148 >= 0) {
        v149 = (const void *)(v130 + 24 * v132);
      }
      else {
        v149 = (const void *)v144->n128_u64[0];
      }
      if (v148 >= 0) {
        size_t v150 = v144[1].n128_u8[7];
      }
      else {
        size_t v150 = v144->n128_u64[1];
      }
      if (v150 >= v147) {
        size_t v151 = v147;
      }
      else {
        size_t v151 = v150;
      }
      int v152 = memcmp(v146, v149, v151);
      if (v152)
      {
        if (v152 < 0) {
          goto LABEL_269;
        }
      }
      else if (v147 < v150)
      {
        goto LABEL_269;
      }
      int64_t v260 = v132;
      __n128 v153 = *v144;
      int64_t v271 = v144[1].n128_i64[0];
      __n128 v270 = v153;
      v144->n128_u64[1] = 0;
      v144[1].n128_u64[0] = 0;
      v144->n128_u64[0] = 0;
      __n128 v154 = *(__n128 *)v135;
      v144[1].n128_u64[0] = (unint64_t)v135[2];
      *char v144 = v154;
      *((unsigned char *)v135 + 23) = 0;
      *(unsigned char *)v135 = 0;
      if (v265 >= v134)
      {
        v155 = &v270;
        if (v271 < 0) {
          v155 = (__n128 *)v270.n128_u64[0];
        }
        __s2a = v155;
        if (v271 >= 0) {
          size_t v156 = HIBYTE(v271);
        }
        else {
          size_t v156 = v270.n128_u64[1];
        }
        while (1)
        {
          uint64_t v158 = (2 * v134) | 1;
          unint64_t v159 = v130 + 24 * v158;
          uint64_t v134 = 2 * v134 + 2;
          if (v134 >= (uint64_t)v13) {
            goto LABEL_335;
          }
          v131 = (const void **)(v159 + 24);
          int v160 = *(char *)(v159 + 23);
          v161 = v160 >= 0 ? (const void *)(v130 + 24 * v158) : *(const void **)v159;
          unint64_t v162 = v160 >= 0 ? *(unsigned __int8 *)(v159 + 23) : *(void *)(v159 + 8);
          int v163 = *(char *)(v159 + 47);
          v164 = v163 >= 0 ? (const void *)(v159 + 24) : *(const void **)(v159 + 24);
          unint64_t v165 = v163 >= 0 ? *(unsigned __int8 *)(v159 + 47) : *(void *)(v159 + 32);
          size_t v166 = v165 >= v162 ? v162 : v165;
          int v167 = memcmp(v161, v164, v166);
          if (v167) {
            break;
          }
          BOOL v5 = v162 >= v165;
          unint64_t v130 = a1;
          if (v5) {
            goto LABEL_335;
          }
LABEL_336:
          int v168 = *((char *)v131 + 23);
          if (v168 >= 0) {
            v169 = v131;
          }
          else {
            v169 = *v131;
          }
          if (v168 >= 0) {
            size_t v170 = *((unsigned __int8 *)v131 + 23);
          }
          else {
            size_t v170 = (size_t)v131[1];
          }
          if (v156 >= v170) {
            size_t v171 = v170;
          }
          else {
            size_t v171 = v156;
          }
          int v172 = memcmp(v169, __s2a, v171);
          if (v172)
          {
            if (v172 < 0) {
              goto LABEL_267;
            }
          }
          else if (v170 < v156)
          {
            goto LABEL_267;
          }
          long long v157 = *(_OWORD *)v131;
          v135[2] = v131[2];
          *(_OWORD *)v135 = v157;
          *((unsigned char *)v131 + 23) = 0;
          *(unsigned char *)v131 = 0;
          v135 = v131;
          if (v265 < v134) {
            goto LABEL_268;
          }
        }
        unint64_t v130 = a1;
        if (v167 < 0) {
          goto LABEL_336;
        }
LABEL_335:
        v131 = (const void **)v159;
        uint64_t v134 = v158;
        goto LABEL_336;
      }
LABEL_267:
      v131 = v135;
LABEL_268:
      a5 = v270;
      v131[2] = (const void *)v271;
      *(__n128 *)v131 = a5;
      int64_t v132 = v260;
    }
LABEL_269:
    int64_t v129 = v132 - 1;
    if (v132) {
      continue;
    }
    break;
  }
  int64_t v193 = v12 / 0x18uLL;
  v194 = v267;
  do
  {
    if (v193 < 2) {
      goto LABEL_399;
    }
    v268 = v194;
    uint64_t v197 = 0;
    unint64_t v198 = a1;
    __s2b = *(void **)a1;
    v272.n128_u64[0] = *(void *)(v130 + 8);
    *(unint64_t *)((char *)v272.n128_u64 + 7) = *(void *)(v130 + 15);
    unsigned __int8 v266 = *(unsigned char *)(a1 + 23);
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    do
    {
      uint64_t v199 = v198 + 24 * v197 + 24;
      uint64_t v200 = (2 * v197) | 1;
      uint64_t v197 = 2 * v197 + 2;
      if (v197 >= v193) {
        goto LABEL_422;
      }
      v201 = (__n128 *)(v199 + 24);
      int v202 = *(char *)(v199 + 23);
      if (v202 >= 0) {
        v203 = (const void *)v199;
      }
      else {
        v203 = *(const void **)v199;
      }
      if (v202 >= 0) {
        size_t v204 = *(unsigned __int8 *)(v199 + 23);
      }
      else {
        size_t v204 = *(void *)(v199 + 8);
      }
      int v205 = *(char *)(v199 + 47);
      if (v205 >= 0) {
        v206 = (const void *)(v199 + 24);
      }
      else {
        v206 = *(const void **)(v199 + 24);
      }
      if (v205 >= 0) {
        size_t v207 = *(unsigned __int8 *)(v199 + 47);
      }
      else {
        size_t v207 = *(void *)(v199 + 32);
      }
      if (v207 >= v204) {
        size_t v208 = v204;
      }
      else {
        size_t v208 = v207;
      }
      int v209 = memcmp(v203, v206, v208);
      if (v209)
      {
        if (v209 < 0) {
          goto LABEL_423;
        }
LABEL_422:
        v201 = (__n128 *)v199;
        uint64_t v197 = v200;
        goto LABEL_423;
      }
      if (v204 >= v207) {
        goto LABEL_422;
      }
LABEL_423:
      if (*(char *)(v198 + 23) < 0) {
        operator delete(*(void **)v198);
      }
      a5 = *v201;
      *(void *)(v198 + 16) = v201[1].n128_u64[0];
      *(__n128 *)unint64_t v198 = a5;
      v201[1].n128_u8[7] = 0;
      v201->n128_u8[0] = 0;
      unint64_t v198 = (unint64_t)v201;
    }
    while (v197 <= (uint64_t)((unint64_t)(v193 - 2) >> 1));
    v194 = v268;
    if (v201 == (__n128 *)(v268 - 3))
    {
      v201->n128_u64[0] = (unint64_t)__s2b;
      unint64_t v195 = *(unint64_t *)((char *)v272.n128_u64 + 7);
      v201->n128_u64[1] = v272.n128_u64[0];
      *(unint64_t *)((char *)&v201->n128_u64[1] + 7) = v195;
      v201[1].n128_u8[7] = v266;
    }
    else
    {
      a5 = *(__n128 *)(v268 - 3);
      v201[1].n128_u64[0] = (unint64_t)*(v268 - 1);
      __n128 *v201 = a5;
      *(v268 - 3) = __s2b;
      unint64_t v210 = v272.n128_u64[0];
      *(const void **)((char *)v268 - 9) = *(const void **)((char *)v272.n128_u64 + 7);
      *(v268 - 2) = (const void *)v210;
      *((unsigned char *)v268 - 1) = v266;
      uint64_t v211 = (uint64_t)&v201[1].n128_i64[1] - a1;
      if (v211 >= 25)
      {
        unint64_t v212 = -2 - 0x5555555555555555 * (v211 >> 3);
        unint64_t v213 = v212 >> 1;
        unint64_t v214 = a1 + 24 * (v212 >> 1);
        int v215 = *(char *)(v214 + 23);
        if (v215 >= 0) {
          v216 = (const void *)(a1 + 24 * (v212 >> 1));
        }
        else {
          v216 = *(const void **)v214;
        }
        if (v215 >= 0) {
          size_t v217 = *(unsigned __int8 *)(v214 + 23);
        }
        else {
          size_t v217 = *(void *)(v214 + 8);
        }
        int v218 = v201[1].n128_i8[7];
        if (v218 >= 0) {
          v219 = v201;
        }
        else {
          v219 = (__n128 *)v201->n128_u64[0];
        }
        if (v218 >= 0) {
          size_t v220 = v201[1].n128_u8[7];
        }
        else {
          size_t v220 = v201->n128_u64[1];
        }
        if (v220 >= v217) {
          size_t v221 = v217;
        }
        else {
          size_t v221 = v220;
        }
        int v222 = memcmp(v216, v219, v221);
        if (v222)
        {
          v194 = v268;
          if (v222 < 0)
          {
LABEL_448:
            __n128 v223 = *v201;
            int64_t v271 = v201[1].n128_i64[0];
            __n128 v270 = v223;
            v201->n128_u64[1] = 0;
            v201[1].n128_u64[0] = 0;
            v201->n128_u64[0] = 0;
            if (v271 >= 0) {
              v224 = &v270;
            }
            else {
              v224 = (__n128 *)v270.n128_u64[0];
            }
            if (v271 >= 0) {
              size_t v225 = HIBYTE(v271);
            }
            else {
              size_t v225 = v270.n128_u64[1];
            }
            __n128 v226 = *(__n128 *)v214;
            v201[1].n128_u64[0] = *(void *)(v214 + 16);
            __n128 *v201 = v226;
            *(unsigned char *)(v214 + 23) = 0;
            *(unsigned char *)unint64_t v214 = 0;
            if (v212 >= 2)
            {
              while (1)
              {
                unint64_t v228 = v213 - 1;
                unint64_t v213 = (v213 - 1) >> 1;
                unint64_t v229 = a1 + 24 * v213;
                int v230 = *(char *)(v229 + 23);
                if (v230 >= 0) {
                  v231 = (const void *)(a1 + 24 * v213);
                }
                else {
                  v231 = *(const void **)v229;
                }
                if (v230 >= 0) {
                  size_t v232 = *(unsigned __int8 *)(v229 + 23);
                }
                else {
                  size_t v232 = *(void *)(v229 + 8);
                }
                if (v225 >= v232) {
                  size_t v233 = v232;
                }
                else {
                  size_t v233 = v225;
                }
                int v234 = memcmp(v231, v224, v233);
                if (v234)
                {
                  if ((v234 & 0x80000000) == 0) {
                    break;
                  }
                }
                else if (v232 >= v225)
                {
                  break;
                }
                long long v227 = *(_OWORD *)v229;
                *(void *)(v214 + 16) = *(void *)(v229 + 16);
                *(_OWORD *)unint64_t v214 = v227;
                *(unsigned char *)(v229 + 23) = 0;
                *(unsigned char *)unint64_t v229 = 0;
                unint64_t v214 = a1 + 24 * v213;
                if (v228 <= 1) {
                  goto LABEL_470;
                }
              }
            }
            unint64_t v229 = v214;
LABEL_470:
            a5 = v270;
            *(void *)(v229 + 16) = v271;
            *(__n128 *)unint64_t v229 = a5;
            v194 = v268;
          }
        }
        else
        {
          v194 = v268;
          if (v217 < v220) {
            goto LABEL_448;
          }
        }
      }
    }
LABEL_399:
    v194 -= 3;
  }
  while ((unint64_t)v193-- > 2);
  return a5.n128_f64[0];
}

void *sub_19E491324(void *a1)
{
  uint64_t v2 = (void *)a1[50];
  if (v2)
  {
    a1[51] = v2;
    operator delete(v2);
  }
  uint64_t v3 = a1[44];
  if (v3)
  {
    uint64_t v4 = a1[45];
    BOOL v5 = (void *)a1[44];
    if (v4 != v3)
    {
      do
      {
        BOOL v6 = *(void **)(v4 - 24);
        if (v6)
        {
          *(void *)(v4 - 16) = v6;
          operator delete(v6);
        }
        int v7 = *(void **)(v4 - 48);
        if (v7)
        {
          *(void *)(v4 - 40) = v7;
          operator delete(v7);
        }
        long long v8 = *(void **)(v4 - 72);
        if (v8)
        {
          *(void *)(v4 - 64) = v8;
          operator delete(v8);
        }
        v4 -= 80;
      }
      while (v4 != v3);
      BOOL v5 = (void *)a1[44];
    }
    a1[45] = v3;
    operator delete(v5);
  }
  uint64_t v9 = a1[41];
  if (v9)
  {
    uint64_t v10 = a1[42];
    uint64_t v11 = (void *)a1[41];
    if (v10 != v9)
    {
      uint64_t v12 = a1[42];
      do
      {
        unint64_t v14 = *(void **)(v12 - 24);
        v12 -= 24;
        unint64_t v13 = v14;
        if (v14)
        {
          *(void *)(v10 - 16) = v13;
          operator delete(v13);
        }
        uint64_t v10 = v12;
      }
      while (v12 != v9);
      uint64_t v11 = (void *)a1[41];
    }
    a1[42] = v9;
    operator delete(v11);
  }
  unint64_t v15 = (void *)a1[38];
  if (v15)
  {
    a1[39] = v15;
    operator delete(v15);
  }
  __n128 v16 = (void *)a1[35];
  if (v16)
  {
    a1[36] = v16;
    operator delete(v16);
  }
  uint64_t v17 = (void *)a1[31];
  if (v17)
  {
    a1[32] = v17;
    operator delete(v17);
  }
  __n128 v18 = (void *)a1[28];
  if (v18)
  {
    do
    {
      int v19 = (void *)*v18;
      operator delete(v18);
      __n128 v18 = v19;
    }
    while (v19);
  }
  int v20 = (void *)a1[26];
  a1[26] = 0;
  if (v20) {
    operator delete(v20);
  }
  size_t v21 = (void *)a1[23];
  if (v21)
  {
    a1[24] = v21;
    operator delete(v21);
  }
  int v22 = (void **)a1[20];
  if (v22)
  {
    do
    {
      __n128 v27 = (void **)*v22;
      if (*((char *)v22 + 39) < 0) {
        operator delete(v22[2]);
      }
      operator delete(v22);
      int v22 = v27;
    }
    while (v27);
  }
  unsigned __int8 v23 = (void *)a1[18];
  a1[18] = 0;
  if (v23) {
    operator delete(v23);
  }
  uint64_t v24 = a1[14];
  if (v24)
  {
    uint64_t v25 = a1[15];
    int v26 = (void *)a1[14];
    if (v25 != v24)
    {
      do
      {
        if (*(char *)(v25 - 1) < 0) {
          operator delete(*(void **)(v25 - 24));
        }
        v25 -= 24;
      }
      while (v25 != v24);
      int v26 = (void *)a1[14];
    }
    a1[15] = v24;
    operator delete(v26);
  }
  unint64_t v28 = (void **)a1[11];
  if (v28)
  {
    do
    {
      unint64_t v33 = (void **)*v28;
      if (*((char *)v28 + 39) < 0) {
        operator delete(v28[2]);
      }
      operator delete(v28);
      unint64_t v28 = v33;
    }
    while (v33);
  }
  unint64_t v29 = (void *)a1[9];
  a1[9] = 0;
  if (v29) {
    operator delete(v29);
  }
  uint64_t v30 = a1[5];
  if (v30)
  {
    uint64_t v31 = a1[6];
    uint64_t v32 = (void *)a1[5];
    if (v31 != v30)
    {
      do
      {
        size_t v34 = *(void **)(v31 - 24);
        if (v34)
        {
          *(void *)(v31 - 16) = v34;
          operator delete(v34);
        }
        int v35 = *(void **)(v31 - 48);
        if (v35)
        {
          *(void *)(v31 - 40) = v35;
          operator delete(v35);
        }
        uint64_t v36 = *(void **)(v31 - 72);
        if (v36)
        {
          *(void *)(v31 - 64) = v36;
          operator delete(v36);
        }
        v31 -= 80;
      }
      while (v31 != v30);
      uint64_t v32 = (void *)a1[5];
    }
    a1[6] = v30;
    operator delete(v32);
  }
  return a1;
}

__n128 sub_19E4915AC(const void **a1, const void **a2, const void **a3)
{
  int v6 = *((char *)a2 + 23);
  if (v6 >= 0) {
    int v7 = a2;
  }
  else {
    int v7 = *a2;
  }
  if (v6 >= 0) {
    size_t v8 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v8 = (size_t)a2[1];
  }
  int v9 = *((char *)a1 + 23);
  if (v9 >= 0) {
    uint64_t v10 = a1;
  }
  else {
    uint64_t v10 = *a1;
  }
  if (v9 >= 0) {
    size_t v11 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v11 = (size_t)a1[1];
  }
  if (v11 >= v8) {
    size_t v12 = v8;
  }
  else {
    size_t v12 = v11;
  }
  int v13 = memcmp(v7, v10, v12);
  if (v13)
  {
    if ((v13 & 0x80000000) == 0) {
      goto LABEL_18;
    }
LABEL_31:
    int v20 = *((char *)a3 + 23);
    if (v20 >= 0) {
      size_t v21 = a3;
    }
    else {
      size_t v21 = *a3;
    }
    if (v20 >= 0) {
      size_t v22 = *((unsigned __int8 *)a3 + 23);
    }
    else {
      size_t v22 = (size_t)a3[1];
    }
    if (v8 >= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v8;
    }
    int v24 = memcmp(v21, v7, v23);
    if (v24)
    {
      if ((v24 & 0x80000000) == 0)
      {
LABEL_42:
        uint64_t v25 = a1[2];
        __n128 v26 = *(__n128 *)a1;
        __n128 v27 = a2[2];
        *(_OWORD *)a1 = *(_OWORD *)a2;
        a1[2] = v27;
        *(__n128 *)a2 = v26;
        a2[2] = v25;
        int v28 = *((char *)a3 + 23);
        if (v28 >= 0) {
          unint64_t v29 = a3;
        }
        else {
          unint64_t v29 = *a3;
        }
        if (v28 >= 0) {
          size_t v30 = *((unsigned __int8 *)a3 + 23);
        }
        else {
          size_t v30 = (size_t)a3[1];
        }
        int v31 = *((char *)a2 + 23);
        if (v31 >= 0) {
          uint64_t v32 = a2;
        }
        else {
          uint64_t v32 = *a2;
        }
        if (v31 >= 0) {
          size_t v33 = *((unsigned __int8 *)a2 + 23);
        }
        else {
          size_t v33 = (size_t)a2[1];
        }
        if (v33 >= v30) {
          size_t v34 = v30;
        }
        else {
          size_t v34 = v33;
        }
        int v35 = memcmp(v29, v32, v34);
        if (v35)
        {
          if ((v35 & 0x80000000) == 0) {
            return result;
          }
        }
        else if (v30 >= v33)
        {
          return result;
        }
        int v47 = a2[2];
        __n128 result = *(__n128 *)a2;
        unint64_t v49 = a3[2];
        *(_OWORD *)a2 = *(_OWORD *)a3;
        a2[2] = v49;
        goto LABEL_83;
      }
    }
    else if (v22 >= v8)
    {
      goto LABEL_42;
    }
    int v47 = a1[2];
    __n128 result = *(__n128 *)a1;
    unint64_t v48 = a3[2];
    *(_OWORD *)a1 = *(_OWORD *)a3;
    a1[2] = v48;
LABEL_83:
    *(__n128 *)a3 = result;
    a3[2] = v47;
    return result;
  }
  if (v8 < v11) {
    goto LABEL_31;
  }
LABEL_18:
  int v14 = *((char *)a3 + 23);
  if (v14 >= 0) {
    unint64_t v15 = a3;
  }
  else {
    unint64_t v15 = *a3;
  }
  if (v14 >= 0) {
    size_t v16 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v16 = (size_t)a3[1];
  }
  if (v8 >= v16) {
    size_t v17 = v16;
  }
  else {
    size_t v17 = v8;
  }
  int v18 = memcmp(v15, v7, v17);
  if (v18)
  {
    if ((v18 & 0x80000000) == 0) {
      return result;
    }
  }
  else if (v16 >= v8)
  {
    return result;
  }
  uint64_t v36 = a2[2];
  long long v37 = *(_OWORD *)a2;
  uint64_t v38 = a3[2];
  *(_OWORD *)a2 = *(_OWORD *)a3;
  a2[2] = v38;
  *(_OWORD *)a3 = v37;
  a3[2] = v36;
  int v39 = *((char *)a2 + 23);
  if (v39 >= 0) {
    unint64_t v40 = a2;
  }
  else {
    unint64_t v40 = *a2;
  }
  if (v39 >= 0) {
    size_t v41 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v41 = (size_t)a2[1];
  }
  int v42 = *((char *)a1 + 23);
  if (v42 >= 0) {
    unint64_t v43 = a1;
  }
  else {
    unint64_t v43 = *a1;
  }
  if (v42 >= 0) {
    size_t v44 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v44 = (size_t)a1[1];
  }
  if (v44 >= v41) {
    size_t v45 = v41;
  }
  else {
    size_t v45 = v44;
  }
  int v46 = memcmp(v40, v43, v45);
  if (v46)
  {
    if ((v46 & 0x80000000) == 0) {
      return result;
    }
  }
  else if (v41 >= v44)
  {
    return result;
  }
  uint64_t v50 = a1[2];
  __n128 result = *(__n128 *)a1;
  v51 = a2[2];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = v51;
  *(__n128 *)a2 = result;
  a2[2] = v50;
  return result;
}

__n128 sub_19E4917F0(uint64_t a1, long long *a2, long long *a3, const void **a4)
{
  sub_19E4915AC((const void **)a1, (const void **)a2, (const void **)a3);
  int v8 = *((char *)a4 + 23);
  if (v8 >= 0) {
    int v9 = a4;
  }
  else {
    int v9 = *a4;
  }
  if (v8 >= 0) {
    size_t v10 = *((unsigned __int8 *)a4 + 23);
  }
  else {
    size_t v10 = (size_t)a4[1];
  }
  int v11 = *((char *)a3 + 23);
  if (v11 >= 0) {
    size_t v12 = a3;
  }
  else {
    size_t v12 = *(const void **)a3;
  }
  if (v11 >= 0) {
    size_t v13 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v13 = *((void *)a3 + 1);
  }
  if (v13 >= v10) {
    size_t v14 = v10;
  }
  else {
    size_t v14 = v13;
  }
  int v15 = memcmp(v9, v12, v14);
  if (v15)
  {
    if ((v15 & 0x80000000) == 0) {
      return result;
    }
  }
  else if (v10 >= v13)
  {
    return result;
  }
  size_t v17 = (const void *)*((void *)a3 + 2);
  long long v18 = *a3;
  int v19 = a4[2];
  *a3 = *(_OWORD *)a4;
  *((void *)a3 + 2) = v19;
  *(_OWORD *)a4 = v18;
  a4[2] = v17;
  int v20 = *((char *)a3 + 23);
  if (v20 >= 0) {
    size_t v21 = a3;
  }
  else {
    size_t v21 = *(const void **)a3;
  }
  if (v20 >= 0) {
    size_t v22 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v22 = *((void *)a3 + 1);
  }
  int v23 = *((char *)a2 + 23);
  if (v23 >= 0) {
    int v24 = a2;
  }
  else {
    int v24 = *(const void **)a2;
  }
  if (v23 >= 0) {
    size_t v25 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v25 = *((void *)a2 + 1);
  }
  if (v25 >= v22) {
    size_t v26 = v22;
  }
  else {
    size_t v26 = v25;
  }
  int v27 = memcmp(v21, v24, v26);
  if (v27)
  {
    if ((v27 & 0x80000000) == 0) {
      return result;
    }
  }
  else if (v22 >= v25)
  {
    return result;
  }
  uint64_t v28 = *((void *)a2 + 2);
  long long v29 = *a2;
  uint64_t v30 = *((void *)a3 + 2);
  *a2 = *a3;
  *((void *)a2 + 2) = v30;
  *a3 = v29;
  *((void *)a3 + 2) = v28;
  int v31 = *((char *)a2 + 23);
  if (v31 >= 0) {
    uint64_t v32 = a2;
  }
  else {
    uint64_t v32 = *(const void **)a2;
  }
  if (v31 >= 0) {
    size_t v33 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v33 = *((void *)a2 + 1);
  }
  int v34 = *(char *)(a1 + 23);
  if (v34 >= 0) {
    int v35 = (const void *)a1;
  }
  else {
    int v35 = *(const void **)a1;
  }
  if (v34 >= 0) {
    size_t v36 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    size_t v36 = *(void *)(a1 + 8);
  }
  if (v36 >= v33) {
    size_t v37 = v33;
  }
  else {
    size_t v37 = v36;
  }
  int v38 = memcmp(v32, v35, v37);
  if (v38)
  {
    if ((v38 & 0x80000000) == 0) {
      return result;
    }
  }
  else if (v33 >= v36)
  {
    return result;
  }
  uint64_t v39 = *(void *)(a1 + 16);
  __n128 result = *(__n128 *)a1;
  uint64_t v40 = *((void *)a2 + 2);
  *(_OWORD *)a1 = *a2;
  *(void *)(a1 + 16) = v40;
  *a2 = (__int128)result;
  *((void *)a2 + 2) = v39;
  return result;
}

__n128 sub_19E491988(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4, const void **a5)
{
  sub_19E4917F0(a1, (long long *)a2, (long long *)a3, (const void **)a4);
  int v10 = *((char *)a5 + 23);
  if (v10 >= 0) {
    int v11 = a5;
  }
  else {
    int v11 = *a5;
  }
  if (v10 >= 0) {
    size_t v12 = *((unsigned __int8 *)a5 + 23);
  }
  else {
    size_t v12 = (size_t)a5[1];
  }
  int v13 = *((char *)a4 + 23);
  if (v13 >= 0) {
    size_t v14 = a4;
  }
  else {
    size_t v14 = *(long long **)a4;
  }
  if (v13 >= 0) {
    size_t v15 = *((unsigned __int8 *)a4 + 23);
  }
  else {
    size_t v15 = *((void *)a4 + 1);
  }
  if (v15 >= v12) {
    size_t v16 = v12;
  }
  else {
    size_t v16 = v15;
  }
  int v17 = memcmp(v11, v14, v16);
  if (v17)
  {
    if ((v17 & 0x80000000) == 0) {
      return result;
    }
  }
  else if (v12 >= v15)
  {
    return result;
  }
  int v19 = (const void *)*((void *)a4 + 2);
  long long v20 = *a4;
  size_t v21 = a5[2];
  *a4 = *(_OWORD *)a5;
  *((void *)a4 + 2) = v21;
  *(_OWORD *)a5 = v20;
  a5[2] = v19;
  int v22 = *((char *)a4 + 23);
  if (v22 >= 0) {
    int v23 = a4;
  }
  else {
    int v23 = *(long long **)a4;
  }
  if (v22 >= 0) {
    size_t v24 = *((unsigned __int8 *)a4 + 23);
  }
  else {
    size_t v24 = *((void *)a4 + 1);
  }
  int v25 = *(char *)(a3 + 23);
  if (v25 >= 0) {
    size_t v26 = (const void *)a3;
  }
  else {
    size_t v26 = *(const void **)a3;
  }
  if (v25 >= 0) {
    size_t v27 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    size_t v27 = *(void *)(a3 + 8);
  }
  if (v27 >= v24) {
    size_t v28 = v24;
  }
  else {
    size_t v28 = v27;
  }
  int v29 = memcmp(v23, v26, v28);
  if (v29)
  {
    if ((v29 & 0x80000000) == 0) {
      return result;
    }
  }
  else if (v24 >= v27)
  {
    return result;
  }
  uint64_t v30 = *(void *)(a3 + 16);
  long long v31 = *(_OWORD *)a3;
  uint64_t v32 = *((void *)a4 + 2);
  *(_OWORD *)a3 = *a4;
  *(void *)(a3 + 16) = v32;
  *a4 = v31;
  *((void *)a4 + 2) = v30;
  int v33 = *(char *)(a3 + 23);
  if (v33 >= 0) {
    int v34 = (const void *)a3;
  }
  else {
    int v34 = *(const void **)a3;
  }
  if (v33 >= 0) {
    size_t v35 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    size_t v35 = *(void *)(a3 + 8);
  }
  int v36 = *(char *)(a2 + 23);
  if (v36 >= 0) {
    size_t v37 = (const void *)a2;
  }
  else {
    size_t v37 = *(const void **)a2;
  }
  if (v36 >= 0) {
    size_t v38 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v38 = *(void *)(a2 + 8);
  }
  if (v38 >= v35) {
    size_t v39 = v35;
  }
  else {
    size_t v39 = v38;
  }
  int v40 = memcmp(v34, v37, v39);
  if (v40)
  {
    if ((v40 & 0x80000000) == 0) {
      return result;
    }
  }
  else if (v35 >= v38)
  {
    return result;
  }
  uint64_t v41 = *(void *)(a2 + 16);
  long long v42 = *(_OWORD *)a2;
  uint64_t v43 = *(void *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(void *)(a2 + 16) = v43;
  *(_OWORD *)a3 = v42;
  *(void *)(a3 + 16) = v41;
  int v44 = *(char *)(a2 + 23);
  if (v44 >= 0) {
    size_t v45 = (const void *)a2;
  }
  else {
    size_t v45 = *(const void **)a2;
  }
  if (v44 >= 0) {
    size_t v46 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v46 = *(void *)(a2 + 8);
  }
  int v47 = *(char *)(a1 + 23);
  if (v47 >= 0) {
    unint64_t v48 = (const void *)a1;
  }
  else {
    unint64_t v48 = *(const void **)a1;
  }
  if (v47 >= 0) {
    size_t v49 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    size_t v49 = *(void *)(a1 + 8);
  }
  if (v49 >= v46) {
    size_t v50 = v46;
  }
  else {
    size_t v50 = v49;
  }
  int v51 = memcmp(v45, v48, v50);
  if (v51)
  {
    if ((v51 & 0x80000000) == 0) {
      return result;
    }
  }
  else if (v46 >= v49)
  {
    return result;
  }
  uint64_t v52 = *(void *)(a1 + 16);
  __n128 result = *(__n128 *)a1;
  uint64_t v53 = *(void *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v53;
  *(__n128 *)a2 = result;
  *(void *)(a2 + 16) = v52;
  return result;
}

BOOL sub_19E491B9C(uint64_t a1, const void **a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = ((uint64_t)a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      int v6 = a2 - 3;
      int v7 = *((char *)a2 - 1);
      if (v7 >= 0) {
        int v8 = a2 - 3;
      }
      else {
        int v8 = (const void **)*(a2 - 3);
      }
      if (v7 >= 0) {
        size_t v9 = *((unsigned __int8 *)a2 - 1);
      }
      else {
        size_t v9 = (size_t)*(a2 - 2);
      }
      int v10 = *(char *)(a1 + 23);
      if (v10 >= 0) {
        int v11 = (const void *)a1;
      }
      else {
        int v11 = *(const void **)a1;
      }
      if (v10 >= 0) {
        size_t v12 = *(unsigned __int8 *)(a1 + 23);
      }
      else {
        size_t v12 = *(void *)(a1 + 8);
      }
      if (v12 >= v9) {
        size_t v13 = v9;
      }
      else {
        size_t v13 = v12;
      }
      int v14 = memcmp(v8, v11, v13);
      if (v14)
      {
        if ((v14 & 0x80000000) == 0) {
          return 1;
        }
      }
      else if (v9 >= v12)
      {
        return 1;
      }
      size_t v39 = *(const void **)(a1 + 16);
      long long v40 = *(_OWORD *)a1;
      uint64_t v41 = v6[2];
      *(_OWORD *)a1 = *(_OWORD *)v6;
      *(void *)(a1 + 16) = v41;
      *(_OWORD *)int v6 = v40;
      v6[2] = v39;
      return 1;
    case 3uLL:
      sub_19E4915AC((const void **)a1, (const void **)(a1 + 24), a2 - 3);
      return 1;
    case 4uLL:
      sub_19E4917F0(a1, (long long *)(a1 + 24), (long long *)(a1 + 48), a2 - 3);
      return 1;
    case 5uLL:
      sub_19E491988(a1, a1 + 24, a1 + 48, (long long *)(a1 + 72), a2 - 3);
      return 1;
    default:
      size_t v15 = (const void **)(a1 + 48);
      sub_19E4915AC((const void **)a1, (const void **)(a1 + 24), (const void **)(a1 + 48));
      size_t v16 = (const void **)(a1 + 72);
      if ((const void **)(a1 + 72) == v2) {
        return 1;
      }
      uint64_t v17 = 0;
      int v18 = 0;
      long long v42 = v2;
      break;
  }
  while (2)
  {
    int v21 = *((char *)v16 + 23);
    if (v21 >= 0) {
      int v22 = v16;
    }
    else {
      int v22 = *v16;
    }
    if (v21 >= 0) {
      size_t v23 = *((unsigned __int8 *)v16 + 23);
    }
    else {
      size_t v23 = (size_t)v16[1];
    }
    int v24 = *((char *)v15 + 23);
    if (v24 >= 0) {
      int v25 = v15;
    }
    else {
      int v25 = *v15;
    }
    if (v24 >= 0) {
      size_t v26 = *((unsigned __int8 *)v15 + 23);
    }
    else {
      size_t v26 = (size_t)v15[1];
    }
    if (v26 >= v23) {
      size_t v27 = v23;
    }
    else {
      size_t v27 = v26;
    }
    int v28 = memcmp(v22, v25, v27);
    if (v28)
    {
      if ((v28 & 0x80000000) == 0) {
        goto LABEL_25;
      }
    }
    else if (v23 >= v26)
    {
      goto LABEL_25;
    }
    long long v43 = *(_OWORD *)v16;
    int v44 = v16[2];
    *(_OWORD *)size_t v16 = *(_OWORD *)v15;
    v16[2] = v15[2];
    *((unsigned char *)v15 + 23) = 0;
    *(unsigned char *)size_t v15 = 0;
    uint64_t v19 = a1;
    if (v15 == (const void **)a1) {
      goto LABEL_24;
    }
    uint64_t v29 = v17;
    while (1)
    {
      uint64_t v30 = a1 + v29;
      long long v31 = (_OWORD *)(a1 + v29 + 24);
      uint64_t v32 = SHIBYTE(v44) >= 0 ? &v43 : (long long *)v43;
      unint64_t v33 = SHIBYTE(v44) >= 0 ? HIBYTE(v44) : *((void *)&v43 + 1);
      int v34 = *(char *)(v30 + 47);
      size_t v35 = v34 >= 0 ? (const void *)(a1 + v29 + 24) : *(const void **)(a1 + v29 + 24);
      unint64_t v36 = v34 >= 0 ? *(unsigned __int8 *)(v30 + 47) : *(void *)(v30 + 32);
      size_t v37 = v36 >= v33 ? v33 : v36;
      int v38 = memcmp(v32, v35, v37);
      if (!v38) {
        break;
      }
      if ((v38 & 0x80000000) == 0)
      {
        uint64_t v19 = a1 + v29 + 48;
        goto LABEL_23;
      }
LABEL_48:
      v15 -= 3;
      *(_OWORD *)(v30 + 48) = *v31;
      *(void *)(v30 + 64) = *(void *)(a1 + v29 + 40);
      *(unsigned char *)(v30 + 47) = 0;
      *(unsigned char *)long long v31 = 0;
      v29 -= 24;
      if (v29 == -48)
      {
        uint64_t v19 = a1;
        goto LABEL_23;
      }
    }
    if (v33 < v36) {
      goto LABEL_48;
    }
    uint64_t v19 = (uint64_t)v15;
LABEL_23:
    uint64_t v2 = v42;
LABEL_24:
    long long v20 = v43;
    *(void *)(v19 + 16) = v44;
    *(_OWORD *)uint64_t v19 = v20;
    if (++v18 == 8) {
      return v16 + 3 == v2;
    }
LABEL_25:
    size_t v15 = v16;
    v17 += 24;
    v16 += 3;
    if (v16 != v2) {
      continue;
    }
    return 1;
  }
}

void sub_19E491EA4(uint64_t a1, int a2, const __CFString *a3, const __CFString *a4, const __CFString *a5, CFStringRef theString, double a7)
{
  if (theString)
  {
    uint64_t Length = CFStringGetLength(theString);
    sub_19E37774C(a3, &v36);
    uint64_t v15 = HIBYTE(v37);
    if (v37 < 0) {
      uint64_t v15 = *((void *)&v36 + 1);
    }
    if (!v15 || !CEMStringContainsEmoji()) {
      goto LABEL_10;
    }
    uint64_t v28 = MEMORY[0x1E4F143A8];
    uint64_t v29 = 1174405120;
    uint64_t v30 = sub_19E4921A4;
    long long v31 = &unk_1EF0BECA0;
    uint64_t v32 = a1;
    if (SHIBYTE(v37) < 0)
    {
      sub_19E39369C(&v33, (void *)v36, *((unint64_t *)&v36 + 1));
    }
    else
    {
      long long v33 = v36;
      uint64_t v34 = v37;
    }
    double v35 = a7;
    CEMEnumerateEmojiTokensInStringWithBlock();
    if (SHIBYTE(v34) < 0)
    {
      operator delete((void *)v33);
      if (Length < 25)
      {
LABEL_30:
        if (SHIBYTE(v37) < 0) {
          operator delete((void *)v36);
        }
        return;
      }
    }
    else
    {
LABEL_10:
      if (Length < 25) {
        goto LABEL_30;
      }
    }
    CFStringRef v27 = 0;
    if (a4)
    {
      CFStringRef CanonicalLocaleIdentifierFromString = CFLocaleCreateCanonicalLocaleIdentifierFromString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a4);
    }
    else
    {
      v38.location = 0;
      v38.length = Length;
      CFStringRef CanonicalLocaleIdentifierFromString = CFStringTokenizerCopyBestStringLanguage(theString, v38);
    }
    CFStringRef v17 = CanonicalLocaleIdentifierFromString;
    CFStringRef v27 = CanonicalLocaleIdentifierFromString;
    sub_19E37774C(CanonicalLocaleIdentifierFromString, v25);
    unint64_t v18 = v26;
    unsigned __int8 v19 = v26;
    if ((v26 & 0x80u) != 0) {
      unint64_t v18 = (unint64_t)v25[1];
    }
    if (v18)
    {
      sub_19E37774C(a5, __p);
      long long v20 = sub_19E3F74E0((uint64_t **)(a1 + 152), (const void **)__p, (uint64_t)__p);
      int v21 = sub_19E3F7670(v20 + 7, (const void **)v25, (uint64_t)v25);
      *((_DWORD *)v21 + 14) += Length;
      if (a2 == 1)
      {
        *(unsigned char *)(a1 + 264) = 1;
        uint64_t v22 = HIBYTE(v37);
        if (v37 < 0) {
          uint64_t v22 = *((void *)&v36 + 1);
        }
        if (v22) {
          *((double *)sub_19E3CD25C((uint64_t **)(a1 + 200), (const void **)&v36, (uint64_t)&v36) + 7) = a7;
        }
      }
      *(unsigned char *)(a1 + 248) = 1;
      if (v24 < 0) {
        operator delete(__p[0]);
      }
      unsigned __int8 v19 = v26;
    }
    if ((v19 & 0x80) != 0)
    {
      operator delete(v25[0]);
      if (!v17) {
        goto LABEL_30;
      }
    }
    else if (!v17)
    {
      goto LABEL_30;
    }
    CFRelease(v17);
    goto LABEL_30;
  }
}

void sub_19E49210C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,const void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  sub_19E3DCC24(&a22);
  if (*(char *)(v33 - 81) < 0)
  {
    operator delete(*(void **)(v33 - 104));
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t **sub_19E4921A4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = (const void **)(a1 + 40);
  uint64_t v3 = *(uint64_t **)(a1 + 64);
  uint64_t v4 = sub_19E3F77F4((uint64_t **)(v1 + 176), v2, (uint64_t)v2);
  ++*((_DWORD *)v4 + 14);
  BOOL result = sub_19E3F77F4((uint64_t **)(v1 + 176), v2, (uint64_t)v2);
  result[8] = v3;
  *(unsigned char *)(v1 + 248) = 1;
  return result;
}

void sub_19E492218(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
}

void *sub_19E49222C(uint64_t a1, uint64_t a2)
{
  BOOL result = (void *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0) {
    return sub_19E39369C(result, *(void **)(a2 + 40), *(void *)(a2 + 48));
  }
  long long v3 = *(_OWORD *)(a2 + 40);
  result[2] = *(void *)(a2 + 56);
  *(_OWORD *)BOOL result = v3;
  return result;
}

void sub_19E49225C(uint64_t a1)
{
  sub_19E492294(a1);
  JUMPOUT(0x19F3BDCF0);
}

uint64_t sub_19E492294(uint64_t a1)
{
  *(void *)a1 = &unk_1EF0BBB80;
  uint64_t v2 = *(void **)(a1 + 8);
  long long v3 = (void *)(a1 + 16);
  if (v2 != (void *)(a1 + 16))
  {
    do
    {
      BOOL v5 = (void *)v2[7];
      if (v5)
      {
        int v6 = sub_19E491324(v5);
        MEMORY[0x19F3BDCF0](v6, 0x10E0C40868D66FELL);
      }
      int v7 = (void *)v2[1];
      if (v7)
      {
        do
        {
          int v8 = v7;
          int v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          int v8 = (void *)v2[2];
          BOOL v9 = *v8 == (void)v2;
          uint64_t v2 = v8;
        }
        while (!v9);
      }
      uint64_t v2 = v8;
    }
    while (v8 != v3);
  }
  sub_19E3CD3E0(*(char **)(a1 + 16));
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = 0;
  *(void *)(a1 + 8) = v3;
  if (*(char *)(a1 + 247) < 0) {
    operator delete(*(void **)(a1 + 224));
  }
  sub_19E3CD3E0(*(char **)(a1 + 208));
  sub_19E3CD3E0(*(char **)(a1 + 184));
  sub_19E3F6CDC(*(char **)(a1 + 160));
  sub_19E3F6D40(a1 + 56);
  sub_19E3CD3E0(*(char **)(a1 + 40));
  sub_19E3CD3E0(*(char **)(a1 + 16));
  return a1;
}

void *sub_19E4923A0(void *a1, uint64_t a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >= 0xAAAAAAAAAAAAAABLL) {
      sub_19E37C7C4();
    }
    uint64_t v5 = 24 * a3;
    int v6 = operator new(24 * a3);
    uint64_t v7 = 0;
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v5];
    do
    {
      BOOL v9 = &v6[v7];
      int v10 = (long long *)(a2 + v7);
      if (*(char *)(a2 + v7 + 23) < 0)
      {
        sub_19E39369C(&v6[v7], *(void **)v10, *((void *)v10 + 1));
      }
      else
      {
        long long v8 = *v10;
        *((void *)v9 + 2) = *((void *)v10 + 2);
        *(_OWORD *)BOOL v9 = v8;
      }
      v7 += 24;
    }
    while (v5 != v7);
    a1[1] = &v6[v7];
  }
  return a1;
}

void sub_19E492480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t sub_19E4924C8(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 64);
  if (v1[31]) {
    return 29;
  }
  if (v1[17] == v1[16]) {
    return 0xFFFFFFFFLL;
  }
  return 0;
}

void sub_19E4924EC(uint64_t a1@<X0>, CFDictionaryRef *a2@<X8>)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 64) + 232);
  int v4 = *(unsigned __int8 *)(v3 + 428);
  uint64_t v5 = (const void *)*MEMORY[0x1E4F1CFD0];
  int v6 = (const void *)*MEMORY[0x1E4F1CFC8];
  if (*(unsigned char *)(v3 + 429)) {
    uint64_t v7 = (const void *)*MEMORY[0x1E4F1CFD0];
  }
  else {
    uint64_t v7 = (const void *)*MEMORY[0x1E4F1CFC8];
  }
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  int v10 = Mutable;
  if (v4) {
    int v11 = v5;
  }
  else {
    int v11 = v6;
  }
  CFDictionarySetValue(Mutable, (const void *)kLMLanguageModelSwearWordPolicyEnabledKey, v11);
  CFDictionarySetValue(v10, (const void *)kLMLanguageModelSupportsNormalizedNameTokenKey, v7);
  if (*(char *)(v3 + 455) < 0)
  {
    sub_19E39369C(__p, *(void **)(v3 + 432), *(void *)(v3 + 440));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)(v3 + 432);
    uint64_t v15 = *(void *)(v3 + 448);
  }
  size_t v12 = (void *)HIBYTE(v15);
  if (v15 < 0) {
    size_t v12 = __p[1];
  }
  if (v12)
  {
    CFStringRef v13 = sub_19E3C2A64((uint64_t)__p);
    CFDictionarySetValue(v10, (const void *)kLMLanguageModelLegacyGenericNameTokenKey, v13);
    if (v13) {
      CFRelease(v13);
    }
  }
  *a2 = CFDictionaryCreateCopy(v8, v10);
  if (SHIBYTE(v15) < 0)
  {
    operator delete(__p[0]);
    if (!v10) {
      return;
    }
    goto LABEL_19;
  }
  if (v10) {
LABEL_19:
  }
    CFRelease(v10);
}

void sub_19E492660(uint64_t a1@<X0>, int a2@<W1>, CFDictionaryRef *a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 64);
  CFMutableArrayRef theArray = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  sub_19E432C84((char **)&__p, **(CFTypeRef **)(v5 + 416), a2);
  int v6 = (CFDictionaryRef **)__p;
  uint64_t v7 = v15;
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  while (v6 != v7)
  {
    CFDictionaryRef Copy = CFDictionaryCreateCopy(v8, **v6);
    CFArrayAppendValue(theArray, Copy);
    if (Copy) {
      CFRelease(Copy);
    }
    v6 += 2;
  }
  *a3 = CFDictionaryCreate(v8, (const void **)&kLMLinguisticDataResources, (const void **)&theArray, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  int v10 = (CFDictionaryRef **)__p;
  if (__p)
  {
    int v11 = v15;
    size_t v12 = __p;
    if (v15 != __p)
    {
      do
      {
        CFStringRef v13 = (std::__shared_weak_count *)*(v11 - 1);
        if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        v11 -= 2;
      }
      while (v11 != v10);
      size_t v12 = __p;
    }
    uint64_t v15 = v10;
    operator delete(v12);
  }
  if (theArray) {
    CFRelease(theArray);
  }
}

void sub_19E4927DC(void *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  int v4 = va_arg(va1, void *);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_19E3D7338((void **)va);
  sub_19E3F6818((const void **)va1);
  sub_19E37B770(a1);
}

uint64_t sub_19E49281C(uint64_t a1)
{
  return a1 + 168;
}

uint64_t sub_19E492824(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 64) + 248);
  if (v1) {
    return (*(uint64_t (**)(void))(**(void **)(*(void *)(v1 + 16) + 16) + 72))();
  }
  return result;
}

void sub_19E492860(uint64_t a1)
{
}

void sub_19E492868(uint64_t a1)
{
}

void sub_19E492870(uint64_t a1)
{
}

void sub_19E49287C(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 64);
  if (*(unsigned char *)(v1[29] + 192))
  {
    uint64_t v2 = v1[6];
    if (v2)
    {
      sub_19E42CFDC(v2);
      uint64_t v3 = (std::recursive_mutex *)v1[58];
      if (v3)
      {
        std::recursive_mutex::lock(v3);
        sub_19E42CFDC(v3[2].__m_.__sig);
        std::recursive_mutex::unlock(v3);
      }
    }
  }
}

void sub_19E4928EC(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19E492900(uint64_t a1, void *cf)
{
  if (!cf) {
    __assert_rtn("removeVocabulary", "TokenIDLanguageModel.cpp", 324, "vocabulary");
  }
  uint64_t v3 = *(void **)(a1 + 64);
  uint64_t v4 = cf[3];
  uint64_t v6 = (char *)v3[3];
  uint64_t v5 = (char *)v3[4];
  if (v6 != v5)
  {
    while (*(void *)v6 != v4)
    {
      v6 += 8;
      if (v6 == v5)
      {
        uint64_t v6 = (char *)v3[4];
        break;
      }
    }
  }
  if (v6 != v5)
  {
    int64_t v7 = v5 - (v6 + 8);
    if (v5 != v6 + 8) {
      memmove(v6, v6 + 8, v5 - (v6 + 8));
    }
    v3[4] = &v6[v7];
    uint64_t v8 = v3[31];
    if (v8) {
      (*(void (**)(void, uint64_t))(**(void **)(*(void *)(v8 + 16) + 16) + 104))(*(void *)(*(void *)(v8 + 16) + 16), v4);
    }
  }
  CFRelease(cf);
}

void sub_19E4929F8(uint64_t a1, uint64_t *cf)
{
  if (!cf) {
    __assert_rtn("addVocabulary", "TokenIDLanguageModel.cpp", 317, "vocabulary");
  }
  CFRetain(cf);
  uint64_t v4 = *(void **)(a1 + 64);
  uint64_t v5 = cf[3];
  sub_19E417004(v4, v5);
}

void sub_19E492A60(uint64_t a1, const void **a2)
{
  uint64_t v2 = *(void **)(a1 + 64);
  unint64_t v3 = sub_19E492AA0(a2);
  sub_19E4177F0(v2, v3);
}

uint64_t sub_19E492AA0(const void **a1)
{
  int v2 = *((char *)a1 + 23);
  if (v2 >= 0) {
    size_t v3 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v3 = (size_t)a1[1];
  }
  if (v3 == strlen((const char *)language_modeling::v1::kStaticPhraseLexicon))
  {
    uint64_t v4 = v2 >= 0 ? a1 : (const void **)*a1;
    if (!memcmp(v4, (const void *)language_modeling::v1::kStaticPhraseLexicon, v3)) {
      return 0;
    }
  }
  if (v3 == strlen((const char *)language_modeling::v1::kNamedEntityWordLexicon))
  {
    uint64_t v5 = v2 >= 0 ? a1 : (const void **)*a1;
    if (!memcmp(v5, (const void *)language_modeling::v1::kNamedEntityWordLexicon, v3)) {
      return 1;
    }
  }
  if (v3 == strlen((const char *)language_modeling::v1::kNamedEntityPhraseLexicon))
  {
    uint64_t v6 = v2 >= 0 ? a1 : (const void **)*a1;
    if (!memcmp(v6, (const void *)language_modeling::v1::kNamedEntityPhraseLexicon, v3)) {
      return 2;
    }
  }
  if (v3 == strlen((const char *)language_modeling::v1::kSupplementalWordLexicon))
  {
    int64_t v7 = v2 >= 0 ? a1 : (const void **)*a1;
    if (!memcmp(v7, (const void *)language_modeling::v1::kSupplementalWordLexicon, v3)) {
      return 3;
    }
  }
  if (v3 == strlen((const char *)language_modeling::v1::kSupplementalPhraseLexicon))
  {
    uint64_t v8 = v2 >= 0 ? a1 : (const void **)*a1;
    if (!memcmp(v8, (const void *)language_modeling::v1::kSupplementalPhraseLexicon, v3)) {
      return 4;
    }
  }
  if (v3 != strlen((const char *)language_modeling::v1::kContactNamesWordLexicon)
    || (v2 >= 0 ? (BOOL v9 = a1) : (BOOL v9 = *a1), memcmp(v9, (const void *)language_modeling::v1::kContactNamesWordLexicon, v3)))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::logic_error::logic_error(exception, &v12);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4E8] + 16);
    __cxa_throw(exception, (struct type_info *)off_1E599EF10, MEMORY[0x1E4FBA1E8]);
  }
  return 5;
}

void sub_19E492CBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void sub_19E492CF4(uint64_t a1, const void *a2, const void **a3)
{
  uint64_t v4 = *(void **)(a1 + 64);
  unint64_t v5 = sub_19E492AA0(a3);
  sub_19E4171F0(v4, a2, v5);
}

uint64_t sub_19E492D3C(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 64) + 176);
}

void sub_19E492D48(uint64_t a1, const void *a2)
{
  sub_19E4086B8(*(void **)(a1 + 64), a2);
  sub_19E492D84(a1);
}

void sub_19E492D84(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 64);
  int v2 = *(uint64_t ***)(v1 + 184);
  size_t v3 = *(uint64_t ***)(v1 + 192);
  if (v2 != v3)
  {
    uint64_t v4 = (void *)(a1 + 88);
    do
    {
      sub_19E410C70(__p, **v2);
      if (!sub_19E493018(v4, (uint64_t)__p)) {
        operator new();
      }
      if (v6 < 0) {
        operator delete(__p[0]);
      }
      v2 += 2;
    }
    while (v2 != v3);
  }
}

void sub_19E492F5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_19E493018(void *a1, uint64_t a2)
{
  int v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = sub_19E37BDA4((uint64_t)&v25, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (v7)
  {
    unint64_t v8 = v6;
    uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v10 = v6;
      if (v6 >= *(void *)&v7) {
        unint64_t v10 = v6 % *(void *)&v7;
      }
    }
    else
    {
      unint64_t v10 = (*(void *)&v7 - 1) & v6;
    }
    int v11 = *(uint64_t ***)(*a1 + 8 * v10);
    if (v11)
    {
      std::string v12 = *v11;
      if (*v11)
      {
        char v13 = v2[23];
        if (v13 >= 0) {
          uint64_t v14 = v2[23];
        }
        else {
          uint64_t v14 = *((void *)v2 + 1);
        }
        if (v13 < 0) {
          int v2 = *(unsigned char **)v2;
        }
        if (v9.u32[0] < 2uLL)
        {
          uint64_t v15 = *(void *)&v7 - 1;
          while (1)
          {
            uint64_t v21 = v12[1];
            if (v8 == v21)
            {
              uint64_t v22 = *((unsigned __int8 *)v12 + 39);
              if ((v22 & 0x80u) == 0) {
                uint64_t v23 = *((unsigned __int8 *)v12 + 39);
              }
              else {
                uint64_t v23 = v12[3];
              }
              if (v23 == v14)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v12[2], v2, v12[3])) {
                    return v12;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v12 + 39)) {
                    return v12;
                  }
                  uint64_t v24 = 0;
                  while (*((unsigned __int8 *)v12 + v24 + 16) == v2[v24])
                  {
                    if (v22 == ++v24) {
                      return v12;
                    }
                  }
                }
              }
            }
            else if ((v21 & v15) != v10)
            {
              return 0;
            }
            BOOL result = 0;
            std::string v12 = (uint64_t *)*v12;
            if (!v12) {
              return result;
            }
          }
        }
        while (1)
        {
          unint64_t v17 = v12[1];
          if (v8 == v17)
          {
            uint64_t v18 = *((unsigned __int8 *)v12 + 39);
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = *((unsigned __int8 *)v12 + 39);
            }
            else {
              uint64_t v19 = v12[3];
            }
            if (v19 == v14)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v12[2], v2, v12[3])) {
                  return v12;
                }
              }
              else
              {
                if (!*((unsigned char *)v12 + 39)) {
                  return v12;
                }
                uint64_t v20 = 0;
                while (*((unsigned __int8 *)v12 + v20 + 16) == v2[v20])
                {
                  if (v18 == ++v20) {
                    return v12;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= *(void *)&v7) {
              v17 %= *(void *)&v7;
            }
            if (v17 != v10) {
              return 0;
            }
          }
          BOOL result = 0;
          std::string v12 = (uint64_t *)*v12;
          if (!v12) {
            return result;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t *sub_19E493218(uint64_t a1, uint64_t a2, long long **a3)
{
  unint64_t v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = sub_19E37BDA4((uint64_t)v56, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    char v13 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      uint64_t v14 = *v13;
      if (*v13)
      {
        char v15 = v5[23];
        if (v15 >= 0) {
          uint64_t v16 = v5[23];
        }
        else {
          uint64_t v16 = *((void *)v5 + 1);
        }
        if (v15 < 0) {
          unint64_t v5 = *(unsigned char **)v5;
        }
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v21 = v14[1];
            if (v21 == v10)
            {
              uint64_t v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0) {
                uint64_t v23 = *((unsigned __int8 *)v14 + 39);
              }
              else {
                uint64_t v23 = v14[3];
              }
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3])) {
                    return v14;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v14 + 39)) {
                    return v14;
                  }
                  uint64_t v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24) {
                      return v14;
                    }
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            uint64_t v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v17 = v14[1];
          if (v17 == v10)
          {
            uint64_t v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = *((unsigned __int8 *)v14 + 39);
            }
            else {
              uint64_t v19 = v14[3];
            }
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3])) {
                  return v14;
                }
              }
              else
              {
                if (!*((unsigned char *)v14 + 39)) {
                  return v14;
                }
                uint64_t v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20) {
                    return v14;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
            if (v17 != v3) {
              break;
            }
          }
          uint64_t v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  char v25 = (void *)(a1 + 16);
  unsigned __int8 v26 = operator new(0x30uLL);
  v56[0] = v26;
  v56[1] = a1 + 16;
  char v57 = 0;
  *unsigned __int8 v26 = 0;
  v26[1] = v10;
  CFStringRef v27 = v26 + 2;
  uint64_t v28 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    sub_19E39369C(v27, *(void **)v28, *((void *)v28 + 1));
  }
  else
  {
    long long v29 = *v28;
    v26[4] = *((void *)v28 + 2);
    *(_OWORD *)CFStringRef v27 = v29;
  }
  v26[5] = 0;
  char v57 = 1;
  float v30 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v31 = *(float *)(a1 + 32);
  if (!v11 || (float)(v31 * (float)v11) < v30)
  {
    BOOL v32 = 1;
    if (v11 >= 3) {
      BOOL v32 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v33 = v32 | (2 * v11);
    unint64_t v34 = vcvtps_u32_f32(v30 / v31);
    if (v33 <= v34) {
      size_t prime = v34;
    }
    else {
      size_t prime = v33;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    if (prime <= v11)
    {
      if (prime >= v11) {
        goto LABEL_91;
      }
      unint64_t v46 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v11 < 3 || (uint8x8_t v47 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v47.i16[0] = vaddlv_u8(v47), v47.u32[0] > 1uLL))
      {
        unint64_t v46 = std::__next_prime(v46);
      }
      else
      {
        uint64_t v48 = 1 << -(char)__clz(v46 - 1);
        if (v46 >= 2) {
          unint64_t v46 = v48;
        }
      }
      if (prime <= v46) {
        size_t prime = v46;
      }
      if (prime >= v11)
      {
        unint64_t v11 = *(void *)(a1 + 8);
LABEL_91:
        if ((v11 & (v11 - 1)) != 0)
        {
          if (v10 >= v11) {
            unint64_t v3 = v10 % v11;
          }
          else {
            unint64_t v3 = v10;
          }
        }
        else
        {
          unint64_t v3 = (v11 - 1) & v10;
        }
        goto LABEL_104;
      }
      if (!prime)
      {
        uint64_t v55 = *(void **)a1;
        *(void *)a1 = 0;
        if (v55) {
          operator delete(v55);
        }
        unint64_t v11 = 0;
        *(void *)(a1 + 8) = 0;
        goto LABEL_91;
      }
    }
    if (prime >> 61) {
      sub_19E37C2B8();
    }
    long long v36 = operator new(8 * prime);
    uint64_t v37 = *(void **)a1;
    *(void *)a1 = v36;
    if (v37) {
      operator delete(v37);
    }
    uint64_t v38 = 0;
    *(void *)(a1 + 8) = prime;
    do
      *(void *)(*(void *)a1 + 8 * v38++) = 0;
    while (prime != v38);
    size_t v39 = (void *)*v25;
    if (!*v25)
    {
LABEL_90:
      unint64_t v11 = prime;
      goto LABEL_91;
    }
    size_t v40 = v39[1];
    size_t v41 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v42 = v40 & v41;
      *(void *)(*(void *)a1 + 8 * v42) = v25;
      for (unint64_t i = (void *)*v39; *v39; unint64_t i = (void *)*v39)
      {
        size_t v44 = i[1] & v41;
        if (v44 == v42)
        {
          size_t v39 = i;
        }
        else if (*(void *)(*(void *)a1 + 8 * v44))
        {
          *size_t v39 = *i;
          uint64_t v45 = 8 * v44;
          void *i = **(void **)(*(void *)a1 + v45);
          **(void **)(*(void *)a1 + v45) = i;
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v44) = v39;
          size_t v39 = i;
          size_t v42 = v44;
        }
      }
      goto LABEL_90;
    }
    if (v40 >= prime) {
      v40 %= prime;
    }
    *(void *)(*(void *)a1 + 8 * v40) = v25;
    size_t v49 = (void *)*v39;
    if (!*v39) {
      goto LABEL_90;
    }
    while (1)
    {
      size_t v51 = v49[1];
      if (v51 >= prime) {
        v51 %= prime;
      }
      if (v51 != v40)
      {
        if (!*(void *)(*(void *)a1 + 8 * v51))
        {
          *(void *)(*(void *)a1 + 8 * v51) = v39;
          goto LABEL_95;
        }
        *size_t v39 = *v49;
        uint64_t v50 = 8 * v51;
        *size_t v49 = **(void **)(*(void *)a1 + v50);
        **(void **)(*(void *)a1 + v50) = v49;
        size_t v49 = v39;
      }
      size_t v51 = v40;
LABEL_95:
      size_t v39 = v49;
      size_t v49 = (void *)*v49;
      size_t v40 = v51;
      if (!v49) {
        goto LABEL_90;
      }
    }
  }
LABEL_104:
  uint64_t v52 = *(void **)(*(void *)a1 + 8 * v3);
  if (v52)
  {
    *(void *)v56[0] = *v52;
    void *v52 = v56[0];
  }
  else
  {
    *(void *)v56[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v56[0];
    *(void *)(*(void *)a1 + 8 * v3) = v25;
    if (*(void *)v56[0])
    {
      unint64_t v53 = *(void *)(*(void *)v56[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v53 >= v11) {
          v53 %= v11;
        }
      }
      else
      {
        v53 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v53) = v56[0];
    }
  }
  uint64_t v14 = (uint64_t *)v56[0];
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_19E4937AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E4937C8((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_19E4937C8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      uint64_t v3 = *(void *)(v2 + 40);
      *(void *)(v2 + 40) = 0;
      if (v3) {
        (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
      }
      if (*(char *)(v2 + 39) < 0) {
        operator delete(*(void **)(v2 + 16));
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t sub_19E493848(uint64_t *a1, uint64_t a2, uint64_t *a3, int a4)
{
  uint64_t v128 = *MEMORY[0x1E4F143B8];
  if (!*(_DWORD *)(a2 + 24))
  {
    uint64_t v7 = *(void *)(*a3 + 8);
    if (v7 != *(void *)*a3)
    {
      uint64_t v9 = a2;
      unint64_t v10 = a1;
      uint64_t v11 = a1[8];
      uint64_t v12 = *(void *)(v11 + 464);
      if (v12)
      {
        uint64_t v13 = sub_19E4B5FF0(v12, v7 - 32);
        if (v13)
        {
          if (sub_19E4B6488(*(std::recursive_mutex **)(v11 + 464), v13)) {
            return 1;
          }
        }
      }
      uint64_t v14 = *a3;
      __n128 v117 = 0;
      int v118 = 0;
      v119 = 0;
      uint64_t v15 = v10[8];
      uint64_t v16 = *(uint64_t ***)(v15 + 184);
      unint64_t v17 = *(uint64_t ***)(v15 + 192);
      if (v16 == v17)
      {
        uint64_t v4 = 0;
      }
      else
      {
        uint64_t v4 = 0;
        uint64_t v18 = v10 + 11;
        int v109 = v10 + 16;
        int v113 = a4;
        uint64_t v111 = v10;
        uint64_t v112 = v9;
        uint64_t v114 = v14;
        do
        {
          sub_19E410C70(__p, **v16);
          uint64_t v21 = sub_19E493018(v18, (uint64_t)__p);
          if (((*(uint64_t (**)(uint64_t))(*(void *)v21[5] + 48))(v21[5]) & 1) == 0)
          {
            if (qword_1E945A1D0 != -1) {
              dispatch_once(&qword_1E945A1D0, &unk_1EF0BECD0);
            }
            char v25 = qword_1E945A1C8;
            if (os_log_type_enabled((os_log_t)qword_1E945A1C8, OS_LOG_TYPE_ERROR))
            {
              int v57 = v116;
              unint64_t v58 = (void **)__p[0];
              sub_19E3EA00C(&v124, (long long **)v14);
              size_t v59 = __p;
              if (v57 < 0) {
                size_t v59 = v58;
              }
              int v60 = (void **)&v124;
              if (v126 < 0) {
                int v60 = v124;
              }
              *(_DWORD *)std::string buf = 136315394;
              int v121 = v59;
              __int16 v122 = 2080;
              size_t v123 = v60;
              _os_log_error_impl(&dword_19E36B000, v25, OS_LOG_TYPE_ERROR, "BlocklistStatus check skipped for locale: %s - Unable to convert blocklist tokens ('%s')", buf, 0x16u);
              if (v126 < 0) {
                operator delete(v124);
              }
            }
            int v26 = 3;
            if (v116 < 0) {
              goto LABEL_11;
            }
            goto LABEL_12;
          }
          unint64_t v22 = *((unsigned int *)sub_19E44FFC0(v109, (uint64_t)__p) + 10);
          uint64_t v23 = sub_19E493018(v18, (uint64_t)__p)[5];
          size_t v124 = (void **)&unk_1EF0B5500;
          uint64_t v125 = v23;
          uint64_t v127 = (void **)&v124;
          sub_19E3F9E24(v14, v22, (uint64_t)&v124);
          if (v127 == (void **)&v124)
          {
            ((void (*)(void ***))v124[4])(&v124);
            unint64_t v24 = *(void *)(v14 + 56);
            if (!v24) {
              goto LABEL_51;
            }
          }
          else
          {
            if (v127) {
              (*((void (**)(void))*v127 + 5))();
            }
            unint64_t v24 = *(void *)(v14 + 56);
            if (!v24) {
              goto LABEL_51;
            }
          }
          uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)v24);
          v27.i16[0] = vaddlv_u8(v27);
          if (v27.u32[0] > 1uLL)
          {
            unint64_t v28 = v22;
            if (v24 <= v22) {
              unint64_t v28 = v22 % v24;
            }
          }
          else
          {
            unint64_t v28 = (v24 - 1) & v22;
          }
          long long v29 = *(uint64_t ***)(*(void *)(v14 + 48) + 8 * v28);
          if (!v29 || (float v30 = *v29) == 0)
          {
LABEL_50:
            unint64_t v24 = 0;
LABEL_51:
            unint64_t v34 = 0;
            goto LABEL_52;
          }
          if (v27.u32[0] < 2uLL)
          {
            unint64_t v31 = v24 - 1;
            while (1)
            {
              uint64_t v33 = v30[1];
              if (v33 == v22)
              {
                if (*((_DWORD *)v30 + 4) == v22) {
                  goto LABEL_83;
                }
              }
              else if ((v33 & v31) != v28)
              {
                goto LABEL_50;
              }
              float v30 = (uint64_t *)*v30;
              if (!v30) {
                goto LABEL_50;
              }
            }
          }
          while (1)
          {
            unint64_t v32 = v30[1];
            if (v32 == v22) {
              break;
            }
            if (v32 >= v24) {
              v32 %= v24;
            }
            if (v32 != v28) {
              goto LABEL_50;
            }
LABEL_40:
            float v30 = (uint64_t *)*v30;
            if (!v30) {
              goto LABEL_50;
            }
          }
          if (*((_DWORD *)v30 + 4) != v22) {
            goto LABEL_40;
          }
LABEL_83:
          unint64_t v34 = (char *)v30[3];
          unint64_t v24 = (v30[4] - (uint64_t)v34) >> 2;
LABEL_52:
          if (*(_DWORD *)&v34[4 * v24 - 4] == 2) {
            --v24;
          }
          sub_19E494468(&v117, v34, &v34[4 * v24], (uint64_t)(4 * v24) >> 2);
          double v35 = sub_19E493018(v18, (uint64_t)__p);
          int v36 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v35[5] + 16))(v35[5], v9);
          int v37 = v36;
          uint64_t v38 = v118;
          if (v118 < v119)
          {
            *(_DWORD *)int v118 = v36;
            size_t v39 = v38 + 4;
            int v40 = v113;
            unint64_t v10 = v111;
            uint64_t v9 = v112;
            uint64_t v14 = v114;
            goto LABEL_78;
          }
          size_t v41 = (char *)v117;
          int64_t v42 = v118 - (unsigned char *)v117;
          uint64_t v43 = (v118 - (unsigned char *)v117) >> 2;
          unint64_t v44 = v43 + 1;
          if ((unint64_t)(v43 + 1) >> 62) {
            sub_19E37C7C4();
          }
          uint64_t v45 = v119 - (unsigned char *)v117;
          if ((v119 - (unsigned char *)v117) >> 1 > v44) {
            unint64_t v44 = v45 >> 1;
          }
          if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v46 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v46 = v44;
          }
          if (v46)
          {
            if (v46 >> 62) {
              sub_19E37C2B8();
            }
            uint8x8_t v47 = (char *)operator new(4 * v46);
          }
          else
          {
            uint8x8_t v47 = 0;
          }
          uint64_t v48 = &v47[4 * v43];
          *(_DWORD *)uint64_t v48 = v37;
          size_t v39 = v48 + 4;
          if (v38 == v41)
          {
            uint64_t v14 = v114;
          }
          else
          {
            unint64_t v49 = v38 - 4 - v41;
            if (v49 < 0x2C)
            {
              uint64_t v14 = v114;
              goto LABEL_74;
            }
            unint64_t v50 = v38 - &v47[v42];
            uint64_t v14 = v114;
            if (v50 < 0x20) {
              goto LABEL_184;
            }
            uint64_t v51 = (v49 >> 2) + 1;
            uint64_t v52 = &v47[4 * v43 - 16];
            unint64_t v53 = v38 - 16;
            uint64_t v54 = v51 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v55 = *(_OWORD *)v53;
              *((_OWORD *)v52 - 1) = *((_OWORD *)v53 - 1);
              *(_OWORD *)uint64_t v52 = v55;
              v52 -= 32;
              v53 -= 32;
              v54 -= 8;
            }
            while (v54);
            v48 -= 4 * (v51 & 0x7FFFFFFFFFFFFFF8);
            v38 -= 4 * (v51 & 0x7FFFFFFFFFFFFFF8);
            if (v51 != (v51 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_184:
              do
              {
LABEL_74:
                int v56 = *((_DWORD *)v38 - 1);
                v38 -= 4;
                *((_DWORD *)v48 - 1) = v56;
                v48 -= 4;
              }
              while (v38 != v41);
            }
          }
          __n128 v117 = v48;
          int v118 = v39;
          v119 = &v47[4 * v46];
          if (v41) {
            operator delete(v41);
          }
          int v40 = v113;
          unint64_t v10 = v111;
          uint64_t v9 = v112;
LABEL_78:
          int v118 = v39;
          uint64_t v4 = sub_19E41566C(v10[8], (uint64_t)v117, (v39 - (unsigned char *)v117) >> 2, 2, 0, 0, v40, *v16);
          if (v4) {
            int v26 = 2;
          }
          else {
            int v26 = 0;
          }
          if (v116 < 0) {
LABEL_11:
          }
            operator delete(__p[0]);
LABEL_12:
          BOOL v19 = v26 == 3 || v26 == 0;
          v16 += 2;
        }
        while (v19 && v16 != v17);
        if (v4 != 1)
        {
          uint64_t v61 = v10[8];
          int v62 = *(uint64_t ***)(v61 + 184);
          uint64_t v63 = *(uint64_t ***)(v61 + 192);
          if (v62 != v63)
          {
            uint64_t v4 = 0;
            unint64_t v64 = v10 + 11;
            uint64_t v110 = v10 + 16;
            while (1)
            {
              sub_19E410C70(__p, **v62);
              v67 = sub_19E493018(v64, (uint64_t)__p);
              if (((*(uint64_t (**)(uint64_t))(*(void *)v67[5] + 48))(v67[5]) & 1) == 0)
              {
                if (qword_1E945A1D0 != -1) {
                  dispatch_once(&qword_1E945A1D0, &unk_1EF0BECD0);
                }
                __n128 v71 = qword_1E945A1C8;
                if (os_log_type_enabled((os_log_t)qword_1E945A1C8, OS_LOG_TYPE_ERROR))
                {
                  int v104 = v116;
                  uint64_t v105 = (void **)__p[0];
                  sub_19E3EA00C(&v124, (long long **)v14);
                  unint64_t v106 = __p;
                  if (v104 < 0) {
                    unint64_t v106 = v105;
                  }
                  if (v126 >= 0) {
                    unint64_t v107 = (void **)&v124;
                  }
                  else {
                    unint64_t v107 = v124;
                  }
                  *(_DWORD *)std::string buf = 136315394;
                  int v121 = v106;
                  __int16 v122 = 2080;
                  size_t v123 = v107;
                  _os_log_error_impl(&dword_19E36B000, v71, OS_LOG_TYPE_ERROR, "BlocklistStatus check skipped for locale: %s - Unable to convert blocklist tokens ('%s')", buf, 0x16u);
                  if (v126 < 0) {
                    operator delete(v124);
                  }
                }
                int v72 = 5;
                if (v116 < 0) {
                  goto LABEL_93;
                }
                goto LABEL_94;
              }
              unint64_t v68 = *((unsigned int *)sub_19E44FFC0(v110, (uint64_t)__p) + 10);
              uint64_t v69 = sub_19E493018(v64, (uint64_t)__p)[5];
              size_t v124 = (void **)&unk_1EF0B5500;
              uint64_t v125 = v69;
              uint64_t v127 = (void **)&v124;
              sub_19E3F9E24(v14, v68, (uint64_t)&v124);
              if (v127 == (void **)&v124)
              {
                ((void (*)(void ***))v124[4])(&v124);
                unint64_t v70 = *(void *)(v14 + 56);
                if (!v70) {
                  goto LABEL_133;
                }
              }
              else
              {
                if (v127) {
                  (*((void (**)(void))*v127 + 5))();
                }
                unint64_t v70 = *(void *)(v14 + 56);
                if (!v70) {
                  goto LABEL_133;
                }
              }
              uint8x8_t v73 = (uint8x8_t)vcnt_s8((int8x8_t)v70);
              v73.i16[0] = vaddlv_u8(v73);
              if (v73.u32[0] > 1uLL)
              {
                unint64_t v74 = v68;
                if (v70 <= v68) {
                  unint64_t v74 = v68 % v70;
                }
              }
              else
              {
                unint64_t v74 = (v70 - 1) & v68;
              }
              size_t v75 = *(uint64_t ***)(*(void *)(v14 + 48) + 8 * v74);
              if (!v75 || (BOOL v76 = *v75) == 0)
              {
LABEL_132:
                unint64_t v70 = 0;
LABEL_133:
                size_t v80 = 0;
                goto LABEL_134;
              }
              if (v73.u32[0] < 2uLL)
              {
                unint64_t v77 = v70 - 1;
                while (1)
                {
                  uint64_t v79 = v76[1];
                  if (v79 == v68)
                  {
                    if (*((_DWORD *)v76 + 4) == v68) {
                      goto LABEL_165;
                    }
                  }
                  else if ((v79 & v77) != v74)
                  {
                    goto LABEL_132;
                  }
                  BOOL v76 = (uint64_t *)*v76;
                  if (!v76) {
                    goto LABEL_132;
                  }
                }
              }
              while (1)
              {
                unint64_t v78 = v76[1];
                if (v78 == v68) {
                  break;
                }
                if (v78 >= v70) {
                  v78 %= v70;
                }
                if (v78 != v74) {
                  goto LABEL_132;
                }
LABEL_122:
                BOOL v76 = (uint64_t *)*v76;
                if (!v76) {
                  goto LABEL_132;
                }
              }
              if (*((_DWORD *)v76 + 4) != v68) {
                goto LABEL_122;
              }
LABEL_165:
              size_t v80 = (char *)v76[3];
              unint64_t v70 = (v76[4] - (uint64_t)v80) >> 2;
LABEL_134:
              if (*(_DWORD *)&v80[4 * v70 - 4] == 2) {
                --v70;
              }
              sub_19E494468(&v117, v80, &v80[4 * v70], (uint64_t)(4 * v70) >> 2);
              int v81 = sub_19E493018(v64, (uint64_t)__p);
              int v82 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v81[5] + 16))(v81[5], v9);
              int v83 = v82;
              size_t v84 = v118;
              if (v118 < v119)
              {
                *(_DWORD *)int v118 = v82;
                size_t v85 = v84 + 4;
                int v86 = v111;
                uint64_t v14 = v114;
                goto LABEL_160;
              }
              unint64_t v87 = (char *)v117;
              int64_t v88 = v118 - (unsigned char *)v117;
              uint64_t v89 = (v118 - (unsigned char *)v117) >> 2;
              unint64_t v90 = v89 + 1;
              if ((unint64_t)(v89 + 1) >> 62) {
                sub_19E37C7C4();
              }
              uint64_t v91 = v119 - (unsigned char *)v117;
              if ((v119 - (unsigned char *)v117) >> 1 > v90) {
                unint64_t v90 = v91 >> 1;
              }
              if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v92 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v92 = v90;
              }
              if (v92)
              {
                if (v92 >> 62) {
                  sub_19E37C2B8();
                }
                size_t v93 = (char *)operator new(4 * v92);
              }
              else
              {
                size_t v93 = 0;
              }
              int v94 = &v93[4 * v89];
              *(_DWORD *)int v94 = v83;
              size_t v85 = v94 + 4;
              if (v84 == v87)
              {
                uint64_t v14 = v114;
              }
              else
              {
                unint64_t v95 = v84 - 4 - v87;
                if (v95 < 0x2C)
                {
                  uint64_t v14 = v114;
                  goto LABEL_156;
                }
                unint64_t v96 = v84 - &v93[v88];
                uint64_t v14 = v114;
                if (v96 < 0x20) {
                  goto LABEL_185;
                }
                uint64_t v97 = (v95 >> 2) + 1;
                int v98 = &v93[4 * v89 - 16];
                __n128 v99 = v84 - 16;
                uint64_t v100 = v97 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  long long v101 = *(_OWORD *)v99;
                  *((_OWORD *)v98 - 1) = *((_OWORD *)v99 - 1);
                  *(_OWORD *)int v98 = v101;
                  v98 -= 32;
                  v99 -= 32;
                  v100 -= 8;
                }
                while (v100);
                v94 -= 4 * (v97 & 0x7FFFFFFFFFFFFFF8);
                v84 -= 4 * (v97 & 0x7FFFFFFFFFFFFFF8);
                if (v97 != (v97 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_185:
                  do
                  {
LABEL_156:
                    int v102 = *((_DWORD *)v84 - 1);
                    v84 -= 4;
                    *((_DWORD *)v94 - 1) = v102;
                    v94 -= 4;
                  }
                  while (v84 != v87);
                }
              }
              __n128 v117 = v94;
              int v118 = v85;
              v119 = &v93[4 * v92];
              if (v87) {
                operator delete(v87);
              }
              int v86 = v111;
LABEL_160:
              int v118 = v85;
              uint64_t v103 = sub_19E41566C(v86[8], (uint64_t)v117, (v85 - (unsigned char *)v117) >> 2, 3, 0, 4, v113, *v62);
              uint64_t v9 = v112;
              uint64_t v4 = v103;
              if (v103) {
                int v72 = 4;
              }
              else {
                int v72 = 0;
              }
              if (v116 < 0) {
LABEL_93:
              }
                operator delete(__p[0]);
LABEL_94:
              BOOL v65 = v72 == 5 || v72 == 0;
              v62 += 2;
              if (!v65 || v62 == v63) {
                goto LABEL_174;
              }
            }
          }
          uint64_t v4 = 0;
          size_t v108 = (char *)v117;
          if (!v117) {
            return v4;
          }
LABEL_175:
          int v118 = v108;
          operator delete(v108);
          return v4;
        }
      }
LABEL_174:
      size_t v108 = (char *)v117;
      if (!v117) {
        return v4;
      }
      goto LABEL_175;
    }
  }
  return 0;
}

void sub_19E49435C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24)
{
  if (a22 < 0)
  {
    operator delete(__p);
    char v25 = a23;
    if (a23) {
      goto LABEL_3;
    }
  }
  else
  {
    char v25 = a23;
    if (a23)
    {
LABEL_3:
      operator delete(v25);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

void *sub_19E4943E4(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_19E494468(void *result, char *__src, char *a3, size_t __sz)
{
  unint64_t v6 = __src;
  uint64_t v7 = result;
  uint64_t v8 = result[2];
  uint64_t v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 2)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 62) {
      goto LABEL_22;
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= __sz) {
      uint64_t v10 = __sz;
    }
    BOOL v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v11) {
      unint64_t v12 = v10;
    }
    if (v12 >> 62) {
LABEL_22:
    }
      sub_19E37C7C4();
    uint64_t v13 = 4 * v12;
    BOOL result = operator new(4 * v12);
    uint64_t v9 = (char *)result;
    void *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v13;
    size_t v14 = a3 - v6;
    if (v14) {
      BOOL result = memmove(result, v6, v14);
    }
    uint64_t v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  uint64_t v15 = (void **)(result + 1);
  uint64_t v16 = (unsigned char *)result[1];
  unint64_t v17 = (v16 - v9) >> 2;
  if (v17 >= __sz)
  {
    size_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_21;
    }
    BOOL v19 = (void *)*result;
LABEL_20:
    BOOL result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  uint64_t v18 = &__src[4 * v17];
  if (v16 != v9)
  {
    BOOL result = memmove((void *)*result, __src, 4 * v17);
    uint64_t v9 = (char *)*v15;
  }
  size_t v14 = a3 - v18;
  if (v14)
  {
    BOOL v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *uint64_t v15 = &v9[v14];
  return result;
}

void *sub_19E4945B4()
{
  return &unk_1EF0B80A8;
}

uint64_t sub_19E4945C0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN17language_modeling2v1L24blocklistContextTokenIDsERNS0_21LinguisticContextImplEjRKNS0_14TokenConv"
                     "erterENS0_9MatchTypeEE3$_0"
    || ((v3 & (unint64_t)"ZN17language_modeling2v1L24blocklistContextTokenIDsERNS0_21LinguisticContextImplEjRKNS0_"
                                "14TokenConverterENS0_9MatchTypeEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN17language_modeling2v1L24blocklistContextTokenIDsERNS0_21LinguisticContextImplEjRKNS0_14TokenConverterENS0_9MatchTypeEE3$_0")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN17language_modeling2v1L24blocklistContextTokenIDsERNS0_21LinguisticContextImplEjRKNS0_14TokenConverterENS0_9MatchTypeEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_19E494618(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8), a2, a3, *a4, (uint64_t)(a4[1] - *a4) >> 2, 3);
}

uint64_t sub_19E49465C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF0B5500;
  a2[1] = v2;
  return result;
}

void *sub_19E494680(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_1EF0B5500;
  result[1] = v3;
  return result;
}

void sub_19E4946C8()
{
}

os_log_t sub_19E4946E0()
{
  os_log_t result = os_log_create("com.apple.LanguageModeling", "Blocklist");
  qword_1E945A1C8 = (uint64_t)result;
  return result;
}

uint64_t sub_19E494710(uint64_t *a1, uint64_t *a2, unsigned int a3, uint64_t a4)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(*a2 + 8);
  if (v4 == *(void *)*a2) {
    return 0;
  }
  uint64_t v8 = a1;
  uint64_t v9 = a1[8];
  uint64_t v10 = *(void *)(v9 + 464);
  if (!v10
    || (uint64_t v11 = sub_19E4B5FF0(v10, v4 - 32), !v11)
    || (sub_19E4B6488(*(std::recursive_mutex **)(v9 + 464), v11) & 1) == 0)
  {
    uint64_t v13 = v8[8];
    uint64_t v15 = *(uint64_t ***)(v13 + 184);
    size_t v14 = *(uint64_t ***)(v13 + 192);
    if (v15 != v14)
    {
      uint64_t v12 = 0;
      uint64_t v16 = *a2;
      unint64_t v17 = v8 + 11;
      uint64_t v48 = a3;
      unint64_t v49 = v8 + 16;
      while (1)
      {
        sub_19E410C70(__p, **v15);
        uint64_t v20 = sub_19E493018(v17, (uint64_t)__p);
        if ((*(uint64_t (**)(uint64_t))(*(void *)v20[5] + 48))(v20[5])) {
          break;
        }
        if (qword_1E945A1D0 != -1) {
          dispatch_once(&qword_1E945A1D0, &unk_1EF0BECD0);
        }
        unint64_t v24 = qword_1E945A1C8;
        if (os_log_type_enabled((os_log_t)qword_1E945A1C8, OS_LOG_TYPE_ERROR))
        {
          unint64_t v46 = v8;
          unsigned int v47 = a3;
          uint64_t v40 = a4;
          int v41 = v51;
          int64_t v42 = (void **)__p[0];
          sub_19E3EA00C(v56, (long long **)v16);
          uint64_t v43 = __p;
          if (v41 < 0) {
            uint64_t v43 = v42;
          }
          if (v57 >= 0) {
            unint64_t v44 = v56;
          }
          else {
            unint64_t v44 = (void **)v56[0];
          }
          *(_DWORD *)std::string buf = 136315394;
          unint64_t v53 = v43;
          __int16 v54 = 2080;
          long long v55 = v44;
          _os_log_error_impl(&dword_19E36B000, v24, OS_LOG_TYPE_ERROR, "BlocklistStatus check skipped for locale: %s - Unable to convert blocklist tokens ('%s')", buf, 0x16u);
          if (v57 < 0) {
            operator delete(v56[0]);
          }
          int v25 = 3;
          a4 = v40;
          a3 = v47;
          uint64_t v8 = v46;
          if (v51 < 0) {
            goto LABEL_8;
          }
        }
        else
        {
          int v25 = 3;
          if (v51 < 0) {
            goto LABEL_8;
          }
        }
LABEL_9:
        BOOL v18 = v25 == 3 || v25 == 0;
        v15 += 2;
        if (!v18 || v15 == v14) {
          return v12;
        }
      }
      unint64_t v21 = *((unsigned int *)sub_19E44FFC0(v49, (uint64_t)__p) + 10);
      unint64_t v22 = (void *)sub_19E493018(v17, (uint64_t)__p)[5];
      v56[0] = &unk_1EF0B5500;
      v56[1] = v22;
      unint64_t v58 = v56;
      sub_19E3F9E24(v16, v21, (uint64_t)v56);
      if (v58 == v56)
      {
        (*((void (**)(void **))v56[0] + 4))(v56);
        int8x8_t v23 = *(int8x8_t *)(v16 + 56);
        if (!*(void *)&v23) {
          goto LABEL_47;
        }
      }
      else
      {
        if (v58) {
          (*((void (**)(void))*v58 + 5))();
        }
        int8x8_t v23 = *(int8x8_t *)(v16 + 56);
        if (!*(void *)&v23) {
          goto LABEL_47;
        }
      }
      uint8x8_t v26 = (uint8x8_t)vcnt_s8(v23);
      v26.i16[0] = vaddlv_u8(v26);
      if (v26.u32[0] > 1uLL)
      {
        unint64_t v27 = v21;
        if (*(void *)&v23 <= v21) {
          unint64_t v27 = v21 % *(void *)&v23;
        }
      }
      else
      {
        unint64_t v27 = (v23.i32[0] - 1) & v21;
      }
      unint64_t v28 = *(uint64_t ***)(*(void *)(v16 + 48) + 8 * v27);
      if (v28)
      {
        long long v29 = *v28;
        if (v29)
        {
          if (v26.u32[0] < 2uLL)
          {
            uint64_t v30 = *(void *)&v23 - 1;
            while (1)
            {
              uint64_t v32 = v29[1];
              if (v32 == v21)
              {
                if (*((_DWORD *)v29 + 4) == v21) {
                  goto LABEL_68;
                }
              }
              else if ((v32 & v30) != v27)
              {
                goto LABEL_47;
              }
              long long v29 = (uint64_t *)*v29;
              if (!v29) {
                goto LABEL_47;
              }
            }
          }
          do
          {
            unint64_t v31 = v29[1];
            if (v31 == v21)
            {
              if (*((_DWORD *)v29 + 4) == v21)
              {
LABEL_68:
                unint64_t v34 = (_DWORD *)v29[3];
                uint64_t v33 = (v29[4] - (uint64_t)v34) >> 2;
                if (a3 > 4) {
LABEL_81:
                }
                  __assert_rtn("convertMatchType", "TokenIDLanguageModel.cpp", 110, "false && \"Invalid match type\"");
LABEL_48:
                uint64_t v35 = 4;
                switch(v48)
                {
                  case 1:
                    uint64_t v39 = *v34 == 1;
                    if (*v34 == 1) {
                      ++v34;
                    }
                    v33 -= v39;
                    uint64_t v35 = 1;
                    break;
                  case 2:
                    if (v34[v33 - 1] == 2) {
                      --v33;
                    }
                    uint64_t v35 = 2;
                    break;
                  case 3:
                    break;
                  case 4:
                    if (v34[v33 - 1] == 2) {
                      --v33;
                    }
                    uint64_t v35 = 3;
                    break;
                  default:
                    uint64_t v35 = 0;
                    BOOL v36 = *v34 == 1;
                    if (*v34 == 1) {
                      ++v34;
                    }
                    uint64_t v37 = v33 - v36;
                    uint64_t v38 = v33 - v36 - 1;
                    if (v34[v38] == 2) {
                      uint64_t v33 = v38;
                    }
                    else {
                      uint64_t v33 = v37;
                    }
                    break;
                }
                uint64_t v12 = sub_19E41566C(v8[8], (uint64_t)v34, v33, v35, 0, 0, a4, *v15);
                if (v12) {
                  int v25 = 2;
                }
                else {
                  int v25 = 0;
                }
                if (v51 < 0) {
LABEL_8:
                }
                  operator delete(__p[0]);
                goto LABEL_9;
              }
            }
            else
            {
              if (v31 >= *(void *)&v23) {
                v31 %= *(void *)&v23;
              }
              if (v31 != v27) {
                break;
              }
            }
            long long v29 = (uint64_t *)*v29;
          }
          while (v29);
        }
      }
LABEL_47:
      uint64_t v33 = 0;
      unint64_t v34 = 0;
      if (a3 > 4) {
        goto LABEL_81;
      }
      goto LABEL_48;
    }
    return 0;
  }
  return 1;
}

void sub_19E494C14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E494C6C(uint64_t a1, uint64_t a2)
{
  sub_19E372F7C((uint64_t)&v2, a1, a2);
}

char *sub_19E494CAC@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[63] < 0) {
    return (char *)sub_19E39369C((unsigned char *)a2, *((void **)result + 5), *((void *)result + 6));
  }
  *(_OWORD *)a2 = *(_OWORD *)(result + 40);
  *(void *)(a2 + 16) = *((void *)result + 7);
  return result;
}

void sub_19E494CD8(uint64_t a1)
{
  sub_19E41D104(a1);
  JUMPOUT(0x19F3BDCF0);
}

void sub_19E494D14(uint64_t a1, uint64_t a2, void *a3)
{
  *(void *)a1 = &unk_1EF0B96C0;
  int v5 = atomic_load((unsigned __int16 *)word_1EC009188);
  if (v5 == 0xFFFF) {
    atomic_store(0, (unsigned __int16 *)word_1EC009188);
  }
  *(_WORD *)(a1 + 8) = atomic_fetch_add(word_1EC009188, 1u);
  unint64_t v6 = (const void *)MEMORY[0x19F3BCDE0](*(void *)(*a3 + 8));
  uint64_t v7 = v6;
  if (v6) {
    CFRetain(v6);
  }
  sub_19E372124(cf, v7);
  CFStringRef v8 = (const __CFString *)cf[0];
  if (cf[0])
  {
    CFTypeID TypeID = CFStringGetTypeID();
    if (TypeID == CFGetTypeID(v8))
    {
      sub_19E3721DC((void *)(a1 + 16), v8);
      if (cf[0]) {
        CFRelease(cf[0]);
      }
      sub_19E524878((unsigned char *)(a1 + 40), (uint64_t *)(a1 + 16));
      *a3 = 0;
      a3[1] = 0;
      operator new();
    }
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3BD790](exception, "Could not convert");
  }
  else
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3BD790](exception, "Could not construct");
  }
  __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_19E494FE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char *a17, uint64_t a18, char a19)
{
  if (a19)
  {
    sub_19E3C5DBC(a17);
    if (a15 < 0) {
      operator delete(__p);
    }
  }
  unint64_t v27 = *(void **)(v19 + 264);
  if (v27)
  {
    *(void *)(v19 + 272) = v27;
    operator delete(v27);
  }
  sub_19E41D2BC(v23);
  sub_19E3C5DBC(*(char **)(v19 + 176));
  unint64_t v28 = *(void ***)(v19 + 144);
  if (v28)
  {
    do
    {
      uint64_t v35 = (void **)*v28;
      if (*((char *)v28 + 39) < 0) {
        operator delete(v28[2]);
      }
      operator delete(v28);
      unint64_t v28 = v35;
    }
    while (v35);
  }
  long long v29 = *v25;
  void *v25 = 0;
  if (v29) {
    operator delete(v29);
  }
  uint64_t v30 = *(char **)(v19 + 104);
  if (v30)
  {
    do
    {
      BOOL v36 = *(char **)v30;
      uint64_t v37 = *((void *)v30 + 5);
      *((void *)v30 + 5) = 0;
      if (v37) {
        (*(void (**)(uint64_t))(*(void *)v37 + 8))(v37);
      }
      if (v30[39] < 0) {
        operator delete(*((void **)v30 + 2));
      }
      operator delete(v30);
      uint64_t v30 = v36;
    }
    while (v36);
  }
  unint64_t v31 = *v24;
  *unint64_t v24 = 0;
  if (v31) {
    operator delete(v31);
  }
  uint64_t v32 = *v22;
  *unint64_t v22 = 0;
  if (v32)
  {
    uint64_t v33 = sub_19E3709A0(v32);
    MEMORY[0x19F3BDCF0](v33, 0x10F0C4069D522A4);
  }
  unint64_t v34 = *(std::__shared_weak_count **)(v19 + 72);
  if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
  }
  if (*(char *)(v19 + 63) < 0) {
    operator delete(*v21);
  }
  if (*(char *)(v19 + 39) < 0)
  {
    operator delete(*v20);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_19E49529C(uint64_t a1, unint64_t a2)
{
  return sub_19E4952A4(*(void **)(a1 + 8), a2);
}

uint64_t sub_19E4952A4(void *a1, unint64_t a2)
{
  if ((a2 & 0x8000000000000000) != 0) {
    return -1;
  }
  uint64_t v2 = a2;
  uint64_t v4 = a1[6];
  if (a2 >= (a1[7] - v4) >> 3) {
    return -1;
  }
  if (a1[4] <= (int64_t)a2)
  {
    int v5 = *(const char **)(v4 + 8 * a2);
    size_t v6 = strlen(v5);
    if (v6 >= 0x7FFFFFFFFFFFFFF8) {
      sub_19E37C958();
    }
    uint64_t v7 = (void *)v6;
    if (v6 >= 0x17)
    {
      uint64_t v10 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17) {
        uint64_t v10 = v6 | 7;
      }
      uint64_t v11 = v10 + 1;
      CFStringRef v8 = (void **)operator new(v10 + 1);
      __dst[1] = v7;
      unint64_t v13 = v11 | 0x8000000000000000;
      __dst[0] = v8;
    }
    else
    {
      HIBYTE(v13) = v6;
      CFStringRef v8 = __dst;
      if (!v6)
      {
LABEL_14:
        *((unsigned char *)v7 + (void)v8) = 0;
        uint64_t v2 = sub_19E4953AC(a1, (uint64_t)__dst);
        if (SHIBYTE(v13) < 0) {
          operator delete(__dst[0]);
        }
        return v2;
      }
    }
    memmove(v8, v5, (size_t)v7);
    goto LABEL_14;
  }
  return v2;
}

uint64_t sub_19E4953AC(void *a1, uint64_t a2)
{
  uint64_t v2 = a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = sub_19E37BDA4((uint64_t)&v17, (uint64_t *)a2, v5);
  uint64_t v7 = a1[13];
  uint64_t v8 = a1[10];
  uint64_t v9 = a1[5];
  uint64_t v10 = v7 & v6;
  uint64_t v11 = *(void *)(v8 + 8 * (v7 & v6));
  if (v11 == v9)
  {
LABEL_9:
    uint64_t v11 = v9;
  }
  else
  {
    uint64_t v12 = a1[6];
    if (*(char *)(v2 + 23) < 0) {
      uint64_t v2 = *(void *)v2;
    }
    while (strcmp(*(const char **)(v12 + 8 * v11), (const char *)v2))
    {
      uint64_t v10 = (v10 + 1) & v7;
      uint64_t v11 = *(void *)(v8 + 8 * v10);
      if (v11 == v9) {
        goto LABEL_9;
      }
    }
  }
  if (v11 != -1)
  {
    uint64_t v13 = a1[4];
    BOOL v14 = __OFSUB__(v11, v13);
    uint64_t v15 = v11 - v13;
    if (v15 < 0 == v14) {
      return *(void *)(a1[15] + 8 * v15);
    }
  }
  return v11;
}

uint64_t sub_19E49548C(uint64_t a1)
{
  return (uint64_t)(*(void *)(*(void *)(a1 + 8) + 56) - *(void *)(*(void *)(a1 + 8) + 48)) >> 3;
}

uint64_t sub_19E4954A0(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 24);
}

uint64_t sub_19E4954AC(uint64_t a1, char *__s)
{
  uint64_t v3 = *(void **)(a1 + 8);
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_19E37C958();
  }
  unint64_t v5 = (void *)v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    unint64_t v6 = (void **)operator new(v7 + 1);
    __dst[1] = v5;
    unint64_t v12 = v8 | 0x8000000000000000;
    __dst[0] = v6;
    goto LABEL_8;
  }
  HIBYTE(v12) = v4;
  unint64_t v6 = __dst;
  if (v4) {
LABEL_8:
  }
    memcpy(v6, __s, (size_t)v5);
  *((unsigned char *)v5 + (void)v6) = 0;
  uint64_t v9 = sub_19E4953AC(v3, (uint64_t)__dst);
  if (SHIBYTE(v12) < 0) {
    operator delete(__dst[0]);
  }
  return v9;
}

uint64_t sub_19E495588(uint64_t a1, uint64_t a2)
{
  return sub_19E4953AC(*(void **)(a1 + 8), a2);
}

size_t sub_19E495590@<X0>(size_t result@<X0>, int64_t a2@<X1>, unsigned char *a3@<X8>)
{
  size_t v4 = *(void **)(result + 8);
  if (a2 < 0 || v4[4] <= a2)
  {
    unint64_t v5 = (void *)v4[19];
    if (!v5) {
      goto LABEL_19;
    }
    unint64_t v6 = v4 + 19;
    do
    {
      int64_t v7 = v5[4];
      BOOL v8 = v7 < a2;
      if (v7 >= a2) {
        uint64_t v9 = v5;
      }
      else {
        uint64_t v9 = v5 + 1;
      }
      if (!v8) {
        unint64_t v6 = v5;
      }
      unint64_t v5 = (void *)*v9;
    }
    while (*v9);
    if (v6 == v4 + 19) {
      goto LABEL_19;
    }
    if (v6[4] > a2) {
      goto LABEL_19;
    }
    a2 = v6[5];
    if (a2 < 0) {
      goto LABEL_19;
    }
  }
  uint64_t v11 = v4 + 6;
  uint64_t v10 = v4[6];
  if (a2 >= (unint64_t)((v11[1] - v10) >> 3))
  {
LABEL_19:
    a3[23] = 0;
    *a3 = 0;
    return result;
  }
  unint64_t v12 = *(const char **)(v10 + 8 * a2);
  os_log_t result = strlen(v12);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    sub_19E37C958();
  }
  size_t v13 = result;
  if (result >= 0x17)
  {
    uint64_t v14 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v14 = result | 7;
    }
    uint64_t v15 = v14 + 1;
    uint64_t v16 = operator new(v14 + 1);
    *((void *)a3 + 1) = v13;
    *((void *)a3 + 2) = v15 | 0x8000000000000000;
    *(void *)a3 = v16;
    a3 = v16;
  }
  else
  {
    a3[23] = result;
    if (!result) {
      goto LABEL_24;
    }
  }
  os_log_t result = (size_t)memmove(a3, v12, v13);
LABEL_24:
  a3[v13] = 0;
  return result;
}

BOOL sub_19E4956AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(unsigned __int8 *)(a3 + 31);
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a3 + 16);
  }
  uint64_t v36 = v3;
  if (v3)
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
    uint64_t v7 = (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 128))(a1, 0);
    if (v6)
    {
      uint64_t v8 = v7;
      int v40 = 0;
      uint64_t v9 = 0;
      uint64_t v37 = *(void **)(MEMORY[0x1E4FBA418] + 24);
      uint64_t v38 = (void *)*MEMORY[0x1E4FBA418];
      unint64_t v39 = v6;
      do
      {
        sub_19E37B784((uint64_t)v46);
        BOOL v11 = v8 >= 0 || *(unsigned char *)a3 != 0;
        if (((v11 | v40) & 1) == 0)
        {
          HIBYTE(v45) = 7;
          strcpy((char *)&__p, "WARNING");
          unint64_t v12 = sub_19E37CA70(MEMORY[0x1E4FBA240], (uint64_t)&__p, 7);
          sub_19E37CA70(v12, (uint64_t)": ", 2);
          sub_19E37CA70(MEMORY[0x1E4FBA240], (uint64_t)"Negative symbol table entry when not allowed", 44);
          sub_19E43C8CC();
          if (SHIBYTE(v45) < 0) {
            operator delete(__p);
          }
          int v40 = 1;
        }
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 88))(&__p, a1, v8);
        if (v45 >= 0) {
          p_p = &__p;
        }
        else {
          p_p = __p;
        }
        if (v45 >= 0) {
          uint64_t v14 = HIBYTE(v45);
        }
        else {
          uint64_t v14 = v44;
        }
        uint64_t v15 = sub_19E37CA70(v46, (uint64_t)p_p, v14);
        uint64_t v16 = (unsigned char *)(a3 + 8);
        if (*(char *)(a3 + 31) < 0) {
          uint64_t v16 = *(unsigned char **)(a3 + 8);
        }
        LOBYTE(__dst[0]) = *v16;
        sub_19E37CA70(v15, (uint64_t)__dst, 1);
        char v17 = (void *)std::ostream::operator<<();
        LOBYTE(__dst[0]) = 10;
        sub_19E37CA70(v17, (uint64_t)__dst, 1);
        if (SHIBYTE(v45) < 0)
        {
          operator delete(__p);
          char v18 = v55;
          if ((v55 & 0x10) != 0)
          {
LABEL_30:
            unint64_t v21 = v54;
            unint64_t v22 = (const void **)&v50;
            if (v54 < v51)
            {
              unint64_t v54 = v51;
              unint64_t v21 = v51;
              unint64_t v22 = (const void **)&v50;
            }
            goto LABEL_33;
          }
        }
        else
        {
          char v18 = v55;
          if ((v55 & 0x10) != 0) {
            goto LABEL_30;
          }
        }
        if ((v18 & 8) == 0)
        {
          size_t v19 = 0;
          HIBYTE(v45) = 0;
          uint64_t v20 = &__p;
          goto LABEL_41;
        }
        unint64_t v21 = v49;
        unint64_t v22 = (const void **)v48;
LABEL_33:
        int8x8_t v23 = *v22;
        size_t v19 = v21 - (void)*v22;
        if (v19 > 0x7FFFFFFFFFFFFFF7) {
          sub_19E37C958();
        }
        if (v19 >= 0x17)
        {
          uint64_t v24 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v19 | 7) != 0x17) {
            uint64_t v24 = v19 | 7;
          }
          uint64_t v25 = v24 + 1;
          uint64_t v20 = operator new(v24 + 1);
          size_t v44 = v19;
          int64_t v45 = v25 | 0x8000000000000000;
          std::string __p = v20;
LABEL_40:
          memmove(v20, v23, v19);
          goto LABEL_41;
        }
        HIBYTE(v45) = v21 - *(unsigned char *)v22;
        uint64_t v20 = &__p;
        if (v19) {
          goto LABEL_40;
        }
LABEL_41:
        *((unsigned char *)v20 + v19) = 0;
        if ((v55 & 0x10) != 0)
        {
          unint64_t v28 = v54;
          long long v29 = (const void **)&v50;
          if (v54 < v51)
          {
            unint64_t v54 = v51;
            unint64_t v28 = v51;
            long long v29 = (const void **)&v50;
          }
        }
        else
        {
          if ((v55 & 8) == 0)
          {
            size_t v26 = 0;
            HIBYTE(v42) = 0;
            unint64_t v27 = __dst;
            goto LABEL_55;
          }
          unint64_t v28 = v49;
          long long v29 = (const void **)v48;
        }
        uint64_t v30 = *v29;
        size_t v26 = v28 - (void)*v29;
        if (v26 > 0x7FFFFFFFFFFFFFF7) {
          sub_19E37C958();
        }
        if (v26 >= 0x17)
        {
          uint64_t v31 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v26 | 7) != 0x17) {
            uint64_t v31 = v26 | 7;
          }
          uint64_t v32 = v31 + 1;
          unint64_t v27 = (void **)operator new(v31 + 1);
          __dst[1] = (void *)v26;
          unint64_t v42 = v32 | 0x8000000000000000;
          __dst[0] = v27;
LABEL_54:
          memmove(v27, v30, v26);
          goto LABEL_55;
        }
        HIBYTE(v42) = v28 - *(unsigned char *)v29;
        unint64_t v27 = __dst;
        if (v26) {
          goto LABEL_54;
        }
LABEL_55:
        *((unsigned char *)v27 + v26) = 0;
        int v33 = SHIBYTE(v42);
        std::ostream::write();
        if (v33 < 0)
        {
          operator delete(__dst[0]);
          if (SHIBYTE(v45) < 0) {
LABEL_62:
          }
            operator delete(__p);
        }
        else if (SHIBYTE(v45) < 0)
        {
          goto LABEL_62;
        }
        v46[0] = v38;
        *(void **)((char *)v46 + *((void *)v38 - 3)) = v37;
        v46[1] = (void *)(MEMORY[0x1E4FBA470] + 16);
        if (v53 < 0) {
          operator delete(v52);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x19F3BDC30](&v56);
        if (++v9 < v39) {
          uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 128))(a1, v9);
        }
      }
      while (v39 != v9);
    }
  }
  else
  {
    char v47 = 5;
    strcpy((char *)v46, "ERROR");
    unint64_t v34 = sub_19E37CA70(MEMORY[0x1E4FBA240], (uint64_t)v46, 5);
    sub_19E37CA70(v34, (uint64_t)": ", 2);
    sub_19E37CA70(MEMORY[0x1E4FBA240], (uint64_t)"Missing required field separator", 32);
    sub_19E43C8CC();
    if (v47 < 0) {
      operator delete(v46[0]);
    }
  }
  return v36 != 0;
}

void sub_19E495C98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_19E495CF4()
{
}

void sub_19E495CFC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p)
{
  if (v19 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x19E495D14);
}

void sub_19E495D10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  sub_19E3919D0((uint64_t)&a28);
  _Unwind_Resume(a1);
}

BOOL sub_19E495D34(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  LODWORD(__p) = 2125658996;
  std::ostream::write();
  LODWORD(v4) = *(unsigned __int8 *)(v3 + 23);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(v3 + 8);
  }
  LODWORD(__p) = v4;
  std::ostream::write();
  std::ostream::write();
  std::string __p = *(void **)(v3 + 24);
  std::ostream::write();
  std::string __p = (void *)((uint64_t)(*(void *)(v3 + 56) - *(void *)(v3 + 48)) >> 3);
  std::ostream::write();
  uint64_t v5 = *(void *)(v3 + 48);
  if (*(void *)(v3 + 56) != v5)
  {
    for (unint64_t i = 0; i < (*(void *)(v3 + 56) - v5) >> 3; ++i)
    {
      int64_t v7 = *(void *)(v3 + 32);
      uint64_t v8 = (void *)i;
      if ((uint64_t)i >= v7) {
        uint64_t v8 = *(void **)(*(void *)(v3 + 120) - 8 * v7 + 8 * i);
      }
      uint64_t v9 = *(const char **)(v5 + 8 * i);
      size_t v10 = strlen(v9);
      if (v10 >= 0x7FFFFFFFFFFFFFF8) {
        sub_19E37C958();
      }
      size_t v11 = v10;
      if (v10 >= 0x17)
      {
        uint64_t v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v10 | 7) != 0x17) {
          uint64_t v13 = v10 | 7;
        }
        uint64_t v14 = v13 + 1;
        p_p = operator new(v13 + 1);
        size_t v20 = v11;
        int64_t v21 = v14 | 0x8000000000000000;
        std::string __p = p_p;
      }
      else
      {
        HIBYTE(v21) = v10;
        p_p = &__p;
        if (!v10) {
          goto LABEL_16;
        }
      }
      memmove(p_p, v9, v11);
LABEL_16:
      *((unsigned char *)p_p + v11) = 0;
      int v15 = HIBYTE(v21);
      if (v21 < 0) {
        int v15 = v20;
      }
      int v22 = v15;
      std::ostream::write();
      std::ostream::write();
      if (SHIBYTE(v21) < 0) {
        operator delete(__p);
      }
      std::string __p = v8;
      std::ostream::write();
      uint64_t v5 = *(void *)(v3 + 48);
    }
  }
  std::ostream::flush();
  int v16 = *(_DWORD *)((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5;
  if (v16)
  {
    HIBYTE(v21) = 5;
    strcpy((char *)&__p, "ERROR");
    char v17 = sub_19E37CA70(MEMORY[0x1E4FBA240], (uint64_t)&__p, 5);
    sub_19E37CA70(v17, (uint64_t)": ", 2);
    sub_19E37CA70(MEMORY[0x1E4FBA240], (uint64_t)"SymbolTable::Write: write failed", 32);
    sub_19E43C8CC();
    if (SHIBYTE(v21) < 0) {
      operator delete(__p);
    }
  }
  return v16 == 0;
}

void sub_19E495FEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_19E496018(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  sub_19E496084(v3);
  if (*(char *)(v3 + 223) < 0)
  {
    uint64_t v5 = *(void **)(v3 + 200);
    unint64_t v6 = *(void *)(v3 + 208);
    sub_19E39369C((unsigned char *)a2, v5, v6);
  }
  else
  {
    long long v4 = *(_OWORD *)(v3 + 200);
    *(void *)(a2 + 16) = *(void *)(v3 + 216);
    *(_OWORD *)a2 = v4;
  }
}

void sub_19E496084(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 172))
  {
    uint64_t v1 = a1;
    int v119 = 0;
    memset(&v120, 0, sizeof(v120));
    std::string::append(&v120, 0x20uLL, 0);
    uint64_t v2 = *(void *)(v1 + 48);
    if (*(void *)(v1 + 56) != v2)
    {
      for (unint64_t i = 0; i < (*(void *)(v1 + 56) - v2) >> 3; ++i)
      {
        long long v4 = *(const char **)(v2 + 8 * i);
        size_t v5 = strlen(v4);
        if (v5 > 0x7FFFFFFFFFFFFFF7) {
          sub_19E37C958();
        }
        std::string::size_type v6 = v5;
        if (v5 >= 0x17)
        {
          uint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v5 | 7) != 0x17) {
            uint64_t v8 = v5 | 7;
          }
          uint64_t v9 = v8 + 1;
          p_dst = (std::string *)operator new(v8 + 1);
          __dst.__r_.__value_.__l.__size_ = v6;
          __dst.__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
        }
        else
        {
          *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v5;
          p_dst = &__dst;
          if (!v5) {
            goto LABEL_13;
          }
        }
        memmove(p_dst, v4, v6);
LABEL_13:
        p_dst->__r_.__value_.__s.__data_[v6] = 0;
        LODWORD(v10) = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
        int v11 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
        unint64_t v12 = (void *)__dst.__r_.__value_.__r.__words[0];
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v13 = &__dst;
        }
        else {
          uint64_t v13 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        }
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          LODWORD(v10) = __dst.__r_.__value_.__r.__words[1];
        }
        if ((int)v10 >= 1)
        {
          uint64_t v10 = v10;
          do
          {
            std::string::value_type v15 = v13->__r_.__value_.__s.__data_[0];
            uint64_t v13 = (std::string *)((char *)v13 + 1);
            std::string::value_type v14 = v15;
            int v16 = v119++;
            BOOL v17 = -v16 < 0;
            int v18 = -v16 & 0x1F;
            int v19 = v16 & 0x1F;
            if (!v17) {
              int v19 = -v18;
            }
            if ((v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              size_t v20 = &v120;
            }
            else {
              size_t v20 = (std::string *)v120.__r_.__value_.__r.__words[0];
            }
            v20->__r_.__value_.__s.__data_[v19] ^= v14;
            --v10;
          }
          while (v10);
        }
        ++v119;
        if (v11 < 0) {
          operator delete(v12);
        }
        uint64_t v2 = *(void *)(v1 + 48);
      }
    }
    if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0) {
      sub_19E39369C(&__dst, v120.__r_.__value_.__l.__data_, v120.__r_.__value_.__l.__size_);
    }
    else {
      std::string __dst = v120;
    }
    int64_t v21 = (void **)(v1 + 176);
    if (*(char *)(v1 + 199) < 0) {
      operator delete(*v21);
    }
    *(_OWORD *)int64_t v21 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
    *(void *)(v1 + 192) = *((void *)&__dst.__r_.__value_.__l + 2);
    int v117 = 0;
    memset(&v118, 0, sizeof(v118));
    std::string::append(&v118, 0x20uLL, 0);
    if (*(uint64_t *)(v1 + 32) >= 1)
    {
      uint64_t v22 = 0;
      std::string::size_type v97 = *(void *)(MEMORY[0x1E4FBA418] + 24);
      std::string::size_type v99 = *MEMORY[0x1E4FBA418];
      while (1)
      {
        sub_19E37B784((uint64_t)&__dst);
        int8x8_t v23 = *(const char **)(*(void *)(v1 + 48) + 8 * v22);
        size_t v24 = strlen(v23);
        if (v24 > 0x7FFFFFFFFFFFFFF7) {
          sub_19E37C958();
        }
        size_t v25 = v24;
        if (v24 >= 0x17) {
          break;
        }
        HIBYTE(v106) = v24;
        p_p = &__p;
        if (v24) {
          goto LABEL_43;
        }
LABEL_44:
        p_p[v25] = 0;
        if (v106 >= 0) {
          long long v29 = &__p;
        }
        else {
          long long v29 = __p;
        }
        if (v106 >= 0) {
          uint64_t v30 = HIBYTE(v106);
        }
        else {
          uint64_t v30 = v105;
        }
        uint64_t v31 = sub_19E37CA70(&__dst, (uint64_t)v29, v30);
        LOBYTE(v101) = 9;
        sub_19E37CA70(v31, (uint64_t)&v101, 1);
        std::ostream::operator<<();
        if (SHIBYTE(v106) < 0)
        {
          operator delete(__p);
          char v32 = v115;
          if ((v115 & 0x10) != 0)
          {
LABEL_55:
            unint64_t v35 = v114;
            uint64_t v36 = (const void **)&v110;
            if (v114 < v111)
            {
              unint64_t v114 = v111;
              unint64_t v35 = v111;
              uint64_t v36 = (const void **)&v110;
            }
            goto LABEL_58;
          }
        }
        else
        {
          char v32 = v115;
          if ((v115 & 0x10) != 0) {
            goto LABEL_55;
          }
        }
        if ((v32 & 8) == 0)
        {
          size_t v33 = 0;
          HIBYTE(v106) = 0;
          unint64_t v34 = &__p;
          goto LABEL_66;
        }
        unint64_t v35 = v109;
        uint64_t v36 = (const void **)v108;
LABEL_58:
        uint64_t v37 = *v36;
        size_t v33 = v35 - (void)*v36;
        if (v33 > 0x7FFFFFFFFFFFFFF7) {
          sub_19E37C958();
        }
        if (v33 >= 0x17)
        {
          uint64_t v38 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v33 | 7) != 0x17) {
            uint64_t v38 = v33 | 7;
          }
          uint64_t v39 = v38 + 1;
          unint64_t v34 = operator new(v38 + 1);
          size_t v105 = v33;
          int64_t v106 = v39 | 0x8000000000000000;
          std::string __p = v34;
LABEL_65:
          memmove(v34, v37, v33);
          goto LABEL_66;
        }
        HIBYTE(v106) = v35 - *(unsigned char *)v36;
        unint64_t v34 = &__p;
        if (v33) {
          goto LABEL_65;
        }
LABEL_66:
        *((unsigned char *)v34 + v33) = 0;
        if (v106 >= 0) {
          int v40 = (char *)&__p;
        }
        else {
          int v40 = (char *)__p;
        }
        if ((v115 & 0x10) != 0)
        {
          unint64_t v43 = v114;
          size_t v44 = (const void **)&v110;
          if (v114 < v111)
          {
            unint64_t v114 = v111;
            unint64_t v43 = v111;
            size_t v44 = (const void **)&v110;
          }
        }
        else
        {
          if ((v115 & 8) == 0)
          {
            size_t v41 = 0;
            HIBYTE(v103) = 0;
            unint64_t v42 = &v101;
            goto LABEL_83;
          }
          unint64_t v43 = v109;
          size_t v44 = (const void **)v108;
        }
        int64_t v45 = *v44;
        size_t v41 = v43 - (void)*v44;
        if (v41 > 0x7FFFFFFFFFFFFFF7) {
          sub_19E37C958();
        }
        if (v41 >= 0x17)
        {
          uint64_t v46 = (v41 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v41 | 7) != 0x17) {
            uint64_t v46 = v41 | 7;
          }
          uint64_t v47 = v46 + 1;
          unint64_t v42 = operator new(v46 + 1);
          size_t v102 = v41;
          int64_t v103 = v47 | 0x8000000000000000;
          long long v101 = v42;
        }
        else
        {
          HIBYTE(v103) = v43 - *(unsigned char *)v44;
          unint64_t v42 = &v101;
          if (!v41) {
            goto LABEL_83;
          }
        }
        memmove(v42, v45, v41);
LABEL_83:
        *((unsigned char *)v42 + v41) = 0;
        LODWORD(v48) = HIBYTE(v103);
        int v49 = SHIBYTE(v103);
        if (v103 < 0) {
          LODWORD(v48) = v102;
        }
        if ((int)v48 >= 1)
        {
          uint64_t v48 = v48;
          do
          {
            char v51 = *v40++;
            char v50 = v51;
            int v52 = v117++;
            BOOL v17 = -v52 < 0;
            int v53 = -v52 & 0x1F;
            int v54 = v52 & 0x1F;
            if (!v17) {
              int v54 = -v53;
            }
            if ((v118.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              int v55 = &v118;
            }
            else {
              int v55 = (std::string *)v118.__r_.__value_.__r.__words[0];
            }
            v55->__r_.__value_.__s.__data_[v54] ^= v50;
            --v48;
          }
          while (v48);
        }
        if (v49 < 0) {
          operator delete(v101);
        }
        if (SHIBYTE(v106) < 0) {
          operator delete(__p);
        }
        __dst.__r_.__value_.__r.__words[0] = v99;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + *(void *)(v99 - 24)) = v97;
        __dst.__r_.__value_.__l.__size_ = MEMORY[0x1E4FBA470] + 16;
        if (v113 < 0) {
          operator delete(v112);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x19F3BDC30](v116);
        if (++v22 >= *(void *)(v1 + 32)) {
          goto LABEL_99;
        }
      }
      uint64_t v27 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v24 | 7) != 0x17) {
        uint64_t v27 = v24 | 7;
      }
      uint64_t v28 = v27 + 1;
      p_p = operator new(v27 + 1);
      size_t v105 = v25;
      int64_t v106 = v28 | 0x8000000000000000;
      std::string __p = p_p;
LABEL_43:
      memmove(p_p, v23, v25);
      goto LABEL_44;
    }
LABEL_99:
    uint64_t v56 = *(void **)(v1 + 144);
    char v57 = (void *)(v1 + 152);
    if (v56 != (void *)(v1 + 152))
    {
      std::string::size_type v98 = *(void *)(MEMORY[0x1E4FBA418] + 24);
      std::string::size_type v100 = *MEMORY[0x1E4FBA418];
      while (v56[4] < *(void *)(v1 + 32))
      {
LABEL_167:
        size_t v93 = (void *)v56[1];
        if (v93)
        {
          do
          {
            int v94 = v93;
            size_t v93 = (void *)*v93;
          }
          while (v93);
        }
        else
        {
          do
          {
            int v94 = (void *)v56[2];
            BOOL v95 = *v94 == (void)v56;
            uint64_t v56 = v94;
          }
          while (!v95);
        }
        uint64_t v56 = v94;
        if (v94 == v57) {
          goto LABEL_173;
        }
      }
      sub_19E37B784((uint64_t)&__dst);
      unint64_t v58 = *(const char **)(*(void *)(v1 + 48) + 8 * v56[5]);
      size_t v59 = strlen(v58);
      if (v59 > 0x7FFFFFFFFFFFFFF7) {
        sub_19E37C958();
      }
      size_t v60 = v59;
      if (v59 >= 0x17)
      {
        uint64_t v62 = (v59 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v59 | 7) != 0x17) {
          uint64_t v62 = v59 | 7;
        }
        uint64_t v63 = v62 + 1;
        uint64_t v61 = operator new(v62 + 1);
        size_t v105 = v60;
        int64_t v106 = v63 | 0x8000000000000000;
        std::string __p = v61;
      }
      else
      {
        HIBYTE(v106) = v59;
        uint64_t v61 = &__p;
        if (!v59)
        {
LABEL_111:
          *((unsigned char *)v61 + v60) = 0;
          if (v106 >= 0) {
            unint64_t v64 = &__p;
          }
          else {
            unint64_t v64 = __p;
          }
          if (v106 >= 0) {
            uint64_t v65 = HIBYTE(v106);
          }
          else {
            uint64_t v65 = v105;
          }
          int v66 = sub_19E37CA70(&__dst, (uint64_t)v64, v65);
          LOBYTE(v101) = 9;
          sub_19E37CA70(v66, (uint64_t)&v101, 1);
          std::ostream::operator<<();
          if (SHIBYTE(v106) < 0)
          {
            operator delete(__p);
            char v67 = v115;
            if ((v115 & 0x10) == 0) {
              goto LABEL_119;
            }
          }
          else
          {
            char v67 = v115;
            if ((v115 & 0x10) == 0)
            {
LABEL_119:
              if ((v67 & 8) == 0)
              {
                size_t v68 = 0;
                HIBYTE(v106) = 0;
                uint64_t v69 = &__p;
                goto LABEL_133;
              }
              unint64_t v70 = v109;
              __n128 v71 = (const void **)v108;
LABEL_125:
              int v72 = *v71;
              size_t v68 = v70 - (void)*v71;
              if (v68 > 0x7FFFFFFFFFFFFFF7) {
                sub_19E37C958();
              }
              if (v68 >= 0x17)
              {
                uint64_t v73 = (v68 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v68 | 7) != 0x17) {
                  uint64_t v73 = v68 | 7;
                }
                uint64_t v74 = v73 + 1;
                uint64_t v69 = operator new(v73 + 1);
                size_t v105 = v68;
                int64_t v106 = v74 | 0x8000000000000000;
                std::string __p = v69;
              }
              else
              {
                HIBYTE(v106) = v70 - *(unsigned char *)v71;
                uint64_t v69 = &__p;
                if (!v68)
                {
LABEL_133:
                  *((unsigned char *)v69 + v68) = 0;
                  if (v106 >= 0) {
                    size_t v75 = (char *)&__p;
                  }
                  else {
                    size_t v75 = (char *)__p;
                  }
                  if ((v115 & 0x10) != 0)
                  {
                    unint64_t v78 = v114;
                    uint64_t v79 = (const void **)&v110;
                    if (v114 < v111)
                    {
                      unint64_t v114 = v111;
                      unint64_t v78 = v111;
                      uint64_t v79 = (const void **)&v110;
                    }
                  }
                  else
                  {
                    if ((v115 & 8) == 0)
                    {
                      size_t v76 = 0;
                      HIBYTE(v103) = 0;
                      unint64_t v77 = &v101;
                      goto LABEL_150;
                    }
                    unint64_t v78 = v109;
                    uint64_t v79 = (const void **)v108;
                  }
                  size_t v80 = *v79;
                  size_t v76 = v78 - (void)*v79;
                  if (v76 > 0x7FFFFFFFFFFFFFF7) {
                    sub_19E37C958();
                  }
                  if (v76 >= 0x17)
                  {
                    uint64_t v81 = v1;
                    int v82 = v57;
                    uint64_t v83 = (v76 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v76 | 7) != 0x17) {
                      uint64_t v83 = v76 | 7;
                    }
                    uint64_t v84 = v83 + 1;
                    unint64_t v77 = operator new(v83 + 1);
                    size_t v102 = v76;
                    int64_t v103 = v84 | 0x8000000000000000;
                    long long v101 = v77;
                    char v57 = v82;
                    uint64_t v1 = v81;
                  }
                  else
                  {
                    HIBYTE(v103) = v78 - *(unsigned char *)v79;
                    unint64_t v77 = &v101;
                    if (!v76) {
                      goto LABEL_150;
                    }
                  }
                  memmove(v77, v80, v76);
LABEL_150:
                  *((unsigned char *)v77 + v76) = 0;
                  LODWORD(v85) = HIBYTE(v103);
                  int v86 = SHIBYTE(v103);
                  if (v103 < 0) {
                    LODWORD(v85) = v102;
                  }
                  if ((int)v85 >= 1)
                  {
                    uint64_t v85 = v85;
                    do
                    {
                      char v88 = *v75++;
                      char v87 = v88;
                      int v89 = v117++;
                      BOOL v17 = -v89 < 0;
                      int v90 = -v89 & 0x1F;
                      int v91 = v89 & 0x1F;
                      if (!v17) {
                        int v91 = -v90;
                      }
                      if ((v118.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        unint64_t v92 = &v118;
                      }
                      else {
                        unint64_t v92 = (std::string *)v118.__r_.__value_.__r.__words[0];
                      }
                      v92->__r_.__value_.__s.__data_[v91] ^= v87;
                      --v85;
                    }
                    while (v85);
                  }
                  if (v86 < 0) {
                    operator delete(v101);
                  }
                  if (SHIBYTE(v106) < 0) {
                    operator delete(__p);
                  }
                  __dst.__r_.__value_.__r.__words[0] = v100;
                  *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + *(void *)(v100 - 24)) = v98;
                  __dst.__r_.__value_.__l.__size_ = MEMORY[0x1E4FBA470] + 16;
                  if (v113 < 0) {
                    operator delete(v112);
                  }
                  std::streambuf::~streambuf();
                  std::ostream::~ostream();
                  MEMORY[0x19F3BDC30](v116);
                  goto LABEL_167;
                }
              }
              memmove(v69, v72, v68);
              goto LABEL_133;
            }
          }
          unint64_t v70 = v114;
          __n128 v71 = (const void **)&v110;
          if (v114 < v111)
          {
            unint64_t v114 = v111;
            unint64_t v70 = v111;
            __n128 v71 = (const void **)&v110;
          }
          goto LABEL_125;
        }
      }
      memmove(v61, v58, v60);
      goto LABEL_111;
    }
LABEL_173:
    if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0) {
      sub_19E39369C(&__dst, v118.__r_.__value_.__l.__data_, v118.__r_.__value_.__l.__size_);
    }
    else {
      std::string __dst = v118;
    }
    unint64_t v96 = (void **)(v1 + 200);
    if (*(char *)(v1 + 223) < 0) {
      operator delete(*v96);
    }
    *(_OWORD *)unint64_t v96 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
    *(void *)(v1 + 216) = *((void *)&__dst.__r_.__value_.__l + 2);
    *(unsigned char *)(v1 + 172) = 1;
    if ((SHIBYTE(v118.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if ((SHIBYTE(v120.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return;
      }
LABEL_182:
      operator delete(v120.__r_.__value_.__l.__data_);
      return;
    }
    operator delete(v118.__r_.__value_.__l.__data_);
    if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_182;
    }
  }
}

void sub_19E496C0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  if (*(char *)(v26 - 121) < 0) {
    operator delete(*(void **)(v26 - 144));
  }
  if (*(char *)(v26 - 89) < 0) {
    operator delete(*(void **)(v26 - 112));
  }
  _Unwind_Resume(exception_object);
}

void sub_19E496CE4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  sub_19E496084(v3);
  if (*(char *)(v3 + 199) < 0)
  {
    size_t v5 = *(void **)(v3 + 176);
    unint64_t v6 = *(void *)(v3 + 184);
    sub_19E39369C((unsigned char *)a2, v5, v6);
  }
  else
  {
    long long v4 = *(_OWORD *)(v3 + 176);
    *(void *)(a2 + 16) = *(void *)(v3 + 192);
    *(_OWORD *)a2 = v4;
  }
}

uint64_t sub_19E496D50(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void sub_19E496D58(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  int v5 = *(_DWORD *)(v4 + 168);
  if (v5 >= 2)
  {
    *(_DWORD *)(v4 + 168) = v5 - 1;
    operator new();
  }
  unint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 120))(a2);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 128))(a2, 0);
  if (v6)
  {
    uint64_t v8 = v7;
    uint64_t v9 = 0;
    do
    {
      uint64_t v10 = *(void **)(a1 + 8);
      (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)a2 + 88))(__p, a2, v8);
      sub_19E497314(v10, (uint64_t)__p, v10[3]);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
      if (++v9 < v6) {
        uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 128))(a2, v9);
      }
    }
    while (v6 != v9);
  }
}

void sub_19E496ED8(_Unwind_Exception *a1)
{
  MEMORY[0x19F3BDCF0](v1, 0x10B2C404FCE5648);
  _Unwind_Resume(a1);
}

void sub_19E496EFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_19E496F1C(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_19E39369C(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)std::string __dst = v4;
  }
  long long v5 = *(long long *)((char *)a2 + 24);
  uint64_t v7 = *((void *)a2 + 6);
  uint64_t v6 = *((void *)a2 + 7);
  *((void *)__dst + 6) = 0;
  *(_OWORD *)(__dst + ++*(_DWORD *)(result + 24) = v5;
  *((void *)__dst + 5) = -1;
  *((void *)__dst + 7) = 0;
  *((void *)__dst + 8) = 0;
  int64_t v8 = v6 - v7;
  if (v6 == v7)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
  }
  else
  {
    if (v8 < 0) {
      sub_19E37C7C4();
    }
    uint64_t v9 = (char *)operator new(v6 - v7);
    *((void *)__dst + 6) = v9;
    *((void *)__dst + 8) = &v9[8 * (v8 >> 3)];
    bzero(v9, v8);
    uint64_t v10 = &v9[v8];
    *((void *)__dst + 7) = &v9[v8];
  }
  *((void *)__dst + 10) = 0;
  *((void *)__dst + 11) = 0;
  *((void *)__dst + 12) = 0;
  char v12 = (unsigned char *)*((void *)a2 + 10);
  int v11 = (unsigned char *)*((void *)a2 + 11);
  int64_t v13 = v11 - v12;
  if (v11 != v12)
  {
    if (v13 < 0) {
      sub_19E37C7C4();
    }
    std::string::value_type v14 = (char *)operator new(v11 - v12);
    *((void *)__dst + 10) = v14;
    *((void *)__dst + 11) = v14;
    std::string::value_type v15 = &v14[8 * (v13 >> 3)];
    *((void *)__dst + 12) = v15;
    memcpy(v14, v12, v13);
    *((void *)__dst + 11) = v15;
  }
  *((void *)__dst + 13) = *((void *)a2 + 13);
  *((_DWORD *)__dst + 28) = *((_DWORD *)a2 + 28);
  if (v10 != v9)
  {
    strlen(**((const char ***)a2 + 6));
    operator new[]();
  }
  *((void *)__dst + 15) = 0;
  *((void *)__dst + 16) = 0;
  *((void *)__dst + 17) = 0;
  BOOL v17 = (unsigned char *)*((void *)a2 + 15);
  int v16 = (unsigned char *)*((void *)a2 + 16);
  int64_t v18 = v16 - v17;
  if (v16 != v17)
  {
    if (v18 < 0) {
      sub_19E37C7C4();
    }
    int v19 = (char *)operator new(v16 - v17);
    *((void *)__dst + 15) = v19;
    *((void *)__dst + 16) = v19;
    size_t v20 = &v19[8 * (v18 >> 3)];
    *((void *)__dst + 17) = v20;
    memcpy(v19, v17, v18);
    *((void *)__dst + 16) = v20;
  }
  *((void *)__dst + 19) = 0;
  *((void *)__dst + 20) = 0;
  *((void *)__dst + 18) = __dst + 152;
  int64_t v21 = (void *)*((void *)a2 + 18);
  uint64_t v22 = (void *)a2 + 19;
  if (v21 != v22)
  {
    do
    {
      size_t v24 = v21 + 4;
      size_t v25 = (void *)*((void *)__dst + 19);
      uint64_t v26 = __dst + 152;
      if (*((char **)__dst + 18) == __dst + 152) {
        goto LABEL_25;
      }
      uint64_t v27 = (void *)*((void *)__dst + 19);
      uint64_t v28 = __dst + 152;
      if (v25)
      {
        do
        {
          uint64_t v26 = v27;
          uint64_t v27 = (void *)v27[1];
        }
        while (v27);
      }
      else
      {
        do
        {
          uint64_t v26 = (void *)*((void *)v28 + 2);
          BOOL v29 = *v26 == (void)v28;
          uint64_t v28 = (char *)v26;
        }
        while (v29);
      }
      uint64_t v30 = *v24;
      if (v26[4] < *v24)
      {
LABEL_25:
        if (v25) {
          uint64_t v31 = v26;
        }
        else {
          uint64_t v31 = __dst + 152;
        }
        if (v25) {
          char v32 = v26 + 1;
        }
        else {
          char v32 = __dst + 152;
        }
      }
      else
      {
        uint64_t v31 = __dst + 152;
        char v32 = __dst + 152;
        if (v25)
        {
          char v32 = __dst + 152;
          while (1)
          {
            while (1)
            {
              uint64_t v31 = v25;
              uint64_t v34 = v25[4];
              if (v30 >= v34) {
                break;
              }
              size_t v25 = (void *)*v31;
              char v32 = v31;
              if (!*v31) {
                goto LABEL_40;
              }
            }
            if (v34 >= v30) {
              break;
            }
            char v32 = v31 + 1;
            size_t v25 = (void *)v31[1];
            if (!v25) {
              goto LABEL_40;
            }
          }
        }
      }
      if (*v32)
      {
        size_t v33 = (void *)v21[1];
        if (v33) {
          goto LABEL_43;
        }
      }
      else
      {
LABEL_40:
        unint64_t v35 = operator new(0x30uLL);
        v35[2] = *(_OWORD *)v24;
        *(void *)unint64_t v35 = 0;
        *((void *)v35 + 1) = 0;
        *((void *)v35 + 2) = v31;
        *char v32 = v35;
        uint64_t v36 = **((void **)__dst + 18);
        if (v36)
        {
          *((void *)__dst + 18) = v36;
          unint64_t v35 = (_OWORD *)*v32;
        }
        sub_19E37D324(*((uint64_t **)__dst + 19), (uint64_t *)v35);
        ++*((void *)__dst + 20);
        size_t v33 = (void *)v21[1];
        if (v33)
        {
          do
          {
LABEL_43:
            uint64_t v37 = v33;
            size_t v33 = (void *)*v33;
          }
          while (v33);
          goto LABEL_18;
        }
      }
      do
      {
        uint64_t v37 = (void *)v21[2];
        BOOL v29 = *v37 == (void)v21;
        int64_t v21 = v37;
      }
      while (!v29);
LABEL_18:
      int64_t v21 = v37;
    }
    while (v37 != v22);
  }
  *((_DWORD *)__dst + 42) = 1;
  __dst[172] = 0;
  *((_OWORD *)__dst + 11) = 0u;
  *((_OWORD *)__dst + 12) = 0u;
  *((_OWORD *)__dst + 13) = 0u;
  return __dst;
}

void sub_19E497284(_Unwind_Exception *a1)
{
  long long v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 128) = v5;
    operator delete(v5);
  }
  sub_19E497B08(v2);
  if ((*(char *)(v1 + 23) & 0x80000000) == 0) {
    _Unwind_Resume(a1);
  }
  operator delete(*(void **)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19E497314(void *a1, uint64_t a2, uint64_t a3)
{
  if (a3 == -1) {
    return -1;
  }
  long long v5 = (char *)a1[10];
  uint64_t v6 = (char *)a1[11];
  uint64_t v61 = (char *)(a1 + 6);
  uint64_t v7 = v6 - v5;
  unint64_t v8 = (v6 - v5) >> 3;
  if ((float)((float)v8 * 0.75) <= (float)(unint64_t)((uint64_t)(a1[7] - a1[6]) >> 3))
  {
    unint64_t v9 = v7 >> 2;
    unint64_t v10 = (v7 >> 2) - v8;
    if (v7 >> 2 <= v8)
    {
      if (v7 >> 2 < v8)
      {
        uint64_t v6 = &v5[8 * v9];
        a1[11] = v6;
      }
      int64_t v18 = (char *)(a1 + 6);
LABEL_27:
      a1[13] = ((v6 - v5) >> 3) - 1;
      if (v5 == v6) {
        goto LABEL_36;
      }
      uint64_t v26 = (const double *)(v18 - 8);
      unint64_t v27 = v6 - v5 - 8;
      if (v27 >= 0x78 && (v5 >= v18 || &v5[(v27 & 0xFFFFFFFFFFFFFFF8) + 8] <= (char *)v26))
      {
        uint64_t v28 = (v27 >> 3) + 1;
        float64x2_t v29 = vld1q_dup_f64(v26);
        uint64_t v30 = (float64x2_t *)(v5 + 16);
        uint64_t v31 = v28 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v30[-1] = v29;
          float64x2_t *v30 = v29;
          v30 += 2;
          v31 -= 4;
        }
        while (v31);
        if (v28 == (v28 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_36:
          uint64_t v32 = a1[6];
          if (a1[7] != v32)
          {
            unint64_t v33 = 0;
            while (1)
            {
              uint64_t v34 = *(const char **)(v32 + 8 * v33);
              size_t v35 = strlen(v34);
              if (v35 >= 0x7FFFFFFFFFFFFFF8) {
                sub_19E37C958();
              }
              size_t v36 = v35;
              if (v35 >= 0x17)
              {
                uint64_t v38 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v35 | 7) != 0x17) {
                  uint64_t v38 = v35 | 7;
                }
                uint64_t v39 = v38 + 1;
                p_dst = (void **)operator new(v38 + 1);
                size_t v63 = v36;
                int64_t v64 = v39 | 0x8000000000000000;
                std::string __dst = (uint64_t *)p_dst;
              }
              else
              {
                HIBYTE(v64) = v35;
                p_dst = (void **)&__dst;
                if (!v35) {
                  goto LABEL_47;
                }
              }
              memmove(p_dst, v34, v36);
LABEL_47:
              *((unsigned char *)p_dst + v36) = 0;
              if (v64 >= 0) {
                int v40 = (uint64_t *)&__dst;
              }
              else {
                int v40 = __dst;
              }
              if (v64 >= 0) {
                unint64_t v41 = HIBYTE(v64);
              }
              else {
                unint64_t v41 = v63;
              }
              unint64_t v42 = sub_19E37BDA4((uint64_t)&v65, v40, v41);
              uint64_t v43 = a1[13];
              if (SHIBYTE(v64) < 0) {
                operator delete(__dst);
              }
              uint64_t v44 = v43 & v42;
              uint64_t v45 = a1[10];
              uint64_t v46 = a1[5];
              if (*(void *)(v45 + 8 * (v43 & v42)) != v46)
              {
                do
                  uint64_t v44 = a1[13] & (v44 + 1);
                while (*(void *)(v45 + 8 * v44) != v46);
              }
              *(void *)(v45 + 8 * v44) = v33++;
              uint64_t v32 = a1[6];
              if (v33 >= (a1[7] - v32) >> 3) {
                goto LABEL_58;
              }
            }
          }
          goto LABEL_58;
        }
        v5 += 8 * (v28 & 0x3FFFFFFFFFFFFFFCLL);
      }
      do
      {
        *(double *)long long v5 = *v26;
        v5 += 8;
      }
      while (v5 != v6);
      goto LABEL_36;
    }
    uint64_t v11 = a1[12];
    if (v10 <= (v11 - (uint64_t)v6) >> 3)
    {
      bzero(v6, 8 * v10);
      int v16 = &v6[8 * v10];
      a1[11] = v16;
      int64_t v18 = v61;
LABEL_26:
      long long v5 = (char *)a1[10];
      uint64_t v6 = v16;
      goto LABEL_27;
    }
    if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFFDLL) {
      sub_19E37C7C4();
    }
    uint64_t v12 = v11 - (void)v5;
    if (v12 >> 2 > v9) {
      unint64_t v9 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
    }
    if (v9 >> 61) {
      sub_19E37C2B8();
    }
    uint64_t v13 = 8 * v9;
    std::string::value_type v14 = (char *)operator new(8 * v9);
    std::string::value_type v15 = &v14[8 * v8];
    size_t v59 = v14;
    size_t v60 = &v14[v13];
    bzero(v15, 8 * v10);
    int v16 = &v15[8 * v10];
    if (v6 == v5)
    {
      int v19 = v60;
      int64_t v18 = v61;
      goto LABEL_24;
    }
    unint64_t v17 = v6 - v5 - 8;
    int64_t v18 = v61;
    if (v17 >= 0x58)
    {
      int v19 = v60;
      if ((unint64_t)(v5 - v59) >= 0x20)
      {
        uint64_t v20 = (v17 >> 3) + 1;
        int64_t v21 = &v59[8 * v8 - 16];
        uint64_t v22 = (long long *)(v6 - 16);
        uint64_t v23 = v20 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v24 = *v22;
          *((_OWORD *)v21 - 1) = *(v22 - 1);
          *(_OWORD *)int64_t v21 = v24;
          v21 -= 32;
          v22 -= 2;
          v23 -= 4;
        }
        while (v23);
        v15 -= 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
        v6 -= 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
        if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_24:
          a1[10] = v15;
          a1[11] = v16;
          a1[12] = v19;
          if (v5)
          {
            operator delete(v5);
            int v16 = (char *)a1[11];
          }
          goto LABEL_26;
        }
      }
    }
    else
    {
      int v19 = v60;
    }
    do
    {
      uint64_t v25 = *((void *)v6 - 1);
      v6 -= 8;
      *((void *)v15 - 1) = v25;
      v15 -= 8;
    }
    while (v6 != v5);
    goto LABEL_24;
  }
LABEL_58:
  int v47 = *(char *)(a2 + 23);
  if (v47 >= 0) {
    uint64_t v48 = (uint64_t *)a2;
  }
  else {
    uint64_t v48 = *(uint64_t **)a2;
  }
  if (v47 >= 0) {
    unint64_t v49 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    unint64_t v49 = *(void *)(a2 + 8);
  }
  unint64_t v50 = sub_19E37BDA4((uint64_t)&__dst, v48, v49);
  uint64_t v51 = a1[13];
  uint64_t v52 = a1[10];
  uint64_t v53 = v50 & v51;
  unint64_t v54 = *(void *)(v52 + 8 * (v50 & v51));
  uint64_t v56 = a1[5];
  uint64_t v55 = a1[6];
  if (v54 == v56)
  {
LABEL_70:
    *(void *)(v52 + 8 * v53) = (a1[7] - v55) >> 3;
    operator new[]();
  }
  if (*(char *)(a2 + 23) >= 0) {
    char v57 = (const char *)a2;
  }
  else {
    char v57 = *(const char **)a2;
  }
  while (strcmp(*(const char **)(v55 + 8 * v54), v57))
  {
    uint64_t v53 = (v53 + 1) & v51;
    unint64_t v54 = *(void *)(v52 + 8 * v53);
    if (v54 == v56) {
      goto LABEL_70;
    }
  }
  return sub_19E4952A4(a1, v54);
}

void *sub_19E497B08(void *a1)
{
  long long v4 = a1 + 1;
  uint64_t v2 = (void *)a1[1];
  uint64_t v3 = (void *)v4[1];
  if (v3 == v2)
  {
    uint64_t v2 = v3;
  }
  else
  {
    unint64_t v5 = 0;
    do
    {
      if (v2[v5])
      {
        MEMORY[0x19F3BDCC0](v2[v5], 0x1000C8077774924);
        uint64_t v2 = (void *)a1[1];
        uint64_t v3 = (void *)a1[2];
      }
      ++v5;
    }
    while (v5 < v3 - v2);
  }
  uint64_t v6 = (void *)a1[5];
  if (v6)
  {
    a1[6] = v6;
    operator delete(v6);
    uint64_t v2 = (void *)a1[1];
  }
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_19E497BA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = *(_DWORD *)(v2 + 168);
  if (v3 >= 2)
  {
    *(_DWORD *)(v2 + 168) = v3 - 1;
    operator new();
  }
  uint64_t v4 = *(void *)(v2 + 24);
  unint64_t v5 = *(void **)(a1 + 8);
  return sub_19E497314(v5, a2, v4);
}

void sub_19E497C28(_Unwind_Exception *a1)
{
  MEMORY[0x19F3BDCF0](v1, 0x10B2C404FCE5648);
  _Unwind_Resume(a1);
}

uint64_t sub_19E497C4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  int v4 = *(_DWORD *)(v3 + 168);
  if (v4 >= 2)
  {
    *(_DWORD *)(v3 + 168) = v4 - 1;
    operator new();
  }
  unint64_t v5 = *(void **)(a1 + 8);
  return sub_19E497314(v5, a2, a3);
}

void sub_19E497CD8(_Unwind_Exception *a1)
{
  MEMORY[0x19F3BDCF0](v1, 0x10B2C404FCE5648);
  _Unwind_Resume(a1);
}

void sub_19E497CFC()
{
}

void sub_19E497D60(void *a1)
{
  *a1 = &unk_1EF0BC870;
  uint64_t v1 = a1[1];
  int v2 = *(_DWORD *)(v1 + 168) - 1;
  *(_DWORD *)(v1 + 168) = v2;
  if (!v2)
  {
    uint64_t v3 = sub_19E497DEC(v1);
    MEMORY[0x19F3BDCF0](v3, 0x10B2C404FCE5648);
  }
  JUMPOUT(0x19F3BDCF0);
}

uint64_t sub_19E497DEC(uint64_t a1)
{
  if (*(char *)(a1 + 223) < 0)
  {
    operator delete(*(void **)(a1 + 200));
    if ((*(char *)(a1 + 199) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((*(char *)(a1 + 199) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 176));
LABEL_3:
  sub_19E418864(*(void **)(a1 + 152));
  int v2 = *(void **)(a1 + 120);
  if (v2)
  {
    *(void *)(a1 + 128) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 48);
  int v4 = *(unsigned char **)(a1 + 56);
  if (v4 == (unsigned char *)v3)
  {
    uint64_t v3 = *(void **)(a1 + 56);
  }
  else
  {
    unint64_t v5 = 0;
    do
    {
      if (v3[v5])
      {
        MEMORY[0x19F3BDCC0](v3[v5], 0x1000C8077774924);
        uint64_t v3 = *(void **)(a1 + 48);
        int v4 = *(unsigned char **)(a1 + 56);
      }
      ++v5;
    }
    while (v5 < (v4 - (unsigned char *)v3) >> 3);
  }
  uint64_t v6 = *(void **)(a1 + 80);
  if (v6)
  {
    *(void *)(a1 + 88) = v6;
    operator delete(v6);
    uint64_t v3 = *(void **)(a1 + 48);
  }
  if (v3)
  {
    *(void *)(a1 + 56) = v3;
    operator delete(v3);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *sub_19E497ED8(void *a1)
{
  *a1 = &unk_1EF0BC870;
  uint64_t v2 = a1[1];
  int v3 = *(_DWORD *)(v2 + 168) - 1;
  *(_DWORD *)(v2 + 168) = v3;
  if (!v3)
  {
    uint64_t v4 = sub_19E497DEC(v2);
    MEMORY[0x19F3BDCF0](v4, 0x10B2C404FCE5648);
  }
  return a1;
}

BOOL sub_19E497F44(__CFBundle *a1)
{
  CFDictionaryRef InfoDictionary = CFBundleGetInfoDictionary(a1);
  if (!InfoDictionary) {
    __assert_rtn("_getInfoDictionary", "BlocklistBundle.cpp", 218, "d && \"An Info.plist file was unable to be read from the bundle\"");
  }
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(InfoDictionary, @"Contents");
  if (!Value) {
    __assert_rtn("_getContents", "BlocklistBundle.cpp", 229, "(contents != 0) && \"There should files contained within the blocklist bundle\"");
  }
  CFArrayRef v3 = Value;
  if (CFArrayGetCount(Value) != 1) {
    return 0;
  }
  CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v3, 0);
  int valuePtr = 0;
  CFNumberRef v5 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"Type");
  CFNumberGetValue(v5, kCFNumberIntType, &valuePtr);
  return valuePtr == 10;
}

uint64_t sub_19E49800C(__CFBundle *a1)
{
  CFDictionaryRef InfoDictionary = CFBundleGetInfoDictionary(a1);
  if (!InfoDictionary) {
    __assert_rtn("_getInfoDictionary", "BlocklistBundle.cpp", 218, "d && \"An Info.plist file was unable to be read from the bundle\"");
  }
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(InfoDictionary, @"Contents");
  if (!Value) {
    __assert_rtn("_getContents", "BlocklistBundle.cpp", 229, "(contents != 0) && \"There should files contained within the blocklist bundle\"");
  }
  CFArrayRef v3 = Value;
  CFIndex Count = CFArrayGetCount(Value);
  if (Count >= 2)
  {
    CFIndex v6 = Count;
    CFIndex v7 = 0;
    char v8 = 0;
    char v9 = 0;
    do
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v3, v7);
      int valuePtr = 0;
      CFNumberRef v11 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"Type");
      CFNumberGetValue(v11, kCFNumberIntType, &valuePtr);
      v9 |= valuePtr == 41;
      v8 |= valuePtr == 42;
      ++v7;
    }
    while (v6 != v7);
    char v5 = v9 & v8;
  }
  else
  {
    char v5 = 0;
  }
  return v5 & 1;
}

uint64_t sub_19E49811C(__CFBundle *a1)
{
  CFDictionaryRef InfoDictionary = CFBundleGetInfoDictionary(a1);
  if (!InfoDictionary) {
    __assert_rtn("_getInfoDictionary", "BlocklistBundle.cpp", 218, "d && \"An Info.plist file was unable to be read from the bundle\"");
  }
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(InfoDictionary, @"Contents");
  if (!Value) {
    __assert_rtn("_getContents", "BlocklistBundle.cpp", 229, "(contents != 0) && \"There should files contained within the blocklist bundle\"");
  }
  CFArrayRef v3 = Value;
  CFIndex Count = CFArrayGetCount(Value);
  if (Count >= 2)
  {
    CFIndex v6 = Count;
    CFIndex v7 = 0;
    char v8 = 0;
    char v9 = 0;
    do
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v3, v7);
      int valuePtr = 0;
      CFNumberRef v11 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"Type");
      CFNumberGetValue(v11, kCFNumberIntType, &valuePtr);
      v9 |= valuePtr == 41;
      v8 |= valuePtr == 53;
      ++v7;
    }
    while (v6 != v7);
    char v5 = v9 & v8;
  }
  else
  {
    char v5 = 0;
  }
  return v5 & 1;
}

__CFDictionary *sub_19E49822C(CFURLRef *a1, const __CFDictionary *a2)
{
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  LODWORD(valuePtr) = 0;
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a2, @"Type");
  CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
  int v12 = (int)valuePtr;
  CFIndex v7 = CFDictionaryGetValue(a2, @"Name");
  CFStringRef v8 = CFStringCreateWithFormat(v4, 0, @"%@.%@", v7, @"dat");
  int valuePtr = (void *)v8;
  CFURLRef v9 = CFURLCreateCopyAppendingPathComponent(v4, *a1, v8, 0);
  if (v8) {
    CFRelease(v8);
  }
  CFNumberRef v10 = CFNumberCreate(v4, kCFNumberIntType, &v12);
  int valuePtr = v10;
  CFDictionarySetValue(Mutable, @"Name", v7);
  CFDictionarySetValue(Mutable, @"URL", v9);
  CFDictionarySetValue(Mutable, @"Type", v10);
  if (v10) {
    CFRelease(v10);
  }
  if (v9) {
    CFRelease(v9);
  }
  return Mutable;
}

void sub_19E49839C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_19E3F6888((const void **)va);
  _Unwind_Resume(a1);
}

CFIndex sub_19E4983D4(void *a1, CFURLRef *a2)
{
  if ((sub_19E49800C(a2[1]) & 1) == 0 && (sub_19E49811C(a2[1]) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    sub_19E382340(&valuePtr, "Malformed lemmatized/V3 blocklist bundle configuration: cannot load the lemmatized blocklist resource");
    sub_19E3F5604(exception, &valuePtr);
    __cxa_throw(exception, (struct type_info *)&unk_1EF0B7540, (void (*)(void *))sub_19E3F56B0);
  }
  CFDictionaryRef InfoDictionary = CFBundleGetInfoDictionary(a2[1]);
  if (!InfoDictionary) {
    __assert_rtn("_getInfoDictionary", "BlocklistBundle.cpp", 218, "d && \"An Info.plist file was unable to be read from the bundle\"");
  }
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(InfoDictionary, @"Contents");
  if (!Value) {
    __assert_rtn("_getContents", "BlocklistBundle.cpp", 229, "(contents != 0) && \"There should files contained within the blocklist bundle\"");
  }
  CFArrayRef v6 = Value;
  for (CFIndex i = 0; ; ++i)
  {
    CFIndex result = CFArrayGetCount(v6);
    if (i >= result) {
      break;
    }
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v6, i);
    LODWORD(valuePtr) = 0;
    CFNumberRef v10 = (const __CFNumber *)CFDictionaryGetValue(ValueAtIndex, @"Type");
    CFNumberGetValue(v10, kCFNumberIntType, &valuePtr);
    if (valuePtr == 41)
    {
      *(void *)&long long valuePtr = sub_19E49822C(a2, ValueAtIndex);
      operator new();
    }
  }
  *a1 = 0;
  return result;
}

void sub_19E498588(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if (v16)
    {
LABEL_6:
      __cxa_free_exception(v15);
      _Unwind_Resume(a1);
    }
  }
  else if (v16)
  {
    goto LABEL_6;
  }
  _Unwind_Resume(a1);
}

void sub_19E4985C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x19F3BDCF0](v2, 0x1060C40C2E02434);
  sub_19E4015C8((const void **)va);
  _Unwind_Resume(a1);
}

void sub_19E4985FC(int a1, CFURLRef url)
{
  CFStringRef PathComponent = CFURLCopyLastPathComponent(url);
  if (CFStringHasSuffix(PathComponent, @".lm")) {
    sub_19E3C2CE4();
  }
  exception = __cxa_allocate_exception(0x20uLL);
  sub_19E382340(&v3, "invalid bundle");
  sub_19E3F5604(exception, (long long *)&v3.st_dev);
  __cxa_throw(exception, (struct type_info *)&unk_1EF0B7540, (void (*)(void *))sub_19E3F56B0);
}

void sub_19E498EE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, int a20,__int16 a21,char a22,char a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v35 - 89) < 0)
  {
    operator delete(*(void **)(v35 - 112));
    if (*(char *)(v35 - 129) < 0)
    {
LABEL_5:
      operator delete(*(void **)(v35 - 152));
      if ((*(char *)(v35 - 153) & 0x80000000) == 0)
      {
LABEL_10:
        if (!v34) {
          goto LABEL_12;
        }
        goto LABEL_11;
      }
LABEL_8:
      operator delete(*(void **)(v35 - 176));
      if ((v34 & 1) == 0)
      {
LABEL_12:
        if (*(char *)(v35 - 185) < 0) {
          operator delete(*(void **)(v35 - 208));
        }
        sub_19E3DCC24((const void **)(v35 - 184));
        _Unwind_Resume(a1);
      }
LABEL_11:
      __cxa_free_exception(v33);
      goto LABEL_12;
    }
  }
  else if (*(char *)(v35 - 129) < 0)
  {
    goto LABEL_5;
  }
  if ((*(char *)(v35 - 153) & 0x80000000) == 0) {
    goto LABEL_10;
  }
  goto LABEL_8;
}

uint64_t sub_19E4991D0(uint64_t a1, const void **a2, CFErrorRef err)
{
  v25[2] = *MEMORY[0x1E4F143B8];
  *(void *)a1 = &unk_1EF0BD3F0;
  *(void *)(a1 + 8) = 0;
  char v5 = (void **)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = 0;
  CFStringRef v6 = CFErrorCopyDescription(err);
  CFStringRef v24 = v6;
  int v7 = *((char *)a2 + 23);
  if (v7 >= 0) {
    size_t v8 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v8 = (size_t)a2[1];
  }
  unint64_t v9 = v8 + 2;
  if (v8 + 2 >= 0x7FFFFFFFFFFFFFF8) {
    sub_19E37C958();
  }
  if (v9 >= 0x17)
  {
    uint64_t v11 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v11 = v9 | 7;
    }
    uint64_t v12 = v11 + 1;
    p_dst = (std::string *)operator new(v11 + 1);
    __dst.__r_.__value_.__l.__size_ = v8 + 2;
    __dst.__r_.__value_.__r.__words[2] = v12 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v8 + 2;
    if (!v8) {
      goto LABEL_15;
    }
  }
  if (v7 >= 0) {
    uint64_t v13 = a2;
  }
  else {
    uint64_t v13 = *a2;
  }
  memmove(p_dst, v13, v8);
LABEL_15:
  strcpy((char *)p_dst + v8, ": ");
  sub_19E37774C(v6, __p);
  if ((v22 & 0x80u) == 0) {
    std::string::value_type v14 = __p;
  }
  else {
    std::string::value_type v14 = (void **)__p[0];
  }
  if ((v22 & 0x80u) == 0) {
    std::string::size_type v15 = v22;
  }
  else {
    std::string::size_type v15 = (std::string::size_type)__p[1];
  }
  int v16 = std::string::append(&__dst, (const std::string::value_type *)v14, v15);
  std::string::size_type v17 = v16->__r_.__value_.__r.__words[0];
  v25[0] = v16->__r_.__value_.__l.__size_;
  *(void *)((char *)v25 + 7) = *(std::string::size_type *)((char *)&v16->__r_.__value_.__r.__words[1] + 7);
  char v18 = HIBYTE(v16->__r_.__value_.__r.__words[2]);
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*v5);
  }
  uint64_t v19 = v25[0];
  *(void *)(a1 + 8) = v17;
  *(void *)(a1 + 16) = v19;
  *(void *)(a1 + 23) = *(void *)((char *)v25 + 7);
  *(unsigned char *)(a1 + 31) = v18;
  if ((char)v22 < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_25:
      if (!v6) {
        return a1;
      }
      goto LABEL_29;
    }
  }
  else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_25;
  }
  operator delete(__dst.__r_.__value_.__l.__data_);
  if (v6) {
LABEL_29:
  }
    CFRelease(v6);
  return a1;
}

void sub_19E4993D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a2) {
    sub_19E37B770(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_19E49944C(CFURLRef fileURL, const void *a2, int a3)
{
  CFErrorRef v9 = 0;
  BOOL result = sub_19E3C2D94(a2, fileURL, kCFPropertyListXMLFormat_v1_0, a3 == 1, &v9);
  if (!result)
  {
    CFAllocatorRef v4 = v9;
    if (!v9)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      sub_19E382340(&v7, "writeInfoDictionary failed: unspecified error");
      sub_19E3F5604(exception, &v7);
      __cxa_throw(exception, (struct type_info *)&unk_1EF0B7540, (void (*)(void *))sub_19E3F56B0);
    }
    CFErrorRef v8 = v9;
    CFStringRef v6 = __cxa_allocate_exception(0x20uLL);
    sub_19E382340(&v7, "writeInfoDictionary failed:");
    sub_19E4991D0((uint64_t)v6, (const void **)&v7, v4);
    __cxa_throw(v6, (struct type_info *)&unk_1EF0B7540, (void (*)(void *))sub_19E3F56B0);
  }
  return result;
}

void sub_19E499558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, const void *a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      sub_19E43FD1C(&a16);
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

void sub_19E4995D0(uint64_t a1, int a2, const __CFString *a3)
{
  int valuePtr = a2;
  uint64_t v14 = 0;
  char v5 = (std::mutex *)(a1 + 64);
  std::mutex::lock((std::mutex *)(a1 + 64));
  if (*(void *)(a1 + 56))
  {
    CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
    for (CFIndex i = 0; i < CFArrayGetCount(*(CFArrayRef *)(a1 + 56)); ++i)
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 56), i);
      CFStringRef Value = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, @"Name");
      if (Value)
      {
        if (CFStringCompare(Value, a3, 0)) {
          CFArrayAppendValue(Mutable, ValueAtIndex);
        }
      }
    }
    CFNumberRef v10 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFNumberRef v11 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    CFNumberRef v12 = CFNumberCreate(0, kCFNumberCFIndexType, &v14);
    CFDictionarySetValue(v10, @"Name", a3);
    CFDictionarySetValue(v10, @"Type", v11);
    CFDictionarySetValue(v10, @"Priority", v12);
    CFArrayAppendValue(Mutable, v10);
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 48), @"Contents", Mutable);
    uint64_t v13 = *(const void **)(a1 + 56);
    if (v13) {
      CFRelease(v13);
    }
    *(void *)(a1 + 56) = Mutable;
    sub_19E49944C(*(CFURLRef *)(a1 + 8), *(const void **)(a1 + 48), *(_DWORD *)a1);
    if (v12) {
      CFRelease(v12);
    }
    if (v11) {
      CFRelease(v11);
    }
    if (v10) {
      CFRelease(v10);
    }
  }
  std::mutex::unlock(v5);
}

void sub_19E4997BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  CFAllocatorRef v4 = va_arg(va1, const void *);
  va_copy(va2, va1);
  CFStringRef v6 = va_arg(va2, const void *);
  sub_19E431EA8((const void **)va);
  sub_19E410F30((const void **)va1);
  sub_19E3F6818((const void **)va2);
  std::mutex::unlock(v2);
  _Unwind_Resume(a1);
}

CFURLRef sub_19E49981C(uint64_t a1, CFStringRef theString)
{
  if (CFStringFind(theString, @".", 0).location == -1) {
    CFStringRef v4 = CFStringCreateWithFormat(0, 0, @"%@.dat", theString);
  }
  else {
    CFStringRef v4 = CFStringCreateWithFormat(0, 0, @"%@", theString);
  }
  CFStringRef v5 = v4;
  CFURLRef v6 = CFURLCreateCopyAppendingPathComponent(0, *(CFURLRef *)(a1 + 16), v4, 0);
  if (v5) {
    CFRelease(v5);
  }
  return v6;
}

void sub_19E4998B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E3DCC24((const void **)va);
  _Unwind_Resume(a1);
}

BOOL sub_19E4998CC(uint64_t a1, const __CFString *a2)
{
  CFStringRef v4 = (std::mutex *)(a1 + 64);
  std::mutex::lock((std::mutex *)(a1 + 64));
  if (*(void *)(a1 + 56))
  {
    CFIndex v5 = 0;
    while (1)
    {
      CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 56));
      BOOL v7 = v5 < Count;
      if (v5 >= Count) {
        break;
      }
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 56), v5);
      CFStringRef Value = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, @"Name");
      ++v5;
      if (CFEqual(Value, a2))
      {
        BOOL v7 = 1;
        break;
      }
    }
  }
  else
  {
    BOOL v7 = 0;
  }
  std::mutex::unlock(v4);
  return v7;
}

void sub_19E499974(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

BOOL sub_19E499990(const void *a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    CFDictionaryRef theDict = 0;
LABEL_17:
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3BD790](exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFRetain(a1);
  sub_19E36E590(&theDict, a1);
  if (!theDict) {
    goto LABEL_17;
  }
  if (CFDictionaryContainsKey(theDict, @"TrainedWithUNK"))
  {
    if (!theDict)
    {
      CFErrorRef v9 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x19F3BD790](v9, "Could not construct");
      __cxa_throw(v9, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, @"TrainedWithUNK");
    if (Value)
    {
      unsigned __int16 v3 = sub_19E3D7020(Value);
      if (v3 > 0xFFu)
      {
        BOOL v5 = v3 != 0;
        CFDictionaryRef v6 = theDict;
        if (!theDict) {
          return v5;
        }
        goto LABEL_12;
      }
    }
    if (qword_1EC0095B8 != -1) {
      dispatch_once(&qword_1EC0095B8, &unk_1EF0BEC40);
    }
    CFStringRef v4 = qword_1EC0095B0;
    if (os_log_type_enabled((os_log_t)qword_1EC0095B0, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315394;
      CFNumberRef v12 = "modelWasTrainedWithUNK";
      __int16 v13 = 2112;
      uint64_t v14 = @"TrainedWithUNK";
      _os_log_error_impl(&dword_19E36B000, v4, OS_LOG_TYPE_ERROR, "%s: Malformed options dictionary: invalid value for key='%@'", buf, 0x16u);
    }
  }
  BOOL v5 = 0;
  CFDictionaryRef v6 = theDict;
  if (theDict) {
LABEL_12:
  }
    CFRelease(v6);
  return v5;
}

void sub_19E499B6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E3C6EAC((const void **)va);
  _Unwind_Resume(a1);
}

void sub_19E499BC8()
{
}

void sub_19E499E3C(_Unwind_Exception *a1)
{
  MEMORY[0x19F3BDCF0](v1, 0x1020C4055CCDE27);
  _Unwind_Resume(a1);
}

uint64_t sub_19E499E60(uint64_t a1, const char *a2)
{
  unsigned __int16 v3 = *(sqlite3 **)(a1 + 16);
  if (!v3) {
    goto LABEL_9;
  }
  uint64_t result = sqlite3_prepare_v2(v3, a2, -1, (sqlite3_stmt **)(a1 + 8), 0);
  if (result)
  {
    if (result == 26 || result == 11)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      sub_19E3F7ABC((uint64_t)exception, 1);
      goto LABEL_10;
    }
LABEL_9:
    exception = __cxa_allocate_exception(0x20uLL);
    sub_19E3F7ABC((uint64_t)exception, 5);
LABEL_10:
    __cxa_throw(exception, (struct type_info *)&unk_1EF0B6A10, (void (*)(void *))sub_19E3F7B5C);
  }
  return result;
}

void sub_19E499F0C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_19E499F28(unint64_t a1)
{
  uint64_t v2 = *(uint64_t ***)a1;
  if (*(void *)a1)
  {
    unsigned __int16 v3 = v2[1];
    if (v3)
    {
      CFStringRef v4 = (uint64_t *)(v2 + 1);
      BOOL v5 = v2[1];
      do
      {
        unint64_t v6 = v5[4];
        BOOL v7 = v6 >= a1;
        if (v6 >= a1) {
          CFErrorRef v8 = (uint64_t **)v5;
        }
        else {
          CFErrorRef v8 = (uint64_t **)(v5 + 1);
        }
        if (v7) {
          CFStringRef v4 = v5;
        }
        BOOL v5 = *v8;
      }
      while (*v8);
      if (v4 != (uint64_t *)(v2 + 1) && v4[4] <= a1)
      {
        CFErrorRef v9 = (uint64_t *)v4[1];
        if (v9)
        {
          do
          {
            CFNumberRef v10 = v9;
            CFErrorRef v9 = (uint64_t *)*v9;
          }
          while (v9);
        }
        else
        {
          CFNumberRef v11 = v4;
          do
          {
            CFNumberRef v10 = (uint64_t *)v11[2];
            BOOL v12 = *v10 == (void)v11;
            CFNumberRef v11 = v10;
          }
          while (!v12);
        }
        if (*v2 == v4) {
          std::mutex *v2 = v10;
        }
        v2[2] = (uint64_t *)((char *)v2[2] - 1);
        sub_19E3BAE64(v3, v4);
        operator delete(v4);
      }
    }
  }
  __int16 v13 = *(sqlite3_stmt **)(a1 + 8);
  if (v13)
  {
    sqlite3_finalize(v13);
    *(void *)(a1 + 8) = 0;
  }
  return a1;
}

uint64_t sub_19E49A008(uint64_t a1)
{
  *(_DWORD *)(a1 + ++*(_DWORD *)(result + 24) = 1;
  int v2 = sqlite3_reset(*(sqlite3_stmt **)(a1 + 8));
  if (v2)
  {
    char v3 = v2;
    if (qword_1EC009490 != -1) {
      dispatch_once(&qword_1EC009490, &unk_1EF0BEE38);
    }
    CFStringRef v4 = (int *)qword_1EC009488;
    sqlite3_errmsg(*(sqlite3 **)(a1 + 16));
    sub_19E4E4498(v4, v5, "Could not reset statement, error code: %d error message: %s\n", v6, v7, v8, v9, v10, v3);
  }
  uint64_t result = sqlite3_clear_bindings(*(sqlite3_stmt **)(a1 + 8));
  if (result)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    sub_19E3F7ABC((uint64_t)exception, 3);
    __cxa_throw(exception, (struct type_info *)&unk_1EF0B6A10, (void (*)(void *))sub_19E3F7B5C);
  }
  return result;
}

void sub_19E49A0DC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19E49A0F0(sqlite3_stmt *a1)
{
  uint64_t result = sqlite3_step(a1);
  if (result == 26 || result == 11)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    sub_19E3F7ABC((uint64_t)exception, 1);
    __cxa_throw(exception, (struct type_info *)&unk_1EF0B6A10, (void (*)(void *))sub_19E3F7B5C);
  }
  return result;
}

void sub_19E49A154(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19E49A168(uint64_t a1, int a2)
{
  int v4 = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a1 + ++*(_DWORD *)(result + 24) = v4 + 1;
  uint64_t result = sqlite3_bind_int(*(sqlite3_stmt **)(a1 + 8), v4, a2);
  if (result)
  {
    uint64_t v6 = result;
    exception = __cxa_allocate_exception(0x20uLL);
    uint64_t v8 = a1;
    uint64_t v9 = exception;
    uint64_t v10 = sqlite3_errmsg(*(sqlite3 **)(v8 + 16));
    sub_19E439798("Could not bind int, error code: %d error message: %s\n", (uint64_t)&v13, v6, v10);
    void *v9 = &unk_1EF0BB7A8;
    CFNumberRef v11 = v9 + 1;
    if (SHIBYTE(v14) < 0)
    {
      sub_19E39369C(v11, (void *)v13, *((unint64_t *)&v13 + 1));
    }
    else
    {
      long long v12 = v13;
      v9[3] = v14;
      *(_OWORD *)CFNumberRef v11 = v12;
    }
    __cxa_throw(v9, (struct type_info *)&unk_1EF0B6A10, (void (*)(void *))sub_19E3F7B5C);
  }
  return result;
}

void sub_19E49A244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  std::exception::~exception(v17);
  if (a17 < 0) {
    operator delete(__p);
  }
  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

void *sub_19E49A294(void *a1, long long *a2)
{
  *a1 = &unk_1EF0BB7A8;
  char v3 = a1 + 1;
  if (*((char *)a2 + 23) < 0)
  {
    sub_19E39369C(v3, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    v3[2] = *((void *)a2 + 2);
    *(_OWORD *)char v3 = v4;
  }
  return a1;
}

void sub_19E49A2FC(_Unwind_Exception *a1)
{
  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19E49A310(uint64_t a1, double a2)
{
  int v3 = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a1 + ++*(_DWORD *)(result + 24) = v3 + 1;
  uint64_t result = sqlite3_bind_double(*(sqlite3_stmt **)(a1 + 8), v3, a2);
  if (result)
  {
    uint64_t v5 = result;
    exception = __cxa_allocate_exception(0x20uLL);
    uint64_t v7 = a1;
    uint64_t v8 = exception;
    uint64_t v9 = sqlite3_errmsg(*(sqlite3 **)(v7 + 16));
    sub_19E439798("Could not bind double, error code %d error message: %s", (uint64_t)&v12, v5, v9);
    void *v8 = &unk_1EF0BB7A8;
    uint64_t v10 = v8 + 1;
    if (SHIBYTE(v13) < 0)
    {
      sub_19E39369C(v10, (void *)v12, *((unint64_t *)&v12 + 1));
    }
    else
    {
      long long v11 = v12;
      v8[3] = v13;
      *(_OWORD *)uint64_t v10 = v11;
    }
    __cxa_throw(v8, (struct type_info *)&unk_1EF0B6A10, (void (*)(void *))sub_19E3F7B5C);
  }
  return result;
}

void sub_19E49A3E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  std::exception::~exception(v17);
  if (a17 < 0) {
    operator delete(__p);
  }
  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

void sub_19E49A438(uint64_t a1, CFStringRef theString)
{
  ++*(_DWORD *)(a1 + 24);
  CFIndex Length = CFStringGetLength(theString);
  CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
  operator new[]();
}

void sub_19E49A57C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    if ((v19 & 1) == 0)
    {
LABEL_6:
      MEMORY[0x19F3BDCC0](v17, 0x1000C8077774924);
      _Unwind_Resume(a1);
    }
  }
  else if (!v19)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v18);
  goto LABEL_6;
}

uint64_t sub_19E49A5D8(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a1 + ++*(_DWORD *)(result + 24) = v3 + 1;
  long long v4 = *(sqlite3_stmt **)(a1 + 8);
  int v5 = *(char *)(a2 + 23);
  if (v5 >= 0) {
    uint64_t v6 = (const char *)a2;
  }
  else {
    uint64_t v6 = *(const char **)a2;
  }
  if (v5 >= 0) {
    int v7 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    int v7 = *(_DWORD *)(a2 + 8);
  }
  uint64_t result = sqlite3_bind_text(v4, v3, v6, v7, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  if (result)
  {
    uint64_t v9 = result;
    exception = __cxa_allocate_exception(0x20uLL);
    long long v11 = sqlite3_errmsg(*(sqlite3 **)(a1 + 16));
    sub_19E439798("Could not bind text, error code %d error message: %s\n", (uint64_t)&v14, v9, v11);
    void *exception = &unk_1EF0BB7A8;
    long long v12 = exception + 1;
    if (SHIBYTE(v15) < 0)
    {
      sub_19E39369C(v12, (void *)v14, *((unint64_t *)&v14 + 1));
    }
    else
    {
      long long v13 = v14;
      exception[3] = v15;
      *(_OWORD *)long long v12 = v13;
    }
    __cxa_throw(exception, (struct type_info *)&unk_1EF0B6A10, (void (*)(void *))sub_19E3F7B5C);
  }
  return result;
}

void sub_19E49A6D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  std::exception::~exception(v17);
  if (a17 < 0) {
    operator delete(__p);
  }
  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

BOOL sub_19E49A72C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 152);
  return !*(unsigned char *)(v1 + 145) || *(void *)(v1 + 136) != 0;
}

uint64_t sub_19E49A750(void *a1, uint64_t a2)
{
  if (*(unsigned char *)(a1[19] + 144))
  {
LABEL_2:
    int v2 = *(uint64_t (**)(void))(*a1 + 32);
    return v2();
  }
  else
  {
    uint64_t v4 = *(unsigned int *)(a2 + 24);
    switch((int)v4)
    {
      case 0:
        goto LABEL_2;
      case 1:
        goto LABEL_7;
      case 2:
        uint64_t v4 = 2;
LABEL_7:
        uint64_t result = v4;
        break;
      case 3:
        uint64_t result = sub_19E4AA6F8(a2);
        break;
      default:
        __assert_rtn("convert", "BlocklistTokenConverter.cpp", 104, "false");
    }
  }
  return result;
}

uint64_t sub_19E49A82C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t sub_19E49A850(uint64_t a1, uint64_t *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v5[0] = &unk_1EF0BDA88;
  uint64_t v6 = v5;
  v3[0] = &unk_1EF0B5660;
  v3[1] = a1;
  uint64_t v4 = v3;
  v7[0] = &unk_1EF0B4F80;
  v7[1] = v3;
  uint64_t v8 = v7;
  sub_19E49AA70(a2, (uint64_t)v5, (uint64_t)v7);
  if (v8 == v7)
  {
    (*(void (**)(void *))(v7[0] + 32))(v7);
  }
  else if (v8)
  {
    (*(void (**)(void *))(*v8 + 40))(v8);
  }
  if (v4 == v3)
  {
    (*(void (**)(void *))(v3[0] + 32))(v3);
  }
  else if (v4)
  {
    (*(void (**)(void))(*v4 + 40))();
  }
  uint64_t result = (uint64_t)v6;
  if (v6 == v5) {
    return (*(uint64_t (**)(void *))(v5[0] + 32))(v5);
  }
  if (v6) {
    return (*(uint64_t (**)(void))(*v6 + 40))();
  }
  return result;
}

void sub_19E49AA4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  sub_19E49AC30((void *)(v2 - 56));
  sub_19E49ACB4((uint64_t *)va);
  sub_19E49AD38((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_19E49AA70(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  if (v3 != (a1[4] - a1[3]) >> 2) {
    __assert_rtn("updateTokenIDs", "TokenSequence.hpp", 68, "m_tokens.size() == m_tokenIDs.size()");
  }
  uint64_t v8 = a1[6];
  uint64_t v9 = a1[7];
  uint64_t v7 = (uint64_t)(a1 + 6);
  unint64_t v10 = (v9 - v8) >> 3;
  if (v3 <= v10)
  {
    if (v3 < v10)
    {
      uint64_t v11 = v8 + 8 * v3;
      while (v9 != v11)
      {
        long long v13 = *(const void **)(v9 - 8);
        v9 -= 8;
        long long v12 = v13;
        if (v13) {
          CFRelease(v12);
        }
      }
      a1[7] = v11;
    }
  }
  else
  {
    sub_19E3FA6CC(v7, v3 - v10);
  }
  if (a1[1] != *a1)
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    unint64_t v16 = 0;
    uint64_t v17 = a1[3];
    while (1)
    {
      LODWORD(v24[0]) = *(_DWORD *)(a1[3] + 4 * v16);
      uint64_t v18 = *(void *)(a2 + 24);
      if (!v18) {
        break;
      }
      if ((*(unsigned int (**)(uint64_t, void *))(*(void *)v18 + 48))(v18, v24))
      {
        uint64_t v19 = *a1;
        uint64_t v20 = a1[6];
        int v21 = *(_DWORD *)(a1[3] + 4 * v16);
        v24[0] = v17;
        v24[1] = v16;
        int v23 = v21;
        uint64_t v22 = *(void *)(a3 + 24);
        if (!v22) {
          break;
        }
        *(_DWORD *)(a1[3] + 4 * v16) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *, void *))(*(void *)v22 + 48))(v22, v19 + v15, v20 + v14, &v23, v24);
      }
      ++v16;
      v15 += 24;
      v14 += 8;
      if (0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3) <= v16) {
        return;
      }
    }
    sub_19E3ACB9C();
  }
}

void *sub_19E49AC30(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_19E49ACB4(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_19E49AD38(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_19E49ADBC()
{
  return &unk_1EF0B4B78;
}

uint64_t sub_19E49ADC8(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN17language_modeling2v113TokenSequence14updateTokenIDsERKNSt3__18functionIFbjEEERKNS3_IFjRKNS2_12b"
                     "asic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEERN10applesauce2CF9StringRefEjEEEEUlSF_SJ_jNS2"
                     "_4spanIKjLm18446744073709551615EEEE_"
    || ((v3 & (unint64_t)"ZN17language_modeling2v113TokenSequence14updateTokenIDsERKNSt3__18functionIFbjEEERKNS3_I"
                                "FjRKNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEERN10applesauce2CF9Strin"
                                "gRefEjEEEEUlSF_SJ_jNS2_4spanIKjLm18446744073709551615EEEE_" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN17language_modeling2v113TokenSequence14updateTokenIDsERKNSt3__18functionIFbjEEERKNS3_IFjRKNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEERN10applesauce2CF9StringRefEjEEEEUlSF_SJ_jNS2_4spanIKjLm18446744073709551615EEEE_")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN17language_modeling2v113TokenSequence14updateTokenIDsERKNSt3__18functionIFbjEEERKNS3_IFjRKNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEERN10applesauce2CF9StringRefEjEEEEUlSF_SJ_jNS2_4spanIKjLm18446744073709551615EEEE_" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_19E49AE20(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4 = *(void *)(a1 + 8);
  int v7 = *a4;
  uint64_t v5 = *(void *)(v4 + 24);
  if (!v5) {
    sub_19E3ACB9C();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(*(void *)v5 + 48))(v5, a2, a3, &v7);
}

uint64_t sub_19E49AE84(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF0B4F80;
  a2[1] = v2;
  return result;
}

void *sub_19E49AEA8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF0B4F80;
  result[1] = v3;
  return result;
}

void sub_19E49AEF0()
{
}

void *sub_19E49AF08()
{
  return &unk_1EF0B8198;
}

uint64_t sub_19E49AF14(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZNK17language_modeling2v123BlocklistTokenConverter7convertERNS0_13TokenSequenceEE3$_1"
    || ((v3 & (unint64_t)"ZNK17language_modeling2v123BlocklistTokenConverter7convertERNS0_13TokenSequenceEE3$_1" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZNK17language_modeling2v123BlocklistTokenConverter7convertERNS0_13TokenSequenceEE3$_1")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK17language_modeling2v123BlocklistTokenConverter7convertERNS0_13TokenSequenceEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_19E49AF6C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))();
}

uint64_t sub_19E49AF9C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF0B5660;
  a2[1] = v2;
  return result;
}

void *sub_19E49AFC0(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF0B5660;
  result[1] = v3;
  return result;
}

void sub_19E49B008()
{
}

void *sub_19E49B020()
{
  return &unk_1EF0B8188;
}

uint64_t sub_19E49B02C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZNK17language_modeling2v123BlocklistTokenConverter7convertERNS0_13TokenSequenceEE3$_0"
    || ((v3 & (unint64_t)"ZNK17language_modeling2v123BlocklistTokenConverter7convertERNS0_13TokenSequenceEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZNK17language_modeling2v123BlocklistTokenConverter7convertERNS0_13TokenSequenceEE3$_0")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK17language_modeling2v123BlocklistTokenConverter7convertERNS0_13TokenSequenceEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL sub_19E49B084(uint64_t a1, _DWORD *a2)
{
  return *a2 == 0;
}

void sub_19E49B09C(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF0BDA88;
}

void *sub_19E49B0BC()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF0BDA88;
  return result;
}

void sub_19E49B0F4()
{
}

uint64_t sub_19E49B10C(uint64_t a1, uint64_t a2)
{
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(unsigned int *)(a1 + 128);
  if ((int)v4 < 1) {
    goto LABEL_23;
  }
  uint64_t v5 = 0;
  uint64_t v6 = *(void *)(a1 + 24);
  char v7 = *(unsigned char *)(a2 + 23);
  if (v7 >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v8 = *(void *)(a2 + 8);
  }
  if (v7 >= 0) {
    uint64_t v9 = (unsigned __int8 *)a2;
  }
  else {
    uint64_t v9 = *(unsigned __int8 **)a2;
  }
  while (1)
  {
    unint64_t v10 = (unsigned __int8 *)(v6 + 24 * v5);
    uint64_t v11 = v10[23];
    if ((v11 & 0x80u) == 0) {
      uint64_t v12 = v10[23];
    }
    else {
      uint64_t v12 = *((void *)v10 + 1);
    }
    if (v12 != v8) {
      goto LABEL_9;
    }
    if ((v11 & 0x80) == 0) {
      break;
    }
    if (!memcmp(*(const void **)v10, v9, *((void *)v10 + 1))) {
      goto LABEL_19;
    }
LABEL_9:
    if (++v5 == v4) {
      goto LABEL_23;
    }
  }
  if (v10[23])
  {
    long long v13 = v9;
    while (*v10 == *v13)
    {
      ++v10;
      ++v13;
      if (!--v11) {
        goto LABEL_19;
      }
    }
    goto LABEL_9;
  }
LABEL_19:
  if ((v5 & 0x80000000) == 0)
  {
    ++*(void *)(a1 + 136);
    uint64_t v14 = *(void *)(a1 + 72);
    uint64_t v15 = *(void *)(a1 + 120);
    if (*(void *)(v14 + 8 * v5) != v15)
    {
      uint64_t v16 = v15 + 1;
      *(void *)(a1 + 120) = v16;
      *(void *)(v14 + 8 * v5) = v16;
    }
    uint64_t v17 = (__int32 *)(*(void *)(a1 + 48) + 4 * v5);
    goto LABEL_131;
  }
LABEL_23:
  uint64_t v18 = *(void *)(a1 + 152);
  ++*(void *)(a1 + 144);
  if (!*(unsigned char *)(v18 + 144))
  {
    LODWORD(v62[0]) = 0;
    v64[0] = *(void **)MEMORY[0x1E4F72480];
    CFTypeRef v70 = &unk_1EF0B5558;
    __n128 v71 = v64;
    int v72 = v62;
    uint64_t v73 = &v70;
    __p[0] = (void *)1;
    cf[0] = 0;
    uint64_t v19 = (long long *)operator new(0x28uLL);
    *(void *)uint64_t v19 = &unk_1EF0B5088;
    *((void *)v19 + 1) = cf;
    *((void *)v19 + 2) = a2;
    *((void *)v19 + 3) = __p;
    *((void *)v19 + 4) = &v70;
    size_t v76 = v19;
    sub_19E4B9C40(a2, *(void *)(v18 + 8), *(void *)(v18 + 16), (uint64_t)&v74);
    if (v76 == &v74)
    {
      (*(void (**)(long long *))(v74 + 32))(&v74);
      CFTypeRef v20 = cf[0];
      if (!cf[0])
      {
LABEL_45:
        if (v73 == &v70)
        {
          (*((void (**)(CFTypeRef *))v70 + 4))(&v70);
        }
        else if (v73)
        {
          (*((void (**)(void))*v73 + 5))();
        }
        __int32 v26 = (__int32)v62[0];
        goto LABEL_101;
      }
    }
    else
    {
      if (v76) {
        (*(void (**)(void))(*(void *)v76 + 40))();
      }
      CFTypeRef v20 = cf[0];
      if (!cf[0]) {
        goto LABEL_45;
      }
    }
    CFRelease(v20);
    goto LABEL_45;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    sub_19E39369C(__p, *(void **)a2, *(void *)(a2 + 8));
    uint64_t v18 = *(void *)(a1 + 152);
    if (!*(unsigned char *)(v18 + 145)) {
      goto LABEL_67;
    }
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v69 = *(void *)(a2 + 16);
    if (!*(unsigned char *)(v18 + 145)) {
      goto LABEL_67;
    }
  }
  if (!*(void *)(v18 + 136)) {
    goto LABEL_67;
  }
  char v21 = *(unsigned char *)(a2 + 23);
  if (v21 >= 0) {
    uint64_t v22 = (const UInt8 *)a2;
  }
  else {
    uint64_t v22 = *(const UInt8 **)a2;
  }
  if (v22)
  {
    if (v21 >= 0) {
      CFIndex v23 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      CFIndex v23 = *(void *)(a2 + 8);
    }
    CFStringRef v24 = CFStringCreateWithBytes(0, v22, v23, 0x8000100u, 0);
    if (!v24)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x19F3BD790](exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  else
  {
    CFStringRef v24 = 0;
  }
  unint64_t v27 = (const void *)LXTransliterationCopyNativeForTransliterated();
  sub_19E372124(&v70, v27);
  if (v24) {
    CFRelease(v24);
  }
  CFStringRef v28 = (const __CFString *)v70;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_19E39369C(cf, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)CFLocaleRef cf = *(_OWORD *)a2;
    uint64_t v67 = *(void *)(a2 + 16);
  }
  if (v28 && (CFTypeID TypeID = CFStringGetTypeID(), TypeID == CFGetTypeID(v28)))
  {
    sub_19E3C6934(&v74, v28);
    if (SHIBYTE(v69) < 0) {
LABEL_61:
    }
      operator delete(__p[0]);
  }
  else
  {
    long long v74 = *(_OWORD *)cf;
    uint64_t v75 = v67;
    cf[1] = 0;
    uint64_t v67 = 0;
    cf[0] = 0;
    if (SHIBYTE(v69) < 0) {
      goto LABEL_61;
    }
  }
  *(_OWORD *)std::string __p = v74;
  uint64_t v69 = v75;
  HIBYTE(v75) = 0;
  LOBYTE(v74) = 0;
  if (SHIBYTE(v67) < 0)
  {
    operator delete((void *)cf[0]);
    CFTypeRef v30 = v70;
    if (!v70) {
      goto LABEL_67;
    }
    goto LABEL_66;
  }
  CFTypeRef v30 = v70;
  if (v70) {
LABEL_66:
  }
    CFRelease(v30);
LABEL_67:
  uint64_t v31 = v64;
  sub_19E4394BC(v64, (const char *)__p);
  if (v65 < 0) {
    uint64_t v31 = (void **)v64[0];
  }
  WORD2(v70) = 0;
  LODWORD(v70) = 0x100000;
  BYTE6(v70) = 1;
  __n128 v71 = 0;
  if (v31)
  {
    __int16 v32 = strlen((const char *)v31);
    unsigned __int16 v33 = v32;
    int v72 = 0;
    uint64_t v73 = 0;
    if (v32)
    {
      sub_19E50EFF8((unsigned __int16 *)&v70, v32);
      if (WORD1(v70) < v33) {
        __assert_rtn("initialize", "LMTIString.cpp", 269, "len <= m_capacity");
      }
      if (v71) {
        int v34 = (void ***)v71;
      }
      else {
        int v34 = &v72;
      }
      memcpy(v34, v31, v33);
      LOWORD(v70) = v33;
    }
  }
  else
  {
    int v72 = 0;
    uint64_t v73 = 0;
  }
  sub_19E50F1DC((uint64_t)&v74, (unsigned __int16 *)&v70);
  if (*((void *)&v74 + 1)) {
    uint64_t v35 = (const char *)*((void *)&v74 + 1);
  }
  else {
    uint64_t v35 = (const char *)&v75;
  }
  size_t v36 = strlen(v35);
  if (v36 >= 0x7FFFFFFFFFFFFFF8) {
    sub_19E37C958();
  }
  uint64_t v37 = (void *)v36;
  if (v36 >= 0x17)
  {
    uint64_t v39 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v36 | 7) != 0x17) {
      uint64_t v39 = v36 | 7;
    }
    uint64_t v40 = v39 + 1;
    uint64_t v38 = operator new(v39 + 1);
    v62[1] = v37;
    unint64_t v63 = v40 | 0x8000000000000000;
    v62[0] = v38;
  }
  else
  {
    HIBYTE(v63) = v36;
    uint64_t v38 = v62;
    if (!v36) {
      goto LABEL_88;
    }
  }
  memmove(v38, v35, (size_t)v37);
LABEL_88:
  *((unsigned char *)v37 + (void)v38) = 0;
  if (*((void *)&v74 + 1) && BYTE6(v74) == 1) {
    free(*((void **)&v74 + 1));
  }
  if (v71 && BYTE6(v70) == 1) {
    free(v71);
  }
  unint64_t v41 = *(void **)(*(void *)(a1 + 152) + 104);
  if (*(void *)(*(void *)(a1 + 152) + 112) - (void)v41 == 8)
  {
    __int32 v26 = (*(uint64_t (**)(void, void **, void))(*(void *)*v41 + 24))(*v41, v62, 0);
    if (SHIBYTE(v63) < 0) {
LABEL_98:
    }
      operator delete(v62[0]);
  }
  else
  {
    __int32 v26 = 0;
    if (SHIBYTE(v63) < 0) {
      goto LABEL_98;
    }
  }
  if (v65 < 0)
  {
    operator delete(v64[0]);
    if (SHIBYTE(v69) < 0) {
      goto LABEL_108;
    }
  }
  else
  {
    if ((SHIBYTE(v69) & 0x80000000) == 0) {
      goto LABEL_101;
    }
LABEL_108:
    operator delete(__p[0]);
  }
LABEL_101:
  unint64_t v42 = *(__int32 **)(a1 + 104);
  uint64_t v43 = wmemchr(*(__int32 **)(a1 + 96), v26, ((uint64_t)v42 - *(void *)(a1 + 96)) >> 2);
  if (v43) {
    uint64_t v17 = v43;
  }
  else {
    uint64_t v17 = v42;
  }
  if (v17 == *(__int32 **)(a1 + 104))
  {
    unint64_t v44 = *(int *)(a1 + 128);
    uint64_t v45 = *(void *)(a1 + 24);
    if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 32) - v45) >> 3) <= v44)
    {
      if ((int)v44 < 2)
      {
        LODWORD(v44) = 0;
      }
      else
      {
        uint64_t v46 = *(unint64_t **)(a1 + 72);
        unint64_t v47 = *v46;
        uint64_t v48 = 1;
        LODWORD(v44) = 0;
        do
        {
          unint64_t v49 = v46[v48];
          if (v47 > v49) {
            LODWORD(v44) = v48;
          }
          if (v47 >= v49) {
            unint64_t v47 = v46[v48];
          }
          ++v48;
        }
        while (*(_DWORD *)(a1 + 128) != v48);
      }
    }
    else
    {
      *(_DWORD *)(a1 + 128) = v44 + 1;
    }
    uint64_t v50 = v45 + 24 * (int)v44;
    if (v50 != a2)
    {
      char v51 = *(unsigned char *)(a2 + 23);
      if (*(char *)(v50 + 23) < 0)
      {
        if (v51 >= 0) {
          uint64_t v53 = (void *)a2;
        }
        else {
          uint64_t v53 = *(void **)a2;
        }
        if (v51 >= 0) {
          size_t v54 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          size_t v54 = *(void *)(a2 + 8);
        }
        sub_19E3C6D44((void **)v50, v53, v54);
      }
      else if ((*(unsigned char *)(a2 + 23) & 0x80) != 0)
      {
        sub_19E3C6C7C((void *)v50, *(void **)a2, *(void *)(a2 + 8));
      }
      else
      {
        long long v52 = *(_OWORD *)a2;
        *(void *)(v50 + 16) = *(void *)(a2 + 16);
        *(_OWORD *)uint64_t v50 = v52;
      }
    }
    uint64_t v17 = (__int32 *)(*(void *)(a1 + 48) + 4 * (int)v44);
    __int32 *v17 = v26;
    uint64_t v55 = *(void *)(a1 + 120) + 1;
    *(void *)(a1 + 120) = v55;
    *(void *)(*(void *)(a1 + 72) + 8 * (int)v44) = v55;
  }
LABEL_131:
  uint64_t v56 = *v17;
  uint64_t v57 = *(void *)(a1 + 152);
  if (*(unsigned char *)(v57 + 144)) {
    BOOL v58 = 0;
  }
  else {
    BOOL v58 = v56 == 0;
  }
  if (v58)
  {
    size_t v59 = *(void **)(a1 + 8);
    size_t v60 = *(std::__shared_weak_count **)(a1 + 160);
    *(void *)&long long v74 = v57;
    *((void *)&v74 + 1) = v60;
    if (v60) {
      atomic_fetch_add_explicit(&v60->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    LOBYTE(v75) = 1;
    uint64_t v56 = sub_19E3FE30C(v59, a2, 0, (uint64_t *)&v74);
    if (!v56) {
      uint64_t v56 = sub_19E4BA040(a2, *(unsigned __int8 *)(v59[29] + 358));
    }
    if (v60 && !atomic_fetch_add(&v60->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  return v56;
}

void sub_19E49B98C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,CFTypeRef a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,CFTypeRef cf,void *a33,uint64_t a34,uint64_t a35)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_19E49BB94()
{
  return &unk_1EF0B4C48;
}

uint64_t sub_19E49BBA0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN17language_modeling2v1L53bestLinguisticallyEquivalentTokenIDFromStaticLexiconsERKNSt3__16vectorIN"
                     "S1_10unique_ptrIN2LM7LexiconENS1_14default_deleteIS5_EEEENS1_9allocatorIS8_EEEERKNS1_12basic_string"
                     "IcNS1_11char_traitsIcEENS9_IcEEEEE3$_0"
    || ((v3 & (unint64_t)"ZN17language_modeling2v1L53bestLinguisticallyEquivalentTokenIDFromStaticLexiconsERKNSt3_"
                                "_16vectorINS1_10unique_ptrIN2LM7LexiconENS1_14default_deleteIS5_EEEENS1_9allocatorIS8_EE"
                                "EERKNS1_12basic_stringIcNS1_11char_traitsIcEENS9_IcEEEEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN17language_modeling2v1L53bestLinguisticallyEquivalentTokenIDFromStaticLexiconsERKNSt3__16vectorINS1_10unique_ptrIN2LM7LexiconENS1_14default_deleteIS5_EEEENS1_9allocatorIS8_EEEERKNS1_12basic_stringIcNS1_11char_traitsIcEENS9_IcEEEEE3$_0")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN17language_modeling2v1L53bestLinguisticallyEquivalentTokenIDFromStaticLexiconsERKNSt3__16vectorINS1_10unique_ptrIN2LM7LexiconENS1_14default_deleteIS5_EEEENS1_9allocatorIS8_EEEERKNS1_12basic_stringIcNS1_11char_traitsIcEENS9_IcEEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_19E49BBF8(uint64_t result, uint64_t a2, _DWORD *a3, double *a4)
{
  uint64_t v4 = *(double **)(result + 8);
  double v5 = *a4;
  if (*v4 < *a4)
  {
    **(_DWORD **)(result + 16) = *a3;
    double *v4 = v5;
  }
  return result;
}

__n128 sub_19E49BC28(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF0B5558;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 sub_19E49BC50(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF0B5558;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void sub_19E49BC9C()
{
}

void sub_19E49BCB4(void *a1)
{
  sub_19E49BCEC(a1);
  JUMPOUT(0x19F3BDCF0);
}

void *sub_19E49BCEC(void *a1)
{
  *a1 = &unk_1EF0B9778;
  uint64_t v2 = (std::__shared_weak_count *)a1[20];
  if (!v2 || atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    unint64_t v3 = (void *)a1[12];
    if (!v3) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  unint64_t v3 = (void *)a1[12];
  if (v3)
  {
LABEL_4:
    a1[13] = v3;
    operator delete(v3);
  }
LABEL_5:
  uint64_t v4 = (void *)a1[9];
  if (v4)
  {
    a1[10] = v4;
    operator delete(v4);
  }
  double v5 = (void *)a1[6];
  if (v5)
  {
    a1[7] = v5;
    operator delete(v5);
  }
  uint64_t v6 = a1[3];
  if (v6)
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = (void *)a1[3];
    if (v7 != v6)
    {
      do
      {
        if (*(char *)(v7 - 1) < 0) {
          operator delete(*(void **)(v7 - 24));
        }
        v7 -= 24;
      }
      while (v7 != v6);
      uint64_t v8 = (void *)a1[3];
    }
    a1[4] = v6;
    operator delete(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)a1[2];
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  return a1;
}

uint64_t sub_19E49BE4C(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  v18[5] = a3;
  v19[0] = &unk_1EF0BDA30;
  CFTypeRef v20 = v19;
  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = 0x40000000;
  v18[2] = sub_19E49C0BC;
  v18[3] = &unk_1E59A0208;
  unsigned int v18[4] = v19;
  uint64_t v6 = *a3;
  for (uint64_t i = a3[1]; i != v6; i -= 24)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a3[1] = v6;
  a3[4] = a3[3];
  uint64_t v8 = a3[6];
  for (uint64_t j = a3[7]; j != v8; j -= 8)
  {
    uint64_t v11 = *(const void **)(j - 8);
    unint64_t v10 = v11;
    if (v11) {
      CFRelease(v10);
    }
  }
  a3[7] = v8;
  uint64_t v12 = *a1;
  *(void *)(v12 + 184) = *(void *)(*a1 + 176);
  *(void *)(v12 + 208) = *(void *)(v12 + 200);
  *(void *)(v12 + 232) = *(void *)(v12 + 224);
  *(void *)(v12 + 264) = *(void *)(v12 + 256);
  *(_DWORD *)(v12 + 280) = 0;
  *(_OWORD *)(v12 + 288) = xmmword_19E572FE0;
  *(void *)(v12 + 304) = -1;
  *(_DWORD *)(v12 + 312) = 0;
  *(void *)(v12 + 248) = -1;
  int v13 = *(char *)(a2 + 23);
  if (v13 >= 0) {
    uint64_t v14 = a2;
  }
  else {
    uint64_t v14 = *(void *)a2;
  }
  if (v13 >= 0) {
    uint64_t v15 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v15 = *(void *)(a2 + 8);
  }
  sub_19E36D3E8(*a1, v14, v15, (uint64_t)v18);
  sub_19E36D3E8(*a1, (uint64_t)" NSt3__110__function6__funcIZNK17language_modeling2v115StringTokenizer8tokenizeERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS3_13TokenSequenceEE3$_0NS8_ISF_EEFbjEEE", 1, (uint64_t)v18);
  if (*a3 == a3[1] && a3[3] == a3[4])
  {
    v17[23] = 0;
    v17[0] = 0;
    sub_19E49C1F0((uint64_t)a3, (uint64_t)v17, 1);
  }
  uint64_t result = (uint64_t)v20;
  if (v20 == v19) {
    return (*(uint64_t (**)(void *))(v19[0] + 32))(v19);
  }
  if (v20) {
    return (*(uint64_t (**)(void))(*v20 + 40))();
  }
  return result;
}

void sub_19E49C08C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_19E49AD38((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19E49C0A4(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_19E37B770(exception_object);
}

void sub_19E49C0BC(uint64_t a1, const void *a2, size_t a3, int a4)
{
  uint64_t v5 = *(void *)(a1 + 32);
  LODWORD(__dst[0]) = a4;
  uint64_t v6 = *(void *)(v5 + 24);
  if (!v6) {
    sub_19E3ACB9C();
  }
  if ((*(unsigned int (**)(uint64_t, void **))(*(void *)v6 + 48))(v6, __dst))
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8) {
      sub_19E37C958();
    }
    uint64_t v10 = *(void *)(a1 + 40);
    if (a3 >= 0x17)
    {
      uint64_t v12 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a3 | 7) != 0x17) {
        uint64_t v12 = a3 | 7;
      }
      uint64_t v13 = v12 + 1;
      uint64_t v11 = (void **)operator new(v12 + 1);
      __dst[1] = (void *)a3;
      unint64_t v15 = v13 | 0x8000000000000000;
      __dst[0] = v11;
    }
    else
    {
      HIBYTE(v15) = a3;
      uint64_t v11 = __dst;
      if (!a3)
      {
LABEL_11:
        *((unsigned char *)v11 + a3) = 0;
        sub_19E49C1F0(v10, (uint64_t)__dst, a4);
        if (SHIBYTE(v15) < 0) {
          operator delete(__dst[0]);
        }
        return;
      }
    }
    memcpy(v11, a2, a3);
    goto LABEL_11;
  }
}

void sub_19E49C1D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E49C1F0(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5 = *(void *)(a1 + 8);
  if (v5 >= *(void *)(a1 + 16))
  {
    uint64_t v7 = sub_19E3FC244((char **)a1, a2);
  }
  else
  {
    if (*(char *)(a2 + 23) < 0)
    {
      sub_19E39369C(*(unsigned char **)(a1 + 8), *(void **)a2, *(void *)(a2 + 8));
    }
    else
    {
      long long v6 = *(_OWORD *)a2;
      *(void *)(v5 + 16) = *(void *)(a2 + 16);
      *(_OWORD *)unint64_t v5 = v6;
    }
    uint64_t v7 = (char *)(v5 + 24);
    *(void *)(a1 + 8) = v5 + 24;
  }
  *(void *)(a1 + 8) = v7;
  uint64_t v9 = *(char **)(a1 + 32);
  unint64_t v8 = *(void *)(a1 + 40);
  if ((unint64_t)v9 >= v8)
  {
    uint64_t v11 = *(char **)(a1 + 24);
    uint64_t v12 = (v9 - v11) >> 2;
    unint64_t v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 62) {
      sub_19E37C7C4();
    }
    uint64_t v14 = v8 - (void)v11;
    if (v14 >> 1 > v13) {
      unint64_t v13 = v14 >> 1;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15)
    {
      if (v15 >> 62) {
        sub_19E37C2B8();
      }
      uint64_t v16 = operator new(4 * v15);
    }
    else
    {
      uint64_t v16 = 0;
    }
    uint64_t v17 = &v16[4 * v12];
    uint64_t v18 = &v16[4 * v15];
    _DWORD *v17 = a3;
    uint64_t v10 = v17 + 1;
    if (v9 != v11)
    {
      unint64_t v19 = v9 - v11 - 4;
      if (v19 < 0x2C) {
        goto LABEL_33;
      }
      if ((unint64_t)(v11 - v16) < 0x20) {
        goto LABEL_33;
      }
      uint64_t v20 = (v19 >> 2) + 1;
      uint64_t v21 = &v16[4 * v12 - 16];
      uint64_t v22 = v9 - 16;
      uint64_t v23 = v20 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        _OWORD *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 8;
      }
      while (v23);
      v17 -= v20 & 0x7FFFFFFFFFFFFFF8;
      v9 -= 4 * (v20 & 0x7FFFFFFFFFFFFFF8);
      if (v20 != (v20 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_33:
        do
        {
          int v25 = *((_DWORD *)v9 - 1);
          v9 -= 4;
          *--uint64_t v17 = v25;
        }
        while (v9 != v11);
      }
    }
    *(void *)(a1 + ++*(_DWORD *)(result + 24) = v17;
    *(void *)(a1 + 32) = v10;
    *(void *)(a1 + 40) = v18;
    if (v11) {
      operator delete(v11);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v9 = a3;
    uint64_t v10 = v9 + 4;
  }
  *(void *)(a1 + 32) = v10;
}

void sub_19E49C3A0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void *sub_19E49C3A8()
{
  return &unk_1EF0B8178;
}

uint64_t sub_19E49C3B4(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZNK17language_modeling2v115StringTokenizer8tokenizeERKNSt3__112basic_stringIcNS2_11char_traitsIcEEN"
                     "S2_9allocatorIcEEEERNS0_13TokenSequenceEE3$_0"
    || ((v3 & (unint64_t)"ZNK17language_modeling2v115StringTokenizer8tokenizeERKNSt3__112basic_stringIcNS2_11char_"
                                "traitsIcEENS2_9allocatorIcEEEERNS0_13TokenSequenceEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZNK17language_modeling2v115StringTokenizer8tokenizeERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEERNS0_13TokenSequenceEE3$_0")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK17language_modeling2v115StringTokenizer8tokenizeERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEERNS0_13TokenSequenceEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_19E49C40C()
{
  return 1;
}

void sub_19E49C41C(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF0BDA30;
}

void *sub_19E49C43C()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF0BDA30;
  return result;
}

void sub_19E49C474()
{
}

uint64_t sub_19E49C48C(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = *(void *)(result + 8);
    if (v2)
    {
      uint64_t result = 0;
      do
      {
        if (*(_DWORD *)(v1 + 16) < 0x10000u) {
          uint64_t v3 = 1;
        }
        else {
          uint64_t v3 = 2;
        }
        result += v3;
        uint64_t v1 = v2;
        uint64_t v2 = *(void *)(v2 + 8);
      }
      while (v2);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_19E49C4D4(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 24) + 16);
  if (qword_1E9459FB0 == -1)
  {
    if (*v2)
    {
LABEL_3:
      uint64_t v3 = *(void *)(qword_1E9459FB8 + 8 * (*(_DWORD *)(a1 + 32) & 3));
      return ((*(unsigned int (**)(uint64_t))(*(void *)v3 + 40))(v3) >> 30) & 1;
    }
  }
  else
  {
    dispatch_once(&qword_1E9459FB0, &unk_1EF0BEBA0);
    if (*v2) {
      goto LABEL_3;
    }
  }
  return 0;
}

uint64_t sub_19E49C578(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 24) + 16);
  if (qword_1E9459FB0 == -1)
  {
    if (*v2)
    {
LABEL_3:
      uint64_t v3 = *(void *)(qword_1E9459FB8 + 8 * (*(_DWORD *)(a1 + 32) & 3));
      return (*(uint64_t (**)(uint64_t))(*(void *)v3 + 40))(v3) & 0x3FFFFFFF;
    }
  }
  else
  {
    dispatch_once(&qword_1E9459FB0, &unk_1EF0BEBA0);
    if (*v2) {
      goto LABEL_3;
    }
  }
  return 0;
}

uint64_t sub_19E49C61C(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 24) + 16);
  if (qword_1E9459FB0 == -1)
  {
    if (*v2)
    {
LABEL_3:
      uint64_t v3 = *(void *)(qword_1E9459FB8 + 8 * (*(_DWORD *)(a1 + 32) & 3));
      return (*(unsigned int (**)(uint64_t))(*(void *)v3 + 40))(v3) >> 31;
    }
  }
  else
  {
    dispatch_once(&qword_1E9459FB0, &unk_1EF0BEBA0);
    if (*v2) {
      goto LABEL_3;
    }
  }
  return 0;
}

uint64_t sub_19E49C6C0(uint64_t a1)
{
  uint64_t v2 = **(void **)(*(void *)(a1 + 24) + 16);
  if (qword_1E9459FB0 != -1)
  {
    dispatch_once(&qword_1E9459FB0, &unk_1EF0BEBA0);
    if (v2) {
      goto LABEL_3;
    }
    return 0;
  }
  if (!v2) {
    return 0;
  }
LABEL_3:
  uint64_t v3 = *(uint64_t (**)(void))(**(void **)(qword_1E9459FB8 + 8 * (*(_DWORD *)(a1 + 32) & 3)) + 48);
  return v3();
}

BOOL sub_19E49C774(uint64_t a1)
{
  return (*(unsigned char *)(a1 + 32) & 3) != 0;
}

char *sub_19E49C784(char *result, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = result;
  LODWORD(v16) = *((_DWORD *)result + 8);
  *((void *)&v16 + 1) = *((void *)result + 5);
  LOBYTE(v17) = result[48];
  if (a3)
  {
    unint64_t v6 = 0;
    unint64_t v7 = a3 - 1;
    unint64_t v8 = *(void **)(*((void *)result + 3) + 16);
    uint64_t v9 = result;
    do
    {
      uint64_t v12 = (_WORD *)(a2 + 2 * v6);
      int v13 = *v12 & 0xFC00;
      if (v13 == 55296)
      {
        if (v6 >= v7) {
          return 0;
        }
        ++v6;
        if ((*(_WORD *)(a2 + 2 * v6) & 0xFC00) != 0xDC00) {
          return 0;
        }
        sub_19E455D8C(&v14, v8, &v16, (uint64_t)v12, 4);
        long long v16 = v14;
        uint64_t v17 = v15;
        int v10 = *(unsigned __int16 *)(a2 + 2 * v6) + ((unsigned __int16)*v12 << 10) - 56613888;
      }
      else
      {
        sub_19E455D8C(&v14, v8, &v16, a2 + 2 * v6, 2);
        long long v16 = v14;
        uint64_t v17 = v15;
        int v10 = (unsigned __int16)*v12;
        ++v6;
      }
      uint64_t result = sub_19E49C920(*((void *)v3 + 3) + 24);
      uint64_t v11 = *((void *)v3 + 3);
      *((_DWORD *)result + 4) = v10;
      *(void *)uint64_t result = &unk_1EF0BBA08;
      *((void *)result + 1) = v9;
      *((void *)result + 3) = v11;
      *((_DWORD *)result + 8) = v16;
      *((void *)result + 5) = *((void *)&v16 + 1);
      result[48] = v17;
      if (v13 == 55296) {
        ++v6;
      }
      uint64_t v9 = result;
    }
    while (v6 < a3);
  }
  return result;
}

char *sub_19E49C920(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2)
  {
    uint64_t v4 = *(char **)(a1 + 32);
    uint64_t v3 = *(void *)(a1 + 40);
    size_t v5 = (size_t)&v4[-v2];
    if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)&v4[-v2] >> 3) != v3) {
      goto LABEL_29;
    }
  }
  else
  {
    size_t v5 = 56 * *(void *)(a1 + 40);
  }
  unint64_t v6 = (char *)malloc_type_malloc(v5, 0x10F10408BCD9BB6uLL);
  uint64_t v4 = v6;
  unint64_t v8 = *(char ***)(a1 + 8);
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v8 >= v7)
  {
    int v10 = *(char ***)a1;
    uint64_t v11 = (uint64_t)v8 - *(void *)a1;
    uint64_t v12 = v11 >> 3;
    unint64_t v13 = (v11 >> 3) + 1;
    if (v13 >> 61) {
      sub_19E37C7C4();
    }
    uint64_t v14 = v7 - (void)v10;
    if (v14 >> 2 > v13) {
      unint64_t v13 = v14 >> 2;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15)
    {
      if (v15 >> 61) {
        sub_19E37C2B8();
      }
      long long v16 = operator new(8 * v15);
    }
    else
    {
      long long v16 = 0;
    }
    uint64_t v17 = &v16[8 * v12];
    uint64_t v18 = &v16[8 * v15];
    void *v17 = v4;
    uint64_t v9 = v17 + 1;
    if (v8 == v10)
    {
      int v10 = v8;
    }
    else
    {
      unint64_t v19 = (char *)v8 - (char *)v10 - 8;
      if (v19 < 0x58) {
        goto LABEL_34;
      }
      if ((unint64_t)((char *)v8 - &v16[v11]) < 0x20) {
        goto LABEL_34;
      }
      uint64_t v20 = (v19 >> 3) + 1;
      uint64_t v21 = &v16[8 * v12 - 16];
      uint64_t v22 = (long long *)(v8 - 2);
      uint64_t v23 = v20 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v24 = *v22;
        *(v21 - 1) = *(v22 - 1);
        _OWORD *v21 = v24;
        v21 -= 2;
        v22 -= 2;
        v23 -= 4;
      }
      while (v23);
      v17 -= v20 & 0x3FFFFFFFFFFFFFFCLL;
      v8 -= v20 & 0x3FFFFFFFFFFFFFFCLL;
      if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        do
        {
          uint64_t v25 = (uint64_t)*--v8;
          *--uint64_t v17 = v25;
        }
        while (v8 != v10);
        int v10 = *(char ***)a1;
      }
    }
    *(void *)a1 = v17;
    *(void *)(a1 + 8) = v9;
    *(void *)(a1 + 16) = v18;
    if (v10) {
      operator delete(v10);
    }
  }
  else
  {
    void *v8 = v6;
    uint64_t v9 = v8 + 1;
  }
  *(void *)(a1 + 8) = v9;
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = v4;
LABEL_29:
  ++*(_DWORD *)(a1 + 48);
  *(void *)(a1 + 32) = v4 + 56;
  return v4;
}

void sub_19E49CAF8()
{
}

uint64_t sub_19E49CB10()
{
  return 7;
}

const char *sub_19E49CB18()
{
  return "recency";
}

float sub_19E49CB24(uint64_t a1, int a2)
{
  uint64_t v2 = 224;
  if (a2 == 1) {
    uint64_t v2 = 220;
  }
  return *(float *)(*(void *)(a1 + 24) + v2);
}

float sub_19E49CB40(uint64_t a1, int a2)
{
  uint64_t v2 = 224;
  if (a2 == 1) {
    uint64_t v2 = 216;
  }
  return *(float *)(*(void *)(a1 + 24) + v2);
}

void sub_19E49CB5C(void *a1)
{
  sub_19E49CB94(a1);
  JUMPOUT(0x19F3BDCF0);
}

void *sub_19E49CB94(void *a1)
{
  *a1 = &unk_1EF0BAEA8;
  uint64_t v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[8];
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    uint64_t v4 = (std::__shared_weak_count *)a1[6];
    if (!v4) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v4 = (std::__shared_weak_count *)a1[6];
    if (!v4) {
      goto LABEL_9;
    }
  }
  if (!atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
LABEL_9:
  size_t v5 = (std::__shared_weak_count *)a1[4];
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    unint64_t v6 = (std::__shared_weak_count *)a1[2];
    if (!v6) {
      return a1;
    }
  }
  else
  {
    unint64_t v6 = (std::__shared_weak_count *)a1[2];
    if (!v6) {
      return a1;
    }
  }
  if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return a1;
}

void sub_19E49CD24()
{
}

uint64_t sub_19E49CD50(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, double *a5, uint64_t a6, uint64_t a7)
{
  v51[20] = *MEMORY[0x1E4F143B8];
  *a5 = 0.0;
  if (a2 == 1 && !a4) {
    return 1;
  }
  if (!*(unsigned char *)(a1 + 48))
  {
    double v39 = 0.0;
    if ((*(unsigned int (**)(void, uint64_t, unint64_t, unint64_t, double *, void, uint64_t))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16), a2, a3, a4, &v39, 0, a7))
    {
      double v20 = v39;
LABEL_19:
      *a5 = v20;
      return 1;
    }
    uint64_t v21 = *(void *)(a1 + 24);
    if (!v21) {
      return 0;
    }
    unint64_t v37 = 0;
    LOWORD(v38) = 0;
    if ((*(unsigned int (**)(uint64_t, uint64_t, unint64_t, unint64_t, double *, unint64_t *, uint64_t))(*(void *)v21 + 16))(v21, a2, a3, a4, &v39, &v37, a7))
    {
      if (a4) {
        double v22 = v39 + -0.5 + *(double *)(a1 + 40) + *a5;
      }
      else {
        double v22 = *a5 + v39;
      }
      *a5 = v22;
LABEL_43:
      if ((uint64_t)v37 < 1 || v37 > a4 || v37 == 1)
      {
        uint64_t v14 = (*(uint64_t (**)(void, void, void, void, double *, void, uint64_t))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24), *(unsigned int *)(a1 + 32), 0, 0, &v39, 0, a7);
        if ((v14 ^ 1) & 1 | (a4 == 0)) {
          return v14;
        }
      }
      else
      {
        uint64_t v14 = (*(uint64_t (**)(void, void, unint64_t))(**(void **)(a1 + 24) + 16))(*(void *)(a1 + 24), *(unsigned int *)(a1 + 32), a3 + 4 * (a4 - (v37 - 1)));
        if ((v14 ^ 1) & 1 | (a4 == 0)) {
          return v14;
        }
      }
      if (fabs(*a5) <= fabs(v39)) {
        return 1;
      }
      double v20 = *a5 - v39;
      goto LABEL_19;
    }
    if (qword_1EC0095B8 != -1) {
      dispatch_once(&qword_1EC0095B8, &unk_1EF0BEC40);
    }
    long long v24 = qword_1EC0095B0;
    if (!os_log_type_enabled((os_log_t)qword_1EC0095B0, OS_LOG_TYPE_ERROR)) {
      goto LABEL_43;
    }
    sub_19E37B784((uint64_t)&__p);
    if (a4)
    {
      sub_19E37CA70(&__p, (uint64_t)"P( ", 3);
      __int32 v26 = (void *)std::ostream::operator<<();
      sub_19E37CA70(v26, (uint64_t)" |", 2);
      uint64_t v27 = 16;
      if (a4 < 0x10) {
        uint64_t v27 = a4;
      }
      uint64_t v28 = -4 * v27;
      do
      {
        sub_19E37CA70(&__p, (uint64_t)" ", 1);
        std::ostream::operator<<();
        v28 += 4;
      }
      while (v28);
      p_p = &__p;
    }
    else
    {
      sub_19E37CA70(&__p, (uint64_t)"P( ", 3);
      p_p = (long long *)std::ostream::operator<<();
    }
    sub_19E37CA70(p_p, (uint64_t)")", 2);
    if ((v50 & 0x10) != 0)
    {
      unint64_t v31 = v49;
      if (v49 < v46)
      {
        unint64_t v49 = v46;
        unint64_t v31 = v46;
      }
      __int16 v32 = (const void **)&v45;
    }
    else
    {
      if ((v50 & 8) == 0)
      {
        size_t v29 = 0;
        HIBYTE(v41) = 0;
        CFTypeRef v30 = buf;
        goto LABEL_71;
      }
      __int16 v32 = (const void **)v44;
      unint64_t v31 = v44[2];
    }
    unsigned __int16 v33 = *v32;
    size_t v29 = v31 - (void)*v32;
    if (v29 >= 0x7FFFFFFFFFFFFFF8) {
      sub_19E37C958();
    }
    if (v29 >= 0x17)
    {
      uint64_t v34 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v29 | 7) != 0x17) {
        uint64_t v34 = v29 | 7;
      }
      uint64_t v35 = v34 + 1;
      CFTypeRef v30 = operator new(v34 + 1);
      *(void *)&long long v41 = v29;
      *((void *)&v41 + 1) = v35 | 0x8000000000000000;
      *(void *)std::string buf = v30;
    }
    else
    {
      HIBYTE(v41) = v31 - *(unsigned char *)v32;
      CFTypeRef v30 = buf;
      if (!v29) {
        goto LABEL_71;
      }
    }
    memmove(v30, v33, v29);
LABEL_71:
    *((unsigned char *)v30 + v29) = 0;
    *(void *)&long long __p = *MEMORY[0x1E4FBA418];
    *(void *)((char *)&__p + *(void *)(__p - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    *((void *)&__p + 1) = MEMORY[0x1E4FBA470] + 16;
    if (v48 < 0) {
      operator delete(v47);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x19F3BDC30](v51);
    size_t v36 = buf;
    if (v41 < 0) {
      size_t v36 = *(uint8_t **)buf;
    }
    LODWORD(__p) = 136315138;
    *(void *)((char *)&__p + 4) = v36;
    _os_log_error_impl(&dword_19E36B000, v24, OS_LOG_TYPE_ERROR, "Supplemental LM failed to calculate %s", (uint8_t *)&__p, 0xCu);
    if (SHIBYTE(v41) < 0) {
      operator delete(*(void **)buf);
    }
    goto LABEL_43;
  }
  unint64_t v37 = a3;
  unint64_t v38 = a4;
  if (!a4 || sub_19E4A43D8(*(void *)(a1 + 16), a2))
  {
    uint64_t v16 = *(void *)(a1 + 24);
    if (v16)
    {
      double v39 = 0.0;
      uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, unint64_t, double *, uint64_t, uint64_t))(*(void *)v16 + 16))(v16, a2, a3, a4, &v39, a6, a7);
      if ((v14 & 1) == 0)
      {
        if (qword_1EC0095B8 != -1) {
          dispatch_once(&qword_1EC0095B8, &unk_1EF0BEC40);
        }
        uint64_t v17 = qword_1EC0095B0;
        if (os_log_type_enabled((os_log_t)qword_1EC0095B0, OS_LOG_TYPE_ERROR))
        {
          sub_19E49D5B0(&__p, (uint64_t *)&v37);
          if (v43 >= 0) {
            uint64_t v18 = &__p;
          }
          else {
            uint64_t v18 = (long long *)__p;
          }
          *(_DWORD *)std::string buf = 67109378;
          *(_DWORD *)&uint8_t buf[4] = a2;
          LOWORD(v41) = 2080;
          *(void *)((char *)&v41 + 2) = v18;
          unint64_t v19 = "Supplemental model failed calculating P( %d | [ %s ])";
LABEL_34:
          _os_log_error_impl(&dword_19E36B000, v17, OS_LOG_TYPE_ERROR, v19, buf, 0x12u);
          if (v43 < 0) {
            operator delete((void *)__p);
          }
          return v14;
        }
        return v14;
      }
LABEL_21:
      *a5 = v39;
      return v14;
    }
    return 0;
  }
  double v39 = 0.0;
  uint64_t v14 = (*(uint64_t (**)(void, uint64_t, unint64_t, unint64_t, double *, void, uint64_t))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16), a2, a3, a4, &v39, 0, a7);
  if (v14) {
    goto LABEL_21;
  }
  if (qword_1EC0095B8 != -1) {
    dispatch_once(&qword_1EC0095B8, &unk_1EF0BEC40);
  }
  uint64_t v17 = qword_1EC0095B0;
  if (os_log_type_enabled((os_log_t)qword_1EC0095B0, OS_LOG_TYPE_ERROR))
  {
    sub_19E49D5B0(&__p, (uint64_t *)&v37);
    if (v43 >= 0) {
      uint64_t v23 = &__p;
    }
    else {
      uint64_t v23 = (long long *)__p;
    }
    *(_DWORD *)std::string buf = 67109378;
    *(_DWORD *)&uint8_t buf[4] = a2;
    LOWORD(v41) = 2080;
    *(void *)((char *)&v41 + 2) = v23;
    unint64_t v19 = "Montreal failed calculating P( %d | [ %s ])";
    goto LABEL_34;
  }
  return v14;
}

void sub_19E49D4C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  a17 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a18 = MEMORY[0x1E4FBA470] + 16;
  if (a31 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x19F3BDC30](&a34);
  _Unwind_Resume(a1);
}

uint64_t sub_19E49D5B0(void *a1, uint64_t *a2)
{
  sub_19E37B784((uint64_t)v27);
  uint64_t v3 = a2[1];
  if (v3)
  {
    uint64_t v4 = *a2;
    uint64_t v5 = 4 * v3;
    while (1)
    {
      if ((v35 & 0x10) != 0)
      {
        unint64_t v8 = v34;
        uint64_t v9 = (const void **)&v30;
        if (v34 < v31)
        {
          unint64_t v34 = v31;
          unint64_t v8 = v31;
          uint64_t v9 = (const void **)&v30;
        }
      }
      else
      {
        if ((v35 & 8) == 0)
        {
          size_t v6 = 0;
          HIBYTE(v26) = 0;
          p_dst = (void **)&__dst;
          goto LABEL_17;
        }
        unint64_t v8 = v29;
        uint64_t v9 = (const void **)v28;
      }
      int v10 = *v9;
      size_t v6 = v8 - (void)*v9;
      if (v6 > 0x7FFFFFFFFFFFFFF7) {
        sub_19E37C958();
      }
      if (v6 >= 0x17) {
        break;
      }
      HIBYTE(v26) = v8 - *(unsigned char *)v9;
      p_dst = (void **)&__dst;
      if (v6) {
        goto LABEL_16;
      }
LABEL_17:
      *((unsigned char *)p_dst + v6) = 0;
      if ((SHIBYTE(v26) & 0x80000000) == 0)
      {
        if (!HIBYTE(v26)) {
          goto LABEL_22;
        }
LABEL_21:
        sub_19E37CA70(v27, (uint64_t)" ", 1);
        goto LABEL_22;
      }
      size_t v13 = v25;
      operator delete(__dst);
      if (v13) {
        goto LABEL_21;
      }
LABEL_22:
      std::ostream::operator<<();
      v4 += 4;
      v5 -= 4;
      if (!v5) {
        goto LABEL_23;
      }
    }
    uint64_t v11 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v11 = v6 | 7;
    }
    uint64_t v12 = v11 + 1;
    p_dst = (void **)operator new(v11 + 1);
    size_t v25 = v6;
    unint64_t v26 = v12 | 0x8000000000000000;
    std::string __dst = p_dst;
LABEL_16:
    memmove(p_dst, v10, v6);
    goto LABEL_17;
  }
LABEL_23:
  if ((v35 & 0x10) != 0)
  {
    unint64_t v16 = v34;
    if (v34 < v31)
    {
      unint64_t v34 = v31;
      unint64_t v16 = v31;
    }
    uint64_t v17 = (const void **)&v30;
  }
  else
  {
    if ((v35 & 8) == 0)
    {
      size_t v14 = 0;
      unint64_t v15 = a1;
      *((unsigned char *)a1 + 23) = 0;
      goto LABEL_38;
    }
    uint64_t v17 = (const void **)v28;
    unint64_t v16 = v29;
  }
  unint64_t v15 = a1;
  uint64_t v18 = *v17;
  size_t v14 = v16 - (void)*v17;
  if (v14 > 0x7FFFFFFFFFFFFFF7) {
    sub_19E37C958();
  }
  if (v14 >= 0x17)
  {
    uint64_t v19 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v19 = v14 | 7;
    }
    uint64_t v20 = v19 + 1;
    uint64_t v21 = operator new(v19 + 1);
    a1[1] = v14;
    a1[2] = v20 | 0x8000000000000000;
    *a1 = v21;
    unint64_t v15 = v21;
    goto LABEL_37;
  }
  *((unsigned char *)a1 + 23) = v14;
  if (v14) {
LABEL_37:
  }
    memmove(v15, v18, v14);
LABEL_38:
  *((unsigned char *)v15 + v14) = 0;
  v27[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v27 + *(void *)(v27[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v27[1] = MEMORY[0x1E4FBA470] + 16;
  if (v33 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x19F3BDC30](&v36);
}

void sub_19E49D8D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_19E3919D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19E49D8F4(void *a1)
{
  *a1 = &unk_1EF0BB5E8;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  JUMPOUT(0x19F3BDCF0);
}

void *sub_19E49D9B4(void *a1)
{
  *a1 = &unk_1EF0BB5E8;
  uint64_t v2 = a1[3];
  a1[3] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

void sub_19E49DA54(uint64_t *a1, CFDictionaryRef theDict)
{
  unint64_t Count = CFDictionaryGetCount(theDict);
  unint64_t v4 = Count;
  if (Count)
  {
    if (Count >> 61) {
      sub_19E37C7C4();
    }
    uint64_t v5 = operator new(8 * Count);
    bzero(v5, 8 * v4);
    size_t v6 = operator new(8 * v4);
    bzero(v6, 8 * v4);
  }
  else
  {
    uint64_t v5 = 0;
    size_t v6 = 0;
  }
  CFDictionaryRef v7 = theDict;
  unint64_t v8 = v6;
  CFDictionaryGetKeysAndValues(v7, (const void **)v5, (const void **)v6);
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_DWORD *)a1 + 8) = 1065353216;
  if (!v4) {
    goto LABEL_279;
  }
  unint64_t v9 = 0;
  unint64_t v114 = a1 + 2;
  int v115 = v6;
  unint64_t v113 = v4;
  do
  {
    unint64_t v10 = v8[v9];
    unint64_t v11 = CFDictionaryGetCount((CFDictionaryRef)v10);
    unint64_t v12 = v11;
    unint64_t v116 = v9;
    if (v11)
    {
      if (v11 >> 61) {
        sub_19E37C7C4();
      }
      unint64_t v9 = 8 * v11;
      size_t v13 = operator new(8 * v11);
      bzero(v13, 8 * v12);
      size_t v14 = operator new(8 * v12);
      bzero(v14, 8 * v12);
    }
    else
    {
      size_t v13 = 0;
      size_t v14 = 0;
    }
    CFDictionaryGetKeysAndValues((CFDictionaryRef)v10, (const void **)v13, (const void **)v14);
    *(_OWORD *)size_t v124 = 0u;
    *(_OWORD *)uint64_t v125 = 0u;
    float v126 = 1.0;
    std::string v120 = (CFStringRef *)v13;
    int v119 = v14;
    if (v12)
    {
      uint64_t v15 = 0;
      unint64_t v118 = v12;
      while (1)
      {
        unint64_t v16 = *((void *)v14 + v15);
        unint64_t v17 = CFDictionaryGetCount((CFDictionaryRef)v16);
        unint64_t v18 = v17;
        if (v17)
        {
          if (v17 >> 61) {
            sub_19E37C7C4();
          }
          unint64_t v9 = 8 * v17;
          uint64_t v19 = operator new(8 * v17);
          bzero(v19, 8 * v18);
          uint64_t v20 = operator new(8 * v18);
          bzero(v20, 8 * v18);
        }
        else
        {
          uint64_t v19 = 0;
          uint64_t v20 = 0;
        }
        CFDictionaryGetKeysAndValues((CFDictionaryRef)v16, (const void **)v19, (const void **)v20);
        *(_OWORD *)int v121 = 0u;
        *(_OWORD *)long long __p = 0u;
        float v123 = 1.0;
        if (v18)
        {
          for (uint64_t i = 0; i != v18; ++i)
          {
            IntCFNumberRef Value = CFStringGetIntValue(*((CFStringRef *)v19 + i));
            LODWORD(valuePtr[0]) = 0;
            CFNumberGetValue(*((CFNumberRef *)v20 + i), kCFNumberFloatType, valuePtr);
            unint64_t v23 = IntValue;
            int v24 = valuePtr[0];
            unint64_t v25 = (unint64_t)v121[1];
            if (v121[1])
            {
              uint8x8_t v26 = (uint8x8_t)vcnt_s8((int8x8_t)v121[1]);
              v26.i16[0] = vaddlv_u8(v26);
              if (v26.u32[0] > 1uLL)
              {
                unint64_t v9 = IntValue;
                if (v121[1] <= (void *)IntValue) {
                  unint64_t v9 = IntValue % (unint64_t)v121[1];
                }
              }
              else
              {
                unint64_t v9 = ((unint64_t)v121[1] - 1) & IntValue;
              }
              uint64_t v27 = (unint64_t *)*((void *)v121[0] + v9);
              if (v27)
              {
                unint64_t v16 = *v27;
                if (*v27)
                {
                  if (v26.u32[0] < 2uLL)
                  {
                    while (1)
                    {
                      unint64_t v29 = *(void *)(v16 + 8);
                      if (v29 == v23)
                      {
                        if (*(void *)(v16 + 16) == v23) {
                          goto LABEL_79;
                        }
                      }
                      else if ((v29 & ((unint64_t)v121[1] - 1)) != v9)
                      {
                        goto LABEL_41;
                      }
                      unint64_t v16 = *(void *)v16;
                      if (!v16) {
                        goto LABEL_41;
                      }
                    }
                  }
                  do
                  {
                    unint64_t v28 = *(void *)(v16 + 8);
                    if (v28 == v23)
                    {
                      if (*(void *)(v16 + 16) == v23) {
                        goto LABEL_79;
                      }
                    }
                    else
                    {
                      if ((void *)v28 >= v121[1]) {
                        v28 %= (unint64_t)v121[1];
                      }
                      if (v28 != v9) {
                        break;
                      }
                    }
                    unint64_t v16 = *(void *)v16;
                  }
                  while (v16);
                }
              }
            }
LABEL_41:
            unint64_t v16 = (unint64_t)operator new(0x20uLL);
            *(void *)unint64_t v16 = 0;
            *(void *)(v16 + 8) = v23;
            *(void *)(v16 + 16) = v23;
            *(_DWORD *)(v16 + ++*(_DWORD *)(result + 24) = 0;
            float v30 = (float)((unint64_t)__p[1] + 1);
            if (!v25 || (float)(v123 * (float)v25) < v30)
            {
              BOOL v31 = (v25 & (v25 - 1)) != 0;
              if (v25 < 3) {
                BOOL v31 = 1;
              }
              unint64_t v32 = v31 | (2 * v25);
              unint64_t v33 = vcvtps_u32_f32(v30 / v123);
              if (v32 <= v33) {
                size_t prime = v33;
              }
              else {
                size_t prime = v32;
              }
              if (prime == 1)
              {
                size_t prime = 2;
              }
              else if ((prime & (prime - 1)) != 0)
              {
                size_t prime = std::__next_prime(prime);
                unint64_t v25 = (unint64_t)v121[1];
              }
              if (prime > v25) {
                goto LABEL_53;
              }
              if (prime < v25)
              {
                unint64_t v35 = vcvtps_u32_f32((float)(unint64_t)__p[1] / v123);
                if (v25 < 3
                  || (uint8x8_t v36 = (uint8x8_t)vcnt_s8((int8x8_t)v25), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
                {
                  unint64_t v35 = std::__next_prime(v35);
                }
                else
                {
                  uint64_t v37 = 1 << -(char)__clz(v35 - 1);
                  if (v35 >= 2) {
                    unint64_t v35 = v37;
                  }
                }
                if (prime <= v35) {
                  size_t prime = v35;
                }
                if (prime < v25) {
LABEL_53:
                }
                  sub_19E3CEFD8((uint64_t)v121, prime);
              }
              unint64_t v25 = (unint64_t)v121[1];
              if (((unint64_t)v121[1] & ((unint64_t)v121[1] - 1)) != 0)
              {
                if (v121[1] <= (void *)v23) {
                  unint64_t v9 = v23 % (unint64_t)v121[1];
                }
                else {
                  unint64_t v9 = v23;
                }
              }
              else
              {
                unint64_t v9 = ((unint64_t)v121[1] - 1) & v23;
              }
            }
            unint64_t v38 = v121[0];
            double v39 = (unint64_t *)*((void *)v121[0] + v9);
            if (v39)
            {
              *(void *)unint64_t v16 = *v39;
            }
            else
            {
              *(void **)unint64_t v16 = __p[0];
              __p[0] = (void *)v16;
              v38[v9] = __p;
              if (!*(void *)v16) {
                goto LABEL_78;
              }
              unint64_t v40 = *(void *)(*(void *)v16 + 8);
              if ((v25 & (v25 - 1)) != 0)
              {
                if (v40 >= v25) {
                  v40 %= v25;
                }
              }
              else
              {
                v40 &= v25 - 1;
              }
              double v39 = (unint64_t *)((char *)v121[0] + 8 * v40);
            }
            *double v39 = v16;
LABEL_78:
            ++__p[1];
LABEL_79:
            *(_DWORD *)(v16 + ++*(_DWORD *)(result + 24) = v24;
          }
        }
        SInt32 v41 = CFStringGetIntValue(v120[v15]);
        unint64_t v42 = v41;
        unint64_t v9 = (unint64_t)v124[1];
        if (v124[1])
        {
          uint8x8_t v43 = (uint8x8_t)vcnt_s8((int8x8_t)v124[1]);
          v43.i16[0] = vaddlv_u8(v43);
          if (v43.u32[0] > 1uLL)
          {
            unint64_t v16 = v41;
            if (v124[1] <= (void *)v41) {
              unint64_t v16 = v41 % (unint64_t)v124[1];
            }
          }
          else
          {
            unint64_t v16 = ((unint64_t)v124[1] - 1) & v41;
          }
          unint64_t v44 = (void **)*((void *)v124[0] + v16);
          if (v44)
          {
            uint64_t v45 = (char *)*v44;
            if (*v44)
            {
              if (v43.u32[0] < 2uLL)
              {
                while (1)
                {
                  uint64_t v47 = *((void *)v45 + 1);
                  if (v47 == v41)
                  {
                    if (*((void *)v45 + 2) == v41) {
                      goto LABEL_138;
                    }
                  }
                  else if ((v47 & ((uint64_t)v124[1] - 1)) != v16)
                  {
                    goto LABEL_100;
                  }
                  uint64_t v45 = *(char **)v45;
                  if (!v45) {
                    goto LABEL_100;
                  }
                }
              }
              do
              {
                unint64_t v46 = *((void *)v45 + 1);
                if (v46 == v41)
                {
                  if (*((void *)v45 + 2) == v41) {
                    goto LABEL_138;
                  }
                }
                else
                {
                  if ((void *)v46 >= v124[1]) {
                    v46 %= (unint64_t)v124[1];
                  }
                  if (v46 != v16) {
                    break;
                  }
                }
                uint64_t v45 = *(char **)v45;
              }
              while (v45);
            }
          }
        }
LABEL_100:
        uint64_t v45 = (char *)operator new(0x40uLL);
        valuePtr[0] = v45;
        valuePtr[1] = v125;
        *(void *)uint64_t v45 = 0;
        *((void *)v45 + 1) = v42;
        *((void *)v45 + 2) = v42;
        *(_OWORD *)(v45 + ++*(_DWORD *)(result + 24) = 0u;
        *(_OWORD *)(v45 + 40) = 0u;
        *((_DWORD *)v45 + 14) = 1065353216;
        char v128 = 1;
        float v48 = (float)((unint64_t)v125[1] + 1);
        if (!v9 || (float)(v126 * (float)v9) < v48)
        {
          BOOL v49 = (v9 & (v9 - 1)) != 0;
          if (v9 < 3) {
            BOOL v49 = 1;
          }
          unint64_t v50 = v49 | (2 * v9);
          unint64_t v51 = vcvtps_u32_f32(v48 / v126);
          if (v50 <= v51) {
            size_t v52 = v51;
          }
          else {
            size_t v52 = v50;
          }
          if (v52 == 1)
          {
            size_t v52 = 2;
          }
          else if ((v52 & (v52 - 1)) != 0)
          {
            size_t v52 = std::__next_prime(v52);
            unint64_t v9 = (unint64_t)v124[1];
          }
          if (v52 > v9) {
            goto LABEL_112;
          }
          if (v52 < v9)
          {
            unint64_t v53 = vcvtps_u32_f32((float)(unint64_t)v125[1] / v126);
            if (v9 < 3 || (uint8x8_t v54 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v54.i16[0] = vaddlv_u8(v54), v54.u32[0] > 1uLL))
            {
              unint64_t v53 = std::__next_prime(v53);
            }
            else
            {
              uint64_t v55 = 1 << -(char)__clz(v53 - 1);
              if (v53 >= 2) {
                unint64_t v53 = v55;
              }
            }
            if (v52 <= v53) {
              size_t v52 = v53;
            }
            if (v52 < v9) {
LABEL_112:
            }
              sub_19E3CEFD8((uint64_t)v124, v52);
          }
          unint64_t v9 = (unint64_t)v124[1];
          if (((unint64_t)v124[1] & ((unint64_t)v124[1] - 1)) != 0)
          {
            if (v124[1] <= (void *)v42) {
              unint64_t v16 = v42 % (unint64_t)v124[1];
            }
            else {
              unint64_t v16 = v42;
            }
          }
          else
          {
            unint64_t v16 = ((unint64_t)v124[1] - 1) & v42;
          }
        }
        uint64_t v56 = v124[0];
        uint64_t v57 = (void *)*((void *)v124[0] + v16);
        if (v57) {
          break;
        }
        *(void **)uint64_t v45 = v125[0];
        v125[0] = v45;
        v56[v16] = v125;
        if (*(void *)v45)
        {
          unint64_t v58 = *(void *)(*(void *)v45 + 8);
          if ((v9 & (v9 - 1)) != 0)
          {
            if (v58 >= v9) {
              v58 %= v9;
            }
          }
          else
          {
            v58 &= v9 - 1;
          }
          uint64_t v57 = (char *)v124[0] + 8 * v58;
          goto LABEL_136;
        }
LABEL_137:
        ++v125[1];
LABEL_138:
        unint64_t v10 = (unint64_t)(v45 + 24);
        if (v45 + 24 == (char *)v121) {
          goto LABEL_167;
        }
        *((float *)v45 + 14) = v123;
        size_t v59 = __p[0];
        uint64_t v60 = *((void *)v45 + 4);
        if (v60)
        {
          for (uint64_t j = 0; j != v60; ++j)
            *(void *)(*(void *)v10 + 8 * j) = 0;
          uint64_t v62 = (unint64_t *)(v45 + 40);
          unint64_t v63 = *((void *)v45 + 5);
          *((void *)v45 + 5) = 0;
          for (*((void *)v45 + 6) = 0; v63; size_t v59 = (void *)*v59)
          {
            unint64_t v9 = v63;
            if (!v59)
            {
              do
              {
                unint64_t v10 = *(void *)v9;
                operator delete((void *)v9);
                unint64_t v9 = v10;
              }
              while (v10);
              goto LABEL_167;
            }
            unint64_t v65 = v59[2];
            *(void *)(v63 + 16) = v65;
            int v66 = (void *)(v63 + 16);
            *(_DWORD *)(v63 + ++*(_DWORD *)(result + 24) = *((_DWORD *)v59 + 6);
            unint64_t v63 = *(void *)v63;
            *(void *)(v9 + 8) = v65;
            uint64_t v67 = sub_19E49EB44((uint64_t)(v45 + 24), v65, v66);
            int8x8_t v68 = *(int8x8_t *)(v45 + 32);
            unint64_t v69 = *(void *)(v9 + 8);
            uint8x8_t v70 = (uint8x8_t)vcnt_s8(v68);
            v70.i16[0] = vaddlv_u8(v70);
            if (v70.u32[0] > 1uLL)
            {
              if (v69 >= *(void *)&v68) {
                v69 %= *(void *)&v68;
              }
            }
            else
            {
              v69 &= *(void *)&v68 - 1;
            }
            if (v67)
            {
              *(void *)unint64_t v9 = *v67;
              void *v67 = v9;
              if (!*(void *)v9) {
                goto LABEL_148;
              }
              unint64_t v64 = *(void *)(*(void *)v9 + 8);
              if (v70.u32[0] > 1uLL)
              {
                if (v64 >= *(void *)&v68) {
                  v64 %= *(void *)&v68;
                }
              }
              else
              {
                v64 &= *(void *)&v68 - 1;
              }
              if (v64 == v69) {
                goto LABEL_148;
              }
            }
            else
            {
              *(void *)unint64_t v9 = *v62;
              *uint64_t v62 = v9;
              *(void *)(*(void *)v10 + 8 * v69) = v62;
              if (!*(void *)v9) {
                goto LABEL_148;
              }
              unint64_t v64 = *(void *)(*(void *)v9 + 8);
              if (v70.u32[0] <= 1uLL)
              {
                v64 &= *(void *)&v68 - 1;
              }
              else if (v64 >= *(void *)&v68)
              {
                v64 %= *(void *)&v68;
              }
            }
            *(void *)(*(void *)v10 + 8 * v64) = v9;
LABEL_148:
            ++*((void *)v45 + 6);
          }
        }
        for (; v59; size_t v59 = (void *)*v59)
        {
          unint64_t v9 = (unint64_t)operator new(0x20uLL);
          *(void *)unint64_t v9 = 0;
          *(_OWORD *)(v9 + 16) = *((_OWORD *)v59 + 1);
          *(void *)(v9 + 8) = *(void *)(v9 + 16);
          sub_19E49EF3C((void *)v45 + 3, (void *)v9);
        }
LABEL_167:
        __n128 v71 = (unint64_t *)__p[0];
        if (__p[0])
        {
          do
          {
            unint64_t v10 = *v71;
            operator delete(v71);
            __n128 v71 = (unint64_t *)v10;
          }
          while (v10);
        }
        int v72 = v121[0];
        v121[0] = 0;
        if (v72) {
          operator delete(v72);
        }
        if (v20) {
          operator delete(v20);
        }
        if (v19) {
          operator delete(v19);
        }
        ++v15;
        size_t v14 = v119;
        size_t v13 = v120;
        if (v15 == v118)
        {
          unint64_t v4 = v113;
          goto LABEL_176;
        }
      }
      *(void *)uint64_t v45 = *v57;
LABEL_136:
      *uint64_t v57 = v45;
      goto LABEL_137;
    }
LABEL_176:
    SInt32 v73 = CFStringGetIntValue(*((CFStringRef *)v5 + v116));
    unint64_t v74 = v73;
    unint64_t v75 = a1[1];
    if (v75)
    {
      uint8x8_t v76 = (uint8x8_t)vcnt_s8((int8x8_t)v75);
      v76.i16[0] = vaddlv_u8(v76);
      if (v76.u32[0] > 1uLL)
      {
        unint64_t v10 = v73;
        if (v75 <= v73) {
          unint64_t v10 = v73 % v75;
        }
      }
      else
      {
        unint64_t v10 = (v75 - 1) & v73;
      }
      uint64_t v77 = *(void ***)(*a1 + 8 * v10);
      if (v77)
      {
        unint64_t v78 = (char *)*v77;
        if (*v77)
        {
          if (v76.u32[0] < 2uLL)
          {
            while (1)
            {
              uint64_t v80 = *((void *)v78 + 1);
              if (v80 == v73)
              {
                if (*((void *)v78 + 2) == v73) {
                  goto LABEL_256;
                }
              }
              else if ((v80 & (v75 - 1)) != v10)
              {
                goto LABEL_196;
              }
              unint64_t v78 = *(char **)v78;
              if (!v78) {
                goto LABEL_196;
              }
            }
          }
          do
          {
            unint64_t v79 = *((void *)v78 + 1);
            if (v79 == v73)
            {
              if (*((void *)v78 + 2) == v73) {
                goto LABEL_256;
              }
            }
            else
            {
              if (v79 >= v75) {
                v79 %= v75;
              }
              if (v79 != v10) {
                break;
              }
            }
            unint64_t v78 = *(char **)v78;
          }
          while (v78);
        }
      }
    }
LABEL_196:
    unint64_t v78 = (char *)operator new(0x40uLL);
    *(void *)unint64_t v78 = 0;
    *((void *)v78 + 1) = v74;
    *((void *)v78 + 2) = v74;
    *(_OWORD *)(v78 + ++*(_DWORD *)(result + 24) = 0u;
    *(_OWORD *)(v78 + 40) = 0u;
    *((_DWORD *)v78 + 14) = 1065353216;
    float v81 = (float)(unint64_t)(a1[3] + 1);
    float v82 = *((float *)a1 + 8);
    if (!v75 || (float)(v82 * (float)v75) < v81)
    {
      BOOL v83 = (v75 & (v75 - 1)) != 0;
      if (v75 < 3) {
        BOOL v83 = 1;
      }
      unint64_t v84 = v83 | (2 * v75);
      unint64_t v85 = vcvtps_u32_f32(v81 / v82);
      if (v84 <= v85) {
        size_t v86 = v85;
      }
      else {
        size_t v86 = v84;
      }
      if (v86 == 1)
      {
        size_t v86 = 2;
      }
      else if ((v86 & (v86 - 1)) != 0)
      {
        size_t v86 = std::__next_prime(v86);
        unint64_t v75 = a1[1];
      }
      if (v86 <= v75)
      {
        if (v86 >= v75) {
          goto LABEL_233;
        }
        unint64_t v97 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
        if (v75 < 3 || (uint8x8_t v98 = (uint8x8_t)vcnt_s8((int8x8_t)v75), v98.i16[0] = vaddlv_u8(v98), v98.u32[0] > 1uLL))
        {
          unint64_t v97 = std::__next_prime(v97);
        }
        else
        {
          uint64_t v99 = 1 << -(char)__clz(v97 - 1);
          if (v97 >= 2) {
            unint64_t v97 = v99;
          }
        }
        if (v86 <= v97) {
          size_t v86 = v97;
        }
        if (v86 >= v75)
        {
          unint64_t v75 = a1[1];
LABEL_233:
          if ((v75 & (v75 - 1)) != 0)
          {
            if (v75 <= v74) {
              unint64_t v10 = v74 % v75;
            }
            else {
              unint64_t v10 = v74;
            }
          }
          else
          {
            unint64_t v10 = (v75 - 1) & v74;
          }
          goto LABEL_246;
        }
        if (!v86)
        {
          uint64_t v112 = (void *)*a1;
          *a1 = 0;
          if (v112) {
            operator delete(v112);
          }
          unint64_t v75 = 0;
          a1[1] = 0;
          goto LABEL_233;
        }
      }
      if (v86 >> 61) {
        sub_19E37C2B8();
      }
      char v87 = operator new(8 * v86);
      char v88 = (void *)*a1;
      *a1 = (uint64_t)v87;
      if (v88) {
        operator delete(v88);
      }
      uint64_t v89 = 0;
      a1[1] = v86;
      do
        *(void *)(*a1 + 8 * v89++) = 0;
      while (v86 != v89);
      int v90 = (void *)*v114;
      if (!*v114)
      {
LABEL_232:
        unint64_t v75 = v86;
        goto LABEL_233;
      }
      size_t v91 = v90[1];
      size_t v92 = v86 - 1;
      if ((v86 & (v86 - 1)) == 0)
      {
        size_t v93 = v91 & v92;
        *(void *)(*a1 + 8 * v93) = v114;
        for (k = (void *)*v90; *v90; k = (void *)*v90)
        {
          size_t v95 = k[1] & v92;
          if (v95 == v93)
          {
            int v90 = k;
          }
          else if (*(void *)(*a1 + 8 * v95))
          {
            *int v90 = *k;
            uint64_t v96 = 8 * v95;
            void *k = **(void **)(*a1 + v96);
            **(void **)(*a1 + v96) = k;
          }
          else
          {
            *(void *)(*a1 + 8 * v95) = v90;
            int v90 = k;
            size_t v93 = v95;
          }
        }
        goto LABEL_232;
      }
      if (v91 >= v86) {
        v91 %= v86;
      }
      *(void *)(*a1 + 8 * v91) = v114;
      std::string::size_type v100 = (void *)*v90;
      if (!*v90) {
        goto LABEL_232;
      }
      while (1)
      {
        size_t v102 = v100[1];
        if (v102 >= v86) {
          v102 %= v86;
        }
        if (v102 != v91)
        {
          if (!*(void *)(*a1 + 8 * v102))
          {
            *(void *)(*a1 + 8 * v102) = v90;
            goto LABEL_237;
          }
          *int v90 = *v100;
          uint64_t v101 = 8 * v102;
          *std::string::size_type v100 = **(void **)(*a1 + v101);
          **(void **)(*a1 + v101) = v100;
          std::string::size_type v100 = v90;
        }
        size_t v102 = v91;
LABEL_237:
        int v90 = v100;
        std::string::size_type v100 = (void *)*v100;
        size_t v91 = v102;
        if (!v100) {
          goto LABEL_232;
        }
      }
    }
LABEL_246:
    uint64_t v103 = *a1;
    int v104 = *(void **)(*a1 + 8 * v10);
    if (v104)
    {
      *(void *)unint64_t v78 = *v104;
LABEL_254:
      *int v104 = v78;
      goto LABEL_255;
    }
    *(void *)unint64_t v78 = *v114;
    void *v114 = v78;
    *(void *)(v103 + 8 * v10) = v114;
    if (*(void *)v78)
    {
      unint64_t v105 = *(void *)(*(void *)v78 + 8);
      if ((v75 & (v75 - 1)) != 0)
      {
        if (v105 >= v75) {
          v105 %= v75;
        }
      }
      else
      {
        v105 &= v75 - 1;
      }
      int v104 = (void *)(*a1 + 8 * v105);
      goto LABEL_254;
    }
LABEL_255:
    ++a1[3];
LABEL_256:
    if (v78 + 24 != (char *)v124)
    {
      *((float *)v78 + 14) = v126;
      sub_19E49F060((void *)v78 + 3, (uint64_t *)v125[0]);
    }
    int64_t v106 = v125[0];
    if (v125[0])
    {
      do
      {
        size_t v108 = (void *)*v106;
        unint64_t v109 = (void *)v106[5];
        if (v109)
        {
          do
          {
            uint64_t v110 = (void *)*v109;
            operator delete(v109);
            unint64_t v109 = v110;
          }
          while (v110);
        }
        unint64_t v111 = (void *)v106[3];
        v106[3] = 0;
        if (v111) {
          operator delete(v111);
        }
        operator delete(v106);
        int64_t v106 = v108;
      }
      while (v108);
    }
    unint64_t v107 = v124[0];
    v124[0] = 0;
    if (v107) {
      operator delete(v107);
    }
    unint64_t v8 = v115;
    if (v14) {
      operator delete(v14);
    }
    if (v13) {
      operator delete(v13);
    }
    unint64_t v9 = v116 + 1;
  }
  while (v116 + 1 != v4);
LABEL_279:
  if (v8) {
    operator delete(v8);
  }
  if (v5) {
    operator delete(v5);
  }
}

void sub_19E49E92C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19E49E934(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    operator delete(v1);
    if (!v2) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if (!v2)
  {
    goto LABEL_3;
  }
  operator delete(v2);
  _Unwind_Resume(exception_object);
}

void sub_19E49E940(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,void *a27)
{
  sub_19E49FD0C(1, v27);
  unint64_t v29 = a27;
  if (a27)
  {
    do
    {
      unint64_t v33 = (void *)*v29;
      unint64_t v34 = (void *)v29[5];
      if (v34)
      {
        do
        {
          unint64_t v35 = (void *)*v34;
          operator delete(v34);
          unint64_t v34 = v35;
        }
        while (v35);
      }
      uint8x8_t v36 = (void *)v29[3];
      v29[3] = 0;
      if (v36) {
        operator delete(v36);
      }
      operator delete(v29);
      unint64_t v29 = v33;
    }
    while (v33);
  }
  if (a25)
  {
    operator delete(a25);
    float v30 = a11;
    uint64_t v31 = a12;
    if (!a16)
    {
LABEL_4:
      if (!__p) {
        goto LABEL_6;
      }
      goto LABEL_5;
    }
  }
  else
  {
    float v30 = a11;
    uint64_t v31 = a12;
    if (!a16) {
      goto LABEL_4;
    }
  }
  operator delete(a16);
  if (!__p)
  {
LABEL_6:
    sub_19E49F2F4(*(void **)(a14 + 16));
    unint64_t v32 = *(void **)a14;
    *(void *)a14 = 0;
    if (v32)
    {
      operator delete(v32);
      if (!v30)
      {
LABEL_8:
        if (!v31) {
          goto LABEL_9;
        }
        goto LABEL_17;
      }
    }
    else if (!v30)
    {
      goto LABEL_8;
    }
    operator delete(v30);
    if (!v31) {
LABEL_9:
    }
      _Unwind_Resume(a1);
LABEL_17:
    JUMPOUT(0x19E49EB18);
  }
LABEL_5:
  operator delete(__p);
  goto LABEL_6;
}

void sub_19E49E960()
{
}

void sub_19E49E96C()
{
}

void sub_19E49E990(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (!a27)
  {
    if (!a25)
    {
      if (!v28)
      {
        if (v27) {
          operator delete(v27);
        }
        sub_19E49F2F4((void *)a14[2]);
        uint64_t v29 = *a14;
        *a14 = 0;
        if (!v29)
        {
          if (!a11) {
            JUMPOUT(0x19E49EAB8);
          }
          JUMPOUT(0x19E49EB0CLL);
        }
        JUMPOUT(0x19E49EB04);
      }
      JUMPOUT(0x19E49EB34);
    }
    JUMPOUT(0x19E49EB28);
  }
  JUMPOUT(0x19E49EAD4);
}

void sub_19E49E9C4()
{
}

void sub_19E49E9D0(void *a1)
{
  __cxa_begin_catch(a1);
  do
  {
    uint64_t v2 = (void *)*v1;
    operator delete(v1);
    uint64_t v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_19E49E9F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,void *a21)
{
  __cxa_end_catch();
  unint64_t v23 = a21;
  if (a21)
  {
    do
    {
      int v24 = (void *)*v23;
      operator delete(v23);
      unint64_t v23 = v24;
    }
    while (v24);
  }
  if (a19) {
    operator delete(a19);
  }
  if (v22) {
    operator delete(v22);
  }
  if (v21) {
    operator delete(v21);
  }
  JUMPOUT(0x19E49EA74);
}

void sub_19E49EA00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,void *a21)
{
  operator delete(v21);
  int v24 = a21;
  if (a21)
  {
    do
    {
      unint64_t v25 = (void *)*v24;
      operator delete(v24);
      int v24 = v25;
    }
    while (v25);
  }
  if (a19) {
    operator delete(a19);
  }
  if (v23) {
    operator delete(v23);
  }
  if (v22) {
    operator delete(v22);
  }
  JUMPOUT(0x19E49EA74);
}

void sub_19E49EA14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,void *a21)
{
  operator delete(v21);
  int v24 = a21;
  if (a21)
  {
    do
    {
      unint64_t v25 = (void *)*v24;
      operator delete(v24);
      int v24 = v25;
    }
    while (v25);
  }
  if (a19) {
    operator delete(a19);
  }
  if (v23) {
    operator delete(v23);
  }
  if (v22) {
    operator delete(v22);
  }
  JUMPOUT(0x19E49EA74);
}

void *sub_19E49EB44(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  float v7 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    BOOL v9 = 1;
    if (v6 >= 3) {
      BOOL v9 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v10 = v9 | (2 * v6);
    unint64_t v11 = vcvtps_u32_f32(v7 / v8);
    if (v10 <= v11) {
      size_t prime = v11;
    }
    else {
      size_t prime = v10;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v6 = *(void *)(a1 + 8);
    }
    if (prime > v6) {
      goto LABEL_85;
    }
    if (prime >= v6) {
      goto LABEL_40;
    }
    unint64_t v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v6 < 3 || (uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
    {
      unint64_t v26 = std::__next_prime(v26);
    }
    else
    {
      uint64_t v28 = 1 << -(char)__clz(v26 - 1);
      if (v26 >= 2) {
        unint64_t v26 = v28;
      }
    }
    if (prime <= v26) {
      size_t prime = v26;
    }
    if (prime >= v6)
    {
      unint64_t v6 = *(void *)(a1 + 8);
      goto LABEL_40;
    }
    if (prime)
    {
LABEL_85:
      if (prime >> 61) {
        sub_19E37C2B8();
      }
      size_t v13 = operator new(8 * prime);
      size_t v14 = *(void **)a1;
      *(void *)a1 = v13;
      if (v14) {
        operator delete(v14);
      }
      uint64_t v15 = 0;
      *(void *)(a1 + 8) = prime;
      do
        *(void *)(*(void *)a1 + 8 * v15++) = 0;
      while (prime != v15);
      uint64_t v17 = a1 + 16;
      unint64_t v16 = *(void **)(a1 + 16);
      if (v16)
      {
        size_t v18 = v16[1];
        size_t v19 = prime - 1;
        if ((prime & (prime - 1)) != 0)
        {
          if (v18 >= prime) {
            v18 %= prime;
          }
          *(void *)(*(void *)a1 + 8 * v18) = v17;
          for (uint64_t i = (void *)*v16; *v16; uint64_t i = (void *)*v16)
          {
            size_t v37 = i[1];
            if (v37 >= prime) {
              v37 %= prime;
            }
            if (v37 == v18)
            {
              unint64_t v16 = i;
            }
            else
            {
              unint64_t v38 = i;
              if (*(void *)(*(void *)a1 + 8 * v37))
              {
                do
                {
                  double v39 = v38;
                  unint64_t v38 = (void *)*v38;
                }
                while (v38 && i[2] == v38[2]);
                *unint64_t v16 = v38;
                uint64_t v40 = 8 * v37;
                *double v39 = **(void **)(*(void *)a1 + v40);
                **(void **)(*(void *)a1 + v40) = i;
              }
              else
              {
                *(void *)(*(void *)a1 + 8 * v37) = v16;
                unint64_t v16 = i;
                size_t v18 = v37;
              }
            }
          }
        }
        else
        {
          size_t v20 = v18 & v19;
          *(void *)(*(void *)a1 + 8 * v20) = v17;
          for (uint64_t j = (void *)*v16; *v16; uint64_t j = (void *)*v16)
          {
            size_t v22 = j[1] & v19;
            if (v22 == v20)
            {
              unint64_t v16 = j;
            }
            else
            {
              unint64_t v23 = j;
              if (*(void *)(*(void *)a1 + 8 * v22))
              {
                do
                {
                  int v24 = v23;
                  unint64_t v23 = (void *)*v23;
                }
                while (v23 && j[2] == v23[2]);
                *unint64_t v16 = v23;
                uint64_t v25 = 8 * v22;
                *int v24 = **(void **)(*(void *)a1 + v25);
                **(void **)(*(void *)a1 + v25) = j;
              }
              else
              {
                *(void *)(*(void *)a1 + 8 * v22) = v16;
                unint64_t v16 = j;
                size_t v20 = v22;
              }
            }
          }
        }
      }
      unint64_t v6 = prime;
    }
    else
    {
      float v48 = *(void **)a1;
      *(void *)a1 = 0;
      if (v48) {
        operator delete(v48);
      }
      unint64_t v6 = 0;
      *(void *)(a1 + 8) = 0;
    }
  }
LABEL_40:
  unint64_t v30 = v6 - 1;
  if ((v6 & (v6 - 1)) == 0)
  {
    uint64_t v31 = *(void **)(*(void *)a1 + 8 * (v30 & a2));
    if (v31)
    {
      int v32 = 0;
      do
      {
        uint64_t result = v31;
        uint64_t v31 = (void *)*v31;
        if (!v31) {
          break;
        }
        uint64_t v36 = v31[1];
        if ((v36 & v30) != (v30 & a2)) {
          break;
        }
        BOOL v33 = v36 == a2 && v31[2] == *a3;
        char v34 = v32 & !v33;
        v32 |= v33;
      }
      while ((v34 & 1) == 0);
      return result;
    }
    return 0;
  }
  unint64_t v41 = a2;
  if (v6 <= a2) {
    unint64_t v41 = a2 % v6;
  }
  unint64_t v42 = *(void **)(*(void *)a1 + 8 * v41);
  if (!v42) {
    return 0;
  }
  int v43 = 0;
  do
  {
    uint64_t result = v42;
    unint64_t v42 = (void *)*v42;
    if (!v42) {
      break;
    }
    unint64_t v46 = v42[1];
    unint64_t v47 = v46;
    if (v46 >= v6) {
      unint64_t v47 = v46 % v6;
    }
    if (v47 != v41) {
      break;
    }
    BOOL v44 = v46 == a2 && v42[2] == *a3;
    int v45 = v43 & !v44;
    v43 |= v44;
  }
  while (v45 != 1);
  return result;
}

void *sub_19E49EF3C(void *a1, void *a2)
{
  uint64_t v5 = a2 + 2;
  unint64_t v4 = a2[2];
  *(v5 - 1) = v4;
  uint64_t result = sub_19E49EB44((uint64_t)a1, v4, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  unint64_t v8 = *(v5 - 1);
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v7) {
      v8 %= *(void *)&v7;
    }
  }
  else
  {
    v8 &= *(void *)&v7 - 1;
  }
  if (!result)
  {
    *a2 = a1[2];
    a1[2] = a2;
    *(void *)(*a1 + 8 * v8) = a1 + 2;
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v10 = *(void *)(*a2 + 8);
    if (v9.u32[0] > 1uLL)
    {
      if (v10 >= *(void *)&v7) {
        v10 %= *(void *)&v7;
      }
    }
    else
    {
      v10 &= *(void *)&v7 - 1;
    }
LABEL_18:
    *(void *)(*a1 + 8 * v10) = a2;
    goto LABEL_19;
  }
  *a2 = *result;
  *uint64_t result = a2;
  if (*a2)
  {
    unint64_t v10 = *(void *)(*a2 + 8);
    if (v9.u32[0] > 1uLL)
    {
      if (v10 >= *(void *)&v7) {
        v10 %= *(void *)&v7;
      }
    }
    else
    {
      v10 &= *(void *)&v7 - 1;
    }
    if (v10 != v8) {
      goto LABEL_18;
    }
  }
LABEL_19:
  ++a1[3];
  return result;
}

void sub_19E49F060(void *a1, uint64_t *a2)
{
  uint64_t v4 = a1[1];
  if (!v4) {
    goto LABEL_18;
  }
  for (uint64_t i = 0; i != v4; ++i)
    *(void *)(*a1 + 8 * i) = 0;
  unint64_t v6 = (uint64_t *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v6)
  {
    while (a2)
    {
      v6[2] = a2[2];
      if (v6 != a2)
      {
        *((_DWORD *)v6 + 14) = *((_DWORD *)a2 + 14);
        int8x8_t v7 = (uint64_t *)a2[5];
        uint64_t v8 = v6[4];
        if (!v8) {
          goto LABEL_13;
        }
        for (uint64_t j = 0; j != v8; ++j)
          *(void *)(v6[3] + 8 * j) = 0;
        unint64_t v10 = (uint64_t *)v6[5];
        v6[5] = 0;
        v6[6] = 0;
        if (v10)
        {
          while (v7)
          {
            v10[2] = v7[2];
            *((_DWORD *)v10 + 6) = *((_DWORD *)v7 + 6);
            unint64_t v11 = (uint64_t *)*v10;
            sub_19E49EF3C(v6 + 3, v10);
            int8x8_t v7 = (uint64_t *)*v7;
            unint64_t v10 = v11;
            if (!v11) {
              goto LABEL_13;
            }
          }
          do
          {
            size_t v13 = (uint64_t *)*v10;
            operator delete(v10);
            unint64_t v10 = v13;
          }
          while (v13);
        }
        else
        {
LABEL_13:
          while (v7)
          {
            unint64_t v12 = operator new(0x20uLL);
            *(void *)unint64_t v12 = 0;
            v12[1] = *((_OWORD *)v7 + 1);
            *((void *)v12 + 1) = *((void *)v12 + 2);
            sub_19E49EF3C(v6 + 3, v12);
            int8x8_t v7 = (uint64_t *)*v7;
          }
        }
      }
      size_t v14 = (uint64_t *)*v6;
      sub_19E49F3A0((uint64_t)a1, v6);
      a2 = (uint64_t *)*a2;
      unint64_t v6 = v14;
      if (!v14) {
        goto LABEL_18;
      }
    }
    do
    {
      unint64_t v16 = (uint64_t *)*v6;
      uint64_t v17 = (void *)v6[5];
      if (v17)
      {
        do
        {
          size_t v18 = (void *)*v17;
          operator delete(v17);
          uint64_t v17 = v18;
        }
        while (v18);
      }
      size_t v19 = (void *)v6[3];
      v6[3] = 0;
      if (v19) {
        operator delete(v19);
      }
      operator delete(v6);
      unint64_t v6 = v16;
    }
    while (v16);
  }
  else
  {
LABEL_18:
    while (a2)
    {
      uint64_t v15 = operator new(0x40uLL);
      *uint64_t v15 = 0;
      v15[1] = 0;
      v15[2] = a2[2];
      sub_19E49F900((uint64_t)(v15 + 3), (uint64_t)(a2 + 3));
      v15[1] = v15[2];
      sub_19E49F3A0((uint64_t)a1, v15);
      a2 = (uint64_t *)*a2;
    }
  }
}

void sub_19E49F23C(void *a1)
{
  __cxa_begin_catch(a1);
  sub_19E49F894(v1);
  __cxa_rethrow();
}

void sub_19E49F2E0(_Unwind_Exception *a1)
{
}

void sub_19E49F2F4(void *__p)
{
  if (__p)
  {
    uint64_t v1 = __p;
    do
    {
      uint64_t v2 = (void *)*v1;
      uint64_t v3 = (void *)v1[5];
      if (v3)
      {
        do
        {
          uint64_t v5 = (void *)*v3;
          unint64_t v6 = (void *)v3[5];
          if (v6)
          {
            do
            {
              int8x8_t v7 = (void *)*v6;
              operator delete(v6);
              unint64_t v6 = v7;
            }
            while (v7);
          }
          uint64_t v8 = (void *)v3[3];
          void v3[3] = 0;
          if (v8) {
            operator delete(v8);
          }
          operator delete(v3);
          uint64_t v3 = v5;
        }
        while (v5);
      }
      uint64_t v4 = (void *)v1[3];
      v1[3] = 0;
      if (v4) {
        operator delete(v4);
      }
      operator delete(v1);
      uint64_t v1 = v2;
    }
    while (v2);
  }
}

void sub_19E49F3A0(uint64_t a1, void *a2)
{
  unint64_t v4 = a2[2];
  a2[1] = v4;
  unint64_t v5 = *(void *)(a1 + 8);
  float v6 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v7 = *(float *)(a1 + 32);
  if (!v5 || (float)(v7 * (float)v5) < v6)
  {
    BOOL v8 = 1;
    if (v5 >= 3) {
      BOOL v8 = (v5 & (v5 - 1)) != 0;
    }
    unint64_t v9 = v8 | (2 * v5);
    unint64_t v10 = vcvtps_u32_f32(v6 / v7);
    if (v9 <= v10) {
      size_t prime = v10;
    }
    else {
      size_t prime = v9;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v5 = *(void *)(a1 + 8);
    }
    if (prime > v5) {
      goto LABEL_105;
    }
    if (prime >= v5) {
      goto LABEL_40;
    }
    unint64_t v25 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v5 < 3 || (uint8x8_t v26 = (uint8x8_t)vcnt_s8((int8x8_t)v5), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
    {
      unint64_t v25 = std::__next_prime(v25);
    }
    else
    {
      uint64_t v27 = 1 << -(char)__clz(v25 - 1);
      if (v25 >= 2) {
        unint64_t v25 = v27;
      }
    }
    if (prime <= v25) {
      size_t prime = v25;
    }
    if (prime >= v5)
    {
      unint64_t v5 = *(void *)(a1 + 8);
      goto LABEL_40;
    }
    if (prime)
    {
LABEL_105:
      if (prime >> 61) {
        sub_19E37C2B8();
      }
      unint64_t v12 = operator new(8 * prime);
      size_t v13 = *(void **)a1;
      *(void *)a1 = v12;
      if (v13) {
        operator delete(v13);
      }
      uint64_t v14 = 0;
      *(void *)(a1 + 8) = prime;
      do
        *(void *)(*(void *)a1 + 8 * v14++) = 0;
      while (prime != v14);
      uint64_t v16 = a1 + 16;
      uint64_t v15 = *(void **)(a1 + 16);
      if (v15)
      {
        size_t v17 = v15[1];
        size_t v18 = prime - 1;
        if ((prime & (prime - 1)) != 0)
        {
          if (v17 >= prime) {
            v17 %= prime;
          }
          *(void *)(*(void *)a1 + 8 * v17) = v16;
          for (uint64_t i = (void *)*v15; *v15; uint64_t i = (void *)*v15)
          {
            size_t v37 = i[1];
            if (v37 >= prime) {
              v37 %= prime;
            }
            if (v37 == v17)
            {
              uint64_t v15 = i;
            }
            else
            {
              unint64_t v38 = i;
              if (*(void *)(*(void *)a1 + 8 * v37))
              {
                do
                {
                  double v39 = v38;
                  unint64_t v38 = (void *)*v38;
                }
                while (v38 && i[2] == v38[2]);
                *uint64_t v15 = v38;
                uint64_t v40 = 8 * v37;
                *double v39 = **(void **)(*(void *)a1 + v40);
                **(void **)(*(void *)a1 + v40) = i;
              }
              else
              {
                *(void *)(*(void *)a1 + 8 * v37) = v15;
                uint64_t v15 = i;
                size_t v17 = v37;
              }
            }
          }
        }
        else
        {
          size_t v19 = v17 & v18;
          *(void *)(*(void *)a1 + 8 * v19) = v16;
          for (uint64_t j = (void *)*v15; *v15; uint64_t j = (void *)*v15)
          {
            size_t v21 = j[1] & v18;
            if (v21 == v19)
            {
              uint64_t v15 = j;
            }
            else
            {
              size_t v22 = j;
              if (*(void *)(*(void *)a1 + 8 * v21))
              {
                do
                {
                  unint64_t v23 = v22;
                  size_t v22 = (void *)*v22;
                }
                while (v22 && j[2] == v22[2]);
                *uint64_t v15 = v22;
                uint64_t v24 = 8 * v21;
                *unint64_t v23 = **(void **)(*(void *)a1 + v24);
                **(void **)(*(void *)a1 + v++*(_DWORD *)(result + 24) = j;
              }
              else
              {
                *(void *)(*(void *)a1 + 8 * v21) = v15;
                uint64_t v15 = j;
                size_t v19 = v21;
              }
            }
          }
        }
      }
      unint64_t v5 = prime;
    }
    else
    {
      unint64_t v50 = *(void **)a1;
      *(void *)a1 = 0;
      if (v50) {
        operator delete(v50);
      }
      unint64_t v5 = 0;
      *(void *)(a1 + 8) = 0;
    }
  }
LABEL_40:
  uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)v5);
  v29.i16[0] = vaddlv_u8(v29);
  if (v29.u32[0] >= 2uLL)
  {
    unint64_t v41 = v4;
    if (v5 <= v4) {
      unint64_t v41 = v4 % v5;
    }
    unint64_t v42 = *(void **)(*(void *)a1 + 8 * v41);
    if (!v42)
    {
      unint64_t v35 = 0;
      unint64_t v48 = a2[1];
      if (v48 < v5) {
        goto LABEL_78;
      }
      goto LABEL_77;
    }
    int v43 = 0;
    do
    {
      unint64_t v35 = v42;
      unint64_t v42 = (void *)*v42;
      if (!v42) {
        break;
      }
      unint64_t v46 = v42[1];
      unint64_t v47 = v46;
      if (v46 >= v5) {
        unint64_t v47 = v46 % v5;
      }
      if (v47 != v41) {
        break;
      }
      BOOL v44 = v46 == v4 && v42[2] == a2[2];
      int v45 = v43 & !v44;
      v43 |= v44;
    }
    while (v45 != 1);
  }
  else
  {
    uint64_t v30 = (v5 - 1) & v4;
    uint64_t v31 = *(void **)(*(void *)a1 + 8 * v30);
    if (!v31)
    {
      unint64_t v35 = 0;
      unint64_t v48 = a2[1];
      goto LABEL_75;
    }
    int v32 = 0;
    do
    {
      unint64_t v35 = v31;
      uint64_t v31 = (void *)*v31;
      if (!v31) {
        break;
      }
      uint64_t v36 = v31[1];
      if ((v36 & (v5 - 1)) != v30) {
        break;
      }
      BOOL v33 = v36 == v4 && v31[2] == a2[2];
      char v34 = v32 & !v33;
      v32 |= v33;
    }
    while ((v34 & 1) == 0);
  }
  unint64_t v48 = a2[1];
  if (v29.u32[0] <= 1uLL)
  {
LABEL_75:
    v48 &= v5 - 1;
    goto LABEL_78;
  }
  if (v48 >= v5) {
LABEL_77:
  }
    v48 %= v5;
LABEL_78:
  if (!v35)
  {
    *a2 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = a2;
    *(void *)(*(void *)a1 + 8 * v48) = a1 + 16;
    if (!*a2) {
      goto LABEL_92;
    }
    unint64_t v49 = *(void *)(*a2 + 8);
    if (v29.u32[0] > 1uLL)
    {
      if (v49 >= v5) {
        v49 %= v5;
      }
    }
    else
    {
      v49 &= v5 - 1;
    }
LABEL_91:
    *(void *)(*(void *)a1 + 8 * v49) = a2;
    goto LABEL_92;
  }
  *a2 = *v35;
  *unint64_t v35 = a2;
  if (*a2)
  {
    unint64_t v49 = *(void *)(*a2 + 8);
    if (v29.u32[0] > 1uLL)
    {
      if (v49 >= v5) {
        v49 %= v5;
      }
    }
    else
    {
      v49 &= v5 - 1;
    }
    if (v49 != v48) {
      goto LABEL_91;
    }
  }
LABEL_92:
  ++*(void *)(a1 + 24);
}

void sub_19E49F894(void **__p)
{
  do
  {
    uint64_t v2 = (void **)*__p;
    uint64_t v3 = __p[5];
    if (v3)
    {
      do
      {
        unint64_t v4 = (void *)*v3;
        operator delete(v3);
        uint64_t v3 = v4;
      }
      while (v4);
    }
    unint64_t v5 = __p[3];
    __p[3] = 0;
    if (v5) {
      operator delete(v5);
    }
    operator delete(__p);
    long long __p = v2;
  }
  while (v2);
}

uint64_t sub_19E49F900(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    sub_19E3CEFD8(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
    sub_19E49FA34(a1, i[2], (_OWORD *)i + 1);
  return a1;
}

void sub_19E49FA1C(_Unwind_Exception *a1)
{
  sub_19E397D90(v1);
  _Unwind_Resume(a1);
}

void sub_19E49FA34(uint64_t a1, unint64_t a2, _OWORD *a3)
{
  unint64_t v5 = a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint64_t v9 = *(void **)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      unint64_t v10 = (void *)*v9;
      if (v10)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2) {
                return;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            unint64_t v10 = (void *)*v10;
            if (!v10) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2) {
              return;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          unint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  size_t v13 = operator new(0x20uLL);
  void *v13 = 0;
  v13[1] = v5;
  *((_OWORD *)v13 + 1) = *a3;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    unint64_t v5 = v3;
  }
  else
  {
    BOOL v16 = 1;
    if (v7 >= 3) {
      BOOL v16 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v7);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t prime = v18;
    }
    else {
      size_t prime = v17;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v7 = *(void *)(a1 + 8);
    }
    if (prime > v7) {
      goto LABEL_35;
    }
    if (prime < v7)
    {
      unint64_t v20 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (uint8x8_t v21 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v21.i16[0] = vaddlv_u8(v21), v21.u32[0] > 1uLL))
      {
        unint64_t v20 = std::__next_prime(v20);
      }
      else
      {
        uint64_t v22 = 1 << -(char)__clz(v20 - 1);
        if (v20 >= 2) {
          unint64_t v20 = v22;
        }
      }
      if (prime <= v20) {
        size_t prime = v20;
      }
      if (prime < v7) {
LABEL_35:
      }
        sub_19E3CEFD8(a1, prime);
    }
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v5) {
        v5 %= v7;
      }
    }
    else
    {
      v5 &= v7 - 1;
    }
  }
  uint64_t v23 = *(void *)a1;
  uint64_t v24 = *(void **)(*(void *)a1 + 8 * v5);
  if (v24)
  {
    void *v13 = *v24;
LABEL_58:
    *uint64_t v24 = v13;
    goto LABEL_59;
  }
  void *v13 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v13;
  *(void *)(v23 + 8 * v5) = a1 + 16;
  if (*v13)
  {
    unint64_t v25 = *(void *)(*v13 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v25 >= v7) {
        v25 %= v7;
      }
    }
    else
    {
      v25 &= v7 - 1;
    }
    uint64_t v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_58;
  }
LABEL_59:
  ++*(void *)(a1 + 24);
}

void sub_19E49FCF8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19E49FD0C(char a1, void *__p)
{
  if (a1)
  {
    unint64_t v3 = (void *)__p[5];
    if (v3)
    {
      do
      {
        unint64_t v5 = (void *)*v3;
        BOOL v6 = (void *)v3[5];
        if (v6)
        {
          do
          {
            unint64_t v7 = (void *)*v6;
            operator delete(v6);
            BOOL v6 = v7;
          }
          while (v7);
        }
        uint8x8_t v8 = (void *)v3[3];
        void v3[3] = 0;
        if (v8) {
          operator delete(v8);
        }
        operator delete(v3);
        unint64_t v3 = v5;
      }
      while (v5);
    }
    unint64_t v4 = (void *)__p[3];
    __p[3] = 0;
    if (v4) {
      operator delete(v4);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t sub_19E49FDC0(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      unint64_t v3 = (void *)v2[5];
      if (v3)
      {
        do
        {
          unint64_t v4 = (void *)*v3;
          operator delete(v3);
          unint64_t v3 = v4;
        }
        while (v4);
      }
      unint64_t v5 = (void *)v2[3];
      v2[3] = 0;
      if (v5) {
        operator delete(v5);
      }
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_19E49FE30(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, float a9, float a10)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  unint64_t v20 = *(const void **)a2;
  uint64_t v19 = *(void *)(a2 + 8);
  int64_t v21 = v19 - *(void *)a2;
  if (v19 != *(void *)a2)
  {
    if (v21 < 0) {
      sub_19E37C7C4();
    }
    uint64_t v22 = (char *)operator new(v19 - *(void *)a2);
    *(void *)a1 = v22;
    *(void *)(a1 + 8) = v22;
    uint64_t v23 = &v22[4 * (v21 >> 2)];
    *(void *)(a1 + 16) = v23;
    memcpy(v22, v20, v21);
    *(void *)(a1 + 8) = v23;
  }
  *(float *)(a1 + ++*(_DWORD *)(result + 24) = a9;
  *(float *)(a1 + 28) = a10;
  if (*((char *)a3 + 23) < 0)
  {
    sub_19E39369C((unsigned char *)(a1 + 32), *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v24 = *a3;
    *(void *)(a1 + 48) = *((void *)a3 + 2);
    *(_OWORD *)(a1 + 32) = v24;
  }
  sub_19E3C36C4(a1 + 56, a4);
  sub_19E444868((void *)(a1 + 240), a5);
  *(void *)(a1 + 264) = a6;
  *(_DWORD *)(a1 + 272) = a7;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 280) = 0;
  unint64_t v25 = *(const void **)a8;
  int64_t v26 = *(void *)(a8 + 8) - *(void *)a8;
  if (v26)
  {
    if (v26 < 0) {
      sub_19E37C7C4();
    }
    uint64_t v27 = (char *)operator new(v26);
    *(void *)(a1 + 280) = v27;
    *(void *)(a1 + 288) = v27;
    uint64_t v28 = &v27[4 * (v26 >> 2)];
    *(void *)(a1 + 296) = v28;
    memcpy(v27, v25, v26);
    *(void *)(a1 + 288) = v28;
  }
  if (a7 == 1)
  {
    if (*(float *)(a1 + 28) > 0.0001)
    {
      uint8x8_t v29 = "m_incompleteWordProb <= 1e-4";
      int v30 = 36;
LABEL_17:
      __assert_rtn("ToucanHypothesis", "ToucanHypothesis.cpp", v30, v29);
    }
  }
  else if (!a7 && *(float *)(a1 + 28) != 0.0)
  {
    uint8x8_t v29 = "m_incompleteWordProb == 0";
    int v30 = 33;
    goto LABEL_17;
  }
  return a1;
}

void sub_19E49FFF4(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

CFIndex sub_19E4A00D8(uint64_t a1)
{
  char v1 = *(unsigned char *)(a1 + 23);
  if (v1 >= 0) {
    uint64_t v2 = (const UInt8 *)a1;
  }
  else {
    uint64_t v2 = *(const UInt8 **)a1;
  }
  if (v2)
  {
    if (v1 >= 0) {
      CFIndex v3 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      CFIndex v3 = *(void *)(a1 + 8);
    }
    CFStringRef v4 = CFStringCreateWithBytes(0, v2, v3, 0x8000100u, 0);
    CFStringRef v10 = v4;
    if (!v4)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x19F3BD790](exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  else
  {
    CFStringRef v4 = 0;
    CFStringRef v10 = 0;
  }
  Boolean keyExistsAndHasValidFormat = 0;
  AppIntegerCFNumberRef Value = CFPreferencesGetAppIntegerValue(v4, @"com.apple.LanguageModeling", &keyExistsAndHasValidFormat);
  int v7 = keyExistsAndHasValidFormat;
  if (v4) {
    CFRelease(v4);
  }
  if (v7) {
    return AppIntegerValue;
  }
  else {
    return 0;
  }
}

void sub_19E4A01C4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19E4A01DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E3C6F1C((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E4A01F4(uint64_t *a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v4 = sub_19E4A0258(a1, a2, a3, &stru_1EF0BEFF0, a4);
  CFRelease(&stru_1EF0BEFF0);
  return v4;
}

void sub_19E4A0244(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E3DCC24((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E4A0258(uint64_t *a1, uint64_t a2, unint64_t a3, CFStringRef theString, unint64_t a5)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  if (!a3) {
    return 0;
  }
  if (a5)
  {
    if (a3 < a5) {
      return 0;
    }
    unint64_t v11 = a1 + 8;
    uint64_t v10 = a1[8];
    if (v10 == 3)
    {
      if (CFStringGetLength(theString) < 4) {
        return 0;
      }
      uint64_t v10 = *v11;
    }
    if (v10 != 5) {
      goto LABEL_11;
    }
  }
  else
  {
    unint64_t v11 = a1 + 8;
    if (a1[8] != 5) {
      return 0;
    }
  }
  if ((unint64_t)CFStringGetLength(theString) < 2) {
    return 0;
  }
LABEL_11:
  uint64_t v12 = (std::__shared_weak_count *)a1[5];
  if (v12)
  {
    size_t v13 = std::__shared_weak_count::lock(v12);
    size_t v37 = v13;
    if (v13)
    {
      uint64_t v14 = a1[4];
      uint64_t v36 = v14;
      if (v14)
      {
        CFMutableStringRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
        CFTypeRef cf = Mutable;
        if (a5)
        {
          uint64_t v16 = a2 + 4 * a3;
          uint64_t v17 = -(uint64_t)a5;
          do
          {
            (*(void (**)(void **__return_ptr, uint64_t, void))(*(void *)v14 + 32))(__p, v14, *(unsigned int *)(v16 + 4 * v17));
            CFStringRef v20 = sub_19E3C2A64((uint64_t)__p);
            v33[0] = (void *)v20;
            if (SHIBYTE(v40) < 0) {
              operator delete(__p[0]);
            }
            CFStringAppend(Mutable, v20);
            CFStringAppend(Mutable, @" ");
            if (v20) {
              CFRelease(v20);
            }
          }
          while (!__CFADD__(v17++, 1));
        }
        CFIndex Length = CFStringGetLength(Mutable);
        CFStringAppend(Mutable, theString);
        v33[0] = 0;
        v33[1] = 0;
        uint64_t v34 = 0;
        unint64_t v22 = a1[9];
        CFIndex v38 = Length;
        uint64_t v23 = (int8x8_t *)a1[2];
        int8x8_t v24 = v23[2];
        if (!*(void *)&v24) {
          goto LABEL_43;
        }
        uint8x8_t v25 = (uint8x8_t)vcnt_s8(v24);
        v25.i16[0] = vaddlv_u8(v25);
        if (v25.u32[0] > 1uLL)
        {
          unint64_t v26 = v22;
          if (*(void *)&v24 <= v22) {
            unint64_t v26 = v22 % *(void *)&v24;
          }
        }
        else
        {
          unint64_t v26 = (*(void *)&v24 - 1) & v22;
        }
        uint64_t v28 = *(void **)(*(void *)&v23[1] + 8 * v26);
        if (!v28) {
          goto LABEL_43;
        }
        uint8x8_t v29 = (void *)*v28;
        if (!v29) {
          goto LABEL_43;
        }
        if (v25.u32[0] < 2uLL)
        {
          uint64_t v30 = *(void *)&v24 - 1;
          while (1)
          {
            uint64_t v32 = v29[1];
            if (v32 == v22)
            {
              if (v29[2] == v22) {
                goto LABEL_45;
              }
            }
            else if ((v32 & v30) != v26)
            {
              goto LABEL_43;
            }
            uint8x8_t v29 = (void *)*v29;
            if (!v29) {
              goto LABEL_43;
            }
          }
        }
        while (1)
        {
          unint64_t v31 = v29[1];
          if (v31 == v22)
          {
            if (v29[2] == v22)
            {
LABEL_45:
              __p[0] = &unk_1EF0BDF58;
              __p[1] = &v38;
              uint64_t v40 = v33;
              unint64_t v41 = __p;
              sub_19E4D2198();
              if (v41 == __p)
              {
                (*((void (**)(void **))__p[0] + 4))(__p);
              }
              else if (v41)
              {
                (*((void (**)(void **))*v41 + 5))(v41);
              }
              if (v33[1] != v33[0]) {
LABEL_50:
              }
                operator new();
LABEL_43:
              if (*v11 == 3)
              {
                sub_19E4A096C(a1[2], (uint64_t)theString, (uint64_t)v33);
                operator new();
              }
              goto LABEL_50;
            }
          }
          else
          {
            if (v31 >= *(void *)&v24) {
              v31 %= *(void *)&v24;
            }
            if (v31 != v26) {
              goto LABEL_43;
            }
          }
          uint8x8_t v29 = (void *)*v29;
          if (!v29) {
            goto LABEL_43;
          }
        }
      }
      uint64_t v27 = v13;
      if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
  }
  return 0;
}

void sub_19E4A07E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, const void *a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
}

void *sub_19E4A08E8(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_19E4A096C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = 0;
  int8x8_t v3 = *(int8x8_t *)(result + 16);
  if (v3)
  {
    uint8x8_t v4 = (uint8x8_t)vcnt_s8(v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      uint64_t v5 = 3;
      if (*(void *)&v3 <= 3uLL) {
        uint64_t v5 = 3uLL % *(void *)&v3;
      }
    }
    else
    {
      uint64_t v5 = (v3.i8[0] - 1) & 3;
    }
    BOOL v6 = *(void **)(*(void *)(result + 8) + 8 * v5);
    if (v6)
    {
      int v7 = (void *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          uint64_t v8 = *(void *)&v3 - 1;
          while (1)
          {
            uint64_t v10 = v7[1];
            if (v10 == 3)
            {
              if (v7[2] == 3) {
                goto LABEL_22;
              }
            }
            else if ((v10 & v8) != v5)
            {
              return result;
            }
            int v7 = (void *)*v7;
            if (!v7) {
              return result;
            }
          }
        }
        do
        {
          unint64_t v9 = v7[1];
          if (v9 == 3)
          {
            if (v7[2] == 3)
            {
LABEL_22:
              v12[0] = &unk_1EF0BDF58;
              v12[1] = &v11;
              v12[2] = a3;
              size_t v13 = v12;
              sub_19E4D2198();
              uint64_t result = (uint64_t)v13;
              if (v13 == v12) {
                return (*(uint64_t (**)(void *))(v12[0] + 32))(v12);
              }
              if (v13) {
                return (*(uint64_t (**)(void *))(*v13 + 40))(v13);
              }
              return result;
            }
          }
          else
          {
            if (v9 >= *(void *)&v3) {
              v9 %= *(void *)&v3;
            }
            if (v9 != v5) {
              return result;
            }
          }
          int v7 = (void *)*v7;
        }
        while (v7);
      }
    }
  }
  return result;
}

void sub_19E4A0B28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E4A08E8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_19E4A0B3C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *a1 = &unk_1EF0BBEB8;
  a1[1] = a2;
  a1[2] = a3;
  if (a3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
  }
  v11.location = 0;
  v11.length = 0;
  a1[3] = CFStringTokenizerCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, v11, 0, 0);
  a1[4] = a6;
  a1[6] = 0;
  a1[7] = 0;
  a1[5] = 0;
  *(_OWORD *)(a1 + 5) = *(_OWORD *)a4;
  a1[7] = *(void *)(a4 + 16);
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  a1[9] = 0;
  a1[10] = 0;
  a1[11] = 0;
  a1[12] = 0xFFEFFFFFFFFFFFFFLL;
  a1[13] = a5;
  return a1;
}

void sub_19E4A0BFC(_Unwind_Exception *exception_object)
{
  int8x8_t v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void **sub_19E4A0C50(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    int8x8_t v3 = (char *)a1[1];
    uint8x8_t v4 = *a1;
    if (v3 != v2)
    {
      uint64_t v5 = (char *)a1[1];
      do
      {
        int v7 = (const void *)*((void *)v5 - 2);
        v5 -= 16;
        BOOL v6 = v7;
        if (v7) {
          CFRelease(v6);
        }
        *((void *)v3 - 2) = 0;
        int8x8_t v3 = v5;
      }
      while (v5 != v2);
      uint8x8_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_19E4A0CCC(void *a1, void *__dst, uint64_t a3)
{
  uint64_t v5 = (unsigned char *)a1[9];
  BOOL v6 = (unsigned char *)a1[10];
  if (v6 != v5) {
    memmove(__dst, v5, v6 - v5);
  }
  if (a3)
  {
    *(int64x2_t *)a3 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    *(void *)(a3 + 16) = 0;
    *(_WORD *)(a3 + ++*(_DWORD *)(result + 24) = 0;
    *(unsigned char *)(a3 + 32) = 1;
    *(_OWORD *)(a3 + 40) = xmmword_19E572FD0;
    *(_DWORD *)(a3 + 56) = 0;
    *(void *)(a3 + 88) = 0;
    *(void *)(a3 + 96) = 0;
    *(void *)(a3 + 104) = a1[13];
    *(_DWORD *)(a3 + 116) = 8;
    *(_OWORD *)(a3 + 64) = xmmword_19E572FD0;
    *(_OWORD *)(a3 + 80) = xmmword_19E573080;
    uint64_t v7 = a1[12];
    *(void *)a3 = v7;
    *(void *)(a3 + 80) = v7;
  }
  return (uint64_t)(a1[10] - a1[9]) >> 2;
}

uint64_t sub_19E4A0D70(void *a1)
{
  uint64_t v1 = a1[5];
  if (v1 == a1[6]) {
    return 0;
  }
  uint64_t v2 = a1;
  uint64_t v55 = (void **)(a1 + 9);
  CFAllocatorRef alloc = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  do
  {
    v2[10] = v2[9];
    uint8x8_t v4 = (__CFStringTokenizer *)v2[3];
    CFStringRef v5 = *(CFStringRef *)v1;
    v64.length = CFStringGetLength(*(CFStringRef *)v1);
    CFStringRef v6 = v5;
    uint64_t v2 = a1;
    v64.location = 0;
    CFStringTokenizerSetString(v4, v6, v64);
    while (CFStringTokenizerAdvanceToNextToken((CFStringTokenizerRef)v2[3]))
    {
      CFRange CurrentTokenRange = CFStringTokenizerGetCurrentTokenRange((CFStringTokenizerRef)v2[3]);
      CFStringRef v7 = CFStringCreateWithSubstring(alloc, *(CFStringRef *)v1, CurrentTokenRange);
      uint64_t v8 = (void *)(v2[1] + 24);
      do
      {
        uint64_t v8 = (void *)*v8;
        if (!v8)
        {
          int v13 = 1;
          if (!v7) {
            goto LABEL_7;
          }
          goto LABEL_40;
        }
        uint64_t v60 = 0;
        uint64_t v61 = &v60;
        int v63 = 0;
        uint64_t v62 = 0x2000000000;
        LXLexiconEnumerateEntriesForString();
        int v9 = *((_DWORD *)v61 + 6);
        _Block_object_dispose(&v60, 8);
      }
      while (!v9);
      CFRange v11 = (char *)v2[10];
      unint64_t v10 = v2[11];
      if ((unint64_t)v11 >= v10)
      {
        uint64_t v14 = (char *)*v55;
        uint64_t v15 = v11 - (unsigned char *)*v55;
        uint64_t v16 = v15 >> 2;
        unint64_t v17 = (v15 >> 2) + 1;
        if (v17 >> 62) {
          sub_19E37C7C4();
        }
        uint64_t v18 = v10 - (void)v14;
        if (v18 >> 1 > v17) {
          unint64_t v17 = v18 >> 1;
        }
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v19 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v19 = v17;
        }
        if (v19)
        {
          uint64_t v56 = v11 - (unsigned char *)*v55;
          if (v19 >> 62) {
            sub_19E37C2B8();
          }
          uint64_t v20 = v1;
          uint64_t v21 = v15 >> 2;
          unint64_t v22 = v19;
          uint64_t v23 = operator new(4 * v19);
          unint64_t v19 = v22;
          uint64_t v16 = v21;
          uint64_t v1 = v20;
          uint64_t v15 = v56;
        }
        else
        {
          uint64_t v23 = 0;
        }
        int8x8_t v24 = &v23[4 * v16];
        *int8x8_t v24 = v9;
        uint64_t v12 = v24 + 1;
        if (v11 != v14)
        {
          unint64_t v25 = v11 - 4 - v14;
          if (v25 < 0x2C) {
            goto LABEL_70;
          }
          if ((unint64_t)(v11 - &v23[v15]) < 0x20) {
            goto LABEL_70;
          }
          uint64_t v26 = (v25 >> 2) + 1;
          uint64_t v27 = &v23[4 * v16 - 16];
          uint64_t v28 = v11 - 16;
          uint64_t v29 = v26 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v30 = *(_OWORD *)v28;
            *(v27 - 1) = *((_OWORD *)v28 - 1);
            *uint64_t v27 = v30;
            v27 -= 2;
            v28 -= 32;
            v29 -= 8;
          }
          while (v29);
          v24 -= v26 & 0x7FFFFFFFFFFFFFF8;
          v11 -= 4 * (v26 & 0x7FFFFFFFFFFFFFF8);
          if (v26 != (v26 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_70:
            do
            {
              int v31 = *((_DWORD *)v11 - 1);
              v11 -= 4;
              *--int8x8_t v24 = v31;
            }
            while (v11 != v14);
          }
        }
        a1[9] = v24;
        a1[10] = v12;
        a1[11] = &v23[4 * v19];
        if (v14) {
          operator delete(v14);
        }
        uint64_t v2 = a1;
      }
      else
      {
        *(_DWORD *)CFRange v11 = v9;
        uint64_t v12 = v11 + 4;
      }
      v2[10] = v12;
      if (v2[4] <= (unint64_t)(((uint64_t)v12 - v2[9]) >> 2)) {
        int v13 = 3;
      }
      else {
        int v13 = 0;
      }
      if (v7) {
LABEL_40:
      }
        CFRelease(v7);
LABEL_7:
      if (v13)
      {
        if (v13 == 1)
        {
          uint64_t v32 = 0;
          goto LABEL_44;
        }
        break;
      }
    }
    v2[12] = *(void *)(v1 + 8);
    uint64_t v32 = 1;
LABEL_44:
    BOOL v33 = (CFTypeRef *)v2[5];
    uint64_t v34 = v2[6];
    uint64_t v35 = v34 - (void)v33;
    if (v34 - (uint64_t)v33 >= 17)
    {
      uint64_t v57 = v2[6];
      unsigned int v54 = v32;
      uint64_t v36 = 0;
      uint64_t v37 = v35 >> 4;
      uint64_t v52 = v2[5];
      CFTypeRef v53 = *v33;
      CFTypeRef *v33 = 0;
      CFTypeRef v38 = v33[1];
      int64_t v39 = (unint64_t)((v35 >> 4) - 2) >> 1;
      uint64_t v40 = v33;
      do
      {
        unint64_t v41 = (double *)&v40[2 * v36 + 2];
        uint64_t v42 = 2 * v36;
        uint64_t v36 = (2 * v36) | 1;
        uint64_t v43 = v42 + 2;
        if (v43 < v37 && v41[1] < v41[3])
        {
          v41 += 2;
          uint64_t v36 = v43;
        }
        CFTypeRef v44 = *(CFTypeRef *)v41;
        *unint64_t v41 = 0.0;
        if (*v40) {
          CFRelease(*v40);
        }
        *uint64_t v40 = v44;
        v40[1] = (CFTypeRef)*((void *)v41 + 1);
        uint64_t v40 = (CFTypeRef *)v41;
      }
      while (v36 <= v39);
      int v45 = (uint64_t *)(v57 - 16);
      if (v41 == (double *)(v57 - 16))
      {
        uint64_t v2 = a1;
        if (*(void *)v41) {
          CFRelease(*(CFTypeRef *)v41);
        }
        *(void *)unint64_t v41 = v53;
        *((void *)v41 + 1) = v38;
      }
      else
      {
        uint64_t v46 = *v45;
        *int v45 = 0;
        uint64_t v2 = a1;
        if (*(void *)v41) {
          CFRelease(*(CFTypeRef *)v41);
        }
        *(void *)unint64_t v41 = v46;
        v41[1] = *(double *)(v57 - 8);
        unint64_t v47 = *(const void **)(v57 - 16);
        if (v47) {
          CFRelease(v47);
        }
        *(void *)(v57 - 16) = v53;
        *(void *)(v57 - 8) = v38;
        sub_19E4A1254(v52, (uint64_t)(v41 + 2), ((uint64_t)v41 - v52 + 16) >> 4);
      }
      uint64_t v32 = v54;
      uint64_t v34 = v2[6];
    }
    unint64_t v50 = *(const void **)(v34 - 16);
    unint64_t v49 = (void *)(v34 - 16);
    unint64_t v48 = v50;
    if (v50) {
      CFRelease(v48);
    }
    *unint64_t v49 = 0;
    v2[6] = v49;
    uint64_t v1 = v2[5];
    char v3 = v32 ^ 1;
    if ((void *)v1 == v49) {
      char v3 = 0;
    }
  }
  while ((v3 & 1) != 0);
  return v32;
}

void sub_19E4A1220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_19E3DCC24((const void **)va);
  _Unwind_Resume(a1);
}

void sub_19E4A1254(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 >= 2)
  {
    unint64_t v4 = (unint64_t)(a3 - 2) >> 1;
    double v5 = *(double *)(a1 + 16 * v4 + 8);
    double v6 = *(double *)(a2 - 8);
    if (v5 < v6)
    {
      CFStringRef v7 = (CFTypeRef *)(a2 - 16);
      uint64_t v8 = *(const void **)(a2 - 16);
      *(void *)(a2 - 16) = 0;
      do
      {
        unint64_t v9 = v4;
        unint64_t v10 = (CFTypeRef *)(a1 + 16 * v4);
        CFTypeRef v11 = *v10;
        *unint64_t v10 = 0;
        if (*v7)
        {
          CFRelease(*v7);
          double v5 = *(double *)(a1 + 16 * v9 + 8);
        }
        CFTypeRef *v7 = v11;
        *((double *)v7 + 1) = v5;
        if (!v9) {
          break;
        }
        unint64_t v4 = (v9 - 1) >> 1;
        double v5 = *(double *)(a1 + 16 * v4 + 8);
        CFStringRef v7 = v10;
      }
      while (v5 < v6);
      if (*v10) {
        CFRelease(*v10);
      }
      *unint64_t v10 = v8;
      *(double *)(a1 + 16 * v9 + 8) = v6;
    }
  }
}

void sub_19E4A1324(void *a1)
{
  sub_19E4A135C(a1);
  JUMPOUT(0x19F3BDCF0);
}

void *sub_19E4A135C(void *a1)
{
  *a1 = &unk_1EF0BBEB8;
  uint64_t v2 = (void *)a1[9];
  if (v2)
  {
    a1[10] = v2;
    operator delete(v2);
  }
  uint64_t v3 = a1[5];
  if (v3)
  {
    uint64_t v4 = a1[6];
    double v5 = (void *)a1[5];
    if (v4 != v3)
    {
      uint64_t v6 = a1[6];
      do
      {
        uint64_t v8 = *(const void **)(v6 - 16);
        v6 -= 16;
        CFStringRef v7 = v8;
        if (v8) {
          CFRelease(v7);
        }
        *(void *)(v4 - 16) = 0;
        uint64_t v4 = v6;
      }
      while (v6 != v3);
      double v5 = (void *)a1[5];
    }
    a1[6] = v3;
    operator delete(v5);
  }
  unint64_t v9 = (const void *)a1[3];
  if (v9) {
    CFRelease(v9);
  }
  a1[3] = 0;
  unint64_t v10 = (std::__shared_weak_count *)a1[2];
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  return a1;
}

void *sub_19E4A1464()
{
  return &unk_1EF0B8308;
}

uint64_t sub_19E4A1470(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZNK2LM22TransientLanguageModel26insertPredictionsForPrefixEPK10__CFStringlRNSt3__114priority_queueI"
                     "NS_13TransientItemENS4_6vectorIS6_NS4_9allocatorIS6_EEEENS_17TransientItemLessEEE13LMLexiconTypeE3$_0"
    || ((v3 & (unint64_t)"ZNK2LM22TransientLanguageModel26insertPredictionsForPrefixEPK10__CFStringlRNSt3__114prio"
                                "rity_queueINS_13TransientItemENS4_6vectorIS6_NS4_9allocatorIS6_EEEENS_17TransientItemLes"
                                "sEEE13LMLexiconTypeE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZNK2LM22TransientLanguageModel26insertPredictionsForPrefixEPK10__CFStringlRNSt3__114priority_queueINS_13TransientItemENS4_6vectorIS6_NS4_9allocatorIS6_EEEENS_17TransientItemLessEEE13LMLexiconTypeE3$_0")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK2LM22TransientLanguageModel26insertPredictionsForPrefixEPK10__CFStringlRNSt3__114priority_queueINS_13TransientItemENS4_6vectorIS6_NS4_9allocatorIS6_EEEENS_17TransientItemLessEEE13LMLexiconTypeE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void sub_19E4A14C8(uint64_t a1, CFStringRef *a2, const void **a3)
{
  CFStringRef v4 = *a2;
  double v5 = *a3;
  CFIndex Length = CFStringGetLength(*a2);
  v7.location = **(void **)(a1 + 8);
  if (Length - v7.location >= 1)
  {
    v7.length = Length - v7.location;
    CFStringRef v8 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v4, v7);
    if (v8)
    {
      CFStringRef v9 = v8;
      if (!CFStringGetLength(v8))
      {
LABEL_30:
        CFRelease(v9);
        return;
      }
      unint64_t v10 = *(uint64_t **)(a1 + 16);
      CFTypeRef v11 = (CFTypeRef *)v10[1];
      unint64_t v12 = v10[2];
      if ((unint64_t)v11 < v12)
      {
        *CFTypeRef v11 = CFRetain(v9);
        v11[1] = v5;
        uint64_t v13 = (uint64_t)(v11 + 2);
        v10[1] = (uint64_t)(v11 + 2);
LABEL_29:
        v10[1] = v13;
        sub_19E4A1254(*v10, v13, (v13 - *v10) >> 4);
        goto LABEL_30;
      }
      uint64_t v14 = (uint64_t)v11 - *v10;
      unint64_t v15 = (v14 >> 4) + 1;
      if (v15 >> 60) {
        sub_19E37C7C4();
      }
      uint64_t v16 = v12 - *v10;
      uint64_t v17 = v16 >> 3;
      if (v16 >> 3 <= v15) {
        uint64_t v17 = (v14 >> 4) + 1;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v18 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v18 = v17;
      }
      if (v18)
      {
        if (v18 >> 60) {
          sub_19E37C2B8();
        }
        unint64_t v19 = (char *)operator new(16 * v18);
      }
      else
      {
        unint64_t v19 = 0;
      }
      uint64_t v20 = (CFTypeRef *)&v19[16 * (v14 >> 4)];
      uint64_t v21 = &v19[16 * v18];
      *uint64_t v20 = CFRetain(v9);
      uint64_t v13 = (uint64_t)(v20 + 2);
      v20[1] = v5;
      unint64_t v41 = v20 + 2;
      uint64_t v22 = *v10;
      uint64_t v23 = (void *)v10[1];
      if (v23 == (void *)*v10)
      {
        *unint64_t v10 = (uint64_t)v20;
        v10[1] = v13;
        v10[2] = (uint64_t)v21;
LABEL_27:
        if (v23) {
          operator delete(v23);
        }
        goto LABEL_29;
      }
      unint64_t v24 = (unint64_t)v23 - *v10 - 16;
      if (v24 >= 0x110)
      {
        int v31 = (char *)v23 - (v24 & 0xFFFFFFFFFFFFFFF0);
        unint64_t v32 = (unint64_t)(v31 - 16);
        unint64_t v33 = (unint64_t)(v31 - 8);
        BOOL v34 = &v19[v14 - 8 - (v24 & 0xFFFFFFFFFFFFFFF0)] >= (char *)v23 || v33 >= (unint64_t)v20;
        BOOL v35 = !v34;
        BOOL v36 = &v19[v14 - (v24 & 0xFFFFFFFFFFFFFFF0) - 16] >= (char *)v23 - 8 || v32 >= (unint64_t)&v19[v14 - 8];
        if (v36 && !v35)
        {
          uint64_t v37 = (v24 >> 4) + 1;
          unint64_t v25 = &v20[-2 * (v37 & 0x1FFFFFFFFFFFFFFELL)];
          CFTypeRef v38 = (double *)(v20 - 4);
          int64_t v39 = (const double *)(v23 - 4);
          uint64_t v40 = v37 & 0x1FFFFFFFFFFFFFFELL;
          do
          {
            float64x2x2_t v42 = vld2q_f64(v39);
            v39[2] = 0.0;
            *int64_t v39 = 0.0;
            v39 -= 4;
            vst2q_f64(v38, v42);
            v38 -= 4;
            v40 -= 2;
          }
          while (v40);
          if (v37 == (v37 & 0x1FFFFFFFFFFFFFFELL))
          {
LABEL_21:
            uint64_t v23 = (void *)*v10;
            uint64_t v27 = (void *)v10[1];
            *unint64_t v10 = (uint64_t)v25;
            v10[1] = v13;
            v10[2] = (uint64_t)v21;
            if (v27 != v23)
            {
              uint64_t v28 = v27;
              do
              {
                long long v30 = (const void *)*(v28 - 2);
                v28 -= 2;
                uint64_t v29 = v30;
                if (v30) {
                  CFRelease(v29);
                }
                *(v27 - 2) = 0;
                uint64_t v27 = v28;
              }
              while (v28 != v23);
            }
            goto LABEL_27;
          }
          v23 -= 2 * (v37 & 0x1FFFFFFFFFFFFFFELL);
          v20 -= 2 * (v37 & 0x1FFFFFFFFFFFFFFELL);
        }
      }
      unint64_t v25 = v20;
      do
      {
        uint64_t v26 = (const void *)*(v23 - 2);
        v23 -= 2;
        *uint64_t v23 = 0;
        *(v25 - 2) = v26;
        v25 -= 2;
        v25[1] = (CFTypeRef)v23[1];
      }
      while (v23 != (void *)v22);
      uint64_t v13 = (uint64_t)v41;
      goto LABEL_21;
    }
  }
}

void sub_19E4A176C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E4A17A8((uint64_t)va);
  CFRelease(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_19E4A17A8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  unint64_t v3 = *(void **)(a1 + 16);
  if (v3 != v2)
  {
    do
    {
      CFRange v7 = (const void *)*(v3 - 2);
      uint64_t v6 = v3 - 2;
      double v5 = v7;
      *(void *)(a1 + 16) = v6;
      CFStringRef v8 = v6;
      if (v7)
      {
        CFRelease(v5);
        CFStringRef v8 = *(void **)(a1 + 16);
      }
      *uint64_t v6 = 0;
      unint64_t v3 = v8;
    }
    while (v8 != v2);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

__n128 sub_19E4A1824(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF0BDF58;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 sub_19E4A184C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF0BDF58;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void sub_19E4A1898()
{
}

BOOL sub_19E4A18B0(void *a1, int a2, uint64_t a3, uint64_t a4, double *a5)
{
  if ((a2 & 0x80000000) == 0) {
    return 0;
  }
  CFStringRef v8 = (int8x8_t *)a1[2];
  int8x8_t v9 = v8[2];
  if (!*(void *)&v9) {
    return 0;
  }
  unint64_t v11 = a1[8];
  uint8x8_t v12 = (uint8x8_t)vcnt_s8(v9);
  v12.i16[0] = vaddlv_u8(v12);
  if (v12.u32[0] > 1uLL)
  {
    unint64_t v13 = a1[8];
    if (*(void *)&v9 <= v11) {
      unint64_t v13 = v11 % *(void *)&v9;
    }
  }
  else
  {
    unint64_t v13 = (*(void *)&v9 - 1) & v11;
  }
  uint64_t v14 = *(void **)(*(void *)&v8[1] + 8 * v13);
  if (!v14) {
    return 0;
  }
  unint64_t v15 = (void *)*v14;
  if (!v15) {
    return 0;
  }
  if (v12.u32[0] < 2uLL)
  {
    uint64_t v16 = *(void *)&v9 - 1;
    while (1)
    {
      uint64_t v18 = v15[1];
      if (v18 == v11)
      {
        if (v15[2] == v11) {
          goto LABEL_25;
        }
      }
      else if ((v18 & v16) != v13)
      {
        return 0;
      }
      BOOL v5 = 0;
      unint64_t v15 = (void *)*v15;
      if (!v15) {
        return v5;
      }
    }
  }
  while (1)
  {
    unint64_t v17 = v15[1];
    if (v17 == v11) {
      break;
    }
    if (v17 >= *(void *)&v9) {
      v17 %= *(void *)&v9;
    }
    if (v17 != v13) {
      return 0;
    }
LABEL_14:
    BOOL v5 = 0;
    unint64_t v15 = (void *)*v15;
    if (!v15) {
      return v5;
    }
  }
  if (v15[2] != v11) {
    goto LABEL_14;
  }
LABEL_25:
  uint64_t v19 = LXLexiconCopyEntryForTokenID();
  if (!v19) {
    return 0;
  }
  uint64_t v20 = (const void *)v19;
  Usageunint64_t Count = LXEntryGetUsageCount();
  BOOL v5 = UsageCount != 0;
  if (UsageCount)
  {
    LXEntryGetProbability();
    *a5 = *(double *)(a1[6] + 464) + v22;
  }
  CFRelease(v20);
  return v5;
}

void sub_19E4A1A18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E420F7C((const void **)va);
  _Unwind_Resume(a1);
}

void sub_19E4A1A34(void *a1)
{
  *a1 = &unk_1EF0BB620;
  uint64_t v2 = (std::__shared_weak_count *)a1[7];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    unint64_t v3 = (std::__shared_weak_count *)a1[5];
    if (!v3) {
      goto LABEL_5;
    }
  }
  else
  {
    unint64_t v3 = (std::__shared_weak_count *)a1[5];
    if (!v3)
    {
LABEL_5:
      CFStringRef v4 = (std::__shared_weak_count *)a1[3];
      if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
      JUMPOUT(0x19F3BDCF0);
    }
  }
  std::__shared_weak_count::__release_weak(v3);
  goto LABEL_5;
}

void *sub_19E4A1B3C(void *a1)
{
  *a1 = &unk_1EF0BB620;
  uint64_t v2 = (std::__shared_weak_count *)a1[7];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    unint64_t v3 = (std::__shared_weak_count *)a1[5];
    if (!v3) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  unint64_t v3 = (std::__shared_weak_count *)a1[5];
  if (v3) {
LABEL_4:
  }
    std::__shared_weak_count::__release_weak(v3);
LABEL_5:
  CFStringRef v4 = (std::__shared_weak_count *)a1[3];
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

uint64_t sub_19E4A1C28(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN2LM16TransientLexiconEEE"
    || ((v3 & (unint64_t)"NSt3__114default_deleteIN2LM16TransientLexiconEEE" & 0x8000000000000000) != 0) != __OFSUB__(v3, "NSt3__114default_deleteIN2LM16TransientLexiconEEE")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN2LM16TransientLexiconEEE" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_19E4A1C80(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void sub_19E4A1CB0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19F3BDCF0);
}

void sub_19E4A1CEC(uint64_t a1, const void *a2, unint64_t a3)
{
  uint64_t v6 = (void **)(a1 + 8);
  sub_19E4D07A0((uint64_t *)(a1 + 8), a3);
  CFRange v7 = operator new(0x28uLL);
  void *v7 = 0;
  v7[1] = 0;
  v7[2] = a3;
  CFTypeRef v8 = CFRetain(a2);
  void v7[3] = v8;
  *((_DWORD *)v7 + 8) = 3;
  unint64_t v9 = v7[2];
  v7[1] = v9;
  unint64_t v10 = *(void *)(a1 + 16);
  if (!v10) {
    goto LABEL_21;
  }
  uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
  v11.i16[0] = vaddlv_u8(v11);
  if (v11.u32[0] > 1uLL)
  {
    unint64_t v12 = v9;
    if (v10 <= v9) {
      unint64_t v12 = v9 % v10;
    }
  }
  else
  {
    unint64_t v12 = (v10 - 1) & v9;
  }
  unint64_t v13 = (void *)*((void *)*v6 + v12);
  if (!v13 || (uint64_t v14 = (void *)*v13) == 0)
  {
LABEL_21:
    unint64_t v17 = (void *)(a1 + 24);
    float v18 = (float)(unint64_t)(*(void *)(a1 + 32) + 1);
    float v19 = *(float *)(a1 + 40);
    if (!v10 || (float)(v19 * (float)v10) < v18)
    {
      BOOL v20 = 1;
      if (v10 >= 3) {
        BOOL v20 = (v10 & (v10 - 1)) != 0;
      }
      unint64_t v21 = v20 | (2 * v10);
      unint64_t v22 = vcvtps_u32_f32(v18 / v19);
      if (v21 <= v22) {
        size_t prime = v22;
      }
      else {
        size_t prime = v21;
      }
      if (prime == 1)
      {
        size_t prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        size_t prime = std::__next_prime(prime);
        unint64_t v10 = *(void *)(a1 + 16);
      }
      if (prime > v10) {
        goto LABEL_33;
      }
      if (prime >= v10) {
        goto LABEL_58;
      }
      unint64_t v34 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 32) / *(float *)(a1 + 40));
      if (v10 < 3 || (uint8x8_t v35 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v35.i16[0] = vaddlv_u8(v35), v35.u32[0] > 1uLL))
      {
        unint64_t v34 = std::__next_prime(v34);
      }
      else
      {
        uint64_t v36 = 1 << -(char)__clz(v34 - 1);
        if (v34 >= 2) {
          unint64_t v34 = v36;
        }
      }
      if (prime <= v34) {
        size_t prime = v34;
      }
      if (prime >= v10)
      {
        unint64_t v10 = *(void *)(a1 + 16);
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (prime >> 61) {
            sub_19E37C2B8();
          }
          unint64_t v24 = operator new(8 * prime);
          unint64_t v25 = *v6;
          *uint64_t v6 = v24;
          if (v25) {
            operator delete(v25);
          }
          uint64_t v26 = 0;
          *(void *)(a1 + 16) = prime;
          do
            *((void *)*v6 + v26++) = 0;
          while (prime != v26);
          uint64_t v27 = (void *)*v17;
          if (!*v17) {
            goto LABEL_57;
          }
          size_t v28 = v27[1];
          size_t v29 = prime - 1;
          if ((prime & (prime - 1)) == 0)
          {
            size_t v30 = v28 & v29;
            *((void *)*v6 + v30) = v17;
            for (uint64_t i = (void *)*v27; *v27; uint64_t i = (void *)*v27)
            {
              size_t v32 = i[1] & v29;
              if (v32 == v30)
              {
                uint64_t v27 = i;
              }
              else if (*((void *)*v6 + v32))
              {
                *uint64_t v27 = *i;
                uint64_t v33 = 8 * v32;
                void *i = **(void **)((char *)*v6 + v33);
                **(void **)((char *)*v6 + v33) = i;
              }
              else
              {
                *((void *)*v6 + v32) = v27;
                uint64_t v27 = i;
                size_t v30 = v32;
              }
            }
LABEL_57:
            unint64_t v10 = prime;
            goto LABEL_58;
          }
          if (v28 >= prime) {
            v28 %= prime;
          }
          *((void *)*v6 + v28) = v17;
          uint64_t v37 = (void *)*v27;
          if (!*v27) {
            goto LABEL_57;
          }
          while (1)
          {
            size_t v41 = v37[1];
            if (v41 >= prime) {
              v41 %= prime;
            }
            if (v41 != v28)
            {
              if (!*((void *)*v6 + v41))
              {
                *((void *)*v6 + v41) = v27;
                goto LABEL_62;
              }
              *uint64_t v27 = *v37;
              uint64_t v40 = 8 * v41;
              void *v37 = **(void **)((char *)*v6 + v40);
              **(void **)((char *)*v6 + v40) = v37;
              uint64_t v37 = v27;
            }
            size_t v41 = v28;
LABEL_62:
            uint64_t v27 = v37;
            uint64_t v37 = (void *)*v37;
            size_t v28 = v41;
            if (!v37) {
              goto LABEL_57;
            }
          }
        }
        int v45 = *v6;
        *uint64_t v6 = 0;
        if (v45) {
          operator delete(v45);
        }
        unint64_t v10 = 0;
        *(void *)(a1 + 16) = 0;
      }
    }
LABEL_58:
    unint64_t v38 = v7[1];
    uint8x8_t v39 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v39.i16[0] = vaddlv_u8(v39);
    if (v39.u32[0] > 1uLL)
    {
      if (v38 >= v10) {
        v38 %= v10;
      }
    }
    else
    {
      v38 &= v10 - 1;
    }
    float64x2x2_t v42 = *v6;
    uint64_t v43 = (void *)*((void *)*v6 + v38);
    if (v43)
    {
      void *v7 = *v43;
    }
    else
    {
      void *v7 = *v17;
      void *v17 = v7;
      v42[v38] = v17;
      if (!*v7)
      {
LABEL_79:
        ++*(void *)(a1 + 32);
        return;
      }
      unint64_t v44 = *(void *)(*v7 + 8);
      if (v39.u32[0] > 1uLL)
      {
        if (v44 >= v10) {
          v44 %= v10;
        }
      }
      else
      {
        v44 &= v10 - 1;
      }
      uint64_t v43 = (char *)*v6 + 8 * v44;
    }
    *uint64_t v43 = v7;
    goto LABEL_79;
  }
  if (v11.u32[0] < 2uLL)
  {
    while (1)
    {
      uint64_t v16 = v14[1];
      if (v16 == v9)
      {
        if (v14[2] == v9) {
          goto LABEL_80;
        }
      }
      else if ((v16 & (v10 - 1)) != v12)
      {
        goto LABEL_21;
      }
      uint64_t v14 = (void *)*v14;
      if (!v14) {
        goto LABEL_21;
      }
    }
  }
  while (1)
  {
    unint64_t v15 = v14[1];
    if (v15 == v9) {
      break;
    }
    if (v15 >= v10) {
      v15 %= v10;
    }
    if (v15 != v12) {
      goto LABEL_21;
    }
LABEL_11:
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      goto LABEL_21;
    }
  }
  if (v14[2] != v9) {
    goto LABEL_11;
  }
LABEL_80:
  if (v8) {
    CFRelease(v8);
  }
  operator delete(v7);
}

void sub_19E4A217C(_Unwind_Exception *a1)
{
  unint64_t v3 = (const void *)v1[3];
  if (v3) {
    CFRelease(v3);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19E4A21A8(void *a1)
{
  uint64_t v1 = (int8x8_t *)a1[2];
  int8x8_t v2 = v1[2];
  if (v2)
  {
    unint64_t v3 = a1[8];
    uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      unint64_t v5 = a1[8];
      if (*(void *)&v2 <= v3) {
        unint64_t v5 = v3 % *(void *)&v2;
      }
    }
    else
    {
      unint64_t v5 = (*(void *)&v2 - 1) & v3;
    }
    uint64_t v6 = *(void **)(*(void *)&v1[1] + 8 * v5);
    if (v6)
    {
      CFRange v7 = (void *)*v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v9 = v7[1];
            if (v9 == v3)
            {
              if (v7[2] == v3) {
                return 1;
              }
            }
            else if ((v9 & (*(void *)&v2 - 1)) != v5)
            {
              goto LABEL_22;
            }
            CFRange v7 = (void *)*v7;
            if (!v7) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v8 = v7[1];
          if (v8 == v3)
          {
            if (v7[2] == v3) {
              return 1;
            }
          }
          else
          {
            if (v8 >= *(void *)&v2) {
              v8 %= *(void *)&v2;
            }
            if (v8 != v5) {
              break;
            }
          }
          CFRange v7 = (void *)*v7;
        }
        while (v7);
      }
    }
LABEL_22:
    unint64_t v10 = a1[9];
    uint8x8_t v11 = (uint8x8_t)vcnt_s8(v2);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v12 = a1[9];
      if (*(void *)&v2 <= v10) {
        unint64_t v12 = v10 % *(void *)&v2;
      }
    }
    else
    {
      unint64_t v12 = (*(void *)&v2 - 1) & v10;
    }
    unint64_t v13 = *(void **)(*(void *)&v1[1] + 8 * v12);
    if (v13)
    {
      uint64_t v14 = (void *)*v13;
      if (v14)
      {
        if (v11.u32[0] < 2uLL)
        {
          uint64_t v15 = *(void *)&v2 - 1;
          while (1)
          {
            uint64_t v17 = v14[1];
            if (v17 == v10)
            {
              if (v14[2] == v10) {
                return 1;
              }
            }
            else if ((v17 & v15) != v12)
            {
              return 0;
            }
            uint64_t v14 = (void *)*v14;
            if (!v14) {
              return 0;
            }
          }
        }
        do
        {
          unint64_t v16 = v14[1];
          if (v16 == v10)
          {
            if (v14[2] == v10) {
              return 1;
            }
          }
          else
          {
            if (v16 >= *(void *)&v2) {
              v16 %= *(void *)&v2;
            }
            if (v16 != v12) {
              return 0;
            }
          }
          uint64_t v14 = (void *)*v14;
        }
        while (v14);
      }
    }
  }
  return 0;
}

uint64_t sub_19E4A2368(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  unint64_t v5 = (void *)(a1 + 112);
  if (a4)
  {
    uint64_t v6 = *(void **)(a1 + 48);
    uint64_t v7 = *(void *)(a1 + 32);
    int v8 = *(_DWORD *)(a1 + 80);
    *(void *)(a1 + 120) = *(void *)(a1 + 112);
    if (a3)
    {
      uint64_t v9 = a2;
      if (v6)
      {
        unint64_t v10 = &a2[a3];
        do
        {
          uint64_t v12 = *v9;
          uint64_t v14 = (void *)v6[10];
          unint64_t v13 = (void *)v6[11];
          if (v14 == v13)
          {
LABEL_10:
            unint64_t v16 = (char *)v6[4];
            uint64_t v17 = (char *)v6[5];
            if (v17 != v16)
            {
              unint64_t v18 = (v17 - v16) >> 3;
              do
              {
                unint64_t v19 = v18 >> 1;
                BOOL v20 = (unsigned int *)&v16[8 * (v18 >> 1)];
                unsigned int v22 = *v20;
                unint64_t v21 = (char *)(v20 + 2);
                v18 += ~(v18 >> 1);
                if (v22 < v12) {
                  unint64_t v16 = v21;
                }
                else {
                  unint64_t v18 = v19;
                }
              }
              while (v18);
            }
            if (v16 != v17 && *(_DWORD *)v16 == v12) {
              uint64_t v12 = *((unsigned int *)v16 + 1);
            }
          }
          else
          {
            while (1)
            {
              uint64_t v15 = *v14;
              if ((*(unsigned int (**)(void, uint64_t))(*(void *)*v14 + 112))(*v14, v12)) {
                break;
              }
              if (++v14 == v13) {
                goto LABEL_10;
              }
            }
            uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v15 + 88))(v15, v12);
            uint64_t v12 = sub_19E5307F0(v11);
          }
          sub_19E4A2BA8(v12, (uint64_t)v5, v7, v8);
          ++v9;
        }
        while (v9 != v10);
      }
      else
      {
        uint64_t v26 = 4 * a3;
        do
        {
          unsigned int v27 = *v9++;
          sub_19E4A2BA8(v27, (uint64_t)v5, v7, v8);
          v26 -= 4;
        }
        while (v26);
      }
    }
  }
  else
  {
    uint64_t v23 = *(_DWORD **)(a1 + 128);
    unint64_t v24 = *(_DWORD **)(a1 + 112);
    if (v23 == v24)
    {
      if (v23)
      {
        *(void *)(a1 + 120) = v23;
        operator delete(v23);
        *unint64_t v5 = 0;
        v5[1] = 0;
        v5[2] = 0;
      }
      unint64_t v24 = operator new(4uLL);
      *(void *)(a1 + 120) = v24;
      unint64_t v25 = (void *)(a1 + 120);
      *(v25 - 1) = v24;
      v25[1] = v24 + 1;
    }
    else
    {
      unint64_t v25 = (void *)(a1 + 120);
    }
    *unint64_t v24 = 1;
    void *v25 = v24 + 1;
  }
  if (*(void *)(a1 + 112) != *(void *)(a1 + 120))
  {
    unsigned int v28 = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
    if (v28 < 2) {
      operator new();
    }
    if (v28 == 2) {
      operator new();
    }
    if (qword_1E945A1E0 != -1) {
      dispatch_once(&qword_1E945A1E0, &unk_1EF0BECF0);
    }
    size_t v30 = qword_1E945A1D8;
    if (os_log_type_enabled((os_log_t)qword_1E945A1D8, OS_LOG_TYPE_ERROR))
    {
      int v31 = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32));
      *(_DWORD *)std::string buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v31;
      _os_log_error_impl(&dword_19E36B000, v30, OS_LOG_TYPE_ERROR, "unknown montreal model type in instance of MontrealTokenIDMapper: %d", buf, 8u);
    }
    __assert_rtn("createPredictionEnumerator", "NeuralLanguageModelAdapter.cpp", 189, "false");
  }
  return 0;
}

void sub_19E4A29F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_19E3D73EC((uint64_t)va);
  MEMORY[0x19F3BDCF0](v11, 0x10A1C405897D53FLL);
  _Unwind_Resume(a1);
}

void sub_19E4A2BA8(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v6 = a1;
  v96[1] = *MEMORY[0x1E4F143B8];
  unsigned int v7 = a1 - 12;
  uint64_t v8 = a1;
  if ((a1 - 12) <= 0x1E)
  {
    uint64_t v8 = a1;
    if ((0x515B8843u >> v7)) {
      uint64_t v8 = dword_19E579C74[v7];
    }
  }
  if (a4 || (v8 - 4) > 0x3D || ((1 << (v8 - 4)) & 0x380000400000020FLL) == 0)
  {
    if (!(*(unsigned int (**)(uint64_t))(*(void *)a3 + 16))(a3)
      || (*(unsigned int (**)(uint64_t))(*(void *)a3 + 16))(a3) == 1)
    {
      if (v6 > 1)
      {
        if (v6 == 2)
        {
          unint64_t v10 = *(int **)(a2 + 8);
          unint64_t v46 = *(void *)(a2 + 16);
          if ((unint64_t)v10 < v46)
          {
            int v11 = 2;
            goto LABEL_63;
          }
          unint64_t v13 = *(char **)a2;
          uint64_t v59 = (uint64_t)v10 - *(void *)a2;
          uint64_t v60 = v59 >> 2;
          unint64_t v61 = (v59 >> 2) + 1;
          if (!(v61 >> 62))
          {
            uint64_t v62 = v46 - (void)v13;
            if (v62 >> 1 > v61) {
              unint64_t v61 = v62 >> 1;
            }
            if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v63 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v63 = v61;
            }
            if (v63)
            {
              if (v63 >> 62) {
                goto LABEL_133;
              }
              CFRange v64 = operator new(4 * v63);
            }
            else
            {
              CFRange v64 = 0;
            }
            unint64_t v65 = &v64[4 * v60];
            int v66 = &v64[4 * v63];
            *unint64_t v65 = 2;
            uint64_t v67 = v65 + 1;
            if (v10 != (int *)v13)
            {
              unint64_t v89 = (char *)v10 - v13 - 4;
              if (v89 < 0x2C) {
                goto LABEL_136;
              }
              if ((unint64_t)((char *)v10 - &v64[v59]) < 0x20) {
                goto LABEL_136;
              }
              uint64_t v90 = (v89 >> 2) + 1;
              size_t v91 = &v64[4 * v60 - 16];
              size_t v92 = v10 - 4;
              uint64_t v93 = v90 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v94 = *(_OWORD *)v92;
                *(v91 - 1) = *((_OWORD *)v92 - 1);
                _OWORD *v91 = v94;
                v91 -= 2;
                v92 -= 8;
                v93 -= 8;
              }
              while (v93);
              v65 -= v90 & 0x7FFFFFFFFFFFFFF8;
              v10 -= v90 & 0x7FFFFFFFFFFFFFF8;
              if (v90 != (v90 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_136:
                do
                {
                  int v95 = *--v10;
                  *--unint64_t v65 = v95;
                }
                while (v10 != (int *)v13);
              }
            }
            goto LABEL_126;
          }
LABEL_132:
          sub_19E37C7C4();
        }
        if (v6 != 120) {
          goto LABEL_27;
        }
        unint64_t v10 = *(int **)(a2 + 8);
        unint64_t v12 = *(void *)(a2 + 16);
        if ((unint64_t)v10 >= v12)
        {
          unint64_t v13 = *(char **)a2;
          uint64_t v14 = (uint64_t)v10 - *(void *)a2;
          uint64_t v15 = v14 >> 2;
          unint64_t v16 = (v14 >> 2) + 1;
          if (!(v16 >> 62))
          {
            uint64_t v17 = v12 - (void)v13;
            if (v17 >> 1 > v16) {
              unint64_t v16 = v17 >> 1;
            }
            if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v18 = v16;
            }
            if (v18)
            {
              if (v18 >> 62) {
                goto LABEL_133;
              }
              unint64_t v19 = operator new(4 * v18);
            }
            else
            {
              unint64_t v19 = 0;
            }
            unint64_t v65 = &v19[4 * v15];
            int v66 = &v19[4 * v18];
            *unint64_t v65 = 3;
            uint64_t v67 = v65 + 1;
            if (v10 != (int *)v13)
            {
              unint64_t v68 = (char *)v10 - v13 - 4;
              if (v68 < 0x2C) {
                goto LABEL_137;
              }
              if ((unint64_t)((char *)v10 - v19 - v14) < 0x20) {
                goto LABEL_137;
              }
              uint64_t v69 = (v68 >> 2) + 1;
              uint8x8_t v70 = &v19[4 * v15 - 16];
              __n128 v71 = v10 - 4;
              uint64_t v72 = v69 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v73 = *(_OWORD *)v71;
                *(v70 - 1) = *((_OWORD *)v71 - 1);
                *uint8x8_t v70 = v73;
                v70 -= 2;
                v71 -= 8;
                v72 -= 8;
              }
              while (v72);
              v65 -= v69 & 0x7FFFFFFFFFFFFFF8;
              v10 -= v69 & 0x7FFFFFFFFFFFFFF8;
              if (v69 != (v69 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_137:
                do
                {
                  int v74 = *--v10;
                  *--unint64_t v65 = v74;
                }
                while (v10 != (int *)v13);
              }
            }
            goto LABEL_126;
          }
          goto LABEL_132;
        }
      }
      else
      {
        if (v6)
        {
          if (v6 == 1)
          {
            unint64_t v10 = *(int **)(a2 + 8);
            unint64_t v9 = *(void *)(a2 + 16);
            if ((unint64_t)v10 < v9)
            {
              int v11 = 1;
LABEL_63:
              *unint64_t v10 = v11;
              *(void *)(a2 + 8) = v10 + 1;
              return;
            }
            unint64_t v13 = *(char **)a2;
            uint64_t v47 = (uint64_t)v10 - *(void *)a2;
            uint64_t v48 = v47 >> 2;
            unint64_t v49 = (v47 >> 2) + 1;
            if (!(v49 >> 62))
            {
              uint64_t v50 = v9 - (void)v13;
              if (v50 >> 1 > v49) {
                unint64_t v49 = v50 >> 1;
              }
              if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v51 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v51 = v49;
              }
              if (!v51)
              {
                uint64_t v52 = 0;
                goto LABEL_101;
              }
              if (!(v51 >> 62))
              {
                uint64_t v52 = operator new(4 * v51);
LABEL_101:
                unint64_t v65 = &v52[4 * v48];
                int v66 = &v52[4 * v51];
                *unint64_t v65 = 1;
                uint64_t v67 = v65 + 1;
                if (v10 != (int *)v13)
                {
                  unint64_t v75 = (char *)v10 - v13 - 4;
                  if (v75 < 0x2C) {
                    goto LABEL_138;
                  }
                  if ((unint64_t)((char *)v10 - v52 - v47) < 0x20) {
                    goto LABEL_138;
                  }
                  uint64_t v76 = (v75 >> 2) + 1;
                  uint64_t v77 = &v52[4 * v48 - 16];
                  unint64_t v78 = v10 - 4;
                  uint64_t v79 = v76 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    long long v80 = *(_OWORD *)v78;
                    *(v77 - 1) = *((_OWORD *)v78 - 1);
                    *uint64_t v77 = v80;
                    v77 -= 2;
                    v78 -= 8;
                    v79 -= 8;
                  }
                  while (v79);
                  v65 -= v76 & 0x7FFFFFFFFFFFFFF8;
                  v10 -= v76 & 0x7FFFFFFFFFFFFFF8;
                  if (v76 != (v76 & 0x7FFFFFFFFFFFFFF8))
                  {
LABEL_138:
                    do
                    {
                      int v81 = *--v10;
                      *--unint64_t v65 = v81;
                    }
                    while (v10 != (int *)v13);
                  }
                }
LABEL_126:
                *(void *)a2 = v65;
                *(void *)(a2 + 8) = v67;
                *(void *)(a2 + 16) = v66;
                if (v13) {
                  operator delete(v13);
                }
                *(void *)(a2 + 8) = v67;
                return;
              }
LABEL_133:
              sub_19E37C2B8();
            }
            goto LABEL_132;
          }
          goto LABEL_27;
        }
        unint64_t v10 = *(int **)(a2 + 8);
        unint64_t v45 = *(void *)(a2 + 16);
        if ((unint64_t)v10 >= v45)
        {
          unint64_t v13 = *(char **)a2;
          uint64_t v53 = (uint64_t)v10 - *(void *)a2;
          uint64_t v54 = v53 >> 2;
          unint64_t v55 = (v53 >> 2) + 1;
          if (!(v55 >> 62))
          {
            uint64_t v56 = v45 - (void)v13;
            if (v56 >> 1 > v55) {
              unint64_t v55 = v56 >> 1;
            }
            if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v57 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v57 = v55;
            }
            if (v57)
            {
              if (v57 >> 62) {
                goto LABEL_133;
              }
              unint64_t v58 = operator new(4 * v57);
            }
            else
            {
              unint64_t v58 = 0;
            }
            unint64_t v65 = &v58[4 * v54];
            int v66 = &v58[4 * v57];
            *unint64_t v65 = 3;
            uint64_t v67 = v65 + 1;
            if (v10 != (int *)v13)
            {
              unint64_t v82 = (char *)v10 - v13 - 4;
              if (v82 < 0x2C) {
                goto LABEL_139;
              }
              if ((unint64_t)((char *)v10 - v58 - v53) < 0x20) {
                goto LABEL_139;
              }
              uint64_t v83 = (v82 >> 2) + 1;
              unint64_t v84 = &v58[4 * v54 - 16];
              unint64_t v85 = v10 - 4;
              uint64_t v86 = v83 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v87 = *(_OWORD *)v85;
                *(v84 - 1) = *((_OWORD *)v85 - 1);
                *unint64_t v84 = v87;
                v84 -= 2;
                v85 -= 8;
                v86 -= 8;
              }
              while (v86);
              v65 -= v83 & 0x7FFFFFFFFFFFFFF8;
              v10 -= v83 & 0x7FFFFFFFFFFFFFF8;
              if (v83 != (v83 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_139:
                do
                {
                  int v88 = *--v10;
                  *--unint64_t v65 = v88;
                }
                while (v10 != (int *)v13);
              }
            }
            goto LABEL_126;
          }
          goto LABEL_132;
        }
      }
      int v11 = 3;
      goto LABEL_63;
    }
LABEL_27:
    uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)a3 + 48))(a3);
    v96[0] = v96;
    MEMORY[0x1F4188790](v20, v21);
    uint64_t v23 = (char *)v96 - v22;
    uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t, char *))(*(void *)a3 + 32))(a3, v8, (char *)v96 - v22);
    if (!v24) {
      return;
    }
    uint64_t v25 = 0;
    uint64_t v26 = *(char **)(a2 + 8);
    while (1)
    {
      unint64_t v28 = *(void *)(a2 + 16);
      if ((unint64_t)v26 >= v28) {
        break;
      }
      *(_DWORD *)uint64_t v26 = *(_DWORD *)&v23[4 * v25];
      unsigned int v27 = v26 + 4;
LABEL_30:
      *(void *)(a2 + 8) = v27;
      ++v25;
      uint64_t v26 = v27;
      if (v25 == v24) {
        return;
      }
    }
    size_t v29 = *(char **)a2;
    uint64_t v30 = (uint64_t)&v26[-*(void *)a2];
    uint64_t v31 = v30 >> 2;
    unint64_t v32 = (v30 >> 2) + 1;
    if (v32 >> 62) {
      sub_19E37C7C4();
    }
    uint64_t v33 = v28 - (void)v29;
    if (v33 >> 1 > v32) {
      unint64_t v32 = v33 >> 1;
    }
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v34 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v34 = v32;
    }
    if (v34)
    {
      if (v34 >> 62) {
        sub_19E37C2B8();
      }
      uint8x8_t v35 = operator new(4 * v34);
    }
    else
    {
      uint8x8_t v35 = 0;
    }
    uint64_t v36 = &v35[4 * v31];
    _DWORD *v36 = *(_DWORD *)&v23[4 * v25];
    unsigned int v27 = (char *)(v36 + 1);
    if (v26 == v29) {
      goto LABEL_46;
    }
    unint64_t v37 = v26 - 4 - v29;
    if (v37 < 0xBC)
    {
      unint64_t v38 = v26;
      goto LABEL_45;
    }
    if (&v35[v30 - 4 - (v37 & 0xFFFFFFFFFFFFFFFCLL)] > &v35[v30 - 4])
    {
      unint64_t v38 = v26;
    }
    else
    {
      if (&v26[-(v37 & 0xFFFFFFFFFFFFFFFCLL) - 4] <= v26 - 4)
      {
        if ((unint64_t)(v26 - &v35[v30]) < 0x20)
        {
          unint64_t v38 = v26;
          goto LABEL_45;
        }
        uint64_t v40 = (v37 >> 2) + 1;
        unint64_t v38 = &v26[-4 * (v40 & 0x7FFFFFFFFFFFFFF8)];
        size_t v41 = &v35[4 * v31 - 16];
        float64x2x2_t v42 = v26 - 16;
        uint64_t v43 = v40 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v44 = *(_OWORD *)v42;
          *(v41 - 1) = *((_OWORD *)v42 - 1);
          *size_t v41 = v44;
          v41 -= 2;
          v42 -= 32;
          v43 -= 8;
        }
        while (v43);
        v36 -= v40 & 0x7FFFFFFFFFFFFFF8;
        if (v40 != (v40 & 0x7FFFFFFFFFFFFFF8)) {
          goto LABEL_45;
        }
LABEL_46:
        *(void *)a2 = v36;
        *(void *)(a2 + 8) = v27;
        *(void *)(a2 + 16) = &v35[4 * v34];
        if (v29) {
          operator delete(v29);
        }
        goto LABEL_30;
      }
      unint64_t v38 = v26;
    }
    do
    {
LABEL_45:
      int v39 = *((_DWORD *)v38 - 1);
      v38 -= 4;
      *--uint64_t v36 = v39;
    }
    while (v38 != v29);
    goto LABEL_46;
  }
}

os_log_t sub_19E4A3374()
{
  os_log_t result = os_log_create("com.apple.LanguageModeling", "NeuralLanguageModelAdapter");
  qword_1E945A1D8 = (uint64_t)result;
  return result;
}

uint64_t sub_19E4A33A4(void *a1, uint64_t a2, unsigned int *a3, uint64_t a4, double *a5)
{
  *a5 = 0.0;
  LOBYTE(v5) = a2 == 1;
  if (!a4) {
    return v5 & 1;
  }
  int v6 = a3;
  uint64_t v7 = a2;
  uint64_t v9 = a1[14];
  uint64_t v8 = a1 + 14;
  unint64_t v10 = (void *)*(v8 - 8);
  uint64_t v11 = *(v8 - 10);
  int v12 = *((_DWORD *)v8 - 8);
  uint64_t v160 = (uint64_t)v8;
  v8[1] = v9;
  if (v10)
  {
    unint64_t v13 = &a3[a4];
    do
    {
      uint64_t v15 = *v6;
      unint64_t v16 = (void *)v10[10];
      uint64_t v17 = (void *)v10[11];
      if (v16 == v17)
      {
LABEL_9:
        unint64_t v19 = (char *)v10[4];
        uint64_t v20 = (char *)v10[5];
        if (v20 != v19)
        {
          unint64_t v21 = (v20 - v19) >> 3;
          do
          {
            unint64_t v22 = v21 >> 1;
            uint64_t v23 = (unsigned int *)&v19[8 * (v21 >> 1)];
            unsigned int v25 = *v23;
            uint64_t v24 = (char *)(v23 + 2);
            v21 += ~(v21 >> 1);
            if (v25 < v15) {
              unint64_t v19 = v24;
            }
            else {
              unint64_t v21 = v22;
            }
          }
          while (v21);
        }
        if (v19 != v20 && *(_DWORD *)v19 == v15) {
          uint64_t v15 = *((unsigned int *)v19 + 1);
        }
      }
      else
      {
        while (1)
        {
          uint64_t v18 = *v16;
          if ((*(unsigned int (**)(void, uint64_t))(*(void *)*v16 + 112))(*v16, v15)) {
            break;
          }
          if (++v16 == v17) {
            goto LABEL_9;
          }
        }
        uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v18 + 88))(v18, v15);
        uint64_t v15 = sub_19E5307F0(v14);
      }
      sub_19E4A2BA8(v15, v160, v11, v12);
      ++v6;
    }
    while (v6 != v13);
  }
  else
  {
    uint64_t v26 = 4 * a4;
    do
    {
      unsigned int v27 = *v6++;
      sub_19E4A2BA8(v27, v160, v11, v12);
      v26 -= 4;
    }
    while (v26);
  }
  if (a1[14] == a1[15]) {
    goto LABEL_186;
  }
  uint64_t v28 = a1[6];
  if (!v28)
  {
    int v39 = a1 + 11;
    a1[12] = a1[11];
    uint64_t v40 = a1 + 12;
    uint64_t v41 = a1[4];
    uint64_t v30 = a5;
    goto LABEL_180;
  }
  long long __p = 0;
  int v163 = 0;
  v164 = 0;
  uint64_t v5 = *(void *)(v28 + 80);
  uint64_t v29 = *(void *)(v28 + 88);
  uint64_t v30 = a5;
  if (v5 == v29)
  {
LABEL_25:
    if (!*(unsigned char *)(v28 + 128)) {
      goto LABEL_71;
    }
  }
  else
  {
    while (1)
    {
      uint64_t v31 = *(void *)v5;
      if ((*(unsigned int (**)(void, uint64_t))(**(void **)v5 + 112))(*(void *)v5, v7)) {
        break;
      }
      v5 += 8;
      if (v5 == v29) {
        goto LABEL_25;
      }
    }
    uint64_t v42 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v31 + 88))(v31, v7);
    int v43 = sub_19E5307F0(v42);
    LOBYTE(v5) = (_BYTE)v163;
    uint64_t v52 = (v163 - (unsigned char *)__p) >> 2;
    unint64_t v53 = v52 + 1;
    if ((unint64_t)(v52 + 1) >> 62) {
LABEL_189:
    }
      sub_19E37C7C4();
    uint64_t v54 = v164 - (unsigned char *)__p;
    if ((v164 - (unsigned char *)__p) >> 1 > v53) {
      unint64_t v53 = v54 >> 1;
    }
    if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v55 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v55 = v53;
    }
    if (v55)
    {
      if (v55 >> 62) {
        goto LABEL_191;
      }
      uint64_t v56 = (char *)operator new(4 * v55);
    }
    else
    {
      uint64_t v56 = 0;
    }
    uint64_t v69 = &v56[4 * v52];
    *(_DWORD *)uint64_t v69 = v43;
    long long __p = v69;
    v164 = &v56[4 * v55];
    int v163 = v69 + 4;
    if (!*(unsigned char *)(v28 + 128))
    {
LABEL_71:
      uint64_t v71 = *(void *)(v28 + 56);
      uint64_t v70 = *(void *)(v28 + 64);
      int v66 = (unsigned int *)__p;
      if (v70 - v71 != 8)
      {
        unint64_t v72 = 0;
        do
        {
          uint64_t v74 = *(void *)(v71 + 8 * v72++);
          uint64_t v75 = *(void *)(v71 + 8 * v72);
          if (v75 != v74)
          {
            uint64_t v76 = *(void *)(v28 + 16);
            uint64_t v77 = (char *)(v76 + 16 * v75);
            unint64_t v78 = (char *)(v76 + 16 * v74);
            unint64_t v79 = (v77 - v78) >> 4;
            do
            {
              unint64_t v80 = v79 >> 1;
              int v81 = (unsigned int *)&v78[16 * (v79 >> 1)];
              unsigned int v83 = *v81;
              unint64_t v82 = (char *)(v81 + 4);
              v79 += ~(v79 >> 1);
              if (v83 < v7) {
                unint64_t v78 = v82;
              }
              else {
                unint64_t v79 = v80;
              }
            }
            while (v79);
            if (v78 != v77 && *(_DWORD *)v78 == v7)
            {
              unint64_t v84 = (unsigned int *)v163;
              if (v163 < v164)
              {
                *(_DWORD *)int v163 = *((_DWORD *)v78 + 1);
                long long v73 = (char *)(v84 + 1);
              }
              else
              {
                uint64_t v5 = (v163 - (char *)v66) >> 2;
                unint64_t v85 = v5 + 1;
                if ((unint64_t)(v5 + 1) >> 62)
                {
                  long long __p = v66;
                  goto LABEL_189;
                }
                uint64_t v86 = v164 - (char *)v66;
                if ((v164 - (char *)v66) >> 1 > v85) {
                  unint64_t v85 = v86 >> 1;
                }
                if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v87 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v87 = v85;
                }
                if (v87)
                {
                  if (v87 >> 62)
                  {
                    long long __p = v66;
LABEL_191:
                    sub_19E37C2B8();
                  }
                  unint64_t v88 = v87;
                  unint64_t v89 = operator new(4 * v87);
                  unint64_t v87 = v88;
                }
                else
                {
                  unint64_t v89 = 0;
                }
                uint64_t v90 = (unsigned int *)&v89[4 * v5];
                *uint64_t v90 = *((_DWORD *)v78 + 1);
                long long v73 = (char *)(v90 + 1);
                if (v84 != v66)
                {
                  unint64_t v91 = (char *)(v84 - 1) - (char *)v66;
                  if (v91 < 0x2C) {
                    goto LABEL_194;
                  }
                  if ((unint64_t)((char *)v66 - v89) < 0x20) {
                    goto LABEL_194;
                  }
                  uint64_t v92 = (v91 >> 2) + 1;
                  uint64_t v93 = &v89[4 * v5 - 16];
                  long long v94 = v84 - 4;
                  uint64_t v95 = v92 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    long long v96 = *(_OWORD *)v94;
                    *(v93 - 1) = *((_OWORD *)v94 - 1);
                    *uint64_t v93 = v96;
                    v93 -= 2;
                    v94 -= 8;
                    v95 -= 8;
                  }
                  while (v95);
                  v90 -= v92 & 0x7FFFFFFFFFFFFFF8;
                  v84 -= v92 & 0x7FFFFFFFFFFFFFF8;
                  if (v92 != (v92 & 0x7FFFFFFFFFFFFFF8))
                  {
LABEL_194:
                    do
                    {
                      unsigned int v97 = *--v84;
                      *--uint64_t v90 = v97;
                    }
                    while (v84 != v66);
                  }
                }
                v164 = &v89[4 * v87];
                if (v66) {
                  operator delete(v66);
                }
                int v66 = v90;
              }
              int v163 = v73;
              uint64_t v71 = *(void *)(v28 + 56);
              uint64_t v70 = *(void *)(v28 + 64);
            }
          }
        }
        while (((v70 - v71) >> 3) - 1 > v72);
        long long __p = v66;
      }
      long long v44 = v163;
      uint64_t v67 = a1;
      if (v66 != (unsigned int *)v163) {
        goto LABEL_109;
      }
LABEL_159:
      char v68 = 0;
      goto LABEL_163;
    }
  }
  unint64_t v32 = *(_DWORD **)(v28 + 16);
  uint64_t v33 = *(void *)(v28 + 24);
  if (v33)
  {
    unint64_t v34 = *(void *)(v28 + 24);
    do
    {
      unint64_t v35 = v34 >> 1;
      uint64_t v36 = &v32[4 * (v34 >> 1)];
      unsigned int v38 = *v36;
      unint64_t v37 = v36 + 4;
      v34 += ~(v34 >> 1);
      if (v38 < v7) {
        unint64_t v32 = v37;
      }
      else {
        unint64_t v34 = v35;
      }
    }
    while (v34);
  }
  uint64_t v5 = (uint64_t)v163;
  if (v163 >= v164)
  {
    unint64_t v45 = __p;
    int64_t v46 = v163 - (unsigned char *)__p;
    uint64_t v47 = (v163 - (unsigned char *)__p) >> 2;
    unint64_t v48 = v47 + 1;
    if ((unint64_t)(v47 + 1) >> 62) {
      goto LABEL_189;
    }
    uint64_t v49 = v164 - (unsigned char *)__p;
    if ((v164 - (unsigned char *)__p) >> 1 > v48) {
      unint64_t v48 = v49 >> 1;
    }
    if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v50 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v50 = v48;
    }
    if (v50)
    {
      if (v50 >> 62) {
        goto LABEL_191;
      }
      unint64_t v51 = (char *)operator new(4 * v50);
    }
    else
    {
      unint64_t v51 = 0;
    }
    unint64_t v57 = &v51[4 * v47];
    unint64_t v58 = &v51[4 * v50];
    *(_DWORD *)unint64_t v57 = v32[1];
    long long v44 = v57 + 4;
    if ((void *)v5 != v45)
    {
      unint64_t v59 = v5 - (void)v45 - 4;
      if (v59 < 0x2C) {
        goto LABEL_195;
      }
      if ((unint64_t)(v5 - (void)&v51[v46]) < 0x20) {
        goto LABEL_195;
      }
      uint64_t v60 = (v59 >> 2) + 1;
      unint64_t v61 = &v51[4 * v47 - 16];
      uint64_t v62 = (long long *)(v5 - 16);
      uint64_t v63 = v60 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v64 = *v62;
        *((_OWORD *)v61 - 1) = *(v62 - 1);
        *(_OWORD *)unint64_t v61 = v64;
        v61 -= 32;
        v62 -= 2;
        v63 -= 8;
      }
      while (v63);
      v57 -= 4 * (v60 & 0x7FFFFFFFFFFFFFF8);
      v5 -= 4 * (v60 & 0x7FFFFFFFFFFFFFF8);
      if (v60 != (v60 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_195:
        do
        {
          int v65 = *(_DWORD *)(v5 - 4);
          v5 -= 4;
          *((_DWORD *)v57 - 1) = v65;
          v57 -= 4;
        }
        while ((void *)v5 != v45);
      }
    }
    long long __p = v57;
    v164 = v58;
    if (v45)
    {
      operator delete(v45);
      uint64_t v33 = *(void *)(v28 + 24);
    }
  }
  else
  {
    *(_DWORD *)int v163 = v32[1];
    v5 += 4;
    long long v44 = (char *)v5;
  }
  int v163 = v44;
  if (v32 == (_DWORD *)(*(void *)(v28 + 16) + 16 * v33))
  {
    char v68 = 0;
    int v66 = (unsigned int *)__p;
    goto LABEL_163;
  }
  int v66 = (unsigned int *)__p;
  if (*v32 != v7) {
    goto LABEL_159;
  }
  uint64_t v67 = a1;
LABEL_109:
  if (v66 == (unsigned int *)v44)
  {
    LOBYTE(v5) = 1;
    double v98 = 0.0;
    goto LABEL_162;
  }
  uint64_t v158 = v67 + 11;
  double v98 = 0.0;
  while (1)
  {
    uint64_t v99 = *v66;
    std::string::size_type v100 = (void *)v67[6];
    uint64_t v101 = v67[4];
    v67[12] = v67[11];
    uint64_t v102 = v99;
    if (v100)
    {
      int v104 = (void *)v100[10];
      uint64_t v103 = (void *)v100[11];
      if (v104 == v103)
      {
LABEL_115:
        int64_t v106 = (char *)v100[4];
        unint64_t v107 = (char *)v100[5];
        if (v107 == v106)
        {
          uint64_t v67 = a1;
        }
        else
        {
          unint64_t v108 = (v107 - v106) >> 3;
          uint64_t v67 = a1;
          do
          {
            unint64_t v109 = v108 >> 1;
            uint64_t v110 = (unsigned int *)&v106[8 * (v108 >> 1)];
            unsigned int v112 = *v110;
            unint64_t v111 = (char *)(v110 + 2);
            v108 += ~(v108 >> 1);
            if (v112 < v99) {
              int64_t v106 = v111;
            }
            else {
              unint64_t v108 = v109;
            }
          }
          while (v108);
        }
        uint64_t v102 = v99;
        if (v106 != v107)
        {
          uint64_t v102 = v99;
          if (*(_DWORD *)v106 == v99) {
            uint64_t v102 = *((unsigned int *)v106 + 1);
          }
        }
      }
      else
      {
        while (1)
        {
          uint64_t v105 = *v104;
          if ((*(unsigned int (**)(void, uint64_t))(*(void *)*v104 + 112))(*v104, v99)) {
            break;
          }
          if (++v104 == v103) {
            goto LABEL_115;
          }
        }
        uint64_t v113 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v105 + 88))(v105, v99);
        uint64_t v67 = a1;
        uint64_t v102 = sub_19E5307F0(v113);
      }
    }
    sub_19E4A2BA8(v102, (uint64_t)v158, v101, 1);
    uint64_t v114 = v67[6];
    int v115 = *(void **)(v114 + 80);
    unint64_t v116 = *(void **)(v114 + 88);
    while (v115 != v116)
    {
      uint64_t v117 = *v115;
      if ((*(unsigned int (**)(void, uint64_t))(*(void *)*v115 + 112))(*v115, v7)
        && ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v117 + 88))(v117, v7) == 68
         || (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v117 + 88))(v117, v7) == 69))
      {
        double v118 = *(double *)(v114 + 104);
        double v119 = (*(double (**)(uint64_t, uint64_t))(*(void *)v117 + 96))(v117, v7) + v118;
        goto LABEL_156;
      }
      ++v115;
    }
    if (*(unsigned char *)(v114 + 128))
    {
      unint64_t v120 = *(void *)(v114 + 24);
      double v119 = 0.0;
      if (!v120) {
        goto LABEL_156;
      }
      int v121 = *(double **)(v114 + 16);
      __int16 v122 = &v121[2 * v120];
      do
      {
        unint64_t v123 = v120 >> 1;
        size_t v124 = (unsigned int *)&v121[2 * (v120 >> 1)];
        unsigned int v126 = *v124;
        uint64_t v125 = (double *)(v124 + 4);
        v120 += ~(v120 >> 1);
        if (v126 < v7) {
          int v121 = v125;
        }
        else {
          unint64_t v120 = v123;
        }
      }
      while (v120);
      if (v121 == v122) {
        goto LABEL_156;
      }
LABEL_154:
      if (*(_DWORD *)v121 == v7) {
        double v119 = v121[1];
      }
      goto LABEL_156;
    }
    uint64_t v127 = v44;
    size_t v128 = *(void *)(v114 + 112);
    int64_t v129 = *(__int32 **)(v114 + 120);
    unint64_t v130 = &v129[v128];
    v131 = wmemchr(v129, v99, v128);
    if (v131) {
      int64_t v132 = v131;
    }
    else {
      int64_t v132 = v130;
    }
    unint64_t v133 = (uint64_t *)(*(void *)(v114 + 56) + 2 * ((char *)v132 - (char *)v129));
    uint64_t v134 = *v133;
    uint64_t v135 = v133[1];
    double v119 = 0.0;
    if (v135 == v134)
    {
      long long v44 = v127;
      goto LABEL_156;
    }
    uint64_t v136 = *(void *)(v114 + 16);
    uint64_t v137 = (double *)(v136 + 16 * v135);
    int v121 = (double *)(v136 + 16 * v134);
    unint64_t v138 = ((char *)v137 - (char *)v121) >> 4;
    long long v44 = v127;
    do
    {
      unint64_t v139 = v138 >> 1;
      unint64_t v140 = (unsigned int *)&v121[2 * (v138 >> 1)];
      unsigned int v142 = *v140;
      size_t v141 = (double *)(v140 + 4);
      v138 += ~(v138 >> 1);
      if (v142 < v7) {
        int v121 = v141;
      }
      else {
        unint64_t v138 = v139;
      }
    }
    while (v138);
    if (v121 != v137) {
      goto LABEL_154;
    }
LABEL_156:
    double v161 = 0.0;
    if ((sub_19E4A3FF4((uint64_t)v67, v158, v160, &v161) & 1) == 0) {
      break;
    }
    double v98 = __exp10(v161 + v119) + v98;
    if (++v66 == (unsigned int *)v44)
    {
      LOBYTE(v5) = 1;
      goto LABEL_162;
    }
  }
  LOBYTE(v5) = 0;
LABEL_162:
  *a5 = *a5 + log10(v98);
  char v68 = 1;
  int v66 = (unsigned int *)__p;
LABEL_163:
  if (v66) {
    operator delete(v66);
  }
  if (v68) {
    return v5 & 1;
  }
  int v39 = a1 + 11;
  a1[12] = a1[11];
  uint64_t v40 = a1 + 12;
  int v143 = (void *)a1[6];
  uint64_t v41 = a1[4];
  if (v143)
  {
    char v144 = (void *)v143[10];
    int v145 = (void *)v143[11];
    if (v144 == v145)
    {
LABEL_170:
      size_t v147 = (char *)v143[4];
      int v148 = (char *)v143[5];
      if (v148 != v147)
      {
        unint64_t v149 = (v148 - v147) >> 3;
        do
        {
          unint64_t v150 = v149 >> 1;
          size_t v151 = (unsigned int *)&v147[8 * (v149 >> 1)];
          unsigned int v153 = *v151;
          int v152 = (char *)(v151 + 2);
          v149 += ~(v149 >> 1);
          if (v153 < v7) {
            size_t v147 = v152;
          }
          else {
            unint64_t v149 = v150;
          }
        }
        while (v149);
      }
      if (v147 != v148 && *(_DWORD *)v147 == v7) {
        uint64_t v7 = *((unsigned int *)v147 + 1);
      }
    }
    else
    {
      while (1)
      {
        uint64_t v146 = *v144;
        if ((*(unsigned int (**)(void, uint64_t))(*(void *)*v144 + 112))(*v144, v7)) {
          break;
        }
        if (++v144 == v145) {
          goto LABEL_170;
        }
      }
      uint64_t v154 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v146 + 88))(v146, v7);
      uint64_t v7 = sub_19E5307F0(v154);
    }
  }
LABEL_180:
  sub_19E4A2BA8(v7, (uint64_t)v39, v41, 1);
  v155 = (_DWORD *)*v39;
  if (*v39 == *v40)
  {
LABEL_183:
    return sub_19E4A3FF4((uint64_t)a1, v39, v160, v30);
  }
  else
  {
    while (*v155 != 3)
    {
      if (++v155 == (_DWORD *)*v40) {
        goto LABEL_183;
      }
    }
LABEL_186:
    LOBYTE(v5) = 0;
    return v5 & 1;
  }
}

void sub_19E4A3FB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (v15) {
    operator delete(v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E4A3FF4(uint64_t a1, void *a2, uint64_t a3, double *a4)
{
  if (*a2 == a2[1]) {
    return 0;
  }
  uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  if (v7)
  {
    log10f(0.0);
    *a4 = -10.0;
    uint64_t v8 = (_DWORD *)*a2;
    uint64_t v9 = (_DWORD *)a2[1];
    if ((_DWORD *)*a2 != v9)
    {
      unint64_t v10 = *(char **)(a3 + 8);
      while (1)
      {
        unint64_t v12 = *(void *)(a3 + 16);
        if ((unint64_t)v10 >= v12) {
          break;
        }
        *(_DWORD *)unint64_t v10 = *v8;
        uint64_t v11 = v10 + 4;
LABEL_6:
        *(void *)(a3 + 8) = v11;
        ++v8;
        unint64_t v10 = v11;
        if (v8 == v9) {
          return v7;
        }
      }
      unint64_t v13 = *(char **)a3;
      uint64_t v14 = (uint64_t)&v10[-*(void *)a3];
      uint64_t v15 = v14 >> 2;
      unint64_t v16 = (v14 >> 2) + 1;
      if (v16 >> 62) {
        sub_19E37C7C4();
      }
      uint64_t v17 = v12 - (void)v13;
      if (v17 >> 1 > v16) {
        unint64_t v16 = v17 >> 1;
      }
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v18 = v16;
      }
      if (v18)
      {
        if (v18 >> 62) {
          sub_19E37C2B8();
        }
        unint64_t v19 = operator new(4 * v18);
      }
      else
      {
        unint64_t v19 = 0;
      }
      uint64_t v20 = &v19[4 * v15];
      *uint64_t v20 = *v8;
      uint64_t v11 = (char *)(v20 + 1);
      if (v10 == v13) {
        goto LABEL_31;
      }
      unint64_t v21 = v10 - 4 - v13;
      if (v21 < 0xBC)
      {
        unint64_t v22 = v10;
        goto LABEL_30;
      }
      if (&v19[v14 - 4 - (v21 & 0xFFFFFFFFFFFFFFFCLL)] > &v19[v14 - 4])
      {
        unint64_t v22 = v10;
      }
      else
      {
        if (&v10[-(v21 & 0xFFFFFFFFFFFFFFFCLL) - 4] <= v10 - 4)
        {
          if ((unint64_t)(v10 - v19 - v14) < 0x20)
          {
            unint64_t v22 = v10;
            goto LABEL_30;
          }
          uint64_t v23 = (v21 >> 2) + 1;
          unint64_t v22 = &v10[-4 * (v23 & 0x7FFFFFFFFFFFFFF8)];
          uint64_t v24 = &v19[4 * v15 - 16];
          unsigned int v25 = v10 - 16;
          uint64_t v26 = v23 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v27 = *(_OWORD *)v25;
            *(v24 - 1) = *((_OWORD *)v25 - 1);
            *uint64_t v24 = v27;
            v24 -= 2;
            v25 -= 32;
            v26 -= 8;
          }
          while (v26);
          v20 -= v23 & 0x7FFFFFFFFFFFFFF8;
          if (v23 != (v23 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_30;
          }
LABEL_31:
          *(void *)a3 = v20;
          *(void *)(a3 + 8) = v11;
          *(void *)(a3 + 16) = &v19[4 * v18];
          if (v13) {
            operator delete(v13);
          }
          goto LABEL_6;
        }
        unint64_t v22 = v10;
      }
      do
      {
LABEL_30:
        int v28 = *((_DWORD *)v22 - 1);
        v22 -= 4;
        *--uint64_t v20 = v28;
      }
      while (v22 != v13);
      goto LABEL_31;
    }
  }
  return v7;
}

void sub_19E4A4258(void *a1)
{
  sub_19E4A4290(a1);
  JUMPOUT(0x19F3BDCF0);
}

void *sub_19E4A4290(void *a1)
{
  *a1 = &unk_1EF0BBB00;
  int8x8_t v2 = (void *)a1[14];
  if (v2)
  {
    a1[15] = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  uint8x8_t v4 = (std::__shared_weak_count *)a1[7];
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    uint64_t v5 = (std::__shared_weak_count *)a1[5];
    if (!v5) {
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v5 = (std::__shared_weak_count *)a1[5];
    if (!v5) {
      goto LABEL_11;
    }
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  int v6 = (std::__shared_weak_count *)a1[3];
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return a1;
}

unint64_t sub_19E4A43D8(uint64_t a1, uint64_t a2)
{
  v10[1] = *MEMORY[0x1E4F143B8];
  (*(void (**)(void))(**(void **)(a1 + 32) + 48))(*(void *)(a1 + 32));
  MEMORY[0x1F4188790]();
  uint64_t v5 = (_DWORD *)((char *)v10 - v4);
  unint64_t result = (*(uint64_t (**)(void, uint64_t, char *))(**(void **)(a1 + 32) + 32))(*(void *)(a1 + 32), a2, (char *)v10 - v4);
  if (result)
  {
    if (*v5 == 3)
    {
      return 1;
    }
    else
    {
      uint64_t v7 = 1;
      while (result != v7)
      {
        int v8 = v5[v7++];
        if (v8 == 3)
        {
          unint64_t v9 = v7 - 1;
          return v9 < result;
        }
      }
      unint64_t v9 = result;
      return v9 < result;
    }
  }
  return result;
}

uint64_t sub_19E4A4504(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void sub_19E4A450C(void *a1)
{
  *a1 = &unk_1EF0BAD40;
  uint64_t v2 = a1[1];
  if (v2) {
    sub_19E42563C(a1[2], v2);
  }
  unint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x19F3BDCF0);
}

void *sub_19E4A45C8(void *a1)
{
  *a1 = &unk_1EF0BAD40;
  uint64_t v2 = a1[1];
  if (v2) {
    sub_19E42563C(a1[2], v2);
  }
  unint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

void sub_19E4A4664(uint64_t a1)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  long long __p = 0;
  p_p = &__p;
  uint64_t v42 = 0x2000000000;
  uint64_t v2 = (const void **)qword_1E945A1E8;
  int v43 = (void *)qword_1E945A1E8;
  if (!qword_1E945A1E8)
  {
    *(void *)std::string buf = MEMORY[0x1E4F143A8];
    *(void *)&uint8_t buf[8] = 0x40000000;
    unint64_t v37 = sub_19E4A4E18;
    unsigned int v38 = &unk_1E59A0400;
    int v39 = &__p;
    sub_19E4A4E18((uint64_t)buf);
    uint64_t v2 = (const void **)p_p[3];
  }
  _Block_object_dispose(&__p, 8);
  if (!v2)
  {
    dlerror();
    abort_report_np();
LABEL_72:
    __break(1u);
LABEL_73:
    dispatch_once(&qword_1EC0095B8, &unk_1EF0BEC40);
LABEL_67:
    unint64_t v32 = qword_1EC0095B0;
    if (os_log_type_enabled((os_log_t)qword_1EC0095B0, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl(&dword_19E36B000, v32, OS_LOG_TYPE_ERROR, "Unable to load network model", buf, 2u);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    sub_19E382340(buf, "MRLEmbeddingMemoryModelCreate returned nullptr");
    sub_19E3F5604(exception, (long long *)buf);
    __cxa_throw(exception, (struct type_info *)&unk_1EF0B7540, (void (*)(void *))sub_19E3F56B0);
  }
  unint64_t v3 = *v2;
  if (v3) {
    CFRetain(v3);
  }
  sub_19E372124(v35, v3);
  sub_19E4A4F58(&v44, v35[0], (uint64_t *)a1);
  long long __p = 0;
  p_p = &__p;
  uint64_t v42 = 0x2000000000;
  uint64_t v4 = (const void **)qword_1E945A1F8;
  int v43 = (void *)qword_1E945A1F8;
  if (!qword_1E945A1F8)
  {
    *(void *)std::string buf = MEMORY[0x1E4F143A8];
    *(void *)&uint8_t buf[8] = 0x40000000;
    unint64_t v37 = sub_19E4A5040;
    unsigned int v38 = &unk_1E59A0460;
    int v39 = &__p;
    sub_19E4A5040((uint64_t)buf);
    uint64_t v4 = (const void **)p_p[3];
  }
  _Block_object_dispose(&__p, 8);
  if (!v4)
  {
    dlerror();
    abort_report_np();
    goto LABEL_72;
  }
  uint64_t v5 = *v4;
  if (v5) {
    CFRetain(v5);
  }
  sub_19E372124(&v34, v5);
  sub_19E4A4F58(&v46, v34, (uint64_t *)(a1 + 8));
  CFDictionaryRef v6 = sub_19E411038((uint64_t *)&v44, 2uLL);
  v35[1] = v6;
  if (cf) {
    CFRelease(cf);
  }
  if (v46) {
    CFRelease(v46);
  }
  if (v45) {
    CFRelease(v45);
  }
  if (v44) {
    CFRelease(v44);
  }
  if (v34) {
    CFRelease(v34);
  }
  if (v35[0]) {
    CFRelease(v35[0]);
  }
  long long __p = 0;
  p_p = &__p;
  uint64_t v42 = 0x2000000000;
  uint64_t v7 = (uint64_t (*)(CFDictionaryRef, void))off_1E945A200;
  int v43 = off_1E945A200;
  if (!off_1E945A200)
  {
    *(void *)std::string buf = MEMORY[0x1E4F143A8];
    *(void *)&uint8_t buf[8] = 0x40000000;
    unint64_t v37 = sub_19E4A5180;
    unsigned int v38 = &unk_1E59A0488;
    int v39 = &__p;
    sub_19E4A5180((uint64_t)buf);
    uint64_t v7 = (uint64_t (*)(CFDictionaryRef, void))p_p[3];
  }
  _Block_object_dispose(&__p, 8);
  if (!v7)
  {
    dlerror();
    abort_report_np();
    goto LABEL_72;
  }
  uint64_t v8 = v7(v6, 0);
  if (!v8)
  {
    if (qword_1EC0095B8 == -1) {
      goto LABEL_67;
    }
    goto LABEL_73;
  }
  unint64_t v9 = *(const void **)(a1 + 96);
  if (v9) {
    CFRelease(v9);
  }
  *(void *)(a1 + 96) = v8;
  unint64_t v11 = *(void *)(a1 + 8);
  unint64_t v10 = *(void *)(a1 + 16);
  p_p = 0;
  uint64_t v42 = 0;
  long long __p = 0;
  CFTypeRef v44 = &__p;
  LOBYTE(v45) = 0;
  if (v10)
  {
    if (v10 > 0xAAAAAAAAAAAAAAALL) {
      sub_19E37C7C4();
    }
    uint64_t v12 = 3 * v10;
    unint64_t v13 = operator new(24 * v10);
    uint64_t v14 = (long long *)&v13[v12];
    long long __p = v13;
    uint64_t v42 = (uint64_t)&v13[v12];
    do
    {
      void *v13 = 0;
      v13[1] = 0;
      std::string v13[2] = 0;
      v13 += 3;
      v12 -= 3;
    }
    while (v12 * 8);
    p_p = (void **)v14;
  }
  unint64_t v37 = 0;
  memset(buf, 0, sizeof(buf));
  if (v11)
  {
    if (v11 > 0xAAAAAAAAAAAAAAALL) {
      sub_19E37C7C4();
    }
    size_t v15 = 24 * v11;
    unint64_t v16 = (char *)operator new(v15);
    uint64_t v17 = 0;
    unint64_t v18 = &v16[v15];
    *(void *)std::string buf = v16;
    unint64_t v37 = (void *(*)(uint64_t))&v16[v15];
    do
    {
      unint64_t v19 = &v16[v17];
      *(void *)unint64_t v19 = 0;
      *((void *)v19 + 1) = 0;
      *((void *)v19 + 2) = 0;
      sub_19E3938C0(&v16[v17], (long long *)__p, (long long *)p_p, 0xAAAAAAAAAAAAAAABLL * (((char *)p_p - (unsigned char *)__p) >> 3));
      v17 += 24;
    }
    while (v15 != v17);
    *(void *)&uint8_t buf[8] = &v16[v15];
  }
  else
  {
    unint64_t v18 = 0;
  }
  uint64_t v20 = (void **)(a1 + 64);
  unint64_t v21 = *(void ***)(a1 + 64);
  if (v21)
  {
    unint64_t v22 = *(void ***)(a1 + 72);
    uint64_t v23 = *(void **)(a1 + 64);
    if (v22 != v21)
    {
      uint64_t v24 = *(void ***)(a1 + 72);
      do
      {
        long long v27 = (void **)*(v24 - 3);
        v24 -= 3;
        uint64_t v26 = v27;
        if (v27)
        {
          int v28 = (void **)*(v22 - 2);
          unsigned int v25 = v26;
          if (v28 != v26)
          {
            do
            {
              if (*((char *)v28 - 1) < 0) {
                operator delete(*(v28 - 3));
              }
              v28 -= 3;
            }
            while (v28 != v26);
            unsigned int v25 = *v24;
          }
          *(v22 - 2) = v26;
          operator delete(v25);
        }
        unint64_t v22 = v24;
      }
      while (v24 != v21);
      uint64_t v23 = *v20;
    }
    *(void *)(a1 + 72) = v21;
    operator delete(v23);
    *uint64_t v20 = 0;
    *(void *)(a1 + 72) = 0;
    *(void *)(a1 + 80) = 0;
  }
  *(_OWORD *)(a1 + 64) = *(_OWORD *)buf;
  *(void *)(a1 + 80) = v18;
  uint64_t v29 = (long long *)__p;
  if (__p)
  {
    uint64_t v30 = p_p;
    uint64_t v31 = __p;
    if (p_p != __p)
    {
      do
      {
        if (*((char *)v30 - 1) < 0) {
          operator delete(*(v30 - 3));
        }
        v30 -= 3;
      }
      while (v30 != (void **)v29);
      uint64_t v31 = __p;
    }
    p_p = (void **)v29;
    operator delete(v31);
  }
  *(unsigned char *)(a1 + 88) = 1;
  CFRelease(v6);
}

void sub_19E4A4C48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, int a15, const void *a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void *sub_19E4A4E18(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v5[0] = 0;
  if (!qword_1E945A1F0)
  {
    v5[1] = MEMORY[0x1E4F143A8];
    v5[2] = 0x40000000;
    void v5[3] = sub_19E4A52C0;
    v5[4] = &unk_1E59A0438;
    v5[5] = v5;
    long long v6 = xmmword_1E59A0420;
    uint64_t v7 = 0;
    qword_1E945A1F0 = _sl_dlopen();
    unint64_t v3 = (void *)v5[0];
    uint64_t v2 = (void *)qword_1E945A1F0;
    if (qword_1E945A1F0)
    {
      if (!v5[0]) {
        goto LABEL_5;
      }
    }
    else
    {
      unint64_t v3 = (void *)abort_report_np();
    }
    free(v3);
    goto LABEL_5;
  }
  uint64_t v2 = (void *)qword_1E945A1F0;
LABEL_5:
  unint64_t result = dlsym(v2, "kMRLEmbeddingMemoryModelEmbeddingDimensionKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + ++*(_DWORD *)(result + 24) = result;
  qword_1E945A1E8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_19E4A4F58(void *a1, CFTypeRef cf, uint64_t *a3)
{
  if (cf) {
    CFRetain(cf);
  }
  *a1 = cf;
  uint64_t valuePtr = *a3;
  CFNumberRef v6 = CFNumberCreate(0, kCFNumberLongType, &valuePtr);
  a1[1] = v6;
  if (!v6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3BD790](exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return a1;
}

void sub_19E4A5000(_Unwind_Exception *a1)
{
  unint64_t v3 = *(const void **)(v1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  sub_19E3C60A8((const void **)v1);
  _Unwind_Resume(a1);
}

void *sub_19E4A5040(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v5[0] = 0;
  if (!qword_1E945A1F0)
  {
    v5[1] = MEMORY[0x1E4F143A8];
    v5[2] = 0x40000000;
    void v5[3] = sub_19E4A52C0;
    v5[4] = &unk_1E59A0438;
    v5[5] = v5;
    long long v6 = xmmword_1E59A0420;
    uint64_t v7 = 0;
    qword_1E945A1F0 = _sl_dlopen();
    unint64_t v3 = (void *)v5[0];
    uint64_t v2 = (void *)qword_1E945A1F0;
    if (qword_1E945A1F0)
    {
      if (!v5[0]) {
        goto LABEL_5;
      }
    }
    else
    {
      unint64_t v3 = (void *)abort_report_np();
    }
    free(v3);
    goto LABEL_5;
  }
  uint64_t v2 = (void *)qword_1E945A1F0;
LABEL_5:
  unint64_t result = dlsym(v2, "kMRLEmbeddingMemoryModelSizeKey");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + ++*(_DWORD *)(result + 24) = result;
  qword_1E945A1F8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_19E4A5180(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v5[0] = 0;
  if (!qword_1E945A1F0)
  {
    v5[1] = MEMORY[0x1E4F143A8];
    v5[2] = 0x40000000;
    void v5[3] = sub_19E4A52C0;
    v5[4] = &unk_1E59A0438;
    v5[5] = v5;
    long long v6 = xmmword_1E59A0420;
    uint64_t v7 = 0;
    qword_1E945A1F0 = _sl_dlopen();
    unint64_t v3 = (void *)v5[0];
    uint64_t v2 = (void *)qword_1E945A1F0;
    if (qword_1E945A1F0)
    {
      if (!v5[0]) {
        goto LABEL_5;
      }
    }
    else
    {
      unint64_t v3 = (void *)abort_report_np();
    }
    free(v3);
    goto LABEL_5;
  }
  uint64_t v2 = (void *)qword_1E945A1F0;
LABEL_5:
  unint64_t result = dlsym(v2, "MRLEmbeddingMemoryModelCreate");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + ++*(_DWORD *)(result + 24) = result;
  off_1E945A200 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_19E4A52C0()
{
  uint64_t result = _sl_dlopen();
  qword_1E945A1F0 = result;
  return result;
}

void *sub_19E4A5334(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v5[0] = 0;
  if (!qword_1E945A1F0)
  {
    v5[1] = MEMORY[0x1E4F143A8];
    v5[2] = 0x40000000;
    void v5[3] = sub_19E4A52C0;
    v5[4] = &unk_1E59A0438;
    v5[5] = v5;
    long long v6 = xmmword_1E59A0420;
    uint64_t v7 = 0;
    qword_1E945A1F0 = _sl_dlopen();
    unint64_t v3 = (void *)v5[0];
    uint64_t v2 = (void *)qword_1E945A1F0;
    if (qword_1E945A1F0)
    {
      if (!v5[0]) {
        goto LABEL_5;
      }
    }
    else
    {
      unint64_t v3 = (void *)abort_report_np();
    }
    free(v3);
    goto LABEL_5;
  }
  uint64_t v2 = (void *)qword_1E945A1F0;
LABEL_5:
  uint64_t result = dlsym(v2, "MRLEmbeddingMemoryModelAddEmbedding");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + ++*(_DWORD *)(result + 24) = result;
  off_1E945A208 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_19E4A5474(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v5[0] = 0;
  if (!qword_1E945A1F0)
  {
    v5[1] = MEMORY[0x1E4F143A8];
    v5[2] = 0x40000000;
    void v5[3] = sub_19E4A52C0;
    v5[4] = &unk_1E59A0438;
    v5[5] = v5;
    long long v6 = xmmword_1E59A0420;
    uint64_t v7 = 0;
    qword_1E945A1F0 = _sl_dlopen();
    unint64_t v3 = (void *)v5[0];
    uint64_t v2 = (void *)qword_1E945A1F0;
    if (qword_1E945A1F0)
    {
      if (!v5[0]) {
        goto LABEL_5;
      }
    }
    else
    {
      unint64_t v3 = (void *)abort_report_np();
    }
    free(v3);
    goto LABEL_5;
  }
  uint64_t v2 = (void *)qword_1E945A1F0;
LABEL_5:
  uint64_t result = dlsym(v2, "MRLEmbeddingMemoryModelGetOutputDistances");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + ++*(_DWORD *)(result + 24) = result;
  off_1E945A210 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

unint64_t sub_19E4A55B4(CFDictionaryRef *a1, CFStringRef *a2)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  CFNumberRef v4 = (const __CFNumber *)CFPreferencesCopyAppValue(*a2, @"com.apple.LanguageModeling");
  if (v4)
  {
    CFNumberRef v5 = v4;
    unint64_t v6 = sub_19E4A5DD0(v4);
    char v8 = v7;
    CFRelease(v5);
    if (v8)
    {
      sub_19E393108((uint64_t)v33);
      CFStringRef v9 = *a2;
      if (!v9 || (CFTypeID TypeID = CFStringGetTypeID(), TypeID != CFGetTypeID(v9)))
      {
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x19F3BD790](exception, "Could not convert");
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      sub_19E3721DC(__p, v9);
      unint64_t v11 = sub_19E37CA70(v34, (uint64_t)"Overriding configuration key='", 30);
      if ((v32 & 0x80u) == 0) {
        uint64_t v12 = __p;
      }
      else {
        uint64_t v12 = (void **)__p[0];
      }
      if ((v32 & 0x80u) == 0) {
        uint64_t v13 = v32;
      }
      else {
        uint64_t v13 = (uint64_t)__p[1];
      }
      uint64_t v14 = sub_19E37CA70(v11, (uint64_t)v12, v13);
      sub_19E37CA70(v14, (uint64_t)"' with user preferences value='", 31);
      size_t v15 = (void *)std::ostream::operator<<();
      sub_19E37CA70(v15, (uint64_t)"'", 1);
      if (qword_1EC0095B8 != -1) {
        dispatch_once(&qword_1EC0095B8, &unk_1EF0BEC40);
      }
      unint64_t v16 = qword_1EC0095B0;
      if (!os_log_type_enabled((os_log_t)qword_1EC0095B0, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_37;
      }
      if ((v41 & 0x10) != 0)
      {
        unint64_t v20 = v40;
        if (v40 < v37)
        {
          unint64_t v40 = v37;
          unint64_t v20 = v37;
        }
        unint64_t v21 = (const void **)&v36;
      }
      else
      {
        if ((v41 & 8) == 0)
        {
          size_t v17 = 0;
          HIBYTE(v30) = 0;
          unint64_t v18 = __dst;
          goto LABEL_34;
        }
        unint64_t v21 = (const void **)v35;
        unint64_t v20 = v35[2];
      }
      unint64_t v22 = *v21;
      size_t v17 = v20 - (void)*v21;
      if (v17 >= 0x7FFFFFFFFFFFFFF8) {
        sub_19E37C958();
      }
      if (v17 >= 0x17)
      {
        uint64_t v23 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v17 | 7) != 0x17) {
          uint64_t v23 = v17 | 7;
        }
        uint64_t v24 = v23 + 1;
        unint64_t v18 = (void **)operator new(v23 + 1);
        __dst[1] = (void *)v17;
        int64_t v30 = v24 | 0x8000000000000000;
        __dst[0] = v18;
      }
      else
      {
        HIBYTE(v30) = v20 - *(unsigned char *)v21;
        unint64_t v18 = __dst;
        if (!v17)
        {
LABEL_34:
          *((unsigned char *)v18 + v17) = 0;
          unsigned int v25 = __dst;
          if (v30 < 0) {
            unsigned int v25 = (void **)__dst[0];
          }
          *(_DWORD *)std::string buf = 136315138;
          CFTypeRef v44 = v25;
          _os_log_impl(&dword_19E36B000, v16, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
          if (SHIBYTE(v30) < 0)
          {
            operator delete(__dst[0]);
            if (((char)v32 & 0x80000000) == 0) {
              goto LABEL_39;
            }
            goto LABEL_38;
          }
LABEL_37:
          if (((char)v32 & 0x80000000) == 0)
          {
LABEL_39:
            v33[0] = *MEMORY[0x1E4FBA408];
            uint64_t v26 = *(void *)(MEMORY[0x1E4FBA408] + 72);
            *(void *)((char *)v33 + *(void *)(v33[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
            v34[0] = v26;
            v34[1] = MEMORY[0x1E4FBA470] + 16;
            if (v39 < 0) {
              operator delete(v38);
            }
            std::streambuf::~streambuf();
            std::iostream::~basic_iostream();
            MEMORY[0x19F3BDC30](&v42);
            return v6;
          }
LABEL_38:
          operator delete(__p[0]);
          goto LABEL_39;
        }
      }
      memmove(v18, v22, v17);
      goto LABEL_34;
    }
  }
  if (!*a1)
  {
    __cxa_allocate_exception(0x10uLL);
    sub_19E4A5E50();
  }
  if (*a2 && (CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(*a1, *a2)) != 0) {
    return sub_19E4A5DD0(Value);
  }
  else {
    return 0;
  }
}

void sub_19E4A5A4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_19E3933E0((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_19E4A5AC0(void *a1, uint64_t a2)
{
  if ((unint64_t)(a2 + 4) > a1[1])
  {
    sub_19E393108((uint64_t)v10);
    sub_19E37CA70(v11, (uint64_t)"(file_size=", 11);
    unint64_t v3 = (void *)std::ostream::operator<<();
    sub_19E37CA70(v3, (uint64_t)", offset=", 9);
    CFNumberRef v4 = (void *)std::ostream::operator<<();
    sub_19E37CA70(v4, (uint64_t)", object_size=", 14);
    CFNumberRef v5 = (void *)std::ostream::operator<<();
    sub_19E37CA70(v5, (uint64_t)")", 1);
    exception = __cxa_allocate_exception(0x10uLL);
    sub_19E43BFBC(&__dst, (uint64_t)v10);
    __n128 v7 = sub_19E420378(&v9, "attempted to read beyond the end of the mapped file ", &__dst);
    MEMORY[0x19F3BD7A0](exception, &v9, v7);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return *a1 + a2;
}

void sub_19E4A5BD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v23 & 1) == 0)
    {
LABEL_8:
      sub_19E3933E0((uint64_t)&a22);
      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

unint64_t sub_19E4A5C48(uint64_t *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3 = a1[1];
  unint64_t v4 = v3 - a2;
  if (v3 <= a2)
  {
    sub_19E393108((uint64_t)v15);
    sub_19E37CA70(v16, (uint64_t)"(file_size=", 11);
    std::string v9 = (void *)std::ostream::operator<<();
    sub_19E37CA70(v9, (uint64_t)", offset=", 9);
    unint64_t v10 = (void *)std::ostream::operator<<();
    sub_19E37CA70(v10, (uint64_t)")", 1);
    exception = __cxa_allocate_exception(0x10uLL);
    sub_19E43BFBC(&__dst, (uint64_t)v15);
    __n128 v12 = sub_19E420378(&v14, "attempted to read beyond the end of the mapped file ", &__dst);
    MEMORY[0x19F3BD7A0](exception, &v14, v12);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v5 = *a1;
  unint64_t v6 = v4 >> 2;
  if (v6 >= a3) {
    unint64_t result = a3;
  }
  else {
    unint64_t result = v6;
  }
  if (result) {
    BOOL v8 = v5 == 0;
  }
  else {
    BOOL v8 = 0;
  }
  if (v8) {
    sub_19E452FE8();
  }
  return result;
}

void sub_19E4A5D60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v23 & 1) == 0)
    {
LABEL_8:
      sub_19E3933E0((uint64_t)&a22);
      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

unint64_t sub_19E4A5DD0(const __CFNumber *a1)
{
  CFTypeID TypeID = CFNumberGetTypeID();
  if (TypeID == CFGetTypeID(a1)) {
    return sub_19E40CDE4(a1);
  }
  CFTypeID v4 = CFBooleanGetTypeID();
  if (v4 == CFGetTypeID(a1)) {
    return CFBooleanGetValue(a1);
  }
  else {
    return 0;
  }
}

void sub_19E4A5E50()
{
}

uint64_t sub_19E4A5E5C(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  v21[0] = (uint64_t)a2;
  v21[1] = a3;
  unint64_t v3 = *(unsigned int *)(a1 + 44);
  unint64_t v4 = 0;
  if (a3)
  {
    uint64_t v5 = &a2[a3];
    uint64_t v6 = *(void *)(a1 + 96);
    while (v3 > v4)
    {
      __n128 v7 = (int *)(*(void *)(a1 + 80) + 12 * v4);
      int v9 = *v7;
      int v8 = v7[1];
      int v10 = v9 + v8 - 1;
      if (v8 > v10) {
        goto LABEL_20;
      }
      unsigned int v11 = *a2;
      while (1)
      {
        int v12 = v10 + v8;
        if (v10 + v8 < 0 != __OFADD__(v10, v8)) {
          int v13 = v12 + 1;
        }
        else {
          int v13 = v10 + v8;
        }
        uint64_t v14 = (v13 >> 1);
        if (*(_DWORD *)(a1 + 48) <= v14) {
          __assert_rtn("getEdge", "Network.h", 203, "edgeIdx < getNrOfEdges()");
        }
        unsigned int v15 = *(_DWORD *)(v6 + 16 * v14 + 8);
        if (v15 == v11) {
          break;
        }
        if (v15 <= v11)
        {
          int v8 = v14 + 1;
          if ((int)v14 >= v10) {
            goto LABEL_20;
          }
        }
        else
        {
          int v10 = v14 - 1;
          if (v8 >= (int)v14) {
            goto LABEL_20;
          }
        }
      }
      if (v12 <= -2)
      {
LABEL_20:
        if (qword_1E945A220 != -1) {
          dispatch_once(&qword_1E945A220, &unk_1EF0BED10);
        }
        size_t v17 = qword_1E945A218;
        if (os_log_type_enabled((os_log_t)qword_1E945A218, OS_LOG_TYPE_ERROR))
        {
          sub_19E49D5B0(__p, v21);
          if (v20 >= 0) {
            unint64_t v18 = __p;
          }
          else {
            unint64_t v18 = (void **)__p[0];
          }
          *(_DWORD *)std::string buf = 136315138;
          int v23 = v18;
          _os_log_error_impl(&dword_19E36B000, v17, OS_LOG_TYPE_ERROR, "Failed to find node for prefix: [%s]", buf, 0xCu);
          if (v20 < 0) {
            operator delete(__p[0]);
          }
        }
        __assert_rtn("nodeForPrefix", "Network.cpp", 235, "false && \"Failed to find node for prefix\"");
      }
      unint64_t v4 = *(unsigned int *)(v6 + 16 * v14 + 4);
      if (++a2 == v5) {
        goto LABEL_18;
      }
    }
LABEL_30:
    __assert_rtn("getNode", "Network.h", 215, "n < getNrOfNodes()");
  }
LABEL_18:
  if (v3 <= v4) {
    goto LABEL_30;
  }
  return *(void *)(a1 + 80) + 12 * v4;
}

os_log_t sub_19E4A6078()
{
  os_log_t result = os_log_create("com.apple.LanguageModeling", "FragmentModelFST");
  qword_1E945A218 = (uint64_t)result;
  return result;
}

uint64_t sub_19E4A60A8(uint64_t result, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 2)
    {
      uint64_t v6 = v4 >> 1;
      uint64_t v7 = (v4 >> 1) | 1;
      int v8 = (unsigned int *)(result + 4 * v7);
      uint64_t v9 = v6 + 2;
      if (v6 + 2 >= a3)
      {
        uint64_t v10 = *(void *)(a2 + 96);
        uint64_t v11 = *(void *)(a2 + 176);
      }
      else
      {
        uint64_t v10 = *(void *)(a2 + 96);
        uint64_t v11 = *(void *)(a2 + 176);
        if (*(float *)(v11 + 4 * *(unsigned int *)(v10 + 16 * *v8 + 8)) > *(float *)(v11
                                                                                        + 4
                                                                                        * *(unsigned int *)(v10 + 16 * v8[1] + 8)))
        {
          ++v8;
          uint64_t v7 = v9;
        }
      }
      uint64_t v12 = *v8;
      uint64_t v13 = *a4;
      uint64_t v14 = v10 + 16 * v13;
      unsigned int v16 = *(_DWORD *)(v14 + 8);
      unsigned int v15 = (unsigned int *)(v14 + 8);
      if (*(float *)(v11 + 4 * *(unsigned int *)(v10 + 16 * v12 + 8)) <= *(float *)(v11 + 4 * v16))
      {
        do
        {
          *a4 = v12;
          a4 = v8;
          if (v5 < v7) {
            break;
          }
          uint64_t v17 = 2 * v7;
          uint64_t v7 = (2 * v7) | 1;
          int v8 = (unsigned int *)(result + 4 * v7);
          uint64_t v18 = v17 + 2;
          if (v18 < a3
            && *(float *)(v11 + 4 * *(unsigned int *)(v10 + 16 * *v8 + 8)) > *(float *)(v11
                                                                                          + 4
                                                                                          * *(unsigned int *)(v10 + 16 * v8[1] + 8)))
          {
            ++v8;
            uint64_t v7 = v18;
          }
          uint64_t v12 = *v8;
        }
        while (*(float *)(v11 + 4 * *(unsigned int *)(v10 + 16 * v12 + 8)) <= *(float *)(v11 + 4 * *v15));
        *a4 = v13;
      }
    }
  }
  return result;
}

void sub_19E4A61DC(void *a1, unint64_t a2)
{
  uint64_t v3 = a1[2];
  uint64_t v4 = (char *)a1[3];
  unint64_t v5 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v4[-v3] >> 3);
  if (v5 >= a1[1])
  {
    if ((char *)v3 == v4) {
      __assert_rtn("worst", "PriorityQueue.h", 55, "!m_predictions.empty()");
    }
    double v14 = *(double *)(a2 + 8);
    if (v14 >= *(double *)(v3 + 8))
    {
      unsigned int v15 = (long long *)a1[2];
      do
      {
        unint64_t v16 = v5 >> 1;
        uint64_t v17 = (uint64_t)v15 + 40 * (v5 >> 1);
        double v18 = *(double *)(v17 + 8);
        unint64_t v19 = (long long *)(v17 + 40);
        v5 += ~(v5 >> 1);
        if (v14 < v18) {
          unint64_t v5 = v16;
        }
        else {
          unsigned int v15 = v19;
        }
      }
      while (v5);
      char v20 = (long long *)(v3 + 40);
      if ((long long *)(v3 + 40) != v15)
      {
        for (uint64_t i = (long long *)(v3 + 40); ; uint64_t i = (long long *)((char *)i + 40))
        {
          long long v22 = *(long long *)((char *)i - 40);
          uint64_t v23 = *((void *)i - 1);
          long long v24 = i[1];
          *(long long *)((char *)i - 40) = *i;
          long long v25 = *(long long *)((char *)i - 24);
          *((void *)i - 3) = 0;
          *((void *)i - 2) = 0;
          *(long long *)((char *)i - ++*(_DWORD *)(result + 24) = v24;
          *((void *)i - 1) = *((void *)i + 4);
          long long *i = v22;
          i[1] = v25;
          *((void *)i + 4) = v23;
          if ((long long *)((char *)i + 40) == v15) {
            break;
          }
          if (i == v20) {
            char v20 = (long long *)((char *)i + 40);
          }
        }
        if (i != v20)
        {
          uint64_t v36 = v20;
          while (1)
          {
            long long v37 = i[1];
            long long v78 = *i;
            uint64_t v38 = *((void *)i + 4);
            *((void *)i + 3) = 0;
            *((void *)i + 4) = 0;
            *((void *)i + 2) = 0;
            long long *i = *v36;
            i[1] = v36[1];
            *((void *)i + 4) = *((void *)v36 + 4);
            long long *v36 = v78;
            v36[1] = v37;
            *((void *)v36 + 4) = v38;
            uint64_t i = (long long *)((char *)i + 40);
            uint64_t v36 = (long long *)((char *)v36 + 40);
            BOOL v39 = i == v20;
            if (v36 == v15)
            {
              if (i == v20) {
                break;
              }
              uint64_t v36 = (long long *)((char *)v20 + 40);
              while (1)
              {
                long long v79 = *i;
                uint64_t v40 = *((void *)i + 4);
                long long v41 = i[1];
                *((void *)i + 2) = 0;
                *((void *)i + 3) = 0;
                *((void *)i + 4) = 0;
                long long *i = *v20;
                i[1] = v20[1];
                *((void *)i + 4) = *((void *)v20 + 4);
                *char v20 = v79;
                v20[1] = v41;
                *((void *)v20 + 4) = v40;
                uint64_t i = (long long *)((char *)i + 40);
                BOOL v39 = i == v20;
                if (v36 != v15) {
                  break;
                }
                if (i == v20) {
                  goto LABEL_47;
                }
              }
            }
            if (v39) {
              char v20 = v36;
            }
          }
        }
      }
LABEL_47:
      *(long long *)((char *)v15 - 40) = *(_OWORD *)a2;
      if ((long long *)((char *)v15 - 40) != (long long *)a2)
      {
        uint64_t v42 = (void *)v15 - 3;
        int v43 = *(char **)(a2 + 16);
        CFTypeRef v44 = *(char **)(a2 + 24);
LABEL_67:
        sub_19E44A444(v42, v43, v44, (v44 - v43) >> 2);
      }
    }
  }
  else
  {
    if (v4 == (char *)v3)
    {
      int64_t v13 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v4[-v3] >> 3);
    }
    else
    {
      unint64_t v7 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v4[-v3] >> 3);
      uint64_t v8 = a1[2];
      do
      {
        unint64_t v9 = v7 >> 1;
        uint64_t v10 = v8 + 40 * (v7 >> 1);
        double v11 = *(double *)(v10 + 8);
        uint64_t v12 = v10 + 40;
        v7 += ~(v7 >> 1);
        if (*(double *)(a2 + 8) < v11) {
          unint64_t v7 = v9;
        }
        else {
          uint64_t v8 = v12;
        }
      }
      while (v7);
      int64_t v13 = 0xCCCCCCCCCCCCCCCDLL * ((v8 - v3) >> 3);
    }
    uint64_t v26 = (char *)(v3 + 40 * v13);
    unint64_t v27 = a1[4];
    if ((unint64_t)v4 >= v27)
    {
      unint64_t v32 = v5 + 1;
      if (v32 > 0x666666666666666) {
        sub_19E37C7C4();
      }
      unint64_t v33 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v27 - v3) >> 3);
      if (2 * v33 > v32) {
        unint64_t v32 = 2 * v33;
      }
      if (v33 >= 0x333333333333333) {
        unint64_t v34 = 0x666666666666666;
      }
      else {
        unint64_t v34 = v32;
      }
      if (v34)
      {
        if (v34 > 0x666666666666666) {
          sub_19E37C2B8();
        }
        unint64_t v35 = (char *)operator new(40 * v34);
      }
      else
      {
        unint64_t v35 = 0;
      }
      uint64_t v54 = &v35[40 * v13];
      int v81 = &v35[40 * v34];
      if (v13 == v34)
      {
        if (v13 < 1)
        {
          if (v13) {
            unint64_t v62 = 2 * v13;
          }
          else {
            unint64_t v62 = 1;
          }
          if (v62 > 0x666666666666666) {
            sub_19E37C2B8();
          }
          uint64_t v63 = (char *)operator new(40 * v62);
          uint64_t v54 = &v63[40 * (v62 >> 2)];
          int v81 = &v63[40 * v62];
          if (v35) {
            operator delete(v35);
          }
        }
        else
        {
          v54 -= 40 * ((v13 + 1) >> 1);
        }
      }
      long long v64 = *(_OWORD *)a2;
      *((void *)v54 + 2) = 0;
      *(_OWORD *)uint64_t v54 = v64;
      *((void *)v54 + 3) = 0;
      *((void *)v54 + 4) = 0;
      int v66 = *(unsigned char **)(a2 + 16);
      int v65 = *(unsigned char **)(a2 + 24);
      int64_t v67 = v65 - v66;
      if (v65 != v66)
      {
        if (v67 < 0) {
          sub_19E37C7C4();
        }
        char v68 = (char *)operator new(v65 - v66);
        *((void *)v54 + 2) = v68;
        *((void *)v54 + 3) = v68;
        uint64_t v69 = &v68[4 * (v67 >> 2)];
        *((void *)v54 + 4) = v69;
        memcpy(v68, v66, v67);
        *((void *)v54 + 3) = v69;
      }
      uint64_t v70 = v54 + 40;
      unint64_t v80 = v54 + 40;
      uint64_t v71 = (char *)a1[2];
      if (v71 != v26)
      {
        unint64_t v72 = v26;
        do
        {
          *(_OWORD *)(v54 - 40) = *(_OWORD *)((char *)v72 - 40);
          *((void *)v54 - 2) = 0;
          *((void *)v54 - 1) = 0;
          *((void *)v54 - 3) = 0;
          *(_OWORD *)(v54 - ++*(_DWORD *)(result + 24) = *(_OWORD *)((char *)v72 - 24);
          *((void *)v54 - 1) = *((void *)v72 - 1);
          v54 -= 40;
          *((void *)v72 - 3) = 0;
          *((void *)v72 - 2) = 0;
          *((void *)v72 - 1) = 0;
          unint64_t v72 = (_OWORD *)((char *)v72 - 40);
        }
        while (v72 != (_OWORD *)v71);
        uint64_t v70 = v80;
      }
      long long v73 = (char *)a1[3];
      if (v73 != v26)
      {
        do
        {
          *(_OWORD *)uint64_t v70 = *(_OWORD *)v26;
          *((void *)v70 + 3) = 0;
          *((void *)v70 + 4) = 0;
          *((void *)v70 + 2) = 0;
          *((_OWORD *)v70 + 1) = *((_OWORD *)v26 + 1);
          *((void *)v70 + 4) = *((void *)v26 + 4);
          *((void *)v26 + 2) = 0;
          *((void *)v26 + 3) = 0;
          *((void *)v26 + 4) = 0;
          v70 += 40;
          v26 += 40;
        }
        while (v26 != v73);
        uint64_t v26 = (char *)a1[3];
      }
      uint64_t v74 = (char *)a1[2];
      a1[2] = v54;
      a1[3] = v70;
      a1[4] = v81;
      if (v26 == v74)
      {
        if (!v26) {
          return;
        }
      }
      else
      {
        do
        {
          uint64_t v75 = (void *)*((void *)v26 - 3);
          if (v75)
          {
            *((void *)v26 - 2) = v75;
            operator delete(v75);
          }
          v26 -= 40;
        }
        while (v26 != v74);
        uint64_t v26 = v74;
        if (!v74) {
          return;
        }
      }
      operator delete(v26);
      return;
    }
    if (v26 == v4)
    {
      *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
      uint64_t v45 = v3 + 40 * v13;
      *(void *)(v45 + 16) = 0;
      CFTypeRef v46 = (void *)(v45 + 16);
      v46[1] = 0;
      uint64_t v47 = (char **)(v46 + 1);
      v46[2] = 0;
      uint64_t v48 = (char **)(v46 + 2);
      unint64_t v50 = *(unsigned char **)(a2 + 16);
      uint64_t v49 = *(unsigned char **)(a2 + 24);
      int64_t v51 = v49 - v50;
      if (v49 != v50)
      {
        if (v51 < 0) {
          sub_19E37C7C4();
        }
        uint64_t v52 = (char *)operator new(v49 - v50);
        void *v46 = v52;
        *uint64_t v47 = v52;
        unint64_t v53 = &v52[4 * (v51 >> 2)];
        *uint64_t v48 = v53;
        memcpy(v52, v50, v51);
        *uint64_t v47 = v53;
      }
      a1[3] = v4 + 40;
    }
    else
    {
      int v28 = v26 + 40;
      uint64_t v29 = v4 - 40;
      int64_t v76 = v13;
      if ((unint64_t)v4 < 0x28)
      {
        uint64_t v31 = a1[3];
      }
      else
      {
        int64_t v30 = v4 - 40;
        uint64_t v31 = a1[3];
        do
        {
          *(_OWORD *)uint64_t v31 = *(_OWORD *)v30;
          *(void *)(v31 + ++*(_DWORD *)(result + 24) = 0;
          *(void *)(v31 + 32) = 0;
          *(void *)(v31 + 16) = 0;
          *(_OWORD *)(v31 + 16) = *((_OWORD *)v30 + 1);
          *(void *)(v31 + 32) = *((void *)v30 + 4);
          *((void *)v30 + 2) = 0;
          *((void *)v30 + 3) = 0;
          *((void *)v30 + 4) = 0;
          v31 += 40;
          v30 += 40;
        }
        while (v30 < v4);
      }
      a1[3] = v31;
      if (v4 != v28)
      {
        uint64_t v55 = 0;
        uint64_t v56 = -8 * ((v4 - v28) >> 3);
        do
        {
          unint64_t v57 = &v29[v55];
          unint64_t v58 = &v4[v55];
          uint64_t v60 = (void **)&v4[v55 - 24];
          unint64_t v59 = *v60;
          *(_OWORD *)&v4[v55 - 40] = *(_OWORD *)&v29[v55 - 40];
          if (v59)
          {
            *((void *)v58 - 2) = v59;
            operator delete(v59);
            *uint64_t v60 = 0;
            *(void *)&v4[v55 - 16] = 0;
            *(void *)&v4[v55 - 8] = 0;
          }
          *(_OWORD *)uint64_t v60 = *(_OWORD *)(v57 - 24);
          *((void *)v58 - 1) = *((void *)v57 - 1);
          *((void *)v57 - 3) = 0;
          *((void *)v57 - 2) = 0;
          *((void *)v57 - 1) = 0;
          v55 -= 40;
        }
        while (v56 != v55);
      }
      unint64_t v61 = (char *)a2;
      if ((unint64_t)v26 <= a2) {
        unint64_t v61 = (char *)(a2 + 40 * (a1[3] > a2));
      }
      *(_OWORD *)uint64_t v26 = *(_OWORD *)v61;
      if (v26 != v61)
      {
        uint64_t v42 = (void *)(v3 + 40 * v76 + 16);
        int v43 = (char *)*((void *)v61 + 2);
        CFTypeRef v44 = (char *)*((void *)v61 + 3);
        goto LABEL_67;
      }
    }
  }
}

void sub_19E4A6898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_19E457BD4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19E4A68E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 224);
  uint64_t v3 = *(void *)(a1 + 232);
  if (v4 == v3)
  {
    uint64_t v6 = (void *)(a1 + 200);
    uint64_t v5 = *(void *)(a1 + 200);
    uint64_t v8 = *(void *)(a1 + 208);
    v176 = (void *)(a1 + 208);
    if (v5 != v8)
    {
      unint64_t v10 = 0;
      goto LABEL_18;
    }
    goto LABEL_298;
  }
  uint64_t v6 = (void *)(a1 + 200);
  uint64_t v5 = *(void *)(a1 + 200);
  unint64_t v7 = *(void *)(a1 + 248);
  uint64_t v8 = *(void *)(a1 + 208);
  v176 = (void *)(a1 + 208);
  if ((v7 & 0x8000000000000000) != 0)
  {
    if (v5 != v8) {
LABEL_297:
    }
      __assert_rtn("flushAccumulatedTokens", "LMStreamTokenizer.cpp", 274, "externalTokenIndexInBounds");
LABEL_298:
    __assert_rtn("flushAccumulatedTokens", "LMStreamTokenizer.cpp", 273, "!m_internalTokens.empty()");
  }
  if (v5 == v8) {
    goto LABEL_298;
  }
  if (v7 >= (v3 - v4) >> 5) {
    goto LABEL_297;
  }
  unint64_t v9 = 0;
  unint64_t v10 = (v8 - v5) >> 5;
  if (v10 <= 1) {
    uint64_t v11 = 1;
  }
  else {
    uint64_t v11 = (v8 - v5) >> 5;
  }
  uint64_t v12 = v4 + 32 * v7;
  int64_t v13 = (void *)(v12 + 8);
  double v14 = (void *)(v12 + 16);
  unsigned int v15 = (void *)(v5 + 16);
  while (v10 != v9)
  {
    uint64_t v16 = *v14 + *v13;
    uint64_t v17 = *(v15 - 1);
    if ((v17 >= v16 || *v15 + v17 > v16) && (v17 != *v13 || *v15 != *v14))
    {
      unint64_t v10 = v9;
      break;
    }
    ++v9;
    v15 += 4;
    if (v11 == v9) {
      __assert_rtn("flushAccumulatedTokens", "LMStreamTokenizer.cpp", 290, "internalTokenIndex < m_internalTokens.size()");
    }
  }
LABEL_18:
  uint64_t v18 = *(void *)(v5 + 32 * v10 + 8);
  uint64_t v19 = *(void *)(v8 - 16) + *(void *)(v8 - 24);
  if (v18 < v19)
  {
    char v20 = 0;
    char v174 = 0;
    char v172 = 0;
    char v21 = 0;
    int v22 = 0;
    int v23 = 0;
    unsigned int v24 = 0;
    long long v25 = (int *)(*(void *)(a1 + 256) + 4 * v18);
    uint64_t v26 = v19 - v18;
    while (1)
    {
      int v27 = v23;
      int v28 = *v25++;
      int v23 = 0;
      switch(v28)
      {
        case 1:
          if (v22 == 2) {
            int v29 = 3;
          }
          else {
            int v29 = v22;
          }
          int v23 = 0;
          char v174 = 1;
          if (v22) {
            int v22 = v29;
          }
          else {
            int v22 = 1;
          }
          goto LABEL_34;
        case 2:
          int v23 = 0;
          char v172 = 1;
          if ((v174 & 1) == 0) {
            goto LABEL_20;
          }
          goto LABEL_34;
        case 4:
          int v23 = v27 + 1;
          if ((v27 + 1) >= 3) {
            int v22 = 3;
          }
          goto LABEL_32;
        case 5:
        case 7:
          int v23 = 0;
          goto LABEL_32;
        case 6:
          int v23 = 0;
          ++v24;
          if (v22 == 1) {
            int v22 = 2;
          }
LABEL_32:
          char v20 = 1;
          goto LABEL_33;
        case 11:
        case 12:
          int v23 = 0;
          char v21 = 1;
          if ((v174 & 1) == 0) {
            goto LABEL_20;
          }
          goto LABEL_34;
        default:
LABEL_33:
          if ((v174 & 1) == 0) {
            goto LABEL_20;
          }
LABEL_34:
          if ((v20 & 1) != 0 && (v172 & 1) != 0 && (v21 & 1) != 0 && v24 >= 2)
          {
            char v20 = 1;
            char v172 = 1;
            char v174 = 1;
            goto LABEL_46;
          }
LABEL_20:
          if (!--v26) {
            goto LABEL_46;
          }
          break;
      }
    }
  }
  unsigned int v24 = 0;
  int v22 = 0;
  char v172 = 0;
  char v174 = 0;
  char v20 = 0;
LABEL_46:
  uint64_t v191 = 0;
  int v192 = &v191;
  uint64_t v193 = 0x3802000000;
  v194 = sub_19E4A7C2C;
  unint64_t v195 = nullsub_85;
  long long v196 = xmmword_19E572FE0;
  uint64_t v187 = 0;
  int v188 = &v187;
  uint64_t v189 = 0x2000000000;
  char v190 = 0;
  unint64_t v165 = v6;
  BOOL v167 = 0;
  if ((v174 & 1) == 0)
  {
    BOOL v171 = 0;
    goto LABEL_131;
  }
  BOOL v171 = 0;
  if ((v20 & 1) == 0)
  {
LABEL_131:
    uint64_t v65 = *v6;
    if (v10 < (uint64_t)(*v176 - *v6) >> 5)
    {
      char v66 = 0;
      CFStringRef theString1 = (CFStringRef)v192[5];
      int64_t v67 = (char *)theString1 + v192[6];
      do
      {
        uint64_t v72 = v192[5];
        if (v72 == -1) {
          goto LABEL_178;
        }
        uint64_t v73 = v65 + 32 * v10;
        uint64_t v74 = *(void *)(v73 + 8);
        uint64_t v75 = v192[6];
        uint64_t v76 = v75 + v72;
        uint64_t v77 = *(void *)(v73 + 16) + v74;
        BOOL v78 = v74 < v72 || v76 <= v74;
        char v81 = !v78 && v77 > v72 && v77 <= v76;
        if (!(v66 & 1 | ((v81 & 1) == 0)))
        {
          unsigned int v83 = *(char **)(a1 + 224);
          unint64_t v82 = *(char **)(a1 + 232);
          uint64_t v84 = v82 - v83;
          if (v82 == v83
            || ((uint64_t v85 = *((void *)v82 - 3), v86 = *((void *)v82 - 2) + v85, (uint64_t)theString1 < v86)
              ? (BOOL v87 = v85 < (uint64_t)v67)
              : (BOOL v87 = 0),
                !v87))
          {
            unint64_t v88 = *(void *)(a1 + 240);
            if ((unint64_t)v82 >= v88)
            {
              uint64_t v90 = v84 >> 5;
              unint64_t v91 = (v84 >> 5) + 1;
              if (v91 >> 59) {
                sub_19E37C7C4();
              }
              uint64_t v92 = v88 - (void)v83;
              if (v92 >> 4 > v91) {
                unint64_t v91 = v92 >> 4;
              }
              if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFE0) {
                unint64_t v93 = 0x7FFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v93 = v91;
              }
              if (v93)
              {
                if (v93 >> 59) {
                  sub_19E37C2B8();
                }
                long long v94 = (char *)operator new(32 * v93);
              }
              else
              {
                long long v94 = 0;
              }
              uint64_t v95 = &v94[32 * v90];
              *(_DWORD *)uint64_t v95 = 0;
              *((void *)v95 + 1) = v72;
              *((void *)v95 + 2) = v75;
              *((void *)v95 + 3) = -1;
              long long v96 = v95;
              if (v82 != v83)
              {
                do
                {
                  long long v97 = *((_OWORD *)v82 - 1);
                  *((_OWORD *)v96 - 2) = *((_OWORD *)v82 - 2);
                  *((_OWORD *)v96 - 1) = v97;
                  v96 -= 32;
                  v82 -= 32;
                }
                while (v82 != v83);
                unint64_t v82 = *(char **)(a1 + 224);
              }
              unint64_t v89 = v95 + 32;
              *(void *)(a1 + 2++*(_DWORD *)(result + 24) = v96;
              *(void *)(a1 + 232) = v95 + 32;
              *(void *)(a1 + 240) = &v94[32 * v93];
              if (v82) {
                operator delete(v82);
              }
              uint64_t v6 = v165;
            }
            else
            {
              *(_DWORD *)unint64_t v82 = 0;
              *((void *)v82 + 1) = v72;
              *((void *)v82 + 2) = v75;
              unint64_t v89 = v82 + 32;
              *((void *)v82 + 3) = -1;
            }
            *(void *)(a1 + 232) = v89;
            char v66 = 1;
            if (v81) {
              goto LABEL_136;
            }
            goto LABEL_178;
          }
          sub_19E4A7CC0(a1, v86, (int64_t)&v67[-v86], 0);
          char v66 = 1;
        }
        if (v81) {
          goto LABEL_136;
        }
LABEL_178:
        uint64_t v98 = *(void *)(a1 + 232);
        uint64_t v99 = *(void *)(a1 + 200);
        if (*(void *)(a1 + 224) == v98)
        {
          uint64_t v68 = *(void *)(v99 + 32 * v10 + 8);
        }
        else
        {
          uint64_t v100 = *(void *)(v98 - 24);
          uint64_t v101 = *(void *)(v98 - 16) + v100;
          uint64_t v102 = v99 + 32 * v10;
          uint64_t v68 = *(void *)(v102 + 8);
          if (v68 < v101)
          {
            uint64_t v103 = *(void *)(v102 + 16);
            if (v103 + v68 <= v101) {
              goto LABEL_136;
            }
            if (v100 < v103 + v68)
            {
              int v71 = 0;
              int64_t v70 = v68 - v101 + v103;
              uint64_t v68 = v101;
              goto LABEL_135;
            }
          }
        }
        uint64_t v69 = v99 + 32 * v10;
        int64_t v70 = *(void *)(v69 + 16);
        int v71 = *(_DWORD *)v69;
LABEL_135:
        sub_19E4A7CC0(a1, v68, v70, v71);
LABEL_136:
        ++v10;
        uint64_t v65 = *v6;
      }
      while (v10 < (uint64_t)(*v176 - *v6) >> 5);
    }
    char v104 = v174 | v172 ^ 1;
    CFStringRef v105 = (const __CFString *)*MEMORY[0x1E4F1D218];
    char v175 = v104;
    CFStringRef v173 = (const __CFString *)*MEMORY[0x1E4F1D218];
    while (1)
    {
      uint64_t v107 = *(void *)(a1 + 248);
      uint64_t v108 = *(void *)(a1 + 224);
      if (v107 >= ((*(void *)(a1 + 232) - v108) >> 5) - 1)
      {
        _Block_object_dispose(&v187, 8);
        _Block_object_dispose(&v191, 8);
        return;
      }
      uint64_t v109 = v107 + 1;
      *(void *)(a1 + 248) = v109;
      uint64_t v110 = (int *)(v108 + 32 * v109);
      unsigned int v112 = (uint64_t *)(v110 + 2);
      uint64_t v111 = *((void *)v110 + 1);
      uint64_t v114 = (unint64_t *)(v110 + 4);
      uint64_t v113 = *((void *)v110 + 2);
      uint64_t v115 = *(void *)(a1 + 256);
      uint64_t v116 = *(void *)(a1 + 264);
      uint64_t v117 = v113 + v111 - 1;
      BOOL v118 = v113 + v111 < 1 || v116 == v115;
      if (!v118 && (v116 - v115) >> 2 > (unint64_t)v117)
      {
        if (v113 + v111 != 1)
        {
          while (*(_DWORD *)(v115 + 4 * v117) == 15)
          {
            BOOL v78 = v117-- <= 1;
            if (v78)
            {
              uint64_t v117 = 0;
              break;
            }
          }
        }
        int v120 = *(_DWORD *)(v115 + 4 * v117);
        if (v120 == 15) {
          int v120 = 0;
        }
      }
      else
      {
        int v120 = 0;
      }
      *((void *)v110 + 3) = *(void *)(a1 + 184) - *(void *)(a1 + 176);
      if (*v110) {
        BOOL v121 = 0;
      }
      else {
        BOOL v121 = (v120 - 11) >= 3;
      }
      if (v121)
      {
        if (v113 == v192[6] && v111 == v192[5])
        {
          if (v171)
          {
            int v106 = 64;
LABEL_185:
            *uint64_t v110 = v106;
            goto LABEL_186;
          }
          if (*((unsigned char *)v188 + 24))
          {
            int v106 = 5;
            goto LABEL_185;
          }
          if (v167)
          {
            int v106 = 63;
            goto LABEL_185;
          }
        }
        else
        {
          if (v120 == 8 || v120 == 5)
          {
LABEL_217:
            *uint64_t v110 = 6;
            goto LABEL_186;
          }
          if ((v104 & 1) == 0)
          {
            CFStringRef Value = (const __CFString *)CFLocaleGetValue(*(CFLocaleRef *)a1, v105);
            if (CFStringCompare(Value, @"en", 0)
              && CFStringCompare(Value, @"es", 0)
              && CFStringCompare(Value, @"fr", 0))
            {
              *uint64_t v110 = 3;
              goto LABEL_186;
            }
            CFStringRef theString1a = Value;
            uint64_t v125 = *(void *)(a1 + 176);
            uint64_t v126 = *v112;
            uint64_t v127 = (char *)(v125 + *v112);
            unint64_t v128 = *v114;
            int64_t v129 = (char *)(v125 + *v114 + *v112);
            unint64_t v130 = v129 - v127;
            if ((unint64_t)(v129 - v127) > 0x7FFFFFFFFFFFFFF7) {
              sub_19E37C958();
            }
            if (v130 > 0x16)
            {
              unint64_t v166 = *v114;
              uint64_t v134 = (v130 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v130 | 7) != 0x17) {
                uint64_t v134 = v130 | 7;
              }
              uint64_t v135 = v134 + 1;
              v131 = (void **)operator new(v134 + 1);
              uint64_t v199 = v129 - v127;
              int64_t v200 = v135 | 0x8000000000000000;
              unint64_t v198 = v131;
              unint64_t v128 = v166;
              if (v166)
              {
LABEL_234:
                if (v128 >= 0x20 && (unint64_t)v131 - v126 - v125 >= 0x20)
                {
                  unint64_t v155 = v128 & 0xFFFFFFFFFFFFFFE0;
                  int64_t v132 = (void **)((char *)v131 + (v128 & 0xFFFFFFFFFFFFFFE0));
                  size_t v156 = (long long *)(v125 + v126 + 16);
                  long long v157 = v131 + 2;
                  unint64_t v158 = v128 & 0xFFFFFFFFFFFFFFE0;
                  do
                  {
                    long long v159 = *v156;
                    *(v157 - 1) = *(v156 - 1);
                    *long long v157 = v159;
                    v156 += 2;
                    v157 += 2;
                    v158 -= 32;
                  }
                  while (v158);
                  if (v128 == v155)
                  {
                    v131 = (void **)((char *)v131 + (v128 & 0xFFFFFFFFFFFFFFE0));
                    goto LABEL_243;
                  }
                  v127 += v155;
                }
                else
                {
                  int64_t v132 = v131;
                }
                v131 = v132;
                do
                {
                  char v133 = *v127++;
                  *(unsigned char *)v131 = v133;
                  v131 = (void **)((char *)v131 + 1);
                }
                while (v127 != v129);
              }
            }
            else
            {
              HIBYTE(v200) = (_BYTE)v129 - (_BYTE)v127;
              v131 = (void **)&v198;
              if (v128) {
                goto LABEL_234;
              }
            }
LABEL_243:
            *(unsigned char *)v131 = 0;
            uint64_t v136 = HIBYTE(v200);
            int v137 = SHIBYTE(v200);
            if (v200 < 0) {
              uint64_t v136 = v199;
            }
            if (v136 == 1)
            {
              unint64_t v138 = (void **)&v198;
              if (v200 < 0) {
                unint64_t v138 = v198;
              }
              int v139 = *(unsigned __int8 *)v138;
              if (v139 == 49)
              {
                *uint64_t v110 = 130;
                if (v137 < 0) {
                  goto LABEL_256;
                }
                goto LABEL_257;
              }
              if (v139 == 48)
              {
                if (CFStringCompare(theString1a, @"fr", 0)) {
                  int v140 = 131;
                }
                else {
                  int v140 = 130;
                }
                *uint64_t v110 = v140;
                if (v137 < 0) {
LABEL_256:
                }
                  operator delete(v198);
LABEL_257:
                char v104 = v175;
                CFStringRef v105 = v173;
                goto LABEL_186;
              }
            }
            *uint64_t v110 = 131;
            if (v137 < 0) {
              goto LABEL_256;
            }
            goto LABEL_257;
          }
          switch(v120)
          {
            case 1:
              break;
            case 6:
              if (v113 == 1) {
                goto LABEL_217;
              }
              goto LABEL_224;
            case 7:
LABEL_224:
              int v106 = 7;
              goto LABEL_185;
            case 10:
              int v106 = 499;
              goto LABEL_185;
            default:
              CFStringRef v141 = (const __CFString *)CFLocaleGetValue(*(CFLocaleRef *)a1, v105);
              if (CFEqual(v141, @"ja")
                || CFEqual(v141, @"zh"))
              {
                break;
              }
              CFStringRef v142 = *(CFStringRef *)(a1 + 176);
              uint64_t v143 = *v112;
              char v144 = (char *)v142 + *v112;
              unint64_t v145 = *v114;
              uint64_t v146 = (char *)v142 + *v114 + *v112;
              unint64_t v147 = v146 - v144;
              if ((unint64_t)(v146 - v144) > 0x7FFFFFFFFFFFFFF7) {
                sub_19E37C958();
              }
              if (v147 > 0x16)
              {
                CFStringRef theString1b = *(CFStringRef *)(a1 + 176);
                uint64_t v160 = (v147 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v147 | 7) != 0x17) {
                  uint64_t v160 = v147 | 7;
                }
                uint64_t v161 = v160 + 1;
                int v148 = (void **)operator new(v160 + 1);
                uint64_t v199 = v146 - v144;
                int64_t v200 = v161 | 0x8000000000000000;
                unint64_t v198 = v148;
                CFStringRef v142 = theString1b;
                if (!v145) {
                  goto LABEL_285;
                }
              }
              else
              {
                HIBYTE(v200) = (_BYTE)v146 - (_BYTE)v144;
                int v148 = (void **)&v198;
                if (!v145) {
                  goto LABEL_285;
                }
              }
              if (v147 < 0x20 || (unint64_t)((char *)v148 - v144) < 0x20)
              {
                unint64_t v150 = v148;
              }
              else
              {
                unint64_t v149 = v147 & 0xFFFFFFFFFFFFFFE0;
                unint64_t v150 = (void **)((char *)v148 + (v147 & 0xFFFFFFFFFFFFFFE0));
                size_t v151 = (long long *)((char *)&v142->data + v143);
                int v152 = v148 + 2;
                unint64_t v153 = v147 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  long long v154 = *v151;
                  *(v152 - 1) = *(v151 - 1);
                  _OWORD *v152 = v154;
                  v151 += 2;
                  v152 += 2;
                  v153 -= 32;
                }
                while (v153);
                if (v147 == v149)
                {
                  int v148 = (void **)((char *)v148 + (v147 & 0xFFFFFFFFFFFFFFE0));
                  goto LABEL_285;
                }
                v144 += v149;
              }
              int v148 = v150;
              do
              {
                char v162 = *v144++;
                *(unsigned char *)int v148 = v162;
                int v148 = (void **)((char *)v148 + 1);
              }
              while (v144 != v146);
LABEL_285:
              *(unsigned char *)int v148 = 0;
              *uint64_t v110 = sub_19E4AA6F8((uint64_t)&v198);
              char v104 = v175;
              CFStringRef v105 = v173;
              if (SHIBYTE(v200) < 0) {
                operator delete(v198);
              }
              break;
          }
        }
      }
LABEL_186:
      (*(void (**)(uint64_t, uint64_t, unint64_t, void))(a2 + 16))(a2, *(void *)(a1 + 176) + *v112, *v114, *v110);
    }
  }
  if (v18 >= v19)
  {
    BOOL v31 = 0;
    BOOL v30 = 0;
  }
  else
  {
    BOOL v30 = 0;
    BOOL v31 = 0;
    while (1)
    {
      int v32 = *(unsigned __int8 *)(*(void *)(a1 + 176) + v18);
      if (v32 != 64 && v32 != 35) {
        break;
      }
      BOOL v30 = v32 == 64;
      BOOL v31 = v32 == 35;
      if (v19 == ++v18)
      {
        uint64_t v18 = v19;
        break;
      }
    }
  }
  uint64_t v33 = -1;
  BOOL v167 = v31;
  BOOL v171 = v30;
  if (!v31 && !v30 || *(void *)(a1 + 8))
  {
    uint64_t v36 = v19;
    if (v24 < 2) {
      goto LABEL_102;
    }
  }
  else
  {
    if (v18 < v19)
    {
      uint64_t v34 = v18;
      uint64_t v35 = v18;
      while (1)
      {
        int v37 = *(_DWORD *)(*(void *)(a1 + 256) + 4 * v35);
        if ((v37 - 1) >= 3)
        {
          if (v37 == 15) {
            goto LABEL_62;
          }
          int v38 = *(unsigned __int8 *)(*(void *)(a1 + 176) + v35);
          if (v38 == 95) {
            uint64_t v36 = v19;
          }
          else {
            uint64_t v36 = v34;
          }
          if (v38 != 95) {
            goto LABEL_63;
          }
        }
        uint64_t v34 = v35 + 1;
LABEL_62:
        uint64_t v36 = v19;
LABEL_63:
        ++v35;
        uint64_t v19 = v36;
        if (v35 >= v36) {
          goto LABEL_74;
        }
      }
    }
    uint64_t v36 = v19;
LABEL_74:
    if (v36 <= v18)
    {
      uint64_t v33 = -1;
      if (v24 < 2) {
        goto LABEL_102;
      }
    }
    else
    {
      uint64_t v33 = v18 - 1;
      *(void *)&long long v196 = v18 - 1;
      *((void *)&v196 + 1) = v36 - v18 + 1;
      if (v24 < 2) {
        goto LABEL_102;
      }
    }
  }
  uint64_t v39 = v18;
  if (v36 > v18)
  {
    uint64_t v39 = v18;
    while (*(_DWORD *)(*(void *)(a1 + 256) + 4 * v39) != 1)
    {
      if (v36 == ++v39) {
        goto LABEL_102;
      }
    }
  }
  uint64_t v40 = v39;
  if (v39 < v36)
  {
    uint64_t v40 = v39;
    while (*(_DWORD *)(*(void *)(a1 + 256) + 4 * v40) == 1)
    {
      if (v36 == ++v40) {
        goto LABEL_102;
      }
    }
  }
  uint64_t v41 = v36 - 2;
  if (v40 < v36 - 2)
  {
    uint64_t v42 = *(void *)(a1 + 256);
    if (*(_DWORD *)(v42 + 4 * v40) == 6 && *(_DWORD *)(v42 + 4 * v40 + 4) == 1)
    {
      uint64_t v43 = v40 + 2;
      if (*(_DWORD *)(v42 + 4 * (v40 + 2)) == 6)
      {
        if (v43 < v41)
        {
          while (1)
          {
            uint64_t v44 = v42 + 4 * v40;
            if (*(_DWORD *)(v44 + 12) != 1) {
              break;
            }
            if (*(_DWORD *)(v44 + 16) != 6)
            {
              uint64_t v43 = v40 + 2;
              break;
            }
            uint64_t v45 = v40 + 2;
            uint64_t v46 = v40 + 4;
            v43 += 2;
            v40 += 2;
            if (v46 >= v41)
            {
              uint64_t v43 = v45 + 2;
              break;
            }
          }
        }
        if (v43 >= v36 - 1 || *(_DWORD *)(v42 + 4 * v43 + 4) != 1)
        {
          *(void *)&long long v196 = v39;
          *((void *)&v196 + 1) = v43 - v39 + 1;
          uint64_t v33 = v39;
        }
      }
    }
  }
LABEL_102:
  if (v33 != -1) {
    goto LABEL_131;
  }
  if (v22 != 3) {
    goto LABEL_131;
  }
  CFStringRef theString = CFStringCreateWithBytesNoCopy(0, (const UInt8 *)(*(void *)(a1 + 176) + v18), v36 - v18, *(_DWORD *)(a1 + 16), 0, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
  if (!theString) {
    goto LABEL_131;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EC009328, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EC009328))
  {
    sub_19E48B82C();
    __cxa_guard_release(&qword_1EC009328);
  }
  v178[0] = MEMORY[0x1E4F143A8];
  v178[1] = 0x40000000;
  v179 = sub_19E4A7C3C;
  size_t v180 = &unk_1E59A0520;
  uint64_t v183 = a1;
  CFStringRef v184 = theString;
  uint64_t v185 = v18;
  uint64_t v186 = v36;
  size_t v181 = &v191;
  int v182 = &v187;
  CFIndex Length = CFStringGetLength(theString);
  std::mutex::lock((std::mutex *)&qword_1EC009330);
  uint64_t v48 = qword_1EC009370;
  if (!qword_1EC009370) {
    goto LABEL_130;
  }
  uint64_t v203 = 0;
  size_t v204 = &v203;
  uint64_t v205 = 0x2000000000;
  uint64_t v49 = (void (*)(uint64_t, const __CFString *, void, CFIndex))off_1EC009298;
  v206 = off_1EC009298;
  if (!off_1EC009298)
  {
    unint64_t v198 = (void **)MEMORY[0x1E4F143A8];
    uint64_t v199 = 0x40000000;
    int64_t v200 = (int64_t)sub_19E48BA24;
    v201 = &unk_1E59A0128;
    int v202 = &v203;
    sub_19E48BA24((uint64_t)&v198);
    uint64_t v49 = (void (*)(uint64_t, const __CFString *, void, CFIndex))v204[3];
  }
  _Block_object_dispose(&v203, 8);
  if (v49)
  {
    v49(v48, theString, 0, Length);
    uint64_t v50 = qword_1EC009370;
    uint64_t v203 = 0;
    size_t v204 = &v203;
    uint64_t v205 = 0x2000000000;
    int64_t v51 = (uint64_t (*)(uint64_t, uint64_t))off_1EC0092A8;
    v206 = off_1EC0092A8;
    if (!off_1EC0092A8)
    {
      unint64_t v198 = (void **)MEMORY[0x1E4F143A8];
      uint64_t v199 = 0x40000000;
      int64_t v200 = (int64_t)sub_19E48BB64;
      v201 = &unk_1E59A0150;
      int v202 = &v203;
      sub_19E48BB64((uint64_t)&v198);
      int64_t v51 = (uint64_t (*)(uint64_t, uint64_t))v204[3];
    }
    _Block_object_dispose(&v203, 8);
    if (v51)
    {
      CFArrayRef v52 = (const __CFArray *)v51(v50, 1);
      CFArrayRef v53 = v52;
      char v197 = 0;
      if (v52)
      {
        CFIndex Count = CFArrayGetCount(v52);
        CFIndex v164 = Count - 1;
        if (Count >= 1)
        {
          CFIndex v55 = 0;
          while (1)
          {
            CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v53, v55);
            uint64_t v203 = 0;
            size_t v204 = &v203;
            uint64_t v205 = 0x2000000000;
            unint64_t v57 = (uint64_t (*)(const void *))off_1EC0092A0;
            v206 = off_1EC0092A0;
            if (!off_1EC0092A0)
            {
              unint64_t v198 = (void **)MEMORY[0x1E4F143A8];
              uint64_t v199 = 0x40000000;
              int64_t v200 = (int64_t)sub_19E48BCA4;
              v201 = &unk_1E59A0178;
              int v202 = &v203;
              sub_19E48BCA4((uint64_t)&v198);
              unint64_t v57 = (uint64_t (*)(const void *))v204[3];
            }
            _Block_object_dispose(&v203, 8);
            if (!v57) {
              goto LABEL_292;
            }
            uint64_t v58 = v57(ValueAtIndex);
            uint64_t v60 = v59;
            uint64_t v203 = 0;
            size_t v204 = &v203;
            uint64_t v205 = 0x2000000000;
            unint64_t v61 = (uint64_t (*)(const void *))off_1EC009290;
            v206 = off_1EC009290;
            if (!off_1EC009290)
            {
              unint64_t v198 = (void **)MEMORY[0x1E4F143A8];
              uint64_t v199 = 0x40000000;
              int64_t v200 = (int64_t)sub_19E48BDE4;
              v201 = &unk_1E59A01A0;
              int v202 = &v203;
              sub_19E48BDE4((uint64_t)&v198);
              unint64_t v61 = (uint64_t (*)(const void *))v204[3];
            }
            _Block_object_dispose(&v203, 8);
            if (!v61) {
              goto LABEL_292;
            }
            uint64_t v62 = v61(ValueAtIndex);
            v179((uint64_t)v178, v58, v60, v62, &v197);
            if (!v197)
            {
              BOOL v118 = v164 == v55++;
              if (!v118) {
                continue;
              }
            }
            break;
          }
        }
        CFRelease(v53);
      }
      uint64_t v63 = qword_1EC009370;
      uint64_t v203 = 0;
      size_t v204 = &v203;
      uint64_t v205 = 0x2000000000;
      long long v64 = (void (*)(uint64_t))off_1EC009278;
      v206 = off_1EC009278;
      if (!off_1EC009278)
      {
        unint64_t v198 = (void **)MEMORY[0x1E4F143A8];
        uint64_t v199 = 0x40000000;
        int64_t v200 = (int64_t)sub_19E48BF24;
        v201 = &unk_1E59A01C8;
        int v202 = &v203;
        sub_19E48BF24((uint64_t)&v198);
        long long v64 = (void (*)(uint64_t))v204[3];
      }
      _Block_object_dispose(&v203, 8);
      if (!v64)
      {
LABEL_292:
        dlerror();
        abort_report_np();
        goto LABEL_302;
      }
      v64(v63);
LABEL_130:
      std::mutex::unlock((std::mutex *)&qword_1EC009330);
      CFRelease(theString);
      goto LABEL_131;
    }
  }
  dlerror();
  abort_report_np();
LABEL_302:
  __break(1u);
}

void sub_19E4A7AD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
}

__n128 sub_19E4A7C2C(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

uint64_t sub_19E4A7C3C(uint64_t result, uint64_t a2, uint64_t a3, int a4, unsigned char *a5)
{
  if (a4 == 1)
  {
    uint64_t v6 = (void *)result;
    __n128 result = sub_19E439008(*(const __CFString **)(result + 56), a2, a3, (char *)(*(void *)(*(void *)(result + 48) + 176) + v6[8]), v6[9] - v6[8], *(_DWORD *)(*(void *)(result + 48) + 16));
    uint64_t v7 = *(void *)(v6[4] + 8);
    *(void *)(v7 + 40) = result;
    *(void *)(v7 + 48) = v8;
    *(void *)(*(void *)(v6[4] + 8) + 40) += v6[8];
    *(unsigned char *)(*(void *)(v6[5] + 8) + ++*(_DWORD *)(result + 24) = 1;
    *a5 = 1;
  }
  return result;
}

void sub_19E4A7CC0(uint64_t a1, uint64_t a2, int64_t a3, int a4)
{
  uint64_t v5 = a2;
  if (!a3)
  {
    long long v25 = *(char **)(a1 + 232);
    unint64_t v24 = *(void *)(a1 + 240);
    if ((unint64_t)v25 >= v24)
    {
      BOOL v30 = *(char **)(a1 + 224);
      uint64_t v31 = (v25 - v30) >> 5;
      unint64_t v32 = v31 + 1;
      if ((unint64_t)(v31 + 1) >> 59) {
        sub_19E37C7C4();
      }
      uint64_t v33 = v24 - (void)v30;
      if (v33 >> 4 > v32) {
        unint64_t v32 = v33 >> 4;
      }
      if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v34 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v34 = v32;
      }
      if (v34)
      {
        if (v34 >> 59) {
          sub_19E37C2B8();
        }
        uint64_t v35 = (char *)operator new(32 * v34);
      }
      else
      {
        uint64_t v35 = 0;
      }
      uint64_t v115 = &v35[32 * v31];
      *(_DWORD *)uint64_t v115 = a4;
      *((void *)v115 + 1) = v5;
      *((_OWORD *)v115 + 1) = xmmword_19E572990;
      uint64_t v26 = v115 + 32;
      if (v25 != v30)
      {
        do
        {
          long long v116 = *((_OWORD *)v25 - 1);
          *((_OWORD *)v115 - 2) = *((_OWORD *)v25 - 2);
          *((_OWORD *)v115 - 1) = v116;
          v115 -= 32;
          v25 -= 32;
        }
        while (v25 != v30);
        long long v25 = *(char **)(a1 + 224);
      }
      *(void *)(a1 + 2++*(_DWORD *)(result + 24) = v115;
      *(void *)(a1 + 232) = v26;
      *(void *)(a1 + 240) = &v35[32 * v34];
      if (v25) {
        operator delete(v25);
      }
    }
    else
    {
      *(_DWORD *)long long v25 = a4;
      *((void *)v25 + 1) = a2;
      *((_OWORD *)v25 + 1) = xmmword_19E572990;
      uint64_t v26 = v25 + 32;
    }
    *(void *)(a1 + 232) = v26;
    return;
  }
  long long __p = 0;
  __int16 v122 = 0;
  unint64_t v123 = 0;
  UErrorCode status = U_ZERO_ERROR;
  ut = (UText *)(a1 + 32);
  utext_openUTF8((UText *)(a1 + 32), (const char *)(*(void *)(a1 + 176) + a2), a3, &status);
  if (status <= U_ZERO_ERROR)
  {
    ubrk_setUText();
    if (status >= U_ILLEGAL_ARGUMENT_ERROR)
    {
      int v28 = *(char **)(a1 + 232);
      unint64_t v27 = *(void *)(a1 + 240);
      if ((unint64_t)v28 >= v27)
      {
        uint64_t v109 = *(char **)(a1 + 224);
        uint64_t v110 = (v28 - v109) >> 5;
        unint64_t v111 = v110 + 1;
        if ((unint64_t)(v110 + 1) >> 59) {
          sub_19E37C7C4();
        }
        uint64_t v112 = v27 - (void)v109;
        if (v112 >> 4 > v111) {
          unint64_t v111 = v112 >> 4;
        }
        if ((unint64_t)v112 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v113 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v113 = v111;
        }
        if (v113)
        {
          if (v113 >> 59) {
            sub_19E37C2B8();
          }
          uint64_t v114 = (char *)operator new(32 * v113);
        }
        else
        {
          uint64_t v114 = 0;
        }
        uint64_t v117 = &v114[32 * v110];
        *(_DWORD *)uint64_t v117 = a4;
        *((void *)v117 + 1) = v5;
        *((void *)v117 + 2) = a3;
        *((void *)v117 + 3) = -1;
        int v29 = v117 + 32;
        if (v28 != v109)
        {
          do
          {
            long long v118 = *((_OWORD *)v28 - 1);
            *((_OWORD *)v117 - 2) = *((_OWORD *)v28 - 2);
            *((_OWORD *)v117 - 1) = v118;
            v117 -= 32;
            v28 -= 32;
          }
          while (v28 != v109);
          int v28 = *(char **)(a1 + 224);
        }
        *(void *)(a1 + 2++*(_DWORD *)(result + 24) = v117;
        *(void *)(a1 + 232) = v29;
        *(void *)(a1 + 240) = &v114[32 * v113];
        if (v28) {
          operator delete(v28);
        }
      }
      else
      {
        *(_DWORD *)int v28 = a4;
        *((void *)v28 + 1) = v5;
        *((void *)v28 + 2) = a3;
        *((void *)v28 + 3) = -1;
        int v29 = v28 + 32;
      }
      *(void *)(a1 + 232) = v29;
      int v23 = (char *)__p;
      if (__p) {
        goto LABEL_24;
      }
      return;
    }
    uint64_t v36 = ubrk_first();
    uint64_t v37 = 0;
    char v38 = 0;
    uint64_t v39 = v5 + a3;
    while (v36 != -1)
    {
      uint64_t v41 = v5 + (int)v36;
      uint64_t v42 = *(void *)(a1 + 256);
      uint64_t v43 = *(void *)(a1 + 264);
      uint64_t v44 = -1;
      unint64_t v45 = (v43 - v42) >> 2;
      if (v43 != v42 && (v41 & 0x8000000000000000) == 0 && v45 > v41)
      {
        uint64_t v44 = v5 + (int)v36;
        while (*(_DWORD *)(v42 + 4 * v44) == 15)
        {
          if (v45 == ++v44)
          {
            uint64_t v44 = (v43 - v42) >> 2;
            break;
          }
        }
      }
      int v46 = 0;
      if (v44 >= v5 && v44 <= v39) {
        int v46 = *(_DWORD *)(v42 + 4 * v44);
      }
      uint64_t v47 = -1;
      if ((v44 & 0x8000000000000000) == 0 && v43 != v42)
      {
        unint64_t v48 = v44 + 1;
        if (v45 > v48)
        {
          uint64_t v47 = v48;
          while (*(_DWORD *)(v42 + 4 * v47) == 15)
          {
            if (v45 == ++v47)
            {
              uint64_t v47 = (v43 - v42) >> 2;
              break;
            }
          }
        }
      }
      int v49 = 0;
      if (v47 >= v5 && v47 <= v39) {
        int v49 = *(_DWORD *)(v42 + 4 * v47);
      }
      unint64_t v50 = v41 - 1;
      if (v43 == v42 || v41 < 1 || v45 <= v50) {
        goto LABEL_74;
      }
      if (v41 == 1)
      {
LABEL_72:
        uint64_t v51 = 0;
      }
      else
      {
        uint64_t v51 = v41 - 1;
        while (*(_DWORD *)(v42 + 4 * v51) == 15)
        {
          if (v51-- <= 1) {
            goto LABEL_72;
          }
        }
      }
      if (*(_DWORD *)(v42 + 4 * v51) == 15) {
LABEL_74:
      }
        uint64_t v51 = -1;
      int v53 = 0;
      if (v51 >= v5 && v51 <= v39) {
        int v53 = *(_DWORD *)(v42 + 4 * v51);
      }
      if ((v38 & 1) == 0)
      {
        if (v53 == 13 && v46 == 13)
        {
          int v54 = v36 - v37;
          CFIndex v55 = v122;
          if ((unint64_t)v122 < v123) {
            goto LABEL_40;
          }
          uint64_t v56 = v39;
          unint64_t v57 = (char *)__p;
          int64_t v58 = v122 - (unsigned char *)__p;
          uint64_t v59 = (v122 - (unsigned char *)__p) >> 2;
          unint64_t v60 = v59 + 1;
          if ((unint64_t)(v59 + 1) >> 62) {
            sub_19E37C7C4();
          }
          uint64_t v61 = v123 - (void)__p;
          if ((uint64_t)(v123 - (void)__p) >> 1 > v60) {
            unint64_t v60 = v61 >> 1;
          }
          if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v62 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v62 = v60;
          }
          if (v62)
          {
            if (v62 >> 62) {
              sub_19E37C2B8();
            }
            uint64_t v63 = operator new(4 * v62);
          }
          else
          {
            uint64_t v63 = 0;
          }
          long long v64 = &v63[4 * v59];
          *(_DWORD *)long long v64 = v54;
          uint64_t v40 = v64 + 4;
          if (v55 == v57)
          {
            uint64_t v39 = v56;
          }
          else
          {
            unint64_t v65 = v55 - 4 - v57;
            if (v65 < 0x2C)
            {
              uint64_t v39 = v56;
              goto LABEL_113;
            }
            unint64_t v66 = v55 - &v63[v58];
            uint64_t v39 = v56;
            if (v66 < 0x20) {
              goto LABEL_229;
            }
            uint64_t v67 = (v65 >> 2) + 1;
            uint64_t v68 = &v63[4 * v59 - 16];
            uint64_t v69 = v55 - 16;
            uint64_t v70 = v67 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v71 = *(_OWORD *)v69;
              *(v68 - 1) = *((_OWORD *)v69 - 1);
              _OWORD *v68 = v71;
              v68 -= 2;
              v69 -= 32;
              v70 -= 8;
            }
            while (v70);
            v64 -= 4 * (v67 & 0x7FFFFFFFFFFFFFF8);
            v55 -= 4 * (v67 & 0x7FFFFFFFFFFFFFF8);
            if (v67 != (v67 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_229:
              do
              {
LABEL_113:
                int v72 = *((_DWORD *)v55 - 1);
                v55 -= 4;
                *((_DWORD *)v64 - 1) = v72;
                v64 -= 4;
              }
              while (v55 != v57);
            }
          }
          uint64_t v73 = &v63[4 * v62];
          goto LABEL_115;
        }
        if (v46 == 3 && (v53 - 1) <= 1 && (v49 - 1) < 2)
        {
          char v38 = 1;
          goto LABEL_80;
        }
        if ((int)v36 >= 1)
        {
          if (!v46 || v46 == 9)
          {
LABEL_100:
            if (v46 != 3
              || v53 != 3
              || *(unsigned __int8 *)(*(void *)(a1 + 176) + v41) != *(unsigned __int8 *)(*(void *)(a1 + 176) + v50))
            {
              goto LABEL_162;
            }
            goto LABEL_79;
          }
          switch(v53)
          {
            case 1:
              BOOL v76 = v46 != 14 && (v46 - 4) < 0xFFFFFFFD;
              break;
            case 2:
              BOOL v76 = (v46 - 11) < 3;
              break;
            case 4:
              BOOL v76 = (v46 - 4) < 0xFFFFFFFE;
              break;
            case 6:
              BOOL v77 = (v46 & 0xFFFFFFFB) == 2;
              goto LABEL_136;
            case 8:
              BOOL v77 = v46 == 8;
              goto LABEL_136;
            case 11:
              BOOL v77 = (v46 & 0xFFFFFFFD) == 12;
              goto LABEL_136;
            case 13:
              BOOL v77 = v46 == 13;
LABEL_136:
              BOOL v76 = !v77;
              break;
            case 14:
              BOOL v76 = v46 != 1 && (v46 - 15) < 0xFFFFFFFC;
              break;
            default:
              goto LABEL_100;
          }
          if (v46 == 3 || v76)
          {
LABEL_162:
            int v54 = v36 - v37;
            CFIndex v55 = v122;
            if ((unint64_t)v122 >= v123)
            {
              unint64_t v57 = (char *)__p;
              int64_t v91 = v122 - (unsigned char *)__p;
              uint64_t v92 = (v122 - (unsigned char *)__p) >> 2;
              unint64_t v93 = v92 + 1;
              if ((unint64_t)(v92 + 1) >> 62) {
                sub_19E37C7C4();
              }
              uint64_t v94 = v123 - (void)__p;
              if ((uint64_t)(v123 - (void)__p) >> 1 > v93) {
                unint64_t v93 = v94 >> 1;
              }
              if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v89 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v89 = v93;
              }
              if (v89)
              {
                if (v89 >> 62) {
                  sub_19E37C2B8();
                }
                uint64_t v90 = operator new(4 * v89);
              }
              else
              {
                uint64_t v90 = 0;
              }
              long long v64 = &v90[4 * v92];
              *(_DWORD *)long long v64 = v54;
              uint64_t v40 = v64 + 4;
              if (v55 != v57)
              {
                unint64_t v95 = v55 - 4 - v57;
                if (v95 < 0x2C) {
                  goto LABEL_230;
                }
                if ((unint64_t)(v55 - &v90[v91]) < 0x20) {
                  goto LABEL_230;
                }
                uint64_t v96 = (v95 >> 2) + 1;
                long long v97 = &v90[4 * v92 - 16];
                uint64_t v98 = v55 - 16;
                uint64_t v99 = v96 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  long long v100 = *(_OWORD *)v98;
                  *(v97 - 1) = *((_OWORD *)v98 - 1);
                  _OWORD *v97 = v100;
                  v97 -= 2;
                  v98 -= 32;
                  v99 -= 8;
                }
                while (v99);
                v64 -= 4 * (v96 & 0x7FFFFFFFFFFFFFF8);
                v55 -= 4 * (v96 & 0x7FFFFFFFFFFFFFF8);
                if (v96 != (v96 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_230:
                  do
                  {
                    int v101 = *((_DWORD *)v55 - 1);
                    v55 -= 4;
                    *((_DWORD *)v64 - 1) = v101;
                    v64 -= 4;
                  }
                  while (v55 != v57);
                }
              }
LABEL_180:
              uint64_t v73 = &v90[4 * v89];
LABEL_115:
              long long __p = v64;
              __int16 v122 = v40;
              unint64_t v123 = (unint64_t)v73;
              if (v57)
              {
                uint64_t v74 = v40;
                operator delete(v57);
                uint64_t v40 = v74;
              }
LABEL_41:
              char v38 = 0;
              __int16 v122 = v40;
              goto LABEL_42;
            }
LABEL_40:
            *(_DWORD *)CFIndex v55 = v54;
            uint64_t v40 = v55 + 4;
            goto LABEL_41;
          }
        }
        if (v53 == 2 && (v49 == 9 || !v49))
        {
          uint64_t v79 = (int)v36 >= v39 ? v39 : (int)v36;
          if (v5 < v79)
          {
            char v80 = 0;
            uint64_t v81 = v79 - v5;
            unint64_t v82 = (int *)(v42 + 4 * v5);
            while (1)
            {
              int v84 = *v82++;
              int v83 = v84;
              if ((v84 - 1) > 1) {
                break;
              }
              v80 |= v83 == 1;
              if (!--v81)
              {
                if ((v80 & 1) == 0) {
                  break;
                }
                int v54 = v36 - v37;
                CFIndex v55 = v122;
                if ((unint64_t)v122 >= v123)
                {
                  unint64_t v57 = (char *)__p;
                  int64_t v85 = v122 - (unsigned char *)__p;
                  uint64_t v86 = (v122 - (unsigned char *)__p) >> 2;
                  unint64_t v87 = v86 + 1;
                  if ((unint64_t)(v86 + 1) >> 62) {
                    sub_19E37C7C4();
                  }
                  uint64_t v88 = v123 - (void)__p;
                  if ((uint64_t)(v123 - (void)__p) >> 1 > v87) {
                    unint64_t v87 = v88 >> 1;
                  }
                  if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v89 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v89 = v87;
                  }
                  if (v89)
                  {
                    if (v89 >> 62) {
                      sub_19E37C2B8();
                    }
                    uint64_t v90 = operator new(4 * v89);
                  }
                  else
                  {
                    uint64_t v90 = 0;
                  }
                  long long v64 = &v90[4 * v86];
                  *(_DWORD *)long long v64 = v54;
                  uint64_t v40 = v64 + 4;
                  if (v55 != v57)
                  {
                    unint64_t v102 = v55 - 4 - v57;
                    if (v102 < 0x2C) {
                      goto LABEL_231;
                    }
                    if ((unint64_t)(v55 - &v90[v85]) < 0x20) {
                      goto LABEL_231;
                    }
                    uint64_t v103 = (v102 >> 2) + 1;
                    char v104 = &v90[4 * v86 - 16];
                    CFStringRef v105 = v55 - 16;
                    uint64_t v106 = v103 & 0x7FFFFFFFFFFFFFF8;
                    do
                    {
                      long long v107 = *(_OWORD *)v105;
                      *(v104 - 1) = *((_OWORD *)v105 - 1);
                      *char v104 = v107;
                      v104 -= 2;
                      v105 -= 32;
                      v106 -= 8;
                    }
                    while (v106);
                    v64 -= 4 * (v103 & 0x7FFFFFFFFFFFFFF8);
                    v55 -= 4 * (v103 & 0x7FFFFFFFFFFFFFF8);
                    if (v103 != (v103 & 0x7FFFFFFFFFFFFFF8))
                    {
LABEL_231:
                      do
                      {
                        int v108 = *((_DWORD *)v55 - 1);
                        v55 -= 4;
                        *((_DWORD *)v64 - 1) = v108;
                        v64 -= 4;
                      }
                      while (v55 != v57);
                    }
                  }
                  goto LABEL_180;
                }
                goto LABEL_40;
              }
            }
          }
        }
      }
LABEL_79:
      char v38 = 0;
LABEL_80:
      uint64_t v36 = v37;
LABEL_42:
      uint64_t v37 = v36;
      uint64_t v36 = ubrk_next();
    }
  }
  uint64_t v8 = (int *)__p;
  unint64_t v9 = (int *)v122;
  if (__p != v122)
  {
    unint64_t v10 = *(char **)(a1 + 232);
    do
    {
      uint64_t v12 = *v8;
      unint64_t v13 = *(void *)(a1 + 240);
      if ((unint64_t)v10 < v13)
      {
        *(_DWORD *)unint64_t v10 = 0;
        *((void *)v10 + 1) = v5;
        *((void *)v10 + 2) = v12;
        uint64_t v11 = v10 + 32;
        *((void *)v10 + 3) = -1;
      }
      else
      {
        double v14 = *(unsigned char **)(a1 + 224);
        uint64_t v15 = (v10 - v14) >> 5;
        unint64_t v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 59) {
          sub_19E37C7C4();
        }
        uint64_t v17 = v13 - (void)v14;
        if (v17 >> 4 > v16) {
          unint64_t v16 = v17 >> 4;
        }
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v18 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v18 = v16;
        }
        if (v18)
        {
          if (v18 >> 59) {
            sub_19E37C2B8();
          }
          uint64_t v19 = (char *)operator new(32 * v18);
        }
        else
        {
          uint64_t v19 = 0;
        }
        char v20 = &v19[32 * v15];
        *(_DWORD *)char v20 = 0;
        *((void *)v20 + 1) = v5;
        *((void *)v20 + 2) = v12;
        *((void *)v20 + 3) = -1;
        char v21 = v20;
        if (v10 != v14)
        {
          do
          {
            long long v22 = *((_OWORD *)v10 - 1);
            *((_OWORD *)v21 - 2) = *((_OWORD *)v10 - 2);
            *((_OWORD *)v21 - 1) = v22;
            v21 -= 32;
            v10 -= 32;
          }
          while (v10 != v14);
          unint64_t v10 = *(char **)(a1 + 224);
        }
        uint64_t v11 = v20 + 32;
        *(void *)(a1 + 2++*(_DWORD *)(result + 24) = v21;
        *(void *)(a1 + 232) = v20 + 32;
        *(void *)(a1 + 240) = &v19[32 * v18];
        if (v10) {
          operator delete(v10);
        }
      }
      *(void *)(a1 + 232) = v11;
      v5 += v12;
      ++v8;
      unint64_t v10 = v11;
    }
    while (v8 != v9);
  }
  utext_close(ut);
  int v23 = (char *)__p;
  if (__p)
  {
LABEL_24:
    __int16 v122 = v23;
    operator delete(v23);
  }
}

void sub_19E4A86C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E4A87BC(uint64_t a1, uint64_t **a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  uint64_t v5 = *(void *)(a1 + 72);
  uint64_t v6 = *a2;
  *a2 = 0;
  uint64_t v8 = v6;
  (*(void (**)(uint64_t, uint64_t **))(*(void *)v5 + 224))(v5, &v8);
  uint64_t v7 = v8;
  uint64_t v8 = 0;
  if (v7)
  {
    if (*v7)
    {
      sub_19E374B30(v7);
      if (*v7) {
        MEMORY[0x19F3BDCF0](*v7, 0x1010C4006136809);
      }
    }
    MEMORY[0x19F3BDCF0](v7, 0x20C4093837F09);
  }
  std::mutex::unlock(v4);
}

void sub_19E4A888C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E42C508((uint64_t **)va);
  std::mutex::unlock(v2);
  _Unwind_Resume(a1);
}

void sub_19E4A88A8(uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  (*(void (**)(void))(**(void **)(a1 + 72) + 216))(*(void *)(a1 + 72));
  std::mutex::unlock(v2);
}

void sub_19E4A8920(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19E4A8934(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  uint64_t v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 72) + 208))(*(void *)(a1 + 72), a2);
  std::mutex::unlock(v4);
  return v5;
}

void sub_19E4A89A8(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19E4A89BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 72) + 200))(*(void *)(a1 + 72), a2);
  std::mutex::unlock(v4);
}

void sub_19E4A8A34(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19E4A8A48(uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 72) + 192))(*(void *)(a1 + 72));
  std::mutex::unlock(v2);
  return v3;
}

void sub_19E4A8AAC(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19E4A8AC0(uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  (*(void (**)(void))(**(void **)(a1 + 72) + 184))(*(void *)(a1 + 72));
  std::mutex::unlock(v2);
}

void sub_19E4A8B28(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19E4A8B3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  uint64_t v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 72) + 176))(*(void *)(a1 + 72), a2);
  std::mutex::unlock(v4);
  return v5;
}

void sub_19E4A8BB0(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19E4A8BC4(uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  (*(void (**)(void))(**(void **)(a1 + 72) + 168))(*(void *)(a1 + 72));
  std::mutex::unlock(v2);
}

void sub_19E4A8C2C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19E4A8C40(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 72) + 160))(*(void *)(a1 + 72), a2);
  std::mutex::unlock(v4);
}

void sub_19E4A8CB8(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19E4A8CCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  uint64_t v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 72) + 152))(*(void *)(a1 + 72), a2);
  std::mutex::unlock(v4);
  return v5;
}

void sub_19E4A8D40(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19E4A8D54(uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 72) + 144))(*(void *)(a1 + 72));
  std::mutex::unlock(v2);
  return v3;
}

void sub_19E4A8DB8(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19E4A8DCC(uint64_t a1, float a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  (*(void (**)(void, float))(**(void **)(a1 + 72) + 136))(*(void *)(a1 + 72), a2);
  std::mutex::unlock(v4);
}

void sub_19E4A8E44(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19E4A8E58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  (*(void (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 72) + 128))(*(void *)(a1 + 72), a2, a3, a4);
  std::mutex::unlock(v8);
}

void sub_19E4A8EE8(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19E4A8EFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float a5)
{
  unint64_t v10 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  (*(void (**)(void, uint64_t, uint64_t, uint64_t, float))(**(void **)(a1 + 72) + 120))(*(void *)(a1 + 72), a2, a3, a4, a5);
  std::mutex::unlock(v10);
}

void sub_19E4A8F9C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19E4A8FB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  (*(void (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 72) + 112))(*(void *)(a1 + 72), a2, a3, a4);
  std::mutex::unlock(v8);
}

void sub_19E4A9048(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19E4A905C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  double v14 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 72) + 104))(*(void *)(a1 + 72), a2, a3, a4, a5, a6, a7);
  std::mutex::unlock(v14);
}

void sub_19E4A910C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19E4A9120(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v6 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  uint64_t v7 = (*(uint64_t (**)(void, uint64_t, float))(**(void **)(a1 + 72) + 96))(*(void *)(a1 + 72), a2, a3);
  std::mutex::unlock(v6);
  return v7;
}

void sub_19E4A91A4(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19E4A91B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  uint64_t v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 72) + 88))(*(void *)(a1 + 72), a2);
  std::mutex::unlock(v4);
  return v5;
}

void sub_19E4A922C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

float sub_19E4A9240(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  float v7 = (*(float (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 72) + 80))(*(void *)(a1 + 72), a2, a3);
  std::mutex::unlock(v6);
  return v7;
}

void sub_19E4A92C4(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19E4A92D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  uint64_t v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 72) + 72))(*(void *)(a1 + 72), a2);
  std::mutex::unlock(v4);
  return v5;
}

void sub_19E4A934C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19E4A9360(uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 72) + 64))(*(void *)(a1 + 72));
  std::mutex::unlock(v2);
  return v3;
}

void sub_19E4A93C4(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19E4A93D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  uint64_t v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 72) + 56))(*(void *)(a1 + 72), a2);
  std::mutex::unlock(v4);
  return v5;
}

void sub_19E4A944C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

float sub_19E4A9460(uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  float v3 = (*(float (**)(void))(**(void **)(a1 + 72) + 48))(*(void *)(a1 + 72));
  std::mutex::unlock(v2);
  return v3;
}

void sub_19E4A94CC(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19E4A94E0(uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 72) + 40))(*(void *)(a1 + 72));
  std::mutex::unlock(v2);
  return v3;
}

void sub_19E4A9544(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19E4A9558(uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 72) + 32))(*(void *)(a1 + 72));
  std::mutex::unlock(v2);
  return v3;
}

void sub_19E4A95BC(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19E4A95D0(uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 72) + 24))(*(void *)(a1 + 72));
  std::mutex::unlock(v2);
  return v3;
}

void sub_19E4A9634(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19E4A9648(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 72) + 16))(*(void *)(a1 + 72), a2, a3);
  std::mutex::unlock(v6);
}

void sub_19E4A96C8(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19E4A96DC(uint64_t a1)
{
  *(void *)a1 = &unk_1EF0BA0C0;
  uint64_t v2 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 8));
  JUMPOUT(0x19F3BDCF0);
}

uint64_t sub_19E4A9774(uint64_t a1)
{
  *(void *)a1 = &unk_1EF0BA0C0;
  uint64_t v2 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::mutex::~mutex((std::mutex *)(a1 + 8));
  return a1;
}

CFStringRef sub_19E4A97EC(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v2 = a1 + 56;
  uint64_t v3 = v4;
  if (!v4) {
    goto LABEL_12;
  }
  uint64_t v5 = v2;
  do
  {
    unsigned int v6 = *(_DWORD *)(v3 + 32);
    BOOL v7 = v6 >= a2;
    if (v6 >= a2) {
      uint64_t v8 = (uint64_t *)v3;
    }
    else {
      uint64_t v8 = (uint64_t *)(v3 + 8);
    }
    if (v7) {
      uint64_t v5 = v3;
    }
    uint64_t v3 = *v8;
  }
  while (*v8);
  if (v5 != v2 && *(_DWORD *)(v5 + 32) <= a2)
  {
    uint64_t v12 = (const char *)(v5 + 40);
    if (*(char *)(v5 + 63) < 0) {
      uint64_t v12 = *(const char **)v12;
    }
    return CFStringCreateWithCString(0, v12, 0x8000100u);
  }
  else
  {
LABEL_12:
    if (a2 > 5) {
      return 0;
    }
    sub_19E4A98F8(__p, a2);
    if (v14 >= 0) {
      unint64_t v9 = __p;
    }
    else {
      unint64_t v9 = (void **)__p[0];
    }
    CFStringRef v10 = CFStringCreateWithCString(0, (const char *)v9, 0x8000100u);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    return v10;
  }
}

void sub_19E4A98DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

size_t sub_19E4A98F8(void *a1, int a2)
{
  uint64_t v3 = "";
  uint64_t v4 = &unk_1E59A0540;
  switch(a2)
  {
    case 0:
      goto LABEL_82;
    case 1:
      uint64_t v4 = &unk_1E59A0550;
      goto LABEL_82;
    case 2:
      uint64_t v4 = &unk_1E59A0560;
      goto LABEL_82;
    case 3:
      uint64_t v4 = &unk_1E59A0570;
      goto LABEL_82;
    case 4:
      uint64_t v4 = &unk_1E59A0580;
      goto LABEL_82;
    case 5:
      uint64_t v4 = &unk_1E59A0590;
      goto LABEL_82;
    case 6:
      uint64_t v4 = &unk_1E59A05A0;
      goto LABEL_82;
    case 7:
      uint64_t v4 = &unk_1E59A05B0;
      goto LABEL_82;
    case 10:
      uint64_t v4 = &unk_1E59A05C0;
      goto LABEL_82;
    case 11:
      uint64_t v4 = &unk_1E59A05D0;
      goto LABEL_82;
    case 12:
      uint64_t v4 = &unk_1E59A05E0;
      goto LABEL_82;
    case 13:
      uint64_t v4 = &unk_1E59A05F0;
      goto LABEL_82;
    case 14:
      uint64_t v4 = &unk_1E59A0600;
      goto LABEL_82;
    case 15:
      uint64_t v4 = &unk_1E59A0610;
      goto LABEL_82;
    case 16:
      uint64_t v4 = &unk_1E59A0620;
      goto LABEL_82;
    case 17:
      uint64_t v4 = &unk_1E59A0630;
      goto LABEL_82;
    case 18:
      uint64_t v4 = &unk_1E59A0640;
      goto LABEL_82;
    case 19:
      uint64_t v4 = &unk_1E59A0650;
      goto LABEL_82;
    case 20:
      uint64_t v4 = &unk_1E59A0660;
      goto LABEL_82;
    case 21:
      uint64_t v4 = &unk_1E59A0670;
      goto LABEL_82;
    case 22:
      uint64_t v4 = &unk_1E59A0680;
      goto LABEL_82;
    case 23:
      uint64_t v4 = &unk_1E59A0690;
      goto LABEL_82;
    case 24:
      uint64_t v4 = &unk_1E59A06A0;
      goto LABEL_82;
    case 25:
      uint64_t v4 = &unk_1E59A06B0;
      goto LABEL_82;
    case 26:
      uint64_t v4 = &unk_1E59A06C0;
      goto LABEL_82;
    case 27:
      uint64_t v4 = &unk_1E59A06D0;
      goto LABEL_82;
    case 28:
      uint64_t v4 = &unk_1E59A06E0;
      goto LABEL_82;
    case 29:
      uint64_t v4 = &unk_1E59A06F0;
      goto LABEL_82;
    case 30:
      uint64_t v4 = &unk_1E59A0700;
      goto LABEL_82;
    case 31:
      uint64_t v4 = &unk_1E59A0710;
      goto LABEL_82;
    case 32:
      uint64_t v4 = &unk_1E59A0720;
      goto LABEL_82;
    case 33:
      uint64_t v4 = &unk_1E59A0730;
      goto LABEL_82;
    case 34:
      uint64_t v4 = &unk_1E59A0740;
      goto LABEL_82;
    case 35:
      uint64_t v4 = &unk_1E59A0750;
      goto LABEL_82;
    case 36:
      uint64_t v4 = &unk_1E59A0760;
      goto LABEL_82;
    case 37:
      uint64_t v4 = &unk_1E59A0770;
      goto LABEL_82;
    case 38:
      uint64_t v4 = &unk_1E59A0780;
      goto LABEL_82;
    case 39:
      uint64_t v4 = &unk_1E59A0790;
      goto LABEL_82;
    case 40:
      uint64_t v4 = &unk_1E59A07A0;
      goto LABEL_82;
    case 41:
      uint64_t v4 = &unk_1E59A07B0;
      goto LABEL_82;
    case 42:
      uint64_t v4 = &unk_1E59A07C0;
      goto LABEL_82;
    case 43:
      uint64_t v4 = &unk_1E59A07E0;
      goto LABEL_82;
    case 44:
      uint64_t v4 = &unk_1E59A07F0;
      goto LABEL_82;
    case 45:
      uint64_t v4 = &unk_1E59A0800;
      goto LABEL_82;
    case 46:
      uint64_t v4 = &unk_1E59A0810;
      goto LABEL_82;
    case 47:
      uint64_t v4 = &unk_1E59A0820;
      goto LABEL_82;
    case 48:
      uint64_t v4 = &unk_1E59A0830;
      goto LABEL_82;
    case 49:
      uint64_t v4 = &unk_1E59A0840;
      goto LABEL_82;
    case 50:
      uint64_t v4 = &unk_1E59A0850;
      goto LABEL_82;
    case 51:
      uint64_t v4 = &unk_1E59A0860;
      goto LABEL_82;
    case 52:
      uint64_t v4 = &unk_1E59A0870;
      goto LABEL_82;
    case 53:
      uint64_t v4 = &unk_1E59A0880;
      goto LABEL_82;
    case 54:
      uint64_t v4 = &unk_1E59A0890;
      goto LABEL_82;
    case 55:
      uint64_t v4 = &unk_1E59A08A0;
      goto LABEL_82;
    case 56:
      uint64_t v4 = &unk_1E59A08B0;
      goto LABEL_82;
    case 57:
      uint64_t v4 = &unk_1E59A08C0;
      goto LABEL_82;
    case 58:
      uint64_t v4 = &unk_1E59A08D0;
      goto LABEL_82;
    case 59:
      uint64_t v4 = &unk_1E59A08E0;
      goto LABEL_82;
    case 60:
      uint64_t v4 = &unk_1E59A08F0;
      goto LABEL_82;
    case 61:
      uint64_t v4 = &unk_1E59A0900;
      goto LABEL_82;
    case 62:
      uint64_t v4 = &unk_1E59A0910;
      goto LABEL_82;
    case 63:
      uint64_t v4 = &unk_1E59A0950;
      goto LABEL_82;
    case 64:
      uint64_t v4 = &unk_1E59A0960;
      goto LABEL_82;
    case 65:
      uint64_t v4 = &unk_1E59A0920;
      goto LABEL_82;
    case 66:
      uint64_t v4 = &unk_1E59A0930;
      goto LABEL_82;
    case 67:
      uint64_t v4 = &unk_1E59A0940;
      goto LABEL_82;
    case 68:
      uint64_t v4 = &unk_1E59A0980;
      goto LABEL_82;
    case 69:
      uint64_t v4 = &unk_1E59A0990;
      goto LABEL_82;
    case 70:
      uint64_t v4 = &unk_1E59A09A0;
      goto LABEL_82;
    case 71:
      uint64_t v4 = &unk_1E59A09B0;
      goto LABEL_82;
    case 72:
      uint64_t v4 = &unk_1E59A09C0;
      goto LABEL_82;
    case 89:
      uint64_t v4 = &unk_1E59A09D0;
      goto LABEL_82;
    case 120:
      uint64_t v4 = &unk_1E59A09E0;
      goto LABEL_82;
    case 123:
      uint64_t v4 = &unk_1E59A0A10;
      goto LABEL_82;
    case 126:
      uint64_t v4 = &unk_1E59A0A20;
      goto LABEL_82;
    case 127:
      uint64_t v4 = &unk_1E59A0A30;
      goto LABEL_82;
    case 128:
      uint64_t v4 = &unk_1E59A0A40;
      goto LABEL_82;
    case 129:
      uint64_t v4 = &unk_1E59A0A50;
      goto LABEL_82;
    case 130:
      uint64_t v4 = &unk_1E59A09F0;
      goto LABEL_82;
    case 131:
      uint64_t v4 = &unk_1E59A0A00;
      goto LABEL_82;
    case 499:
      uint64_t v4 = &unk_1E59A0970;
LABEL_82:
      uint64_t v3 = (const char *)*((void *)v4 + 1);
      break;
    default:
      break;
  }
  size_t result = strlen(v3);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    sub_19E37C958();
  }
  size_t v6 = result;
  if (result >= 0x17)
  {
    uint64_t v7 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v7 = result | 7;
    }
    uint64_t v8 = v7 + 1;
    unint64_t v9 = operator new(v7 + 1);
    a1[1] = v6;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v9;
    a1 = v9;
  }
  else
  {
    *((unsigned char *)a1 + 23) = result;
    if (!result) {
      goto LABEL_91;
    }
  }
  size_t result = (size_t)memmove(a1, v3, v6);
LABEL_91:
  *((unsigned char *)a1 + v6) = 0;
  return result;
}

size_t sub_19E4AA564@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  size_t v6 = *(void *)(a1 + 56);
  size_t result = a1 + 56;
  size_t v5 = v6;
  if (v6)
  {
    size_t v7 = result;
    do
    {
      unsigned int v8 = *(_DWORD *)(v5 + 32);
      BOOL v9 = v8 >= a2;
      if (v8 >= a2) {
        CFStringRef v10 = (size_t *)v5;
      }
      else {
        CFStringRef v10 = (size_t *)(v5 + 8);
      }
      if (v9) {
        size_t v7 = v5;
      }
      size_t v5 = *v10;
    }
    while (*v10);
    if (v7 != result && *(_DWORD *)(v7 + 32) <= a2)
    {
      uint64_t v11 = (const char *)(v7 + 40);
      if (*(char *)(v7 + 63) < 0) {
        uint64_t v11 = *(const char **)v11;
      }
      size_t result = strlen(v11);
      if (result >= 0x7FFFFFFFFFFFFFF8) {
        sub_19E37C958();
      }
      size_t v12 = result;
      if (result >= 0x17)
      {
        uint64_t v13 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((result | 7) != 0x17) {
          uint64_t v13 = result | 7;
        }
        uint64_t v14 = v13 + 1;
        uint64_t v15 = operator new(v13 + 1);
        a3[1] = v12;
        a3[2] = v14 | 0x8000000000000000;
        *a3 = v15;
        a3 = v15;
      }
      else
      {
        *((unsigned char *)a3 + 23) = result;
        if (!result) {
          goto LABEL_27;
        }
      }
      size_t result = (size_t)memmove(a3, v11, v12);
LABEL_27:
      *((unsigned char *)a3 + v12) = 0;
      return result;
    }
  }
  if (a2 > 0x1F3)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  else
  {
    return sub_19E4A98F8(a3, a2);
  }
  return result;
}

void sub_19E4AA688(uint64_t a1)
{
  *(void *)a1 = &unk_1EF0B9A68;
  sub_19E418A38(*(char **)(a1 + 56));
  sub_19E3CD3E0(*(char **)(a1 + 32));
  JUMPOUT(0x19F3BDCF0);
}

uint64_t sub_19E4AA6F8(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0)
  {
    sub_19E39369C(__p, *(void **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a1;
    uint64_t v9 = *(void *)(a1 + 16);
  }
  int v1 = SHIBYTE(v9);
  if (v9 >= 0) {
    size_t v2 = HIBYTE(v9);
  }
  else {
    size_t v2 = (size_t)__p[1];
  }
  if (v9 < 0)
  {
    uint64_t v5 = 0;
    size_t v6 = __p[0];
    uint64_t v4 = &dword_1E59A0A60;
    while (v2 != strlen(*(const char **)((char *)&unk_1E59A0540 + v5 + 8))
         || memcmp(v6, *(const void **)((char *)&unk_1E59A0540 + v5 + 8), v2))
    {
      v5 += 16;
      if (v5 == 1312) {
        goto LABEL_18;
      }
    }
    uint64_t v4 = (int *)((char *)&unk_1E59A0540 + v5);
  }
  else
  {
    uint64_t v3 = 0;
    uint64_t v4 = &dword_1E59A0A60;
    while (v2 != strlen(*(const char **)((char *)&unk_1E59A0540 + v3 + 8))
         || memcmp(__p, *(const void **)((char *)&unk_1E59A0540 + v3 + 8), v2))
    {
      v3 += 16;
      if (v3 == 1312) {
        goto LABEL_18;
      }
    }
    uint64_t v4 = (int *)((char *)&unk_1E59A0540 + v3);
  }
LABEL_18:
  if (v1 < 0)
  {
    operator delete(__p[0]);
    if (v4 != &dword_1E59A0A60) {
      return *v4;
    }
  }
  else if (v4 != &dword_1E59A0A60)
  {
    return *v4;
  }
  return 0;
}

CFStringRef LMLanguageModelCreateStringForSpecialTokenID(unsigned int a1)
{
  if (a1 > 0x1F3) {
    return 0;
  }
  sub_19E4A98F8(__p, a1);
  if (v5 >= 0) {
    int v1 = __p;
  }
  else {
    int v1 = (void **)__p[0];
  }
  CFStringRef v2 = CFStringCreateWithCString(0, (const char *)v1, 0x8000100u);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return v2;
}

void sub_19E4AA8D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E4AA8F0(uint64_t a1, void *a2, _DWORD *a3)
{
  uint64_t v3 = *(void *)(a1 + 80);
  if (a2) {
    *a2 = *(void *)(v3 + 32);
  }
  if (a3) {
    *a3 = *(_DWORD *)(v3 + 44);
  }
  return *(unsigned int *)(v3 + 40);
}

BOOL sub_19E4AA914(uint64_t a1)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  CFStringRef v2 = (void *)(a1 + 64);
  uint64_t v3 = *(void **)(a1 + 80);
  if (v3 != (void *)(a1 + 64))
  {
    uint64_t v4 = (void *)v3[1];
    if (v4)
    {
      do
      {
        char v5 = v4;
        uint64_t v4 = (void *)*v4;
      }
      while (v4);
    }
    else
    {
      do
      {
        char v5 = (void *)v3[2];
        BOOL v6 = *v5 == (void)v3;
        uint64_t v3 = v5;
      }
      while (!v6);
    }
    goto LABEL_61;
  }
  unint64_t v34 = (void *)(a1 + 64);
  char v5 = (void *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 24);
  if (*(void *)(a1 + 32) != v7)
  {
    unint64_t v8 = 0;
    int64x2_t v35 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    while (!(*(unsigned int (**)(void))(**(void **)(v7 + 8 * v8) + 16))(*(void *)(v7 + 8 * v8)))
    {
LABEL_10:
      ++v8;
      uint64_t v7 = *(void *)(a1 + 24);
      if (v8 >= (*(void *)(a1 + 32) - v7) >> 3) {
        goto LABEL_59;
      }
    }
    unsigned int v9 = 0;
    while (1)
    {
      int64x2_t v37 = v35;
      uint64_t v38 = 0;
      __int16 v39 = 0;
      char v40 = 1;
      long long v41 = xmmword_19E572FD0;
      int v42 = 0;
      long long v43 = xmmword_19E572FD0;
      unint64_t v44 = 0xFFEFFFFFFFFFFFFFLL;
      uint64_t v45 = 0;
      uint64_t v46 = 0;
      uint64_t v36 = 0;
      int v10 = (*(uint64_t (**)(void, void, char *))(**(void **)(v7 + 8 * v8) + 24))(*(void *)(v7 + 8 * v8), 0, (char *)&v36 + 4);
      LODWORD(v36) = v10;
      if (*(unsigned char *)(a1 + 48) && ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3) - 1 == v8) {
        HIDWORD(v36) = 5;
      }
      if ((v10 - 3) <= 0x1F0
        && ((v10 - 68) > 0x3C || ((0x7FFFFFFFFFFFFE0uLL >> (v10 - 68)) & 1) != 0))
      {
        goto LABEL_54;
      }
      uint64_t v11 = *(void **)(a1 + 8);
      size_t v12 = (void **)v11[23];
      if (v11[24] - (void)v12 == 16)
      {
        if (sub_19E41566C(*(void *)(a1 + 8), (uint64_t)&v36, 1, 0, 0, 0, 1, *v12)) {
          goto LABEL_54;
        }
        uint64_t v11 = *(void **)(a1 + 8);
      }
      if (HIDWORD(v36) == 5)
      {
        uint64_t v13 = v11[58];
        uint64_t v14 = v36;
        if (qword_1EC009490 != -1) {
          dispatch_once(&qword_1EC009490, &unk_1EF0BEE38);
        }
        *((void *)&v50 + 1) = 0;
        int v15 = sub_19E4B69CC(v13, v14, 0, 0, (uint64_t)&v37, 1, (uint64_t)&v49, 0);
        if (*((long long **)&v50 + 1) == &v49)
        {
          (*(void (**)(long long *))(v49 + 32))(&v49);
          if (v15) {
            goto LABEL_40;
          }
        }
        else
        {
          if (*((void *)&v50 + 1)) {
            (*(void (**)(void))(**((void **)&v50 + 1) + 40))(*((void *)&v50 + 1));
          }
          if (v15) {
            goto LABEL_40;
          }
        }
      }
      else
      {
        uint64_t v16 = v36;
        if (qword_1EC009490 != -1) {
          dispatch_once(&qword_1EC009490, &unk_1EF0BEE38);
        }
        long long v51 = 0u;
        long long v52 = 0u;
        long long v49 = 0u;
        long long v50 = 0u;
        unint64_t v48 = 0;
        char v17 = sub_19E413378((uint64_t)v11, v16 | (v16 << 32), (uint64_t *)&v49, (uint64_t)&v37, qword_1EC009488, 1, 1, v47, (__n128)0);
        if (v48 == v47)
        {
          (*(void (**)(void *))(v47[0] + 32))(v47);
          if (v17) {
            goto LABEL_40;
          }
        }
        else
        {
          if (v48) {
            (*(void (**)(void))(*v48 + 40))();
          }
          if (v17)
          {
LABEL_40:
            uint64_t v18 = v37.i64[0];
            int v19 = v36;
            int v20 = HIDWORD(v36);
            char v21 = v5;
            long long v22 = v5;
            uint64_t v23 = *v5;
            if (*v5)
            {
              while (1)
              {
                while (1)
                {
                  long long v22 = (void *)v23;
                  double v24 = *(double *)(v23 + 32);
                  unsigned int v25 = *(_DWORD *)(v23 + 40);
                  BOOL v26 = v36 < v25;
                  if (*(double *)v37.i64 != v24) {
                    BOOL v26 = *(double *)v37.i64 > v24;
                  }
                  if (!v26) {
                    break;
                  }
                  uint64_t v23 = *v22;
                  char v21 = v22;
                  if (!*v22) {
                    goto LABEL_51;
                  }
                }
                BOOL v27 = v25 < v36;
                if (*(double *)v37.i64 != v24) {
                  BOOL v27 = v24 > *(double *)v37.i64;
                }
                if (!v27) {
                  break;
                }
                uint64_t v23 = v22[1];
                if (!v23)
                {
                  char v21 = v22 + 1;
                  goto LABEL_51;
                }
              }
            }
            else
            {
LABEL_51:
              int v28 = operator new(0x30uLL);
              v28[4] = v18;
              *((_DWORD *)v28 + 10) = v19;
              *((_DWORD *)v28 + 11) = v20;
              *int v28 = 0;
              v28[1] = 0;
              v28[2] = v22;
              void *v21 = v28;
              uint64_t v29 = **(void **)(a1 + 56);
              if (v29)
              {
                *(void *)(a1 + 56) = v29;
                int v28 = (void *)*v21;
              }
              sub_19E37D324(*(uint64_t **)(a1 + 64), v28);
              ++*(void *)(a1 + 72);
            }
          }
        }
      }
LABEL_54:
      char v30 = (*(uint64_t (**)(void))(**(void **)(v7 + 8 * v8) + 16))(*(void *)(v7 + 8 * v8));
      if (v9++ >= 0x63) {
        char v32 = 0;
      }
      else {
        char v32 = v30;
      }
      if ((v32 & 1) == 0) {
        goto LABEL_10;
      }
    }
  }
LABEL_59:
  CFStringRef v2 = v34;
  if (*(void *)(a1 + 72)) {
    char v5 = *(void **)(a1 + 56);
  }
LABEL_61:
  *(void *)(a1 + 80) = v5;
  return v5 != v2;
}

void sub_19E4AAE18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
}

void sub_19E4AAE3C(uint64_t a1)
{
  sub_19E4AAE74(a1);
  JUMPOUT(0x19F3BDCF0);
}

uint64_t sub_19E4AAE74(uint64_t a1)
{
  *(void *)a1 = &unk_1EF0BB8B8;
  sub_19E418864(*(void **)(a1 + 64));
  CFStringRef v2 = *(void **)(a1 + 24);
  if (v2)
  {
    uint64_t v3 = *(void **)(a1 + 32);
    uint64_t v4 = *(void **)(a1 + 24);
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *--v3;
        uint64_t v5 = v6;
        *uint64_t v3 = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        }
      }
      while (v3 != v2);
      uint64_t v4 = *(void **)(a1 + 24);
    }
    *(void *)(a1 + 32) = v2;
    operator delete(v4);
  }
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 16);
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  return a1;
}

void *sub_19E4AAF74(void *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1] - *a1;
  uint64_t v3 = v2 >> 3;
  unint64_t v4 = (v2 >> 3) + 1;
  if (v4 >> 61) {
    sub_19E37C7C4();
  }
  uint64_t v7 = a1[2] - *a1;
  if (v7 >> 2 > v4) {
    unint64_t v4 = v7 >> 2;
  }
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v8 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v8 = v4;
  }
  if (v8)
  {
    if (v8 >> 61) {
      sub_19E37C2B8();
    }
    unsigned int v9 = (char *)operator new(8 * v8);
  }
  else
  {
    unsigned int v9 = 0;
  }
  int v10 = &v9[8 * v3];
  uint64_t v11 = &v9[8 * v8];
  uint64_t v12 = *a2;
  *a2 = 0;
  *(void *)int v10 = v12;
  uint64_t v13 = v10 + 8;
  uint64_t v14 = (char *)*a1;
  int v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
    goto LABEL_25;
  }
  unint64_t v16 = (unint64_t)&v15[-*a1 - 8];
  if (v16 > 0x77
    && (&v15[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] >= v10 || &v9[v2 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] >= v15))
  {
    uint64_t v17 = (v16 >> 3) + 1;
    v10 -= 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v18 = v15 - 32;
    int v19 = &v9[8 * v3 - 16];
    uint64_t v20 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v22 = *(_OWORD *)v18;
      long long v21 = *((_OWORD *)v18 + 1);
      *(_OWORD *)uint64_t v18 = 0uLL;
      *((_OWORD *)v18 + 1) = 0uLL;
      v18 -= 32;
      *((_OWORD *)v19 - 1) = v22;
      *(_OWORD *)int v19 = v21;
      v19 -= 32;
      v20 -= 4;
    }
    while (v20);
    if (v17 == (v17 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_20;
    }
    v15 -= 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
  }
  do
  {
    uint64_t v23 = *((void *)v15 - 1);
    v15 -= 8;
    *(void *)int v15 = 0;
    *((void *)v10 - 1) = v23;
    v10 -= 8;
  }
  while (v15 != v14);
LABEL_20:
  int v15 = (char *)*a1;
  double v24 = (char *)a1[1];
  *a1 = v10;
  a1[1] = v13;
  a1[2] = v11;
  while (v24 != v15)
  {
    uint64_t v26 = *((void *)v24 - 1);
    v24 -= 8;
    uint64_t v25 = v26;
    *(void *)double v24 = 0;
    if (v26) {
      (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
    }
  }
LABEL_25:
  if (v15) {
    operator delete(v15);
  }
  return v13;
}

uint64_t sub_19E4AB124(uint64_t result, uint64_t *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, const __CFString *a7)
{
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return result;
  }
  uint64_t v11 = a2;
  uint64_t v12 = result;
  size_t result = sub_19E4A21A8(a2);
  if (!result) {
    return result;
  }
  int64_t v13 = a4 >= 4 ? 4 : a4;
  if (!v13) {
    return result;
  }
  char v40 = (uint64_t *)(v12 + 64);
  uint64_t v41 = a6 - 1;
  int64x2_t v45 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  CFStringRef v39 = a7;
  uint64_t v42 = a6;
  long long v43 = v11;
  int64_t v14 = v13 - 1;
  if (v13 != 1) {
    goto LABEL_14;
  }
LABEL_8:
  if (!a6) {
    __assert_rtn("lastContextTokenIsCommonStaticWord", "LMCompositeCompletionEnumerator.cpp", 118, "context.size() >= 1");
  }
  if (!*(unsigned char *)(v12 + 89))
  {
    unsigned int v15 = *(_DWORD *)(a5 + 4 * v41);
    if (v15 != 1)
    {
      size_t result = sub_19E535AC0(v15, *(void *)(v12 + 8));
      if (result) {
        return result;
      }
    }
LABEL_14:
    while (1)
    {
      size_t result = sub_19E4A0258(v11, a3, a4, a7, v13);
      uint64_t v16 = result;
      if (result) {
        break;
      }
LABEL_55:
      if (v13 < 2) {
        return result;
      }
      int64_t v13 = v14--;
      if (!v14) {
        goto LABEL_8;
      }
    }
    if (((*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result) & 1) == 0)
    {
      int v38 = 4;
      goto LABEL_54;
    }
    uint64_t v17 = a3;
    unint64_t v18 = a4;
    int64x2_t v57 = v45;
    uint64_t v58 = 0;
    __int16 v59 = 0;
    char v60 = 1;
    long long v61 = xmmword_19E572FD0;
    int v62 = 0;
    long long v63 = xmmword_19E572FD0;
    unint64_t v64 = 0xFFEFFFFFFFFFFFFFLL;
    int v69 = 0;
    uint64_t v66 = 0;
    uint64_t v67 = 0;
    uint64_t v65 = 0;
    __int16 v68 = 0;
    int v19 = operator new(4uLL);
    *int v19 = 0;
    uint64_t v20 = (*(uint64_t (**)(uint64_t, _DWORD *, int64x2_t *))(*(void *)v16 + 24))(v16, v19, &v57);
    if (v20)
    {
      uint64_t v21 = 4 * v20;
      long long v22 = v19;
      while (*v22)
      {
        ++v22;
        v21 -= 4;
        if (!v21) {
          goto LABEL_20;
        }
      }
      int v38 = 4;
      goto LABEL_53;
    }
LABEL_20:
    unsigned int v56 = *v19;
    unsigned int v23 = v56;
    int64x2_t v46 = v45;
    uint64_t v47 = 0;
    __int16 v48 = 0;
    char v49 = 1;
    long long v50 = xmmword_19E572FD0;
    int v51 = 0;
    long long v52 = xmmword_19E572FD0;
    unint64_t v53 = 0xFFEFFFFFFFFFFFFFLL;
    uint64_t v54 = 0;
    uint64_t v55 = 0;
    if (v56 - 3 <= 0x1F0 && (v56 - 68 > 0x3C || ((0x7FFFFFFFFFFFFE0uLL >> (v56 - 68)) & 1) != 0)) {
      goto LABEL_49;
    }
    uint64_t v24 = *(void *)(v12 + 8);
    uint64_t v25 = *(void ***)(v24 + 184);
    if (*(void *)(v24 + 192) - (void)v25 == 16)
    {
      if (sub_19E41566C(*(void *)(v12 + 8), (uint64_t)&v56, 1, 0, 0, 0, 1, *v25)) {
        goto LABEL_49;
      }
      uint64_t v24 = *(void *)(v12 + 8);
      unsigned int v23 = v56;
    }
    if (qword_1EC009490 != -1) {
      dispatch_once(&qword_1EC009490, &unk_1EF0BEE38);
    }
    memset(v70, 0, sizeof(v70));
    int v72 = 0;
    int v26 = sub_19E413378(v24, v23 | ((unint64_t)v23 << 32), (uint64_t *)v70, (uint64_t)&v46, qword_1EC009488, 1, 1, v71, (__n128)0);
    if (v72 == v71)
    {
      (*(void (**)(void *))(v71[0] + 32))(v71);
      if (v26)
      {
LABEL_32:
        uint64_t v27 = v46.i64[0];
        unsigned int v28 = v56;
        uint64_t v29 = (void *)(v12 + 64);
        char v30 = (void *)(v12 + 64);
        uint64_t v31 = *v40;
        if (*v40)
        {
          while (1)
          {
            while (1)
            {
              char v30 = (void *)v31;
              double v32 = *(double *)(v31 + 32);
              unsigned int v33 = *(_DWORD *)(v31 + 40);
              BOOL v34 = v56 < v33;
              if (*(double *)v46.i64 != v32) {
                BOOL v34 = *(double *)v46.i64 > v32;
              }
              if (!v34) {
                break;
              }
              uint64_t v31 = *v30;
              uint64_t v29 = v30;
              if (!*v30) {
                goto LABEL_43;
              }
            }
            BOOL v35 = v33 < v56;
            if (*(double *)v46.i64 != v32) {
              BOOL v35 = v32 > *(double *)v46.i64;
            }
            if (!v35) {
              break;
            }
            uint64_t v31 = v30[1];
            if (!v31)
            {
              uint64_t v29 = v30 + 1;
              goto LABEL_43;
            }
          }
          *(void *)(v12 + 80) = v40;
        }
        else
        {
LABEL_43:
          uint64_t v36 = operator new(0x30uLL);
          v36[4] = v27;
          *((_DWORD *)v36 + 10) = v28;
          *((_DWORD *)v36 + 11) = 3;
          void *v36 = 0;
          v36[1] = 0;
          v36[2] = v30;
          *uint64_t v29 = v36;
          uint64_t v37 = **(void **)(v12 + 56);
          if (v37)
          {
            *(void *)(v12 + 56) = v37;
            uint64_t v36 = (void *)*v29;
          }
          sub_19E37D324(*(uint64_t **)(v12 + 64), v36);
          ++*(void *)(v12 + 72);
          *(void *)(v12 + 80) = v40;
        }
        int v38 = 1;
        a7 = v39;
        goto LABEL_52;
      }
    }
    else
    {
      if (v72) {
        (*(void (**)(void *))(*v72 + 40))(v72);
      }
      if (v26) {
        goto LABEL_32;
      }
    }
LABEL_49:
    int v38 = 1;
LABEL_52:
    a6 = v42;
LABEL_53:
    operator delete(v19);
    a4 = v18;
    a3 = v17;
    uint64_t v11 = v43;
LABEL_54:
    size_t result = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 8))(v16);
    if (v38 != 4) {
      return result;
    }
    goto LABEL_55;
  }
  if (!*(unsigned char *)(v12 + 88)) {
    goto LABEL_14;
  }
  return result;
}

void sub_19E4AB654(_Unwind_Exception *a1)
{
  operator delete(v2);
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_19E4AB6B8(uint64_t a1)
{
  sub_19E4AAE74(a1);
  JUMPOUT(0x19F3BDCF0);
}

uint64_t *sub_19E4AB6F4(uint64_t *result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v5 = (uint64_t **)(result + 1);
  uint64_t v4 = result[1];
  if (v4)
  {
    double v6 = *(double *)a2;
    unsigned int v7 = *(_DWORD *)(a2 + 8);
    while (1)
    {
      while (1)
      {
        unint64_t v8 = (void *)v4;
        double v9 = *(double *)(v4 + 32);
        unsigned int v10 = *(_DWORD *)(v4 + 40);
        BOOL v11 = v7 < v10;
        if (v6 != v9) {
          BOOL v11 = v6 > v9;
        }
        if (!v11) {
          break;
        }
        uint64_t v4 = *v8;
        uint64_t v5 = (uint64_t **)v8;
        if (!*v8) {
          goto LABEL_13;
        }
      }
      BOOL v12 = v10 < v7;
      if (v6 != v9) {
        BOOL v12 = v9 > v6;
      }
      if (!v12) {
        break;
      }
      uint64_t v4 = v8[1];
      if (!v4)
      {
        uint64_t v5 = (uint64_t **)(v8 + 1);
        goto LABEL_13;
      }
    }
  }
  else
  {
    unint64_t v8 = result + 1;
LABEL_13:
    int64_t v13 = operator new(0x30uLL);
    std::string v13[2] = *(_OWORD *)a2;
    *(void *)int64_t v13 = 0;
    *((void *)v13 + 1) = 0;
    *((void *)v13 + 2) = v8;
    *uint64_t v5 = (uint64_t *)v13;
    uint64_t v14 = *(void *)*v3;
    if (v14)
    {
      *uint64_t v3 = v14;
      unsigned int v15 = *v5;
    }
    else
    {
      unsigned int v15 = (uint64_t *)v13;
    }
    size_t result = sub_19E37D324((uint64_t *)v3[1], v15);
    ++v3[2];
  }
  return result;
}

void sub_19E4AB7EC(uint64_t a1)
{
  sub_19E4AAE74(a1);
  JUMPOUT(0x19F3BDCF0);
}

uint64_t sub_19E4AB828(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  uint64_t v3 = (void *)(a1 + 24);
  if (v2 != (void *)(a1 + 24))
  {
    do
    {
      if (v2[5])
      {
        uint64_t v5 = sub_19E4AB828();
        MEMORY[0x19F3BDCF0](v5, 0x1020C40562D3801);
      }
      double v6 = (void *)v2[1];
      if (v6)
      {
        do
        {
          unsigned int v7 = v6;
          double v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          unsigned int v7 = (void *)v2[2];
          BOOL v8 = *v7 == (void)v2;
          uint64_t v2 = v7;
        }
        while (!v8);
      }
      uint64_t v2 = v7;
    }
    while (v7 != v3);
  }
  sub_19E418864(*(void **)(a1 + 24));
  return a1;
}

uint64_t sub_19E4AB8C8(_DWORD *a1, unsigned int a2)
{
  uint64_t v2 = 4 * a2 - 559038737;
  if (a2 < 4)
  {
    int v4 = 4 * a2 - 559038737;
    int v3 = v4;
    if (a2 == 1)
    {
LABEL_11:
      HIDWORD(v16) = v3;
      LODWORD(v16) = v3;
      int v17 = (v2 ^ v3) - (v16 >> 18);
      HIDWORD(v16) = v17;
      LODWORD(v16) = v17;
      int v18 = ((*a1 + v4) ^ v17) - (v16 >> 21);
      HIDWORD(v16) = v18;
      LODWORD(v16) = v18;
      int v19 = (v18 ^ v3) - (v16 >> 7);
      HIDWORD(v16) = v19;
      LODWORD(v16) = v19;
      int v20 = (v19 ^ v17) - (v16 >> 16);
      HIDWORD(v16) = v20;
      LODWORD(v16) = v20;
      HIDWORD(v16) = (v20 ^ v18) - (v16 >> 28);
      LODWORD(v16) = HIDWORD(v16);
      HIDWORD(v16) = (HIDWORD(v16) ^ v19) - (v16 >> 18);
      LODWORD(v16) = HIDWORD(v16);
      return (HIDWORD(v16) ^ v20) - (v16 >> 8);
    }
  }
  else
  {
    int v3 = 4 * a2 - 559038737;
    int v4 = v3;
    do
    {
      int v5 = a1[1] + v3;
      int v6 = a1[2] + v2;
      int v7 = (*a1 + v4 - v6) ^ __ROR4__(v6, 28);
      int v8 = v6 + v5;
      int v9 = (v5 - v7) ^ __ROR4__(v7, 26);
      int v10 = v7 + v8;
      int v11 = (v8 - v9) ^ __ROR4__(v9, 24);
      int v12 = v9 + v10;
      int v13 = (v10 - v11) ^ __ROR4__(v11, 16);
      int v14 = v11 + v12;
      int v15 = (v12 - v13) ^ __ROR4__(v13, 13);
      int v4 = v13 + v14;
      uint64_t v2 = (v14 - v15) ^ __ROR4__(v15, 28);
      int v3 = v15 + v4;
      a2 -= 3;
      a1 += 3;
    }
    while (a2 > 3);
    if (a2 == 1) {
      goto LABEL_11;
    }
  }
  if (a2 == 2)
  {
LABEL_10:
    v3 += a1[1];
    goto LABEL_11;
  }
  if (a2 == 3)
  {
    LODWORD(v2) = a1[2] + v2;
    goto LABEL_10;
  }
  return v2;
}

unint64_t sub_19E4AB9F0(unint64_t result)
{
  if (!*(_DWORD *)(result + 72))
  {
    uint64_t v1 = (void *)result;
    uint64_t v2 = *(uint64_t **)(result + 8);
    unsigned int v3 = *((_DWORD *)v2 + 3);
    *(_DWORD *)(result + 48) = 0;
    int v4 = *((_DWORD *)v2 + 8);
    if (v4 == 5)
    {
      uint64_t v9 = *v2;
      unsigned __int8 v10 = *((unsigned char *)v2 + 56);
      BOOL v11 = *(_DWORD *)(*v2 + 15) && *(_DWORD *)(v9 + 23) && *(_DWORD *)(v9 + 27) != 0;
      BOOL v15 = *(_DWORD *)(v9 + 35) && *(_DWORD *)(v9 + 43) && *(_DWORD *)(v9 + 47) != 0;
      unsigned int v16 = 0;
      unsigned int v17 = 0;
      uint64_t v18 = v9 + 55;
      unsigned int v19 = 16 * v10;
      if (v3 + 1 > 1) {
        int v20 = v3 + 1;
      }
      else {
        int v20 = 1;
      }
      while (1)
      {
        unsigned int v21 = *(unsigned __int8 *)(v18 + ((unint64_t)v17 >> 2));
        if ((v17 & 3) != 0) {
          LOBYTE(v21) = v21 >> (2 * (v17 & 3));
        }
        if ((v21 & 3) != 0) {
          *(_DWORD *)(result + 48) = ++v16;
        }
        if (v20 == ++v17)
        {
          uint64_t v22 = *(void *)(result + 16);
          unsigned int v23 = (void *)(result + 16);
          unint64_t v24 = 0xCCCCCCCCCCCCCCCDLL * (*(void *)(result + 24) - v22);
          BOOL v54 = v11;
          unsigned __int8 v55 = v10;
          BOOL v53 = v15;
          if (v16 <= v24)
          {
            if (v16 < v24) {
              *(void *)(result + ++*(_DWORD *)(result + 24) = v22 + 5 * v16;
            }
          }
          else
          {
            sub_19E4ABE88(result + 16, v16 - v24);
            BOOL v15 = v53;
            BOOL v11 = v54;
            unsigned __int8 v10 = v55;
          }
          unsigned int v29 = 0;
          unsigned int v30 = 0;
          while (2)
          {
            unsigned int v34 = *(unsigned __int8 *)(v18 + ((unint64_t)v30 >> 2));
            if ((v30 & 3) != 0) {
              LOBYTE(v34) = v34 >> (2 * (v30 & 3));
            }
            switch(v34 & 3)
            {
              case 1u:
                uint64_t v31 = (char *)(v1[1] + 57);
                goto LABEL_40;
              case 2u:
                if (!v11) {
                  goto LABEL_56;
                }
                uint64_t v35 = *(void *)v1[1];
                if (!v10)
                {
                  unsigned int v36 = cmph_search_packed();
                  BOOL v15 = v53;
                  BOOL v11 = v54;
                  unsigned __int8 v10 = v55;
                  uint64_t v35 = *(void *)v1[1];
                  goto LABEL_68;
                }
                if (v30 >= v19)
                {
                  unsigned int v36 = *(_DWORD *)(v35 + *(unsigned int *)(v9 + 15) + 4 * (v30 / v19 - 1));
                  int v37 = v30 % v19;
                  if (!(v30 % v19)) {
                    goto LABEL_68;
                  }
                }
                else
                {
                  unsigned int v36 = 0;
                  int v37 = v30;
                  if (!v30) {
                    goto LABEL_68;
                  }
                }
                do
                {
                  unsigned int v41 = *(_DWORD *)(v18 + ((unint64_t)(v30 - v37) >> 2));
                  unsigned int v42 = v37 - 1;
                  if (v42 >= 0xF) {
                    int v43 = 15;
                  }
                  else {
                    int v43 = v42;
                  }
                  int v44 = v43 + 1;
                  do
                  {
                    if ((v41 & 3) == 2) {
                      ++v36;
                    }
                    v41 >>= 2;
                    --v44;
                  }
                  while (v44);
                  int v37 = v42 - v43;
                }
                while (v37);
LABEL_68:
                uint64_t v31 = (char *)(v35 + *(unsigned int *)(v9 + 23) + 2 * v36);
                goto LABEL_40;
              case 3u:
                if (!v15)
                {
LABEL_56:
                  char v32 = 0;
                  goto LABEL_41;
                }
                uint64_t v38 = *(void *)v1[1];
                if (!v10)
                {
                  unsigned int v39 = cmph_search_packed();
                  BOOL v15 = v53;
                  BOOL v11 = v54;
                  unsigned __int8 v10 = v55;
                  uint64_t v38 = *(void *)v1[1];
                  goto LABEL_78;
                }
                if (v30 >= v19)
                {
                  unsigned int v39 = *(_DWORD *)(v38 + *(unsigned int *)(v9 + 35) + 4 * (v30 / v19 - 1));
                  int v40 = v30 % v19;
                  if (!(v30 % v19)) {
                    goto LABEL_78;
                  }
                }
                else
                {
                  unsigned int v39 = 0;
                  int v40 = v30;
                  if (!v30) {
                    goto LABEL_78;
                  }
                }
                do
                {
                  unsigned int v45 = *(_DWORD *)(v18 + ((unint64_t)(v30 - v40) >> 2));
                  unsigned int v46 = v40 - 1;
                  if (v46 >= 0xF) {
                    int v47 = 15;
                  }
                  else {
                    int v47 = v46;
                  }
                  int v48 = v47 + 1;
                  do
                  {
                    if ((~v45 & 3) == 0) {
                      ++v39;
                    }
                    v45 >>= 2;
                    --v48;
                  }
                  while (v48);
                  int v40 = v46 - v47;
                }
                while (v40);
LABEL_78:
                uint64_t v31 = (char *)(v38 + *(unsigned int *)(v9 + 43) + 6 * v39 + 4);
LABEL_40:
                char v32 = *v31;
LABEL_41:
                uint64_t v33 = *v23 + 5 * v29;
                *(_DWORD *)uint64_t v33 = v30;
                *(unsigned char *)(v33 + 4) = v32;
                ++v29;
LABEL_42:
                if (++v30 <= v3) {
                  continue;
                }
                goto LABEL_79;
              default:
                goto LABEL_42;
            }
          }
        }
      }
    }
    if (v4 == 3)
    {
      uint64_t v5 = 0;
      unsigned int v6 = 0;
      uint64_t v7 = *v2;
      if (v3 + 1 > 1) {
        uint64_t v8 = v3 + 1;
      }
      else {
        uint64_t v8 = 1;
      }
      do
      {
        if (*(_DWORD *)(v7 + v5 + 7)) {
          *(_DWORD *)(result + 48) = ++v6;
        }
        v5 += 6;
      }
      while (2 * (v8 + 2 * v8) != v5);
      uint64_t v12 = *(void *)(result + 16);
      int v13 = (void *)(result + 16);
      unint64_t v14 = 0xCCCCCCCCCCCCCCCDLL * (*(void *)(result + 24) - v12);
      if (v6 <= v14)
      {
        if (v6 < v14) {
          *(void *)(result + ++*(_DWORD *)(result + 24) = v12 + 5 * v6;
        }
      }
      else
      {
        sub_19E4ABE88(result + 16, v6 - v14);
        uint64_t v7 = *(void *)v1[1];
      }
      uint64_t v25 = 0;
      unsigned int v26 = 0;
      uint64_t v27 = (unsigned char *)(v7 + 11);
      do
      {
        if (*((_DWORD *)v27 - 1))
        {
          uint64_t v28 = *v13 + 5 * v26;
          *(_DWORD *)uint64_t v28 = v25;
          *(unsigned char *)(v28 + 4) = *v27;
          ++v26;
        }
        ++v25;
        v27 += 6;
      }
      while (v8 != v25);
    }
LABEL_79:
    unint64_t v49 = v1[2];
    unint64_t v50 = v1[3];
    unint64_t v51 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * (v50 - v49));
    if (v50 == v49) {
      uint64_t v52 = 0;
    }
    else {
      uint64_t v52 = v51;
    }
    return sub_19E4AC024(v49, v50, v52, 1);
  }
  return result;
}

void sub_19E4ABE88(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = *(unsigned char **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (0xCCCCCCCCCCCCCCCDLL * (v4 - (void)v5) >= a2)
  {
    if (a2)
    {
      size_t v12 = 5 * ((5 * a2 - 5) / 5) + 5;
      bzero(*(void **)(a1 + 8), v12);
      v5 += v12;
    }
    *(void *)(a1 + 8) = v5;
  }
  else
  {
    unsigned int v6 = *(unsigned char **)a1;
    unint64_t v7 = 0xCCCCCCCCCCCCCCCDLL * (void)&v5[-*(void *)a1];
    unint64_t v8 = v7 + a2;
    if (v7 + a2 >= 0x3333333333333334) {
      sub_19E37C7C4();
    }
    unint64_t v9 = 0xCCCCCCCCCCCCCCCDLL * (v4 - (void)v6);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x1999999999999999) {
      unint64_t v10 = 0x3333333333333333;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 >= 0x3333333333333334) {
        sub_19E37C2B8();
      }
      BOOL v11 = (char *)operator new(5 * v10);
    }
    else
    {
      BOOL v11 = 0;
    }
    int v13 = &v11[5 * v7];
    unint64_t v14 = &v11[5 * v10];
    size_t v15 = 5 * ((5 * a2 - 5) / 5) + 5;
    bzero(v13, v15);
    unsigned int v16 = &v13[v15];
    if (v5 != v6)
    {
      do
      {
        int v17 = *(_DWORD *)(v5 - 5);
        v5 -= 5;
        char v18 = v5[4];
        *(_DWORD *)(v13 - 5) = v17;
        v13 -= 5;
        unsigned char v13[4] = v18;
      }
      while (v5 != v6);
      uint64_t v5 = *(unsigned char **)a1;
    }
    *(void *)a1 = v13;
    *(void *)(a1 + 8) = v16;
    *(void *)(a1 + 16) = v14;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

unint64_t sub_19E4AC024(unint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v9 = result;
LABEL_2:
  unint64_t v10 = (int *)(a2 - 5);
  unint64_t j = v9;
  while (1)
  {
    unint64_t v9 = j;
    uint64_t v12 = a2 - j;
    uint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * (a2 - j);
    if (v5 || !v4)
    {
      switch(v13)
      {
        case 0:
        case 1:
          return result;
        case 2:
          unsigned int v54 = *(unsigned __int8 *)(a2 - 1);
          unsigned int v55 = *(unsigned __int8 *)(j + 4);
          if (v54 > v55 || v54 == v55 && *v10 < *(_DWORD *)j)
          {
            char v141 = *(unsigned char *)(j + 4);
            int v135 = *(_DWORD *)j;
            int v56 = *v10;
            *(unsigned char *)(j + 4) = *(unsigned char *)(a2 - 1);
            *(_DWORD *)unint64_t j = v56;
            *(unsigned char *)(a2 - 1) = v141;
            *unint64_t v10 = v135;
          }
          break;
        case 3:
          size_t result = (unint64_t)sub_19E4ACBEC((int *)j, (int *)(j + 5), (int *)(a2 - 5));
          break;
        case 4:
          int64x2_t v57 = (int *)(j + 5);
          uint64_t v58 = (int *)(j + 10);
          size_t result = (unint64_t)sub_19E4ACBEC((int *)j, (int *)(j + 5), (int *)(j + 10));
          unsigned int v59 = *(unsigned __int8 *)(a2 - 1);
          unsigned int v60 = *(unsigned __int8 *)(j + 14);
          if (v59 > v60 || v59 == v60 && *v10 < *v58)
          {
            int v61 = *v58;
            char v62 = *(unsigned char *)(j + 14);
            char v63 = *(unsigned char *)(a2 - 1);
            *uint64_t v58 = *v10;
            *(unsigned char *)(j + 14) = v63;
            *(unsigned char *)(a2 - 1) = v62;
            *unint64_t v10 = v61;
            unsigned int v64 = *(unsigned __int8 *)(j + 14);
            unsigned int v65 = *(unsigned __int8 *)(j + 9);
            if (v64 > v65 || v64 == v65 && *v58 < *v57)
            {
              char v66 = *(unsigned char *)(j + 9);
              int v67 = *v57;
              *int64x2_t v57 = *v58;
              *(unsigned char *)(j + 9) = *(unsigned char *)(j + 14);
              *uint64_t v58 = v67;
              *(unsigned char *)(j + 14) = v66;
              unsigned int v68 = *(unsigned __int8 *)(j + 9);
              unsigned int v69 = *(unsigned __int8 *)(j + 4);
              if (v68 > v69 || v68 == v69 && *(_DWORD *)(j + 5) < *(_DWORD *)j)
              {
                char v142 = *(unsigned char *)(j + 4);
                int v136 = *(_DWORD *)j;
                *(_DWORD *)unint64_t j = *v57;
                *(unsigned char *)(j + 4) = *(unsigned char *)(j + 9);
                *int64x2_t v57 = v136;
                *(unsigned char *)(j + 9) = v142;
              }
            }
          }
          break;
        case 5:
          size_t result = (unint64_t)sub_19E4ACD4C(j, j + 5, j + 10, (int *)(j + 15), (int *)(a2 - 5));
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v12 <= 119)
    {
      unint64_t v70 = j + 5;
      BOOL v72 = j == a2 || v70 == a2;
      if (a4)
      {
        if (v72) {
          return result;
        }
        uint64_t v73 = 0;
        unint64_t v74 = j;
        while (2)
        {
          unint64_t v76 = v74;
          unint64_t v74 = v70;
          unsigned int v77 = *(unsigned __int8 *)(v76 + 9);
          unsigned int v78 = *(unsigned __int8 *)(v76 + 4);
          if (v77 > v78)
          {
            unsigned int v79 = *(_DWORD *)v74;
            goto LABEL_131;
          }
          if (v77 == v78)
          {
            unsigned int v79 = *(_DWORD *)v74;
            if (*(_DWORD *)v74 < *(_DWORD *)v76)
            {
LABEL_131:
              *(_DWORD *)unint64_t v74 = *(_DWORD *)v76;
              *(unsigned char *)(v74 + 4) = *(unsigned char *)(v76 + 4);
              unint64_t v75 = j;
              if (v76 != j)
              {
                uint64_t v80 = v73;
                while (1)
                {
                  uint64_t v81 = j + v80;
                  unint64_t v82 = (unsigned int *)(j + v80 - 5);
                  unsigned int v83 = *(unsigned __int8 *)(j + v80 - 1);
                  if (v77 <= v83)
                  {
                    if (v77 != v83)
                    {
                      unint64_t v75 = j + v80;
                      goto LABEL_125;
                    }
                    if (v79 >= *v82) {
                      break;
                    }
                  }
                  v76 -= 5;
                  *(_DWORD *)uint64_t v81 = *v82;
                  *(unsigned char *)(v81 + 4) = *(unsigned char *)(j + v80 - 1);
                  v80 -= 5;
                  if (!v80)
                  {
                    unint64_t v75 = j;
                    goto LABEL_125;
                  }
                }
                unint64_t v75 = v76;
              }
LABEL_125:
              *(_DWORD *)unint64_t v75 = v79;
              *(unsigned char *)(v75 + 4) = v77;
            }
          }
          unint64_t v70 = v74 + 5;
          v73 += 5;
          if (v74 + 5 == a2) {
            return result;
          }
          continue;
        }
      }
      if (v72) {
        return result;
      }
      while (2)
      {
        unint64_t v126 = v9;
        unint64_t v9 = v70;
        unsigned int v127 = *(unsigned __int8 *)(v126 + 9);
        unsigned int v128 = *(unsigned __int8 *)(v126 + 4);
        if (v127 <= v128)
        {
          if (v127 == v128)
          {
            unsigned int v129 = *(_DWORD *)v9;
            if (*(_DWORD *)v9 < *(_DWORD *)v126) {
              goto LABEL_206;
            }
          }
        }
        else
        {
          unsigned int v129 = *(_DWORD *)v9;
          do
          {
            do
            {
LABEL_206:
              unint64_t v130 = v126;
              *(_DWORD *)(v126 + 5) = *(_DWORD *)v126;
              *(unsigned char *)(v126 + 9) = *(unsigned char *)(v126 + 4);
              v126 -= 5;
              unsigned int v131 = *(unsigned __int8 *)(v130 - 1);
            }
            while (v127 > v131);
          }
          while (v127 == v131 && v129 < *(_DWORD *)(v130 - 5));
          *(_DWORD *)unint64_t v130 = v129;
          *(unsigned char *)(v130 + 4) = v127;
        }
        unint64_t v70 = v9 + 5;
        if (v9 + 5 == a2) {
          return result;
        }
        continue;
      }
    }
    if (!a3) {
      break;
    }
    uint64_t v14 = 5 * ((unint64_t)v13 >> 1);
    unint64_t v15 = j + v14;
    if ((unint64_t)v12 >= 0x281)
    {
      sub_19E4ACBEC((int *)v9, (int *)(v9 + v14), (int *)(a2 - 5));
      sub_19E4ACBEC((int *)(v9 + 5), (int *)(v14 + v9 - 5), (int *)(a2 - 10));
      sub_19E4ACBEC((int *)(v9 + 10), (int *)(v9 + 5 + v14), (int *)(a2 - 15));
      size_t result = (unint64_t)sub_19E4ACBEC((int *)(v14 + v9 - 5), (int *)(v9 + v14), (int *)(v9 + 5 + v14));
      char v138 = *(unsigned char *)(v9 + 4);
      int v132 = *(_DWORD *)v9;
      char v16 = *(unsigned char *)(v15 + 4);
      *(_DWORD *)unint64_t v9 = *(_DWORD *)v15;
      *(unsigned char *)(v9 + 4) = v16;
      *(unsigned char *)(v15 + 4) = v138;
      *(_DWORD *)unint64_t v15 = v132;
      --a3;
      if (a4) {
        goto LABEL_15;
      }
    }
    else
    {
      size_t result = (unint64_t)sub_19E4ACBEC((int *)(v9 + v14), (int *)v9, (int *)(a2 - 5));
      --a3;
      if (a4)
      {
LABEL_15:
        unsigned int v19 = *(_DWORD *)v9;
        unsigned int v18 = *(unsigned __int8 *)(v9 + 4);
        goto LABEL_16;
      }
    }
    unsigned int v17 = *(unsigned __int8 *)(v9 - 1);
    unsigned int v18 = *(unsigned __int8 *)(v9 + 4);
    unsigned int v19 = *(_DWORD *)v9;
    if (v17 > v18)
    {
LABEL_16:
      for (unint64_t i = v9 + 5; ; i += 5)
      {
        unsigned int v21 = *(unsigned __int8 *)(i + 4);
        if (v21 <= v18 && (v21 != v18 || *(_DWORD *)i >= v19)) {
          break;
        }
      }
      if (i - 5 == v9)
      {
        unint64_t v24 = (unsigned __int8 *)a2;
        if (i < a2)
        {
          unsigned int v26 = *(unsigned __int8 *)(a2 - 1);
          unint64_t v24 = (unsigned __int8 *)(a2 - 5);
          if (v26 <= v18)
          {
            unsigned int v23 = (unsigned __int8 *)(a2 - 6);
            unint64_t v24 = (unsigned __int8 *)(a2 - 5);
            while (1)
            {
              int v37 = (unsigned int *)(v23 + 1);
              if (v26 == v18)
              {
                if (*v37 < v19 || i >= (unint64_t)v37) {
                  goto LABEL_27;
                }
              }
              else if (i >= (unint64_t)v37)
              {
                break;
              }
              v24 -= 5;
              unsigned int v36 = *v23;
              v23 -= 5;
              unsigned int v26 = v36;
              if (v36 > v18) {
                goto LABEL_27;
              }
            }
          }
        }
      }
      else
      {
        unsigned int v22 = *(unsigned __int8 *)(a2 - 1);
        unsigned int v23 = (unsigned __int8 *)(a2 - 6);
        unint64_t v24 = (unsigned __int8 *)(a2 - 5);
        if (v22 <= v18)
        {
          do
          {
            if (v22 == v18 && *(_DWORD *)(v23 + 1) < v19) {
              break;
            }
            unsigned int v25 = *v23;
            v23 -= 5;
            unsigned int v22 = v25;
          }
          while (v25 <= v18);
LABEL_27:
          unint64_t v24 = v23 + 1;
        }
      }
      unint64_t j = i;
      if (i < (unint64_t)v24)
      {
        unint64_t j = i;
        uint64_t v27 = v24;
        do
        {
          while (1)
          {
            unsigned __int8 v139 = *(unsigned char *)(j + 4);
            int v133 = *(_DWORD *)j;
            int v28 = *(_DWORD *)v27;
            *(unsigned char *)(j + 4) = v27[4];
            *(_DWORD *)unint64_t j = v28;
            v27[4] = v139;
            *(_DWORD *)uint64_t v27 = v133;
            unint64_t v29 = j + 5;
            do
            {
              do
              {
                unint64_t j = v29;
                unsigned int v30 = *(unsigned __int8 *)(v29 + 4);
                v29 += 5;
              }
              while (v30 > v18);
            }
            while (v30 == v18 && *(_DWORD *)j < v19);
            unsigned int v31 = *(v27 - 1);
            if (v31 <= v18) {
              break;
            }
            v27 -= 5;
            if (j >= (unint64_t)v27) {
              goto LABEL_43;
            }
          }
          char v32 = v27 - 6;
          do
          {
            if (v31 == v18 && *(_DWORD *)(v32 + 1) < v19) {
              break;
            }
            unsigned int v33 = *v32;
            v32 -= 5;
            unsigned int v31 = v33;
          }
          while (v33 <= v18);
          uint64_t v27 = v32 + 1;
        }
        while (j < (unint64_t)v27);
      }
LABEL_43:
      if (j - 5 != v9)
      {
        int v34 = *(_DWORD *)(j - 5);
        *(unsigned char *)(v9 + 4) = *(unsigned char *)(j - 1);
        *(_DWORD *)unint64_t v9 = v34;
      }
      *(_DWORD *)(j - 5) = v19;
      *(unsigned char *)(j - 1) = v18;
      if (i < (unint64_t)v24) {
        goto LABEL_48;
      }
      BOOL v35 = sub_19E4ACF90(v9, j - 5);
      size_t result = sub_19E4ACF90(j, a2);
      if (result)
      {
        a2 = j - 5;
        if (v35) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v35)
      {
LABEL_48:
        size_t result = sub_19E4AC024(v9, j - 5, a3, a4 & 1);
        a4 = 0;
      }
    }
    else
    {
      if (v17 == v18 && *(_DWORD *)(v9 - 5) < v19)
      {
        unsigned int v18 = *(unsigned __int8 *)(v9 - 1);
        goto LABEL_16;
      }
      unsigned int v39 = *(unsigned __int8 *)(a2 - 1);
      if (v18 > v39 || v18 == v39 && v19 < *v10)
      {
        unsigned int v40 = *(unsigned __int8 *)(v9 + 9);
        if (v18 <= v40)
        {
          unsigned int v42 = (unsigned __int8 *)(v9 + 14);
          do
          {
            if (v18 == v40 && v19 < *(_DWORD *)(v42 - 9)) {
              break;
            }
            unsigned int v43 = *v42;
            v42 += 5;
            unsigned int v40 = v43;
          }
          while (v18 <= v43);
          unint64_t j = (unint64_t)(v42 - 9);
        }
        else
        {
          unint64_t j = v9 + 5;
        }
      }
      else
      {
        for (unint64_t j = v9 + 5; j < a2; j += 5)
        {
          unsigned int v41 = *(unsigned __int8 *)(j + 4);
          if (v18 > v41 || v18 == v41 && v19 < *(_DWORD *)j) {
            break;
          }
        }
      }
      int v44 = (unsigned __int8 *)a2;
      if (j < a2)
      {
        for (k = (unsigned __int8 *)(a2 - 6); v18 > v39 || v18 == v39 && v19 < *(_DWORD *)(k + 1); k -= 5)
        {
          unsigned int v46 = *k;
          unsigned int v39 = v46;
        }
        int v44 = k + 1;
      }
      while (j < (unint64_t)v44)
      {
        unsigned __int8 v140 = *(unsigned char *)(j + 4);
        int v134 = *(_DWORD *)j;
        int v47 = *(_DWORD *)v44;
        *(unsigned char *)(j + 4) = v44[4];
        *(_DWORD *)unint64_t j = v47;
        v44[4] = v140;
        *(_DWORD *)int v44 = v134;
        unsigned int v48 = *(unsigned __int8 *)(j + 9);
        if (v18 <= v48)
        {
          unint64_t v49 = (unsigned __int8 *)(j + 14);
          do
          {
            if (v18 == v48 && v19 < *(_DWORD *)(v49 - 9)) {
              break;
            }
            unsigned int v50 = *v49;
            v49 += 5;
            unsigned int v48 = v50;
          }
          while (v18 <= v50);
          unint64_t j = (unint64_t)(v49 - 9);
        }
        else
        {
          j += 5;
        }
        unint64_t v51 = v44 - 5;
        do
        {
          do
          {
            int v44 = v51;
            unsigned int v52 = v51[4];
            v51 -= 5;
          }
          while (v18 > v52);
        }
        while (v18 == v52 && v19 < *(_DWORD *)v44);
      }
      BOOL v4 = j - 5 >= v9;
      BOOL v5 = j - 5 == v9;
      if (j - 5 != v9)
      {
        int v53 = *(_DWORD *)(j - 5);
        *(unsigned char *)(v9 + 4) = *(unsigned char *)(j - 1);
        *(_DWORD *)unint64_t v9 = v53;
      }
      a4 = 0;
      *(_DWORD *)(j - 5) = v19;
      *(unsigned char *)(j - 1) = v18;
    }
  }
  if (j != a2)
  {
    int64_t v84 = (unint64_t)(v13 - 2) >> 1;
    int64_t v85 = v84;
    do
    {
      int64_t v87 = v85;
      if (v84 >= v85)
      {
        uint64_t v88 = (2 * v85) | 1;
        unint64_t v89 = (unsigned int *)(j + 5 * v88);
        if (2 * v87 + 2 < v13)
        {
          unsigned int v90 = *((unsigned __int8 *)v89 + 4);
          unsigned int v91 = *((unsigned __int8 *)v89 + 9);
          if (v90 > v91 || v90 == v91 && *v89 < *(unsigned int *)((char *)v89 + 5))
          {
            unint64_t v89 = (unsigned int *)((char *)v89 + 5);
            uint64_t v88 = 2 * v87 + 2;
          }
        }
        unsigned int v92 = *((unsigned __int8 *)v89 + 4);
        unsigned int v93 = *(unsigned __int8 *)(j + 5 * v87 + 4);
        BOOL v94 = v92 == v93;
        if (v92 <= v93)
        {
          unint64_t v95 = j + 5 * v87;
          unsigned int v96 = *(_DWORD *)v95;
          if (!v94 || *v89 >= v96)
          {
            int v97 = *v89;
            size_t result = *((unsigned __int8 *)v89 + 4);
            *(unsigned char *)(v95 + 4) = result;
            *(_DWORD *)unint64_t v95 = v97;
            if (v84 >= v88)
            {
              while (1)
              {
                uint64_t v99 = 2 * v88;
                uint64_t v88 = (2 * v88) | 1;
                uint64_t v86 = (unsigned int *)(j + 5 * v88);
                uint64_t v100 = v99 + 2;
                if (v100 < v13)
                {
                  size_t result = *((unsigned __int8 *)v86 + 4);
                  unsigned int v101 = *((unsigned __int8 *)v86 + 9);
                  if (result > v101
                    || result == v101
                    && (size_t result = *v86, result < *(unsigned int *)((char *)v86 + 5)))
                  {
                    uint64_t v86 = (unsigned int *)((char *)v86 + 5);
                    uint64_t v88 = v100;
                  }
                }
                unsigned int v102 = *((unsigned __int8 *)v86 + 4);
                if (v102 > v93 || v102 == v93 && *v86 < v96) {
                  break;
                }
                unsigned int v98 = *v86;
                size_t result = *((unsigned __int8 *)v86 + 4);
                *((unsigned char *)v89 + 4) = result;
                unsigned int *v89 = v98;
                unint64_t v89 = v86;
                if (v84 < v88) {
                  goto LABEL_142;
                }
              }
            }
            uint64_t v86 = v89;
LABEL_142:
            unsigned int *v86 = v96;
            *((unsigned char *)v86 + 4) = v93;
          }
        }
      }
      int64_t v85 = v87 - 1;
    }
    while (v87);
    int64_t v103 = v12 / 5uLL;
    while (2)
    {
      uint64_t v105 = 0;
      char v143 = *(unsigned char *)(j + 4);
      int v137 = *(_DWORD *)j;
      unint64_t v106 = j;
      do
      {
        unint64_t v108 = v106;
        v106 += 5 * (v105 + 1);
        uint64_t v109 = 2 * v105;
        uint64_t v105 = (2 * v105) | 1;
        int64_t v110 = v109 + 2;
        if (v110 < v103)
        {
          unsigned int v111 = *(unsigned __int8 *)(v106 + 4);
          unsigned int v112 = *(unsigned __int8 *)(v106 + 9);
          if (v111 > v112 || v111 == v112 && *(_DWORD *)v106 < *(_DWORD *)(v106 + 5))
          {
            v106 += 5;
            uint64_t v105 = v110;
          }
        }
        unsigned int v107 = *(_DWORD *)v106;
        *(unsigned char *)(v108 + 4) = *(unsigned char *)(v106 + 4);
        *(_DWORD *)unint64_t v108 = v107;
      }
      while (v105 <= (uint64_t)((unint64_t)(v103 - 2) >> 1));
      a2 -= 5;
      if (v106 == a2)
      {
        *(unsigned char *)(v106 + 4) = v143;
        *(_DWORD *)unint64_t v106 = v137;
        goto LABEL_167;
      }
      int v113 = *(_DWORD *)a2;
      *(unsigned char *)(v106 + 4) = *(unsigned char *)(a2 + 4);
      *(_DWORD *)unint64_t v106 = v113;
      *(unsigned char *)(a2 + 4) = v143;
      *(_DWORD *)a2 = v137;
      uint64_t v114 = v106 - j + 5;
      if (v114 >= 6)
      {
        unint64_t v115 = v114 / 5uLL - 2;
        unint64_t v116 = v115 >> 1;
        unint64_t v117 = j + 5 * (v115 >> 1);
        unsigned int v118 = *(unsigned __int8 *)(v117 + 4);
        unsigned int v119 = *(unsigned __int8 *)(v106 + 4);
        if (v118 > v119)
        {
          unsigned int v120 = *(_DWORD *)v106;
          goto LABEL_181;
        }
        if (v118 == v119)
        {
          unsigned int v120 = *(_DWORD *)v106;
          if (*(_DWORD *)v117 < *(_DWORD *)v106)
          {
LABEL_181:
            int v121 = *(_DWORD *)v117;
            *(unsigned char *)(v106 + 4) = *(unsigned char *)(v117 + 4);
            *(_DWORD *)unint64_t v106 = v121;
            if (v115 >= 2)
            {
              while (1)
              {
                unint64_t v124 = v116 - 1;
                unint64_t v116 = (v116 - 1) >> 1;
                unint64_t v122 = j + 5 * v116;
                unsigned int v125 = *(unsigned __int8 *)(v122 + 4);
                if (v125 <= v119 && (v125 != v119 || *(_DWORD *)v122 >= v120)) {
                  break;
                }
                int v123 = *(_DWORD *)v122;
                *(unsigned char *)(v117 + 4) = *(unsigned char *)(v122 + 4);
                *(_DWORD *)unint64_t v117 = v123;
                unint64_t v117 = j + 5 * v116;
                if (v124 <= 1) {
                  goto LABEL_183;
                }
              }
            }
            unint64_t v122 = v117;
LABEL_183:
            *(_DWORD *)unint64_t v122 = v120;
            *(unsigned char *)(v122 + 4) = v119;
          }
        }
      }
LABEL_167:
      if (v103-- <= 2) {
        return result;
      }
      continue;
    }
  }
  return result;
}

int *sub_19E4ACBEC(int *result, int *a2, int *a3)
{
  unsigned int v3 = *((unsigned __int8 *)a2 + 4);
  unsigned int v4 = *((unsigned __int8 *)result + 4);
  if (v3 > v4 || v3 == v4 && *a2 < *result)
  {
    unsigned int v5 = *((unsigned __int8 *)a3 + 4);
    if (v5 > v3 || v5 == v3 && *a3 < *a2)
    {
      char v6 = *((unsigned char *)result + 4);
      int v7 = *result;
      char v8 = *((unsigned char *)a3 + 4);
      *size_t result = *a3;
      *((unsigned char *)result + 4) = v8;
LABEL_17:
      *a3 = v7;
      *((unsigned char *)a3 + 4) = v6;
      return result;
    }
    char v18 = *((unsigned char *)result + 4);
    int v19 = *result;
    char v20 = *((unsigned char *)a2 + 4);
    *size_t result = *a2;
    *((unsigned char *)result + 4) = v20;
    *a2 = v19;
    *((unsigned char *)a2 + 4) = v18;
    unsigned int v21 = *((unsigned __int8 *)a3 + 4);
    unsigned int v22 = *((unsigned __int8 *)a2 + 4);
    if (v21 > v22 || v21 == v22 && *a3 < *a2)
    {
      char v6 = *((unsigned char *)a2 + 4);
      int v7 = *a2;
      char v23 = *((unsigned char *)a3 + 4);
      *a2 = *a3;
      *((unsigned char *)a2 + 4) = v23;
      goto LABEL_17;
    }
  }
  else
  {
    unsigned int v9 = *((unsigned __int8 *)a3 + 4);
    if (v9 > v3 || v9 == v3 && *a3 < *a2)
    {
      char v10 = *((unsigned char *)a2 + 4);
      int v11 = *a2;
      char v12 = *((unsigned char *)a3 + 4);
      *a2 = *a3;
      *((unsigned char *)a2 + 4) = v12;
      *a3 = v11;
      *((unsigned char *)a3 + 4) = v10;
      unsigned int v13 = *((unsigned __int8 *)a2 + 4);
      unsigned int v14 = *((unsigned __int8 *)result + 4);
      if (v13 > v14 || v13 == v14 && *a2 < *result)
      {
        char v15 = *((unsigned char *)result + 4);
        int v16 = *result;
        char v17 = *((unsigned char *)a2 + 4);
        *size_t result = *a2;
        *((unsigned char *)result + 4) = v17;
        *a2 = v16;
        *((unsigned char *)a2 + 4) = v15;
      }
    }
  }
  return result;
}

int *sub_19E4ACD4C(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, int *a5)
{
  size_t result = sub_19E4ACBEC((int *)a1, (int *)a2, (int *)a3);
  unsigned int v11 = *((unsigned __int8 *)a4 + 4);
  unsigned int v12 = *(unsigned __int8 *)(a3 + 4);
  if (v11 > v12 || v11 == v12 && *a4 < *(_DWORD *)a3)
  {
    char v13 = *(unsigned char *)(a3 + 4);
    int v14 = *(_DWORD *)a3;
    char v15 = *((unsigned char *)a4 + 4);
    *(_DWORD *)a3 = *a4;
    *(unsigned char *)(a3 + 4) = v15;
    *a4 = v14;
    *((unsigned char *)a4 + 4) = v13;
    unsigned int v16 = *(unsigned __int8 *)(a3 + 4);
    unsigned int v17 = *(unsigned __int8 *)(a2 + 4);
    if (v16 > v17 || v16 == v17 && *(_DWORD *)a3 < *(_DWORD *)a2)
    {
      char v18 = *(unsigned char *)(a2 + 4);
      int v19 = *(_DWORD *)a2;
      char v20 = *(unsigned char *)(a3 + 4);
      *(_DWORD *)a2 = *(_DWORD *)a3;
      *(unsigned char *)(a2 + 4) = v20;
      *(_DWORD *)a3 = v19;
      *(unsigned char *)(a3 + 4) = v18;
      unsigned int v21 = *(unsigned __int8 *)(a2 + 4);
      unsigned int v22 = *(unsigned __int8 *)(a1 + 4);
      if (v21 > v22 || v21 == v22 && *(_DWORD *)a2 < *(_DWORD *)a1)
      {
        char v23 = *(unsigned char *)(a1 + 4);
        int v24 = *(_DWORD *)a1;
        char v25 = *(unsigned char *)(a2 + 4);
        *(_DWORD *)a1 = *(_DWORD *)a2;
        *(unsigned char *)(a1 + 4) = v25;
        *(_DWORD *)a2 = v24;
        *(unsigned char *)(a2 + 4) = v23;
      }
    }
  }
  unsigned int v26 = *((unsigned __int8 *)a5 + 4);
  unsigned int v27 = *((unsigned __int8 *)a4 + 4);
  if (v26 > v27 || v26 == v27 && *a5 < *a4)
  {
    char v28 = *((unsigned char *)a4 + 4);
    int v29 = *a4;
    char v30 = *((unsigned char *)a5 + 4);
    *a4 = *a5;
    *((unsigned char *)a4 + 4) = v30;
    *a5 = v29;
    *((unsigned char *)a5 + 4) = v28;
    unsigned int v31 = *((unsigned __int8 *)a4 + 4);
    unsigned int v32 = *(unsigned __int8 *)(a3 + 4);
    if (v31 > v32 || v31 == v32 && *a4 < *(_DWORD *)a3)
    {
      char v33 = *(unsigned char *)(a3 + 4);
      int v34 = *(_DWORD *)a3;
      char v35 = *((unsigned char *)a4 + 4);
      *(_DWORD *)a3 = *a4;
      *(unsigned char *)(a3 + 4) = v35;
      *a4 = v34;
      *((unsigned char *)a4 + 4) = v33;
      unsigned int v36 = *(unsigned __int8 *)(a3 + 4);
      unsigned int v37 = *(unsigned __int8 *)(a2 + 4);
      if (v36 > v37 || v36 == v37 && *(_DWORD *)a3 < *(_DWORD *)a2)
      {
        char v38 = *(unsigned char *)(a2 + 4);
        int v39 = *(_DWORD *)a2;
        char v40 = *(unsigned char *)(a3 + 4);
        *(_DWORD *)a2 = *(_DWORD *)a3;
        *(unsigned char *)(a2 + 4) = v40;
        *(_DWORD *)a3 = v39;
        *(unsigned char *)(a3 + 4) = v38;
        unsigned int v41 = *(unsigned __int8 *)(a2 + 4);
        unsigned int v42 = *(unsigned __int8 *)(a1 + 4);
        if (v41 > v42 || v41 == v42 && *(_DWORD *)a2 < *(_DWORD *)a1)
        {
          char v43 = *(unsigned char *)(a1 + 4);
          int v44 = *(_DWORD *)a1;
          char v45 = *(unsigned char *)(a2 + 4);
          *(_DWORD *)a1 = *(_DWORD *)a2;
          *(unsigned char *)(a1 + 4) = v45;
          *(_DWORD *)a2 = v44;
          *(unsigned char *)(a2 + 4) = v43;
        }
      }
    }
  }
  return result;
}

BOOL sub_19E4ACF90(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * (a2 - a1);
  BOOL result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      char v6 = (int *)(a2 - 5);
      unsigned int v7 = *(unsigned __int8 *)(a2 - 1);
      unsigned int v8 = *(unsigned __int8 *)(a1 + 4);
      if (v7 > v8 || v7 == v8 && *v6 < *(_DWORD *)a1)
      {
        char v9 = *(unsigned char *)(a1 + 4);
        int v10 = *(_DWORD *)a1;
        char v11 = *(unsigned char *)(a2 - 1);
        *(_DWORD *)a1 = *v6;
        *(unsigned char *)(a1 + 4) = v11;
        *char v6 = v10;
        *(unsigned char *)(a2 - 1) = v9;
      }
      return result;
    case 3uLL:
      sub_19E4ACBEC((int *)a1, (int *)(a1 + 5), (int *)(a2 - 5));
      return 1;
    case 4uLL:
      int v24 = (int *)(a1 + 5);
      char v25 = (int *)(a1 + 10);
      unsigned int v26 = (int *)(a2 - 5);
      sub_19E4ACBEC((int *)a1, (int *)(a1 + 5), (int *)(a1 + 10));
      unsigned int v27 = *(unsigned __int8 *)(a2 - 1);
      unsigned int v28 = *(unsigned __int8 *)(a1 + 14);
      if (v27 > v28 || v27 == v28 && *v26 < *v25)
      {
        char v29 = *(unsigned char *)(a1 + 14);
        int v30 = *v25;
        char v31 = *(unsigned char *)(a2 - 1);
        int *v25 = *v26;
        *(unsigned char *)(a1 + 14) = v31;
        *unsigned int v26 = v30;
        *(unsigned char *)(a2 - 1) = v29;
        unsigned int v32 = *(unsigned __int8 *)(a1 + 14);
        unsigned int v33 = *(unsigned __int8 *)(a1 + 9);
        if (v32 > v33 || v32 == v33 && *v25 < *v24)
        {
          char v34 = *(unsigned char *)(a1 + 9);
          int v35 = *v24;
          *int v24 = *v25;
          *(unsigned char *)(a1 + 9) = *(unsigned char *)(a1 + 14);
          int *v25 = v35;
          *(unsigned char *)(a1 + 14) = v34;
          unsigned int v36 = *(unsigned __int8 *)(a1 + 9);
          unsigned int v37 = *(unsigned __int8 *)(a1 + 4);
          if (v36 > v37 || v36 == v37 && *(_DWORD *)(a1 + 5) < *(_DWORD *)a1)
          {
            char v38 = *(unsigned char *)(a1 + 4);
            int v39 = *(_DWORD *)a1;
            *(_DWORD *)a1 = *v24;
            *(unsigned char *)(a1 + 4) = *(unsigned char *)(a1 + 9);
            *int v24 = v39;
            *(unsigned char *)(a1 + 9) = v38;
          }
        }
      }
      return 1;
    case 5uLL:
      sub_19E4ACD4C(a1, a1 + 5, a1 + 10, (int *)(a1 + 15), (int *)(a2 - 5));
      return 1;
    default:
      uint64_t v12 = a1 + 10;
      sub_19E4ACBEC((int *)a1, (int *)(a1 + 5), (int *)(a1 + 10));
      uint64_t v13 = a1 + 15;
      if (a1 + 15 == a2) {
        return 1;
      }
      uint64_t v14 = 0;
      int v15 = 0;
      break;
  }
  while (1)
  {
    unsigned int v17 = *(unsigned __int8 *)(v13 + 4);
    unsigned int v18 = *(unsigned __int8 *)(v12 + 4);
    if (v17 > v18) {
      break;
    }
    if (v17 == v18)
    {
      unsigned int v19 = *(_DWORD *)v13;
      if (*(_DWORD *)v13 < *(_DWORD *)v12) {
        goto LABEL_11;
      }
    }
LABEL_8:
    uint64_t v12 = v13;
    v14 += 5;
    v13 += 5;
    if (v13 == a2) {
      return 1;
    }
  }
  unsigned int v19 = *(_DWORD *)v13;
LABEL_11:
  *(_DWORD *)uint64_t v13 = *(_DWORD *)v12;
  *(unsigned char *)(v13 + 4) = *(unsigned char *)(v12 + 4);
  uint64_t v16 = a1;
  if (v12 != a1)
  {
    uint64_t v20 = v14;
    while (1)
    {
      uint64_t v21 = a1 + v20;
      unsigned int v22 = (unsigned int *)(a1 + v20 + 5);
      unsigned int v23 = *(unsigned __int8 *)(a1 + v20 + 9);
      if (v17 <= v23)
      {
        if (v17 != v23)
        {
          uint64_t v16 = v12;
          goto LABEL_7;
        }
        if (v19 >= *v22) {
          break;
        }
      }
      v12 -= 5;
      *(_DWORD *)(v21 + 10) = *v22;
      *(unsigned char *)(v21 + 14) = *(unsigned char *)(a1 + v20 + 9);
      v20 -= 5;
      if (v20 == -10)
      {
        uint64_t v16 = a1;
        goto LABEL_7;
      }
    }
    uint64_t v16 = a1 + v20 + 10;
  }
LABEL_7:
  *(_DWORD *)uint64_t v16 = v19;
  *(unsigned char *)(v16 + 4) = v17;
  if (++v15 != 8) {
    goto LABEL_8;
  }
  return v13 + 5 == a2;
}

BOOL sub_19E4AD2A8(uint64_t a1, unsigned int a2, unint64_t a3, int a4, int a5, int a6, unsigned int *a7)
{
  if (!a4) {
    return 0;
  }
  unint64_t v7 = HIDWORD(a3);
  uint64_t v8 = a1 + a3;
  unsigned int v9 = a4 + HIDWORD(a3) - 1;
  *a7 = HIDWORD(a3);
  if (a1) {
    BOOL v10 = a6 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  char v11 = v10;
  if (v10)
  {
    if (!a2)
    {
      if (HIDWORD(a3) != -1)
      {
        unsigned int v18 = 0;
        return v18 == a2;
      }
      unsigned int v9 = -1;
      goto LABEL_32;
    }
    *a7 = v9;
    return 0;
  }
  int v13 = (HIDWORD(a3) * a5) & 0x1F;
  uint64_t v14 = (_DWORD *)(v8 + 4 * ((HIDWORD(a3) * a5) >> 5));
  int v15 = *v14 >> (BYTE4(a3) * a5);
  if ((v13 + a6) >= 0x21) {
    v15 |= v14[1] << -(char)v13;
  }
  BOOL result = 0;
  unsigned int v16 = 0xFFFFFFFF >> -(char)a6;
  unsigned int v17 = v15 & v16;
  if (v17 <= a2)
  {
    if (v17 == a2)
    {
      unsigned int v18 = a2;
      if (HIDWORD(a3) == -1)
      {
        unsigned int v9 = -1;
        goto LABEL_37;
      }
      return v18 == a2;
    }
    *a7 = v9;
    int v19 = (v9 * a5) & 0x1F;
    uint64_t v20 = (_DWORD *)(v8 + 4 * ((v9 * a5) >> 5));
    int v21 = *v20 >> (v9 * a5);
    if ((v19 + a6) >= 0x21) {
      v21 |= v20[1] << -(char)v19;
    }
    unsigned int v18 = v21 & v16;
    if (v18 >= a2)
    {
      if (v18 == a2) {
        LODWORD(v7) = a4 + HIDWORD(a3) - 1;
      }
      if ((int)v7 + 1 >= v9) {
        return v18 == a2;
      }
      if ((v11 & 1) == 0)
      {
        unsigned int v16 = 0xFFFFFFFF >> -(char)a6;
        while (1)
        {
LABEL_37:
          unsigned int v22 = (v9 + v7) >> 1;
          *a7 = v22;
          int v23 = (v22 * a5) & 0x1F;
          int v24 = (_DWORD *)(v8 + 4 * ((v22 * a5) >> 5));
          int v25 = *v24 >> (v22 * a5);
          if ((v23 + a6) >= 0x21) {
            v25 |= v24[1] << -(char)v23;
          }
          unsigned int v18 = v25 & v16;
          if (v18 > a2)
          {
            unsigned int v9 = (v9 + v7) >> 1;
          }
          else
          {
            if (v18 == a2)
            {
              unsigned int v18 = a2;
              return v18 == a2;
            }
            if (v18 < a2) {
              LODWORD(v7) = (v9 + v7) >> 1;
            }
          }
          if ((int)v7 + 1 >= v9) {
            return v18 == a2;
          }
        }
      }
      if (a2)
      {
        do
          LODWORD(v7) = (v9 + v7) >> 1;
        while ((int)v7 + 1 < v9);
        goto LABEL_33;
      }
LABEL_32:
      LODWORD(v7) = (v9 + v7) >> 1;
LABEL_33:
      unsigned int v18 = 0;
      *a7 = v7;
      return v18 == a2;
    }
    return 0;
  }
  return result;
}

unint64_t sub_19E4AD480(unint64_t result)
{
  if (*(_DWORD *)(result + 72) != 1) {
    return result;
  }
  uint64_t v1 = (void *)result;
  uint64_t v2 = *(unsigned int *)(result + 56);
  uint64_t v3 = *(unsigned int *)(result + 40);
  BOOL v4 = !v3 || v2 == 0;
  if (v4 || v2 == 1) {
    return result;
  }
  char v6 = *(uint64_t **)(result + 8);
  uint64_t v7 = *v6;
  if (*v6) {
    unsigned int v8 = *(_DWORD *)(v7 + v2) & 0x7FFF;
  }
  else {
    unsigned int v8 = 0;
  }
  int v9 = *((_DWORD *)v6 + 3);
  unsigned int v10 = v8 & 0x1F;
  char v11 = *((unsigned char *)v6 + 16) - (v8 & 0x1F);
  int v12 = -1 << v11;
  unsigned int v13 = *((unsigned __int8 *)v6 + 36);
  uint64_t v14 = ((v8 >> 10) + 5 * v13 + 7) >> 3;
  int v15 = (v8 >> 10) + 8;
  if (v13 <= 2) {
    int v15 = 0;
  }
  BOOL v16 = v13 > 3;
  uint64_t v17 = 2;
  if (v16) {
    uint64_t v17 = v14;
  }
  BOOL v18 = v10 > 1;
  int v19 = (v8 >> 5) & 0x1F;
  int v20 = v10 + v15 + 8;
  uint64_t v21 = v7 + v3 + v17;
  if (!v19) {
    BOOL v18 = 0;
  }
  if (v18)
  {
    if (v7)
    {
      unsigned int v22 = v19 * ~v12;
      int v23 = v22 & 0x1F;
      int v24 = (_DWORD *)(v21 + 4 * (v22 >> 5));
      int v25 = *v24 >> v22;
      if ((v23 + v19) >= 0x21) {
        v25 |= v24[1] << -(char)v23;
      }
      LODWORD(v26) = v25 & (0xFFFFFFFF >> -(char)v19);
      *(_DWORD *)(result + 48) = v26;
    }
    else
    {
      LODWORD(v26) = 0;
      *(_DWORD *)(result + 48) = 0;
    }
  }
  else if (v10 == 1)
  {
    *(_DWORD *)(result + 48) = 0;
    if (v7)
    {
      unsigned int v27 = 0;
      LODWORD(v26) = 0;
      if ((v9 + 1) > 1) {
        int v28 = v9 + 1;
      }
      else {
        int v28 = 1;
      }
      do
      {
        if ((*(_DWORD *)(v21 + 4 * (v27 >> 5)) >> v27))
        {
          LODWORD(v26) = v26 + 1;
          *(_DWORD *)(result + 48) = v26;
        }
        v27 += v20;
        --v28;
      }
      while (v28);
    }
    else
    {
      LODWORD(v26) = 0;
    }
  }
  else
  {
    LODWORD(v26) = *(_DWORD *)(result + 48);
  }
  int v85 = v9;
  unint64_t v26 = v26;
  int v30 = *(unsigned char **)(result + 16);
  char v29 = *(unsigned char **)(result + 24);
  unint64_t v31 = 0xCCCCCCCCCCCCCCCDLL * (v29 - v30);
  unint64_t v32 = v26 - v31;
  if (v26 > v31)
  {
    uint64_t v33 = *(void *)(result + 32);
    BOOL v84 = v18;
    if (0xCCCCCCCCCCCCCCCDLL * (v33 - (void)v29) < v32)
    {
      char v82 = v11;
      int v83 = -1 << v11;
      unint64_t v34 = 0xCCCCCCCCCCCCCCCDLL * (v33 - (void)v30);
      unint64_t v35 = 0x999999999999999ALL * (v33 - (void)v30);
      if (v35 > v26) {
        unint64_t v26 = v35;
      }
      if (v34 >= 0x1999999999999999) {
        unint64_t v26 = 0x3333333333333333;
      }
      if (v26 >= 0x3333333333333334) {
        sub_19E37C2B8();
      }
      uint64_t v80 = 5 * v26;
      unsigned int v36 = (char *)operator new(5 * v26);
      unsigned int v37 = &v36[v29 - v30];
      uint64_t v81 = &v36[v80];
      size_t v38 = 5 * ((5 * v32 - 5) / 5) + 5;
      bzero(v37, v38);
      int v39 = &v37[v38];
      if (v29 == v30)
      {
        char v11 = v82;
        int v12 = v83;
        BOOL v18 = v84;
      }
      else
      {
        char v11 = v82;
        int v12 = v83;
        BOOL v18 = v84;
        do
        {
          int v40 = *(_DWORD *)(v29 - 5);
          v29 -= 5;
          char v41 = v29[4];
          *(_DWORD *)(v37 - 5) = v40;
          v37 -= 5;
          v37[4] = v41;
        }
        while (v29 != v30);
        char v29 = (unsigned char *)v1[2];
      }
      v1[2] = v37;
      v1[3] = v39;
      v1[4] = v81;
      if (v29)
      {
        operator delete(v29);
        int v12 = v83;
        BOOL v18 = v84;
        char v11 = v82;
      }
      goto LABEL_54;
    }
    size_t v43 = 5 * ((5 * v32 - 5) / 5) + 5;
    int v44 = -1 << v11;
    char v45 = v11;
    bzero(v29, v43);
    BOOL v18 = v84;
    char v11 = v45;
    int v12 = v44;
    unsigned int v42 = &v29[v43];
    goto LABEL_50;
  }
  if (v26 < v31)
  {
    unsigned int v42 = &v30[5 * v26];
LABEL_50:
    v1[3] = v42;
  }
LABEL_54:
  if (v18)
  {
    unsigned int v46 = 0;
    int v47 = 0;
    unsigned int v48 = 0xFFFFFFFF >> -(char)v19;
    uint64_t v49 = v21 + (((v19 << v11) + 7) >> 3);
    int v50 = -v12;
    while (1)
    {
      if (v47)
      {
        if (v7)
        {
          unsigned int v51 = (v47 - 1) * v19;
          int v52 = v51 & 0x1F;
          int v53 = (_DWORD *)(v21 + 4 * (v51 >> 5));
          int v54 = *v53 >> v51;
          if ((v52 + v19) >= 0x21) {
            v54 |= v53[1] << -(char)v52;
          }
          unsigned int v55 = v54 & v48;
          goto LABEL_65;
        }
      }
      else if (v7)
      {
        unsigned int v55 = 0;
LABEL_65:
        int v56 = (v47 * v19) & 0x1F;
        int64x2_t v57 = (_DWORD *)(v21 + 4 * ((v47 * v19) >> 5));
        int v58 = *v57 >> (v47 * v19);
        if ((v56 + v19) >= 0x21) {
          v58 |= v57[1] << -(char)v56;
        }
        unsigned int v59 = v58 & v48;
        unsigned int v60 = (v58 & v48) - v55;
        if (v59 > v55)
        {
          uint64_t v61 = v1[2];
          unsigned int v62 = v59 + v46 - v55;
          unsigned int v63 = v20 * v55;
          do
          {
            unsigned int v64 = (_DWORD *)(v49 + 4 * (v63 >> 5));
            int v65 = *v64 >> v63;
            if ((v63 & 0x1F) + v10 >= 0x21) {
              v65 |= v64[1] << -(v63 & 0x1F);
            }
            *(_DWORD *)(v61 + 5 * v46) = v65 & (0xFFFFFFFF >> -(char)v10) | (v47 << v10);
            unsigned int v66 = (v10 + v63) & 0x1F;
            int v67 = (_DWORD *)(v49 + 4 * ((v10 + v63) >> 5));
            int v68 = *v67 >> (v10 + v63);
            if (v66 >= 0x19) {
              v68 |= v67[1] << -(char)v66;
            }
            *(unsigned char *)(v61 + 5 * v46++ + 4) = v68;
            v63 += v20;
            --v60;
          }
          while (v60);
          unsigned int v46 = v62;
        }
      }
      if (++v47 == v50) {
        goto LABEL_84;
      }
    }
  }
  if (v10 == 1 && v7)
  {
    unsigned int v69 = 0;
    int v70 = 0;
    unsigned int v71 = 1;
    if ((v85 + 1) > 1) {
      int v72 = v85 + 1;
    }
    else {
      int v72 = 1;
    }
    do
    {
      if ((*(_DWORD *)(v21 + 4 * ((v71 - 1) >> 5)) >> (v71 - 1)))
      {
        uint64_t v73 = v1[2];
        *(_DWORD *)(v73 + 5 * v69) = v70;
        unint64_t v74 = (_DWORD *)(v21 + 4 * (v71 >> 5));
        int v75 = *v74 >> v71;
        if ((v71 & 0x1F) >= 0x19) {
          v75 |= v74[1] << -(v71 & 0x1F);
        }
        *(unsigned char *)(v73 + 5 * v69++ + 4) = v75;
      }
      ++v70;
      v71 += v20;
    }
    while (v72 != v70);
  }
LABEL_84:
  unint64_t v76 = v1[2];
  unint64_t v77 = v1[3];
  unint64_t v78 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * (v77 - v76));
  if (v77 == v76) {
    uint64_t v79 = 0;
  }
  else {
    uint64_t v79 = v78;
  }
  return sub_19E4ADA44(v76, v77, v79, 1);
}

unint64_t sub_19E4ADA44(unint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v9 = result;
LABEL_2:
  unsigned int v10 = (int *)(a2 - 5);
  unint64_t j = v9;
  while (1)
  {
    unint64_t v9 = j;
    uint64_t v12 = a2 - j;
    uint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * (a2 - j);
    if (v5 || !v4)
    {
      switch(v13)
      {
        case 0:
        case 1:
          return result;
        case 2:
          unsigned int v54 = *(unsigned __int8 *)(a2 - 1);
          unsigned int v55 = *(unsigned __int8 *)(j + 4);
          if (v54 > v55 || v54 == v55 && *v10 < *(_DWORD *)j)
          {
            char v141 = *(unsigned char *)(j + 4);
            int v135 = *(_DWORD *)j;
            int v56 = *v10;
            *(unsigned char *)(j + 4) = *(unsigned char *)(a2 - 1);
            *(_DWORD *)unint64_t j = v56;
            *(unsigned char *)(a2 - 1) = v141;
            *unsigned int v10 = v135;
          }
          break;
        case 3:
          BOOL result = (unint64_t)sub_19E4ACBEC((int *)j, (int *)(j + 5), (int *)(a2 - 5));
          break;
        case 4:
          int64x2_t v57 = (int *)(j + 5);
          int v58 = (int *)(j + 10);
          BOOL result = (unint64_t)sub_19E4ACBEC((int *)j, (int *)(j + 5), (int *)(j + 10));
          unsigned int v59 = *(unsigned __int8 *)(a2 - 1);
          unsigned int v60 = *(unsigned __int8 *)(j + 14);
          if (v59 > v60 || v59 == v60 && *v10 < *v58)
          {
            int v61 = *v58;
            char v62 = *(unsigned char *)(j + 14);
            char v63 = *(unsigned char *)(a2 - 1);
            *int v58 = *v10;
            *(unsigned char *)(j + 14) = v63;
            *(unsigned char *)(a2 - 1) = v62;
            *unsigned int v10 = v61;
            unsigned int v64 = *(unsigned __int8 *)(j + 14);
            unsigned int v65 = *(unsigned __int8 *)(j + 9);
            if (v64 > v65 || v64 == v65 && *v58 < *v57)
            {
              char v66 = *(unsigned char *)(j + 9);
              int v67 = *v57;
              *int64x2_t v57 = *v58;
              *(unsigned char *)(j + 9) = *(unsigned char *)(j + 14);
              *int v58 = v67;
              *(unsigned char *)(j + 14) = v66;
              unsigned int v68 = *(unsigned __int8 *)(j + 9);
              unsigned int v69 = *(unsigned __int8 *)(j + 4);
              if (v68 > v69 || v68 == v69 && *(_DWORD *)(j + 5) < *(_DWORD *)j)
              {
                char v142 = *(unsigned char *)(j + 4);
                int v136 = *(_DWORD *)j;
                *(_DWORD *)unint64_t j = *v57;
                *(unsigned char *)(j + 4) = *(unsigned char *)(j + 9);
                *int64x2_t v57 = v136;
                *(unsigned char *)(j + 9) = v142;
              }
            }
          }
          break;
        case 5:
          BOOL result = (unint64_t)sub_19E4ACD4C(j, j + 5, j + 10, (int *)(j + 15), (int *)(a2 - 5));
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v12 <= 119)
    {
      unint64_t v70 = j + 5;
      BOOL v72 = j == a2 || v70 == a2;
      if (a4)
      {
        if (v72) {
          return result;
        }
        uint64_t v73 = 0;
        unint64_t v74 = j;
        while (2)
        {
          unint64_t v76 = v74;
          unint64_t v74 = v70;
          unsigned int v77 = *(unsigned __int8 *)(v76 + 9);
          unsigned int v78 = *(unsigned __int8 *)(v76 + 4);
          if (v77 > v78)
          {
            unsigned int v79 = *(_DWORD *)v74;
            goto LABEL_131;
          }
          if (v77 == v78)
          {
            unsigned int v79 = *(_DWORD *)v74;
            if (*(_DWORD *)v74 < *(_DWORD *)v76)
            {
LABEL_131:
              *(_DWORD *)unint64_t v74 = *(_DWORD *)v76;
              *(unsigned char *)(v74 + 4) = *(unsigned char *)(v76 + 4);
              unint64_t v75 = j;
              if (v76 != j)
              {
                uint64_t v80 = v73;
                while (1)
                {
                  uint64_t v81 = j + v80;
                  char v82 = (unsigned int *)(j + v80 - 5);
                  unsigned int v83 = *(unsigned __int8 *)(j + v80 - 1);
                  if (v77 <= v83)
                  {
                    if (v77 != v83)
                    {
                      unint64_t v75 = j + v80;
                      goto LABEL_125;
                    }
                    if (v79 >= *v82) {
                      break;
                    }
                  }
                  v76 -= 5;
                  *(_DWORD *)uint64_t v81 = *v82;
                  *(unsigned char *)(v81 + 4) = *(unsigned char *)(j + v80 - 1);
                  v80 -= 5;
                  if (!v80)
                  {
                    unint64_t v75 = j;
                    goto LABEL_125;
                  }
                }
                unint64_t v75 = v76;
              }
LABEL_125:
              *(_DWORD *)unint64_t v75 = v79;
              *(unsigned char *)(v75 + 4) = v77;
            }
          }
          unint64_t v70 = v74 + 5;
          v73 += 5;
          if (v74 + 5 == a2) {
            return result;
          }
          continue;
        }
      }
      if (v72) {
        return result;
      }
      while (2)
      {
        unint64_t v126 = v9;
        unint64_t v9 = v70;
        unsigned int v127 = *(unsigned __int8 *)(v126 + 9);
        unsigned int v128 = *(unsigned __int8 *)(v126 + 4);
        if (v127 <= v128)
        {
          if (v127 == v128)
          {
            unsigned int v129 = *(_DWORD *)v9;
            if (*(_DWORD *)v9 < *(_DWORD *)v126) {
              goto LABEL_206;
            }
          }
        }
        else
        {
          unsigned int v129 = *(_DWORD *)v9;
          do
          {
            do
            {
LABEL_206:
              unint64_t v130 = v126;
              *(_DWORD *)(v126 + 5) = *(_DWORD *)v126;
              *(unsigned char *)(v126 + 9) = *(unsigned char *)(v126 + 4);
              v126 -= 5;
              unsigned int v131 = *(unsigned __int8 *)(v130 - 1);
            }
            while (v127 > v131);
          }
          while (v127 == v131 && v129 < *(_DWORD *)(v130 - 5));
          *(_DWORD *)unint64_t v130 = v129;
          *(unsigned char *)(v130 + 4) = v127;
        }
        unint64_t v70 = v9 + 5;
        if (v9 + 5 == a2) {
          return result;
        }
        continue;
      }
    }
    if (!a3) {
      break;
    }
    uint64_t v14 = 5 * ((unint64_t)v13 >> 1);
    unint64_t v15 = j + v14;
    if ((unint64_t)v12 >= 0x281)
    {
      sub_19E4ACBEC((int *)v9, (int *)(v9 + v14), (int *)(a2 - 5));
      sub_19E4ACBEC((int *)(v9 + 5), (int *)(v14 + v9 - 5), (int *)(a2 - 10));
      sub_19E4ACBEC((int *)(v9 + 10), (int *)(v9 + 5 + v14), (int *)(a2 - 15));
      BOOL result = (unint64_t)sub_19E4ACBEC((int *)(v14 + v9 - 5), (int *)(v9 + v14), (int *)(v9 + 5 + v14));
      char v138 = *(unsigned char *)(v9 + 4);
      int v132 = *(_DWORD *)v9;
      char v16 = *(unsigned char *)(v15 + 4);
      *(_DWORD *)unint64_t v9 = *(_DWORD *)v15;
      *(unsigned char *)(v9 + 4) = v16;
      *(unsigned char *)(v15 + 4) = v138;
      *(_DWORD *)unint64_t v15 = v132;
      --a3;
      if (a4) {
        goto LABEL_15;
      }
    }
    else
    {
      BOOL result = (unint64_t)sub_19E4ACBEC((int *)(v9 + v14), (int *)v9, (int *)(a2 - 5));
      --a3;
      if (a4)
      {
LABEL_15:
        unsigned int v19 = *(_DWORD *)v9;
        unsigned int v18 = *(unsigned __int8 *)(v9 + 4);
        goto LABEL_16;
      }
    }
    unsigned int v17 = *(unsigned __int8 *)(v9 - 1);
    unsigned int v18 = *(unsigned __int8 *)(v9 + 4);
    unsigned int v19 = *(_DWORD *)v9;
    if (v17 > v18)
    {
LABEL_16:
      for (unint64_t i = v9 + 5; ; i += 5)
      {
        unsigned int v21 = *(unsigned __int8 *)(i + 4);
        if (v21 <= v18 && (v21 != v18 || *(_DWORD *)i >= v19)) {
          break;
        }
      }
      if (i - 5 == v9)
      {
        int v24 = (unsigned __int8 *)a2;
        if (i < a2)
        {
          unsigned int v26 = *(unsigned __int8 *)(a2 - 1);
          int v24 = (unsigned __int8 *)(a2 - 5);
          if (v26 <= v18)
          {
            int v23 = (unsigned __int8 *)(a2 - 6);
            int v24 = (unsigned __int8 *)(a2 - 5);
            while (1)
            {
              unsigned int v37 = (unsigned int *)(v23 + 1);
              if (v26 == v18)
              {
                if (*v37 < v19 || i >= (unint64_t)v37) {
                  goto LABEL_27;
                }
              }
              else if (i >= (unint64_t)v37)
              {
                break;
              }
              v24 -= 5;
              unsigned int v36 = *v23;
              v23 -= 5;
              unsigned int v26 = v36;
              if (v36 > v18) {
                goto LABEL_27;
              }
            }
          }
        }
      }
      else
      {
        unsigned int v22 = *(unsigned __int8 *)(a2 - 1);
        int v23 = (unsigned __int8 *)(a2 - 6);
        int v24 = (unsigned __int8 *)(a2 - 5);
        if (v22 <= v18)
        {
          do
          {
            if (v22 == v18 && *(_DWORD *)(v23 + 1) < v19) {
              break;
            }
            unsigned int v25 = *v23;
            v23 -= 5;
            unsigned int v22 = v25;
          }
          while (v25 <= v18);
LABEL_27:
          int v24 = v23 + 1;
        }
      }
      unint64_t j = i;
      if (i < (unint64_t)v24)
      {
        unint64_t j = i;
        unsigned int v27 = v24;
        do
        {
          while (1)
          {
            unsigned __int8 v139 = *(unsigned char *)(j + 4);
            int v133 = *(_DWORD *)j;
            int v28 = *(_DWORD *)v27;
            *(unsigned char *)(j + 4) = v27[4];
            *(_DWORD *)unint64_t j = v28;
            v27[4] = v139;
            *(_DWORD *)unsigned int v27 = v133;
            unint64_t v29 = j + 5;
            do
            {
              do
              {
                unint64_t j = v29;
                unsigned int v30 = *(unsigned __int8 *)(v29 + 4);
                v29 += 5;
              }
              while (v30 > v18);
            }
            while (v30 == v18 && *(_DWORD *)j < v19);
            unsigned int v31 = *(v27 - 1);
            if (v31 <= v18) {
              break;
            }
            v27 -= 5;
            if (j >= (unint64_t)v27) {
              goto LABEL_43;
            }
          }
          unint64_t v32 = v27 - 6;
          do
          {
            if (v31 == v18 && *(_DWORD *)(v32 + 1) < v19) {
              break;
            }
            unsigned int v33 = *v32;
            v32 -= 5;
            unsigned int v31 = v33;
          }
          while (v33 <= v18);
          unsigned int v27 = v32 + 1;
        }
        while (j < (unint64_t)v27);
      }
LABEL_43:
      if (j - 5 != v9)
      {
        int v34 = *(_DWORD *)(j - 5);
        *(unsigned char *)(v9 + 4) = *(unsigned char *)(j - 1);
        *(_DWORD *)unint64_t v9 = v34;
      }
      *(_DWORD *)(j - 5) = v19;
      *(unsigned char *)(j - 1) = v18;
      if (i < (unint64_t)v24) {
        goto LABEL_48;
      }
      BOOL v35 = sub_19E4AE60C(v9, j - 5);
      BOOL result = sub_19E4AE60C(j, a2);
      if (result)
      {
        a2 = j - 5;
        if (v35) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v35)
      {
LABEL_48:
        BOOL result = sub_19E4ADA44(v9, j - 5, a3, a4 & 1);
        a4 = 0;
      }
    }
    else
    {
      if (v17 == v18 && *(_DWORD *)(v9 - 5) < v19)
      {
        unsigned int v18 = *(unsigned __int8 *)(v9 - 1);
        goto LABEL_16;
      }
      unsigned int v39 = *(unsigned __int8 *)(a2 - 1);
      if (v18 > v39 || v18 == v39 && v19 < *v10)
      {
        unsigned int v40 = *(unsigned __int8 *)(v9 + 9);
        if (v18 <= v40)
        {
          unsigned int v42 = (unsigned __int8 *)(v9 + 14);
          do
          {
            if (v18 == v40 && v19 < *(_DWORD *)(v42 - 9)) {
              break;
            }
            unsigned int v43 = *v42;
            v42 += 5;
            unsigned int v40 = v43;
          }
          while (v18 <= v43);
          unint64_t j = (unint64_t)(v42 - 9);
        }
        else
        {
          unint64_t j = v9 + 5;
        }
      }
      else
      {
        for (unint64_t j = v9 + 5; j < a2; j += 5)
        {
          unsigned int v41 = *(unsigned __int8 *)(j + 4);
          if (v18 > v41 || v18 == v41 && v19 < *(_DWORD *)j) {
            break;
          }
        }
      }
      int v44 = (unsigned __int8 *)a2;
      if (j < a2)
      {
        for (k = (unsigned __int8 *)(a2 - 6); v18 > v39 || v18 == v39 && v19 < *(_DWORD *)(k + 1); k -= 5)
        {
          unsigned int v46 = *k;
          unsigned int v39 = v46;
        }
        int v44 = k + 1;
      }
      while (j < (unint64_t)v44)
      {
        unsigned __int8 v140 = *(unsigned char *)(j + 4);
        int v134 = *(_DWORD *)j;
        int v47 = *(_DWORD *)v44;
        *(unsigned char *)(j + 4) = v44[4];
        *(_DWORD *)unint64_t j = v47;
        v44[4] = v140;
        *(_DWORD *)int v44 = v134;
        unsigned int v48 = *(unsigned __int8 *)(j + 9);
        if (v18 <= v48)
        {
          uint64_t v49 = (unsigned __int8 *)(j + 14);
          do
          {
            if (v18 == v48 && v19 < *(_DWORD *)(v49 - 9)) {
              break;
            }
            unsigned int v50 = *v49;
            v49 += 5;
            unsigned int v48 = v50;
          }
          while (v18 <= v50);
          unint64_t j = (unint64_t)(v49 - 9);
        }
        else
        {
          j += 5;
        }
        unsigned int v51 = v44 - 5;
        do
        {
          do
          {
            int v44 = v51;
            unsigned int v52 = v51[4];
            v51 -= 5;
          }
          while (v18 > v52);
        }
        while (v18 == v52 && v19 < *(_DWORD *)v44);
      }
      BOOL v4 = j - 5 >= v9;
      BOOL v5 = j - 5 == v9;
      if (j - 5 != v9)
      {
        int v53 = *(_DWORD *)(j - 5);
        *(unsigned char *)(v9 + 4) = *(unsigned char *)(j - 1);
        *(_DWORD *)unint64_t v9 = v53;
      }
      a4 = 0;
      *(_DWORD *)(j - 5) = v19;
      *(unsigned char *)(j - 1) = v18;
    }
  }
  if (j != a2)
  {
    int64_t v84 = (unint64_t)(v13 - 2) >> 1;
    int64_t v85 = v84;
    do
    {
      int64_t v87 = v85;
      if (v84 >= v85)
      {
        uint64_t v88 = (2 * v85) | 1;
        unint64_t v89 = (unsigned int *)(j + 5 * v88);
        if (2 * v87 + 2 < v13)
        {
          unsigned int v90 = *((unsigned __int8 *)v89 + 4);
          unsigned int v91 = *((unsigned __int8 *)v89 + 9);
          if (v90 > v91 || v90 == v91 && *v89 < *(unsigned int *)((char *)v89 + 5))
          {
            unint64_t v89 = (unsigned int *)((char *)v89 + 5);
            uint64_t v88 = 2 * v87 + 2;
          }
        }
        unsigned int v92 = *((unsigned __int8 *)v89 + 4);
        unsigned int v93 = *(unsigned __int8 *)(j + 5 * v87 + 4);
        BOOL v94 = v92 == v93;
        if (v92 <= v93)
        {
          unint64_t v95 = j + 5 * v87;
          unsigned int v96 = *(_DWORD *)v95;
          if (!v94 || *v89 >= v96)
          {
            int v97 = *v89;
            BOOL result = *((unsigned __int8 *)v89 + 4);
            *(unsigned char *)(v95 + 4) = result;
            *(_DWORD *)unint64_t v95 = v97;
            if (v84 >= v88)
            {
              while (1)
              {
                uint64_t v99 = 2 * v88;
                uint64_t v88 = (2 * v88) | 1;
                uint64_t v86 = (unsigned int *)(j + 5 * v88);
                uint64_t v100 = v99 + 2;
                if (v100 < v13)
                {
                  BOOL result = *((unsigned __int8 *)v86 + 4);
                  unsigned int v101 = *((unsigned __int8 *)v86 + 9);
                  if (result > v101
                    || result == v101
                    && (BOOL result = *v86, result < *(unsigned int *)((char *)v86 + 5)))
                  {
                    uint64_t v86 = (unsigned int *)((char *)v86 + 5);
                    uint64_t v88 = v100;
                  }
                }
                unsigned int v102 = *((unsigned __int8 *)v86 + 4);
                if (v102 > v93 || v102 == v93 && *v86 < v96) {
                  break;
                }
                unsigned int v98 = *v86;
                BOOL result = *((unsigned __int8 *)v86 + 4);
                *((unsigned char *)v89 + 4) = result;
                unsigned int *v89 = v98;
                unint64_t v89 = v86;
                if (v84 < v88) {
                  goto LABEL_142;
                }
              }
            }
            uint64_t v86 = v89;
LABEL_142:
            unsigned int *v86 = v96;
            *((unsigned char *)v86 + 4) = v93;
          }
        }
      }
      int64_t v85 = v87 - 1;
    }
    while (v87);
    int64_t v103 = v12 / 5uLL;
    while (2)
    {
      uint64_t v105 = 0;
      char v143 = *(unsigned char *)(j + 4);
      int v137 = *(_DWORD *)j;
      unint64_t v106 = j;
      do
      {
        unint64_t v108 = v106;
        v106 += 5 * (v105 + 1);
        uint64_t v109 = 2 * v105;
        uint64_t v105 = (2 * v105) | 1;
        int64_t v110 = v109 + 2;
        if (v110 < v103)
        {
          unsigned int v111 = *(unsigned __int8 *)(v106 + 4);
          unsigned int v112 = *(unsigned __int8 *)(v106 + 9);
          if (v111 > v112 || v111 == v112 && *(_DWORD *)v106 < *(_DWORD *)(v106 + 5))
          {
            v106 += 5;
            uint64_t v105 = v110;
          }
        }
        unsigned int v107 = *(_DWORD *)v106;
        *(unsigned char *)(v108 + 4) = *(unsigned char *)(v106 + 4);
        *(_DWORD *)unint64_t v108 = v107;
      }
      while (v105 <= (uint64_t)((unint64_t)(v103 - 2) >> 1));
      a2 -= 5;
      if (v106 == a2)
      {
        *(unsigned char *)(v106 + 4) = v143;
        *(_DWORD *)unint64_t v106 = v137;
        goto LABEL_167;
      }
      int v113 = *(_DWORD *)a2;
      *(unsigned char *)(v106 + 4) = *(unsigned char *)(a2 + 4);
      *(_DWORD *)unint64_t v106 = v113;
      *(unsigned char *)(a2 + 4) = v143;
      *(_DWORD *)a2 = v137;
      uint64_t v114 = v106 - j + 5;
      if (v114 >= 6)
      {
        unint64_t v115 = v114 / 5uLL - 2;
        unint64_t v116 = v115 >> 1;
        unint64_t v117 = j + 5 * (v115 >> 1);
        unsigned int v118 = *(unsigned __int8 *)(v117 + 4);
        unsigned int v119 = *(unsigned __int8 *)(v106 + 4);
        if (v118 > v119)
        {
          unsigned int v120 = *(_DWORD *)v106;
          goto LABEL_181;
        }
        if (v118 == v119)
        {
          unsigned int v120 = *(_DWORD *)v106;
          if (*(_DWORD *)v117 < *(_DWORD *)v106)
          {
LABEL_181:
            int v121 = *(_DWORD *)v117;
            *(unsigned char *)(v106 + 4) = *(unsigned char *)(v117 + 4);
            *(_DWORD *)unint64_t v106 = v121;
            if (v115 >= 2)
            {
              while (1)
              {
                unint64_t v124 = v116 - 1;
                unint64_t v116 = (v116 - 1) >> 1;
                unint64_t v122 = j + 5 * v116;
                unsigned int v125 = *(unsigned __int8 *)(v122 + 4);
                if (v125 <= v119 && (v125 != v119 || *(_DWORD *)v122 >= v120)) {
                  break;
                }
                int v123 = *(_DWORD *)v122;
                *(unsigned char *)(v117 + 4) = *(unsigned char *)(v122 + 4);
                *(_DWORD *)unint64_t v117 = v123;
                unint64_t v117 = j + 5 * v116;
                if (v124 <= 1) {
                  goto LABEL_183;
                }
              }
            }
            unint64_t v122 = v117;
LABEL_183:
            *(_DWORD *)unint64_t v122 = v120;
            *(unsigned char *)(v122 + 4) = v119;
          }
        }
      }
LABEL_167:
      if (v103-- <= 2) {
        return result;
      }
      continue;
    }
  }
  return result;
}

BOOL sub_19E4AE60C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * (a2 - a1);
  BOOL result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      char v6 = (int *)(a2 - 5);
      unsigned int v7 = *(unsigned __int8 *)(a2 - 1);
      unsigned int v8 = *(unsigned __int8 *)(a1 + 4);
      if (v7 > v8 || v7 == v8 && *v6 < *(_DWORD *)a1)
      {
        char v9 = *(unsigned char *)(a1 + 4);
        int v10 = *(_DWORD *)a1;
        char v11 = *(unsigned char *)(a2 - 1);
        *(_DWORD *)a1 = *v6;
        *(unsigned char *)(a1 + 4) = v11;
        *char v6 = v10;
        *(unsigned char *)(a2 - 1) = v9;
      }
      return result;
    case 3uLL:
      sub_19E4ACBEC((int *)a1, (int *)(a1 + 5), (int *)(a2 - 5));
      return 1;
    case 4uLL:
      int v24 = (int *)(a1 + 5);
      unsigned int v25 = (int *)(a1 + 10);
      unsigned int v26 = (int *)(a2 - 5);
      sub_19E4ACBEC((int *)a1, (int *)(a1 + 5), (int *)(a1 + 10));
      unsigned int v27 = *(unsigned __int8 *)(a2 - 1);
      unsigned int v28 = *(unsigned __int8 *)(a1 + 14);
      if (v27 > v28 || v27 == v28 && *v26 < *v25)
      {
        char v29 = *(unsigned char *)(a1 + 14);
        int v30 = *v25;
        char v31 = *(unsigned char *)(a2 - 1);
        int *v25 = *v26;
        *(unsigned char *)(a1 + 14) = v31;
        *unsigned int v26 = v30;
        *(unsigned char *)(a2 - 1) = v29;
        unsigned int v32 = *(unsigned __int8 *)(a1 + 14);
        unsigned int v33 = *(unsigned __int8 *)(a1 + 9);
        if (v32 > v33 || v32 == v33 && *v25 < *v24)
        {
          char v34 = *(unsigned char *)(a1 + 9);
          int v35 = *v24;
          *int v24 = *v25;
          *(unsigned char *)(a1 + 9) = *(unsigned char *)(a1 + 14);
          int *v25 = v35;
          *(unsigned char *)(a1 + 14) = v34;
          unsigned int v36 = *(unsigned __int8 *)(a1 + 9);
          unsigned int v37 = *(unsigned __int8 *)(a1 + 4);
          if (v36 > v37 || v36 == v37 && *(_DWORD *)(a1 + 5) < *(_DWORD *)a1)
          {
            char v38 = *(unsigned char *)(a1 + 4);
            int v39 = *(_DWORD *)a1;
            *(_DWORD *)a1 = *v24;
            *(unsigned char *)(a1 + 4) = *(unsigned char *)(a1 + 9);
            *int v24 = v39;
            *(unsigned char *)(a1 + 9) = v38;
          }
        }
      }
      return 1;
    case 5uLL:
      sub_19E4ACD4C(a1, a1 + 5, a1 + 10, (int *)(a1 + 15), (int *)(a2 - 5));
      return 1;
    default:
      uint64_t v12 = a1 + 10;
      sub_19E4ACBEC((int *)a1, (int *)(a1 + 5), (int *)(a1 + 10));
      uint64_t v13 = a1 + 15;
      if (a1 + 15 == a2) {
        return 1;
      }
      uint64_t v14 = 0;
      int v15 = 0;
      break;
  }
  while (1)
  {
    unsigned int v17 = *(unsigned __int8 *)(v13 + 4);
    unsigned int v18 = *(unsigned __int8 *)(v12 + 4);
    if (v17 > v18) {
      break;
    }
    if (v17 == v18)
    {
      unsigned int v19 = *(_DWORD *)v13;
      if (*(_DWORD *)v13 < *(_DWORD *)v12) {
        goto LABEL_11;
      }
    }
LABEL_8:
    uint64_t v12 = v13;
    v14 += 5;
    v13 += 5;
    if (v13 == a2) {
      return 1;
    }
  }
  unsigned int v19 = *(_DWORD *)v13;
LABEL_11:
  *(_DWORD *)uint64_t v13 = *(_DWORD *)v12;
  *(unsigned char *)(v13 + 4) = *(unsigned char *)(v12 + 4);
  uint64_t v16 = a1;
  if (v12 != a1)
  {
    uint64_t v20 = v14;
    while (1)
    {
      uint64_t v21 = a1 + v20;
      unsigned int v22 = (unsigned int *)(a1 + v20 + 5);
      unsigned int v23 = *(unsigned __int8 *)(a1 + v20 + 9);
      if (v17 <= v23)
      {
        if (v17 != v23)
        {
          uint64_t v16 = v12;
          goto LABEL_7;
        }
        if (v19 >= *v22) {
          break;
        }
      }
      v12 -= 5;
      *(_DWORD *)(v21 + 10) = *v22;
      *(unsigned char *)(v21 + 14) = *(unsigned char *)(a1 + v20 + 9);
      v20 -= 5;
      if (v20 == -10)
      {
        uint64_t v16 = a1;
        goto LABEL_7;
      }
    }
    uint64_t v16 = a1 + v20 + 10;
  }
LABEL_7:
  *(_DWORD *)uint64_t v16 = v19;
  *(unsigned char *)(v16 + 4) = v17;
  if (++v15 != 8) {
    goto LABEL_8;
  }
  return v13 + 5 == a2;
}

unint64_t sub_19E4AE924(unint64_t result)
{
  unsigned int v1 = *(_DWORD *)(result + 72);
  if (v1 < 2) {
    return result;
  }
  unint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(result + 40);
  if (!v3) {
    return result;
  }
  unint64_t v4 = *(unsigned int *)(result + 48);
  if (!v4) {
    return result;
  }
  uint64_t v5 = *(unsigned int *)(result + 56);
  if (v5 < 2) {
    return result;
  }
  char v6 = *(uint64_t **)(result + 8);
  uint64_t v7 = *v6;
  int v8 = *((unsigned __int8 *)v6 + 16);
  if (v1 + 1 >= *((unsigned __int8 *)v6 + 36))
  {
    int v12 = v8 + 8;
  }
  else
  {
    char v9 = (unsigned int *)(v7 + v5);
    unsigned int v10 = *v9;
    if (v1 == 2)
    {
      unsigned int v11 = v10 >> 15;
    }
    else
    {
      unsigned int v13 = 5 * v1 + ((v10 >> 10) & 0x1F) + 5;
      unsigned int v14 = v13 & 0x1F;
      int v15 = &v9[v13 >> 5];
      unsigned int v11 = *v15 >> v13;
      if (v14 >= 0x1C) {
        v11 |= v15[1] << -(char)v14;
      }
    }
    int v12 = v8 + (v11 & 0x1F) + 16;
  }
  unint64_t v16 = *(void *)(result + 16);
  unsigned int v17 = *(unsigned char **)(result + 24);
  unint64_t v18 = 0xCCCCCCCCCCCCCCCDLL * (void)&v17[-v16];
  unint64_t v19 = v4 - v18;
  if (v4 <= v18)
  {
    if (v4 < v18) {
      *(void *)(result + ++*(_DWORD *)(result + 24) = v16 + 5 * v4;
    }
  }
  else
  {
    uint64_t v20 = *(void *)(result + 32);
    if (0xCCCCCCCCCCCCCCCDLL * (v20 - (void)v17) >= v19)
    {
      bzero(*(void **)(result + 24), 5 * ((5 * v19 - 5) / 5) + 5);
      *(void *)(v2 + ++*(_DWORD *)(result + 24) = &v17[5 * ((5 * v19 - 5) / 5) + 5];
    }
    else
    {
      unint64_t v21 = 0xCCCCCCCCCCCCCCCDLL * (v20 - v16);
      unint64_t v22 = 0x999999999999999ALL * (v20 - v16);
      if (v22 > v4) {
        unint64_t v4 = v22;
      }
      if (v21 >= 0x1999999999999999) {
        unint64_t v4 = 0x3333333333333333;
      }
      if (v4 >= 0x3333333333333334) {
        sub_19E37C2B8();
      }
      uint64_t v23 = 5 * v4;
      int v24 = (char *)operator new(5 * v4);
      unsigned int v25 = &v17[(void)v24 - v16];
      unsigned int v46 = &v24[v23];
      bzero(v25, 5 * ((5 * v19 - 5) / 5) + 5);
      unsigned int v26 = &v25[5 * ((5 * v19 - 5) / 5) + 5];
      if (v17 != (unsigned char *)v16)
      {
        do
        {
          int v27 = *(_DWORD *)(v17 - 5);
          v17 -= 5;
          char v28 = v17[4];
          *(_DWORD *)(v25 - 5) = v27;
          v25 -= 5;
          v25[4] = v28;
        }
        while (v17 != (unsigned char *)v16);
        unsigned int v17 = *(unsigned char **)(v2 + 16);
      }
      *(void *)(v2 + 16) = v25;
      *(void *)(v2 + ++*(_DWORD *)(result + 24) = v26;
      *(void *)(v2 + 32) = v46;
      if (v17) {
        operator delete(v17);
      }
    }
    unint64_t v4 = *(unsigned int *)(v2 + 48);
    unint64_t v16 = *(void *)(v2 + 16);
    if (!v4) {
      goto LABEL_40;
    }
  }
  uint64_t v29 = v7 + v3;
  int v30 = *(_DWORD *)(v2 + 44);
  if (v8)
  {
    char v31 = (unsigned char *)(v16 + 4);
    unsigned int v32 = v12 * v30;
    do
    {
      unsigned int v33 = (_DWORD *)(v29 + 4 * (v32 >> 5));
      int v34 = *v33 >> v32;
      if ((v32 & 0x1F) + v8 >= 0x21) {
        v34 |= v33[1] << -(v32 & 0x1F);
      }
      *((_DWORD *)v31 - 1) = v34 & (0xFFFFFFFF >> -(char)v8);
      unsigned int v35 = (v8 + v32) & 0x1F;
      unsigned int v36 = (_DWORD *)(v29 + 4 * ((v8 + v32) >> 5));
      int v37 = *v36 >> (v8 + v32);
      if (v35 >= 0x19) {
        v37 |= v36[1] << -(char)v35;
      }
      *char v31 = v37;
      v31 += 5;
      v32 += v12;
      --v4;
    }
    while (v4);
  }
  else
  {
    uint64_t v38 = 0;
    uint64_t v39 = 5 * v4;
    unsigned int v40 = v12 * v30;
    do
    {
      *(_DWORD *)(v16 + v38) = 0;
      unsigned int v41 = (_DWORD *)(v29 + 4 * (v40 >> 5));
      int v42 = *v41 >> v40;
      if ((v40 & 0x1F) >= 0x19) {
        v42 |= v41[1] << -(v40 & 0x1F);
      }
      *(unsigned char *)(v16 + v38 + 4) = v42;
      v38 += 5;
      v40 += v12;
    }
    while (v39 != v38);
  }
LABEL_40:
  unint64_t v43 = *(void *)(v2 + 24);
  unint64_t v44 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * (v43 - v16));
  if (v43 == v16) {
    uint64_t v45 = 0;
  }
  else {
    uint64_t v45 = v44;
  }
  return sub_19E4AECC8(v16, v43, v45, 1);
}

unint64_t sub_19E4AECC8(unint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v9 = result;
LABEL_2:
  unsigned int v10 = (int *)(a2 - 5);
  unint64_t j = v9;
  while (1)
  {
    unint64_t v9 = j;
    uint64_t v12 = a2 - j;
    uint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * (a2 - j);
    if (v5 || !v4)
    {
      switch(v13)
      {
        case 0:
        case 1:
          return result;
        case 2:
          unsigned int v54 = *(unsigned __int8 *)(a2 - 1);
          unsigned int v55 = *(unsigned __int8 *)(j + 4);
          if (v54 > v55 || v54 == v55 && *v10 < *(_DWORD *)j)
          {
            char v141 = *(unsigned char *)(j + 4);
            int v135 = *(_DWORD *)j;
            int v56 = *v10;
            *(unsigned char *)(j + 4) = *(unsigned char *)(a2 - 1);
            *(_DWORD *)unint64_t j = v56;
            *(unsigned char *)(a2 - 1) = v141;
            *unsigned int v10 = v135;
          }
          break;
        case 3:
          BOOL result = (unint64_t)sub_19E4ACBEC((int *)j, (int *)(j + 5), (int *)(a2 - 5));
          break;
        case 4:
          int64x2_t v57 = (int *)(j + 5);
          int v58 = (int *)(j + 10);
          BOOL result = (unint64_t)sub_19E4ACBEC((int *)j, (int *)(j + 5), (int *)(j + 10));
          unsigned int v59 = *(unsigned __int8 *)(a2 - 1);
          unsigned int v60 = *(unsigned __int8 *)(j + 14);
          if (v59 > v60 || v59 == v60 && *v10 < *v58)
          {
            int v61 = *v58;
            char v62 = *(unsigned char *)(j + 14);
            char v63 = *(unsigned char *)(a2 - 1);
            *int v58 = *v10;
            *(unsigned char *)(j + 14) = v63;
            *(unsigned char *)(a2 - 1) = v62;
            *unsigned int v10 = v61;
            unsigned int v64 = *(unsigned __int8 *)(j + 14);
            unsigned int v65 = *(unsigned __int8 *)(j + 9);
            if (v64 > v65 || v64 == v65 && *v58 < *v57)
            {
              char v66 = *(unsigned char *)(j + 9);
              int v67 = *v57;
              *int64x2_t v57 = *v58;
              *(unsigned char *)(j + 9) = *(unsigned char *)(j + 14);
              *int v58 = v67;
              *(unsigned char *)(j + 14) = v66;
              unsigned int v68 = *(unsigned __int8 *)(j + 9);
              unsigned int v69 = *(unsigned __int8 *)(j + 4);
              if (v68 > v69 || v68 == v69 && *(_DWORD *)(j + 5) < *(_DWORD *)j)
              {
                char v142 = *(unsigned char *)(j + 4);
                int v136 = *(_DWORD *)j;
                *(_DWORD *)unint64_t j = *v57;
                *(unsigned char *)(j + 4) = *(unsigned char *)(j + 9);
                *int64x2_t v57 = v136;
                *(unsigned char *)(j + 9) = v142;
              }
            }
          }
          break;
        case 5:
          BOOL result = (unint64_t)sub_19E4ACD4C(j, j + 5, j + 10, (int *)(j + 15), (int *)(a2 - 5));
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v12 <= 119)
    {
      unint64_t v70 = j + 5;
      BOOL v72 = j == a2 || v70 == a2;
      if (a4)
      {
        if (v72) {
          return result;
        }
        uint64_t v73 = 0;
        unint64_t v74 = j;
        while (2)
        {
          unint64_t v76 = v74;
          unint64_t v74 = v70;
          unsigned int v77 = *(unsigned __int8 *)(v76 + 9);
          unsigned int v78 = *(unsigned __int8 *)(v76 + 4);
          if (v77 > v78)
          {
            unsigned int v79 = *(_DWORD *)v74;
            goto LABEL_131;
          }
          if (v77 == v78)
          {
            unsigned int v79 = *(_DWORD *)v74;
            if (*(_DWORD *)v74 < *(_DWORD *)v76)
            {
LABEL_131:
              *(_DWORD *)unint64_t v74 = *(_DWORD *)v76;
              *(unsigned char *)(v74 + 4) = *(unsigned char *)(v76 + 4);
              unint64_t v75 = j;
              if (v76 != j)
              {
                uint64_t v80 = v73;
                while (1)
                {
                  uint64_t v81 = j + v80;
                  char v82 = (unsigned int *)(j + v80 - 5);
                  unsigned int v83 = *(unsigned __int8 *)(j + v80 - 1);
                  if (v77 <= v83)
                  {
                    if (v77 != v83)
                    {
                      unint64_t v75 = j + v80;
                      goto LABEL_125;
                    }
                    if (v79 >= *v82) {
                      break;
                    }
                  }
                  v76 -= 5;
                  *(_DWORD *)uint64_t v81 = *v82;
                  *(unsigned char *)(v81 + 4) = *(unsigned char *)(j + v80 - 1);
                  v80 -= 5;
                  if (!v80)
                  {
                    unint64_t v75 = j;
                    goto LABEL_125;
                  }
                }
                unint64_t v75 = v76;
              }
LABEL_125:
              *(_DWORD *)unint64_t v75 = v79;
              *(unsigned char *)(v75 + 4) = v77;
            }
          }
          unint64_t v70 = v74 + 5;
          v73 += 5;
          if (v74 + 5 == a2) {
            return result;
          }
          continue;
        }
      }
      if (v72) {
        return result;
      }
      while (2)
      {
        unint64_t v126 = v9;
        unint64_t v9 = v70;
        unsigned int v127 = *(unsigned __int8 *)(v126 + 9);
        unsigned int v128 = *(unsigned __int8 *)(v126 + 4);
        if (v127 <= v128)
        {
          if (v127 == v128)
          {
            unsigned int v129 = *(_DWORD *)v9;
            if (*(_DWORD *)v9 < *(_DWORD *)v126) {
              goto LABEL_206;
            }
          }
        }
        else
        {
          unsigned int v129 = *(_DWORD *)v9;
          do
          {
            do
            {
LABEL_206:
              unint64_t v130 = v126;
              *(_DWORD *)(v126 + 5) = *(_DWORD *)v126;
              *(unsigned char *)(v126 + 9) = *(unsigned char *)(v126 + 4);
              v126 -= 5;
              unsigned int v131 = *(unsigned __int8 *)(v130 - 1);
            }
            while (v127 > v131);
          }
          while (v127 == v131 && v129 < *(_DWORD *)(v130 - 5));
          *(_DWORD *)unint64_t v130 = v129;
          *(unsigned char *)(v130 + 4) = v127;
        }
        unint64_t v70 = v9 + 5;
        if (v9 + 5 == a2) {
          return result;
        }
        continue;
      }
    }
    if (!a3) {
      break;
    }
    uint64_t v14 = 5 * ((unint64_t)v13 >> 1);
    unint64_t v15 = j + v14;
    if ((unint64_t)v12 >= 0x281)
    {
      sub_19E4ACBEC((int *)v9, (int *)(v9 + v14), (int *)(a2 - 5));
      sub_19E4ACBEC((int *)(v9 + 5), (int *)(v14 + v9 - 5), (int *)(a2 - 10));
      sub_19E4ACBEC((int *)(v9 + 10), (int *)(v9 + 5 + v14), (int *)(a2 - 15));
      BOOL result = (unint64_t)sub_19E4ACBEC((int *)(v14 + v9 - 5), (int *)(v9 + v14), (int *)(v9 + 5 + v14));
      char v138 = *(unsigned char *)(v9 + 4);
      int v132 = *(_DWORD *)v9;
      char v16 = *(unsigned char *)(v15 + 4);
      *(_DWORD *)unint64_t v9 = *(_DWORD *)v15;
      *(unsigned char *)(v9 + 4) = v16;
      *(unsigned char *)(v15 + 4) = v138;
      *(_DWORD *)unint64_t v15 = v132;
      --a3;
      if (a4) {
        goto LABEL_15;
      }
    }
    else
    {
      BOOL result = (unint64_t)sub_19E4ACBEC((int *)(v9 + v14), (int *)v9, (int *)(a2 - 5));
      --a3;
      if (a4)
      {
LABEL_15:
        unsigned int v19 = *(_DWORD *)v9;
        unsigned int v18 = *(unsigned __int8 *)(v9 + 4);
        goto LABEL_16;
      }
    }
    unsigned int v17 = *(unsigned __int8 *)(v9 - 1);
    unsigned int v18 = *(unsigned __int8 *)(v9 + 4);
    unsigned int v19 = *(_DWORD *)v9;
    if (v17 > v18)
    {
LABEL_16:
      for (unint64_t i = v9 + 5; ; i += 5)
      {
        unsigned int v21 = *(unsigned __int8 *)(i + 4);
        if (v21 <= v18 && (v21 != v18 || *(_DWORD *)i >= v19)) {
          break;
        }
      }
      if (i - 5 == v9)
      {
        int v24 = (unsigned __int8 *)a2;
        if (i < a2)
        {
          unsigned int v26 = *(unsigned __int8 *)(a2 - 1);
          int v24 = (unsigned __int8 *)(a2 - 5);
          if (v26 <= v18)
          {
            uint64_t v23 = (unsigned __int8 *)(a2 - 6);
            int v24 = (unsigned __int8 *)(a2 - 5);
            while (1)
            {
              int v37 = (unsigned int *)(v23 + 1);
              if (v26 == v18)
              {
                if (*v37 < v19 || i >= (unint64_t)v37) {
                  goto LABEL_27;
                }
              }
              else if (i >= (unint64_t)v37)
              {
                break;
              }
              v24 -= 5;
              unsigned int v36 = *v23;
              v23 -= 5;
              unsigned int v26 = v36;
              if (v36 > v18) {
                goto LABEL_27;
              }
            }
          }
        }
      }
      else
      {
        unsigned int v22 = *(unsigned __int8 *)(a2 - 1);
        uint64_t v23 = (unsigned __int8 *)(a2 - 6);
        int v24 = (unsigned __int8 *)(a2 - 5);
        if (v22 <= v18)
        {
          do
          {
            if (v22 == v18 && *(_DWORD *)(v23 + 1) < v19) {
              break;
            }
            unsigned int v25 = *v23;
            v23 -= 5;
            unsigned int v22 = v25;
          }
          while (v25 <= v18);
LABEL_27:
          int v24 = v23 + 1;
        }
      }
      unint64_t j = i;
      if (i < (unint64_t)v24)
      {
        unint64_t j = i;
        int v27 = v24;
        do
        {
          while (1)
          {
            unsigned __int8 v139 = *(unsigned char *)(j + 4);
            int v133 = *(_DWORD *)j;
            int v28 = *(_DWORD *)v27;
            *(unsigned char *)(j + 4) = v27[4];
            *(_DWORD *)unint64_t j = v28;
            v27[4] = v139;
            *(_DWORD *)int v27 = v133;
            unint64_t v29 = j + 5;
            do
            {
              do
              {
                unint64_t j = v29;
                unsigned int v30 = *(unsigned __int8 *)(v29 + 4);
                v29 += 5;
              }
              while (v30 > v18);
            }
            while (v30 == v18 && *(_DWORD *)j < v19);
            unsigned int v31 = *(v27 - 1);
            if (v31 <= v18) {
              break;
            }
            v27 -= 5;
            if (j >= (unint64_t)v27) {
              goto LABEL_43;
            }
          }
          unsigned int v32 = v27 - 6;
          do
          {
            if (v31 == v18 && *(_DWORD *)(v32 + 1) < v19) {
              break;
            }
            unsigned int v33 = *v32;
            v32 -= 5;
            unsigned int v31 = v33;
          }
          while (v33 <= v18);
          int v27 = v32 + 1;
        }
        while (j < (unint64_t)v27);
      }
LABEL_43:
      if (j - 5 != v9)
      {
        int v34 = *(_DWORD *)(j - 5);
        *(unsigned char *)(v9 + 4) = *(unsigned char *)(j - 1);
        *(_DWORD *)unint64_t v9 = v34;
      }
      *(_DWORD *)(j - 5) = v19;
      *(unsigned char *)(j - 1) = v18;
      if (i < (unint64_t)v24) {
        goto LABEL_48;
      }
      BOOL v35 = sub_19E4AF890(v9, j - 5);
      BOOL result = sub_19E4AF890(j, a2);
      if (result)
      {
        a2 = j - 5;
        if (v35) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v35)
      {
LABEL_48:
        BOOL result = sub_19E4AECC8(v9, j - 5, a3, a4 & 1);
        a4 = 0;
      }
    }
    else
    {
      if (v17 == v18 && *(_DWORD *)(v9 - 5) < v19)
      {
        unsigned int v18 = *(unsigned __int8 *)(v9 - 1);
        goto LABEL_16;
      }
      unsigned int v39 = *(unsigned __int8 *)(a2 - 1);
      if (v18 > v39 || v18 == v39 && v19 < *v10)
      {
        unsigned int v40 = *(unsigned __int8 *)(v9 + 9);
        if (v18 <= v40)
        {
          int v42 = (unsigned __int8 *)(v9 + 14);
          do
          {
            if (v18 == v40 && v19 < *(_DWORD *)(v42 - 9)) {
              break;
            }
            unsigned int v43 = *v42;
            v42 += 5;
            unsigned int v40 = v43;
          }
          while (v18 <= v43);
          unint64_t j = (unint64_t)(v42 - 9);
        }
        else
        {
          unint64_t j = v9 + 5;
        }
      }
      else
      {
        for (unint64_t j = v9 + 5; j < a2; j += 5)
        {
          unsigned int v41 = *(unsigned __int8 *)(j + 4);
          if (v18 > v41 || v18 == v41 && v19 < *(_DWORD *)j) {
            break;
          }
        }
      }
      unint64_t v44 = (unsigned __int8 *)a2;
      if (j < a2)
      {
        for (k = (unsigned __int8 *)(a2 - 6); v18 > v39 || v18 == v39 && v19 < *(_DWORD *)(k + 1); k -= 5)
        {
          unsigned int v46 = *k;
          unsigned int v39 = v46;
        }
        unint64_t v44 = k + 1;
      }
      while (j < (unint64_t)v44)
      {
        unsigned __int8 v140 = *(unsigned char *)(j + 4);
        int v134 = *(_DWORD *)j;
        int v47 = *(_DWORD *)v44;
        *(unsigned char *)(j + 4) = v44[4];
        *(_DWORD *)unint64_t j = v47;
        v44[4] = v140;
        *(_DWORD *)unint64_t v44 = v134;
        unsigned int v48 = *(unsigned __int8 *)(j + 9);
        if (v18 <= v48)
        {
          uint64_t v49 = (unsigned __int8 *)(j + 14);
          do
          {
            if (v18 == v48 && v19 < *(_DWORD *)(v49 - 9)) {
              break;
            }
            unsigned int v50 = *v49;
            v49 += 5;
            unsigned int v48 = v50;
          }
          while (v18 <= v50);
          unint64_t j = (unint64_t)(v49 - 9);
        }
        else
        {
          j += 5;
        }
        unsigned int v51 = v44 - 5;
        do
        {
          do
          {
            unint64_t v44 = v51;
            unsigned int v52 = v51[4];
            v51 -= 5;
          }
          while (v18 > v52);
        }
        while (v18 == v52 && v19 < *(_DWORD *)v44);
      }
      BOOL v4 = j - 5 >= v9;
      BOOL v5 = j - 5 == v9;
      if (j - 5 != v9)
      {
        int v53 = *(_DWORD *)(j - 5);
        *(unsigned char *)(v9 + 4) = *(unsigned char *)(j - 1);
        *(_DWORD *)unint64_t v9 = v53;
      }
      a4 = 0;
      *(_DWORD *)(j - 5) = v19;
      *(unsigned char *)(j - 1) = v18;
    }
  }
  if (j != a2)
  {
    int64_t v84 = (unint64_t)(v13 - 2) >> 1;
    int64_t v85 = v84;
    do
    {
      int64_t v87 = v85;
      if (v84 >= v85)
      {
        uint64_t v88 = (2 * v85) | 1;
        unint64_t v89 = (unsigned int *)(j + 5 * v88);
        if (2 * v87 + 2 < v13)
        {
          unsigned int v90 = *((unsigned __int8 *)v89 + 4);
          unsigned int v91 = *((unsigned __int8 *)v89 + 9);
          if (v90 > v91 || v90 == v91 && *v89 < *(unsigned int *)((char *)v89 + 5))
          {
            unint64_t v89 = (unsigned int *)((char *)v89 + 5);
            uint64_t v88 = 2 * v87 + 2;
          }
        }
        unsigned int v92 = *((unsigned __int8 *)v89 + 4);
        unsigned int v93 = *(unsigned __int8 *)(j + 5 * v87 + 4);
        BOOL v94 = v92 == v93;
        if (v92 <= v93)
        {
          unint64_t v95 = j + 5 * v87;
          unsigned int v96 = *(_DWORD *)v95;
          if (!v94 || *v89 >= v96)
          {
            int v97 = *v89;
            BOOL result = *((unsigned __int8 *)v89 + 4);
            *(unsigned char *)(v95 + 4) = result;
            *(_DWORD *)unint64_t v95 = v97;
            if (v84 >= v88)
            {
              while (1)
              {
                uint64_t v99 = 2 * v88;
                uint64_t v88 = (2 * v88) | 1;
                uint64_t v86 = (unsigned int *)(j + 5 * v88);
                uint64_t v100 = v99 + 2;
                if (v100 < v13)
                {
                  BOOL result = *((unsigned __int8 *)v86 + 4);
                  unsigned int v101 = *((unsigned __int8 *)v86 + 9);
                  if (result > v101
                    || result == v101
                    && (BOOL result = *v86, result < *(unsigned int *)((char *)v86 + 5)))
                  {
                    uint64_t v86 = (unsigned int *)((char *)v86 + 5);
                    uint64_t v88 = v100;
                  }
                }
                unsigned int v102 = *((unsigned __int8 *)v86 + 4);
                if (v102 > v93 || v102 == v93 && *v86 < v96) {
                  break;
                }
                unsigned int v98 = *v86;
                BOOL result = *((unsigned __int8 *)v86 + 4);
                *((unsigned char *)v89 + 4) = result;
                unsigned int *v89 = v98;
                unint64_t v89 = v86;
                if (v84 < v88) {
                  goto LABEL_142;
                }
              }
            }
            uint64_t v86 = v89;
LABEL_142:
            unsigned int *v86 = v96;
            *((unsigned char *)v86 + 4) = v93;
          }
        }
      }
      int64_t v85 = v87 - 1;
    }
    while (v87);
    int64_t v103 = v12 / 5uLL;
    while (2)
    {
      uint64_t v105 = 0;
      char v143 = *(unsigned char *)(j + 4);
      int v137 = *(_DWORD *)j;
      unint64_t v106 = j;
      do
      {
        unint64_t v108 = v106;
        v106 += 5 * (v105 + 1);
        uint64_t v109 = 2 * v105;
        uint64_t v105 = (2 * v105) | 1;
        int64_t v110 = v109 + 2;
        if (v110 < v103)
        {
          unsigned int v111 = *(unsigned __int8 *)(v106 + 4);
          unsigned int v112 = *(unsigned __int8 *)(v106 + 9);
          if (v111 > v112 || v111 == v112 && *(_DWORD *)v106 < *(_DWORD *)(v106 + 5))
          {
            v106 += 5;
            uint64_t v105 = v110;
          }
        }
        unsigned int v107 = *(_DWORD *)v106;
        *(unsigned char *)(v108 + 4) = *(unsigned char *)(v106 + 4);
        *(_DWORD *)unint64_t v108 = v107;
      }
      while (v105 <= (uint64_t)((unint64_t)(v103 - 2) >> 1));
      a2 -= 5;
      if (v106 == a2)
      {
        *(unsigned char *)(v106 + 4) = v143;
        *(_DWORD *)unint64_t v106 = v137;
        goto LABEL_167;
      }
      int v113 = *(_DWORD *)a2;
      *(unsigned char *)(v106 + 4) = *(unsigned char *)(a2 + 4);
      *(_DWORD *)unint64_t v106 = v113;
      *(unsigned char *)(a2 + 4) = v143;
      *(_DWORD *)a2 = v137;
      uint64_t v114 = v106 - j + 5;
      if (v114 >= 6)
      {
        unint64_t v115 = v114 / 5uLL - 2;
        unint64_t v116 = v115 >> 1;
        unint64_t v117 = j + 5 * (v115 >> 1);
        unsigned int v118 = *(unsigned __int8 *)(v117 + 4);
        unsigned int v119 = *(unsigned __int8 *)(v106 + 4);
        if (v118 > v119)
        {
          unsigned int v120 = *(_DWORD *)v106;
          goto LABEL_181;
        }
        if (v118 == v119)
        {
          unsigned int v120 = *(_DWORD *)v106;
          if (*(_DWORD *)v117 < *(_DWORD *)v106)
          {
LABEL_181:
            int v121 = *(_DWORD *)v117;
            *(unsigned char *)(v106 + 4) = *(unsigned char *)(v117 + 4);
            *(_DWORD *)unint64_t v106 = v121;
            if (v115 >= 2)
            {
              while (1)
              {
                unint64_t v124 = v116 - 1;
                unint64_t v116 = (v116 - 1) >> 1;
                unint64_t v122 = j + 5 * v116;
                unsigned int v125 = *(unsigned __int8 *)(v122 + 4);
                if (v125 <= v119 && (v125 != v119 || *(_DWORD *)v122 >= v120)) {
                  break;
                }
                int v123 = *(_DWORD *)v122;
                *(unsigned char *)(v117 + 4) = *(unsigned char *)(v122 + 4);
                *(_DWORD *)unint64_t v117 = v123;
                unint64_t v117 = j + 5 * v116;
                if (v124 <= 1) {
                  goto LABEL_183;
                }
              }
            }
            unint64_t v122 = v117;
LABEL_183:
            *(_DWORD *)unint64_t v122 = v120;
            *(unsigned char *)(v122 + 4) = v119;
          }
        }
      }
LABEL_167:
      if (v103-- <= 2) {
        return result;
      }
      continue;
    }
  }
  return result;
}

BOOL sub_19E4AF890(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * (a2 - a1);
  BOOL result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      char v6 = (int *)(a2 - 5);
      unsigned int v7 = *(unsigned __int8 *)(a2 - 1);
      unsigned int v8 = *(unsigned __int8 *)(a1 + 4);
      if (v7 > v8 || v7 == v8 && *v6 < *(_DWORD *)a1)
      {
        char v9 = *(unsigned char *)(a1 + 4);
        int v10 = *(_DWORD *)a1;
        char v11 = *(unsigned char *)(a2 - 1);
        *(_DWORD *)a1 = *v6;
        *(unsigned char *)(a1 + 4) = v11;
        *char v6 = v10;
        *(unsigned char *)(a2 - 1) = v9;
      }
      return result;
    case 3uLL:
      sub_19E4ACBEC((int *)a1, (int *)(a1 + 5), (int *)(a2 - 5));
      return 1;
    case 4uLL:
      int v24 = (int *)(a1 + 5);
      unsigned int v25 = (int *)(a1 + 10);
      unsigned int v26 = (int *)(a2 - 5);
      sub_19E4ACBEC((int *)a1, (int *)(a1 + 5), (int *)(a1 + 10));
      unsigned int v27 = *(unsigned __int8 *)(a2 - 1);
      unsigned int v28 = *(unsigned __int8 *)(a1 + 14);
      if (v27 > v28 || v27 == v28 && *v26 < *v25)
      {
        char v29 = *(unsigned char *)(a1 + 14);
        int v30 = *v25;
        char v31 = *(unsigned char *)(a2 - 1);
        int *v25 = *v26;
        *(unsigned char *)(a1 + 14) = v31;
        *unsigned int v26 = v30;
        *(unsigned char *)(a2 - 1) = v29;
        unsigned int v32 = *(unsigned __int8 *)(a1 + 14);
        unsigned int v33 = *(unsigned __int8 *)(a1 + 9);
        if (v32 > v33 || v32 == v33 && *v25 < *v24)
        {
          char v34 = *(unsigned char *)(a1 + 9);
          int v35 = *v24;
          *int v24 = *v25;
          *(unsigned char *)(a1 + 9) = *(unsigned char *)(a1 + 14);
          int *v25 = v35;
          *(unsigned char *)(a1 + 14) = v34;
          unsigned int v36 = *(unsigned __int8 *)(a1 + 9);
          unsigned int v37 = *(unsigned __int8 *)(a1 + 4);
          if (v36 > v37 || v36 == v37 && *(_DWORD *)(a1 + 5) < *(_DWORD *)a1)
          {
            char v38 = *(unsigned char *)(a1 + 4);
            int v39 = *(_DWORD *)a1;
            *(_DWORD *)a1 = *v24;
            *(unsigned char *)(a1 + 4) = *(unsigned char *)(a1 + 9);
            *int v24 = v39;
            *(unsigned char *)(a1 + 9) = v38;
          }
        }
      }
      return 1;
    case 5uLL:
      sub_19E4ACD4C(a1, a1 + 5, a1 + 10, (int *)(a1 + 15), (int *)(a2 - 5));
      return 1;
    default:
      uint64_t v12 = a1 + 10;
      sub_19E4ACBEC((int *)a1, (int *)(a1 + 5), (int *)(a1 + 10));
      uint64_t v13 = a1 + 15;
      if (a1 + 15 == a2) {
        return 1;
      }
      uint64_t v14 = 0;
      int v15 = 0;
      break;
  }
  while (1)
  {
    unsigned int v17 = *(unsigned __int8 *)(v13 + 4);
    unsigned int v18 = *(unsigned __int8 *)(v12 + 4);
    if (v17 > v18) {
      break;
    }
    if (v17 == v18)
    {
      unsigned int v19 = *(_DWORD *)v13;
      if (*(_DWORD *)v13 < *(_DWORD *)v12) {
        goto LABEL_11;
      }
    }
LABEL_8:
    uint64_t v12 = v13;
    v14 += 5;
    v13 += 5;
    if (v13 == a2) {
      return 1;
    }
  }
  unsigned int v19 = *(_DWORD *)v13;
LABEL_11:
  *(_DWORD *)uint64_t v13 = *(_DWORD *)v12;
  *(unsigned char *)(v13 + 4) = *(unsigned char *)(v12 + 4);
  uint64_t v16 = a1;
  if (v12 != a1)
  {
    uint64_t v20 = v14;
    while (1)
    {
      uint64_t v21 = a1 + v20;
      unsigned int v22 = (unsigned int *)(a1 + v20 + 5);
      unsigned int v23 = *(unsigned __int8 *)(a1 + v20 + 9);
      if (v17 <= v23)
      {
        if (v17 != v23)
        {
          uint64_t v16 = v12;
          goto LABEL_7;
        }
        if (v19 >= *v22) {
          break;
        }
      }
      v12 -= 5;
      *(_DWORD *)(v21 + 10) = *v22;
      *(unsigned char *)(v21 + 14) = *(unsigned char *)(a1 + v20 + 9);
      v20 -= 5;
      if (v20 == -10)
      {
        uint64_t v16 = a1;
        goto LABEL_7;
      }
    }
    uint64_t v16 = a1 + v20 + 10;
  }
LABEL_7:
  *(_DWORD *)uint64_t v16 = v19;
  *(unsigned char *)(v16 + 4) = v17;
  if (++v15 != 8) {
    goto LABEL_8;
  }
  return v13 + 5 == a2;
}

unint64_t sub_19E4AFBA8(unint64_t result)
{
  if (!*(_DWORD *)(result + 72)) {
    return result;
  }
  unint64_t v1 = result;
  uint64_t v2 = *(unsigned int *)(result + 40);
  if (!v2) {
    return result;
  }
  unint64_t v3 = *(unsigned int *)(result + 48);
  if (!v3) {
    return result;
  }
  unint64_t v4 = *(uint64_t **)(result + 8);
  unint64_t v5 = *(void *)(result + 16);
  int v6 = *((_DWORD *)v4 + 10);
  int v7 = *((unsigned __int8 *)v4 + 48);
  uint64_t v8 = *v4;
  char v9 = *(unsigned char **)(result + 24);
  unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * (void)&v9[-v5];
  unint64_t v11 = v3 - v10;
  if (v3 <= v10)
  {
    if (v3 < v10) {
      *(void *)(result + ++*(_DWORD *)(result + 24) = v5 + 5 * v3;
    }
  }
  else
  {
    uint64_t v12 = *(void *)(result + 32);
    if (0xCCCCCCCCCCCCCCCDLL * (v12 - (void)v9) >= v11)
    {
      bzero(*(void **)(result + 24), 5 * ((5 * v11 - 5) / 5) + 5);
      *(void *)(v1 + ++*(_DWORD *)(result + 24) = &v9[5 * ((5 * v11 - 5) / 5) + 5];
    }
    else
    {
      unint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * (v12 - v5);
      unint64_t v14 = 0x999999999999999ALL * (v12 - v5);
      if (v14 > v3) {
        unint64_t v3 = v14;
      }
      if (v13 >= 0x1999999999999999) {
        unint64_t v3 = 0x3333333333333333;
      }
      if (v3 >= 0x3333333333333334) {
        sub_19E37C2B8();
      }
      uint64_t v15 = 5 * v3;
      uint64_t v16 = (char *)operator new(5 * v3);
      unsigned int v17 = &v9[(void)v16 - v5];
      int v39 = &v16[v15];
      bzero(v17, 5 * ((5 * v11 - 5) / 5) + 5);
      unsigned int v18 = &v17[5 * ((5 * v11 - 5) / 5) + 5];
      if (v9 != (unsigned char *)v5)
      {
        do
        {
          int v19 = *(_DWORD *)(v9 - 5);
          v9 -= 5;
          char v20 = v9[4];
          *(_DWORD *)(v17 - 5) = v19;
          v17 -= 5;
          v17[4] = v20;
        }
        while (v9 != (unsigned char *)v5);
        char v9 = *(unsigned char **)(v1 + 16);
      }
      *(void *)(v1 + 16) = v17;
      *(void *)(v1 + ++*(_DWORD *)(result + 24) = v18;
      *(void *)(v1 + 32) = v39;
      if (v9) {
        operator delete(v9);
      }
    }
    unint64_t v3 = *(unsigned int *)(v1 + 48);
    unint64_t v5 = *(void *)(v1 + 16);
    if (!v3) {
      goto LABEL_32;
    }
  }
  int v21 = v7 + 8;
  uint64_t v22 = v8 + v2;
  int v23 = *(_DWORD *)(v1 + 44);
  if (v7)
  {
    int v24 = (unsigned char *)(v5 + 4);
    unsigned int v25 = v23 * v21;
    do
    {
      unsigned int v26 = (_DWORD *)(v22 + 4 * (v25 >> 5));
      int v27 = *v26 >> v25;
      if ((v25 & 0x1F) + v7 >= 0x21) {
        v27 |= v26[1] << -(v25 & 0x1F);
      }
      *((_DWORD *)v24 - 1) = (v27 & (0xFFFFFFFF >> -(char)v7)) + v6;
      unsigned int v28 = (v7 + v25) & 0x1F;
      char v29 = (_DWORD *)(v22 + 4 * ((v7 + v25) >> 5));
      int v30 = *v29 >> (v7 + v25);
      if (v28 >= 0x19) {
        v30 |= v29[1] << -(char)v28;
      }
      *int v24 = v30;
      v24 += 5;
      v25 += v21;
      --v3;
    }
    while (v3);
  }
  else
  {
    uint64_t v31 = 0;
    uint64_t v32 = 5 * v3;
    unsigned int v33 = v23 * v21;
    do
    {
      *(_DWORD *)(v5 + v31) = v6;
      char v34 = (_DWORD *)(v22 + 4 * (v33 >> 5));
      int v35 = *v34 >> v33;
      if ((v33 & 0x1F) >= 0x19) {
        v35 |= v34[1] << -(v33 & 0x1F);
      }
      *(unsigned char *)(v5 + v31 + 4) = v35;
      v31 += 5;
      v33 += v21;
    }
    while (v32 != v31);
  }
LABEL_32:
  unint64_t v36 = *(void *)(v1 + 24);
  unint64_t v37 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * (v36 - v5));
  if (v36 == v5) {
    uint64_t v38 = 0;
  }
  else {
    uint64_t v38 = v37;
  }
  return sub_19E4AFED0(v5, v36, v38, 1);
}

unint64_t sub_19E4AFED0(unint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v9 = result;
LABEL_2:
  unint64_t v10 = (int *)(a2 - 5);
  unint64_t j = v9;
  while (1)
  {
    unint64_t v9 = j;
    uint64_t v12 = a2 - j;
    uint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * (a2 - j);
    if (v5 || !v4)
    {
      switch(v13)
      {
        case 0:
        case 1:
          return result;
        case 2:
          unsigned int v54 = *(unsigned __int8 *)(a2 - 1);
          unsigned int v55 = *(unsigned __int8 *)(j + 4);
          if (v54 > v55 || v54 == v55 && *v10 < *(_DWORD *)j)
          {
            char v141 = *(unsigned char *)(j + 4);
            int v135 = *(_DWORD *)j;
            int v56 = *v10;
            *(unsigned char *)(j + 4) = *(unsigned char *)(a2 - 1);
            *(_DWORD *)unint64_t j = v56;
            *(unsigned char *)(a2 - 1) = v141;
            *unint64_t v10 = v135;
          }
          break;
        case 3:
          BOOL result = (unint64_t)sub_19E4ACBEC((int *)j, (int *)(j + 5), (int *)(a2 - 5));
          break;
        case 4:
          int64x2_t v57 = (int *)(j + 5);
          int v58 = (int *)(j + 10);
          BOOL result = (unint64_t)sub_19E4ACBEC((int *)j, (int *)(j + 5), (int *)(j + 10));
          unsigned int v59 = *(unsigned __int8 *)(a2 - 1);
          unsigned int v60 = *(unsigned __int8 *)(j + 14);
          if (v59 > v60 || v59 == v60 && *v10 < *v58)
          {
            int v61 = *v58;
            char v62 = *(unsigned char *)(j + 14);
            char v63 = *(unsigned char *)(a2 - 1);
            *int v58 = *v10;
            *(unsigned char *)(j + 14) = v63;
            *(unsigned char *)(a2 - 1) = v62;
            *unint64_t v10 = v61;
            unsigned int v64 = *(unsigned __int8 *)(j + 14);
            unsigned int v65 = *(unsigned __int8 *)(j + 9);
            if (v64 > v65 || v64 == v65 && *v58 < *v57)
            {
              char v66 = *(unsigned char *)(j + 9);
              int v67 = *v57;
              *int64x2_t v57 = *v58;
              *(unsigned char *)(j + 9) = *(unsigned char *)(j + 14);
              *int v58 = v67;
              *(unsigned char *)(j + 14) = v66;
              unsigned int v68 = *(unsigned __int8 *)(j + 9);
              unsigned int v69 = *(unsigned __int8 *)(j + 4);
              if (v68 > v69 || v68 == v69 && *(_DWORD *)(j + 5) < *(_DWORD *)j)
              {
                char v142 = *(unsigned char *)(j + 4);
                int v136 = *(_DWORD *)j;
                *(_DWORD *)unint64_t j = *v57;
                *(unsigned char *)(j + 4) = *(unsigned char *)(j + 9);
                *int64x2_t v57 = v136;
                *(unsigned char *)(j + 9) = v142;
              }
            }
          }
          break;
        case 5:
          BOOL result = (unint64_t)sub_19E4ACD4C(j, j + 5, j + 10, (int *)(j + 15), (int *)(a2 - 5));
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v12 <= 119)
    {
      unint64_t v70 = j + 5;
      BOOL v72 = j == a2 || v70 == a2;
      if (a4)
      {
        if (v72) {
          return result;
        }
        uint64_t v73 = 0;
        unint64_t v74 = j;
        while (2)
        {
          unint64_t v76 = v74;
          unint64_t v74 = v70;
          unsigned int v77 = *(unsigned __int8 *)(v76 + 9);
          unsigned int v78 = *(unsigned __int8 *)(v76 + 4);
          if (v77 > v78)
          {
            unsigned int v79 = *(_DWORD *)v74;
            goto LABEL_131;
          }
          if (v77 == v78)
          {
            unsigned int v79 = *(_DWORD *)v74;
            if (*(_DWORD *)v74 < *(_DWORD *)v76)
            {
LABEL_131:
              *(_DWORD *)unint64_t v74 = *(_DWORD *)v76;
              *(unsigned char *)(v74 + 4) = *(unsigned char *)(v76 + 4);
              unint64_t v75 = j;
              if (v76 != j)
              {
                uint64_t v80 = v73;
                while (1)
                {
                  uint64_t v81 = j + v80;
                  char v82 = (unsigned int *)(j + v80 - 5);
                  unsigned int v83 = *(unsigned __int8 *)(j + v80 - 1);
                  if (v77 <= v83)
                  {
                    if (v77 != v83)
                    {
                      unint64_t v75 = j + v80;
                      goto LABEL_125;
                    }
                    if (v79 >= *v82) {
                      break;
                    }
                  }
                  v76 -= 5;
                  *(_DWORD *)uint64_t v81 = *v82;
                  *(unsigned char *)(v81 + 4) = *(unsigned char *)(j + v80 - 1);
                  v80 -= 5;
                  if (!v80)
                  {
                    unint64_t v75 = j;
                    goto LABEL_125;
                  }
                }
                unint64_t v75 = v76;
              }
LABEL_125:
              *(_DWORD *)unint64_t v75 = v79;
              *(unsigned char *)(v75 + 4) = v77;
            }
          }
          unint64_t v70 = v74 + 5;
          v73 += 5;
          if (v74 + 5 == a2) {
            return result;
          }
          continue;
        }
      }
      if (v72) {
        return result;
      }
      while (2)
      {
        unint64_t v126 = v9;
        unint64_t v9 = v70;
        unsigned int v127 = *(unsigned __int8 *)(v126 + 9);
        unsigned int v128 = *(unsigned __int8 *)(v126 + 4);
        if (v127 <= v128)
        {
          if (v127 == v128)
          {
            unsigned int v129 = *(_DWORD *)v9;
            if (*(_DWORD *)v9 < *(_DWORD *)v126) {
              goto LABEL_206;
            }
          }
        }
        else
        {
          unsigned int v129 = *(_DWORD *)v9;
          do
          {
            do
            {
LABEL_206:
              unint64_t v130 = v126;
              *(_DWORD *)(v126 + 5) = *(_DWORD *)v126;
              *(unsigned char *)(v126 + 9) = *(unsigned char *)(v126 + 4);
              v126 -= 5;
              unsigned int v131 = *(unsigned __int8 *)(v130 - 1);
            }
            while (v127 > v131);
          }
          while (v127 == v131 && v129 < *(_DWORD *)(v130 - 5));
          *(_DWORD *)unint64_t v130 = v129;
          *(unsigned char *)(v130 + 4) = v127;
        }
        unint64_t v70 = v9 + 5;
        if (v9 + 5 == a2) {
          return result;
        }
        continue;
      }
    }
    if (!a3) {
      break;
    }
    uint64_t v14 = 5 * ((unint64_t)v13 >> 1);
    unint64_t v15 = j + v14;
    if ((unint64_t)v12 >= 0x281)
    {
      sub_19E4ACBEC((int *)v9, (int *)(v9 + v14), (int *)(a2 - 5));
      sub_19E4ACBEC((int *)(v9 + 5), (int *)(v14 + v9 - 5), (int *)(a2 - 10));
      sub_19E4ACBEC((int *)(v9 + 10), (int *)(v9 + 5 + v14), (int *)(a2 - 15));
      BOOL result = (unint64_t)sub_19E4ACBEC((int *)(v14 + v9 - 5), (int *)(v9 + v14), (int *)(v9 + 5 + v14));
      char v138 = *(unsigned char *)(v9 + 4);
      int v132 = *(_DWORD *)v9;
      char v16 = *(unsigned char *)(v15 + 4);
      *(_DWORD *)unint64_t v9 = *(_DWORD *)v15;
      *(unsigned char *)(v9 + 4) = v16;
      *(unsigned char *)(v15 + 4) = v138;
      *(_DWORD *)unint64_t v15 = v132;
      --a3;
      if (a4) {
        goto LABEL_15;
      }
    }
    else
    {
      BOOL result = (unint64_t)sub_19E4ACBEC((int *)(v9 + v14), (int *)v9, (int *)(a2 - 5));
      --a3;
      if (a4)
      {
LABEL_15:
        unsigned int v19 = *(_DWORD *)v9;
        unsigned int v18 = *(unsigned __int8 *)(v9 + 4);
        goto LABEL_16;
      }
    }
    unsigned int v17 = *(unsigned __int8 *)(v9 - 1);
    unsigned int v18 = *(unsigned __int8 *)(v9 + 4);
    unsigned int v19 = *(_DWORD *)v9;
    if (v17 > v18)
    {
LABEL_16:
      for (unint64_t i = v9 + 5; ; i += 5)
      {
        unsigned int v21 = *(unsigned __int8 *)(i + 4);
        if (v21 <= v18 && (v21 != v18 || *(_DWORD *)i >= v19)) {
          break;
        }
      }
      if (i - 5 == v9)
      {
        int v24 = (unsigned __int8 *)a2;
        if (i < a2)
        {
          unsigned int v26 = *(unsigned __int8 *)(a2 - 1);
          int v24 = (unsigned __int8 *)(a2 - 5);
          if (v26 <= v18)
          {
            int v23 = (unsigned __int8 *)(a2 - 6);
            int v24 = (unsigned __int8 *)(a2 - 5);
            while (1)
            {
              unint64_t v37 = (unsigned int *)(v23 + 1);
              if (v26 == v18)
              {
                if (*v37 < v19 || i >= (unint64_t)v37) {
                  goto LABEL_27;
                }
              }
              else if (i >= (unint64_t)v37)
              {
                break;
              }
              v24 -= 5;
              unsigned int v36 = *v23;
              v23 -= 5;
              unsigned int v26 = v36;
              if (v36 > v18) {
                goto LABEL_27;
              }
            }
          }
        }
      }
      else
      {
        unsigned int v22 = *(unsigned __int8 *)(a2 - 1);
        int v23 = (unsigned __int8 *)(a2 - 6);
        int v24 = (unsigned __int8 *)(a2 - 5);
        if (v22 <= v18)
        {
          do
          {
            if (v22 == v18 && *(_DWORD *)(v23 + 1) < v19) {
              break;
            }
            unsigned int v25 = *v23;
            v23 -= 5;
            unsigned int v22 = v25;
          }
          while (v25 <= v18);
LABEL_27:
          int v24 = v23 + 1;
        }
      }
      unint64_t j = i;
      if (i < (unint64_t)v24)
      {
        unint64_t j = i;
        int v27 = v24;
        do
        {
          while (1)
          {
            unsigned __int8 v139 = *(unsigned char *)(j + 4);
            int v133 = *(_DWORD *)j;
            int v28 = *(_DWORD *)v27;
            *(unsigned char *)(j + 4) = v27[4];
            *(_DWORD *)unint64_t j = v28;
            v27[4] = v139;
            *(_DWORD *)int v27 = v133;
            unint64_t v29 = j + 5;
            do
            {
              do
              {
                unint64_t j = v29;
                unsigned int v30 = *(unsigned __int8 *)(v29 + 4);
                v29 += 5;
              }
              while (v30 > v18);
            }
            while (v30 == v18 && *(_DWORD *)j < v19);
            unsigned int v31 = *(v27 - 1);
            if (v31 <= v18) {
              break;
            }
            v27 -= 5;
            if (j >= (unint64_t)v27) {
              goto LABEL_43;
            }
          }
          uint64_t v32 = v27 - 6;
          do
          {
            if (v31 == v18 && *(_DWORD *)(v32 + 1) < v19) {
              break;
            }
            unsigned int v33 = *v32;
            v32 -= 5;
            unsigned int v31 = v33;
          }
          while (v33 <= v18);
          int v27 = v32 + 1;
        }
        while (j < (unint64_t)v27);
      }
LABEL_43:
      if (j - 5 != v9)
      {
        int v34 = *(_DWORD *)(j - 5);
        *(unsigned char *)(v9 + 4) = *(unsigned char *)(j - 1);
        *(_DWORD *)unint64_t v9 = v34;
      }
      *(_DWORD *)(j - 5) = v19;
      *(unsigned char *)(j - 1) = v18;
      if (i < (unint64_t)v24) {
        goto LABEL_48;
      }
      BOOL v35 = sub_19E4B0A98(v9, j - 5);
      BOOL result = sub_19E4B0A98(j, a2);
      if (result)
      {
        a2 = j - 5;
        if (v35) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v35)
      {
LABEL_48:
        BOOL result = sub_19E4AFED0(v9, j - 5, a3, a4 & 1);
        a4 = 0;
      }
    }
    else
    {
      if (v17 == v18 && *(_DWORD *)(v9 - 5) < v19)
      {
        unsigned int v18 = *(unsigned __int8 *)(v9 - 1);
        goto LABEL_16;
      }
      unsigned int v39 = *(unsigned __int8 *)(a2 - 1);
      if (v18 > v39 || v18 == v39 && v19 < *v10)
      {
        unsigned int v40 = *(unsigned __int8 *)(v9 + 9);
        if (v18 <= v40)
        {
          int v42 = (unsigned __int8 *)(v9 + 14);
          do
          {
            if (v18 == v40 && v19 < *(_DWORD *)(v42 - 9)) {
              break;
            }
            unsigned int v43 = *v42;
            v42 += 5;
            unsigned int v40 = v43;
          }
          while (v18 <= v43);
          unint64_t j = (unint64_t)(v42 - 9);
        }
        else
        {
          unint64_t j = v9 + 5;
        }
      }
      else
      {
        for (unint64_t j = v9 + 5; j < a2; j += 5)
        {
          unsigned int v41 = *(unsigned __int8 *)(j + 4);
          if (v18 > v41 || v18 == v41 && v19 < *(_DWORD *)j) {
            break;
          }
        }
      }
      unint64_t v44 = (unsigned __int8 *)a2;
      if (j < a2)
      {
        for (k = (unsigned __int8 *)(a2 - 6); v18 > v39 || v18 == v39 && v19 < *(_DWORD *)(k + 1); k -= 5)
        {
          unsigned int v46 = *k;
          unsigned int v39 = v46;
        }
        unint64_t v44 = k + 1;
      }
      while (j < (unint64_t)v44)
      {
        unsigned __int8 v140 = *(unsigned char *)(j + 4);
        int v134 = *(_DWORD *)j;
        int v47 = *(_DWORD *)v44;
        *(unsigned char *)(j + 4) = v44[4];
        *(_DWORD *)unint64_t j = v47;
        v44[4] = v140;
        *(_DWORD *)unint64_t v44 = v134;
        unsigned int v48 = *(unsigned __int8 *)(j + 9);
        if (v18 <= v48)
        {
          uint64_t v49 = (unsigned __int8 *)(j + 14);
          do
          {
            if (v18 == v48 && v19 < *(_DWORD *)(v49 - 9)) {
              break;
            }
            unsigned int v50 = *v49;
            v49 += 5;
            unsigned int v48 = v50;
          }
          while (v18 <= v50);
          unint64_t j = (unint64_t)(v49 - 9);
        }
        else
        {
          j += 5;
        }
        unsigned int v51 = v44 - 5;
        do
        {
          do
          {
            unint64_t v44 = v51;
            unsigned int v52 = v51[4];
            v51 -= 5;
          }
          while (v18 > v52);
        }
        while (v18 == v52 && v19 < *(_DWORD *)v44);
      }
      BOOL v4 = j - 5 >= v9;
      BOOL v5 = j - 5 == v9;
      if (j - 5 != v9)
      {
        int v53 = *(_DWORD *)(j - 5);
        *(unsigned char *)(v9 + 4) = *(unsigned char *)(j - 1);
        *(_DWORD *)unint64_t v9 = v53;
      }
      a4 = 0;
      *(_DWORD *)(j - 5) = v19;
      *(unsigned char *)(j - 1) = v18;
    }
  }
  if (j != a2)
  {
    int64_t v84 = (unint64_t)(v13 - 2) >> 1;
    int64_t v85 = v84;
    do
    {
      int64_t v87 = v85;
      if (v84 >= v85)
      {
        uint64_t v88 = (2 * v85) | 1;
        unint64_t v89 = (unsigned int *)(j + 5 * v88);
        if (2 * v87 + 2 < v13)
        {
          unsigned int v90 = *((unsigned __int8 *)v89 + 4);
          unsigned int v91 = *((unsigned __int8 *)v89 + 9);
          if (v90 > v91 || v90 == v91 && *v89 < *(unsigned int *)((char *)v89 + 5))
          {
            unint64_t v89 = (unsigned int *)((char *)v89 + 5);
            uint64_t v88 = 2 * v87 + 2;
          }
        }
        unsigned int v92 = *((unsigned __int8 *)v89 + 4);
        unsigned int v93 = *(unsigned __int8 *)(j + 5 * v87 + 4);
        BOOL v94 = v92 == v93;
        if (v92 <= v93)
        {
          unint64_t v95 = j + 5 * v87;
          unsigned int v96 = *(_DWORD *)v95;
          if (!v94 || *v89 >= v96)
          {
            int v97 = *v89;
            BOOL result = *((unsigned __int8 *)v89 + 4);
            *(unsigned char *)(v95 + 4) = result;
            *(_DWORD *)unint64_t v95 = v97;
            if (v84 >= v88)
            {
              while (1)
              {
                uint64_t v99 = 2 * v88;
                uint64_t v88 = (2 * v88) | 1;
                uint64_t v86 = (unsigned int *)(j + 5 * v88);
                uint64_t v100 = v99 + 2;
                if (v100 < v13)
                {
                  BOOL result = *((unsigned __int8 *)v86 + 4);
                  unsigned int v101 = *((unsigned __int8 *)v86 + 9);
                  if (result > v101
                    || result == v101
                    && (BOOL result = *v86, result < *(unsigned int *)((char *)v86 + 5)))
                  {
                    uint64_t v86 = (unsigned int *)((char *)v86 + 5);
                    uint64_t v88 = v100;
                  }
                }
                unsigned int v102 = *((unsigned __int8 *)v86 + 4);
                if (v102 > v93 || v102 == v93 && *v86 < v96) {
                  break;
                }
                unsigned int v98 = *v86;
                BOOL result = *((unsigned __int8 *)v86 + 4);
                *((unsigned char *)v89 + 4) = result;
                unsigned int *v89 = v98;
                unint64_t v89 = v86;
                if (v84 < v88) {
                  goto LABEL_142;
                }
              }
            }
            uint64_t v86 = v89;
LABEL_142:
            unsigned int *v86 = v96;
            *((unsigned char *)v86 + 4) = v93;
          }
        }
      }
      int64_t v85 = v87 - 1;
    }
    while (v87);
    int64_t v103 = v12 / 5uLL;
    while (2)
    {
      uint64_t v105 = 0;
      char v143 = *(unsigned char *)(j + 4);
      int v137 = *(_DWORD *)j;
      unint64_t v106 = j;
      do
      {
        unint64_t v108 = v106;
        v106 += 5 * (v105 + 1);
        uint64_t v109 = 2 * v105;
        uint64_t v105 = (2 * v105) | 1;
        int64_t v110 = v109 + 2;
        if (v110 < v103)
        {
          unsigned int v111 = *(unsigned __int8 *)(v106 + 4);
          unsigned int v112 = *(unsigned __int8 *)(v106 + 9);
          if (v111 > v112 || v111 == v112 && *(_DWORD *)v106 < *(_DWORD *)(v106 + 5))
          {
            v106 += 5;
            uint64_t v105 = v110;
          }
        }
        unsigned int v107 = *(_DWORD *)v106;
        *(unsigned char *)(v108 + 4) = *(unsigned char *)(v106 + 4);
        *(_DWORD *)unint64_t v108 = v107;
      }
      while (v105 <= (uint64_t)((unint64_t)(v103 - 2) >> 1));
      a2 -= 5;
      if (v106 == a2)
      {
        *(unsigned char *)(v106 + 4) = v143;
        *(_DWORD *)unint64_t v106 = v137;
        goto LABEL_167;
      }
      int v113 = *(_DWORD *)a2;
      *(unsigned char *)(v106 + 4) = *(unsigned char *)(a2 + 4);
      *(_DWORD *)unint64_t v106 = v113;
      *(unsigned char *)(a2 + 4) = v143;
      *(_DWORD *)a2 = v137;
      uint64_t v114 = v106 - j + 5;
      if (v114 >= 6)
      {
        unint64_t v115 = v114 / 5uLL - 2;
        unint64_t v116 = v115 >> 1;
        unint64_t v117 = j + 5 * (v115 >> 1);
        unsigned int v118 = *(unsigned __int8 *)(v117 + 4);
        unsigned int v119 = *(unsigned __int8 *)(v106 + 4);
        if (v118 > v119)
        {
          unsigned int v120 = *(_DWORD *)v106;
          goto LABEL_181;
        }
        if (v118 == v119)
        {
          unsigned int v120 = *(_DWORD *)v106;
          if (*(_DWORD *)v117 < *(_DWORD *)v106)
          {
LABEL_181:
            int v121 = *(_DWORD *)v117;
            *(unsigned char *)(v106 + 4) = *(unsigned char *)(v117 + 4);
            *(_DWORD *)unint64_t v106 = v121;
            if (v115 >= 2)
            {
              while (1)
              {
                unint64_t v124 = v116 - 1;
                unint64_t v116 = (v116 - 1) >> 1;
                unint64_t v122 = j + 5 * v116;
                unsigned int v125 = *(unsigned __int8 *)(v122 + 4);
                if (v125 <= v119 && (v125 != v119 || *(_DWORD *)v122 >= v120)) {
                  break;
                }
                int v123 = *(_DWORD *)v122;
                *(unsigned char *)(v117 + 4) = *(unsigned char *)(v122 + 4);
                *(_DWORD *)unint64_t v117 = v123;
                unint64_t v117 = j + 5 * v116;
                if (v124 <= 1) {
                  goto LABEL_183;
                }
              }
            }
            unint64_t v122 = v117;
LABEL_183:
            *(_DWORD *)unint64_t v122 = v120;
            *(unsigned char *)(v122 + 4) = v119;
          }
        }
      }
LABEL_167:
      if (v103-- <= 2) {
        return result;
      }
      continue;
    }
  }
  return result;
}

BOOL sub_19E4B0A98(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * (a2 - a1);
  BOOL result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      int v6 = (int *)(a2 - 5);
      unsigned int v7 = *(unsigned __int8 *)(a2 - 1);
      unsigned int v8 = *(unsigned __int8 *)(a1 + 4);
      if (v7 > v8 || v7 == v8 && *v6 < *(_DWORD *)a1)
      {
        char v9 = *(unsigned char *)(a1 + 4);
        int v10 = *(_DWORD *)a1;
        char v11 = *(unsigned char *)(a2 - 1);
        *(_DWORD *)a1 = *v6;
        *(unsigned char *)(a1 + 4) = v11;
        *int v6 = v10;
        *(unsigned char *)(a2 - 1) = v9;
      }
      return result;
    case 3uLL:
      sub_19E4ACBEC((int *)a1, (int *)(a1 + 5), (int *)(a2 - 5));
      return 1;
    case 4uLL:
      int v24 = (int *)(a1 + 5);
      unsigned int v25 = (int *)(a1 + 10);
      unsigned int v26 = (int *)(a2 - 5);
      sub_19E4ACBEC((int *)a1, (int *)(a1 + 5), (int *)(a1 + 10));
      unsigned int v27 = *(unsigned __int8 *)(a2 - 1);
      unsigned int v28 = *(unsigned __int8 *)(a1 + 14);
      if (v27 > v28 || v27 == v28 && *v26 < *v25)
      {
        char v29 = *(unsigned char *)(a1 + 14);
        int v30 = *v25;
        char v31 = *(unsigned char *)(a2 - 1);
        int *v25 = *v26;
        *(unsigned char *)(a1 + 14) = v31;
        *unsigned int v26 = v30;
        *(unsigned char *)(a2 - 1) = v29;
        unsigned int v32 = *(unsigned __int8 *)(a1 + 14);
        unsigned int v33 = *(unsigned __int8 *)(a1 + 9);
        if (v32 > v33 || v32 == v33 && *v25 < *v24)
        {
          char v34 = *(unsigned char *)(a1 + 9);
          int v35 = *v24;
          *int v24 = *v25;
          *(unsigned char *)(a1 + 9) = *(unsigned char *)(a1 + 14);
          int *v25 = v35;
          *(unsigned char *)(a1 + 14) = v34;
          unsigned int v36 = *(unsigned __int8 *)(a1 + 9);
          unsigned int v37 = *(unsigned __int8 *)(a1 + 4);
          if (v36 > v37 || v36 == v37 && *(_DWORD *)(a1 + 5) < *(_DWORD *)a1)
          {
            char v38 = *(unsigned char *)(a1 + 4);
            int v39 = *(_DWORD *)a1;
            *(_DWORD *)a1 = *v24;
            *(unsigned char *)(a1 + 4) = *(unsigned char *)(a1 + 9);
            *int v24 = v39;
            *(unsigned char *)(a1 + 9) = v38;
          }
        }
      }
      return 1;
    case 5uLL:
      sub_19E4ACD4C(a1, a1 + 5, a1 + 10, (int *)(a1 + 15), (int *)(a2 - 5));
      return 1;
    default:
      uint64_t v12 = a1 + 10;
      sub_19E4ACBEC((int *)a1, (int *)(a1 + 5), (int *)(a1 + 10));
      uint64_t v13 = a1 + 15;
      if (a1 + 15 == a2) {
        return 1;
      }
      uint64_t v14 = 0;
      int v15 = 0;
      break;
  }
  while (1)
  {
    unsigned int v17 = *(unsigned __int8 *)(v13 + 4);
    unsigned int v18 = *(unsigned __int8 *)(v12 + 4);
    if (v17 > v18) {
      break;
    }
    if (v17 == v18)
    {
      unsigned int v19 = *(_DWORD *)v13;
      if (*(_DWORD *)v13 < *(_DWORD *)v12) {
        goto LABEL_11;
      }
    }
LABEL_8:
    uint64_t v12 = v13;
    v14 += 5;
    v13 += 5;
    if (v13 == a2) {
      return 1;
    }
  }
  unsigned int v19 = *(_DWORD *)v13;
LABEL_11:
  *(_DWORD *)uint64_t v13 = *(_DWORD *)v12;
  *(unsigned char *)(v13 + 4) = *(unsigned char *)(v12 + 4);
  uint64_t v16 = a1;
  if (v12 != a1)
  {
    uint64_t v20 = v14;
    while (1)
    {
      uint64_t v21 = a1 + v20;
      unsigned int v22 = (unsigned int *)(a1 + v20 + 5);
      unsigned int v23 = *(unsigned __int8 *)(a1 + v20 + 9);
      if (v17 <= v23)
      {
        if (v17 != v23)
        {
          uint64_t v16 = v12;
          goto LABEL_7;
        }
        if (v19 >= *v22) {
          break;
        }
      }
      v12 -= 5;
      *(_DWORD *)(v21 + 10) = *v22;
      *(unsigned char *)(v21 + 14) = *(unsigned char *)(a1 + v20 + 9);
      v20 -= 5;
      if (v20 == -10)
      {
        uint64_t v16 = a1;
        goto LABEL_7;
      }
    }
    uint64_t v16 = a1 + v20 + 10;
  }
LABEL_7:
  *(_DWORD *)uint64_t v16 = v19;
  *(unsigned char *)(v16 + 4) = v17;
  if (++v15 != 8) {
    goto LABEL_8;
  }
  return v13 + 5 == a2;
}

void sub_19E4B0DB0()
{
}

void sub_19E4B0FBC(_Unwind_Exception *a1)
{
  MEMORY[0x19F3BDCF0](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

uint64_t sub_19E4B0FF0(uint64_t **a1, unsigned int *a2, unsigned int a3, unsigned char *a4)
{
  unsigned int v48 = 0;
  char v47 = 0;
  int v6 = *a1;
  switch(*((_DWORD *)v6 + 8))
  {
    case 2:
      LOWORD(v49) = 0;
      unsigned int v9 = *((unsigned __int8 *)v6 + 36);
      BOOL v11 = a3 - 1 >= v9;
      BOOL v10 = a3 - 1 < v9;
      BOOL v11 = !v11 && a3 >= 2;
      if (v11)
      {
        uint64_t v12 = 0;
        unsigned int v13 = *((_DWORD *)v6 + 3);
        do
        {
          unsigned int v14 = a2[v12];
          BOOL v15 = v14 > v13;
          BOOL v10 = v14 <= v13;
          unint64_t v16 = v12 + 2;
          ++v12;
        }
        while (!v15 && v16 < a3);
      }
      if (!v10) {
        goto LABEL_69;
      }
      if (a2[a3 - 1] > *((_DWORD *)v6 + 3) || !sub_19E4B1368(v6, a2, a3, &v49))
      {
        if (a3 < 2 || !sub_19E4B1368(*a1, a2, a3 - 1, &v49)) {
          goto LABEL_69;
        }
        if (!a4) {
          return 1;
        }
        *a4 = 0;
        char v46 = BYTE1(v49);
        goto LABEL_64;
      }
      uint64_t result = 0;
      if (a4) {
        *(_WORD *)a4 = v49;
      }
      return result;
    case 3:
      if (!a3) {
        goto LABEL_69;
      }
      unsigned int v42 = a3 - 1;
      if (a3 != 1) {
        goto LABEL_54;
      }
      if (*((_DWORD *)v6 + 3) < *a2) {
        return 2;
      }
      uint64_t v43 = *v6 + 6 * *a2;
      int v45 = *(_DWORD *)(v43 + 7);
      uint64_t v44 = v43 + 7;
      if (!v45) {
        return 2;
      }
      uint64_t result = 0;
      if (a4) {
        *(_WORD *)a4 = *(_WORD *)(v44 + 4);
      }
      return result;
    case 4:
      if (a3 >= 2 && *((unsigned __int8 *)v6 + 36) >= a3)
      {
        uint64_t v19 = a3 - 1;
        unsigned int v20 = a2[v19];
        if (*((_DWORD *)v6 + 10) <= v20 && v20 <= *((_DWORD *)v6 + 11))
        {
          uint64_t v21 = 0;
          unsigned int v22 = *((_DWORD *)v6 + 3);
          do
          {
            unsigned int v23 = a2[v21];
            unint64_t v24 = v21 + 2;
            ++v21;
          }
          while (v23 <= v22 && v24 < a3);
          if (v23 <= v22 && sub_19E4B1EEC(v6, a2, a3, (uint64_t)&v49))
          {
            unsigned int v26 = *a1;
            unsigned int v27 = a2[v19];
            unsigned int v28 = v49;
            int v29 = v50;
            int v30 = *((unsigned __int8 *)*a1 + 48);
            int v31 = v30 + 8;
            unsigned int v51 = 0;
            uint64_t v32 = *v26;
            BOOL v33 = sub_19E4AD2A8(*v26, v27 - *((_DWORD *)v26 + 10), v49, v50, v30 + 8, v30, &v51);
            if (a4 && v33)
            {
              unint64_t v34 = (v31 * v29 + 7) >> 3;
              unint64_t v35 = (unint64_t)(v30 + v51 * v31) >> 3;
              if ((v30 + v51 * v31) >> 3 >= v34)
              {
                LOBYTE(v38) = 0;
              }
              else
              {
                uint64_t v36 = v32 + v28;
                unsigned int v37 = ((_BYTE)v30 + (_BYTE)v51 * (_BYTE)v31) & 7;
                int v38 = *(unsigned __int8 *)(v36 + v35) >> ((v30 + v51 * v31) & 7);
                unint64_t v39 = v35 + 1;
                if ((((_BYTE)v30 + (_BYTE)v51 * (_BYTE)v31) & 7) != 0 && v39 < v34)
                {
                  do
                  {
                    if (v37 >= 8) {
                      int v41 = 8;
                    }
                    else {
                      int v41 = v37;
                    }
                    v38 |= ((0xFFu >> (8 - v41)) & *(unsigned __int8 *)(v36 + v39)) << (8 - v37);
                    v37 -= v41;
                    if (!v37) {
                      break;
                    }
                    ++v39;
                  }
                  while (v39 < v34);
                }
              }
              *a4 = v38;
              a4[1] = 0;
            }
            if (v33) {
              return 0;
            }
          }
        }
      }
      goto LABEL_69;
    case 5:
      if (!a3) {
        goto LABEL_69;
      }
      unsigned int v42 = a3 - 1;
      if (a3 == 1)
      {
        if (sub_19E4B2210(v6, *a2, 0, a4)) {
          return 0;
        }
        else {
          return 2;
        }
      }
      else
      {
LABEL_54:
        if (*((unsigned __int8 *)v6 + 36) >= a3
          && sub_19E4B163C((uint64_t)v6, a2, a3, (uint64_t)&v49, &v48, &v47))
        {
          if (sub_19E4B17A0((uint64_t)*a1, a2[v42], a3, v49, v50, v48, 0, a4))
          {
            return 0;
          }
          else
          {
            if (a4)
            {
              *a4 = 0;
              char v46 = v47;
LABEL_64:
              a4[1] = v46;
            }
            return 1;
          }
        }
        else
        {
LABEL_69:
          if (a4) {
            *(_WORD *)a4 = 0;
          }
          return 2;
        }
      }
    default:
      goto LABEL_69;
  }
}

uint64_t sub_19E4B1368(uint64_t *a1, _DWORD *a2, unsigned int a3, unsigned char *a4)
{
  uint64_t v4 = *a1 + 20 * (a3 - 1);
  int v6 = *(_DWORD *)(v4 + 7);
  uint64_t v5 = v4 + 7;
  if (!v6 || !*(_DWORD *)(v5 + 4) || !*(_DWORD *)(v5 + 8) || !*(_DWORD *)(v5 + 12)) {
    return 0;
  }
  int v11 = *(unsigned __int8 *)(v5 + 17);
  unsigned int v12 = 0xFFFFFFFF >> -(char)v11;
  int v13 = *(unsigned __int8 *)(v5 + 18) + v11 + *(unsigned __int8 *)(v5 + 19);
  int v14 = cmph_search_packed();
  unsigned int v15 = 0;
  uint64_t v16 = *a1;
  uint64_t v17 = *(unsigned int *)(v5 + 8);
  unint64_t v18 = *(unsigned int *)(v5 + 12);
  uint64_t v19 = v16 + v17;
  int v20 = *(unsigned __int8 *)(v5 + 17);
  unint64_t v21 = (v13 * v14);
  unint64_t v22 = v21 >> 3;
  if ((v21 >> 3) < v18 && v20 != 0)
  {
    int v24 = 8 - (v21 & 7);
    if ((v21 & 7) + v20 <= 8) {
      int v24 = *(unsigned __int8 *)(v5 + 17);
    }
    unsigned int v15 = (*(unsigned __int8 *)(v19 + v22) >> (v21 & 7)) & (0xFFu >> (8 - v24));
    unsigned int v25 = v20 - v24;
    if (v20 != v24 && v22 + 1 < v18)
    {
      uint64_t v27 = v17 + v16 + 1;
      do
      {
        if (v25 >= 8) {
          int v28 = 8;
        }
        else {
          int v28 = v25;
        }
        v15 |= ((0xFFu >> (8 - v28)) & *(unsigned __int8 *)(v27 + v22)) << (v20 - v25);
        v25 -= v28;
        if (!v25) {
          break;
        }
        unint64_t v29 = v22 + 2;
        ++v22;
      }
      while (v29 < v18);
    }
  }
  if (v15 != (sub_19E4AB8C8(a2, a3) & v12)) {
    return 0;
  }
  if (a4)
  {
    int v30 = *(unsigned __int8 *)(v5 + 18);
    if (*(unsigned char *)(v5 + 18)
      && (unint64_t v31 = (unint64_t)(v21 + v20) >> 3, (v21 + v20) >> 3 < v18))
    {
      int v32 = ((_BYTE)v21 + (_BYTE)v20) & 7;
      if ((v32 + v30) <= 8) {
        int v33 = *(unsigned __int8 *)(v5 + 18);
      }
      else {
        int v33 = 8 - v32;
      }
      unsigned int v34 = (*(unsigned __int8 *)(v19 + v31) >> v32) & (0xFFu >> (8 - v33));
      unsigned int v35 = v30 - v33;
      if (v35)
      {
        for (unint64_t i = v31 + 1; i < v18; ++i)
        {
          if (v35 >= 8) {
            int v37 = 8;
          }
          else {
            int v37 = v35;
          }
          v34 |= ((0xFFu >> (8 - v37)) & *(unsigned __int8 *)(v19 + i)) << (v30 - v35);
          v35 -= v37;
          if (!v35) {
            break;
          }
        }
      }
    }
    else
    {
      LOBYTE(v34) = 0;
    }
    *a4 = v34;
    int v39 = *(unsigned __int8 *)(v5 + 19);
    if (*(unsigned char *)(v5 + 19)
      && (unint64_t v40 = (v21 + v20 + v30), v41 = v40 >> 3, (v40 >> 3) < v18))
    {
      int v42 = v40 & 7;
      if ((v42 + v39) <= 8) {
        int v43 = *(unsigned __int8 *)(v5 + 19);
      }
      else {
        int v43 = 8 - v42;
      }
      unsigned int v44 = (*(unsigned __int8 *)(v19 + v41) >> v42) & (0xFFu >> (8 - v43));
      unsigned int v45 = v39 - v43;
      if (v45)
      {
        for (unint64_t j = v41 + 1; j < v18; ++j)
        {
          if (v45 >= 8) {
            int v47 = 8;
          }
          else {
            int v47 = v45;
          }
          v44 |= ((0xFFu >> (8 - v47)) & *(unsigned __int8 *)(v19 + j)) << (v39 - v45);
          v45 -= v47;
          if (!v45) {
            break;
          }
        }
      }
    }
    else
    {
      LOBYTE(v44) = 0;
    }
    a4[1] = v44;
  }
  return 1;
}

uint64_t sub_19E4B163C(uint64_t a1, unsigned int *a2, unsigned int a3, uint64_t a4, _DWORD *a5, unsigned char *a6)
{
  if (a3 < 2) {
    return 0;
  }
  v24[10] = v6;
  v24[11] = v7;
  if (*(unsigned __int8 *)(a1 + 36) < a3) {
    return 0;
  }
  unsigned int v23 = 0;
  unsigned int v14 = a3 - 2;
  if (a3 != 2) {
    goto LABEL_12;
  }
  int v15 = *(_DWORD *)(a1 + 32);
  if (v15 != 5)
  {
    if (v15 == 3)
    {
      if (*(_DWORD *)(a1 + 12) < *a2) {
        return 0;
      }
      uint64_t v16 = *(void *)a1 + 6 * *a2;
      unsigned int v19 = *(_DWORD *)(v16 + 7);
      uint64_t v18 = v16 + 7;
      unsigned int v17 = v19;
      if (!v19) {
        return 0;
      }
      char v22 = *(unsigned char *)(v18 + 5);
      if (!a4) {
        goto LABEL_18;
      }
      goto LABEL_17;
    }
LABEL_12:
    unsigned int v20 = a3 - 1;
    uint64_t result = sub_19E4B163C(a1, a2, a3 - 1, v24, &v23, 0);
    if (!result) {
      return result;
    }
    uint64_t result = sub_19E4B17A0(a1, a2[v14], v20, v24[0], v24[1], v23, a4, &v21);
    if (!result) {
      return result;
    }
    goto LABEL_19;
  }
  LODWORD(v24[0]) = 0;
  uint64_t result = sub_19E4B2210((uint64_t *)a1, *a2, v24, &v21);
  if (!result) {
    return result;
  }
  unsigned int v17 = v24[0];
  if (!a4) {
    goto LABEL_18;
  }
LABEL_17:
  *(void *)(a4 + 8) = 0;
  *(_DWORD *)a4 = v17;
  *(_DWORD *)(a4 + 4) = 0;
LABEL_18:
  unsigned int v23 = v17;
LABEL_19:
  if (a5) {
    *a5 = v23;
  }
  if (a6) {
    *a6 = v22;
  }
  return 1;
}

uint64_t sub_19E4B17A0(uint64_t a1, unsigned int a2, unsigned int a3, unint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, unsigned char *a8)
{
  uint64_t result = 0;
  if (a3 < 2) {
    return result;
  }
  if (a6 < 2) {
    return result;
  }
  uint64_t v124 = v8;
  uint64_t v125 = v9;
  unsigned int v12 = a4;
  if (!a4) {
    return result;
  }
  int v14 = HIDWORD(a5);
  int v16 = *(unsigned __int8 *)(a1 + 16);
  uint64_t v17 = *(void *)a1;
  if (a3 == 2)
  {
    uint64_t result = 0;
    unsigned int v123 = 0;
    if (a4 < 2) {
      return result;
    }
    uint64_t v18 = (uint64_t *)(v17 + a4);
    if (v17)
    {
      unsigned int v19 = *(_DWORD *)v18 & 0x1F;
      int v20 = (*(_DWORD *)v18 >> 5) & 0x1F;
      unsigned int v21 = (*(_DWORD *)v18 >> 10) & 0x1F;
      if (v21)
      {
        int v22 = *(_DWORD *)v18 >> 20;
        if (v21 >= 0xD) {
          int v22 = *v18 >> 20;
        }
        char v23 = 0;
        unsigned int v24 = v22 & (0xFFFFFFFF >> -(char)v21);
LABEL_18:
        unsigned int v32 = *(_DWORD *)(a1 + 12);
        unsigned int v33 = *(unsigned __int8 *)(a1 + 36);
        LODWORD(a1) = (v21 + 5 * v33 + 7) >> 3;
        if (v33 <= 3) {
          a1 = 2;
        }
        else {
          a1 = a1;
        }
        unsigned int v34 = v19 + 8;
        unsigned int v35 = v19 + 8 + v21;
        unsigned int v36 = v35 + 8;
        if (v33 >= 3) {
          int v37 = v35 + 8;
        }
        else {
          int v37 = v19 + 8;
        }
        int v38 = a1 + v12;
        int v39 = (char *)v18 + a1;
        if (v20 && v19 >= 2)
        {
          unsigned int v40 = a2 >> v19;
          char v41 = v16 - v19;
          unsigned int v42 = ~(-1 << (v16 - v19));
          if (a2 >> v19 <= v42)
          {
            if (v40)
            {
              if (!v17) {
                return 0;
              }
              unsigned int v43 = (v40 - 1) * v20;
              int v44 = v43 & 0x1F;
              unsigned int v45 = &v39[4 * (v43 >> 5)];
              int v46 = *(_DWORD *)v45 >> v43;
              if ((v44 + v20) >= 0x21) {
                v46 |= *((_DWORD *)v45 + 1) << -(char)v44;
              }
              uint64_t v47 = v46 & (0xFFFFFFFF >> -(char)v20);
            }
            else
            {
              uint64_t v47 = 0;
              if (!v17) {
                return 0;
              }
            }
            unsigned int v70 = v40 * v20;
            int v71 = v70 & 0x1F;
            BOOL v72 = &v39[4 * (v70 >> 5)];
            int v73 = *(_DWORD *)v72 >> v70;
            if ((v71 + v20) >= 0x21) {
              v73 |= *((_DWORD *)v72 + 1) << -(char)v71;
            }
            uint64_t result = 0;
            unsigned int v74 = 0xFFFFFFFF >> -(char)v20;
            unsigned int v75 = v73 & v74;
            BOOL v76 = v75 >= v47;
            int v77 = v75 - v47;
            if (v77 == 0 || !v76) {
              return result;
            }
            uint64_t v117 = a7;
            char v118 = v23;
            unsigned int v119 = v35 + 8;
            unsigned int v121 = v24;
            char v78 = v20 * v42;
            unsigned int v79 = (v20 * v42) >> 5;
            int v80 = (v20 * v42) & 0x1F;
            uint64_t v81 = &v39[4 * v79];
            int v82 = *(_DWORD *)v81 >> v78;
            if ((v80 + v20) >= 0x21) {
              v82 |= *((_DWORD *)v81 + 1) << -(char)v80;
            }
            uint64_t v83 = ((v20 << v41) + 7) >> 3;
            uint64_t v116 = (v38 + v83);
            uint64_t v84 = v17;
            int v85 = v37;
            if (sub_19E4AD2A8(v84, ~(-1 << v19) & a2, v116 | (v47 << 32), v77, v37, v19, &v123))
            {
              int v48 = v82 & v74;
              v39 += v83;
              unsigned int v36 = v119;
              unsigned int v24 = v121;
              char v23 = v118;
              a7 = v117;
              int v38 = v116;
              int v37 = v85;
              unsigned int v35 = v19 + 8 + v21;
              goto LABEL_71;
            }
          }
        }
        else if (v19 == 1)
        {
          uint64_t result = 0;
          unsigned int v123 = a2;
          if (!v17 || v32 < a2) {
            return result;
          }
          if ((*(_DWORD *)&v39[4 * ((v37 * a2) >> 5)] >> (v37 * a2)))
          {
            int v48 = v32 + 1;
LABEL_71:
            if (a8)
            {
              if (v39)
              {
                unsigned int v86 = v123;
                unsigned int v87 = v19 + v123 * v37;
                unsigned int v88 = v87 & 0x1F;
                unint64_t v89 = &v39[4 * (v87 >> 5)];
                int v90 = *(_DWORD *)v89 >> v87;
                if (v88 >= 0x19) {
                  v90 |= *((_DWORD *)v89 + 1) << -(char)v88;
                }
                *a8 = v90;
                a8[1] = 0;
                unsigned int v91 = a8 + 1;
                if (v33 < 3) {
                  return 1;
                }
                unsigned int v92 = v35 + v86 * v36;
                unsigned int v93 = v92 & 0x1F;
                BOOL v94 = &v39[4 * (v92 >> 5)];
                int v95 = *(_DWORD *)v94 >> v92;
                if (v93 >= 0x19) {
                  v95 |= *((_DWORD *)v94 + 1) << -(char)v93;
                }
              }
              else
              {
                *(_WORD *)a8 = 0;
                unsigned int v91 = a8 + 1;
                if (v33 < 3) {
                  return 1;
                }
                LOBYTE(v95) = 0;
              }
              unsigned char *v91 = v95;
              if (!a7) {
                return 1;
              }
            }
            else
            {
              uint64_t result = 1;
              if (!a7 || v33 < 3) {
                return result;
              }
            }
            *(void *)(a7 + 8) = 0;
            *(void *)a7 = ((v48 * v37 + 7) >> 3) + v38;
            if ((v23 & 1) == 0)
            {
              unsigned int v105 = v123;
              if (v123)
              {
                if (v39)
                {
                  unsigned int v106 = v34 + (v123 - 1) * v36;
                  int v107 = v106 & 0x1F;
                  unint64_t v108 = &v39[4 * (v106 >> 5)];
                  int v109 = *(_DWORD *)v108 >> v106;
                  if (v107 + v21 >= 0x21) {
                    v109 |= *((_DWORD *)v108 + 1) << -(char)v107;
                  }
                  unsigned int v110 = v109 & (0xFFFFFFFF >> -(char)v21);
                  *(_DWORD *)(a7 + 4) = v110;
                  goto LABEL_105;
                }
                unsigned int v110 = 0;
                unsigned int v111 = 0;
              }
              else
              {
                unsigned int v110 = 0;
                unsigned int v111 = 0;
                if (v39)
                {
LABEL_105:
                  unsigned int v112 = v34 + v105 * v36;
                  int v113 = v112 & 0x1F;
                  uint64_t v114 = &v39[4 * (v112 >> 5)];
                  int v115 = *(_DWORD *)v114 >> v112;
                  if (v113 + v21 >= 0x21) {
                    v115 |= *((_DWORD *)v114 + 1) << -(char)v113;
                  }
                  unsigned int v111 = v115 & (0xFFFFFFFF >> -(char)v21);
                }
              }
              *(_DWORD *)(a7 + 8) = v111 - v110;
              *(_DWORD *)(a7 + 12) = v24;
            }
            return 1;
          }
        }
        return 0;
      }
    }
    else
    {
      unsigned int v21 = 0;
      int v20 = 0;
      unsigned int v19 = 0;
    }
    unsigned int v24 = 0;
    char v23 = 1;
    goto LABEL_18;
  }
  int v25 = v16 + 8;
  unsigned int v26 = *(unsigned __int8 *)(a1 + 36);
  int v120 = v16 + 8;
  if (v26 > a3)
  {
    if (v17)
    {
      unint64_t v29 = (unsigned int *)(v17 + a6);
      unsigned int v30 = *v29;
      if (a3 == 3)
      {
        int v31 = (v30 >> 15) & 0x1F;
      }
      else
      {
        unsigned int v49 = ((v30 >> 10) & 0x1F) + 5 * a3;
        uint64_t v50 = &v29[v49 >> 5];
        unsigned int v51 = *v50 >> v49;
        if ((v49 & 0x1F) >= 0x1C) {
          v51 |= v50[1] << -(v49 & 0x1F);
        }
        int v31 = v51 & 0x1F;
      }
    }
    else
    {
      int v31 = 0;
    }
    uint64_t v27 = a7;
    int v28 = v31;
    int v25 = v16 + v31 + 16;
  }
  else
  {
    uint64_t v27 = a7;
    int v28 = 0;
  }
  unsigned int v122 = 0;
  BOOL v52 = sub_19E4AD2A8(v17, a2, a4, a5, v25, v16, &v122);
  uint64_t result = 0;
  if (v52)
  {
    if (a8)
    {
      if (v17)
      {
        unsigned int v53 = v122 * v25;
        unsigned int v54 = (v122 * v25 + v16) & 0x1F;
        unsigned int v55 = (_DWORD *)(v17 + v12 + 4 * ((v122 * v25 + v16) >> 5));
        int v56 = *v55 >> (v122 * v25 + v16);
        if (v54 >= 0x19) {
          v56 |= v55[1] << -(char)v54;
        }
        *a8 = v56;
        a8[1] = 0;
        int64x2_t v57 = a8 + 1;
        if (v26 <= a3) {
          return 1;
        }
        unsigned int v58 = v28 + v120 + v53;
        unsigned int v59 = (_DWORD *)(v17 + v12 + 4 * (v58 >> 5));
        int v60 = *v59 >> v58;
        if ((v58 & 0x1F) >= 0x19) {
          v60 |= v59[1] << -(v58 & 0x1F);
        }
      }
      else
      {
        *(_WORD *)a8 = 0;
        int64x2_t v57 = a8 + 1;
        if (v26 <= a3) {
          return 1;
        }
        LOBYTE(v60) = 0;
      }
      *int64x2_t v57 = v60;
      if (!v27) {
        return 1;
      }
    }
    else
    {
      uint64_t result = 1;
      if (!v27 || v26 <= a3) {
        return result;
      }
    }
    *(void *)(v27 + 8) = 0;
    *(void *)uint64_t v27 = ((v25 * v14 + 7) >> 3) + v12;
    if (!v28) {
      return 1;
    }
    int v61 = v28;
    unsigned int v62 = v122;
    if (v122)
    {
      int v63 = v16 + 8;
      if (v17)
      {
        uint64_t v64 = v17 + v12;
        unsigned int v65 = v120 + (v122 - 1) * v25;
        int v66 = v65 & 0x1F;
        int v67 = (_DWORD *)(v64 + 4 * (v65 >> 5));
        int v68 = *v67 >> v65;
        if ((v66 + v61) >= 0x21) {
          v68 |= v67[1] << -(char)v66;
        }
        unsigned int v69 = v68 & (0xFFFFFFFF >> -(char)v61);
        *(_DWORD *)(v27 + 4) = v69;
        goto LABEL_81;
      }
      *(_DWORD *)(v27 + 4) = 0;
    }
    else
    {
      *(_DWORD *)(v27 + 4) = 0;
      int v63 = v16 + 8;
      if (v17)
      {
        unsigned int v69 = 0;
        uint64_t v64 = v17 + v12;
LABEL_81:
        unsigned int v96 = v63 + v62 * v25;
        int v97 = v96 & 0x1F;
        unsigned int v98 = (_DWORD *)(v17 + v12 + 4 * (v96 >> 5));
        int v99 = *v98 >> v96;
        if ((v97 + v61) >= 0x21) {
          v99 |= v98[1] << -(char)v97;
        }
        unsigned int v100 = 0;
        *(_DWORD *)(v27 + 8) = (v99 & (0xFFFFFFFF >> -(char)v61)) - v69;
        if (v14)
        {
          unsigned int v101 = v63 + (v14 - 1) * v25;
          int v102 = v101 & 0x1F;
          int64_t v103 = (_DWORD *)(v64 + 4 * (v101 >> 5));
          int v104 = *v103 >> v101;
          if ((v102 + v61) >= 0x21) {
            v104 |= v103[1] << -(char)v102;
          }
          unsigned int v100 = v104 & (0xFFFFFFFF >> -(char)v61);
        }
        goto LABEL_89;
      }
    }
    unsigned int v100 = 0;
    *(_DWORD *)(v27 + 8) = 0;
LABEL_89:
    *(_DWORD *)(v27 + 12) = v100;
    return 1;
  }
  return result;
}

uint64_t sub_19E4B1EEC(uint64_t *a1, _DWORD *a2, int a3, uint64_t a4)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *a1 + 15;
  uint64_t v6 = v5 + 20 * (a3 - 2);
  if (!*(_DWORD *)v6 || !*(_DWORD *)(v6 + 4) || !*(_DWORD *)(v6 + 8) || !*(_DWORD *)(v6 + 12)) {
    return 0;
  }
  uint64_t v9 = v5 + 20 * *((unsigned __int8 *)a1 + 36);
  uint64_t v53 = *(unsigned int *)(v9 - 40);
  int v50 = *(_DWORD *)(v9 - 28);
  int v51 = *(_DWORD *)(v9 - 36);
  int v10 = *(unsigned __int8 *)(v6 + 17);
  unsigned int v55 = 0xFFFFFFFF >> -(char)v10;
  int v11 = *((unsigned __int8 *)a1 + 49) + v10;
  uint64_t v52 = *((unsigned __int8 *)a1 + 48);
  unsigned int v12 = a3 - 1;
  int v13 = cmph_search_packed();
  unsigned int v14 = 0;
  uint64_t v15 = *(unsigned int *)(v6 + 8);
  unint64_t v16 = *(unsigned int *)(v6 + 12);
  uint64_t v17 = *a1 + v15;
  int v18 = *(unsigned __int8 *)(v6 + 17);
  unint64_t v19 = (v13 * v11);
  unint64_t v20 = v19 >> 3;
  if ((v13 * v11) >> 3 < v16 && v18 != 0)
  {
    int v22 = 8 - (((_BYTE)v13 * (_BYTE)v11) & 7);
    if ((((_BYTE)v13 * (_BYTE)v11) & 7u) + v18 <= 8) {
      int v22 = v18;
    }
    unsigned int v14 = (*(unsigned __int8 *)(v17 + v20) >> ((v13 * v11) & 7)) & (0xFFu >> (8 - v22));
    unsigned int v23 = v18 - v22;
    if (v18 != v22 && v20 + 1 < v16)
    {
      uint64_t v25 = v15 + *a1 + 1;
      do
      {
        if (v23 >= 8) {
          int v26 = 8;
        }
        else {
          int v26 = v23;
        }
        v14 |= ((0xFFu >> (8 - v26)) & *(unsigned __int8 *)(v25 + v20)) << (v18 - v23);
        v23 -= v26;
        if (!v23) {
          break;
        }
        unint64_t v27 = v20 + 2;
        ++v20;
      }
      while (v27 < v16);
    }
  }
  uint64_t v28 = *a1;
  if (v14 != (sub_19E4AB8C8(a2, v12) & v55)) {
    return 0;
  }
  unsigned int v29 = 0;
  uint64_t v30 = (v51 + v50 + 3) & 0xFFFFFFFC;
  unsigned int v31 = v52 + 1;
  unint64_t v32 = (unint64_t)(v19 + v18) >> 3;
  if ((v19 + v18) >> 3 >= v16)
  {
    uint64_t v34 = a4;
  }
  else
  {
    int v33 = *((unsigned __int8 *)a1 + 49);
    uint64_t v34 = a4;
    if (*((unsigned char *)a1 + 49))
    {
      int v35 = (((_BYTE)v19 + (_BYTE)v18) & 7u) + v33 <= 8
          ? *((unsigned __int8 *)a1 + 49)
          : 8 - (((_BYTE)v19 + (_BYTE)v18) & 7);
      unsigned int v29 = (*(unsigned __int8 *)(v17 + v32) >> ((v19 + v18) & 7)) & (0xFFu >> (8 - v35));
      unsigned int v36 = v33 - v35;
      if (v36)
      {
        for (unint64_t i = v32 + 1; i < v16; ++i)
        {
          if (v36 >= 8) {
            int v38 = 8;
          }
          else {
            int v38 = v36;
          }
          v29 |= ((0xFFu >> (8 - v38)) & *(unsigned __int8 *)(v17 + i)) << (v33 - v36);
          v36 -= v38;
          if (!v36) {
            break;
          }
        }
      }
    }
  }
  unint64_t v40 = (unint64_t)(v52 + 8) >> 3;
  uint64_t v41 = v29;
  unsigned int v42 = (unsigned __int8 *)(v4 + v53 + v30 + v29);
  if (v31 >= 8) {
    int v43 = 8;
  }
  else {
    int v43 = v52 + 1;
  }
  unsigned int v44 = (0xFFu >> (8 - v43)) & *v42;
  unsigned int v45 = v31 - v43;
  if (v45 && v52 >= 8)
  {
    uint64_t v46 = 0;
    uint64_t v47 = v30 + v41 + v53 + v4 + 1;
    do
    {
      if (v45 >= 8) {
        int v48 = 8;
      }
      else {
        int v48 = v45;
      }
      v44 |= ((0xFFu >> (8 - v48)) & *(unsigned __int8 *)(v47 + v46)) << (v31 - v45);
      v45 -= v48;
      if (!v45) {
        break;
      }
      unint64_t v49 = v46 + 2;
      ++v46;
    }
    while (v49 < v40);
  }
  if (v34)
  {
    *(void *)uint64_t v34 = (v42 + v40 - v28);
    *(_DWORD *)(v34 + 8) = v44;
    *(_DWORD *)(v34 + 12) = v44;
  }
  return 1;
}

uint64_t sub_19E4B2210(uint64_t *a1, unsigned int a2, _DWORD *a3, unsigned char *a4)
{
  if (*((_DWORD *)a1 + 3) < a2) {
    return 0;
  }
  uint64_t v6 = *a1;
  uint64_t v7 = *a1 + 55;
  unsigned __int8 v8 = *((unsigned char *)a1 + 56);
  unsigned int v9 = 16 * v8;
  int v10 = *(unsigned __int8 *)(v7 + ((unint64_t)a2 >> 2)) >> (2 * (a2 & 3));
  if ((a2 & 3) == 0) {
    LOBYTE(v10) = *(unsigned char *)(v7 + ((unint64_t)a2 >> 2));
  }
  uint64_t result = 0;
  switch(v10 & 3)
  {
    case 1:
      if (a3) {
        *a3 = 0;
      }
      if (!a4) {
        return 1;
      }
      *a4 = *((unsigned char *)a1 + 57);
      int v13 = (char *)a1 + 58;
      break;
    case 2:
      uint64_t v14 = *(unsigned int *)(v6 + 15);
      if (!v14) {
        return 0;
      }
      unsigned int v15 = *(_DWORD *)(v6 + 23);
      if (!v15 || !*(_DWORD *)(v6 + 27)) {
        return 0;
      }
      if (v8)
      {
        if (v9 <= a2)
        {
          unsigned int v16 = *(_DWORD *)(v6 + v14 + 4 * (a2 / v9 - 1));
          int v17 = a2 % v9;
        }
        else
        {
          unsigned int v16 = 0;
          int v17 = a2;
        }
        for (; v17; int v17 = v23 - v24)
        {
          unsigned int v22 = *(_DWORD *)(v7 + ((unint64_t)(a2 - v17) >> 2));
          unsigned int v23 = v17 - 1;
          if (v23 >= 0xF) {
            int v24 = 15;
          }
          else {
            int v24 = v23;
          }
          int v25 = v24 + 1;
          do
          {
            if ((v22 & 3) == 2) {
              ++v16;
            }
            v22 >>= 2;
            --v25;
          }
          while (v25);
        }
      }
      else
      {
        unsigned int v16 = cmph_search_packed();
        unsigned int v15 = *(_DWORD *)(v6 + 23);
        uint64_t v6 = *a1;
      }
      if (a3) {
        *a3 = 0;
      }
      if (!a4) {
        return 1;
      }
      int v26 = (char *)(v6 + v15 + 2 * v16);
      char v27 = *v26;
      int v13 = v26 + 1;
      *a4 = v27;
      break;
    case 3:
      uint64_t v18 = *(unsigned int *)(v6 + 35);
      if (!v18) {
        return 0;
      }
      unsigned int v19 = *(_DWORD *)(v6 + 43);
      if (!v19 || !*(_DWORD *)(v6 + 47)) {
        return 0;
      }
      if (v8)
      {
        if (v9 <= a2)
        {
          unsigned int v20 = *(_DWORD *)(v6 + v18 + 4 * (a2 / v9 - 1));
          int v21 = a2 % v9;
        }
        else
        {
          unsigned int v20 = 0;
          int v21 = a2;
        }
        for (; v21; int v21 = v29 - v30)
        {
          unsigned int v28 = *(_DWORD *)(v7 + ((unint64_t)(a2 - v21) >> 2));
          unsigned int v29 = v21 - 1;
          if (v29 >= 0xF) {
            int v30 = 15;
          }
          else {
            int v30 = v29;
          }
          int v31 = v30 + 1;
          do
          {
            if ((~v28 & 3) == 0) {
              ++v20;
            }
            v28 >>= 2;
            --v31;
          }
          while (v31);
        }
      }
      else
      {
        unsigned int v20 = cmph_search_packed();
        unsigned int v19 = *(_DWORD *)(v6 + 43);
        uint64_t v6 = *a1;
      }
      uint64_t v32 = v6 + v19;
      if (a3) {
        *a3 = *(_DWORD *)(v32 + 6 * v20);
      }
      if (!a4) {
        return 1;
      }
      uint64_t v33 = v32 + 6 * v20;
      *a4 = *(unsigned char *)(v33 + 4);
      int v13 = (unsigned char *)(v33 + 5);
      break;
    default:
      return result;
  }
  a4[1] = *v13;
  return 1;
}

void sub_19E4B248C(uint64_t *a1, unsigned int *a2, unsigned int a3)
{
  int v12 = 0;
  uint64_t v6 = *a1;
  int v7 = *(_DWORD *)(v6 + 32);
  if (v7 != 5)
  {
    if (v7 == 4)
    {
      if (a3 && *(unsigned __int8 *)(v6 + 36) > a3)
      {
        unint64_t v8 = 0;
        unsigned int v9 = *(_DWORD *)(v6 + 12);
        do
          unsigned int v10 = a2[v8++];
        while (v10 <= v9 && v8 < a3);
        if (v10 <= v9 && sub_19E4B1EEC((uint64_t *)v6, a2, a3 + 1, (uint64_t)&v13)) {
          operator new();
        }
      }
LABEL_24:
      operator new();
    }
    if (v7 != 3) {
      goto LABEL_24;
    }
  }
  if (!a3) {
    operator new();
  }
  if (*(unsigned __int8 *)(v6 + 36) >= 2u && sub_19E4B163C(v6, a2, 2u, (uint64_t)&v14, &v12, 0))
  {
    if (a3 == 1) {
      operator new();
    }
    if (*(unsigned __int8 *)(*a1 + 36) > a3)
    {
      if (sub_19E4B163C(*a1, a2, a3 + 1, (uint64_t)&v13, &v12, 0)) {
        operator new();
      }
    }
  }
  goto LABEL_24;
}

uint64_t sub_19E4B2740()
{
  return 0;
}

void sub_19E4B2748()
{
}

uint64_t sub_19E4B2760()
{
  return 0;
}

uint64_t sub_19E4B2768()
{
  return 0;
}

uint64_t sub_19E4B2770(uint64_t a1)
{
  return *(unsigned int *)(a1 + 72);
}

void sub_19E4B2778(void *a1)
{
  *a1 = &unk_1EF0B84C0;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x19F3BDCF0);
}

void *sub_19E4B27E8(void *a1)
{
  *a1 = &unk_1EF0B84C0;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_19E4B2838(uint64_t a1, unsigned char *a2)
{
  if (!*(unsigned char *)(a1 + 92)) {
    return 0;
  }
  uint64_t v2 = *(unsigned int *)(a1 + 88);
  if (v2 >= *(_DWORD *)(a1 + 76))
  {
    uint64_t v5 = *(void *)(a1 + 16) + 5 * v2;
    uint64_t result = *(unsigned int *)v5;
    LOBYTE(v5) = *(unsigned char *)(v5 + 4);
  }
  else
  {
    int v3 = *(unsigned __int8 *)(*(void *)(a1 + 8) + 16);
    int v4 = v3 + 8;
    uint64_t v5 = *(void *)(a1 + 80);
    if (*(unsigned char *)(*(void *)(a1 + 8) + 16)) {
      BOOL v6 = v5 == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6)
    {
      unsigned int v8 = v4 * v2;
      unsigned int v9 = (_DWORD *)(v5 + 4 * (v8 >> 5));
      int v10 = *v9 >> v8;
      if ((v8 & 0x1F) + v3 >= 0x21) {
        v10 |= v9[1] << -(v8 & 0x1F);
      }
      uint64_t result = v10 & (0xFFFFFFFF >> -(char)v3);
      goto LABEL_15;
    }
    uint64_t result = 0;
    if (v5)
    {
      unsigned int v8 = v4 * v2;
LABEL_15:
      unsigned int v11 = v8 + v3;
      unsigned int v12 = (v8 + v3) & 0x1F;
      long long v13 = (_DWORD *)(v5 + 4 * (v11 >> 5));
      LODWORD(v5) = *v13 >> v11;
      if (v12 >= 0x19) {
        LODWORD(v5) = (v13[1] << -(char)v12) | v5;
      }
    }
  }
  if (a2) {
    *a2 = v5;
  }
  return result;
}

uint64_t sub_19E4B291C(unint64_t a1)
{
  if (*(unsigned char *)(a1 + 92))
  {
    unsigned int v2 = *(_DWORD *)(a1 + 88) + 1;
    unsigned int v3 = *(_DWORD *)(a1 + 76);
    if (v2 == v3)
    {
      sub_19E4AFBA8(a1);
      unsigned int v3 = *(_DWORD *)(a1 + 76);
      unsigned int v2 = *(_DWORD *)(a1 + 88) + 1;
    }
    if (v2 < v3 || v2 < *(_DWORD *)(a1 + 48))
    {
      *(_DWORD *)(a1 + 88) = v2;
      return 1;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 92) = 1;
    if (*(_DWORD *)(a1 + 76)) {
      return 1;
    }
    sub_19E4AFBA8(a1);
    if (*(_DWORD *)(a1 + 48)) {
      return 1;
    }
  }
  return 0;
}

uint64_t sub_19E4B29B4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 72);
}

void sub_19E4B29BC(void *a1)
{
  *a1 = &unk_1EF0B8418;
  unsigned int v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x19F3BDCF0);
}

void *sub_19E4B2A2C(void *a1)
{
  *a1 = &unk_1EF0B8418;
  unsigned int v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_19E4B2A7C(uint64_t a1, unsigned char *a2)
{
  if (!*(unsigned char *)(a1 + 92)) {
    return 0;
  }
  uint64_t v2 = *(unsigned int *)(a1 + 88);
  if (v2 >= *(_DWORD *)(a1 + 76))
  {
    uint64_t v5 = *(void *)(a1 + 16) + 5 * v2;
    uint64_t result = *(unsigned int *)v5;
    LOBYTE(v5) = *(unsigned char *)(v5 + 4);
  }
  else
  {
    int v3 = *(unsigned __int8 *)(*(void *)(a1 + 8) + 16);
    int v4 = v3 + 8;
    uint64_t v5 = *(void *)(a1 + 80);
    if (*(unsigned char *)(*(void *)(a1 + 8) + 16)) {
      BOOL v6 = v5 == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6)
    {
      unsigned int v8 = v4 * v2;
      unsigned int v9 = (_DWORD *)(v5 + 4 * (v8 >> 5));
      int v10 = *v9 >> v8;
      if ((v8 & 0x1F) + v3 >= 0x21) {
        v10 |= v9[1] << -(v8 & 0x1F);
      }
      uint64_t result = v10 & (0xFFFFFFFF >> -(char)v3);
      goto LABEL_15;
    }
    uint64_t result = 0;
    if (v5)
    {
      unsigned int v8 = v4 * v2;
LABEL_15:
      unsigned int v11 = v8 + v3;
      unsigned int v12 = (v8 + v3) & 0x1F;
      long long v13 = (_DWORD *)(v5 + 4 * (v11 >> 5));
      LODWORD(v5) = *v13 >> v11;
      if (v12 >= 0x19) {
        LODWORD(v5) = (v13[1] << -(char)v12) | v5;
      }
    }
  }
  if (a2) {
    *a2 = v5;
  }
  return result;
}

uint64_t sub_19E4B2B60(unint64_t a1)
{
  if (*(unsigned char *)(a1 + 92))
  {
    unsigned int v2 = *(_DWORD *)(a1 + 88) + 1;
    unsigned int v3 = *(_DWORD *)(a1 + 76);
    if (v2 == v3)
    {
      sub_19E4AE924(a1);
      unsigned int v3 = *(_DWORD *)(a1 + 76);
      unsigned int v2 = *(_DWORD *)(a1 + 88) + 1;
    }
    if (v2 < v3 || v2 < *(_DWORD *)(a1 + 48))
    {
      *(_DWORD *)(a1 + 88) = v2;
      return 1;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 92) = 1;
    if (*(_DWORD *)(a1 + 76)) {
      return 1;
    }
    sub_19E4AE924(a1);
    if (*(_DWORD *)(a1 + 48)) {
      return 1;
    }
  }
  return 0;
}

uint64_t sub_19E4B2BF8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 72);
}

void sub_19E4B2C00(void *a1)
{
  *a1 = &unk_1EF0B8450;
  unsigned int v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x19F3BDCF0);
}

void *sub_19E4B2C70(void *a1)
{
  *a1 = &unk_1EF0B8450;
  unsigned int v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_19E4B2CC0(uint64_t a1, unsigned char *a2)
{
  if (!*(unsigned char *)(a1 + 92)) {
    return 0;
  }
  uint64_t v2 = *(unsigned int *)(a1 + 88);
  if (v2 >= *(_DWORD *)(a1 + 76))
  {
    uint64_t v5 = *(void *)(a1 + 16) + 5 * v2;
    uint64_t result = *(unsigned int *)v5;
    LOBYTE(v5) = *(unsigned char *)(v5 + 4);
  }
  else
  {
    int v3 = *(unsigned __int8 *)(*(void *)(a1 + 8) + 16);
    int v4 = v3 + 8;
    uint64_t v5 = *(void *)(a1 + 80);
    if (*(unsigned char *)(*(void *)(a1 + 8) + 16)) {
      BOOL v6 = v5 == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6)
    {
      unsigned int v8 = v4 * v2;
      unsigned int v9 = (_DWORD *)(v5 + 4 * (v8 >> 5));
      int v10 = *v9 >> v8;
      if ((v8 & 0x1F) + v3 >= 0x21) {
        v10 |= v9[1] << -(v8 & 0x1F);
      }
      uint64_t result = v10 & (0xFFFFFFFF >> -(char)v3);
      goto LABEL_15;
    }
    uint64_t result = 0;
    if (v5)
    {
      unsigned int v8 = v4 * v2;
LABEL_15:
      unsigned int v11 = v8 + v3;
      unsigned int v12 = (v8 + v3) & 0x1F;
      long long v13 = (_DWORD *)(v5 + 4 * (v11 >> 5));
      LODWORD(v5) = *v13 >> v11;
      if (v12 >= 0x19) {
        LODWORD(v5) = (v13[1] << -(char)v12) | v5;
      }
    }
  }
  if (a2) {
    *a2 = v5;
  }
  return result;
}

BOOL sub_19E4B2DA4(unint64_t a1)
{
  if (!*(unsigned char *)(a1 + 92))
  {
    *(unsigned char *)(a1 + 92) = 1;
    uint64_t v4 = *(void *)(a1 + 8);
    char v5 = *(unsigned char *)(v4 + 50) & 0xF;
    if (!v5) {
      goto LABEL_29;
    }
    if (*(_DWORD *)(a1 + 72) != 1) {
      goto LABEL_29;
    }
    uint64_t v6 = *(unsigned int *)(a1 + 40);
    if (!v6) {
      goto LABEL_29;
    }
    uint64_t v7 = *(unsigned int *)(a1 + 56);
    if (v7 < 2) {
      goto LABEL_29;
    }
    uint64_t v8 = *(void *)v4;
    if (*(void *)v4) {
      unsigned int v9 = *(_DWORD *)(v8 + v7) & 0x7FFF;
    }
    else {
      unsigned int v9 = 0;
    }
    int v10 = *(unsigned __int8 *)(v4 + 16);
    unsigned int v11 = v9 & 0x1F;
    if (v11 >= 2 && (int v12 = (v9 >> 5) & 0x1F) != 0)
    {
      if (!v8) {
        goto LABEL_29;
      }
      char v13 = v10 - v11;
      uint64_t v14 = v8 + v6;
      unsigned int v15 = *(unsigned __int8 *)(v4 + 36);
      uint64_t v16 = (5 * v15 + (v9 >> 10) + 7) >> 3;
      if (v15 <= 3) {
        uint64_t v16 = 2;
      }
      unsigned int v17 = (v12 << v13) - v12;
      uint64_t v18 = (_DWORD *)(v14 + v16 + 4 * (v17 >> 5));
      int v19 = *v18 >> v17;
      if ((v17 & 0x1F) + v12 >= 0x21) {
        v19 |= v18[1] << -(v17 & 0x1F);
      }
      if ((v19 & (0xFFFFFFFF >> -(char)v12)) < 0x201)
      {
LABEL_29:
        if (*(_DWORD *)(a1 + 76)) {
          return 1;
        }
        sub_19E4AD480(a1);
        return *(_DWORD *)(a1 + 48) != 0;
      }
      unsigned int v20 = (((v10 + 8) << v5) + 7) >> 3;
      unsigned int v24 = 0;
      int v21 = (int *)(v8 + *(unsigned int *)(v4 + 52));
    }
    else
    {
      if (v11 != 1) {
        goto LABEL_29;
      }
      unsigned int v20 = (((v10 + 8) << v5) + 7) >> 3;
      unsigned int v24 = 0;
      int v21 = (int *)(v8 + *(unsigned int *)(v4 + 52));
      if (!v8)
      {
        int v22 = 0;
LABEL_27:
        if (sub_19E4AD2A8(v8, **(_DWORD **)(a1 + 64), (v21 - v8 + 4), v22, v10, v10, &v24))
        {
          *(void *)(a1 + 80) = (char *)v21 + ((v22 * v10 + 7) >> 3) + v24 * v20 + 4;
          *(_DWORD *)(a1 + 76) = 1 << v5;
        }
        goto LABEL_29;
      }
    }
    int v22 = *v21;
    goto LABEL_27;
  }
  unsigned int v2 = *(_DWORD *)(a1 + 88) + 1;
  unsigned int v3 = *(_DWORD *)(a1 + 76);
  if (v2 == v3)
  {
    sub_19E4AD480(a1);
    unsigned int v3 = *(_DWORD *)(a1 + 76);
    unsigned int v2 = *(_DWORD *)(a1 + 88) + 1;
  }
  if (v2 < v3 || v2 < *(_DWORD *)(a1 + 48))
  {
    *(_DWORD *)(a1 + 88) = v2;
    return 1;
  }
  return 0;
}

uint64_t sub_19E4B2FEC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 72);
}

void sub_19E4B2FF4(void *a1)
{
  *a1 = &unk_1EF0B8488;
  unsigned int v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x19F3BDCF0);
}

void *sub_19E4B3064(void *a1)
{
  *a1 = &unk_1EF0B8488;
  unsigned int v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_19E4B30B4(uint64_t a1, unsigned char *a2)
{
  if (!*(unsigned char *)(a1 + 92)) {
    return 0;
  }
  uint64_t v2 = *(unsigned int *)(a1 + 88);
  if (v2 >= *(_DWORD *)(a1 + 76))
  {
    uint64_t v5 = *(void *)(a1 + 16) + 5 * v2;
    uint64_t result = *(unsigned int *)v5;
    LOBYTE(v5) = *(unsigned char *)(v5 + 4);
  }
  else
  {
    int v3 = *(unsigned __int8 *)(*(void *)(a1 + 8) + 16);
    int v4 = v3 + 8;
    uint64_t v5 = *(void *)(a1 + 80);
    if (*(unsigned char *)(*(void *)(a1 + 8) + 16)) {
      BOOL v6 = v5 == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6)
    {
      unsigned int v8 = v4 * v2;
      unsigned int v9 = (_DWORD *)(v5 + 4 * (v8 >> 5));
      int v10 = *v9 >> v8;
      if ((v8 & 0x1F) + v3 >= 0x21) {
        v10 |= v9[1] << -(v8 & 0x1F);
      }
      uint64_t result = v10 & (0xFFFFFFFF >> -(char)v3);
      goto LABEL_15;
    }
    uint64_t result = 0;
    if (v5)
    {
      unsigned int v8 = v4 * v2;
LABEL_15:
      unsigned int v11 = v8 + v3;
      unsigned int v12 = (v8 + v3) & 0x1F;
      char v13 = (_DWORD *)(v5 + 4 * (v11 >> 5));
      LODWORD(v5) = *v13 >> v11;
      if (v12 >= 0x19) {
        LODWORD(v5) = (v13[1] << -(char)v12) | v5;
      }
    }
  }
  if (a2) {
    *a2 = v5;
  }
  return result;
}

BOOL sub_19E4B3198(unint64_t a1)
{
  if (!*(unsigned char *)(a1 + 92))
  {
    *(unsigned char *)(a1 + 92) = 1;
    int v4 = *(uint64_t **)(a1 + 8);
    if ((*((unsigned char *)v4 + 50) & 0x10) != 0 && (char v5 = *((unsigned char *)v4 + 50) & 0xF) != 0 && !*(_DWORD *)(a1 + 72))
    {
      int v7 = *((unsigned __int8 *)v4 + 16);
      int v8 = 1 << v5;
      unsigned int v9 = (((v7 + 8) << v5) + 7) >> 3;
      uint64_t v10 = *v4;
      unsigned int v11 = (_DWORD *)(*v4 + *((unsigned int *)v4 + 13));
      if (v10) {
        LODWORD(v10) = *v11;
      }
      *(void *)(a1 + 80) = (char *)v11 + ((v10 * v7 + 7) >> 3) + v10 * v9 + 4;
      *(_DWORD *)(a1 + 76) = v8;
      if (*(_DWORD *)(a1 + 76)) {
        return 1;
      }
    }
    else if (*(_DWORD *)(a1 + 76))
    {
      return 1;
    }
    sub_19E4AB9F0(a1);
    return *(_DWORD *)(a1 + 48) != 0;
  }
  unsigned int v2 = *(_DWORD *)(a1 + 88) + 1;
  unsigned int v3 = *(_DWORD *)(a1 + 76);
  if (v2 == v3)
  {
    sub_19E4AB9F0(a1);
    unsigned int v3 = *(_DWORD *)(a1 + 76);
    unsigned int v2 = *(_DWORD *)(a1 + 88) + 1;
  }
  if (v2 >= v3 && v2 >= *(_DWORD *)(a1 + 48)) {
    return 0;
  }
  *(_DWORD *)(a1 + 88) = v2;
  return 1;
}

uint64_t sub_19E4B32A4(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 64);
  if (!v4) {
    __assert_rtn("getPrediction", "LMMultilingualDynamicLanguageModel.cpp", 514, "m_currentEnumerator");
  }
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
  *(_DWORD *)(a3 + 116) = 10;
  sub_19E4B8940((uint64_t **)(a1 + 72), a2, v7, v8);
  return v7;
}

uint64_t sub_19E4B3340(void *a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if ((uint64_t)a1[7] < 1) {
    return 0;
  }
  unsigned int v2 = a1 + 10;
  while (1)
  {
LABEL_4:
    uint64_t v3 = a1[8];
    if (!v3)
    {
      if (a1[5]) {
        operator new();
      }
      uint64_t v3 = 0;
      a1[8] = 0;
    }
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    if (v4) {
      break;
    }
    uint64_t v16 = a1[8];
    a1[8] = 0;
    if (v16) {
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    }
    uint64_t v17 = a1[7] - 1;
    a1[7] = v17;
    if (v17 <= 0) {
      return 0;
    }
  }
  MEMORY[0x1F4188790](v4, v5);
  uint64_t v7 = (unsigned int *)((char *)v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = (*(uint64_t (**)(void, unsigned int *, void))(*(void *)a1[8] + 24))(a1[8], v7, 0);
  uint64_t v9 = v8;
  if (v8 == 1)
  {
    uint64_t v10 = *v2;
    if (!*v2)
    {
LABEL_29:
      unsigned int v20 = v7 + 1;
      while (1)
      {
        int v21 = *(v20 - 1);
        if ((v21 - 3) > 0x1F0)
        {
          LOBYTE(v23) = 0;
        }
        else
        {
          unsigned int v22 = v21 - 68;
          if (v22 > 0x3C) {
            goto LABEL_3;
          }
          unint64_t v23 = (0x7FFFFFFFFFFFFE0uLL >> v22) & 1;
          if (v23)
          {
LABEL_37:
            if ((v23 & 1) == 0) {
              return 1;
            }
LABEL_3:
            if ((uint64_t)a1[7] <= 0) {
              return 0;
            }
            goto LABEL_4;
          }
        }
        if (v20++ == &v7[v9]) {
          goto LABEL_37;
        }
      }
    }
    unsigned int v11 = *v7;
    unsigned int v12 = v2;
    do
    {
      unsigned int v13 = *(_DWORD *)(v10 + 28);
      BOOL v14 = v13 >= v11;
      if (v13 >= v11) {
        unsigned int v15 = (uint64_t *)v10;
      }
      else {
        unsigned int v15 = (uint64_t *)(v10 + 8);
      }
      if (v14) {
        unsigned int v12 = (void *)v10;
      }
      uint64_t v10 = *v15;
    }
    while (*v15);
    if (v12 != v2 && v11 >= *((_DWORD *)v12 + 7)) {
      goto LABEL_3;
    }
  }
  else
  {
    unsigned int v18 = 4 * v8;
    if (4 * v8)
    {
      uint64_t v19 = a1[12];
      v26[0] = xmmword_19E57CC38;
      v26[1] = unk_19E57CC48;
      sub_19E5006BC(v19, v7, v18, 1, (uint64_t)v26);
      if ((DWORD1(v26[0]) & 0x80000000) == 0) {
        goto LABEL_3;
      }
    }
  }
  if (v9) {
    goto LABEL_29;
  }
  return 1;
}

void sub_19E4B3640(_Unwind_Exception *a1)
{
  MEMORY[0x19F3BDCF0](v1, 0x10B1C4048F3F20DLL);
  _Unwind_Resume(a1);
}

void sub_19E4B3668(uint64_t a1)
{
  *(void *)a1 = &unk_1EF0B4D18;
  sub_19E4B88C8(a1 + 72);
  uint64_t v2 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*(unsigned char *)(a1 + 24)) {
    std::recursive_mutex::unlock(*(std::recursive_mutex **)(a1 + 16));
  }
  JUMPOUT(0x19F3BDCF0);
}

uint64_t sub_19E4B370C(uint64_t a1)
{
  *(void *)a1 = &unk_1EF0B4D18;
  sub_19E4B88C8(a1 + 72);
  uint64_t v2 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*(unsigned char *)(a1 + 24)) {
    std::recursive_mutex::unlock(*(std::recursive_mutex **)(a1 + 16));
  }
  return a1;
}

void **sub_19E4B3790(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = (const void *)*((void *)v3 - 1);
        if (v5) {
          CFRelease(v5);
        }
        *((void *)v3 - 1) = 0;
        v3 -= 16;
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

os_log_t sub_19E4B380C()
{
  os_log_t result = os_log_create("com.apple.LanguageModeling", "MultilingualDynamicLanguageModel");
  qword_1E9459DD0 = (uint64_t)result;
  return result;
}

void sub_19E4B383C(std::recursive_mutex *a1, uint64_t a2, const __CFArray *a3)
{
  uint64_t v5 = a1;
  uint64_t v118 = *MEMORY[0x1E4F143B8];
  std::recursive_mutex::lock(a1);
  uint64_t v6 = *(uint64_t **)&v5[2].__m_.__opaque[16];
  uint64_t v7 = *(uint64_t **)&v5[2].__m_.__opaque[24];
  if (v6 != v7)
  {
    while (*v6 != a2)
    {
      v6 += 2;
      if (v6 == v7) {
        goto LABEL_12;
      }
    }
  }
  if (v6 == v7)
  {
LABEL_12:
    if (!a3 || !CFArrayGetCount(a3)) {
      goto LABEL_140;
    }
    CFRetain(a3);
    uint64_t v10 = *(char **)&v5[2].__m_.__opaque[24];
    unint64_t v9 = *(void *)&v5[2].__m_.__opaque[32];
    *(void *)&long long __dst = a3;
    if ((unint64_t)v10 < v9)
    {
      *(void *)uint64_t v10 = a2;
      *((void *)v10 + 1) = a3;
      unsigned int v11 = v10 + 16;
LABEL_42:
      *(void *)&v5[2].__m_.__opaque[24] = v11;
      goto LABEL_43;
    }
    unsigned int v12 = *(char **)&v5[2].__m_.__opaque[16];
    unsigned int v13 = (char *)(v10 - v12);
    uint64_t v14 = (v10 - v12) >> 4;
    unint64_t v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 60) {
      sub_19E37C7C4();
    }
    uint64_t v16 = v9 - (void)v12;
    if (v16 >> 3 > v15) {
      unint64_t v15 = v16 >> 3;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v15;
    }
    if (v17 >> 60) {
      sub_19E37C2B8();
    }
    unsigned int v18 = (char *)operator new(16 * v17);
    uint64_t v19 = &v18[16 * v14];
    *(void *)&long long __dst = 0;
    *(void *)uint64_t v19 = a2;
    *((void *)v19 + 1) = a3;
    unsigned int v20 = v19 + 16;
    if (v10 != v12)
    {
      unint64_t v21 = v10 - v12 - 16;
      if (v21 >= 0x110)
      {
        unsigned int v88 = &v10[-(v21 & 0xFFFFFFFFFFFFFFF0)];
        BOOL v89 = v88 - 8 >= v19 || &v13[(void)v18 - 8 - (v21 & 0xFFFFFFFFFFFFFFF0)] >= v10;
        BOOL v90 = !v89;
        BOOL v91 = v88 - 16 >= &v13[(void)v18 - 8] || &v13[(void)v18 - (v21 & 0xFFFFFFFFFFFFFFF0) - 16] >= v10 - 8;
        if (v91 && !v90)
        {
          uint64_t v92 = (v21 >> 4) + 1;
          unsigned int v93 = &v19[-16 * (v92 & 0x1FFFFFFFFFFFFFFELL)];
          BOOL v94 = (double *)(v19 - 32);
          int v95 = (const double *)(v10 - 32);
          uint64_t v96 = v92 & 0x1FFFFFFFFFFFFFFELL;
          do
          {
            float64x2x2_t v119 = vld2q_f64(v95);
            v95[3] = 0.0;
            v95[1] = 0.0;
            vst2q_f64(v94, v119);
            v95 -= 4;
            v94 -= 4;
            v96 -= 2;
          }
          while (v96);
          if (v92 == (v92 & 0x1FFFFFFFFFFFFFFELL))
          {
            uint64_t v19 = v93;
            goto LABEL_26;
          }
          v10 -= 16 * (v92 & 0x1FFFFFFFFFFFFFFELL);
          uint64_t v19 = v93;
        }
      }
      do
      {
        long long v22 = *((_OWORD *)v10 - 1);
        v10 -= 16;
        *((void *)v10 + 1) = 0;
        *((_OWORD *)v19 - 1) = v22;
        v19 -= 16;
      }
      while (v10 != v12);
    }
LABEL_26:
    unint64_t v23 = *(char **)&v5[2].__m_.__opaque[16];
    unsigned int v24 = *(char **)&v5[2].__m_.__opaque[24];
    *(void *)&v5[2].__m_.__opaque[16] = v19;
    *(void *)&v5[2].__m_.__opaque[24] = v20;
    for (*(void *)&v5[2].__m_.__opaque[32] = &v18[16 * v17]; v24 != v23; v24 -= 16)
    {
      int v26 = (const void *)*((void *)v24 - 1);
      if (v26) {
        CFRelease(v26);
      }
      *((void *)v24 - 1) = 0;
    }
    if (v23) {
      operator delete(v23);
    }
    int v25 = (const void *)__dst;
    *(void *)&v5[2].__m_.__opaque[24] = v20;
    if (v25) {
      CFRelease(v25);
    }
    goto LABEL_43;
  }
  if (!a3)
  {
LABEL_35:
    uint64_t v27 = *v6;
    *uint64_t v6 = *(v7 - 2);
    *(v7 - 2) = v27;
    uint64_t v28 = v6[1];
    v6[1] = 0;
    uint64_t v29 = *(v7 - 1);
    *(v7 - 1) = 0;
    int v30 = (const void *)v6[1];
    if (v30) {
      CFRelease(v30);
    }
    v6[1] = v29;
    int v31 = (const void *)*(v7 - 1);
    if (v31) {
      CFRelease(v31);
    }
    *(v7 - 1) = v28;
    uint64_t v32 = *(void *)&v5[2].__m_.__opaque[24];
    uint64_t v33 = *(const void **)(v32 - 8);
    if (v33) {
      CFRelease(v33);
    }
    *(void *)(v32 - 8) = 0;
    unsigned int v11 = (void *)(v32 - 16);
    goto LABEL_42;
  }
  if (!CFArrayGetCount(a3))
  {
    uint64_t v7 = *(uint64_t **)&v5[2].__m_.__opaque[24];
    goto LABEL_35;
  }
  if ((const __CFArray *)v6[1] != a3)
  {
    CFRetain(a3);
    uint64_t v8 = (const void *)v6[1];
    if (v8) {
      CFRelease(v8);
    }
    v6[1] = (uint64_t)a3;
  }
LABEL_43:
  int v104 = 0;
  unsigned int v105 = 0;
  unint64_t v106 = 0;
  uint64_t v34 = *(CFTypeRef **)&v5[2].__m_.__opaque[16];
  int v99 = *(CFTypeRef **)&v5[2].__m_.__opaque[24];
  unsigned int v101 = v5;
  int v35 = 0;
  if (v34 != v99)
  {
    while (1)
    {
      CFTypeRef v37 = v34[1];
      if (v37) {
        CFRetain(v34[1]);
      }
      sub_19E40100C(&__dst, v37);
      CFArrayRef v38 = (const __CFArray *)__dst;
      if (!(void)__dst) {
        goto LABEL_46;
      }
      CFIndex Count = CFArrayGetCount((CFArrayRef)__dst);
      CFIndex v40 = Count;
      CFArrayRef v41 = (const __CFArray *)__dst;
      if ((void)__dst)
      {
        CFIndex v103 = CFArrayGetCount((CFArrayRef)__dst);
        unsigned int v100 = v34;
        if (v40) {
          break;
        }
        goto LABEL_92;
      }
      CFIndex v103 = 0;
      unsigned int v100 = v34;
      if (Count) {
        break;
      }
LABEL_92:
      if ((void)__dst) {
        CFRelease((CFTypeRef)__dst);
      }
      uint64_t v34 = v100;
LABEL_46:
      v34 += 2;
      if (v34 == v99)
      {
        unsigned int v36 = v104;
        goto LABEL_96;
      }
    }
    unint64_t v42 = 0;
    CFIndex v102 = v40;
    while (1)
    {
      if (v38 == v41 && v42 == v103) {
        goto LABEL_92;
      }
      if (CFArrayGetCount(v38) <= v42 || (ValueAtIndex = CFArrayGetValueAtIndex(v38, v42), (unsigned int v44 = ValueAtIndex) == 0))
      {
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x19F3BD790](exception, "Could not find item");
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      CFRetain(ValueAtIndex);
      *(void *)std::string buf = v44;
      if ((unint64_t)v35 >= v106) {
        break;
      }
      CFRetain(v44);
      *(void *)int v35 = v44;
      v35 += 8;
LABEL_86:
      unsigned int v105 = v35;
      if (*(void *)buf) {
        CFRelease(*(CFTypeRef *)buf);
      }
      if (++v42 == v40) {
        goto LABEL_92;
      }
    }
    CFArrayRef v45 = v41;
    uint64_t v46 = (v35 - v104) >> 3;
    unint64_t v47 = v46 + 1;
    if ((unint64_t)(v46 + 1) >> 61) {
      sub_19E37C7C4();
    }
    uint64_t v48 = v106 - (void)v104;
    if ((uint64_t)(v106 - (void)v104) >> 2 > v47) {
      unint64_t v47 = v48 >> 2;
    }
    if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v49 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v49 = v47;
    }
    if (v49)
    {
      if (v49 >> 61) {
        sub_19E37C2B8();
      }
      int v50 = (char *)operator new(8 * v49);
    }
    else
    {
      int v50 = 0;
    }
    CFRetain(v44);
    int v51 = &v50[8 * v46];
    uint64_t v52 = &v50[8 * v49];
    *(void *)int v51 = v44;
    uint64_t v53 = v51 + 8;
    int64_t v54 = v35 - v104;
    if (v35 == v104)
    {
      int v104 = &v50[8 * v46];
      unint64_t v106 = (unint64_t)v52;
      uint64_t v5 = v101;
LABEL_83:
      CFArrayRef v41 = v45;
      if (v35) {
        operator delete(v35);
      }
      int v35 = v53;
      CFIndex v40 = v102;
      goto LABEL_86;
    }
    unint64_t v55 = v54 - 8;
    if ((unint64_t)(v54 - 8) > 0x77
      && ((unint64_t v56 = v55 >> 3, &v50[v35 - v104 - (v55 & 0xFFFFFFFFFFFFFFF8) - 8] >= v35) || &v35[-8 * v56 - 8] >= v51))
    {
      unint64_t v61 = v56 + 1;
      v51 -= 8 * (v61 & 0x3FFFFFFFFFFFFFFCLL);
      unsigned int v62 = v35 - 32;
      int v63 = &v50[8 * v46 - 16];
      uint64_t v64 = v61 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v65 = *((_OWORD *)v62 + 1);
        *((_OWORD *)v63 - 1) = *(_OWORD *)v62;
        *(_OWORD *)int v63 = v65;
        *(_OWORD *)unsigned int v62 = 0uLL;
        *((_OWORD *)v62 + 1) = 0uLL;
        v62 -= 32;
        v63 -= 32;
        v64 -= 4;
      }
      while (v64);
      uint64_t v5 = v101;
      if (v61 == (v61 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_78:
        int v35 = v104;
        unsigned int v58 = v105;
        int v104 = v51;
        unint64_t v106 = (unint64_t)v52;
        while (v58 != v35)
        {
          int v60 = (const void *)*((void *)v58 - 1);
          v58 -= 8;
          unsigned int v59 = v60;
          if (v60) {
            CFRelease(v59);
          }
        }
        goto LABEL_83;
      }
      v35 -= 8 * (v61 & 0x3FFFFFFFFFFFFFFCLL);
    }
    else
    {
      uint64_t v5 = v101;
    }
    do
    {
      uint64_t v57 = *((void *)v35 - 1);
      v35 -= 8;
      *((void *)v51 - 1) = v57;
      v51 -= 8;
      *(void *)int v35 = 0;
    }
    while (v35 != v104);
    goto LABEL_78;
  }
  unsigned int v36 = 0;
LABEL_96:
  CFArrayRef v66 = sub_19E400E28(v36, v35);
  uint64_t v67 = *(void *)&v5[1].__m_.__opaque[32];
  for (uint64_t i = *(void *)&v5[1].__m_.__opaque[40]; i != v67; i -= 16)
  {
    unsigned int v69 = *(std::__shared_weak_count **)(i - 8);
    if (v69 && !atomic_fetch_add(&v69->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  *(void *)&v5[1].__m_.__opaque[40] = v67;
  if (v66)
  {
    CFIndex v70 = CFArrayGetCount(v66);
    CFIndex v71 = CFArrayGetCount(v66);
    if (v70)
    {
      if (v71)
      {
        sub_19E4010C4(&__dst, v66, 0);
        operator new();
      }
    }
  }
  BOOL v72 = *(const void **)&v5[2].__m_.__opaque[40];
  if (v72) {
    CFRelease(v72);
  }
  *(void *)&v5[2].__m_.__opaque[40] = v66;
  if (v5[2].__m_.__opaque[48])
  {
    if (v66)
    {
      uint64_t sig = v5[2].__m_.__sig;
      CFRetain(v66);
      sub_19E40100C(buf, v66);
      CFArrayRef v74 = *(const __CFArray **)buf;
      if (*(void *)buf)
      {
        CFTypeID TypeID = CFArrayGetTypeID();
        if (TypeID == CFGetTypeID(v74))
        {
          int v76 = CFArrayGetCount(v74);
          unsigned int v110 = 0;
          unsigned int v111 = 0;
          unint64_t v112 = 0;
          sub_19E42EEEC((uint64_t)&v110, v76);
          if (v76 >= 1)
          {
            CFIndex v77 = 0;
            uint64_t v78 = v76;
            do
            {
              unsigned int v79 = CFArrayGetValueAtIndex(v74, v77);
              int v80 = v79;
              if (v79) {
                CFRetain(v79);
              }
              *(void *)&long long __dst = v80;
              uint64_t v81 = v111;
              if ((unint64_t)v111 < v112)
              {
                *(void *)unsigned int v111 = v80;
                unsigned int v111 = v81 + 8;
              }
              else
              {
                unsigned int v111 = sub_19E42F058((char **)&v110, &__dst);
                if ((void)__dst) {
                  CFRelease((CFTypeRef)__dst);
                }
              }
              ++v77;
            }
            while (v78 != v77);
          }
          if (*(void *)buf) {
            CFRelease(*(CFTypeRef *)buf);
          }
          char v108 = 1;
          LOWORD(v107) = 42;
          sub_19E42E65C((uint64_t)&v109, sig, (const void **)&v107);
        }
        unsigned int v98 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x19F3BD790](v98, "Could not convert");
LABEL_164:
        __cxa_throw(v98, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
    }
    else
    {
      *(void *)std::string buf = 0;
    }
    unsigned int v98 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3BD790](v98, "Could not construct");
    goto LABEL_164;
  }
  uint64_t v82 = MEMORY[0x19F3BCDE0](*(void *)(v5[1].__m_.__sig + 8));
  sub_19E4B8A80((uint64_t)&__dst, *(CFTypeRef *)&v5[2].__m_.__opaque[40]);
  if (qword_1E9459DD8 != -1) {
    dispatch_once(&qword_1E9459DD8, &unk_1EF0BED30);
  }
  uint64_t v83 = qword_1E9459DD0;
  if (os_log_type_enabled((os_log_t)qword_1E9459DD0, OS_LOG_TYPE_DEFAULT))
  {
    p_dst = &__dst;
    if (v114 < 0) {
      p_dst = (long long *)__dst;
    }
    *(_DWORD *)std::string buf = 138412546;
    *(void *)&uint8_t buf[4] = v82;
    __int16 buf_12 = 2080;
    buf_14 = p_dst;
    _os_log_impl(&dword_19E36B000, v83, OS_LOG_TYPE_DEFAULT, "Reloading MultilingualDynamicLanguageModel (%@) for locale(s) (%s)", buf, 0x16u);
  }
  sub_19E4B9684(v5[1].__m_.__sig, *(CFDictionaryRef *)&v5[1].__m_.__opaque[8], 1, (const void ****)&v5[1].__m_.__opaque[32]);
  if (SHIBYTE(v114) < 0) {
    operator delete((void *)__dst);
  }
  if (*(void *)&v5[1].__m_.__opaque[32] != *(void *)&v5[1].__m_.__opaque[40])
  {
    (*(void (**)(void, uint64_t))(**(void **)(*(void *)&v5[2].__m_.__opaque[8] + 8) + 72))(*(void *)(*(void *)&v5[2].__m_.__opaque[8] + 8), *(void *)&v5[1].__m_.__opaque[16] + 88);
    operator new();
  }
  if (v104)
  {
    for (unint64_t j = v105; j != v104; j -= 8)
    {
      unsigned int v87 = (const void *)*((void *)j - 1);
      unsigned int v86 = v87;
      if (v87) {
        CFRelease(v86);
      }
    }
    operator delete(v104);
  }
LABEL_140:
  std::recursive_mutex::unlock(v5);
}

void sub_19E4B5870(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::recursive_mutex *a12, uint64_t a13, uint64_t a14, const void *a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,char a51,uint64_t a52,char a53,uint64_t a54,char a55)
{
  *(void *)(v56 - 120) = v55;
  operator delete(*(void **)(v56 - 160));
  if (a43 < 0)
  {
    operator delete(__p);
    if (a49 < 0) {
      goto LABEL_6;
    }
  }
  else if (a49 < 0)
  {
LABEL_6:
    operator delete(a44);
  }
  sub_19E3D73EC((uint64_t)&a51);
  sub_19E3D73EC((uint64_t)&a53);
  sub_19E3D73EC((uint64_t)&a55);
  if (*(char *)(v56 - 233) < 0)
  {
    operator delete(*(void **)(v56 - 256));
    if ((*(char *)(v56 - 209) & 0x80000000) == 0) {
      goto LABEL_9;
    }
  }
  else if ((*(char *)(v56 - 209) & 0x80000000) == 0)
  {
LABEL_9:
    if (*(char *)(v56 - 185) < 0) {
      goto LABEL_10;
    }
    goto LABEL_14;
  }
  operator delete(*(void **)(v56 - 232));
  if (*(char *)(v56 - 185) < 0)
  {
LABEL_10:
    operator delete(*(void **)(v56 - 208));
    if ((*(char *)(v56 - 161) & 0x80000000) == 0)
    {
LABEL_16:
      sub_19E3EB09C((void **)(v56 - 128));
      if (a30 < 0) {
        operator delete(a25);
      }
      if (a24 < 0) {
        operator delete(a19);
      }
      sub_19E400F9C(&a34);
      sub_19E401594(&a15);
      sub_19E400F9C(&a16);
      std::recursive_mutex::unlock(a12);
      _Unwind_Resume(a1);
    }
LABEL_15:
    operator delete(*(void **)(v56 - 184));
    goto LABEL_16;
  }
LABEL_14:
  if ((*(char *)(v56 - 161) & 0x80000000) == 0) {
    goto LABEL_16;
  }
  goto LABEL_15;
}

void sub_19E4B5D48(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_19E37B770(a1);
}

uint64_t sub_19E4B5D64(std::recursive_mutex *a1, uint64_t a2)
{
  std::recursive_mutex::lock(a1);
  sub_19E4B5EC4(&__p, a1[2].__m_.__sig + 616);
  uint64_t v4 = (char *)__p;
  uint64_t v5 = v14;
  if (__p == v14)
  {
    uint64_t v7 = 0;
    if (!__p) {
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v6 = (char *)__p + 16;
    do
    {
      uint64_t v7 = (*(uint64_t (**)(void, uint64_t, void))(**((void **)v6 - 2) + 24))(*((void *)v6 - 2), a2, 0);
      if (v7) {
        BOOL v8 = 1;
      }
      else {
        BOOL v8 = v6 == v5;
      }
      v6 += 16;
    }
    while (!v8);
    uint64_t v4 = (char *)__p;
    if (!__p) {
      goto LABEL_19;
    }
  }
  unint64_t v9 = v14;
  uint64_t v10 = v4;
  if (v14 != v4)
  {
    do
    {
      unsigned int v11 = (std::__shared_weak_count *)*((void *)v9 - 1);
      if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      v9 -= 16;
    }
    while (v9 != v4);
    uint64_t v10 = __p;
  }
  uint64_t v14 = v4;
  operator delete(v10);
LABEL_19:
  std::recursive_mutex::unlock(a1);
  return v7;
}

void sub_19E4B5EA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

void *sub_19E4B5EC4(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  uint64_t v5 = (uint64_t)v4 - *(void *)a2;
  if (v4 != *(void **)a2)
  {
    if (v5 < 0) {
      sub_19E37C7C4();
    }
    uint64_t v6 = operator new((size_t)v4 - *(void *)a2);
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[2 * (v5 >> 4)];
    do
    {
      uint64_t v7 = v3[1];
      *uint64_t v6 = *v3;
      v6[1] = v7;
      if (v7) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
      }
      v6 += 2;
      v3 += 2;
    }
    while (v3 != v4);
    a1[1] = v6;
  }
  return a1;
}

void sub_19E4B5F64(_Unwind_Exception *exception_object)
{
  uint64_t v3 = (char *)*v1;
  if (*v1)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = *v1;
    if (v4 != v3)
    {
      do
      {
        uint64_t v6 = (std::__shared_weak_count *)*((void *)v4 - 1);
        if (v6)
        {
          if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v4 -= 16;
      }
      while (v4 != v3);
      uint64_t v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E4B5FF0(uint64_t a1, uint64_t a2)
{
  std::recursive_mutex::lock((std::recursive_mutex *)a1);
  std::recursive_mutex::lock((std::recursive_mutex *)a1);
  uint64_t v4 = *(void *)(a1 + 104);
  uint64_t v5 = *(void *)(a1 + 112);
  while (1)
  {
    if (v4 == v5)
    {
      uint64_t v8 = sub_19E4B5D64((std::recursive_mutex *)a1, a2);
      std::recursive_mutex::unlock((std::recursive_mutex *)a1);
      if (!v8) {
        uint64_t v8 = sub_19E4BA040(a2, 1);
      }
      goto LABEL_11;
    }
    uint64_t v6 = *(void **)(*(void *)v4 + 8);
    uint64_t v7 = *(void **)(*(void *)v4 + 16);
    if (v6 != v7) {
      break;
    }
LABEL_2:
    v4 += 16;
  }
  while (1)
  {
    uint64_t v8 = (*(uint64_t (**)(void, uint64_t, void))(*(void *)*v6 + 24))(*v6, a2, 0);
    if (v8) {
      break;
    }
    if (++v6 == v7) {
      goto LABEL_2;
    }
  }
  std::recursive_mutex::unlock((std::recursive_mutex *)a1);
LABEL_11:
  std::recursive_mutex::unlock((std::recursive_mutex *)a1);
  return v8;
}

void sub_19E4B60E8(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19E4B6110(uint64_t a1, std::recursive_mutex *this, uint64_t a3)
{
  std::recursive_mutex::lock(this);
  if (a3 > 0x1F3)
  {
    sub_19E4B5EC4(&__p, this[2].__m_.__sig + 616);
    uint64_t v6 = __p;
    uint64_t v7 = v16;
    if (__p == v16)
    {
      if (!__p)
      {
LABEL_27:
        *(unsigned char *)(a1 + 23) = 0;
        *(unsigned char *)a1 = 0;
        goto LABEL_30;
      }
    }
    else
    {
      do
      {
        (*(void (**)(void, uint64_t))(*(void *)*v6 + 32))(*v6, a3);
        if (*(char *)(a1 + 23) < 0)
        {
          if (*(void *)(a1 + 8))
          {
LABEL_11:
            uint64_t v8 = __p;
            if (__p)
            {
              unint64_t v9 = v16;
              uint64_t v10 = __p;
              if (v16 != __p)
              {
                do
                {
                  unsigned int v11 = (std::__shared_weak_count *)*(v9 - 1);
                  if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                  {
                    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
                    std::__shared_weak_count::__release_weak(v11);
                  }
                  v9 -= 2;
                }
                while (v9 != v8);
                uint64_t v10 = __p;
              }
              uint64_t v16 = v8;
              operator delete(v10);
            }
            goto LABEL_30;
          }
          operator delete(*(void **)a1);
        }
        else if (*(unsigned char *)(a1 + 23))
        {
          goto LABEL_11;
        }
        v6 += 2;
      }
      while (v6 != v7);
      uint64_t v6 = __p;
      if (!__p) {
        goto LABEL_27;
      }
    }
    unsigned int v12 = v16;
    unsigned int v13 = v6;
    if (v16 != v6)
    {
      do
      {
        uint64_t v14 = (std::__shared_weak_count *)*(v12 - 1);
        if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
        v12 -= 2;
      }
      while (v12 != v6);
      unsigned int v13 = __p;
    }
    uint64_t v16 = v6;
    operator delete(v13);
    goto LABEL_27;
  }
  sub_19E4A98F8((void *)a1, a3);
LABEL_30:
  std::recursive_mutex::unlock(this);
}

void sub_19E4B6304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_19E4B632C(std::recursive_mutex *a1, uint64_t a2)
{
  std::recursive_mutex::lock(a1);
  sub_19E4B5EC4(&__p, a1[2].__m_.__sig + 616);
  uint64_t v4 = (char *)__p;
  uint64_t v5 = v14;
  if (__p == v14)
  {
    uint64_t v7 = 0;
    if (!__p) {
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v6 = (char *)__p + 16;
    do
    {
      uint64_t v7 = (*(uint64_t (**)(void, uint64_t))(**((void **)v6 - 2) + 208))(*((void *)v6 - 2), a2);
      if (v7) {
        BOOL v8 = 1;
      }
      else {
        BOOL v8 = v6 == v5;
      }
      v6 += 16;
    }
    while (!v8);
    uint64_t v4 = (char *)__p;
    if (!__p) {
      goto LABEL_19;
    }
  }
  unint64_t v9 = v14;
  uint64_t v10 = v4;
  if (v14 != v4)
  {
    do
    {
      unsigned int v11 = (std::__shared_weak_count *)*((void *)v9 - 1);
      if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      v9 -= 16;
    }
    while (v9 != v4);
    uint64_t v10 = __p;
  }
  uint64_t v14 = v4;
  operator delete(v10);
LABEL_19:
  std::recursive_mutex::unlock(a1);
  return v7;
}

void sub_19E4B6464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_19E4B6488(std::recursive_mutex *a1, uint64_t a2)
{
  std::recursive_mutex::lock(a1);
  sub_19E4B5EC4(&__p, a1[2].__m_.__sig + 616);
  uint64_t v4 = __p;
  uint64_t v5 = v16;
  if (__p == v16)
  {
LABEL_5:
    if (v4)
    {
      uint64_t v6 = v16;
      uint64_t v7 = v4;
      if (v16 != v4)
      {
        do
        {
          BOOL v8 = (std::__shared_weak_count *)*(v6 - 1);
          if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
          v6 -= 2;
        }
        while (v6 != v4);
        uint64_t v7 = __p;
      }
      uint64_t v16 = v4;
      operator delete(v7);
    }
    uint64_t v13 = 0;
  }
  else
  {
    while (!(*(unsigned int (**)(void, uint64_t))(*(void *)*v4 + 224))(*v4, a2))
    {
      v4 += 2;
      if (v4 == v5)
      {
        uint64_t v4 = __p;
        goto LABEL_5;
      }
    }
    unint64_t v9 = __p;
    if (__p)
    {
      uint64_t v10 = v16;
      unsigned int v11 = __p;
      if (v16 != __p)
      {
        do
        {
          unsigned int v12 = (std::__shared_weak_count *)*(v10 - 1);
          if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
          v10 -= 2;
        }
        while (v10 != v9);
        unsigned int v11 = __p;
      }
      uint64_t v16 = v9;
      operator delete(v11);
    }
    uint64_t v13 = 1;
  }
  std::recursive_mutex::unlock(a1);
  return v13;
}

void sub_19E4B6638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_19E4B665C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v5 = (void *)*v2;
      uint64_t v6 = (const void *)v2[2];
      if (v6) {
        CFRelease(v6);
      }
      operator delete(v2);
      uint64_t v2 = v5;
    }
    while (v5);
  }
  uint64_t v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_19E4B66C8(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      uint64_t v3 = (const void *)v2[2];
      if (v3) {
        CFRelease(v3);
      }
    }
    operator delete(v2);
  }
  return a1;
}

void sub_19E4B6718(uint64_t a1, int a2, double *a3, uint64_t a4, _DWORD *a5, unint64_t a6)
{
  std::recursive_mutex::lock((std::recursive_mutex *)a1);
  if (!a6)
  {
    a5 = 0;
    if (a2 == 2) {
      goto LABEL_33;
    }
LABEL_9:
    if (!*(unsigned char *)(*(void *)(a1 + 88) + 192)) {
      goto LABEL_33;
    }
    uint64_t v16 = *(void *)(a1 + 144);
    if (v16)
    {
      char v26 = 10;
      strcpy((char *)__p, "selfSender");
      sub_19E533DAC(v16, a2, a3, a4, a5, a6, __p);
      if (v26 < 0) {
        operator delete(__p[0]);
      }
    }
    sub_19E4B5EC4(__p, *(void *)(a1 + 128) + 616);
    unint64_t v17 = __p[0];
    unsigned int v18 = __p[1];
    if (__p[0] == __p[1])
    {
      if (!__p[0]) {
        goto LABEL_33;
      }
    }
    else
    {
      while (1)
      {
        (*(void (**)(void **__return_ptr))(*(void *)*v17 + 32))(v23);
        unint64_t v19 = v24;
        if ((v24 & 0x80u) != 0) {
          unint64_t v19 = (unint64_t)v23[1];
        }
        if (v19) {
          break;
        }
        if ((char)v24 < 0) {
          operator delete(v23[0]);
        }
        v17 += 2;
        if (v17 == v18) {
          goto LABEL_24;
        }
      }
      (*(void (**)(void, void **, uint64_t, float))(*(void *)*v17 + 184))(*v17, v23, a4, 1.0);
      if ((char)v24 < 0) {
        operator delete(v23[0]);
      }
LABEL_24:
      unint64_t v17 = __p[0];
      if (!__p[0]) {
        goto LABEL_33;
      }
    }
    unsigned int v20 = __p[1];
    unint64_t v21 = v17;
    if (__p[1] != v17)
    {
      do
      {
        long long v22 = (std::__shared_weak_count *)*(v20 - 1);
        if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
        v20 -= 2;
      }
      while (v20 != v17);
      unint64_t v21 = __p[0];
    }
    __p[1] = v17;
    operator delete(v21);
    goto LABEL_33;
  }
  uint64_t v12 = a6;
  uint64_t v13 = &a5[a6];
  while (v12 * 4)
  {
    int v14 = a5[--v12];
    if (v14 == 1)
    {
      uint64_t v15 = (uint64_t)(4 * a6 - (v12 * 4 + 4)) >> 2;
      a6 = v15 + 1;
      a5 = &v13[~v15];
      break;
    }
  }
  if (a2 != 2) {
    goto LABEL_9;
  }
LABEL_33:
  std::recursive_mutex::unlock((std::recursive_mutex *)a1);
}

void sub_19E4B6978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_19E3D7338(&a15);
  std::recursive_mutex::unlock(v20);
  _Unwind_Resume(a1);
}

uint64_t sub_19E4B69CC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, int a6, uint64_t a7, unint64_t a8)
{
  std::recursive_mutex::lock((std::recursive_mutex *)a1);
  if (a4)
  {
    uint64_t v16 = 4 * a4;
    unint64_t v17 = a3 + 4 * a4;
    while (v16)
    {
      int v18 = *(_DWORD *)(a3 + v16 - 4);
      v16 -= 4;
      if (v18 == 1)
      {
        uint64_t v19 = (uint64_t)(4 * a4 - (v16 + 4)) >> 2;
        a4 = v19 + 1;
        a3 = v17 + 4 * ~v19;
        break;
      }
    }
    if (a2 != 1) {
      goto LABEL_11;
    }
  }
  else
  {
    a3 = 0;
    if (a2 != 1) {
      goto LABEL_11;
    }
  }
  if (!a4)
  {
    uint64_t v20 = 1;
    goto LABEL_26;
  }
LABEL_11:
  double v42 = 0.0;
  unint64_t v21 = *(uint64_t **)(a1 + 144);
  if (v21) {
    uint64_t v20 = sub_19E534244(v21, a2, a3, a4, &v42, a7, a6);
  }
  else {
    uint64_t v20 = 0;
  }
  double v22 = __exp10(*(double *)(a5 + 64));
  unint64_t v23 = *(void **)(a1 + 144);
  uint64_t v24 = 248;
  if (a4 < 2) {
    uint64_t v24 = 252;
  }
  float v25 = *(float *)(v23[3] + v24);
  uint64_t v26 = v23[7];
  if (v26)
  {
    uint64_t v27 = (std::mutex *)(v26 + 96);
    std::mutex::lock((std::mutex *)(v26 + 96));
    uint64_t v26 = *(void *)(v26 + 40);
    std::mutex::unlock(v27);
  }
  unint64_t v28 = (*(uint64_t (**)(void *))(*v23 + 32))(v23);
  if (v26 + a8 < v28) {
    float v25 = (float)((float)((float)(v26 + a8) / (float)v28) * (float)((float)(v26 + a8) / (float)v28)) * v25;
  }
  unint64_t v29 = *(void *)(*(void *)(a1 + 144) + 56);
  if (v29)
  {
    int v30 = (std::mutex *)(v29 + 96);
    std::mutex::lock((std::mutex *)(v29 + 96));
    unint64_t v29 = *(void *)(v29 + 40);
    std::mutex::unlock(v30);
  }
  if (v29 + a8) {
    double v31 = (v22 * (double)a8 + v42 * (double)v29) / (double)(v29 + a8);
  }
  else {
    double v31 = 0.0;
  }
  long double v32 = log10(v31);
  double v33 = *(double *)(a5 + 72);
  *(long double *)(a5 + 64) = v32;
  *(double *)(a5 + 72) = v25;
  double v34 = *(double *)(a5 + 40);
  double v35 = *(double *)(a5 + 48) + v33 - v25;
  *(double *)(a5 + 48) = v35;
  *(unsigned char *)(a5 + ++*(_DWORD *)(result + 24) = v31 > 0.0;
  double v36 = __exp10(v34) * v35;
  double v37 = *(double *)(a5 + 72);
  double v38 = v36 + __exp10(*(double *)(a5 + 64)) * v37;
  double v39 = *(double *)(a5 + 88);
  double v40 = __exp10(*(double *)(a5 + 80));
  *(long double *)a5 = log10(v38 + v40 * v39) - *(double *)(a5 + 96);
LABEL_26:
  std::recursive_mutex::unlock((std::recursive_mutex *)a1);
  return v20;
}

void sub_19E4B6C18(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19E4B6C38(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 200);
  if (v2) {
    CFRelease(v2);
  }
  *(void *)(a1 + 200) = 0;
  uint64_t v3 = *(void *)(a1 + 176);
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 184);
    uint64_t v5 = *(void **)(a1 + 176);
    if (v4 != v3)
    {
      do
      {
        uint64_t v6 = *(const void **)(v4 - 8);
        if (v6) {
          CFRelease(v6);
        }
        *(void *)(v4 - 8) = 0;
        v4 -= 16;
      }
      while (v4 != v3);
      uint64_t v5 = *(void **)(a1 + 176);
    }
    *(void *)(a1 + 184) = v3;
    operator delete(v5);
  }
  uint64_t v7 = *(void *)(a1 + 168);
  *(void *)(a1 + 168) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  BOOL v8 = *(std::__shared_weak_count **)(a1 + 160);
  if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v9 = *(void *)(a1 + 128);
  if (v9)
  {
    uint64_t v10 = *(void *)(a1 + 136);
    unsigned int v11 = *(void **)(a1 + 128);
    if (v10 != v9)
    {
      do
      {
        uint64_t v12 = *(std::__shared_weak_count **)(v10 - 8);
        if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
        v10 -= 16;
      }
      while (v10 != v9);
      unsigned int v11 = *(void **)(a1 + 128);
    }
    *(void *)(a1 + 136) = v9;
    operator delete(v11);
  }
  uint64_t v13 = *(std::__shared_weak_count **)(a1 + 120);
  if (v13 && !atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    int v14 = *(const void **)(a1 + 104);
    if (!v14) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  int v14 = *(const void **)(a1 + 104);
  if (v14) {
LABEL_28:
  }
    CFRelease(v14);
LABEL_29:
  *(void *)(a1 + 104) = 0;
  uint64_t v15 = *(std::__shared_weak_count **)(a1 + 96);
  if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)(a1 + 24));
}

void sub_19E4B6E88(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0B5C38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19F3BDCF0);
}

void sub_19E4B6EDC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0B5C38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

float *sub_19E4B6EFC(uint64_t a1, double *a2, _DWORD *a3)
{
  os_log_t result = (float *)CFBinaryHeapGetMinimum(*(CFBinaryHeapRef *)(a1 + 32));
  if (a2)
  {
    if (result) {
      double v7 = *result;
    }
    else {
      double v7 = 0.0;
    }
    *a2 = v7;
  }
  if (a3) {
    *a3 = *(_DWORD *)(a1 + 44);
  }
  if (result) {
    return (float *)*((unsigned int *)result + 2);
  }
  return result;
}

BOOL sub_19E4B6F64(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 40))
  {
    CFIndex Length = CFStringGetLength(*(CFStringRef *)(a1 + 16));
    CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
    operator new[]();
  }
  if (CFBinaryHeapGetCount(*(CFBinaryHeapRef *)(a1 + 32)) >= 1) {
    CFBinaryHeapRemoveMinimumValue(*(CFBinaryHeapRef *)(a1 + 32));
  }
  if (!CFBinaryHeapGetCount(*(CFBinaryHeapRef *)(a1 + 32)))
  {
    uint64_t v3 = *(void *)(a1 + 8);
    uint64_t v4 = *(__CFBinaryHeap **)(a1 + 24);
    uint64_t v5 = *(__CFBinaryHeap **)(a1 + 32);
    callBacks.retain = (const void *(__cdecl *)(CFAllocatorRef, const void *))sub_19E5019A4;
    callBacks.release = (void (__cdecl *)(CFAllocatorRef, const void *))sub_19E501984;
    callBacks.compare = (CFComparisonResult (__cdecl *)(const void *, const void *, void *))sub_19E502E4C;
    CFBinaryHeapRef v6 = CFBinaryHeapCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, &callBacks, 0);
    if (v6)
    {
      double v7 = v6;
      while (CFBinaryHeapGetCount(v4) && CFBinaryHeapGetCount(v5) <= 9)
      {
        sub_19E5023E0(v3, v4, v7);
        while (CFBinaryHeapGetCount(v7))
        {
          Minimuunint64_t m = CFBinaryHeapGetMinimum(v7);
          CFBinaryHeapAddValue(v5, Minimum);
          CFBinaryHeapRemoveMinimumValue(v7);
        }
      }
      CFRelease(v7);
    }
  }
  return CFBinaryHeapGetCount(*(CFBinaryHeapRef *)(a1 + 32)) > 0;
}

void sub_19E4B7208(_Unwind_Exception *a1)
{
  MEMORY[0x19F3BDCC0](v1, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

void sub_19E4B7234(void *a1)
{
  *a1 = &unk_1EF0BBBE0;
  uint64_t v2 = (const void *)a1[2];
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)a1[4];
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)a1[3];
  if (v4) {
    CFRelease(v4);
  }
  JUMPOUT(0x19F3BDCF0);
}

void *sub_19E4B72BC(void *a1)
{
  *a1 = &unk_1EF0BBBE0;
  uint64_t v2 = (const void *)a1[2];
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)a1[4];
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)a1[3];
  if (v4) {
    CFRelease(v4);
  }
  return a1;
}

void sub_19E4B7324()
{
}

void sub_19E4B7350()
{
}

void sub_19E4B737C()
{
}

void sub_19E4B74E0(_Unwind_Exception *a1)
{
  MEMORY[0x19F3BDCF0](v1, 0x10E1C40AD94C641);
  _Unwind_Resume(a1);
}

size_t sub_19E4B7504@<X0>(size_t result@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  uint64_t v4 = *(void *)(result + 40);
  if (!v4
    || (uint64_t v5 = *(void *)(result + 48)) == 0
    || (unsigned int v6 = *(_DWORD *)(result + 32), v7 = a2 >= v6, v8 = a2 - v6, !v7)
    || *(_DWORD *)(result + 36) < a2)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return result;
  }
  uint64_t v9 = (const char *)(v5 + *(unsigned int *)(v4 + 4 * v8));
  os_log_t result = strlen(v9);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    sub_19E37C958();
  }
  size_t v10 = result;
  if (result >= 0x17)
  {
    uint64_t v11 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v11 = result | 7;
    }
    uint64_t v12 = v11 + 1;
    uint64_t v13 = operator new(v11 + 1);
    a3[1] = v10;
    a3[2] = v12 | 0x8000000000000000;
    *a3 = v13;
    a3 = v13;
  }
  else
  {
    *((unsigned char *)a3 + 23) = result;
    if (!result) {
      goto LABEL_15;
    }
  }
  os_log_t result = (size_t)memmove(a3, v9, v10);
LABEL_15:
  *((unsigned char *)a3 + v10) = 0;
  return result;
}

uint64_t sub_19E4B75E0(uint64_t a1, unsigned __int8 *a2, double *a3)
{
  signed __int8 v4 = a2[23];
  if (v4 >= 0) {
    unsigned int v5 = a2[23];
  }
  else {
    unsigned int v5 = *((_DWORD *)a2 + 2);
  }
  if (!v5) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 8);
  if (v4 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  v8[0] = xmmword_19E57CC38;
  v8[1] = unk_19E57CC48;
  sub_19E5006BC(v6, a2, v5, 1, (uint64_t)v8);
  uint64_t result = DWORD1(v8[0]);
  if ((DWORD1(v8[0]) & 0x80000000) != 0) {
    return 0;
  }
  if (a3) {
    *a3 = *((float *)v8 + 2);
  }
  return result;
}

uint64_t sub_19E4B766C(uint64_t a1, const __CFString *a2, double *a3)
{
  return sub_19E4B7674(a1 - 8, a2, a3);
}

uint64_t sub_19E4B7674(uint64_t a1, const __CFString *a2, double *a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  sub_19E37774C(a2, &__p);
  if ((v11 & 0x80u) == 0) {
    unsigned int v5 = v11;
  }
  else {
    unsigned int v5 = v10;
  }
  if (v5)
  {
    if ((v11 & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    v12[0] = xmmword_19E57CC38;
    v12[1] = unk_19E57CC48;
    sub_19E5006BC(v4, p_p, v5, 1, (uint64_t)v12);
    uint64_t v7 = DWORD1(v12[0]);
    if ((DWORD1(v12[0]) & 0x80000000) != 0)
    {
      uint64_t v7 = 0;
      if (((char)v11 & 0x80000000) == 0) {
        return v7;
      }
      goto LABEL_14;
    }
    if (a3)
    {
      *a3 = *((float *)v12 + 2);
      if ((char)v11 < 0) {
        goto LABEL_14;
      }
      return v7;
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  if ((char)v11 < 0) {
LABEL_14:
  }
    operator delete(__p);
  return v7;
}

void sub_19E4B7748(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E4B7764(void *a1)
{
  *(a1 - 1) = &unk_1EF0BA748;
  *a1 = &unk_1EF0BA7B8;
  uint64_t v2 = a1[1];
  if (v2 && (int v3 = *(_DWORD *)(v2 + 2080) - 1, (*(_DWORD *)(v2 + 2080) = v3) == 0))
  {
    unsigned int v5 = *(void **)(v2 + 2084);
    if (v5)
    {
      if (*(_DWORD *)(v2 + 2096)) {
        munmap(v5, *(void *)(v2 + 2072));
      }
    }
    else
    {
      sub_19E4FEBFC(v2);
    }
    free((void *)v2);
    uint64_t v4 = (void *)a1[2];
    if (!v4)
    {
LABEL_5:
      a1[3] = 0;
      JUMPOUT(0x19F3BDCF0);
    }
  }
  else
  {
    uint64_t v4 = (void *)a1[2];
    if (!v4) {
      goto LABEL_5;
    }
  }
  munmap(v4, a1[3]);
  goto LABEL_5;
}

void *sub_19E4B785C(void *a1)
{
  *(a1 - 1) = &unk_1EF0BA748;
  *a1 = &unk_1EF0BA7B8;
  uint64_t v2 = a1[1];
  if (v2 && (int v3 = *(_DWORD *)(v2 + 2080) - 1, (*(_DWORD *)(v2 + 2080) = v3) == 0))
  {
    unsigned int v5 = *(void **)(v2 + 2084);
    if (v5)
    {
      if (*(_DWORD *)(v2 + 2096)) {
        munmap(v5, *(void *)(v2 + 2072));
      }
    }
    else
    {
      sub_19E4FEBFC(v2);
    }
    free((void *)v2);
    uint64_t result = (void *)a1[2];
    if (result) {
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t result = (void *)a1[2];
    if (result) {
LABEL_4:
    }
      uint64_t result = (void *)munmap(result, a1[3]);
  }
  a1[3] = 0;
  return result;
}

void sub_19E4B7928()
{
}

void sub_19E4B7954()
{
}

void sub_19E4B7980()
{
}

void sub_19E4B7AE4(_Unwind_Exception *a1)
{
  MEMORY[0x19F3BDCF0](v1, 0x10E1C40AD94C641);
  _Unwind_Resume(a1);
}

size_t sub_19E4B7B08@<X0>(size_t result@<X0>, unsigned int a2@<W1>, void *a3@<X8>)
{
  uint64_t v4 = *(void *)(result + 48);
  if (!v4
    || (uint64_t v5 = *(void *)(result + 56)) == 0
    || (unsigned int v6 = *(_DWORD *)(result + 40), v7 = a2 >= v6, v8 = a2 - v6, !v7)
    || *(_DWORD *)(result + 44) < a2)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return result;
  }
  uint64_t v9 = (const char *)(v5 + *(unsigned int *)(v4 + 4 * v8));
  uint64_t result = strlen(v9);
  if (result >= 0x7FFFFFFFFFFFFFF8) {
    sub_19E37C958();
  }
  size_t v10 = result;
  if (result >= 0x17)
  {
    uint64_t v11 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17) {
      uint64_t v11 = result | 7;
    }
    uint64_t v12 = v11 + 1;
    uint64_t v13 = operator new(v11 + 1);
    a3[1] = v10;
    a3[2] = v12 | 0x8000000000000000;
    *a3 = v13;
    a3 = v13;
  }
  else
  {
    *((unsigned char *)a3 + 23) = result;
    if (!result) {
      goto LABEL_15;
    }
  }
  uint64_t result = (size_t)memmove(a3, v9, v10);
LABEL_15:
  *((unsigned char *)a3 + v10) = 0;
  return result;
}

uint64_t sub_19E4B7BE4(uint64_t a1, unsigned __int8 *a2, double *a3)
{
  signed __int8 v4 = a2[23];
  if (v4 >= 0) {
    unsigned int v5 = a2[23];
  }
  else {
    unsigned int v5 = *((_DWORD *)a2 + 2);
  }
  if (!v5) {
    return 0;
  }
  uint64_t v6 = *(void *)(a1 + 16);
  if (v4 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  v8[0] = xmmword_19E57CC38;
  v8[1] = unk_19E57CC48;
  sub_19E5006BC(v6, a2, v5, 1, (uint64_t)v8);
  uint64_t result = DWORD1(v8[0]);
  if ((DWORD1(v8[0]) & 0x80000000) != 0) {
    return 0;
  }
  if (a3) {
    *a3 = *((float *)v8 + 2);
  }
  return result;
}

uint64_t sub_19E4B7C70(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_19E4B7C78(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1) {
    return *(unsigned int *)(v1 + 2064);
  }
  else {
    return 0;
  }
}

uint64_t sub_19E4B7C90(uint64_t a1, int __fd)
{
  return 1;
}

void sub_19E4B7CB8(uint64_t a1, void *aBlock)
{
  aBlocka = _Block_copy(aBlock);
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  v5[0] = 0xFFFFFFFF00000003;
  v5[1] = 0;
  v5[2] = &aBlocka;
  void v5[3] = sub_19E4B7D70;
  sub_19E5006BC(v3, 0, 0, 0, (uint64_t)v5);
  _Block_release(aBlocka);
}

void sub_19E4B7D58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock)
{
}

uint64_t sub_19E4B7D70(uint64_t a1, float *a2, __n128 a3)
{
  if (a2) {
    a3.n128_f64[0] = *a2;
  }
  else {
    a3.n128_u64[0] = 0;
  }
  return (*(uint64_t (**)(__n128))(*(void *)a1 + 16))(a3);
}

void sub_19E4B7D9C(void *a1)
{
  *a1 = &unk_1EF0BA748;
  a1[1] = &unk_1EF0BA7B8;
  uint64_t v2 = a1[2];
  if (v2 && (int v3 = *(_DWORD *)(v2 + 2080) - 1, (*(_DWORD *)(v2 + 2080) = v3) == 0))
  {
    unsigned int v5 = *(void **)(v2 + 2084);
    if (v5)
    {
      if (*(_DWORD *)(v2 + 2096)) {
        munmap(v5, *(void *)(v2 + 2072));
      }
    }
    else
    {
      sub_19E4FEBFC(v2);
    }
    free((void *)v2);
    signed __int8 v4 = (void *)a1[3];
    if (!v4)
    {
LABEL_5:
      a1[4] = 0;
      JUMPOUT(0x19F3BDCF0);
    }
  }
  else
  {
    signed __int8 v4 = (void *)a1[3];
    if (!v4) {
      goto LABEL_5;
    }
  }
  munmap(v4, a1[4]);
  goto LABEL_5;
}

void *sub_19E4B7E8C(void *a1)
{
  *a1 = &unk_1EF0BA748;
  a1[1] = &unk_1EF0BA7B8;
  uint64_t v2 = a1[2];
  if (v2 && (int v3 = *(_DWORD *)(v2 + 2080) - 1, (*(_DWORD *)(v2 + 2080) = v3) == 0))
  {
    uint64_t v6 = *(void **)(v2 + 2084);
    if (v6)
    {
      if (*(_DWORD *)(v2 + 2096)) {
        munmap(v6, *(void *)(v2 + 2072));
      }
    }
    else
    {
      sub_19E4FEBFC(v2);
    }
    free((void *)v2);
    signed __int8 v4 = (void *)a1[3];
    if (v4) {
      goto LABEL_4;
    }
  }
  else
  {
    signed __int8 v4 = (void *)a1[3];
    if (v4) {
LABEL_4:
    }
      munmap(v4, a1[4]);
  }
  a1[4] = 0;
  return a1;
}

uint64_t sub_19E4B7F5C(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_19E4B7F64(uint64_t a1)
{
  return *(unsigned int *)(a1 + 64);
}

uint64_t sub_19E4B7F6C(uint64_t a1, uint64_t __fd)
{
  uint64_t v2 = __fd;
  uint64_t v3 = a1;
  __std::string buf = 0x3BAFABAFALL;
  long long v66 = 0u;
  long long v67 = 0u;
  uint64_t v68 = 0;
  uint64_t v4 = *(void *)(a1 + 88);
  LODWORD(v67) = *(_DWORD *)(a1 + 48) - *(_DWORD *)(a1 + 40);
  HIDWORD(v67) = v4;
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5)
  {
    uint64_t v6 = a1 + 24;
    uint64_t v7 = *(void *)(a1 + 24);
    unsigned int v8 = *(_DWORD *)(*(void *)(a1 + 16) + 28);
    if (v7)
    {
      do
      {
        uint64_t v9 = v7;
        uint64_t v7 = *(void *)(v7 + 8);
      }
      while (v7);
    }
    else
    {
      do
      {
        uint64_t v9 = *(void *)(v6 + 16);
        BOOL v10 = *(void *)v9 == v6;
        uint64_t v6 = v9;
      }
      while (v10);
    }
    LODWORD(v5) = *(_DWORD *)(v9 + 28);
  }
  else
  {
    unsigned int v8 = 0;
  }
  *((void *)&v66 + 1) = __PAIR64__(v5, v8);
  write(__fd, &__buf, 0x30uLL);
  uint64_t v11 = (int *)operator new(4uLL);
  *uint64_t v11 = 0;
  uint64_t v12 = (char *)(v11 + 1);
  uint64_t v64 = v11 + 1;
  long long __p = v11;
  uint64_t v13 = *(void **)(v3 + 16);
  int v14 = (void *)(v3 + 24);
  if (v13 != (void *)(v3 + 24))
  {
    uint64_t v61 = v3;
    unsigned int __fda = v2;
    long long v15 = 0uLL;
    uint64_t v16 = v11 + 1;
    unint64_t v17 = v11;
    while (1)
    {
      unsigned int v18 = *((_DWORD *)v13 + 7) - v8;
      unint64_t v19 = v16 - v17;
      unint64_t v20 = v18 + 1;
      unint64_t v21 = v20 - v19;
      if (v20 > v19) {
        break;
      }
LABEL_52:
      v17[v18] = *((_DWORD *)v13 + 8);
      CFArrayRef v45 = (void *)v13[1];
      if (v45)
      {
        do
        {
          uint64_t v46 = v45;
          CFArrayRef v45 = (void *)*v45;
        }
        while (v45);
      }
      else
      {
        do
        {
          uint64_t v46 = (void *)v13[2];
          BOOL v10 = *v46 == (void)v13;
          uint64_t v13 = v46;
        }
        while (!v10);
      }
      uint64_t v13 = v46;
      if (v46 == v14)
      {
        uint64_t v12 = (char *)v64;
        uint64_t v2 = __fda;
        uint64_t v3 = v61;
        goto LABEL_60;
      }
    }
    v69[1] = 0;
    double v22 = v64;
    if (v21 > (v12 - (char *)v64) >> 2)
    {
      uint64_t v23 = v64 - v17;
      unint64_t v24 = v23 + v21;
      if ((v23 + v21) >> 62) {
        sub_19E37C7C4();
      }
      if ((v12 - (char *)v17) >> 1 > v24) {
        unint64_t v24 = (v12 - (char *)v17) >> 1;
      }
      if ((unint64_t)(v12 - (char *)v17) >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v25 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v25 = v24;
      }
      if (v25)
      {
        if (v25 >> 62) {
          sub_19E37C2B8();
        }
        unint64_t v26 = v25;
        uint64_t v27 = operator new(4 * v25);
        long long v15 = 0uLL;
        unint64_t v25 = v26;
      }
      else
      {
        uint64_t v27 = 0;
      }
      uint64_t v11 = (int *)&v27[4 * v23];
      uint64_t v16 = &v11[v21];
      unint64_t v32 = (v21 - 1) & 0x3FFFFFFFFFFFFFFFLL;
      double v33 = v11;
      if (v32 >= 0x13)
      {
        if (v11 >= &v69[2]
          || (double v33 = (int *)&v27[4 * v23], &v27[4 * v21 + (char *)v64 - (char *)v17] <= (unsigned char *)&v69[1]))
        {
          uint64_t v34 = (v32 + 1) & 0x7FFFFFFFFFFFFFF8;
          double v35 = &v27[4 * v23];
          uint64_t v36 = v34;
          do
          {
            *double v35 = v15;
            v35[1] = v15;
            v35 += 2;
            v36 -= 8;
          }
          while (v36);
          if (v32 + 1 == v34) {
            goto LABEL_40;
          }
          double v33 = &v11[v34];
        }
      }
      do
        *v33++ = v69[1];
      while (v33 != v16);
LABEL_40:
      if (v64 != v17)
      {
        unint64_t v37 = (char *)v64 - (char *)v17 - 4;
        if (v37 < 0x2C) {
          goto LABEL_93;
        }
        if ((unint64_t)((char *)v17 - v27) < 0x20) {
          goto LABEL_93;
        }
        uint64_t v38 = (v37 >> 2) + 1;
        double v39 = &v27[4 * v23 - 16];
        double v40 = v64 - 4;
        uint64_t v41 = v38 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v42 = *(_OWORD *)v40;
          *(v39 - 1) = *((_OWORD *)v40 - 1);
          *double v39 = v42;
          v39 -= 2;
          v40 -= 8;
          v41 -= 8;
        }
        while (v41);
        v11 -= v38 & 0x7FFFFFFFFFFFFFF8;
        double v22 = &v64[-(v38 & 0x7FFFFFFFFFFFFFF8)];
        if (v38 != (v38 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_93:
          do
          {
            int v43 = *--v22;
            *--uint64_t v11 = v43;
          }
          while (v22 != v17);
        }
      }
      uint64_t v12 = &v27[4 * v25];
      long long __p = v11;
      uint64_t v64 = v16;
      if (v17)
      {
        unsigned int v44 = &v27[4 * v25];
        operator delete(v17);
        uint64_t v12 = v44;
        long long v15 = 0uLL;
        uint64_t v11 = __p;
      }
      goto LABEL_51;
    }
    uint64_t v16 = &v64[v21];
    unint64_t v28 = (v21 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    if (v28 >= 0xF && (v64 >= &v69[2] || v16 <= &v69[1]))
    {
      unint64_t v29 = v28 + 1;
      int v30 = v64;
      uint64_t v31 = v29 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        *(_OWORD *)int v30 = v15;
        *((_OWORD *)v30 + 1) = v15;
        v30 += 8;
        v31 -= 8;
      }
      while (v31);
      if (v29 == (v29 & 0x7FFFFFFFFFFFFFF8)) {
        goto LABEL_30;
      }
      double v22 = &v64[v29 & 0x7FFFFFFFFFFFFFF8];
    }
    do
      *v22++ = v69[1];
    while (v22 != v16);
LABEL_30:
    v64 += v21;
LABEL_51:
    unint64_t v17 = v11;
    goto LABEL_52;
  }
  unint64_t v17 = v11;
LABEL_60:
  write(v2, v17, v12 - (char *)v17);
  write(v2, *(const void **)(v3 + 40), *(void *)(v3 + 48) - *(void *)(v3 + 40));
  unint64_t v47 = *(void **)(v3 + 72);
  if (v47 != (void *)(v3 + 80))
  {
    do
    {
      v69[1] = (*((unsigned __int8 *)v47 + 32) << *(_DWORD *)(v3 + 96)) + *((_DWORD *)v47 + 7);
      write(v2, &v69[1], 4uLL);
      uint64_t v55 = (void *)v47[1];
      if (v55)
      {
        do
        {
          uint64_t v56 = v55;
          uint64_t v55 = (void *)*v55;
        }
        while (v55);
      }
      else
      {
        do
        {
          uint64_t v56 = (void *)v47[2];
          BOOL v10 = *v56 == (void)v47;
          unint64_t v47 = v56;
        }
        while (!v10);
      }
      unint64_t v47 = v56;
    }
    while (v56 != (void *)(v3 + 80));
  }
  uint64_t v48 = 0;
  if ((v2 & 0x80000000) == 0)
  {
    uint64_t v49 = *(void *)(v3 + 8);
    if (!*(void *)(v49 + 2084))
    {
      off_t v50 = (lseek(v2, 0, 2) + *MEMORY[0x1E4F14B00] - 1) & -*MEMORY[0x1E4F14B00];
      LODWORD(v70) = 0;
      *(void *)&v69[1] = 3394627454;
      *(void *)((char *)&v70 + 4) = *(void *)(v49 + 2064);
      uint64_t v72 = 0;
      uint64_t v73 = 0;
      CFIndex v71 = 0;
      int v74 = 0;
      HIDWORD(v70) = *(_DWORD *)(v49 + 2092);
      lseek(v2, v50, 0);
      write(v2, &v69[1], 0x34uLL);
      sub_19E502ED8(v49, v49, v50, v2);
      v69[0] = lseek(v2, 0, 1) - v50;
      pwrite(v2, v69, 4uLL, v50 + 4);
      sub_19E503544((_DWORD *)v49, v50, v2, 0, 1, v69);
      pwrite(v2, v69, 4uLL, v50 + 8);
      lseek(v2, v69[0], 0);
      *(_DWORD *)(v49 + 2064) = 0;
      bzero((void *)v49, 0x810uLL);
      size_t v51 = v69[0];
      uint64_t v52 = mmap(0, v69[0], 1, 1, v2, v50);
      uint64_t v53 = v52;
      if (v52 == (_DWORD *)-1) {
        goto LABEL_87;
      }
      if (v52 && *v52 == -900339842)
      {
        int64_t v54 = malloc_type_calloc(1uLL, 0x83CuLL, 0x105004056F6A631uLL);
        *(void *)((char *)v54 + 2084) = v53;
        v54[259] = v53[2];
        v54[258] = *(void *)(v53 + 3);
        *(void *)((char *)v54 + 2092) = v53[5];
        *((_DWORD *)v54 + 520) = 1;
      }
      else
      {
        int64_t v54 = 0;
      }
      *(void *)&v69[1] = 0xFFFFFFFF00000003;
      *(void *)&long long v70 = 0;
      *((void *)&v70 + 1) = v49;
      CFIndex v71 = sub_19E4FEC84;
      sub_19E5006BC((uint64_t)v54, 0, 0, 0, (uint64_t)&v69[1]);
      if (v54)
      {
        int v57 = *((_DWORD *)v54 + 520) - 1;
        *((_DWORD *)v54 + 520) = v57;
        if (!v57)
        {
          unsigned int v58 = *(void **)((char *)v54 + 2084);
          if (v58)
          {
            if (*((_DWORD *)v54 + 524)) {
              munmap(v58, v54[259]);
            }
          }
          else
          {
            sub_19E4FEBFC((uint64_t)v54);
          }
          free(v54);
        }
      }
      munmap(v53, v51);
      DWORD1(v67) = v50;
      if (lseek(v2, 0, 0) < 0)
      {
LABEL_87:
        uint64_t v48 = 0;
        unsigned int v59 = __p;
        if (!__p) {
          return v48;
        }
        goto LABEL_85;
      }
      write(v2, &__buf, 0x30uLL);
      uint64_t v48 = 1;
    }
  }
  unsigned int v59 = __p;
  if (__p) {
LABEL_85:
  }
    operator delete(v59);
  return v48;
}

void sub_19E4B866C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E4B8698(uint64_t a1, void *aBlock)
{
  aBlocka = _Block_copy(aBlock);
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  v5[0] = 0xFFFFFFFF00000003;
  v5[1] = 0;
  v5[2] = &aBlocka;
  void v5[3] = sub_19E4B7D70;
  sub_19E5006BC(v3, 0, 0, 0, (uint64_t)v5);
  _Block_release(aBlocka);
}

void sub_19E4B8738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock)
{
}

void sub_19E4B8750(uint64_t a1)
{
  *(void *)a1 = &unk_1EF0BAB20;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    int v3 = *(_DWORD *)(v2 + 2080) - 1;
    *(_DWORD *)(v2 + 2080) = v3;
    if (!v3)
    {
      uint64_t v4 = *(void **)(v2 + 2084);
      if (v4)
      {
        if (*(_DWORD *)(v2 + 2096)) {
          munmap(v4, *(void *)(v2 + 2072));
        }
      }
      else
      {
        sub_19E4FEBFC(v2);
      }
      free((void *)v2);
    }
  }
  sub_19E418864(*(void **)(a1 + 80));
  uint64_t v5 = *(void **)(a1 + 40);
  if (v5)
  {
    *(void *)(a1 + 48) = v5;
    operator delete(v5);
  }
  sub_19E418864(*(void **)(a1 + 24));
  JUMPOUT(0x19F3BDCF0);
}

uint64_t sub_19E4B881C(uint64_t a1)
{
  *(void *)a1 = &unk_1EF0BAB20;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    int v3 = *(_DWORD *)(v2 + 2080) - 1;
    *(_DWORD *)(v2 + 2080) = v3;
    if (!v3)
    {
      uint64_t v4 = *(void **)(v2 + 2084);
      if (v4)
      {
        if (*(_DWORD *)(v2 + 2096)) {
          munmap(v4, *(void *)(v2 + 2072));
        }
      }
      else
      {
        sub_19E4FEBFC(v2);
      }
      free((void *)v2);
    }
  }
  sub_19E418864(*(void **)(a1 + 80));
  uint64_t v5 = *(void **)(a1 + 40);
  if (v5)
  {
    *(void *)(a1 + 48) = v5;
    operator delete(v5);
  }
  sub_19E418864(*(void **)(a1 + 24));
  return a1;
}

uint64_t sub_19E4B88C8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2)
  {
    int v3 = *(_DWORD *)(v2 + 2080) - 1;
    *(_DWORD *)(v2 + 2080) = v3;
    if (!v3)
    {
      uint64_t v4 = *(void **)(v2 + 2084);
      if (v4)
      {
        if (*(_DWORD *)(v2 + 2096)) {
          munmap(v4, *(void *)(v2 + 2072));
        }
      }
      else
      {
        sub_19E4FEBFC(v2);
      }
      free((void *)v2);
    }
  }
  sub_19E418864(*(void **)(a1 + 8));
  return a1;
}

void sub_19E4B8940(uint64_t **a1, unsigned int *a2, uint64_t a3, __n128 a4)
{
  if (a3 == 1)
  {
    uint64_t v6 = a1 + 1;
    uint64_t v5 = a1[1];
    unsigned int v7 = *a2;
    if (v5)
    {
      while (1)
      {
        while (1)
        {
          unsigned int v8 = (uint64_t **)v5;
          unsigned int v9 = *((_DWORD *)v5 + 7);
          if (v7 >= v9) {
            break;
          }
          uint64_t v5 = (uint64_t *)*v5;
          uint64_t v6 = v8;
          if (!*v8) {
            goto LABEL_9;
          }
        }
        if (v9 >= v7) {
          break;
        }
        uint64_t v5 = (uint64_t *)v5[1];
        if (!v5)
        {
          uint64_t v6 = v8 + 1;
          goto LABEL_9;
        }
      }
    }
    else
    {
      unsigned int v8 = a1 + 1;
LABEL_9:
      BOOL v10 = operator new(0x20uLL);
      v10[7] = v7;
      *(void *)BOOL v10 = 0;
      *((void *)v10 + 1) = 0;
      *((void *)v10 + 2) = v8;
      *uint64_t v6 = (uint64_t *)v10;
      uint64_t v11 = (uint64_t *)**a1;
      if (v11)
      {
        *a1 = v11;
        uint64_t v12 = *v6;
      }
      else
      {
        uint64_t v12 = (uint64_t *)v10;
      }
      sub_19E37D324(a1[1], v12);
      a1[2] = (uint64_t *)((char *)a1[2] + 1);
    }
  }
  else
  {
    uint64_t v13 = (uint64_t)a1[3];
    if (!*(void *)(v13 + 2084))
    {
      uint64_t v14 = (4 * a3);
      v17[0] = 0;
      v17[1] = 0;
      int v16 = 0;
      if ((v14 - 1) <= 0x3FE)
      {
        int v15 = 0;
        a4.n128_u32[0] = 1.0;
        sub_19E4FED3C(v13, v13, (uint64_t)a2, v14, 0, 1, (float *)&v15, &v16, a4, v17);
        if (v16 == 2) {
          ++*(_DWORD *)(v13 + 2064);
        }
      }
    }
  }
}

void sub_19E4B8A80(uint64_t a1, CFTypeRef cf)
{
  if (!cf)
  {
    *(unsigned char *)(a1 + 23) = 0;
    *(unsigned char *)a1 = 0;
    return;
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  CFRetain(cf);
  sub_19E40100C(&theArray, cf);
  CFArrayRef v4 = theArray;
  if (theArray)
  {
    CFIndex Count = CFArrayGetCount(theArray);
    CFIndex v6 = Count;
    CFArrayRef v7 = theArray;
    if (theArray)
    {
      CFIndex v8 = CFArrayGetCount(theArray);
      if (!v6)
      {
LABEL_29:
        if (theArray) {
          CFRelease(theArray);
        }
        return;
      }
    }
    else
    {
      CFIndex v8 = 0;
      if (!Count) {
        goto LABEL_29;
      }
    }
    if (v4 == v7 && !v8) {
      goto LABEL_29;
    }
    sub_19E4010C4(&v34, v4, 0);
    unsigned int v9 = v34;
    BOOL v10 = (const void *)MEMORY[0x19F3BCDE0](v34);
    uint64_t v11 = v10;
    if (v10) {
      CFRetain(v10);
    }
    sub_19E372124(&cfa, v11);
    CFStringRef v12 = (const __CFString *)cfa;
    if (!cfa)
    {
LABEL_55:
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x19F3BD790](exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    CFTypeID TypeID = CFStringGetTypeID();
    if (TypeID == CFGetTypeID(v12))
    {
      sub_19E3C6934(&__p, v12);
      unsigned int v14 = v32;
      int v15 = (void **)__p;
    }
    else
    {
      int v15 = 0;
      unsigned int v14 = 0;
      long long __p = 0;
      unsigned __int8 v32 = 0;
    }
    if ((v14 & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = v15;
    }
    if ((v14 & 0x80u) == 0) {
      std::string::size_type v17 = v14;
    }
    else {
      std::string::size_type v17 = v31;
    }
    std::string::append((std::string *)a1, (const std::string::value_type *)p_p, v17);
    if ((char)v32 < 0) {
      operator delete(__p);
    }
    if (cfa) {
      CFRelease(cfa);
    }
    if (v9) {
      CFRelease(v9);
    }
    if (v6 == 1) {
      goto LABEL_29;
    }
    unint64_t v18 = 1;
    while (1)
    {
      if (v4 == v7 && v8 == v18) {
        goto LABEL_29;
      }
      sub_19E4010C4(&v34, v4, v18);
      unint64_t v19 = v34;
      unint64_t v20 = (const void *)MEMORY[0x19F3BCDE0](v34);
      unint64_t v21 = v20;
      if (v20) {
        CFRetain(v20);
      }
      sub_19E372124(&cfa, v21);
      std::string::append((std::string *)a1, ", ", 2uLL);
      CFStringRef v22 = (const __CFString *)cfa;
      if (!cfa) {
        goto LABEL_55;
      }
      CFTypeID v23 = CFStringGetTypeID();
      if (v23 == CFGetTypeID(v22))
      {
        sub_19E3C6934(&__p, v22);
        std::string::size_type v24 = v32;
        unint64_t v25 = (void **)__p;
      }
      else
      {
        unint64_t v25 = 0;
        std::string::size_type v24 = 0;
        long long __p = 0;
        unsigned __int8 v32 = 0;
      }
      unint64_t v26 = (const std::string::value_type *)((v24 & 0x80u) == 0 ? &__p : v25);
      std::string::size_type v27 = (v24 & 0x80u) == 0 ? v24 : v31;
      std::string::append((std::string *)a1, v26, v27);
      if (((char)v32 & 0x80000000) == 0) {
        break;
      }
      operator delete(__p);
      CFTypeRef v28 = cfa;
      if (cfa) {
        goto LABEL_52;
      }
LABEL_53:
      if (v19) {
        CFRelease(v19);
      }
      if (v6 == ++v18) {
        goto LABEL_29;
      }
    }
    CFTypeRef v28 = cfa;
    if (!cfa) {
      goto LABEL_53;
    }
LABEL_52:
    CFRelease(v28);
    goto LABEL_53;
  }
}

void sub_19E4B8D74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, const void *a15, const void *a16, const void *a17)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_19E3C6F1C(&a15);
  sub_19E3C60A8(&a16);
  sub_19E401594(&a17);
  if (*(char *)(v17 + 23) < 0) {
    operator delete(*(void **)v17);
  }
  _Unwind_Resume(a1);
}

void **sub_19E4B8E20(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    int v3 = (char *)a1[1];
    CFArrayRef v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        CFIndex v6 = (const void *)*((void *)v3 - 1);
        v3 -= 8;
        uint64_t v5 = v6;
        if (v6) {
          CFRelease(v5);
        }
      }
      while (v3 != v2);
      CFArrayRef v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_19E4B8E90(CFDictionaryRef theDict, uint64_t *a2, void *a3, int a4, const __CFLocale **a5)
{
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  if (*a2 == v10 && a4 != 0)
  {
    sub_19E513FE4(theDict, *a5, (uint64_t)a2, (uint64_t)a3);
    uint64_t v9 = *a2;
    uint64_t v10 = a2[1];
  }
  if (v9 != v10)
  {
    BOOL v12 = CFDictionaryContainsKey(theDict, (const void *)kLMLanguageModelEnableSearchQueryModelLoadingKey) == 0;
    if (sub_19E513EDC(*a5, v12) != -1) {
      operator new();
    }
    if ((unint64_t)(a2[1] - *a2) >= 0x11 && *a3 != a3[1])
    {
      if (qword_1E945A230 != -1) {
        dispatch_once(&qword_1E945A230, &unk_1EF0BED50);
      }
      uint64_t v13 = qword_1E945A228;
      if (os_log_type_enabled((os_log_t)qword_1E945A228, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_error_impl(&dword_19E36B000, v13, OS_LOG_TYPE_ERROR, "Deltas are not supported for multiple lexicons. Attempting to apply deltas to all provided lexicons...", buf, 2u);
      }
    }
    if (*a2 != a2[1]) {
      operator new();
    }
  }
}

#error "19E4B961C: call analysis failed (funcsize=96)"

os_log_t sub_19E4B9654()
{
  os_log_t result = os_log_create("com.apple.LanguageModeling", "MultilingualDynamicLanguageModel");
  qword_1E945A228 = (uint64_t)result;
  return result;
}

void sub_19E4B9684(int a1, CFDictionaryRef theDict, int a3, const void ****a4)
{
  CFStringRef MutableCopy = CFDictionaryCreateMutableCopy(0, 0, theDict);
  CFMutableDictionaryRef v23 = MutableCopy;
  CFDictionaryRemoveValue(MutableCopy, (const void *)kLMLanguageLocalesKey);
  CFDictionarySetValue(MutableCopy, (const void *)kLMLanguageModelIgnoreSystemLanguageModelsKey, (const void *)*MEMORY[0x1E4F1CFD0]);
  CFIndex v8 = *a4;
  CFArrayRef v7 = a4[1];
  if (v8 != v7)
  {
    do
    {
      CFDictionaryRef v10 = v23;
      CFDictionarySetValue(v23, (const void *)kLMLanguageModelLocaleKey, **v8);
      sub_19E4300A4((uint64_t)cf, v10);
      sub_19E432C84((char **)&__p, cf[0], 20);
      sub_19E432C84((char **)&v18, cf[0], 26);
      sub_19E4B8E90(v10, (uint64_t *)&__p, &v18, a3, (const __CFLocale **)*v8);
      uint64_t v11 = (char *)v18;
      if (v18)
      {
        BOOL v12 = v19;
        uint64_t v13 = v18;
        if (v19 != v18)
        {
          do
          {
            unsigned int v14 = (std::__shared_weak_count *)*((void *)v12 - 1);
            if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
              std::__shared_weak_count::__release_weak(v14);
            }
            v12 -= 16;
          }
          while (v12 != v11);
          uint64_t v13 = v18;
        }
        unint64_t v19 = v11;
        operator delete(v13);
      }
      int v15 = (char *)__p;
      if (__p)
      {
        int v16 = v21;
        uint64_t v9 = __p;
        if (v21 != __p)
        {
          do
          {
            uint64_t v17 = (std::__shared_weak_count *)*((void *)v16 - 1);
            if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
              std::__shared_weak_count::__release_weak(v17);
            }
            v16 -= 16;
          }
          while (v16 != v15);
          uint64_t v9 = __p;
        }
        unint64_t v21 = v15;
        operator delete(v9);
      }
      sub_19E3D7458((uint64_t)cf);
      v8 += 2;
    }
    while (v8 != v7);
    CFStringRef MutableCopy = v23;
  }
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
}

void sub_19E4B98B0(_Unwind_Exception *a1)
{
  sub_19E410F30((const void **)(v1 - 88));
  _Unwind_Resume(a1);
}

uint64_t sub_19E4B98FC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  int v10 = a3;
  unsigned __int8 v9 = 0;
  CFArrayRef v7 = operator new(0x28uLL);
  void *v7 = &unk_1EF0B55B0;
  v7[1] = a4;
  v7[2] = &v10;
  void v7[3] = a2;
  v7[4] = &v9;
  BOOL v12 = v7;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)a2 + 48))(a2, a1, v11);
  if (v12 == v11)
  {
    (*(void (**)(void *))(v11[0] + 32))(v11);
  }
  else if (v12)
  {
    (*(void (**)(void))(*v12 + 40))();
  }
  return v9;
}

void sub_19E4B9A3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E414850((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_19E4B9A50()
{
  return &unk_1EF0B4C58;
}

uint64_t sub_19E4B9A5C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN2LM38enumerateSortkeyEquivalentsFromLexiconERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9al"
                     "locatorIcEEEERKNS_7LexiconENS_13SourceLexiconERKNS0_8functionIFvPK10__CFStringjdSC_PK10__CFLocaleRbEEEE3$_0"
    || ((v3 & (unint64_t)"ZN2LM38enumerateSortkeyEquivalentsFromLexiconERKNSt3__112basic_stringIcNS0_11char_traits"
                                "IcEENS0_9allocatorIcEEEERKNS_7LexiconENS_13SourceLexiconERKNS0_8functionIFvPK10__CFStrin"
                                "gjdSC_PK10__CFLocaleRbEEEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN2LM38enumerateSortkeyEquivalentsFromLexiconERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERKNS_7LexiconENS_13SourceLexiconERKNS0_8functionIFvPK10__CFStringjdSC_PK10__CFLocaleRbEEEE3$_0")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN2LM38enumerateSortkeyEquivalentsFromLexiconERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEERKNS_7LexiconENS_13SourceLexiconERKNS0_8functionIFvPK10__CFStringjdSC_PK10__CFLocaleRbEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_19E4B9AB4(uint64_t a1, uint64_t *a2, int *a3, uint64_t *a4, unsigned char *a5)
{
  uint64_t v7 = *a2;
  int v8 = *a3;
  uint64_t v9 = *a4;
  uint64_t v10 = *(void *)(a1 + 8);
  int v11 = **(_DWORD **)(a1 + 16);
  uint64_t v12 = (*(uint64_t (**)(void))(**(void **)(a1 + 24) + 64))(*(void *)(a1 + 24));
  uint64_t v19 = v7;
  int v18 = v8;
  uint64_t v17 = v9;
  int v16 = v11;
  uint64_t v15 = v12;
  uint64_t v13 = *(void *)(v10 + 24);
  if (!v13) {
    sub_19E3ACB9C();
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, int *, uint64_t *, int *, uint64_t *, unsigned char *))(*(void *)v13 + 48))(v13, &v19, &v18, &v17, &v16, &v15, a5);
  **(unsigned char **)(a1 + 32) = *a5;
  return result;
}

__n128 sub_19E4B9BA4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF0B55B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + ++*(_DWORD *)(result + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 sub_19E4B9BD4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1EF0B55B0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + ++*(_DWORD *)(result + 24) = result;
  return result;
}

void sub_19E4B9C28()
{
}

BOOL sub_19E4B9C40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a2 == a3) {
    return 0;
  }
  uint64_t v7 = a2 + 8;
  do
  {
    uint64_t v8 = *(void *)(v7 - 8);
    int v13 = 0;
    char v12 = 0;
    uint64_t v9 = operator new(0x28uLL);
    void *v9 = &unk_1EF0B55B0;
    v9[1] = a4;
    v9[2] = &v13;
    v9[3] = v8;
    v9[4] = &v12;
    uint64_t v15 = v9;
    (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v8 + 48))(v8, a1, v14);
    if (v15 == v14)
    {
      (*(void (**)(void *))(v14[0] + 32))(v14);
    }
    else if (v15)
    {
      (*(void (**)(void))(*v15 + 40))();
    }
    BOOL result = v12 != 0;
    if (v12) {
      break;
    }
    BOOL v11 = v7 == a3;
    v7 += 8;
  }
  while (!v11);
  return result;
}

void sub_19E4B9DC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13)
{
  if (a13 == &a10)
  {
    (*(void (**)(uint64_t *))(a10 + 32))(&a10);
    _Unwind_Resume(exception_object);
  }
  if (a13)
  {
    (*(void (**)(void))(*a13 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_19E4B9E40(void *a1, uint64_t a2)
{
  uint64_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = sub_19E37BDA4((uint64_t)&v25, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (v7)
  {
    unint64_t v8 = v6;
    uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v10 = v6;
      if (v6 >= *(void *)&v7) {
        unint64_t v10 = v6 % *(void *)&v7;
      }
    }
    else
    {
      unint64_t v10 = (*(void *)&v7 - 1) & v6;
    }
    BOOL v11 = *(uint64_t ***)(*a1 + 8 * v10);
    if (v11)
    {
      char v12 = *v11;
      if (*v11)
      {
        char v13 = v2[23];
        if (v13 >= 0) {
          uint64_t v14 = v2[23];
        }
        else {
          uint64_t v14 = *((void *)v2 + 1);
        }
        if (v13 < 0) {
          uint64_t v2 = *(unsigned char **)v2;
        }
        if (v9.u32[0] < 2uLL)
        {
          uint64_t v15 = *(void *)&v7 - 1;
          while (1)
          {
            uint64_t v21 = v12[1];
            if (v8 == v21)
            {
              uint64_t v22 = *((unsigned __int8 *)v12 + 39);
              if ((v22 & 0x80u) == 0) {
                uint64_t v23 = *((unsigned __int8 *)v12 + 39);
              }
              else {
                uint64_t v23 = v12[3];
              }
              if (v23 == v14)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v12[2], v2, v12[3])) {
                    return v12;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v12 + 39)) {
                    return v12;
                  }
                  uint64_t v24 = 0;
                  while (*((unsigned __int8 *)v12 + v24 + 16) == v2[v24])
                  {
                    if (v22 == ++v24) {
                      return v12;
                    }
                  }
                }
              }
            }
            else if ((v21 & v15) != v10)
            {
              return 0;
            }
            BOOL result = 0;
            char v12 = (uint64_t *)*v12;
            if (!v12) {
              return result;
            }
          }
        }
        while (1)
        {
          unint64_t v17 = v12[1];
          if (v8 == v17)
          {
            uint64_t v18 = *((unsigned __int8 *)v12 + 39);
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = *((unsigned __int8 *)v12 + 39);
            }
            else {
              uint64_t v19 = v12[3];
            }
            if (v19 == v14)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v12[2], v2, v12[3])) {
                  return v12;
                }
              }
              else
              {
                if (!*((unsigned char *)v12 + 39)) {
                  return v12;
                }
                uint64_t v20 = 0;
                while (*((unsigned __int8 *)v12 + v20 + 16) == v2[v20])
                {
                  if (v18 == ++v20) {
                    return v12;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= *(void *)&v7) {
              v17 %= *(void *)&v7;
            }
            if (v17 != v10) {
              return 0;
            }
          }
          BOOL result = 0;
          char v12 = (uint64_t *)*v12;
          if (!v12) {
            return result;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t sub_19E4BA040(uint64_t a1, int a2)
{
  if (!a2)
  {
LABEL_52:
    return sub_19E4AA6F8(a1);
  }
  LODWORD(v3) = 0;
  char v4 = 0;
  while (1)
  {
    uint64_t v10 = (int)v3;
    unint64_t v11 = *(unsigned __int8 *)(a1 + 23);
    if (*(char *)(a1 + 23) < 0) {
      break;
    }
    if ((v11 <= (int)v3) | v4 & 1) {
      goto LABEL_51;
    }
    LODWORD(v3) = v3 + 1;
    unsigned int v9 = *(unsigned __int8 *)(a1 + v10);
    if (*(char *)(a1 + v10) < 0)
    {
      unint64_t v12 = *(unsigned __int8 *)(a1 + 23);
LABEL_18:
      uint64_t v13 = (int)v3;
      if (v12 == (int)v3)
      {
        char v4 = 1;
      }
      else if (v9 < 0xE0)
      {
        if (v9 >= 0xC2)
        {
          int v5 = v9 & 0x1F;
          uint64_t v6 = *(void *)a1;
          goto LABEL_5;
        }
        char v4 = 1;
      }
      else if (v9 > 0xEF)
      {
        if (v9 > 0xF4)
        {
          char v4 = 1;
        }
        else
        {
          uint64_t v6 = *(void *)a1;
          if ((v11 & 0x80u) == 0) {
            uint64_t v17 = a1;
          }
          else {
            uint64_t v17 = *(void *)a1;
          }
          unint64_t v18 = *(unsigned __int8 *)(v17 + (int)v3);
          if ((byte_19E57CD41[v18 >> 4] >> (v9 + 16)))
          {
            uint64_t v3 = v10 + 2;
            if ((v11 & 0x80) != 0)
            {
              uint64_t v19 = *(void *)a1;
              if (*(void *)(a1 + 8) == v3)
              {
                char v4 = 1;
              }
              else
              {
LABEL_35:
                unsigned int v16 = *(unsigned __int8 *)(v19 + v3) ^ 0x80;
                if (v16 <= 0x3F)
                {
                  int v14 = v18 & 0x3F | ((v9 - 240) << 6);
                  goto LABEL_37;
                }
                char v4 = 1;
              }
            }
            else
            {
              uint64_t v19 = a1;
              if (v11 != v3) {
                goto LABEL_35;
              }
              char v4 = 1;
            }
          }
          else
          {
            char v4 = 1;
          }
        }
      }
      else
      {
        int v14 = v9 & 0xF;
        uint64_t v6 = *(void *)a1;
        if ((v11 & 0x80u) == 0) {
          uint64_t v15 = a1;
        }
        else {
          uint64_t v15 = *(void *)a1;
        }
        if ((a00000000000000[v9 & 0xF] >> (*(unsigned char *)(v15 + (int)v3) >> 5)))
        {
          unsigned int v16 = *(unsigned char *)(v15 + (int)v3) & 0x3F;
LABEL_37:
          LODWORD(v3) = v3 + 1;
          uint64_t v13 = (int)v3;
          if ((v11 & 0x80u) == 0) {
            uint64_t v20 = *(unsigned __int8 *)(a1 + 23);
          }
          else {
            uint64_t v20 = *(void *)(a1 + 8);
          }
          if (v20 == (int)v3)
          {
            char v4 = 1;
          }
          else
          {
            int v5 = v16 | (v14 << 6);
LABEL_5:
            if ((v11 & 0x80u) == 0) {
              uint64_t v7 = a1;
            }
            else {
              uint64_t v7 = v6;
            }
            unsigned int v8 = *(unsigned __int8 *)(v7 + v13) ^ 0x80;
            if (v8 <= 0x3F)
            {
              unsigned int v9 = v8 | (v5 << 6);
              LODWORD(v3) = v3 + 1;
              goto LABEL_10;
            }
            char v4 = 1;
          }
        }
        else
        {
          char v4 = 1;
        }
      }
    }
    else
    {
LABEL_10:
      if (((1 << u_charType(v9)) & 0xE00) == 0) {
        char v4 = 1;
      }
    }
  }
  unint64_t v12 = *(void *)(a1 + 8);
  if (!((v12 <= (int)v3) | v4 & 1))
  {
    LODWORD(v3) = v3 + 1;
    unsigned int v9 = *(unsigned __int8 *)(*(void *)a1 + v10);
    if ((*(char *)(*(void *)a1 + v10) & 0x80000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_18;
  }
LABEL_51:
  if (v4) {
    goto LABEL_52;
  }
  return 3;
}

uint64_t sub_19E4BA2A4(const __CFString *a1, int *a2, uint64_t a3, uint64_t a4, const void *a5, const void *a6)
{
  unsigned int v87 = a2;
  CFStringRef theString = a1;
  uint64_t v86 = a3;
  int v85 = 0;
  if (!a2) {
    unsigned int v87 = &v85;
  }
  uint64_t v10 = *(int8x8_t ***)(a3 + 560);
  unint64_t v11 = *(std::__shared_weak_count **)(a3 + 568);
  v83[3] = v10;
  uint64_t v84 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v12 = ((uint64_t (*)(int8x8_t **, const __CFString *, void))(*v10)[2])(v10, a1, 0);
  int *v87 = v12;
  if (v12)
  {
LABEL_6:
    char v13 = 0;
    goto LABEL_7;
  }
  sub_19E4B5EC4(&v93, v86 + 616);
  uint64_t v17 = v93;
  unsigned int v16 = (void *)v94;
  if (v93 == (void *)v94) {
    goto LABEL_15;
  }
  do
  {
    int v18 = (*(uint64_t (**)(void, CFStringRef, void))(*(void *)*v17 + 16))(*v17, theString, 0);
    int *v87 = v18;
    if (v18)
    {
      uint64_t v22 = (char *)v93;
      if (v93)
      {
        uint64_t v23 = (char *)v94;
        uint64_t v24 = v93;
        if ((void *)v94 != v93)
        {
          do
          {
            char v25 = (std::__shared_weak_count *)*((void *)v23 - 1);
            if (v25 && !atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
            {
              ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
              std::__shared_weak_count::__release_weak(v25);
            }
            v23 -= 16;
          }
          while (v23 != v22);
          uint64_t v24 = v93;
        }
        uint64_t v94 = (uint64_t)v22;
LABEL_55:
        operator delete(v24);
      }
      goto LABEL_6;
    }
    v17 += 2;
  }
  while (v17 != v16);
  uint64_t v17 = v93;
LABEL_15:
  if (v17)
  {
    uint64_t v19 = (void *)v94;
    uint64_t v20 = v17;
    if ((void *)v94 != v17)
    {
      do
      {
        uint64_t v21 = (std::__shared_weak_count *)*(v19 - 1);
        if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
        v19 -= 2;
      }
      while (v19 != v17);
      uint64_t v20 = v93;
    }
    uint64_t v94 = (uint64_t)v17;
    operator delete(v20);
  }
  v83[0] = (int8x8_t **)&v86;
  v83[1] = (int8x8_t **)&theString;
  v83[2] = (int8x8_t **)&v87;
  if (!a6) {
    goto LABEL_46;
  }
  sub_19E4B5EC4(&v93, v86 + 616);
  std::string::size_type v27 = (char *)v93;
  unint64_t v26 = (char *)v94;
  unint64_t v28 = v94 - (void)v93;
  if (!v93)
  {
    if (v28 >= 0x11) {
      goto LABEL_41;
    }
    goto LABEL_46;
  }
  if ((void *)v94 != v93)
  {
    do
    {
      unint64_t v29 = (std::__shared_weak_count *)*((void *)v26 - 1);
      if (v29 && !atomic_fetch_add(&v29->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
      v26 -= 16;
    }
    while (v26 != v27);
    unint64_t v26 = (char *)v93;
  }
  uint64_t v94 = (uint64_t)v27;
  operator delete(v26);
  if (v28 <= 0x10)
  {
LABEL_46:
    double v35 = *(void ***)a4;
    uint64_t v36 = *(void ***)(a4 + 8);
    if (*(void ***)a4 != v36)
    {
      while (1)
      {
        unint64_t v37 = *v35;
        CFStringRef v38 = theString;
        CFIndex Length = CFStringGetLength(theString);
        if (!*v37) {
          break;
        }
        v80[0] = 0;
        v80[1] = v80;
        v81[0] = (void *)0x2000000000;
        LOBYTE(v81[1]) = 1;
        unsigned int v93 = (void *)MEMORY[0x1E4F143A8];
        uint64_t v94 = 0x40000000;
        int v95 = sub_19E429CC4;
        uint64_t v96 = &unk_1E599F770;
        int v97 = v80;
        unsigned int v98 = v37;
        sub_19E3C2AB0(v38, 0, Length, (uint64_t)&v93);
        int v40 = *((unsigned __int8 *)v80[1] + 24);
        _Block_object_dispose(v80, 8);
        if (v40) {
          break;
        }
        if (++v35 == v36)
        {
          sub_19E4B8A80((uint64_t)&v93, a5);
          if ((SHIBYTE(v95) & 0x80000000) == 0) {
            goto LABEL_6;
          }
          uint64_t v24 = v93;
          goto LABEL_55;
        }
      }
    }
    HIBYTE(v95) = 0;
    LOBYTE(v93) = 0;
    char v13 = sub_19E4BAE68(v83, (uint64_t)&v93);
    goto LABEL_7;
  }
LABEL_41:
  *(_OWORD *)int v80 = 0u;
  *(_OWORD *)uint64_t v81 = 0u;
  int v82 = 1065353216;
  CFRetain(a6);
  sub_19E40100C(&theArray, a6);
  CFArrayRef v30 = theArray;
  if (theArray)
  {
    CFIndex Count = CFArrayGetCount(theArray);
    CFIndex v32 = Count;
    CFArrayRef v33 = theArray;
    if (theArray)
    {
      CFIndex v34 = CFArrayGetCount(theArray);
      if (!v32) {
        goto LABEL_71;
      }
LABEL_57:
      if (v30 == v33)
      {
        unint64_t v41 = 0;
        do
        {
          if (v34 == v41) {
            break;
          }
          sub_19E4010C4(__p, v30, v41);
          long long v42 = __p[0];
          sub_19E4BAD54(&v93, (uint64_t)__p[0]);
          sub_19E3F0170((uint64_t)v80, (uint64_t)&v93, (uint64_t)&v93);
          if (SHIBYTE(v95) < 0) {
            operator delete(v93);
          }
          if (v42) {
            CFRelease(v42);
          }
          ++v41;
        }
        while (v32 != v41);
      }
      else
      {
        unint64_t v43 = 0;
        do
        {
          sub_19E4010C4(__p, v30, v43);
          unsigned int v44 = __p[0];
          sub_19E4BAD54(&v93, (uint64_t)__p[0]);
          sub_19E3F0170((uint64_t)v80, (uint64_t)&v93, (uint64_t)&v93);
          if (SHIBYTE(v95) < 0) {
            operator delete(v93);
          }
          if (v44) {
            CFRelease(v44);
          }
          ++v43;
        }
        while (v32 != v43);
      }
    }
    else
    {
      CFIndex v34 = 0;
      if (Count) {
        goto LABEL_57;
      }
    }
LABEL_71:
    if (theArray) {
      CFRelease(theArray);
    }
  }
  CFArrayRef v45 = *(void ***)a4;
  CFIndex v77 = *(void ***)(a4 + 8);
  if (*(void ***)a4 == v77)
  {
    uint64_t v46 = 0;
    goto LABEL_131;
  }
  uint64_t v46 = 0;
  unint64_t v47 = 0;
  uint64_t v48 = 0;
  char v13 = 0;
  int v76 = 0;
  do
  {
    uint64_t v49 = *v45;
    sub_19E4BAD54(__p, (*v45)[2]);
    if (sub_19E4B9E40(v80, (uint64_t)__p))
    {
      CFStringRef v50 = theString;
      CFIndex v51 = CFStringGetLength(theString);
      if (*v49)
      {
        CFArrayRef theArray = 0;
        p_CFArrayRef theArray = &theArray;
        uint64_t v91 = 0x2000000000;
        char v92 = 1;
        unsigned int v93 = (void *)MEMORY[0x1E4F143A8];
        uint64_t v94 = 0x40000000;
        int v95 = sub_19E429CC4;
        uint64_t v96 = &unk_1E599F770;
        int v97 = &theArray;
        unsigned int v98 = v49;
        sub_19E3C2AB0(v50, 0, v51, (uint64_t)&v93);
        int v52 = *((unsigned __int8 *)p_theArray + 24);
        _Block_object_dispose(&theArray, 8);
        if (!v52) {
          goto LABEL_82;
        }
      }
      if (sub_19E4BAE68(v83, (uint64_t)__p))
      {
        int v53 = 1;
        char v13 = 1;
        if (v79 < 0) {
          goto LABEL_86;
        }
      }
      else
      {
LABEL_82:
        int v53 = 0;
        if (v79 < 0) {
          goto LABEL_86;
        }
      }
      goto LABEL_87;
    }
    if (v48 < v47)
    {
      *(void *)uint64_t v48 = v49;
      v48 += 8;
      int v53 = 7;
      int v76 = v48;
      if (v79 < 0) {
        goto LABEL_86;
      }
      goto LABEL_87;
    }
    uint64_t v54 = (v48 - v46) >> 3;
    unint64_t v55 = v54 + 1;
    if ((unint64_t)(v54 + 1) >> 61) {
      sub_19E37C7C4();
    }
    if ((v47 - v46) >> 2 > v55) {
      unint64_t v55 = (v47 - v46) >> 2;
    }
    if ((unint64_t)(v47 - v46) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v56 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v56 = v55;
    }
    if (v56)
    {
      if (v56 >> 61) {
        sub_19E37C2B8();
      }
      int v57 = operator new(8 * v56);
    }
    else
    {
      int v57 = 0;
    }
    unsigned int v58 = &v57[8 * v54];
    *(void *)unsigned int v58 = v49;
    int v76 = v58 + 8;
    if (v48 != v46)
    {
      unint64_t v59 = v48 - 8 - v46;
      if (v59 < 0x168)
      {
        int v60 = v48;
        goto LABEL_103;
      }
      if (&v57[v48 - v46 - 8 - (v59 & 0xFFFFFFFFFFFFFFF8)] > &v57[v48 - v46 - 8])
      {
        int v60 = v48;
        do
        {
LABEL_103:
          uint64_t v61 = *((void *)v60 - 1);
          v60 -= 8;
          *((void *)v58 - 1) = v61;
          v58 -= 8;
        }
        while (v60 != v46);
        goto LABEL_104;
      }
      if (&v48[-(v59 & 0xFFFFFFFFFFFFFFF8) - 8] > v48 - 8)
      {
        int v60 = v48;
        goto LABEL_103;
      }
      if ((unint64_t)(v46 - v57) < 0x20)
      {
        int v60 = v48;
        goto LABEL_103;
      }
      uint64_t v62 = (v59 >> 3) + 1;
      int v60 = &v48[-8 * (v62 & 0x3FFFFFFFFFFFFFFCLL)];
      int v63 = &v57[8 * v54 - 16];
      uint64_t v64 = v48 - 16;
      uint64_t v65 = v62 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v66 = *(_OWORD *)v64;
        *(v63 - 1) = *((_OWORD *)v64 - 1);
        *int v63 = v66;
        v63 -= 2;
        v64 -= 32;
        v65 -= 4;
      }
      while (v65);
      v58 -= 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
      if (v62 != (v62 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_103;
      }
    }
LABEL_104:
    unint64_t v47 = &v57[8 * v56];
    if (v46) {
      operator delete(v46);
    }
    int v53 = 7;
    uint64_t v46 = v58;
    uint64_t v48 = v76;
    if (v79 < 0) {
LABEL_86:
    }
      operator delete(__p[0]);
LABEL_87:
    if (v53 != 7 && v53) {
      goto LABEL_132;
    }
    ++v45;
  }
  while (v45 != v77);
  if (v46 != v76)
  {
    for (uint64_t i = v46; i != v76; i += 8)
    {
      uint64_t v68 = *(void **)i;
      sub_19E4BAD54(__p, *(void *)(*(void *)i + 16));
      CFStringRef v69 = theString;
      CFIndex v70 = CFStringGetLength(theString);
      if (*v68)
      {
        CFArrayRef theArray = 0;
        p_CFArrayRef theArray = &theArray;
        uint64_t v91 = 0x2000000000;
        char v92 = 1;
        unsigned int v93 = (void *)MEMORY[0x1E4F143A8];
        uint64_t v94 = 0x40000000;
        int v95 = sub_19E429CC4;
        uint64_t v96 = &unk_1E599F770;
        int v97 = &theArray;
        unsigned int v98 = v68;
        sub_19E3C2AB0(v69, 0, v70, (uint64_t)&v93);
        int v71 = *((unsigned __int8 *)p_theArray + 24);
        _Block_object_dispose(&theArray, 8);
        if (!v71) {
          goto LABEL_125;
        }
      }
      if (sub_19E4BAE68(v83, (uint64_t)__p))
      {
        char v72 = 0;
        char v13 = 1;
        if (v79 < 0) {
          goto LABEL_126;
        }
      }
      else
      {
LABEL_125:
        char v72 = 1;
        if (v79 < 0) {
LABEL_126:
        }
          operator delete(__p[0]);
      }
      if ((v72 & 1) == 0) {
        goto LABEL_132;
      }
    }
  }
LABEL_131:
  char v13 = 0;
LABEL_132:
  uint64_t v73 = (void **)v81[0];
  if (v81[0])
  {
    do
    {
      unsigned int v75 = (void **)*v73;
      if (*((char *)v73 + 39) < 0) {
        operator delete(v73[2]);
      }
      operator delete(v73);
      uint64_t v73 = v75;
    }
    while (v75);
  }
  int v74 = v80[0];
  v80[0] = 0;
  if (v74) {
    operator delete(v74);
  }
  if (v46) {
    operator delete(v46);
  }
LABEL_7:
  int v14 = v84;
  if (v84 && !atomic_fetch_add(&v84->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  return v13 & 1;
}

void sub_19E4BAC44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void sub_19E4BAD54(void *a1, uint64_t a2)
{
  uint64_t v3 = (const void *)MEMORY[0x19F3BCDE0](a2);
  if (!v3)
  {
    CFTypeRef cf = 0;
    goto LABEL_8;
  }
  char v4 = v3;
  CFRetain(v3);
  sub_19E372124(&cf, v4);
  CFStringRef v5 = (const __CFString *)cf;
  if (!cf)
  {
LABEL_8:
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3BD790](exception, "Could not construct");
    goto LABEL_10;
  }
  CFTypeID TypeID = CFStringGetTypeID();
  if (TypeID != CFGetTypeID(v5))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3BD790](exception, "Could not convert");
LABEL_10:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  sub_19E3721DC(a1, v5);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_19E4BAE38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  __cxa_free_exception(v10);
  sub_19E3C6F1C(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_19E4BAE68(int8x8_t ***a1, uint64_t a2)
{
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(a2 + 23))
    {
      uint64_t v3 = **a1;
      *(_OWORD *)long long __p = *(_OWORD *)a2;
      uint64_t v36 = *(void *)(a2 + 16);
      goto LABEL_6;
    }
LABEL_15:
    int v12 = **a1;
    uint64_t v13 = (uint64_t)v12[70];
    int v14 = (std::__shared_weak_count *)v12[71];
    if (v14)
    {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    goto LABEL_69;
  }
  unint64_t v4 = *(void *)(a2 + 8);
  if (!v4) {
    goto LABEL_15;
  }
  uint64_t v3 = **a1;
  sub_19E39369C(__p, *(void **)a2, v4);
LABEL_6:
  if (v36 >= 0) {
    CFStringRef v5 = (uint64_t *)__p;
  }
  else {
    CFStringRef v5 = (uint64_t *)__p[0];
  }
  if (v36 >= 0) {
    unint64_t v6 = HIBYTE(v36);
  }
  else {
    unint64_t v6 = (unint64_t)__p[1];
  }
  unint64_t v7 = sub_19E37BDA4((uint64_t)v33, v5, v6);
  int8x8_t v8 = v3[73];
  if (!*(void *)&v8) {
    goto LABEL_66;
  }
  unint64_t v9 = v7;
  uint8x8_t v10 = (uint8x8_t)vcnt_s8(v8);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.u32[0] > 1uLL)
  {
    unint64_t v11 = v7;
    if (v7 >= *(void *)&v8) {
      unint64_t v11 = v7 % *(void *)&v8;
    }
  }
  else
  {
    unint64_t v11 = (*(void *)&v8 - 1) & v7;
  }
  uint64_t v15 = *(uint64_t ***)(*(void *)&v3[72] + 8 * v11);
  if (!v15 || (unsigned int v16 = *v15) == 0)
  {
LABEL_66:
    uint64_t v13 = 0;
    goto LABEL_67;
  }
  if (v36 >= 0) {
    uint64_t v17 = (void *)HIBYTE(v36);
  }
  else {
    uint64_t v17 = __p[1];
  }
  if (v36 >= 0) {
    int v18 = __p;
  }
  else {
    int v18 = (void **)__p[0];
  }
  if (v10.u32[0] < 2uLL)
  {
    uint64_t v19 = *(void *)&v8 - 1;
    while (1)
    {
      uint64_t v24 = v16[1];
      if (v24 == v9)
      {
        uint64_t v25 = *((unsigned __int8 *)v16 + 39);
        if ((v25 & 0x80u) == 0) {
          unint64_t v26 = (void *)*((unsigned __int8 *)v16 + 39);
        }
        else {
          unint64_t v26 = (void *)v16[3];
        }
        if (v26 == v17)
        {
          if ((v25 & 0x80) != 0)
          {
            if (!memcmp((const void *)v16[2], v18, v16[3])) {
              goto LABEL_63;
            }
          }
          else
          {
            if (!*((unsigned char *)v16 + 39)) {
              goto LABEL_63;
            }
            uint64_t v27 = 0;
            while (*((unsigned __int8 *)v16 + v27 + 16) == *((unsigned __int8 *)v18 + v27))
            {
              if (v25 == ++v27) {
                goto LABEL_62;
              }
            }
          }
        }
      }
      else if ((v24 & v19) != v11)
      {
        goto LABEL_66;
      }
      uint64_t v13 = 0;
      unsigned int v16 = (uint64_t *)*v16;
      if (!v16) {
        goto LABEL_67;
      }
    }
  }
  while (1)
  {
    unint64_t v20 = v16[1];
    if (v20 != v9)
    {
      if (v20 >= *(void *)&v8) {
        v20 %= *(void *)&v8;
      }
      if (v20 != v11) {
        goto LABEL_66;
      }
      goto LABEL_31;
    }
    uint64_t v21 = *((unsigned __int8 *)v16 + 39);
    if ((v21 & 0x80u) == 0) {
      uint64_t v22 = (void *)*((unsigned __int8 *)v16 + 39);
    }
    else {
      uint64_t v22 = (void *)v16[3];
    }
    if (v22 != v17) {
      goto LABEL_31;
    }
    if ((v21 & 0x80) != 0) {
      break;
    }
    if (!*((unsigned char *)v16 + 39)) {
      goto LABEL_63;
    }
    uint64_t v23 = 0;
    while (*((unsigned __int8 *)v16 + v23 + 16) == *((unsigned __int8 *)v18 + v23))
    {
      if (v21 == ++v23)
      {
LABEL_62:
        if (!v16) {
          goto LABEL_66;
        }
        goto LABEL_63;
      }
    }
LABEL_31:
    uint64_t v13 = 0;
    unsigned int v16 = (uint64_t *)*v16;
    if (!v16) {
      goto LABEL_67;
    }
  }
  if (memcmp((const void *)v16[2], v18, v16[3])) {
    goto LABEL_31;
  }
LABEL_63:
  uint64_t v13 = v16[5];
  unint64_t v28 = (std::__shared_weak_count *)v16[6];
  if (v28)
  {
    atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
LABEL_67:
  if (SHIBYTE(v36) < 0) {
    operator delete(__p[0]);
  }
LABEL_69:
  sub_19E37774C((const __CFString *)*a1[1], v33);
  uint64_t v29 = (*(uint64_t (**)(uint64_t, void **, void, void))(*(void *)v13 + 128))(v13, v33, 0, *a1[2]);
  uint64_t v30 = v29;
  if (v34 < 0)
  {
    operator delete(v33[0]);
    if (v30)
    {
LABEL_71:
      int8x8_t v31 = (**a1)[68];
      std::mutex::lock((std::mutex *)(*(void *)&v31 + 96));
      *(unsigned char *)(*(void *)&v31 + ++*(_DWORD *)(result + 24) = 1;
      std::mutex::unlock((std::mutex *)(*(void *)&v31 + 96));
    }
  }
  else if (v29)
  {
    goto LABEL_71;
  }
  return v30;
}

void sub_19E4BB210(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E4BB22C(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    unint64_t v6 = 0;
    while (1)
    {
      uint64_t v8 = *(void *)(*(void *)v4 + 128);
      if (!v8) {
        goto LABEL_5;
      }
      unint64_t v9 = a1[2];
      if ((unint64_t)v6 >= v9) {
        break;
      }
      *unint64_t v6 = v8;
      unint64_t v7 = v6 + 1;
LABEL_4:
      a1[1] = v7;
      unint64_t v6 = v7;
LABEL_5:
      v4 += 16;
      if (v4 == a3) {
        return;
      }
    }
    uint8x8_t v10 = (unsigned char *)*a1;
    uint64_t v11 = (uint64_t)v6 - *a1;
    uint64_t v12 = v11 >> 3;
    unint64_t v13 = (v11 >> 3) + 1;
    if (v13 >> 61) {
      sub_19E37C7C4();
    }
    uint64_t v14 = v9 - (void)v10;
    if (v14 >> 2 > v13) {
      unint64_t v13 = v14 >> 2;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15)
    {
      if (v15 >> 61) {
        sub_19E37C2B8();
      }
      unsigned int v16 = operator new(8 * v15);
    }
    else
    {
      unsigned int v16 = 0;
    }
    uint64_t v17 = &v16[8 * v12];
    void *v17 = v8;
    unint64_t v7 = v17 + 1;
    if (v6 == (void *)v10)
    {
      uint8x8_t v10 = v6;
    }
    else
    {
      unint64_t v18 = (char *)(v6 - 1) - v10;
      if (v18 < 0x168)
      {
        uint64_t v19 = v6;
        goto LABEL_21;
      }
      if (&v16[v11 - 8 - (v18 & 0xFFFFFFFFFFFFFFF8)] > &v16[v11 - 8])
      {
        uint64_t v19 = v6;
        goto LABEL_21;
      }
      if ((void *)((char *)v6 - (v18 & 0xFFFFFFFFFFFFFFF8) - 8) > v6 - 1)
      {
        uint64_t v19 = v6;
        goto LABEL_21;
      }
      if ((unint64_t)((char *)v6 - v16 - v11) < 0x20)
      {
        uint64_t v19 = v6;
        goto LABEL_21;
      }
      uint64_t v21 = (v18 >> 3) + 1;
      uint64_t v19 = &v6[-(v21 & 0x3FFFFFFFFFFFFFFCLL)];
      uint64_t v22 = &v16[8 * v12 - 16];
      uint64_t v23 = (long long *)(v6 - 2);
      uint64_t v24 = v21 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v25 = *v23;
        *(v22 - 1) = *(v23 - 1);
        *uint64_t v22 = v25;
        v22 -= 2;
        v23 -= 2;
        v24 -= 4;
      }
      while (v24);
      v17 -= v21 & 0x3FFFFFFFFFFFFFFCLL;
      if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
      {
        do
        {
LABEL_21:
          uint64_t v20 = *--v19;
          *--uint64_t v17 = v20;
        }
        while (v19 != (void *)v10);
        uint8x8_t v10 = (unsigned char *)*a1;
      }
    }
    *a1 = v17;
    a1[1] = v7;
    a1[2] = &v16[8 * v15];
    if (v10) {
      operator delete(v10);
    }
    goto LABEL_4;
  }
}

void sub_19E4BB424(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    *(void *)(v1 + 8) = v2;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E4BB448(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 120);
  if (v2) {
    CFRelease(v2);
  }
  *(unsigned char *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  uint64_t v3 = *(void ***)(a1 + 88);
  if (v3)
  {
    uint64_t v4 = *(void ***)(a1 + 96);
    CFStringRef v5 = *(void **)(a1 + 88);
    if (v4 != v3)
    {
      unint64_t v6 = *(void ***)(a1 + 96);
      do
      {
        unint64_t v9 = (void **)*(v6 - 3);
        v6 -= 3;
        uint64_t v8 = v9;
        if (v9)
        {
          uint8x8_t v10 = (void **)*(v4 - 2);
          unint64_t v7 = v8;
          if (v10 != v8)
          {
            do
            {
              if (*((char *)v10 - 1) < 0) {
                operator delete(*(v10 - 3));
              }
              v10 -= 3;
            }
            while (v10 != v8);
            unint64_t v7 = *v6;
          }
          *(v4 - 2) = v8;
          operator delete(v7);
        }
        uint64_t v4 = v6;
      }
      while (v6 != v3);
      CFStringRef v5 = *(void **)(a1 + 88);
    }
    *(void *)(a1 + 96) = v3;
    operator delete(v5);
  }
  uint64_t v11 = *(void **)(a1 + 64);
  if (v11)
  {
    do
    {
      unint64_t v13 = (void *)*v11;
      uint64_t v14 = (void *)v11[5];
      if (v14)
      {
        do
        {
          unint64_t v15 = (void *)*v14;
          operator delete(v14);
          uint64_t v14 = v15;
        }
        while (v15);
      }
      unsigned int v16 = (void *)v11[3];
      void v11[3] = 0;
      if (v16) {
        operator delete(v16);
      }
      operator delete(v11);
      uint64_t v11 = v13;
    }
    while (v13);
  }
  uint64_t v12 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v12)
  {
    operator delete(v12);
  }
}

void sub_19E4BB588(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0BE418;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19F3BDCF0);
}

void sub_19E4BB5DC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0BE418;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_19E4BB5FC(void *a1, uint64_t a2, void **a3, char **a4)
{
  unint64_t v6 = (unsigned char *)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v9 = v8;
  }
  unint64_t v10 = sub_19E37BDA4((uint64_t)&v89, (uint64_t *)a2, v9);
  int8x8_t v11 = (int8x8_t)a1[1];
  if (!*(void *)&v11) {
    return;
  }
  unint64_t v12 = v10;
  uint8x8_t v13 = (uint8x8_t)vcnt_s8(v11);
  v13.i16[0] = vaddlv_u8(v13);
  if (v13.u32[0] > 1uLL)
  {
    unint64_t v14 = v10;
    if (v10 >= *(void *)&v11) {
      unint64_t v14 = v10 % *(void *)&v11;
    }
  }
  else
  {
    unint64_t v14 = (*(void *)&v11 - 1) & v10;
  }
  unint64_t v15 = *(uint64_t ***)(*a1 + 8 * v14);
  if (!v15) {
    return;
  }
  unsigned int v16 = *v15;
  if (!*v15) {
    return;
  }
  char v17 = v6[23];
  if (v17 >= 0) {
    uint64_t v18 = v6[23];
  }
  else {
    uint64_t v18 = *((void *)v6 + 1);
  }
  if (v17 < 0) {
    unint64_t v6 = *(unsigned char **)v6;
  }
  if (v13.u32[0] < 2uLL)
  {
    uint64_t v19 = *(void *)&v11 - 1;
    while (1)
    {
      uint64_t v24 = v16[1];
      if (v12 == v24)
      {
        uint64_t v25 = *((unsigned __int8 *)v16 + 39);
        if ((v25 & 0x80u) == 0) {
          uint64_t v26 = *((unsigned __int8 *)v16 + 39);
        }
        else {
          uint64_t v26 = v16[3];
        }
        if (v26 == v18)
        {
          if ((v25 & 0x80) != 0)
          {
            if (!memcmp((const void *)v16[2], v6, v16[3])) {
              goto LABEL_51;
            }
          }
          else
          {
            if (!*((unsigned char *)v16 + 39)) {
              goto LABEL_51;
            }
            uint64_t v27 = 0;
            while (*((unsigned __int8 *)v16 + v27 + 16) == v6[v27])
            {
              if (v25 == ++v27) {
                goto LABEL_50;
              }
            }
          }
        }
      }
      else if ((v24 & v19) != v14)
      {
        return;
      }
      unsigned int v16 = (uint64_t *)*v16;
      if (!v16) {
        return;
      }
    }
  }
  while (1)
  {
    unint64_t v20 = v16[1];
    if (v12 != v20)
    {
      if (v20 >= *(void *)&v11) {
        v20 %= *(void *)&v11;
      }
      if (v20 != v14) {
        return;
      }
      goto LABEL_19;
    }
    uint64_t v21 = *((unsigned __int8 *)v16 + 39);
    if ((v21 & 0x80u) == 0) {
      uint64_t v22 = *((unsigned __int8 *)v16 + 39);
    }
    else {
      uint64_t v22 = v16[3];
    }
    if (v22 != v18) {
      goto LABEL_19;
    }
    if ((v21 & 0x80) != 0) {
      break;
    }
    if (!*((unsigned char *)v16 + 39)) {
      goto LABEL_51;
    }
    uint64_t v23 = 0;
    while (*((unsigned __int8 *)v16 + v23 + 16) == v6[v23])
    {
      if (v21 == ++v23)
      {
LABEL_50:
        if (!v16) {
          return;
        }
        goto LABEL_51;
      }
    }
LABEL_19:
    unsigned int v16 = (uint64_t *)*v16;
    if (!v16) {
      return;
    }
  }
  if (memcmp((const void *)v16[2], v6, v16[3])) {
    goto LABEL_19;
  }
LABEL_51:
  unint64_t v28 = (void **)v16[5];
  uint64_t v29 = (void **)v16[6];
  if ((char *)v29 - (char *)v28 >= 1)
  {
    uint64_t v30 = ((char *)v29 - (char *)v28) / 24;
    unint64_t v31 = (unint64_t)a4[1];
    uint64_t v32 = (uint64_t)(v31 - (void)*a4) / 24;
    CFArrayRef v33 = a4[2];
    uint64_t v34 = (uint64_t)&(*a4)[24 * v32];
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v33[-v31] >> 3)) >= v30)
    {
      uint64_t v39 = v31 - v34;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v31 - v34) >> 3)) >= v30)
      {
        int v40 = &v28[3 * v30];
        unint64_t v45 = (unint64_t)a4[1];
      }
      else
      {
        int v40 = &v28[(uint64_t)(v31 - v34) >> 3];
        if (v40 == v29)
        {
          unint64_t v45 = (unint64_t)a4[1];
        }
        else
        {
          uint64_t v41 = 0;
          do
          {
            unint64_t v43 = v31 + v41 * 8;
            unsigned int v44 = &v40[v41];
            if (SHIBYTE(v40[v41 + 2]) < 0)
            {
              sub_19E39369C((unsigned char *)(v31 + v41 * 8), *v44, (unint64_t)v44[1]);
            }
            else
            {
              long long v42 = *(_OWORD *)v44;
              *(void *)(v43 + 16) = v44[2];
              *(_OWORD *)unint64_t v43 = v42;
            }
            v41 += 3;
          }
          while (&v40[v41] != v29);
          unint64_t v45 = v31 + v41 * 8;
          uint64_t v30 = ((char *)v29 - (char *)v28) / 24;
          uint64_t v39 = v31 - v34;
        }
        a4[1] = (char *)v45;
        if (v39 < 1) {
          goto LABEL_103;
        }
      }
      uint64_t v58 = v34 + 24 * v30;
      unint64_t v59 = (long long *)(v45 - 24 * v30);
      unint64_t v60 = v45;
      if ((unint64_t)v59 < v31)
      {
        unint64_t v60 = v45;
        do
        {
          long long v61 = *v59;
          *(void *)(v60 + 16) = *((void *)v59 + 2);
          *(_OWORD *)unint64_t v60 = v61;
          v60 += 24;
          *((void *)v59 + 1) = 0;
          *((void *)v59 + 2) = 0;
          *(void *)unint64_t v59 = 0;
          unint64_t v59 = (long long *)((char *)v59 + 24);
        }
        while ((unint64_t)v59 < v31);
      }
      a4[1] = (char *)v60;
      if (v45 != v58)
      {
        unint64_t v62 = v45 - 24;
        uint64_t v63 = 8 * ((uint64_t)(v45 - v58) >> 3);
        do
        {
          if (*(char *)(v62 + 23) < 0) {
            operator delete(*(void **)v62);
          }
          uint64_t v64 = (long long *)(v34 + v63 - 24);
          long long v65 = *v64;
          *(void *)(v62 + 16) = *(void *)(v34 + v63 - 8);
          *(_OWORD *)unint64_t v62 = v65;
          v62 -= 24;
          *(unsigned char *)(v34 + v63 - 1) = 0;
          *(unsigned char *)uint64_t v64 = 0;
          v63 -= 24;
        }
        while (v63);
      }
      for (; v28 != v40; v34 += 24)
      {
        if (v28 != (void **)v34)
        {
          char v87 = *((unsigned char *)v28 + 23);
          if (*(char *)(v34 + 23) < 0)
          {
            if (v87 >= 0) {
              int v85 = v28;
            }
            else {
              int v85 = *v28;
            }
            if (v87 >= 0) {
              size_t v86 = *((unsigned __int8 *)v28 + 23);
            }
            else {
              size_t v86 = (size_t)v28[1];
            }
            sub_19E3C6D44((void **)v34, v85, v86);
          }
          else if ((*((unsigned char *)v28 + 23) & 0x80) != 0)
          {
            sub_19E3C6C7C((void *)v34, *v28, (size_t)v28[1]);
          }
          else
          {
            long long v88 = *(_OWORD *)v28;
            *(void *)(v34 + 16) = v28[2];
            *(_OWORD *)uint64_t v34 = v88;
          }
        }
        v28 += 3;
      }
      goto LABEL_103;
    }
    if ((unint64_t)(v32 + v30) > 0xAAAAAAAAAAAAAAALL) {
      sub_19E37C7C4();
    }
    unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * ((v33 - *a4) >> 3);
    uint64_t v36 = 2 * v35;
    if (2 * v35 <= v32 + v30) {
      uint64_t v36 = v32 + v30;
    }
    if (v35 >= 0x555555555555555) {
      unint64_t v37 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v37 = v36;
    }
    unsigned int v93 = a4 + 2;
    if (v37)
    {
      if (v37 > 0xAAAAAAAAAAAAAAALL) {
LABEL_138:
      }
        sub_19E37C2B8();
      CFStringRef v38 = (char *)operator new(24 * v37);
    }
    else
    {
      CFStringRef v38 = 0;
    }
    uint64_t v46 = &v38[24 * v32];
    BOOL v89 = v38;
    BOOL v90 = v46;
    uint64_t v91 = v46;
    char v92 = &v38[24 * v37];
    uint64_t v47 = 24 * v30;
    uint64_t v48 = &v46[24 * v30];
    do
    {
      if (*((char *)v28 + 23) < 0)
      {
        sub_19E39369C(v46, *v28, (unint64_t)v28[1]);
      }
      else
      {
        long long v49 = *(_OWORD *)v28;
        *((void *)v46 + 2) = v28[2];
        *(_OWORD *)uint64_t v46 = v49;
      }
      v46 += 24;
      v28 += 3;
      v47 -= 24;
    }
    while (v47);
    CFStringRef v50 = v90;
    CFIndex v51 = *a4;
    if (*a4 == (char *)v34)
    {
      int v53 = v90;
    }
    else
    {
      uint64_t v52 = v34;
      do
      {
        int v53 = v50 - 24;
        long long v54 = *(_OWORD *)(v52 - 24);
        *((void *)v50 - 1) = *(void *)(v52 - 8);
        *(_OWORD *)(v50 - ++*(_DWORD *)(result + 24) = v54;
        *(void *)(v52 - 16) = 0;
        *(void *)(v52 - 8) = 0;
        *(void *)(v52 - ++*(_DWORD *)(result + 24) = 0;
        v50 -= 24;
        v52 -= 24;
      }
      while ((char *)v52 != v51);
    }
    unint64_t v55 = a4[1];
    if (v55 != (char *)v34)
    {
      do
      {
        long long v56 = *(_OWORD *)v34;
        *((void *)v48 + 2) = *(void *)(v34 + 16);
        *(_OWORD *)uint64_t v48 = v56;
        v48 += 24;
        *(void *)(v34 + 8) = 0;
        *(void *)(v34 + 16) = 0;
        *(void *)uint64_t v34 = 0;
        v34 += 24;
      }
      while ((char *)v34 != v55);
      uint64_t v34 = (uint64_t)a4[1];
    }
    int v57 = *a4;
    *a4 = v53;
    a4[1] = v48;
    a4[2] = v92;
    while ((char *)v34 != v57)
    {
      if (*(char *)(v34 - 1) < 0) {
        operator delete(*(void **)(v34 - 24));
      }
      v34 -= 24;
    }
    if (v57) {
      operator delete(v57);
    }
  }
LABEL_103:
  uint64_t v66 = v16[5];
  uint64_t v67 = v16[6];
  if (v66 != v67)
  {
    uint64_t v68 = (char *)a3[1];
    do
    {
      unint64_t v70 = (unint64_t)a3[2];
      if ((unint64_t)v68 < v70)
      {
        *(_OWORD *)uint64_t v68 = xmmword_19E573020;
        *((void *)v68 + 2) = 0;
        *((_WORD *)v68 + 12) = 0;
        v68[32] = 1;
        *(_OWORD *)(v68 + 40) = xmmword_19E572FD0;
        *((_DWORD *)v68 + 14) = 0;
        *((_OWORD *)v68 + 4) = xmmword_19E572FD0;
        *((void *)v68 + 10) = 0xFFEFFFFFFFFFFFFFLL;
        *((void *)v68 + 11) = 0;
        *((void *)v68 + 12) = 0;
        *((void *)v68 + 13) = 0;
        *((_WORD *)v68 + 56) = 0;
        CFStringRef v69 = v68 + 120;
        *((_DWORD *)v68 + 29) = 9;
      }
      else
      {
        int v71 = (char *)*a3;
        unint64_t v72 = 0xEEEEEEEEEEEEEEEFLL * ((v68 - (unsigned char *)*a3) >> 3);
        unint64_t v73 = v72 + 1;
        if (v72 + 1 > 0x222222222222222) {
          sub_19E37C7C4();
        }
        unint64_t v74 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v70 - (void)v71) >> 3);
        if (2 * v74 > v73) {
          unint64_t v73 = 2 * v74;
        }
        if (v74 >= 0x111111111111111) {
          unint64_t v75 = 0x222222222222222;
        }
        else {
          unint64_t v75 = v73;
        }
        if (v75)
        {
          if (v75 > 0x222222222222222) {
            goto LABEL_138;
          }
          int v76 = (char *)operator new(120 * v75);
        }
        else
        {
          int v76 = 0;
        }
        CFIndex v77 = &v76[120 * v72];
        *(_OWORD *)CFIndex v77 = xmmword_19E573020;
        *((void *)v77 + 2) = 0;
        *((_WORD *)v77 + 12) = 0;
        v77[32] = 1;
        *(_OWORD *)(v77 + 40) = xmmword_19E572FD0;
        *((_DWORD *)v77 + 14) = 0;
        *((_OWORD *)v77 + 4) = xmmword_19E572FD0;
        *((void *)v77 + 10) = 0xFFEFFFFFFFFFFFFFLL;
        *((void *)v77 + 11) = 0;
        *((void *)v77 + 12) = 0;
        *((void *)v77 + 13) = 0;
        *((_WORD *)v77 + 56) = 0;
        *((_DWORD *)v77 + 29) = 9;
        uint64_t v78 = v77;
        if (v68 != v71)
        {
          do
          {
            long long v79 = *(_OWORD *)(v68 - 120);
            long long v80 = *(_OWORD *)(v68 - 104);
            long long v81 = *(_OWORD *)(v68 - 88);
            *(_OWORD *)(v78 - 72) = *(_OWORD *)(v68 - 72);
            *(_OWORD *)(v78 - 88) = v81;
            *(_OWORD *)(v78 - 104) = v80;
            *(_OWORD *)(v78 - 120) = v79;
            long long v82 = *(_OWORD *)(v68 - 56);
            long long v83 = *(_OWORD *)(v68 - 40);
            long long v84 = *(_OWORD *)(v68 - 24);
            *((void *)v78 - 1) = *((void *)v68 - 1);
            *(_OWORD *)(v78 - ++*(_DWORD *)(result + 24) = v84;
            *(_OWORD *)(v78 - 40) = v83;
            *(_OWORD *)(v78 - 56) = v82;
            v78 -= 120;
            v68 -= 120;
          }
          while (v68 != v71);
          uint64_t v68 = (char *)*a3;
        }
        CFStringRef v69 = v77 + 120;
        *a3 = v78;
        a3[1] = v77 + 120;
        a3[2] = &v76[120 * v75];
        if (v68) {
          operator delete(v68);
        }
      }
      a3[1] = v69;
      v66 += 24;
      uint64_t v68 = v69;
    }
    while (v66 != v67);
  }
}

void sub_19E4BBDC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_19E3FC410((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_19E4BBDE4()
{
  uint64_t v0 = MEMORY[0x1F4188790]();
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  v333[8] = *MEMORY[0x1E4F143B8];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9459EC0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1E9459EC0))
  {
    sub_19E382340(v132, "hi");
    sub_19E382340(v129, "");
    sub_19E382340(v305, "मैं");
    sub_19E382340(&v307, "वह");
    sub_19E382340(&v309, "आप");
    sub_19E382340(&v311, "क्या");
    sub_19E382340(&v313, "यह");
    sub_19E4923A0(v128, (uint64_t)v305, 5uLL);
    sub_19E4BFD10(v315, (long long *)v129, (long long **)v128);
    sub_19E4BFDA8((uint64_t)v131, (uint64_t)v315, 1);
    sub_19E4BFE24(v316, (long long *)v132, (uint64_t)v131);
    sub_19E382340(v126, "bn");
    sub_19E382340(v123, "");
    sub_19E382340(v294, "আমি");
    sub_19E382340(&v296, "সে");
    sub_19E382340(&v298, "আপনি");
    sub_19E382340(&v300, "কি");
    sub_19E382340(&v302, "এটা");
    sub_19E4923A0(v122, (uint64_t)v294, 5uLL);
    sub_19E4BFD10(v304, (long long *)v123, (long long **)v122);
    sub_19E4BFDA8((uint64_t)v125, (uint64_t)v304, 1);
    sub_19E4BFE24(v317, (long long *)v126, (uint64_t)v125);
    sub_19E382340(v120, "mr");
    sub_19E382340(v117, "");
    sub_19E382340(v283, "मी");
    sub_19E382340(&v285, "ते");
    sub_19E382340(&v287, "आपण");
    sub_19E382340(&v289, "काय");
    sub_19E382340(&v291, "हे");
    sub_19E4923A0(v116, (uint64_t)v283, 5uLL);
    sub_19E4BFD10(v293, (long long *)v117, (long long **)v116);
    sub_19E4BFDA8((uint64_t)v119, (uint64_t)v293, 1);
    sub_19E4BFE24(v318, (long long *)v120, (uint64_t)v119);
    sub_19E382340(v114, "gu");
    sub_19E382340(v111, "");
    sub_19E382340(v272, "હું");
    sub_19E382340(&v274, "તેમણે");
    sub_19E382340(&v276, "શું");
    sub_19E382340(&v278, "મેં");
    sub_19E382340(&v280, "તમે");
    sub_19E4923A0(v110, (uint64_t)v272, 5uLL);
    sub_19E4BFD10(v282, (long long *)v111, (long long **)v110);
    sub_19E4BFDA8((uint64_t)v113, (uint64_t)v282, 1);
    sub_19E4BFE24(v319, (long long *)v114, (uint64_t)v113);
    sub_19E382340(v108, "pa");
    sub_19E382340(v105, "");
    sub_19E382340(v261, "ਮੈਨੂੰ");
    sub_19E382340(&v263, "ਉਹ");
    sub_19E382340(&v265, "ਤੁਸੀ");
    sub_19E382340(&v267, "ਕੀ");
    sub_19E382340(&__p, "ਇਹ");
    sub_19E4923A0(v104, (uint64_t)v261, 5uLL);
    sub_19E4BFD10(v271, (long long *)v105, (long long **)v104);
    sub_19E4BFDA8((uint64_t)v107, (uint64_t)v271, 1);
    sub_19E4BFE24(v320, (long long *)v108, (uint64_t)v107);
    sub_19E382340(v102, "te");
    sub_19E382340(v99, "");
    sub_19E382340(v250, "అతను");
    sub_19E382340(&v252, "మీరు");
    sub_19E382340(&v254, "ఏమిటి");
    sub_19E382340(&v256, "అవి");
    sub_19E382340(&v258, "ఎప్పుడు");
    sub_19E4923A0(v98, (uint64_t)v250, 5uLL);
    sub_19E4BFD10(__dst, (long long *)v99, (long long **)v98);
    sub_19E4BFDA8((uint64_t)v101, (uint64_t)__dst, 1);
    sub_19E4BFE24(v321, (long long *)v102, (uint64_t)v101);
    sub_19E382340(v96, "ta");
    sub_19E382340(v93, "");
    sub_19E382340(v239, "நான்");
    sub_19E382340(&v241, "அவர்");
    sub_19E382340(&v243, "நீங்கள்");
    sub_19E382340(&v245, "என்ன");
    sub_19E382340(&v247, "அது");
    sub_19E4923A0(v92, (uint64_t)v239, 5uLL);
    sub_19E4BFD10(v249, (long long *)v93, (long long **)v92);
    sub_19E4BFDA8((uint64_t)v95, (uint64_t)v249, 1);
    sub_19E4BFE24(v322, (long long *)v96, (uint64_t)v95);
    sub_19E382340(v90, "hi-Latn");
    sub_19E382340(v87, "");
    sub_19E382340(v228, "main");
    sub_19E382340(&v230, "woh");
    sub_19E382340(&v232, "aap");
    sub_19E382340(&v234, "kya");
    sub_19E382340(&v236, "yeh");
    sub_19E4923A0(v86, (uint64_t)v228, 5uLL);
    sub_19E4BFD10(v238, (long long *)v87, (long long **)v86);
    sub_19E4BFDA8((uint64_t)v89, (uint64_t)v238, 1);
    sub_19E4BFE24(v323, (long long *)v90, (uint64_t)v89);
    sub_19E382340(v84, "bn-Latn");
    sub_19E382340(v81, "");
    sub_19E382340(v217, "ami");
    sub_19E382340(&v219, "se");
    sub_19E382340(&v221, "apni");
    sub_19E382340(&v223, "ki");
    sub_19E382340(&v225, "eta");
    sub_19E4923A0(v80, (uint64_t)v217, 5uLL);
    sub_19E4BFD10(v227, (long long *)v81, (long long **)v80);
    sub_19E4BFDA8((uint64_t)v83, (uint64_t)v227, 1);
    sub_19E4BFE24(v324, (long long *)v84, (uint64_t)v83);
    sub_19E382340(v78, "mr-Latn");
    sub_19E382340(v75, "");
    sub_19E382340(v206, "mi");
    sub_19E382340(&v208, "te");
    sub_19E382340(&v210, "aapan");
    sub_19E382340(&v212, "kay");
    sub_19E382340(&v214, "he");
    sub_19E4923A0(v74, (uint64_t)v206, 5uLL);
    sub_19E4BFD10(v216, (long long *)v75, (long long **)v74);
    sub_19E4BFDA8((uint64_t)v77, (uint64_t)v216, 1);
    sub_19E4BFE24(v325, (long long *)v78, (uint64_t)v77);
    sub_19E382340(v72, "gu-Latn");
    sub_19E382340(v69, "");
    sub_19E382340(v195, "hun");
    sub_19E382340(&v197, "temane");
    sub_19E382340(&v199, "su");
    sub_19E382340(&v201, "mein");
    sub_19E382340(&v203, "tamein");
    sub_19E4923A0(v68, (uint64_t)v195, 5uLL);
    sub_19E4BFD10(v205, (long long *)v69, (long long **)v68);
    sub_19E4BFDA8((uint64_t)v71, (uint64_t)v205, 1);
    sub_19E4BFE24(v326, (long long *)v72, (uint64_t)v71);
    sub_19E382340(v66, "pa-Latn");
    sub_19E382340(v63, "");
    sub_19E382340(v184, "mainu");
    sub_19E382340(&v186, "uh");
    sub_19E382340(&v188, "tusi");
    sub_19E382340(&v190, "ki");
    sub_19E382340(&v192, "ih");
    sub_19E4923A0(v62, (uint64_t)v184, 5uLL);
    sub_19E4BFD10(v194, (long long *)v63, (long long **)v62);
    sub_19E4BFDA8((uint64_t)v65, (uint64_t)v194, 1);
    sub_19E4BFE24(v327, (long long *)v66, (uint64_t)v65);
    sub_19E382340(v60, "te-Latn");
    sub_19E382340(v57, "");
    sub_19E382340(v173, "atanu");
    sub_19E382340(&v175, "miru");
    sub_19E382340(&v177, "emiti");
    sub_19E382340(&v179, "avi");
    sub_19E382340(&v181, "eppudu");
    sub_19E4923A0(v56, (uint64_t)v173, 5uLL);
    sub_19E4BFD10(v183, (long long *)v57, (long long **)v56);
    sub_19E4BFDA8((uint64_t)v59, (uint64_t)v183, 1);
    sub_19E4BFE24(v328, (long long *)v60, (uint64_t)v59);
    sub_19E382340(v54, "ta-Latn");
    sub_19E382340(v51, "");
    sub_19E382340(v162, "nan");
    sub_19E382340(&v164, "avar");
    sub_19E382340(&v166, "ninkal");
    sub_19E382340(&v168, "enna");
    sub_19E382340(&v170, "atu");
    sub_19E4923A0(v50, (uint64_t)v162, 5uLL);
    sub_19E4BFD10(v172, (long long *)v51, (long long **)v50);
    sub_19E4BFDA8((uint64_t)v53, (uint64_t)v172, 1);
    sub_19E4BFE24(v329, (long long *)v54, (uint64_t)v53);
    sub_19E382340(v48, "cs_CZ");
    sub_19E382340(v45, "");
    sub_19E382340(v155, "čau");
    sub_19E382340(&v157, "já");
    sub_19E382340(&v159, "jsem");
    sub_19E4923A0(v44, (uint64_t)v155, 3uLL);
    sub_19E4BFD10(v161, (long long *)v45, (long long **)v44);
    sub_19E4BFDA8((uint64_t)v47, (uint64_t)v161, 1);
    sub_19E4BFE24(v330, (long long *)v48, (uint64_t)v47);
    sub_19E382340(v42, "sl_SI");
    sub_19E382340(v39, "");
    sub_19E382340(v148, "ja");
    sub_19E382340(&v150, "ne");
    sub_19E382340(&v152, "v");
    sub_19E4923A0(v38, (uint64_t)v148, 3uLL);
    sub_19E4BFD10(v154, (long long *)v39, (long long **)v38);
    sub_19E4BFDA8((uint64_t)v41, (uint64_t)v154, 1);
    sub_19E4BFE24(v331, (long long *)v42, (uint64_t)v41);
    sub_19E382340(v36, "lt_LT");
    sub_19E382340(v33, "");
    sub_19E382340(v141, "aš");
    sub_19E382340(&v143, "man");
    sub_19E382340(&v145, "tu");
    sub_19E4923A0(v32, (uint64_t)v141, 3uLL);
    sub_19E4BFD10(v147, (long long *)v33, (long long **)v32);
    sub_19E4BFDA8((uint64_t)v35, (uint64_t)v147, 1);
    sub_19E4BFE24(v332, (long long *)v36, (uint64_t)v35);
    sub_19E382340(v30, "id_ID");
    sub_19E382340(v27, "");
    sub_19E382340(v134, "aku");
    sub_19E382340(&v136, "saya");
    sub_19E382340(&v138, "itu");
    sub_19E4923A0(v26, (uint64_t)v134, 3uLL);
    sub_19E4BFD10(v140, (long long *)v27, (long long **)v26);
    sub_19E4BFDA8((uint64_t)v29, (uint64_t)v140, 1);
    sub_19E4BFE24(v333, (long long *)v30, (uint64_t)v29);
    sub_19E4BFEA0((unsigned __int8 *)v316, 18);
    sub_19E4C03A0((uint64_t)v333);
    sub_19E4C03A0((uint64_t)v332);
    sub_19E4C03A0((uint64_t)v331);
    sub_19E4C03A0((uint64_t)v330);
    sub_19E4C03A0((uint64_t)v329);
    sub_19E4C03A0((uint64_t)v328);
    sub_19E4C03A0((uint64_t)v327);
    sub_19E4C03A0((uint64_t)v326);
    sub_19E4C03A0((uint64_t)v325);
    sub_19E4C03A0((uint64_t)v324);
    sub_19E4C03A0((uint64_t)v323);
    sub_19E4C03A0((uint64_t)v322);
    sub_19E4C03A0((uint64_t)v321);
    sub_19E4C03A0((uint64_t)v320);
    sub_19E4C03A0((uint64_t)v319);
    sub_19E4C03A0((uint64_t)v318);
    sub_19E4C03A0((uint64_t)v317);
    sub_19E4C03A0((uint64_t)v316);
    sub_19E3FFB5C((uint64_t)v29);
    sub_19E4C03DC((uint64_t)v140);
    sub_19E3EB09C(v26);
    if (v139 < 0)
    {
      operator delete(v138);
      if ((v137 & 0x80000000) == 0)
      {
LABEL_60:
        if ((v135 & 0x80000000) == 0) {
          goto LABEL_61;
        }
        goto LABEL_199;
      }
    }
    else if ((v137 & 0x80000000) == 0)
    {
      goto LABEL_60;
    }
    operator delete(v136);
    if ((v135 & 0x80000000) == 0)
    {
LABEL_61:
      if ((v28 & 0x80000000) == 0) {
        goto LABEL_62;
      }
      goto LABEL_200;
    }
LABEL_199:
    operator delete(v134[0]);
    if ((v28 & 0x80000000) == 0)
    {
LABEL_62:
      if ((v31 & 0x80000000) == 0) {
        goto LABEL_63;
      }
LABEL_201:
      operator delete(v30[0]);
LABEL_63:
      sub_19E3FFB5C((uint64_t)v35);
      sub_19E4C03DC((uint64_t)v147);
      sub_19E3EB09C(v32);
      if (v146 < 0)
      {
        operator delete(v145);
        if ((v144 & 0x80000000) == 0)
        {
LABEL_65:
          if ((v142 & 0x80000000) == 0) {
            goto LABEL_66;
          }
          goto LABEL_204;
        }
      }
      else if ((v144 & 0x80000000) == 0)
      {
        goto LABEL_65;
      }
      operator delete(v143);
      if ((v142 & 0x80000000) == 0)
      {
LABEL_66:
        if ((v34 & 0x80000000) == 0) {
          goto LABEL_67;
        }
        goto LABEL_205;
      }
LABEL_204:
      operator delete(v141[0]);
      if ((v34 & 0x80000000) == 0)
      {
LABEL_67:
        if ((v37 & 0x80000000) == 0) {
          goto LABEL_68;
        }
LABEL_206:
        operator delete(v36[0]);
LABEL_68:
        sub_19E3FFB5C((uint64_t)v41);
        sub_19E4C03DC((uint64_t)v154);
        sub_19E3EB09C(v38);
        if (v153 < 0)
        {
          operator delete(v152);
          if ((v151 & 0x80000000) == 0)
          {
LABEL_70:
            if ((v149 & 0x80000000) == 0) {
              goto LABEL_71;
            }
            goto LABEL_209;
          }
        }
        else if ((v151 & 0x80000000) == 0)
        {
          goto LABEL_70;
        }
        operator delete(v150);
        if ((v149 & 0x80000000) == 0)
        {
LABEL_71:
          if ((v40 & 0x80000000) == 0) {
            goto LABEL_72;
          }
          goto LABEL_210;
        }
LABEL_209:
        operator delete(v148[0]);
        if ((v40 & 0x80000000) == 0)
        {
LABEL_72:
          if ((v43 & 0x80000000) == 0) {
            goto LABEL_73;
          }
LABEL_211:
          operator delete(v42[0]);
LABEL_73:
          sub_19E3FFB5C((uint64_t)v47);
          sub_19E4C03DC((uint64_t)v161);
          sub_19E3EB09C(v44);
          if (v160 < 0)
          {
            operator delete(v159);
            if ((v158 & 0x80000000) == 0)
            {
LABEL_75:
              if ((v156 & 0x80000000) == 0) {
                goto LABEL_76;
              }
              goto LABEL_214;
            }
          }
          else if ((v158 & 0x80000000) == 0)
          {
            goto LABEL_75;
          }
          operator delete(v157);
          if ((v156 & 0x80000000) == 0)
          {
LABEL_76:
            if ((v46 & 0x80000000) == 0) {
              goto LABEL_77;
            }
            goto LABEL_215;
          }
LABEL_214:
          operator delete(v155[0]);
          if ((v46 & 0x80000000) == 0)
          {
LABEL_77:
            if ((v49 & 0x80000000) == 0) {
              goto LABEL_78;
            }
LABEL_216:
            operator delete(v48[0]);
LABEL_78:
            sub_19E3FFB5C((uint64_t)v53);
            sub_19E4C03DC((uint64_t)v172);
            sub_19E3EB09C(v50);
            if (v171 < 0)
            {
              operator delete(v170);
              if ((v169 & 0x80000000) == 0)
              {
LABEL_80:
                if ((v167 & 0x80000000) == 0) {
                  goto LABEL_81;
                }
                goto LABEL_219;
              }
            }
            else if ((v169 & 0x80000000) == 0)
            {
              goto LABEL_80;
            }
            operator delete(v168);
            if ((v167 & 0x80000000) == 0)
            {
LABEL_81:
              if ((v165 & 0x80000000) == 0) {
                goto LABEL_82;
              }
              goto LABEL_220;
            }
LABEL_219:
            operator delete(v166);
            if ((v165 & 0x80000000) == 0)
            {
LABEL_82:
              if ((v163 & 0x80000000) == 0) {
                goto LABEL_83;
              }
              goto LABEL_221;
            }
LABEL_220:
            operator delete(v164);
            if ((v163 & 0x80000000) == 0)
            {
LABEL_83:
              if ((v52 & 0x80000000) == 0) {
                goto LABEL_84;
              }
              goto LABEL_222;
            }
LABEL_221:
            operator delete(v162[0]);
            if ((v52 & 0x80000000) == 0)
            {
LABEL_84:
              if ((v55 & 0x80000000) == 0) {
                goto LABEL_85;
              }
LABEL_223:
              operator delete(v54[0]);
LABEL_85:
              sub_19E3FFB5C((uint64_t)v59);
              sub_19E4C03DC((uint64_t)v183);
              sub_19E3EB09C(v56);
              if (v182 < 0)
              {
                operator delete(v181);
                if ((v180 & 0x80000000) == 0)
                {
LABEL_87:
                  if ((v178 & 0x80000000) == 0) {
                    goto LABEL_88;
                  }
                  goto LABEL_226;
                }
              }
              else if ((v180 & 0x80000000) == 0)
              {
                goto LABEL_87;
              }
              operator delete(v179);
              if ((v178 & 0x80000000) == 0)
              {
LABEL_88:
                if ((v176 & 0x80000000) == 0) {
                  goto LABEL_89;
                }
                goto LABEL_227;
              }
LABEL_226:
              operator delete(v177);
              if ((v176 & 0x80000000) == 0)
              {
LABEL_89:
                if ((v174 & 0x80000000) == 0) {
                  goto LABEL_90;
                }
                goto LABEL_228;
              }
LABEL_227:
              operator delete(v175);
              if ((v174 & 0x80000000) == 0)
              {
LABEL_90:
                if ((v58 & 0x80000000) == 0) {
                  goto LABEL_91;
                }
                goto LABEL_229;
              }
LABEL_228:
              operator delete(v173[0]);
              if ((v58 & 0x80000000) == 0)
              {
LABEL_91:
                if ((v61 & 0x80000000) == 0) {
                  goto LABEL_92;
                }
LABEL_230:
                operator delete(v60[0]);
LABEL_92:
                sub_19E3FFB5C((uint64_t)v65);
                sub_19E4C03DC((uint64_t)v194);
                sub_19E3EB09C(v62);
                if (v193 < 0)
                {
                  operator delete(v192);
                  if ((v191 & 0x80000000) == 0)
                  {
LABEL_94:
                    if ((v189 & 0x80000000) == 0) {
                      goto LABEL_95;
                    }
                    goto LABEL_233;
                  }
                }
                else if ((v191 & 0x80000000) == 0)
                {
                  goto LABEL_94;
                }
                operator delete(v190);
                if ((v189 & 0x80000000) == 0)
                {
LABEL_95:
                  if ((v187 & 0x80000000) == 0) {
                    goto LABEL_96;
                  }
                  goto LABEL_234;
                }
LABEL_233:
                operator delete(v188);
                if ((v187 & 0x80000000) == 0)
                {
LABEL_96:
                  if ((v185 & 0x80000000) == 0) {
                    goto LABEL_97;
                  }
                  goto LABEL_235;
                }
LABEL_234:
                operator delete(v186);
                if ((v185 & 0x80000000) == 0)
                {
LABEL_97:
                  if ((v64 & 0x80000000) == 0) {
                    goto LABEL_98;
                  }
                  goto LABEL_236;
                }
LABEL_235:
                operator delete(v184[0]);
                if ((v64 & 0x80000000) == 0)
                {
LABEL_98:
                  if ((v67 & 0x80000000) == 0) {
                    goto LABEL_99;
                  }
LABEL_237:
                  operator delete(v66[0]);
LABEL_99:
                  sub_19E3FFB5C((uint64_t)v71);
                  sub_19E4C03DC((uint64_t)v205);
                  sub_19E3EB09C(v68);
                  if (v204 < 0)
                  {
                    operator delete(v203);
                    if ((v202 & 0x80000000) == 0)
                    {
LABEL_101:
                      if ((v200 & 0x80000000) == 0) {
                        goto LABEL_102;
                      }
                      goto LABEL_240;
                    }
                  }
                  else if ((v202 & 0x80000000) == 0)
                  {
                    goto LABEL_101;
                  }
                  operator delete(v201);
                  if ((v200 & 0x80000000) == 0)
                  {
LABEL_102:
                    if ((v198 & 0x80000000) == 0) {
                      goto LABEL_103;
                    }
                    goto LABEL_241;
                  }
LABEL_240:
                  operator delete(v199);
                  if ((v198 & 0x80000000) == 0)
                  {
LABEL_103:
                    if ((v196 & 0x80000000) == 0) {
                      goto LABEL_104;
                    }
                    goto LABEL_242;
                  }
LABEL_241:
                  operator delete(v197);
                  if ((v196 & 0x80000000) == 0)
                  {
LABEL_104:
                    if ((v70 & 0x80000000) == 0) {
                      goto LABEL_105;
                    }
                    goto LABEL_243;
                  }
LABEL_242:
                  operator delete(v195[0]);
                  if ((v70 & 0x80000000) == 0)
                  {
LABEL_105:
                    if ((v73 & 0x80000000) == 0) {
                      goto LABEL_106;
                    }
LABEL_244:
                    operator delete(v72[0]);
LABEL_106:
                    sub_19E3FFB5C((uint64_t)v77);
                    sub_19E4C03DC((uint64_t)v216);
                    sub_19E3EB09C(v74);
                    if (v215 < 0)
                    {
                      operator delete(v214);
                      if ((v213 & 0x80000000) == 0)
                      {
LABEL_108:
                        if ((v211 & 0x80000000) == 0) {
                          goto LABEL_109;
                        }
                        goto LABEL_247;
                      }
                    }
                    else if ((v213 & 0x80000000) == 0)
                    {
                      goto LABEL_108;
                    }
                    operator delete(v212);
                    if ((v211 & 0x80000000) == 0)
                    {
LABEL_109:
                      if ((v209 & 0x80000000) == 0) {
                        goto LABEL_110;
                      }
                      goto LABEL_248;
                    }
LABEL_247:
                    operator delete(v210);
                    if ((v209 & 0x80000000) == 0)
                    {
LABEL_110:
                      if ((v207 & 0x80000000) == 0) {
                        goto LABEL_111;
                      }
                      goto LABEL_249;
                    }
LABEL_248:
                    operator delete(v208);
                    if ((v207 & 0x80000000) == 0)
                    {
LABEL_111:
                      if ((v76 & 0x80000000) == 0) {
                        goto LABEL_112;
                      }
                      goto LABEL_250;
                    }
LABEL_249:
                    operator delete(v206[0]);
                    if ((v76 & 0x80000000) == 0)
                    {
LABEL_112:
                      if ((v79 & 0x80000000) == 0) {
                        goto LABEL_113;
                      }
LABEL_251:
                      operator delete(v78[0]);
LABEL_113:
                      sub_19E3FFB5C((uint64_t)v83);
                      sub_19E4C03DC((uint64_t)v227);
                      sub_19E3EB09C(v80);
                      if (v226 < 0)
                      {
                        operator delete(v225);
                        if ((v224 & 0x80000000) == 0)
                        {
LABEL_115:
                          if ((v222 & 0x80000000) == 0) {
                            goto LABEL_116;
                          }
                          goto LABEL_254;
                        }
                      }
                      else if ((v224 & 0x80000000) == 0)
                      {
                        goto LABEL_115;
                      }
                      operator delete(v223);
                      if ((v222 & 0x80000000) == 0)
                      {
LABEL_116:
                        if ((v220 & 0x80000000) == 0) {
                          goto LABEL_117;
                        }
                        goto LABEL_255;
                      }
LABEL_254:
                      operator delete(v221);
                      if ((v220 & 0x80000000) == 0)
                      {
LABEL_117:
                        if ((v218 & 0x80000000) == 0) {
                          goto LABEL_118;
                        }
                        goto LABEL_256;
                      }
LABEL_255:
                      operator delete(v219);
                      if ((v218 & 0x80000000) == 0)
                      {
LABEL_118:
                        if ((v82 & 0x80000000) == 0) {
                          goto LABEL_119;
                        }
                        goto LABEL_257;
                      }
LABEL_256:
                      operator delete(v217[0]);
                      if ((v82 & 0x80000000) == 0)
                      {
LABEL_119:
                        if ((v85 & 0x80000000) == 0) {
                          goto LABEL_120;
                        }
LABEL_258:
                        operator delete(v84[0]);
LABEL_120:
                        sub_19E3FFB5C((uint64_t)v89);
                        sub_19E4C03DC((uint64_t)v238);
                        sub_19E3EB09C(v86);
                        if (v237 < 0)
                        {
                          operator delete(v236);
                          if ((v235 & 0x80000000) == 0)
                          {
LABEL_122:
                            if ((v233 & 0x80000000) == 0) {
                              goto LABEL_123;
                            }
                            goto LABEL_261;
                          }
                        }
                        else if ((v235 & 0x80000000) == 0)
                        {
                          goto LABEL_122;
                        }
                        operator delete(v234);
                        if ((v233 & 0x80000000) == 0)
                        {
LABEL_123:
                          if ((v231 & 0x80000000) == 0) {
                            goto LABEL_124;
                          }
                          goto LABEL_262;
                        }
LABEL_261:
                        operator delete(v232);
                        if ((v231 & 0x80000000) == 0)
                        {
LABEL_124:
                          if ((v229 & 0x80000000) == 0) {
                            goto LABEL_125;
                          }
                          goto LABEL_263;
                        }
LABEL_262:
                        operator delete(v230);
                        if ((v229 & 0x80000000) == 0)
                        {
LABEL_125:
                          if ((v88 & 0x80000000) == 0) {
                            goto LABEL_126;
                          }
                          goto LABEL_264;
                        }
LABEL_263:
                        operator delete(v228[0]);
                        if ((v88 & 0x80000000) == 0)
                        {
LABEL_126:
                          if ((v91 & 0x80000000) == 0) {
                            goto LABEL_127;
                          }
LABEL_265:
                          operator delete(v90[0]);
LABEL_127:
                          sub_19E3FFB5C((uint64_t)v95);
                          sub_19E4C03DC((uint64_t)v249);
                          sub_19E3EB09C(v92);
                          if (v248 < 0)
                          {
                            operator delete(v247);
                            if ((v246 & 0x80000000) == 0)
                            {
LABEL_129:
                              if ((v244 & 0x80000000) == 0) {
                                goto LABEL_130;
                              }
                              goto LABEL_268;
                            }
                          }
                          else if ((v246 & 0x80000000) == 0)
                          {
                            goto LABEL_129;
                          }
                          operator delete(v245);
                          if ((v244 & 0x80000000) == 0)
                          {
LABEL_130:
                            if ((v242 & 0x80000000) == 0) {
                              goto LABEL_131;
                            }
                            goto LABEL_269;
                          }
LABEL_268:
                          operator delete(v243);
                          if ((v242 & 0x80000000) == 0)
                          {
LABEL_131:
                            if ((v240 & 0x80000000) == 0) {
                              goto LABEL_132;
                            }
                            goto LABEL_270;
                          }
LABEL_269:
                          operator delete(v241);
                          if ((v240 & 0x80000000) == 0)
                          {
LABEL_132:
                            if ((v94 & 0x80000000) == 0) {
                              goto LABEL_133;
                            }
                            goto LABEL_271;
                          }
LABEL_270:
                          operator delete(v239[0]);
                          if ((v94 & 0x80000000) == 0)
                          {
LABEL_133:
                            if ((v97 & 0x80000000) == 0) {
                              goto LABEL_134;
                            }
LABEL_272:
                            operator delete(v96[0]);
LABEL_134:
                            sub_19E3FFB5C((uint64_t)v101);
                            sub_19E4C03DC((uint64_t)__dst);
                            sub_19E3EB09C(v98);
                            if (v259 < 0)
                            {
                              operator delete(v258);
                              if ((v257 & 0x80000000) == 0)
                              {
LABEL_136:
                                if ((v255 & 0x80000000) == 0) {
                                  goto LABEL_137;
                                }
                                goto LABEL_275;
                              }
                            }
                            else if ((v257 & 0x80000000) == 0)
                            {
                              goto LABEL_136;
                            }
                            operator delete(v256);
                            if ((v255 & 0x80000000) == 0)
                            {
LABEL_137:
                              if ((v253 & 0x80000000) == 0) {
                                goto LABEL_138;
                              }
                              goto LABEL_276;
                            }
LABEL_275:
                            operator delete(v254);
                            if ((v253 & 0x80000000) == 0)
                            {
LABEL_138:
                              if ((v251 & 0x80000000) == 0) {
                                goto LABEL_139;
                              }
                              goto LABEL_277;
                            }
LABEL_276:
                            operator delete(v252);
                            if ((v251 & 0x80000000) == 0)
                            {
LABEL_139:
                              if ((v100 & 0x80000000) == 0) {
                                goto LABEL_140;
                              }
                              goto LABEL_278;
                            }
LABEL_277:
                            operator delete(v250[0]);
                            if ((v100 & 0x80000000) == 0)
                            {
LABEL_140:
                              if ((v103 & 0x80000000) == 0) {
                                goto LABEL_141;
                              }
LABEL_279:
                              operator delete(v102[0]);
LABEL_141:
                              sub_19E3FFB5C((uint64_t)v107);
                              sub_19E4C03DC((uint64_t)v271);
                              sub_19E3EB09C(v104);
                              if (v270 < 0) {
                                operator delete(__p);
                              }
                              if (v268 < 0) {
                                operator delete(v267);
                              }
                              if (v266 < 0) {
                                operator delete(v265);
                              }
                              if (v264 < 0) {
                                operator delete(v263);
                              }
                              if (v262 < 0)
                              {
                                operator delete(v261[0]);
                                if ((v106 & 0x80000000) == 0)
                                {
LABEL_151:
                                  if ((v109 & 0x80000000) == 0) {
                                    goto LABEL_152;
                                  }
LABEL_282:
                                  operator delete(v108[0]);
LABEL_152:
                                  sub_19E3FFB5C((uint64_t)v113);
                                  sub_19E4C03DC((uint64_t)v282);
                                  sub_19E3EB09C(v110);
                                  if (v281 < 0) {
                                    operator delete(v280);
                                  }
                                  if (v279 < 0) {
                                    operator delete(v278);
                                  }
                                  if (v277 < 0) {
                                    operator delete(v276);
                                  }
                                  if (v275 < 0) {
                                    operator delete(v274);
                                  }
                                  if (v273 < 0)
                                  {
                                    operator delete(v272[0]);
                                    if ((v112 & 0x80000000) == 0)
                                    {
LABEL_162:
                                      if ((v115 & 0x80000000) == 0) {
                                        goto LABEL_163;
                                      }
LABEL_285:
                                      operator delete(v114[0]);
LABEL_163:
                                      sub_19E3FFB5C((uint64_t)v119);
                                      sub_19E4C03DC((uint64_t)v293);
                                      sub_19E3EB09C(v116);
                                      if (v292 < 0) {
                                        operator delete(v291);
                                      }
                                      if (v290 < 0) {
                                        operator delete(v289);
                                      }
                                      if (v288 < 0) {
                                        operator delete(v287);
                                      }
                                      if (v286 < 0) {
                                        operator delete(v285);
                                      }
                                      if (v284 < 0)
                                      {
                                        operator delete(v283[0]);
                                        if ((v118 & 0x80000000) == 0)
                                        {
LABEL_173:
                                          if ((v121 & 0x80000000) == 0) {
                                            goto LABEL_174;
                                          }
LABEL_288:
                                          operator delete(v120[0]);
LABEL_174:
                                          sub_19E3FFB5C((uint64_t)v125);
                                          sub_19E4C03DC((uint64_t)v304);
                                          sub_19E3EB09C(v122);
                                          if (v303 < 0) {
                                            operator delete(v302);
                                          }
                                          if (v301 < 0) {
                                            operator delete(v300);
                                          }
                                          if (v299 < 0) {
                                            operator delete(v298);
                                          }
                                          if (v297 < 0) {
                                            operator delete(v296);
                                          }
                                          if (v295 < 0)
                                          {
                                            operator delete(v294[0]);
                                            if ((v124 & 0x80000000) == 0)
                                            {
LABEL_184:
                                              if ((v127 & 0x80000000) == 0) {
                                                goto LABEL_185;
                                              }
LABEL_291:
                                              operator delete(v126[0]);
LABEL_185:
                                              sub_19E3FFB5C((uint64_t)v131);
                                              sub_19E4C03DC((uint64_t)v315);
                                              sub_19E3EB09C(v128);
                                              if (v314 < 0) {
                                                operator delete(v313);
                                              }
                                              if (v312 < 0) {
                                                operator delete(v311);
                                              }
                                              if (v310 < 0) {
                                                operator delete(v309);
                                              }
                                              if (v308 < 0) {
                                                operator delete(v307);
                                              }
                                              if (v306 < 0)
                                              {
                                                operator delete(v305[0]);
                                                if ((v130 & 0x80000000) == 0)
                                                {
LABEL_195:
                                                  if ((v133 & 0x80000000) == 0)
                                                  {
LABEL_196:
                                                    __cxa_guard_release(&qword_1E9459EC0);
                                                    goto LABEL_2;
                                                  }
LABEL_294:
                                                  operator delete(v132[0]);
                                                  goto LABEL_196;
                                                }
                                              }
                                              else if ((v130 & 0x80000000) == 0)
                                              {
                                                goto LABEL_195;
                                              }
                                              operator delete(v129[0]);
                                              if ((v133 & 0x80000000) == 0) {
                                                goto LABEL_196;
                                              }
                                              goto LABEL_294;
                                            }
                                          }
                                          else if ((v124 & 0x80000000) == 0)
                                          {
                                            goto LABEL_184;
                                          }
                                          operator delete(v123[0]);
                                          if ((v127 & 0x80000000) == 0) {
                                            goto LABEL_185;
                                          }
                                          goto LABEL_291;
                                        }
                                      }
                                      else if ((v118 & 0x80000000) == 0)
                                      {
                                        goto LABEL_173;
                                      }
                                      operator delete(v117[0]);
                                      if ((v121 & 0x80000000) == 0) {
                                        goto LABEL_174;
                                      }
                                      goto LABEL_288;
                                    }
                                  }
                                  else if ((v112 & 0x80000000) == 0)
                                  {
                                    goto LABEL_162;
                                  }
                                  operator delete(v111[0]);
                                  if ((v115 & 0x80000000) == 0) {
                                    goto LABEL_163;
                                  }
                                  goto LABEL_285;
                                }
                              }
                              else if ((v106 & 0x80000000) == 0)
                              {
                                goto LABEL_151;
                              }
                              operator delete(v105[0]);
                              if ((v109 & 0x80000000) == 0) {
                                goto LABEL_152;
                              }
                              goto LABEL_282;
                            }
LABEL_278:
                            operator delete(v99[0]);
                            if ((v103 & 0x80000000) == 0) {
                              goto LABEL_141;
                            }
                            goto LABEL_279;
                          }
LABEL_271:
                          operator delete(v93[0]);
                          if ((v97 & 0x80000000) == 0) {
                            goto LABEL_134;
                          }
                          goto LABEL_272;
                        }
LABEL_264:
                        operator delete(v87[0]);
                        if ((v91 & 0x80000000) == 0) {
                          goto LABEL_127;
                        }
                        goto LABEL_265;
                      }
LABEL_257:
                      operator delete(v81[0]);
                      if ((v85 & 0x80000000) == 0) {
                        goto LABEL_120;
                      }
                      goto LABEL_258;
                    }
LABEL_250:
                    operator delete(v75[0]);
                    if ((v79 & 0x80000000) == 0) {
                      goto LABEL_113;
                    }
                    goto LABEL_251;
                  }
LABEL_243:
                  operator delete(v69[0]);
                  if ((v73 & 0x80000000) == 0) {
                    goto LABEL_106;
                  }
                  goto LABEL_244;
                }
LABEL_236:
                operator delete(v63[0]);
                if ((v67 & 0x80000000) == 0) {
                  goto LABEL_99;
                }
                goto LABEL_237;
              }
LABEL_229:
              operator delete(v57[0]);
              if ((v61 & 0x80000000) == 0) {
                goto LABEL_92;
              }
              goto LABEL_230;
            }
LABEL_222:
            operator delete(v51[0]);
            if ((v55 & 0x80000000) == 0) {
              goto LABEL_85;
            }
            goto LABEL_223;
          }
LABEL_215:
          operator delete(v45[0]);
          if ((v49 & 0x80000000) == 0) {
            goto LABEL_78;
          }
          goto LABEL_216;
        }
LABEL_210:
        operator delete(v39[0]);
        if ((v43 & 0x80000000) == 0) {
          goto LABEL_73;
        }
        goto LABEL_211;
      }
LABEL_205:
      operator delete(v33[0]);
      if ((v37 & 0x80000000) == 0) {
        goto LABEL_68;
      }
      goto LABEL_206;
    }
LABEL_200:
    operator delete(v27[0]);
    if ((v31 & 0x80000000) == 0) {
      goto LABEL_63;
    }
    goto LABEL_201;
  }
LABEL_2:
  int v4 = v2[23];
  if (v4 >= 0) {
    CFStringRef v5 = (uint64_t *)v2;
  }
  else {
    CFStringRef v5 = *(uint64_t **)v2;
  }
  if (v4 >= 0) {
    unint64_t v6 = v2[23];
  }
  else {
    unint64_t v6 = *((void *)v2 + 1);
  }
  unint64_t v7 = sub_19E37BDA4((uint64_t)v316, v5, v6);
  unint64_t v8 = *((void *)&xmmword_1E9459E98 + 1);
  if (*((void *)&xmmword_1E9459E98 + 1))
  {
    unint64_t v9 = v7;
    uint8x8_t v10 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_1E9459E98 + 8));
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v11 = v7;
      if (v7 >= *((void *)&xmmword_1E9459E98 + 1)) {
        unint64_t v11 = v7 % *((void *)&xmmword_1E9459E98 + 1);
      }
    }
    else
    {
      unint64_t v11 = (*((void *)&xmmword_1E9459E98 + 1) - 1) & v7;
    }
    unint64_t v12 = *(uint64_t ***)(xmmword_1E9459E98 + 8 * v11);
    if (v12)
    {
      uint8x8_t v13 = *v12;
      if (*v12)
      {
        char v14 = v2[23];
        if (v14 >= 0) {
          uint64_t v15 = v2[23];
        }
        else {
          uint64_t v15 = *((void *)v2 + 1);
        }
        if (v14 < 0) {
          uint64_t v2 = *(char **)v2;
        }
        if (v10.u32[0] < 2uLL)
        {
          uint64_t v16 = *((void *)&xmmword_1E9459E98 + 1) - 1;
          while (1)
          {
            uint64_t v21 = v13[1];
            if (v9 == v21)
            {
              uint64_t v22 = *((unsigned __int8 *)v13 + 39);
              if ((v22 & 0x80u) == 0) {
                uint64_t v23 = *((unsigned __int8 *)v13 + 39);
              }
              else {
                uint64_t v23 = v13[3];
              }
              if (v23 == v15)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v13[2], v2, v13[3])) {
                    goto LABEL_55;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v13 + 39)) {
                    goto LABEL_55;
                  }
                  uint64_t v24 = 0;
                  while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                  {
                    if (v22 == ++v24) {
                      goto LABEL_54;
                    }
                  }
                }
              }
            }
            else if ((v21 & v16) != v11)
            {
              goto LABEL_56;
            }
            uint8x8_t v13 = (uint64_t *)*v13;
            if (!v13) {
              goto LABEL_56;
            }
          }
        }
        do
        {
          unint64_t v17 = v13[1];
          if (v9 == v17)
          {
            uint64_t v18 = *((unsigned __int8 *)v13 + 39);
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = *((unsigned __int8 *)v13 + 39);
            }
            else {
              uint64_t v19 = v13[3];
            }
            if (v19 == v15)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3]))
                {
LABEL_55:
                  sub_19E4C0460(v3, (uint64_t)(v13 + 5));
                  return result;
                }
              }
              else
              {
                if (!*((unsigned char *)v13 + 39)) {
                  goto LABEL_55;
                }
                uint64_t v20 = 0;
                while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
                {
                  if (v18 == ++v20)
                  {
LABEL_54:
                    if (!v13) {
                      goto LABEL_56;
                    }
                    goto LABEL_55;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= v8) {
              v17 %= v8;
            }
            if (v17 != v11) {
              break;
            }
          }
          uint8x8_t v13 = (uint64_t *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_56:
  double result = 0.0;
  *(_OWORD *)uint64_t v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_DWORD *)(v3 + 32) = 1065353216;
  return result;
}

void sub_19E4BDC94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,void *a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  sub_19E4C03A0(v84);
  sub_19E4C03A0(v83);
  sub_19E4C03A0(v82);
  sub_19E4C03A0(v81);
  sub_19E4C03A0(v80);
  sub_19E4C03A0(v79);
  sub_19E4C03A0(a9);
  sub_19E4C03A0(a10);
  sub_19E4C03A0(a11);
  sub_19E4C03A0(a12);
  sub_19E4C03A0(a13);
  sub_19E4C03A0(a14);
  sub_19E4C03A0(a15);
  sub_19E4C03A0(a16);
  sub_19E4C03A0(a17);
  sub_19E4C03A0(a18);
  sub_19E4C03A0(v78);
  sub_19E4C03A0((uint64_t)&STACK[0x1340]);
  sub_19E3FFB5C((uint64_t)&a28);
  sub_19E4C03DC((uint64_t)&STACK[0x878]);
  sub_19E3EB09C(&a19);
  if (SLOBYTE(STACK[0x877]) < 0)
  {
    operator delete((void *)STACK[0x860]);
    if ((SLOBYTE(STACK[0x85F]) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((SLOBYTE(STACK[0x85F]) & 0x80000000) == 0)
  {
LABEL_3:
    if (SLOBYTE(STACK[0x847]) < 0) {
      goto LABEL_4;
    }
    goto LABEL_8;
  }
  operator delete((void *)STACK[0x848]);
  if (SLOBYTE(STACK[0x847]) < 0)
  {
LABEL_4:
    operator delete((void *)STACK[0x830]);
    if (a27 < 0)
    {
LABEL_9:
      operator delete(a22);
      if ((a38 & 0x80000000) == 0) {
        goto LABEL_13;
      }
LABEL_12:
      operator delete(a33);
LABEL_13:
      sub_19E3FFB5C((uint64_t)&a48);
      sub_19E4C03DC((uint64_t)&STACK[0x8F0]);
      sub_19E3EB09C(&a39);
      if (SLOBYTE(STACK[0x8EF]) < 0)
      {
        operator delete((void *)STACK[0x8D8]);
        if ((SLOBYTE(STACK[0x8D7]) & 0x80000000) == 0) {
          goto LABEL_15;
        }
      }
      else if ((SLOBYTE(STACK[0x8D7]) & 0x80000000) == 0)
      {
LABEL_15:
        if (SLOBYTE(STACK[0x8BF]) < 0) {
          goto LABEL_16;
        }
        goto LABEL_21;
      }
      operator delete((void *)STACK[0x8C0]);
      if (SLOBYTE(STACK[0x8BF]) < 0)
      {
LABEL_16:
        operator delete((void *)STACK[0x8A8]);
        if ((a47 & 0x80000000) == 0) {
          goto LABEL_17;
        }
        goto LABEL_22;
      }
LABEL_21:
      if ((a47 & 0x80000000) == 0)
      {
LABEL_17:
        if ((a58 & 0x80000000) == 0) {
          goto LABEL_24;
        }
LABEL_23:
        operator delete(a53);
LABEL_24:
        sub_19E3FFB5C((uint64_t)&a68);
        sub_19E4C03DC((uint64_t)&STACK[0x968]);
        sub_19E3EB09C(&a59);
        if (SLOBYTE(STACK[0x967]) < 0)
        {
          operator delete((void *)STACK[0x950]);
          if ((SLOBYTE(STACK[0x94F]) & 0x80000000) == 0) {
            goto LABEL_26;
          }
        }
        else if ((SLOBYTE(STACK[0x94F]) & 0x80000000) == 0)
        {
LABEL_26:
          if (SLOBYTE(STACK[0x937]) < 0) {
            goto LABEL_27;
          }
          goto LABEL_32;
        }
        operator delete((void *)STACK[0x938]);
        if (SLOBYTE(STACK[0x937]) < 0)
        {
LABEL_27:
          operator delete((void *)STACK[0x920]);
          if ((a67 & 0x80000000) == 0) {
            goto LABEL_28;
          }
          goto LABEL_33;
        }
LABEL_32:
        if ((a67 & 0x80000000) == 0)
        {
LABEL_28:
          if ((a73 & 0x80000000) == 0) {
            goto LABEL_35;
          }
LABEL_34:
          operator delete(a72);
LABEL_35:
          sub_19E3FFB5C((uint64_t)&a77);
          sub_19E4C03DC((uint64_t)&STACK[0x9E0]);
          sub_19E3EB09C(&a74);
          if (SLOBYTE(STACK[0x9DF]) < 0)
          {
            operator delete((void *)STACK[0x9C8]);
            if ((SLOBYTE(STACK[0x9C7]) & 0x80000000) == 0) {
              goto LABEL_37;
            }
          }
          else if ((SLOBYTE(STACK[0x9C7]) & 0x80000000) == 0)
          {
LABEL_37:
            if (SLOBYTE(STACK[0x9AF]) < 0) {
              goto LABEL_38;
            }
            goto LABEL_43;
          }
          operator delete((void *)STACK[0x9B0]);
          if (SLOBYTE(STACK[0x9AF]) < 0)
          {
LABEL_38:
            operator delete((void *)STACK[0x998]);
            if ((a76 & 0x80000000) == 0) {
              goto LABEL_39;
            }
            goto LABEL_44;
          }
LABEL_43:
          if ((a76 & 0x80000000) == 0)
          {
LABEL_39:
            if ((SLOBYTE(STACK[0x20F]) & 0x80000000) == 0) {
              goto LABEL_46;
            }
LABEL_45:
            operator delete(a78);
LABEL_46:
            sub_19E3FFB5C((uint64_t)&STACK[0x240]);
            sub_19E4C03DC((uint64_t)&STACK[0xA88]);
            sub_19E3EB09C((void **)&STACK[0x210]);
            if (SLOBYTE(STACK[0xA87]) < 0)
            {
              operator delete((void *)STACK[0xA70]);
              if ((SLOBYTE(STACK[0xA6F]) & 0x80000000) == 0) {
                goto LABEL_48;
              }
            }
            else if ((SLOBYTE(STACK[0xA6F]) & 0x80000000) == 0)
            {
LABEL_48:
              if (SLOBYTE(STACK[0xA57]) < 0) {
                goto LABEL_49;
              }
              goto LABEL_56;
            }
            operator delete((void *)STACK[0xA58]);
            if (SLOBYTE(STACK[0xA57]) < 0)
            {
LABEL_49:
              operator delete((void *)STACK[0xA40]);
              if ((SLOBYTE(STACK[0xA3F]) & 0x80000000) == 0) {
                goto LABEL_50;
              }
              goto LABEL_57;
            }
LABEL_56:
            if ((SLOBYTE(STACK[0xA3F]) & 0x80000000) == 0)
            {
LABEL_50:
              if (SLOBYTE(STACK[0xA27]) < 0) {
                goto LABEL_51;
              }
              goto LABEL_58;
            }
LABEL_57:
            operator delete((void *)STACK[0xA28]);
            if (SLOBYTE(STACK[0xA27]) < 0)
            {
LABEL_51:
              operator delete((void *)STACK[0xA10]);
              if ((SLOBYTE(STACK[0x23F]) & 0x80000000) == 0) {
                goto LABEL_52;
              }
              goto LABEL_59;
            }
LABEL_58:
            if ((SLOBYTE(STACK[0x23F]) & 0x80000000) == 0)
            {
LABEL_52:
              if ((SLOBYTE(STACK[0x27F]) & 0x80000000) == 0) {
                goto LABEL_61;
              }
LABEL_60:
              operator delete((void *)STACK[0x268]);
LABEL_61:
              sub_19E3FFB5C((uint64_t)&STACK[0x2B0]);
              sub_19E4C03DC((uint64_t)&STACK[0xB30]);
              sub_19E3EB09C((void **)&STACK[0x280]);
              if (SLOBYTE(STACK[0xB2F]) < 0)
              {
                operator delete((void *)STACK[0xB18]);
                if ((SLOBYTE(STACK[0xB17]) & 0x80000000) == 0) {
                  goto LABEL_63;
                }
              }
              else if ((SLOBYTE(STACK[0xB17]) & 0x80000000) == 0)
              {
LABEL_63:
                if (SLOBYTE(STACK[0xAFF]) < 0) {
                  goto LABEL_64;
                }
                goto LABEL_71;
              }
              operator delete((void *)STACK[0xB00]);
              if (SLOBYTE(STACK[0xAFF]) < 0)
              {
LABEL_64:
                operator delete((void *)STACK[0xAE8]);
                if ((SLOBYTE(STACK[0xAE7]) & 0x80000000) == 0) {
                  goto LABEL_65;
                }
                goto LABEL_72;
              }
LABEL_71:
              if ((SLOBYTE(STACK[0xAE7]) & 0x80000000) == 0)
              {
LABEL_65:
                if (SLOBYTE(STACK[0xACF]) < 0) {
                  goto LABEL_66;
                }
                goto LABEL_73;
              }
LABEL_72:
              operator delete((void *)STACK[0xAD0]);
              if (SLOBYTE(STACK[0xACF]) < 0)
              {
LABEL_66:
                operator delete((void *)STACK[0xAB8]);
                if ((SLOBYTE(STACK[0x2AF]) & 0x80000000) == 0) {
                  goto LABEL_67;
                }
                goto LABEL_74;
              }
LABEL_73:
              if ((SLOBYTE(STACK[0x2AF]) & 0x80000000) == 0)
              {
LABEL_67:
                if ((SLOBYTE(STACK[0x2EF]) & 0x80000000) == 0) {
                  goto LABEL_76;
                }
LABEL_75:
                operator delete((void *)STACK[0x2D8]);
LABEL_76:
                sub_19E3FFB5C((uint64_t)&STACK[0x320]);
                sub_19E4C03DC((uint64_t)&STACK[0xBD8]);
                sub_19E3EB09C((void **)&STACK[0x2F0]);
                if (SLOBYTE(STACK[0xBD7]) < 0)
                {
                  operator delete((void *)STACK[0xBC0]);
                  if ((SLOBYTE(STACK[0xBBF]) & 0x80000000) == 0) {
                    goto LABEL_78;
                  }
                }
                else if ((SLOBYTE(STACK[0xBBF]) & 0x80000000) == 0)
                {
LABEL_78:
                  if (SLOBYTE(STACK[0xBA7]) < 0) {
                    goto LABEL_79;
                  }
                  goto LABEL_86;
                }
                operator delete((void *)STACK[0xBA8]);
                if (SLOBYTE(STACK[0xBA7]) < 0)
                {
LABEL_79:
                  operator delete((void *)STACK[0xB90]);
                  if ((SLOBYTE(STACK[0xB8F]) & 0x80000000) == 0) {
                    goto LABEL_80;
                  }
                  goto LABEL_87;
                }
LABEL_86:
                if ((SLOBYTE(STACK[0xB8F]) & 0x80000000) == 0)
                {
LABEL_80:
                  if (SLOBYTE(STACK[0xB77]) < 0) {
                    goto LABEL_81;
                  }
                  goto LABEL_88;
                }
LABEL_87:
                operator delete((void *)STACK[0xB78]);
                if (SLOBYTE(STACK[0xB77]) < 0)
                {
LABEL_81:
                  operator delete((void *)STACK[0xB60]);
                  if ((SLOBYTE(STACK[0x31F]) & 0x80000000) == 0) {
                    goto LABEL_82;
                  }
                  goto LABEL_89;
                }
LABEL_88:
                if ((SLOBYTE(STACK[0x31F]) & 0x80000000) == 0)
                {
LABEL_82:
                  if ((SLOBYTE(STACK[0x35F]) & 0x80000000) == 0) {
                    goto LABEL_91;
                  }
LABEL_90:
                  operator delete((void *)STACK[0x348]);
LABEL_91:
                  sub_19E3FFB5C((uint64_t)&STACK[0x390]);
                  sub_19E4C03DC((uint64_t)&STACK[0xC80]);
                  sub_19E3EB09C((void **)&STACK[0x360]);
                  if (SLOBYTE(STACK[0xC7F]) < 0)
                  {
                    operator delete((void *)STACK[0xC68]);
                    if ((SLOBYTE(STACK[0xC67]) & 0x80000000) == 0) {
                      goto LABEL_93;
                    }
                  }
                  else if ((SLOBYTE(STACK[0xC67]) & 0x80000000) == 0)
                  {
LABEL_93:
                    if (SLOBYTE(STACK[0xC4F]) < 0) {
                      goto LABEL_94;
                    }
                    goto LABEL_101;
                  }
                  operator delete((void *)STACK[0xC50]);
                  if (SLOBYTE(STACK[0xC4F]) < 0)
                  {
LABEL_94:
                    operator delete((void *)STACK[0xC38]);
                    if ((SLOBYTE(STACK[0xC37]) & 0x80000000) == 0) {
                      goto LABEL_95;
                    }
                    goto LABEL_102;
                  }
LABEL_101:
                  if ((SLOBYTE(STACK[0xC37]) & 0x80000000) == 0)
                  {
LABEL_95:
                    if (SLOBYTE(STACK[0xC1F]) < 0) {
                      goto LABEL_96;
                    }
                    goto LABEL_103;
                  }
LABEL_102:
                  operator delete((void *)STACK[0xC20]);
                  if (SLOBYTE(STACK[0xC1F]) < 0)
                  {
LABEL_96:
                    operator delete((void *)STACK[0xC08]);
                    if ((SLOBYTE(STACK[0x38F]) & 0x80000000) == 0) {
                      goto LABEL_97;
                    }
                    goto LABEL_104;
                  }
LABEL_103:
                  if ((SLOBYTE(STACK[0x38F]) & 0x80000000) == 0)
                  {
LABEL_97:
                    if ((SLOBYTE(STACK[0x3CF]) & 0x80000000) == 0) {
                      goto LABEL_106;
                    }
LABEL_105:
                    operator delete((void *)STACK[0x3B8]);
LABEL_106:
                    sub_19E3FFB5C((uint64_t)&STACK[0x400]);
                    sub_19E4C03DC((uint64_t)&STACK[0xD28]);
                    sub_19E3EB09C((void **)&STACK[0x3D0]);
                    if (SLOBYTE(STACK[0xD27]) < 0)
                    {
                      operator delete((void *)STACK[0xD10]);
                      if ((SLOBYTE(STACK[0xD0F]) & 0x80000000) == 0) {
                        goto LABEL_108;
                      }
                    }
                    else if ((SLOBYTE(STACK[0xD0F]) & 0x80000000) == 0)
                    {
LABEL_108:
                      if (SLOBYTE(STACK[0xCF7]) < 0) {
                        goto LABEL_109;
                      }
                      goto LABEL_116;
                    }
                    operator delete((void *)STACK[0xCF8]);
                    if (SLOBYTE(STACK[0xCF7]) < 0)
                    {
LABEL_109:
                      operator delete((void *)STACK[0xCE0]);
                      if ((SLOBYTE(STACK[0xCDF]) & 0x80000000) == 0) {
                        goto LABEL_110;
                      }
                      goto LABEL_117;
                    }
LABEL_116:
                    if ((SLOBYTE(STACK[0xCDF]) & 0x80000000) == 0)
                    {
LABEL_110:
                      if (SLOBYTE(STACK[0xCC7]) < 0) {
                        goto LABEL_111;
                      }
                      goto LABEL_118;
                    }
LABEL_117:
                    operator delete((void *)STACK[0xCC8]);
                    if (SLOBYTE(STACK[0xCC7]) < 0)
                    {
LABEL_111:
                      operator delete((void *)STACK[0xCB0]);
                      if ((SLOBYTE(STACK[0x3FF]) & 0x80000000) == 0) {
                        goto LABEL_112;
                      }
                      goto LABEL_119;
                    }
LABEL_118:
                    if ((SLOBYTE(STACK[0x3FF]) & 0x80000000) == 0)
                    {
LABEL_112:
                      if ((SLOBYTE(STACK[0x43F]) & 0x80000000) == 0) {
                        goto LABEL_121;
                      }
LABEL_120:
                      operator delete((void *)STACK[0x428]);
LABEL_121:
                      sub_19E3FFB5C((uint64_t)&STACK[0x470]);
                      sub_19E4C03DC((uint64_t)&STACK[0xDD0]);
                      sub_19E3EB09C((void **)&STACK[0x440]);
                      if (SLOBYTE(STACK[0xDCF]) < 0)
                      {
                        operator delete((void *)STACK[0xDB8]);
                        if ((SLOBYTE(STACK[0xDB7]) & 0x80000000) == 0) {
                          goto LABEL_123;
                        }
                      }
                      else if ((SLOBYTE(STACK[0xDB7]) & 0x80000000) == 0)
                      {
LABEL_123:
                        if (SLOBYTE(STACK[0xD9F]) < 0) {
                          goto LABEL_124;
                        }
                        goto LABEL_131;
                      }
                      operator delete((void *)STACK[0xDA0]);
                      if (SLOBYTE(STACK[0xD9F]) < 0)
                      {
LABEL_124:
                        operator delete((void *)STACK[0xD88]);
                        if ((SLOBYTE(STACK[0xD87]) & 0x80000000) == 0) {
                          goto LABEL_125;
                        }
                        goto LABEL_132;
                      }
LABEL_131:
                      if ((SLOBYTE(STACK[0xD87]) & 0x80000000) == 0)
                      {
LABEL_125:
                        if (SLOBYTE(STACK[0xD6F]) < 0) {
                          goto LABEL_126;
                        }
                        goto LABEL_133;
                      }
LABEL_132:
                      operator delete((void *)STACK[0xD70]);
                      if (SLOBYTE(STACK[0xD6F]) < 0)
                      {
LABEL_126:
                        operator delete((void *)STACK[0xD58]);
                        if ((SLOBYTE(STACK[0x46F]) & 0x80000000) == 0) {
                          goto LABEL_127;
                        }
                        goto LABEL_134;
                      }
LABEL_133:
                      if ((SLOBYTE(STACK[0x46F]) & 0x80000000) == 0)
                      {
LABEL_127:
                        if ((SLOBYTE(STACK[0x4AF]) & 0x80000000) == 0) {
                          goto LABEL_136;
                        }
LABEL_135:
                        operator delete((void *)STACK[0x498]);
LABEL_136:
                        sub_19E3FFB5C((uint64_t)&STACK[0x4E0]);
                        sub_19E4C03DC((uint64_t)&STACK[0xE78]);
                        sub_19E3EB09C((void **)&STACK[0x4B0]);
                        if (SLOBYTE(STACK[0xE77]) < 0)
                        {
                          operator delete((void *)STACK[0xE60]);
                          if ((SLOBYTE(STACK[0xE5F]) & 0x80000000) == 0) {
                            goto LABEL_138;
                          }
                        }
                        else if ((SLOBYTE(STACK[0xE5F]) & 0x80000000) == 0)
                        {
LABEL_138:
                          if (SLOBYTE(STACK[0xE47]) < 0) {
                            goto LABEL_139;
                          }
                          goto LABEL_146;
                        }
                        operator delete((void *)STACK[0xE48]);
                        if (SLOBYTE(STACK[0xE47]) < 0)
                        {
LABEL_139:
                          operator delete((void *)STACK[0xE30]);
                          if ((SLOBYTE(STACK[0xE2F]) & 0x80000000) == 0) {
                            goto LABEL_140;
                          }
                          goto LABEL_147;
                        }
LABEL_146:
                        if ((SLOBYTE(STACK[0xE2F]) & 0x80000000) == 0)
                        {
LABEL_140:
                          if (SLOBYTE(STACK[0xE17]) < 0) {
                            goto LABEL_141;
                          }
                          goto LABEL_148;
                        }
LABEL_147:
                        operator delete((void *)STACK[0xE18]);
                        if (SLOBYTE(STACK[0xE17]) < 0)
                        {
LABEL_141:
                          operator delete((void *)STACK[0xE00]);
                          if ((SLOBYTE(STACK[0x4DF]) & 0x80000000) == 0) {
                            goto LABEL_142;
                          }
                          goto LABEL_149;
                        }
LABEL_148:
                        if ((SLOBYTE(STACK[0x4DF]) & 0x80000000) == 0)
                        {
LABEL_142:
                          if ((SLOBYTE(STACK[0x51F]) & 0x80000000) == 0) {
                            goto LABEL_151;
                          }
LABEL_150:
                          operator delete((void *)STACK[0x508]);
LABEL_151:
                          sub_19E3FFB5C((uint64_t)&STACK[0x550]);
                          sub_19E4C03DC((uint64_t)&STACK[0xF20]);
                          sub_19E3EB09C((void **)&STACK[0x520]);
                          if (SLOBYTE(STACK[0xF1F]) < 0)
                          {
                            operator delete((void *)STACK[0xF08]);
                            if ((SLOBYTE(STACK[0xF07]) & 0x80000000) == 0) {
                              goto LABEL_153;
                            }
                          }
                          else if ((SLOBYTE(STACK[0xF07]) & 0x80000000) == 0)
                          {
LABEL_153:
                            if (SLOBYTE(STACK[0xEEF]) < 0) {
                              goto LABEL_154;
                            }
                            goto LABEL_161;
                          }
                          operator delete((void *)STACK[0xEF0]);
                          if (SLOBYTE(STACK[0xEEF]) < 0)
                          {
LABEL_154:
                            operator delete((void *)STACK[0xED8]);
                            if ((SLOBYTE(STACK[0xED7]) & 0x80000000) == 0) {
                              goto LABEL_155;
                            }
                            goto LABEL_162;
                          }
LABEL_161:
                          if ((SLOBYTE(STACK[0xED7]) & 0x80000000) == 0)
                          {
LABEL_155:
                            if (SLOBYTE(STACK[0xEBF]) < 0) {
                              goto LABEL_156;
                            }
                            goto LABEL_163;
                          }
LABEL_162:
                          operator delete((void *)STACK[0xEC0]);
                          if (SLOBYTE(STACK[0xEBF]) < 0)
                          {
LABEL_156:
                            operator delete((void *)STACK[0xEA8]);
                            if ((SLOBYTE(STACK[0x54F]) & 0x80000000) == 0) {
                              goto LABEL_157;
                            }
                            goto LABEL_164;
                          }
LABEL_163:
                          if ((SLOBYTE(STACK[0x54F]) & 0x80000000) == 0)
                          {
LABEL_157:
                            if ((SLOBYTE(STACK[0x58F]) & 0x80000000) == 0) {
                              goto LABEL_166;
                            }
LABEL_165:
                            operator delete((void *)STACK[0x578]);
LABEL_166:
                            sub_19E3FFB5C((uint64_t)&STACK[0x5C0]);
                            sub_19E4C03DC((uint64_t)&STACK[0xFC8]);
                            sub_19E3EB09C((void **)&STACK[0x590]);
                            if (SLOBYTE(STACK[0xFC7]) < 0)
                            {
                              operator delete((void *)STACK[0xFB0]);
                              if ((SLOBYTE(STACK[0xFAF]) & 0x80000000) == 0) {
                                goto LABEL_168;
                              }
                            }
                            else if ((SLOBYTE(STACK[0xFAF]) & 0x80000000) == 0)
                            {
LABEL_168:
                              if (SLOBYTE(STACK[0xF97]) < 0) {
                                goto LABEL_169;
                              }
                              goto LABEL_176;
                            }
                            operator delete((void *)STACK[0xF98]);
                            if (SLOBYTE(STACK[0xF97]) < 0)
                            {
LABEL_169:
                              operator delete((void *)STACK[0xF80]);
                              if ((SLOBYTE(STACK[0xF7F]) & 0x80000000) == 0) {
                                goto LABEL_170;
                              }
                              goto LABEL_177;
                            }
LABEL_176:
                            if ((SLOBYTE(STACK[0xF7F]) & 0x80000000) == 0)
                            {
LABEL_170:
                              if (SLOBYTE(STACK[0xF67]) < 0) {
                                goto LABEL_171;
                              }
                              goto LABEL_178;
                            }
LABEL_177:
                            operator delete((void *)STACK[0xF68]);
                            if (SLOBYTE(STACK[0xF67]) < 0)
                            {
LABEL_171:
                              operator delete((void *)STACK[0xF50]);
                              if ((SLOBYTE(STACK[0x5BF]) & 0x80000000) == 0) {
                                goto LABEL_172;
                              }
                              goto LABEL_179;
                            }
LABEL_178:
                            if ((SLOBYTE(STACK[0x5BF]) & 0x80000000) == 0)
                            {
LABEL_172:
                              if ((SLOBYTE(STACK[0x5FF]) & 0x80000000) == 0) {
                                goto LABEL_181;
                              }
LABEL_180:
                              operator delete((void *)STACK[0x5E8]);
LABEL_181:
                              sub_19E3FFB5C((uint64_t)&STACK[0x630]);
                              sub_19E4C03DC((uint64_t)&STACK[0x1070]);
                              sub_19E3EB09C((void **)&STACK[0x600]);
                              if (SLOBYTE(STACK[0x106F]) < 0) {
                                operator delete((void *)STACK[0x1058]);
                              }
                              if (SLOBYTE(STACK[0x1057]) < 0) {
                                operator delete((void *)STACK[0x1040]);
                              }
                              if (SLOBYTE(STACK[0x103F]) < 0) {
                                operator delete((void *)STACK[0x1028]);
                              }
                              if (SLOBYTE(STACK[0x1027]) < 0) {
                                operator delete((void *)STACK[0x1010]);
                              }
                              if (SLOBYTE(STACK[0x100F]) < 0)
                              {
                                operator delete((void *)STACK[0xFF8]);
                                if ((SLOBYTE(STACK[0x62F]) & 0x80000000) == 0) {
                                  goto LABEL_191;
                                }
                              }
                              else if ((SLOBYTE(STACK[0x62F]) & 0x80000000) == 0)
                              {
LABEL_191:
                                if ((SLOBYTE(STACK[0x66F]) & 0x80000000) == 0) {
                                  goto LABEL_196;
                                }
LABEL_195:
                                operator delete((void *)STACK[0x658]);
LABEL_196:
                                sub_19E3FFB5C((uint64_t)&STACK[0x6A0]);
                                sub_19E4C03DC((uint64_t)&STACK[0x1118]);
                                sub_19E3EB09C((void **)&STACK[0x670]);
                                if (SLOBYTE(STACK[0x1117]) < 0) {
                                  operator delete((void *)STACK[0x1100]);
                                }
                                if (SLOBYTE(STACK[0x10FF]) < 0) {
                                  operator delete((void *)STACK[0x10E8]);
                                }
                                if (SLOBYTE(STACK[0x10E7]) < 0) {
                                  operator delete((void *)STACK[0x10D0]);
                                }
                                if (SLOBYTE(STACK[0x10CF]) < 0) {
                                  operator delete((void *)STACK[0x10B8]);
                                }
                                if (SLOBYTE(STACK[0x10B7]) < 0)
                                {
                                  operator delete((void *)STACK[0x10A0]);
                                  if ((SLOBYTE(STACK[0x69F]) & 0x80000000) == 0) {
                                    goto LABEL_206;
                                  }
                                }
                                else if ((SLOBYTE(STACK[0x69F]) & 0x80000000) == 0)
                                {
LABEL_206:
                                  if ((SLOBYTE(STACK[0x6DF]) & 0x80000000) == 0) {
                                    goto LABEL_211;
                                  }
LABEL_210:
                                  operator delete((void *)STACK[0x6C8]);
LABEL_211:
                                  sub_19E3FFB5C((uint64_t)&STACK[0x710]);
                                  sub_19E4C03DC((uint64_t)&STACK[0x11C0]);
                                  sub_19E3EB09C((void **)&STACK[0x6E0]);
                                  if (SLOBYTE(STACK[0x11BF]) < 0) {
                                    operator delete((void *)STACK[0x11A8]);
                                  }
                                  if (SLOBYTE(STACK[0x11A7]) < 0) {
                                    operator delete((void *)STACK[0x1190]);
                                  }
                                  if (SLOBYTE(STACK[0x118F]) < 0) {
                                    operator delete((void *)STACK[0x1178]);
                                  }
                                  if (SLOBYTE(STACK[0x1177]) < 0) {
                                    operator delete((void *)STACK[0x1160]);
                                  }
                                  if (SLOBYTE(STACK[0x115F]) < 0)
                                  {
                                    operator delete((void *)STACK[0x1148]);
                                    if ((SLOBYTE(STACK[0x70F]) & 0x80000000) == 0) {
                                      goto LABEL_221;
                                    }
                                  }
                                  else if ((SLOBYTE(STACK[0x70F]) & 0x80000000) == 0)
                                  {
LABEL_221:
                                    if ((SLOBYTE(STACK[0x74F]) & 0x80000000) == 0) {
                                      goto LABEL_226;
                                    }
LABEL_225:
                                    operator delete((void *)STACK[0x738]);
LABEL_226:
                                    sub_19E3FFB5C((uint64_t)&STACK[0x780]);
                                    sub_19E4C03DC((uint64_t)&STACK[0x1268]);
                                    sub_19E3EB09C((void **)&STACK[0x750]);
                                    if (SLOBYTE(STACK[0x1267]) < 0) {
                                      operator delete((void *)STACK[0x1250]);
                                    }
                                    if (SLOBYTE(STACK[0x124F]) < 0) {
                                      operator delete((void *)STACK[0x1238]);
                                    }
                                    if (SLOBYTE(STACK[0x1237]) < 0) {
                                      operator delete((void *)STACK[0x1220]);
                                    }
                                    if (SLOBYTE(STACK[0x121F]) < 0) {
                                      operator delete((void *)STACK[0x1208]);
                                    }
                                    if (SLOBYTE(STACK[0x1207]) < 0)
                                    {
                                      operator delete((void *)STACK[0x11F0]);
                                      if ((SLOBYTE(STACK[0x77F]) & 0x80000000) == 0) {
                                        goto LABEL_236;
                                      }
                                    }
                                    else if ((SLOBYTE(STACK[0x77F]) & 0x80000000) == 0)
                                    {
LABEL_236:
                                      if ((SLOBYTE(STACK[0x7BF]) & 0x80000000) == 0) {
                                        goto LABEL_241;
                                      }
LABEL_240:
                                      operator delete((void *)STACK[0x7A8]);
LABEL_241:
                                      sub_19E3FFB5C((uint64_t)&STACK[0x7F0]);
                                      sub_19E4C03DC((uint64_t)&STACK[0x1310]);
                                      sub_19E3EB09C((void **)&STACK[0x7C0]);
                                      if (SLOBYTE(STACK[0x130F]) < 0) {
                                        operator delete((void *)STACK[0x12F8]);
                                      }
                                      if (SLOBYTE(STACK[0x12F7]) < 0) {
                                        operator delete((void *)STACK[0x12E0]);
                                      }
                                      if (SLOBYTE(STACK[0x12DF]) < 0) {
                                        operator delete((void *)STACK[0x12C8]);
                                      }
                                      if (SLOBYTE(STACK[0x12C7]) < 0) {
                                        operator delete((void *)STACK[0x12B0]);
                                      }
                                      if (SLOBYTE(STACK[0x12AF]) < 0)
                                      {
                                        operator delete((void *)STACK[0x1298]);
                                        if ((SLOBYTE(STACK[0x7EF]) & 0x80000000) == 0) {
                                          goto LABEL_251;
                                        }
                                      }
                                      else if ((SLOBYTE(STACK[0x7EF]) & 0x80000000) == 0)
                                      {
LABEL_251:
                                        if ((SLOBYTE(STACK[0x82F]) & 0x80000000) == 0) {
                                          goto LABEL_253;
                                        }
                                        goto LABEL_252;
                                      }
                                      operator delete((void *)STACK[0x7D8]);
                                      if ((SLOBYTE(STACK[0x82F]) & 0x80000000) == 0)
                                      {
LABEL_253:
                                        __cxa_guard_abort(&qword_1E9459EC0);
                                        _Unwind_Resume(a1);
                                      }
LABEL_252:
                                      operator delete((void *)STACK[0x818]);
                                      goto LABEL_253;
                                    }
                                    operator delete((void *)STACK[0x768]);
                                    if ((SLOBYTE(STACK[0x7BF]) & 0x80000000) == 0) {
                                      goto LABEL_241;
                                    }
                                    goto LABEL_240;
                                  }
                                  operator delete((void *)STACK[0x6F8]);
                                  if ((SLOBYTE(STACK[0x74F]) & 0x80000000) == 0) {
                                    goto LABEL_226;
                                  }
                                  goto LABEL_225;
                                }
                                operator delete((void *)STACK[0x688]);
                                if ((SLOBYTE(STACK[0x6DF]) & 0x80000000) == 0) {
                                  goto LABEL_211;
                                }
                                goto LABEL_210;
                              }
                              operator delete((void *)STACK[0x618]);
                              if ((SLOBYTE(STACK[0x66F]) & 0x80000000) == 0) {
                                goto LABEL_196;
                              }
                              goto LABEL_195;
                            }
LABEL_179:
                            operator delete((void *)STACK[0x5A8]);
                            if ((SLOBYTE(STACK[0x5FF]) & 0x80000000) == 0) {
                              goto LABEL_181;
                            }
                            goto LABEL_180;
                          }
LABEL_164:
                          operator delete((void *)STACK[0x538]);
                          if ((SLOBYTE(STACK[0x58F]) & 0x80000000) == 0) {
                            goto LABEL_166;
                          }
                          goto LABEL_165;
                        }
LABEL_149:
                        operator delete((void *)STACK[0x4C8]);
                        if ((SLOBYTE(STACK[0x51F]) & 0x80000000) == 0) {
                          goto LABEL_151;
                        }
                        goto LABEL_150;
                      }
LABEL_134:
                      operator delete((void *)STACK[0x458]);
                      if ((SLOBYTE(STACK[0x4AF]) & 0x80000000) == 0) {
                        goto LABEL_136;
                      }
                      goto LABEL_135;
                    }
LABEL_119:
                    operator delete((void *)STACK[0x3E8]);
                    if ((SLOBYTE(STACK[0x43F]) & 0x80000000) == 0) {
                      goto LABEL_121;
                    }
                    goto LABEL_120;
                  }
LABEL_104:
                  operator delete((void *)STACK[0x378]);
                  if ((SLOBYTE(STACK[0x3CF]) & 0x80000000) == 0) {
                    goto LABEL_106;
                  }
                  goto LABEL_105;
                }
LABEL_89:
                operator delete((void *)STACK[0x308]);
                if ((SLOBYTE(STACK[0x35F]) & 0x80000000) == 0) {
                  goto LABEL_91;
                }
                goto LABEL_90;
              }
LABEL_74:
              operator delete((void *)STACK[0x298]);
              if ((SLOBYTE(STACK[0x2EF]) & 0x80000000) == 0) {
                goto LABEL_76;
              }
              goto LABEL_75;
            }
LABEL_59:
            operator delete((void *)STACK[0x228]);
            if ((SLOBYTE(STACK[0x27F]) & 0x80000000) == 0) {
              goto LABEL_61;
            }
            goto LABEL_60;
          }
LABEL_44:
          operator delete(a75);
          if ((SLOBYTE(STACK[0x20F]) & 0x80000000) == 0) {
            goto LABEL_46;
          }
          goto LABEL_45;
        }
LABEL_33:
        operator delete(a62);
        if ((a73 & 0x80000000) == 0) {
          goto LABEL_35;
        }
        goto LABEL_34;
      }
LABEL_22:
      operator delete(a42);
      if ((a58 & 0x80000000) == 0) {
        goto LABEL_24;
      }
      goto LABEL_23;
    }
LABEL_11:
    if ((a38 & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_8:
  if (a27 < 0) {
    goto LABEL_9;
  }
  goto LABEL_11;
}

void sub_19E4BEF34()
{
  if (SLOBYTE(STACK[0x5BF]) < 0) {
    JUMPOUT(0x19E4BEB3CLL);
  }
  JUMPOUT(0x19E4BEA90);
}

void sub_19E4BEF48()
{
  if ((SLOBYTE(STACK[0x5FF]) & 0x80000000) == 0) {
    JUMPOUT(0x19E4BEB54);
  }
  JUMPOUT(0x19E4BEB4CLL);
}

void sub_19E4BEF5C()
{
}

void sub_19E4BEF68()
{
}

void sub_19E4BEF74()
{
}

void sub_19E4BEF80()
{
}

void sub_19E4BEF8C()
{
}

void sub_19E4BEF98()
{
  if (SLOBYTE(STACK[0x62F]) < 0) {
    JUMPOUT(0x19E4BEBF8);
  }
  JUMPOUT(0x19E4BEBE4);
}

void sub_19E4BEFAC()
{
  if ((SLOBYTE(STACK[0x66F]) & 0x80000000) == 0) {
    JUMPOUT(0x19E4BEC10);
  }
  JUMPOUT(0x19E4BEC08);
}

void sub_19E4BEFC0()
{
}

void sub_19E4BEFCC()
{
}

void sub_19E4BEFD8()
{
}

void sub_19E4BEFE4()
{
}

void sub_19E4BEFF0()
{
}

void sub_19E4BEFFC()
{
  if (SLOBYTE(STACK[0x69F]) < 0) {
    JUMPOUT(0x19E4BECB4);
  }
  JUMPOUT(0x19E4BECA0);
}

void sub_19E4BF010()
{
  if ((SLOBYTE(STACK[0x6DF]) & 0x80000000) == 0) {
    JUMPOUT(0x19E4BECCCLL);
  }
  JUMPOUT(0x19E4BECC4);
}

void sub_19E4BF024()
{
}

void sub_19E4BF030()
{
}

void sub_19E4BF03C()
{
}

void sub_19E4BF048()
{
}

void sub_19E4BF054()
{
}

void sub_19E4BF060()
{
  if (SLOBYTE(STACK[0x70F]) < 0) {
    JUMPOUT(0x19E4BED70);
  }
  JUMPOUT(0x19E4BED5CLL);
}

void sub_19E4BF074()
{
  if ((SLOBYTE(STACK[0x74F]) & 0x80000000) == 0) {
    JUMPOUT(0x19E4BED88);
  }
  JUMPOUT(0x19E4BED80);
}

void sub_19E4BF088()
{
}

void sub_19E4BF094()
{
}

void sub_19E4BF0A0()
{
}

void sub_19E4BF0AC()
{
}

void sub_19E4BF0B8()
{
}

void sub_19E4BF0C4()
{
  if (SLOBYTE(STACK[0x77F]) < 0) {
    JUMPOUT(0x19E4BEE28);
  }
  JUMPOUT(0x19E4BEE14);
}

void sub_19E4BF0D8()
{
  if ((SLOBYTE(STACK[0x7BF]) & 0x80000000) == 0) {
    JUMPOUT(0x19E4BEE40);
  }
  JUMPOUT(0x19E4BEE38);
}

void sub_19E4BF0EC()
{
}

void sub_19E4BF0F8()
{
}

void sub_19E4BF10C()
{
}

void sub_19E4BF120()
{
}

void sub_19E4BF134()
{
}

void sub_19E4BF148()
{
  if (SLOBYTE(STACK[0x7EF]) < 0) {
    JUMPOUT(0x19E4BEF20);
  }
  JUMPOUT(0x19E4BEEC8);
}

void sub_19E4BF164()
{
  if ((SLOBYTE(STACK[0x82F]) & 0x80000000) == 0) {
    JUMPOUT(0x19E4BEED8);
  }
  JUMPOUT(0x19E4BEED0);
}

void sub_19E4BF180()
{
}

void sub_19E4BF188()
{
  while (1)
  {
    if (*((char *)v0 - 1) < 0) {
      operator delete((void *)*(v0 - 3));
    }
    v0 -= 3;
    if (v0 == &STACK[0x830]) {
      JUMPOUT(0x19E4BDDE4);
    }
  }
}

void sub_19E4BF1B4()
{
  while (1)
  {
    if (*((char *)v0 - 1) < 0) {
      operator delete((void *)*(v0 - 3));
    }
    v0 -= 3;
    if (v0 == &STACK[0x8A8]) {
      JUMPOUT(0x19E4BDF40);
    }
  }
}

void sub_19E4BF1E0()
{
  while (1)
  {
    if (*((char *)v0 - 1) < 0) {
      operator delete((void *)*(v0 - 3));
    }
    v0 -= 3;
    if (v0 == &STACK[0x920]) {
      JUMPOUT(0x19E4BE038);
    }
  }
}

void sub_19E4BF20C()
{
  while (1)
  {
    if (*((char *)v0 - 1) < 0) {
      operator delete((void *)*(v0 - 3));
    }
    v0 -= 3;
    if (v0 == &STACK[0x998]) {
      JUMPOUT(0x19E4BE148);
    }
  }
}

void sub_19E4BF238()
{
  while (1)
  {
    if (*((char *)v0 - 1) < 0) {
      operator delete((void *)*(v0 - 3));
    }
    v0 -= 3;
    if (v0 == &STACK[0xA10]) {
      JUMPOUT(0x19E4BE270);
    }
  }
}

void sub_19E4BF264()
{
  while (1)
  {
    if (*((char *)v0 - 1) < 0) {
      operator delete((void *)*(v0 - 3));
    }
    v0 -= 3;
    if (v0 == &STACK[0xAB8]) {
      JUMPOUT(0x19E4BE398);
    }
  }
}

void sub_19E4BF290()
{
  while (1)
  {
    if (*((char *)v0 - 1) < 0) {
      operator delete((void *)*(v0 - 3));
    }
    v0 -= 3;
    if (v0 == &STACK[0xB60]) {
      JUMPOUT(0x19E4BE4C4);
    }
  }
}

void sub_19E4BF2BC()
{
  while (1)
  {
    if (*((char *)v0 - 1) < 0) {
      operator delete((void *)*(v0 - 3));
    }
    v0 -= 3;
    if (v0 == &STACK[0xC08]) {
      JUMPOUT(0x19E4BE5F0);
    }
  }
}

void sub_19E4BF2E8()
{
  while (1)
  {
    if (*((char *)v0 - 1) < 0) {
      operator delete((void *)*(v0 - 3));
    }
    v0 -= 3;
    if (v0 == &STACK[0xCB0]) {
      JUMPOUT(0x19E4BE71CLL);
    }
  }
}

void sub_19E4BF314()
{
  while (1)
  {
    if (*((char *)v0 - 1) < 0) {
      operator delete((void *)*(v0 - 3));
    }
    v0 -= 3;
    if (v0 == &STACK[0xD58]) {
      JUMPOUT(0x19E4BE848);
    }
  }
}

void sub_19E4BF340()
{
  while (1)
  {
    if (*((char *)v0 - 1) < 0) {
      operator delete((void *)*(v0 - 3));
    }
    v0 -= 3;
    if (v0 == &STACK[0xE00]) {
      JUMPOUT(0x19E4BE974);
    }
  }
}

void sub_19E4BF36C()
{
  while (1)
  {
    if (*((char *)v0 - 1) < 0) {
      operator delete((void *)*(v0 - 3));
    }
    v0 -= 3;
    if (v0 == &STACK[0xEA8]) {
      JUMPOUT(0x19E4BEAA0);
    }
  }
}

void sub_19E4BF398()
{
  while (1)
  {
    if (*((char *)v0 - 1) < 0) {
      operator delete((void *)*(v0 - 3));
    }
    v0 -= 3;
    if (v0 == &STACK[0xF50]) {
      JUMPOUT(0x19E4BEF38);
    }
  }
}

void sub_19E4BF3C4()
{
  while (1)
  {
    if (*((char *)v0 - 1) < 0) {
      operator delete((void *)*(v0 - 3));
    }
    v0 -= 3;
    if (v0 == &STACK[0xFF8]) {
      JUMPOUT(0x19E4BEF9CLL);
    }
  }
}

void sub_19E4BF3F0()
{
  while (1)
  {
    if (*((char *)v0 - 1) < 0) {
      operator delete((void *)*(v0 - 3));
    }
    v0 -= 3;
    if (v0 == &STACK[0x10A0]) {
      JUMPOUT(0x19E4BF000);
    }
  }
}

void sub_19E4BF420()
{
  while (1)
  {
    if (*((char *)v0 - 1) < 0) {
      operator delete((void *)*(v0 - 3));
    }
    v0 -= 3;
    if (v0 == &STACK[0x1148]) {
      JUMPOUT(0x19E4BF064);
    }
  }
}

void sub_19E4BF450()
{
  while (1)
  {
    if (*((char *)v0 - 1) < 0) {
      operator delete((void *)*(v0 - 3));
    }
    v0 -= 3;
    if (v0 == &STACK[0x11F0]) {
      JUMPOUT(0x19E4BF0C8);
    }
  }
}

void sub_19E4BF480()
{
  while (1)
  {
    if (*((char *)v0 - 1) < 0) {
      operator delete((void *)*(v0 - 3));
    }
    v0 -= 3;
    if (v0 == &STACK[0x1298]) {
      JUMPOUT(0x19E4BF14CLL);
    }
  }
}

void sub_19E4BF4B0(_Unwind_Exception *exception_object)
{
}

void sub_19E4BF4BC(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_19E37B770(exception_object);
}

void sub_19E4BF4D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)a2;
  int v4 = (unsigned __int8 *)(a2 + 16);
  unint64_t v5 = *(unsigned __int8 *)(a2 + 39);
  unint64_t v6 = *(void *)(a2 + 24);
  if ((v5 & 0x80u) == 0) {
    unint64_t v7 = (uint64_t *)(a2 + 16);
  }
  else {
    unint64_t v7 = *(uint64_t **)(a2 + 16);
  }
  if ((v5 & 0x80u) == 0) {
    unint64_t v8 = v5;
  }
  else {
    unint64_t v8 = v6;
  }
  unint64_t v9 = sub_19E37BDA4((uint64_t)&v99, v7, v8);
  v2[1] = v9;
  unint64_t v10 = *(void *)(a1 + 8);
  float v11 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v12 = *(float *)(a1 + 32);
  unint64_t v98 = v9;
  uint64_t v96 = v2;
  if (!v10 || (float)(v12 * (float)v10) < v11)
  {
    char v94 = v4;
    BOOL v13 = 1;
    if (v10 >= 3) {
      BOOL v13 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v14 = v13 | (2 * v10);
    unint64_t v15 = vcvtps_u32_f32(v11 / v12);
    if (v14 <= v15) {
      size_t v16 = v15;
    }
    else {
      size_t v16 = v14;
    }
    if (v16 == 1)
    {
      size_t v16 = 2;
    }
    else if ((v16 & (v16 - 1)) != 0)
    {
      size_t prime = std::__next_prime(v16);
      unint64_t v9 = v98;
      size_t v16 = prime;
      unint64_t v10 = *(void *)(a1 + 8);
    }
    if (v16 > v10) {
      goto LABEL_19;
    }
    if (v16 >= v10) {
      goto LABEL_101;
    }
    unint64_t v25 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (v10 < 3 || (uint8x8_t v26 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
    {
      unint64_t v25 = std::__next_prime(v25);
      unint64_t v9 = v98;
    }
    else
    {
      uint64_t v27 = 1 << -(char)__clz(v25 - 1);
      if (v25 >= 2) {
        unint64_t v25 = v27;
      }
    }
    if (v16 <= v25) {
      size_t v16 = v25;
    }
    if (v16 >= v10)
    {
      unint64_t v10 = *(void *)(a1 + 8);
LABEL_101:
      int v4 = v94;
    }
    else
    {
      if (v16)
      {
LABEL_19:
        if (v16 >> 61) {
          sub_19E37C2B8();
        }
        uint64_t v18 = operator new(8 * v16);
        uint64_t v19 = *(void **)a1;
        *(void *)a1 = v18;
        if (v19) {
          operator delete(v19);
        }
        uint64_t v20 = 0;
        *(void *)(a1 + 8) = v16;
        do
          *(void *)(*(void *)a1 + 8 * v20++) = 0;
        while (v16 != v20);
        uint64_t v21 = *(uint64_t ***)(a1 + 16);
        unint64_t v9 = v98;
        if (!v21) {
          goto LABEL_90;
        }
        size_t v22 = (size_t)v21[1];
        uint8x8_t v23 = (uint8x8_t)vcnt_s8((int8x8_t)v16);
        v23.i16[0] = vaddlv_u8(v23);
        unint64_t v24 = v23.u32[0];
        if (v23.u32[0] > 1uLL)
        {
          if (v22 >= v16) {
            v22 %= v16;
          }
        }
        else
        {
          v22 &= v16 - 1;
        }
        *(void *)(*(void *)a1 + 8 * v22) = a1 + 16;
        char v28 = *v21;
        if (!*v21)
        {
LABEL_90:
          unint64_t v10 = v16;
          goto LABEL_101;
        }
        unint64_t v95 = v23.u32[0];
        while (1)
        {
          size_t v29 = v28[1];
          if (v24 > 1)
          {
            if (v29 >= v16) {
              v29 %= v16;
            }
          }
          else
          {
            v29 &= v16 - 1;
          }
          if (v29 == v22)
          {
            uint64_t v21 = (uint64_t **)v28;
          }
          else
          {
            if (*(void *)(*(void *)a1 + 8 * v29))
            {
              uint64_t v30 = (uint64_t *)*v28;
              size_t v97 = v22;
              if (*v28)
              {
                size_t v31 = v28[3];
                if (*((char *)v28 + 39) >= 0) {
                  uint64_t v32 = *((unsigned __int8 *)v28 + 39);
                }
                else {
                  uint64_t v32 = v28[3];
                }
                if ((*((unsigned char *)v28 + 39) & 0x80) == 0)
                {
                  if (*((unsigned char *)v28 + 39))
                  {
                    CFArrayRef v33 = (uint64_t *)*v28;
                    char v34 = v28;
LABEL_52:
                    uint64_t v30 = v33;
                    uint64_t v35 = *((unsigned __int8 *)v33 + 39);
                    int v36 = (char)v35;
                    if ((v35 & 0x80u) != 0) {
                      uint64_t v35 = v30[3];
                    }
                    if (v32 == v35)
                    {
                      if (v36 >= 0) {
                        char v37 = (unsigned __int8 *)(v30 + 2);
                      }
                      else {
                        char v37 = (unsigned __int8 *)v30[2];
                      }
                      CFStringRef v38 = (unsigned __int8 *)(v28 + 2);
                      uint64_t v39 = *((unsigned __int8 *)v28 + 39);
                      while (*v38 == *v37)
                      {
                        ++v38;
                        ++v37;
                        if (!--v39)
                        {
                          CFArrayRef v33 = (uint64_t *)*v30;
                          char v34 = v30;
                          uint64_t v30 = 0;
                          if (v33) {
                            goto LABEL_52;
                          }
                          goto LABEL_78;
                        }
                      }
                    }
                  }
                  else
                  {
                    uint64_t v49 = *((unsigned __int8 *)v30 + 39);
                    if ((v49 & 0x80u) != 0) {
                      uint64_t v49 = v30[3];
                    }
                    char v34 = v28;
                    if (v49 == *((unsigned __int8 *)v28 + 39))
                    {
                      do
                      {
                        char v34 = v30;
                        uint64_t v30 = (uint64_t *)*v30;
                        if (!v30) {
                          break;
                        }
                        uint64_t v50 = *((unsigned __int8 *)v30 + 39);
                        if ((v50 & 0x80u) != 0) {
                          uint64_t v50 = v30[3];
                        }
                      }
                      while (v32 == v50);
                    }
                  }
                  goto LABEL_78;
                }
                BOOL v40 = *((char *)v30 + 39) < 0;
                uint64_t v41 = *((unsigned __int8 *)v30 + 39);
                if ((v41 & 0x80u) != 0) {
                  uint64_t v41 = v30[3];
                }
                if (v32 == v41)
                {
                  long long v42 = (const void *)v28[2];
                  char v34 = v28;
                  while (1)
                  {
                    char v43 = v30;
                    char v46 = (const void *)v30[2];
                    unsigned int v44 = v30 + 2;
                    unint64_t v45 = v46;
                    if (v40) {
                      uint64_t v47 = v45;
                    }
                    else {
                      uint64_t v47 = v44;
                    }
                    if (memcmp(v42, v47, v31))
                    {
                      uint64_t v30 = v43;
                      goto LABEL_89;
                    }
                    uint64_t v30 = (uint64_t *)*v43;
                    if (!*v43) {
                      break;
                    }
                    BOOL v40 = *((char *)v30 + 39) < 0;
                    uint64_t v48 = *((unsigned __int8 *)v30 + 39);
                    if ((v48 & 0x80u) != 0) {
                      uint64_t v48 = v30[3];
                    }
                    char v34 = v43;
                    unint64_t v9 = v98;
                    if (v32 != v48) {
                      goto LABEL_78;
                    }
                  }
                  char v34 = v43;
LABEL_89:
                  unint64_t v9 = v98;
                  goto LABEL_78;
                }
              }
              char v34 = v28;
LABEL_78:
              std::__shared_weak_count *v21 = v30;
              *char v34 = **(void **)(*(void *)a1 + 8 * v29);
              **(void **)(*(void *)a1 + 8 * v29) = v28;
              size_t v22 = v97;
              unint64_t v24 = v95;
              goto LABEL_38;
            }
            *(void *)(*(void *)a1 + 8 * v29) = v21;
            uint64_t v21 = (uint64_t **)v28;
            size_t v22 = v29;
          }
LABEL_38:
          char v28 = *v21;
          if (!*v21)
          {
            unint64_t v10 = v16;
            uint64_t v2 = v96;
            goto LABEL_101;
          }
        }
      }
      CFIndex v51 = *(void **)a1;
      *(void *)a1 = 0;
      int v4 = v94;
      if (v51)
      {
        operator delete(v51);
        unint64_t v9 = v98;
      }
      unint64_t v10 = 0;
      *(void *)(a1 + 8) = 0;
    }
  }
  uint8x8_t v52 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
  v52.i16[0] = vaddlv_u8(v52);
  unint64_t v53 = v52.u32[0];
  if (v52.u32[0] > 1uLL)
  {
    unint64_t v54 = v9;
    if (v10 <= v9) {
      unint64_t v54 = v9 % v10;
    }
  }
  else
  {
    unint64_t v54 = (v10 - 1) & v9;
  }
  char v55 = *(uint64_t **)(*(void *)a1 + 8 * v54);
  if (v55)
  {
    char v56 = *((unsigned char *)v2 + 39);
    if (v56 >= 0) {
      uint64_t v57 = *((unsigned __int8 *)v2 + 39);
    }
    else {
      uint64_t v57 = v2[3];
    }
    if (v56 < 0) {
      int v4 = (unsigned __int8 *)v2[2];
    }
    if (v52.u32[0] >= 2uLL)
    {
      int v78 = 0;
      do
      {
        char v61 = v55;
        char v55 = (uint64_t *)*v55;
        if (!v55) {
          break;
        }
        unint64_t v81 = v55[1];
        unint64_t v82 = v81;
        if (v81 >= v10) {
          unint64_t v82 = v81 % v10;
        }
        if (v82 != v54) {
          break;
        }
        if (v81 == v9
          && ((uint64_t v83 = *((unsigned __int8 *)v55 + 39), (v83 & 0x80u) == 0)
            ? (uint64_t v84 = *((unsigned __int8 *)v55 + 39))
            : (uint64_t v84 = v55[3]),
              v84 == v57))
        {
          char v85 = (const void **)(v55 + 2);
          if ((v83 & 0x80) != 0)
          {
            int v93 = memcmp(*v85, v4, v55[3]);
            unint64_t v9 = v98;
            BOOL v79 = v93 == 0;
          }
          else if (*((unsigned char *)v55 + 39))
          {
            uint64_t v86 = v83 - 1;
            char v87 = v4;
            do
            {
              int v89 = *(unsigned __int8 *)v85;
              char v85 = (const void **)((char *)v85 + 1);
              int v88 = v89;
              int v91 = *v87++;
              int v90 = v91;
              BOOL v72 = v86-- != 0;
              char v92 = v72;
              BOOL v74 = v88 == v90;
              BOOL v79 = v88 == v90;
            }
            while (v74 && (v92 & 1) != 0);
          }
          else
          {
            BOOL v79 = 1;
          }
        }
        else
        {
          BOOL v79 = 0;
        }
        int v80 = v78 & !v79;
        v78 |= v79;
      }
      while (v80 != 1);
    }
    else
    {
      int v58 = 0;
      do
      {
        char v61 = v55;
        char v55 = (uint64_t *)*v55;
        if (!v55) {
          break;
        }
        uint64_t v62 = v55[1];
        if ((v62 & (v10 - 1)) != v54) {
          break;
        }
        if (v62 == v9
          && ((uint64_t v63 = *((unsigned __int8 *)v55 + 39), (v63 & 0x80u) == 0)
            ? (uint64_t v64 = *((unsigned __int8 *)v55 + 39))
            : (uint64_t v64 = v55[3]),
              v64 == v57))
        {
          long long v65 = (const void **)(v55 + 2);
          if ((v63 & 0x80) != 0)
          {
            int v75 = memcmp(*v65, v4, v55[3]);
            unint64_t v9 = v98;
            BOOL v59 = v75 == 0;
          }
          else if (*((unsigned char *)v55 + 39))
          {
            uint64_t v66 = v63 - 1;
            char v67 = v4;
            do
            {
              int v69 = *(unsigned __int8 *)v65;
              long long v65 = (const void **)((char *)v65 + 1);
              int v68 = v69;
              int v71 = *v67++;
              int v70 = v71;
              BOOL v72 = v66-- != 0;
              char v73 = v72;
              BOOL v74 = v68 == v70;
              BOOL v59 = v68 == v70;
            }
            while (v74 && (v73 & 1) != 0);
          }
          else
          {
            BOOL v59 = 1;
          }
        }
        else
        {
          BOOL v59 = 0;
        }
        char v60 = v58 & !v59;
        v58 |= v59;
      }
      while ((v60 & 1) == 0);
    }
  }
  else
  {
    char v61 = 0;
  }
  unint64_t v76 = v96[1];
  if (v53 > 1)
  {
    if (v76 >= v10) {
      v76 %= v10;
    }
  }
  else
  {
    v76 &= v10 - 1;
  }
  if (!v61)
  {
    void *v96 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v96;
    *(void *)(*(void *)a1 + 8 * v76) = a1 + 16;
    if (!*v96) {
      goto LABEL_178;
    }
    unint64_t v77 = *(void *)(*v96 + 8);
    if (v53 > 1)
    {
      if (v77 >= v10) {
        v77 %= v10;
      }
    }
    else
    {
      v77 &= v10 - 1;
    }
LABEL_177:
    *(void *)(*(void *)a1 + 8 * v77) = v96;
    goto LABEL_178;
  }
  void *v96 = *v61;
  *char v61 = v96;
  if (*v96)
  {
    unint64_t v77 = *(void *)(*v96 + 8);
    if (v53 > 1)
    {
      if (v77 >= v10) {
        v77 %= v10;
      }
    }
    else
    {
      v77 &= v10 - 1;
    }
    if (v77 != v76) {
      goto LABEL_177;
    }
  }
LABEL_178:
  ++*(void *)(a1 + 24);
}

uint64_t *sub_19E4BFC18(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      uint64_t v3 = *(void *)(v2 + 40);
      if (v3)
      {
        uint64_t v4 = *(void *)(v2 + 48);
        unint64_t v5 = *(void **)(v2 + 40);
        if (v4 != v3)
        {
          do
          {
            if (*(char *)(v4 - 1) < 0) {
              operator delete(*(void **)(v4 - 24));
            }
            v4 -= 24;
          }
          while (v4 != v3);
          unint64_t v5 = *(void **)(v2 + 40);
        }
        *(void *)(v2 + 48) = v3;
        operator delete(v5);
      }
      if (*(char *)(v2 + 39) < 0) {
        operator delete(*(void **)(v2 + 16));
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t *sub_19E4BFCB8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      sub_19E3FFB5C(v2 + 40);
      if (*(char *)(v2 + 39) < 0) {
        operator delete(*(void **)(v2 + 16));
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}

unsigned char *sub_19E4BFD10(unsigned char *__dst, long long *a2, long long **a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_19E39369C(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v5;
  }
  *((void *)__dst + 3) = 0;
  *((void *)__dst + 4) = 0;
  *((void *)__dst + 5) = 0;
  sub_19E3938C0(__dst + 24, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
  return __dst;
}

void sub_19E4BFD8C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E4BFDA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 48 * a3;
    do
    {
      sub_19E4C0594(a1, a2, a2);
      a2 += 48;
      v5 -= 48;
    }
    while (v5);
  }
  return a1;
}

void sub_19E4BFE10(_Unwind_Exception *a1)
{
  sub_19E3FFB5C(v1);
  _Unwind_Resume(a1);
}

void *sub_19E4BFE24(void *__dst, long long *a2, uint64_t a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_19E39369C(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v5;
  }
  sub_19E4C0460((uint64_t)(__dst + 3), a3);
  return __dst;
}

void sub_19E4BFE84(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E4BFEA0(unsigned __int8 *a1, uint64_t a2)
{
  xmmword_1E9459E98 = 0u;
  *(_OWORD *)&qword_1E9459EA8 = 0u;
  dword_1E9459EB8 = 1065353216;
  if (!a2) {
    return;
  }
  uint64_t v3 = a1;
  uint64_t v4 = &a1[64 * a2];
  unint64_t v5 = 0x1E9459000;
  while (2)
  {
    int v6 = (char)v3[23];
    if (v6 >= 0) {
      unint64_t v7 = (uint64_t *)v3;
    }
    else {
      unint64_t v7 = *(uint64_t **)v3;
    }
    if (v6 >= 0) {
      unint64_t v8 = v3[23];
    }
    else {
      unint64_t v8 = *((void *)v3 + 1);
    }
    unint64_t v9 = sub_19E37BDA4((uint64_t)v42, v7, v8);
    unint64_t v10 = v9;
    unint64_t v11 = *((void *)&xmmword_1E9459E98 + 1);
    if (!*((void *)&xmmword_1E9459E98 + 1)) {
      goto LABEL_60;
    }
    uint8x8_t v12 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_1E9459E98 + 8));
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v2 = v9;
      if (v9 >= *((void *)&xmmword_1E9459E98 + 1)) {
        unint64_t v2 = v9 % *((void *)&xmmword_1E9459E98 + 1);
      }
    }
    else
    {
      unint64_t v2 = (*((void *)&xmmword_1E9459E98 + 1) - 1) & v9;
    }
    BOOL v13 = *(uint64_t ***)(*(void *)(v5 + 3736) + 8 * v2);
    if (!v13) {
      goto LABEL_60;
    }
    unint64_t v14 = *v13;
    if (!*v13) {
      goto LABEL_60;
    }
    unsigned __int8 v15 = v3[23];
    if ((v15 & 0x80u) == 0) {
      uint64_t v16 = v3[23];
    }
    else {
      uint64_t v16 = *((void *)v3 + 1);
    }
    if ((v15 & 0x80u) == 0) {
      unint64_t v17 = v3;
    }
    else {
      unint64_t v17 = *(unsigned __int8 **)v3;
    }
    if (v12.u32[0] < 2uLL)
    {
      while (1)
      {
        uint64_t v23 = v14[1];
        if (v23 == v10)
        {
          uint64_t v24 = *((unsigned __int8 *)v14 + 39);
          if ((v24 & 0x80u) == 0) {
            uint64_t v25 = *((unsigned __int8 *)v14 + 39);
          }
          else {
            uint64_t v25 = v14[3];
          }
          if (v25 == v16)
          {
            uint8x8_t v26 = (const void **)(v14 + 2);
            if ((v24 & 0x80) != 0)
            {
              if (!memcmp(*v26, v17, v14[3])) {
                goto LABEL_5;
              }
            }
            else
            {
              if (!*((unsigned char *)v14 + 39)) {
                goto LABEL_5;
              }
              uint64_t v27 = v17;
              while (*(unsigned __int8 *)v26 == *v27)
              {
                uint8x8_t v26 = (const void **)((char *)v26 + 1);
                ++v27;
                if (!--v24) {
                  goto LABEL_5;
                }
              }
            }
          }
        }
        else if ((v23 & (v11 - 1)) != v2)
        {
          goto LABEL_59;
        }
        unint64_t v14 = (uint64_t *)*v14;
        if (!v14) {
          goto LABEL_59;
        }
      }
    }
    do
    {
      unint64_t v18 = v14[1];
      if (v18 == v10)
      {
        uint64_t v19 = *((unsigned __int8 *)v14 + 39);
        if ((v19 & 0x80u) == 0) {
          uint64_t v20 = *((unsigned __int8 *)v14 + 39);
        }
        else {
          uint64_t v20 = v14[3];
        }
        if (v20 == v16)
        {
          uint64_t v21 = (const void **)(v14 + 2);
          if ((v19 & 0x80) != 0)
          {
            if (!memcmp(*v21, v17, v14[3])) {
              goto LABEL_5;
            }
          }
          else
          {
            if (!*((unsigned char *)v14 + 39)) {
              goto LABEL_5;
            }
            size_t v22 = v17;
            while (*(unsigned __int8 *)v21 == *v22)
            {
              uint64_t v21 = (const void **)((char *)v21 + 1);
              ++v22;
              if (!--v19) {
                goto LABEL_5;
              }
            }
          }
        }
        goto LABEL_28;
      }
      if (v18 >= v11) {
        v18 %= v11;
      }
      if (v18 != v2) {
        break;
      }
LABEL_28:
      unint64_t v14 = (uint64_t *)*v14;
    }
    while (v14);
LABEL_59:
    unint64_t v5 = 0x1E9459000uLL;
LABEL_60:
    char v28 = operator new(0x50uLL);
    size_t v29 = v28;
    v42[0] = v28;
    v42[1] = &qword_1E9459EA8;
    char v43 = 0;
    *char v28 = 0;
    v28[1] = v10;
    if ((char)v3[23] < 0)
    {
      sub_19E39369C((unsigned char *)v28 + 16, *(void **)v3, *((void *)v3 + 1));
    }
    else
    {
      long long v30 = *(_OWORD *)v3;
      v28[4] = *((void *)v3 + 2);
      *((_OWORD *)v28 + 1) = v30;
    }
    sub_19E4C0460((uint64_t)(v29 + 5), (uint64_t)(v3 + 24));
    char v43 = 1;
    float v31 = (float)(unint64_t)(qword_1E9459EB0 + 1);
    if (!v11 || (float)(*(float *)&dword_1E9459EB8 * (float)v11) < v31)
    {
      BOOL v32 = (v11 & (v11 - 1)) != 0;
      if (v11 < 3) {
        BOOL v32 = 1;
      }
      unint64_t v33 = v32 | (2 * v11);
      unint64_t v34 = vcvtps_u32_f32(v31 / *(float *)&dword_1E9459EB8);
      if (v33 <= v34) {
        size_t prime = v34;
      }
      else {
        size_t prime = v33;
      }
      if (prime == 1)
      {
        size_t prime = 2;
      }
      else if ((prime & (prime - 1)) != 0)
      {
        size_t prime = std::__next_prime(prime);
      }
      size_t v36 = *((void *)&xmmword_1E9459E98 + 1);
      if (prime > *((void *)&xmmword_1E9459E98 + 1)) {
        goto LABEL_75;
      }
      if (prime < *((void *)&xmmword_1E9459E98 + 1))
      {
        unint64_t v37 = vcvtps_u32_f32((float)(unint64_t)qword_1E9459EB0 / *(float *)&dword_1E9459EB8);
        if (*((void *)&xmmword_1E9459E98 + 1) < 3uLL
          || (uint8x8_t v38 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&xmmword_1E9459E98 + 8)),
              v38.i16[0] = vaddlv_u8(v38),
              v38.u32[0] > 1uLL))
        {
          unint64_t v37 = std::__next_prime(v37);
        }
        else
        {
          uint64_t v39 = 1 << -(char)__clz(v37 - 1);
          if (v37 >= 2) {
            unint64_t v37 = v39;
          }
        }
        if (prime <= v37) {
          size_t prime = v37;
        }
        if (prime < v36) {
LABEL_75:
        }
          sub_19E3CEFD8((uint64_t)&xmmword_1E9459E98, prime);
      }
      unint64_t v11 = *((void *)&xmmword_1E9459E98 + 1);
      if ((*((void *)&xmmword_1E9459E98 + 1) & (*((void *)&xmmword_1E9459E98 + 1) - 1)) != 0)
      {
        if (v10 >= *((void *)&xmmword_1E9459E98 + 1)) {
          unint64_t v2 = v10 % *((void *)&xmmword_1E9459E98 + 1);
        }
        else {
          unint64_t v2 = v10;
        }
      }
      else
      {
        unint64_t v2 = (*((void *)&xmmword_1E9459E98 + 1) - 1) & v10;
      }
    }
    BOOL v40 = *(void **)(*(void *)(v5 + 3736) + 8 * v2);
    if (v40)
    {
      *(void *)v42[0] = *v40;
      *BOOL v40 = v42[0];
    }
    else
    {
      *(void *)v42[0] = qword_1E9459EA8;
      qword_1E9459EA8 = v42[0];
      *(void *)(*(void *)(v5 + 3736) + 8 * v2) = &qword_1E9459EA8;
      if (*(void *)v42[0])
      {
        unint64_t v41 = *(void *)(*(void *)v42[0] + 8);
        if ((v11 & (v11 - 1)) != 0)
        {
          if (v41 >= v11) {
            v41 %= v11;
          }
        }
        else
        {
          v41 &= v11 - 1;
        }
        *(void *)(*(void *)(v5 + 3736) + 8 * v41) = v42[0];
      }
    }
    ++qword_1E9459EB0;
LABEL_5:
    v3 += 64;
    unint64_t v5 = 0x1E9459000uLL;
    if (v3 != v4) {
      continue;
    }
    break;
  }
}

void sub_19E4C0314(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E4BFCB8((uint64_t *)va);
  uint64_t v3 = (void **)qword_1E9459EA8;
  if (qword_1E9459EA8)
  {
    do
    {
      unint64_t v5 = (void **)*v3;
      sub_19E3FFB5C((uint64_t)(v3 + 5));
      if (*((char *)v3 + 39) < 0) {
        operator delete(v3[2]);
      }
      operator delete(v3);
      uint64_t v3 = v5;
    }
    while (v5);
  }
  uint64_t v4 = (void *)xmmword_1E9459E98;
  *(void *)&xmmword_1E9459E98 = 0;
  if (v4) {
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_19E4C03A0(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_19E4C03DC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void **)(a1 + 24);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      uint64_t v4 = *(void **)(a1 + 24);
    }
    *(void *)(a1 + 32) = v2;
    operator delete(v4);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_19E4C0460(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    sub_19E3CEFD8(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
    sub_19E4C0594(a1, (uint64_t)(i + 2), (uint64_t)(i + 2));
  return a1;
}

void sub_19E4C057C(_Unwind_Exception *a1)
{
  sub_19E3FFB5C(v1);
  _Unwind_Resume(a1);
}

void sub_19E4C0594(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int8x8_t v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = sub_19E37BDA4((uint64_t)v41, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    BOOL v13 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      unint64_t v14 = *v13;
      if (*v13)
      {
        char v15 = v5[23];
        if (v15 >= 0) {
          uint64_t v16 = v5[23];
        }
        else {
          uint64_t v16 = *((void *)v5 + 1);
        }
        if (v15 < 0) {
          int8x8_t v5 = *(unsigned char **)v5;
        }
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v22 = v14[1];
            if (v22 == v10)
            {
              uint64_t v23 = *((unsigned __int8 *)v14 + 39);
              if ((v23 & 0x80u) == 0) {
                uint64_t v24 = *((unsigned __int8 *)v14 + 39);
              }
              else {
                uint64_t v24 = v14[3];
              }
              if (v24 == v16)
              {
                uint64_t v25 = (const void **)(v14 + 2);
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp(*v25, v5, v14[3])) {
                    return;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v14 + 39)) {
                    return;
                  }
                  for (uint64_t i = v5; *(unsigned __int8 *)v25 == *i; ++i)
                  {
                    uint64_t v25 = (const void **)((char *)v25 + 1);
                    if (!--v23) {
                      return;
                    }
                  }
                }
              }
            }
            else if ((v22 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            unint64_t v14 = (uint64_t *)*v14;
            if (!v14) {
              goto LABEL_51;
            }
          }
        }
        do
        {
          unint64_t v17 = v14[1];
          if (v17 == v10)
          {
            uint64_t v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = *((unsigned __int8 *)v14 + 39);
            }
            else {
              uint64_t v19 = v14[3];
            }
            if (v19 == v16)
            {
              uint64_t v20 = (const void **)(v14 + 2);
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp(*v20, v5, v14[3])) {
                  return;
                }
              }
              else
              {
                if (!*((unsigned char *)v14 + 39)) {
                  return;
                }
                for (unint64_t j = v5; *(unsigned __int8 *)v20 == *j; ++j)
                {
                  uint64_t v20 = (const void **)((char *)v20 + 1);
                  if (!--v18) {
                    return;
                  }
                }
              }
            }
          }
          else
          {
            if (v17 >= v11) {
              v17 %= v11;
            }
            if (v17 != v3) {
              break;
            }
          }
          unint64_t v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  uint64_t v27 = (char *)operator new(0x40uLL);
  char v28 = v27;
  v41[0] = v27;
  v41[1] = a1 + 16;
  char v42 = 0;
  *(void *)uint64_t v27 = 0;
  *((void *)v27 + 1) = v10;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_19E39369C(v27 + 16, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *((_OWORD *)v27 + 1) = *(_OWORD *)a3;
    *((void *)v27 + 4) = *(void *)(a3 + 16);
  }
  *((void *)v28 + 5) = 0;
  *((void *)v28 + 6) = 0;
  *((void *)v28 + 7) = 0;
  sub_19E3938C0(v28 + 40, *(long long **)(a3 + 24), *(long long **)(a3 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 32) - *(void *)(a3 + 24)) >> 3));
  char v42 = 1;
  float v29 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v30 = *(float *)(a1 + 32);
  if (!v11 || (float)(v30 * (float)v11) < v29)
  {
    BOOL v31 = 1;
    if (v11 >= 3) {
      BOOL v31 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v32 = v31 | (2 * v11);
    unint64_t v33 = vcvtps_u32_f32(v29 / v30);
    if (v32 <= v33) {
      size_t prime = v33;
    }
    else {
      size_t prime = v32;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v35 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v35) {
      goto LABEL_66;
    }
    if (prime < *(void *)&v35)
    {
      unint64_t v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v35 < 3uLL || (uint8x8_t v37 = (uint8x8_t)vcnt_s8(v35), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        unint64_t v36 = std::__next_prime(v36);
      }
      else
      {
        uint64_t v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2) {
          unint64_t v36 = v38;
        }
      }
      if (prime <= v36) {
        size_t prime = v36;
      }
      if (prime < *(void *)&v35) {
LABEL_66:
      }
        sub_19E3CEFD8(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v3 = v10 % v11;
      }
      else {
        unint64_t v3 = v10;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v10;
    }
  }
  uint64_t v39 = *(void **)(*(void *)a1 + 8 * v3);
  if (v39)
  {
    *(void *)v41[0] = *v39;
    *uint64_t v39 = v41[0];
  }
  else
  {
    *(void *)v41[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v41[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v41[0])
    {
      unint64_t v40 = *(void *)(*(void *)v41[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v40 >= v11) {
          v40 %= v11;
        }
      }
      else
      {
        v40 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v40) = v41[0];
    }
  }
  ++*(void *)(a1 + 24);
}

void sub_19E4C09CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E4BFC18((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E4C0A00()
{
  return 1;
}

uint64_t sub_19E4C0A08(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a2 + 24);
  switch((int)v2)
  {
    case 0:
      unint64_t v3 = *(uint64_t (**)(void))(*(void *)a1 + 32);
      return v3();
    case 1:
      goto LABEL_6;
    case 2:
      uint64_t v2 = 2;
LABEL_6:
      uint64_t result = v2;
      break;
    case 3:
      uint64_t result = sub_19E4AA6F8(a2);
      break;
    default:
      __assert_rtn("convert", "LinguisticTokenConverter.cpp", 293, "false");
  }
  return result;
}

uint64_t sub_19E4C0AD8(uint64_t a1, uint64_t a2, const void **a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v115 = *MEMORY[0x1E4F143B8];
  unint64_t v9 = *a3;
  *a3 = 0;
  if (v9) {
    CFRelease(v9);
  }
  char v10 = *(unsigned char *)(a2 + 23);
  if (v10 >= 0) {
    unint64_t v11 = (const UInt8 *)a2;
  }
  else {
    unint64_t v11 = *(const UInt8 **)a2;
  }
  if (v11)
  {
    if (v10 >= 0) {
      CFIndex v12 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      CFIndex v12 = *(void *)(a2 + 8);
    }
    CFStringRef v13 = CFStringCreateWithBytes(0, v11, v12, 0x8000100u, 0);
    CFTypeRef v105 = v13;
    if (!v13)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x19F3BD790](exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  else
  {
    CFStringRef v13 = 0;
    CFTypeRef v105 = 0;
  }
  uint64_t v15 = *(void *)(a1 + 16);
  if (*(_DWORD *)(a1 + 12)) {
    uint64_t v15 = *(void *)(v15 + 464);
  }
  uint64_t v16 = *(const void **)(v15 + 176);
  if (v16) {
    CFRetain(v16);
  }
  sub_19E40100C(&theArray, v16);
  CFArrayRef v17 = theArray;
  if (theArray)
  {
    CFIndex Count = CFArrayGetCount(theArray);
    CFIndex v19 = Count;
    CFArrayRef v20 = theArray;
    if (theArray)
    {
      CFIndex v21 = CFArrayGetCount(theArray);
      if (!v19) {
        goto LABEL_43;
      }
    }
    else
    {
      CFIndex v21 = 0;
      if (!Count) {
        goto LABEL_43;
      }
    }
    if (v17 != v20)
    {
      unint64_t v25 = 0;
      while (1)
      {
        sub_19E4010C4(v113, v17, v25);
        if (v13) {
          CFRetain(v13);
        }
        __s1[0] = (void *)v13;
        CFLocaleRef v26 = v113[0];
        BOOL v27 = sub_19E535A0C((CFStringRef *)__s1, v113[0]);
        if (v13) {
          CFRelease(v13);
        }
        if (v26) {
          CFRelease(v26);
        }
        if (v27) {
          break;
        }
        if (v19 == ++v25) {
          goto LABEL_43;
        }
      }
LABEL_65:
      if (*(_DWORD *)(a1 + 12) == 1)
      {
        uint64_t v38 = sub_19E4B5FF0(*(void *)(*(void *)(a1 + 16) + 464), a2);
      }
      else
      {
        uint64_t v39 = *(void **)(a1 + 16);
        if (a6 == 2) {
          uint64_t v38 = sub_19E414EA4(v39, a2);
        }
        else {
          uint64_t v38 = sub_19E3FE284(v39, a2, 0);
        }
      }
      uint64_t v37 = v38;
      if (!v38)
      {
        sub_19E4C198C(a1, a2);
        uint64_t v42 = sub_19E4C1DAC((unsigned int **)(a1 + 40), a3, a4, a5, *(void **)(a1 + 16));
        goto LABEL_189;
      }
      goto LABEL_190;
    }
    unint64_t v22 = 0;
    while (v21 != v22)
    {
      sub_19E4010C4(v113, v17, v22);
      if (v13) {
        CFRetain(v13);
      }
      __s1[0] = (void *)v13;
      CFLocaleRef v23 = v113[0];
      BOOL v24 = sub_19E535A0C((CFStringRef *)__s1, v113[0]);
      if (v13) {
        CFRelease(v13);
      }
      if (v23) {
        CFRelease(v23);
      }
      if (v24) {
        goto LABEL_65;
      }
      if (v19 == ++v22) {
        break;
      }
    }
  }
LABEL_43:
  for (uint64_t i = a5; ; --i)
  {
    if ((int)i < 1) {
      goto LABEL_56;
    }
    int v29 = *(_DWORD *)(a4 - 4 + 4 * i);
    if (v29 != 19 && v29 != 34 && (v29 & 0xFFFFFFFD) != 0x28) {
      break;
    }
  }
  uint64_t v30 = 0;
  do
  {
    int v31 = dword_19E57A5B4[v30];
    if (v29 == v31) {
      break;
    }
  }
  while (v30++ != 9);
  if (v29 == v31)
  {
    sub_19E4C198C(a1, a2);
    uint64_t v33 = *(void *)(a1 + 16);
    char v99 = (void *)v33;
    if (*(_DWORD *)(a1 + 12)) {
      unint64_t v34 = (const void **)(*(void *)(v33 + 464) + 176);
    }
    else {
      unint64_t v34 = (const void **)(v33 + 176);
    }
    char v43 = *v34;
    uint64_t v44 = *(void *)(a1 + 40);
    uint64_t v45 = *(void *)(a1 + 48);
    char v46 = (unsigned int **)(a1 + 40);
    if (v44 == v45) {
      goto LABEL_105;
    }
    while (1)
    {
      CFStringRef v49 = *(const __CFString **)(v44 + 24);
      if (!v49)
      {
        unint64_t v98 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x19F3BD790](v98, "Could not construct");
        __cxa_throw(v98, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      CFTypeID TypeID = CFStringGetTypeID();
      if (TypeID == CFGetTypeID(v49))
      {
        sub_19E3C6934(__s1, v49);
        CFIndex v51 = (void *)BYTE7(v108);
      }
      else
      {
        CFIndex v51 = 0;
        __s1[0] = 0;
        BYTE7(v108) = 0;
      }
      uint8x8_t v52 = *(void **)(a2 + 8);
      int v53 = *(char *)(a2 + 23);
      if ((char)v51 >= 0) {
        unint64_t v54 = v51;
      }
      else {
        unint64_t v54 = __s1[1];
      }
      if (v53 >= 0) {
        uint8x8_t v52 = (void *)*(unsigned __int8 *)(a2 + 23);
      }
      if (v54 == v52)
      {
        if (v53 >= 0) {
          char v55 = (const UInt8 *)a2;
        }
        else {
          char v55 = *(const UInt8 **)a2;
        }
        if ((char)v51 < 0)
        {
          uint64_t v47 = __s1[0];
          int v48 = memcmp(__s1[0], v55, (size_t)__s1[1]);
          operator delete(v47);
          if (!v48) {
            goto LABEL_104;
          }
          goto LABEL_81;
        }
        if (!v51) {
          goto LABEL_104;
        }
        uint64_t v56 = 0;
        while (*((unsigned __int8 *)__s1 + v56) == v55[v56])
        {
          if (v51 == (void *)++v56) {
            goto LABEL_104;
          }
        }
      }
      if ((char)v51 < 0) {
        operator delete(__s1[0]);
      }
LABEL_81:
      v44 += 32;
      if (v44 == v45)
      {
        uint64_t v44 = v45;
LABEL_104:
        char v46 = (unsigned int **)(a1 + 40);
LABEL_105:
        uint64_t v57 = *(unsigned int **)(a1 + 48);
        if ((unsigned int *)v44 != v57)
        {
          if (*v46 == v57) {
            __assert_rtn("trimCandidates", "LinguisticTokenConverter.cpp", 121, "!candidates.empty()");
          }
          CFStringRef theString = *(CFStringRef *)(v44 + 24);
          *(_OWORD *)__s1 = 0u;
          long long v108 = 0u;
          int v109 = 1065353216;
          if (v43) {
            CFRetain(v43);
          }
          int v58 = v46;
          sub_19E40100C(&v106, v43);
          CFArrayRef v59 = v106;
          if (v106)
          {
            CFIndex v60 = CFArrayGetCount(v106);
            CFIndex v61 = v60;
            CFArrayRef v62 = v106;
            if (v106)
            {
              CFIndex v100 = CFArrayGetCount(v106);
              if (!v61) {
                goto LABEL_132;
              }
            }
            else
            {
              CFIndex v100 = 0;
              if (!v60) {
                goto LABEL_132;
              }
            }
            CFAllocatorRef v63 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
            if (v59 == v62)
            {
              unint64_t v64 = 0;
              do
              {
                if (v100 == v64) {
                  break;
                }
                sub_19E4010C4(v113, v59, v64);
                CFStringRef v65 = theString;
                CFLocaleRef v66 = v113[0];
                CFIndex Length = CFStringGetLength(theString);
                CFStringRef MutableCopy = CFStringCreateMutableCopy(v63, Length, v65);
                CFStringLowercase(MutableCopy, v66);
                sub_19E372124(cf, MutableCopy);
                sub_19E4C21BC((uint64_t)__s1, cf, cf);
                if (cf[0]) {
                  CFRelease(cf[0]);
                }
                CFStringRef v69 = theString;
                CFIndex v70 = CFStringGetLength(theString);
                int v71 = CFStringCreateMutableCopy(v63, v70, v69);
                CFStringCapitalize(v71, v66);
                sub_19E372124(cf, v71);
                sub_19E4C21BC((uint64_t)__s1, cf, cf);
                if (cf[0]) {
                  CFRelease(cf[0]);
                }
                if (v66) {
                  CFRelease(v66);
                }
                ++v64;
              }
              while (v61 != v64);
            }
            else
            {
              unint64_t v72 = 0;
              do
              {
                sub_19E4010C4(v113, v59, v72);
                CFStringRef v73 = theString;
                CFLocaleRef v74 = v113[0];
                CFIndex v75 = CFStringGetLength(theString);
                unint64_t v76 = CFStringCreateMutableCopy(v63, v75, v73);
                CFStringLowercase(v76, v74);
                sub_19E372124(cf, v76);
                sub_19E4C21BC((uint64_t)__s1, cf, cf);
                if (cf[0]) {
                  CFRelease(cf[0]);
                }
                CFStringRef v77 = theString;
                CFIndex v78 = CFStringGetLength(theString);
                BOOL v79 = CFStringCreateMutableCopy(v63, v78, v77);
                CFStringCapitalize(v79, v74);
                sub_19E372124(cf, v79);
                sub_19E4C21BC((uint64_t)__s1, cf, cf);
                if (cf[0]) {
                  CFRelease(cf[0]);
                }
                if (v74) {
                  CFRelease(v74);
                }
                ++v72;
              }
              while (v61 != v72);
            }
          }
LABEL_132:
          char v112 = 0;
          int v80 = (uint64_t **)v108;
          char v46 = v58;
          if ((void)v108)
          {
            while (CFStringCompare(theString, (CFStringRef)v80[2], 0))
            {
              int v80 = (uint64_t **)*v80;
              if (!v80) {
                goto LABEL_135;
              }
            }
            CFLocaleRef v81 = (const __CFLocale *)&unk_1EF0B51E8;
            p_CFStringRef theString = (const __CFLocale *)__s1;
          }
          else
          {
LABEL_135:
            CFLocaleRef v81 = (const __CFLocale *)&unk_1EF0B5240;
            p_CFStringRef theString = (const __CFLocale *)&theString;
          }
          v113[0] = v81;
          v113[1] = p_theString;
          uint64_t v114 = v113;
          sub_19E4C24E8(v113, cf);
          if (v114 == v113)
          {
            (*((void (**)(const __CFLocale **))v113[0] + 4))(v113);
          }
          else if (v114)
          {
            (*((void (**)(const __CFLocale **))*v114 + 5))(v114);
          }
          uint64_t v84 = *(long long **)(a1 + 40);
          uint64_t v83 = *(long long **)(a1 + 48);
          uint64_t v85 = (uint64_t)v112;
          if (v112)
          {
            if (v112 != cf)
            {
              uint64_t v85 = (*((uint64_t (**)(CFTypeRef *))*v112 + 2))(v112);
              goto LABEL_144;
            }
            uint64_t v114 = v113;
            (*((void (**)(CFTypeRef *, const __CFLocale **))cf[0] + 3))(cf, v113);
          }
          else
          {
LABEL_144:
            uint64_t v114 = (const __CFLocale **)v85;
          }
          if (v84 == v83)
          {
            uint64_t v86 = v84;
          }
          else
          {
            uint64_t v86 = v83;
            while (1)
            {
              if (!v114) {
LABEL_196:
              }
                sub_19E3ACB9C();
              if ((*((uint64_t (**)(const __CFLocale **, long long *))*v114 + 6))(v114, v84)) {
                break;
              }
              v84 += 2;
              if (v84 == v83) {
                goto LABEL_160;
              }
            }
            if (v84 != v83)
            {
              char v87 = v84 + 2;
              uint64_t v86 = v84;
              while (v87 != v83)
              {
                if (!v114) {
                  goto LABEL_196;
                }
                if (((*((uint64_t (**)(const __CFLocale **, long long *))*v114 + 6))(v114, v87) & 1) == 0)
                {
                  long long v88 = *v87;
                  *((_DWORD *)v86 + 4) = *((_DWORD *)v87 + 4);
                  long long *v86 = v88;
                  uint64_t v89 = *((void *)v86 + 3);
                  *((void *)v86 + 3) = *((void *)v87 + 3);
                  *((void *)v87 + 3) = v89;
                  v86 += 2;
                }
                v87 += 2;
              }
            }
          }
LABEL_160:
          int v90 = *(long long **)(a1 + 48);
          if (v86 != v90)
          {
            while (v90 != v86)
            {
              int v91 = (const void *)*((void *)v90 - 1);
              if (v91) {
                CFRelease(v91);
              }
              v90 -= 2;
            }
            *(void *)(a1 + 48) = v86;
          }
          if (v114 == v113)
          {
            (*((void (**)(const __CFLocale **))v113[0] + 4))(v113);
          }
          else if (v114)
          {
            (*((void (**)(const __CFLocale **))*v114 + 5))(v114);
          }
          if (v112 == cf)
          {
            (*((void (**)(CFTypeRef *))cf[0] + 4))(cf);
          }
          else if (v112)
          {
            (*((void (**)(CFTypeRef *))*v112 + 5))(v112);
          }
          if (v106) {
            CFRelease(v106);
          }
          char v92 = (void *)v108;
          if ((void)v108)
          {
            do
            {
              char v94 = (void *)*v92;
              unint64_t v95 = (const void *)v92[2];
              if (v95) {
                CFRelease(v95);
              }
              operator delete(v92);
              char v92 = v94;
            }
            while (v94);
          }
          int v93 = __s1[0];
          __s1[0] = 0;
          if (v93) {
            operator delete(v93);
          }
        }
        uint64_t v37 = sub_19E4C1DAC(v46, a3, a4, a5, v99);
        if (!v37)
        {
          if (*(_DWORD *)(a1 + 12) == 1)
          {
            uint64_t v42 = sub_19E4B5FF0(*(void *)(*(void *)(a1 + 16) + 464), a2);
          }
          else
          {
            uint64_t v96 = *(void **)(a1 + 16);
            if (a6 == 2) {
              uint64_t v42 = sub_19E414EA4(v96, a2);
            }
            else {
              uint64_t v42 = sub_19E3FE284(v96, a2, 0);
            }
          }
LABEL_189:
          uint64_t v37 = v42;
        }
        goto LABEL_190;
      }
    }
  }
LABEL_56:
  if (*(_DWORD *)(a1 + 12) == 1)
  {
    uint64_t v35 = sub_19E4B5FF0(*(void *)(*(void *)(a1 + 16) + 464), a2);
  }
  else
  {
    unint64_t v36 = *(void **)(a1 + 16);
    if (a6 == 2) {
      uint64_t v35 = sub_19E414EA4(v36, a2);
    }
    else {
      uint64_t v35 = sub_19E3FE284(v36, a2, 0);
    }
  }
  uint64_t v37 = v35;
  if (!v35)
  {
    sub_19E4C198C(a1, a2);
    if (*(_DWORD *)(a1 + 8) == 1)
    {
      if (*(unsigned char *)(a1 + 32) || (uint64_t v40 = *(void *)(a1 + 40), v41 = *(void *)(a1 + 48), v40 == v41))
      {
        uint64_t v37 = 0;
        goto LABEL_190;
      }
      while (*(_DWORD *)(v40 + 16))
      {
        uint64_t v37 = 0;
        v40 += 32;
        if (v40 == v41) {
          goto LABEL_190;
        }
      }
    }
    uint64_t v42 = sub_19E4C1DAC((unsigned int **)(a1 + 40), a3, a4, a5, *(void **)(a1 + 16));
    goto LABEL_189;
  }
LABEL_190:
  if (theArray) {
    CFRelease(theArray);
  }
  if (v105) {
    CFRelease(v105);
  }
  return v37;
}

void sub_19E4C16F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, int a15, __int16 a16, char a17, char a18, CFTypeRef cf, void *__p,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,CFTypeRef a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  if (a2) {
    sub_19E37B770(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E4C198C(uint64_t a1, uint64_t a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 16);
  if (*(_DWORD *)(a1 + 12))
  {
    uint64_t v5 = *(void *)(v4 + 464);
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = *(void *)(a1 + 48);
    uint64_t v6 = a1 + 40;
    while (v8 != v7)
    {
      unint64_t v9 = *(const void **)(v8 - 8);
      if (v9) {
        CFRelease(v9);
      }
      v8 -= 32;
    }
    *(void *)(a1 + 48) = v7;
    *(_OWORD *)CFIndex v21 = 0u;
    *(_OWORD *)long long __p = 0u;
    int v23 = 1065353216;
    BOOL v24 = (void (**)(void **))&unk_1EF0B54A8;
    unint64_t v25 = v21;
    uint64_t v26 = v6;
    BOOL v27 = (void **)&v24;
    sub_19E4C2DFC(v5, a2, 1, (uint64_t)&v24);
    if (v27 == (void **)&v24)
    {
      v24[4]((void **)&v24);
      char v10 = __p[0];
      if (!__p[0]) {
        goto LABEL_28;
      }
    }
    else
    {
      if (v27) {
        (*((void (**)(void))*v27 + 5))();
      }
      char v10 = __p[0];
      if (!__p[0]) {
        goto LABEL_28;
      }
    }
    do
    {
      uint64_t v16 = (void *)*v10;
      CFArrayRef v17 = (const void *)v10[2];
      if (v17) {
        CFRelease(v17);
      }
      operator delete(v10);
      char v10 = v16;
    }
    while (v16);
    goto LABEL_28;
  }
  uint64_t v12 = *(void *)(a1 + 40);
  uint64_t v13 = *(void *)(a1 + 48);
  uint64_t v11 = a1 + 40;
  while (v13 != v12)
  {
    unint64_t v14 = *(const void **)(v13 - 8);
    if (v14) {
      CFRelease(v14);
    }
    v13 -= 32;
  }
  *(void *)(a1 + 48) = v12;
  *(_OWORD *)CFIndex v21 = 0u;
  *(_OWORD *)long long __p = 0u;
  int v23 = 1065353216;
  BOOL v24 = (void (**)(void **))&unk_1EF0B5450;
  unint64_t v25 = v21;
  uint64_t v26 = v11;
  BOOL v27 = (void **)&v24;
  sub_19E44D0A4(v4, a2, 0, 1, (uint64_t)&v24);
  if (v27 == (void **)&v24)
  {
    v24[4]((void **)&v24);
    uint64_t v15 = __p[0];
    if (!__p[0]) {
      goto LABEL_28;
    }
    goto LABEL_32;
  }
  if (v27) {
    (*((void (**)(void))*v27 + 5))();
  }
  uint64_t v15 = __p[0];
  if (__p[0])
  {
    do
    {
LABEL_32:
      CFIndex v19 = (void *)*v15;
      CFArrayRef v20 = (const void *)v15[2];
      if (v20) {
        CFRelease(v20);
      }
      operator delete(v15);
      uint64_t v15 = v19;
    }
    while (v19);
  }
LABEL_28:
  uint64_t v18 = v21[0];
  v21[0] = 0;
  if (v18) {
    operator delete(v18);
  }
}

void sub_19E4C1C3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a17 == v17)
  {
    (*(void (**)(uint64_t *))(a14 + 32))(&a14);
  }
  else if (a17)
  {
    (*(void (**)(void))(*(void *)a17 + 40))();
  }
  CFIndex v19 = __p;
  if (__p)
  {
    do
    {
      CFArrayRef v20 = (void *)*v19;
      CFIndex v21 = (const void *)v19[2];
      if (v21) {
        CFRelease(v21);
      }
      operator delete(v19);
      CFIndex v19 = v20;
    }
    while (v20);
  }
  if (a9)
  {
    operator delete(a9);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_19E4C1DAC(unsigned int **a1, const void **a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *a1;
  uint64_t v5 = a1[1];
  if (*a1 != v5)
  {
    if ((char *)v5 - (char *)v6 == 32)
    {
      uint64_t v8 = *a2;
      unint64_t v9 = (const void *)*((void *)v6 + 3);
      *a2 = v9;
      if (v9) {
        CFRetain(v9);
      }
      if (v8) {
        CFRelease(v8);
      }
      char v10 = (double *)*a1;
      return *(unsigned int *)v10;
    }
    int64x2_t v27 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    do
    {
      int64x2_t v28 = v27;
      uint64_t v29 = 0;
      __int16 v30 = 0;
      char v31 = 1;
      __n128 v14 = (__n128)xmmword_19E572FD0;
      long long v32 = xmmword_19E572FD0;
      int v33 = 0;
      long long v34 = xmmword_19E572FD0;
      unint64_t v35 = 0xFFEFFFFFFFFFFFFFLL;
      uint64_t v36 = 0;
      uint64_t v37 = 0;
      if (a5[31] || a5[17] != a5[16] || a5[20] != a5[19] || v6[4])
      {
        uint64_t v15 = *v6;
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EC009190, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_1EC009190))
        {
          if (qword_1EC009490 != -1) {
            dispatch_once(&qword_1EC009490, &unk_1EF0BEE38);
          }
          qword_1EC0091A0 = qword_1EC009488;
          __cxa_guard_release(&qword_1EC009190);
        }
        *(void *)std::string buf = a3;
        *(void *)&uint8_t buf[8] = a4;
        *(void *)&uint8_t buf[16] = a3;
        *(void *)&buf[24] = a4;
        uint64_t v42 = a3;
        uint64_t v43 = a4;
        uint64_t v44 = a3;
        uint64_t v45 = a4;
        uint64_t v40 = 0;
        int v16 = sub_19E413378((uint64_t)a5, v15 | (v15 << 32), (uint64_t *)buf, (uint64_t)&v28, qword_1EC0091A0, 1, 1, __p, v14);
        if (v40 == __p)
        {
          (*((void (**)(void **))__p[0] + 4))(__p);
          if (!v16) {
            goto LABEL_40;
          }
        }
        else
        {
          if (v40) {
            (*((void (**)(void))*v40 + 5))();
          }
          if (!v16)
          {
LABEL_40:
            if (qword_1EC0095B8 != -1) {
              dispatch_once(&qword_1EC0095B8, &unk_1EF0BEC40);
            }
            unint64_t v22 = qword_1EC0095B0;
            if (os_log_type_enabled((os_log_t)qword_1EC0095B0, OS_LOG_TYPE_ERROR))
            {
              unsigned int v23 = *v6;
              *(void *)std::string buf = a3;
              *(void *)&uint8_t buf[8] = a4;
              sub_19E4C2AB8(__p, (uint64_t *)buf);
              BOOL v24 = v39 >= 0 ? __p : (void **)__p[0];
              *(_DWORD *)std::string buf = 136315650;
              *(void *)&uint8_t buf[4] = "rescoreCandidates";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = v23;
              *(_WORD *)&buf[18] = 2080;
              *(void *)&buf[20] = v24;
              _os_log_error_impl(&dword_19E36B000, v22, OS_LOG_TYPE_ERROR, "%s: Failed to calculate P( %d | [ %s ])", buf, 0x1Cu);
              if (v39 < 0) {
                operator delete(__p[0]);
              }
            }
            __assert_rtn("rescoreCandidates", "LinguisticTokenConverter.cpp", 79, "false");
          }
        }
        *((void *)v6 + 1) = v28.i64[0];
      }
      v6 += 8;
    }
    while (v6 != v5);
    char v10 = (double *)*a1;
    uint64_t v17 = a1[1];
    if (*a1 != v17)
    {
      uint64_t v18 = (unsigned int *)(v10 + 4);
      if (v10 + 4 != (double *)v17)
      {
        do
        {
          if (v10[1] < *((double *)v18 + 1)) {
            char v10 = (double *)v18;
          }
          v18 += 8;
        }
        while (v18 != v17);
      }
    }
    if (v10 != (double *)v17)
    {
      CFIndex v19 = *a2;
      CFArrayRef v20 = (const void *)*((void *)v10 + 3);
      *a2 = v20;
      if (v20) {
        CFRetain(v20);
      }
      if (v19) {
        CFRelease(v19);
      }
      return *(unsigned int *)v10;
    }
  }
  return 0;
}

void sub_19E4C2180(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (a2) {
    sub_19E37B770(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E4C21BC(uint64_t a1, CFTypeRef *a2, void *a3)
{
  if (*a2)
  {
    CFHashCode v7 = CFHash(*a2);
    unint64_t v8 = *(void *)(a1 + 8);
    if (!v8) {
      goto LABEL_24;
    }
  }
  else
  {
    CFHashCode v7 = 0xD7C06285B9DE677ALL;
    unint64_t v8 = *(void *)(a1 + 8);
    if (!v8) {
      goto LABEL_24;
    }
  }
  uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    CFHashCode v3 = v7;
    if (v7 >= v8) {
      CFHashCode v3 = v7 % v8;
    }
  }
  else
  {
    CFHashCode v3 = (v8 - 1) & v7;
  }
  char v10 = *(uint64_t ****)(*(void *)a1 + 8 * v3);
  if (v10)
  {
    uint64_t v11 = *v10;
    if (*v10)
    {
      if (v9.u32[0] < 2uLL)
      {
        while (1)
        {
          uint64_t v13 = v11[1];
          if (v13 == (uint64_t *)v7)
          {
            if (sub_19E4C29BC((const __CFString *)v11[2], (const __CFString **)a2) == kCFCompareEqualTo) {
              return;
            }
          }
          else if (((unint64_t)v13 & (v8 - 1)) != v3)
          {
            goto LABEL_24;
          }
          uint64_t v11 = (uint64_t **)*v11;
          if (!v11) {
            goto LABEL_24;
          }
        }
      }
      do
      {
        unint64_t v12 = (unint64_t)v11[1];
        if (v12 == v7)
        {
          if (sub_19E4C29BC((const __CFString *)v11[2], (const __CFString **)a2) == kCFCompareEqualTo) {
            return;
          }
        }
        else
        {
          if (v12 >= v8) {
            v12 %= v8;
          }
          if (v12 != v3) {
            break;
          }
        }
        uint64_t v11 = (uint64_t **)*v11;
      }
      while (v11);
    }
  }
LABEL_24:
  __n128 v14 = (void *)(a1 + 16);
  uint64_t v15 = operator new(0x18uLL);
  *uint64_t v15 = 0;
  v15[1] = v7;
  v15[2] = *a3;
  *a3 = 0;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v8 || (float)(v17 * (float)v8) < v16)
  {
    BOOL v18 = 1;
    if (v8 >= 3) {
      BOOL v18 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v8);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t prime = v20;
    }
    else {
      size_t prime = v19;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v22 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v22) {
      goto LABEL_36;
    }
    if (prime < *(void *)&v22)
    {
      unint64_t v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v22 < 3uLL || (uint8x8_t v24 = (uint8x8_t)vcnt_s8(v22), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        unint64_t v23 = std::__next_prime(v23);
      }
      else
      {
        uint64_t v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2) {
          unint64_t v23 = v25;
        }
      }
      if (prime <= v23) {
        size_t prime = v23;
      }
      if (prime < *(void *)&v22) {
LABEL_36:
      }
        sub_19E3CEFD8(a1, prime);
    }
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        CFHashCode v3 = v7 % v8;
      }
      else {
        CFHashCode v3 = v7;
      }
    }
    else
    {
      CFHashCode v3 = (v8 - 1) & v7;
    }
  }
  uint64_t v26 = *(void *)a1;
  int64x2_t v27 = *(void **)(*(void *)a1 + 8 * v3);
  if (v27)
  {
    *uint64_t v15 = *v27;
LABEL_60:
    *int64x2_t v27 = v15;
    goto LABEL_61;
  }
  *uint64_t v15 = *v14;
  *__n128 v14 = v15;
  *(void *)(v26 + 8 * v3) = v14;
  if (*v15)
  {
    unint64_t v28 = *(void *)(*v15 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v28 >= v8) {
        v28 %= v8;
      }
    }
    else
    {
      v28 &= v8 - 1;
    }
    int64x2_t v27 = (void *)(*(void *)a1 + 8 * v28);
    goto LABEL_60;
  }
LABEL_61:
  ++*(void *)(a1 + 24);
}

void sub_19E4C24D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E4C2A68((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_19E4C24E8(void *result, void *a2)
{
  v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    CFHashCode v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        void v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        void v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        void v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      void v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_19E4C2748(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_19E37B770(a1);
}

void *sub_19E4C2754()
{
  return &unk_1EF0B4BC8;
}

uint64_t sub_19E4C2760(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN17language_modeling2v1L14trimCandidatesINSt3__16vectorINS0_24LinguisticTokenConverter19Conversion"
                     "CandidateENS2_9allocatorIS5_EEEEEEvRKNT_10value_typeERS9_PK9__CFArrayEUlRKS9_E1_"
    || ((v3 & (unint64_t)"ZN17language_modeling2v1L14trimCandidatesINSt3__16vectorINS0_24LinguisticTokenConverter1"
                                "9ConversionCandidateENS2_9allocatorIS5_EEEEEEvRKNT_10value_typeERS9_PK9__CFArrayEUlRKS9_E1_" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN17language_modeling2v1L14trimCandidatesINSt3__16vectorINS0_24LinguisticTokenConverter19ConversionCandidateENS2_9allocatorIS5_EEEEEEvRKNT_10value_typeERS9_PK9__CFArrayEUlRKS9_E1_")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN17language_modeling2v1L14trimCandidatesINSt3__16vectorINS0_24LinguisticTokenConverter19ConversionCandidateENS2_9allocatorIS5_EEEEEEvRKNT_10value_typeERS9_PK9__CFArrayEUlRKS9_E1_" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL sub_19E4C27B8(uint64_t a1, uint64_t a2)
{
  return CFStringCompare(*(CFStringRef *)(a2 + 24), **(CFStringRef **)(a1 + 8), 0) != kCFCompareEqualTo;
}

uint64_t sub_19E4C27F0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF0B5240;
  a2[1] = v2;
  return result;
}

void *sub_19E4C2814(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF0B5240;
  result[1] = v3;
  return result;
}

void sub_19E4C285C()
{
}

void *sub_19E4C2874()
{
  return &unk_1EF0B4BB8;
}

uint64_t sub_19E4C2880(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN17language_modeling2v1L14trimCandidatesINSt3__16vectorINS0_24LinguisticTokenConverter19Conversion"
                     "CandidateENS2_9allocatorIS5_EEEEEEvRKNT_10value_typeERS9_PK9__CFArrayEUlRKS9_E0_"
    || ((v3 & (unint64_t)"ZN17language_modeling2v1L14trimCandidatesINSt3__16vectorINS0_24LinguisticTokenConverter1"
                                "9ConversionCandidateENS2_9allocatorIS5_EEEEEEvRKNT_10value_typeERS9_PK9__CFArrayEUlRKS9_E0_" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN17language_modeling2v1L14trimCandidatesINSt3__16vectorINS0_24LinguisticTokenConverter19ConversionCandidateENS2_9allocatorIS5_EEEEEEvRKNT_10value_typeERS9_PK9__CFArrayEUlRKS9_E0_")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN17language_modeling2v1L14trimCandidatesINSt3__16vectorINS0_24LinguisticTokenConverter19ConversionCandidateENS2_9allocatorIS5_EEEEEEvRKNT_10value_typeERS9_PK9__CFArrayEUlRKS9_E0_" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL sub_19E4C28D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t ***)(*(void *)(a1 + 8) + 16);
  if (!v2) {
    return 1;
  }
  while (1)
  {
    CFComparisonResult v4 = CFStringCompare(*(CFStringRef *)(a2 + 24), (CFStringRef)v2[2], 0);
    BOOL result = v4 != kCFCompareEqualTo;
    if (v4 == kCFCompareEqualTo) {
      break;
    }
    uint64_t v2 = (uint64_t **)*v2;
    if (!v2) {
      return 1;
    }
  }
  return result;
}

uint64_t sub_19E4C2938(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF0B51E8;
  a2[1] = v2;
  return result;
}

void *sub_19E4C295C(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_1EF0B51E8;
  result[1] = v3;
  return result;
}

void sub_19E4C29A4()
{
}

CFComparisonResult sub_19E4C29BC(const __CFString *cf, const __CFString **a2)
{
  if (cf)
  {
    CFRetain(cf);
    CFStringRef v4 = *a2;
    if (!v4)
    {
      CFComparisonResult v5 = kCFCompareGreaterThan;
LABEL_9:
      CFRelease(cf);
      return v5;
    }
  }
  else
  {
    CFStringRef v4 = *a2;
    if (!*a2) {
      return 0;
    }
  }
  CFRetain(v4);
  if (cf) {
    CFComparisonResult v5 = CFStringCompare(cf, v4, 0);
  }
  else {
    CFComparisonResult v5 = kCFCompareLessThan;
  }
  CFRelease(v4);
  if (cf) {
    goto LABEL_9;
  }
  return v5;
}

uint64_t sub_19E4C2A68(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      uint64_t v3 = (const void *)v2[2];
      if (v3) {
        CFRelease(v3);
      }
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_19E4C2AB8(void *a1, uint64_t *a2)
{
  sub_19E37B784((uint64_t)v27);
  uint64_t v3 = a2[1];
  if (v3)
  {
    uint64_t v4 = *a2;
    uint64_t v5 = 4 * v3;
    while (1)
    {
      if ((v35 & 0x10) != 0)
      {
        unint64_t v8 = v34;
        uint8x8_t v9 = (const void **)&v30;
        if (v34 < v31)
        {
          unint64_t v34 = v31;
          unint64_t v8 = v31;
          uint8x8_t v9 = (const void **)&v30;
        }
      }
      else
      {
        if ((v35 & 8) == 0)
        {
          size_t v6 = 0;
          HIBYTE(v26) = 0;
          p_dst = (void **)&__dst;
          goto LABEL_17;
        }
        unint64_t v8 = v29;
        uint8x8_t v9 = (const void **)v28;
      }
      char v10 = *v9;
      size_t v6 = v8 - (void)*v9;
      if (v6 > 0x7FFFFFFFFFFFFFF7) {
        sub_19E37C958();
      }
      if (v6 >= 0x17) {
        break;
      }
      HIBYTE(v26) = v8 - *(unsigned char *)v9;
      p_dst = (void **)&__dst;
      if (v6) {
        goto LABEL_16;
      }
LABEL_17:
      *((unsigned char *)p_dst + v6) = 0;
      if ((SHIBYTE(v26) & 0x80000000) == 0)
      {
        if (!HIBYTE(v26)) {
          goto LABEL_22;
        }
LABEL_21:
        sub_19E37CA70(v27, (uint64_t)" ", 1);
        goto LABEL_22;
      }
      size_t v13 = v25;
      operator delete(__dst);
      if (v13) {
        goto LABEL_21;
      }
LABEL_22:
      std::ostream::operator<<();
      v4 += 4;
      v5 -= 4;
      if (!v5) {
        goto LABEL_23;
      }
    }
    uint64_t v11 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v11 = v6 | 7;
    }
    uint64_t v12 = v11 + 1;
    p_dst = (void **)operator new(v11 + 1);
    size_t v25 = v6;
    unint64_t v26 = v12 | 0x8000000000000000;
    long long __dst = p_dst;
LABEL_16:
    memmove(p_dst, v10, v6);
    goto LABEL_17;
  }
LABEL_23:
  if ((v35 & 0x10) != 0)
  {
    unint64_t v16 = v34;
    if (v34 < v31)
    {
      unint64_t v34 = v31;
      unint64_t v16 = v31;
    }
    float v17 = (const void **)&v30;
  }
  else
  {
    if ((v35 & 8) == 0)
    {
      size_t v14 = 0;
      uint64_t v15 = a1;
      *((unsigned char *)a1 + 23) = 0;
      goto LABEL_38;
    }
    float v17 = (const void **)v28;
    unint64_t v16 = v29;
  }
  uint64_t v15 = a1;
  BOOL v18 = *v17;
  size_t v14 = v16 - (void)*v17;
  if (v14 > 0x7FFFFFFFFFFFFFF7) {
    sub_19E37C958();
  }
  if (v14 >= 0x17)
  {
    uint64_t v19 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v19 = v14 | 7;
    }
    uint64_t v20 = v19 + 1;
    CFIndex v21 = operator new(v19 + 1);
    a1[1] = v14;
    a1[2] = v20 | 0x8000000000000000;
    *a1 = v21;
    uint64_t v15 = v21;
    goto LABEL_37;
  }
  *((unsigned char *)a1 + 23) = v14;
  if (v14) {
LABEL_37:
  }
    memmove(v15, v18, v14);
LABEL_38:
  *((unsigned char *)v15 + v14) = 0;
  v27[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v27 + *(void *)(v27[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v27[1] = MEMORY[0x1E4FBA470] + 16;
  if (v33 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x19F3BDC30](&v36);
}

void sub_19E4C2DDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_19E3919D0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19E4C2DFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  uint64_t v20 = a3;
  CFHashCode v7 = operator new(0x28uLL);
  void *v7 = &unk_1EF0B5138;
  v7[1] = &cf;
  v7[2] = a2;
  void v7[3] = &v20;
  v7[4] = a4;
  uint8x8_t v24 = v7;
  std::recursive_mutex::lock((std::recursive_mutex *)a1);
  uint64_t v8 = *(void *)(a1 + 104);
  uint64_t v9 = *(void *)(a1 + 112);
  if (v8 == v9)
  {
LABEL_4:
    uint64_t v10 = *(void *)(a1 + 128);
    if (!v10) {
      goto LABEL_25;
    }
    sub_19E4B5EC4(&__p, v10 + 616);
    uint64_t v11 = (uint64_t *)__p;
    uint64_t v12 = v22;
    if (__p == v22)
    {
LABEL_9:
      if (!v11) {
        goto LABEL_25;
      }
      size_t v13 = v22;
      size_t v14 = v11;
      if (v22 == v11) {
        goto LABEL_24;
      }
      do
      {
        uint64_t v15 = (std::__shared_weak_count *)*(v13 - 1);
        if (v15 && !atomic_fetch_add(&v15->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        v13 -= 2;
      }
      while (v13 != v11);
    }
    else
    {
      while (!sub_19E4B98FC(a2, *v11, 1, (uint64_t)v23))
      {
        v11 += 2;
        if (v11 == v12)
        {
          uint64_t v11 = (uint64_t *)__p;
          goto LABEL_9;
        }
      }
      uint64_t v11 = (uint64_t *)__p;
      if (!__p) {
        goto LABEL_25;
      }
      unint64_t v16 = v22;
      size_t v14 = __p;
      if (v22 == __p)
      {
LABEL_24:
        int8x8_t v22 = v11;
        operator delete(v14);
        goto LABEL_25;
      }
      do
      {
        float v17 = (std::__shared_weak_count *)*(v16 - 1);
        if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
        v16 -= 2;
      }
      while (v16 != v11);
    }
    size_t v14 = __p;
    goto LABEL_24;
  }
  while (!sub_19E4B9C40(a2, *(void *)(*(void *)v8 + 8), *(void *)(*(void *)v8 + 16), (uint64_t)v23))
  {
    v8 += 16;
    if (v8 == v9) {
      goto LABEL_4;
    }
  }
LABEL_25:
  std::recursive_mutex::unlock((std::recursive_mutex *)a1);
  if (v24 == v23)
  {
    (*(void (**)(void *))(v23[0] + 32))(v23);
    CFTypeRef v18 = cf;
    if (!cf) {
      return;
    }
    goto LABEL_31;
  }
  if (v24) {
    (*(void (**)(void))(*v24 + 40))();
  }
  CFTypeRef v18 = cf;
  if (cf) {
LABEL_31:
  }
    CFRelease(v18);
}

void sub_19E4C3094(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  std::recursive_mutex::unlock(v14);
  sub_19E3FD0EC(&a14);
  sub_19E3C6F1C((const void **)&a9);
  _Unwind_Resume(a1);
}

void *sub_19E4C30EC()
{
  return &unk_1EF0B4BA8;
}

uint64_t sub_19E4C30F8(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN17language_modeling2v133enumerateComparableLexiconEntriesIN2LM32MultilingualDynamicLanguageModelE"
                     "EEvRKT_RKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEENS2_22TokenEnumerationPoli"
                     "cyEmRKNS7_8functionIFvPK10__CFStringjdNS2_13SourceLexiconEPK10__CFLocaleRbEEEEUlSK_jdSL_SO_SP_E_"
    || ((v3 & (unint64_t)"ZN17language_modeling2v133enumerateComparableLexiconEntriesIN2LM32MultilingualDynamicLan"
                                "guageModelEEEvRKT_RKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEENS2_"
                                "22TokenEnumerationPolicyEmRKNS7_8functionIFvPK10__CFStringjdNS2_13SourceLexiconEPK10__CF"
                                "LocaleRbEEEEUlSK_jdSL_SO_SP_E_" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN17language_modeling2v133enumerateComparableLexiconEntriesIN2LM32MultilingualDynamicLanguageModelEEEvRKT_RKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEENS2_22TokenEnumerationPolicyEmRKNS7_8functionIFvPK10__CFStringjdNS2_13SourceLexiconEPK10__CFLocaleRbEEEEUlSK_jdSL_SO_SP_E_")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN17language_modeling2v133enumerateComparableLexiconEntriesIN2LM32MultilingualDynamicLanguageModelEEEvRKT_RKNSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEENS2_22TokenEnumerationPolicyEmRKNS7_8functionIFvPK10__CFStringjdNS2_13SourceLexiconEPK10__CFLocaleRbEEEEUlSK_jdSL_SO_SP_E_" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

CFComparisonResult sub_19E4C3150(uint64_t a1, const __CFString **a2, int *a3, uint64_t *a4, int *a5, const __CFLocale **a6, uint64_t a7)
{
  CFStringRef v9 = *a2;
  int v10 = *a3;
  uint64_t v11 = *a4;
  int v12 = *a5;
  CFLocaleRef v13 = *a6;
  size_t v14 = *(void **)(a1 + 8);
  if (!*v14)
  {
    uint64_t v15 = *(const UInt8 **)(a1 + 16);
    if ((char)v15[23] < 0)
    {
      if (!*(void *)v15)
      {
        *size_t v14 = 0;
        goto LABEL_10;
      }
      CFIndex v16 = *((void *)v15 + 1);
      uint64_t v15 = *(const UInt8 **)v15;
    }
    else
    {
      CFIndex v16 = v15[23];
    }
    CFStringRef v17 = CFStringCreateWithBytes(0, v15, v16, 0x8000100u, 0);
    if (!v17)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x19F3BD790](exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    CFStringRef v18 = v17;
    uint64_t v19 = *(const void ***)(a1 + 8);
    uint64_t v20 = *v19;
    *uint64_t v19 = v18;
    if (v20) {
      CFRelease(v20);
    }
  }
LABEL_10:
  CFStringRef v21 = **(const __CFString ***)(a1 + 8);
  v31.length = CFStringGetLength(v21);
  v31.location = 0;
  CFComparisonResult result = CFStringCompareWithOptionsAndLocale(v21, v9, v31, **(void **)(a1 + 24), v13);
  if (result == kCFCompareEqualTo)
  {
    uint64_t v23 = *(void *)(a1 + 32);
    CFStringRef v30 = v9;
    int v29 = v10;
    uint64_t v28 = v11;
    int v27 = v12;
    CFLocaleRef v26 = v13;
    uint64_t v24 = *(void *)(v23 + 24);
    if (!v24) {
      sub_19E3ACB9C();
    }
    return (*(uint64_t (**)(uint64_t, const __CFString **, int *, uint64_t *, int *, const __CFLocale **, uint64_t))(*(void *)v24 + 48))(v24, &v30, &v29, &v28, &v27, &v26, a7);
  }
  return result;
}

void sub_19E4C32E4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

__n128 sub_19E4C3304(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF0B5138;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + ++*(_DWORD *)(result + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 sub_19E4C3334(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1EF0B5138;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + ++*(_DWORD *)(result + 24) = result;
  return result;
}

void sub_19E4C3388()
{
}

void *sub_19E4C33A0()
{
  return &unk_1EF0B4C38;
}

uint64_t sub_19E4C33AC(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN17language_modeling2v1L23getConversionCandidatesINSt3__16vectorINS0_24LinguisticTokenConverter19C"
                     "onversionCandidateENS2_9allocatorIS5_EEEEN2LM32MultilingualDynamicLanguageModelEEEvRKNS2_12basic_st"
                     "ringIcNS2_11char_traitsIcEENS6_IcEEEERT0_RT_EUlPK10__CFStringjdNS9_13SourceLexiconEPK10__CFLocaleRbE_"
    || ((v3 & (unint64_t)"ZN17language_modeling2v1L23getConversionCandidatesINSt3__16vectorINS0_24LinguisticTokenC"
                                "onverter19ConversionCandidateENS2_9allocatorIS5_EEEEN2LM32MultilingualDynamicLanguageMod"
                                "elEEEvRKNS2_12basic_stringIcNS2_11char_traitsIcEENS6_IcEEEERT0_RT_EUlPK10__CFStringjdNS9"
                                "_13SourceLexiconEPK10__CFLocaleRbE_" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN17language_modeling2v1L23getConversionCandidatesINSt3__16vectorINS0_24LinguisticTokenConverter19ConversionCandidateENS2_9allocatorIS5_EEEEN2LM32MultilingualDynamicLanguageModelEEEvRKNS2_12basic_stringIcNS2_11char_traitsIcEENS6_IcEEEERT0_RT_EUlPK10__CFStringjdNS9_13SourceLexiconEPK10__CFLocaleRbE_")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN17language_modeling2v1L23getConversionCandidatesINSt3__16vectorINS0_24LinguisticTokenConverter19ConversionCandidateENS2_9allocatorIS5_EEEEN2LM32MultilingualDynamicLanguageModelEEEvRKNS2_12basic_stringIcNS2_11char_traitsIcEENS6_IcEEEERT0_RT_EUlPK10__CFStringjdNS9_13SourceLexiconEPK10__CFLocaleRbE_" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void sub_19E4C3404(uint64_t a1, CFTypeRef *a2, int *a3, uint64_t *a4, int *a5, const __CFLocale **a6)
{
  CFTypeRef v7 = *a2;
  int v8 = *a3;
  uint64_t v9 = *a4;
  int v10 = *a5;
  CFLocaleRef v11 = *a6;
  if (*a2)
  {
    CFRetain(*a2);
    sub_19E372124(&v22, v7);
    if (sub_19E4C35CC(*(void **)(a1 + 8), &v22)) {
      goto LABEL_15;
    }
    CFRetain(v7);
  }
  else
  {
    CFTypeRef v22 = 0;
    if (sub_19E4C35CC(*(void **)(a1 + 8), &v22)) {
      goto LABEL_15;
    }
  }
  sub_19E372124(&cf, v7);
  BOOL v12 = sub_19E535A0C((CFStringRef *)&cf, v11);
  if (cf) {
    CFRelease(cf);
  }
  if (!v12)
  {
    uint64_t v13 = *(void *)(a1 + 16);
    LODWORD(v18) = v8;
    *((void *)&v18 + 1) = v9;
    int v19 = v10;
    if (v7) {
      CFRetain(v7);
    }
    sub_19E372124(&v20, v7);
    unint64_t v14 = *(void *)(v13 + 8);
    if (v14 >= *(void *)(v13 + 16))
    {
      CFIndex v16 = sub_19E4C370C((void **)v13, (uint64_t)&v18);
      CFTypeRef v17 = v20;
      *(void *)(v13 + 8) = v16;
      if (v17) {
        CFRelease(v17);
      }
    }
    else
    {
      long long v15 = v18;
      *(_DWORD *)(v14 + 16) = v19;
      *(_OWORD *)unint64_t v14 = v15;
      *(void *)(v14 + ++*(_DWORD *)(result + 24) = v20;
      *(void *)(v13 + 8) = v14 + 32;
    }
    sub_19E4C3844(*(void *)(a1 + 8), &v22, &v22);
  }
LABEL_15:
  if (v22) {
    CFRelease(v22);
  }
}

void sub_19E4C3568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef cf, CFTypeRef a13, CFTypeRef a14)
{
  if (cf) {
    CFRelease(cf);
  }
  if (a14) {
    CFRelease(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **sub_19E4C35CC(void *a1, CFTypeRef *a2)
{
  if (*a2)
  {
    CFHashCode v4 = CFHash(*a2);
    int8x8_t v5 = (int8x8_t)a1[1];
    if (!*(void *)&v5) {
      return 0;
    }
  }
  else
  {
    CFHashCode v4 = 0xD7C06285B9DE677ALL;
    int8x8_t v5 = (int8x8_t)a1[1];
    if (!*(void *)&v5) {
      return 0;
    }
  }
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    CFHashCode v7 = v4;
    if (v4 >= *(void *)&v5) {
      CFHashCode v7 = v4 % *(void *)&v5;
    }
  }
  else
  {
    CFHashCode v7 = (*(void *)&v5 - 1) & v4;
  }
  int v8 = *(uint64_t ****)(*a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  uint64_t v9 = *v8;
  if (*v8)
  {
    if (v6.u32[0] < 2uLL)
    {
      uint64_t v10 = *(void *)&v5 - 1;
      while (1)
      {
        BOOL v12 = v9[1];
        if (v12 == (uint64_t *)v4)
        {
          if (sub_19E4C29BC((const __CFString *)v9[2], (const __CFString **)a2) == kCFCompareEqualTo) {
            return v9;
          }
        }
        else if (((unint64_t)v12 & v10) != v7)
        {
          return 0;
        }
        uint64_t v9 = (uint64_t **)*v9;
        if (!v9) {
          return v9;
        }
      }
    }
    do
    {
      unint64_t v11 = (unint64_t)v9[1];
      if (v11 == v4)
      {
        if (sub_19E4C29BC((const __CFString *)v9[2], (const __CFString **)a2) == kCFCompareEqualTo) {
          return v9;
        }
      }
      else
      {
        if (v11 >= *(void *)&v5) {
          v11 %= *(void *)&v5;
        }
        if (v11 != v7) {
          return 0;
        }
      }
      uint64_t v9 = (uint64_t **)*v9;
    }
    while (v9);
  }
  return v9;
}

char *sub_19E4C370C(void **a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v4 = (v3 - (unsigned char *)*a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    sub_19E37C7C4();
  }
  uint64_t v7 = (unsigned char *)a1[2] - v2;
  if (v7 >> 4 > v5) {
    unint64_t v5 = v7 >> 4;
  }
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v5 = 0x7FFFFFFFFFFFFFFLL;
  }
  if (v5 >> 59) {
    sub_19E37C2B8();
  }
  uint64_t v9 = 32 * v5;
  uint64_t v10 = (char *)operator new(32 * v5);
  unint64_t v11 = &v10[32 * v4];
  BOOL v12 = &v10[v9];
  *(_OWORD *)unint64_t v11 = *(_OWORD *)a2;
  *((_DWORD *)v11 + 4) = *(_DWORD *)(a2 + 16);
  *((void *)v11 + 3) = *(void *)(a2 + 24);
  *(void *)(a2 + ++*(_DWORD *)(result + 24) = 0;
  uint64_t v13 = v11 + 32;
  if (v3 == v2)
  {
    unint64_t v14 = &v10[32 * v4];
  }
  else
  {
    do
    {
      unint64_t v14 = v11 - 32;
      long long v15 = *((_OWORD *)v3 - 2);
      *((_DWORD *)v11 - 4) = *((_DWORD *)v3 - 4);
      *((_OWORD *)v11 - 2) = v15;
      *((void *)v11 - 1) = *((void *)v3 - 1);
      *((void *)v3 - 1) = 0;
      v11 -= 32;
      v3 -= 32;
    }
    while (v3 != v2);
  }
  CFIndex v16 = (char *)*a1;
  CFTypeRef v17 = (char *)a1[1];
  *a1 = v14;
  a1[1] = v13;
  a1[2] = v12;
  while (v17 != v16)
  {
    long long v18 = (const void *)*((void *)v17 - 1);
    if (v18) {
      CFRelease(v18);
    }
    v17 -= 32;
  }
  if (v16) {
    operator delete(v16);
  }
  return v13;
}

void sub_19E4C3844(uint64_t a1, CFTypeRef *a2, const void **a3)
{
  if (*a2)
  {
    CFHashCode v7 = CFHash(*a2);
    unint64_t v8 = *(void *)(a1 + 8);
    if (!v8) {
      goto LABEL_24;
    }
  }
  else
  {
    CFHashCode v7 = 0xD7C06285B9DE677ALL;
    unint64_t v8 = *(void *)(a1 + 8);
    if (!v8) {
      goto LABEL_24;
    }
  }
  uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    CFHashCode v3 = v7;
    if (v7 >= v8) {
      CFHashCode v3 = v7 % v8;
    }
  }
  else
  {
    CFHashCode v3 = (v8 - 1) & v7;
  }
  uint64_t v10 = *(uint64_t ****)(*(void *)a1 + 8 * v3);
  if (v10)
  {
    unint64_t v11 = *v10;
    if (*v10)
    {
      if (v9.u32[0] < 2uLL)
      {
        while (1)
        {
          uint64_t v13 = v11[1];
          if (v13 == (uint64_t *)v7)
          {
            if (sub_19E4C29BC((const __CFString *)v11[2], (const __CFString **)a2) == kCFCompareEqualTo) {
              return;
            }
          }
          else if (((unint64_t)v13 & (v8 - 1)) != v3)
          {
            goto LABEL_24;
          }
          unint64_t v11 = (uint64_t **)*v11;
          if (!v11) {
            goto LABEL_24;
          }
        }
      }
      do
      {
        unint64_t v12 = (unint64_t)v11[1];
        if (v12 == v7)
        {
          if (sub_19E4C29BC((const __CFString *)v11[2], (const __CFString **)a2) == kCFCompareEqualTo) {
            return;
          }
        }
        else
        {
          if (v12 >= v8) {
            v12 %= v8;
          }
          if (v12 != v3) {
            break;
          }
        }
        unint64_t v11 = (uint64_t **)*v11;
      }
      while (v11);
    }
  }
LABEL_24:
  unint64_t v14 = (void *)(a1 + 16);
  long long v15 = operator new(0x18uLL);
  *long long v15 = 0;
  v15[1] = v7;
  CFIndex v16 = *a3;
  if (v16) {
    CFRetain(v16);
  }
  v15[2] = v16;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v8 || (float)(v18 * (float)v8) < v17)
  {
    BOOL v19 = 1;
    if (v8 >= 3) {
      BOOL v19 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v8);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t prime = v21;
    }
    else {
      size_t prime = v20;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v23 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v23) {
      goto LABEL_38;
    }
    if (prime < *(void *)&v23)
    {
      unint64_t v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v23 < 3uLL || (uint8x8_t v25 = (uint8x8_t)vcnt_s8(v23), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
      {
        unint64_t v24 = std::__next_prime(v24);
      }
      else
      {
        uint64_t v26 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2) {
          unint64_t v24 = v26;
        }
      }
      if (prime <= v24) {
        size_t prime = v24;
      }
      if (prime < *(void *)&v23) {
LABEL_38:
      }
        sub_19E3CEFD8(a1, prime);
    }
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        CFHashCode v3 = v7 % v8;
      }
      else {
        CFHashCode v3 = v7;
      }
    }
    else
    {
      CFHashCode v3 = (v8 - 1) & v7;
    }
  }
  uint64_t v27 = *(void *)a1;
  uint64_t v28 = *(void **)(*(void *)a1 + 8 * v3);
  if (v28)
  {
    *long long v15 = *v28;
LABEL_62:
    *uint64_t v28 = v15;
    goto LABEL_63;
  }
  *long long v15 = *v14;
  *unint64_t v14 = v15;
  *(void *)(v27 + 8 * v3) = v14;
  if (*v15)
  {
    unint64_t v29 = *(void *)(*v15 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v29 >= v8) {
        v29 %= v8;
      }
    }
    else
    {
      v29 &= v8 - 1;
    }
    uint64_t v28 = (void *)(*(void *)a1 + 8 * v29);
    goto LABEL_62;
  }
LABEL_63:
  ++*(void *)(a1 + 24);
}

void sub_19E4C3B60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E4C2A68((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_19E4C3B84(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF0B54A8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 sub_19E4C3BAC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF0B54A8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void sub_19E4C3BF8()
{
}

void *sub_19E4C3C10()
{
  return &unk_1EF0B4C28;
}

uint64_t sub_19E4C3C1C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN17language_modeling2v1L23getConversionCandidatesINSt3__16vectorINS0_24LinguisticTokenConverter19C"
                     "onversionCandidateENS2_9allocatorIS5_EEEEN2LM22CompositeLanguageModelEEEvRKNS2_12basic_stringIcNS2_"
                     "11char_traitsIcEENS6_IcEEEERT0_RT_EUlPK10__CFStringjdNS9_13SourceLexiconEPK10__CFLocaleRbE_"
    || ((v3 & (unint64_t)"ZN17language_modeling2v1L23getConversionCandidatesINSt3__16vectorINS0_24LinguisticTokenC"
                                "onverter19ConversionCandidateENS2_9allocatorIS5_EEEEN2LM22CompositeLanguageModelEEEvRKNS"
                                "2_12basic_stringIcNS2_11char_traitsIcEENS6_IcEEEERT0_RT_EUlPK10__CFStringjdNS9_13SourceL"
                                "exiconEPK10__CFLocaleRbE_" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN17language_modeling2v1L23getConversionCandidatesINSt3__16vectorINS0_24LinguisticTokenConverter19ConversionCandidateENS2_9allocatorIS5_EEEEN2LM22CompositeLanguageModelEEEvRKNS2_12basic_stringIcNS2_11char_traitsIcEENS6_IcEEEERT0_RT_EUlPK10__CFStringjdNS9_13SourceLexiconEPK10__CFLocaleRbE_")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN17language_modeling2v1L23getConversionCandidatesINSt3__16vectorINS0_24LinguisticTokenConverter19ConversionCandidateENS2_9allocatorIS5_EEEEN2LM22CompositeLanguageModelEEEvRKNS2_12basic_stringIcNS2_11char_traitsIcEENS6_IcEEEERT0_RT_EUlPK10__CFStringjdNS9_13SourceLexiconEPK10__CFLocaleRbE_" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void sub_19E4C3C74(uint64_t a1, CFTypeRef *a2, int *a3, uint64_t *a4, int *a5, const __CFLocale **a6)
{
  CFTypeRef v7 = *a2;
  int v8 = *a3;
  uint64_t v9 = *a4;
  int v10 = *a5;
  CFLocaleRef v11 = *a6;
  if (*a2)
  {
    CFRetain(*a2);
    sub_19E372124(&v22, v7);
    if (sub_19E4C35CC(*(void **)(a1 + 8), &v22)) {
      goto LABEL_15;
    }
    CFRetain(v7);
  }
  else
  {
    CFTypeRef v22 = 0;
    if (sub_19E4C35CC(*(void **)(a1 + 8), &v22)) {
      goto LABEL_15;
    }
  }
  sub_19E372124(&cf, v7);
  BOOL v12 = sub_19E535A0C((CFStringRef *)&cf, v11);
  if (cf) {
    CFRelease(cf);
  }
  if (!v12)
  {
    uint64_t v13 = *(void *)(a1 + 16);
    LODWORD(v18) = v8;
    *((void *)&v18 + 1) = v9;
    int v19 = v10;
    if (v7) {
      CFRetain(v7);
    }
    sub_19E372124(&v20, v7);
    unint64_t v14 = *(void *)(v13 + 8);
    if (v14 >= *(void *)(v13 + 16))
    {
      CFIndex v16 = sub_19E4C370C((void **)v13, (uint64_t)&v18);
      CFTypeRef v17 = v20;
      *(void *)(v13 + 8) = v16;
      if (v17) {
        CFRelease(v17);
      }
    }
    else
    {
      long long v15 = v18;
      *(_DWORD *)(v14 + 16) = v19;
      *(_OWORD *)unint64_t v14 = v15;
      *(void *)(v14 + ++*(_DWORD *)(result + 24) = v20;
      *(void *)(v13 + 8) = v14 + 32;
    }
    sub_19E4C3844(*(void *)(a1 + 8), &v22, &v22);
  }
LABEL_15:
  if (v22) {
    CFRelease(v22);
  }
}

void sub_19E4C3DD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CFTypeRef cf, CFTypeRef a13, CFTypeRef a14)
{
  if (cf) {
    CFRelease(cf);
  }
  if (a14) {
    CFRelease(a14);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_19E4C3E44(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF0B5450;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 sub_19E4C3E6C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF0B5450;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void sub_19E4C3EB8()
{
}

uint64_t sub_19E4C3ED0(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = &unk_1EF0BDAE0;
  uint8x8_t v6 = v5;
  v3[0] = &unk_1EF0B56B8;
  v3[1] = a1;
  uint64_t v4 = v3;
  sub_19E49AA70(a2, (uint64_t)v5, (uint64_t)v3);
  if (v4 == v3)
  {
    (*(void (**)(void *))(v3[0] + 32))(v3);
  }
  else if (v4)
  {
    (*(void (**)(void))(*v4 + 40))();
  }
  uint64_t result = (uint64_t)v6;
  if (v6 == v5) {
    return (*(uint64_t (**)(void *))(v5[0] + 32))(v5);
  }
  if (v6) {
    return (*(uint64_t (**)(void))(*v6 + 40))();
  }
  return result;
}

void sub_19E4C4044(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_19E49AC30((uint64_t *)va);
  sub_19E49AD38((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void *sub_19E4C4060()
{
  return &unk_1EF0B81A8;
}

uint64_t sub_19E4C406C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZNK17language_modeling2v124LinguisticTokenConverter7convertERNS0_13TokenSequenceEE3$_0"
    || ((v3 & (unint64_t)"ZNK17language_modeling2v124LinguisticTokenConverter7convertERNS0_13TokenSequenceEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZNK17language_modeling2v124LinguisticTokenConverter7convertERNS0_13TokenSequenceEE3$_0")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK17language_modeling2v124LinguisticTokenConverter7convertERNS0_13TokenSequenceEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_19E4C40C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, void, void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), a2, a3, *a5, a5[1], 3);
}

uint64_t sub_19E4C40FC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF0B56B8;
  a2[1] = v2;
  return result;
}

void *sub_19E4C4120(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF0B56B8;
  result[1] = v3;
  return result;
}

void sub_19E4C4168()
{
}

void *sub_19E4C4180()
{
  return &unk_1EF0B81B8;
}

uint64_t sub_19E4C418C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZNK17language_modeling2v124LinguisticTokenConverter7convertERNS0_13TokenSequenceEE3$_1"
    || ((v3 & (unint64_t)"ZNK17language_modeling2v124LinguisticTokenConverter7convertERNS0_13TokenSequenceEE3$_1" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZNK17language_modeling2v124LinguisticTokenConverter7convertERNS0_13TokenSequenceEE3$_1")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK17language_modeling2v124LinguisticTokenConverter7convertERNS0_13TokenSequenceEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL sub_19E4C41E4(uint64_t a1, _DWORD *a2)
{
  return *a2 == 0;
}

void sub_19E4C41FC(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF0BDAE0;
}

void *sub_19E4C421C()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF0BDAE0;
  return result;
}

void sub_19E4C4254()
{
}

uint64_t sub_19E4C426C(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 12);
  unint64_t v3 = *(void **)(a1 + 16);
  if (v2) {
    return sub_19E4B5FF0(v3[58], a2);
  }
  else {
    return sub_19E3FE284(v3, a2, 0);
  }
}

void *sub_19E4C4288(void *a1)
{
  *a1 = &unk_1EF0B97C8;
  uint64_t v2 = a1[5];
  if (v2)
  {
    uint64_t v3 = a1[6];
    uint64_t v4 = (void *)a1[5];
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *(const void **)(v3 - 8);
        if (v5) {
          CFRelease(v5);
        }
        v3 -= 32;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)a1[5];
    }
    a1[6] = v2;
    operator delete(v4);
  }
  uint64_t v6 = (std::__shared_weak_count *)a1[3];
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return a1;
}

uint64_t sub_19E4C4360(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  if (a2) {
    *a2 = *(_DWORD *)(**(void **)(a1 + 8) + 4 * *(void *)(a1 + 16));
  }
  if (a3)
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 8) + 24) + 120 * *(void *)(a1 + 16);
    long long v5 = *(_OWORD *)(v3 + 80);
    long long v4 = *(_OWORD *)(v3 + 96);
    long long v6 = *(_OWORD *)(v3 + 64);
    *(void *)(a3 + 112) = *(void *)(v3 + 112);
    *(_OWORD *)(a3 + 80) = v5;
    *(_OWORD *)(a3 + 96) = v4;
    *(_OWORD *)(a3 + 64) = v6;
    long long v7 = *(_OWORD *)v3;
    long long v8 = *(_OWORD *)(v3 + 16);
    long long v9 = *(_OWORD *)(v3 + 48);
    *(_OWORD *)(a3 + 32) = *(_OWORD *)(v3 + 32);
    *(_OWORD *)(a3 + 48) = v9;
    *(_OWORD *)a3 = v7;
    *(_OWORD *)(a3 + 16) = v8;
  }
  return 1;
}

BOOL sub_19E4C43B8(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 8);
  unint64_t v2 = *(void *)(a1 + 16) + 1;
  *(void *)(a1 + 16) = v2;
  return v2 < (uint64_t)(v1[1] - *v1) >> 2;
}

void sub_19E4C43D8()
{
}

void sub_19E4C43F0(void **a1, unint64_t a2)
{
  long long v5 = (char *)a1[1];
  long long v4 = a1[2];
  if (0xEEEEEEEEEEEEEEEFLL * ((v4 - v5) >> 3) >= a2)
  {
    if (a2)
    {
      CFLocaleRef v11 = &v5[120 * a2];
      uint64_t v12 = 120 * a2;
      uint64_t v13 = v5 + 64;
      int64x2_t v14 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
      do
      {
        *(_OWORD *)(v13 - 40) = 0uLL;
        *(_OWORD *)(v13 - ++*(_DWORD *)(result + 24) = 0uLL;
        *(_OWORD *)(v13 - 8) = 0uLL;
        *(_OWORD *)(v13 + 8) = 0uLL;
        *(_OWORD *)(v13 + ++*(_DWORD *)(result + 24) = 0uLL;
        *(_OWORD *)(v13 + 40) = 0uLL;
        *((int64x2_t *)v13 - 4) = v14;
        *((void *)v13 - 6) = 0;
        *(v13 - 32) = 1;
        *((void *)v13 - 3) = 0xFFEFFFFFFFFFFFFFLL;
        *(void *)uint64_t v13 = 0xFFEFFFFFFFFFFFFFLL;
        *((void *)v13 + 2) = 0xFFEFFFFFFFFFFFFFLL;
        *((void *)v13 + 3) = 0;
        *((void *)v13 + 4) = 0;
        *((void *)v13 + 5) = 0;
        *((_WORD *)v13 + ++*(_DWORD *)(result + 24) = 0;
        v13 += 120;
        v12 -= 120;
      }
      while (v12);
      a1[1] = v11;
    }
    else
    {
      a1[1] = v5;
    }
  }
  else
  {
    unint64_t v6 = 0xEEEEEEEEEEEEEEEFLL * ((v5 - (unsigned char *)*a1) >> 3);
    unint64_t v7 = v6 + a2;
    if (v6 + a2 > 0x222222222222222) {
      sub_19E37C7C4();
    }
    unint64_t v8 = 0xEEEEEEEEEEEEEEEFLL * ((v4 - (unsigned char *)*a1) >> 3);
    if (2 * v8 > v7) {
      unint64_t v7 = 2 * v8;
    }
    if (v8 >= 0x111111111111111) {
      unint64_t v9 = 0x222222222222222;
    }
    else {
      unint64_t v9 = v7;
    }
    if (v9)
    {
      if (v9 > 0x222222222222222) {
        sub_19E37C2B8();
      }
      int v10 = (char *)operator new(120 * v9);
    }
    else
    {
      int v10 = 0;
    }
    uint64_t v15 = 0;
    CFIndex v16 = &v10[120 * v6];
    CFTypeRef v17 = &v16[120 * a2];
    int64x2_t v18 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    do
    {
      int v19 = &v16[v15];
      *(_OWORD *)(v19 + ++*(_DWORD *)(result + 24) = 0uLL;
      *(_OWORD *)(v19 + 40) = 0uLL;
      *(_OWORD *)(v19 + 56) = 0uLL;
      *(_OWORD *)(v19 + 72) = 0uLL;
      *(_OWORD *)(v19 + 88) = 0uLL;
      *(_OWORD *)(v19 + 104) = 0uLL;
      *(int64x2_t *)int v19 = v18;
      *((void *)v19 + 2) = 0;
      v19[32] = 1;
      *((void *)v19 + 5) = 0xFFEFFFFFFFFFFFFFLL;
      *((void *)v19 + 8) = 0xFFEFFFFFFFFFFFFFLL;
      *((void *)v19 + 10) = 0xFFEFFFFFFFFFFFFFLL;
      *((void *)v19 + 11) = 0;
      *((void *)v19 + 12) = 0;
      *((void *)v19 + 13) = 0;
      v15 += 120;
      *((_WORD *)v19 + 56) = 0;
    }
    while (120 * a2 != v15);
    CFTypeRef v20 = &v10[120 * v9];
    CFTypeRef v22 = (char *)*a1;
    unint64_t v21 = (char *)a1[1];
    if (v21 != *a1)
    {
      do
      {
        long long v23 = *(_OWORD *)(v21 - 120);
        long long v24 = *(_OWORD *)(v21 - 104);
        long long v25 = *(_OWORD *)(v21 - 88);
        *(_OWORD *)(v16 - 72) = *(_OWORD *)(v21 - 72);
        *(_OWORD *)(v16 - 88) = v25;
        *(_OWORD *)(v16 - 104) = v24;
        *(_OWORD *)(v16 - 120) = v23;
        long long v26 = *(_OWORD *)(v21 - 56);
        long long v27 = *(_OWORD *)(v21 - 40);
        long long v28 = *(_OWORD *)(v21 - 24);
        *((void *)v16 - 1) = *((void *)v21 - 1);
        *(_OWORD *)(v16 - ++*(_DWORD *)(result + 24) = v28;
        *(_OWORD *)(v16 - 40) = v27;
        *(_OWORD *)(v16 - 56) = v26;
        v16 -= 120;
        v21 -= 120;
      }
      while (v21 != v22);
      unint64_t v21 = (char *)*a1;
    }
    *a1 = v16;
    a1[1] = v17;
    a1[2] = v20;
    if (v21)
    {
      operator delete(v21);
    }
  }
}

uint64_t sub_19E4C463C(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  long long v4 = (void **)(a1 + 24);
  *(_OWORD *)a1 = 0u;
  sub_19E3F9C70(a1, 0x40uLL);
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 32) - v5;
  unint64_t v7 = 0xEEEEEEEEEEEEEEEFLL * (v6 >> 3);
  if (v7 > 0x3F)
  {
    if (v6 != 7680) {
      *(void *)(a1 + 32) = v5 + 7680;
    }
  }
  else
  {
    sub_19E4C43F0(v4, 64 - v7);
  }
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  unint64_t v10 = 0;
  while ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 16))(a2))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 24))(a2, *(void *)a1 + v8, *(void *)(a1 + 24) + v9);
    ++v10;
    v9 += 120;
    v8 += 4;
    if (v10 == 64) {
      return a1;
    }
  }
  unint64_t v11 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2;
  if (v10 <= v11)
  {
    if (v10 < v11) {
      *(void *)(a1 + 8) = *(void *)a1 + 4 * v10;
    }
  }
  else
  {
    sub_19E3F9C70(a1, v10 - v11);
  }
  uint64_t v12 = *(void *)(a1 + 24);
  unint64_t v13 = 0xEEEEEEEEEEEEEEEFLL * ((*(void *)(a1 + 32) - v12) >> 3);
  if (v10 <= v13)
  {
    if (v10 < v13) {
      *(void *)(a1 + 32) = v12 + 120 * v10;
    }
  }
  else
  {
    sub_19E4C43F0(v4, v10 - v13);
  }
  return a1;
}

void sub_19E4C47C8(_Unwind_Exception *exception_object)
{
  long long v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
    uint64_t v5 = *(void **)v1;
    if (!*(void *)v1) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    uint64_t v5 = *(void **)v1;
    if (!*(void *)v1) {
      goto LABEL_3;
    }
  }
  *(void *)(v1 + 8) = v5;
  operator delete(v5);
  _Unwind_Resume(exception_object);
}

void sub_19E4C480C()
{
}

uint64_t sub_19E4C4838()
{
  return 0;
}

void sub_19E4C4840(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t sub_19E4C484C()
{
  return 0;
}

uint64_t sub_19E4C4854()
{
  return 0;
}

uint64_t sub_19E4C485C()
{
  return 0;
}

uint64_t sub_19E4C4864()
{
  return 0;
}

uint64_t sub_19E4C486C()
{
  return 0;
}

uint64_t sub_19E4C4874()
{
  return 0;
}

uint64_t sub_19E4C487C()
{
  return 0;
}

uint64_t sub_19E4C4884()
{
  return 1;
}

uint64_t sub_19E4C488C()
{
  return 1;
}

uint64_t sub_19E4C4894(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 40) + 8 * *(void *)(a1 + 48) - 8);
}

uint64_t sub_19E4C48A4(uint64_t a1, unsigned int a2, int *a3, uint64_t a4)
{
  long long v4 = *(_DWORD **)(a1 + 40);
  unint64_t v5 = *(void *)(a1 + 48);
  uint64_t v6 = &v4[2 * v5];
  if (v5)
  {
    do
    {
      unint64_t v7 = v5 >> 1;
      uint64_t v8 = &v4[2 * (v5 >> 1)];
      unsigned int v10 = *v8;
      uint64_t v9 = v8 + 2;
      v5 += ~(v5 >> 1);
      if (v10 < a2) {
        long long v4 = v9;
      }
      else {
        unint64_t v5 = v7;
      }
    }
    while (v5);
    if (a4) {
      goto LABEL_7;
    }
    return 1;
  }
  if (!a4) {
    return 1;
  }
LABEL_7:
  if (v4 == v6 || *v4 != a2) {
    int v11 = 3;
  }
  else {
    int v11 = v4[1];
  }
  *a3 = v11;
  return 1;
}

uint64_t sub_19E4C4914(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  if (!a3) {
    return *(unsigned int *)(*(void *)(a1 + 24) + 4 * *a2);
  }
  uint64_t v3 = a2;
  while (1)
  {
    unsigned int v4 = *v3++;
    if (*(void *)(a1 + 32) <= (unint64_t)v4) {
      break;
    }
    if (!--a3) {
      return *(unsigned int *)(*(void *)(a1 + 24) + 4 * *a2);
    }
  }
  return 0;
}

uint64_t sub_19E4C494C()
{
  return 0;
}

void sub_19E4C4954(void *a1)
{
  *a1 = &unk_1EF0BBC40;
  unint64_t v2 = (void *)a1[1];
  if (v2) {
    munmap(v2, a1[2]);
  }
  a1[2] = 0;
  JUMPOUT(0x19F3BDCF0);
}

void *sub_19E4C49CC(void *a1)
{
  *a1 = &unk_1EF0BBC40;
  unint64_t v2 = (void *)a1[1];
  if (v2) {
    munmap(v2, a1[2]);
  }
  a1[2] = 0;
  return a1;
}

uint64_t sub_19E4C4A24(void *a1)
{
  if (a1[1] <= 0xFuLL)
  {
    sub_19E393108((uint64_t)v9);
    sub_19E37CA70(v10, (uint64_t)"(file_size=", 11);
    unint64_t v2 = (void *)std::ostream::operator<<();
    sub_19E37CA70(v2, (uint64_t)", offset=", 9);
    uint64_t v3 = (void *)std::ostream::operator<<();
    sub_19E37CA70(v3, (uint64_t)", object_size=", 14);
    unsigned int v4 = (void *)std::ostream::operator<<();
    sub_19E37CA70(v4, (uint64_t)")", 1);
    exception = __cxa_allocate_exception(0x10uLL);
    sub_19E43BFBC(&__dst, (uint64_t)v9);
    __n128 v6 = sub_19E420378(&v8, "attempted to read beyond the end of the mapped file ", &__dst);
    MEMORY[0x19F3BD7A0](exception, &v8, v6);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return *a1;
}

void sub_19E4C4B30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v23 & 1) == 0)
    {
LABEL_8:
      sub_19E3933E0((uint64_t)&a22);
      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t sub_19E4C4BA0(_DWORD *a1, unsigned int a2)
{
  if (a1[8] <= a2 && a1[9] >= a2 || a1[10] <= a2 && a1[11] >= a2) {
    return 0;
  }
  if (a1[12] <= a2 && a1[13] >= a2) {
    return 2;
  }
  return 3;
}

uint64_t sub_19E4C4C00(uint64_t a1, unsigned int *a2, uint64_t a3, int *a4, uint64_t a5)
{
  unint64_t v5 = a4;
  if (a3 < 1) {
    return v5 - a4;
  }
  unint64_t v5 = a4;
  if (a5 < 1) {
    return v5 - a4;
  }
  __n128 v6 = &a2[a3];
  unint64_t v7 = *(void *)(a1 + 88);
  unint64_t v8 = (unint64_t)&a4[a5];
  if (!v7)
  {
    int v23 = a2 + 1;
    unint64_t v5 = a4;
    do
    {
      *v5++ = *(v23 - 1);
      if (v23 >= v6) {
        break;
      }
      ++v23;
    }
    while ((unint64_t)v5 < v8);
    return v5 - a4;
  }
  uint64_t v9 = *(_DWORD **)(a1 + 80);
  unint64_t v5 = a4;
  while (1)
  {
    unsigned int v10 = *a2;
    int v11 = v9;
    unint64_t v12 = v7;
    do
    {
      unint64_t v13 = v12 >> 1;
      int64x2_t v14 = &v11[2 * (v12 >> 1)];
      unsigned int v16 = *v14;
      uint64_t v15 = v14 + 2;
      v12 += ~(v12 >> 1);
      if (v16 < v10) {
        int v11 = v15;
      }
      else {
        unint64_t v12 = v13;
      }
    }
    while (v12);
    if (v11 != &v9[2 * v7] && *v11 == v10) {
      break;
    }
    *v5++ = v10;
LABEL_15:
    if (++a2 >= v6 || (unint64_t)v5 >= v8) {
      return v5 - a4;
    }
  }
  if ((uint64_t)(v8 - (void)v5) >= 9)
  {
    unsigned int v17 = v11[1];
    int v18 = *(_DWORD *)(a1 + 100);
    char v19 = *(_DWORD *)(a1 + 104);
    int v20 = (v17 >> (v19 + v18)) & ~(-1 << *(_DWORD *)(a1 + 96));
    int v21 = (v17 >> v19) & ~(-1 << v18);
    *unint64_t v5 = v20;
    v5[1] = v21;
    int v22 = v17 & ~(-1 << v19);
    v5[2] = v22;
    *unint64_t v5 = *(_DWORD *)(a1 + 32) + v20;
    v5[1] = *(_DWORD *)(a1 + 40) + v21;
    v5[2] = *(_DWORD *)(a1 + 48) + v22;
    v5 += 3;
    goto LABEL_15;
  }
  return 0;
}

uint64_t sub_19E4C4D40(uint64_t a1, char *a2, uint64_t a3, unsigned int *a4, uint64_t a5)
{
  unint64_t v5 = a4;
  if (a5 >= 1)
  {
    unint64_t v5 = a4;
    if (a3 >= 1)
    {
      __n128 v6 = &a2[4 * a3];
      unint64_t v7 = a2;
      unint64_t v5 = a4;
      do
      {
        if (v6 - v7 < 9) {
          goto LABEL_18;
        }
        unsigned int v10 = *((_DWORD *)v7 + 2)
            - *(_DWORD *)(a1 + 48)
            + ((*((_DWORD *)v7 + 1) - *(_DWORD *)(a1 + 40)) << *(_DWORD *)(a1 + 104))
            + ((*(_DWORD *)v7 - *(_DWORD *)(a1 + 32)) << (*(_DWORD *)(a1 + 104) + *(_DWORD *)(a1 + 100)));
        int v11 = *(char **)(a1 + 56);
        unint64_t v12 = *(char **)(a1 + 64);
        if (v12 != v11)
        {
          unint64_t v13 = (v12 - v11) >> 3;
          do
          {
            unint64_t v14 = v13 >> 1;
            uint64_t v15 = &v11[8 * (v13 >> 1)];
            unsigned int v16 = *((_DWORD *)v15 + 1);
            unsigned int v17 = v15 + 8;
            v13 += ~(v13 >> 1);
            if (v16 < v10) {
              int v11 = v17;
            }
            else {
              unint64_t v13 = v14;
            }
          }
          while (v13);
        }
        v7 += 12;
        if (v11 != v12 && *((_DWORD *)v11 + 1) == v10)
        {
          unsigned int v8 = *(_DWORD *)v11;
        }
        else
        {
LABEL_18:
          unsigned int v8 = *(_DWORD *)a2;
          if (*(_DWORD *)(a1 + 24) > *(_DWORD *)a2 || v8 > *(_DWORD *)(a1 + 28)) {
            return 0;
          }
        }
        *v5++ = v8;
      }
      while (v5 < &a4[a5] && v7 < v6);
    }
  }
  return v5 - a4;
}

void sub_19E4C4E44(void *a1)
{
  *a1 = &unk_1EF0BB518;
  unint64_t v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[1];
  if (v3) {
    munmap(v3, a1[2]);
  }
  a1[2] = 0;
  JUMPOUT(0x19F3BDCF0);
}

unint64_t *sub_19E4C4ECC(unint64_t *result, int8x16_t *a2, uint64_t a3, char a4)
{
  unint64_t v9 = (unint64_t)result;
LABEL_2:
  unsigned int v10 = &a2[-1].i64[1];
  int v11 = (int8x16_t *)v9;
  while (1)
  {
    unint64_t v9 = (unint64_t)v11;
    uint64_t v12 = (char *)a2 - (char *)v11;
    uint64_t v13 = ((char *)a2 - (char *)v11) >> 3;
    if (v5 || !v4) {
      break;
    }
    if (v12 <= 191)
    {
      CFIndex v78 = (int8x16_t *)&v11->u64[1];
      BOOL v80 = v11 == a2 || v78 == a2;
      if (a4)
      {
        if (!v80)
        {
          uint64_t v81 = 0;
          unint64_t v82 = v11;
          do
          {
            unsigned __int32 v84 = v82->u32[3];
            unsigned __int32 v85 = v82->u32[1];
            unint64_t v82 = v78;
            if (v84 < v85)
            {
              uint64_t v86 = v78->i64[0];
              unint64_t v87 = HIDWORD(v82->i64[0]);
              uint64_t v88 = v81;
              do
              {
                *(uint64_t *)((char *)&v11->i64[1] + v88) = *(uint64_t *)((char *)v11->i64 + v88);
                if (!v88)
                {
                  uint64_t v83 = (uint64_t *)v11;
                  goto LABEL_124;
                }
                unsigned int v89 = *(unsigned __int32 *)((char *)&v11->u32[-1] + v88);
                v88 -= 8;
              }
              while (v89 > v87);
              uint64_t v83 = (uint64_t *)((char *)&v11->i64[1] + v88);
LABEL_124:
              *uint64_t v83 = v86;
            }
            CFIndex v78 = (int8x16_t *)&v82->u64[1];
            v81 += 8;
          }
          while (&v82->u64[1] != (unint64_t *)a2);
        }
      }
      else if (!v80)
      {
        do
        {
          unsigned int v121 = *(_DWORD *)(v9 + 12);
          unsigned int v122 = *(_DWORD *)(v9 + 4);
          unint64_t v9 = (unint64_t)v78;
          if (v121 < v122)
          {
            uint64_t v123 = v78->i64[0];
            unint64_t v124 = HIDWORD(v78->i64[0]);
            uint64_t v125 = (void *)v9;
            do
            {
              unint64_t v126 = v125;
              uint64_t v127 = *--v125;
              void *v126 = v127;
            }
            while (*((_DWORD *)v126 - 3) > v124);
            *uint64_t v125 = v123;
          }
          CFIndex v78 = (int8x16_t *)(v9 + 8);
        }
        while ((int8x16_t *)(v9 + 8) != a2);
      }
      return result;
    }
    if (!a3)
    {
      if (v11 != a2)
      {
        int64_t v90 = (unint64_t)(v13 - 2) >> 1;
        int64_t v91 = v90;
        do
        {
          if (v90 >= v91)
          {
            uint64_t v93 = (2 * v91) | 1;
            char v94 = &v11->i8[8 * v93];
            if (2 * v91 + 2 < v13)
            {
              unsigned int v95 = *((_DWORD *)v94 + 1);
              unsigned int v96 = *((_DWORD *)v94 + 3);
              v94 += 8 * (v95 < v96);
              if (v95 < v96) {
                uint64_t v93 = 2 * v91 + 2;
              }
            }
            size_t v97 = &v11->i8[8 * v91];
            if (*((_DWORD *)v94 + 1) >= *((_DWORD *)v97 + 1))
            {
              uint64_t v98 = *(void *)v97;
              uint64_t v99 = HIDWORD(*(void *)v97);
              do
              {
                CFIndex v100 = v97;
                size_t v97 = v94;
                *(void *)CFIndex v100 = *(void *)v94;
                if (v90 < v93) {
                  break;
                }
                uint64_t v101 = (2 * v93) | 1;
                char v94 = &v11->i8[8 * v101];
                uint64_t v102 = 2 * v93 + 2;
                if (v102 < v13)
                {
                  unsigned int v103 = *((_DWORD *)v94 + 1);
                  unsigned int v104 = *((_DWORD *)v94 + 3);
                  v94 += 8 * (v103 < v104);
                  if (v103 < v104) {
                    uint64_t v101 = v102;
                  }
                }
                uint64_t result = (unint64_t *)*((unsigned int *)v94 + 1);
                uint64_t v93 = v101;
              }
              while (result >= v99);
              *(void *)size_t v97 = v98;
            }
          }
          BOOL v92 = v91-- <= 0;
        }
        while (!v92);
        uint64_t v105 = (unint64_t)v12 >> 3;
        do
        {
          uint64_t v106 = 0;
          uint64_t v107 = v11->i64[0];
          i64 = v11->i64;
          do
          {
            uint64_t v109 = (uint64_t)&i64[v106 + 1];
            uint64_t v110 = (2 * v106) | 1;
            uint64_t v111 = 2 * v106 + 2;
            if (v111 < v105)
            {
              unsigned int v112 = *(_DWORD *)(v109 + 4);
              unsigned int v113 = *(_DWORD *)(v109 + 12);
              v109 += 8 * (v112 < v113);
              if (v112 < v113) {
                uint64_t v110 = v111;
              }
            }
            void *i64 = *(void *)v109;
            i64 = (void *)v109;
            uint64_t v106 = v110;
          }
          while (v110 <= (uint64_t)((unint64_t)(v105 - 2) >> 1));
          a2 = (int8x16_t *)((char *)a2 - 8);
          if ((int8x16_t *)v109 == a2)
          {
            *(void *)uint64_t v109 = v107;
          }
          else
          {
            *(void *)uint64_t v109 = a2->i64[0];
            a2->i64[0] = v107;
            uint64_t v114 = v109 - (void)v11 + 8;
            if (v114 >= 9)
            {
              unint64_t v115 = (((unint64_t)v114 >> 3) - 2) >> 1;
              uint64_t v116 = &v11->i8[8 * v115];
              if (*((_DWORD *)v116 + 1) < *(_DWORD *)(v109 + 4))
              {
                uint64_t v117 = *(void *)v109;
                uint64_t v118 = HIDWORD(*(void *)v109);
                do
                {
                  float64x2x2_t v119 = (void *)v109;
                  uint64_t v109 = (uint64_t)v116;
                  void *v119 = *(void *)v116;
                  if (!v115) {
                    break;
                  }
                  unint64_t v115 = (v115 - 1) >> 1;
                  uint64_t v116 = &v11->i8[8 * v115];
                }
                while (*((_DWORD *)v116 + 1) < v118);
                *(void *)uint64_t v109 = v117;
              }
            }
          }
          BOOL v92 = v105-- <= 2;
        }
        while (!v92);
      }
      return result;
    }
    unint64_t v14 = (unint64_t)v13 >> 1;
    uint64_t v15 = &v11->i8[8 * ((unint64_t)v13 >> 1)];
    unsigned __int32 v16 = a2[-1].u32[3];
    if ((unint64_t)v12 < 0x401)
    {
      unsigned __int32 v19 = v11->u32[1];
      if (v19 < *((_DWORD *)v15 + 1))
      {
        uint64_t v20 = *(void *)v15;
        if (v16 < v19)
        {
          *(void *)uint64_t v15 = *v10;
          goto LABEL_32;
        }
        *(void *)uint64_t v15 = v11->i64[0];
        v11->i64[0] = v20;
        if (a2[-1].i32[3] < HIDWORD(v20))
        {
          v11->i64[0] = *v10;
LABEL_32:
          *unsigned int v10 = v20;
        }
LABEL_33:
        --a3;
        if ((a4 & 1) == 0) {
          goto LABEL_57;
        }
        goto LABEL_34;
      }
      if (v16 >= v19) {
        goto LABEL_33;
      }
      uint64_t v23 = v11->i64[0];
      v11->i64[0] = *v10;
      *unsigned int v10 = v23;
      if (v11->i32[1] >= *((_DWORD *)v15 + 1)) {
        goto LABEL_33;
      }
      uint64_t v24 = *(void *)v15;
      *(void *)uint64_t v15 = v11->i64[0];
      v11->i64[0] = v24;
      --a3;
      if ((a4 & 1) == 0) {
        goto LABEL_57;
      }
LABEL_34:
      uint64_t v32 = v11->i64[0];
LABEL_58:
      uint64_t v47 = v11;
      do
      {
        int v48 = v47;
        uint64_t v47 = (int8x16_t *)((char *)v47 + 8);
      }
      while (v48->i32[3] < HIDWORD(v32));
      CFStringRef v49 = a2;
      if (v48 == v11)
      {
        uint8x8_t v52 = a2;
        while (v47 < v52)
        {
          uint64_t v50 = (int8x16_t *)((char *)v52 - 8);
          unsigned __int32 v53 = v52[-1].u32[3];
          uint8x8_t v52 = (int8x16_t *)((char *)v52 - 8);
          if (v53 < HIDWORD(v32)) {
            goto LABEL_66;
          }
        }
        uint64_t v50 = v52;
      }
      else
      {
        do
        {
          uint64_t v50 = (int8x16_t *)((char *)v49 - 8);
          unsigned __int32 v51 = v49[-1].u32[3];
          CFStringRef v49 = (int8x16_t *)((char *)v49 - 8);
        }
        while (v51 >= HIDWORD(v32));
LABEL_66:
        if (v47 < v50)
        {
          unint64_t v54 = v47;
          char v55 = v50;
          do
          {
            uint64_t v56 = v54->i64[0];
            v54->i64[0] = v55->i64[0];
            v55->i64[0] = v56;
            do
            {
              int v48 = v54;
              unint64_t v54 = (int8x16_t *)((char *)v54 + 8);
            }
            while (v48->i32[3] < HIDWORD(v32));
            do
            {
              unsigned int v57 = v55[-1].u32[3];
              char v55 = (int8x16_t *)((char *)v55 - 8);
            }
            while (v57 >= HIDWORD(v32));
          }
          while (v54 < v55);
        }
      }
      if (v48 != v11) {
        v11->i64[0] = v48->i64[0];
      }
      v48->i64[0] = v32;
      if (v47 < v50) {
        goto LABEL_77;
      }
      BOOL v58 = sub_19E4C59CC(v11, v48);
      int v11 = (int8x16_t *)&v48->u64[1];
      uint64_t result = (unint64_t *)sub_19E4C59CC((int8x16_t *)&v48->u64[1], a2);
      if (result)
      {
        a2 = v48;
        if (v58) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v58)
      {
LABEL_77:
        uint64_t result = (unint64_t *)sub_19E4C4ECC(v9, v48, a3, a4 & 1);
        a4 = 0;
        int v11 = (int8x16_t *)&v48->u64[1];
      }
    }
    else
    {
      unsigned __int32 v17 = *((_DWORD *)v15 + 1);
      if (v17 >= v11->i32[1])
      {
        if (v16 < v17)
        {
          uint64_t v21 = *(void *)v15;
          *(void *)uint64_t v15 = *v10;
          *unsigned int v10 = v21;
          if (*((_DWORD *)v15 + 1) < v11->i32[1])
          {
            uint64_t v22 = v11->i64[0];
            v11->i64[0] = *(void *)v15;
            *(void *)uint64_t v15 = v22;
          }
        }
      }
      else
      {
        uint64_t v18 = v11->i64[0];
        if (v16 >= v17)
        {
          v11->i64[0] = *(void *)v15;
          *(void *)uint64_t v15 = v18;
          if (a2[-1].i32[3] >= HIDWORD(v18)) {
            goto LABEL_24;
          }
          *(void *)uint64_t v15 = *v10;
        }
        else
        {
          v11->i64[0] = *v10;
        }
        *unsigned int v10 = v18;
      }
LABEL_24:
      long long v25 = &v11->i8[8 * v14];
      long long v26 = v25 - 8;
      unsigned __int32 v27 = *((_DWORD *)v25 - 1);
      unsigned __int32 v28 = a2[-1].u32[1];
      if (v27 >= v11->i32[3])
      {
        if (v28 < v27)
        {
          uint64_t v30 = *(void *)v26;
          *(void *)long long v26 = a2[-1].i64[0];
          a2[-1].i64[0] = v30;
          if (*((_DWORD *)v26 + 1) < v11->i32[3])
          {
            uint64_t v31 = v11->i64[1];
            v11->i64[1] = *(void *)v26;
            *(void *)long long v26 = v31;
          }
        }
      }
      else
      {
        uint64_t v29 = v11->i64[1];
        if (v28 >= v27)
        {
          v11->i64[1] = *(void *)v26;
          *(void *)long long v26 = v29;
          if (a2[-1].i32[1] >= HIDWORD(v29)) {
            goto LABEL_38;
          }
          *(void *)long long v26 = a2[-1].i64[0];
        }
        else
        {
          v11->i64[1] = a2[-1].i64[0];
        }
        a2[-1].i64[0] = v29;
      }
LABEL_38:
      char v33 = &v11->i8[8 * v14];
      unint64_t v34 = v33 + 8;
      unsigned __int32 v35 = *((_DWORD *)v33 + 3);
      unsigned __int32 v36 = a2[-2].u32[3];
      if (v35 >= v11[1].i32[1])
      {
        if (v36 < v35)
        {
          uint64_t v38 = *(void *)v34;
          *(void *)unint64_t v34 = a2[-2].i64[1];
          a2[-2].i64[1] = v38;
          if (*((_DWORD *)v34 + 1) < v11[1].i32[1])
          {
            uint64_t v39 = v11[1].i64[0];
            v11[1].i64[0] = *(void *)v34;
            *(void *)unint64_t v34 = v39;
          }
        }
      }
      else
      {
        uint64_t v37 = v11[1].i64[0];
        if (v36 >= v35)
        {
          v11[1].i64[0] = *(void *)v34;
          *(void *)unint64_t v34 = v37;
          if (a2[-2].i32[3] >= HIDWORD(v37)) {
            goto LABEL_47;
          }
          *(void *)unint64_t v34 = a2[-2].i64[1];
        }
        else
        {
          v11[1].i64[0] = a2[-2].i64[1];
        }
        a2[-2].i64[1] = v37;
      }
LABEL_47:
      unsigned int v40 = *((_DWORD *)v15 + 1);
      unsigned int v41 = *((_DWORD *)v26 + 1);
      unsigned int v42 = *((_DWORD *)v34 + 1);
      if (v40 >= v41)
      {
        uint64_t v43 = *(void *)v15;
        if (v42 < v40)
        {
          uint64_t v44 = *(void *)v34;
          *(void *)uint64_t v15 = *(void *)v34;
          *(void *)unint64_t v34 = v43;
          if (v41 > HIDWORD(v44))
          {
            uint64_t v43 = *(void *)v26;
            *(void *)long long v26 = v44;
            *(void *)uint64_t v15 = v43;
          }
          else
          {
            uint64_t v43 = v44;
          }
        }
      }
      else
      {
        uint64_t v43 = *(void *)v26;
        if (v42 >= v40)
        {
          *(void *)long long v26 = *(void *)v15;
          *(void *)uint64_t v15 = v43;
          if (v42 < HIDWORD(v43))
          {
            uint64_t v45 = *(void *)v34;
            *(void *)uint64_t v15 = *(void *)v34;
            *(void *)unint64_t v34 = v43;
            uint64_t v43 = v45;
          }
        }
        else
        {
          *(void *)long long v26 = *(void *)v34;
          *(void *)unint64_t v34 = v43;
          uint64_t v43 = *(void *)v15;
        }
      }
      uint64_t v46 = v11->i64[0];
      v11->i64[0] = v43;
      *(void *)uint64_t v15 = v46;
      --a3;
      if (a4) {
        goto LABEL_34;
      }
LABEL_57:
      uint64_t v32 = v11->i64[0];
      if (v11[-1].i32[3] < (unsigned __int32)v11->i32[1]) {
        goto LABEL_58;
      }
      if (a2[-1].i32[3] > HIDWORD(v32))
      {
        CFArrayRef v59 = v11;
        do
        {
          int v11 = (int8x16_t *)&v59->u64[1];
          unsigned __int32 v60 = v59->u32[3];
          CFArrayRef v59 = (int8x16_t *)((char *)v59 + 8);
        }
        while (v60 <= HIDWORD(v32));
      }
      else
      {
        CFIndex v61 = (int8x16_t *)&v11->u64[1];
        do
        {
          int v11 = v61;
          if (v61 >= a2) {
            break;
          }
          unsigned __int32 v62 = v61->u32[1];
          CFIndex v61 = (int8x16_t *)((char *)v61 + 8);
        }
        while (v62 <= HIDWORD(v32));
      }
      CFAllocatorRef v63 = a2;
      if (v11 < a2)
      {
        unint64_t v64 = a2;
        do
        {
          CFAllocatorRef v63 = (int8x16_t *)((char *)v64 - 8);
          unsigned __int32 v65 = v64[-1].u32[3];
          unint64_t v64 = (int8x16_t *)((char *)v64 - 8);
        }
        while (v65 > HIDWORD(v32));
      }
      while (v11 < v63)
      {
        uint64_t v66 = v11->i64[0];
        v11->i64[0] = v63->i64[0];
        v63->i64[0] = v66;
        do
        {
          unsigned __int32 v67 = v11->u32[3];
          int v11 = (int8x16_t *)((char *)v11 + 8);
        }
        while (v67 <= HIDWORD(v32));
        do
        {
          unsigned __int32 v68 = v63[-1].u32[3];
          CFAllocatorRef v63 = (int8x16_t *)((char *)v63 - 8);
        }
        while (v68 > HIDWORD(v32));
      }
      CFStringRef v69 = &v11[-1].i64[1];
      BOOL v4 = (unint64_t)&v11[-1].u64[1] >= v9;
      BOOL v5 = &v11[-1].u64[1] == (unint64_t *)v9;
      if (&v11[-1].u64[1] != (unint64_t *)v9) {
        *(void *)unint64_t v9 = *v69;
      }
      a4 = 0;
      *CFStringRef v69 = v32;
    }
  }
  switch(v13)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (a2[-1].i32[3] >= (unsigned __int32)v11->i32[1]) {
        return result;
      }
      uint64_t v70 = v11->i64[0];
      goto LABEL_104;
    case 3:
      unsigned __int32 v71 = v11->u32[3];
      unsigned __int32 v72 = a2[-1].u32[3];
      if (v71 < v11->i32[1])
      {
        uint64_t v70 = v11->i64[0];
        if (v72 >= v71)
        {
          v11->i64[0] = v11->i64[1];
          v11->i64[1] = v70;
          if (a2[-1].i32[3] >= HIDWORD(v70)) {
            return result;
          }
          v11->i64[1] = *v10;
        }
        else
        {
LABEL_104:
          v11->i64[0] = *v10;
        }
        *unsigned int v10 = v70;
        return result;
      }
      if (v72 < v71)
      {
        uint64_t v120 = v11->i64[1];
        v11->i64[1] = *v10;
        *unsigned int v10 = v120;
        if (v11->i32[3] < (unsigned __int32)v11->i32[1]) {
          *int v11 = vextq_s8(*v11, *v11, 8uLL);
        }
      }
      break;
    case 4:
      return sub_19E4C58C4((unint64_t *)v11, &v11->u64[1], (unint64_t *)&v11[1], &a2[-1].u64[1]);
    case 5:
      uint64_t result = sub_19E4C58C4((unint64_t *)v11, &v11->u64[1], (unint64_t *)&v11[1], &v11[1].u64[1]);
      if (a2[-1].i32[3] < (unsigned __int32)v11[1].i32[3])
      {
        uint64_t v73 = v11[1].i64[1];
        v11[1].i64[1] = *v10;
        *unsigned int v10 = v73;
        if (v11[1].i32[3] < (unsigned __int32)v11[1].i32[1])
        {
          uint64_t v75 = v11[1].i64[0];
          uint64_t v74 = v11[1].i64[1];
          v11[1].i64[0] = v74;
          v11[1].i64[1] = v75;
          if (v11->i32[3] > HIDWORD(v74))
          {
            uint64_t v76 = v11->i64[1];
            v11->i64[1] = v74;
            v11[1].i64[0] = v76;
            if (v11->i32[1] > HIDWORD(v74))
            {
              uint64_t v77 = v11->i64[0];
              v11->i64[0] = v74;
              v11->i64[1] = v77;
            }
          }
        }
      }
      return result;
    default:
      JUMPOUT(0);
  }
  return result;
}

unint64_t *sub_19E4C58C4(unint64_t *result, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  unsigned int v4 = *((_DWORD *)a2 + 1);
  LODWORD(v5) = *((_DWORD *)a3 + 1);
  if (v4 >= *((_DWORD *)result + 1))
  {
    if (v5 < v4)
    {
      unint64_t v7 = *a2;
      *a2 = *a3;
      *a3 = v7;
      if (*((_DWORD *)a2 + 1) >= *((_DWORD *)result + 1))
      {
        unint64_t v5 = HIDWORD(v7);
      }
      else
      {
        unint64_t v5 = *result;
        *uint64_t result = *a2;
        *a2 = v5;
        LODWORD(v5) = *((_DWORD *)a3 + 1);
      }
    }
  }
  else
  {
    unint64_t v6 = *result;
    if (v5 >= v4)
    {
      *uint64_t result = *a2;
      *a2 = v6;
      LODWORD(v5) = *((_DWORD *)a3 + 1);
      if (v5 < HIDWORD(v6))
      {
        *a2 = *a3;
        *a3 = v6;
        unint64_t v5 = HIDWORD(v6);
      }
    }
    else
    {
      *uint64_t result = *a3;
      *a3 = v6;
      unint64_t v5 = HIDWORD(v6);
    }
  }
  if (*((_DWORD *)a4 + 1) < v5)
  {
    unint64_t v8 = *a3;
    *a3 = *a4;
    *a4 = v8;
    if (*((_DWORD *)a3 + 1) < *((_DWORD *)a2 + 1))
    {
      unint64_t v9 = *a2;
      *a2 = *a3;
      *a3 = v9;
      if (*((_DWORD *)a2 + 1) < *((_DWORD *)result + 1))
      {
        unint64_t v10 = *result;
        *uint64_t result = *a2;
        *a2 = v10;
      }
    }
  }
  return result;
}

BOOL sub_19E4C59CC(int8x16_t *a1, int8x16_t *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 3;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (a2[-1].i32[3] < (unsigned __int32)a1->i32[1])
      {
        uint64_t v6 = a1->i64[0];
        goto LABEL_6;
      }
      return result;
    case 3:
      unsigned __int32 v7 = a1->u32[3];
      unsigned __int32 v8 = a2[-1].u32[3];
      if (v7 >= a1->i32[1])
      {
        if (v8 < v7)
        {
          uint64_t v18 = a1->i64[1];
          a1->i64[1] = a2[-1].i64[1];
          a2[-1].i64[1] = v18;
          if (a1->i32[3] < (unsigned __int32)a1->i32[1]) {
            *a1 = vextq_s8(*a1, *a1, 8uLL);
          }
        }
      }
      else
      {
        uint64_t v6 = a1->i64[0];
        if (v8 >= v7)
        {
          a1->i64[0] = a1->i64[1];
          a1->i64[1] = v6;
          if (a2[-1].i32[3] < HIDWORD(v6))
          {
            a1->i64[1] = a2[-1].i64[1];
            a2[-1].i64[1] = v6;
          }
        }
        else
        {
LABEL_6:
          a1->i64[0] = a2[-1].i64[1];
          a2[-1].i64[1] = v6;
        }
      }
      return result;
    case 4:
      sub_19E4C58C4((unint64_t *)a1, &a1->u64[1], (unint64_t *)&a1[1], &a2[-1].u64[1]);
      return 1;
    case 5:
      sub_19E4C58C4((unint64_t *)a1, &a1->u64[1], (unint64_t *)&a1[1], &a1[1].u64[1]);
      if (a2[-1].i32[3] < (unsigned __int32)a1[1].i32[3])
      {
        uint64_t v13 = a1[1].i64[1];
        a1[1].i64[1] = a2[-1].i64[1];
        a2[-1].i64[1] = v13;
        if (a1[1].i32[3] < (unsigned __int32)a1[1].i32[1])
        {
          uint64_t v15 = a1[1].i64[0];
          uint64_t v14 = a1[1].i64[1];
          a1[1].i64[0] = v14;
          a1[1].i64[1] = v15;
          if (a1->i32[3] > HIDWORD(v14))
          {
            uint64_t v16 = a1->i64[1];
            a1->i64[1] = v14;
            a1[1].i64[0] = v16;
            if (a1->i32[1] > HIDWORD(v14))
            {
              uint64_t v17 = a1->i64[0];
              a1->i64[0] = v14;
              a1->i64[1] = v17;
            }
          }
        }
      }
      return 1;
    default:
      unsigned __int32 v9 = a1->u32[3];
      unsigned __int32 v10 = a1->u32[1];
      unsigned __int32 v11 = a1[1].u32[1];
      if (v9 >= v10)
      {
        if (v11 < v9)
        {
          uint64_t v20 = a1->i64[1];
          uint64_t v19 = a1[1].i64[0];
          a1->i64[1] = v19;
          a1[1].i64[0] = v20;
          if (v10 > HIDWORD(v19))
          {
            uint64_t v21 = a1->i64[0];
            a1->i64[0] = v19;
            a1->i64[1] = v21;
          }
        }
      }
      else
      {
        uint64_t v12 = a1->i64[0];
        if (v11 >= v9)
        {
          a1->i64[0] = a1->i64[1];
          a1->i64[1] = v12;
          if (v11 >= HIDWORD(v12)) {
            goto LABEL_27;
          }
          a1->i64[1] = a1[1].i64[0];
        }
        else
        {
          a1->i64[0] = a1[1].i64[0];
        }
        a1[1].i64[0] = v12;
      }
LABEL_27:
      uint64_t v22 = (int8x16_t *)((char *)a1 + 24);
      if (&a1[1].u64[1] == (unint64_t *)a2) {
        return 1;
      }
      uint64_t v23 = 0;
      int v24 = 0;
      long long v25 = a1 + 1;
      break;
  }
  while (1)
  {
    if (v22->i32[1] < (unsigned __int32)v25->i32[1])
    {
      uint64_t v27 = v22->i64[0];
      unint64_t v28 = HIDWORD(v22->i64[0]);
      uint64_t v29 = v23;
      do
      {
        *(uint64_t *)((char *)&a1[1].i64[1] + v29) = *(uint64_t *)((char *)a1[1].i64 + v29);
        if (v29 == -16)
        {
          long long v26 = (uint64_t *)a1;
          goto LABEL_30;
        }
        unsigned int v30 = *(unsigned __int32 *)((char *)&a1->u32[3] + v29);
        v29 -= 8;
      }
      while (v30 > v28);
      long long v26 = (uint64_t *)((char *)&a1[1].i64[1] + v29);
LABEL_30:
      *long long v26 = v27;
      if (++v24 == 8) {
        return &v22->u64[1] == (unint64_t *)a2;
      }
    }
    long long v25 = v22;
    v23 += 8;
    uint64_t v22 = (int8x16_t *)((char *)v22 + 8);
    if (v22 == a2) {
      return 1;
    }
  }
}

uint64_t sub_19E4C5C94(uint64_t a1, int a2, CFDictionaryRef theDict, int a4)
{
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = a1 + 8;
  uint64_t v6 = a1 + 24;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = a1 + 24;
  *(void *)(a1 + 32) = a1 + 24;
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = a4;
  *(_DWORD *)(a1 + 52) = a2;
  if (a2 == 1 && a4 == 8)
  {
    unsigned int v7 = 63;
  }
  else if (a2 == 1 && a4 == 16)
  {
    unsigned int v7 = 255;
  }
  else if (a2 == 2 && a4 == 8)
  {
    unsigned int v7 = 0;
  }
  else if (a4 == 16 && a2 == 2)
  {
    unsigned int v7 = 63;
  }
  else
  {
    unsigned int v7 = -1;
  }
  memset(v24, 0, sizeof(v24));
  if (theDict && CFDictionaryGetCount(theDict) >= 1)
  {
    unint64_t Count = CFDictionaryGetCount(theDict);
    unint64_t v10 = Count;
    if (Count)
    {
      if (Count >> 61) {
        sub_19E37C7C4();
      }
      unsigned __int32 v11 = operator new(8 * Count);
      bzero(v11, 8 * v10);
      uint64_t v12 = operator new(8 * v10);
      bzero(v12, 8 * v10);
    }
    else
    {
      unsigned __int32 v11 = 0;
      uint64_t v12 = 0;
    }
    CFDictionaryGetKeysAndValues(theDict, (const void **)v11, (const void **)v12);
    if (v10)
    {
      for (uint64_t i = 0; i != v10; ++i)
      {
        CFTypeID v14 = CFGetTypeID(*((CFTypeRef *)v11 + i));
        if (v14 == CFStringGetTypeID())
        {
          CFTypeID v15 = CFGetTypeID(*((CFTypeRef *)v12 + i));
          if (v15 == CFNumberGetTypeID())
          {
            sub_19E37774C(*((const __CFString **)v11 + i), __p);
            unsigned int valuePtr = 0;
            CFNumberGetValue(*((CFNumberRef *)v12 + i), kCFNumberIntType, &valuePtr);
            unsigned int v16 = valuePtr;
            if (valuePtr <= v7)
            {
              *((_DWORD *)sub_19E45BC8C((uint64_t **)a1, (const void **)__p, (uint64_t)__p) + 14) = v16;
              if (valuePtr >= 0x100) {
                sub_19E392294("bitset set argument out of range");
              }
              *(void *)((char *)v24 + (((unint64_t)valuePtr >> 3) & 0x1FFFFFF8)) |= 1 << valuePtr;
            }
            if (v23 < 0) {
              operator delete(__p[0]);
            }
          }
        }
      }
    }
    if (v12) {
      operator delete(v12);
    }
    if (v11) {
      operator delete(v11);
    }
  }
  if (v7)
  {
    unint64_t v17 = 1;
    do
    {
      if (v17 == 256) {
        sub_19E392294("bitset test argument out of range");
      }
      if (((*(void *)((char *)v24 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v17) & 1) == 0)
      {
        uint64_t v18 = operator new(0x18uLL);
        unsigned int v18[4] = v17;
        uint64_t v19 = *(void *)(a1 + 24);
        *(void *)uint64_t v18 = v19;
        *((void *)v18 + 1) = v6;
        *(void *)(v19 + 8) = v18;
        *(void *)(a1 + ++*(_DWORD *)(result + 24) = v18;
        ++*(void *)(a1 + 40);
      }
      ++v17;
    }
    while (v17 - v7 != 1);
  }
  return a1;
}

void sub_19E4C5F50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  operator delete(v16);
  sub_19E4C5FCC(v15);
  sub_19E3CD3E0(*v17);
  _Unwind_Resume(a1);
}

uint64_t *sub_19E4C5FCC(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v3 = *a1;
    unint64_t v2 = (uint64_t *)a1[1];
    uint64_t v4 = *v2;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v3 + 8) = v4;
    a1[2] = 0;
    if (v2 != a1)
    {
      do
      {
        unint64_t v5 = (uint64_t *)v2[1];
        operator delete(v2);
        unint64_t v2 = v5;
      }
      while (v5 != a1);
    }
  }
  return a1;
}

uint64_t sub_19E4C6030(uint64_t a1)
{
  unint64_t v2 = *(const void **)a1;
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3)
  {
    if (*(void *)(v3 + 40))
    {
      uint64_t v5 = *(void *)(v3 + 24);
      uint64_t v4 = *(uint64_t **)(v3 + 32);
      uint64_t v6 = *v4;
      *(void *)(v6 + 8) = *(void *)(v5 + 8);
      **(void **)(v5 + 8) = v6;
      *(void *)(v3 + 40) = 0;
      if (v4 != (uint64_t *)(v3 + 24))
      {
        do
        {
          unsigned int v7 = (uint64_t *)v4[1];
          operator delete(v4);
          uint64_t v4 = v7;
        }
        while (v7 != (uint64_t *)(v3 + 24));
      }
    }
    sub_19E3CD3E0(*(char **)(v3 + 8));
    MEMORY[0x19F3BDCF0](v3, 0x1020C4014A78C51);
  }
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    if (*(void *)(v8 + 40))
    {
      uint64_t v10 = *(void *)(v8 + 24);
      unsigned __int32 v9 = *(uint64_t **)(v8 + 32);
      uint64_t v11 = *v9;
      *(void *)(v11 + 8) = *(void *)(v10 + 8);
      **(void **)(v10 + 8) = v11;
      *(void *)(v8 + 40) = 0;
      if (v9 != (uint64_t *)(v8 + 24))
      {
        do
        {
          uint64_t v12 = (uint64_t *)v9[1];
          operator delete(v9);
          unsigned __int32 v9 = v12;
        }
        while (v12 != (uint64_t *)(v8 + 24));
      }
    }
    sub_19E3CD3E0(*(char **)(v8 + 8));
    MEMORY[0x19F3BDCF0](v8, 0x1020C4014A78C51);
  }
  return a1;
}

uint64_t sub_19E4C6144(uint64_t a1, uint64_t a2)
{
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a2 + 32);
  if (v4)
  {
    if (*(char *)(v4 + 47) < 0)
    {
      sub_19E39369C(v51, *(void **)(v4 + 24), *(void *)(v4 + 32));
    }
    else
    {
      *(_OWORD *)unsigned __int32 v51 = *(_OWORD *)(v4 + 24);
      uint64_t v52 = *(void *)(v4 + 40);
    }
  }
  else
  {
    HIBYTE(v52) = 0;
    LOBYTE(v51[0]) = 0;
  }
  int v5 = *(_DWORD *)(a2 + 24);
  if (v5) {
    goto LABEL_7;
  }
  uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
  int v11 = (char)v10;
  if ((v10 & 0x80u) != 0) {
    uint64_t v10 = *(void *)(a2 + 8);
  }
  if (!v10)
  {
    int v5 = 0;
    goto LABEL_7;
  }
  if (v11 < 0)
  {
    sub_19E39369C(__dst, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __dst = *(_OWORD *)a2;
    uint64_t v58 = *(void *)(a2 + 16);
  }
  if (v58 >= 0) {
    uint64_t v20 = (void **)((char *)__dst + HIBYTE(v58));
  }
  else {
    uint64_t v20 = (void **)((char *)__dst[0] + (unint64_t)__dst[1]);
  }
  if (v58 >= 0) {
    uint64_t v21 = __dst;
  }
  else {
    uint64_t v21 = (void **)__dst[0];
  }
  for (; v21 != v20; uint64_t v21 = (void **)((char *)v21 + 1))
    *(unsigned char *)uint64_t v21 = __tolower(*(char *)v21);
  HIBYTE(v59[2]) = 19;
  strcpy((char *)v59, "com.apple.mobilesms");
  HIBYTE(v60[2]) = 18;
  strcpy((char *)v60, "com.apple.messages");
  char v62 = 12;
  strcpy((char *)v61, "com.facebook");
  char v64 = 11;
  strcpy((char *)v63, "com.twitter");
  char v66 = 13;
  strcpy((char *)v65, "com.instagram");
  char v68 = 12;
  strcpy((char *)v67, "com.snapchat");
  char v70 = 13;
  strcpy((char *)v69, "com.pinterest");
  char v72 = 8;
  strcpy((char *)v71, "com.vine");
  strcpy(v74, "\ncom.whatsapp");
  strcpy((char *)v73, "com.tumblr");
  char v75 = 12;
  sub_19E4923A0(&v55, (uint64_t)v59, 0xAuLL);
  if (v75 < 0)
  {
    operator delete(*(void **)&v74[1]);
    if ((v74[0] & 0x80000000) == 0)
    {
LABEL_40:
      if ((v72 & 0x80000000) == 0) {
        goto LABEL_41;
      }
      goto LABEL_97;
    }
  }
  else if ((v74[0] & 0x80000000) == 0)
  {
    goto LABEL_40;
  }
  operator delete(v73[0]);
  if ((v72 & 0x80000000) == 0)
  {
LABEL_41:
    if ((v70 & 0x80000000) == 0) {
      goto LABEL_42;
    }
    goto LABEL_98;
  }
LABEL_97:
  operator delete(v71[0]);
  if ((v70 & 0x80000000) == 0)
  {
LABEL_42:
    if ((v68 & 0x80000000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_99;
  }
LABEL_98:
  operator delete(v69[0]);
  if ((v68 & 0x80000000) == 0)
  {
LABEL_43:
    if ((v66 & 0x80000000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_100;
  }
LABEL_99:
  operator delete(v67[0]);
  if ((v66 & 0x80000000) == 0)
  {
LABEL_44:
    if ((v64 & 0x80000000) == 0) {
      goto LABEL_45;
    }
    goto LABEL_101;
  }
LABEL_100:
  operator delete(v65[0]);
  if ((v64 & 0x80000000) == 0)
  {
LABEL_45:
    if ((v62 & 0x80000000) == 0) {
      goto LABEL_46;
    }
    goto LABEL_102;
  }
LABEL_101:
  operator delete(v63[0]);
  if ((v62 & 0x80000000) == 0)
  {
LABEL_46:
    if ((SHIBYTE(v60[2]) & 0x80000000) == 0) {
      goto LABEL_47;
    }
LABEL_103:
    operator delete(v60[0]);
    if ((SHIBYTE(v59[2]) & 0x80000000) == 0) {
      goto LABEL_48;
    }
    goto LABEL_104;
  }
LABEL_102:
  operator delete(v61[0]);
  if (SHIBYTE(v60[2]) < 0) {
    goto LABEL_103;
  }
LABEL_47:
  if ((SHIBYTE(v59[2]) & 0x80000000) == 0) {
    goto LABEL_48;
  }
LABEL_104:
  operator delete(v59[0]);
LABEL_48:
  HIBYTE(v59[2]) = 20;
  strcpy((char *)v59, "com.apple.mobilemail");
  HIBYTE(v60[2]) = 14;
  strcpy((char *)v60, "com.apple.mail");
  sub_19E4923A0(&v53, (uint64_t)v59, 2uLL);
  if (SHIBYTE(v60[2]) < 0)
  {
    operator delete(v60[0]);
    if ((SHIBYTE(v59[2]) & 0x80000000) == 0) {
      goto LABEL_50;
    }
  }
  else if ((SHIBYTE(v59[2]) & 0x80000000) == 0)
  {
    goto LABEL_50;
  }
  operator delete(v59[0]);
LABEL_50:
  uint64_t v22 = (void **)v53;
  char v23 = v54;
  if (v53 != v54)
  {
    if (v58 >= 0) {
      int v24 = (void *)HIBYTE(v58);
    }
    else {
      int v24 = __dst[1];
    }
    if (v58 >= 0) {
      long long v25 = __dst;
    }
    else {
      long long v25 = (void **)__dst[0];
    }
    long long v26 = (void **)v53;
    while (1)
    {
      int v27 = *((char *)v26 + 23);
      unint64_t v28 = v27 >= 0 ? (void *)*((unsigned __int8 *)v26 + 23) : v26[1];
      uint64_t v29 = v27 >= 0 ? v26 : (void **)*v26;
      size_t v30 = (size_t)(v28 >= v24 ? v24 : v28);
      if (!memcmp(v25, v29, v30) && v28 == v24) {
        break;
      }
      v26 += 3;
      if (v26 == v23) {
        goto LABEL_72;
      }
    }
    int v5 = 2;
    if (!v22) {
      goto LABEL_125;
    }
    goto LABEL_118;
  }
LABEL_72:
  uint64_t v32 = (void **)v55;
  char v33 = v56;
  if (v55 != v56)
  {
    if (v58 >= 0) {
      unint64_t v34 = (void *)HIBYTE(v58);
    }
    else {
      unint64_t v34 = __dst[1];
    }
    if (v58 >= 0) {
      unsigned __int32 v35 = __dst;
    }
    else {
      unsigned __int32 v35 = (void **)__dst[0];
    }
    while (1)
    {
      int v36 = *((char *)v32 + 23);
      uint64_t v37 = v36 >= 0 ? (void *)*((unsigned __int8 *)v32 + 23) : v32[1];
      uint64_t v38 = v36 >= 0 ? v32 : (void **)*v32;
      size_t v39 = (size_t)(v37 >= v34 ? v34 : v37);
      if (!memcmp(v35, v38, v39) && v37 == v34) {
        break;
      }
      v32 += 3;
      if (v32 == v33) {
        goto LABEL_93;
      }
    }
    int v5 = 1;
    if (!v22) {
      goto LABEL_125;
    }
    goto LABEL_118;
  }
LABEL_93:
  int v5 = 0;
  if (v22)
  {
LABEL_118:
    uint64_t v47 = v22;
    if (v22 != v23)
    {
      do
      {
        if (*((char *)v23 - 1) < 0) {
          operator delete(*(v23 - 3));
        }
        v23 -= 3;
      }
      while (v23 != v22);
      uint64_t v47 = v53;
    }
    unint64_t v54 = v22;
    operator delete(v47);
  }
LABEL_125:
  int v48 = (void **)v55;
  if (v55)
  {
    CFStringRef v49 = v56;
    uint64_t v50 = v55;
    if (v56 != v55)
    {
      do
      {
        if (*((char *)v49 - 1) < 0) {
          operator delete(*(v49 - 3));
        }
        v49 -= 3;
      }
      while (v49 != v48);
      uint64_t v50 = v55;
    }
    uint64_t v56 = v48;
    operator delete(v50);
  }
  if (SHIBYTE(v58) < 0) {
    operator delete(__dst[0]);
  }
LABEL_7:
  uint64_t v6 = (void *)HIBYTE(v52);
  if (v52 < 0) {
    uint64_t v6 = v51[1];
  }
  if (!v6) {
    goto LABEL_20;
  }
  uint64_t v7 = *(void *)(a1 + 8);
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v8 = sub_19E374C3C(*(void *)(a1 + 8), (const void **)v51);
  if ((uint64_t *)(v7 + 8) == v8)
  {
    uint64_t v12 = *(void *)(v7 + 40);
    if (v12)
    {
      uint64_t v13 = *(_DWORD **)(v7 + 32);
      int v9 = v13[4];
      uint64_t v14 = *(void *)v13;
      *(void *)(v14 + 8) = *((void *)v13 + 1);
      **((void **)v13 + 1) = v14;
      *(void *)(v7 + 40) = v12 - 1;
      operator delete(v13);
      *((_DWORD *)sub_19E45BC8C((uint64_t **)v7, (const void **)v51, (uint64_t)v51) + 14) = v9;
      goto LABEL_21;
    }
LABEL_20:
    int v9 = 0;
    goto LABEL_21;
  }
  int v9 = *((_DWORD *)v8 + 14);
LABEL_21:
  uint64_t v15 = *(unsigned __int8 *)(a2 + 63);
  if ((v15 & 0x80u) != 0) {
    uint64_t v15 = *(void *)(a2 + 48);
  }
  if (!v15) {
    goto LABEL_111;
  }
  if (*(_DWORD *)(a1 + 24) == 8) {
    goto LABEL_111;
  }
  uint64_t v16 = *(void *)(a1 + 16);
  if (!v16) {
    goto LABEL_111;
  }
  unint64_t v17 = (const void **)(a2 + 40);
  uint64_t v18 = sub_19E374C3C(*(void *)(a1 + 16), v17);
  if ((uint64_t *)(v16 + 8) != v18)
  {
    int v19 = *((_DWORD *)v18 + 14);
    goto LABEL_112;
  }
  uint64_t v41 = *(void *)(v16 + 40);
  if (v41)
  {
    unsigned int v42 = *(_DWORD **)(v16 + 32);
    int v19 = v42[4];
    uint64_t v43 = *(void *)v42;
    *(void *)(v43 + 8) = *((void *)v42 + 1);
    **((void **)v42 + 1) = v43;
    *(void *)(v16 + 40) = v41 - 1;
    operator delete(v42);
    *((_DWORD *)sub_19E45BC8C((uint64_t **)v16, v17, (uint64_t)v17) + 14) = v19;
  }
  else
  {
LABEL_111:
    int v19 = 0;
  }
LABEL_112:
  int v44 = *(_DWORD *)(a1 + 24);
  if (SHIBYTE(v52) < 0) {
    operator delete(v51[0]);
  }
  int v45 = v9 << 6;
  if (v44 != 16) {
    int v45 = v9;
  }
  return (v45 + v19 + (v5 << (v44 - 2)));
}

void sub_19E4C6854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_19E4C69C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if ((a24 & 0x80000000) == 0) {
    JUMPOUT(0x19E4C6924);
  }
  JUMPOUT(0x19E4C691CLL);
}

BOOL sub_19E4C69D4(uint64_t a1, uint64_t *a2)
{
  int v3 = *(_DWORD *)(a1 + 48);
  int v2 = *(_DWORD *)(a1 + 52);
  uint64_t v4 = 220;
  BOOL v5 = v3 == 16 && v2 == 2;
  uint64_t v6 = 0xFFFFFFFFLL;
  if (v5) {
    uint64_t v6 = 55;
  }
  if (v2 != 1 || v3 != 16) {
    uint64_t v4 = v6;
  }
  if (v2 == 1 && v3 == 8) {
    unint64_t v9 = 55;
  }
  else {
    unint64_t v9 = v4;
  }
  unint64_t v10 = *(void *)(a1 + 16);
  if (v10 >= v9)
  {
    uint64_t v57 = 0;
    uint64_t v58 = &v57;
    uint64_t v59 = 0x4002000000;
    unsigned __int32 v60 = sub_19E4C6EEC;
    v63[0] = 0;
    v63[1] = 0;
    CFIndex v61 = sub_19E4C6F28;
    char v62 = v63;
    char v55 = 0;
    uint64_t v56 = 0;
    v53[5] = a1;
    unint64_t v54 = &v55;
    v53[0] = MEMORY[0x1E4F143A8];
    v53[1] = 0x40000000;
    v53[2] = sub_19E4C6F30;
    v53[3] = &unk_1E59A0EB0;
    v53[4] = &v57;
    uint64_t v13 = *a2;
    if (*a2)
    {
      uint64_t v14 = *(void *)(v13 + 32);
      if (v14)
      {
        uint64_t v15 = *(unsigned __int8 *)(v13 + 6);
        v64[0] = 0;
        sub_19E528F50(v14, 1u, v15, (uint64_t)v64, 1u, 0, v14 + 4, 1, 0, 1u, (uint64_t)v53);
        int v3 = *(_DWORD *)(a1 + 48);
        int v2 = *(_DWORD *)(a1 + 52);
      }
    }
    unint64_t v48 = v10;
    unint64_t v49 = v9;
    if (v2 == 1 && v3 == 8)
    {
      unint64_t v16 = 5;
    }
    else if (v2 == 1 && v3 == 16)
    {
      unint64_t v16 = 20;
    }
    else
    {
      if (v3 == 16 && v2 == 2) {
        unint64_t v16 = 5;
      }
      else {
        unint64_t v16 = 0;
      }
      if (!v16)
      {
LABEL_53:
        if (v56)
        {
          v50[0] = MEMORY[0x1E4F143A8];
          v50[1] = 1174405120;
          v50[2] = sub_19E4C707C;
          v50[3] = &unk_1EF0BED70;
          v52[0] = 0;
          v52[1] = 0;
          v50[4] = a1;
          unsigned __int32 v51 = v52;
          sub_19E4C7110((uint64_t *)&v51, v54, &v55);
          if (*a2) {
            sub_19E52CFE4(*a2, 0, (uint64_t)v50, *(unsigned char *)(*a2 + 6));
          }
          sub_19E418864(v52[0]);
        }
        size_t v30 = *(void **)a1;
        uint64_t v31 = v55;
        if (*(void *)a1 != a1 + 8 && v55)
        {
          do
          {
            if (!v31) {
              goto LABEL_73;
            }
            unsigned int v33 = *((_DWORD *)v30 + 14);
            unint64_t v34 = &v55;
            unsigned __int32 v35 = v31;
            do
            {
              int v36 = v35;
              uint64_t v37 = v34;
              unsigned int v38 = *((_DWORD *)v35 + 7);
              if (v38 >= v33) {
                unint64_t v34 = (uint64_t **)v35;
              }
              else {
                ++v35;
              }
              unsigned __int32 v35 = (uint64_t *)*v35;
            }
            while (v35);
            if (v34 == &v55) {
              goto LABEL_73;
            }
            if (v38 < v33) {
              int v36 = v37;
            }
            if (v33 >= v36[7])
            {
              unsigned int v42 = (void *)v30[1];
              uint64_t v43 = v42;
              int v44 = v30;
              if (v42)
              {
                do
                {
                  unsigned int v40 = v43;
                  uint64_t v43 = (void *)*v43;
                }
                while (v43);
              }
              else
              {
                do
                {
                  unsigned int v40 = (void *)v44[2];
                  BOOL v5 = *v40 == (void)v44;
                  int v44 = v40;
                }
                while (!v5);
              }
              int v45 = v30;
              if (v42)
              {
                do
                {
                  uint64_t v46 = v42;
                  unsigned int v42 = (void *)*v42;
                }
                while (v42);
              }
              else
              {
                do
                {
                  uint64_t v46 = (void *)v45[2];
                  BOOL v5 = *v46 == (void)v45;
                  int v45 = v46;
                }
                while (!v5);
              }
              if (*(void **)a1 == v30) {
                *(void *)a1 = v46;
              }
              uint64_t v47 = *(uint64_t **)(a1 + 8);
              --*(void *)(a1 + 16);
              sub_19E3BAE64(v47, v30);
              if (*((char *)v30 + 55) < 0) {
                operator delete((void *)v30[4]);
              }
              operator delete(v30);
              uint64_t v31 = v55;
            }
            else
            {
LABEL_73:
              size_t v39 = (void *)v30[1];
              if (v39)
              {
                do
                {
                  unsigned int v40 = v39;
                  size_t v39 = (void *)*v39;
                }
                while (v39);
              }
              else
              {
                do
                {
                  uint64_t v41 = v30;
                  size_t v30 = (void *)v30[2];
                }
                while ((void *)*v30 != v41);
                unsigned int v40 = v30;
              }
            }
            size_t v30 = v40;
          }
          while (v40 != (void *)(a1 + 8));
        }
        sub_19E418864(v31);
        _Block_object_dispose(&v57, 8);
        sub_19E418864(v63[0]);
        unint64_t v10 = v48;
        unint64_t v9 = v49;
        return v10 >= v9;
      }
    }
    uint64_t v18 = (uint64_t *)v58[5];
    if (v18 != v58 + 6)
    {
      uint64_t v19 = 0;
      do
      {
        uint64_t v20 = v55;
        unsigned int v21 = *((_DWORD *)v18 + 8);
        uint64_t v22 = &v55;
        char v23 = &v55;
        if (v55)
        {
          while (1)
          {
            while (1)
            {
              char v23 = (uint64_t **)v20;
              unsigned int v24 = *((_DWORD *)v20 + 7);
              if (v21 >= v24) {
                break;
              }
              uint64_t v20 = *v23;
              uint64_t v22 = v23;
              if (!*v23) {
                goto LABEL_43;
              }
            }
            if (v24 >= v21) {
              break;
            }
            uint64_t v20 = v23[1];
            if (!v20)
            {
              uint64_t v22 = v23 + 1;
              goto LABEL_43;
            }
          }
        }
        else
        {
LABEL_43:
          long long v25 = operator new(0x20uLL);
          v25[7] = v21;
          *(void *)long long v25 = 0;
          *((void *)v25 + 1) = 0;
          *((void *)v25 + 2) = v23;
          *uint64_t v22 = (uint64_t *)v25;
          if (*v54)
          {
            unint64_t v54 = (uint64_t **)*v54;
            long long v25 = *v22;
          }
          sub_19E37D324(v55, (uint64_t *)v25);
          ++v56;
        }
        long long v26 = operator new(0x18uLL);
        v26[4] = *((_DWORD *)v18 + 8);
        uint64_t v27 = *(void *)(a1 + 24);
        *(void *)long long v26 = v27;
        *((void *)v26 + 1) = a1 + 24;
        *(void *)(v27 + 8) = v26;
        *(void *)(a1 + ++*(_DWORD *)(result + 24) = v26;
        ++*(void *)(a1 + 40);
        unint64_t v28 = (uint64_t *)v18[1];
        if (v28)
        {
          do
          {
            uint64_t v29 = v28;
            unint64_t v28 = (uint64_t *)*v28;
          }
          while (v28);
        }
        else
        {
          do
          {
            uint64_t v29 = (uint64_t *)v18[2];
            BOOL v5 = *v29 == (void)v18;
            uint64_t v18 = v29;
          }
          while (!v5);
        }
        if (++v19 >= v16) {
          break;
        }
        uint64_t v18 = v29;
      }
      while (v29 != v58 + 6);
    }
    goto LABEL_53;
  }
  return v10 >= v9;
}

void sub_19E4C6EAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29)
{
  sub_19E418864(a20);
  sub_19E418864(a29);
  _Block_object_dispose((const void *)(v29 - 160), 8);
  sub_19E418864(*(void **)(v29 - 112));
  _Unwind_Resume(a1);
}

void *sub_19E4C6EEC(void *result, void *a2)
{
  result[5] = a2[5];
  int v2 = a2 + 6;
  uint64_t v3 = a2[6];
  result[6] = v3;
  uint64_t v4 = result + 6;
  uint64_t v5 = a2[7];
  result[7] = v5;
  if (v5)
  {
    *(void *)(v3 + 16) = v4;
    a2[5] = v2;
    void *v2 = 0;
    a2[7] = 0;
  }
  else
  {
    result[5] = v4;
  }
  return result;
}

void sub_19E4C6F28(uint64_t a1)
{
}

uint64_t *sub_19E4C6F30(uint64_t *result, unsigned int a2, float a3)
{
  int v4 = *(_DWORD *)(result[5] + 48);
  int v5 = a2 & 0x3F;
  BOOL v6 = v4 == 8;
  if (v4 == 8) {
    int v7 = 0;
  }
  else {
    int v7 = a2 & 0x3F;
  }
  if (!v6) {
    int v5 = (a2 >> 6);
  }
  if (*(_DWORD *)(result[5] + 52) == 1) {
    unsigned int v8 = v5;
  }
  else {
    unsigned int v8 = v7;
  }
  uint64_t v9 = *(void *)(result[4] + 8);
  int v11 = (uint64_t **)(v9 + 48);
  unint64_t v10 = *(uint64_t **)(v9 + 48);
  if (v10)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v12 = v10;
        float v13 = *((float *)v10 + 7);
        if (v13 == a3) {
          int v14 = 0;
        }
        else {
          int v14 = -127;
        }
        if (v13 < a3) {
          int v15 = 1;
        }
        else {
          int v15 = v14;
        }
        if (v13 > a3) {
          int v15 = -1;
        }
        if (!v15)
        {
          unsigned int v16 = *((_DWORD *)v12 + 8);
          BOOL v17 = v8 == v16;
          LOBYTE(v15) = v8 < v16 ? -1 : 1;
          if (v17) {
            LOBYTE(v15) = 0;
          }
        }
        if (v15 == 129 || (v15 & 0x80) == 0) {
          break;
        }
        unint64_t v10 = (uint64_t *)*v12;
        int v11 = (uint64_t **)v12;
        if (!*v12) {
          goto LABEL_43;
        }
      }
      if (v13 > a3) {
        LOBYTE(v14) = 1;
      }
      if (v13 < a3) {
        LOBYTE(v14) = -1;
      }
      if (!(_BYTE)v14)
      {
        unsigned int v18 = *((_DWORD *)v12 + 8);
        BOOL v19 = v18 == v8;
        LOBYTE(v14) = v18 < v8 ? -1 : 1;
        if (v19) {
          LOBYTE(v14) = 0;
        }
      }
      if (v14 == 129 || (v14 & 0x80) == 0) {
        break;
      }
      unint64_t v10 = (uint64_t *)v12[1];
      if (!v10)
      {
        int v11 = (uint64_t **)(v12 + 1);
        goto LABEL_43;
      }
    }
  }
  else
  {
    uint64_t v12 = (uint64_t *)(v9 + 48);
LABEL_43:
    uint64_t v20 = (float *)operator new(0x28uLL);
    v20[7] = a3;
    *((_DWORD *)v20 + 8) = v8;
    *(void *)uint64_t v20 = 0;
    *((void *)v20 + 1) = 0;
    *((void *)v20 + 2) = v12;
    *int v11 = (uint64_t *)v20;
    uint64_t v21 = **(void **)(v9 + 40);
    if (v21)
    {
      *(void *)(v9 + 40) = v21;
      uint64_t v22 = *v11;
    }
    else
    {
      uint64_t v22 = (uint64_t *)v20;
    }
    BOOL result = sub_19E37D324(*(uint64_t **)(v9 + 48), v22);
    ++*(void *)(v9 + 56);
  }
  return result;
}

uint64_t sub_19E4C707C(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(*(void *)(a1 + 32) + 48);
  int v2 = *(_DWORD *)(*(void *)(a1 + 32) + 52);
  unsigned int v4 = a2 & 0x3F;
  if (v3 == 8) {
    unsigned int v5 = 0;
  }
  else {
    unsigned int v5 = a2 & 0x3F;
  }
  if (v3 == 8) {
    int v6 = 8;
  }
  else {
    int v6 = *(_DWORD *)(*(void *)(a1 + 32) + 48);
  }
  if (v3 != 8) {
    unsigned int v4 = (a2 >> 6);
  }
  if (v2 == 1) {
    int v3 = v6;
  }
  else {
    unsigned int v4 = v5;
  }
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t v7 = a1 + 48;
  uint64_t v8 = v9;
  if (v9)
  {
    uint64_t v10 = v7;
    do
    {
      unsigned int v11 = *(_DWORD *)(v8 + 28);
      BOOL v12 = v11 >= v4;
      if (v11 >= v4) {
        float v13 = (uint64_t *)v8;
      }
      else {
        float v13 = (uint64_t *)(v8 + 8);
      }
      if (v12) {
        uint64_t v10 = v8;
      }
      uint64_t v8 = *v13;
    }
    while (*v13);
    if (v10 != v7 && v4 >= *(_DWORD *)(v10 + 28))
    {
      BOOL v14 = v2 == 1;
      unsigned int v15 = a2 & 0xFFFFFFC0;
      unsigned int v16 = a2 & 0xFFFFC03F;
      if (!v14) {
        unsigned int v16 = a2 & 0xFFFFFFC0;
      }
      if (v3 != 8) {
        unsigned int v15 = a2;
      }
      if (v3 == 16) {
        return v16;
      }
      else {
        return v15;
      }
    }
  }
  return a2;
}

uint64_t *sub_19E4C7110(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    unsigned int v4 = a2;
    unsigned int v5 = result;
    int v6 = result + 1;
    while (1)
    {
      uint64_t v7 = (uint64_t *)v5[1];
      uint64_t v8 = v6;
      if ((uint64_t *)*v5 != v6)
      {
        uint64_t v9 = v5[1];
        uint64_t v10 = v6;
        if (v7)
        {
          do
          {
            uint64_t v8 = (uint64_t *)v9;
            uint64_t v9 = *(void *)(v9 + 8);
          }
          while (v9);
        }
        else
        {
          do
          {
            uint64_t v8 = (uint64_t *)v10[2];
            BOOL v11 = *v8 == (void)v10;
            uint64_t v10 = v8;
          }
          while (v11);
        }
        unsigned int v12 = *((_DWORD *)v4 + 7);
        if (*((_DWORD *)v8 + 7) >= v12) {
          break;
        }
      }
      float v13 = (uint64_t **)v6;
      BOOL v14 = (uint64_t **)v6;
      if (!v7) {
        goto LABEL_19;
      }
      float v13 = (uint64_t **)(v8 + 1);
      if (!v8[1])
      {
        BOOL v14 = (uint64_t **)v8;
LABEL_19:
        unsigned int v16 = operator new(0x20uLL);
        v16[7] = *((_DWORD *)v4 + 7);
        *(void *)unsigned int v16 = 0;
        *((void *)v16 + 1) = 0;
        *((void *)v16 + 2) = v14;
        uint64_t *v13 = (uint64_t *)v16;
        uint64_t v17 = *(void *)*v5;
        if (v17)
        {
          *unsigned int v5 = v17;
          unsigned int v18 = *v13;
        }
        else
        {
          unsigned int v18 = (uint64_t *)v16;
        }
        BOOL result = sub_19E37D324((uint64_t *)v5[1], v18);
        ++v5[2];
      }
LABEL_23:
      BOOL v19 = (void *)v4[1];
      if (v19)
      {
        do
        {
          uint64_t v20 = v19;
          BOOL v19 = (void *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          uint64_t v20 = (void *)v4[2];
          BOOL v11 = *v20 == (void)v4;
          unsigned int v4 = v20;
        }
        while (!v11);
      }
      unsigned int v4 = v20;
      if (v20 == a3) {
        return result;
      }
    }
    float v13 = (uint64_t **)v6;
    BOOL v14 = (uint64_t **)v6;
    if (v7)
    {
      while (1)
      {
        while (1)
        {
          BOOL v14 = (uint64_t **)v7;
          unsigned int v15 = *((_DWORD *)v7 + 7);
          if (v12 >= v15) {
            break;
          }
          uint64_t v7 = *v14;
          float v13 = v14;
          if (!*v14) {
            goto LABEL_19;
          }
        }
        if (v15 >= v12) {
          goto LABEL_23;
        }
        float v13 = v14 + 1;
        uint64_t v7 = v14[1];
        if (!v7) {
          goto LABEL_19;
        }
      }
    }
    goto LABEL_19;
  }
  return result;
}

void sub_19E4C7294(uint64_t a1)
{
}

uint64_t *sub_19E4C729C(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 40) = a1 + 48;
  int v2 = (uint64_t *)(a1 + 40);
  v2[2] = 0;
  return sub_19E4C7110(v2, *(void **)(a2 + 40), (void *)(a2 + 48));
}

void sub_19E4C72D8(_Unwind_Exception *a1)
{
  int v2 = v1;
  sub_19E418864(*v2);
  _Unwind_Resume(a1);
}

__CFDictionary *sub_19E4C72F0(uint64_t a1)
{
  CFMutableStringRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFNumberRef v3 = CFNumberCreate(0, kCFNumberIntType, &unk_19E57B104);
  CFDictionarySetValue(Mutable, @"Version", v3);
  CFRelease(v3);
  unsigned int v4 = *(void **)(a1 + 8);
  if (v4)
  {
    unsigned int v5 = sub_19E4C73C8(v4);
    CFDictionarySetValue(Mutable, @"Recipients", v5);
    CFRelease(v5);
  }
  int v6 = *(void **)(a1 + 16);
  if (v6)
  {
    uint64_t v7 = sub_19E4C73C8(v6);
    CFDictionarySetValue(Mutable, @"SpatialTemporal", v7);
    CFRelease(v7);
  }
  return Mutable;
}

__CFDictionary *sub_19E4C73C8(void *a1)
{
  CFMutableStringRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  unsigned int v5 = (void *)*a1;
  CFNumberRef v3 = a1 + 1;
  unsigned int v4 = v5;
  if (v5 != v3)
  {
    do
    {
      if (*((char *)v4 + 55) < 0)
      {
        sub_19E39369C(__p, (void *)v4[4], v4[5]);
      }
      else
      {
        *(_OWORD *)long long __p = *((_OWORD *)v4 + 2);
        uint64_t v15 = v4[6];
      }
      int v16 = *((_DWORD *)v4 + 14);
      if (v15 >= 0) {
        int v6 = __p;
      }
      else {
        int v6 = (void **)__p[0];
      }
      CFStringRef v7 = CFStringCreateWithCString(0, (const char *)v6, 0x8000100u);
      int valuePtr = v16;
      CFNumberRef v8 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
      CFDictionarySetValue(Mutable, v7, v8);
      CFRelease(v8);
      CFRelease(v7);
      if (SHIBYTE(v15) < 0)
      {
        operator delete(__p[0]);
        uint64_t v9 = (void *)v4[1];
        if (v9)
        {
          do
          {
LABEL_14:
            uint64_t v10 = v9;
            uint64_t v9 = (void *)*v9;
          }
          while (v9);
          goto LABEL_3;
        }
      }
      else
      {
        uint64_t v9 = (void *)v4[1];
        if (v9) {
          goto LABEL_14;
        }
      }
      do
      {
        uint64_t v10 = (void *)v4[2];
        BOOL v11 = *v10 == (void)v4;
        unsigned int v4 = v10;
      }
      while (!v11);
LABEL_3:
      unsigned int v4 = v10;
    }
    while (v10 != v3);
  }
  return Mutable;
}

void sub_19E4C7524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E4C7544(uint64_t a1)
{
  int v2 = (void *)(a1 + 8);
  sub_19E3CD3E0(*(char **)(a1 + 8));
  *(void *)a1 = v2;
  *(void *)(a1 + 16) = 0;
  void *v2 = 0;
  CFNumberRef v3 = (uint64_t *)(a1 + 24);
  if (*(void *)(a1 + 40))
  {
    uint64_t v5 = *(void *)(a1 + 24);
    unsigned int v4 = *(uint64_t **)(a1 + 32);
    uint64_t v6 = *v4;
    *(void *)(v6 + 8) = *(void *)(v5 + 8);
    **(void **)(v5 + 8) = v6;
    *(void *)(a1 + 40) = 0;
    if (v4 != v3)
    {
      do
      {
        CFStringRef v7 = (uint64_t *)v4[1];
        operator delete(v4);
        unsigned int v4 = v7;
      }
      while (v7 != v3);
    }
  }
  int v9 = *(_DWORD *)(a1 + 48);
  int v8 = *(_DWORD *)(a1 + 52);
  if (v8 == 1 && v9 == 8)
  {
    unsigned int v13 = 63;
    goto LABEL_22;
  }
  if (v8 == 1 && v9 == 16)
  {
    unsigned int v13 = 255;
LABEL_22:
    for (unsigned int i = 1; i <= v13; ++i)
    {
      uint64_t v15 = operator new(0x18uLL);
      v15[4] = i;
      uint64_t v16 = *(void *)(a1 + 24);
      *(void *)uint64_t v15 = v16;
      *((void *)v15 + 1) = v3;
      *(void *)(v16 + 8) = v15;
      *(void *)(a1 + ++*(_DWORD *)(result + 24) = v15;
      ++*(void *)(a1 + 40);
    }
    return;
  }
  if (v8 != 2 || v9 != 8)
  {
    if (v9 == 16 && v8 == 2) {
      unsigned int v13 = 63;
    }
    else {
      unsigned int v13 = -1;
    }
    goto LABEL_22;
  }
}

uint64_t sub_19E4C764C(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  *a2 = *(_DWORD *)(*(void *)(a1 + 16) + 16 * *(void *)(a1 + 8));
  if (a3)
  {
    *(int64x2_t *)a3 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    *(void *)(a3 + 16) = 0;
    *(_WORD *)(a3 + ++*(_DWORD *)(result + 24) = 0;
    *(unsigned char *)(a3 + 32) = 1;
    *(_DWORD *)(a3 + 56) = 0;
    *(_OWORD *)(a3 + 64) = xmmword_19E572FD0;
    *(void *)(a3 + 88) = 0;
    *(void *)(a3 + 96) = 0;
    *(void *)(a3 + 80) = 0xFFEFFFFFFFFFFFFFLL;
    uint64_t v3 = *(void *)(a1 + 16) + 16 * *(void *)(a1 + 8);
    *(_OWORD *)(a3 + 40) = xmmword_19E573080;
    uint64_t v4 = *(void *)(v3 + 8);
    *(void *)(a3 + 40) = v4;
    *(void *)a3 = v4;
    *(void *)(a3 + 8) = v4;
    *(_DWORD *)(a3 + 116) = 1;
  }
  return 1;
}

BOOL sub_19E4C76C0(void *a1)
{
  uint64_t v1 = a1[2];
  unint64_t v2 = a1[1] + 1;
  a1[1] = v2;
  return v2 < (a1[3] - v1) >> 4;
}

void sub_19E4C76E0(void *a1)
{
  *a1 = &unk_1EF0BC0B0;
  unint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x19F3BDCF0);
}

void *sub_19E4C7750(void *a1)
{
  *a1 = &unk_1EF0BC0B0;
  unint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_19E4C77A0@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 16);
  *a2 = *(void *)(result + 8);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_19E4C77BC(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  if (!a3) {
    return 0;
  }
  int v6 = a2[a3 - 1];
  int v7 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8));
  if ((v6 - 1) < 2 || v6 == v7) {
    return 0;
  }
  uint64_t v10 = *(void *)(a1 + 8);
  int v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 32))(v10);
  uint64_t v12 = a3;
  while (v12 * 4)
  {
    int v13 = a2[--v12];
    if (v13 == v11)
    {
      BOOL v14 = &a2[v12 + 1];
      goto LABEL_13;
    }
  }
  BOOL v14 = a2;
LABEL_13:
  uint64_t v15 = a3 - (v14 - a2);
  if (a3 != v14 - a2)
  {
    while ((*v14 - 1) <= 1)
    {
      ++v14;
      if (!--v15)
      {
        BOOL v14 = &a2[a3];
        return (*(unsigned int (**)(uint64_t, _DWORD *, uint64_t))(*(void *)v10 + 64))(v10, v14, v15) ^ 1;
      }
    }
  }
  return (*(unsigned int (**)(uint64_t, _DWORD *, uint64_t))(*(void *)v10 + 64))(v10, v14, v15) ^ 1;
}

uint64_t sub_19E4C78F8@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if (a3)
  {
    uint64_t v6 = result;
    BOOL result = (*(uint64_t (**)(void))(**(void **)(result + 8) + 32))(*(void *)(result + 8));
    uint64_t v8 = 4 * a3;
    while (v8)
    {
      int v9 = *(_DWORD *)(a2 + v8 - 4);
      v8 -= 4;
      if (v9 == result)
      {
        uint64_t v10 = a2 + v8 + 4;
        goto LABEL_7;
      }
    }
    uint64_t v10 = a2;
LABEL_7:
    uint64_t v11 = (v10 - a2) >> 2;
    uint64_t v12 = a3 - v11;
    if (a3 != v11)
    {
      uint64_t v13 = 4 * v11;
      BOOL v14 = (_DWORD *)(a2 + v13);
      uint64_t v15 = v13 - 4 * a3;
      while ((*v14 - 1) <= 1)
      {
        ++v14;
        v15 += 4;
        if (!--v12) {
          return result;
        }
      }
      int v16 = v14[v12 - 1];
      BOOL result = (*(uint64_t (**)(void))(**(void **)(v6 + 8) + 32))(*(void *)(v6 + 8));
      if ((v16 - 1) >= 2 && v16 != result)
      {
        uint64_t v18 = *(void *)(v6 + 8);
        int v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 32))(v18);
        uint64_t v20 = (_DWORD *)(a2 + 4 * a3 + 4);
        while (v15)
        {
          int v21 = *(v20 - 2);
          --v20;
          v15 += 4;
          if (v21 == v19) {
            goto LABEL_21;
          }
        }
        uint64_t v20 = v14;
LABEL_21:
        uint64_t v22 = v12 - (v20 - v14);
        if (v12 != v20 - v14)
        {
          while ((*v20 - 1) <= 1)
          {
            ++v20;
            if (!--v22)
            {
              uint64_t v20 = &v14[v12];
              break;
            }
          }
        }
        BOOL result = (*(uint64_t (**)(uint64_t, _DWORD *, uint64_t))(*(void *)v18 + 64))(v18, v20, v22);
        if ((result & 1) == 0) {
          return (*(uint64_t (**)(void, _DWORD *, uint64_t, void *))(**(void **)(v6 + 8) + 56))(*(void *)(v6 + 8), v14, v12, a4);
        }
      }
    }
  }
  return result;
}

void sub_19E4C7B00(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E4C7B1C()
{
  return 0;
}

uint64_t sub_19E4C7B24()
{
  return 0;
}

uint64_t sub_19E4C7B2C()
{
  return 0;
}

BOOL sub_19E4C7B34(uint64_t a1, int a2)
{
  return (*(unsigned int (**)(void))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8)) != a2;
}

uint64_t sub_19E4C7B84()
{
  return 0;
}

uint64_t sub_19E4C7B8C()
{
  return 0;
}

uint64_t sub_19E4C7B94()
{
  return 0;
}

void sub_19E4C7B9C()
{
}

uint64_t sub_19E4C7BC8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 24))();
}

void sub_19E4C7BF0()
{
}

uint64_t sub_19E4C7C1C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 48))();
}

void sub_19E4C7C44()
{
}

uint64_t sub_19E4C7C70()
{
  return 2;
}

void sub_19E4C7C78(void *a1)
{
  *a1 = &unk_1EF0BBDF0;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x19F3BDCF0);
}

void *sub_19E4C7D30(void *a1)
{
  *a1 = &unk_1EF0BBDF0;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t sub_19E4C7DCC(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_19E4C7DF0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0BE290;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19F3BDCF0);
}

void sub_19E4C7E44(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0BE290;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_19E4C7E64(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  unint64_t v3 = *(void *)(a1 + 32);
  if (v2 == (void *)v3)
  {
    unint64_t v3 = *(void *)(a1 + 24);
  }
  else
  {
    uint64_t v4 = (void **)(v2 + 1);
    if ((unint64_t)(v2 + 1) < v3)
    {
      do
      {
        uint64_t v5 = *v4++;
        free(v5);
        unint64_t v3 = *(void *)(a1 + 32);
      }
      while ((unint64_t)v4 < v3);
      uint64_t v2 = *(void **)(a1 + 24);
    }
  }
  if (v3 - (unint64_t)v2 < 9)
  {
    uint64_t v6 = 0;
  }
  else
  {
    *(void *)(a1 + 32) = v2 + 1;
    uint64_t v6 = *v2;
  }
  *(void *)(a1 + 48) = v6;
  *(void *)(a1 + 56) = v6;
  *(_DWORD *)(a1 + 72) = 0;
}

char *sub_19E4C7EE4(uint64_t a1)
{
  if (!*(void *)(a1 + 16)) {
    return 0;
  }
  uint64_t v2 = sub_19E49C920(a1 + 24);
  unint64_t v3 = **(_DWORD ***)(a1 + 16);
  if (v3)
  {
    if (qword_1E9459FB0 != -1) {
      dispatch_once(&qword_1E9459FB0, &unk_1EF0BEBA0);
    }
    (*(void (**)(void *__return_ptr))(**(void **)(qword_1E9459FB8 + 8 * (*v3 & 3)) + 32))(v8);
    int v4 = v8[0];
    uint64_t v5 = v8[1];
    char v6 = v9;
  }
  else
  {
    uint64_t v5 = 0;
    char v6 = 0;
    int v4 = 0;
  }
  *((_DWORD *)v2 + 4) = 0;
  *(void *)uint64_t v2 = &unk_1EF0BBA08;
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 3) = a1;
  *((_DWORD *)v2 + 8) = v4;
  *((void *)v2 + 5) = v5;
  v2[48] = v6;
  return v2;
}

void sub_19E4C7FF4(void *a1)
{
  *a1 = &unk_1EF0BB078;
  uint64_t v2 = (void **)a1[3];
  if ((unint64_t)v2 < a1[4])
  {
    do
    {
      unint64_t v3 = *v2++;
      free(v3);
    }
    while ((unint64_t)v2 < a1[4]);
    uint64_t v2 = (void **)a1[3];
  }
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  int v4 = (uint64_t *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    uint64_t v5 = *v4;
    if (*v4)
    {
      if (*(_DWORD *)(v5 + 48)) {
        free(*(void **)(v5 + 8));
      }
      free((void *)v5);
    }
    MEMORY[0x19F3BDCF0](v4, 0x80C40B8603338);
  }
  JUMPOUT(0x19F3BDCF0);
}

void *sub_19E4C80D4(void *a1)
{
  *a1 = &unk_1EF0BB078;
  uint64_t v2 = (void **)a1[3];
  if ((unint64_t)v2 < a1[4])
  {
    do
    {
      unint64_t v3 = *v2++;
      free(v3);
    }
    while ((unint64_t)v2 < a1[4]);
    uint64_t v2 = (void **)a1[3];
  }
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  int v4 = (uint64_t *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    uint64_t v5 = *v4;
    if (*v4)
    {
      if (*(_DWORD *)(v5 + 48)) {
        free(*(void **)(v5 + 8));
      }
      free((void *)v5);
    }
    MEMORY[0x19F3BDCF0](v4, 0x80C40B8603338);
  }
  return a1;
}

void sub_19E4C8194(void *a1)
{
  *a1 = &unk_1EF0BBEE8;
  uint64_t v2 = (void *)a1[10];
  if (v2) {
    munmap(v2, a1[11]);
  }
  a1[11] = 0;
  *a1 = &unk_1EF0BB078;
  unint64_t v3 = (void **)a1[3];
  if ((unint64_t)v3 < a1[4])
  {
    do
    {
      int v4 = *v3++;
      free(v4);
    }
    while ((unint64_t)v3 < a1[4]);
    unint64_t v3 = (void **)a1[3];
  }
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  uint64_t v5 = (uint64_t *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    uint64_t v6 = *v5;
    if (*v5)
    {
      if (*(_DWORD *)(v6 + 48)) {
        free(*(void **)(v6 + 8));
      }
      free((void *)v6);
    }
    MEMORY[0x19F3BDCF0](v5, 0x80C40B8603338);
  }
  JUMPOUT(0x19F3BDCF0);
}

void *sub_19E4C82A8(void *a1)
{
  *a1 = &unk_1EF0BBEE8;
  uint64_t v2 = (void *)a1[10];
  if (v2) {
    munmap(v2, a1[11]);
  }
  a1[11] = 0;
  *a1 = &unk_1EF0BB078;
  unint64_t v3 = (void **)a1[3];
  if ((unint64_t)v3 < a1[4])
  {
    do
    {
      int v4 = *v3++;
      free(v4);
    }
    while ((unint64_t)v3 < a1[4]);
    unint64_t v3 = (void **)a1[3];
  }
  if (v3)
  {
    a1[4] = v3;
    operator delete(v3);
  }
  uint64_t v5 = (uint64_t *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    uint64_t v6 = *v5;
    if (*v5)
    {
      if (*(_DWORD *)(v6 + 48)) {
        free(*(void **)(v6 + 8));
      }
      free((void *)v6);
    }
    MEMORY[0x19F3BDCF0](v5, 0x80C40B8603338);
  }
  return a1;
}

void sub_19E4C839C(__n128 *a1, const void **a2, uint64_t a3, unint64_t a4, __n128 *a5, uint64_t a6)
{
  if (a4 < 2) {
    return;
  }
  uint64_t v6 = a2;
  int v7 = a1;
  if (a4 == 2)
  {
    uint64_t v8 = (__n128 *)(a2 - 3);
    int v9 = *((char *)a2 - 1);
    if (v9 >= 0) {
      uint64_t v10 = a2 - 3;
    }
    else {
      uint64_t v10 = (const void **)*(a2 - 3);
    }
    if (v9 >= 0) {
      size_t v11 = *((unsigned __int8 *)a2 - 1);
    }
    else {
      size_t v11 = (size_t)*(a2 - 2);
    }
    int v12 = v7[1].n128_i8[7];
    if (v12 >= 0) {
      uint64_t v13 = v7;
    }
    else {
      uint64_t v13 = (__n128 *)v7->n128_u64[0];
    }
    if (v12 >= 0) {
      size_t v14 = v7[1].n128_u8[7];
    }
    else {
      size_t v14 = v7->n128_u64[1];
    }
    if (v14 >= v11) {
      size_t v15 = v11;
    }
    else {
      size_t v15 = v14;
    }
    int v16 = memcmp(v10, v13, v15);
    if (v16)
    {
      if ((v16 & 0x80000000) == 0) {
        return;
      }
    }
    else if (v11 >= v14)
    {
      return;
    }
    unint64_t v24 = v7[1].n128_u64[0];
    __n128 v25 = *v7;
    unint64_t v26 = v8[1].n128_u64[0];
    __n128 *v7 = *v8;
    v7[1].n128_u64[0] = v26;
    __n128 *v8 = v25;
    v8[1].n128_u64[0] = v24;
    return;
  }
  if ((uint64_t)a4 <= 0)
  {
    if (a1 == (__n128 *)a2) {
      return;
    }
    uint64_t v27 = (const void **)&a1[1].n128_u64[1];
    if (&a1[1].n128_i8[8] == (__int8 *)a2) {
      return;
    }
    uint64_t v28 = 0;
    uint64_t v29 = (const void **)a1;
    while (1)
    {
      size_t v30 = v29;
      uint64_t v29 = v27;
      int v32 = *((char *)v30 + 47);
      if (v32 >= 0) {
        unsigned int v33 = v27;
      }
      else {
        unsigned int v33 = *v27;
      }
      if (v32 >= 0) {
        size_t v34 = *((unsigned __int8 *)v30 + 47);
      }
      else {
        size_t v34 = (size_t)v30[4];
      }
      int v35 = *((char *)v30 + 23);
      if (v35 >= 0) {
        int v36 = v30;
      }
      else {
        int v36 = *v30;
      }
      if (v35 >= 0) {
        size_t v37 = *((unsigned __int8 *)v30 + 23);
      }
      else {
        size_t v37 = (size_t)v30[1];
      }
      if (v37 >= v34) {
        size_t v38 = v34;
      }
      else {
        size_t v38 = v37;
      }
      int v39 = memcmp(v33, v36, v38);
      if (v39)
      {
        if ((v39 & 0x80000000) == 0) {
          goto LABEL_34;
        }
      }
      else if (v34 >= v37)
      {
        goto LABEL_34;
      }
      unint64_t v80 = (unint64_t)v29[2];
      long long v79 = *(_OWORD *)v29;
      if ((v80 & 0x8000000000000000) == 0) {
        unsigned int v40 = &v79;
      }
      else {
        unsigned int v40 = (long long *)v79;
      }
      if ((v80 & 0x8000000000000000) == 0) {
        size_t v41 = HIBYTE(v80);
      }
      else {
        size_t v41 = *((void *)&v79 + 1);
      }
      unsigned int v42 = v30[2];
      *(_OWORD *)uint64_t v29 = *(_OWORD *)v30;
      v29[2] = v42;
      *((unsigned char *)v30 + 23) = 0;
      *(unsigned char *)size_t v30 = 0;
      if (v30 == (const void **)v7)
      {
        size_t v30 = (const void **)v7;
      }
      else
      {
        uint64_t v43 = v28;
        do
        {
          int v44 = (__n128 *)((char *)v7 + v43);
          int v45 = v7->n128_i8[v43 - 1];
          if (v45 >= 0) {
            uint64_t v46 = (char *)&v7[-1] + v43 - 8;
          }
          else {
            uint64_t v46 = *(char **)((char *)&v7[-1] + v43 - 8);
          }
          if (v45 >= 0) {
            size_t v47 = v7->n128_u8[v43 - 1];
          }
          else {
            size_t v47 = *(unint64_t *)((char *)v7[-1].n128_u64 + v43);
          }
          if (v47 >= v41) {
            size_t v48 = v41;
          }
          else {
            size_t v48 = v47;
          }
          int v49 = memcmp(v40, v46, v48);
          if (v49)
          {
            if ((v49 & 0x80000000) == 0)
            {
              size_t v30 = (const void **)((char *)v7 + v43);
              goto LABEL_77;
            }
          }
          else if (v41 >= v47)
          {
            goto LABEL_77;
          }
          v30 -= 3;
          __n128 *v44 = *(__n128 *)((char *)v7 + v43 - 24);
          v44[1].n128_u64[0] = *(unint64_t *)((char *)&v7->n128_u64[-1] + v43);
          v44[-1].n128_u8[15] = 0;
          v44[-2].n128_u8[8] = 0;
          v43 -= 24;
        }
        while (v43);
        size_t v30 = (const void **)v7;
LABEL_77:
        uint64_t v6 = a2;
      }
      long long v31 = v79;
      v30[2] = (const void *)v80;
      *(_OWORD *)size_t v30 = v31;
LABEL_34:
      uint64_t v27 = v29 + 3;
      v28 += 24;
      if (v29 + 3 == v6) {
        return;
      }
    }
  }
  int v19 = a5;
  uint64_t v21 = a4 >> 1;
  uint64_t v22 = (const void **)a1 + 3 * (a4 >> 1);
  if ((uint64_t)a4 > a6)
  {
    sub_19E4C839C(a1, (char *)a1 + 24 * (a4 >> 1), a3, a4 >> 1, a5, a6);
    uint64_t v23 = a4 - v21;
    sub_19E4C839C(v22, v6, a3, v23, v19, a6);
    sub_19E4C8D88((const void **)v7, v22, v6, a3, v21, v23, v19, a6);
    return;
  }
  unint64_t v78 = 0;
  *(void *)&long long v79 = a5;
  *((void *)&v79 + 1) = &v78;
  sub_19E4C88A0(a1, (__n128 *)((char *)a1 + 24 * (a4 >> 1)), a3, a4 >> 1, a5);
  unint64_t v78 = a4 >> 1;
  unint64_t v50 = a4 - v21;
  unsigned __int32 v51 = (__n128 *)((char *)v19 + 24 * v21);
  sub_19E4C88A0((__n128 *)((char *)v7 + 24 * (a4 >> 1)), (__n128 *)v6, a3, v50, v51);
  unint64_t v78 = a4;
  uint64_t v52 = (__n128 *)((char *)v19 + 24 * a4);
  unsigned __int32 v53 = v51;
  unint64_t v54 = v19;
  while (v53 != v52)
  {
    int v56 = v53[1].n128_i8[7];
    if (v56 >= 0) {
      uint64_t v57 = v53;
    }
    else {
      uint64_t v57 = (__n128 *)v53->n128_u64[0];
    }
    if (v56 >= 0) {
      size_t v58 = v53[1].n128_u8[7];
    }
    else {
      size_t v58 = v53->n128_u64[1];
    }
    int v59 = v54[1].n128_i8[7];
    if (v59 >= 0) {
      unsigned __int32 v60 = v54;
    }
    else {
      unsigned __int32 v60 = (__n128 *)v54->n128_u64[0];
    }
    if (v59 >= 0) {
      size_t v61 = v54[1].n128_u8[7];
    }
    else {
      size_t v61 = v54->n128_u64[1];
    }
    if (v61 >= v58) {
      size_t v62 = v58;
    }
    else {
      size_t v62 = v61;
    }
    int v63 = memcmp(v57, v60, v62);
    if (v63)
    {
      if (v63 < 0) {
        goto LABEL_102;
      }
    }
    else if (v58 < v61)
    {
LABEL_102:
      if (v7[1].n128_i8[7] < 0) {
        operator delete((void *)v7->n128_u64[0]);
      }
      __n128 v64 = *v53;
      v7[1].n128_u64[0] = v53[1].n128_u64[0];
      __n128 *v7 = v64;
      v53[1].n128_u8[7] = 0;
      v53->n128_u8[0] = 0;
      unsigned __int32 v53 = (__n128 *)((char *)v53 + 24);
      goto LABEL_80;
    }
    if (v7[1].n128_i8[7] < 0) {
      operator delete((void *)v7->n128_u64[0]);
    }
    __n128 v55 = *v54;
    v7[1].n128_u64[0] = v54[1].n128_u64[0];
    __n128 *v7 = v55;
    v54[1].n128_u8[7] = 0;
    v54->n128_u8[0] = 0;
    unint64_t v54 = (__n128 *)((char *)v54 + 24);
LABEL_80:
    int v7 = (__n128 *)((char *)v7 + 24);
    if (v54 == v51)
    {
      if (v53 != v52)
      {
        unint64_t v70 = 0;
        do
        {
          uint64_t v74 = (char *)v7 + v70;
          if (v7[1].n128_i8[v70 + 7] < 0) {
            operator delete(*(void **)v74);
          }
          unsigned __int32 v71 = (char *)v53 + v70;
          long long v72 = *(long long *)((char *)v53 + v70);
          *((void *)v74 + 2) = v53[1].n128_u64[v70 / 8];
          *(_OWORD *)uint64_t v74 = v72;
          v71[23] = 0;
          *unsigned __int32 v71 = 0;
          uint64_t v73 = (uint64_t)&v53[1].n128_i64[v70 / 8 + 1];
          v70 += 24;
        }
        while ((__n128 *)v73 != v52);
      }
      goto LABEL_115;
    }
  }
  if (v54 != v51)
  {
    unint64_t v65 = 0;
    do
    {
      CFStringRef v69 = (char *)v7 + v65;
      if (v7[1].n128_i8[v65 + 7] < 0) {
        operator delete(*(void **)v69);
      }
      char v66 = (char *)v54 + v65;
      long long v67 = *(long long *)((char *)v54 + v65);
      *((void *)v69 + 2) = v54[1].n128_u64[v65 / 8];
      *(_OWORD *)CFStringRef v69 = v67;
      v66[23] = 0;
      *char v66 = 0;
      uint64_t v68 = (uint64_t)&v54[1].n128_i64[v65 / 8 + 1];
      v65 += 24;
    }
    while ((__n128 *)v68 != v51);
  }
LABEL_115:
  if (v19)
  {
    unint64_t v75 = v78;
    if (v78)
    {
      unint64_t v76 = 0;
      do
      {
        if (v19[1].n128_i8[7] < 0)
        {
          operator delete((void *)v19->n128_u64[0]);
          unint64_t v75 = v78;
        }
        ++v76;
        int v19 = (__n128 *)((char *)v19 + 24);
      }
      while (v76 < v75);
    }
  }
}

void sub_19E4C888C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_19E4C8D14((uint64_t *)va);
  _Unwind_Resume(a1);
}

__n128 sub_19E4C88A0(__n128 *a1, __n128 *a2, uint64_t a3, unint64_t a4, __n128 *a5)
{
  if (!a4) {
    return result;
  }
  uint64_t v5 = a5;
  int v7 = a2;
  uint64_t v8 = a1;
  if (a4 == 2)
  {
    uint64_t v10 = (__n128 *)((char *)a2 - 24);
    int v11 = a2[-1].n128_i8[15];
    if (v11 >= 0) {
      int v12 = &a2[-2].n128_i8[8];
    }
    else {
      int v12 = (__int8 *)a2[-2].n128_u64[1];
    }
    if (v11 >= 0) {
      size_t v13 = a2[-1].n128_u8[15];
    }
    else {
      size_t v13 = a2[-1].n128_u64[0];
    }
    int v14 = v8[1].n128_i8[7];
    if (v14 >= 0) {
      size_t v15 = v8;
    }
    else {
      size_t v15 = (__n128 *)v8->n128_u64[0];
    }
    if (v14 >= 0) {
      size_t v16 = v8[1].n128_u8[7];
    }
    else {
      size_t v16 = v8->n128_u64[1];
    }
    if (v16 >= v13) {
      size_t v17 = v13;
    }
    else {
      size_t v17 = v16;
    }
    int v18 = memcmp(v12, v15, v17);
    if (v18)
    {
      if ((v18 & 0x80000000) == 0)
      {
LABEL_22:
        __n128 v19 = *v8;
        v5[1].n128_u64[0] = v8[1].n128_u64[0];
        *uint64_t v5 = v19;
        v8->n128_u64[1] = 0;
        v8[1].n128_u64[0] = 0;
        v8->n128_u64[0] = 0;
        __n128 result = *v10;
        v5[2].n128_u64[1] = v10[1].n128_u64[0];
        *(__n128 *)((char *)v5 + ++*(_DWORD *)(result + 24) = result;
LABEL_105:
        v10->n128_u64[0] = 0;
        v10->n128_u64[1] = 0;
        v10[1].n128_u64[0] = 0;
        return result;
      }
    }
    else if (v13 >= v16)
    {
      goto LABEL_22;
    }
    __n128 v57 = *v10;
    v5[1].n128_u64[0] = v10[1].n128_u64[0];
    *uint64_t v5 = v57;
    v10->n128_u64[1] = 0;
    v10[1].n128_u64[0] = 0;
    v10->n128_u64[0] = 0;
    __n128 result = *v8;
    v5[2].n128_u64[1] = v8[1].n128_u64[0];
    *(__n128 *)((char *)v5 + ++*(_DWORD *)(result + 24) = result;
    goto LABEL_104;
  }
  if (a4 == 1)
  {
    __n128 result = *a1;
    a5[1].n128_u64[0] = a1[1].n128_u64[0];
    *a5 = result;
LABEL_104:
    uint64_t v10 = v8;
    goto LABEL_105;
  }
  if ((uint64_t)a4 <= 8)
  {
    if (a1 == a2) {
      return result;
    }
    __n128 result = *a1;
    a5[1].n128_u64[0] = a1[1].n128_u64[0];
    *a5 = result;
    a1->n128_u64[1] = 0;
    a1[1].n128_u64[0] = 0;
    a1->n128_u64[0] = 0;
    uint64_t v20 = (const void **)&a1[1].n128_u64[1];
    if (&a1[1].n128_i8[8] == (__int8 *)a2) {
      return result;
    }
    uint64_t v21 = 0;
    uint64_t v22 = a5;
LABEL_29:
    uint64_t v23 = (__n128 *)v20;
    unint64_t v24 = (__n128 *)((char *)v22 + 24);
    int v25 = v8[2].n128_i8[15];
    if (v25 >= 0) {
      unint64_t v26 = v20;
    }
    else {
      unint64_t v26 = *v20;
    }
    if (v25 >= 0) {
      size_t v27 = v8[2].n128_u8[15];
    }
    else {
      size_t v27 = v8[2].n128_u64[0];
    }
    int v28 = v22[1].n128_i8[7];
    if (v28 >= 0) {
      uint64_t v29 = v22;
    }
    else {
      uint64_t v29 = (__n128 *)v22->n128_u64[0];
    }
    if (v28 >= 0) {
      size_t v30 = v22[1].n128_u8[7];
    }
    else {
      size_t v30 = v22->n128_u64[1];
    }
    if (v30 >= v27) {
      size_t v31 = v27;
    }
    else {
      size_t v31 = v30;
    }
    int v32 = memcmp(v26, v29, v31);
    if (v32)
    {
      if ((v32 & 0x80000000) == 0) {
        goto LABEL_27;
      }
    }
    else if (v27 >= v30)
    {
LABEL_27:
      __n128 result = *v23;
      v22[2].n128_u64[1] = v23[1].n128_u64[0];
      *unint64_t v24 = result;
      v23->n128_u64[1] = 0;
      v23[1].n128_u64[0] = 0;
      v23->n128_u64[0] = 0;
      goto LABEL_28;
    }
    *unint64_t v24 = *v22;
    v22[2].n128_u64[1] = v22[1].n128_u64[0];
    v22->n128_u64[1] = 0;
    v22[1].n128_u64[0] = 0;
    v22->n128_u64[0] = 0;
    unsigned int v33 = v5;
    if (v22 == v5) {
      goto LABEL_75;
    }
    unint64_t v65 = (__n128 *)((char *)v22 + 24);
    uint64_t v34 = v21;
    while (1)
    {
      int v35 = (char *)v5 + v34;
      int v36 = v8[2].n128_i8[15];
      if (v36 >= 0) {
        size_t v37 = v23;
      }
      else {
        size_t v37 = (__n128 *)v23->n128_u64[0];
      }
      if (v36 >= 0) {
        size_t v38 = v8[2].n128_u8[15];
      }
      else {
        size_t v38 = v8[2].n128_u64[0];
      }
      int v39 = *(v35 - 1);
      if (v39 >= 0) {
        unsigned int v40 = (char *)&v5[-1] + v34 - 8;
      }
      else {
        unsigned int v40 = *(char **)((char *)&v5[-1] + v34 - 8);
      }
      if (v39 >= 0) {
        size_t v41 = *(v35 - 1);
      }
      else {
        size_t v41 = *((void *)v35 - 2);
      }
      if (v41 >= v38) {
        size_t v42 = v38;
      }
      else {
        size_t v42 = v41;
      }
      int v43 = memcmp(v37, v40, v42);
      if (v43)
      {
        if ((v43 & 0x80000000) == 0)
        {
          unsigned int v33 = v22;
          goto LABEL_74;
        }
      }
      else if (v38 >= v41)
      {
        unsigned int v33 = (__n128 *)((char *)v5 + v34);
LABEL_74:
        int v7 = a2;
        unint64_t v24 = v65;
LABEL_75:
        if (v33[1].n128_i8[7] < 0) {
          operator delete((void *)v33->n128_u64[0]);
        }
        __n128 result = *v23;
        v33[1].n128_u64[0] = v23[1].n128_u64[0];
        __n128 *v33 = result;
        v8[2].n128_u8[15] = 0;
        v23->n128_u8[0] = 0;
LABEL_28:
        uint64_t v20 = (const void **)&v23[1].n128_u64[1];
        v21 += 24;
        uint64_t v22 = v24;
        uint64_t v8 = v23;
        if (&v23[1].n128_i8[8] == (__int8 *)v7) {
          return result;
        }
        goto LABEL_29;
      }
      if (v5[1].n128_i8[v34 + 7] < 0) {
        operator delete(*(void **)v35);
      }
      uint64_t v22 = (__n128 *)((char *)v22 - 24);
      *(__n128 *)int v35 = *(__n128 *)((char *)v5 + v34 - 24);
      *((void *)v35 + 2) = *(unint64_t *)((char *)&v5->n128_u64[-1] + v34);
      *(v35 - 1) = 0;
      *(v35 - ++*(_DWORD *)(result + 24) = 0;
      v34 -= 24;
      if (!v34)
      {
        unsigned int v33 = v5;
        goto LABEL_74;
      }
    }
  }
  unint64_t v45 = a4 >> 1;
  uint64_t v46 = 24 * (a4 >> 1);
  size_t v47 = (__n128 *)((char *)a1 + v46);
  sub_19E4C839C(a1, (char *)a1 + v46, a3, a4 >> 1, a5, a4 >> 1);
  sub_19E4C839C((char *)v8 + v46, v7, a3, a4 - v45, (char *)v5 + v46, a4 - v45);
  size_t v48 = (const void **)((char *)v8 + v46);
  while (v48 != (const void **)v7)
  {
    int v49 = *((char *)v48 + 23);
    if (v49 >= 0) {
      unint64_t v50 = v48;
    }
    else {
      unint64_t v50 = *v48;
    }
    if (v49 >= 0) {
      size_t v51 = *((unsigned __int8 *)v48 + 23);
    }
    else {
      size_t v51 = (size_t)v48[1];
    }
    int v52 = v8[1].n128_i8[7];
    if (v52 >= 0) {
      unsigned __int32 v53 = v8;
    }
    else {
      unsigned __int32 v53 = (__n128 *)v8->n128_u64[0];
    }
    if (v52 >= 0) {
      size_t v54 = v8[1].n128_u8[7];
    }
    else {
      size_t v54 = v8->n128_u64[1];
    }
    if (v54 >= v51) {
      size_t v55 = v51;
    }
    else {
      size_t v55 = v54;
    }
    int v56 = memcmp(v50, v53, v55);
    if (v56)
    {
      if ((v56 & 0x80000000) == 0) {
        goto LABEL_101;
      }
    }
    else if (v51 >= v54)
    {
LABEL_101:
      __n128 result = *v8;
      v5[1].n128_u64[0] = v8[1].n128_u64[0];
      *uint64_t v5 = result;
      v8->n128_u64[1] = 0;
      v8[1].n128_u64[0] = 0;
      v8->n128_u64[0] = 0;
      uint64_t v8 = (__n128 *)((char *)v8 + 24);
      goto LABEL_80;
    }
    __n128 result = *(__n128 *)v48;
    v5[1].n128_u64[0] = (unint64_t)v48[2];
    *uint64_t v5 = result;
    v48[1] = 0;
    v48[2] = 0;
    *size_t v48 = 0;
    v48 += 3;
LABEL_80:
    uint64_t v5 = (__n128 *)((char *)v5 + 24);
    if (v8 == v47)
    {
      if (v48 != (const void **)v7)
      {
        uint64_t v61 = 0;
        do
        {
          size_t v62 = &v48[v61];
          int v63 = (__n128 *)((char *)v5 + v61 * 8);
          __n128 result = *(__n128 *)&v48[v61];
          v63[1].n128_u64[0] = (unint64_t)v48[v61 + 2];
          *int v63 = result;
          v62[1] = 0;
          v62[2] = 0;
          *size_t v62 = 0;
          v61 += 3;
        }
        while (&v48[v61] != (const void **)v7);
      }
      return result;
    }
  }
  if (v8 != v47)
  {
    uint64_t v58 = 0;
    do
    {
      int v59 = (__n128 *)((char *)v5 + v58 * 8);
      unsigned __int32 v60 = &v8->n128_u64[v58];
      __n128 result = *(__n128 *)((char *)v8 + v58 * 8);
      v59[1].n128_u64[0] = v8[1].n128_u64[v58];
      *int v59 = result;
      v60[1] = 0;
      v60[2] = 0;
      *unsigned __int32 v60 = 0;
      v58 += 3;
    }
    while ((__n128 *)((char *)v8 + v58 * 8) != v47);
  }
  return result;
}

uint64_t *sub_19E4C8D14(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    unint64_t v3 = (unint64_t *)a1[1];
    unint64_t v4 = *v3;
    if (*v3)
    {
      unint64_t v5 = 0;
      do
      {
        if (*(char *)(v2 + 23) < 0)
        {
          operator delete(*(void **)v2);
          unint64_t v4 = *v3;
        }
        ++v5;
        v2 += 24;
      }
      while (v5 < v4);
    }
  }
  return a1;
}

void sub_19E4C8D88(const void **a1, const void **a2, const void **a3, uint64_t a4, uint64_t a5, uint64_t a6, _OWORD *a7, uint64_t a8)
{
  uint64_t v130 = a6;
  if (!a6) {
    return;
  }
  while (v130 > a8 && a5 > a8)
  {
    if (!a5) {
      return;
    }
    int v15 = *((char *)a2 + 23);
    if (v15 >= 0) {
      size_t v16 = a2;
    }
    else {
      size_t v16 = *a2;
    }
    if (v15 >= 0) {
      size_t v17 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v17 = (size_t)a2[1];
    }
    while (1)
    {
      int v18 = *((char *)a1 + 23);
      if (v18 >= 0) {
        __n128 v19 = a1;
      }
      else {
        __n128 v19 = *a1;
      }
      if (v18 >= 0) {
        size_t v20 = *((unsigned __int8 *)a1 + 23);
      }
      else {
        size_t v20 = (size_t)a1[1];
      }
      if (v20 >= v17) {
        size_t v21 = v17;
      }
      else {
        size_t v21 = v20;
      }
      int v22 = memcmp(v16, v19, v21);
      if (!v22)
      {
        if (v17 < v20) {
          break;
        }
        goto LABEL_12;
      }
      if (v22 < 0) {
        break;
      }
LABEL_12:
      a1 += 3;
      if (!--a5) {
        return;
      }
    }
    uint64_t v23 = v130;
    uint64_t v128 = a8;
    unsigned int v129 = a3;
    uint64_t v127 = a4;
    if (a5 >= v130)
    {
      if (a5 == 1)
      {
        char v141 = a1[2];
        long long v136 = *(_OWORD *)a1;
        long long v111 = *(_OWORD *)a2;
        a1[2] = a2[2];
        *(_OWORD *)a1 = v111;
        *(_OWORD *)a2 = v136;
        a2[2] = v141;
        return;
      }
      if (a5 >= 0) {
        uint64_t v40 = a5;
      }
      else {
        uint64_t v40 = a5 + 1;
      }
      size_t v41 = &a1[3 * (v40 >> 1)];
      uint64_t v123 = v40 >> 1;
      uint64_t v125 = a7;
      unsigned int v121 = v41;
      uint64_t v25 = 0;
      if (a2 == a3)
      {
LABEL_57:
        unint64_t v42 = 0xAAAAAAAAAAAAAAABLL * ((24 * v25) >> 3);
        size_t v27 = v121;
        unint64_t v43 = v123;
        unint64_t v26 = v121;
        a7 = v125;
        uint64_t v23 = v130;
        goto LABEL_60;
      }
      unint64_t v59 = 0xAAAAAAAAAAAAAAABLL * (a3 - a2);
      int v60 = *((char *)v41 + 23);
      if (v60 >= 0) {
        uint64_t v61 = &a1[3 * (v40 >> 1)];
      }
      else {
        uint64_t v61 = (const void **)*v41;
      }
      if (v60 >= 0) {
        size_t v62 = *((unsigned __int8 *)v41 + 23);
      }
      else {
        size_t v62 = (size_t)v41[1];
      }
      while (2)
      {
        unint64_t v63 = v59 >> 1;
        uint64_t v64 = v25;
        unint64_t v65 = (v59 >> 1) + v25;
        char v66 = &a2[3 * v65];
        int v67 = *((char *)v66 + 23);
        if (v67 >= 0) {
          uint64_t v68 = &a2[3 * v65];
        }
        else {
          uint64_t v68 = (const void **)*v66;
        }
        if (v67 >= 0) {
          size_t v69 = *((unsigned __int8 *)v66 + 23);
        }
        else {
          size_t v69 = (size_t)v66[1];
        }
        if (v62 >= v69) {
          size_t v70 = v69;
        }
        else {
          size_t v70 = v62;
        }
        int v71 = memcmp(v68, v61, v70);
        if (v71)
        {
          uint64_t v25 = v64;
          if (v71 < 0)
          {
LABEL_89:
            uint64_t v25 = v65 + 1;
            unint64_t v63 = v59 + ~v63;
          }
        }
        else
        {
          uint64_t v25 = v64;
          if (v69 < v62) {
            goto LABEL_89;
          }
        }
        unint64_t v59 = v63;
        if (!v63) {
          goto LABEL_57;
        }
        continue;
      }
    }
    if (v130 >= 0) {
      uint64_t v24 = v130;
    }
    else {
      uint64_t v24 = v130 + 1;
    }
    uint64_t v25 = v24 >> 1;
    unint64_t v26 = a2;
    size_t v27 = a1;
    if (a2 != a1)
    {
      uint64_t v122 = v24 >> 1;
      unint64_t v124 = a7;
      int v28 = &a2[3 * v25];
      unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * (a2 - a1);
      int v30 = *((char *)v28 + 23);
      if (v30 >= 0) {
        size_t v31 = &a2[3 * v25];
      }
      else {
        size_t v31 = (const void **)*v28;
      }
      if (v30 >= 0) {
        size_t v32 = *((unsigned __int8 *)v28 + 23);
      }
      else {
        size_t v32 = (size_t)v28[1];
      }
      size_t v27 = a1;
      while (1)
      {
        unint64_t v33 = v29 >> 1;
        uint64_t v34 = &v27[3 * (v29 >> 1)];
        int v35 = *((char *)v34 + 23);
        if (v35 >= 0) {
          int v36 = &v27[3 * (v29 >> 1)];
        }
        else {
          int v36 = (const void **)*v34;
        }
        if (v35 >= 0) {
          size_t v37 = *((unsigned __int8 *)v34 + 23);
        }
        else {
          size_t v37 = (size_t)v34[1];
        }
        if (v37 >= v32) {
          size_t v38 = v32;
        }
        else {
          size_t v38 = v37;
        }
        int v39 = memcmp(v31, v36, v38);
        if (v39)
        {
          if (v39 < 0) {
            goto LABEL_37;
          }
        }
        else if (v32 < v37)
        {
          goto LABEL_37;
        }
        size_t v27 = v34 + 3;
        unint64_t v33 = v29 + ~v33;
LABEL_37:
        unint64_t v29 = v33;
        if (!v33)
        {
          unint64_t v26 = v27;
          uint64_t v25 = v122;
          a7 = v124;
          uint64_t v23 = v130;
          break;
        }
      }
    }
    unint64_t v43 = 0xAAAAAAAAAAAAAAABLL * (v26 - a1);
    unint64_t v42 = v25;
LABEL_60:
    int v44 = &a2[3 * v25];
    if (v27 == a2)
    {
      unint64_t v45 = &a2[3 * v25];
    }
    else
    {
      unint64_t v45 = v26;
      if (v25)
      {
        char v137 = v27[2];
        long long v132 = *(_OWORD *)v27;
        long long v46 = *(_OWORD *)a2;
        v27[2] = a2[2];
        *(_OWORD *)size_t v27 = v46;
        *(_OWORD *)a2 = v132;
        a2[2] = v137;
        unint64_t v45 = v27 + 3;
        if (v25 != 1)
        {
          size_t v47 = a2 + 3;
          uint64_t v48 = 24 * v25 - 24;
          do
          {
            if (v45 == a2) {
              a2 = v47;
            }
            char v138 = v45[2];
            long long v133 = *(_OWORD *)v45;
            long long v49 = *(_OWORD *)v47;
            v45[2] = v47[2];
            *(_OWORD *)unint64_t v45 = v49;
            v45 += 3;
            *(_OWORD *)size_t v47 = v133;
            v47[2] = v138;
            v47 += 3;
            v48 -= 24;
          }
          while (v48);
        }
        if (v45 != a2)
        {
          unint64_t v50 = v45;
          size_t v51 = a2;
          while (1)
          {
            char v139 = v50[2];
            long long v134 = *(_OWORD *)v50;
            long long v52 = *(_OWORD *)v51;
            v50[2] = v51[2];
            *(_OWORD *)unint64_t v50 = v52;
            v50 += 3;
            v51[2] = v139;
            *(_OWORD *)size_t v51 = v134;
            v51 += 3;
            BOOL v53 = v50 == a2;
            if (v51 == v44)
            {
              if (v50 == a2) {
                break;
              }
              size_t v51 = a2 + 3;
              while (1)
              {
                unsigned __int8 v140 = v50[2];
                long long v135 = *(_OWORD *)v50;
                long long v54 = *(_OWORD *)a2;
                v50[2] = a2[2];
                *(_OWORD *)unint64_t v50 = v54;
                v50 += 3;
                a2[2] = v140;
                *(_OWORD *)a2 = v135;
                BOOL v53 = v50 == a2;
                if (v51 != v44) {
                  break;
                }
                if (v50 == a2) {
                  goto LABEL_78;
                }
              }
            }
            if (v53) {
              a2 = v51;
            }
          }
        }
      }
    }
LABEL_78:
    a5 -= v43;
    unint64_t v55 = v23 - v42;
    if ((uint64_t)(v43 + v42) >= (uint64_t)(a5 + v55))
    {
      a8 = v128;
      a4 = v127;
      unint64_t v56 = v43;
      uint64_t v57 = a5;
      unint64_t v58 = v42;
      sub_19E4C8D88(v45, v44, v129, v127, v57, v55, a7, v128);
      unint64_t v55 = v58;
      a5 = v56;
      a3 = v45;
    }
    else
    {
      a4 = v127;
      a8 = v128;
      sub_19E4C8D88(a1, v26, v45, v127, v43, v42, a7, v128);
      a1 = v45;
      unint64_t v26 = v44;
      a3 = v129;
    }
    a2 = v26;
    uint64_t v130 = v55;
    if (!v55) {
      return;
    }
  }
  if (a5 > v130)
  {
    if (a3 == a2) {
      return;
    }
    uint64_t v72 = 0;
    unint64_t v73 = 0;
    do
    {
      uint64_t v74 = (uint64_t)a7 + v72 * 8;
      unint64_t v75 = &a2[v72];
      long long v76 = *(_OWORD *)&a2[v72];
      *(void *)(v74 + 16) = a2[v72 + 2];
      *(_OWORD *)uint64_t v74 = v76;
      v75[1] = 0;
      v75[2] = 0;
      *unint64_t v75 = 0;
      ++v73;
      v72 += 3;
    }
    while (&a2[v72] != a3);
    uint64_t v77 = (_OWORD *)((char *)a7 + v72 * 8);
    if ((_OWORD *)((char *)a7 + v72 * 8) == a7) {
      goto LABEL_177;
    }
    unint64_t v78 = a3 - 3;
    unint64_t v126 = a7;
    while (2)
    {
      if (a2 == a1)
      {
        unint64_t v112 = 0;
        do
        {
          unint64_t v115 = &v78[v112 / 8];
          if (SHIBYTE(v78[v112 / 8 + 2]) < 0) {
            operator delete((void *)*v115);
          }
          unsigned int v113 = (char *)v77 + v112;
          v112 -= 24;
          long long v114 = *(_OWORD *)((char *)v77 + v112);
          v115[2] = *(const void **)((char *)v77 + v112 + 16);
          *(_OWORD *)unint64_t v115 = v114;
          *(v113 - 1) = 0;
          *((unsigned char *)v77 + v112) = 0;
        }
        while ((_OWORD *)((char *)v77 + v112) != a7);
        goto LABEL_177;
      }
      uint64_t v81 = a2 - 3;
      unsigned int v131 = v77;
      uint64_t v83 = (const void *)*((void *)v77 - 3);
      uint64_t v77 = (_OWORD *)((char *)v77 - 24);
      unint64_t v82 = v83;
      int v84 = *((char *)v77 + 23);
      if (v84 >= 0) {
        unsigned __int32 v85 = v77;
      }
      else {
        unsigned __int32 v85 = v82;
      }
      if (v84 >= 0) {
        size_t v86 = *((unsigned __int8 *)v77 + 23);
      }
      else {
        size_t v86 = *((void *)v77 + 1);
      }
      unint64_t v80 = (char *)a2 - 1;
      int v87 = *((char *)a2 - 1);
      if (v87 >= 0) {
        uint64_t v88 = a2 - 3;
      }
      else {
        uint64_t v88 = (const void **)*(a2 - 3);
      }
      if (v87 >= 0) {
        size_t v89 = *((unsigned __int8 *)a2 - 1);
      }
      else {
        size_t v89 = (size_t)*(a2 - 2);
      }
      if (v89 >= v86) {
        size_t v90 = v86;
      }
      else {
        size_t v90 = v89;
      }
      int v91 = memcmp(v85, v88, v90);
      if (v91)
      {
        if ((v91 & 0x80000000) == 0) {
          goto LABEL_131;
        }
LABEL_134:
        if (*((char *)v78 + 23) < 0) {
          operator delete((void *)*v78);
        }
        long long v92 = *(_OWORD *)v81;
        v78[2] = *(a2 - 1);
        *(_OWORD *)unint64_t v78 = v92;
        a2 -= 3;
        uint64_t v77 = v131;
      }
      else
      {
        if (v86 < v89) {
          goto LABEL_134;
        }
LABEL_131:
        if (*((char *)v78 + 23) < 0) {
          operator delete((void *)*v78);
        }
        long long v79 = *v77;
        v78[2] = (const void *)*((void *)v77 + 2);
        *(_OWORD *)unint64_t v78 = v79;
        unint64_t v80 = (char *)v77 + 23;
        uint64_t v81 = (const void **)v77;
      }
      *unint64_t v80 = 0;
      *(unsigned char *)uint64_t v81 = 0;
      v78 -= 3;
      a7 = v126;
      if (v77 == v126) {
        goto LABEL_177;
      }
      continue;
    }
  }
  if (a1 == a2) {
    return;
  }
  uint64_t v93 = 0;
  unint64_t v73 = 0;
  do
  {
    uint64_t v94 = (uint64_t)a7 + v93 * 8;
    unsigned int v95 = &a1[v93];
    long long v96 = *(_OWORD *)&a1[v93];
    *(void *)(v94 + 16) = a1[v93 + 2];
    *(_OWORD *)uint64_t v94 = v96;
    v95[1] = 0;
    v95[2] = 0;
    const void *v95 = 0;
    ++v73;
    v93 += 3;
  }
  while (&a1[v93] != a2);
  size_t v97 = (const void **)((char *)a7 + v93 * 8);
  if ((_OWORD *)((char *)a7 + v93 * 8) == a7) {
    goto LABEL_177;
  }
  uint64_t v98 = v97 - 3;
  uint64_t v99 = (const void **)a7;
  while (2)
  {
    if (a2 != a3)
    {
      uint64_t v101 = a7;
      int v102 = *((char *)a2 + 23);
      if (v102 >= 0) {
        unsigned int v103 = a2;
      }
      else {
        unsigned int v103 = *a2;
      }
      if (v102 >= 0) {
        size_t v104 = *((unsigned __int8 *)a2 + 23);
      }
      else {
        size_t v104 = (size_t)a2[1];
      }
      int v105 = *((char *)v99 + 23);
      if (v105 >= 0) {
        uint64_t v106 = v99;
      }
      else {
        uint64_t v106 = *v99;
      }
      if (v105 >= 0) {
        size_t v107 = *((unsigned __int8 *)v99 + 23);
      }
      else {
        size_t v107 = (size_t)v99[1];
      }
      if (v107 >= v104) {
        size_t v108 = v104;
      }
      else {
        size_t v108 = v107;
      }
      int v109 = memcmp(v103, v106, v108);
      if (v109)
      {
        if ((v109 & 0x80000000) == 0) {
          goto LABEL_162;
        }
LABEL_165:
        a7 = v101;
        if (*((char *)a1 + 23) < 0) {
          operator delete((void *)*a1);
        }
        long long v110 = *(_OWORD *)a2;
        a1[2] = a2[2];
        *(_OWORD *)a1 = v110;
        *((unsigned char *)a2 + 23) = 0;
        *(unsigned char *)a2 = 0;
        a2 += 3;
      }
      else
      {
        if (v104 < v107) {
          goto LABEL_165;
        }
LABEL_162:
        a7 = v101;
        if (*((char *)a1 + 23) < 0) {
          operator delete((void *)*a1);
        }
        long long v100 = *(_OWORD *)v99;
        a1[2] = v99[2];
        *(_OWORD *)a1 = v100;
        *((unsigned char *)v99 + 23) = 0;
        *(unsigned char *)uint64_t v99 = 0;
        v99 += 3;
      }
      a1 += 3;
      if (v99 == v97) {
        goto LABEL_177;
      }
      continue;
    }
    break;
  }
  uint64_t v116 = 0;
  do
  {
    float64x2x2_t v119 = &a1[v116];
    if (SHIBYTE(a1[v116 + 2]) < 0) {
      operator delete((void *)*v119);
    }
    uint64_t v117 = &v99[v116];
    long long v118 = *(_OWORD *)&v99[v116];
    v119[2] = v99[v116 + 2];
    *(_OWORD *)float64x2x2_t v119 = v118;
    *((unsigned char *)v117 + 23) = 0;
    *(unsigned char *)uint64_t v117 = 0;
    v116 += 3;
  }
  while (v117 != v98);
LABEL_177:
  if (a7 && v73)
  {
    for (unint64_t i = 0; i < v73; ++i)
    {
      if (*((char *)a7 + 23) < 0) {
        operator delete(*(void **)a7);
      }
      a7 = (_OWORD *)((char *)a7 + 24);
    }
  }
}

void sub_19E4C95A4(void *a1)
{
  *a1 = &unk_1EF0BB078;
  uint64_t v2 = (void **)a1[3];
  if ((unint64_t)v2 < a1[4])
  {
    do
    {
      unint64_t v3 = *v2++;
      free(v3);
    }
    while ((unint64_t)v2 < a1[4]);
    uint64_t v2 = (void **)a1[3];
  }
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  unint64_t v4 = (uint64_t *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    uint64_t v5 = *v4;
    if (*v4)
    {
      if (*(_DWORD *)(v5 + 48)) {
        free(*(void **)(v5 + 8));
      }
      free((void *)v5);
    }
    MEMORY[0x19F3BDCF0](v4, 0x80C40B8603338);
  }
  JUMPOUT(0x19F3BDCF0);
}

void *sub_19E4C9684(void *a1)
{
  *a1 = &unk_1EF0BB078;
  uint64_t v2 = (void **)a1[3];
  if ((unint64_t)v2 < a1[4])
  {
    do
    {
      unint64_t v3 = *v2++;
      free(v3);
    }
    while ((unint64_t)v2 < a1[4]);
    uint64_t v2 = (void **)a1[3];
  }
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  unint64_t v4 = (uint64_t *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    uint64_t v5 = *v4;
    if (*v4)
    {
      if (*(_DWORD *)(v5 + 48)) {
        free(*(void **)(v5 + 8));
      }
      free((void *)v5);
    }
    MEMORY[0x19F3BDCF0](v4, 0x80C40B8603338);
  }
  return a1;
}

uint64_t sub_19E4C9744(uint64_t a1, void *__dst, uint64_t a3)
{
  if (*(void *)(a1 + 168))
  {
    uint64_t v5 = *(void *)(a1 + 176);
    uint64_t v6 = *(void *)(v5 + 160);
    if (__dst && v6) {
      memmove(__dst, (const void *)(*(void *)(a1 + 192) + 4 * *(void *)(v5 + 152)), 4 * v6);
    }
    if (a3)
    {
      uint64_t v7 = *(void *)(a1 + 176);
      long long v8 = *(_OWORD *)(v7 + 32);
      long long v9 = *(_OWORD *)(v7 + 48);
      long long v10 = *(_OWORD *)(v7 + 80);
      *(_OWORD *)(a3 + 32) = *(_OWORD *)(v7 + 64);
      *(_OWORD *)(a3 + 48) = v10;
      *(_OWORD *)a3 = v8;
      *(_OWORD *)(a3 + 16) = v9;
      long long v11 = *(_OWORD *)(v7 + 96);
      long long v12 = *(_OWORD *)(v7 + 112);
      long long v13 = *(_OWORD *)(v7 + 128);
      *(void *)(a3 + 112) = *(void *)(v7 + 144);
      *(_OWORD *)(a3 + 80) = v12;
      *(_OWORD *)(a3 + 96) = v13;
      *(_OWORD *)(a3 + 64) = v11;
    }
    return v6;
  }
  if (*(unsigned char *)(a1 + 228)) {
    return 0;
  }
  uint64_t v14 = *(void *)(a1 + 8);
  uint64_t v15 = ((uint64_t)(*(void *)(v14 + 160) - *(void *)(v14 + 152)) >> 3)
      + ((uint64_t)(*(void *)(v14 + 136) - *(void *)(v14 + 128)) >> 4);
  if (*(unsigned char *)(*(void *)(v14 + 232) + 192))
  {
    uint8x8_t v16 = (uint8x8_t)vcnt_s8((int8x8_t)vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_19E5730D0, (int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64(*(int64x2_t *)(v14 + 264)), (int32x4_t)vceqzq_s64(*(int64x2_t *)(v14 + 288))))));
    v16.i16[0] = vaddlv_u8(v16);
    if (*(void *)(v14 + 304)) {
      uint64_t v17 = v16.u32[0] + 1;
    }
    else {
      uint64_t v17 = v16.u32[0];
    }
    v15 += v17;
  }
  if (v15 != 1) {
    return 0;
  }
  int v18 = *(uint64_t (**)(void))(***(void ***)(*(void *)(a1 + 48) + 40) + 24);
  return v18();
}

uint64_t sub_19E4C98C8(uint64_t a1)
{
  uint64_t v145 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 228))
  {
    uint64_t v2 = (unsigned char *)(a1 + 146);
    if (!*(unsigned char *)(a1 + 146)) {
      goto LABEL_10;
    }
  }
  if (*(void *)(a1 + 168))
  {
    unint64_t v3 = *(void **)(a1 + 176);
    unint64_t v4 = (void *)v3[1];
    if (v4)
    {
      do
      {
        unint64_t v3 = v4;
        unint64_t v4 = (void *)*v4;
      }
      while (v4);
      uint64_t v5 = 0;
    }
    else
    {
      do
      {
        uint64_t v5 = v3;
        unint64_t v3 = (void *)v3[2];
      }
      while ((void *)*v3 != v5);
    }
    *(void *)(a1 + 176) = v3;
    if (v3 != (void *)(a1 + 160))
    {
      uint64_t v2 = (unsigned char *)(a1 + 146);
LABEL_10:
      uint64_t result = 1;
      unsigned char *v2 = 1;
      return result;
    }
    sub_19E418864(v5);
    *(void *)(a1 + 168) = 0;
    *(void *)(a1 + 152) = v3;
    *unint64_t v3 = 0;
  }
  uint64_t v7 = (void *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 48);
  if (v8 != a1 + 32)
  {
    uint64_t v2 = (unsigned char *)(a1 + 146);
    uint64_t v117 = (uint64_t **)(a1 + 56);
    long long v118 = (unsigned int **)(a1 + 192);
    long long v114 = (uint64_t *)(a1 + 152);
    unint64_t v115 = (char **)(a1 + 160);
    uint64_t v116 = (uint64_t *)(a1 + 64);
    int64x2_t v123 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    do
    {
      long long v9 = *(void **)(v8 + 40);
      float64x2x2_t v119 = (void *)v8;
      if (v9 == *(void **)(v8 + 48)) {
        return 0;
      }
      uint64_t v10 = *(void *)(a1 + 8);
      uint64_t v11 = ((uint64_t)(*(void *)(v10 + 160) - *(void *)(v10 + 152)) >> 3)
          + ((uint64_t)(*(void *)(v10 + 136) - *(void *)(v10 + 128)) >> 4);
      uint64_t v12 = *(void *)(v10 + 232);
      if (*(unsigned char *)(v12 + 192))
      {
        uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_19E5730D0, (int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64(*(int64x2_t *)(v10 + 264)), (int32x4_t)vceqzq_s64(*(int64x2_t *)(v10 + 288))))));
        v13.i16[0] = vaddlv_u8(v13);
        if (*(void *)(v10 + 304)) {
          uint64_t v14 = v13.u32[0] + 1;
        }
        else {
          uint64_t v14 = v13.u32[0];
        }
        v11 += v14;
      }
      if (v11 == 1 && !*(_DWORD *)(a1 + 232))
      {
        *(unsigned char *)(a1 + 228) = 0;
        char v91 = (*(uint64_t (**)(void))(*(void *)*v9 + 16))();
        if (v91)
        {
          long long v92 = *v118;
          uint64_t v93 = (*(uint64_t (**)(void, unsigned int *, void))(*(void *)*v9 + 24))(*v9, *v118, 0);
          uint64_t v94 = v93;
          if (v93)
          {
            for (uint64_t i = 0; i != v93; ++i)
            {
              if (!v92[i]) {
                goto LABEL_173;
              }
            }
            if (v93 == 1)
            {
              uint64_t v96 = *v116;
              if (*v116)
              {
                unsigned int v97 = *v92;
                uint64_t v98 = a1 + 64;
                do
                {
                  unsigned int v99 = *(_DWORD *)(v96 + 28);
                  BOOL v100 = v99 >= v97;
                  if (v99 >= v97) {
                    uint64_t v101 = (uint64_t *)v96;
                  }
                  else {
                    uint64_t v101 = (uint64_t *)(v96 + 8);
                  }
                  if (v100) {
                    uint64_t v98 = v96;
                  }
                  uint64_t v96 = *v101;
                }
                while (*v101);
                if ((uint64_t *)v98 != v116 && v97 >= *(_DWORD *)(v98 + 28)) {
LABEL_173:
                }
                  char v91 = 0;
              }
            }
            else
            {
              unsigned int v106 = 4 * v93;
              if (4 * v93)
              {
                uint64_t v107 = *(void *)(a1 + 80);
                long long v136 = xmmword_19E57CC38;
                long long v137 = unk_19E57CC48;
                sub_19E5006BC(v107, v92, v106, 1, (uint64_t)&v136);
                if ((DWORD1(v136) & 0x80000000) == 0) {
                  goto LABEL_173;
                }
              }
            }
            memmove((void *)(*(void *)(a1 + 88) + 4 * *(void *)(a1 + 136)), v92, 4 * v94);
            uint64_t v105 = v94;
          }
          else
          {
            uint64_t v105 = 0;
          }
          if (!sub_19E4CA630(a1, *(void *)(a1 + 88), *(void *)(a1 + 136), v105)) {
            char v91 = 0;
          }
          sub_19E4B8940(v117, v92, v94, v108);
          uint64_t v7 = (void *)(a1 + 32);
          uint64_t v2 = (unsigned char *)(a1 + 146);
        }
        else
        {
          int v102 = *(void **)(a1 + 48);
          unsigned int v103 = (void *)v102[1];
          if (v103)
          {
            do
            {
              size_t v104 = v103;
              unsigned int v103 = (void *)*v103;
            }
            while (v103);
          }
          else
          {
            do
            {
              size_t v104 = (void *)v102[2];
              BOOL v18 = *v104 == (void)v102;
              int v102 = v104;
            }
            while (!v18);
          }
          *(void *)(a1 + 48) = v104;
        }
        uint64_t result = 1;
        unsigned char *v2 = 1;
        if (v91) {
          return result;
        }
      }
      else
      {
        if (*v2 && !*(unsigned char *)(a1 + 228))
        {
          uint64_t v15 = v119;
          uint8x8_t v16 = (void *)v119[1];
          if (v16)
          {
            do
            {
              uint64_t v17 = v16;
              uint8x8_t v16 = (void *)*v16;
            }
            while (v16);
          }
          else
          {
            do
            {
              uint64_t v17 = (void *)v15[2];
              BOOL v18 = *v17 == (void)v15;
              uint64_t v15 = v17;
            }
            while (!v18);
          }
          *(void *)(a1 + 48) = v17;
          float64x2x2_t v119 = v17;
        }
        *(unsigned char *)(a1 + 228) = 0;
        if (v119 != v7)
        {
          uint64_t v19 = *(void *)(a1 + 192);
          unint64_t v20 = *(void *)(a1 + 184);
          unint64_t v21 = (*(void *)(a1 + 200) - v19) >> 2;
          if (v20 <= v21)
          {
            if (v20 < v21) {
              *(void *)(a1 + 200) = v19 + 4 * v20;
            }
          }
          else
          {
            sub_19E3F9C70((uint64_t)v118, v20 - v21);
            uint64_t v10 = *(void *)(a1 + 8);
            uint64_t v12 = *(void *)(v10 + 232);
          }
          long long v136 = (__int128)v123;
          *(void *)&long long v137 = 0;
          WORD4(v137) = 0;
          LOBYTE(v138[0]) = 1;
          *(_OWORD *)((char *)v138 + 8) = xmmword_19E572FD0;
          DWORD2(v138[1]) = 0;
          long long v139 = xmmword_19E572FD0;
          long long v140 = 0xFFEFFFFFFFFFFFFFLL;
          long long v141 = 0uLL;
          LOWORD(v142[0]) = 0;
          *(void *)((char *)v142 + 4) = 0;
          *(void *)((char *)&v142[1] + 4) = 0;
          HIDWORD(v142[2]) = 0;
          if (*(unsigned char *)(v12 + 192))
          {
            uint64_t v22 = *(void *)(v10 + 48);
            uint64_t v23 = *(void *)(v22 + 560);
            uint64_t v24 = *(std::__shared_weak_count **)(v22 + 568);
            uint64_t v134 = v23;
            long long v135 = v24;
            if (v24) {
              atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
            }
          }
          else
          {
            uint64_t v134 = 0;
            long long v135 = 0;
          }
          unsigned int v121 = (void *)v119[5];
          unint64_t v112 = (void *)v119[6];
          if (v121 != v112)
          {
            uint64_t v113 = v12;
            unint64_t v25 = 0;
            unint64_t v110 = v142[1];
            unint64_t v111 = 0;
            unint64_t v109 = v142[2];
            while (1)
            {
              unint64_t v122 = v25;
              unint64_t v120 = 0;
              while (1)
              {
                int v27 = (*(uint64_t (**)(void))(*(void *)*v121 + 16))();
                int v28 = v120 < 0x32 ? v27 : 0;
                if (v28 != 1 || !v119[4] && *(void *)(a1 + 240) > 9uLL) {
                  break;
                }
                unint64_t v29 = *(unsigned char **)(a1 + 192);
                int v30 = *(unsigned char **)(a1 + 200);
                unint64_t v31 = (v30 - v29) >> 2;
                unint64_t v26 = v122;
                unint64_t v32 = *(void *)(a1 + 184) + v122;
                unint64_t v33 = v32 - v31;
                if (v32 > v31)
                {
                  uint64_t v34 = *(void *)(a1 + 208);
                  if (v33 > (v34 - (uint64_t)v30) >> 2)
                  {
                    if (v32 >> 62) {
                      sub_19E37C7C4();
                    }
                    uint64_t v35 = v34 - (void)v29;
                    if (v35 >> 1 > v32) {
                      unint64_t v32 = v35 >> 1;
                    }
                    if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v36 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v36 = v32;
                    }
                    if (v36 >> 62) {
                      sub_19E37C2B8();
                    }
                    size_t v37 = operator new(4 * v36);
                    size_t v38 = 4 * v33;
                    int v39 = &v37[4 * v31];
                    size_t v40 = v38;
                    bzero(v39, v38);
                    if (v30 == v29)
                    {
                      unint64_t v42 = &v37[4 * v31];
                      size_t v43 = v40;
                    }
                    else
                    {
                      unint64_t v41 = v30 - 4 - v29;
                      if (v41 < 0x2C)
                      {
                        unint64_t v42 = &v37[4 * v31];
                        size_t v43 = v40;
                        goto LABEL_74;
                      }
                      unint64_t v42 = &v37[4 * v31];
                      size_t v43 = v40;
                      if ((unint64_t)(v29 - v37) < 0x20) {
                        goto LABEL_186;
                      }
                      uint64_t v45 = (v41 >> 2) + 1;
                      long long v46 = &v37[4 * v31 - 16];
                      size_t v47 = (long long *)(v30 - 16);
                      uint64_t v48 = v45 & 0x7FFFFFFFFFFFFFF8;
                      do
                      {
                        long long v49 = *v47;
                        *(v46 - 1) = *(v47 - 1);
                        _OWORD *v46 = v49;
                        v46 -= 2;
                        v47 -= 2;
                        v48 -= 8;
                      }
                      while (v48);
                      unint64_t v42 = &v39[-4 * (v45 & 0x7FFFFFFFFFFFFFF8)];
                      v30 -= 4 * (v45 & 0x7FFFFFFFFFFFFFF8);
                      if (v45 != (v45 & 0x7FFFFFFFFFFFFFF8))
                      {
LABEL_186:
                        do
                        {
LABEL_74:
                          int v50 = *((_DWORD *)v30 - 1);
                          v30 -= 4;
                          *((_DWORD *)v42 - 1) = v50;
                          v42 -= 4;
                        }
                        while (v30 != v29);
                      }
                    }
                    *(void *)(a1 + 192) = v42;
                    *(void *)(a1 + 200) = &v39[v43];
                    *(void *)(a1 + 208) = &v37[4 * v36];
                    unint64_t v26 = v122;
                    if (v29) {
                      operator delete(v29);
                    }
                    goto LABEL_77;
                  }
                  size_t v44 = 4 * v33;
                  bzero(*(void **)(a1 + 200), v44);
                  *(void *)(a1 + 200) = &v30[v44];
                }
LABEL_77:
                size_t v51 = &(*v118)[v26];
                *(int64x2_t *)long long v133 = v123;
                *(void *)&v133[16] = 0;
                *(_WORD *)&v133[24] = 0;
                v133[32] = 1;
                *(_OWORD *)&v133[40] = xmmword_19E572FD0;
                *(_DWORD *)&v133[56] = 0;
                *(_OWORD *)&v133[64] = xmmword_19E572FD0;
                *(void *)&v133[80] = 0xFFEFFFFFFFFFFFFFLL;
                *(_DWORD *)&v133[116] = 0;
                memset(&v133[88], 0, 26);
                uint64_t v52 = (*(uint64_t (**)(void, unsigned int *, unsigned char *))(*(void *)*v121 + 24))(*v121, v51, v133);
                unint64_t v54 = v52;
                if (v52)
                {
                  uint64_t v55 = 4 * v52;
                  unint64_t v56 = v51;
                  do
                  {
                    if (!*v56) {
                      goto LABEL_49;
                    }
                    ++v56;
                    v55 -= 4;
                  }
                  while (v55);
                  if (v52 == 1)
                  {
                    uint64_t v57 = *v116;
                    if (*v116)
                    {
                      unsigned int v58 = *v51;
                      uint64_t v59 = a1 + 64;
                      do
                      {
                        unsigned int v60 = *(_DWORD *)(v57 + 28);
                        BOOL v61 = v60 >= v58;
                        if (v60 >= v58) {
                          size_t v62 = (uint64_t *)v57;
                        }
                        else {
                          size_t v62 = (uint64_t *)(v57 + 8);
                        }
                        if (v61) {
                          uint64_t v59 = v57;
                        }
                        uint64_t v57 = *v62;
                      }
                      while (*v62);
                      if ((uint64_t *)v59 != v116 && v58 >= *(_DWORD *)(v59 + 28)) {
                        goto LABEL_49;
                      }
                    }
                  }
                  else
                  {
                    unsigned int v64 = 4 * v52;
                    if (4 * v52)
                    {
                      uint64_t v65 = *(void *)(a1 + 80);
                      long long v125 = xmmword_19E57CC38;
                      long long v126 = unk_19E57CC48;
                      sub_19E5006BC(v65, v51, v64, 1, (uint64_t)&v125);
                      if ((DWORD1(v125) & 0x80000000) == 0) {
                        goto LABEL_49;
                      }
                    }
                  }
                  memmove((void *)(*(void *)(a1 + 88) + 4 * *(void *)(a1 + 136)), v51, 4 * v54);
                  memmove((void *)(*(void *)(a1 + 112) + 4 * *(void *)(a1 + 136)), v51, 4 * v54);
                  uint64_t v63 = v54;
                }
                else
                {
                  uint64_t v63 = 0;
                }
                sub_19E4B8940(v117, v51, v63, v53);
                if (!sub_19E4CA630(a1, *(void *)(a1 + 88), *(void *)(a1 + 136), v54)) {
                  goto LABEL_49;
                }
                *(int64x2_t *)long long v133 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
                *(void *)&v133[16] = 0;
                *(_WORD *)&v133[24] = 0;
                char v66 = 1;
                v133[32] = 1;
                *(_OWORD *)&v133[40] = xmmword_19E572FD0;
                *(_DWORD *)&v133[56] = 0;
                *(_OWORD *)&v133[64] = xmmword_19E572FD0;
                *(void *)&v133[80] = 0xFFEFFFFFFFFFFFFFLL;
                *(void *)&v133[88] = 0;
                *(void *)&v133[96] = 0;
                unint64_t v67 = *(void *)(a1 + 136);
                if (v67 < v67 + v54)
                {
                  do
                  {
                    long long v125 = (__int128)v123;
                    *(void *)&long long v126 = 0;
                    WORD4(v126) = 0;
                    char v127 = 1;
                    __n128 v74 = (__n128)xmmword_19E572FD0;
                    long long v128 = xmmword_19E572FD0;
                    int v129 = 0;
                    long long v130 = xmmword_19E572FD0;
                    long long v131 = 0xFFEFFFFFFFFFFFFFLL;
                    uint64_t v132 = 0;
                    uint64_t v75 = *(void *)(a1 + 88);
                    uint64_t v76 = *(void *)(a1 + 112);
                    uint64_t v77 = *(void *)(a1 + 8);
                    uint64_t v78 = *(unsigned int *)(v75 + 4 * v67);
                    v124[0] = v75;
                    v124[1] = v67;
                    v124[2] = v76;
                    v124[3] = v67;
                    v124[4] = v75;
                    v124[5] = v67;
                    v124[6] = v75;
                    v124[7] = v67;
                    if (qword_1EC009490 != -1) {
                      dispatch_once(&qword_1EC009490, &unk_1EF0BEE38);
                    }
                    char v144 = 0;
                    sub_19E413378(v77, v78 | (v78 << 32), v124, (uint64_t)&v125, qword_1EC009488, 1, 0, v143, v74);
                    if (v144 == v143)
                    {
                      (*(void (**)(void *))(v143[0] + 32))(v143);
                    }
                    else if (v144)
                    {
                      (*(void (**)(void))(*v144 + 40))();
                    }
                    double v68 = *(double *)&v125;
                    if (*(double *)v133 == -1.79769313e308)
                    {
                      double v73 = *((double *)&v125 + 1);
                      *(_OWORD *)&v133[40] = v128;
                      *(_OWORD *)&v133[64] = v130;
                      *(_OWORD *)&v133[80] = v131;
                      *(void *)&v133[96] = v132;
                    }
                    else
                    {
                      double v68 = *(double *)&v125 + *(double *)v133;
                      double v73 = *(double *)&v133[8] + *((double *)&v125 + 1);
                      v133[32] = 0;
                    }
                    *(double *)long long v133 = v68;
                    *(double *)&v133[8] = v73;
                    v66 &= BYTE9(v126) != 0;
                    ++v67;
                  }
                  while (v67 < *(void *)(a1 + 136) + v54);
                }
                else
                {
                  double v68 = -1.79769313e308;
                }
                v133[113] = v66;
                uint64_t v69 = v134;
                if (v134 && v54 && *(_DWORD *)(v113 + 288) != *(_DWORD *)(v113 + 292))
                {
                  uint64_t v70 = 4 * v54;
                  do
                  {
                    BOOL v71 = *(_DWORD *)(v113 + 288) > *v51 || *v51 > *(_DWORD *)(v113 + 292);
                    if (!v71 && (*(unsigned int (**)(uint64_t))(*(void *)v69 + 144))(v69) == 1)
                    {
                      if (*(double *)v133 <= *(double *)&v136)
                      {
                        unint64_t v72 = v122;
                      }
                      else
                      {
                        long long v139 = *(_OWORD *)&v133[64];
                        long long v140 = *(_OWORD *)&v133[80];
                        long long v141 = *(_OWORD *)&v133[96];
                        v142[0] = *(void *)&v133[112];
                        long long v136 = *(_OWORD *)v133;
                        long long v137 = *(_OWORD *)&v133[16];
                        unint64_t v72 = v122;
                        unint64_t v109 = v54;
                        unint64_t v110 = v122;
                        unint64_t v111 = v54;
                        v138[0] = *(_OWORD *)&v133[32];
                        v138[1] = *(_OWORD *)&v133[48];
                      }
                      goto LABEL_48;
                    }
                    ++v51;
                    v70 -= 4;
                  }
                  while (v70);
                  double v68 = *(double *)v133;
                }
                long long v79 = (char **)(a1 + 160);
                unint64_t v80 = *v115;
                uint64_t v81 = (char **)(a1 + 160);
                unint64_t v72 = v122;
                if (!*v115) {
                  goto LABEL_138;
                }
                do
                {
                  while (1)
                  {
                    long long v79 = (char **)v80;
                    double v82 = *((double *)v80 + 4);
                    if (v68 == v82) {
                      break;
                    }
                    if (v68 <= v82)
                    {
                      if (v82 <= v68) {
                        goto LABEL_47;
                      }
                      goto LABEL_136;
                    }
LABEL_126:
                    unint64_t v80 = *v79;
                    uint64_t v81 = v79;
                    if (!*v79) {
                      goto LABEL_138;
                    }
                  }
                  unint64_t v83 = *((void *)v80 + 19);
                  if (v122 != v83)
                  {
                    if (v122 >= v83) {
                      goto LABEL_136;
                    }
                    goto LABEL_126;
                  }
                  unint64_t v84 = (unint64_t)v79[20];
                  if (v54 < v84) {
                    goto LABEL_126;
                  }
                  if (v84 >= v54) {
                    goto LABEL_47;
                  }
LABEL_136:
                  unint64_t v80 = v79[1];
                }
                while (v80);
                uint64_t v81 = v79 + 1;
LABEL_138:
                unsigned __int32 v85 = (char *)operator new(0xA8uLL);
                *((double *)v85 + 4) = v68;
                long long v86 = *(_OWORD *)&v133[40];
                *(_OWORD *)(v85 + 88) = *(_OWORD *)&v133[56];
                long long v87 = *(_OWORD *)&v133[88];
                *(_OWORD *)(v85 + 104) = *(_OWORD *)&v133[72];
                *(_OWORD *)(v85 + 120) = v87;
                *(_OWORD *)(v85 + 136) = *(_OWORD *)&v133[104];
                long long v88 = *(_OWORD *)&v133[24];
                *(_OWORD *)(v85 + 40) = *(_OWORD *)&v133[8];
                *(_OWORD *)(v85 + 56) = v88;
                *(_OWORD *)(v85 + 72) = v86;
                *((void *)v85 + 19) = v122;
                *((void *)v85 + 20) = v54;
                *(void *)unsigned __int32 v85 = 0;
                *((void *)v85 + 1) = 0;
                *((void *)v85 + 2) = v79;
                *uint64_t v81 = v85;
                uint64_t v89 = *(void *)*v114;
                if (v89)
                {
                  uint64_t *v114 = v89;
                  unsigned __int32 v85 = *v81;
                }
                sub_19E37D324(*(uint64_t **)(a1 + 160), (uint64_t *)v85);
                ++*(void *)(a1 + 168);
LABEL_47:
                ++v120;
                ++*(void *)(a1 + 240);
LABEL_48:
                unint64_t v26 = v54 + v72;
LABEL_49:
                unint64_t v122 = v26;
              }
              ++v121;
              unint64_t v25 = v122;
              if (v121 == v112)
              {
                v142[1] = v110;
                v142[2] = v109;
                uint64_t v7 = (void *)(a1 + 32);
                uint64_t v2 = (unsigned char *)(a1 + 146);
                if (v111)
                {
                  sub_19E4CA8C0(v114, (uint64_t)&v136, (uint64_t)&v136);
                  ++*(void *)(a1 + 240);
                }
                break;
              }
            }
          }
          size_t v90 = v135;
          if (v135 && !atomic_fetch_add(&v135->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
            std::__shared_weak_count::__release_weak(v90);
          }
          if (*(void *)(a1 + 168))
          {
            *(void *)(a1 + 176) = *(void *)(a1 + 152);
            goto LABEL_10;
          }
        }
        unsigned char *v2 = 1;
      }
      uint64_t v8 = *(void *)(a1 + 48);
    }
    while ((void *)v8 != v7);
  }
  return 0;
}

void sub_19E4CA5F8(_Unwind_Exception *a1)
{
}

uint64_t sub_19E4CA630(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4;
  unint64_t v5 = a3;
  if (a4 && *(_DWORD *)(a2 + 4 * a3) == 1) {
    return 0;
  }
  unint64_t v8 = a4 + a3;
  if (a4 + a3 > a3)
  {
    long long v9 = (int *)(a2 + 4 * a3);
    uint64_t v10 = a4;
    do
    {
      int v12 = *v9++;
      int v11 = v12;
      if ((v12 - 3) <= 0x1F0)
      {
        unsigned int v13 = v11 - 68;
        if (v13 > 0x3C || ((0x7FFFFFFFFFFFFE0uLL >> v13) & 1) != 0) {
          return 0;
        }
      }
    }
    while (--v10);
  }
  uint64_t v14 = *(void *)(a1 + 8);
  uint64_t v15 = *(void ***)(v14 + 184);
  uint64_t v16 = *(void *)(v14 + 192);
  if (v16 - (void)v15 == 16)
  {
    if (sub_19E41566C(v14, a2 + 4 * a3, a4, 4, 0, 1, 1, *v15)) {
      return 0;
    }
    uint64_t v14 = *(void *)(a1 + 8);
    uint64_t v15 = *(void ***)(v14 + 184);
    uint64_t v16 = *(void *)(v14 + 192);
  }
  if (v16 - (void)v15 == 16)
  {
    if ((sub_19E41566C(v14, a2, v4 + v5, 2, 0, 1, 1, *v15) & 1) == 0)
    {
      uint64_t v14 = *(void *)(a1 + 8);
      uint64_t v15 = *(void ***)(v14 + 184);
      uint64_t v16 = *(void *)(v14 + 192);
      goto LABEL_16;
    }
    return 0;
  }
LABEL_16:
  if (v16 - (void)v15 == 16 && (sub_19E41566C(v14, a2, v4 + v5, 3, 0, 4, 1, *v15) & 1) != 0) {
    return 0;
  }
  while (v4 >= 2)
  {
    uint64_t v17 = *(void *)(a1 + 8);
    BOOL v18 = *(void ***)(v17 + 184);
    if (*(void *)(v17 + 192) - (void)v18 == 16
      && (sub_19E41566C(v17, a2, v5 + v4 - 1, 2, 0, 1, 1, *v18) & 1) != 0)
    {
      return 0;
    }
    --v4;
  }
  unint64_t v20 = v5 - 2;
  if (v5 >= 2)
  {
    while (v20 <= v8 - 3)
    {
      unint64_t v21 = a2 + 4 * v5;
      int v22 = *(_DWORD *)(v21 - 8);
      if (v22 == *(_DWORD *)(v21 - 4) && v22 == *(_DWORD *)(a2 + 4 * v5)) {
        return 0;
      }
      unint64_t v20 = v5++ - 1;
    }
  }
  unint64_t v23 = 5;
  if (v8 >> 1 < 5) {
    unint64_t v23 = v8 >> 1;
  }
  if (v23 < 2) {
    return 1;
  }
  uint64_t v24 = a2 + 4 * v8;
  uint64_t v26 = *(void *)(v24 - 16);
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t result = v25 != v26;
  if (v23 != 2 && v25 != v26)
  {
    uint64_t v27 = *(void *)(v24 - 12) ^ *(void *)(v24 - 24) | (*(_DWORD *)(v24 - 4) ^ *(_DWORD *)(v24 - 16));
    uint64_t result = v27 != 0;
    if (v23 != 3)
    {
      if (v27)
      {
        uint64_t result = *(_OWORD *)(v24 - 16) != *(_OWORD *)(v24 - 32);
        if (v23 != 4 && *(_OWORD *)(v24 - 16) != *(_OWORD *)(v24 - 32))
        {
          uint64_t v28 = *(void *)(v24 - 20);
          uint64_t v29 = *(void *)(v24 - 12);
          uint64_t v30 = *(void *)(v24 - 40);
          uint64_t v31 = *(void *)(v24 - 32);
          uint64_t v32 = *(unsigned int *)(v24 - 4);
          uint64_t v33 = *(unsigned int *)(v24 - 24);
          return v28 != v30 || v29 != v31 || v32 != v33;
        }
      }
    }
  }
  return result;
}

uint64_t *sub_19E4CA8C0(uint64_t *result, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = result;
  uint64_t v6 = (uint64_t **)(result + 1);
  uint64_t v5 = result[1];
  if (!v5)
  {
    uint64_t v10 = result + 1;
    goto LABEL_25;
  }
  double v7 = *(double *)a2;
  unint64_t v8 = *(void *)(a2 + 120);
  unint64_t v9 = *(void *)(a2 + 128);
  do
  {
    while (1)
    {
      uint64_t v10 = (void *)v5;
      double v11 = *(double *)(v5 + 32);
      if (v7 == v11) {
        break;
      }
      if (v7 <= v11)
      {
        if (v11 <= v7) {
          return result;
        }
        goto LABEL_22;
      }
LABEL_3:
      uint64_t v5 = *v10;
      uint64_t v6 = (uint64_t **)v10;
      if (!*v10) {
        goto LABEL_25;
      }
    }
    unint64_t v12 = *(void *)(v5 + 152);
    if (v8 == v12)
    {
      unint64_t v13 = v10[20];
      if (v9 < v13) {
        goto LABEL_3;
      }
      BOOL v14 = v13 == v9;
      if (v13 >= v9) {
        char v15 = 1;
      }
      else {
        char v15 = -1;
      }
      if (v14) {
        char v15 = 0;
      }
      if ((v15 & 0x80) == 0) {
        return result;
      }
    }
    else
    {
      if (v8 < v12) {
        goto LABEL_3;
      }
      if (v12 >= v8) {
        char v16 = 1;
      }
      else {
        char v16 = -1;
      }
      if ((v16 & 0x80) == 0) {
        return result;
      }
    }
LABEL_22:
    uint64_t v5 = v10[1];
  }
  while (v5);
  uint64_t v6 = (uint64_t **)(v10 + 1);
LABEL_25:
  uint64_t v17 = operator new(0xA8uLL);
  long long v18 = *(_OWORD *)(a3 + 112);
  v17[8] = *(_OWORD *)(a3 + 96);
  v17[9] = v18;
  *((void *)v17 + 20) = *(void *)(a3 + 128);
  long long v19 = *(_OWORD *)(a3 + 48);
  v17[4] = *(_OWORD *)(a3 + 32);
  v17[5] = v19;
  long long v20 = *(_OWORD *)(a3 + 80);
  v17[6] = *(_OWORD *)(a3 + 64);
  v17[7] = v20;
  long long v21 = *(_OWORD *)(a3 + 16);
  void v17[2] = *(_OWORD *)a3;
  v17[3] = v21;
  *(void *)uint64_t v17 = 0;
  *((void *)v17 + 1) = 0;
  *((void *)v17 + 2) = v10;
  *uint64_t v6 = (uint64_t *)v17;
  uint64_t v22 = *(void *)*v4;
  if (v22)
  {
    uint64_t *v4 = v22;
    unint64_t v23 = *v6;
  }
  else
  {
    unint64_t v23 = (uint64_t *)v17;
  }
  uint64_t result = sub_19E37D324((uint64_t *)v4[1], v23);
  ++v4[2];
  return result;
}

void sub_19E4CA9F0(uint64_t a1)
{
  sub_19E4CAA28(a1);
  JUMPOUT(0x19F3BDCF0);
}

uint64_t sub_19E4CAA28(uint64_t a1)
{
  *(void *)a1 = &unk_1EF0BBDC0;
  uint64_t v2 = *(void **)(a1 + 192);
  if (v2)
  {
    *(void *)(a1 + 200) = v2;
    operator delete(v2);
  }
  sub_19E418864(*(void **)(a1 + 160));
  unint64_t v3 = *(void **)(a1 + 112);
  if (v3)
  {
    *(void *)(a1 + 120) = v3;
    operator delete(v3);
  }
  unint64_t v4 = *(void **)(a1 + 88);
  if (v4)
  {
    *(void *)(a1 + 96) = v4;
    operator delete(v4);
  }
  sub_19E4B88C8(a1 + 56);
  sub_19E4CAAF8(*(void **)(a1 + 32));
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return a1;
}

void sub_19E4CAAF8(void *a1)
{
  if (a1)
  {
    sub_19E4CAAF8(*a1);
    sub_19E4CAAF8(a1[1]);
    uint64_t v2 = (void *)a1[5];
    if (v2)
    {
      unint64_t v3 = (void *)a1[6];
      unint64_t v4 = (void *)a1[5];
      if (v3 != v2)
      {
        do
        {
          uint64_t v6 = *--v3;
          uint64_t v5 = v6;
          *unint64_t v3 = 0;
          if (v6) {
            (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
          }
        }
        while (v3 != v2);
        unint64_t v4 = (void *)a1[5];
      }
      a1[6] = v2;
      operator delete(v4);
    }
    operator delete(a1);
  }
}

uint64_t sub_19E4CABB4(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, __int16 a5, uint64_t a6, int a7, unint64_t a8)
{
  uint64_t v12 = (uint64_t)a1;
  *a1 = &unk_1EF0BBDC0;
  a1[1] = a2;
  v219 = a1 + 1;
  a1[2] = a3;
  if (a3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
  }
  a1[8] = 0;
  a1[7] = a1 + 8;
  a1[4] = 0;
  __n128 v223 = a1 + 4;
  a1[3] = a1 + 4;
  a1[5] = 0;
  a1[6] = 0;
  a1[9] = 0;
  unint64_t v13 = (char *)malloc_type_calloc(1uLL, 0x83CuLL, 0x105004056F6A631uLL);
  if (v13)
  {
    *((_OWORD *)v13 + 129) = 0u;
    *((_DWORD *)v13 + 520) = 1;
    *(void *)(v13 + 2084) = 0;
    *(void *)(v13 + 2092) = 64;
  }
  *(_OWORD *)(v12 + 88) = 0u;
  *(void *)(v12 + 160) = 0;
  uint64_t v232 = v12 + 160;
  *(void *)(v12 + 152) = v12 + 160;
  unint64_t v228 = (uint64_t *)(v12 + 152);
  *(void *)(v12 + 80) = v13;
  uint64_t v213 = v12 + 88;
  unint64_t v214 = (void **)(v12 + 112);
  *(void *)(v12 + 168) = 0;
  *(void *)(v12 + 176) = 0;
  *(_OWORD *)(v12 + 104) = 0u;
  *(_OWORD *)(v12 + 120) = 0u;
  *(_OWORD *)(v12 + 131) = 0u;
  *(void *)(v12 + 184) = a8;
  *(void *)(v12 + 192) = 0;
  *(void *)(v12 + 200) = 0;
  *(void *)(v12 + 208) = 0;
  *(void *)(v12 + 216) = a6;
  *(_DWORD *)(v12 + 2++*(_DWORD *)(result + 24) = a7;
  *(unsigned char *)(v12 + 228) = 0;
  *(_DWORD *)(v12 + 232) = 0;
  *(void *)(v12 + 240) = 0;
  if (a8) {
    sub_19E3F9C70(v12 + 192, a8);
  }
  if ((a5 & 0xFF00) != 0) {
    *(_WORD *)(v12 + 144) = a5;
  }
  uint64_t v236 = v12;
  if (a7 != 2)
  {
    uint64_t v224 = *(void *)(*v219 + 96);
    uint64_t v221 = *(void *)(*v219 + 104);
    if (v224 != v221)
    {
      unint64_t v14 = a4[1];
      do
      {
        if (v14 >= *(unsigned __int8 *)(v224 + 32)) {
          uint64_t v15 = *(unsigned __int8 *)(v224 + 32);
        }
        else {
          uint64_t v15 = a4[1];
        }
        if (v15)
        {
          do
          {
            if (v15 - 1 < v14) {
              operator new();
            }
            BOOL v50 = v15-- <= 1;
          }
          while (!v50);
        }
        v224 += 40;
      }
      while (v224 != v221);
    }
    sub_19E4CF0E8(v12, *(uint64_t **)(*(void *)(v12 + 8) + 296), a4[4], a4[5]);
    sub_19E4CF0E8(v12, *(uint64_t **)(*(void *)(v12 + 8) + 288), a4[6], a4[7]);
    if (a7 == 1) {
      goto LABEL_169;
    }
  }
  uint64_t v16 = 0;
  uint64_t v18 = *a4;
  uint64_t v17 = a4[1];
  long long v20 = (char *)a4[2];
  unint64_t v19 = a4[3];
  uint64_t v22 = a4[4];
  unint64_t v21 = a4[5];
  for (uint64_t i = (_DWORD *)*a4; ; ++i)
  {
    uint64_t v24 = v17 + v16;
    if (v17 + v16 != 1) {
      break;
    }
    if ((*i - 3) > 0x1F0) {
      goto LABEL_30;
    }
    unsigned int v25 = *i - 68;
    if (v25 <= 0x3C && ((0x7FFFFFFFFFFFFE0uLL >> v25) & 1) == 0) {
      goto LABEL_30;
    }
LABEL_23:
    --v16;
    v18 += 4;
  }
  if (!v24) {
    goto LABEL_32;
  }
LABEL_30:
  uint64_t v26 = *(void ***)(*v219 + 184);
  if (*(void *)(*v219 + 192) - (void)v26 == 16
    && sub_19E41566C(*v219, v18, v24, 4, 0, 2, 1, *v26))
  {
    goto LABEL_23;
  }
LABEL_32:
  unint64_t v27 = *(void *)(v236 + 216);
  if (v16 && (v27 & 4) != 0)
  {
    uint64_t v12 = v236;
    *(void *)(v236 + 136) = 0;
    goto LABEL_157;
  }
  unint64_t v225 = v21;
  uint64_t v226 = v22;
  unint64_t v28 = v17 + v16;
  *(void *)(v236 + 136) = v17 + v16;
  if (v19 >= v17 + v16) {
    uint64_t v29 = v17 + v16;
  }
  else {
    uint64_t v29 = v19;
  }
  char v233 = &v20[4 * v19];
  if (v21 >= v28) {
    unint64_t v30 = v28;
  }
  else {
    unint64_t v30 = v21;
  }
  uint64_t v222 = v30;
  uint64_t v31 = *(void **)(v236 + 8);
  uint64_t v32 = v31[33];
  char __src = v27;
  char v229 = i;
  if (v32
    && *(float *)(v31[29] + 204) > 0.0
    && ((uint64_t v33 = (v27 >> 3) & 1, v29 >= *(unsigned __int8 *)(v32 + 96) - 1)
      ? (uint64_t v34 = *(unsigned __int8 *)(v32 + 96) - 1)
      : (uint64_t v34 = v29),
        v34 >= v33))
  {
    do
    {
      if (v34 && v29) {
        operator new();
      }
      BOOL v50 = v34-- <= v33;
    }
    while (!v50);
    uint64_t v31 = (void *)*v219;
    uint64_t v35 = *(void *)(*v219 + 272);
    if (v35)
    {
LABEL_48:
      if (*(float *)(v31[29] + 248) > 0.0)
      {
        uint64_t v36 = (v27 >> 3) & 1;
        uint64_t v37 = v29 >= *(unsigned __int8 *)(v35 + 96) - 1 ? *(unsigned __int8 *)(v35 + 96) - 1 : v29;
        if (v37 >= v36)
        {
          do
          {
            if (v37 && v29) {
              operator new();
            }
            BOOL v50 = v37-- <= v36;
          }
          while (!v50);
        }
      }
    }
  }
  else
  {
    uint64_t v35 = v31[34];
    if (v35) {
      goto LABEL_48;
    }
  }
  long long v20 = &v233[-4 * v29];
  if (*(_DWORD *)(v236 + 224) == 2)
  {
    uint64_t v12 = v236;
    goto LABEL_157;
  }
  size_t v38 = (void *)*v219;
  int v39 = *(void ***)(*v219 + 128);
  size_t v40 = *(void ***)(*v219 + 136);
  int v220 = a7;
  if (v39 == v40)
  {
    unint64_t v41 = v27;
  }
  else
  {
    unint64_t v41 = v27;
    do
    {
      sub_19E4CF6F4(v236, *v39, v18, v28, (__src & 8) == 0);
      v39 += 2;
    }
    while (v39 != v40);
    size_t v38 = (void *)*v219;
  }
  unint64_t v42 = (char *)v38[19];
  int v234 = (char *)v38[20];
  if (v42 == v234) {
    goto LABEL_119;
  }
  int v230 = v20;
  uint64_t v43 = (v41 >> 3) & 1;
  while (2)
  {
    size_t v44 = *(void **)v42;
    if (*(_DWORD *)(*(void *)v42 + 48) == 5)
    {
      unint64_t v45 = (uint64_t)v28 >= v44[2] - 1 ? v44[2] - 1 : v28;
      if ((uint64_t)v45 >= v43)
      {
        do
        {
          long long v46 = (char **)(*(uint64_t (**)(void *, uint64_t, unint64_t, unint64_t, void, void))(*v44 + 24))(v44, v18, v28, v45, *(void *)(v236 + 216), *(void *)(v236 + 184));
          int v250 = v46;
          if (v46)
          {
            size_t v47 = (void *)*v223;
            if (!*v223) {
              goto LABEL_92;
            }
            uint64_t v48 = v223;
            do
            {
              unint64_t v49 = v47[4];
              BOOL v50 = v49 > v45;
              if (v49 <= v45) {
                size_t v51 = v47;
              }
              else {
                size_t v51 = v47 + 1;
              }
              if (!v50) {
                uint64_t v48 = v47;
              }
              size_t v47 = (void *)*v51;
            }
            while (*v51);
            if (v48 != v223 && v45 <= v48[4])
            {
              unsigned int v60 = (char ***)v48[6];
              if ((unint64_t)v60 >= v48[7])
              {
                BOOL v61 = sub_19E4CF9F8(v48 + 5, (uint64_t *)&v250);
              }
              else
              {
                int v250 = 0;
                *unsigned int v60 = v46;
                BOOL v61 = v60 + 1;
              }
              v48[6] = v61;
              double v68 = v250;
              if (!v250) {
                goto LABEL_80;
              }
            }
            else
            {
LABEL_92:
              __dst[0] = 0;
              __dst[1] = 0;
              __p[0] = 0;
              uint64_t v52 = sub_19E4CF9F8(__dst, (uint64_t *)&v250);
              __n128 v53 = (uint64_t **)v223;
              unint64_t v54 = (uint64_t *)*v223;
              __dst[1] = v52;
LABEL_94:
              uint64_t v55 = v53;
              if (v54)
              {
                while (1)
                {
                  __n128 v53 = (uint64_t **)v54;
                  unint64_t v56 = v54[4];
                  if (v45 > v56)
                  {
                    unint64_t v54 = *v53;
                    goto LABEL_94;
                  }
                  if (v56 <= v45) {
                    break;
                  }
                  unint64_t v54 = v53[1];
                  if (!v54)
                  {
                    uint64_t v55 = v53 + 1;
                    goto LABEL_99;
                  }
                }
                uint64_t v57 = v53;
              }
              else
              {
LABEL_99:
                uint64_t v57 = operator new(0x40uLL);
                v57[4] = v45;
                v57[5] = 0;
                v57[6] = 0;
                v57[7] = 0;
                *uint64_t v57 = 0;
                v57[1] = 0;
                v57[2] = v53;
                *uint64_t v55 = v57;
                uint64_t v58 = **(void **)(v236 + 24);
                uint64_t v59 = v57;
                if (v58)
                {
                  *(void *)(v236 + ++*(_DWORD *)(result + 24) = v58;
                  uint64_t v59 = *v55;
                }
                sub_19E37D324(*(uint64_t **)(v236 + 32), v59);
                ++*(void *)(v236 + 40);
              }
              uint64_t v63 = (void **)(v57 + 5);
              size_t v62 = (void *)v57[5];
              if (v62)
              {
                unsigned int v64 = (void *)v57[6];
                uint64_t v65 = (void *)v57[5];
                if (v64 != v62)
                {
                  do
                  {
                    uint64_t v67 = *--v64;
                    uint64_t v66 = v67;
                    void *v64 = 0;
                    if (v67) {
                      (*(void (**)(uint64_t))(*(void *)v66 + 8))(v66);
                    }
                  }
                  while (v64 != v62);
                  uint64_t v65 = *v63;
                }
                v57[6] = v62;
                operator delete(v65);
                *uint64_t v63 = 0;
                v57[6] = 0;
                v57[7] = 0;
              }
              *(_OWORD *)(v57 + 5) = *(_OWORD *)__dst;
              v57[7] = __p[0];
              double v68 = v250;
              if (!v250) {
                goto LABEL_80;
              }
            }
            (*((void (**)(char **))*v68 + 1))(v68);
          }
LABEL_80:
          BOOL v50 = (uint64_t)v45-- <= v43;
        }
        while (!v50);
      }
    }
    v42 += 8;
    if (v42 != v234) {
      continue;
    }
    break;
  }
  size_t v38 = (void *)*v219;
  LOBYTE(v41) = __src;
  long long v20 = v230;
LABEL_119:
  uint64_t v69 = v38[31];
  if (v69)
  {
    uint64_t v70 = v18;
    uint64_t v12 = v236;
    BOOL v71 = (char **)(*(uint64_t (**)(void, uint64_t, unint64_t, unint64_t, void, void))(**(void **)(v69 + 16) + 24))(*(void *)(v69 + 16), v70, v28, v28, *(void *)(v236 + 216), *(void *)(v236 + 184));
    a7 = v220;
    uint64_t i = v229;
    int v250 = v71;
    if (v71)
    {
      unint64_t v72 = (void *)*v223;
      if (!*v223) {
        goto LABEL_131;
      }
      double v73 = v223;
      do
      {
        unint64_t v74 = v72[4];
        BOOL v75 = v74 > v28;
        if (v74 <= v28) {
          uint64_t v76 = v72;
        }
        else {
          uint64_t v76 = v72 + 1;
        }
        if (!v75) {
          double v73 = v72;
        }
        unint64_t v72 = (void *)*v76;
      }
      while (*v76);
      if (v73 != v223 && v28 <= v73[4])
      {
        unsigned __int32 v85 = (char ***)v73[6];
        if ((unint64_t)v85 >= v73[7])
        {
          long long v86 = sub_19E4CF9F8(v73 + 5, (uint64_t *)&v250);
        }
        else
        {
          int v250 = 0;
          *unsigned __int32 v85 = v71;
          long long v86 = v85 + 1;
        }
        v73[6] = v86;
        uint64_t v93 = v250;
        if (v250) {
          goto LABEL_154;
        }
      }
      else
      {
LABEL_131:
        __dst[0] = 0;
        __dst[1] = 0;
        __p[0] = 0;
        uint64_t v77 = sub_19E4CF9F8(__dst, (uint64_t *)&v250);
        uint64_t v78 = (uint64_t **)v223;
        long long v79 = (uint64_t *)*v223;
        __dst[1] = v77;
LABEL_133:
        unint64_t v80 = v78;
        if (v79)
        {
          while (1)
          {
            uint64_t v78 = (uint64_t **)v79;
            unint64_t v81 = v79[4];
            if (v28 > v81)
            {
              long long v79 = *v78;
              goto LABEL_133;
            }
            if (v81 <= v28) {
              break;
            }
            long long v79 = v78[1];
            if (!v79)
            {
              unint64_t v80 = v78 + 1;
              goto LABEL_138;
            }
          }
          double v82 = v78;
        }
        else
        {
LABEL_138:
          double v82 = operator new(0x40uLL);
          v82[4] = v28;
          v82[5] = 0;
          v82[6] = 0;
          v82[7] = 0;
          *double v82 = 0;
          v82[1] = 0;
          v82[2] = v78;
          *unint64_t v80 = v82;
          uint64_t v83 = **(void **)(v236 + 24);
          unint64_t v84 = v82;
          if (v83)
          {
            *(void *)(v236 + ++*(_DWORD *)(result + 24) = v83;
            unint64_t v84 = *v80;
          }
          sub_19E37D324(*(uint64_t **)(v236 + 32), v84);
          ++*(void *)(v236 + 40);
        }
        long long v87 = (void **)(v82 + 5);
        long long v88 = (void *)v82[5];
        if (v88)
        {
          uint64_t v89 = (void *)v82[6];
          size_t v90 = (void *)v82[5];
          if (v89 != v88)
          {
            do
            {
              uint64_t v92 = *--v89;
              uint64_t v91 = v92;
              void *v89 = 0;
              if (v92) {
                (*(void (**)(uint64_t))(*(void *)v91 + 8))(v91);
              }
            }
            while (v89 != v88);
            size_t v90 = *v87;
          }
          v82[6] = v88;
          operator delete(v90);
          long long *v87 = 0;
          v82[6] = 0;
          v82[7] = 0;
          LOBYTE(v41) = __src;
        }
        *(_OWORD *)(v82 + 5) = *(_OWORD *)__dst;
        v82[7] = __p[0];
        uint64_t v93 = v250;
        if (v250) {
LABEL_154:
        }
          (*((void (**)(char **))*v93 + 1))(v93);
      }
    }
    uint64_t v94 = *(void **)(*(void *)(*v219 + 248) + 24);
    if (v94) {
      sub_19E4CF6F4(v236, v94, v226 + 4 * v225 - 4 * v222, v222, (v41 & 8) == 0);
    }
  }
  else
  {
    uint64_t v12 = v236;
    a7 = v220;
    uint64_t i = v229;
  }
LABEL_157:
  uint64_t v95 = *(void *)(v12 + 136);
  unint64_t v96 = *(void *)(v12 + 184) + v95;
  uint64_t v97 = *(void *)(v12 + 88);
  unint64_t v98 = (*(void *)(v12 + 96) - v97) >> 2;
  if (v96 <= v98)
  {
    if (v96 < v98) {
      *(void *)(v12 + 96) = v97 + 4 * v96;
    }
  }
  else
  {
    sub_19E3F9C70(v213, v96 - v98);
    uint64_t v95 = *(void *)(v12 + 136);
  }
  if (v95)
  {
    memmove(*(void **)(v12 + 88), i, 4 * v95);
    uint64_t v95 = *(void *)(v12 + 136);
  }
  unint64_t v99 = *(void *)(v12 + 184) + v95;
  uint64_t v100 = *(void *)(v12 + 112);
  unint64_t v101 = (*(void *)(v12 + 120) - v100) >> 2;
  if (v99 <= v101)
  {
    if (v99 < v101) {
      *(void *)(v12 + 120) = v100 + 4 * v99;
    }
  }
  else
  {
    sub_19E3F9C70((uint64_t)v214, v99 - v101);
    uint64_t v95 = *(void *)(v12 + 136);
  }
  if (v95) {
    memmove(*v214, v20, 4 * v95);
  }
LABEL_169:
  uint64_t v102 = v232;
  if (*(unsigned char *)(v12 + 228)) {
    uint64_t v102 = *v228;
  }
  *(void *)(v12 + 176) = v102;
  *(void *)(v12 + 48) = *(void *)(v12 + 24);
  if (a7 != 1 && (*(void *)(v12 + 216) & 0x20) == 0)
  {
    unsigned int v103 = *(void **)(*v219 + 64);
    char v215 = *(void **)(*v219 + 72);
    if (v103 != v215)
    {
      while (1)
      {
        unint64_t v104 = a4[1];
        size_t v217 = v103;
        char v218 = (std::mutex *)(*v103 + 8);
        std::mutex::lock(v218);
        if (v104)
        {
          if ((int)v104 >= 10) {
            int v105 = 10;
          }
          else {
            int v105 = v104;
          }
          unint64_t v106 = v104 - v105;
          unint64_t v107 = v104 - 3;
          if (v104 <= 2) {
            unint64_t v107 = 0;
          }
          if (v107 >= v106) {
            operator new();
          }
          __assert_rtn("prediction", "LMFstGrammar.cpp", 172, "end >= begin");
        }
        char v251 = 0;
        uint64_t v252 = 0;
        v254[0] = 0;
        v254[1] = 0;
        int v250 = &v251;
        char v253 = v254;
        std::mutex::unlock(v218);
        if (v252) {
          break;
        }
        sub_19E3C5DBC(v254[0]);
        sub_19E3C5DBC(v251);
        unsigned int v103 = v217 + 2;
        if (v217 + 2 == v215) {
          return v12;
        }
      }
      HIBYTE(__p[0]) = 11;
      strcpy((char *)__dst, "xMEDIANAMEx");
      if (v254 != (char **)sub_19E374C3C((uint64_t)&v253, (const void **)__dst))
      {
        *((unsigned char *)&v257.__r_.__value_.__s + 23) = 11;
        strcpy((char *)&v257, "xMEDIANAMEx");
        HIBYTE(__p[0]) = 0;
        LOBYTE(__dst[0]) = 0;
        __n128 v108 = sub_19E374C3C((uint64_t)&v253, (const void **)&v257.__r_.__value_.__l.__data_);
        if (v254 != (char **)v108 && v108 + 7 != (uint64_t *)__dst)
        {
          if (*((char *)v108 + 79) < 0)
          {
            sub_19E3C6C7C(__dst, (void *)v108[7], v108[8]);
          }
          else
          {
            *(_OWORD *)std::string __dst = *(_OWORD *)(v108 + 7);
            __p[0] = (void *)v108[9];
          }
        }
        *((unsigned char *)&v260.__r_.__value_.__s + 23) = 1;
        LOWORD(v260.__r_.__value_.__l.__data_) = 32;
        sub_19E439DAC((uint64_t)&v257, __dst, (unsigned __int8 *)&v260);
        if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v260.__r_.__value_.__l.__data_);
        }
        unint64_t v109 = (void *)*v219;
        uint64_t v110 = std::stoi((const std::string *)v257.__r_.__value_.__l.__data_, 0, 10);
        sub_19E3FDF08(v109, v110, (uint64_t)&v260);
        std::string::size_type v111 = v257.__r_.__value_.__r.__words[0];
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v257.__r_.__value_.__l.__size_ - v257.__r_.__value_.__r.__words[0]) >> 3) >= 2)
        {
          unint64_t v112 = 1;
          uint64_t v113 = 24;
          while (1)
          {
            long long v114 = (void *)*v219;
            uint64_t v115 = std::stoi((const std::string *)(v111 + v113), 0, 10);
            sub_19E3FDF08(v114, v115, (uint64_t)&v255);
            size_t v116 = v256 >= 0 ? HIBYTE(v256) : *((void *)&v255 + 1);
            uint64_t v117 = v256 >= 0 ? 22 : (v256 & 0x7FFFFFFFFFFFFFFFLL) - 1;
            if (v117 == v116)
            {
              if (v116 == 0x7FFFFFFFFFFFFFF6) {
                sub_19E37C958();
              }
              unint64_t v118 = v116 + 1;
              if (v256 >= 0) {
                float64x2x2_t v119 = &v255;
              }
              else {
                float64x2x2_t v119 = (long long *)v255;
              }
              size_t v120 = 0x7FFFFFFFFFFFFFF7;
              if (v116 < 0x3FFFFFFFFFFFFFF3)
              {
                unint64_t v121 = 2 * v116;
                if (v118 > 2 * v116) {
                  unint64_t v121 = v116 + 1;
                }
                if (v121 >= 0x17)
                {
                  unint64_t v127 = (v121 & 0xFFFFFFFFFFFFFFF8) + 8;
                  uint64_t v128 = v121 | 7;
                  if (v128 == 23) {
                    uint64_t v128 = v127;
                  }
                  size_t v120 = v128 + 1;
                }
                else
                {
                  size_t v120 = 23;
                }
              }
              int v129 = operator new(v120);
              long long v130 = v129;
              unsigned char *v129 = 32;
              if (!v116 || (memmove(v129 + 1, v119, v116), v116 != 22)) {
                operator delete(v119);
              }
              *((void *)&v255 + 1) = v116 + 1;
              int64_t v256 = v120 | 0x8000000000000000;
              *(void *)&long long v255 = v130;
              long long v126 = &v130[v118];
            }
            else
            {
              unint64_t v122 = v256 >= 0 ? (char *)&v255 : (char *)v255;
              if (v116)
              {
                BOOL v123 = v122 <= " " && &v122[v116] > " ";
                unint64_t v124 = v123 ? "" : " ";
                memmove(v122 + 1, v122, v116);
              }
              else
              {
                unint64_t v124 = " ";
              }
              char *v122 = *v124;
              size_t v125 = v116 + 1;
              if (SHIBYTE(v256) < 0) {
                *((void *)&v255 + 1) = v116 + 1;
              }
              else {
                HIBYTE(v256) = v125 & 0x7F;
              }
              long long v126 = &v122[v125];
            }
            char *v126 = 0;
            int64_t v259 = v256;
            long long v258 = v255;
            int64_t v256 = 0;
            long long v255 = 0uLL;
            int v131 = SHIBYTE(v259);
            char v235 = (void *)v258;
            uint64_t v132 = v259 >= 0 ? &v258 : (long long *)v258;
            size_t v133 = v259 >= 0 ? HIBYTE(v259) : *((void *)&v258 + 1);
            std::string::size_type v134 = (v260.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                 ? 22
                 : (v260.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
            size_t v135 = (v260.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                 ? HIBYTE(v260.__r_.__value_.__r.__words[2])
                 : v260.__r_.__value_.__l.__size_;
            if (v134 - v135 < v133) {
              break;
            }
            if (v133)
            {
              if ((v260.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                long long v140 = &v260;
              }
              else {
                long long v140 = (std::string *)v260.__r_.__value_.__r.__words[0];
              }
              memmove((char *)v140 + v135, v132, v133);
              size_t v141 = v135 + v133;
              if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0) {
                v260.__r_.__value_.__l.__size_ = v135 + v133;
              }
              else {
                *((unsigned char *)&v260.__r_.__value_.__s + 23) = v141 & 0x7F;
              }
              char v142 = (char *)v140 + v141;
LABEL_271:
              *char v142 = 0;
            }
            if (v131 < 0) {
              operator delete(v235);
            }
            if (SHIBYTE(v256) < 0) {
              operator delete((void *)v255);
            }
            ++v112;
            std::string::size_type v111 = v257.__r_.__value_.__r.__words[0];
            v113 += 24;
            if (0xAAAAAAAAAAAAAAABLL
               * ((uint64_t)(v257.__r_.__value_.__l.__size_ - v257.__r_.__value_.__r.__words[0]) >> 3) <= v112)
              goto LABEL_277;
          }
          unint64_t v136 = v135 + v133;
          if (0x7FFFFFFFFFFFFFF6 - v134 < v135 + v133 - v134) {
            sub_19E37C958();
          }
          long long v137 = &v260;
          if ((v260.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            long long v137 = (std::string *)v260.__r_.__value_.__r.__words[0];
          }
          char v231 = v137;
          size_t v138 = 0x7FFFFFFFFFFFFFF7;
          if (v134 < 0x3FFFFFFFFFFFFFF3)
          {
            unint64_t v139 = 2 * v134;
            if (v136 > 2 * v134) {
              unint64_t v139 = v135 + v133;
            }
            if (v139 >= 0x17)
            {
              unint64_t v143 = (v139 & 0xFFFFFFFFFFFFFFF8) + 8;
              uint64_t v144 = v139 | 7;
              if (v144 == 23) {
                uint64_t v144 = v143;
              }
              size_t v138 = v144 + 1;
            }
            else
            {
              size_t v138 = 23;
            }
          }
          uint64_t v145 = operator new(v138);
          std::string::size_type v146 = (std::string::size_type)v145;
          if (v135) {
            memmove(v145, v231, v135);
          }
          memcpy((void *)(v146 + v135), v132, v133);
          if (v134 != 22) {
            operator delete(v231);
          }
          v260.__r_.__value_.__l.__size_ = v135 + v133;
          v260.__r_.__value_.__r.__words[2] = v138 | 0x8000000000000000;
          v260.__r_.__value_.__r.__words[0] = v146;
          char v142 = (unsigned char *)(v146 + v136);
          uint64_t v12 = v236;
          goto LABEL_271;
        }
LABEL_277:
        HIBYTE(v259) = 11;
        strcpy((char *)&v258, "xMEDIANAMEx");
        unint64_t v147 = sub_19E3C6AF4((uint64_t **)&v253, (const void **)&v258, (uint64_t)&v258);
        int v148 = (void **)(v147 + 7);
        if (v147 + 7 != (uint64_t **)&v260)
        {
          if (*((char *)v147 + 79) < 0)
          {
            if ((v260.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              char v149 = &v260;
            }
            else {
              char v149 = (std::string *)v260.__r_.__value_.__r.__words[0];
            }
            if ((v260.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type size = HIBYTE(v260.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type size = v260.__r_.__value_.__l.__size_;
            }
            sub_19E3C6D44(v148, v149, size);
          }
          else
          {
            if ((*((unsigned char *)&v260.__r_.__value_.__s + 23) & 0x80) == 0)
            {
              *(_OWORD *)int v148 = *(_OWORD *)&v260.__r_.__value_.__l.__data_;
              v147[9] = (uint64_t *)v260.__r_.__value_.__r.__words[2];
              goto LABEL_291;
            }
            sub_19E3C6C7C(v148, v260.__r_.__value_.__l.__data_, v260.__r_.__value_.__l.__size_);
          }
        }
        if (SHIBYTE(v260.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v260.__r_.__value_.__l.__data_);
        }
LABEL_291:
        std::string::size_type v151 = v257.__r_.__value_.__r.__words[0];
        if (v257.__r_.__value_.__r.__words[0])
        {
          std::string::size_type v152 = v257.__r_.__value_.__l.__size_;
          char v153 = (void *)v257.__r_.__value_.__r.__words[0];
          if (v257.__r_.__value_.__l.__size_ != v257.__r_.__value_.__r.__words[0])
          {
            do
            {
              if (*(char *)(v152 - 1) < 0) {
                operator delete(*(void **)(v152 - 24));
              }
              v152 -= 24;
            }
            while (v152 != v151);
            char v153 = (void *)v257.__r_.__value_.__r.__words[0];
          }
          v257.__r_.__value_.__l.__size_ = v151;
          operator delete(v153);
        }
        if (SHIBYTE(__p[0]) < 0) {
          operator delete(__dst[0]);
        }
      }
      uint64_t v154 = *v219;
      unint64_t v155 = (void *)(*v219 + 376);
      char v156 = (void *)*v155;
      if (*v155)
      {
        uint64_t v157 = *v219 + 376;
        do
        {
          if (v156 + 4 >= &v250) {
            char v158 = v156;
          }
          else {
            char v158 = v156 + 1;
          }
          if (v156 + 4 >= &v250) {
            uint64_t v157 = (uint64_t)v156;
          }
          char v156 = (void *)*v158;
        }
        while (*v158);
        if ((void *)v157 != v155 && (unint64_t)&v250 >= v157 + 32)
        {
          unsigned int v159 = *(_DWORD *)(v157 + 80);
          goto LABEL_358;
        }
      }
      unsigned int v159 = *(_DWORD *)(v154 + 352);
      if (v159 >= *(_DWORD *)(v154 + 360))
      {
        unsigned int v159 = 0;
      }
      else
      {
        __dst[1] = 0;
        __p[0] = 0;
        __dst[0] = &__dst[1];
        sub_19E3C5B70((uint64_t *)__dst, v250, &v251);
        *(_OWORD *)v239 = 0uLL;
        __p[1] = v239;
        sub_19E3C5B70((uint64_t *)&__p[1], v253, v254);
        int v160 = *(_DWORD *)(v154 + 352);
        *(_DWORD *)&v239[16] = v160;
        uint64_t v161 = *(void **)(v154 + 376);
        char v162 = v155;
        if (*(void **)(v154 + 368) == v155) {
          goto LABEL_322;
        }
        if (v161)
        {
          char v163 = *(void **)(v154 + 376);
          do
          {
            char v162 = v163;
            char v163 = (void *)v163[1];
          }
          while (v163);
        }
        else
        {
          CFIndex v164 = v155;
          do
          {
            char v162 = (void *)v164[2];
            BOOL v165 = *v162 == (void)v164;
            CFIndex v164 = v162;
          }
          while (v165);
        }
        if (v162 + 4 < __dst)
        {
LABEL_322:
          unint64_t v166 = (uint64_t **)v155;
          if (!v161) {
            goto LABEL_331;
          }
          unint64_t v166 = (uint64_t **)(v162 + 1);
          if (!v162[1])
          {
            unint64_t v155 = v162;
            goto LABEL_331;
          }
        }
        else
        {
          unint64_t v166 = (uint64_t **)v155;
          if (v161)
          {
            while (1)
            {
              while (1)
              {
                unint64_t v155 = v161;
                char v167 = (void **)(v161 + 4);
                if (__dst >= v167) {
                  break;
                }
                uint64_t v161 = (void *)*v155;
                unint64_t v166 = (uint64_t **)v155;
                if (!*v155) {
                  goto LABEL_331;
                }
              }
              if (v167 >= __dst) {
                break;
              }
              unint64_t v166 = (uint64_t **)(v155 + 1);
              uint64_t v161 = (void *)v155[1];
              if (!v161) {
                goto LABEL_331;
              }
            }
          }
          else
          {
LABEL_331:
            int v168 = (uint64_t *)operator new(0x58uLL);
            char v169 = v168;
            char v171 = __dst[0];
            size_t v170 = __dst[1];
            v168[5] = (uint64_t)__dst[1];
            char v172 = (char *)(v168 + 5);
            v168[4] = (uint64_t)v171;
            CFStringRef v173 = __p[0];
            v168[6] = (uint64_t)__p[0];
            if (v173)
            {
              v170[2] = v172;
              __dst[0] = &__dst[1];
              __dst[1] = 0;
              __p[0] = 0;
            }
            else
            {
              v168[4] = (uint64_t)v172;
            }
            char v175 = __p[1];
            uint64_t v174 = *(void *)v239;
            v168[8] = *(void *)v239;
            char v176 = (char *)(v168 + 8);
            v168[7] = (uint64_t)v175;
            uint64_t v177 = *(void *)&v239[8];
            v168[9] = *(void *)&v239[8];
            if (v177)
            {
              *(void *)(v174 + 16) = v176;
              __p[1] = v239;
              *(_OWORD *)v239 = 0uLL;
            }
            else
            {
              v168[7] = (uint64_t)v176;
            }
            *((_DWORD *)v168 + 20) = v160;
            *int v168 = 0;
            v168[1] = 0;
            v168[2] = (uint64_t)v155;
            *unint64_t v166 = v168;
            uint64_t v178 = **(void **)(v154 + 368);
            if (v178)
            {
              *(void *)(v154 + 368) = v178;
              char v169 = *v166;
            }
            sub_19E37D324(*(uint64_t **)(v154 + 376), v169);
            ++*(void *)(v154 + 384);
          }
        }
        sub_19E3C5DBC(*(char **)v239);
        sub_19E3C5DBC((char *)__dst[1]);
        LODWORD(__dst[0]) = *(_DWORD *)(v154 + 352);
        __p[0] = 0;
        __p[1] = 0;
        __dst[1] = __p;
        sub_19E3C5B70((uint64_t *)&__dst[1], v250, &v251);
        *(void *)&v239[16] = 0;
        *(_OWORD *)v239 = (unint64_t)&v239[8];
        sub_19E3C5B70((uint64_t *)v239, v253, v254);
        v179 = *(uint64_t **)(v154 + 400);
        if (v179)
        {
          while (1)
          {
            while (1)
            {
              size_t v181 = (uint64_t **)v179;
              unsigned int v182 = *((_DWORD *)v179 + 8);
              if (LODWORD(__dst[0]) >= v182) {
                break;
              }
              v179 = *v181;
              char v180 = v181;
              if (!*v181) {
                goto LABEL_348;
              }
            }
            if (v182 >= LODWORD(__dst[0])) {
              break;
            }
            v179 = v181[1];
            if (!v179)
            {
              char v180 = v181 + 1;
              goto LABEL_348;
            }
          }
        }
        else
        {
          char v180 = (uint64_t **)(v154 + 400);
          size_t v181 = (uint64_t **)(v154 + 400);
LABEL_348:
          uint64_t v183 = (uint64_t *)operator new(0x58uLL);
          CFStringRef v184 = v183;
          int v185 = (int)__dst[0];
          char v187 = __dst[1];
          uint64_t v186 = __p[0];
          v183[6] = (uint64_t)__p[0];
          int v188 = (char *)(v183 + 6);
          *((_DWORD *)v183 + 8) = v185;
          v183[5] = (uint64_t)v187;
          char v189 = __p[1];
          v183[7] = (uint64_t)__p[1];
          if (v189)
          {
            v186[2] = v188;
            __dst[1] = __p;
            __p[0] = 0;
            __p[1] = 0;
          }
          else
          {
            v183[5] = (uint64_t)v188;
          }
          long long v190 = *(_OWORD *)v239;
          v183[9] = *(void *)&v239[8];
          char v191 = (char *)(v183 + 9);
          v183[8] = v190;
          uint64_t v192 = *(void *)&v239[16];
          v183[10] = *(void *)&v239[16];
          if (v192)
          {
            *(void *)(*((void *)&v190 + 1) + 16) = v191;
            *(void *)v239 = &v239[8];
            *(void *)&v239[8] = 0;
            *(void *)&v239[16] = 0;
          }
          else
          {
            v183[8] = (uint64_t)v191;
          }
          *uint64_t v183 = 0;
          v183[1] = 0;
          v183[2] = (uint64_t)v181;
          *char v180 = v183;
          uint64_t v193 = **(void **)(v154 + 392);
          if (v193)
          {
            *(void *)(v154 + 392) = v193;
            CFStringRef v184 = *v180;
          }
          sub_19E37D324(*(uint64_t **)(v154 + 400), v184);
          ++*(void *)(v154 + 408);
        }
        sub_19E3C5DBC(*(char **)&v239[8]);
        sub_19E3C5DBC((char *)__p[0]);
        ++*(_DWORD *)(v154 + 352);
      }
LABEL_358:
      *(_DWORD *)(v12 + 232) = v159;
      __p[0] = 0;
      LOWORD(__p[1]) = 0;
      v239[0] = 1;
      *(_OWORD *)&v239[8] = xmmword_19E572FD0;
      int v240 = 0;
      long long v241 = xmmword_19E572FD0;
      unint64_t v242 = 0xFFEFFFFFFFFFFFFFLL;
      uint64_t v244 = 0;
      uint64_t v245 = 0;
      uint64_t v243 = 0;
      __int16 v246 = 0;
      int v247 = 0;
      *(_OWORD *)std::string __dst = xmmword_19E573020;
      v194 = *(char **)(v12 + 192);
      unint64_t v195 = *(char **)(v12 + 200);
      uint64_t v196 = (v195 - v194) >> 2;
      uint64_t v248 = v196;
      uint64_t v249 = 1;
      unint64_t v197 = *(void *)(v12 + 208);
      if ((unint64_t)v195 >= v197)
      {
        unint64_t v199 = v196 + 1;
        if ((unint64_t)(v196 + 1) >> 62) {
          sub_19E37C7C4();
        }
        uint64_t v200 = v197 - (void)v194;
        if (v200 >> 1 > v199) {
          unint64_t v199 = v200 >> 1;
        }
        if ((unint64_t)v200 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v201 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v201 = v199;
        }
        if (v201)
        {
          if (v201 >> 62) {
            sub_19E37C2B8();
          }
          char v202 = operator new(4 * v201);
        }
        else
        {
          char v202 = 0;
        }
        uint64_t v203 = (unsigned int *)&v202[4 * v196];
        char v204 = &v202[4 * v201];
        unsigned int *v203 = v159;
        char v198 = v203 + 1;
        if (v195 != v194)
        {
          unint64_t v205 = v195 - v194 - 4;
          if (v205 < 0x2C) {
            goto LABEL_391;
          }
          if (v195 - v202 - ((v195 - v194) & 0xFFFFFFFFFFFFFFFCLL) < 0x20) {
            goto LABEL_391;
          }
          uint64_t v206 = (v205 >> 2) + 1;
          char v207 = &v202[4 * v196 - 16];
          size_t v208 = v195 - 16;
          uint64_t v209 = v206 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v210 = *(_OWORD *)v208;
            *(v207 - 1) = *((_OWORD *)v208 - 1);
            *char v207 = v210;
            v207 -= 2;
            v208 -= 32;
            v209 -= 8;
          }
          while (v209);
          v203 -= v206 & 0x7FFFFFFFFFFFFFF8;
          v195 -= 4 * (v206 & 0x7FFFFFFFFFFFFFF8);
          if (v206 != (v206 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_391:
            do
            {
              unsigned int v211 = *((_DWORD *)v195 - 1);
              v195 -= 4;
              *--uint64_t v203 = v211;
            }
            while (v195 != v194);
          }
        }
        *(void *)(v12 + 192) = v203;
        *(void *)(v12 + 200) = v198;
        *(void *)(v12 + 208) = v204;
        if (v194) {
          operator delete(v194);
        }
      }
      else
      {
        *(_DWORD *)unint64_t v195 = v159;
        char v198 = v195 + 4;
      }
      *(void *)(v12 + 200) = v198;
      sub_19E4CA8C0(v228, (uint64_t)__dst, (uint64_t)__dst);
      *(void *)(v12 + 176) = *(void *)(v12 + 152);
      *(unsigned char *)(v12 + 228) = 1;
      ++*(void *)(v12 + 240);
      sub_19E3C5DBC(v254[0]);
      sub_19E3C5DBC(v251);
    }
  }
  return v12;
}

void sub_19E4CEB8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::mutex *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void **a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void **a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void **a42,void *a43,void *a44,void *__p,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  if (a62) {
    (*(void (**)(uint64_t))(*(void *)a62 + 8))(a62);
  }
  uint64_t v63 = *a36;
  if (*a36)
  {
    a44[25] = v63;
    operator delete(v63);
  }
  sub_19E418864(*a42);
  unsigned int v64 = *a13;
  if (*a13)
  {
    a44[15] = v64;
    operator delete(v64);
  }
  uint64_t v65 = *a12;
  if (*a12)
  {
    a44[12] = v65;
    operator delete(v65);
  }
  sub_19E4B88C8(a35);
  sub_19E4CAAF8(*a30);
  sub_19E3D73EC(a24);
  _Unwind_Resume(a1);
}

void sub_19E4CF0E8(uint64_t a1, uint64_t *a2, uint64_t a3, unint64_t a4)
{
  if (!a2) {
    return;
  }
  unint64_t v5 = a4 >= 4 ? 4 : a4;
  if (!v5) {
    return;
  }
  unint64_t v9 = a4 - 1;
  if (v5 == 1)
  {
    if (*(unsigned char *)(a1 + 145))
    {
      if (*(unsigned char *)(a1 + 144)) {
        return;
      }
    }
    else
    {
      unsigned int v10 = *(_DWORD *)(a3 + 4 * v9);
      if (v10 != 1 && (sub_19E535AC0(v10, *(void *)(a1 + 8)) & 1) != 0) {
        return;
      }
    }
  }
  *(void *)size_t v40 = &stru_1EF0BEFF0;
  uint64_t v11 = sub_19E4A0258(a2, a3, a4, &stru_1EF0BEFF0, v5);
  CFRelease(&stru_1EF0BEFF0);
  if (v11)
  {
    char v12 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 16))(v11);
    uint64_t v13 = *(void *)v11;
    if (v12) {
      goto LABEL_44;
    }
    (*(void (**)(uint64_t))(v13 + 8))(v11);
  }
  if (v5 < 2) {
    return;
  }
  if (v5 == 2)
  {
    if (*(unsigned char *)(a1 + 145))
    {
      if (*(unsigned char *)(a1 + 144)) {
        return;
      }
    }
    else
    {
      unsigned int v14 = *(_DWORD *)(a3 + 4 * v9);
      if (v14 != 1 && (sub_19E535AC0(v14, *(void *)(a1 + 8)) & 1) != 0) {
        return;
      }
    }
  }
  unint64_t v39 = v5 - 2;
  *(void *)size_t v40 = &stru_1EF0BEFF0;
  uint64_t v11 = sub_19E4A0258(a2, a3, a4, &stru_1EF0BEFF0, v5 - 1);
  CFRelease(&stru_1EF0BEFF0);
  if (v11)
  {
    char v15 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 16))(v11);
    uint64_t v13 = *(void *)v11;
    if (v15) {
      goto LABEL_44;
    }
    (*(void (**)(uint64_t))(v13 + 8))(v11);
  }
  if (v5 - 1 < 2) {
    return;
  }
  if (v5 == 3)
  {
    if (*(unsigned char *)(a1 + 145))
    {
      if (*(unsigned char *)(a1 + 144)) {
        return;
      }
    }
    else
    {
      unsigned int v16 = *(_DWORD *)(a3 + 4 * v9);
      if (v16 != 1 && (sub_19E535AC0(v16, *(void *)(a1 + 8)) & 1) != 0) {
        return;
      }
    }
  }
  *(void *)size_t v40 = &stru_1EF0BEFF0;
  uint64_t v11 = sub_19E4A0258(a2, a3, a4, &stru_1EF0BEFF0, v39);
  CFRelease(&stru_1EF0BEFF0);
  if (v11)
  {
    char v17 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 16))(v11);
    uint64_t v13 = *(void *)v11;
    if (v17) {
      goto LABEL_44;
    }
    (*(void (**)(uint64_t))(v13 + 8))(v11);
  }
  if (v39 < 2) {
    return;
  }
  if (v5 == 4)
  {
    if (*(unsigned char *)(a1 + 145))
    {
      if (*(unsigned char *)(a1 + 144)) {
        return;
      }
    }
    else
    {
      unsigned int v18 = *(_DWORD *)(a3 + 4 * v9);
      if (v18 != 1 && (sub_19E535AC0(v18, *(void *)(a1 + 8)) & 1) != 0) {
        return;
      }
    }
  }
  uint64_t v19 = sub_19E4A01F4(a2, a3, a4, v5 - 3);
  if (!v19) {
    return;
  }
  uint64_t v11 = v19;
  char v20 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 16))(v19);
  uint64_t v13 = *(void *)v11;
  if ((v20 & 1) == 0)
  {
    size_t v38 = *(void (**)(uint64_t))(v13 + 8);
    v38(v11);
    return;
  }
LABEL_44:
  uint64_t v21 = *(void *)(a1 + 192);
  *(unsigned char *)(a1 + 228) = 1;
  *(int64x2_t *)size_t v40 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  *(void *)&v40[16] = 0;
  LOWORD(v41) = 0;
  BYTE8(v41) = 1;
  long long v42 = xmmword_19E572FD0;
  *(_DWORD *)uint64_t v43 = 0;
  *(_OWORD *)&v43[8] = xmmword_19E572FD0;
  HIDWORD(v45) = 0;
  *(void *)&v43[24] = 0xFFEFFFFFFFFFFFFFLL;
  long long v44 = 0uLL;
  *(void *)&long long v45 = 0;
  WORD4(v45) = 0;
  unint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(v13 + 24))(v11, v21, v40);
  sub_19E4B8940((uint64_t **)(a1 + 56), *(unsigned int **)(a1 + 192), v22, v23);
  uint64_t v24 = *(void *)v40;
  uint64_t v26 = (char **)(a1 + 160);
  unsigned int v25 = *(char **)(a1 + 160);
  if (v25)
  {
    while (1)
    {
      while (1)
      {
        unint64_t v27 = (char **)v25;
        double v28 = *((double *)v25 + 4);
        if (*(double *)v40 != v28) {
          break;
        }
        if (!*((void *)v25 + 19))
        {
          unint64_t v29 = *((void *)v25 + 20);
          if (v22 >= v29)
          {
            if (v29 >= v22) {
              goto LABEL_59;
            }
            goto LABEL_51;
          }
        }
LABEL_47:
        unsigned int v25 = *v27;
        uint64_t v26 = v27;
        if (!*v27) {
          goto LABEL_56;
        }
      }
      if (*(double *)v40 > v28) {
        goto LABEL_47;
      }
      if (v28 <= *(double *)v40) {
        goto LABEL_59;
      }
LABEL_51:
      unsigned int v25 = v27[1];
      if (!v25)
      {
        uint64_t v26 = v27 + 1;
        goto LABEL_56;
      }
    }
  }
  unint64_t v27 = (char **)(a1 + 160);
LABEL_56:
  unint64_t v30 = (char *)operator new(0xA8uLL);
  *((void *)v30 + 4) = v24;
  long long v31 = v42;
  *(_OWORD *)(v30 + 88) = *(_OWORD *)v43;
  long long v32 = v44;
  *(_OWORD *)(v30 + 104) = *(_OWORD *)&v43[16];
  *(_OWORD *)(v30 + 120) = v32;
  *(_OWORD *)(v30 + 136) = v45;
  long long v33 = v41;
  *(_OWORD *)(v30 + 40) = *(_OWORD *)&v40[8];
  *(_OWORD *)(v30 + 56) = v33;
  *(_OWORD *)(v30 + 72) = v31;
  *((void *)v30 + 19) = 0;
  *((void *)v30 + 20) = v22;
  *(void *)unint64_t v30 = 0;
  *((void *)v30 + 1) = 0;
  *((void *)v30 + 2) = v27;
  *uint64_t v26 = v30;
  uint64_t v34 = **(void **)(a1 + 152);
  if (v34)
  {
    *(void *)(a1 + 152) = v34;
    unint64_t v30 = *v26;
  }
  sub_19E37D324(*(uint64_t **)(a1 + 160), (uint64_t *)v30);
  ++*(void *)(a1 + 168);
LABEL_59:
  uint64_t v35 = *(void *)(a1 + 192);
  unint64_t v36 = *(void *)(a1 + 184) + v22;
  unint64_t v37 = (*(void *)(a1 + 200) - v35) >> 2;
  if (v36 <= v37)
  {
    if (v36 < v37) {
      *(void *)(a1 + 200) = v35 + 4 * v36;
    }
  }
  else
  {
    sub_19E3F9C70(a1 + 192, v36 - v37);
  }
  ++*(void *)(a1 + 240);
  (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
}

void sub_19E4CF698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3DCC24((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E4CF6F4(uint64_t result, void *a2, uint64_t a3, uint64_t a4, int a5)
{
  if (a4 >= a2[2] - 1) {
    unint64_t v5 = a2[2] - 1;
  }
  else {
    unint64_t v5 = a4;
  }
  uint64_t v6 = a5 ^ 1u;
  if ((uint64_t)v5 >= v6)
  {
    uint64_t v7 = a4;
    uint64_t v10 = result;
    uint64_t v11 = (void *)(result + 32);
    do
    {
      uint64_t result = (*(uint64_t (**)(void *, uint64_t, uint64_t, unint64_t, void, void))(*a2 + 24))(a2, a3, v7, v5, *(void *)(v10 + 216), *(void *)(v10 + 184));
      uint64_t v38 = result;
      if (result)
      {
        char v12 = (void *)*v11;
        if (!*v11) {
          goto LABEL_19;
        }
        uint64_t v13 = v11;
        do
        {
          unint64_t v14 = v12[4];
          BOOL v15 = v14 > v5;
          if (v14 <= v5) {
            unsigned int v16 = v12;
          }
          else {
            unsigned int v16 = v12 + 1;
          }
          if (!v15) {
            uint64_t v13 = v12;
          }
          char v12 = (void *)*v16;
        }
        while (*v16);
        if (v13 != v11 && v5 <= v13[4])
        {
          unsigned int v25 = (uint64_t *)v13[6];
          if ((unint64_t)v25 >= v13[7])
          {
            uint64_t v26 = sub_19E4CF9F8(v13 + 5, &v38);
          }
          else
          {
            uint64_t v38 = 0;
            uint64_t *v25 = result;
            uint64_t v26 = v25 + 1;
          }
          v13[6] = v26;
          uint64_t result = v38;
          if (!v38) {
            goto LABEL_7;
          }
        }
        else
        {
LABEL_19:
          long long v36 = 0uLL;
          uint64_t v37 = 0;
          char v17 = sub_19E4CF9F8(&v36, &v38);
          unsigned int v18 = (uint64_t *)*v11;
          *((void *)&v36 + 1) = v17;
          uint64_t v19 = (uint64_t **)v11;
          char v20 = (uint64_t **)v11;
          if (v18)
          {
            while (1)
            {
              while (1)
              {
                char v20 = (uint64_t **)v18;
                unint64_t v21 = v18[4];
                if (v5 <= v21) {
                  break;
                }
                unsigned int v18 = *v20;
                uint64_t v19 = v20;
                if (!*v20) {
                  goto LABEL_26;
                }
              }
              if (v21 <= v5) {
                break;
              }
              unsigned int v18 = v20[1];
              if (!v18)
              {
                uint64_t v19 = v20 + 1;
                goto LABEL_26;
              }
            }
            unint64_t v22 = v20;
          }
          else
          {
LABEL_26:
            unint64_t v22 = operator new(0x40uLL);
            v22[4] = v5;
            v22[5] = 0;
            v22[6] = 0;
            v22[7] = 0;
            *unint64_t v22 = 0;
            v22[1] = 0;
            v22[2] = v20;
            *uint64_t v19 = v22;
            uint64_t v23 = **(void **)(v10 + 24);
            uint64_t v24 = v22;
            if (v23)
            {
              *(void *)(v10 + ++*(_DWORD *)(result + 24) = v23;
              uint64_t v24 = *v19;
            }
            sub_19E37D324(*(uint64_t **)(v10 + 32), v24);
            ++*(void *)(v10 + 40);
          }
          unint64_t v27 = (void **)(v22 + 5);
          double v28 = (void *)v22[5];
          if (v28)
          {
            uint64_t v29 = v6;
            uint64_t v30 = a3;
            long long v31 = (void *)v22[6];
            long long v32 = (void *)v22[5];
            if (v31 != v28)
            {
              do
              {
                uint64_t v34 = *--v31;
                uint64_t v33 = v34;
                *long long v31 = 0;
                if (v34) {
                  (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
                }
              }
              while (v31 != v28);
              long long v32 = *v27;
            }
            v22[6] = v28;
            operator delete(v32);
            *unint64_t v27 = 0;
            v22[6] = 0;
            v22[7] = 0;
            a3 = v30;
            uint64_t v6 = v29;
            uint64_t v7 = a4;
          }
          *(_OWORD *)(v22 + 5) = v36;
          v22[7] = v37;
          uint64_t result = v38;
          if (!v38) {
            goto LABEL_7;
          }
        }
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
LABEL_7:
      BOOL v15 = (uint64_t)v5-- <= v6;
    }
    while (!v15);
  }
  return result;
}

void sub_19E4CF9AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 8))(a14);
  }
  _Unwind_Resume(exception_object);
}

void *sub_19E4CF9F8(void *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1] - *a1;
  uint64_t v3 = v2 >> 3;
  unint64_t v4 = (v2 >> 3) + 1;
  if (v4 >> 61) {
    sub_19E37C7C4();
  }
  uint64_t v7 = a1[2] - *a1;
  if (v7 >> 2 > v4) {
    unint64_t v4 = v7 >> 2;
  }
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v8 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v8 = v4;
  }
  if (v8)
  {
    if (v8 >> 61) {
      sub_19E37C2B8();
    }
    unint64_t v9 = (char *)operator new(8 * v8);
  }
  else
  {
    unint64_t v9 = 0;
  }
  uint64_t v10 = &v9[8 * v3];
  uint64_t v11 = &v9[8 * v8];
  uint64_t v12 = *a2;
  *a2 = 0;
  *(void *)uint64_t v10 = v12;
  uint64_t v13 = v10 + 8;
  unint64_t v14 = (char *)*a1;
  BOOL v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
    goto LABEL_25;
  }
  unint64_t v16 = (unint64_t)&v15[-*a1 - 8];
  if (v16 > 0x77
    && (&v15[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] >= v10 || &v9[v2 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] >= v15))
  {
    uint64_t v17 = (v16 >> 3) + 1;
    v10 -= 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    unsigned int v18 = v15 - 32;
    uint64_t v19 = &v9[8 * v3 - 16];
    uint64_t v20 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v22 = *(_OWORD *)v18;
      long long v21 = *((_OWORD *)v18 + 1);
      *(_OWORD *)unsigned int v18 = 0uLL;
      *((_OWORD *)v18 + 1) = 0uLL;
      v18 -= 32;
      *((_OWORD *)v19 - 1) = v22;
      *(_OWORD *)uint64_t v19 = v21;
      v19 -= 32;
      v20 -= 4;
    }
    while (v20);
    if (v17 == (v17 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_20;
    }
    v15 -= 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
  }
  do
  {
    uint64_t v23 = *((void *)v15 - 1);
    v15 -= 8;
    *(void *)BOOL v15 = 0;
    *((void *)v10 - 1) = v23;
    v10 -= 8;
  }
  while (v15 != v14);
LABEL_20:
  BOOL v15 = (char *)*a1;
  uint64_t v24 = (char *)a1[1];
  *a1 = v10;
  a1[1] = v13;
  a1[2] = v11;
  while (v24 != v15)
  {
    uint64_t v26 = *((void *)v24 - 1);
    v24 -= 8;
    uint64_t v25 = v26;
    *(void *)uint64_t v24 = 0;
    if (v26) {
      (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
    }
  }
LABEL_25:
  if (v15) {
    operator delete(v15);
  }
  return v13;
}

void *sub_19E4CFBA8(void *a1)
{
  uint64_t v2 = (void *)*a1;
  if (*a1)
  {
    uint64_t v3 = (void *)a1[1];
    unint64_t v4 = (void *)*a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *--v3;
        uint64_t v5 = v6;
        *uint64_t v3 = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        }
      }
      while (v3 != v2);
      unint64_t v4 = (void *)*a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_19E4CFC38()
{
}

void sub_19E4CFCAC(_Unwind_Exception *a1)
{
  MEMORY[0x19F3BDCF0](v1, 0x10D1C407BBEB345);
  _Unwind_Resume(a1);
}

void sub_19E4CFCD0()
{
}

void sub_19E4CFD44(_Unwind_Exception *a1)
{
  MEMORY[0x19F3BDCF0](v1, 0x10D1C407BBEB345);
  _Unwind_Resume(a1);
}

void sub_19E4CFD68(uint64_t a1)
{
  sub_19E49CB94((void *)(a1 - 120));
  JUMPOUT(0x19F3BDCF0);
}

void *sub_19E4CFDA4(uint64_t a1)
{
  return sub_19E49CB94((void *)(a1 - 120));
}

uint64_t sub_19E4CFDAC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 168))();
}

uint64_t sub_19E4CFDD4()
{
  return 6;
}

const char *sub_19E4CFDDC()
{
  return "cache";
}

void sub_19E4CFDE8(void *a1)
{
  sub_19E49CB94(a1);
  JUMPOUT(0x19F3BDCF0);
}

uint64_t sub_19E4CFE24(uint64_t a1, uint64_t a2, unint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  if (!a3) {
    return 0;
  }
  unint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  if (a3 >= v12) {
    unint64_t v13 = v12;
  }
  else {
    unint64_t v13 = a3;
  }
  if (a4 == 2 && a3 > v12) {
    goto LABEL_7;
  }
  if ((*(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(*(void *)a1 + 24))(a1, a2, v13, a5, a6))return 1; {
  switch(a4)
  }
  {
    case 1:
      if (!v13) {
        return 0;
      }
      unint64_t v18 = 2;
      do
      {
        uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(*(void *)a1 + 24))(a1, a2, v18 - 1, a5, a6);
        if (v16) {
          break;
        }
        BOOL v17 = v18++ > v13;
      }
      while (!v17);
      break;
    case 2:
LABEL_7:
      if (v13)
      {
        uint64_t v14 = a2 + 4 * a3 - 4;
        unint64_t v15 = 2;
        do
        {
          uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(*(void *)a1 + 24))(a1, v14, v15 - 1, a5, a6);
          if (v16) {
            break;
          }
          v14 -= 4;
          BOOL v17 = v15++ > v13;
        }
        while (!v17);
        return v16;
      }
      return 0;
    case 3:
      unint64_t v22 = v13 - 8;
      if (v13 <= 9) {
        unint64_t v22 = 1;
      }
      unint64_t v23 = v13 - 1;
      if (v22 >= v13 - 1) {
        return 0;
      }
      if (v13 <= 9) {
        uint64_t v24 = 9;
      }
      else {
        uint64_t v24 = v13;
      }
      do
      {
        uint64_t v25 = *(unsigned int *)(a2 - 32 + 4 * v24);
        uint64_t v26 = *(unsigned int *)(a2 + 4 * v23);
        unint64_t v27 = operator new(8uLL);
        *unint64_t v27 = v25 | (v26 << 32);
        uint64_t v16 = (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 24))(a1, v27, 2, a5, a6);
        operator delete(v27);
        if (v24 - 7 >= v23) {
          char v28 = 1;
        }
        else {
          char v28 = v16;
        }
        ++v24;
      }
      while ((v28 & 1) == 0);
      break;
    case 4:
      uint64_t v19 = 0;
      while (1)
      {
        unint64_t v20 = a3 - v19 >= v13 ? v13 : a3 - v19;
        if (v20) {
          break;
        }
LABEL_26:
        uint64_t v16 = 0;
        if (++v19 == a3) {
          return v16;
        }
      }
      uint64_t v21 = 1;
      while (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 24))(a1, a2 + 4 * v19, v21, a5, a6) & 1) == 0)
      {
        if (++v21 > v20) {
          goto LABEL_26;
        }
      }
      return 1;
    default:
      return 0;
  }
  return v16;
}

void sub_19E4D0104(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19E4D0118()
{
}

void sub_19E4D0144(int8x8_t *a1)
{
  int8x8_t v1 = a1[2];
  if (v1)
  {
    uint8x8_t v2 = (uint8x8_t)vcnt_s8(v1);
    v2.i16[0] = vaddlv_u8(v2);
    uint64_t v3 = *(void *)&v1 - 1;
    uint64_t v4 = *(void *)&v1 != 1;
    if (v2.u32[0] < 2uLL) {
      uint64_t v4 = (v1.i8[0] & 1) == 0;
    }
    uint64_t v5 = *(void **)(*(void *)&a1[1] + 8 * v4);
    if (v5)
    {
      uint64_t v6 = (void *)*v5;
      if (v6)
      {
        if (v2.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v7 = v6[1];
            if (v7 == 1)
            {
              if (v6[2] == 1) {
                goto LABEL_20;
              }
            }
            else if ((v7 & v3) != v4)
            {
              return;
            }
            uint64_t v6 = (void *)*v6;
            if (!v6) {
              return;
            }
          }
        }
        do
        {
          unint64_t v8 = v6[1];
          if (v8 == 1)
          {
            if (v6[2] == 1)
            {
LABEL_20:
              sub_19E512B48();
              return;
            }
          }
          else
          {
            if (v8 >= *(void *)&v1) {
              v8 %= *(void *)&v1;
            }
            if (v8 != v4) {
              return;
            }
          }
          uint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
    }
  }
}

int8x8_t *sub_19E4D0208@<X0>(int8x8_t *result@<X0>, void *a2@<X8>)
{
  v10[4] = *MEMORY[0x1E4F143B8];
  int8x8_t v2 = result[2];
  if (v2)
  {
    uint8x8_t v3 = (uint8x8_t)vcnt_s8(v2);
    v3.i16[0] = vaddlv_u8(v3);
    uint64_t v4 = *(void *)&v2 - 1;
    uint64_t v5 = *(void *)&v2 != 1;
    if (v3.u32[0] < 2uLL) {
      uint64_t v5 = (v2.i8[0] & 1) == 0;
    }
    uint64_t v6 = *(void **)(*(void *)&result[1] + 8 * v5);
    if (v6)
    {
      uint64_t v7 = (void *)*v6;
      if (v7)
      {
        if (v3.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v8 = v7[1];
            if (v8 == 1)
            {
              if (v7[2] == 1) {
                goto LABEL_20;
              }
            }
            else if ((v8 & v4) != v5)
            {
              goto LABEL_19;
            }
            uint64_t v7 = (void *)*v7;
            if (!v7) {
              goto LABEL_19;
            }
          }
        }
        do
        {
          unint64_t v9 = v7[1];
          if (v9 == 1)
          {
            if (v7[2] == 1)
            {
LABEL_20:
              v10[0] = &unk_1EF0BD668;
              v10[3] = v10;
              sub_19E51273C();
            }
          }
          else
          {
            if (v9 >= *(void *)&v2) {
              v9 %= *(void *)&v2;
            }
            if (v9 != v5) {
              break;
            }
          }
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_19:
  *a2 = 0;
  return result;
}

void sub_19E4D03B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13)
{
  if (a13 == &a10)
  {
    (*(void (**)(uint64_t *))(a10 + 32))(&a10);
    _Unwind_Resume(exception_object);
  }
  if (a13) {
    (*(void (**)(void))(*a13 + 40))();
  }
  _Unwind_Resume(exception_object);
}

void sub_19E4D0430(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  for (uint64_t i = *(void **)(a1 + 24); i; uint64_t i = (void *)*i)
  {
    uint64_t v4 = LXLexiconCopyEntryForTokenID();
    if (v4)
    {
      uint64_t v5 = (const void *)v4;
      CFStringRef v6 = (const __CFString *)LXEntryCopyString();
      CFRelease(v5);
      if (!v6) {
        continue;
      }
    }
    else
    {
      CFStringRef v6 = &stru_1EF0BEFF0;
    }
    CFIndex Length = CFStringGetLength(v6);
    if (Length) {
      sub_19E37774C(v6, (void *)a2);
    }
    CFRelease(v6);
    if (Length) {
      return;
    }
  }
  *(unsigned char *)(a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
}

void sub_19E4D04FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E420F7C((const void **)va);
  _Unwind_Resume(a1);
}

void sub_19E4D0514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

uint64_t sub_19E4D0528(uint64_t a1, const UInt8 *a2)
{
  uint8x8_t v3 = (void *)(a1 + 24);
  while (1)
  {
    uint8x8_t v3 = (void *)*v3;
    if (!v3) {
      break;
    }
    uint64_t result = sub_19E5124F8(v3[3], a2);
    if (result) {
      return result;
    }
  }
  return 0;
}

uint64_t sub_19E4D0570(uint64_t a1)
{
  int8x8_t v1 = (void *)(a1 + 24);
  while (1)
  {
    int8x8_t v1 = (void *)*v1;
    if (!v1) {
      break;
    }
    uint64_t v4 = 0;
    uint64_t v5 = &v4;
    int v7 = 0;
    uint64_t v6 = 0x2000000000;
    LXLexiconEnumerateEntriesForString();
    uint64_t v2 = *((unsigned int *)v5 + 6);
    _Block_object_dispose(&v4, 8);
    if (v2) {
      return v2;
    }
  }
  return 0;
}

void sub_19E4D0658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19E4D0670(void *a1)
{
  *a1 = &unk_1EF0BA320;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    do
    {
      uint64_t v4 = (void *)*v2;
      uint64_t v5 = (const void *)v2[3];
      if (v5) {
        CFRelease(v5);
      }
      operator delete(v2);
      uint64_t v2 = v4;
    }
    while (v4);
  }
  uint8x8_t v3 = (void *)a1[1];
  a1[1] = 0;
  if (v3) {
    operator delete(v3);
  }
  JUMPOUT(0x19F3BDCF0);
}

void *sub_19E4D0718(void *a1)
{
  *a1 = &unk_1EF0BA320;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    do
    {
      uint64_t v5 = (void *)*v2;
      uint64_t v6 = (const void *)v2[3];
      if (v6) {
        CFRelease(v6);
      }
      operator delete(v2);
      uint64_t v2 = v5;
    }
    while (v5);
  }
  uint8x8_t v3 = (void *)a1[1];
  a1[1] = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

void sub_19E4D07A0(uint64_t *a1, unint64_t a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (v2)
  {
    uint8x8_t v3 = (uint8x8_t)vcnt_s8(v2);
    v3.i16[0] = vaddlv_u8(v3);
    if (v3.u32[0] > 1uLL)
    {
      unint64_t v4 = a2;
      if (*(void *)&v2 <= a2) {
        unint64_t v4 = a2 % *(void *)&v2;
      }
    }
    else
    {
      unint64_t v4 = (*(void *)&v2 - 1) & a2;
    }
    uint64_t v5 = *a1;
    uint64_t v6 = *(uint64_t ***)(*a1 + 8 * v4);
    if (v6)
    {
      int v7 = *v6;
      if (*v6)
      {
        uint64_t v8 = *(void *)&v2 - 1;
        if (v3.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v9 = v7[1];
            if (v9 == a2)
            {
              if (v7[2] == a2) {
                goto LABEL_22;
              }
            }
            else if ((v9 & v8) != v4)
            {
              return;
            }
            int v7 = (uint64_t *)*v7;
            if (!v7) {
              return;
            }
          }
        }
        do
        {
          unint64_t v10 = v7[1];
          if (v10 == a2)
          {
            if (v7[2] == a2)
            {
LABEL_22:
              if (v3.u32[0] > 1uLL)
              {
                if (*(void *)&v2 <= a2) {
                  a2 %= *(void *)&v2;
                }
              }
              else
              {
                a2 &= v8;
              }
              uint64_t v11 = *(uint64_t **)(v5 + 8 * a2);
              do
              {
                unint64_t v12 = v11;
                uint64_t v11 = (uint64_t *)*v11;
              }
              while (v11 != v7);
              if (v12 == a1 + 2) {
                goto LABEL_39;
              }
              unint64_t v13 = v12[1];
              if (v3.u32[0] > 1uLL)
              {
                if (v13 >= *(void *)&v2) {
                  v13 %= *(void *)&v2;
                }
              }
              else
              {
                v13 &= v8;
              }
              if (v13 != a2)
              {
LABEL_39:
                if (!*v7) {
                  goto LABEL_40;
                }
                unint64_t v14 = *(void *)(*v7 + 8);
                if (v3.u32[0] > 1uLL)
                {
                  if (v14 >= *(void *)&v2) {
                    v14 %= *(void *)&v2;
                  }
                }
                else
                {
                  v14 &= v8;
                }
                if (v14 != a2) {
LABEL_40:
                }
                  *(void *)(v5 + 8 * a2) = 0;
              }
              uint64_t v15 = *v7;
              if (*v7)
              {
                unint64_t v16 = *(void *)(v15 + 8);
                if (v3.u32[0] > 1uLL)
                {
                  if (v16 >= *(void *)&v2) {
                    v16 %= *(void *)&v2;
                  }
                }
                else
                {
                  v16 &= v8;
                }
                if (v16 != a2)
                {
                  *(void *)(*a1 + 8 * v16) = v12;
                  uint64_t v15 = *v7;
                }
              }
              *unint64_t v12 = v15;
              uint64_t *v7 = 0;
              --a1[3];
              BOOL v17 = (const void *)v7[3];
              if (v17) {
                CFRelease(v17);
              }
              operator delete(v7);
              return;
            }
          }
          else
          {
            if (v10 >= *(void *)&v2) {
              v10 %= *(void *)&v2;
            }
            if (v10 != v4) {
              return;
            }
          }
          int v7 = (uint64_t *)*v7;
        }
        while (v7);
      }
    }
  }
}

uint64_t sub_19E4D09B0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32);
}

BOOL sub_19E4D09B8(uint64_t a1, unsigned int *a2, unsigned int a3, unsigned char *a4, int a5)
{
  __int16 v18 = 0;
  int v8 = sub_19E4B0FF0(*(uint64_t ***)(a1 + 24), a2, a3, &v18);
  if (*(unsigned char *)(a1 + 33))
  {
    char v9 = v18;
    int v10 = v18 & 0x7F;
    if (a4) {
      *a4 = v10;
    }
    int v11 = v9 & 0x80;
    BOOL v13 = (v10 & a5) != 0 || a5 == 0;
    if (v8) {
      BOOL v14 = 1;
    }
    else {
      BOOL v14 = v11 == 0;
    }
    return !v14 && v13;
  }
  else
  {
    char v16 = v18;
    if (a4) {
      *a4 = HIBYTE(v18);
    }
    return v16 && v8 == 0;
  }
}

void sub_19E4D0A54(void *a1)
{
  *a1 = &unk_1EF0B9E48;
  int8x8_t v2 = (uint64_t *)a1[3];
  if (v2)
  {
    uint64_t v3 = *v2;
    if (*v2)
    {
      uint64_t v4 = *(void *)(v3 + 24);
      if (v4)
      {
        sub_19E4AB828(v4 + 8);
        MEMORY[0x19F3BDCF0](v4, 0x1020C403F824CD1);
        if (*(void *)v3) {
          free(*(void **)v3);
        }
      }
      MEMORY[0x19F3BDCF0](v3, 0x1030C40FC63861FLL);
    }
    MEMORY[0x19F3BDCF0](v2, 0x20C4093837F09);
  }
  uint64_t v5 = (void *)a1[1];
  if (v5) {
    munmap(v5, a1[2]);
  }
  a1[2] = 0;
  JUMPOUT(0x19F3BDCF0);
}

void *sub_19E4D0B48(void *a1)
{
  *a1 = &unk_1EF0B9E48;
  int8x8_t v2 = (uint64_t *)a1[3];
  if (v2)
  {
    uint64_t v3 = *v2;
    if (*v2)
    {
      uint64_t v4 = *(void *)(v3 + 24);
      if (v4)
      {
        sub_19E4AB828(v4 + 8);
        MEMORY[0x19F3BDCF0](v4, 0x1020C403F824CD1);
        if (*(void *)v3) {
          free(*(void **)v3);
        }
      }
      MEMORY[0x19F3BDCF0](v3, 0x1030C40FC63861FLL);
    }
    MEMORY[0x19F3BDCF0](v2, 0x20C4093837F09);
  }
  uint64_t v5 = (void *)a1[1];
  if (v5) {
    munmap(v5, a1[2]);
  }
  a1[2] = 0;
  return a1;
}

unint64_t sub_19E4D0C1C(void *a1, unint64_t a2)
{
  unint64_t v3 = a1[1];
  unint64_t result = v3 - a2;
  if (v3 <= a2)
  {
    sub_19E393108((uint64_t)v12);
    sub_19E37CA70(v13, (uint64_t)"(file_size=", 11);
    uint64_t v6 = (void *)std::ostream::operator<<();
    sub_19E37CA70(v6, (uint64_t)", offset=", 9);
    int v7 = (void *)std::ostream::operator<<();
    sub_19E37CA70(v7, (uint64_t)")", 1);
    exception = __cxa_allocate_exception(0x10uLL);
    sub_19E43BFBC(&__dst, (uint64_t)v12);
    __n128 v9 = sub_19E420378(&v11, "attempted to read beyond the end of the mapped file ", &__dst);
    MEMORY[0x19F3BD7A0](exception, &v11, v9);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if ((uint64_t)(v3 - a2) < 0 || (v3 != a2 ? (BOOL v5 = *a1 == 0) : (BOOL v5 = 0), v5)) {
    sub_19E452FE8();
  }
  return result;
}

void sub_19E4D0D2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v23 & 1) == 0)
    {
LABEL_8:
      sub_19E3933E0((uint64_t)&a22);
      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void sub_19E4D0D9C(void *a1)
{
  *a1 = &unk_1EF0B9E48;
  sub_19E3C2CE4();
}

void sub_19E4D1160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v44 & 1) == 0)
    {
LABEL_8:
      a22 = *MEMORY[0x1E4FBA408];
      uint64_t v46 = *(void *)(MEMORY[0x1E4FBA408] + 72);
      *(uint64_t *)((char *)&a22 + *(void *)(a22 - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
      a24 = v46;
      a25 = MEMORY[0x1E4FBA470] + 16;
      if (a38 < 0) {
        operator delete(a33);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x19F3BDC30](&a41);
      if (*v42) {
        munmap(*v42, *(void *)(v41 + 16));
      }
      *(void *)(v41 + 16) = 0;
      _Unwind_Resume(a1);
    }
  }
  else if (!v44)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v43);
  goto LABEL_8;
}

void sub_19E4D133C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19E4D1334);
}

uint64_t sub_19E4D1360(uint64_t a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = (uint64_t)(a2[1] - *a2) >> 2;
  unint64_t v3 = *(void *)(a1 + 88);
  uint64_t v4 = v2 - v3;
  if (v2 <= v3) {
    __assert_rtn("_truncatedPriorContextLength", "MontrealLanguageModel.cpp", 49, "context.size() > m_forwardPassLimit");
  }
  int v7 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56));
  if (v4) {
    BOOL v8 = v7 == 2;
  }
  else {
    BOOL v8 = 0;
  }
  if (v8)
  {
    do
    {
      int v9 = *(_DWORD *)(*a2 + 4 * v4 - 4);
      (*(void (**)(unsigned char *__return_ptr))(**(void **)(a1 + 56) + 136))(v16);
      int v10 = (*(uint64_t (**)(void))(**(void **)v16 + 32))(*(void *)v16);
      std::string v11 = *(std::__shared_weak_count **)&v16[8];
      if (*(void *)&v16[8]
        && !atomic_fetch_add((atomic_ullong *volatile)(*(void *)&v16[8] + 8), 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      if ((v9 - 1) < 2 || v9 == v10) {
        break;
      }
      --v4;
    }
    while (v4);
  }
  if (qword_1E945A250 != -1) {
    dispatch_once(&qword_1E945A250, &unk_1EF0BEDA0);
  }
  BOOL v13 = qword_1E945A248;
  if (os_log_type_enabled((os_log_t)qword_1E945A248, OS_LOG_TYPE_INFO))
  {
    uint64_t v14 = (uint64_t)(a2[1] - *a2) >> 2;
    *(_DWORD *)char v16 = 134218496;
    *(void *)&v16[4] = v14 - v4;
    *(_WORD *)&v16[12] = 2048;
    *(void *)&v16[14] = v14;
    __int16 v17 = 2048;
    uint64_t v18 = v4;
    _os_log_impl(&dword_19E36B000, v13, OS_LOG_TYPE_INFO, "limiting forward passes to %ld, with contextLength=%zu and priorContextLength=%zu", v16, 0x20u);
  }
  return v4;
}

void sub_19E4D159C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

os_log_t sub_19E4D15B4()
{
  os_log_t result = os_log_create("com.apple.LanguageModeling", "MontrealLanguageModel");
  qword_1E945A248 = (uint64_t)result;
  return result;
}

unint64_t sub_19E4D15E4(unint64_t a1, int a2)
{
  unint64_t v2 = a1;
  switch(a2)
  {
    case 4:
      unint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 112))(*(void *)(a1 + 56));
      unint64_t v2 = HIDWORD(v3);
      break;
    case 3:
      unint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 104))(*(void *)(a1 + 56));
      unint64_t v2 = HIDWORD(v3);
      break;
    case 2:
      unint64_t v3 = (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 96))(*(void *)(a1 + 56));
      unint64_t v2 = HIDWORD(v3);
      break;
    default:
      LODWORD(v3) = 0;
      LODWORD(v2) = *(_DWORD *)(v2 + 96) - 1;
      break;
  }
  return v3 | ((unint64_t)v2 << 32);
}

BOOL sub_19E4D16B4(uint64_t a1, void *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*a2 + 4 * a3);
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 56) + 136))(&v8);
  int v4 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 32))(v8);
  BOOL v5 = v9;
  if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return (v3 - 1) < 2 || v3 == v4;
}

void sub_19E4D1798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_19E4D17AC(uint64_t a1, uint64_t *a2, uint64_t a3, void *a4)
{
  uint64_t v7 = *a2;
  uint64_t v8 = (a2[1] - *a2) >> 2;
  unint64_t v9 = v8 - a3;
  unint64_t v48 = *(void *)(a1 + 88);
  if (v8 - a3 <= v48)
  {
    uint64_t v10 = a3;
    unint64_t v49 = v8 - a3;
  }
  else
  {
    uint64_t v10 = sub_19E4D1360(a1, a2);
    uint64_t v7 = *a2;
    uint64_t v8 = (a2[1] - *a2) >> 2;
    unint64_t v49 = v8 - v10;
  }
  uint64_t v11 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8), v7, v10);
  if (v8 != v10)
  {
    uint64_t v14 = v11;
    unint64_t v47 = v9;
    BOOL v12 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = v7 + 4 * v10;
    uint64_t v17 = v10 + 1;
    while (1)
    {
      ++*a4;
      uint64_t v18 = *(void *)(a1 + 56);
      uint64_t v19 = *(unsigned int *)(v16 + 4 * v15);
      if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v18 + 64))(v18, v19))
      {
        uint64_t v20 = 3;
      }
      else if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v18 + 72))(v18, v19))
      {
        uint64_t v20 = 4;
      }
      else
      {
        uint64_t v20 = (*(unsigned int (**)(uint64_t))(*(void *)v18 + 16))(v18) == 2 ? 0 : 5;
      }
      (*(void (**)(void **__return_ptr))(**(void **)(a1 + 56) + 120))(__p);
      uint64_t v21 = (*(uint64_t (**)(void, uint64_t, void, uint64_t))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40), v14, *(unsigned int *)(v16 + 4 * v15), v20);
      uint64_t v23 = v22;
      if (v22) {
        break;
      }
LABEL_40:
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (v23)
      {
        BOOL v12 = ++v15 >= v49;
        if (v15 != v49) {
          continue;
        }
      }
      return v12;
    }
    uint64_t v24 = *(float16x8_t **)(a1 + 16);
    if (v22 != (uint64_t)(*(void *)(a1 + 24) - (void)v24) >> 1) {
      __assert_rtn("compressOutputLayer", "NeuralNetworkUtils.hpp", 84, "uncompressed.size() == compressed.size() && \"mismatched output layer sizes\"");
    }
    unint64_t v25 = (v22 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    if (v25 >= 0xF)
    {
      uint64_t v27 = (v25 + 1) & 0x7FFFFFFFFFFFFFF0;
      char v28 = (float32x4_t *)(v21 + 32);
      uint64_t v29 = v24 + 1;
      uint64_t v30 = v27;
      do
      {
        float32x4_t v32 = v28[-2];
        float32x4_t v31 = v28[-1];
        float32x4_t v34 = *v28;
        float32x4_t v33 = v28[1];
        v28 += 4;
        v29[-1] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v32), v31);
        *uint64_t v29 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(v34), v33);
        v29 += 2;
        v30 -= 16;
      }
      while (v30);
      if (v25 + 1 == v27)
      {
LABEL_24:
        (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 40) + 32))(&v52);
        uint64_t v14 = v52;
        if (v47 <= v48) {
          uint64_t v41 = *a2;
        }
        else {
          uint64_t v41 = v16;
        }
        if (v47 > v48) {
          uint64_t v42 = v15 + 1;
        }
        else {
          uint64_t v42 = v17 + v15;
        }
        uint64_t v51 = v52;
        uint64_t v52 = 0;
        char v43 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t *))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), v41, v42, &v51);
        uint64_t v44 = v51;
        uint64_t v51 = 0;
        if (v44) {
          (*(void (**)(uint64_t))(*(void *)v44 + 8))(v44);
        }
        if ((v43 & 1) == 0)
        {
          if (qword_1E945A250 != -1) {
            dispatch_once(&qword_1E945A250, &unk_1EF0BEDA0);
          }
          long long v45 = qword_1E945A248;
          if (os_log_type_enabled((os_log_t)qword_1E945A248, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)std::string buf = 0;
            _os_log_impl(&dword_19E36B000, v45, OS_LOG_TYPE_INFO, "failed to insert montreal state into the cache", buf, 2u);
          }
          uint64_t v14 = 0;
        }
        uint64_t v46 = v52;
        uint64_t v52 = 0;
        if (v46) {
          (*(void (**)(uint64_t))(*(void *)v46 + 8))(v46);
        }
        goto LABEL_40;
      }
      uint64_t v24 = (float16x8_t *)((char *)v24 + 2 * v27);
      uint64_t v26 = (int *)(v21 + 4 * v27);
    }
    else
    {
      uint64_t v26 = (int *)v21;
    }
    do
    {
      int v35 = *v26++;
      _S0 = v35;
      __asm { FCVT            H0, S0 }
      v24->i16[0] = _S0;
      uint64_t v24 = (float16x8_t *)((char *)v24 + 2);
    }
    while (v26 != (int *)(v21 + 4 * v22));
    goto LABEL_24;
  }
  return 1;
}

void sub_19E4D1C14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (a14) {
    (*(void (**)(uint64_t))(*(void *)a14 + 8))(a14);
  }
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 8))(a15);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E4D1CA0()
{
  return 0;
}

uint64_t sub_19E4D1CA8()
{
  return 0;
}

void sub_19E4D1CB0(void *a1)
{
  sub_19E438D34(a1);
  JUMPOUT(0x19F3BDCF0);
}

uint64_t sub_19E4D1CEC(uint64_t a1, uint64_t a2)
{
  sub_19E371C70(__p, (const UInt8 *)a2);
  int v17 = *(_DWORD *)(a2 + 24);
  unint64_t v4 = *(void *)(a1 + 32);
  if (v4 >= *(void *)(a1 + 40))
  {
    uint64_t v6 = sub_19E3DB868((void **)(a1 + 24), (uint64_t)__p);
    int v7 = SHIBYTE(v16);
    *(void *)(a1 + 32) = v6;
    if (v7 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    long long v5 = *(_OWORD *)__p;
    *(void *)(v4 + 16) = v16;
    *(_OWORD *)unint64_t v4 = v5;
    __p[1] = 0;
    uint64_t v16 = 0;
    __p[0] = 0;
    *(_DWORD *)(v4 + ++*(_DWORD *)(result + 24) = v17;
    *(void *)(a1 + 32) = v4 + 32;
  }
  sub_19E371C70(__p, (const UInt8 *)a2);
  int v17 = *(_DWORD *)(a2 + 24);
  unint64_t v8 = *(void *)(a1 + 56);
  if (v8 >= *(void *)(a1 + 64))
  {
    uint64_t v10 = sub_19E3DB868((void **)(a1 + 48), (uint64_t)__p);
    int v11 = SHIBYTE(v16);
    *(void *)(a1 + 56) = v10;
    if (v11 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    long long v9 = *(_OWORD *)__p;
    *(void *)(v8 + 16) = v16;
    *(_OWORD *)unint64_t v8 = v9;
    __p[1] = 0;
    uint64_t v16 = 0;
    __p[0] = 0;
    *(_DWORD *)(v8 + ++*(_DWORD *)(result + 24) = v17;
    *(void *)(a1 + 56) = v8 + 32;
  }
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12 >= *(void *)(a1 + 16))
  {
    uint64_t result = sub_19E3F94FC((char **)a1, a2);
  }
  else
  {
    if (*(char *)(a2 + 23) < 0)
    {
      sub_19E39369C(*(unsigned char **)(a1 + 8), *(void **)a2, *(void *)(a2 + 8));
    }
    else
    {
      long long v13 = *(_OWORD *)a2;
      *(void *)(v12 + 16) = *(void *)(a2 + 16);
      *(_OWORD *)unint64_t v12 = v13;
    }
    *(_DWORD *)(v12 + ++*(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 24);
    uint64_t result = v12 + 32;
    *(void *)(a1 + 8) = v12 + 32;
  }
  *(void *)(a1 + 8) = result;
  return result;
}

void sub_19E4D1E4C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_19E4D1E54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E4D1E74(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(a1 + 136);
  uint64_t v5 = *(void *)(a1 + 144);
  unint64_t v4 = (void ***)(a1 + 136);
  while (v5 != v6)
  {
    if (*(char *)(v5 - 9) < 0) {
      operator delete(*(void **)(v5 - 32));
    }
    v5 -= 32;
  }
  uint64_t v7 = *(void *)(a1 + 160);
  *(void *)(a1 + 144) = v6;
  for (uint64_t i = *(void *)(a1 + 168); i != v7; i -= 32)
  {
    if (*(char *)(i - 9) < 0) {
      operator delete(*(void **)(i - 32));
    }
  }
  *(void *)(a1 + 168) = v7;
  if (v4 != (void ***)a2) {
    sub_19E44A9C4(v4, *(void ***)a2, *(char **)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 5);
  }
  if (a1 + 160 != a2)
  {
    long long v9 = *(void ***)a2;
    uint64_t v10 = *(char **)(a2 + 8);
    unint64_t v11 = (uint64_t)&v10[-*(void *)a2] >> 5;
    sub_19E44A9C4((void ***)(a1 + 160), v9, v10, v11);
  }
}

unsigned char *sub_19E4D1F64(unsigned char *__dst, void *a2)
{
  uint64_t v2 = __dst;
  uint64_t v3 = a2[3];
  uint64_t v4 = a2[4] - v3;
  if ((unint64_t)v4 < 0x21)
  {
    uint64_t v8 = a2[18];
    if (a2[17] == v8) {
      __assert_rtn("lastToken", "CompletionStemImpl.cpp", 137, "false");
    }
    if (*(char *)(v8 - 9) < 0)
    {
      std::string __dst = sub_19E39369C(__dst, *(void **)(v8 - 32), *(void *)(v8 - 24));
    }
    else
    {
      long long v9 = *(_OWORD *)(v8 - 32);
      *((void *)__dst + 2) = *(void *)(v8 - 16);
      *(_OWORD *)std::string __dst = v9;
    }
    uint64_t v10 = (_DWORD *)(v8 - 8);
  }
  else
  {
    uint64_t v5 = (v4 >> 5) - 2;
    uint64_t v6 = (long long *)(v3 + 32 * v5);
    if (*((char *)v6 + 23) < 0)
    {
      std::string __dst = sub_19E39369C(__dst, *(void **)v6, *((void *)v6 + 1));
    }
    else
    {
      long long v7 = *v6;
      *((void *)__dst + 2) = *((void *)v6 + 2);
      *(_OWORD *)std::string __dst = v7;
    }
    uint64_t v10 = (_DWORD *)(v3 + 32 * v5 + 24);
  }
  v2[6] = *v10;
  return __dst;
}

void sub_19E4D2048(std::string *this, const void **a2, const void **a3)
{
  *((unsigned char *)&this->__r_.__value_.__s + 23) = 0;
  this->__r_.__value_.__s.__data_[0] = 0;
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    while (1)
    {
      int v6 = *((char *)v4 + 23);
      if (v6 >= 0) {
        size_t v7 = *((unsigned __int8 *)v4 + 23);
      }
      else {
        size_t v7 = (size_t)v4[1];
      }
      unint64_t v8 = v7 + 1;
      if (v7 + 1 >= 0x7FFFFFFFFFFFFFF8) {
        sub_19E37C958();
      }
      if (v8 >= 0x17) {
        break;
      }
      std::string::size_type v16 = 0;
      int64_t v17 = 0;
      std::string __dst = 0;
      p_dst = (void **)&__dst;
      HIBYTE(v17) = v7 + 1;
      if (v7) {
        goto LABEL_14;
      }
LABEL_18:
      *(_WORD *)((char *)p_dst + v7) = 32;
      if (v17 >= 0) {
        long long v13 = (const std::string::value_type *)&__dst;
      }
      else {
        long long v13 = (const std::string::value_type *)__dst;
      }
      if (v17 >= 0) {
        std::string::size_type v14 = HIBYTE(v17);
      }
      else {
        std::string::size_type v14 = v16;
      }
      std::string::append(this, v13, v14);
      if (SHIBYTE(v17) < 0) {
        operator delete(__dst);
      }
      v4 += 4;
      if (v4 == a3) {
        return;
      }
    }
    uint64_t v10 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17) {
      uint64_t v10 = v8 | 7;
    }
    uint64_t v11 = v10 + 1;
    p_dst = (void **)operator new(v10 + 1);
    std::string::size_type v16 = v7 + 1;
    int64_t v17 = v11 | 0x8000000000000000;
    std::string __dst = p_dst;
LABEL_14:
    if (v6 >= 0) {
      unint64_t v12 = v4;
    }
    else {
      unint64_t v12 = *v4;
    }
    memmove(p_dst, v12, v7);
    goto LABEL_18;
  }
}

void sub_19E4D2198()
{
  RootCursor = (const void *)LXLexiconCreateRootCursor();
  uint64_t v1 = (const void *)LXCursorCreateByAdvancing();
  LXCursorEnumerateEntriesRecursively();
  if (v1) {
    CFRelease(v1);
  }
  if (RootCursor) {
    CFRelease(RootCursor);
  }
}

void sub_19E4D2254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_19E421014((const void **)va);
  sub_19E421014((const void **)(v7 - 40));
  _Unwind_Resume(a1);
}

void sub_19E4D2278(uint64_t a1)
{
  uint64_t v2 = (const void *)LXEntryCopyString();
  uint64_t v3 = *(void *)(a1 + 32);
  LXEntryGetProbability();
  uint64_t v7 = v2;
  uint64_t v6 = v4;
  uint64_t v5 = *(void *)(v3 + 24);
  if (!v5) {
    sub_19E3ACB9C();
  }
  (*(void (**)(uint64_t, const void **, uint64_t *))(*(void *)v5 + 48))(v5, &v7, &v6);
  if (v2) {
    CFRelease(v2);
  }
}

void sub_19E4D231C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E3DCC24((const void **)va);
  _Unwind_Resume(a1);
}

void sub_19E4D2330(uint64_t a1, uint64_t a2, uint64_t a3, const void **a4, int a5)
{
  uint64_t v374 = *MEMORY[0x1E4F143B8];
  CFStringRef v8 = (const __CFString *)MEMORY[0x19F3BCDE0](*(void *)(a2 + 8));
  if (v8)
  {
    CFStringRef v9 = v8;
    CFRetain(v8);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v9;
    CFTypeID v10 = CFGetTypeID(v9);
    if (v10 != CFStringGetTypeID())
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x19F3BD790](exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    CFTypeID TypeID = CFStringGetTypeID();
    if (TypeID == CFGetTypeID(v9))
    {
      sub_19E3721DC((void *)a1, v9);
      CFRelease(v9);
      *(_OWORD *)(a1 + ++*(_DWORD *)(result + 24) = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
      *(_OWORD *)(a1 + 56) = 0u;
      *(_OWORD *)(a1 + 72) = 0u;
      *(_OWORD *)(a1 + 88) = 0u;
      sub_19E432C84((char **)&v361, *(CFTypeRef *)a2, 46);
      *((unsigned char *)&theDict.__r_.__value_.__s + 23) = 20;
      strcpy((char *)&theDict, "CoreLM configuration");
      uint64_t v345 = a1;
      if (v361 == v362)
      {
        v319 = __cxa_allocate_exception(0x20uLL);
        std::operator+<char>();
        sub_19E48B618(&__p, &__dst, " resource");
        sub_19E3F5604(v319, (long long *)&__p);
        __cxa_throw(v319, (struct type_info *)&unk_1EF0B7540, (void (*)(void *))sub_19E3F56B0);
      }
      if ((char *)v362 - (unsigned char *)v361 != 16)
      {
        sub_19E393108((uint64_t)&__p);
        v320 = sub_19E37CA70(&__p.__r_.__value_.__r.__words[2], (uint64_t)"Duplicate ", 10);
        if ((theDict.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_std::string theDict = &theDict;
        }
        else {
          p_std::string theDict = (std::string *)theDict.__r_.__value_.__r.__words[0];
        }
        if ((theDict.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(theDict.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = theDict.__r_.__value_.__l.__size_;
        }
        v323 = sub_19E37CA70(v320, (uint64_t)p_theDict, size);
        sub_19E37CA70(v323, (uint64_t)" resources:", 11);
        v324 = (CFDictionaryRef **)v361;
        v325 = v362;
        if (v361 != v362)
        {
          do
          {
            v330 = sub_19E37CA70(&__p.__r_.__value_.__r.__words[2], (uint64_t)" '", 2);
            CFStringRef Value = CFDictionaryGetValue(**v324, @"URL");
            sub_19E524A24(&cf, Value);
            v332 = (CFURLRef *)sub_19E524A80(&cf);
            CFStringRef v333 = CFURLCopyPath(*v332);
            sub_19E372124(v368, v333);
            v334 = (const __CFString **)sub_19E524AE8(v368);
            sub_19E524B50(&__dst, *v334);
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              p_dst = &__dst;
            }
            else {
              p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
            }
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v336 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v336 = __dst.__r_.__value_.__l.__size_;
            }
            v337 = sub_19E37CA70(v330, (uint64_t)p_dst, v336);
            sub_19E37CA70(v337, (uint64_t)"'", 1);
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__dst.__r_.__value_.__l.__data_);
            }
            sub_19E3C6F1C(v368);
            sub_19E410F68(&cf);
            v324 += 2;
          }
          while (v324 != v325);
        }
        v326 = __cxa_allocate_exception(0x20uLL);
        sub_19E43BFBC(&__dst, (uint64_t)&__p);
        sub_19E3F5604(v326, (long long *)&__dst);
        __cxa_throw(v326, (struct type_info *)&unk_1EF0B7540, (void (*)(void *))sub_19E3F56B0);
      }
      unint64_t v12 = **(const void ***)v361;
      if (v12) {
        CFRetain(**(CFTypeRef **)v361);
      }
      sub_19E36E590(&theDict, v12);
      if (!theDict.__r_.__value_.__r.__words[0])
      {
        v327 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x19F3BD790](v327, "Could not construct");
        __cxa_throw(v327, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      CFStringRef v13 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)theDict.__r_.__value_.__l.__data_, @"PrefixMatchingType");
      if (!v13 || (CFTypeID v14 = CFStringGetTypeID(), v14 != CFGetTypeID(v13)))
      {
        __p.__r_.__value_.__s.__data_[0] = 0;
        LOBYTE(v372) = 0;
LABEL_740:
        v315 = __cxa_allocate_exception(0x20uLL);
        std::operator+<char>();
        sub_19E3F5604(v315, (long long *)&__dst);
        __cxa_throw(v315, (struct type_info *)&unk_1EF0B7540, (void (*)(void *))sub_19E3F56B0);
      }
      sub_19E3C6934(&__p, v13);
      LOBYTE(v372) = 1;
      std::string::size_type v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v15 = __p.__r_.__value_.__l.__size_;
      }
      switch(v15)
      {
        case 5uLL:
          std::string::size_type v16 = (void *)__p.__r_.__value_.__r.__words[0];
          p_p = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          int data = (int)p_p->__r_.__value_.__l.__data_;
          int v19 = p_p->__r_.__value_.__s.__data_[4];
          if (data != 1667332165 || v19 != 116) {
            goto LABEL_740;
          }
          int v21 = 0;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_34;
          }
          goto LABEL_35;
        case 0xFuLL:
          std::string::size_type v16 = (void *)__p.__r_.__value_.__r.__words[0];
          unint64_t v49 = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            unint64_t v49 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          std::string::size_type v50 = v49->__r_.__value_.__r.__words[0];
          uint64_t v51 = *(std::string::size_type *)((char *)v49->__r_.__value_.__r.__words + 7);
          if (v50 != 0x65736E4965736143 || v51 != 0x6576697469736E65) {
            goto LABEL_740;
          }
          int v21 = 1;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_34;
          }
          goto LABEL_35;
        case 0x14uLL:
          std::string::size_type v16 = (void *)__p.__r_.__value_.__r.__words[0];
          uint64_t v22 = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            uint64_t v22 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          std::string::size_type v23 = v22->__r_.__value_.__r.__words[0];
          std::string::size_type v24 = v22->__r_.__value_.__l.__size_;
          int v25 = v22->__r_.__value_.__r.__words[2];
          if (v23 != 0x6974697263616944 || v24 != 0x69736E65736E4963 || v25 != 1702259060) {
            goto LABEL_740;
          }
          int v21 = 2;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_34;
          }
          goto LABEL_35;
        case 0x1BuLL:
          std::string::size_type v16 = (void *)__p.__r_.__value_.__r.__words[0];
          uint64_t v41 = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            uint64_t v41 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          std::string::size_type v42 = v41->__r_.__value_.__r.__words[0];
          std::string::size_type v43 = v41->__r_.__value_.__l.__size_;
          std::string::size_type v44 = v41->__r_.__value_.__r.__words[2];
          uint64_t v45 = *(std::string::size_type *)((char *)&v41->__r_.__value_.__r.__words[2] + 3);
          if (v42 != 0x44646E4165736143
            || v43 != 0x6369746972636169
            || v44 != 0x7469736E65736E49
            || v45 != 0x6576697469736E65)
          {
            goto LABEL_740;
          }
          int v21 = 3;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_34:
          }
            operator delete(v16);
LABEL_35:
          if (theDict.__r_.__value_.__r.__words[0]) {
            CFRelease(theDict.__r_.__value_.__l.__data_);
          }
          char v28 = **(const void ***)v361;
          if (v28) {
            CFRetain(**(CFTypeRef **)v361);
          }
          sub_19E36E590(&theDict, v28);
          if (!theDict.__r_.__value_.__r.__words[0])
          {
            v328 = __cxa_allocate_exception(0x10uLL);
            MEMORY[0x19F3BD790](v328, "Could not construct");
            __cxa_throw(v328, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          CFStringRef v29 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)theDict.__r_.__value_.__l.__data_, @"CoderType");
          if (!v29 || (CFTypeID v30 = CFStringGetTypeID(), v30 != CFGetTypeID(v29)))
          {
            __p.__r_.__value_.__s.__data_[0] = 0;
            LOBYTE(v372) = 0;
            goto LABEL_742;
          }
          sub_19E3C6934(&__p, v29);
          LOBYTE(v372) = 1;
          std::string::size_type v31 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v31 = __p.__r_.__value_.__l.__size_;
          }
          if (v31 == 8)
          {
            float32x4_t v32 = (void *)__p.__r_.__value_.__r.__words[0];
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              size_t v40 = &__p;
            }
            else {
              size_t v40 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            if (v40->__r_.__value_.__r.__words[0] == 0x3156786966667553)
            {
              int v38 = 0;
              int v37 = 1;
              if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_54;
              }
            }
            else
            {
              if (v40->__r_.__value_.__r.__words[0] != 0x3256786966667553) {
                goto LABEL_742;
              }
              int v38 = 0;
              int v37 = 2;
              if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                goto LABEL_54;
              }
            }
          }
          else
          {
            if (v31 != 6) {
              goto LABEL_742;
            }
            float32x4_t v32 = (void *)__p.__r_.__value_.__r.__words[0];
            float32x4_t v33 = &__p;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              float32x4_t v33 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            int v34 = (int)v33->__r_.__value_.__l.__data_;
            int v35 = WORD2(v33->__r_.__value_.__r.__words[0]);
            if (v34 != 1717924432 || v35 != 30825)
            {
LABEL_742:
              v316 = __cxa_allocate_exception(0x20uLL);
              std::operator+<char>();
              sub_19E3F5604(v316, (long long *)&__dst);
              __cxa_throw(v316, (struct type_info *)&unk_1EF0B7540, (void (*)(void *))sub_19E3F56B0);
            }
            int v37 = 0;
            int v38 = 1;
            if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_54:
              unint64_t v39 = (const void *)theDict.__r_.__value_.__r.__words[0];
              if (!theDict.__r_.__value_.__r.__words[0]) {
                goto LABEL_90;
              }
              goto LABEL_89;
            }
          }
          operator delete(v32);
          unint64_t v39 = (const void *)theDict.__r_.__value_.__r.__words[0];
          if (!theDict.__r_.__value_.__r.__words[0])
          {
LABEL_90:
            v359 = 0;
            v360 = 0;
            uint64_t v346 = a2;
            int v344 = v37;
            v342 = a4;
            if (v38)
            {
              __n128 v53 = *(CFTypeRef **)v361;
              unint64_t v54 = (char *)operator new(0x190uLL);
              *((void *)v54 + 1) = 0;
              *((void *)v54 + 2) = 0;
              *(void *)unint64_t v54 = &unk_1EF0BE300;
              sub_19E487B14(&cf, (CFDictionaryRef)*v53);
              *((_OWORD *)v54 + 2) = 0u;
              *((void *)v54 + 3) = &unk_1EF0BAB60;
              *((_OWORD *)v54 + 3) = 0u;
              *((_OWORD *)v54 + 4) = 0u;
              char v55 = *(unsigned char *)(a1 + 23);
              if (v55 >= 0) {
                unint64_t v56 = (const UInt8 *)a1;
              }
              else {
                unint64_t v56 = *(const UInt8 **)a1;
              }
              if (v56)
              {
                if (v55 >= 0) {
                  CFIndex v57 = *(unsigned __int8 *)(a1 + 23);
                }
                else {
                  CFIndex v57 = *(void *)(a1 + 8);
                }
                CFStringRef v58 = CFStringCreateWithBytes(0, v56, v57, 0x8000100u, 0);
                if (!v58)
                {
                  uint64_t v59 = __cxa_allocate_exception(0x10uLL);
                  MEMORY[0x19F3BD790](v59, "Could not construct");
                  __cxa_throw(v59, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                }
              }
              else
              {
                CFStringRef v58 = 0;
              }
              *((void *)v54 + 10) = CFLocaleCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v58);
              if (v58) {
                CFRelease(v58);
              }
              *((_OWORD *)v54 + 7) = 0u;
              *(void *)(v54 + 92) = 0;
              v354 = v54 + 92;
              *((_DWORD *)v54 + 22) = v21;
              *((_OWORD *)v54 + 8) = 0u;
              *(void *)(v54 + 100) = 0;
              *((_DWORD *)v54 + 36) = 1065353216;
              v351 = (float *)(v54 + 112);
              sub_19E382D5C((uint64_t)(v54 + 152));
              if ((v365 & 0x80u) == 0) {
                p_CFTypeRef cf = &cf;
              }
              else {
                p_CFTypeRef cf = (void *)cf;
              }
              if ((v365 & 0x80u) == 0) {
                uint64_t v69 = v365;
              }
              else {
                uint64_t v69 = v364;
              }
              sub_19E383354((uint64_t)(v54 + 152), (uint64_t)p_cf, v69);
              if (__dst.__r_.__value_.__r.__words[0])
              {
                v311 = __cxa_allocate_exception(0x10uLL);
                sub_19E3AD800((uint64_t)&__dst, &__p);
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  char v312 = &__p;
                }
                else {
                  char v312 = (std::string *)__p.__r_.__value_.__r.__words[0];
                }
                MEMORY[0x19F3BD790](v311, v312);
                __cxa_throw(v311, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              sub_19E3AD4CC((uint64_t *)&__dst);
              uint64_t v70 = 0;
              uint64_t v71 = MEMORY[0x1E4F14390];
              while (1)
              {
                if ((int)sub_19E38D428((void **)v54 + 19) <= (unint64_t)v70)
                {
                  if ((char)v365 < 0) {
                    operator delete((void *)cf);
                  }
                  *((void *)v54 + 3) = &unk_1EF0B9A98;
                  uint64_t v97 = (float *)(v54 + 272);
                  *((_OWORD *)v54 + 17) = 0u;
                  *((_OWORD *)v54 + 18) = 0u;
                  *((_DWORD *)v54 + 76) = 1065353216;
                  v54[312] = 0;
                  v54[316] = 0;
                  unint64_t v98 = v54 + 320;
                  v54[348] = 0;
                  *((void *)v54 + 41) = 0;
                  *((void *)v54 + 42) = 0;
                  *((void *)v54 + 40) = 0;
                  v54[344] = 0;
                  *((_DWORD *)v54 + 88) = v344;
                  signed int v99 = sub_19E38D428((void **)v54 + 19);
                  unsigned int v100 = v99;
                  memset(&__p, 0, sizeof(__p));
                  if (v99)
                  {
                    if (v99 < 0) {
                      sub_19E37C7C4();
                    }
                    unint64_t v101 = v99;
                    unint64_t v102 = (unint64_t)(v99 - 1) >> 6;
                    unsigned int v103 = operator new(8 * (v102 + 1));
                    std::string::size_type v104 = (std::string::size_type)v103;
                    __p.__r_.__value_.__l.__size_ = (int)v100;
                    __p.__r_.__value_.__r.__words[2] = v102 + 1;
                    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v103;
                    if (v100 >= 0x41) {
                      unint64_t v105 = v102;
                    }
                    else {
                      unint64_t v105 = 0;
                    }
                    v103[v105] = 0;
                    if (v100 >= 0x40) {
                      bzero(v103, 8 * (v101 >> 6));
                    }
                    if ((v101 & 0x3F) != 0) {
                      *(void *)(v104 + 8 * ((unint64_t)(int)v100 >> 6)) &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v101 & 0x3F));
                    }
                    unint64_t v98 = v54 + 320;
                  }
                  else
                  {
                    std::string::size_type v104 = 0;
                  }
                  if (*(void *)v98)
                  {
                    operator delete(*(void **)v98);
                    *(void *)unint64_t v98 = 0;
                    *((void *)v98 + 1) = 0;
                    *((void *)v98 + 2) = 0;
                    std::string::size_type v104 = __p.__r_.__value_.__r.__words[0];
                  }
                  unsigned int v201 = 0;
                  *((void *)v54 + 40) = v104;
                  *(_OWORD *)(v54 + 328) = *(_OWORD *)&__p.__r_.__value_.__r.__words[1];
LABEL_455:
                  while ((int)sub_19E38D428((void **)v54 + 19) > (unint64_t)v201)
                  {
                    if (*((_DWORD *)v54 + 25) == v201 || *v354 == v201 || *((_DWORD *)v54 + 27) == v201)
                    {
LABEL_454:
                      *(void *)(*(void *)v98 + (((unint64_t)v201 >> 3) & 0x1FFFFFF8)) |= 1 << v201;
                      ++v201;
                      continue;
                    }
                    unint64_t v203 = *((void *)v54 + 15);
                    if (v203)
                    {
                      uint8x8_t v204 = (uint8x8_t)vcnt_s8((int8x8_t)v203);
                      v204.i16[0] = vaddlv_u8(v204);
                      if (v204.u32[0] > 1uLL)
                      {
                        unint64_t v205 = v201;
                        if (v203 <= v201) {
                          unint64_t v205 = v201 % v203;
                        }
                      }
                      else
                      {
                        unint64_t v205 = (v203 - 1) & v201;
                      }
                      uint64_t v206 = *(uint64_t ***)(*(void *)v351 + 8 * v205);
                      if (v206)
                      {
                        char v207 = *v206;
                        if (v207)
                        {
                          if (v204.u32[0] < 2uLL)
                          {
                            unint64_t v208 = v203 - 1;
                            while (1)
                            {
                              uint64_t v210 = v207[1];
                              if (v210 == v201)
                              {
                                if (*((_DWORD *)v207 + 4) == v201) {
                                  goto LABEL_454;
                                }
                              }
                              else if ((v210 & v208) != v205)
                              {
                                goto LABEL_479;
                              }
                              char v207 = (uint64_t *)*v207;
                              if (!v207) {
                                goto LABEL_479;
                              }
                            }
                          }
                          do
                          {
                            unint64_t v209 = v207[1];
                            if (v209 == v201)
                            {
                              if (*((_DWORD *)v207 + 4) == v201) {
                                goto LABEL_454;
                              }
                            }
                            else
                            {
                              if (v209 >= v203) {
                                v209 %= v203;
                              }
                              if (v209 != v205) {
                                break;
                              }
                            }
                            char v207 = (uint64_t *)*v207;
                          }
                          while (v207);
                        }
                      }
                    }
LABEL_479:
                    if (*((_DWORD *)v54 + 26) == v201 || *((_DWORD *)v54 + 24) == v201) {
                      goto LABEL_481;
                    }
                    uint64_t v202 = *((void *)v54 + 4);
                    uint64_t v211 = v202 + 24 * v201;
                    unint64_t v212 = *(unsigned __int8 *)(v211 + 23);
                    char v213 = v212;
                    if ((v212 & 0x80u) == 0) {
                      uint64_t v214 = *(unsigned __int8 *)(v211 + 23);
                    }
                    else {
                      uint64_t v214 = *(void *)(v211 + 8);
                    }
                    if (v214 == 7)
                    {
                      char v215 = *(int **)v211;
                      if ((v212 & 0x80u) == 0) {
                        char v215 = (int *)(v202 + 24 * v201);
                      }
                      int v216 = *v215;
                      int v217 = *(int *)((char *)v215 + 3);
                      if (v216 == 1130321247 && v217 == 1599095107)
                      {
                        *((_DWORD *)v54 + 78) = v201;
                        v54[316] = 1;
                        ++v201;
                        continue;
                      }
                    }
                    v219 = (int *)(v202 + 24 * v201);
                    unint64_t v220 = *(unsigned __int8 *)(v211 + 23);
                    if ((char)v212 < 0)
                    {
                      v219 = *(int **)v211;
                      unint64_t v220 = *(void *)(v211 + 8);
                    }
                    v341 = v97;
                    if (v220 >= 7
                      && ((int v221 = *v219, v222 = *(int *)((char *)v219 + 3), v221 == 1314870623)
                        ? (BOOL v223 = v222 == 942691406)
                        : (BOOL v223 = 0),
                          v223))
                    {
                      *((_DWORD *)v54 + 86) = v201;
                      v54[348] = 1;
                      unint64_t v212 = *(unsigned __int8 *)(v211 + 23);
                      char v213 = *(unsigned char *)(v211 + 23);
                      v348 = (size_t *)v211;
                      if ((v213 & 0x80) == 0)
                      {
LABEL_500:
                        if (v212 <= 4
                          || (*(_DWORD *)v348 == 1281977941 ? (BOOL v224 = *((unsigned char *)v348 + 4) == 77) : (BOOL v224 = 0),
                              !v224
                           && (v212 < 6
                            || (*(_DWORD *)v348 == 1348425055
                              ? (BOOL v225 = *((unsigned __int16 *)v348 + 2) == 17746)
                              : (BOOL v225 = 0),
                                !v225)))
                          && (*(_DWORD *)v348 == 1314870623 ? (BOOL v226 = *((unsigned char *)v348 + 4) == 84) : (BOOL v226 = 0), !v226))
                        {
                          char v339 = v213;
                          uint64_t v227 = 0;
                          while (1)
                          {
                            size_t v228 = strlen(off_1E599FB50[v227]);
                            if (v228 == -1) {
                              break;
                            }
                            size_t v229 = v228;
                            if (v212 >= v228) {
                              size_t v230 = v228;
                            }
                            else {
                              size_t v230 = v212;
                            }
                            int v231 = memcmp(v348, off_1E599FB50[v227], v230);
                            if (v229 == v212 && v231 == 0) {
                              goto LABEL_558;
                            }
                            if (++v227 == 100) {
                              goto LABEL_551;
                            }
                          }
LABEL_737:
                          sub_19E3C4C28();
                        }
LABEL_557:
                        *(void *)(*(void *)v98 + (((unint64_t)v201 >> 3) & 0x1FFFFFF8)) |= 1 << v201;
                        uint64_t v97 = v341;
                        ++v201;
                        continue;
                      }
                    }
                    else
                    {
                      v348 = (size_t *)v211;
                      if ((v212 & 0x80) == 0) {
                        goto LABEL_500;
                      }
                    }
                    char v233 = *(int **)v211;
                    unint64_t v234 = *(void *)(v211 + 8);
                    if (v234 > 4)
                    {
                      if (*v233 == 1281977941 && *((unsigned char *)v233 + 4) == 77) {
                        goto LABEL_557;
                      }
                      if (v234 >= 6 && *v233 == 1348425055 && *((_WORD *)v233 + 2) == 17746) {
                        goto LABEL_557;
                      }
                      if (*v233 == 1314870623 && *((unsigned char *)v233 + 4) == 84) {
                        goto LABEL_557;
                      }
                    }
                    char v339 = v213;
                    for (uint64_t i = 0; i != 100; ++i)
                    {
                      size_t v239 = strlen(off_1E599FB50[i]);
                      if (v239 == -1) {
                        goto LABEL_737;
                      }
                      size_t v240 = v239;
                      if (v234 >= v239) {
                        size_t v241 = v239;
                      }
                      else {
                        size_t v241 = v234;
                      }
                      if (!memcmp(v233, off_1E599FB50[i], v241) && v234 == v240)
                      {
LABEL_558:
                        unint64_t v98 = v54 + 320;
                        *(void *)(*((void *)v54 + 40) + (((unint64_t)v201 >> 3) & 0x1FFFFFF8)) |= 1 << v201;
                        uint64_t v97 = v341;
                        ++v201;
                        goto LABEL_455;
                      }
                    }
LABEL_551:
                    uint64_t v97 = v341;
                    if (v339 < 0)
                    {
                      uint64_t v245 = 0;
                      __int16 v246 = (const void *)*v348;
                      size_t v247 = v348[1];
                      while (1)
                      {
                        size_t v248 = strlen(off_1E599FE70[v245]);
                        if (v247 >= v248 && !memcmp(v246, off_1E599FE70[v245], v248)) {
                          break;
                        }
                        ++v245;
                        unint64_t v98 = v54 + 320;
                        if (v245 == 29) {
                          goto LABEL_481;
                        }
                      }
                    }
                    else
                    {
                      uint64_t v243 = 0;
                      while (1)
                      {
                        size_t v244 = strlen(off_1E599FE70[v243]);
                        if (v244 <= v212 && !memcmp(v348, off_1E599FE70[v243], v244)) {
                          break;
                        }
                        ++v243;
                        unint64_t v98 = v54 + 320;
                        if (v243 == 29) {
                          goto LABEL_481;
                        }
                      }
                    }
                    unint64_t v98 = v54 + 320;
                    sub_19E4435B0(v341, v201, v201);
LABEL_481:
                    ++v201;
                  }
                  unsigned int v249 = 0;
                  *((void *)v54 + 3) = &unk_1EF0BA440;
                  *(_OWORD *)(v54 + 360) = 0u;
                  *(_OWORD *)(v54 + 376) = 0u;
                  *((_DWORD *)v54 + 98) = 1065353216;
                  while (2)
                  {
                    if ((int)sub_19E38D428((void **)v54 + 19) <= (unint64_t)v249)
                    {
                      v357 = v54 + 24;
                      v358 = (std::__shared_weak_count *)v54;
                      v263 = (std::__shared_weak_count *)operator new(0x30uLL);
                      v263->__shared_owners_ = 0;
                      v263->__shared_weak_owners_ = 0;
                      v263->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0BE5D8;
                      atomic_fetch_add_explicit((atomic_ullong *volatile)v54 + 1, 1uLL, memory_order_relaxed);
                      v263[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0BB9A8;
                      v263[1].__shared_owners_ = (uint64_t)(v54 + 24);
                      v263[1].__shared_weak_owners_ = (uint64_t)v54;
                      atomic_fetch_add_explicit((atomic_ullong *volatile)v54 + 1, 1uLL, memory_order_relaxed);
                      uint64_t v264 = v345;
                      int v265 = a5;
                      if (!atomic_fetch_add((atomic_ullong *volatile)v54 + 1, 0xFFFFFFFFFFFFFFFFLL))
                      {
                        (*(void (**)(char *))(*(void *)v54 + 16))(v54);
                        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v54);
                      }
                      char v266 = v360;
                      v359 = &v263[1].__vftable;
                      v360 = v263;
                      if (v266 && !atomic_fetch_add(&v266->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                      {
                        ((void (*)(std::__shared_weak_count *))v266->__on_zero_shared)(v266);
                        std::__shared_weak_count::__release_weak(v266);
                      }
                      v267 = v358;
                      uint64_t v268 = v346;
                      if (v358) {
                        atomic_fetch_add_explicit(&v358->__shared_owners_, 1uLL, memory_order_relaxed);
                      }
                      v269 = *(std::__shared_weak_count **)(v345 + 48);
                      *(void *)(v345 + 40) = v357;
                      *(void *)(v345 + 48) = v267;
                      if (v269 && !atomic_fetch_add(&v269->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                      {
                        ((void (*)(std::__shared_weak_count *))v269->__on_zero_shared)(v269);
                        std::__shared_weak_count::__release_weak(v269);
                      }
                      if (v358 && !atomic_fetch_add(&v358->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                      {
                        ((void (*)(std::__shared_weak_count *))v358->__on_zero_shared)(v358);
                        std::__shared_weak_count::__release_weak(v358);
                      }
                      goto LABEL_689;
                    }
                    uint64_t v250 = *((void *)v54 + 4);
                    unint64_t v251 = *((void *)v54 + 35);
                    if (v251)
                    {
                      uint8x8_t v252 = (uint8x8_t)vcnt_s8((int8x8_t)v251);
                      v252.i16[0] = vaddlv_u8(v252);
                      if (v252.u32[0] > 1uLL)
                      {
                        unint64_t v253 = v249;
                        if (v251 <= v249) {
                          unint64_t v253 = v249 % v251;
                        }
                      }
                      else
                      {
                        unint64_t v253 = (v251 - 1) & v249;
                      }
                      int v254 = *(uint64_t ***)(*(void *)v97 + 8 * v253);
                      if (v254)
                      {
                        long long v255 = *v254;
                        if (v255)
                        {
                          if (v252.u32[0] < 2uLL)
                          {
                            unint64_t v256 = v251 - 1;
                            while (1)
                            {
                              uint64_t v258 = v255[1];
                              if (v258 == v249)
                              {
                                if (*((_DWORD *)v255 + 4) == v249) {
                                  goto LABEL_588;
                                }
                              }
                              else if ((v258 & v256) != v253)
                              {
                                goto LABEL_589;
                              }
                              long long v255 = (uint64_t *)*v255;
                              if (!v255) {
                                goto LABEL_589;
                              }
                            }
                          }
                          do
                          {
                            unint64_t v257 = v255[1];
                            if (v257 == v249)
                            {
                              if (*((_DWORD *)v255 + 4) == v249)
                              {
LABEL_588:
                                sub_19E4435B0((float *)v54 + 90, v249, v249);
                                break;
                              }
                            }
                            else
                            {
                              if (v257 >= v251) {
                                v257 %= v251;
                              }
                              if (v257 != v253) {
                                break;
                              }
                            }
                            long long v255 = (uint64_t *)*v255;
                          }
                          while (v255);
                        }
                      }
                    }
LABEL_589:
                    int64_t v259 = (unsigned __int16 *)(v250 + 24 * v249);
                    if (*((char *)v259 + 23) < 0)
                    {
                      int64_t v259 = *(unsigned __int16 **)v259;
                      if (*(void *)(v250 + 24 * v249 + 8) < 3uLL)
                      {
LABEL_599:
                        if (*((_DWORD *)v54 + 26) == v249) {
                          sub_19E4435B0((float *)v54 + 90, v249, v249);
                        }
                        ++v249;
                        continue;
                      }
                    }
                    else if (*((unsigned __int8 *)v259 + 23) < 3uLL)
                    {
                      goto LABEL_599;
                    }
                    break;
                  }
                  int v260 = *v259;
                  int v261 = *((unsigned __int8 *)v259 + 2);
                  if (v260 == 38626 && v261 == 129) {
                    sub_19E4435B0((float *)v54 + 90, v249, v249);
                  }
                  goto LABEL_599;
                }
                unint64_t v72 = sub_19E38D7A0((void **)v54 + 19, v70);
                std::string::size_type v74 = v73;
                if (v73 > 0x7FFFFFFFFFFFFFF7) {
                  sub_19E37C958();
                }
                BOOL v75 = v72;
                if (v73 >= 0x17) {
                  break;
                }
                *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v73;
                uint64_t v76 = &__dst;
                if (v73) {
                  goto LABEL_134;
                }
LABEL_135:
                v76->__r_.__value_.__s.__data_[v74] = 0;
                unint64_t v79 = *((void *)v54 + 5);
                if (v79 >= *((void *)v54 + 6))
                {
                  unint64_t v81 = sub_19E3FC244((char **)v54 + 4, (uint64_t)&__dst);
                }
                else
                {
                  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                  {
                    sub_19E39369C(*((unsigned char **)v54 + 5), __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
                  }
                  else
                  {
                    long long v80 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
                    *(void *)(v79 + 16) = *((void *)&__dst.__r_.__value_.__l + 2);
                    *(_OWORD *)unint64_t v79 = v80;
                  }
                  unint64_t v81 = (char *)(v79 + 24);
                  *((void *)v54 + 5) = v79 + 24;
                }
                *((void *)v54 + 5) = v81;
                if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  double v82 = &__dst;
                }
                else {
                  double v82 = (std::string *)__dst.__r_.__value_.__r.__words[0];
                }
                std::string::size_type v83 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
                if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  std::string::size_type v83 = __dst.__r_.__value_.__l.__size_;
                }
                if (v83)
                {
                  while (1)
                  {
                    if (v82->__r_.__value_.__s.__data_[0] == 226 && v83 != 1)
                    {
                      BOOL v85 = v82->__r_.__value_.__s.__data_[1] != 150 || v83 == 2;
                      if (!v85 && v82->__r_.__value_.__s.__data_[2] == 129) {
                        break;
                      }
                    }
                    double v82 = (std::string *)((char *)v82 + 1);
                    if (!--v83) {
                      goto LABEL_147;
                    }
                  }
                  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"▁";
                  __p.__r_.__value_.__l.__size_ = (std::string::size_type)"";
                  sub_19E443A10((unint64_t)v368, (uint64_t)&__dst, (uint64_t *)&__p, (unint64_t)"", "", (char *)v82, &v82->__r_.__value_.__s.__data_[3], (unint64_t)"", "");
                }
                else
                {
LABEL_147:
                  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                  {
                    sub_19E39369C(v368, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
                  }
                  else
                  {
                    *(_OWORD *)v368 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
                    v369[0] = (void *)__dst.__r_.__value_.__r.__words[2];
                  }
                }
                sub_19E4DDFF0(&theDict, (uint64_t)v368, *((_DWORD *)v54 + 22));
                unint64_t v86 = *((void *)v54 + 8);
                if (v86 < *((void *)v54 + 9))
                {
                  long long v87 = *(_OWORD *)&theDict.__r_.__value_.__l.__data_;
                  *(void *)(v86 + 16) = *((void *)&theDict.__r_.__value_.__l + 2);
                  *(_OWORD *)unint64_t v86 = v87;
                  memset(&theDict, 0, sizeof(theDict));
                  *((void *)v54 + 8) = v86 + 24;
                  if ((SHIBYTE(v369[0]) & 0x80000000) == 0) {
                    goto LABEL_166;
                  }
LABEL_163:
                  operator delete((void *)v368[0]);
                  goto LABEL_166;
                }
                long long v88 = sub_19E3EB1B8((void **)v54 + 7, (uint64_t)&theDict);
                int v89 = SHIBYTE(theDict.__r_.__value_.__r.__words[2]);
                *((void *)v54 + 8) = v88;
                if (v89 < 0)
                {
                  operator delete(theDict.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v369[0]) < 0) {
                    goto LABEL_163;
                  }
                }
                else if (SHIBYTE(v369[0]) < 0)
                {
                  goto LABEL_163;
                }
LABEL_166:
                std::string::size_type v90 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
                char v91 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
                if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  std::string::size_type v90 = __dst.__r_.__value_.__l.__size_;
                }
                switch(v90)
                {
                  case 3uLL:
                    uint64_t v92 = (std::string *)__dst.__r_.__value_.__r.__words[0];
                    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                      uint64_t v92 = &__dst;
                    }
                    if (LOWORD(v92->__r_.__value_.__l.__data_) == 38626
                      && v92->__r_.__value_.__s.__data_[2] == 129)
                    {
                      *((_DWORD *)v54 + ++*(_DWORD *)(result + 24) = v70;
                    }
                    else if (LOWORD(v92->__r_.__value_.__l.__data_) == 29500 && v92->__r_.__value_.__s.__data_[2] == 62)
                    {
                      *((_DWORD *)v54 + 25) = v70;
                    }
                    break;
                  case 4uLL:
                    uint64_t v92 = (std::string *)__dst.__r_.__value_.__r.__words[0];
                    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                      uint64_t v92 = &__dst;
                    }
                    if (LODWORD(v92->__r_.__value_.__l.__data_) == 1047736124) {
                      *((_DWORD *)v54 + 26) = v70;
                    }
                    break;
                  case 5uLL:
                    uint64_t v92 = (std::string *)__dst.__r_.__value_.__r.__words[0];
                    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                      uint64_t v92 = &__dst;
                    }
                    if (LODWORD(v92->__r_.__value_.__l.__data_) == 1802401084
                      && v92->__r_.__value_.__s.__data_[4] == 62)
                    {
                      _DWORD *v354 = v70;
                    }
                    else if (LODWORD(v92->__r_.__value_.__l.__data_) == 1684107324 {
                           && v92->__r_.__value_.__s.__data_[4] == 62)
                    }
                    {
                      *((_DWORD *)v54 + 27) = v70;
                    }
                    break;
                  default:
                    uint64_t v92 = (std::string *)__dst.__r_.__value_.__r.__words[0];
                    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                      uint64_t v92 = &__dst;
                    }
                    break;
                }
                if ((*(_DWORD *)(v71 + 4 * v92->__r_.__value_.__s.__data_[0] + 60) & 0x400) != 0)
                {
                  sub_19E4435B0(v351, v70, v70);
                  char v91 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
                }
                if (v91 < 0) {
                  operator delete(__dst.__r_.__value_.__l.__data_);
                }
                uint64_t v70 = (v70 + 1);
              }
              uint64_t v77 = (v73 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v73 | 7) != 0x17) {
                uint64_t v77 = v73 | 7;
              }
              uint64_t v78 = v77 + 1;
              uint64_t v76 = (std::string *)operator new(v77 + 1);
              __dst.__r_.__value_.__l.__size_ = v74;
              __dst.__r_.__value_.__r.__words[2] = v78 | 0x8000000000000000;
              __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v76;
LABEL_134:
              memmove(v76, v75, v74);
              goto LABEL_135;
            }
            sub_19E432C84((char **)&v357, *(CFTypeRef *)a2, 54);
            if (v357 == v358) {
              unsigned int v60 = 0;
            }
            else {
              unsigned int v60 = *(CFDictionaryRef **)v357;
            }
            BOOL v61 = *(CFTypeRef **)v361;
            size_t v62 = (char *)operator new(0x1F0uLL);
            *((void *)v62 + 1) = 0;
            *((void *)v62 + 2) = 0;
            *(void *)size_t v62 = &unk_1EF0BE338;
            sub_19E487B14(&cf, (CFDictionaryRef)*v61);
            *((_OWORD *)v62 + 2) = 0u;
            *((void *)v62 + 3) = &unk_1EF0BAC38;
            *((_OWORD *)v62 + 3) = 0u;
            *((_OWORD *)v62 + 4) = 0u;
            char v63 = *(unsigned char *)(a1 + 23);
            if (v63 >= 0) {
              unsigned int v64 = (const UInt8 *)a1;
            }
            else {
              unsigned int v64 = *(const UInt8 **)a1;
            }
            if (v64)
            {
              if (v63 >= 0) {
                CFIndex v65 = *(unsigned __int8 *)(a1 + 23);
              }
              else {
                CFIndex v65 = *(void *)(a1 + 8);
              }
              CFStringRef v66 = CFStringCreateWithBytes(0, v64, v65, 0x8000100u, 0);
              if (!v66)
              {
                uint64_t v67 = __cxa_allocate_exception(0x10uLL);
                MEMORY[0x19F3BD790](v67, "Could not construct");
                __cxa_throw(v67, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
            }
            else
            {
              CFStringRef v66 = 0;
            }
            *((void *)v62 + 10) = CFLocaleCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v66);
            if (v66) {
              CFRelease(v66);
            }
            *((_OWORD *)v62 + 7) = 0u;
            *(void *)(v62 + 92) = 0;
            v355 = v62 + 92;
            *((_DWORD *)v62 + 22) = v21;
            *((_OWORD *)v62 + 8) = 0u;
            *(void *)(v62 + 100) = 0;
            *((_DWORD *)v62 + 36) = 1065353216;
            v352 = (float *)(v62 + 112);
            sub_19E382D5C((uint64_t)(v62 + 152));
            if ((v365 & 0x80u) == 0) {
              unint64_t v106 = &cf;
            }
            else {
              unint64_t v106 = (void *)cf;
            }
            if ((v365 & 0x80u) == 0) {
              uint64_t v107 = v365;
            }
            else {
              uint64_t v107 = v364;
            }
            sub_19E383354((uint64_t)(v62 + 152), (uint64_t)v106, v107);
            if (__dst.__r_.__value_.__r.__words[0])
            {
              v313 = __cxa_allocate_exception(0x10uLL);
              sub_19E3AD800((uint64_t)&__dst, &__p);
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                char v314 = &__p;
              }
              else {
                char v314 = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              MEMORY[0x19F3BD790](v313, v314);
              __cxa_throw(v313, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            v340 = v60;
            sub_19E3AD4CC((uint64_t *)&__dst);
            uint64_t v108 = 0;
            uint64_t v109 = MEMORY[0x1E4F14390];
            while (1)
            {
              if ((int)sub_19E38D428((void **)v62 + 19) <= (unint64_t)v108)
              {
                if ((char)v365 < 0) {
                  operator delete((void *)cf);
                }
                *((void *)v62 + 3) = &unk_1EF0B9B70;
                *((_OWORD *)v62 + 17) = 0u;
                *((_OWORD *)v62 + 18) = 0u;
                *((_DWORD *)v62 + 76) = 1065353216;
                v62[312] = 0;
                v62[316] = 0;
                size_t v135 = (void **)(v62 + 320);
                v62[348] = 0;
                *((void *)v62 + 41) = 0;
                *((void *)v62 + 42) = 0;
                *((void *)v62 + 40) = 0;
                v62[344] = 0;
                *((_DWORD *)v62 + 88) = v344;
                v347 = (uint64_t *)(v62 + 320);
                signed int v136 = sub_19E38D428((void **)v62 + 19);
                unsigned int v137 = v136;
                memset(&__p, 0, sizeof(__p));
                if (v136)
                {
                  if (v136 < 0) {
                    sub_19E37C7C4();
                  }
                  unint64_t v138 = v136;
                  unint64_t v139 = (unint64_t)(v136 - 1) >> 6;
                  long long v140 = operator new(8 * (v139 + 1));
                  std::string::size_type v141 = (std::string::size_type)v140;
                  __p.__r_.__value_.__l.__size_ = (int)v137;
                  __p.__r_.__value_.__r.__words[2] = v139 + 1;
                  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v140;
                  if (v137 >= 0x41) {
                    unint64_t v142 = v139;
                  }
                  else {
                    unint64_t v142 = 0;
                  }
                  v140[v142] = 0;
                  if (v137 >= 0x40) {
                    bzero(v140, 8 * (v138 >> 6));
                  }
                  if ((v138 & 0x3F) != 0) {
                    *(void *)(v141 + 8 * ((unint64_t)(int)v137 >> 6)) &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v138 & 0x3F));
                  }
                  unint64_t v143 = *v135;
                  if (*v135)
                  {
LABEL_328:
                    operator delete(v143);
                    *size_t v135 = 0;
                    *((void *)v62 + 41) = 0;
                    *((void *)v62 + 42) = 0;
                    std::string::size_type v141 = __p.__r_.__value_.__r.__words[0];
                  }
                }
                else
                {
                  std::string::size_type v141 = 0;
                  unint64_t v143 = *v135;
                  if (*v135) {
                    goto LABEL_328;
                  }
                }
                unsigned int v144 = 0;
                *((void *)v62 + 40) = v141;
                *(_OWORD *)(v62 + 328) = *(_OWORD *)&__p.__r_.__value_.__r.__words[1];
                while (1)
                {
                  while (1)
                  {
LABEL_331:
                    if ((int)sub_19E38D428((void **)v62 + 19) <= (unint64_t)v144)
                    {
                      *((void *)v62 + 3) = &unk_1EF0BA518;
                      v62[360] = 0;
                      v62[384] = 0;
                      uint64_t v193 = (void **)(v62 + 392);
                      v62[415] = 1;
                      *((_WORD *)v62 + 196) = 46;
                      *((_OWORD *)v62 + 26) = 0u;
                      *((_OWORD *)v62 + 27) = 0u;
                      *((_DWORD *)v62 + 112) = 1065353216;
                      *(_OWORD *)(v62 + 456) = 0u;
                      *(_OWORD *)(v62 + 472) = 0u;
                      *((_DWORD *)v62 + 122) = 1065353216;
                      if (v340)
                      {
                        CFURLRef v194 = (const __CFURL *)CFDictionaryGetValue(*v340, @"URL");
                        CFDictionaryRef v195 = (const __CFDictionary *)sub_19E3C30D0(v194, 0);
                        CFDictionaryRef v196 = v195;
                        if (v195)
                        {
                          if (CFDictionaryContainsKey(v195, @"PeriodSymbol"))
                          {
                            CFStringRef v197 = (const __CFString *)CFDictionaryGetValue(v196, @"PeriodSymbol");
                            sub_19E37774C(v197, &__p);
                            if (v62[415] < 0) {
                              operator delete(*v193);
                            }
                            *(_OWORD *)uint64_t v193 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
                            *((void *)v62 + 51) = *((void *)&__p.__r_.__value_.__l + 2);
                          }
                          if (CFDictionaryContainsKey(v196, @"KeepWordsTitleCaseV1"))
                          {
                            CFArrayRef v198 = (const __CFArray *)CFDictionaryGetValue(v196, @"KeepWordsTitleCaseV1");
                            sub_19E4F9864(&__p, v198);
                            std::string::size_type __s1a = __p.__r_.__value_.__l.__size_;
                            std::string::size_type v199 = __p.__r_.__value_.__l.__size_;
                            uint64_t v200 = (void **)__p.__r_.__value_.__r.__words[0];
                          }
                          else
                          {
                            uint64_t v200 = 0;
                            std::string::size_type v199 = 0;
                            std::string::size_type __s1a = 0;
                          }
                          if (CFDictionaryContainsKey(v196, @"KeepWordsTitleCaseV2"))
                          {
                            CFArrayRef v272 = (const __CFArray *)CFDictionaryGetValue(v196, @"KeepWordsTitleCaseV2");
                            sub_19E4F9864(&__p, v272);
                            std::string::size_type v353 = __p.__r_.__value_.__l.__size_;
                            std::string::size_type v271 = __p.__r_.__value_.__l.__size_;
                            char v270 = (void **)__p.__r_.__value_.__r.__words[0];
                          }
                          else
                          {
                            char v270 = 0;
                            std::string::size_type v271 = 0;
                            std::string::size_type v353 = 0;
                          }
                          if (CFDictionaryContainsKey(v196, @"KeepWordsPossessiveForm"))
                          {
                            CFArrayRef v273 = (const __CFArray *)CFDictionaryGetValue(v196, @"KeepWordsPossessiveForm");
                            sub_19E4F9864(&__p, v273);
                            long long v274 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
                          }
                          else
                          {
                            long long v274 = 0uLL;
                          }
                          long long v356 = v274;
                          CFRelease(v196);
LABEL_627:
                          uint64_t v275 = *((void *)&v356 + 1);
                          if (v344 != 2)
                          {
                            if (v344 != 1) {
                              __assert_rtn("CoreLMSuffixCoder", "CoreLMSuffixCoder.cpp", 63, "false");
                            }
                            if (v200 != (void **)v199)
                            {
                              uint64_t v276 = (uint64_t)v200;
                              do
                              {
                                sub_19E3F0660((uint64_t)(v62 + 416), v276, v276);
                                v276 += 24;
                              }
                              while (v276 != v199);
                            }
                            goto LABEL_643;
                          }
                          if (v270 != (void **)v271)
                          {
                            uint64_t v277 = (uint64_t)v270;
                            do
                            {
                              sub_19E3F0660((uint64_t)(v62 + 416), v277, v277);
                              v277 += 24;
                            }
                            while (v277 != v271);
                          }
                          *((unsigned char *)&__p.__r_.__value_.__s + 23) = 2;
                          strcpy((char *)&__p, "'s");
                          v278 = std::string::insert(&__p, 0, " ", 1uLL);
                          std::string::size_type v279 = v278->__r_.__value_.__r.__words[0];
                          __dst.__r_.__value_.__r.__words[0] = v278->__r_.__value_.__l.__size_;
                          *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v278->__r_.__value_.__r.__words[1] + 7);
                          char v280 = HIBYTE(v278->__r_.__value_.__r.__words[2]);
                          v278->__r_.__value_.__l.__size_ = 0;
                          v278->__r_.__value_.__r.__words[2] = 0;
                          v278->__r_.__value_.__r.__words[0] = 0;
                          if (v62[384])
                          {
                            if (v62[383] < 0) {
                              operator delete(*((void **)v62 + 45));
                            }
                            std::string::size_type v281 = __dst.__r_.__value_.__r.__words[0];
                            *((void *)v62 + 45) = v279;
                            *((void *)v62 + 46) = v281;
                            *(void *)(v62 + 375) = *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words
                                                                               + 7);
                            v62[383] = v280;
                            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
LABEL_640:
                            }
                              operator delete(__p.__r_.__value_.__l.__data_);
                          }
                          else
                          {
                            std::string::size_type v310 = __dst.__r_.__value_.__r.__words[0];
                            *((void *)v62 + 45) = v279;
                            *((void *)v62 + 46) = v310;
                            *(void *)(v62 + 375) = *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words
                                                                               + 7);
                            v62[383] = v280;
                            v62[384] = 1;
                            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                              goto LABEL_640;
                            }
                          }
                          for (uint64_t j = v356; j != *((void *)&v356 + 1); j += 24)
                            sub_19E3F0660((uint64_t)(v62 + 456), j, j);
LABEL_643:
                          v283 = (uint64_t *)*((void *)v62 + 36);
                          if (v283)
                          {
                            uint64_t v284 = *v347;
                            do
                            {
                              *(void *)(v284 + (((unint64_t)*((unsigned int *)v283 + 4) >> 3) & 0x1FFFFFF8)) |= 1 << *((_DWORD *)v283 + 4);
                              v283 = (uint64_t *)*v283;
                            }
                            while (v283);
                          }
                          if ((void)v356)
                          {
                            while (v275 != (void)v356)
                            {
                              if (*(char *)(v275 - 1) < 0) {
                                operator delete(*(void **)(v275 - 24));
                              }
                              v275 -= 24;
                            }
                            operator delete((void *)v356);
                            if (!v270) {
                              goto LABEL_658;
                            }
LABEL_648:
                            for (k = (void **)v353; k != v270; k -= 3)
                            {
                              if (*((char *)k - 1) < 0) {
                                operator delete(*(k - 3));
                              }
                            }
                            operator delete(v270);
                            int v265 = a5;
                            if (!v200)
                            {
LABEL_667:
                              v366 = v62 + 24;
                              v367 = (std::__shared_weak_count *)v62;
                              v287 = (std::__shared_weak_count *)operator new(0x30uLL);
                              v287->__shared_owners_ = 0;
                              v287->__shared_weak_owners_ = 0;
                              v287->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0BE610;
                              atomic_fetch_add_explicit((atomic_ullong *volatile)v62 + 1, 1uLL, memory_order_relaxed);
                              v287[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0BB9D8;
                              v287[1].__shared_owners_ = (uint64_t)(v62 + 24);
                              v287[1].__shared_weak_owners_ = (uint64_t)v62;
                              atomic_fetch_add_explicit((atomic_ullong *volatile)v62 + 1, 1uLL, memory_order_relaxed);
                              uint64_t v264 = v345;
                              if (!atomic_fetch_add((atomic_ullong *volatile)v62 + 1, 0xFFFFFFFFFFFFFFFFLL))
                              {
                                (*(void (**)(char *))(*(void *)v62 + 16))(v62);
                                std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v62);
                              }
                              char v288 = v360;
                              v359 = &v287[1].__vftable;
                              v360 = v287;
                              if (v288 && !atomic_fetch_add(&v288->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                              {
                                ((void (*)(std::__shared_weak_count *))v288->__on_zero_shared)(v288);
                                std::__shared_weak_count::__release_weak(v288);
                              }
                              char v290 = v366;
                              v289 = v367;
                              uint64_t v268 = v346;
                              if (v367) {
                                atomic_fetch_add_explicit(&v367->__shared_owners_, 1uLL, memory_order_relaxed);
                              }
                              v291 = *(std::__shared_weak_count **)(v345 + 48);
                              *(void *)(v345 + 40) = v290;
                              *(void *)(v345 + 48) = v289;
                              if (v291 && !atomic_fetch_add(&v291->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                              {
                                ((void (*)(std::__shared_weak_count *))v291->__on_zero_shared)(v291);
                                std::__shared_weak_count::__release_weak(v291);
                              }
                              char v292 = v367;
                              if (v367 && !atomic_fetch_add(&v367->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                              {
                                ((void (*)(std::__shared_weak_count *))v292->__on_zero_shared)(v292);
                                std::__shared_weak_count::__release_weak(v292);
                              }
                              v293 = (std::__shared_weak_count *)v357;
                              if (v357)
                              {
                                v294 = v358;
                                char v295 = v357;
                                if (v358 != v357)
                                {
                                  do
                                  {
                                    shared_weak_owners = (std::__shared_weak_count *)v294[-1].__shared_weak_owners_;
                                    if (shared_weak_owners
                                      && !atomic_fetch_add(&shared_weak_owners->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
                                    {
                                      ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
                                      std::__shared_weak_count::__release_weak(shared_weak_owners);
                                    }
                                    v294 = (std::__shared_weak_count *)((char *)v294 - 16);
                                  }
                                  while (v294 != v293);
                                  char v295 = v357;
                                  uint64_t v268 = v346;
                                }
                                v358 = v293;
                                operator delete(v295);
                              }
LABEL_689:
                              if (*(void *)(v268 + 72)) {
                                operator new();
                              }
                              int v297 = 256;
                              switch(v265)
                              {
                                case 0:
                                  goto LABEL_697;
                                case 1:
                                  goto LABEL_695;
                                case 2:
                                  int v297 = 128;
                                  goto LABEL_695;
                                case 3:
                                  int v297 = 64;
                                  goto LABEL_695;
                                case 4:
                                  int v297 = 32;
LABEL_695:
                                  CFStringRef v298 = (const __CFString *)kLMLanguageModelMontrealFullCacheSize;
                                  LODWORD(theDict.__r_.__value_.__l.__data_) = v297;
                                  char v299 = (__CFString *)CFNumberCreate(0, kCFNumberIntType, &theDict);
                                  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v299;
                                  if (!v299)
                                  {
                                    v329 = __cxa_allocate_exception(0x10uLL);
                                    MEMORY[0x19F3BD790](v329, "Could not construct");
                                    __cxa_throw(v329, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                                  }
                                  sub_19E373D28(0, v298, v299, 0);
                                  CFRelease(v299);
LABEL_697:
                                  v300 = *(const void ***)v361;
                                  uint64_t v301 = *(void *)(v264 + 48);
                                  if (v301) {
                                    atomic_fetch_add_explicit((atomic_ullong *volatile)(v301 + 8), 1uLL, memory_order_relaxed);
                                  }
                                  char v302 = *(unsigned char *)(v264 + 23);
                                  if (v302 >= 0) {
                                    char v303 = (const UInt8 *)v264;
                                  }
                                  else {
                                    char v303 = *(const UInt8 **)v264;
                                  }
                                  if (v303)
                                  {
                                    if (v302 >= 0) {
                                      CFIndex v304 = *(unsigned __int8 *)(v264 + 23);
                                    }
                                    else {
                                      CFIndex v304 = *(void *)(v264 + 8);
                                    }
                                    char v303 = (const UInt8 *)CFStringCreateWithBytes(0, v303, v304, 0x8000100u, 0);
                                    v368[0] = v303;
                                    if (!v303)
                                    {
                                      v305 = __cxa_allocate_exception(0x10uLL);
                                      MEMORY[0x19F3BD790](v305, "Could not construct");
                                      __cxa_throw(v305, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                                    }
                                  }
                                  else
                                  {
                                    v368[0] = 0;
                                  }
                                  CFTypeRef cf = CFLocaleCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (CFLocaleIdentifier)v303);
                                  if (sub_19E4DE320(*v300))
                                  {
                                    int v306 = *((char *)v342 + 23);
                                    if (v306 >= 0) {
                                      size_t v307 = *((unsigned __int8 *)v342 + 23);
                                    }
                                    else {
                                      size_t v307 = (size_t)v342[1];
                                    }
                                    if (v307 != strlen((const char *)language_modeling::v1::kLanguageModelTypeToucan)
                                      || (v306 >= 0 ? (char v308 = v342) : (char v308 = *v342),
                                          memcmp(v308, (const void *)language_modeling::v1::kLanguageModelTypeToucan, v307)))
                                    {
                                      operator new();
                                    }
                                    if (qword_1EC0091A8 != -1) {
                                      dispatch_once(&qword_1EC0091A8, &unk_1EF0BEC80);
                                    }
                                    if (byte_1E9459D98) {
                                      operator new();
                                    }
                                    __assert_rtn("makeNeuralModel", "ToucanResourceLoader.cpp", 51, "isH13ANEPresent()");
                                  }
                                  v309 = operator new(0x20uLL);
                                  v309[1] = 0;
                                  v309[2] = 0;
                                  void *v309 = &unk_1EF0BE5A0;
                                  v309[3] = &unk_1EF0BB7D0;
                                  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)(v309 + 3);
                                  __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v309;
                                  operator new();
                                default:
                                  __assert_rtn("fullCacheCategoryToSize", "ToucanResourceLoader.cpp", 106, "false && \"unknown fullCacheSizeCategory\"");
                              }
                            }
                          }
                          else
                          {
                            if (v270) {
                              goto LABEL_648;
                            }
LABEL_658:
                            int v265 = a5;
                            if (!v200) {
                              goto LABEL_667;
                            }
                          }
                          for (unint64_t m = (void **)__s1a; m != v200; m -= 3)
                          {
                            if (*((char *)m - 1) < 0) {
                              operator delete(*(m - 3));
                            }
                          }
                          operator delete(v200);
                          goto LABEL_667;
                        }
                        char v270 = 0;
                        uint64_t v200 = 0;
                        std::string::size_type v199 = 0;
                        std::string::size_type v271 = 0;
                        long long v356 = 0u;
                      }
                      else
                      {
                        long long v356 = 0uLL;
                        char v270 = 0;
                        uint64_t v200 = 0;
                        std::string::size_type v199 = 0;
                        std::string::size_type v271 = 0;
                      }
                      std::string::size_type __s1a = 0;
                      std::string::size_type v353 = 0;
                      goto LABEL_627;
                    }
                    if (*((_DWORD *)v62 + 25) != v144 && *v355 != v144 && *((_DWORD *)v62 + 27) != v144) {
                      break;
                    }
LABEL_330:
                    *(void *)((char *)*v135 + (((unint64_t)v144 >> 3) & 0x1FFFFFF8)) |= 1 << v144;
                    ++v144;
                  }
                  unint64_t v146 = *((void *)v62 + 15);
                  if (v146)
                  {
                    uint8x8_t v147 = (uint8x8_t)vcnt_s8((int8x8_t)v146);
                    v147.i16[0] = vaddlv_u8(v147);
                    if (v147.u32[0] > 1uLL)
                    {
                      unint64_t v148 = v144;
                      if (v146 <= v144) {
                        unint64_t v148 = v144 % v146;
                      }
                    }
                    else
                    {
                      unint64_t v148 = (v146 - 1) & v144;
                    }
                    char v149 = *(uint64_t ***)(*(void *)v352 + 8 * v148);
                    if (v149)
                    {
                      unint64_t v150 = *v149;
                      if (v150)
                      {
                        if (v147.u32[0] < 2uLL)
                        {
                          unint64_t v151 = v146 - 1;
                          while (1)
                          {
                            uint64_t v153 = v150[1];
                            if (v153 == v144)
                            {
                              if (*((_DWORD *)v150 + 4) == v144) {
                                goto LABEL_330;
                              }
                            }
                            else if ((v153 & v151) != v148)
                            {
                              goto LABEL_355;
                            }
                            unint64_t v150 = (uint64_t *)*v150;
                            if (!v150) {
                              goto LABEL_355;
                            }
                          }
                        }
                        do
                        {
                          unint64_t v152 = v150[1];
                          if (v152 == v144)
                          {
                            if (*((_DWORD *)v150 + 4) == v144) {
                              goto LABEL_330;
                            }
                          }
                          else
                          {
                            if (v152 >= v146) {
                              v152 %= v146;
                            }
                            if (v152 != v148) {
                              break;
                            }
                          }
                          unint64_t v150 = (uint64_t *)*v150;
                        }
                        while (v150);
                      }
                    }
                  }
LABEL_355:
                  if (*((_DWORD *)v62 + 26) == v144 || *((_DWORD *)v62 + 24) == v144) {
                    goto LABEL_357;
                  }
                  uint64_t v145 = *((void *)v62 + 4);
                  uint64_t v154 = v145 + 24 * v144;
                  unint64_t v155 = *(unsigned __int8 *)(v154 + 23);
                  char v156 = v155;
                  uint64_t v157 = (v155 & 0x80u) == 0 ? *(unsigned __int8 *)(v154 + 23) : *(void *)(v154 + 8);
                  if (v157 != 7) {
                    break;
                  }
                  char v158 = *(int **)v154;
                  if ((v155 & 0x80u) == 0) {
                    char v158 = (int *)(v145 + 24 * v144);
                  }
                  int v159 = *v158;
                  int v160 = *(int *)((char *)v158 + 3);
                  if (v159 != 1130321247 || v160 != 1599095107) {
                    break;
                  }
                  *((_DWORD *)v62 + 78) = v144;
                  v62[316] = 1;
                  ++v144;
                }
                char v162 = (int *)(v145 + 24 * v144);
                if ((char)v155 < 0)
                {
                  char v162 = *(int **)v154;
                  if (*(void *)(v154 + 8) < 7uLL) {
                    goto LABEL_376;
                  }
                }
                else if (v155 < 7)
                {
                  goto LABEL_376;
                }
                int v163 = *v162;
                int v164 = *(int *)((char *)v162 + 3);
                if (v163 == 1314870623 && v164 == 942691406)
                {
                  *((_DWORD *)v62 + 86) = v144;
                  v62[348] = 1;
                  unint64_t v155 = *(unsigned __int8 *)(v154 + 23);
                  char v156 = *(unsigned char *)(v154 + 23);
                  if (v156 < 0) {
                    goto LABEL_404;
                  }
LABEL_377:
                  if (v155 <= 4
                    || (*(_DWORD *)v154 == 1281977941 ? (BOOL v166 = *(unsigned char *)(v154 + 4) == 77) : (BOOL v166 = 0),
                        !v166
                     && (v155 < 6
                      || (*(_DWORD *)v154 == 1348425055 ? (BOOL v167 = *(unsigned __int16 *)(v154 + 4) == 17746) : (BOOL v167 = 0),
                          !v167)))
                    && (*(_DWORD *)v154 == 1314870623 ? (BOOL v168 = *(unsigned char *)(v154 + 4) == 84) : (BOOL v168 = 0), !v168))
                  {
                    char v338 = v156;
                    uint64_t v169 = 0;
                    while (1)
                    {
                      size_t v170 = strlen(off_1E59A1558[v169]);
                      if (v170 == -1) {
                        break;
                      }
                      size_t v171 = v170;
                      if (v155 >= v170) {
                        size_t v172 = v170;
                      }
                      else {
                        size_t v172 = v155;
                      }
                      int v173 = memcmp((const void *)v154, off_1E59A1558[v169], v172);
                      if (v171 == v155 && v173 == 0) {
                        goto LABEL_435;
                      }
                      if (++v169 == 100) {
                        goto LABEL_428;
                      }
                    }
LABEL_738:
                    sub_19E3C4C28();
                  }
                }
                else
                {
LABEL_376:
                  if ((v155 & 0x80) == 0) {
                    goto LABEL_377;
                  }
LABEL_404:
                  char v175 = *(int **)v154;
                  unint64_t v176 = *(void *)(v154 + 8);
                  if (v176 <= 4
                    || (*v175 == 1281977941 ? (BOOL v177 = *((unsigned char *)v175 + 4) == 77) : (BOOL v177 = 0),
                        !v177
                     && (v176 < 6
                      || (*v175 == 1348425055 ? (BOOL v178 = *((unsigned __int16 *)v175 + 2) == 17746) : (BOOL v178 = 0), !v178)))
                    && (*v175 == 1314870623 ? (BOOL v179 = *((unsigned char *)v175 + 4) == 84) : (BOOL v179 = 0), !v179))
                  {
                    __s1 = *(int **)v154;
                    char v338 = v156;
                    uint64_t v180 = 0;
                    while (1)
                    {
                      size_t v181 = strlen(off_1E59A1558[v180]);
                      if (v181 == -1) {
                        goto LABEL_738;
                      }
                      size_t v182 = v181;
                      size_t v183 = v176 >= v181 ? v181 : v176;
                      if (!memcmp(__s1, off_1E59A1558[v180], v183) && v176 == v182) {
                        break;
                      }
                      if (++v180 == 100)
                      {
LABEL_428:
                        if (v338 < 0)
                        {
                          uint64_t v189 = 0;
                          long long v190 = *(int **)v154;
                          size_t v191 = *(void *)(v154 + 8);
                          size_t v135 = (void **)(v62 + 320);
                          while (1)
                          {
                            size_t v192 = strlen(off_1E59A1878[v189]);
                            if (v191 >= v192 && !memcmp(v190, off_1E59A1878[v189], v192)) {
                              break;
                            }
                            if (++v189 == 29) {
                              goto LABEL_357;
                            }
                          }
                        }
                        else
                        {
                          uint64_t v185 = 0;
                          size_t v135 = (void **)(v62 + 320);
                          while (1)
                          {
                            size_t v186 = strlen(off_1E59A1878[v185]);
                            if (v186 <= v155 && !memcmp((const void *)v154, off_1E59A1878[v185], v186)) {
                              break;
                            }
                            if (++v185 == 29) {
                              goto LABEL_357;
                            }
                          }
                        }
                        sub_19E4435B0((float *)v62 + 68, v144, v144);
LABEL_357:
                        ++v144;
                        goto LABEL_331;
                      }
                    }
LABEL_435:
                    size_t v135 = (void **)(v62 + 320);
                    uint64_t v187 = *v347;
                    unint64_t v188 = ((unint64_t)v144 >> 3) & 0x1FFFFFF8;
LABEL_436:
                    *(void *)(v187 + v188) |= 1 << v144++;
                    goto LABEL_331;
                  }
                }
                size_t v135 = (void **)(v62 + 320);
                uint64_t v187 = *v347;
                unint64_t v188 = ((unint64_t)v144 >> 3) & 0x1FFFFFF8;
                goto LABEL_436;
              }
              uint64_t v110 = sub_19E38D7A0((void **)v62 + 19, v108);
              std::string::size_type v112 = v111;
              if (v111 > 0x7FFFFFFFFFFFFFF7) {
                sub_19E37C958();
              }
              uint64_t v113 = v110;
              if (v111 >= 0x17) {
                break;
              }
              *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v111;
              long long v114 = &__dst;
              if (v111) {
                goto LABEL_242;
              }
LABEL_243:
              v114->__r_.__value_.__s.__data_[v112] = 0;
              unint64_t v117 = *((void *)v62 + 5);
              if (v117 >= *((void *)v62 + 6))
              {
                float64x2x2_t v119 = sub_19E3FC244((char **)v62 + 4, (uint64_t)&__dst);
              }
              else
              {
                if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                {
                  sub_19E39369C(*((unsigned char **)v62 + 5), __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
                }
                else
                {
                  long long v118 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
                  *(void *)(v117 + 16) = *((void *)&__dst.__r_.__value_.__l + 2);
                  *(_OWORD *)unint64_t v117 = v118;
                }
                float64x2x2_t v119 = (char *)(v117 + 24);
                *((void *)v62 + 5) = v117 + 24;
              }
              *((void *)v62 + 5) = v119;
              if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                size_t v120 = &__dst;
              }
              else {
                size_t v120 = (std::string *)__dst.__r_.__value_.__r.__words[0];
              }
              std::string::size_type v121 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
              if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                std::string::size_type v121 = __dst.__r_.__value_.__l.__size_;
              }
              if (v121)
              {
                while (1)
                {
                  if (v120->__r_.__value_.__s.__data_[0] == 226 && v121 != 1)
                  {
                    BOOL v123 = v120->__r_.__value_.__s.__data_[1] != 150 || v121 == 2;
                    if (!v123 && v120->__r_.__value_.__s.__data_[2] == 129) {
                      break;
                    }
                  }
                  size_t v120 = (std::string *)((char *)v120 + 1);
                  if (!--v121) {
                    goto LABEL_255;
                  }
                }
                __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"▁";
                __p.__r_.__value_.__l.__size_ = (std::string::size_type)"";
                sub_19E443A10((unint64_t)v368, (uint64_t)&__dst, (uint64_t *)&__p, (unint64_t)"", "", (char *)v120, &v120->__r_.__value_.__s.__data_[3], (unint64_t)"", "");
              }
              else
              {
LABEL_255:
                if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                {
                  sub_19E39369C(v368, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
                }
                else
                {
                  *(_OWORD *)v368 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
                  v369[0] = (void *)__dst.__r_.__value_.__r.__words[2];
                }
              }
              sub_19E4DDFF0(&theDict, (uint64_t)v368, *((_DWORD *)v62 + 22));
              unint64_t v124 = *((void *)v62 + 8);
              if (v124 < *((void *)v62 + 9))
              {
                long long v125 = *(_OWORD *)&theDict.__r_.__value_.__l.__data_;
                *(void *)(v124 + 16) = *((void *)&theDict.__r_.__value_.__l + 2);
                *(_OWORD *)unint64_t v124 = v125;
                memset(&theDict, 0, sizeof(theDict));
                *((void *)v62 + 8) = v124 + 24;
                if ((SHIBYTE(v369[0]) & 0x80000000) == 0) {
                  goto LABEL_274;
                }
LABEL_271:
                operator delete((void *)v368[0]);
                goto LABEL_274;
              }
              long long v126 = sub_19E3EB1B8((void **)v62 + 7, (uint64_t)&theDict);
              int v127 = SHIBYTE(theDict.__r_.__value_.__r.__words[2]);
              *((void *)v62 + 8) = v126;
              if (v127 < 0)
              {
                operator delete(theDict.__r_.__value_.__l.__data_);
                if (SHIBYTE(v369[0]) < 0) {
                  goto LABEL_271;
                }
              }
              else if (SHIBYTE(v369[0]) < 0)
              {
                goto LABEL_271;
              }
LABEL_274:
              std::string::size_type v128 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
              char v129 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
              if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                std::string::size_type v128 = __dst.__r_.__value_.__l.__size_;
              }
              switch(v128)
              {
                case 3uLL:
                  long long v130 = (std::string *)__dst.__r_.__value_.__r.__words[0];
                  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    long long v130 = &__dst;
                  }
                  if (LOWORD(v130->__r_.__value_.__l.__data_) == 38626
                    && v130->__r_.__value_.__s.__data_[2] == 129)
                  {
                    *((_DWORD *)v62 + ++*(_DWORD *)(result + 24) = v108;
                  }
                  else if (LOWORD(v130->__r_.__value_.__l.__data_) == 29500 && v130->__r_.__value_.__s.__data_[2] == 62)
                  {
                    *((_DWORD *)v62 + 25) = v108;
                  }
                  break;
                case 4uLL:
                  long long v130 = (std::string *)__dst.__r_.__value_.__r.__words[0];
                  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    long long v130 = &__dst;
                  }
                  if (LODWORD(v130->__r_.__value_.__l.__data_) == 1047736124) {
                    *((_DWORD *)v62 + 26) = v108;
                  }
                  break;
                case 5uLL:
                  long long v130 = (std::string *)__dst.__r_.__value_.__r.__words[0];
                  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    long long v130 = &__dst;
                  }
                  if (LODWORD(v130->__r_.__value_.__l.__data_) == 1802401084
                    && v130->__r_.__value_.__s.__data_[4] == 62)
                  {
                    _DWORD *v355 = v108;
                  }
                  else if (LODWORD(v130->__r_.__value_.__l.__data_) == 1684107324 {
                         && v130->__r_.__value_.__s.__data_[4] == 62)
                  }
                  {
                    *((_DWORD *)v62 + 27) = v108;
                  }
                  break;
                default:
                  long long v130 = (std::string *)__dst.__r_.__value_.__r.__words[0];
                  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    long long v130 = &__dst;
                  }
                  break;
              }
              if ((*(_DWORD *)(v109 + 4 * v130->__r_.__value_.__s.__data_[0] + 60) & 0x400) != 0)
              {
                sub_19E4435B0(v352, v108, v108);
                char v129 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
              }
              if (v129 < 0) {
                operator delete(__dst.__r_.__value_.__l.__data_);
              }
              uint64_t v108 = (v108 + 1);
            }
            uint64_t v115 = (v111 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v111 | 7) != 0x17) {
              uint64_t v115 = v111 | 7;
            }
            uint64_t v116 = v115 + 1;
            long long v114 = (std::string *)operator new(v115 + 1);
            __dst.__r_.__value_.__l.__size_ = v112;
            __dst.__r_.__value_.__r.__words[2] = v116 | 0x8000000000000000;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v114;
LABEL_242:
            memmove(v114, v113, v112);
            goto LABEL_243;
          }
LABEL_89:
          CFRelease(v39);
          goto LABEL_90;
        default:
          goto LABEL_740;
      }
    }
    v317 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3BD790](v317, "Could not convert");
  }
  else
  {
    __p.__r_.__value_.__r.__words[0] = 0;
    v317 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3BD790](v317, "Could not construct");
  }
  __cxa_throw(v317, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_19E4D6878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_19E3933E0((uint64_t)&a64);
  if (a60 < 0) {
    operator delete(__p);
  }
  sub_19E3D7338(&a41);
  sub_19E3D73EC(a14);
  sub_19E3D73EC(a15);
  sub_19E3D73EC(a16);
  sub_19E3D73EC(a17);
  sub_19E3D73EC(a18);
  if (*(char *)(a23 + 23) < 0)
  {
    operator delete(*(void **)a23);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19E4D7EF0);
}

void sub_19E4D6DDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,const void *a61)
{
  __cxa_free_exception(v61);
  sub_19E3C6F1C(&a61);
  _Unwind_Resume(a1);
}

void sub_19E4D6E00()
{
}

void sub_19E4D6E34()
{
}

void sub_19E4D6E48()
{
  MEMORY[0x19F3BDCF0](v0, 0x10F2C40B098B26FLL);
  JUMPOUT(0x19E4D7DFCLL);
}

void sub_19E4D6E94(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,const void *a61)
{
  sub_19E43336C(&a61);
  sub_19E431E60(&a35);
  sub_19E3D73EC((uint64_t)&a39);
  if (a2 == 2)
  {
    __cxa_begin_catch(a1);
    exception = __cxa_allocate_exception(0x20uLL);
    sub_19E382340((void *)(v61 - 144), "Failed at loading Toucan language Model Resource");
    sub_19E3F5604(exception, (long long *)(v61 - 144));
    __cxa_throw(exception, (struct type_info *)&unk_1EF0B7540, (void (*)(void *))sub_19E3F56B0);
  }
  JUMPOUT(0x19E4D7EA0);
}

void sub_19E4D6EAC()
{
}

void sub_19E4D6EB8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,void *a49,uint64_t a50,void *__p,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  char v63 = __p;
  if (__p)
  {
    do
    {
      unsigned int v64 = (void *)*v63;
      operator delete(v63);
      char v63 = v64;
    }
    while (v64);
  }
  CFIndex v65 = a49;
  a49 = 0;
  if (v65) {
    operator delete(v65);
  }
  CFStringRef v66 = (char *)&STACK[0x200];
  uint64_t v67 = a57;
  if (a57)
  {
    do
    {
      double v68 = (void *)*v67;
      operator delete(v67);
      uint64_t v67 = v68;
    }
    while (v68);
  }
  uint64_t v69 = a55;
  a55 = 0;
  if (v69) {
    operator delete(v69);
  }
  uint64_t v70 = *(void **)(v62 - 128);
  if (v70)
  {
    do
    {
      uint64_t v71 = (void *)*v70;
      operator delete(v70);
      uint64_t v70 = v71;
    }
    while (v71);
  }
  unint64_t v72 = *(void **)(v62 - 144);
  *(void *)(v62 - 144) = 0;
  if (v72) {
    operator delete(v72);
  }
  while (1)
  {
    unint64_t v73 = (void *)*((void *)v66 - 3);
    if (v73)
    {
      do
      {
        std::string::size_type v74 = (void *)*v73;
        operator delete(v73);
        unint64_t v73 = v74;
      }
      while (v74);
    }
    BOOL v75 = (void *)*((void *)v66 - 5);
    *((void *)v66 - 5) = 0;
    if (v75) {
      operator delete(v75);
    }
    v66 -= 48;
    if (v66 == &a61)
    {
      std::__shared_weak_count::~__shared_weak_count(v61);
      operator delete(v76);
      uint64_t v77 = (std::__shared_weak_count *)a29[8];
      if (v77 && !atomic_fetch_add(&v77->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
        std::__shared_weak_count::__release_weak(v77);
      }
      uint64_t v78 = (std::__shared_weak_count *)a29[6];
      if (v78 && !atomic_fetch_add(&v78->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
        std::__shared_weak_count::__release_weak(v78);
      }
      unint64_t v79 = (std::__shared_weak_count *)a29[4];
      if (v79 && !atomic_fetch_add(&v79->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
        std::__shared_weak_count::__release_weak(v79);
      }
      sub_19E3D73EC((uint64_t)&a47);
      sub_19E3D73EC((uint64_t)&a36);
      JUMPOUT(0x19E4D7DE4);
    }
  }
}

void sub_19E4D6EC8()
{
}

void sub_19E4D6ED8()
{
  uint64_t v2 = *(void **)(v1 - 128);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)(v1 - 144);
  *(void *)(v1 - 144) = 0;
  if (v4) {
    operator delete(v4);
  }
  std::__shared_weak_count::~__shared_weak_count(v0);
  operator delete(v5);
  JUMPOUT(0x19E4D7964);
}

void sub_19E4D6EFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  unint64_t v48 = (std::__shared_weak_count *)v47[8];
  if (v48 && !atomic_fetch_add(&v48->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
    std::__shared_weak_count::__release_weak(v48);
  }
  unint64_t v49 = (std::__shared_weak_count *)v47[6];
  if (v49 && !atomic_fetch_add(&v49->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
    std::__shared_weak_count::__release_weak(v49);
  }
  std::string::size_type v50 = (std::__shared_weak_count *)v47[4];
  if (v50 && !atomic_fetch_add(&v50->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
    std::__shared_weak_count::__release_weak(v50);
  }
  sub_19E3D73EC(&a47);
  sub_19E3D73EC(&a36);
  JUMPOUT(0x19E4D7DE4);
}

void sub_19E4D6F0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,std::__shared_weak_count *a62)
{
  if (v63 && !atomic_fetch_add(&v63->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
    std::__shared_weak_count::__release_weak(v63);
  }
  unsigned int v64 = a62;
  if (a62 && !atomic_fetch_add(&a62->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
    std::__shared_weak_count::__release_weak(v64);
  }
  CFIndex v65 = v62[2].__vftable;
  if (v65) {
    CFRelease(v65);
  }
  v62[2].__vftable = 0;
  shared_weak_owners = (std::__shared_weak_count *)v62[1].__shared_weak_owners_;
  if (shared_weak_owners && !atomic_fetch_add(&shared_weak_owners->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))shared_weak_owners->__on_zero_shared)(shared_weak_owners);
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  sub_19E3D73EC((uint64_t)&a44);
  sub_19E3D73EC((uint64_t)&a49);
  sub_19E3D73EC((uint64_t)&a55);
  std::__shared_weak_count::~__shared_weak_count(v62);
  operator delete(v67);
  JUMPOUT(0x19E4D7DF4);
}

void sub_19E4D6FB0()
{
  if (!*(void *)(v0 + 48)) {
    JUMPOUT(0x19E4D7D84);
  }
  JUMPOUT(0x19E4D7D80);
}

void sub_19E4D6FC4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (v23) {
    CFRelease(v23);
  }
  JUMPOUT(0x19E4D7D88);
}

void sub_19E4D6FEC(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  sub_19E431E60(&a35);
  sub_19E3D73EC(&a39);
  if (a2 == 2)
  {
    __cxa_begin_catch(a1);
    exception = __cxa_allocate_exception(0x20uLL);
    sub_19E382340(v39 - 144, "Failed at loading Toucan language Model Resource");
    sub_19E3F5604(exception, v39 - 144);
    __cxa_throw(exception, (struct type_info *)&unk_1EF0B7540, (void (*)(void *))sub_19E3F56B0);
  }
  JUMPOUT(0x19E4D7EA0);
}

void sub_19E4D6FF8()
{
  (*(void (**)(uint64_t))(*(void *)v0 + 8))(v0);
  JUMPOUT(0x19E4D7A94);
}

void sub_19E4D702C()
{
}

void sub_19E4D703C()
{
}

void sub_19E4D7050()
{
}

void sub_19E4D707C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,const void *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *__p,uint64_t a62,int a63)
{
  if (*(char *)(v69 - 121) < 0)
  {
    operator delete(*(void **)(v69 - 144));
    if ((v67 & 1) == 0) {
      goto LABEL_6;
    }
  }
  else if (!v67)
  {
LABEL_6:
    if (a67 && a66 < 0) {
      operator delete(__p);
    }
    sub_19E3C6EAC(&a55);
    JUMPOUT(0x19E4D7E04);
  }
  __cxa_free_exception(v68);
  goto LABEL_6;
}

void sub_19E4D70EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void **a26,void **a27,uint64_t a28,void **a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  v49[5] = v50;
  if (*(char *)(v52 - 121) < 0) {
    operator delete(*(void **)(v52 - 144));
  }
  sub_19E382EFC(v51);
  __n128 v53 = (void *)v49[16];
  if (v53)
  {
    do
    {
      unint64_t v54 = (void *)*v53;
      operator delete(v53);
      __n128 v53 = v54;
    }
    while (v54);
  }
  char v55 = *a29;
  *a29 = 0;
  if (v55) {
    operator delete(v55);
  }
  unint64_t v56 = (const void *)v49[10];
  if (v56) {
    CFRelease(v56);
  }
  v49[10] = 0;
  CFIndex v57 = (void **)*a26;
  if (*a26)
  {
    CFStringRef v58 = (void **)v49[8];
    uint64_t v59 = *a26;
    if (v58 != v57)
    {
      do
      {
        if (*((char *)v58 - 1) < 0) {
          operator delete(*(v58 - 3));
        }
        v58 -= 3;
      }
      while (v58 != v57);
      uint64_t v59 = *a26;
    }
    v49[8] = v57;
    operator delete(v59);
  }
  unsigned int v60 = (void **)*a27;
  if (*a27)
  {
    uint64_t v61 = (void **)v49[5];
    uint64_t v62 = *a27;
    if (v61 != v60)
    {
      do
      {
        if (*((char *)v61 - 1) < 0) {
          operator delete(*(v61 - 3));
        }
        v61 -= 3;
      }
      while (v61 != v60);
      uint64_t v62 = *a27;
    }
    v49[5] = v60;
    operator delete(v62);
  }
  if (a49 < 0) {
    operator delete(a44);
  }
  JUMPOUT(0x19E4D7BD8);
}

void sub_19E4D7104(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void **a26,void **a27,uint64_t a28,void **a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  v49[5] = v50;
  if (*(char *)(v52 - 121) < 0) {
    operator delete(*(void **)(v52 - 144));
  }
  sub_19E382EFC(v51);
  __n128 v53 = (void *)v49[16];
  if (v53)
  {
    do
    {
      unint64_t v54 = (void *)*v53;
      operator delete(v53);
      __n128 v53 = v54;
    }
    while (v54);
  }
  char v55 = *a29;
  *a29 = 0;
  if (v55) {
    operator delete(v55);
  }
  unint64_t v56 = (const void *)v49[10];
  if (v56) {
    CFRelease(v56);
  }
  v49[10] = 0;
  CFIndex v57 = (void **)*a26;
  if (*a26)
  {
    CFStringRef v58 = (void **)v49[8];
    uint64_t v59 = *a26;
    if (v58 != v57)
    {
      do
      {
        if (*((char *)v58 - 1) < 0) {
          operator delete(*(v58 - 3));
        }
        v58 -= 3;
      }
      while (v58 != v57);
      uint64_t v59 = *a26;
    }
    v49[8] = v57;
    operator delete(v59);
  }
  unsigned int v60 = (void **)*a27;
  if (*a27)
  {
    uint64_t v61 = (void **)v49[5];
    uint64_t v62 = *a27;
    if (v61 != v60)
    {
      do
      {
        if (*((char *)v61 - 1) < 0) {
          operator delete(*(v61 - 3));
        }
        v61 -= 3;
      }
      while (v61 != v60);
      uint64_t v62 = *a27;
    }
    v49[5] = v60;
    operator delete(v62);
  }
  if (a49 < 0) {
    operator delete(a44);
  }
  JUMPOUT(0x19E4D7D28);
}

void sub_19E4D7138(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,int a63)
{
  uint64_t v78 = *(void ***)(v77 + 104);
  if (v78)
  {
    do
    {
      long long v80 = (void **)*v78;
      if (*((char *)v78 + 39) < 0) {
        operator delete(v78[2]);
      }
      operator delete(v78);
      uint64_t v78 = v80;
    }
    while (v80);
  }
  unint64_t v79 = *v76;
  *uint64_t v76 = 0;
  if (v79)
  {
    operator delete(v79);
    if (SLOBYTE(STACK[0x217]) < 0)
    {
LABEL_4:
      operator delete((void *)STACK[0x200]);
      if ((a76 & 0x80000000) == 0) {
        goto LABEL_5;
      }
      goto LABEL_14;
    }
  }
  else if (SLOBYTE(STACK[0x217]) < 0)
  {
    goto LABEL_4;
  }
  if ((a76 & 0x80000000) == 0)
  {
LABEL_5:
    if (a74 < 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  operator delete(a75);
  if (a74 < 0)
  {
LABEL_6:
    operator delete(a73);
    if ((a72 & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  if ((a72 & 0x80000000) == 0)
  {
LABEL_7:
    if ((a66 & 0x80000000) == 0)
    {
LABEL_18:
      unint64_t v81 = *(std::__shared_weak_count **)(a29 + 80);
      if (v81)
      {
        if (!atomic_fetch_add(&v81->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
          std::__shared_weak_count::__release_weak(v81);
        }
      }
      JUMPOUT(0x19E4D7964);
    }
LABEL_17:
    operator delete(a61);
    goto LABEL_18;
  }
LABEL_16:
  operator delete(a67);
  if ((a66 & 0x80000000) == 0) {
    goto LABEL_18;
  }
  goto LABEL_17;
}

void sub_19E4D71FC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p)
{
  uint64_t v51 = __p;
  if (__p)
  {
    do
    {
      uint64_t v52 = (void *)*v51;
      operator delete(v51);
      uint64_t v51 = v52;
    }
    while (v52);
  }
  if (a49) {
    JUMPOUT(0x19E4D77D4);
  }
  JUMPOUT(0x19E4D77D8);
}

void sub_19E4D7230(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,void *__p)
{
  CFStringRef v58 = __p;
  if (__p)
  {
    do
    {
      uint64_t v59 = (void *)*v58;
      operator delete(v58);
      CFStringRef v58 = v59;
    }
    while (v59);
  }
  if (a55) {
    operator delete(a55);
  }
  unsigned int v60 = *(void **)(v57 - 128);
  if (v60)
  {
    do
    {
      uint64_t v61 = (void *)*v60;
      operator delete(v60);
      unsigned int v60 = v61;
    }
    while (v61);
  }
  uint64_t v62 = *(void **)(v57 - 144);
  *(void *)(v57 - 144) = 0;
  if (v62) {
    operator delete(v62);
  }
  JUMPOUT(0x19E4D7834);
}

void sub_19E4D728C()
{
  uint64_t v1 = *(void **)(v0 - 128);
  if (v1)
  {
    do
    {
      uint64_t v2 = (void *)*v1;
      operator delete(v1);
      uint64_t v1 = v2;
    }
    while (v2);
  }
  uint64_t v3 = *(void **)(v0 - 144);
  *(void *)(v0 - 144) = 0;
  if (v3) {
    operator delete(v3);
  }
  JUMPOUT(0x19E4D78B4);
}

void sub_19E4D72C8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void **a26,long long a27,long long a28,long long a29)
{
  if ((void)a29)
  {
    for (uint64_t i = *((void *)&a29 + 1); i != (void)a29; i -= 24)
    {
      if (*(char *)(i - 1) < 0) {
        operator delete(*(void **)(i - 24));
      }
    }
    operator delete((void *)a29);
    if (!v32)
    {
LABEL_3:
      if (!v34) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }
  else if (!v32)
  {
    goto LABEL_3;
  }
  for (uint64_t j = (void **)a28; j != v32; j -= 3)
  {
    if (*((char *)j - 1) < 0) {
      operator delete(*(j - 3));
    }
  }
  operator delete(v32);
  if (!v34)
  {
LABEL_4:
    int v35 = *(void ***)(v30 + 472);
    if (!v35) {
      goto LABEL_24;
    }
    goto LABEL_32;
  }
LABEL_18:
  for (k = (void **)a27; k != v34; k -= 3)
  {
    if (*((char *)k - 1) < 0) {
      operator delete(*(k - 3));
    }
  }
  operator delete(v34);
  int v35 = *(void ***)(v30 + 472);
  if (!v35)
  {
LABEL_24:
    uint64_t v39 = *v33;
    std::string *v33 = 0;
    if (v39) {
      operator delete(v39);
    }
    size_t v40 = *(void ***)(v30 + 432);
    if (v40)
    {
      do
      {
        std::string::size_type v43 = (void **)*v40;
        if (*((char *)v40 + 39) < 0) {
          operator delete(v40[2]);
        }
        operator delete(v40);
        size_t v40 = v43;
      }
      while (v43);
    }
    uint64_t v41 = *v29;
    *CFStringRef v29 = 0;
    if (v41)
    {
      operator delete(v41);
      if (*(char *)(v30 + 415) < 0)
      {
LABEL_29:
        operator delete(*v31);
        if (!*(unsigned char *)(v30 + 384)) {
          goto LABEL_41;
        }
        goto LABEL_39;
      }
    }
    else if (*(char *)(v30 + 415) < 0)
    {
      goto LABEL_29;
    }
    if (!*(unsigned char *)(v30 + 384)) {
      goto LABEL_41;
    }
LABEL_39:
    if (*(char *)(v30 + 383) < 0) {
      operator delete(*(void **)(v30 + 360));
    }
LABEL_41:
    *a20 = a11;
    if (*a26) {
      operator delete(*a26);
    }
    std::string::size_type v44 = *(void **)(v30 + 288);
    if (v44)
    {
      do
      {
        uint64_t v45 = (void *)*v44;
        operator delete(v44);
        std::string::size_type v44 = v45;
      }
      while (v45);
    }
    JUMPOUT(0x19E4D7660);
  }
  do
  {
LABEL_32:
    std::string::size_type v42 = (void **)*v35;
    if (*((char *)v35 + 39) < 0) {
      operator delete(v35[2]);
    }
    operator delete(v35);
    int v35 = v42;
  }
  while (v42);
  goto LABEL_24;
}

void sub_19E4D7488()
{
  if (*(char *)(v0 - 121) < 0) {
    operator delete(*(void **)(v0 - 144));
  }
  JUMPOUT(0x19E4D7AE4);
}

void sub_19E4D7560(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if ((a54 & 0x80000000) == 0) {
    JUMPOUT(0x19E4D7570);
  }
  JUMPOUT(0x19E4D74BCLL);
}

void sub_19E4D759C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if ((a54 & 0x80000000) == 0) {
    JUMPOUT(0x19E4D75ACLL);
  }
  JUMPOUT(0x19E4D74FCLL);
}

void sub_19E4D7630(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void **a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36)
{
  if (*a26) {
    operator delete(*a26);
  }
  int v37 = v36[12].__vftable;
  if (v37)
  {
    do
    {
      int v38 = v37->~__shared_weak_count;
      operator delete(v37);
      int v37 = (std::__shared_weak_count_vtbl *)v38;
    }
    while (v38);
  }
  uint64_t v39 = *a12;
  *a12 = 0;
  if (v39) {
    operator delete(v39);
  }
  sub_19E4F9738(a20);
  std::__shared_weak_count::~__shared_weak_count(v36);
  operator delete(v40);
  sub_19E3D7338(&a36);
  JUMPOUT(0x19E4D7DFCLL);
}

void sub_19E4D7684(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void **a27)
{
  if (*a27) {
    operator delete(*a27);
  }
  CFStringRef v29 = v27[12].__vftable;
  if (v29)
  {
    do
    {
      uint64_t v30 = v29->~__shared_weak_count;
      operator delete(v29);
      CFStringRef v29 = (std::__shared_weak_count_vtbl *)v30;
    }
    while (v30);
  }
  std::string::size_type v31 = *v28;
  *char v28 = 0;
  if (v31) {
    operator delete(v31);
  }
  sub_19E4433C0(a20);
  std::__shared_weak_count::~__shared_weak_count(v27);
  operator delete(v32);
  JUMPOUT(0x19E4D7DFCLL);
}

void sub_19E4D76DC()
{
}

void sub_19E4D76EC()
{
}

void sub_19E4D76FC()
{
}

void sub_19E4D7710()
{
}

void sub_19E4D78CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *__p,uint64_t a62,int a63)
{
  if (a66 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x19E4D78F8);
}

void sub_19E4D78F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t v30 = *(void ***)(a29 + 104);
  if (v30)
  {
    do
    {
      float32x4_t v32 = (void **)*v30;
      if (*((char *)v30 + 39) < 0) {
        operator delete(v30[2]);
      }
      operator delete(v30);
      uint64_t v30 = v32;
    }
    while (v32);
  }
  uint64_t v31 = *v29;
  *CFStringRef v29 = 0;
  if (v31) {
    JUMPOUT(0x19E4D7910);
  }
  JUMPOUT(0x19E4D7914);
}

void sub_19E4D7A7C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,const void *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,const void *a49)
{
  sub_19E3F68C0(&a44);
  sub_19E3C6F1C(&a49);
  sub_19E3D73EC((uint64_t)&a33);
  sub_19E431E60(&a35);
  sub_19E3D73EC((uint64_t)&a39);
  if (a2 == 2)
  {
    __cxa_begin_catch(a1);
    exception = __cxa_allocate_exception(0x20uLL);
    sub_19E382340((void *)(v49 - 144), "Failed at loading Toucan language Model Resource");
    sub_19E3F5604(exception, (long long *)(v49 - 144));
    __cxa_throw(exception, (struct type_info *)&unk_1EF0B7540, (void (*)(void *))sub_19E3F56B0);
  }
  sub_19E3D7338(&a41);
  sub_19E3D73EC(a14);
  sub_19E3D73EC(a15);
  sub_19E3D73EC(a16);
  sub_19E3D73EC(a17);
  sub_19E3D73EC(a18);
  if (*(char *)(a23 + 23) < 0)
  {
    operator delete(*(void **)a23);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_19E4D7AA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *__p,uint64_t a62,int a63)
{
  if (a66 < 0)
  {
    operator delete(__p);
    if ((v66 & 1) == 0) {
      goto LABEL_6;
    }
  }
  else if (!v66)
  {
LABEL_6:
    sub_19E3AD4CC((uint64_t *)(v68 - 144));
    JUMPOUT(0x19E4D7AE4);
  }
  __cxa_free_exception(v67);
  goto LABEL_6;
}

void sub_19E4D7BF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *__p,uint64_t a62,int a63)
{
  if (a66 < 0)
  {
    operator delete(__p);
    if ((v66 & 1) == 0) {
      goto LABEL_6;
    }
  }
  else if (!v66)
  {
LABEL_6:
    sub_19E3AD4CC((uint64_t *)(v68 - 144));
    JUMPOUT(0x19E4D7C34);
  }
  __cxa_free_exception(v67);
  goto LABEL_6;
}

void sub_19E4D7D3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,int a63)
{
  uint64_t v68 = *(void **)(v67 - 144);
  if (v68)
  {
    *(void *)(v67 - 136) = v68;
    operator delete(v68);
    if (a66 < 0)
    {
LABEL_3:
      operator delete(a61);
      if (*(void *)(v66 + 48)) {
LABEL_7:
      }
        JUMPOUT(0x19E4D7D80);
LABEL_8:
      JUMPOUT(0x19E4D7D84);
    }
  }
  else if (a66 < 0)
  {
    goto LABEL_3;
  }
  if (*(void *)(v66 + 48)) {
    goto LABEL_7;
  }
  goto LABEL_8;
}

void sub_19E4D7E6C()
{
  if (*(char *)(v2 - 121) < 0)
  {
    operator delete(*(void **)(v2 - 144));
    if ((v0 & 1) == 0) {
      goto LABEL_6;
    }
  }
  else if (!v0)
  {
LABEL_6:
    __cxa_end_catch();
    JUMPOUT(0x19E4D7EA0);
  }
  __cxa_free_exception(v1);
  goto LABEL_6;
}

void sub_19E4D7EE8(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x19E4D7EF0);
  }
  sub_19E37B770(a1);
}

void sub_19E4D7F74(uint64_t a1)
{
  if (*(char *)(a1 + 151) < 0)
  {
    operator delete(*(void **)(a1 + 128));
    uint64_t v2 = *(void ***)(a1 + 104);
    if (!v2) {
      goto LABEL_5;
    }
  }
  else
  {
    uint64_t v2 = *(void ***)(a1 + 104);
    if (!v2) {
      goto LABEL_5;
    }
  }
  do
  {
    uint64_t v6 = (void **)*v2;
    if (*((char *)v2 + 39) < 0) {
      operator delete(v2[2]);
    }
    operator delete(v2);
    uint64_t v2 = v6;
  }
  while (v6);
LABEL_5:
  uint64_t v3 = *(void **)(a1 + 88);
  *(void *)(a1 + 88) = 0;
  if (v3) {
    operator delete(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 80);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    uint64_t v5 = *(std::__shared_weak_count **)(a1 + 64);
    if (!v5) {
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v5 = *(std::__shared_weak_count **)(a1 + 64);
    if (!v5) {
      goto LABEL_16;
    }
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_16:
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 48);
  if (v7 && !atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    CFStringRef v8 = *(std::__shared_weak_count **)(a1 + 32);
    if (!v8) {
      return;
    }
  }
  else
  {
    CFStringRef v8 = *(std::__shared_weak_count **)(a1 + 32);
    if (!v8) {
      return;
    }
  }
  if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void sub_19E4D8148(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0BE648;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19F3BDCF0);
}

void sub_19E4D819C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0BE648;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *sub_19E4D81C0(uint64_t a1)
{
  return sub_19E44DA2C((void *)(a1 + 24));
}

void sub_19E4D81C8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0BE6F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19F3BDCF0);
}

void sub_19E4D821C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0BE6F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t sub_19E4D8240(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_19E4D8264(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0BE680;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19F3BDCF0);
}

void sub_19E4D82B8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0BE680;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_19E4D82DC(void *a1)
{
  uint64_t v2 = (void *)a1[25];
  if (v2)
  {
    a1[26] = v2;
    operator delete(v2);
  }
  sub_19E44DB14(a1 + 8);
  uint64_t v3 = (const void *)a1[6];
  if (v3) {
    CFRelease(v3);
  }
  a1[6] = 0;
  uint64_t v4 = (std::__shared_weak_count *)a1[5];
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_19E4D8388(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0BE6B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19F3BDCF0);
}

void sub_19E4D83DC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0BE6B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t sub_19E4D8400(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN2LM19NeuralLanguageModelEEE"
    || ((v3 & (unint64_t)"NSt3__114default_deleteIN2LM19NeuralLanguageModelEEE" & 0x8000000000000000) != 0) != __OFSUB__(v3, "NSt3__114default_deleteIN2LM19NeuralLanguageModelEEE")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN2LM19NeuralLanguageModelEEE" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_19E4D8458(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void sub_19E4D8488(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19F3BDCF0);
}

void sub_19E4D84C4(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void sub_19E4D84CC()
{
}

void sub_19E4D84F8(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void sub_19E4D8504()
{
}

void sub_19E4D8530()
{
}

void sub_19E4D855C()
{
}

uint64_t sub_19E4D8588()
{
  return 1;
}

uint64_t sub_19E4D8590()
{
  return 0;
}

uint64_t sub_19E4D8598()
{
  return 0;
}

uint64_t sub_19E4D85A0()
{
  return 0;
}

uint64_t sub_19E4D85A8()
{
  return 0;
}

uint64_t sub_19E4D85B0()
{
  return 32;
}

uint64_t sub_19E4D85B8()
{
  return 0;
}

uint64_t sub_19E4D85C0()
{
  return 0;
}

uint64_t sub_19E4D85C8()
{
  return 0;
}

uint64_t sub_19E4D85D0()
{
  return 3;
}

void sub_19E4D85D8()
{
}

uint64_t sub_19E4D85F4(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_19E4D8618(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0BE5A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19F3BDCF0);
}

void sub_19E4D866C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0BE5A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_19E4D868C(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v52 = 0;
  __n128 v53 = 0;
  unint64_t v54 = 0;
  uint64_t v7 = *(const void **)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  int64_t v8 = v6 - *(void *)a1;
  if (v6 == *(void *)a1)
  {
    CFStringRef v9 = 0;
    CFTypeID v10 = 0;
  }
  else
  {
    if (v8 < 0) {
      sub_19E37C7C4();
    }
    CFStringRef v9 = (char *)operator new(v6 - *(void *)a1);
    CFTypeID v10 = &v9[4 * (v8 >> 2)];
    uint64_t v52 = v9;
    unint64_t v54 = v10;
    memcpy(v9, v7, v8);
    __n128 v53 = v10;
  }
  uint64_t v11 = v10 - v9;
  uint64_t v12 = (v10 - v9) >> 2;
  unint64_t v13 = v12 + 1;
  if ((unint64_t)(v12 + 1) >> 62) {
    sub_19E37C7C4();
  }
  if (v11 >> 1 > v13) {
    unint64_t v13 = v11 >> 1;
  }
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v14 = v13;
  }
  if (v14)
  {
    if (v14 >> 62) {
      sub_19E37C2B8();
    }
    std::string::size_type v15 = (char *)operator new(4 * v14);
  }
  else
  {
    std::string::size_type v15 = 0;
  }
  std::string::size_type v16 = &v15[4 * v12];
  int64_t v17 = &v15[4 * v14];
  *(_DWORD *)std::string::size_type v16 = *(_DWORD *)a2;
  uint64_t v18 = v16 + 4;
  if (v10 != v9)
  {
    unint64_t v19 = v10 - v9 - 4;
    if (v19 < 0x1C)
    {
      uint64_t v20 = v10;
      do
      {
LABEL_21:
        int v26 = *((_DWORD *)v20 - 1);
        v20 -= 4;
        *((_DWORD *)v16 - 1) = v26;
        v16 -= 4;
      }
      while (v20 != v9);
      goto LABEL_22;
    }
    uint64_t v21 = (v19 >> 2) + 1;
    uint64_t v20 = &v10[-4 * (v21 & 0x7FFFFFFFFFFFFFF8)];
    uint64_t v22 = &v15[4 * v12 - 16];
    std::string::size_type v23 = v10 - 16;
    uint64_t v24 = v21 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v25 = *(_OWORD *)v23;
      *((_OWORD *)v22 - 1) = *((_OWORD *)v23 - 1);
      *(_OWORD *)uint64_t v22 = v25;
      v22 -= 32;
      v23 -= 32;
      v24 -= 8;
    }
    while (v24);
    v16 -= 4 * (v21 & 0x7FFFFFFFFFFFFFF8);
    if (v21 != (v21 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_21;
    }
  }
LABEL_22:
  uint64_t v52 = v16;
  unint64_t v54 = v17;
  if (v9) {
    operator delete(v9);
  }
  __n128 v53 = v18;
  float v27 = *(float *)(a1 + 24);
  float v28 = log10f(*(float *)(a2 + 4));
  std::string __p = 0;
  uint64_t v50 = 0;
  unint64_t v51 = 0;
  CFStringRef v29 = *(void **)(a1 + 240);
  for (uint64_t i = *(void **)(a1 + 248); v29 != i; v29 += 3)
  {
    (*(void (**)(char **__return_ptr))(*(void *)*v29 + 24))(&v44);
    if ((*(unsigned int (**)(char *))(*(void *)v44 + 16))(v44))
    {
      *(void *)&long long v47 = v44;
      if (v44) {
        operator new();
      }
      long long v47 = 0uLL;
      std::string::size_type v44 = 0;
      uint64_t v31 = v29[2] + 1;
      uint64_t v48 = v31;
      float32x4_t v32 = v50;
      if ((unint64_t)v50 >= v51)
      {
        float32x4_t v33 = sub_19E449D98((char **)&__p, (uint64_t)&v47);
        int v34 = (std::__shared_weak_count *)*((void *)&v47 + 1);
        uint64_t v50 = v33;
        if (*((void *)&v47 + 1)
          && !atomic_fetch_add((atomic_ullong *volatile)(*((void *)&v47 + 1) + 8), 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      else
      {
        *(void *)uint64_t v50 = 0;
        *((void *)v32 + 1) = 0;
        *((void *)v32 + 2) = v31;
        uint64_t v50 = v32 + 24;
      }
    }
    int v35 = v44;
    std::string::size_type v44 = 0;
    if (v35) {
      (*(void (**)(char *))(*(void *)v35 + 8))(v35);
    }
  }
  long long v47 = 0uLL;
  uint64_t v48 = 0;
  uint64_t v36 = *(void *)(a1 + 264);
  std::string::size_type v44 = 0;
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  int v38 = *(unsigned char **)(a1 + 280);
  int v37 = *(unsigned char **)(a1 + 288);
  int64_t v39 = v37 - v38;
  if (v37 == v38)
  {
    size_t v40 = 0;
  }
  else
  {
    if (v39 < 0) {
      sub_19E37C7C4();
    }
    size_t v40 = (char *)operator new(v37 - v38);
    std::string::size_type v44 = v40;
    uint64_t v46 = &v40[4 * (v39 >> 2)];
    memcpy(v40, v38, v39);
    uint64_t v45 = &v40[4 * (v39 >> 2)];
  }
  sub_19E49FE30(a3, (uint64_t)&v52, &v47, a1 + 56, (uint64_t)&__p, v36 + 1, 0, (uint64_t)&v44, v28 + v27, 0.0);
  if (v40) {
    operator delete(v40);
  }
  uint64_t v41 = (char *)__p;
  if (__p)
  {
    std::string::size_type v42 = v50;
    if (v50 != __p)
    {
      do
      {
        std::string::size_type v43 = (std::__shared_weak_count *)*((void *)v42 - 2);
        if (v43 && !atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
        v42 -= 24;
      }
      while (v42 != v41);
      uint64_t v41 = (char *)__p;
    }
    operator delete(v41);
  }
  if (v52)
  {
    __n128 v53 = v52;
    operator delete(v52);
  }
}

void sub_19E4D8B08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (v19) {
    operator delete(v19);
  }
  sub_19E4449B8(&a15);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_19E4D8BAC(uint64_t a1, unsigned int *a2)
{
  return (*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 200))(*(void *)(a1 + 8), *a2);
}

void sub_19E4D8BD8(void *a1)
{
  *a1 = &unk_1EF0BB9D8;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x19F3BDCF0);
}

void *sub_19E4D8C80(void *a1)
{
  *a1 = &unk_1EF0BB9D8;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

uint64_t sub_19E4D8D0C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_19E4D8D30(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0BE610;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19F3BDCF0);
}

void sub_19E4D8D84(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0BE610;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t sub_19E4D8DA8(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_19E4D8DCC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0BE338;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19F3BDCF0);
}

void sub_19E4D8E20(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0BE338;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_19E4D8E40(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  std::string __p = 0;
  uint64_t v24 = 0;
  unint64_t v25 = 0;
  uint64_t v6 = *(void **)(a1 + 240);
  for (uint64_t i = *(void **)(a1 + 248); v6 != i; v6 += 3)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*v6 + 24))(&v19);
    uint64_t v20 = v19;
    if (v19) {
      operator new();
    }
    uint64_t v21 = 0;
    uint64_t v19 = 0;
    uint64_t v8 = v6[2] + 1;
    uint64_t v22 = v8;
    CFStringRef v9 = v24;
    if ((unint64_t)v24 >= v25)
    {
      CFTypeID v10 = sub_19E449D98((char **)&__p, (uint64_t)&v20);
      uint64_t v11 = v21;
      uint64_t v24 = v10;
      if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    else
    {
      *(void *)uint64_t v24 = 0;
      *((void *)v9 + 1) = 0;
      *((void *)v9 + 2) = v8;
      uint64_t v24 = v9 + 24;
    }
    uint64_t v12 = v19;
    uint64_t v19 = 0;
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
  }
  float v13 = *(float *)(a1 + 24);
  float v14 = log10f(*(float *)(a2 + 4));
  uint64_t v15 = *(void *)(a1 + 264) + 1;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  sub_19E49FE30(a3, a1, (long long *)(a1 + 32), a1 + 56, (uint64_t)&__p, v15, 0, (uint64_t)&v20, v14 + v13, 0.0);
  std::string::size_type v16 = (char *)__p;
  if (__p)
  {
    int64_t v17 = v24;
    if (v24 != __p)
    {
      do
      {
        uint64_t v18 = (std::__shared_weak_count *)*((void *)v17 - 2);
        if (v18)
        {
          if (!atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v18);
          }
        }
        v17 -= 24;
      }
      while (v17 != v16);
      std::string::size_type v16 = (char *)__p;
    }
    operator delete(v16);
  }
}

void sub_19E4D90B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_19E4449B8((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E4D9118(uint64_t a1, unsigned int *a2, char a3)
{
  if (a3) {
    return 0;
  }
  else {
    return (*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 152))(*(void *)(a1 + 8), *a2);
  }
}

void sub_19E4D9150(void *a1)
{
  *a1 = &unk_1EF0BB9A8;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x19F3BDCF0);
}

void *sub_19E4D91F8(void *a1)
{
  *a1 = &unk_1EF0BB9A8;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

uint64_t sub_19E4D9284(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_19E4D92A8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0BE5D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19F3BDCF0);
}

void sub_19E4D92FC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0BE5D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t sub_19E4D9320(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_19E4D9344(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0BE300;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19F3BDCF0);
}

void sub_19E4D9398(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0BE300;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t sub_19E4D93B8(uint64_t a1)
{
  return a1 + 8;
}

void sub_19E4D93C0(void *a1)
{
  *a1 = &unk_1EF0BB0A8;
  uint64_t v1 = (const void *)a1[1];
  if (v1) {
    CFRelease(v1);
  }
  JUMPOUT(0x19F3BDCF0);
}

void *sub_19E4D9430(void *a1)
{
  *a1 = &unk_1EF0BB0A8;
  uint64_t v2 = (const void *)a1[1];
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void sub_19E4D9480(uint64_t a1, char a2, double a3)
{
  unint64_t v3 = *(NSObject **)(a1 + 280);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = sub_19E4D94FC;
  block[3] = &unk_1E59A1020;
  block[4] = a1;
  *(double *)&block[5] = a3;
  char v5 = a2;
  dispatch_sync(v3, block);
}

void sub_19E4D94FC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = (int)((*(double *)(a1 + 40) - *(double *)(v1 + 264)) * 0.0000115740741);
  if (*(unsigned char *)(a1 + 48))
  {
    if (v2 <= 1) {
      int v2 = 1;
    }
  }
  else if (v2 < 1)
  {
    return;
  }
  unint64_t v3 = *(void **)(v1 + 160);
  if (v3 != (void *)(v1 + 168))
  {
    do
    {
      uint64_t v4 = (void *)v3[7];
      int v5 = v2;
      if (v4 != v3 + 8)
      {
        do
        {
          CFStringRef v9 = v4;
          do
          {
            *((_DWORD *)v9 + 14) = (int)((double)*((int *)v9 + 14) * 0.95);
            CFTypeID v10 = (void *)v9[1];
            if (v10)
            {
              do
              {
                uint64_t v11 = v10;
                CFTypeID v10 = (void *)*v10;
              }
              while (v10);
            }
            else
            {
              do
              {
                uint64_t v11 = (void *)v9[2];
                BOOL v12 = *v11 == (void)v9;
                CFStringRef v9 = v11;
              }
              while (!v12);
            }
            CFStringRef v9 = v11;
          }
          while (v11 != v3 + 8);
          BOOL v8 = __OFSUB__(v5--, 1);
        }
        while (!((v5 < 0) ^ v8 | (v5 == 0)));
      }
      uint64_t v6 = (void *)v3[1];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          uint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (void *)v3[2];
          BOOL v12 = *v7 == (void)v3;
          unint64_t v3 = v7;
        }
        while (!v12);
      }
      unint64_t v3 = v7;
    }
    while (v7 != (void *)(v1 + 168));
  }
  *(CFAbsoluteTime *)(v1 + 264) = CFAbsoluteTimeGetCurrent();
}

void sub_19E4D962C(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(a1 + 280);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = sub_19E4D96A0;
  block[3] = &unk_1E59A1000;
  block[4] = a1;
  dispatch_sync(v1, block);
}

void sub_19E4D96A0(uint64_t a1)
{
}

double sub_19E4D96AC(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = 0;
  uint64_t v7 = (double *)&v6;
  uint64_t v8 = 0x2000000000;
  uint64_t v9 = 0;
  int v2 = *(NSObject **)(a1 + 280);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = sub_19E4D975C;
  block[3] = &unk_1E59A0F58;
  block[4] = &v6;
  void block[5] = a1;
  void block[6] = a2;
  dispatch_sync(v2, block);
  double v3 = v7[3];
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_19E4D975C(uint64_t a1)
{
  *(double *)(*(void *)(*(void *)(a1 + 32) + 8) + ++*(_DWORD *)(result + 24) = sub_19E48CA6C(*(void *)(a1 + 40) + 8, *(const __CFString **)(a1 + 48));
}

void sub_19E4D9794(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(a1 + 280);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = sub_19E4D9808;
  block[3] = &unk_1E59A0FE0;
  block[4] = a1;
  dispatch_sync(v1, block);
}

uint64_t sub_19E4D9808(uint64_t a1)
{
  return sub_19E48CBB8(*(void *)(a1 + 32) + 8);
}

void sub_19E4D9814(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v3 = *(NSObject **)(a1 + 280);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = sub_19E36D0E0;
  block[3] = &unk_1E59A0F98;
  block[4] = a1;
  void block[5] = a2;
  void block[6] = a3;
  dispatch_sync(v3, block);
}

void sub_19E4D988C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v3 = *(NSObject **)(a1 + 280);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = sub_19E4D9904;
  block[3] = &unk_1E59A0F78;
  block[4] = a1;
  void block[5] = a2;
  void block[6] = a3;
  dispatch_sync(v3, block);
}

void sub_19E4D9904(uint64_t a1)
{
}

uint64_t sub_19E4D9918(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = 0;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x2000000000;
  char v11 = 1;
  uint64_t v4 = *(NSObject **)(a1 + 280);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = sub_19E4D99D0;
  block[3] = &unk_1E59A0FC0;
  block[4] = &v8;
  void block[5] = a1;
  void block[6] = a2;
  void block[7] = a3;
  block[8] = a4;
  dispatch_sync(v4, block);
  uint64_t v5 = *((unsigned __int8 *)v9 + 24);
  _Block_object_dispose(&v8, 8);
  return v5;
}

uint64_t sub_19E4D99D0(void *a1)
{
  uint64_t result = sub_19E48D650(a1[5] + 8, a1[6], a1[7]);
  *(unsigned char *)(*(void *)(a1[4] + 8) + ++*(_DWORD *)(result + 24) = result;
  return result;
}

void sub_19E4D9A0C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  uint64_t v7 = *(NSObject **)(a1 + 280);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = sub_19E4D9A90;
  block[3] = &unk_1E59A0F30;
  block[4] = a1;
  int v9 = a2;
  *(double *)&void block[5] = a7;
  void block[6] = a3;
  void block[7] = a4;
  block[8] = a5;
  void block[9] = a6;
  dispatch_sync(v7, block);
}

void sub_19E4D9A90(uint64_t a1)
{
}

void sub_19E4D9AB0(uint64_t a1)
{
  *(void *)a1 = &unk_1EF0BC0E0;
  dispatch_release(*(dispatch_object_t *)(a1 + 280));
  sub_19E492294(a1 + 8);
  JUMPOUT(0x19F3BDCF0);
}

uint64_t sub_19E4D9B20(uint64_t a1)
{
  *(void *)a1 = &unk_1EF0BC0E0;
  dispatch_release(*(dispatch_object_t *)(a1 + 280));
  sub_19E492294(a1 + 8);
  return a1;
}

void sub_19E4D9B70(CFURLRef url)
{
  CFURLRef v1 = CFURLCreateCopyAppendingPathComponent(0, url, @"langlikelihood.dat", 1u);
  sub_19E3C2CE4();
}

void sub_19E4D9D1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  if (*(char *)(v11 - 25) < 0) {
    operator delete(*(void **)(v11 - 48));
  }
  sub_19E3F6888((const void **)(v11 - 24));
  _Unwind_Resume(a1);
}

uint64_t sub_19E4D9D58(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v4 = *(uint64_t **)(v1 + 8);
  int v2 = (uint64_t *)(v1 + 8);
  double v3 = v4;
  if (!v4) {
    goto LABEL_38;
  }
  char v5 = *(unsigned char *)(a1 + 71);
  if (v5 >= 0) {
    uint64_t v6 = (const void *)(a1 + 48);
  }
  else {
    uint64_t v6 = *(const void **)(a1 + 48);
  }
  if (v5 >= 0) {
    size_t v7 = *(unsigned __int8 *)(a1 + 71);
  }
  else {
    size_t v7 = *(void *)(a1 + 56);
  }
  uint64_t v8 = v2;
  do
  {
    while (1)
    {
      int v9 = *((char *)v3 + 55);
      uint64_t v10 = v9 >= 0 ? v3 + 4 : (uint64_t *)v3[4];
      size_t v11 = v9 >= 0 ? *((unsigned __int8 *)v3 + 55) : v3[5];
      size_t v12 = v7 >= v11 ? v11 : v7;
      int v13 = memcmp(v10, v6, v12);
      if (v13) {
        break;
      }
      if (v11 >= v7) {
        goto LABEL_23;
      }
LABEL_9:
      double v3 = (uint64_t *)v3[1];
      if (!v3) {
        goto LABEL_24;
      }
    }
    if (v13 < 0) {
      goto LABEL_9;
    }
LABEL_23:
    uint64_t v8 = v3;
    double v3 = (uint64_t *)*v3;
  }
  while (v3);
LABEL_24:
  if (v8 == v2) {
    goto LABEL_38;
  }
  int v14 = *((char *)v8 + 55);
  if (v14 >= 0) {
    uint64_t v15 = v8 + 4;
  }
  else {
    uint64_t v15 = (const void *)v8[4];
  }
  if (v14 >= 0) {
    size_t v16 = *((unsigned __int8 *)v8 + 55);
  }
  else {
    size_t v16 = v8[5];
  }
  if (v16 >= v7) {
    size_t v17 = v7;
  }
  else {
    size_t v17 = v16;
  }
  uint64_t result = memcmp(v6, v15, v17);
  if (!result)
  {
    if (v7 >= v16) {
      goto LABEL_36;
    }
LABEL_38:
    operator new();
  }
  if ((result & 0x80000000) != 0) {
    goto LABEL_38;
  }
LABEL_36:
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + ++*(_DWORD *)(result + 24) = v8[7];
  return result;
}

#error "19E4DBC7C: call analysis failed (funcsize=43)"

void sub_19E4DB300(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, char **a15, char **a16, char **a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (*(char *)(v21 + 31) < 0) {
    operator delete(*(void **)(v21 + 8));
  }
  std::exception::~exception((std::exception *)v21);
  __cxa_free_exception(v24);
  if (a2 == 2)
  {
    __cxa_begin_catch(a1);
    exception = __cxa_allocate_exception(0x20uLL);
    int v26 = (char *)operator new(0x38uLL);
    strcpy(v26, "Failed to create LanguageLikelihoodModel database");
    *(void *)exception = &unk_1EF0BD3F0;
    sub_19E39369C(exception + 8, v26, 0x31uLL);
    __cxa_throw(exception, (struct type_info *)&unk_1EF0B7540, (void (*)(void *))sub_19E3F56B0);
  }
  if (*(char *)(a21 + 255) < 0) {
    operator delete(*a11);
  }
  sub_19E3CD3E0(*a15);
  sub_19E3CD3E0(*a16);
  sub_19E3F6CDC(*a17);
  sub_19E3F6D40(a20);
  sub_19E3CD3E0(*(char **)(a21 + 48));
  sub_19E3CD3E0(*(char **)(a21 + 24));
  MEMORY[0x19F3BDCF0](a21, 0x10B3C40E67E97D4);
  JUMPOUT(0x19E4DBC0CLL);
}

#error "19E4DB41C: call analysis failed (funcsize=70)"

void sub_19E4DB444(void *a1, int a2)
{
  __cxa_end_catch();
  if (a2 == 2)
  {
    __cxa_begin_catch(a1);
    exception = __cxa_allocate_exception(0x20uLL);
    char v5 = (char *)operator new(0x38uLL);
    strcpy(v5, "Failed to create LanguageLikelihoodModel database");
    *(void *)exception = &unk_1EF0BD3F0;
    sub_19E39369C(exception + 8, v5, 0x31uLL);
    __cxa_throw(exception, (struct type_info *)&unk_1EF0B7540, (void (*)(void *))sub_19E3F56B0);
  }
  JUMPOUT(0x19E4DBB9CLL);
}

void sub_19E4DB458()
{
}

void sub_19E4DB47C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, char **a15, char **a16, char **a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  if (SLOBYTE(STACK[0x23F]) < 0)
  {
    operator delete((void *)STACK[0x228]);
    if ((SLOBYTE(STACK[0x227]) & 0x80000000) == 0)
    {
LABEL_3:
      if ((SLOBYTE(STACK[0x20F]) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((SLOBYTE(STACK[0x227]) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete((void *)STACK[0x210]);
  if ((SLOBYTE(STACK[0x20F]) & 0x80000000) == 0)
  {
LABEL_4:
    if ((a75 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a76);
  if ((a75 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a73 & 0x80000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a74);
  if ((a73 & 0x80000000) == 0)
  {
LABEL_6:
    if ((a68 & 0x80000000) == 0) {
      goto LABEL_14;
    }
LABEL_13:
    operator delete(a63);
LABEL_14:
    if (*(char *)(a21 + 255) < 0) {
      operator delete(*a11);
    }
    sub_19E3CD3E0(*a15);
    sub_19E3CD3E0(*a16);
    sub_19E3F6CDC(*a17);
    sub_19E3F6D40(a20);
    JUMPOUT(0x19E4DBBE0);
  }
LABEL_12:
  operator delete(a69);
  if ((a68 & 0x80000000) == 0) {
    goto LABEL_14;
  }
  goto LABEL_13;
}

void sub_19E4DB510()
{
}

void sub_19E4DB524()
{
}

void sub_19E4DB534()
{
}

void sub_19E4DB544()
{
}

void sub_19E4DB554()
{
}

void sub_19E4DB564()
{
}

void sub_19E4DB574()
{
  MEMORY[0x19F3BDCF0](v0, 0x1020C4055CCDE27);
  JUMPOUT(0x19E4DBB2CLL);
}

void sub_19E4DB5AC()
{
}

void sub_19E4DB77C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    if (*(char *)(v2 + 31) < 0) {
      operator delete(*v3);
    }
    std::exception::~exception((std::exception *)v2);
    __cxa_free_exception(v5);
    sub_19E37B770(a1);
  }
  _Unwind_Resume(a1);
}

void sub_19E4DB7A8(void *a1, int a2)
{
  __cxa_end_catch();
  if (a2 == 2)
  {
    __cxa_begin_catch(a1);
    exception = __cxa_allocate_exception(0x20uLL);
    char v5 = (char *)operator new(0x38uLL);
    strcpy(v5, "Failed to create LanguageLikelihoodModel database");
    *(void *)exception = &unk_1EF0BD3F0;
    sub_19E39369C(exception + 8, v5, 0x31uLL);
    __cxa_throw(exception, (struct type_info *)&unk_1EF0B7540, (void (*)(void *))sub_19E3F56B0);
  }
  JUMPOUT(0x19E4DBB9CLL);
}

void sub_19E4DB7C0()
{
}

void sub_19E4DB868(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, char **a15, char **a16, char **a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  operator delete(v21);
  __cxa_end_catch();
  if (*(char *)(a21 + 255) < 0) {
    operator delete(*a11);
  }
  sub_19E3CD3E0(*a15);
  sub_19E3CD3E0(*a16);
  sub_19E3F6CDC(*a17);
  sub_19E3F6D40(a20);
  sub_19E3CD3E0(*(char **)(a21 + 48));
  sub_19E3CD3E0(*(char **)(a21 + 24));
  MEMORY[0x19F3BDCF0](a21, 0x10B3C40E67E97D4);
  JUMPOUT(0x19E4DBC0CLL);
}

void sub_19E4DB8B8()
{
}

void sub_19E4DB8E4()
{
  if (*(char *)(v0 + 31) < 0) {
    operator delete(*v1);
  }
  std::exception::~exception((std::exception *)v0);
  __cxa_free_exception(v2);
  JUMPOUT(0x19E4DBA6CLL);
}

void sub_19E4DB914()
{
  if (*(char *)(v0 + 31) < 0) {
    operator delete(*v1);
  }
  std::exception::~exception((std::exception *)v0);
  __cxa_free_exception(v2);
  JUMPOUT(0x19E4DBA88);
}

void sub_19E4DB944(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a60 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x19E4DBA4CLL);
}

void sub_19E4DB964(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  if (a59)
  {
    for (uint64_t i = a60; i != a59; i -= 24)
    {
      if (*(char *)(i - 1) < 0) {
        operator delete(*(void **)(i - 24));
      }
    }
    JUMPOUT(0x19E4DB9B0);
  }
  JUMPOUT(0x19E4DB9B4);
}

void sub_19E4DBA14()
{
  if (*(char *)(v0 + 31) < 0) {
    operator delete(*v1);
  }
  std::exception::~exception((std::exception *)v0);
  __cxa_free_exception(v2);
  JUMPOUT(0x19E4DBA4CLL);
}

void sub_19E4DBA44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  if (a64 < 0) {
    JUMPOUT(0x19E4DBA58);
  }
  JUMPOUT(0x19E4DBAA4);
}

#error "19E4DBB90: call analysis failed (funcsize=104)"

void sub_19E4DBCDC()
{
}

void sub_19E4DBCF0(_Unwind_Exception *a1)
{
}

void sub_19E4DBCFC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_19E37B770(a1);
  }
  _Unwind_Resume(a1);
}

void sub_19E4DBD0C()
{
}

void sub_19E4DBD18(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
}

void *sub_19E4DBD2C(uint64_t a1, uint64_t a2)
{
  uint64_t result = (void *)(a1 + 48);
  if (*(char *)(a2 + 71) < 0) {
    return sub_19E39369C(result, *(void **)(a2 + 48), *(void *)(a2 + 56));
  }
  long long v3 = *(_OWORD *)(a2 + 48);
  result[2] = *(void *)(a2 + 64);
  *(_OWORD *)uint64_t result = v3;
  return result;
}

dispatch_queue_t sub_19E4DBD5C()
{
  uint64_t v0 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, 0);
  dispatch_queue_t result = dispatch_queue_create("com.apple.LanguageModeling.LanguageLikelihoodModelCreation", v0);
  qword_1EC009270 = (uint64_t)result;
  return result;
}

void sub_19E4DBD98(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(a1 + 168);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = sub_19E4DBE0C;
  block[3] = &unk_1E59A12C8;
  block[4] = a1;
  dispatch_sync(v1, block);
}

void sub_19E4DBE0C(uint64_t a1)
{
}

void sub_19E4DBE18(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(a1 + 168);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = sub_19E4DBE8C;
  block[3] = &unk_1E59A1280;
  block[4] = a1;
  dispatch_sync(v1, block);
}

void sub_19E4DBE8C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v1 + 160))
  {
    LocalCenter = CFNotificationCenterGetLocalCenter();
    CFNotificationCenterPostNotification(LocalCenter, @"VocabularyDidChange", (const void *)(v1 + 8), 0, 0);
    *(unsigned char *)(v1 + 160) = 0;
  }
}

void sub_19E4DBED8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(NSObject **)(a1 + 168);
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  v3[2] = sub_19E4DBF4C;
  void v3[3] = &unk_1E59A1260;
  v3[4] = a1;
  v3[5] = a2;
  dispatch_sync(v2, v3);
}

void sub_19E4DBF4C(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 40);
  uint64_t v2 = (const void *)(*(void *)(a1 + 32) + 8);
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterRemoveObserver(LocalCenter, v1, @"VocabularyDidChange", v2);
}

void sub_19E4DBF94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v3 = *(NSObject **)(a1 + 168);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = sub_19E4DC00C;
  block[3] = &unk_1E59A1240;
  block[4] = a1;
  void block[5] = a2;
  void block[6] = a3;
  dispatch_sync(v3, block);
}

void sub_19E4DC00C(void *a1)
{
  uint64_t v1 = (const void *)a1[5];
  uint64_t v2 = (const void *)(a1[4] + 8);
  long long v3 = (void (__cdecl *)(CFNotificationCenterRef, void *, CFNotificationName, const void *, CFDictionaryRef))a1[6];
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterAddObserver(LocalCenter, v1, v3, @"VocabularyDidChange", v2, CFNotificationSuspensionBehaviorHold);
}

uint64_t sub_19E4DC068(uint64_t a1, int a2)
{
  uint64_t v7 = 0;
  uint64_t v8 = &v7;
  uint64_t v9 = 0x2000000000;
  char v10 = 0;
  uint64_t v2 = *(NSObject **)(a1 + 168);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = sub_19E4DC118;
  block[3] = &unk_1E59A1220;
  block[4] = &v7;
  void block[5] = a1;
  int v6 = a2;
  dispatch_sync(v2, block);
  uint64_t v3 = *((unsigned __int8 *)v8 + 24);
  _Block_object_dispose(&v7, 8);
  return v3;
}

BOOL sub_19E4DC118(uint64_t a1)
{
  BOOL result = sub_19E44E358((void *)(*(void *)(a1 + 40) + 8), *(_DWORD *)(a1 + 48));
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + ++*(_DWORD *)(result + 24) = result;
  return result;
}

void sub_19E4DC154(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3 = *(NSObject **)(a1 + 168);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = sub_19E4DC1CC;
  block[3] = &unk_1E59A11F8;
  int v5 = a2;
  block[4] = a3;
  void block[5] = a1;
  dispatch_sync(v3, block);
}

void sub_19E4DC1CC(uint64_t a1, __n128 a2)
{
}

double sub_19E4DC1E0(uint64_t a1, int a2)
{
  uint64_t v7 = 0;
  uint64_t v8 = (double *)&v7;
  uint64_t v9 = 0x2000000000;
  uint64_t v10 = 0;
  uint64_t v2 = *(NSObject **)(a1 + 168);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = sub_19E4DC290;
  block[3] = &unk_1E59A11D0;
  block[4] = &v7;
  void block[5] = a1;
  int v6 = a2;
  dispatch_sync(v2, block);
  double v3 = v8[3];
  _Block_object_dispose(&v7, 8);
  return v3;
}

uint64_t sub_19E4DC290(uint64_t result)
{
  uint64_t v1 = *(void **)(result + 40);
  int8x8_t v2 = (int8x8_t)v1[10];
  uint64_t v3 = 0;
  if (v2)
  {
    unint64_t v4 = *(unsigned int *)(result + 48);
    uint8x8_t v5 = (uint8x8_t)vcnt_s8(v2);
    v5.i16[0] = vaddlv_u8(v5);
    if (v5.u32[0] > 1uLL)
    {
      unint64_t v6 = *(unsigned int *)(result + 48);
      if (*(void *)&v2 <= v4) {
        unint64_t v6 = v4 % *(void *)&v2;
      }
    }
    else
    {
      unint64_t v6 = (v2.i32[0] - 1) & v4;
    }
    uint64_t v7 = *(uint64_t ***)(v1[9] + 8 * v6);
    if (v7)
    {
      uint64_t v8 = *v7;
      if (v8)
      {
        if (v5.u32[0] < 2uLL)
        {
          uint64_t v9 = *(void *)&v2 - 1;
          while (1)
          {
            uint64_t v11 = v8[1];
            if (v11 == v4)
            {
              if (*((_DWORD *)v8 + 4) == v4) {
                goto LABEL_22;
              }
            }
            else if ((v11 & v9) != v6)
            {
              goto LABEL_23;
            }
            uint64_t v8 = (uint64_t *)*v8;
            if (!v8) {
              goto LABEL_23;
            }
          }
        }
        do
        {
          unint64_t v10 = v8[1];
          if (v10 == v4)
          {
            if (*((_DWORD *)v8 + 4) == v4)
            {
LABEL_22:
              uint64_t v3 = *(void *)(v1[14] + 24 * *((unsigned int *)v8 + 6) + 16);
              break;
            }
          }
          else
          {
            if (v10 >= *(void *)&v2) {
              v10 %= *(void *)&v2;
            }
            if (v10 != v6) {
              break;
            }
          }
          uint64_t v8 = (uint64_t *)*v8;
        }
        while (v8);
      }
    }
  }
LABEL_23:
  *(void *)(*(void *)(*(void *)(result + 32) + 8) + ++*(_DWORD *)(result + 24) = v3;
  return result;
}

uint64_t sub_19E4DC390(uint64_t a1, int a2)
{
  uint64_t v7 = 0;
  uint64_t v8 = &v7;
  int v10 = 0;
  uint64_t v9 = 0x2000000000;
  int8x8_t v2 = *(NSObject **)(a1 + 168);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = sub_19E4DC43C;
  block[3] = &unk_1E59A11A8;
  block[4] = &v7;
  void block[5] = a1;
  int v6 = a2;
  dispatch_sync(v2, block);
  uint64_t v3 = *((unsigned int *)v8 + 6);
  _Block_object_dispose(&v7, 8);
  return v3;
}

uint64_t sub_19E4DC43C(uint64_t result)
{
  uint64_t v1 = *(void **)(result + 40);
  int8x8_t v2 = (int8x8_t)v1[10];
  if (v2)
  {
    unint64_t v3 = *(unsigned int *)(result + 48);
    uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      unint64_t v5 = *(unsigned int *)(result + 48);
      if (*(void *)&v2 <= v3) {
        unint64_t v5 = v3 % *(void *)&v2;
      }
    }
    else
    {
      unint64_t v5 = (v2.i32[0] - 1) & v3;
    }
    int v6 = *(uint64_t ***)(v1[9] + 8 * v5);
    if (v6)
    {
      uint64_t v7 = *v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          uint64_t v8 = *(void *)&v2 - 1;
          while (1)
          {
            uint64_t v10 = v7[1];
            if (v10 == v3)
            {
              if (*((_DWORD *)v7 + 4) == v3) {
                goto LABEL_23;
              }
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            uint64_t v7 = (uint64_t *)*v7;
            if (!v7) {
              goto LABEL_21;
            }
          }
        }
        do
        {
          unint64_t v9 = v7[1];
          if (v9 == v3)
          {
            if (*((_DWORD *)v7 + 4) == v3)
            {
LABEL_23:
              int v11 = *(_DWORD *)(v1[14] + 24 * *((unsigned int *)v7 + 6) + 8);
              goto LABEL_22;
            }
          }
          else
          {
            if (v9 >= *(void *)&v2) {
              v9 %= *(void *)&v2;
            }
            if (v9 != v5) {
              break;
            }
          }
          uint64_t v7 = (uint64_t *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  int v11 = 0;
LABEL_22:
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + ++*(_DWORD *)(result + 24) = v11;
  return result;
}

uint64_t sub_19E4DC53C(uint64_t a1, int a2)
{
  uint64_t v7 = 0;
  uint64_t v8 = &v7;
  int v10 = 0;
  uint64_t v9 = 0x2000000000;
  int8x8_t v2 = *(NSObject **)(a1 + 168);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = sub_19E4DC5E8;
  block[3] = &unk_1E59A1180;
  block[4] = &v7;
  void block[5] = a1;
  int v6 = a2;
  dispatch_sync(v2, block);
  uint64_t v3 = *((unsigned int *)v8 + 6);
  _Block_object_dispose(&v7, 8);
  return v3;
}

uint64_t sub_19E4DC5E8(uint64_t result)
{
  uint64_t v1 = *(void **)(result + 40);
  int8x8_t v2 = (int8x8_t)v1[10];
  if (v2)
  {
    unint64_t v3 = *(unsigned int *)(result + 48);
    uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      unint64_t v5 = *(unsigned int *)(result + 48);
      if (*(void *)&v2 <= v3) {
        unint64_t v5 = v3 % *(void *)&v2;
      }
    }
    else
    {
      unint64_t v5 = (v2.i32[0] - 1) & v3;
    }
    int v6 = *(uint64_t ***)(v1[9] + 8 * v5);
    if (v6)
    {
      uint64_t v7 = *v6;
      if (v7)
      {
        if (v4.u32[0] < 2uLL)
        {
          uint64_t v8 = *(void *)&v2 - 1;
          while (1)
          {
            uint64_t v10 = v7[1];
            if (v10 == v3)
            {
              if (*((_DWORD *)v7 + 4) == v3) {
                goto LABEL_23;
              }
            }
            else if ((v10 & v8) != v5)
            {
              goto LABEL_21;
            }
            uint64_t v7 = (uint64_t *)*v7;
            if (!v7) {
              goto LABEL_21;
            }
          }
        }
        do
        {
          unint64_t v9 = v7[1];
          if (v9 == v3)
          {
            if (*((_DWORD *)v7 + 4) == v3)
            {
LABEL_23:
              int v11 = *(_DWORD *)(v1[14] + 24 * *((unsigned int *)v7 + 6));
              goto LABEL_22;
            }
          }
          else
          {
            if (v9 >= *(void *)&v2) {
              v9 %= *(void *)&v2;
            }
            if (v9 != v5) {
              break;
            }
          }
          uint64_t v7 = (uint64_t *)*v7;
        }
        while (v7);
      }
    }
  }
LABEL_21:
  int v11 = 0;
LABEL_22:
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + ++*(_DWORD *)(result + 24) = v11;
  return result;
}

uint64_t sub_19E4DC6E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = 0;
  uint64_t v8 = &v7;
  int v10 = 0;
  uint64_t v9 = 0x2000000000;
  unint64_t v3 = *(NSObject **)(a1 + 168);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  v6[2] = sub_19E4DC794;
  v6[3] = &unk_1E59A1158;
  void v6[4] = &v7;
  v6[5] = a1;
  v6[6] = a2;
  v6[7] = a3;
  dispatch_sync(v3, v6);
  uint64_t v4 = *((unsigned int *)v8 + 6);
  _Block_object_dispose(&v7, 8);
  return v4;
}

uint64_t *sub_19E4DC794(void *a1)
{
  uint64_t v3 = a1[5];
  uint64_t v2 = a1[6];
  uint64_t v4 = (void *)a1[7];
  if (v4) {
    void *v4 = 0;
  }
  BOOL result = sub_19E44FFC0((void *)(v3 + 32), v2);
  if (result)
  {
    unsigned int v6 = *((_DWORD *)result + 10);
    uint64_t v7 = *(void *)(v3 + 112);
    if (v4) {
      void *v4 = *(void *)(v7 + 24 * v6 + 16);
    }
    int v8 = *(_DWORD *)(v7 + 24 * v6 + 4);
  }
  else
  {
    int v8 = 0;
  }
  *(_DWORD *)(*(void *)(a1[4] + 8) + ++*(_DWORD *)(result + 24) = v8;
  return result;
}

uint64_t sub_19E4DC814(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = 0;
  int v8 = &v7;
  int v10 = 0;
  uint64_t v9 = 0x2000000000;
  uint64_t v3 = *(NSObject **)(a1 + 168);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  v6[2] = sub_19E4DC8C0;
  v6[3] = &unk_1E59A1130;
  void v6[4] = &v7;
  v6[5] = a1;
  v6[6] = a2;
  v6[7] = a3;
  dispatch_sync(v3, v6);
  uint64_t v4 = *((unsigned int *)v8 + 6);
  _Block_object_dispose(&v7, 8);
  return v4;
}

void sub_19E4DC8C0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void **)(a1 + 56);
  sub_19E37774C(*(const __CFString **)(a1 + 48), __p);
  if (v3) {
    *uint64_t v3 = 0;
  }
  uint64_t v4 = sub_19E44FFC0((void *)(v2 + 32), (uint64_t)__p);
  if (!v4)
  {
    int v7 = 0;
    if ((v9 & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  unsigned int v5 = *((_DWORD *)v4 + 10);
  uint64_t v6 = *(void *)(v2 + 112);
  if (v3) {
    *uint64_t v3 = *(void *)(v6 + 24 * v5 + 16);
  }
  int v7 = *(_DWORD *)(v6 + 24 * v5 + 4);
  if (v9 < 0) {
LABEL_7:
  }
    operator delete(__p[0]);
LABEL_8:
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + ++*(_DWORD *)(result + 24) = v7;
}

void sub_19E4DC96C(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v8 = 0;
  char v9 = &v8;
  uint64_t v10 = 0x4002000000;
  int v11 = sub_19E4DCAA0;
  size_t v12 = sub_19E4DCABC;
  std::string __p = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v4 = *(NSObject **)(a1 + 168);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = sub_19E4DCAD0;
  block[3] = &unk_1E59A1108;
  block[4] = &v8;
  void block[5] = a1;
  int v7 = a2;
  dispatch_sync(v4, block);
  if (*((char *)v9 + 63) < 0)
  {
    sub_19E39369C((unsigned char *)a3, (void *)v9[5], v9[6]);
  }
  else
  {
    long long v5 = *(_OWORD *)(v9 + 5);
    *(void *)(a3 + 16) = v9[7];
    *(_OWORD *)a3 = v5;
  }
  _Block_object_dispose(&v8, 8);
  if (SHIBYTE(v15) < 0) {
    operator delete(__p);
  }
}

void sub_19E4DCA78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

__n128 sub_19E4DCAA0(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(__n128 *)(a1 + 40) = result;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_19E4DCABC(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
}

double sub_19E4DCAD0(uint64_t a1)
{
  sub_19E45025C((void *)(*(void *)(a1 + 40) + 8), *(_DWORD *)(a1 + 48), (uint64_t)&v5);
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v3 = v2 + 40;
  if (*(char *)(v2 + 63) < 0) {
    operator delete(*(void **)v3);
  }
  double result = *(double *)&v5;
  *(_OWORD *)uint64_t v3 = v5;
  *(void *)(v3 + 16) = v6;
  return result;
}

void sub_19E4DCB38(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3 = *(NSObject **)(a1 + 168);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = sub_19E4DCBB0;
  block[3] = &unk_1E59A10E0;
  int v5 = a2;
  block[4] = a3;
  void block[5] = a1;
  dispatch_sync(v3, block);
}

void sub_19E4DCBB0(uint64_t a1)
{
}

uint64_t sub_19E4DCBC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = 0;
  uint64_t v8 = &v7;
  uint64_t v9 = 0x2000000000;
  char v10 = 0;
  uint64_t v3 = *(NSObject **)(a1 + 168);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  v6[2] = sub_19E4DCC74;
  v6[3] = &unk_1E59A10B8;
  void v6[4] = &v7;
  v6[5] = a1;
  v6[6] = a2;
  v6[7] = a3;
  dispatch_sync(v3, v6);
  uint64_t v4 = *((unsigned __int8 *)v8 + 24);
  _Block_object_dispose(&v7, 8);
  return v4;
}

BOOL sub_19E4DCC74(void *a1)
{
  BOOL result = sub_19E450524(a1[5] + 8, a1[6], a1[7]);
  *(unsigned char *)(*(void *)(a1[4] + 8) + ++*(_DWORD *)(result + 24) = result;
  return result;
}

uint64_t sub_19E4DCCB0(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2000000000;
  char v9 = 0;
  uint64_t v2 = *(NSObject **)(a1 + 168);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = sub_19E4DCD60;
  block[3] = &unk_1E59A1090;
  block[4] = &v6;
  void block[5] = a1;
  void block[6] = a2;
  dispatch_sync(v2, block);
  uint64_t v3 = *((unsigned __int8 *)v7 + 24);
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_19E4DCD60(void *a1)
{
  CFStringRef v2 = (const __CFString *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[5];
    sub_19E37774C(v2, __p);
    uint64_t v4 = sub_19E44FFC0((void *)(v3 + 32), (uint64_t)__p);
    if (v4)
    {
      BOOL v5 = *(_DWORD *)(*(void *)(v3 + 112) + 24 * *((unsigned int *)v4 + 10) + 4) == *(_DWORD *)(*(void *)(v3 + 112) + 24 * *((unsigned int *)v4 + 10));
      if (v7 < 0) {
        goto LABEL_7;
      }
    }
    else
    {
      BOOL v5 = 0;
      if (v7 < 0) {
LABEL_7:
      }
        operator delete(__p[0]);
    }
  }
  else
  {
    BOOL v5 = 0;
  }
  *(unsigned char *)(*(void *)(a1[4] + 8) + ++*(_DWORD *)(result + 24) = v5;
}

uint64_t sub_19E4DCDFC(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5)
{
  uint64_t v10 = 0;
  int v11 = &v10;
  int v13 = 0;
  uint64_t v12 = 0x2000000000;
  BOOL v5 = *(NSObject **)(a1 + 168);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 0x40000000;
  void v8[2] = sub_19E4DCEB4;
  v8[3] = &unk_1E59A12A8;
  v8[4] = &v10;
  v8[5] = a1;
  v8[6] = a2;
  int v9 = a3;
  *(double *)&v8[7] = a5;
  v8[8] = a4;
  dispatch_sync(v5, v8);
  uint64_t v6 = *((unsigned int *)v11 + 6);
  _Block_object_dispose(&v10, 8);
  return v6;
}

uint64_t sub_19E4DCEB4(uint64_t a1)
{
  uint64_t result = sub_19E450BFC(*(void *)(a1 + 40) + 8, *(const __CFString **)(a1 + 48), *(_DWORD *)(a1 + 72), *(double *)(a1 + 56));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + ++*(_DWORD *)(result + 24) = result;
  return result;
}

uint64_t sub_19E4DCEF4(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = 0;
  char v7 = &v6;
  uint64_t v8 = 0x2000000000;
  char v9 = 0;
  CFStringRef v2 = *(NSObject **)(a1 + 168);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = sub_19E4DCFA4;
  block[3] = &unk_1E59A1068;
  block[4] = &v6;
  void block[5] = a1;
  void block[6] = a2;
  dispatch_sync(v2, block);
  uint64_t v3 = *((unsigned __int8 *)v7 + 24);
  _Block_object_dispose(&v6, 8);
  return v3;
}

uint64_t sub_19E4DCFA4(uint64_t a1)
{
  uint64_t result = sub_19E451BB8(*(void *)(a1 + 40) + 8, *(const __CFArray **)(a1 + 48));
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + ++*(_DWORD *)(result + 24) = result;
  return result;
}

void sub_19E4DCFDC(uint64_t a1)
{
  *(void *)a1 = &unk_1EF0BB180;
  dispatch_release(*(dispatch_object_t *)(a1 + 168));
  sub_19E451F84((void *)(a1 + 8));
  JUMPOUT(0x19F3BDCF0);
}

uint64_t sub_19E4DD04C(uint64_t a1)
{
  *(void *)a1 = &unk_1EF0BB180;
  dispatch_release(*(dispatch_object_t *)(a1 + 168));
  sub_19E451F84((void *)(a1 + 8));
  return a1;
}

void sub_19E4DD09C()
{
}

uint64_t sub_19E4DD184(uint64_t a1, int *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v13 = *(_DWORD **)(a1 + 24);
  uint64_t v12 = *(_DWORD **)(a1 + 32);
  uint64_t v14 = (_DWORD **)(a1 + 24);
  unint64_t v15 = v12 - v13;
  if (a3 > v15)
  {
    sub_19E3F9C70(a1 + 24, a3 - v15);
    int v13 = *v14;
LABEL_6:
    uint64_t v16 = 4 * a3;
    do
    {
      int v17 = *a2++;
      uint64_t v18 = *(void *)(a1 + 16);
      int v20 = v17;
      *v13++ = *(_DWORD *)(*(uint64_t (**)(uint64_t, int *))(*(void *)v18 + 32))(v18, &v20);
      v16 -= 4;
    }
    while (v16);
    int v13 = *(_DWORD **)(a1 + 24);
    uint64_t v12 = *(_DWORD **)(a1 + 32);
    return (*(uint64_t (**)(void, _DWORD *, int64_t, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 8)
                                                                                                  + 16))(*(void *)(a1 + 8), v13, v12 - v13, a4, a5, a6);
  }
  if (a3 < v15)
  {
    uint64_t v12 = &v13[a3];
    *(void *)(a1 + 32) = v12;
  }
  if (a3) {
    goto LABEL_6;
  }
  return (*(uint64_t (**)(void, _DWORD *, int64_t, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 8)
                                                                                                + 16))(*(void *)(a1 + 8), v13, v12 - v13, a4, a5, a6);
}

void sub_19E4DD29C(void *a1)
{
  *a1 = &unk_1EF0BB980;
  CFStringRef v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = a1[1];
  a1[1] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  JUMPOUT(0x19F3BDCF0);
}

void *sub_19E4DD36C(void *a1)
{
  *a1 = &unk_1EF0BB980;
  CFStringRef v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  uint64_t v3 = a1[2];
  a1[2] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = a1[1];
  a1[1] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

void sub_19E4DD41C(uint64_t a1)
{
  int v38 = 0;
  uint64_t v39 = 0;
  int v37 = &v38;
  CFStringRef v2 = (void *)(a1 + 8);
  uint64_t v3 = *(void **)a1;
  if (*(void *)a1 == a1 + 8) {
    goto LABEL_34;
  }
  do
  {
    uint64_t v4 = v38;
    BOOL v5 = &v38;
    if (v37 == &v38) {
      goto LABEL_10;
    }
    uint64_t v6 = v38;
    char v7 = &v38;
    if (v38)
    {
      do
      {
        BOOL v5 = (uint64_t **)v6;
        uint64_t v6 = (uint64_t *)v6[1];
      }
      while (v6);
    }
    else
    {
      do
      {
        BOOL v5 = (uint64_t **)v7[2];
        BOOL v8 = *v5 == (uint64_t *)v7;
        char v7 = v5;
      }
      while (v8);
    }
    unint64_t v9 = v3[4];
    if ((unint64_t)v5[4] < v9)
    {
LABEL_10:
      if (v38) {
        uint64_t v10 = v5;
      }
      else {
        uint64_t v10 = &v38;
      }
      if (v38) {
        int v11 = v5 + 1;
      }
      else {
        int v11 = &v38;
      }
    }
    else
    {
      uint64_t v10 = &v38;
      int v11 = &v38;
      if (v38)
      {
        int v11 = &v38;
        while (1)
        {
          while (1)
          {
            uint64_t v10 = (uint64_t **)v4;
            unint64_t v13 = v4[4];
            if (v9 >= v13) {
              break;
            }
            uint64_t v4 = *v10;
            int v11 = v10;
            if (!*v10) {
              goto LABEL_25;
            }
          }
          if (v13 >= v9) {
            break;
          }
          int v11 = v10 + 1;
          uint64_t v4 = v10[1];
          if (!v4) {
            goto LABEL_25;
          }
        }
      }
    }
    if (*v11)
    {
      uint64_t v12 = (void *)v3[1];
      if (!v12) {
        goto LABEL_30;
      }
    }
    else
    {
LABEL_25:
      uint64_t v14 = (uint64_t *)operator new(0x28uLL);
      unsigned char v14[4] = v3[4];
      *uint64_t v14 = 0;
      v14[1] = 0;
      v14[2] = (uint64_t)v10;
      *int v11 = v14;
      if (*v37)
      {
        int v37 = (uint64_t **)*v37;
        uint64_t v14 = *v11;
      }
      sub_19E37D324(v38, v14);
      ++v39;
      uint64_t v12 = (void *)v3[1];
      if (!v12)
      {
        do
        {
LABEL_30:
          unint64_t v15 = (void *)v3[2];
          BOOL v8 = *v15 == (void)v3;
          uint64_t v3 = v15;
        }
        while (!v8);
        goto LABEL_3;
      }
    }
    do
    {
      unint64_t v15 = v12;
      uint64_t v12 = (void *)*v12;
    }
    while (v12);
LABEL_3:
    uint64_t v3 = v15;
  }
  while (v15 != v2);
  uint64_t v16 = (uint64_t *)v37;
  if (v37 != &v38)
  {
    do
    {
      unint64_t v23 = v16[4];
      uint64_t v24 = *(uint64_t ***)v23;
      if (*(void *)v23)
      {
        unint64_t v25 = v24[1];
        if (v25)
        {
          int v26 = (uint64_t *)(v24 + 1);
          float v27 = v24[1];
          do
          {
            unint64_t v28 = v27[4];
            BOOL v29 = v28 >= v23;
            if (v28 >= v23) {
              uint64_t v30 = (uint64_t **)v27;
            }
            else {
              uint64_t v30 = (uint64_t **)(v27 + 1);
            }
            if (v29) {
              int v26 = v27;
            }
            float v27 = *v30;
          }
          while (*v30);
          if (v26 != (uint64_t *)(v24 + 1) && v26[4] <= v23)
          {
            uint64_t v31 = (uint64_t *)v26[1];
            float32x4_t v32 = v26;
            if (v31)
            {
              do
              {
                float32x4_t v33 = v31;
                uint64_t v31 = (uint64_t *)*v31;
              }
              while (v31);
            }
            else
            {
              do
              {
                float32x4_t v33 = (uint64_t *)v32[2];
                BOOL v8 = *v33 == (void)v32;
                float32x4_t v32 = v33;
              }
              while (!v8);
            }
            if (*v24 == v26) {
              *uint64_t v24 = v33;
            }
            _OWORD v24[2] = (uint64_t *)((char *)v24[2] - 1);
            sub_19E3BAE64(v25, v26);
            operator delete(v26);
          }
        }
      }
      int v34 = *(sqlite3_stmt **)(v23 + 8);
      if (v34)
      {
        sqlite3_finalize(v34);
        *(void *)(v23 + 8) = 0;
      }
      int v35 = (uint64_t *)v16[1];
      if (v35)
      {
        do
        {
          uint64_t v36 = (uint64_t **)v35;
          int v35 = (uint64_t *)*v35;
        }
        while (v35);
      }
      else
      {
        do
        {
          uint64_t v36 = (uint64_t **)v16[2];
          BOOL v8 = *v36 == v16;
          uint64_t v16 = (uint64_t *)v36;
        }
        while (!v8);
      }
      uint64_t v16 = (uint64_t *)v36;
    }
    while (v36 != &v38);
  }
LABEL_34:
  int v17 = (void *)(a1 + 32);
  uint64_t v18 = *(void **)(a1 + 24);
  if (v18 != (void *)(a1 + 32))
  {
    do
    {
      unint64_t v19 = v18[5];
      if (v19)
      {
        unint64_t v20 = sub_19E499F28(v19);
        MEMORY[0x19F3BDCF0](v20, 0x1020C4055CCDE27);
      }
      uint64_t v21 = (void *)v18[1];
      if (v21)
      {
        do
        {
          uint64_t v22 = v21;
          uint64_t v21 = (void *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          uint64_t v22 = (void *)v18[2];
          BOOL v8 = *v22 == (void)v18;
          uint64_t v18 = v22;
        }
        while (!v8);
      }
      uint64_t v18 = v22;
    }
    while (v22 != v17);
  }
  sub_19E418864(*(void **)(a1 + 32));
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + ++*(_DWORD *)(result + 24) = v17;
  sub_19E418864(v38);
}

void sub_19E4DD73C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
}

void sub_19E4DD754(std::string *this, unsigned int **a2, uint64_t a3)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  uint64_t v6 = *a2;
  char v7 = a2[1];
  if (*a2 != v7)
  {
    do
    {
      std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      if ((size & 0x80u) != 0) {
        std::string::size_type size = this->__r_.__value_.__l.__size_;
      }
      if (size) {
        std::string::append(this, " | ", 3uLL);
      }
      (*(void (**)(long long *__return_ptr, uint64_t, void))(*(void *)a3 + 40))(&v62, a3, *v6);
      if (v63 >= 0) {
        unint64_t v9 = (const std::string::value_type *)&v62;
      }
      else {
        unint64_t v9 = (const std::string::value_type *)v62;
      }
      if (v63 >= 0) {
        std::string::size_type v10 = HIBYTE(v63);
      }
      else {
        std::string::size_type v10 = *((void *)&v62 + 1);
      }
      std::string::append(this, v9, v10);
      if (SHIBYTE(v63) < 0) {
        operator delete((void *)v62);
      }
      ++v6;
    }
    while (v6 != v7);
  }
  std::to_string(&v61, *((double *)a2 + 23) + *((float *)a2 + 6));
  int v11 = std::string::insert(&v61, 0, "\t Score: ", 9uLL);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  int64_t v63 = v11->__r_.__value_.__r.__words[2];
  long long v62 = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (v63 >= 0) {
    unint64_t v13 = (const std::string::value_type *)&v62;
  }
  else {
    unint64_t v13 = (const std::string::value_type *)v62;
  }
  if (v63 >= 0) {
    std::string::size_type v14 = HIBYTE(v63);
  }
  else {
    std::string::size_type v14 = *((void *)&v62 + 1);
  }
  std::string::append(this, v13, v14);
  if (SHIBYTE(v63) < 0)
  {
    operator delete((void *)v62);
    if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_24;
    }
  }
  else if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_24;
  }
  operator delete(v61.__r_.__value_.__l.__data_);
LABEL_24:
  (*(void (**)(std::string *__return_ptr, uint64_t, unsigned int *, int64_t))(*(void *)a3 + 32))(&v61, a3, *a2, a2[1] - *a2);
  unint64_t v15 = std::string::insert(&v61, 0, "\t text: ", 8uLL);
  long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  int64_t v63 = v15->__r_.__value_.__r.__words[2];
  long long v62 = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (v63 >= 0) {
    int v17 = (const std::string::value_type *)&v62;
  }
  else {
    int v17 = (const std::string::value_type *)v62;
  }
  if (v63 >= 0) {
    std::string::size_type v18 = HIBYTE(v63);
  }
  else {
    std::string::size_type v18 = *((void *)&v62 + 1);
  }
  std::string::append(this, v17, v18);
  if (SHIBYTE(v63) < 0)
  {
    operator delete((void *)v62);
    if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_32;
    }
  }
  else if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_32;
  }
  operator delete(v61.__r_.__value_.__l.__data_);
LABEL_32:
  int v19 = *((char *)a2 + 55);
  if (v19 >= 0) {
    size_t v20 = *((unsigned __int8 *)a2 + 55);
  }
  else {
    size_t v20 = (size_t)a2[5];
  }
  unint64_t v21 = v20 + 10;
  if (v20 + 10 >= 0x7FFFFFFFFFFFFFF8) {
    sub_19E37C958();
  }
  if (v21 >= 0x17)
  {
    uint64_t v23 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17) {
      uint64_t v23 = v21 | 7;
    }
    uint64_t v24 = v23 + 1;
    unint64_t v25 = (char *)operator new(v23 + 1);
    *((void *)&v62 + 1) = v20 + 10;
    int64_t v63 = v24 | 0x8000000000000000;
    *(void *)&long long v62 = v25;
    *((_WORD *)v25 + 4) = 8250;
    *(void *)unint64_t v25 = *(void *)"\t prefix: ";
    uint64_t v22 = v25 + 10;
  }
  else
  {
    *((void *)&v62 + 1) = 8250;
    int64_t v63 = 0;
    HIBYTE(v63) = v20 + 10;
    *(void *)&long long v62 = *(void *)"\t prefix: ";
    uint64_t v22 = (char *)&v62 + 10;
    if (!v20) {
      goto LABEL_46;
    }
  }
  if (v19 >= 0) {
    int v26 = (unsigned int *)(a2 + 4);
  }
  else {
    int v26 = a2[4];
  }
  memmove(v22, v26, v20);
LABEL_46:
  v22[v20] = 0;
  if (v63 >= 0) {
    float v27 = (const std::string::value_type *)&v62;
  }
  else {
    float v27 = (const std::string::value_type *)v62;
  }
  if (v63 >= 0) {
    std::string::size_type v28 = HIBYTE(v63);
  }
  else {
    std::string::size_type v28 = *((void *)&v62 + 1);
  }
  std::string::append(this, v27, v28);
  if (SHIBYTE(v63) < 0) {
    operator delete((void *)v62);
  }
  sub_19E4D2048(&v61, (const void **)a2[7], (const void **)a2[8]);
  BOOL v29 = std::string::insert(&v61, 0, "\t starting stem: ", 0x11uLL);
  long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  int64_t v63 = v29->__r_.__value_.__r.__words[2];
  long long v62 = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  if (v63 >= 0) {
    uint64_t v31 = (const std::string::value_type *)&v62;
  }
  else {
    uint64_t v31 = (const std::string::value_type *)v62;
  }
  if (v63 >= 0) {
    std::string::size_type v32 = HIBYTE(v63);
  }
  else {
    std::string::size_type v32 = *((void *)&v62 + 1);
  }
  std::string::append(this, v31, v32);
  if (SHIBYTE(v63) < 0)
  {
    operator delete((void *)v62);
    if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_62;
    }
  }
  else if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_62;
  }
  operator delete(v61.__r_.__value_.__l.__data_);
LABEL_62:
  std::to_string(&v61, (unint64_t)a2[33]);
  float32x4_t v33 = std::string::insert(&v61, 0, "\t # predicted words: ", 0x15uLL);
  long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  int64_t v63 = v33->__r_.__value_.__r.__words[2];
  long long v62 = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  if (v63 >= 0) {
    int v35 = (const std::string::value_type *)&v62;
  }
  else {
    int v35 = (const std::string::value_type *)v62;
  }
  if (v63 >= 0) {
    std::string::size_type v36 = HIBYTE(v63);
  }
  else {
    std::string::size_type v36 = *((void *)&v62 + 1);
  }
  std::string::append(this, v35, v36);
  if (SHIBYTE(v63) < 0)
  {
    operator delete((void *)v62);
    if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_70;
    }
  }
  else if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_70;
  }
  operator delete(v61.__r_.__value_.__l.__data_);
LABEL_70:
  std::to_string(&v61, 0xAAAAAAAAAAAAAAABLL * (((char *)a2[31] - (char *)a2[30]) >> 3));
  int v37 = std::string::insert(&v61, 0, "\t # active hypothesis: ", 0x17uLL);
  long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
  int64_t v63 = v37->__r_.__value_.__r.__words[2];
  long long v62 = v38;
  v37->__r_.__value_.__l.__size_ = 0;
  v37->__r_.__value_.__r.__words[2] = 0;
  v37->__r_.__value_.__r.__words[0] = 0;
  if (v63 >= 0) {
    uint64_t v39 = (const std::string::value_type *)&v62;
  }
  else {
    uint64_t v39 = (const std::string::value_type *)v62;
  }
  if (v63 >= 0) {
    std::string::size_type v40 = HIBYTE(v63);
  }
  else {
    std::string::size_type v40 = *((void *)&v62 + 1);
  }
  std::string::append(this, v39, v40);
  if (SHIBYTE(v63) < 0)
  {
    operator delete((void *)v62);
    if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_78;
    }
  }
  else if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_78;
  }
  operator delete(v61.__r_.__value_.__l.__data_);
LABEL_78:
  std::string::append(this, "\t active hypotheses: ", 0x15uLL);
  uint64_t v41 = a2[30];
  std::string::size_type v42 = a2[31];
  while (v41 != v42)
  {
    std::string::size_type v43 = a2[33];
    unint64_t v44 = *((void *)v41 + 2);
    if (v44 < (unint64_t)v43) {
      __assert_rtn("toString", "ToucanUtils.cpp", 33, "cursor.numWords >= hypothesis.numWords()");
    }
    std::to_string(&v58, v44 - (void)v43);
    uint64_t v45 = std::string::insert(&v58, 0, "{ # context words: ", 0x13uLL);
    long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v46;
    v45->__r_.__value_.__l.__size_ = 0;
    v45->__r_.__value_.__r.__words[2] = 0;
    v45->__r_.__value_.__r.__words[0] = 0;
    long long v47 = std::string::append(&__p, ", # total words: ", 0x11uLL);
    long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
    v60.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v48;
    v47->__r_.__value_.__l.__size_ = 0;
    v47->__r_.__value_.__r.__words[2] = 0;
    v47->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v57, *((void *)v41 + 2));
    if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v49 = &v57;
    }
    else {
      uint64_t v49 = (std::string *)v57.__r_.__value_.__r.__words[0];
    }
    if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v50 = HIBYTE(v57.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v50 = v57.__r_.__value_.__l.__size_;
    }
    unint64_t v51 = std::string::append(&v60, (const std::string::value_type *)v49, v50);
    long long v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
    v61.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v52;
    v51->__r_.__value_.__l.__size_ = 0;
    v51->__r_.__value_.__r.__words[2] = 0;
    v51->__r_.__value_.__r.__words[0] = 0;
    __n128 v53 = std::string::append(&v61, " }", 2uLL);
    long long v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
    int64_t v63 = v53->__r_.__value_.__r.__words[2];
    long long v62 = v54;
    v53->__r_.__value_.__l.__size_ = 0;
    v53->__r_.__value_.__r.__words[2] = 0;
    v53->__r_.__value_.__r.__words[0] = 0;
    if (v63 >= 0) {
      char v55 = (const std::string::value_type *)&v62;
    }
    else {
      char v55 = (const std::string::value_type *)v62;
    }
    if (v63 >= 0) {
      std::string::size_type v56 = HIBYTE(v63);
    }
    else {
      std::string::size_type v56 = *((void *)&v62 + 1);
    }
    std::string::append(this, v55, v56);
    if (SHIBYTE(v63) < 0)
    {
      operator delete((void *)v62);
      if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_97:
        if ((SHIBYTE(v57.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_98;
        }
        goto LABEL_103;
      }
    }
    else if ((SHIBYTE(v61.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_97;
    }
    operator delete(v61.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v57.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_98:
      if ((SHIBYTE(v60.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_99;
      }
      goto LABEL_104;
    }
LABEL_103:
    operator delete(v57.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v60.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_99:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_80;
      }
      goto LABEL_105;
    }
LABEL_104:
    operator delete(v60.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
LABEL_80:
      operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_106;
      }
      goto LABEL_81;
    }
LABEL_105:
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
LABEL_106:
    }
      operator delete(v58.__r_.__value_.__l.__data_);
LABEL_81:
    v41 += 6;
  }
}

void sub_19E4DDE68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (*(char *)(v40 + 23) < 0) {
    operator delete(*(void **)v40);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E4DDFF0(std::string *__dst, uint64_t a2, int a3)
{
  switch(a3)
  {
    case 0:
      if (*(char *)(a2 + 23) < 0)
      {
        int v11 = *(void **)a2;
        unint64_t v12 = *(void *)(a2 + 8);
        sub_19E39369C(__dst, v11, v12);
      }
      else
      {
        *(_OWORD *)&__dst->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
        __dst->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
      }
      break;
    case 1:
      MEMORY[0x19F3BDBC0](__p);
      int v7 = *(char *)(a2 + 23);
      BOOL v8 = v7 < 0;
      if (v7 >= 0) {
        unint64_t v9 = (char *)a2;
      }
      else {
        unint64_t v9 = *(char **)a2;
      }
      uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
      if (v8) {
        uint64_t v10 = *(void *)(a2 + 8);
      }
      sub_19E3DCA10(__dst, v9, (std::locale *)__p, &v9[v10]);
      std::locale::~locale((std::locale *)__p);
      break;
    case 2:
      sub_19E4DE1C8(__dst, (const UInt8 *)a2);
      break;
    case 3:
      sub_19E4DE1C8(__p, (const UInt8 *)a2);
      MEMORY[0x19F3BDBC0](&v13);
      if ((v15 & 0x80u) == 0) {
        BOOL v5 = (char *)__p;
      }
      else {
        BOOL v5 = (char *)__p[0];
      }
      unint64_t v6 = v15;
      if ((v15 & 0x80u) != 0) {
        unint64_t v6 = (unint64_t)__p[1];
      }
      sub_19E3DCA10(__dst, v5, &v13, &v5[v6]);
      std::locale::~locale(&v13);
      if ((char)v15 < 0) {
        operator delete(__p[0]);
      }
      break;
    default:
      __assert_rtn("normalizeForExactMatching", "ToucanUtils.cpp", 69, "false");
  }
}

void sub_19E4DE180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void sub_19E4DE194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_19E4DE1C8(void *a1, const UInt8 *a2)
{
  CFStringRef v2 = a2;
  CFIndex v4 = a2[23];
  if ((v4 & 0x80u) != 0) {
    a2 = *(const UInt8 **)a2;
  }
  if (a2)
  {
    CFIndex v5 = *((void *)v2 + 1);
    if ((v4 & 0x80u) == 0) {
      CFIndex v6 = v4;
    }
    else {
      CFIndex v6 = v5;
    }
    CFStringRef v7 = CFStringCreateWithBytes(0, a2, v6, 0x8000100u, 0);
    if (!v7)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x19F3BD790](exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  else
  {
    CFStringRef v7 = 0;
  }
  CFMutableStringRef MutableCopy = CFStringCreateMutableCopy(0, 0, v7);
  if (v7) {
    CFRelease(v7);
  }
  CFStringTransform(MutableCopy, 0, (CFStringRef)*MEMORY[0x1E4F1D4E8], 0);
  sub_19E37774C(MutableCopy, a1);
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
}

void sub_19E4DE2DC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19E4DE2F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

void sub_19E4DE30C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E422428((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E4DE320(const void *a1)
{
  if (!a1)
  {
    CFDictionaryRef v21 = 0;
LABEL_30:
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3BD790](exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFRetain(a1);
  sub_19E36E590(&v21, a1);
  if (!v21) {
    goto LABEL_30;
  }
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v21, @"MontrealModelType");
  if (!Value || (CFTypeID TypeID = CFStringGetTypeID(), TypeID != CFGetTypeID(Value)))
  {
    LOBYTE(__p[0]) = 0;
    char v20 = 0;
    std::string::size_type v14 = __cxa_allocate_exception(0x20uLL);
    sub_19E382340(&v17, "Model resource is missing MontrealModelType");
    sub_19E3F5604(v14, &v17);
    __cxa_throw(v14, (struct type_info *)&unk_1EF0B7540, (void (*)(void *))sub_19E3F56B0);
  }
  sub_19E3C6934(__p, Value);
  char v20 = 1;
  unint64_t v4 = v19;
  if ((v19 & 0x80u) != 0) {
    unint64_t v4 = (unint64_t)__p[1];
  }
  if (v4 != 6)
  {
    if (v4 == 4)
    {
      CFIndex v5 = __p[0];
      CFIndex v6 = __p;
      if ((v19 & 0x80u) != 0) {
        CFIndex v6 = (void **)__p[0];
      }
      if (*(_DWORD *)v6 == 808333942)
      {
        uint64_t v7 = 0;
        if ((char)v19 < 0) {
          goto LABEL_13;
        }
        goto LABEL_24;
      }
    }
LABEL_28:
    unsigned __int8 v15 = __cxa_allocate_exception(0x20uLL);
    std::operator+<char>();
    sub_19E3F5604(v15, &v17);
    __cxa_throw(v15, (struct type_info *)&unk_1EF0B7540, (void (*)(void *))sub_19E3F56B0);
  }
  CFIndex v5 = __p[0];
  if ((v19 & 0x80u) == 0) {
    unint64_t v9 = __p;
  }
  else {
    unint64_t v9 = (void **)__p[0];
  }
  int v10 = *(_DWORD *)v9;
  int v11 = *((unsigned __int16 *)v9 + 2);
  if (v10 != 1701998403 || v11 != 19788) {
    goto LABEL_28;
  }
  uint64_t v7 = 1;
  if ((char)v19 < 0)
  {
LABEL_13:
    operator delete(v5);
    CFDictionaryRef v8 = v21;
    if (!v21) {
      return v7;
    }
    goto LABEL_25;
  }
LABEL_24:
  CFDictionaryRef v8 = v21;
  if (v21) {
LABEL_25:
  }
    CFRelease(v8);
  return v7;
}

void sub_19E4DE54C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (v22) {
    __cxa_free_exception(v21);
  }
  if (a21)
  {
    if (a20 < 0) {
      operator delete(a15);
    }
  }
  sub_19E3C6EAC((const void **)(v23 - 40));
  _Unwind_Resume(a1);
}

void sub_19E4DE5C8(void *a1, long long **a2)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  char v28 = 0;
  LOBYTE(v27) = 0;
  int v29 = 1;
  sub_19E371C70(__p, (const UInt8 *)&v27);
  LODWORD(v34) = v29;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  long long v30 = a1;
  char v31 = 0;
  unint64_t v4 = (char *)operator new(0x20uLL);
  CFIndex v5 = v4;
  CFIndex v6 = v4 + 32;
  a1[2] = v4 + 32;
  *a1 = v4;
  a1[1] = v4;
  if (SHIBYTE(v33) < 0)
  {
    sub_19E39369C(v4, __p[0], (unint64_t)__p[1]);
  }
  else
  {
    *(_OWORD *)unint64_t v4 = *(_OWORD *)__p;
    *((void *)v4 + 2) = v33;
  }
  *((_DWORD *)v5 + 6) = v34;
  a1[1] = v6;
  if ((SHIBYTE(v33) & 0x80000000) == 0)
  {
    if ((v28 & 0x80000000) == 0) {
      goto LABEL_6;
    }
LABEL_9:
    operator delete(v27);
    uint64_t v7 = a2[1];
    if (!v7) {
      return;
    }
    goto LABEL_10;
  }
  operator delete(__p[0]);
  if (v28 < 0) {
    goto LABEL_9;
  }
LABEL_6:
  uint64_t v7 = a2[1];
  if (!v7) {
    return;
  }
LABEL_10:
  CFDictionaryRef v8 = *a2;
  uint64_t v9 = (uint64_t)&(*a2)[2 * (void)v7];
  do
  {
    if ((*((_DWORD *)v8 + 6) - 1) >= 2)
    {
      unint64_t v12 = (char *)a1[1];
      unint64_t v11 = a1[2];
      if ((unint64_t)v12 < v11)
      {
        if (*((char *)v8 + 23) < 0)
        {
          sub_19E39369C((unsigned char *)a1[1], *(void **)v8, *((void *)v8 + 1));
        }
        else
        {
          long long v10 = *v8;
          *((void *)v12 + 2) = *((void *)v8 + 2);
          *(_OWORD *)unint64_t v12 = v10;
        }
        *((_DWORD *)v12 + 6) = *((_DWORD *)v8 + 6);
        a1[1] = v12 + 32;
        a1[1] = v12 + 32;
      }
      else
      {
        std::locale v13 = (char *)*a1;
        uint64_t v14 = (uint64_t)&v12[-*a1] >> 5;
        unint64_t v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 59) {
          sub_19E37C7C4();
        }
        uint64_t v16 = v11 - (void)v13;
        if (v16 >> 4 > v15) {
          unint64_t v15 = v16 >> 4;
        }
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v17 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v15;
        }
        int v35 = a1 + 2;
        if (v17)
        {
          if (v17 >> 59) {
            sub_19E37C2B8();
          }
          std::string::size_type v18 = (char *)operator new(32 * v17);
        }
        else
        {
          std::string::size_type v18 = 0;
        }
        unsigned __int8 v19 = &v18[32 * v14];
        __p[0] = v18;
        __p[1] = v19;
        float32x4_t v33 = v19;
        long long v34 = &v18[32 * v17];
        if (*((char *)v8 + 23) < 0)
        {
          sub_19E39369C(v19, *(void **)v8, *((void *)v8 + 1));
          std::locale v13 = (char *)*a1;
          unint64_t v12 = (char *)a1[1];
          unsigned __int8 v19 = (char *)__p[1];
          CFDictionaryRef v21 = v33;
        }
        else
        {
          long long v20 = *v8;
          *((void *)v19 + 2) = *((void *)v8 + 2);
          *(_OWORD *)unsigned __int8 v19 = v20;
          CFDictionaryRef v21 = &v18[32 * v14];
        }
        *(_DWORD *)&v18[32 * v14 + 24] = *((_DWORD *)v8 + 6);
        if (v12 == v13)
        {
          uint64_t v23 = v13;
        }
        else
        {
          do
          {
            long long v22 = *((_OWORD *)v12 - 2);
            *((void *)v19 - 2) = *((void *)v12 - 2);
            *((_OWORD *)v19 - 2) = v22;
            *((void *)v12 - 3) = 0;
            *((void *)v12 - 2) = 0;
            *((void *)v12 - 4) = 0;
            *((_DWORD *)v19 - 2) = *((_DWORD *)v12 - 2);
            v19 -= 32;
            v12 -= 32;
          }
          while (v12 != v13);
          uint64_t v23 = (char *)*a1;
          std::locale v13 = (char *)a1[1];
        }
        uint64_t v24 = v21 + 32;
        *a1 = v19;
        a1[1] = v21 + 32;
        unint64_t v25 = (char *)a1[2];
        a1[2] = v34;
        long long v34 = v25;
        __p[0] = v23;
        __p[1] = v23;
        if (v13 != v23)
        {
          int v26 = v13 - 32;
          do
          {
            float32x4_t v33 = v26;
            if (v26[23] < 0) {
              operator delete(*(void **)v26);
            }
            v26 -= 32;
          }
          while (v26 + 32 != v23);
          std::locale v13 = v23;
        }
        if (v13) {
          operator delete(v13);
        }
        a1[1] = v24;
      }
    }
    v8 += 2;
  }
  while (v8 != (long long *)v9);
}

void sub_19E4DE8DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void **a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  *(void *)(v23 + 8) = v24;
  sub_19E3C3B80(&a16);
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a14 < 0)
  {
    operator delete(a9);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

BOOL sub_19E4DE958(uint64_t a1, const __CFLocale *a2)
{
  char v3 = *(unsigned char *)(a1 + 23);
  if (v3 >= 0) {
    unint64_t v4 = (const UInt8 *)a1;
  }
  else {
    unint64_t v4 = *(const UInt8 **)a1;
  }
  if (v4)
  {
    if (v3 >= 0) {
      CFIndex v5 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      CFIndex v5 = *(void *)(a1 + 8);
    }
    CFStringRef v6 = CFStringCreateWithBytes(0, v4, v5, 0x8000100u, 0);
    if (!v6)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x19F3BD790](exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  else
  {
    CFStringRef v6 = 0;
  }
  CFIndex Length = CFStringGetLength(v6);
  CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableStringRef MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], Length, v6);
  CFStringLowercase(MutableCopy, a2);
  CFIndex v11 = CFStringGetLength(v6);
  CFMutableStringRef v12 = CFStringCreateMutableCopy(v9, v11, v6);
  CFStringCapitalize(v12, a2);
  if (CFEqual(v6, v12))
  {
    BOOL v13 = CFStringCompare(v6, MutableCopy, 0) != kCFCompareEqualTo;
    if (!v12) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  BOOL v13 = 0;
  if (v12) {
LABEL_15:
  }
    CFRelease(v12);
LABEL_16:
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  if (v6) {
    CFRelease(v6);
  }
  return v13;
}

void sub_19E4DEACC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19E4DEAEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  char v3 = va_arg(va1, const void *);
  va_copy(va2, va1);
  CFIndex v5 = va_arg(va2, const void *);
  sub_19E3DCC24((const void **)va);
  sub_19E3DCC24((const void **)va1);
  sub_19E3C6F1C((const void **)va2);
  _Unwind_Resume(a1);
}

uint64_t sub_19E4DEB20(uint64_t a1)
{
  CFStringRef v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      CFIndex v5 = (void **)*v2;
      if (*((char *)v2 + 111) < 0)
      {
        operator delete(v2[11]);
        if ((*((char *)v2 + 87) & 0x80000000) == 0)
        {
LABEL_8:
          if ((*((char *)v2 + 63) & 0x80000000) == 0) {
            goto LABEL_9;
          }
          goto LABEL_13;
        }
      }
      else if ((*((char *)v2 + 87) & 0x80000000) == 0)
      {
        goto LABEL_8;
      }
      operator delete(v2[8]);
      if ((*((char *)v2 + 63) & 0x80000000) == 0)
      {
LABEL_9:
        if (*((char *)v2 + 39) < 0) {
          goto LABEL_14;
        }
        goto LABEL_5;
      }
LABEL_13:
      operator delete(v2[5]);
      if (*((char *)v2 + 39) < 0) {
LABEL_14:
      }
        operator delete(v2[2]);
LABEL_5:
      operator delete(v2);
      CFStringRef v2 = v5;
    }
    while (v5);
  }
  char v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_19E4DEBD8(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0)
  {
    operator delete(*(void **)(a1 + 72));
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 47) & 0x80000000) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      operator delete(*(void **)(a1 + 24));
      if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
        return a1;
      }
LABEL_9:
      operator delete(*(void **)a1);
      return a1;
    }
  }
  else if ((*(char *)(a1 + 71) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0) {
    goto LABEL_8;
  }
LABEL_4:
  if (*(char *)(a1 + 23) < 0) {
    goto LABEL_9;
  }
  return a1;
}

uint64_t sub_19E4DEC58(uint64_t a1)
{
  if ((*(char *)(a1 + 71) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 47) & 0x80000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
      return a1;
    }
LABEL_7:
    operator delete(*(void **)a1);
    return a1;
  }
  operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0) {
    goto LABEL_6;
  }
LABEL_3:
  if (*(char *)(a1 + 23) < 0) {
    goto LABEL_7;
  }
  return a1;
}

void sub_19E4DECC0(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *a1 = 0;
  if (!v1) {
    return;
  }
  if (*((unsigned char *)a1 + 16))
  {
    if (*(char *)(v1 + 111) < 0)
    {
      operator delete(*(void **)(v1 + 88));
      if ((*(char *)(v1 + 87) & 0x80000000) == 0)
      {
LABEL_5:
        if ((*(char *)(v1 + 63) & 0x80000000) == 0) {
          goto LABEL_6;
        }
        goto LABEL_13;
      }
    }
    else if ((*(char *)(v1 + 87) & 0x80000000) == 0)
    {
      goto LABEL_5;
    }
    operator delete(*(void **)(v1 + 64));
    if ((*(char *)(v1 + 63) & 0x80000000) == 0)
    {
LABEL_6:
      if ((*(char *)(v1 + 39) & 0x80000000) == 0) {
        goto LABEL_7;
      }
LABEL_14:
      operator delete(*(void **)(v1 + 16));
      goto LABEL_7;
    }
LABEL_13:
    operator delete(*(void **)(v1 + 40));
    if ((*(char *)(v1 + 39) & 0x80000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_14;
  }
LABEL_7:
  operator delete((void *)v1);
}

void sub_19E4DED6C(uint64_t a1)
{
  if (*(void *)(a1 + 8)) {
    LXCursorCreateByAdvancingWithUTF8();
  }
  operator new();
}

BOOL sub_19E4DEDF4(uint64_t a1)
{
  return *(void *)(a1 + 8) != 0;
}

void sub_19E4DEE04(void *a1)
{
  *a1 = &unk_1EF0B9F60;
  CFStringRef v2 = (const void *)a1[1];
  if (v2) {
    CFRelease(v2);
  }
  a1[1] = 0;
  JUMPOUT(0x19F3BDCF0);
}

void *sub_19E4DEE78(void *a1)
{
  *a1 = &unk_1EF0B9F60;
  CFStringRef v2 = (const void *)a1[1];
  if (v2) {
    CFRelease(v2);
  }
  a1[1] = 0;
  return a1;
}

void sub_19E4DEECC(uint64_t a1)
{
  long long v8 = 0uLL;
  unint64_t v9 = 0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (*(void *)(a1 + 16) != v2)
  {
    char v3 = 0;
    unint64_t v4 = 0;
    do
    {
      (*(void (**)(uint64_t *__return_ptr))(**(void **)(v2 + 8 * v4) + 24))(&v7);
      if ((unint64_t)v3 >= v9)
      {
        char v3 = sub_19E415068(&v8, &v7);
      }
      else
      {
        uint64_t v5 = v7;
        uint64_t v7 = 0;
        *v3++ = v5;
      }
      *((void *)&v8 + 1) = v3;
      uint64_t v6 = v7;
      uint64_t v7 = 0;
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
      }
      ++v4;
      uint64_t v2 = *(void *)(a1 + 8);
    }
    while (v4 < (*(void *)(a1 + 16) - v2) >> 3);
  }
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 32) + 24))(&v7);
  operator new();
}

void sub_19E4DF050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  if (a3) {
    (*(void (**)(uint64_t))(*(void *)a3 + 8))(a3);
  }
  sub_19E3FCA08((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E4DF0A4(uint64_t **a1)
{
  uint64_t v2 = a1[1];
  char v3 = a1[2];
  if (v2 == v3)
  {
LABEL_9:
    uint64_t v7 = *(uint64_t (**)(void))(*a1[4] + 16);
    return v7();
  }
  else
  {
    char v4 = 0;
    do
    {
      while ((v4 & 1) != 0)
      {
        ++v2;
        char v4 = 1;
        if (v2 == v3) {
          return 1;
        }
      }
      uint64_t v5 = *v2++;
      char v4 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 16))(v5);
    }
    while (v2 != v3);
    if ((v4 & 1) == 0) {
      goto LABEL_9;
    }
    return 1;
  }
}

void sub_19E4DF174(void *a1)
{
  *a1 = &unk_1EF0BB5B8;
  uint64_t v2 = a1[4];
  a1[4] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  char v3 = (void *)a1[1];
  if (v3)
  {
    char v4 = (void *)a1[2];
    uint64_t v5 = (void *)a1[1];
    if (v4 != v3)
    {
      do
      {
        uint64_t v7 = *--v4;
        uint64_t v6 = v7;
        void *v4 = 0;
        if (v7) {
          (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        }
      }
      while (v4 != v3);
      uint64_t v5 = (void *)a1[1];
    }
    a1[2] = v3;
    operator delete(v5);
  }
  JUMPOUT(0x19F3BDCF0);
}

void *sub_19E4DF270(void *a1)
{
  *a1 = &unk_1EF0BB5B8;
  uint64_t v2 = a1[4];
  a1[4] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  char v3 = (void *)a1[1];
  if (v3)
  {
    char v4 = (void *)a1[2];
    uint64_t v5 = (void *)a1[1];
    if (v4 != v3)
    {
      do
      {
        uint64_t v7 = *--v4;
        uint64_t v6 = v7;
        void *v4 = 0;
        if (v7) {
          (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        }
      }
      while (v4 != v3);
      uint64_t v5 = (void *)a1[1];
    }
    a1[2] = v3;
    operator delete(v5);
  }
  return a1;
}

uint64_t sub_19E4DF34C(uint64_t a1, unsigned int a2)
{
  if (**(_DWORD **)(a1 + 16) > a2) {
    return 3;
  }
  if (*(_DWORD *)(a1 + 12) > a2) {
    return 0;
  }
  if (**(_DWORD **)(a1 + 40) > a2) {
    return 1;
  }
  if (**(_DWORD **)(a1 + 64) > a2) {
    return 2;
  }
  return 3;
}

uint64_t sub_19E4DF3A8(uint64_t a1, unsigned int *a2, uint64_t a3, unsigned int *a4, uint64_t a5)
{
  uint64_t v5 = a4;
  if (a3 < 1) {
    return v5 - a4;
  }
  uint64_t v5 = a4;
  if (a5 < 1) {
    return v5 - a4;
  }
  uint64_t v6 = &a2[a3];
  uint64_t v7 = *(unsigned int **)(a1 + 64);
  uint64_t v5 = a4;
  unint64_t v8 = (unint64_t)&a4[a5];
  while (1)
  {
    unsigned int v9 = *a2;
    if (*v7 <= *a2 && v7[*(unsigned int *)(a1 + 8)] > v9) {
      break;
    }
    *v5++ = v9;
LABEL_15:
    if (++a2 >= v6 || (unint64_t)v5 >= v8) {
      return v5 - a4;
    }
  }
  long long v10 = v7;
  uint64_t v11 = *(void *)(a1 + 72) - (void)v7;
  if (v11)
  {
    unint64_t v12 = v11 >> 2;
    long long v10 = v7;
    do
    {
      unint64_t v13 = v12 >> 1;
      uint64_t v14 = &v10[v12 >> 1];
      unsigned int v16 = *v14;
      unint64_t v15 = v14 + 1;
      v12 += ~(v12 >> 1);
      if (v16 > v9) {
        unint64_t v12 = v13;
      }
      else {
        long long v10 = v15;
      }
    }
    while (v12);
  }
  if ((uint64_t)(v8 - (void)v5) >= 9)
  {
    unsigned int v17 = v9 - *(v10 - 1);
    uint64_t v18 = *(void *)(a1 + 40);
    unint64_t v19 = (char *)(v10 - 1) - (char *)v7;
    unint64_t v20 = v19 >> 2;
    int v21 = *(_DWORD *)(v18 + 4 * ((v19 >> 2) + 1));
    v19 &= 0x3FFFFFFFCuLL;
    LODWORD(v18) = *(_DWORD *)(v18 + v19);
    unsigned int v22 = v21 - v18;
    int v23 = v17 / v22;
    unsigned int v24 = v17 % v22 + v18;
    LODWORD(v18) = *(_DWORD *)(a1 + 12) + v20;
    *uint64_t v5 = *(_DWORD *)(*(void *)(a1 + 16) + v19) + v23;
    v5[1] = v18;
    v5[2] = v24;
    v5 += 3;
    goto LABEL_15;
  }
  return 0;
}

uint64_t sub_19E4DF4BC(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD *a4, uint64_t a5)
{
  uint64_t v6 = a4;
  if (a3 < 1) {
    return v6 - a4;
  }
  uint64_t v6 = a4;
  if (a5 < 1) {
    return v6 - a4;
  }
  uint64_t v7 = a2;
  unint64_t v9 = (unint64_t)&a2[a3];
  uint64_t v6 = a4;
  unint64_t v10 = (unint64_t)&a4[a5];
  while (1)
  {
    uint64_t v11 = *v7;
    if ((uint64_t)(v9 - (void)v7) >= 9)
    {
      unint64_t v12 = *(char **)(a1 + 16);
      if (*(_DWORD *)v12 <= v11)
      {
        uint64_t v13 = *(unsigned int *)(a1 + 8);
        if (*(_DWORD *)&v12[4 * v13] > v11)
        {
          uint64_t v14 = *(void *)(a1 + 24) - (void)v12;
          if (v14)
          {
            unint64_t v15 = v14 >> 2;
            unsigned int v16 = *(_DWORD **)(a1 + 16);
            do
            {
              unint64_t v17 = v15 >> 1;
              uint64_t v18 = &v16[v15 >> 1];
              unsigned int v20 = *v18;
              unint64_t v19 = v18 + 1;
              v15 += ~(v15 >> 1);
              if (v20 > v11) {
                unint64_t v15 = v17;
              }
              else {
                unsigned int v16 = v19;
              }
            }
            while (v15);
          }
          else
          {
            unsigned int v16 = *(_DWORD **)(a1 + 16);
          }
          unsigned int v21 = v7[2];
          unsigned int v22 = *(unsigned int **)(a1 + 40);
          if (*v22 <= v21 && v22[v13] > v21)
          {
            int v23 = *(_DWORD **)(a1 + 40);
            uint64_t v24 = *(void *)(a1 + 48) - (void)v22;
            if (v24)
            {
              unint64_t v25 = v24 >> 2;
              int v23 = *(_DWORD **)(a1 + 40);
              do
              {
                unint64_t v26 = v25 >> 1;
                float v27 = &v23[v25 >> 1];
                unsigned int v29 = *v27;
                char v28 = v27 + 1;
                v25 += ~(v25 >> 1);
                if (v29 > v21) {
                  unint64_t v25 = v26;
                }
                else {
                  int v23 = v28;
                }
              }
              while (v25);
            }
            unsigned int v30 = v7[1];
            int v31 = *(_DWORD *)(a1 + 12);
            if (v30 == v31 + ((unint64_t)((char *)(v16 - 1) - v12) >> 2)
              && v30 == v31 + ((unint64_t)((char *)(v23 - 1) - (char *)v22) >> 2))
            {
              int v32 = v21
                  - *(v23 - 1)
                  + (v22[v30 - v31 + 1] - v22[v30 - v31]) * (v11 - *(v16 - 1))
                  + *(_DWORD *)(*(void *)(a1 + 64) + 4 * (v30 - v31));
              uint64_t v33 = 3;
              goto LABEL_28;
            }
          }
        }
      }
    }
    if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a1 + 32))(a1, v11) != 3) {
      return 0;
    }
    int v32 = *v7;
    uint64_t v33 = 1;
LABEL_28:
    *v6++ = v32;
    v7 += v33;
    if ((unint64_t)v7 >= v9 || (unint64_t)v6 >= v10) {
      return v6 - a4;
    }
  }
}

void sub_19E4DF6B8(void *a1)
{
  sub_19E4DF6F0(a1);
  JUMPOUT(0x19F3BDCF0);
}

void *sub_19E4DF6F0(void *a1)
{
  *a1 = &unk_1EF0BBD58;
  uint64_t v2 = (const void *)a1[18];
  if (v2) {
    CFRelease(v2);
  }
  a1[18] = 0;
  char v3 = (const void *)a1[17];
  if (v3) {
    CFRelease(v3);
  }
  a1[17] = 0;
  uint64_t v4 = a1[14];
  if (v4)
  {
    uint64_t v5 = a1[15];
    uint64_t v6 = (void *)a1[14];
    if (v5 != v4)
    {
      uint64_t v7 = a1[15];
      do
      {
        unsigned int v8 = *(unsigned __int16 *)(v7 - 16);
        v7 -= 16;
        if (v8 >= 0xF)
        {
          uint64_t v9 = *(void *)(v5 - 8);
          if (v9) {
            MEMORY[0x19F3BDCC0](v9, 0x1000C8077774924);
          }
        }
        uint64_t v5 = v7;
      }
      while (v7 != v4);
      uint64_t v6 = (void *)a1[14];
    }
    a1[15] = v4;
    operator delete(v6);
  }
  uint64_t v10 = a1[11];
  if (v10)
  {
    uint64_t v11 = a1[12];
    unint64_t v12 = (void *)a1[11];
    if (v11 != v10)
    {
      do
      {
        uint64_t v13 = *(void **)(v11 - 24);
        if (v13 && *(unsigned char *)(v11 - 26) == 1) {
          free(v13);
        }
        v11 -= 32;
      }
      while (v11 != v10);
      unint64_t v12 = (void *)a1[11];
    }
    a1[12] = v10;
    operator delete(v12);
  }
  uint64_t v14 = (void *)a1[8];
  if (v14)
  {
    a1[9] = v14;
    operator delete(v14);
  }
  unint64_t v15 = (void *)a1[5];
  if (v15)
  {
    a1[6] = v15;
    operator delete(v15);
  }
  unsigned int v16 = (void *)a1[2];
  if (v16)
  {
    a1[3] = v16;
    operator delete(v16);
  }
  return a1;
}

void sub_19E4DF848(uint64_t a1, int a2)
{
  uint64_t v5 = *(char **)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  uint64_t v6 = v5;
  if ((unint64_t)v5 >= v4)
  {
    unsigned int v8 = *(char **)a1;
    uint64_t v9 = (uint64_t)&v5[-*(void *)a1];
    uint64_t v10 = v9 >> 2;
    unint64_t v11 = (v9 >> 2) + 1;
    if (v11 >> 62) {
      sub_19E37C7C4();
    }
    uint64_t v12 = v4 - (void)v8;
    if (v12 >> 1 > v11) {
      unint64_t v11 = v12 >> 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      if (v13 >> 62) {
        sub_19E37C2B8();
      }
      uint64_t v14 = operator new(4 * v13);
    }
    else
    {
      uint64_t v14 = 0;
    }
    unint64_t v15 = &v14[4 * v10];
    unsigned int v16 = &v14[4 * v13];
    *unint64_t v15 = a2;
    uint64_t v7 = v15 + 1;
    if (v5 != v8)
    {
      unint64_t v17 = v5 - v8 - 4;
      if (v17 < 0x2C) {
        goto LABEL_27;
      }
      if ((unint64_t)(v5 - v14 - v9) < 0x20) {
        goto LABEL_27;
      }
      uint64_t v18 = (v17 >> 2) + 1;
      uint64_t v6 = &v5[-4 * (v18 & 0x7FFFFFFFFFFFFFF8)];
      unint64_t v19 = &v14[4 * v10 - 16];
      unsigned int v20 = v5 - 16;
      uint64_t v21 = v18 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v22 = *(_OWORD *)v20;
        *(v19 - 1) = *((_OWORD *)v20 - 1);
        *unint64_t v19 = v22;
        v19 -= 2;
        v20 -= 32;
        v21 -= 8;
      }
      while (v21);
      v15 -= v18 & 0x7FFFFFFFFFFFFFF8;
      if (v18 != (v18 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_27:
        do
        {
          int v23 = *((_DWORD *)v6 - 1);
          v6 -= 4;
          *--unint64_t v15 = v23;
        }
        while (v6 != v8);
      }
    }
    *(void *)a1 = v15;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v16;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v5 = a2;
    uint64_t v7 = v5 + 4;
  }
  *(void *)(a1 + 8) = v7;
}

uint64_t sub_19E4DF9A8(uint64_t a1, const __CFURL *a2)
{
  uint64_t v186 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)(a1 + 16) = 0u;
  char v3 = (uint64_t *)(a1 + 16);
  *(void *)a1 = &unk_1EF0BBD58;
  *(_OWORD *)(a1 + 64) = 0u;
  unint64_t v4 = (uint64_t *)(a1 + 64);
  uint64_t v5 = a1 + 40;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(void *)(a1 + 144) = 0;
  CFDictionaryRef v6 = (const __CFDictionary *)sub_19E3C30D0(a2, 0);
  CFDictionaryRef v7 = v6;
  if (!v6) {
    goto LABEL_232;
  }
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v6, @"Locale");
  uint64_t v9 = CFDictionaryGetValue(v7, @"NonStemSuffixCount");
  int valuePtr = 0;
  CFTypeRef cf = CFDictionaryGetValue(v7, @"StemSuffixClasses");
  if (!Value
    || (CFTypeID v10 = CFGetTypeID(Value), v10 != CFStringGetTypeID())
    || CFStringGetLength(Value) < 1
    || !v9
    || (CFTypeID v11 = CFGetTypeID(v9), v11 != CFNumberGetTypeID())
    || !cf
    || (CFTypeID v12 = CFGetTypeID(cf), v12 != CFArrayGetTypeID())
    || !CFNumberGetValue((CFNumberRef)v9, kCFNumberSInt32Type, &valuePtr)
    || valuePtr < 1)
  {
    char v17 = 0;
    goto LABEL_33;
  }
  CFIndex usedBufLen = 0;
  CFLocaleRef v13 = CFLocaleCreate(0, Value);
  uint64_t v14 = *(const void **)(a1 + 136);
  if (v14) {
    CFRelease(v14);
  }
  *(void *)(a1 + 136) = v13;
  *(_DWORD *)(a1 + 8) = CFArrayGetCount((CFArrayRef)cf);
  sub_19E4DF848((uint64_t)v3, 0);
  sub_19E4DF848(v5, 0);
  sub_19E4DF848((uint64_t)v4, 0);
  v187.length = CFStringGetLength(Value);
  v187.location = 0;
  CFStringGetBytes(Value, v187, 0x8000100u, 0, 0, buffer, 255, &usedBufLen);
  CFIndex v15 = usedBufLen + 1;
  buffer[usedBufLen] = 0;
  CFIndex usedBufLen = v15;
  if (*(_DWORD *)buffer ^ 0x746F6F72 | v185)
  {
    LODWORD(block) = 0;
    if (buffer[0] - 97 < 0x1A)
    {
      LOBYTE(block) = buffer[0];
      if (buffer[1] - 97 <= 0x19)
      {
        BYTE1(block) = buffer[1];
        if (buffer[2] - 97 <= 0x19)
        {
          BYTE2(block) = buffer[2];
          if (buffer[3] - 97 <= 0x19) {
            BYTE3(block) = buffer[3];
          }
        }
      }
    }
    if ((unsigned __int16)block ^ 0x6164 | BYTE2(block)
      && (unsigned __int16)block ^ 0x626E | BYTE2(block)
      && (unsigned __int16)block ^ 0x6966 | BYTE2(block)
      && (unsigned __int16)block ^ 0x7673 | BYTE2(block))
    {
      if ((unsigned __int16)block ^ 0x7363 | BYTE2(block) && (unsigned __int16)block ^ 0x6B73 | BYTE2(block))
      {
        int v16 = 4;
        if ((unsigned __int16)block ^ 0x6C65 | BYTE2(block)
          && block != 7823720
          && (unsigned __int16)block ^ 0x7266 | BYTE2(block))
        {
          if ((unsigned __int16)block ^ 0x7274 | BYTE2(block))
          {
            if ((unsigned __int16)block ^ 0x6174 | BYTE2(block)) {
              int v16 = 1;
            }
            else {
              int v16 = 5;
            }
          }
          else
          {
            int v16 = 2;
          }
        }
      }
      else
      {
        int v16 = 4;
      }
    }
    else
    {
      int v16 = 3;
    }
  }
  else
  {
    int v16 = 1;
  }
  uint64_t v174 = 0;
  char v175 = &v174;
  uint64_t v176 = 0x2000000000;
  uint64_t v177 = 0;
  if (qword_1E945A2A8 != -1) {
    dispatch_once(&qword_1E945A2A8, &unk_1EF0BEB10);
  }
  blocuint64_t k = MEMORY[0x1E4F143A8];
  uint64_t v169 = 0x40000000;
  size_t v170 = sub_19E4E5B7C;
  size_t v171 = &unk_1E59A13F8;
  size_t v172 = &v174;
  int v173 = v16;
  dispatch_sync((dispatch_queue_t)qword_1E945A2A0, &block);
  uint64_t v152 = v175[3];
  _Block_object_dispose(&v174, 8);
  if (!*(_DWORD *)(a1 + 8))
  {
LABEL_212:
    unint64_t v131 = 0;
    uint64_t v132 = *v3;
    do
    {
      *(_DWORD *)(v132 + 4 * v131) += valuePtr;
      unint64_t v133 = *(unsigned int *)(a1 + 8);
      BOOL v134 = v131++ >= v133;
    }
    while (!v134);
    unint64_t v135 = 0;
    *(_DWORD *)(a1 + 12) = *(_DWORD *)(v132 + 4 * v133);
    uint64_t v136 = *(void *)(a1 + 40);
    LODWORD(v137) = v133;
    do
    {
      *(_DWORD *)(v136 + 4 * v135) += *(_DWORD *)(a1 + 12) + v137;
      unint64_t v137 = *(unsigned int *)(a1 + 8);
      BOOL v134 = v135++ >= v137;
    }
    while (!v134);
    unint64_t v138 = 0;
    uint64_t v139 = *v4;
    do
    {
      *(_DWORD *)(v139 + 4 * v138) += *(_DWORD *)(v136 + 4 * v137);
      unint64_t v137 = *(unsigned int *)(a1 + 8);
      BOOL v134 = v138++ >= v137;
    }
    while (!v134);
    CFURLRef v140 = CFURLCopyAbsoluteURL(a2);
    std::string::size_type v141 = *(const void **)(a1 + 144);
    if (v141) {
      CFRelease(v141);
    }
    *(void *)(a1 + 144) = v140;
    char v17 = 1;
    goto LABEL_33;
  }
  uint64_t v159 = 0;
  uint64_t v160 = v5;
  int v158 = 0;
  unint64_t v19 = 0;
  unint64_t v148 = "LMTIStringFunctions.cpp";
  char v149 = "key_len <= key.size()";
  uint8x8_t v147 = "compute_sort_key";
  while (1)
  {
    unint64_t v161 = v19;
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)cf, v19);
    CFTypeID v21 = CFGetTypeID(ValueAtIndex);
    if (v21 != CFDictionaryGetTypeID()) {
      break;
    }
    CFStringRef v22 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, @"Name");
    CFStringRef v23 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, @"Abbreviation");
    uint64_t v24 = CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, @"StemCount");
    unint64_t v25 = CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, @"SuffixCount");
    uint64_t v164 = 0;
    if (!v22) {
      break;
    }
    unint64_t v26 = v25;
    CFTypeID v27 = CFGetTypeID(v22);
    if (v27 != CFStringGetTypeID()) {
      break;
    }
    if (CFStringGetLength(v22) < 1) {
      break;
    }
    if (!v23) {
      break;
    }
    CFTypeID v28 = CFGetTypeID(v23);
    if (v28 != CFStringGetTypeID()) {
      break;
    }
    if (CFStringGetLength(v23) < 1) {
      break;
    }
    if (!v24) {
      break;
    }
    CFTypeID v29 = CFGetTypeID(v24);
    if (v29 != CFNumberGetTypeID()) {
      break;
    }
    if (!CFNumberGetValue((CFNumberRef)v24, kCFNumberSInt32Type, (char *)&v164 + 4)) {
      break;
    }
    if (SHIDWORD(v164) < 1) {
      break;
    }
    if (!v26) {
      break;
    }
    CFTypeID v30 = CFGetTypeID(v26);
    if (v30 != CFNumberGetTypeID()) {
      break;
    }
    if (!CFNumberGetValue((CFNumberRef)v26, kCFNumberSInt32Type, &v164)) {
      break;
    }
    int v31 = v164;
    if ((int)v164 < 1) {
      break;
    }
    int v32 = HIDWORD(v164);
    HIDWORD(v159) += HIDWORD(v164);
    sub_19E4DF848((uint64_t)v3, SHIDWORD(v159));
    LODWORD(v159) = v159 + v31;
    sub_19E4DF848(v160, v159);
    v158 += v32 * v31;
    sub_19E4DF848((uint64_t)v4, v158);
    sub_19E50ECE0((uint64_t)&srcLength, v23);
    unint64_t v34 = *(void *)(a1 + 96);
    unint64_t v33 = *(void *)(a1 + 104);
    if (v34 >= v33)
    {
      uint64_t v37 = *(void *)(a1 + 88);
      uint64_t v38 = (uint64_t)(v34 - v37) >> 5;
      if ((unint64_t)(v38 + 1) >> 59) {
        sub_19E37C7C4();
      }
      uint64_t v39 = v33 - v37;
      uint64_t v40 = v39 >> 4;
      if (v39 >> 4 <= (unint64_t)(v38 + 1)) {
        uint64_t v40 = v38 + 1;
      }
      if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v41 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v41 = v40;
      }
      if (v41)
      {
        if (v41 >> 59) {
          sub_19E37C2B8();
        }
        std::string::size_type v42 = (char *)operator new(32 * v41);
      }
      else
      {
        std::string::size_type v42 = 0;
      }
      uint64_t v43 = (uint64_t)&v42[32 * v38];
      __src_8 = &v42[32 * v41];
      sub_19E50F564(v43, (unsigned __int16 *)&srcLength);
      uint64_t v44 = 0;
      uint64_t v36 = v43 + 32;
      *((void *)&v45 + 1) = __src_8;
      *(void *)&long long v45 = v43 + 32;
      *(_OWORD *)char __src = v45;
      uint64_t v47 = *(void *)(a1 + 88);
      for (uint64_t i = *(void *)(a1 + 96); i + v44 != v47; sub_19E50F564(v43 + v44, (unsigned __int16 *)(v44 + i)))
        v44 -= 32;
      uint64_t v48 = v43 + v44;
      uint64_t v49 = *(char **)(a1 + 88);
      std::string::size_type v50 = *(char **)(a1 + 96);
      *(void *)(a1 + 88) = v48;
      *(_OWORD *)(a1 + 96) = *(_OWORD *)__src;
      for (unint64_t j = v161; v50 != v49; v50 -= 32)
      {
        uint64_t v70 = (void *)*((void *)v50 - 3);
        if (v70 && *(v50 - 26) == 1) {
          free(v70);
        }
      }
      if (v49) {
        operator delete(v49);
      }
    }
    else
    {
      sub_19E50F564(*(void *)(a1 + 96), (unsigned __int16 *)&srcLength);
      unint64_t j = v161;
      uint64_t v36 = v34 + 32;
      *(void *)(a1 + 96) = v34 + 32;
    }
    *(void *)(a1 + 96) = v36;
    if ((_WORD)srcLength)
    {
      unsigned int v51 = v180;
      if (v180 || (sub_19E50F43C((unsigned __int16 *)&srcLength), (unsigned int v51 = v180) != 0))
      {
        long long v52 = (char *)operator new(2 * v51);
        __n128 v53 = &v52[2 * v51];
        bzero(v52, 2 * v51);
        long long v54 = v53;
      }
      else
      {
        long long v54 = 0;
        __n128 v53 = 0;
        long long v52 = 0;
      }
      *(void *)pErrorCode = 0;
      uint64_t v55 = v54 - v52;
      if (v182) {
        std::string::size_type v56 = (const char *)v182;
      }
      else {
        std::string::size_type v56 = v183;
      }
      u_strFromUTF8((UChar *)v52, (unint64_t)(v54 - v52) >> 1, (int32_t *)pErrorCode, v56, (unsigned __int16)srcLength, &pErrorCode[1]);
      UErrorCode v57 = pErrorCode[1];
      if (pErrorCode[1] == U_BUFFER_OVERFLOW_ERROR)
      {
        std::string v58 = v53;
        uint64_t v59 = pErrorCode[0];
        unint64_t v60 = (int)pErrorCode[0] - (v55 >> 1);
        if ((int)pErrorCode[0] <= (unint64_t)(v55 >> 1))
        {
          if ((int)pErrorCode[0] < (unint64_t)(v55 >> 1)) {
            long long v54 = &v52[2 * pErrorCode[0]];
          }
        }
        else if (v60 <= (v58 - v54) >> 1)
        {
          bzero(v54, 2 * v60);
          v54 += 2 * v60;
        }
        else
        {
          if (pErrorCode[0] < 0) {
            sub_19E37C7C4();
          }
          if (v58 - v52 > (unint64_t)(int)pErrorCode[0]) {
            uint64_t v59 = v58 - v52;
          }
          if ((unint64_t)(v58 - v52) >= 0x7FFFFFFFFFFFFFFELL) {
            uint64_t v59 = 0x7FFFFFFFFFFFFFFFLL;
          }
          if (v59 < 0) {
            sub_19E37C2B8();
          }
          std::string v61 = (char *)operator new(2 * v59);
          size_t v62 = 2 * v60;
          int64_t v63 = v61;
          unsigned int v64 = &v61[2 * (v55 >> 1)];
          size_t __srca = v62;
          bzero(v64, v62);
          if (v54 == v52)
          {
            uint64_t v67 = v64;
            size_t v68 = __srca;
          }
          else
          {
            unint64_t v65 = v54 - v52 - 2;
            if (v65 < 0x1E || (unint64_t)(v52 - v63) < 0x20)
            {
              uint64_t v66 = v54;
              uint64_t v67 = v64;
              size_t v68 = __srca;
              goto LABEL_95;
            }
            uint64_t v96 = (v65 >> 1) + 1;
            uint64_t v66 = &v54[-2 * (v96 & 0xFFFFFFFFFFFFFFF0)];
            uint64_t v97 = &v63[v55 - 16];
            unint64_t v98 = v54 - 16;
            unint64_t v99 = v96 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              long long v100 = *(_OWORD *)v98;
              *((_OWORD *)v97 - 1) = *((_OWORD *)v98 - 1);
              *(_OWORD *)uint64_t v97 = v100;
              v97 -= 32;
              v98 -= 32;
              v99 -= 16;
            }
            while (v99);
            uint64_t v67 = v64;
            v64 -= 2 * (v96 & 0xFFFFFFFFFFFFFFF0);
            size_t v68 = __srca;
            if (v96 != (v96 & 0xFFFFFFFFFFFFFFF0))
            {
              do
              {
LABEL_95:
                __int16 v69 = *((_WORD *)v66 - 1);
                v66 -= 2;
                *((_WORD *)v64 - 1) = v69;
                v64 -= 2;
              }
              while (v66 != v52);
            }
          }
          long long v54 = &v67[v68];
          if (v52) {
            operator delete(v52);
          }
          long long v52 = v64;
        }
        pErrorCode[1] = U_ZERO_ERROR;
        if (v182) {
          unint64_t v72 = (const char *)v182;
        }
        else {
          unint64_t v72 = v183;
        }
        u_strFromUTF8((UChar *)v52, (unint64_t)(v54 - v52) >> 1, (int32_t *)pErrorCode, v72, (unsigned __int16)srcLength, &pErrorCode[1]);
        UErrorCode v57 = pErrorCode[1];
      }
      if (v57 > U_ZERO_ERROR)
      {
        __int16 v71 = 0;
        goto LABEL_165;
      }
      UErrorCode v73 = pErrorCode[0];
      if ((int)pErrorCode[0] > (unint64_t)((v54 - v52) >> 1)) {
        __assert_rtn("compute_sort_key", "LMTIStringFunctions.cpp", 34, "ustr_len <= ustr.size()");
      }
      unint64_t j = v161;
      if (!v152)
      {
        uint64_t v174 = 0;
        char v175 = &v174;
        uint64_t v176 = 0x2000000000;
        uint64_t v177 = 0;
        if (qword_1E945A2A8 != -1) {
          dispatch_once(&qword_1E945A2A8, &unk_1EF0BEB10);
        }
        blocuint64_t k = MEMORY[0x1E4F143A8];
        uint64_t v169 = 0x40000000;
        size_t v170 = sub_19E4E5B7C;
        size_t v171 = &unk_1E59A13F8;
        size_t v172 = &v174;
        int v173 = 1;
        dispatch_sync((dispatch_queue_t)qword_1E945A2A0, &block);
        uint64_t v74 = v175[3];
        _Block_object_dispose(&v174, 8);
        if (v74)
        {
          UErrorCode v73 = pErrorCode[0];
          goto LABEL_123;
        }
        __int16 v71 = 0;
LABEL_166:
        if (v52) {
          operator delete(v52);
        }
        goto LABEL_168;
      }
LABEL_123:
      if (v73)
      {
        if (v73 < 0) {
          sub_19E37C7C4();
        }
        size_t v75 = 3 * v73;
        uint64_t v76 = (char *)operator new(v75);
        bzero(v76, v75);
        uint64_t v77 = &v76[v75];
      }
      else
      {
        uint64_t v77 = 0;
        uint64_t v76 = 0;
      }
      uint64_t v78 = v77;
      unint64_t v79 = v77 - v76;
      __srcb = v76;
      LODWORD(v80) = ucol_getSortKey();
      unint64_t v81 = v80;
      size_t v82 = v80 - v79;
      if (v80 > v79)
      {
        uint64_t v146 = v80;
        if (2 * v79 <= v80) {
          size_t v80 = v80;
        }
        else {
          size_t v80 = 2 * v79;
        }
        unint64_t v150 = (char *)operator new(v80);
        std::string::size_type v83 = &v150[v79];
        bzero(&v150[v79], v82);
        if (v78 == __srcb)
        {
          unint64_t v84 = v150;
        }
        else
        {
          unint64_t v84 = v150;
          if (v79 >= 8)
          {
            if (v79 >= 0x20)
            {
              unint64_t v86 = v79 & 0xFFFFFFFFFFFFFFE0;
              long long v87 = &v150[v79 - 16];
              long long v88 = v78 - 16;
              unint64_t v89 = v79 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                long long v90 = *(_OWORD *)v88;
                *((_OWORD *)v87 - 1) = *((_OWORD *)v88 - 1);
                *(_OWORD *)long long v87 = v90;
                v87 -= 32;
                v88 -= 32;
                v89 -= 32;
              }
              while (v89);
              if (v79 == v86) {
                goto LABEL_153;
              }
              if ((v79 & 0x18) == 0)
              {
                v83 -= v86;
                BOOL v85 = &v78[-v86];
                goto LABEL_151;
              }
            }
            else
            {
              unint64_t v86 = 0;
            }
            BOOL v85 = &v78[-(v79 & 0xFFFFFFFFFFFFFFF8)];
            unint64_t v91 = v86 - (v79 & 0xFFFFFFFFFFFFFFF8);
            uint64_t v92 = &v78[-v86];
            uint64_t v93 = &v150[&v78[-v86] - __srcb - 8];
            uint64_t v94 = v92 - 8;
            do
            {
              uint64_t v95 = *(void *)v94;
              v94 -= 8;
              *(void *)uint64_t v93 = v95;
              v93 -= 8;
              v91 += 8;
            }
            while (v91);
            if (v79 != (v79 & 0xFFFFFFFFFFFFFFF8))
            {
              v83 -= v79 & 0xFFFFFFFFFFFFFFF8;
              goto LABEL_151;
            }
          }
          else
          {
            BOOL v85 = v78;
LABEL_151:
            unint64_t v101 = v83 - 1;
            do
            {
              char v102 = *--v85;
              *v101-- = v102;
            }
            while (v85 != __srcb);
          }
LABEL_153:
          uint64_t v78 = __srcb;
          std::string::size_type v83 = v150;
        }
        if (v78)
        {
          operator delete(v78);
          unint64_t v84 = v150;
        }
        unint64_t v79 = &v84[v146] - v83;
        __srcb = v83;
        LODWORD(v80) = ucol_getSortKey();
        unint64_t v81 = v80;
      }
      if (v79 < v81)
      {
        int v142 = 47;
        goto LABEL_231;
      }
      size_t v103 = (v80 - 1);
      if (__srcb[v103])
      {
        int v142 = 48;
        unint64_t v143 = "key[key_len - 1] == 0";
        goto LABEL_230;
      }
      if (WORD1(v103))
      {
        int v142 = 31;
        uint8x8_t v147 = "initialize";
        unint64_t v148 = "LMTIByteString.cpp";
        unint64_t v143 = "buffer_size <= std::numeric_limits<uint16_t>::max()";
LABEL_230:
        char v149 = (char *)v143;
LABEL_231:
        __assert_rtn(v147, v148, v142, v149);
      }
      __int16 v71 = v80 - 1;
      if ((unsigned __int16)(v80 - 1) >= 0xFu) {
        operator new[]();
      }
      if (v80 != 1) {
        memmove(__dst, __srcb, v103);
      }
      operator delete(__srcb);
LABEL_165:
      unint64_t j = v161;
      goto LABEL_166;
    }
    __int16 v71 = 0;
LABEL_168:
    unint64_t v105 = *(char **)(a1 + 120);
    unint64_t v104 = *(void *)(a1 + 128);
    if ((unint64_t)v105 >= v104)
    {
      uint64_t v107 = *(char **)(a1 + 112);
      uint64_t v108 = (v105 - v107) >> 4;
      unint64_t v109 = v108 + 1;
      if ((unint64_t)(v108 + 1) >> 60) {
        sub_19E37C7C4();
      }
      uint64_t v110 = v104 - (void)v107;
      if (v110 >> 3 > v109) {
        unint64_t v109 = v110 >> 3;
      }
      if ((unint64_t)v110 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v111 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v111 = v109;
      }
      if (v111)
      {
        if (v111 >> 60) {
          sub_19E37C2B8();
        }
        std::string::size_type v112 = (char *)operator new(16 * v111);
      }
      else
      {
        std::string::size_type v112 = 0;
      }
      uint64_t v113 = &v112[16 * v108];
      *(_WORD *)uint64_t v113 = v71;
      *(void *)(v113 + 2) = *(void *)__dst;
      *((void *)v113 + 1) = *(void *)&__dst[6];
      if (v105 == v107)
      {
        *(void *)(a1 + 112) = v113;
        *(void *)(a1 + 120) = v113 + 16;
        *(void *)(a1 + 128) = &v112[16 * v111];
        unint64_t j = v161;
        unint64_t v106 = v113 + 16;
      }
      else
      {
        unint64_t v151 = &v112[16 * v111];
        __srcc = v113 + 16;
        uint64_t v114 = 0;
        do
        {
          uint64_t v115 = &v113[v114 - 16];
          unint64_t v116 = *(unsigned __int16 *)&v105[v114 - 16];
          if (v116 >= 0xF)
          {
            *(_WORD *)uint64_t v115 = v116;
            operator new[]();
          }
          *(_OWORD *)uint64_t v115 = *(_OWORD *)&v105[v114 - 16];
          v114 -= 16;
        }
        while (&v105[v114] != v107);
        unint64_t v117 = &v113[v114];
        unint64_t v105 = *(char **)(a1 + 112);
        long long v118 = *(char **)(a1 + 120);
        unint64_t v106 = v113 + 16;
        *(void *)(a1 + 112) = v117;
        *(void *)(a1 + 120) = __srcc;
        *(void *)(a1 + 128) = v151;
        unint64_t j = v161;
        if (v118 != v105)
        {
          float64x2x2_t v119 = v118;
          do
          {
            unsigned int v120 = *((unsigned __int16 *)v119 - 8);
            v119 -= 16;
            if (v120 >= 0xF)
            {
              uint64_t v121 = *((void *)v118 - 1);
              if (v121) {
                MEMORY[0x19F3BDCC0](v121, 0x1000C8077774924);
              }
            }
            long long v118 = v119;
          }
          while (v119 != v105);
        }
      }
      if (v105) {
        operator delete(v105);
      }
    }
    else
    {
      *(_WORD *)unint64_t v105 = v71;
      *(void *)(v105 + 2) = *(void *)__dst;
      *((void *)v105 + 1) = *(void *)&__dst[6];
      unint64_t v106 = v105 + 16;
      *(void *)(a1 + 120) = v105 + 16;
    }
    *(void *)(a1 + 120) = v106;
    if (v182 && v181 == 1) {
      free(v182);
    }
    unint64_t v19 = j + 1;
    if (v19 >= *(unsigned int *)(a1 + 8)) {
      goto LABEL_212;
    }
  }
  uint64_t v122 = *(void *)(a1 + 88);
  for (uint64_t k = *(void *)(a1 + 96); k != v122; k -= 32)
  {
    unint64_t v124 = *(void **)(k - 24);
    if (v124 && *(unsigned char *)(k - 26) == 1) {
      free(v124);
    }
  }
  *(void *)(a1 + 96) = v122;
  uint64_t v126 = *(void *)(a1 + 112);
  uint64_t v125 = *(void *)(a1 + 120);
  if (v125 != v126)
  {
    uint64_t v127 = *(void *)(a1 + 120);
    do
    {
      unsigned int v128 = *(unsigned __int16 *)(v127 - 16);
      v127 -= 16;
      if (v128 >= 0xF)
      {
        uint64_t v129 = *(void *)(v125 - 8);
        if (v129) {
          MEMORY[0x19F3BDCC0](v129, 0x1000C8077774924);
        }
      }
      uint64_t v125 = v127;
    }
    while (v127 != v126);
  }
  *(void *)(a1 + 120) = v126;
  long long v130 = *(const void **)(a1 + 136);
  if (v130) {
    CFRelease(v130);
  }
  char v17 = 0;
  *(void *)(a1 + 136) = 0;
LABEL_33:
  CFRelease(v7);
  if ((v17 & 1) == 0)
  {
LABEL_232:
    exception = __cxa_allocate_exception(0x20uLL);
    uint64_t v145 = (char *)operator new(0x30uLL);
    strcpy(v145, "invalid stem suffix lexicon ID converter plist");
    *(void *)exception = &unk_1EF0BD3F0;
    sub_19E39369C(exception + 8, v145, 0x2EuLL);
    __cxa_throw(exception, (struct type_info *)&unk_1EF0B7540, (void (*)(void *))sub_19E3F56B0);
  }
  return a1;
}

void sub_19E4E0B2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, int a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,void **a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,int a47,__int16 a48,char a49,void *a50)
{
  if (v53) {
    operator delete(v53);
  }
  if (a50 && a49 == 1) {
    free(a50);
  }
  uint64_t v55 = (const void *)v50[18];
  if (v55) {
    CFRelease(v55);
  }
  v50[18] = 0;
  std::string::size_type v56 = (const void *)v50[17];
  if (v56) {
    CFRelease(v56);
  }
  v50[17] = 0;
  uint64_t v57 = v50[14];
  if (v57)
  {
    uint64_t v62 = v50[15];
    int64_t v63 = (void *)v50[14];
    if (v62 != v57)
    {
      uint64_t v64 = v50[15];
      do
      {
        unsigned int v65 = *(unsigned __int16 *)(v64 - 16);
        v64 -= 16;
        if (v65 >= 0xF)
        {
          uint64_t v66 = *(void *)(v62 - 8);
          if (v66) {
            MEMORY[0x19F3BDCC0](v66, 0x1000C8077774924);
          }
        }
        uint64_t v62 = v64;
      }
      while (v64 != v57);
      int64_t v63 = (void *)v50[14];
    }
    v50[15] = v57;
    operator delete(v63);
    std::string v58 = (char *)v50[11];
    if (!v58)
    {
LABEL_12:
      uint64_t v59 = *v52;
      if (!*v52) {
        goto LABEL_14;
      }
      goto LABEL_13;
    }
  }
  else
  {
    std::string v58 = (char *)v50[11];
    if (!v58) {
      goto LABEL_12;
    }
  }
  uint64_t v67 = (char *)v50[12];
  size_t v68 = v58;
  if (v67 != v58)
  {
    do
    {
      __int16 v69 = (void *)*((void *)v67 - 3);
      if (v69 && *(v67 - 26) == 1) {
        free(v69);
      }
      v67 -= 32;
    }
    while (v67 != v58);
    size_t v68 = (char *)v50[11];
  }
  v50[12] = v58;
  operator delete(v68);
  uint64_t v59 = *v52;
  if (!*v52)
  {
LABEL_14:
    unint64_t v60 = *a27;
    if (*a27)
    {
      v50[6] = v60;
      operator delete(v60);
    }
    std::string v61 = *v51;
    if (*v51)
    {
      v50[3] = v61;
      operator delete(v61);
      _Unwind_Resume(exception_object);
    }
    _Unwind_Resume(exception_object);
  }
LABEL_13:
  v50[9] = v59;
  operator delete(v59);
  goto LABEL_14;
}

double sub_19E4E0E8C(uint64_t a1)
{
  return *(double *)(a1 + 8);
}

uint64_t sub_19E4E0E94(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4 = HIWORD(a2);
  unsigned int v5 = *(_DWORD *)(a1 + 56);
  if (HIWORD(a2) >= v5) {
    return 1;
  }
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 48);
  unsigned int v8 = (int *)(v6 + 4 * *(unsigned int *)(v7 + 4 * v4));
  unsigned int v9 = v5 - 1;
  if (v4 == v5 - 1)
  {
    CFTypeID v10 = (int *)(*(void *)(a1 + 24) + *(void *)(a1 + 32));
    if (v8 == v10) {
      return 1;
    }
  }
  else
  {
    CFTypeID v10 = (int *)(v6 + 4 * *(unsigned int *)(v7 + 4 * (v4 + 1)));
    if (v8 == v10) {
      return 1;
    }
  }
  unint64_t v11 = v10 - v8;
  unsigned int v12 = (unsigned __int16)a2;
  CFLocaleRef v13 = (int *)(v6 + 4 * *(unsigned int *)(v7 + 4 * v4));
  do
  {
    unint64_t v14 = v11 >> 1;
    CFIndex v15 = &v13[v11 >> 1];
    unsigned int v16 = *((unsigned __int16 *)v15 + 1);
    char v17 = v15 + 1;
    v11 += ~(v11 >> 1);
    if (v16 < (unsigned __int16)a2) {
      CFLocaleRef v13 = v17;
    }
    else {
      unint64_t v11 = v14;
    }
  }
  while (v11);
  if (v13 < v10)
  {
    unsigned int v18 = a2 << 16;
    int v19 = *v13;
    unsigned int v20 = v19 ^ (a2 << 16);
    int v21 = v19 & 0x100;
    BOOL v22 = HIWORD(v20) || v21 == 0;
    if (!v22 && a4)
    {
      CFStringRef v23 = (int *)(v4 == v9
                  ? *(void *)(a1 + 24) + *(void *)(a1 + 32)
                  : v6 + 4 * *(unsigned int *)(v7 + 4 * (v4 + 1)));
      if (v8 != v23)
      {
        unint64_t v24 = v23 - v8;
        do
        {
          unint64_t v25 = v24 >> 1;
          unint64_t v26 = &v8[v24 >> 1];
          unsigned int v27 = *((unsigned __int16 *)v26 + 1);
          CFTypeID v28 = v26 + 1;
          v24 += ~(v24 >> 1);
          if (v27 < v12) {
            unsigned int v8 = v28;
          }
          else {
            unint64_t v24 = v25;
          }
        }
        while (v24);
        if (v8 < v23)
        {
          int v29 = *v8;
          if (!((*v8 ^ v18) >> 16))
          {
            unint64_t v30 = *(unsigned int *)(a3 + 4 * a4 - 4);
            unint64_t v31 = v30 >> 16;
            if (HIWORD(*(_DWORD *)(a3 + 4 * a4 - 4)) < v5)
            {
              int v32 = (int *)(v6 + 4 * *(unsigned int *)(v7 + 4 * v31));
              unint64_t v33 = (int *)(v31 == v9
                          ? *(void *)(a1 + 24) + *(void *)(a1 + 32)
                          : v6 + 4 * *(unsigned int *)(v7 + 4 * (v31 + 1)));
              if (v32 != v33)
              {
                char v34 = v29;
                unint64_t v35 = v33 - v32;
                do
                {
                  unint64_t v36 = v35 >> 1;
                  uint64_t v37 = &v32[v35 >> 1];
                  unsigned int v38 = *((unsigned __int16 *)v37 + 1);
                  uint64_t v39 = v37 + 1;
                  v35 += ~(v35 >> 1);
                  if (v38 < (unsigned __int16)*(_DWORD *)(a3 + 4 * a4 - 4)) {
                    int v32 = v39;
                  }
                  else {
                    unint64_t v35 = v36;
                  }
                }
                while (v35);
                if (v32 < v33)
                {
                  int v40 = *v32;
                  if (!((*v32 ^ (v30 << 16)) >> 16))
                  {
                    if (v40)
                    {
                      if ((v34 & 0xE0) != 0) {
                        return 0;
                      }
                    }
                    else if ((v40 & 2) != 0)
                    {
                      if ((v34 & 0xD0) != 0) {
                        return 0;
                      }
                    }
                    else if ((v40 & 4) != 0)
                    {
                      if ((v34 & 0xB0) != 0) {
                        return 0;
                      }
                    }
                    else if ((v40 & 8) != 0 && (v34 & 0x70) != 0)
                    {
                      return 0;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return 1;
}

void sub_19E4E10B0(void *a1)
{
  *a1 = &unk_1EF0BC020;
  a1[2] = &unk_1EF0B99D8;
  uint64_t v2 = (void *)a1[3];
  if (v2) {
    munmap(v2, a1[4]);
  }
  a1[4] = 0;
  JUMPOUT(0x19F3BDCF0);
}

void *sub_19E4E1148(void *a1)
{
  *a1 = &unk_1EF0BC020;
  a1[2] = &unk_1EF0B99D8;
  uint64_t v2 = (void *)a1[3];
  if (v2) {
    munmap(v2, a1[4]);
  }
  a1[4] = 0;
  return a1;
}

uint64_t *sub_19E4E11C0(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, int a8)
{
  *a1 = a3;
  a1[1] = a4;
  if (a4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a4 + 8), 1uLL, memory_order_relaxed);
  }
  a1[2] = *a2;
  uint64_t v12 = a2[1];
  a1[3] = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  a1[4] = a7;
  char v13 = *(unsigned char *)(a6 + 23);
  if (v13 >= 0) {
    unint64_t v14 = (const UInt8 *)a6;
  }
  else {
    unint64_t v14 = *(const UInt8 **)a6;
  }
  if (v14)
  {
    if (v13 >= 0) {
      CFIndex v15 = *(unsigned __int8 *)(a6 + 23);
    }
    else {
      CFIndex v15 = *(void *)(a6 + 8);
    }
    CFStringRef v16 = CFStringCreateWithBytes(0, v14, v15, 0x8000100u, 0);
    if (!v16)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x19F3BD790](exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  else
  {
    CFStringRef v16 = 0;
  }
  a1[5] = (uint64_t)CFLocaleCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v16);
  if (v16) {
    CFRelease(v16);
  }
  *((_DWORD *)a1 + 12) = a5;
  uint64_t v18 = *a1;
  char v45 = 7;
  strcpy((char *)v44, "_U_CAP_");
  int v46 = 0;
  sub_19E371C70(&v40, (const UInt8 *)v44);
  int v43 = v46;
  (*(void (**)(void **__return_ptr, uint64_t, void **))(*(void *)v18 + 16))(__p, v18, &v40);
  int v19 = *(_DWORD *)__p[0];
  __p[1] = __p[0];
  operator delete(__p[0]);
  if (SHIBYTE(v42) < 0)
  {
    operator delete(v40);
    if ((v45 & 0x80000000) == 0) {
      goto LABEL_19;
    }
  }
  else if ((v45 & 0x80000000) == 0)
  {
    goto LABEL_19;
  }
  operator delete(v44[0]);
LABEL_19:
  *((_OWORD *)a1 + 6) = 0u;
  *((_DWORD *)a1 + 13) = v19;
  *(_OWORD *)(a1 + 7) = 0u;
  *(_OWORD *)(a1 + 9) = 0u;
  *((_DWORD *)a1 + 22) = 1065353216;
  *((_OWORD *)a1 + 7) = 0u;
  *((_DWORD *)a1 + 32) = 1065353216;
  uint64_t v20 = *(void *)(a7 + 416);
  BOOL v22 = *(CFDictionaryRef **)(v20 + 144);
  int v21 = *(std::__shared_weak_count **)(v20 + 152);
  if (v21) {
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v22)
  {
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(*v22, @"PrimaryThreshold");
    sub_19E49DA54((uint64_t *)&v40, Value);
    if (v41)
    {
      uint8x8_t v24 = (uint8x8_t)vcnt_s8(v41);
      v24.i16[0] = vaddlv_u8(v24);
      if (v24.u32[0] > 1uLL)
      {
        unint64_t v25 = a8;
        if (*(void *)&v41 <= (unint64_t)a8) {
          unint64_t v25 = (unint64_t)a8 % *(void *)&v41;
        }
      }
      else
      {
        unint64_t v25 = (*(void *)&v41 - 1) & a8;
      }
      unint64_t v26 = (uint64_t **)*((void *)v40 + v25);
      if (v26)
      {
        unsigned int v27 = *v26;
        if (v27)
        {
          if (v24.u32[0] < 2uLL)
          {
            while (1)
            {
              uint64_t v29 = v27[1];
              if (v29 == a8)
              {
                if (v27[2] == a8) {
                  goto LABEL_44;
                }
              }
              else if ((v29 & (*(void *)&v41 - 1)) != v25)
              {
                goto LABEL_76;
              }
              unsigned int v27 = (uint64_t *)*v27;
              if (!v27) {
                goto LABEL_76;
              }
            }
          }
          do
          {
            unint64_t v28 = v27[1];
            if (v28 == a8)
            {
              if (v27[2] == a8)
              {
LABEL_44:
                if (a1 + 7 != v27 + 3)
                {
                  *((_DWORD *)a1 + 22) = *((_DWORD *)v27 + 14);
                  sub_19E49F060(a1 + 7, (uint64_t *)v27[5]);
                }
                sub_19E49F2F4(v42);
                unint64_t v30 = v40;
                int v40 = 0;
                if (v30) {
                  operator delete(v30);
                }
                CFDictionaryRef v31 = (const __CFDictionary *)CFDictionaryGetValue(*v22, @"SecondaryThreshold");
                sub_19E49DA54((uint64_t *)&v40, v31);
                if (!*(void *)&v41) {
                  goto LABEL_77;
                }
                uint8x8_t v32 = (uint8x8_t)vcnt_s8(v41);
                v32.i16[0] = vaddlv_u8(v32);
                if (v32.u32[0] > 1uLL)
                {
                  unint64_t v33 = a8;
                  if (*(void *)&v41 <= (unint64_t)a8) {
                    unint64_t v33 = (unint64_t)a8 % *(void *)&v41;
                  }
                }
                else
                {
                  unint64_t v33 = (*(void *)&v41 - 1) & a8;
                }
                char v34 = (uint64_t **)*((void *)v40 + v33);
                if (!v34 || (unint64_t v35 = *v34) == 0) {
LABEL_77:
                }
                  sub_19E392294("unordered_map::at: key not found");
                if (v32.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    uint64_t v37 = v35[1];
                    if (v37 == a8)
                    {
                      if (v35[2] == a8) {
                        goto LABEL_68;
                      }
                    }
                    else if ((v37 & (*(void *)&v41 - 1)) != v33)
                    {
                      goto LABEL_77;
                    }
                    unint64_t v35 = (uint64_t *)*v35;
                    if (!v35) {
                      goto LABEL_77;
                    }
                  }
                }
                while (1)
                {
                  unint64_t v36 = v35[1];
                  if (v36 == a8)
                  {
                    if (v35[2] == a8)
                    {
LABEL_68:
                      if (a1 + 12 != v35 + 3)
                      {
                        *((_DWORD *)a1 + 32) = *((_DWORD *)v35 + 14);
                        sub_19E49F060(a1 + 12, (uint64_t *)v35[5]);
                      }
                      sub_19E49F2F4(v42);
                      unsigned int v38 = v40;
                      int v40 = 0;
                      if (v38) {
                        operator delete(v38);
                      }
                      goto LABEL_72;
                    }
                  }
                  else
                  {
                    if (v36 >= *(void *)&v41) {
                      v36 %= *(void *)&v41;
                    }
                    if (v36 != v33) {
                      goto LABEL_77;
                    }
                  }
                  unint64_t v35 = (uint64_t *)*v35;
                  if (!v35) {
                    goto LABEL_77;
                  }
                }
              }
            }
            else
            {
              if (v28 >= *(void *)&v41) {
                v28 %= *(void *)&v41;
              }
              if (v28 != v25) {
                break;
              }
            }
            unsigned int v27 = (uint64_t *)*v27;
          }
          while (v27);
        }
      }
    }
LABEL_76:
    sub_19E392294("unordered_map::at: key not found");
  }
LABEL_72:
  if (v21 && !atomic_fetch_add(&v21->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  return a1;
}

void sub_19E4E1698(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint8x8_t v24 = *(std::__shared_weak_count **)(v22 + 24);
  if (v24 && !atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  unint64_t v25 = *(std::__shared_weak_count **)(v22 + 8);
  if (v25)
  {
    if (!atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  _Unwind_Resume(exception_object);
}

float sub_19E4E18D0(void *a1, unint64_t a2, unint64_t a3, int a4)
{
  if (a3 >= 3) {
    unint64_t v4 = 3;
  }
  else {
    unint64_t v4 = a3;
  }
  unint64_t v5 = 4;
  if (a2 < 4) {
    unint64_t v5 = a2;
  }
  int8x8_t v6 = (int8x8_t)a1[8];
  if (!*(void *)&v6) {
    goto LABEL_93;
  }
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v6);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v8 = v4;
    if (v4 >= *(void *)&v6) {
      unint64_t v8 = v4 % *(void *)&v6;
    }
  }
  else
  {
    unint64_t v8 = (*(void *)&v6 + 3) & v4;
  }
  unsigned int v9 = *(void **)(a1[7] + 8 * v8);
  if (!v9 || (CFTypeID v10 = (void *)*v9) == 0) {
LABEL_93:
  }
    sub_19E392294("unordered_map::at: key not found");
  if (v7.u32[0] < 2uLL)
  {
    uint64_t v11 = *(void *)&v6 - 1;
    while (1)
    {
      uint64_t v13 = v10[1];
      if (v4 == v13)
      {
        if (v10[2] == v4) {
          goto LABEL_26;
        }
      }
      else if ((v13 & v11) != v8)
      {
        goto LABEL_93;
      }
      CFTypeID v10 = (void *)*v10;
      if (!v10) {
        goto LABEL_93;
      }
    }
  }
  while (1)
  {
    unint64_t v12 = v10[1];
    if (v4 == v12) {
      break;
    }
    if (v12 >= *(void *)&v6) {
      v12 %= *(void *)&v6;
    }
    if (v12 != v8) {
      goto LABEL_93;
    }
LABEL_16:
    CFTypeID v10 = (void *)*v10;
    if (!v10) {
      goto LABEL_93;
    }
  }
  if (v10[2] != v4) {
    goto LABEL_16;
  }
LABEL_26:
  int8x8_t v14 = (int8x8_t)v10[4];
  if (!*(void *)&v14) {
    goto LABEL_93;
  }
  uint8x8_t v15 = (uint8x8_t)vcnt_s8(v14);
  v15.i16[0] = vaddlv_u8(v15);
  if (v15.u32[0] > 1uLL)
  {
    unint64_t v16 = v5;
    if (v5 >= *(void *)&v14) {
      unint64_t v16 = v5 % *(void *)&v14;
    }
  }
  else
  {
    unint64_t v16 = (*(void *)&v14 + 7) & v5;
  }
  char v17 = *(float ***)(v10[3] + 8 * v16);
  if (!v17) {
    goto LABEL_93;
  }
  uint64_t v18 = *v17;
  if (!v18) {
    goto LABEL_93;
  }
  if (v15.u32[0] < 2uLL)
  {
    uint64_t v19 = *(void *)&v14 - 1;
    while (1)
    {
      uint64_t v21 = *((void *)v18 + 1);
      if (v5 == v21)
      {
        if (*((void *)v18 + 2) == v5) {
          goto LABEL_46;
        }
      }
      else if ((v21 & v19) != v16)
      {
        goto LABEL_93;
      }
      uint64_t v18 = *(float **)v18;
      if (!v18) {
        goto LABEL_93;
      }
    }
  }
  while (1)
  {
    unint64_t v20 = *((void *)v18 + 1);
    if (v5 == v20) {
      break;
    }
    if (v20 >= *(void *)&v14) {
      v20 %= *(void *)&v14;
    }
    if (v20 != v16) {
      goto LABEL_93;
    }
LABEL_36:
    uint64_t v18 = *(float **)v18;
    if (!v18) {
      goto LABEL_93;
    }
  }
  if (*((void *)v18 + 2) != v5) {
    goto LABEL_36;
  }
LABEL_46:
  int8x8_t v22 = (int8x8_t)a1[13];
  if (!*(void *)&v22) {
    goto LABEL_93;
  }
  uint8x8_t v23 = (uint8x8_t)vcnt_s8(v22);
  v23.i16[0] = vaddlv_u8(v23);
  unint64_t v24 = v23.u32[0];
  if (v23.u32[0] > 1uLL)
  {
    unint64_t v25 = v4;
    if (v4 >= *(void *)&v22) {
      unint64_t v25 = v4 % *(void *)&v22;
    }
  }
  else
  {
    unint64_t v25 = (*(void *)&v22 + 3) & v4;
  }
  unint64_t v26 = *(void **)(a1[12] + 8 * v25);
  if (!v26) {
    goto LABEL_93;
  }
  unsigned int v27 = (void *)*v26;
  if (!v27) {
    goto LABEL_93;
  }
  float result = v18[6];
  if (v24 < 2)
  {
    uint64_t v29 = *(void *)&v22 - 1;
    while (1)
    {
      uint64_t v31 = v27[1];
      if (v4 == v31)
      {
        if (v27[2] == v4) {
          goto LABEL_66;
        }
      }
      else if ((v31 & v29) != v25)
      {
        goto LABEL_93;
      }
      unsigned int v27 = (void *)*v27;
      if (!v27) {
        goto LABEL_93;
      }
    }
  }
  while (1)
  {
    unint64_t v30 = v27[1];
    if (v4 == v30) {
      break;
    }
    if (v30 >= *(void *)&v22) {
      v30 %= *(void *)&v22;
    }
    if (v30 != v25) {
      goto LABEL_93;
    }
LABEL_56:
    unsigned int v27 = (void *)*v27;
    if (!v27) {
      goto LABEL_93;
    }
  }
  if (v27[2] != v4) {
    goto LABEL_56;
  }
LABEL_66:
  int8x8_t v32 = (int8x8_t)v27[4];
  if (!*(void *)&v32) {
    goto LABEL_93;
  }
  uint8x8_t v33 = (uint8x8_t)vcnt_s8(v32);
  v33.i16[0] = vaddlv_u8(v33);
  if (v33.u32[0] > 1uLL)
  {
    unint64_t v34 = v5;
    if (v5 >= *(void *)&v32) {
      unint64_t v34 = v5 % *(void *)&v32;
    }
  }
  else
  {
    unint64_t v34 = (*(void *)&v32 + 7) & v5;
  }
  unint64_t v35 = *(float ***)(v27[3] + 8 * v34);
  if (!v35) {
    goto LABEL_93;
  }
  unint64_t v36 = *v35;
  if (!v36) {
    goto LABEL_93;
  }
  if (v33.u32[0] < 2uLL)
  {
    uint64_t v37 = *(void *)&v32 - 1;
    while (1)
    {
      uint64_t v39 = *((void *)v36 + 1);
      if (v5 == v39)
      {
        if (*((void *)v36 + 2) == v5) {
          goto LABEL_86;
        }
      }
      else if ((v39 & v37) != v34)
      {
        goto LABEL_93;
      }
      unint64_t v36 = *(float **)v36;
      if (!v36) {
        goto LABEL_93;
      }
    }
  }
  while (1)
  {
    unint64_t v38 = *((void *)v36 + 1);
    if (v5 == v38) {
      break;
    }
    if (v38 >= *(void *)&v32) {
      v38 %= *(void *)&v32;
    }
    if (v38 != v34) {
      goto LABEL_93;
    }
LABEL_76:
    unint64_t v36 = *(float **)v36;
    if (!v36) {
      goto LABEL_93;
    }
  }
  if (*((void *)v36 + 2) != v5) {
    goto LABEL_76;
  }
LABEL_86:
  if (a4)
  {
    if (a4 == 2)
    {
      return fminf(result, v36[6]);
    }
    else
    {
      float result = 0.0;
      if (a4 == 1) {
        return v36[6];
      }
    }
  }
  return result;
}

void sub_19E4E1C74(uint64_t a1, uint64_t a2, float a3)
{
  std::string __p = 0;
  uint64_t v29 = 0;
  unint64_t v30 = 0;
  uint8x8_t v7 = *(unsigned char **)(a2 + 280);
  int8x8_t v6 = *(unsigned char **)(a2 + 288);
  int64_t v8 = v6 - v7;
  if (v6 == v7)
  {
    unsigned int v9 = 0;
    CFTypeID v10 = 0;
  }
  else
  {
    if (v8 < 0) {
      sub_19E37C7C4();
    }
    unsigned int v9 = (char *)operator new(v6 - v7);
    CFTypeID v10 = &v9[4 * (v8 >> 2)];
    std::string __p = v9;
    unint64_t v30 = v10;
    memcpy(v9, v7, v8);
    uint64_t v29 = (float *)v10;
  }
  uint64_t v11 = v10 - v9;
  uint64_t v12 = (v10 - v9) >> 2;
  unint64_t v13 = v12 + 1;
  if ((unint64_t)(v12 + 1) >> 62) {
    sub_19E37C7C4();
  }
  if (v11 >> 1 > v13) {
    unint64_t v13 = v11 >> 1;
  }
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v14 = v13;
  }
  if (v14)
  {
    if (v14 >> 62) {
      sub_19E37C2B8();
    }
    uint8x8_t v15 = operator new(4 * v14);
  }
  else
  {
    uint8x8_t v15 = 0;
  }
  unint64_t v16 = (float *)&v15[4 * v12];
  char v17 = &v15[4 * v14];
  *unint64_t v16 = a3;
  uint64_t v18 = v16 + 1;
  if (v10 != v9)
  {
    unint64_t v19 = v10 - v9 - 4;
    if (v19 < 0x2C)
    {
      unint64_t v20 = v10;
      goto LABEL_23;
    }
    if ((unint64_t)(v9 - v15) < 0x20)
    {
      unint64_t v20 = v10;
      do
      {
LABEL_23:
        int v26 = *((_DWORD *)v20 - 1);
        v20 -= 4;
        *((_DWORD *)v16-- - 1) = v26;
      }
      while (v20 != v9);
      goto LABEL_24;
    }
    uint64_t v21 = (v19 >> 2) + 1;
    unint64_t v20 = &v10[-4 * (v21 & 0x7FFFFFFFFFFFFFF8)];
    int8x8_t v22 = &v15[4 * v12 - 16];
    uint8x8_t v23 = v10 - 16;
    uint64_t v24 = v21 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v25 = *(_OWORD *)v23;
      *(v22 - 1) = *((_OWORD *)v23 - 1);
      *int8x8_t v22 = v25;
      v22 -= 2;
      v23 -= 32;
      v24 -= 8;
    }
    while (v24);
    v16 -= v21 & 0x7FFFFFFFFFFFFFF8;
    if (v21 != (v21 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_23;
    }
  }
LABEL_24:
  std::string __p = v16;
  unint64_t v30 = v17;
  if (v9) {
    operator delete(v9);
  }
  uint64_t v29 = v18;
  sub_19E49FE30(a1, a2, (long long *)(a2 + 32), a2 + 56, a2 + 240, *(void *)(a2 + 264), 0, (uint64_t)&__p, *(float *)(a2 + 24), 0.0);
  unsigned int v27 = __p;
  if (__p)
  {
    operator delete(v27);
  }
}

void sub_19E4E1E9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E4E1EBC(void *a1, uint64_t *a2, void *a3, uint64_t a4)
{
  uint64_t v8 = a3[4];
  if (a3[3] == v8)
  {
    HIBYTE(v74) = 0;
    LOBYTE(__n[0]) = 0;
  }
  else if (*(char *)(v8 - 9) < 0)
  {
    sub_19E39369C(__n, *(void **)(v8 - 32), *(void *)(v8 - 24));
  }
  else
  {
    long long v9 = *(_OWORD *)(v8 - 32);
    uint64_t v74 = *(void *)(v8 - 16);
    *(_OWORD *)__n = v9;
  }
  uint64_t v11 = (unsigned char *)a3[12];
  CFTypeID v10 = (unsigned char *)a3[13];
  __int16 v71 = 0;
  unint64_t v72 = 0;
  std::string __p = 0;
  int64_t v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0) {
      sub_19E37C7C4();
    }
    unint64_t v13 = (char *)operator new(v10 - v11);
    unint64_t v14 = &v13[4 * (v12 >> 2)];
    std::string __p = v13;
    unint64_t v72 = (unint64_t)v14;
    memmove(v13, v11, v12);
    __int16 v71 = v14;
  }
  (*(void (**)(void, void **, uint64_t *, uint64_t))(*(void *)a1[2] + 48))(a1[2], &__p, a2, a4);
  float v15 = 1.0;
  float v16 = 0.0;
  float v17 = 0.0;
  if (sub_19E4DE958((uint64_t)__n, (const __CFLocale *)a1[5]))
  {
    if (v74 >= 0) {
      size_t v18 = HIBYTE(v74);
    }
    else {
      size_t v18 = __n[1];
    }
    uint64_t v19 = *a2;
    if (v18 == 1 && a2[1] != v19)
    {
      unint64_t v20 = 0;
      while (((*(uint64_t (**)(void, unint64_t))(*(void *)*a1 + 168))(*a1, v20) & 1) != 0)
      {
LABEL_16:
        ++v20;
        uint64_t v19 = *a2;
        if (v20 >= (a2[1] - *a2) >> 2) {
          goto LABEL_40;
        }
      }
      (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 48))(&v68);
      size_t v21 = HIBYTE(v69);
      int v22 = SHIBYTE(v69);
      if (v69 < 0) {
        size_t v21 = *((void *)&v68 + 1);
      }
      size_t v23 = HIBYTE(v74);
      if (SHIBYTE(v74) < 0)
      {
        if (v21 >= __n[1])
        {
          uint64_t v24 = (size_t *)__n[0];
          size_t v23 = __n[1];
LABEL_33:
          int v26 = (void *)v68;
          if (v69 >= 0) {
            unint64_t v28 = &v68;
          }
          else {
            unint64_t v28 = (long long *)v68;
          }
          if (!memcmp(v28, v24, v23)) {
LABEL_37:
          }
            float v17 = *(float *)(*a2 + 4 * v20) + v17;
LABEL_38:
          if (v22 < 0) {
            operator delete(v26);
          }
          goto LABEL_16;
        }
      }
      else if (v21 >= HIBYTE(v74))
      {
        uint64_t v24 = __n;
        goto LABEL_33;
      }
      if (v74 >= 0) {
        long long v25 = __n;
      }
      else {
        long long v25 = (size_t *)__n[0];
      }
      int v26 = (void *)v68;
      if (v69 >= 0) {
        unsigned int v27 = &v68;
      }
      else {
        unsigned int v27 = (long long *)v68;
      }
      if (!memcmp(v25, v27, v21)) {
        goto LABEL_37;
      }
      goto LABEL_38;
    }
LABEL_40:
    uint64_t v29 = *((unsigned int *)a1 + 13);
    float v15 = *(float *)(v19 + 4 * v29);
    unint64_t v30 = v71;
    if ((unint64_t)v71 >= v72)
    {
      int8x8_t v32 = (char *)__p;
      int64_t v33 = v71 - (unsigned char *)__p;
      uint64_t v34 = (v71 - (unsigned char *)__p) >> 2;
      unint64_t v35 = v34 + 1;
      if ((unint64_t)(v34 + 1) >> 62) {
        sub_19E37C7C4();
      }
      uint64_t v36 = v72 - (void)__p;
      if ((uint64_t)(v72 - (void)__p) >> 1 > v35) {
        unint64_t v35 = v36 >> 1;
      }
      if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v37 = v35;
      }
      if (v37)
      {
        if (v37 >> 62) {
          sub_19E37C2B8();
        }
        unint64_t v38 = (char *)operator new(4 * v37);
      }
      else
      {
        unint64_t v38 = 0;
      }
      uint64_t v39 = &v38[4 * v34];
      int v40 = &v38[4 * v37];
      *(_DWORD *)uint64_t v39 = v29;
      uint64_t v31 = v39 + 4;
      if (v30 != v32)
      {
        unint64_t v41 = v30 - v32 - 4;
        if (v41 < 0x2C) {
          goto LABEL_119;
        }
        if ((unint64_t)(v30 - v38 - v33) < 0x20) {
          goto LABEL_119;
        }
        uint64_t v42 = (v41 >> 2) + 1;
        int v43 = &v38[4 * v34 - 16];
        uint64_t v44 = v30 - 16;
        uint64_t v45 = v42 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v46 = *(_OWORD *)v44;
          *((_OWORD *)v43 - 1) = *((_OWORD *)v44 - 1);
          *(_OWORD *)int v43 = v46;
          v43 -= 32;
          v44 -= 32;
          v45 -= 8;
        }
        while (v45);
        v39 -= 4 * (v42 & 0x7FFFFFFFFFFFFFF8);
        v30 -= 4 * (v42 & 0x7FFFFFFFFFFFFFF8);
        if (v42 != (v42 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_119:
          do
          {
            int v47 = *((_DWORD *)v30 - 1);
            v30 -= 4;
            *((_DWORD *)v39 - 1) = v47;
            v39 -= 4;
          }
          while (v30 != v32);
        }
      }
      std::string __p = v39;
      __int16 v71 = v31;
      unint64_t v72 = (unint64_t)v40;
      if (v32) {
        operator delete(v32);
      }
    }
    else
    {
      *(_DWORD *)__int16 v71 = v29;
      uint64_t v31 = v30 + 4;
    }
    __int16 v71 = v31;
    (*(void (**)(void, void **, uint64_t *, uint64_t))(*(void *)a1[2] + 48))(a1[2], &__p, a2, a4);
    if (v74 >= 0) {
      uint64_t v48 = __n;
    }
    else {
      uint64_t v48 = (size_t *)__n[0];
    }
    if (v48)
    {
      if (v74 >= 0) {
        CFIndex v49 = HIBYTE(v74);
      }
      else {
        CFIndex v49 = __n[1];
      }
      CFStringRef v50 = CFStringCreateWithBytes(0, (const UInt8 *)v48, v49, 0x8000100u, 0);
      CFStringRef v67 = v50;
      if (!v50)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x19F3BD790](exception, "Could not construct");
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
    }
    else
    {
      CFStringRef v50 = 0;
      CFStringRef v67 = 0;
    }
    CFLocaleRef v52 = (const __CFLocale *)a1[5];
    CFIndex Length = CFStringGetLength(v50);
    CFMutableStringRef MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], Length, v50);
    CFStringLowercase(MutableCopy, v52);
    sub_19E372124(&cf, MutableCopy);
    sub_19E37774C((const __CFString *)cf, &v68);
    if (SHIBYTE(v74) < 0) {
      operator delete((void *)__n[0]);
    }
    *(_OWORD *)__n = v68;
    uint64_t v74 = v69;
    HIBYTE(v69) = 0;
    LOBYTE(v68) = 0;
    if (cf) {
      CFRelease(cf);
    }
    if (v50) {
      CFRelease(v50);
    }
  }
  if (a2[1] != *a2)
  {
    uint64_t v55 = 0;
    float v16 = 0.0;
    while (((*(uint64_t (**)(void, uint64_t))(*(void *)*a1 + 168))(*a1, v55) & 1) != 0)
    {
LABEL_79:
      if (++v55 >= (unint64_t)((a2[1] - *a2) >> 2)) {
        goto LABEL_109;
      }
    }
    (*(void (**)(long long *__return_ptr))(*(void *)*a1 + 48))(&v68);
    int v56 = SHIBYTE(v69);
    if (v69 >= 0) {
      size_t v57 = HIBYTE(v69);
    }
    else {
      size_t v57 = *((void *)&v68 + 1);
    }
    size_t v58 = HIBYTE(v74);
    if (SHIBYTE(v74) < 0)
    {
      size_t v59 = __n[1];
      if (v57 >= __n[1])
      {
        unint64_t v60 = (size_t *)__n[0];
LABEL_97:
        uint64_t v62 = (void *)v68;
        if (v69 >= 0) {
          uint64_t v64 = &v68;
        }
        else {
          uint64_t v64 = (long long *)v68;
        }
        if (!memcmp(v64, v60, v59))
        {
          if ((v58 & 0x80u) == 0) {
            size_t v59 = v58;
          }
          else {
            size_t v59 = __n[1];
          }
LABEL_104:
          float v65 = *(float *)(*a2 + 4 * v55);
          if (v57 < v59) {
            float v65 = v65 * 0.03;
          }
          float v16 = v65 + v16;
        }
LABEL_107:
        if (v56 < 0) {
          operator delete(v62);
        }
        goto LABEL_79;
      }
    }
    else
    {
      size_t v59 = HIBYTE(v74);
      if (v57 >= HIBYTE(v74))
      {
        unint64_t v60 = __n;
        size_t v59 = HIBYTE(v74);
        goto LABEL_97;
      }
    }
    if (v74 >= 0) {
      std::string v61 = __n;
    }
    else {
      std::string v61 = (size_t *)__n[0];
    }
    uint64_t v62 = (void *)v68;
    if (v69 >= 0) {
      int64_t v63 = &v68;
    }
    else {
      int64_t v63 = (long long *)v68;
    }
    if (!memcmp(v61, v63, v57)) {
      goto LABEL_104;
    }
    goto LABEL_107;
  }
LABEL_109:
  if (__p)
  {
    __int16 v71 = (char *)__p;
    operator delete(__p);
  }
  if (SHIBYTE(v74) < 0) {
    operator delete((void *)__n[0]);
  }
  log10f(v17 + (float)(v16 * v15));
}

void sub_19E4E2568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (__p)
  {
    operator delete(__p);
    if ((a22 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a22 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a17);
  _Unwind_Resume(exception_object);
}

void sub_19E4E25FC(void *a1, uint64_t **a2, uint64_t *a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, void *a9)
{
  (*(void (**)(uint64_t *, uint64_t, uint64_t *, uint64_t))(*a2[2] + 48))(a2[2], a4, a3, a8);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v13 = *a3;
  if (a3[1] == *a3)
  {
    float v17 = 0;
    goto LABEL_136;
  }
  uint64_t v166 = a7;
  BOOL v167 = a1;
  unint64_t v14 = 0;
  float v15 = 0;
  unint64_t v16 = 0;
  float v17 = 0;
  unint64_t v18 = 0;
  float v19 = 0.0;
  float v20 = 0.0;
  do
  {
    if (a9[3])
    {
      int8x8_t v21 = (int8x8_t)a9[1];
      if (v21)
      {
        uint8x8_t v22 = (uint8x8_t)vcnt_s8(v21);
        v22.i16[0] = vaddlv_u8(v22);
        if (v22.u32[0] > 1uLL)
        {
          unint64_t v23 = v18;
          if (*(void *)&v21 <= v18) {
            unint64_t v23 = v18 % *(void *)&v21;
          }
        }
        else
        {
          unint64_t v23 = (*(void *)&v21 + 0x7FFFFFFFLL) & v18;
        }
        uint64_t v24 = *(uint64_t ***)(*a9 + 8 * v23);
        if (v24)
        {
          long long v25 = *v24;
          if (v25)
          {
            if (v22.u32[0] < 2uLL)
            {
              uint64_t v26 = *(void *)&v21 - 1;
              while (1)
              {
                uint64_t v28 = v25[1];
                if (v28 == v18)
                {
                  if (v18 == *((_DWORD *)v25 + 4)) {
                    goto LABEL_28;
                  }
                }
                else if ((v28 & v26) != v23)
                {
                  goto LABEL_26;
                }
                long long v25 = (uint64_t *)*v25;
                if (!v25) {
                  goto LABEL_26;
                }
              }
            }
            do
            {
              unint64_t v27 = v25[1];
              if (v27 == v18)
              {
                if (v18 == *((_DWORD *)v25 + 4)) {
                  goto LABEL_28;
                }
              }
              else
              {
                if (v27 >= *(void *)&v21) {
                  v27 %= *(void *)&v21;
                }
                if (v27 != v23) {
                  break;
                }
              }
              long long v25 = (uint64_t *)*v25;
            }
            while (v25);
          }
        }
      }
LABEL_26:
      if ((*(unsigned int (**)(uint64_t *, unint64_t))(**a2 + 112))(*a2, v18))
      {
        uint64_t v13 = *a3;
LABEL_28:
        float v20 = *(float *)(v13 + 4 * v18) + v20;
      }
    }
    if (((*(uint64_t (**)(uint64_t *, unint64_t))(**a2 + 168))(*a2, v18) & 1) == 0)
    {
      BOOL v29 = a6
         && (*(unsigned int (**)(uint64_t *, unint64_t))(**a2 + 160))(*a2, v18)
         && sub_19E4DE958(a5, (const __CFLocale *)a2[5]);
      if (((*(unsigned int (**)(uint64_t *, unint64_t, uint64_t))(**a2 + 56))(*a2, v18, a5) | v29))
      {
        uint64_t v30 = **a2;
        if (a6)
        {
          if (!(*(unsigned int (**)(void))(v30 + 144))()) {
            goto LABEL_4;
          }
          uint64_t v31 = *a3;
          if (v17 < v14)
          {
            *(_DWORD *)float v17 = v18;
            *((_DWORD *)v17 + 1) = *(_DWORD *)(v31 + 4 * v18);
            v17 += 8;
LABEL_72:
            v167[1] = v17;
            unint64_t v16 = (unint64_t)v14;
            goto LABEL_4;
          }
          uint64_t v34 = (v17 - v15) >> 3;
          unint64_t v35 = v34 + 1;
          if ((unint64_t)(v34 + 1) >> 61) {
            goto LABEL_230;
          }
          if ((v14 - v15) >> 2 > v35) {
            unint64_t v35 = (v14 - v15) >> 2;
          }
          if ((unint64_t)(v14 - v15) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v36 = v35;
          }
          if (v36 >> 61) {
            goto LABEL_229;
          }
          unint64_t v37 = operator new(8 * v36);
          unint64_t v38 = &v37[8 * v34];
          *unint64_t v38 = v18;
          v38[1] = *(_DWORD *)(v31 + 4 * v18);
          if (v17 == v15)
          {
            unint64_t v41 = &v37[8 * v34];
          }
          else
          {
            unint64_t v39 = v17 - 8 - v15;
            if (v39 < 0x58 || (unint64_t)(v15 - v37) < 0x20)
            {
              int v40 = v17;
              unint64_t v41 = &v37[8 * v34];
              goto LABEL_53;
            }
            uint64_t v52 = (v39 >> 3) + 1;
            int v40 = &v17[-8 * (v52 & 0x3FFFFFFFFFFFFFFCLL)];
            __n128 v53 = &v37[8 * v34 - 16];
            long long v54 = v17 - 16;
            uint64_t v55 = v52 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v56 = *(_OWORD *)v54;
              *(v53 - 1) = *((_OWORD *)v54 - 1);
              _OWORD *v53 = v56;
              v53 -= 2;
              v54 -= 32;
              v55 -= 4;
            }
            while (v55);
            unint64_t v41 = (char *)&v38[-2 * (v52 & 0x3FFFFFFFFFFFFFFCLL)];
            if (v52 != (v52 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_53:
                uint64_t v42 = *((void *)v40 - 1);
                v40 -= 8;
                *((void *)v41 - 1) = v42;
                v41 -= 8;
              }
              while (v40 != v15);
            }
          }
          unint64_t v14 = &v37[8 * v36];
          float v17 = (char *)(v38 + 2);
          *BOOL v167 = v41;
          v167[1] = v38 + 2;
          v167[2] = v14;
          if (v15) {
            operator delete(v15);
          }
          float v15 = v41;
          goto LABEL_72;
        }
        char v32 = (*(uint64_t (**)(void))(v30 + 152))();
        uint64_t v33 = *a3;
        if (v32)
        {
          float v19 = *(float *)(v33 + 4 * v18) + v19;
          goto LABEL_4;
        }
        if ((unint64_t)v17 < v16)
        {
          *(_DWORD *)float v17 = v18;
          *((_DWORD *)v17 + 1) = *(_DWORD *)(v33 + 4 * v18);
          v17 += 8;
LABEL_77:
          v167[1] = v17;
          goto LABEL_4;
        }
        uint64_t v43 = (v17 - v15) >> 3;
        unint64_t v44 = v43 + 1;
        if ((unint64_t)(v43 + 1) >> 61) {
LABEL_230:
        }
          sub_19E37C7C4();
        if ((uint64_t)(v16 - (void)v15) >> 2 > v44) {
          unint64_t v44 = (uint64_t)(v16 - (void)v15) >> 2;
        }
        if (v16 - (unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v45 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v45 = v44;
        }
        if (v45 >> 61) {
LABEL_229:
        }
          sub_19E37C2B8();
        long long v46 = operator new(8 * v45);
        int v47 = &v46[8 * v43];
        *int v47 = v18;
        v47[1] = *(_DWORD *)(v33 + 4 * v18);
        if (v17 == v15)
        {
          CFStringRef v50 = &v46[8 * v43];
        }
        else
        {
          unint64_t v48 = v17 - 8 - v15;
          if (v48 >= 0x58 && (unint64_t)(v15 - v46) >= 0x20)
          {
            uint64_t v57 = (v48 >> 3) + 1;
            CFIndex v49 = &v17[-8 * (v57 & 0x3FFFFFFFFFFFFFFCLL)];
            size_t v58 = &v46[8 * v43 - 16];
            size_t v59 = v17 - 16;
            uint64_t v60 = v57 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v61 = *(_OWORD *)v59;
              *(v58 - 1) = *((_OWORD *)v59 - 1);
              *size_t v58 = v61;
              v58 -= 2;
              v59 -= 32;
              v60 -= 4;
            }
            while (v60);
            CFStringRef v50 = (char *)&v47[-2 * (v57 & 0x3FFFFFFFFFFFFFFCLL)];
            if (v57 == (v57 & 0x3FFFFFFFFFFFFFFCLL)) {
              goto LABEL_74;
            }
          }
          else
          {
            CFIndex v49 = v17;
            CFStringRef v50 = &v46[8 * v43];
          }
          do
          {
            uint64_t v51 = *((void *)v49 - 1);
            v49 -= 8;
            *((void *)v50 - 1) = v51;
            v50 -= 8;
          }
          while (v49 != v15);
        }
LABEL_74:
        unint64_t v14 = &v46[8 * v45];
        float v17 = (char *)(v47 + 2);
        *BOOL v167 = v50;
        v167[1] = v47 + 2;
        v167[2] = v14;
        if (v15) {
          operator delete(v15);
        }
        float v15 = v50;
        unint64_t v16 = (unint64_t)v14;
        goto LABEL_77;
      }
    }
LABEL_4:
    ++v18;
    uint64_t v13 = *a3;
  }
  while (v18 < (a3[1] - *a3) >> 2);
  if (v20 <= 0.0)
  {
    a1 = v167;
  }
  else
  {
    a1 = v167;
    uint64_t v62 = *(unsigned __int8 *)(a5 + 23);
    if ((v62 & 0x80u) != 0) {
      uint64_t v62 = *(void *)(a5 + 8);
    }
    if (!v62)
    {
      int v63 = (*(uint64_t (**)(uint64_t *, uint64_t))(**a2 + 64))(*a2, 2);
      int v64 = v63;
      if (v17 < v14)
      {
        *(_DWORD *)float v17 = v63;
        *((float *)v17 + 1) = v20;
        float v65 = v17 + 8;
        goto LABEL_112;
      }
      uint64_t v66 = (v17 - v15) >> 3;
      unint64_t v67 = v66 + 1;
      if ((unint64_t)(v66 + 1) >> 61) {
        sub_19E37C7C4();
      }
      if ((v14 - v15) >> 2 > v67) {
        unint64_t v67 = (v14 - v15) >> 2;
      }
      if ((unint64_t)(v14 - v15) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v68 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v68 = v67;
      }
      if (v68 >> 61) {
        sub_19E37C2B8();
      }
      uint64_t v69 = operator new(8 * v68);
      uint64_t v70 = &v69[8 * v66];
      __int16 v71 = &v69[8 * v68];
      *(_DWORD *)uint64_t v70 = v64;
      *((float *)v70 + 1) = v20;
      float v65 = v70 + 8;
      if (v17 != v15)
      {
        unint64_t v72 = v17 - v15 - 8;
        if (v72 < 0x58)
        {
          UErrorCode v73 = v17;
          goto LABEL_109;
        }
        if ((unint64_t)(v15 - v69) < 0x20)
        {
          UErrorCode v73 = v17;
          goto LABEL_109;
        }
        uint64_t v74 = (v72 >> 3) + 1;
        UErrorCode v73 = &v17[-8 * (v74 & 0x3FFFFFFFFFFFFFFCLL)];
        size_t v75 = &v69[8 * v66 - 16];
        uint64_t v76 = v17 - 16;
        uint64_t v77 = v74 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v78 = *(_OWORD *)v76;
          *(v75 - 1) = *((_OWORD *)v76 - 1);
          *size_t v75 = v78;
          v75 -= 2;
          v76 -= 32;
          v77 -= 4;
        }
        while (v77);
        v70 -= 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
        if (v74 != (v74 & 0x3FFFFFFFFFFFFFFCLL))
        {
          do
          {
LABEL_109:
            uint64_t v79 = *((void *)v73 - 1);
            v73 -= 8;
            *((void *)v70 - 1) = v79;
            v70 -= 8;
          }
          while (v73 != v15);
        }
      }
      *BOOL v167 = v70;
      v167[1] = v65;
      v167[2] = v71;
      if (v15) {
        operator delete(v15);
      }
LABEL_112:
      v167[1] = v65;
      float v17 = v65;
    }
  }
  a7 = v166;
  if (v19 > 0.0)
  {
    uint64_t v80 = *(unsigned __int8 *)(a5 + 23);
    if ((v80 & 0x80u) != 0) {
      uint64_t v80 = *(void *)(a5 + 8);
    }
    if (!v80)
    {
      int v81 = (*(uint64_t (**)(void))(**a2 + 80))();
      int v82 = v81;
      unint64_t v83 = a1[2];
      if ((unint64_t)v17 < v83)
      {
        *(_DWORD *)float v17 = v81;
        *((float *)v17 + 1) = v19;
        unint64_t v84 = v17 + 8;
        a7 = v166;
        goto LABEL_135;
      }
      BOOL v85 = (char *)*a1;
      uint64_t v86 = (uint64_t)&v17[-*a1];
      uint64_t v87 = v86 >> 3;
      unint64_t v88 = (v86 >> 3) + 1;
      if (v88 >> 61) {
        sub_19E37C7C4();
      }
      uint64_t v89 = v83 - (void)v85;
      if (v89 >> 2 > v88) {
        unint64_t v88 = v89 >> 2;
      }
      if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v90 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v90 = v88;
      }
      if (v90 >> 61) {
        sub_19E37C2B8();
      }
      unint64_t v91 = operator new(8 * v90);
      uint64_t v92 = &v91[8 * v87];
      uint64_t v93 = &v91[8 * v90];
      *(_DWORD *)uint64_t v92 = v82;
      *((float *)v92 + 1) = v19;
      unint64_t v84 = v92 + 8;
      if (v17 == v85)
      {
        a7 = v166;
      }
      else
      {
        unint64_t v94 = v17 - v85 - 8;
        if (v94 < 0x58 || (unint64_t)(&v17[-v86] - v91) < 0x20)
        {
          uint64_t v95 = v17;
          a7 = v166;
          goto LABEL_130;
        }
        uint64_t v161 = (v94 >> 3) + 1;
        uint64_t v95 = &v17[-8 * (v161 & 0x3FFFFFFFFFFFFFFCLL)];
        char v162 = &v91[8 * v87 - 16];
        int v163 = v17 - 16;
        uint64_t v164 = v161 & 0x3FFFFFFFFFFFFFFCLL;
        a7 = v166;
        do
        {
          long long v165 = *(_OWORD *)v163;
          *(v162 - 1) = *((_OWORD *)v163 - 1);
          *char v162 = v165;
          v162 -= 2;
          v163 -= 32;
          v164 -= 4;
        }
        while (v164);
        v92 -= 8 * (v161 & 0x3FFFFFFFFFFFFFFCLL);
        if (v161 != (v161 & 0x3FFFFFFFFFFFFFFCLL))
        {
          do
          {
LABEL_130:
            uint64_t v96 = *((void *)v95 - 1);
            v95 -= 8;
            *((void *)v92 - 1) = v96;
            v92 -= 8;
          }
          while (v95 != v85);
        }
      }
      *a1 = v92;
      a1[1] = v84;
      a1[2] = v93;
      if (v85) {
        operator delete(v85);
      }
LABEL_135:
      a1[1] = v84;
      float v17 = v84;
    }
  }
LABEL_136:
  unint64_t v97 = *a1;
  unint64_t v98 = (uint64_t)&v17[-*a1] >> 3;
  uint64_t v99 = *a1 + 8 * (a7 + 6);
  if (v98 >= a7 + 6) {
    unint64_t v100 = *a1 + 8 * (a7 + 6);
  }
  else {
    unint64_t v100 = (unint64_t)v17;
  }
  if (v17 != (char *)v100)
  {
    while (2)
    {
      unint64_t v101 = (uint64_t)&v17[-v97] >> 3;
      if (v101 < 2) {
        goto LABEL_201;
      }
      if (v101 == 3)
      {
        float v144 = *(float *)(v97 + 12);
        float v145 = *(float *)(v97 + 4);
        float v146 = *((float *)v17 - 1);
        if (v144 <= v145)
        {
          if (v146 > v144)
          {
            int v156 = *(_DWORD *)(v97 + 8);
            *(_DWORD *)(v97 + 8) = *((_DWORD *)v17 - 2);
            *((_DWORD *)v17 - 2) = v156;
            *(float *)(v97 + 12) = v146;
            *((float *)v17 - 1) = v144;
            float v157 = *(float *)(v97 + 12);
            float v158 = *(float *)(v97 + 4);
            if (v157 > v158)
            {
              int v159 = *(_DWORD *)v97;
              *(_DWORD *)unint64_t v97 = *(_DWORD *)(v97 + 8);
              *(_DWORD *)(v97 + 8) = v159;
              *(float *)(v97 + 4) = v157;
              *(float *)(v97 + 12) = v158;
            }
          }
        }
        else
        {
          int v147 = *(_DWORD *)v97;
          if (v146 <= v144)
          {
            *(_DWORD *)unint64_t v97 = *(_DWORD *)(v97 + 8);
            *(_DWORD *)(v97 + 8) = v147;
            *(float *)(v97 + 4) = v144;
            *(float *)(v97 + 12) = v145;
            float v160 = *((float *)v17 - 1);
            if (v160 > v145)
            {
              *(_DWORD *)(v97 + 8) = *((_DWORD *)v17 - 2);
              *((_DWORD *)v17 - 2) = v147;
              *(float *)(v97 + 12) = v160;
              *((float *)v17 - 1) = v145;
            }
          }
          else
          {
            *(_DWORD *)unint64_t v97 = *((_DWORD *)v17 - 2);
            *((_DWORD *)v17 - 2) = v147;
            *(float *)(v97 + 4) = v146;
            *((float *)v17 - 1) = v145;
          }
        }
        goto LABEL_201;
      }
      if (v101 == 2)
      {
        float v148 = *((float *)v17 - 1);
        float v149 = *(float *)(v97 + 4);
        if (v148 > v149)
        {
          int v150 = *(_DWORD *)v97;
          *(_DWORD *)unint64_t v97 = *((_DWORD *)v17 - 2);
          *((_DWORD *)v17 - 2) = v150;
          *(float *)(v97 + 4) = v148;
          *((float *)v17 - 1) = v149;
        }
        goto LABEL_201;
      }
      if ((uint64_t)&v17[-v97] <= 63)
      {
        while ((char *)v97 != v17 - 8)
        {
          unint64_t v151 = (char *)v97;
          v97 += 8;
          if (v151 != v17 && (char *)v97 != v17)
          {
            uint64_t v152 = (float *)v97;
            uint64_t v153 = (float *)v151;
            do
            {
              if (v152[1] > v153[1]) {
                uint64_t v153 = v152;
              }
              v152 += 2;
            }
            while (v152 != (float *)v17);
            if (v153 != (float *)v151)
            {
              int v154 = *(_DWORD *)v151;
              *(float *)unint64_t v151 = *v153;
              *(_DWORD *)uint64_t v153 = v154;
              int v155 = *((_DWORD *)v151 + 1);
              *((float *)v151 + 1) = v153[1];
              *((_DWORD *)v153 + 1) = v155;
            }
          }
        }
        goto LABEL_201;
      }
      unint64_t v102 = v97 + 8 * (v101 >> 1);
      float v103 = *(float *)(v102 + 4);
      float v104 = *(float *)(v97 + 4);
      float v105 = *((float *)v17 - 1);
      if (v103 <= v104)
      {
        if (v105 <= v103)
        {
          int v112 = 0;
          goto LABEL_155;
        }
        int v107 = *(_DWORD *)v102;
        *(_DWORD *)unint64_t v102 = *((_DWORD *)v17 - 2);
        *((_DWORD *)v17 - 2) = v107;
        *(float *)(v102 + 4) = v105;
        *((float *)v17 - 1) = v103;
        float v108 = *(float *)(v102 + 4);
        float v109 = *(float *)(v97 + 4);
        if (v108 > v109)
        {
          int v110 = *(_DWORD *)v97;
          *(_DWORD *)unint64_t v97 = *(_DWORD *)v102;
          *(_DWORD *)unint64_t v102 = v110;
          *(float *)(v97 + 4) = v108;
          *(float *)(v102 + 4) = v109;
          goto LABEL_152;
        }
      }
      else
      {
        int v106 = *(_DWORD *)v97;
        if (v105 > v103)
        {
          *(_DWORD *)unint64_t v97 = *((_DWORD *)v17 - 2);
          *((_DWORD *)v17 - 2) = v106;
          *(float *)(v97 + 4) = v105;
          *((float *)v17 - 1) = v104;
          break;
        }
        *(_DWORD *)unint64_t v97 = *(_DWORD *)v102;
        *(_DWORD *)unint64_t v102 = v106;
        *(float *)(v97 + 4) = v103;
        *(float *)(v102 + 4) = v104;
        float v111 = *((float *)v17 - 1);
        if (v111 > v104)
        {
          *(_DWORD *)unint64_t v102 = *((_DWORD *)v17 - 2);
          *((_DWORD *)v17 - 2) = v106;
          *(float *)(v102 + 4) = v111;
          *((float *)v17 - 1) = v104;
LABEL_152:
          int v112 = 2;
LABEL_155:
          uint64_t v113 = (float *)(v17 - 8);
          float v114 = *(float *)(v97 + 4);
          float v115 = *(float *)(v102 + 4);
          if (v114 <= v115)
          {
            unint64_t v117 = (float *)(v17 - 8);
            while (1)
            {
              unint64_t v116 = (unint64_t)(v117 - 2);
              if (v117 - 2 == (float *)v97) {
                break;
              }
              float v118 = *(v117 - 1);
              v117 -= 2;
              if (v118 > v115)
              {
                int v119 = *(_DWORD *)v97;
                *(_DWORD *)unint64_t v97 = *(_DWORD *)v116;
                *(_DWORD *)unint64_t v116 = v119;
                *(float *)(v97 + 4) = v118;
                *(float *)(v116 + 4) = v114;
                ++v112;
                goto LABEL_161;
              }
            }
            unint64_t v133 = v97 + 8;
            float v134 = *((float *)v17 - 1);
            if (v114 <= v134)
            {
              if ((float *)v133 == v113) {
                goto LABEL_201;
              }
              while (1)
              {
                float v135 = *(float *)(v133 + 4);
                if (v114 > v135) {
                  break;
                }
                v133 += 8;
                if ((float *)v133 == v113) {
                  goto LABEL_201;
                }
              }
              int v139 = *(_DWORD *)v133;
              *(_DWORD *)unint64_t v133 = *((_DWORD *)v17 - 2);
              *((_DWORD *)v17 - 2) = v139;
              *(float *)(v133 + 4) = v134;
              *((float *)v17 - 1) = v135;
              v133 += 8;
            }
            if ((float *)v133 == v113) {
              goto LABEL_201;
            }
            while (1)
            {
              float v140 = *(float *)(v97 + 4);
              do
              {
                unint64_t v130 = v133;
                float v141 = *(float *)(v133 + 4);
                v133 += 8;
              }
              while (v140 <= v141);
              do
              {
                float v142 = *(v113 - 1);
                v113 -= 2;
              }
              while (v140 > v142);
              if (v130 >= (unint64_t)v113) {
                break;
              }
              int v143 = *(_DWORD *)v130;
              *(float *)unint64_t v130 = *v113;
              *(_DWORD *)uint64_t v113 = v143;
              *(float *)(v130 + 4) = v142;
              v113[1] = v141;
            }
            if (v130 > v100) {
              goto LABEL_201;
            }
          }
          else
          {
            unint64_t v116 = (unint64_t)(v17 - 8);
LABEL_161:
            unint64_t v120 = v97 + 8;
            if (v97 + 8 >= v116)
            {
              unint64_t v123 = v97 + 8;
            }
            else
            {
              unint64_t v121 = v97 + 8;
              while (1)
              {
                float v122 = *(float *)(v102 + 4);
                do
                {
                  unint64_t v123 = v121;
                  float v124 = *(float *)(v121 + 4);
                  v121 += 8;
                }
                while (v124 > v122);
                do
                {
                  float v125 = *(float *)(v116 - 4);
                  v116 -= 8;
                }
                while (v125 <= v122);
                if (v123 >= v116) {
                  break;
                }
                int v126 = *(_DWORD *)v123;
                *(_DWORD *)unint64_t v123 = *(_DWORD *)v116;
                *(_DWORD *)unint64_t v116 = v126;
                *(float *)(v123 + 4) = v125;
                *(float *)(v116 + 4) = v124;
                ++v112;
                if (v102 == v123) {
                  unint64_t v102 = v116;
                }
              }
            }
            if (v123 != v102)
            {
              float v127 = *(float *)(v102 + 4);
              float v128 = *(float *)(v123 + 4);
              if (v127 > v128)
              {
                int v129 = *(_DWORD *)v123;
                *(_DWORD *)unint64_t v123 = *(_DWORD *)v102;
                *(_DWORD *)unint64_t v102 = v129;
                *(float *)(v123 + 4) = v127;
                *(float *)(v102 + 4) = v128;
                ++v112;
              }
            }
            if (v123 == v100) {
              goto LABEL_201;
            }
            if (!v112)
            {
              if (v123 <= v100)
              {
                unint64_t v136 = v123 + 8;
                while ((char *)v136 != v17)
                {
                  float v137 = *(float *)(v136 + 4);
                  float v138 = *(float *)(v136 - 4);
                  v136 += 8;
                  if (v137 > v138) {
                    goto LABEL_176;
                  }
                }
              }
              else
              {
                while (v120 != v123)
                {
                  float v131 = *(float *)(v120 + 4);
                  float v132 = *(float *)(v120 - 4);
                  v120 += 8;
                  if (v131 > v132) {
                    goto LABEL_176;
                  }
                }
              }
              goto LABEL_201;
            }
LABEL_176:
            if (v123 <= v100)
            {
              unint64_t v130 = v123 + 8;
            }
            else
            {
              float v17 = (char *)v123;
              unint64_t v130 = v97;
            }
          }
          unint64_t v97 = v130;
          if (v17 == (char *)v100) {
            goto LABEL_201;
          }
          continue;
        }
      }
      break;
    }
    int v112 = 1;
    goto LABEL_155;
  }
LABEL_201:
  if (v98 > a7 + 6) {
    a1[1] = v99;
  }
}

void sub_19E4E3388(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11 = *(void **)a10;
  if (*(void *)a10)
  {
    *(void *)(a10 + 8) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E4E33C0(uint64_t a1, void *a2, unsigned int *a3, uint64_t a4)
{
  long long v9 = *(const UInt8 **)(a4 + 32);
  uint64_t v7 = a4 + 32;
  uint64_t v8 = v9;
  char v10 = *(unsigned char *)(v7 + 23);
  if (v10 >= 0) {
    uint64_t v11 = (const UInt8 *)v7;
  }
  else {
    uint64_t v11 = v8;
  }
  if (v11)
  {
    if (v10 >= 0) {
      CFIndex v12 = *(unsigned __int8 *)(v7 + 23);
    }
    else {
      CFIndex v12 = *(void *)(v7 + 8);
    }
    CFStringRef v13 = CFStringCreateWithBytes(0, v11, v12, 0x8000100u, 0);
    CFStringRef v36 = v13;
    if (!v13)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x19F3BD790](exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  else
  {
    CFStringRef v13 = 0;
    CFStringRef v36 = 0;
  }
  if ((*(unsigned int (**)(void, void))(*(void *)*a2 + 160))(*a2, *a3))
  {
    CFLocaleRef v15 = (const __CFLocale *)a2[5];
    CFIndex Length = CFStringGetLength(v13);
    CFMutableStringRef MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], Length, v13);
    CFStringLowercase(MutableCopy, v15);
    sub_19E372124(__p, MutableCopy);
    CFStringRef v18 = (const __CFString *)__p[0];
    if (!__p[0])
    {
      BOOL v29 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x19F3BD790](v29, "Could not construct");
      __cxa_throw(v29, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    CFTypeID TypeID = CFStringGetTypeID();
    if (TypeID == CFGetTypeID(v18))
    {
      sub_19E3C6934((void *)a1, v18);
      float v20 = __p[0];
      if (!__p[0]) {
        goto LABEL_40;
      }
    }
    else
    {
      *(void *)a1 = 0;
      *(unsigned char *)(a1 + 23) = 0;
      float v20 = __p[0];
      if (!__p[0]) {
        goto LABEL_40;
      }
    }
    CFRelease(v20);
    goto LABEL_40;
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  (*(void (**)(void **__return_ptr))(*(void *)*a2 + 40))(__p);
  if (v34 >= 0) {
    int8x8_t v21 = __p;
  }
  else {
    int8x8_t v21 = (void **)__p[0];
  }
  if (v21)
  {
    if (v34 >= 0) {
      CFIndex v22 = HIBYTE(v34);
    }
    else {
      CFIndex v22 = (CFIndex)__p[1];
    }
    CFStringRef v23 = CFStringCreateWithBytes(0, (const UInt8 *)v21, v22, 0x8000100u, 0);
    CFStringRef v35 = v23;
    if (!v23)
    {
      uint64_t v30 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x19F3BD790](v30, "Could not construct");
      __cxa_throw(v30, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    if ((v34 & 0x8000000000000000) == 0) {
      goto LABEL_26;
    }
  }
  else
  {
    CFStringRef v23 = 0;
    CFStringRef v35 = 0;
    if ((v34 & 0x8000000000000000) == 0) {
      goto LABEL_26;
    }
  }
  operator delete(__p[0]);
LABEL_26:
  CFIndex v24 = CFStringGetLength(v23);
  CFIndex v25 = CFStringGetLength(v13);
  if (v25 <= v24)
  {
    *(unsigned char *)(a1 + 23) = 0;
    *(unsigned char *)a1 = 0;
  }
  else
  {
    v37.location = v24;
    v37.length = v25 - v24;
    CFStringRef v26 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v13, v37);
    sub_19E372124(&cf, v26);
    CFStringRef v27 = (const __CFString *)cf;
    if (!cf)
    {
      uint64_t v31 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x19F3BD790](v31, "Could not construct");
      __cxa_throw(v31, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    CFTypeID v28 = CFStringGetTypeID();
    if (v28 == CFGetTypeID(v27))
    {
      sub_19E3C6934(__p, v27);
    }
    else
    {
      __p[0] = 0;
      HIBYTE(v34) = 0;
    }
    *(_OWORD *)a1 = *(_OWORD *)__p;
    *(void *)(a1 + 16) = v34;
    HIBYTE(v34) = 0;
    LOBYTE(__p[0]) = 0;
    if (cf) {
      CFRelease(cf);
    }
  }
  if (v23) {
    CFRelease(v23);
  }
LABEL_40:
  if (v13) {
    CFRelease(v13);
  }
}

void sub_19E4E3754(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, const void *a16, const void *a17)
{
}

BOOL sub_19E4E3820(uint64_t a1, uint64_t a2, void *a3)
{
  if (a1 == a2) {
    return 0;
  }
  uint64_t v3 = a3[2];
  uint64_t v4 = a3[3];
  if (0x86BCA1AF286BCA1BLL * ((v4 - v3) >> 4) < a3[1]) {
    return 1;
  }
  if (v3 == v4) {
    __assert_rtn("worst", "PriorityQueue.h", 55, "!m_predictions.empty()");
  }
  return *(double *)(a2 - 120) + *(float *)(a2 - 280) > *(double *)(v3 + 184) + *(float *)(v3 + 24);
}

CFIndex sub_19E4E38D4(uint64_t a1)
{
  char v1 = *(unsigned char *)(a1 + 23);
  if (v1 >= 0) {
    uint64_t v2 = (const UInt8 *)a1;
  }
  else {
    uint64_t v2 = *(const UInt8 **)a1;
  }
  if (v2)
  {
    if (v1 >= 0) {
      CFIndex v3 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      CFIndex v3 = *(void *)(a1 + 8);
    }
    CFStringRef v4 = CFStringCreateWithBytes(0, v2, v3, 0x8000100u, 0);
    if (!v4)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x19F3BD790](exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  else
  {
    CFStringRef v4 = 0;
  }
  CFIndex Length = CFStringGetLength(v4);
  if (v4) {
    CFRelease(v4);
  }
  return Length;
}

void sub_19E4E399C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19E4E39B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E3C6F1C((const void **)va);
  _Unwind_Resume(a1);
}

BOOL sub_19E4E39C8(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5, void *a6)
{
  uint64_t v99 = *MEMORY[0x1E4F143B8];
  memset(v95, 0, sizeof(v95));
  if (a3 == a4)
  {
    uint64_t v90 = 0;
    long long v88 = 0u;
    long long v89 = 0u;
    long long v86 = 0u;
    long long v87 = 0u;
    long long v84 = 0u;
    long long v85 = 0u;
    *(_OWORD *)unint64_t v83 = 0u;
    long long v92 = 0u;
    long long v93 = 0u;
    long long v94 = 0u;
    HIBYTE(v81) = 0;
    LOBYTE(__p[0]) = 0;
    int v82 = 0;
    sub_19E4D1CEC((uint64_t)v83, (uint64_t)__p);
    if (SHIBYTE(v81) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v91 = 0;
    if (*((void *)&v84 + 1) == (void)v85)
    {
      HIBYTE(v79) = 0;
      LOBYTE(__dst[0]) = 0;
    }
    else if (*(char *)(v85 - 9) < 0)
    {
      sub_19E39369C(__dst, *(void **)(v85 - 32), *(void *)(v85 - 24));
    }
    else
    {
      long long v14 = *(_OWORD *)(v85 - 32);
      uint64_t v79 = *(unsigned char **)(v85 - 16);
      *(_OWORD *)std::string __dst = v14;
    }
    size_t v58 = (std::__shared_weak_count *)a6[1];
    uint64_t v96 = *a6;
    unint64_t v97 = v58;
    if (v58) {
      atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v98 = a6[2];
    uint64_t v76 = 0;
    size_t v59 = operator new(0x18uLL);
    uint64_t v60 = v59;
    size_t v75 = v59;
    uint64_t v77 = v59 + 3;
    long long v61 = v97;
    *size_t v59 = v96;
    v59[1] = v61;
    if (v61) {
      atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v59[2] = v98;
    uint64_t v76 = v59 + 3;
    uint64_t v72 = 0;
    uint64_t v73 = 0;
    uint64_t v74 = 0;
    sub_19E49FE30((uint64_t)__p, (uint64_t)v95, (long long *)__dst, (uint64_t)v83, (uint64_t)&v75, 0, 0, (uint64_t)&v72, 0.0, 0.0);
    sub_19E4493D0(a2, (uint64_t)__p);
    sub_19E4446FC((uint64_t)__p);
    uint64_t v62 = (std::__shared_weak_count *)v60[1];
    if (v62 && !atomic_fetch_add(&v62->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
    uint64_t v76 = v60;
    operator delete(v75);
    int v63 = v97;
    if (v97 && !atomic_fetch_add(&v97->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
      std::__shared_weak_count::__release_weak(v63);
      if ((SHIBYTE(v79) & 0x80000000) == 0) {
        goto LABEL_98;
      }
    }
    else if ((SHIBYTE(v79) & 0x80000000) == 0)
    {
LABEL_98:
      sub_19E3C3D24(v83);
      goto LABEL_99;
    }
    operator delete(__dst[0]);
    goto LABEL_98;
  }
  uint64_t v7 = a4;
  uint64_t v8 = a3;
  uint64_t v10 = a3[12];
  unint64_t v11 = (a3[13] - v10) >> 2;
  unint64_t v12 = (char *)a4 - (char *)a3 - 184;
  if (v12 >= 0xB8)
  {
    unint64_t v15 = v12 / 0xB8 + 1;
    CFStringRef v13 = &a3[23 * (v15 & 0x3FFFFFFFFFFFFFELL)];
    unint64_t v16 = a3 + 36;
    uint64_t v17 = v15 & 0x3FFFFFFFFFFFFFELL;
    unint64_t v18 = (a3[13] - v10) >> 2;
    do
    {
      uint64_t v19 = *(v16 - 23);
      if ((v19 - *(v16 - 24)) >> 2 < v11) {
        unint64_t v11 = (v19 - *(v16 - 24)) >> 2;
      }
      if ((uint64_t)(*v16 - *(v16 - 1)) >> 2 < v18) {
        unint64_t v18 = (uint64_t)(*v16 - *(v16 - 1)) >> 2;
      }
      v16 += 46;
      v17 -= 2;
    }
    while (v17);
    if (v11 >= v18) {
      unint64_t v11 = v18;
    }
    if (v15 == (v15 & 0x3FFFFFFFFFFFFFELL)) {
      goto LABEL_21;
    }
  }
  else
  {
    CFStringRef v13 = a3;
  }
  do
  {
    uint64_t v20 = v13[13];
    if ((v20 - v13[12]) >> 2 < v11) {
      unint64_t v11 = (v20 - v13[12]) >> 2;
    }
    v13 += 23;
  }
  while (v13 != a4);
LABEL_21:
  unint64_t v21 = 0;
  if (v11)
  {
LABEL_22:
    CFIndex v22 = a3;
    while (*(_DWORD *)(v10 + 4 * v21) == *(_DWORD *)(v22[12] + 4 * v21))
    {
      v22 += 23;
      if (v22 == a4)
      {
        if (++v21 != v11) {
          goto LABEL_22;
        }
        unint64_t v21 = v11;
        break;
      }
    }
  }
  uint64_t __sz = 4 * v21;
  unint64_t v68 = v21;
  do
  {
    uint64_t v23 = v8[4];
    if (v8[3] == v23)
    {
      HIBYTE(v81) = 0;
      LOBYTE(__p[0]) = 0;
    }
    else if (*(char *)(v23 - 9) < 0)
    {
      sub_19E39369C(__p, *(void **)(v23 - 32), *(void *)(v23 - 24));
    }
    else
    {
      long long v24 = *(_OWORD *)(v23 - 32);
      uint64_t v81 = *(void *)(v23 - 16);
      *(_OWORD *)std::string __p = v24;
    }
    sub_19E4DDFF0((std::string *)v83, (uint64_t)__p, *(_DWORD *)(a1 + 48));
    if (SHIBYTE(v81) < 0) {
      operator delete(__p[0]);
    }
    CFStringRef v25 = (const __CFString *)MEMORY[0x19F3BCDE0](*(void *)(a1 + 40));
    if (CFEqual(v25, @"zh-Hans")) {
      goto LABEL_40;
    }
    (*(void (**)(void **__return_ptr))(*(void *)*a6 + 24))(__p);
    char v26 = (*(uint64_t (**)(void *))(*(void *)__p[0] + 16))(__p[0]);
    CFStringRef v27 = __p[0];
    __p[0] = 0;
    if (v27) {
      (*(void (**)(void *))(*(void *)v27 + 8))(v27);
    }
    if (v26)
    {
LABEL_40:
      CFTypeID v28 = (const void *)v8[12];
      __dst[1] = 0;
      uint64_t v79 = 0;
      __dst[0] = 0;
      if (v21)
      {
        if ((v21 & 0x8000000000000000) != 0) {
          sub_19E37C7C4();
        }
        __dst[0] = operator new(__sz);
        __dst[1] = __dst[0];
        BOOL v29 = (char *)__dst[0] + 4 * v21;
        uint64_t v79 = v29;
        memmove(__dst[0], v28, __sz);
        __dst[1] = v29;
      }
      float v30 = 0.0;
      while (1)
      {
        uint64_t v34 = v8[12];
        if (v21 >= (v8[13] - v34) >> 2) {
          break;
        }
        LODWORD(__p[0]) = 1065353216;
        (*(void (**)(void, void, void **, void **, uint64_t))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16), *(unsigned int *)(v34 + 4 * v21), __dst, __p, a5);
        uint64_t v35 = v8[12];
        CFStringRef v36 = (char *)__dst[1];
        if (__dst[1] < v79)
        {
          *(_DWORD *)__dst[1] = *(_DWORD *)(v35 + 4 * v21);
          uint64_t v31 = v36 + 4;
        }
        else
        {
          CFRange v37 = (char *)__dst[0];
          int64_t v38 = (char *)__dst[1] - (char *)__dst[0];
          int64_t v39 = ((char *)__dst[1] - (char *)__dst[0]) >> 2;
          unint64_t v40 = v39 + 1;
          if ((unint64_t)(v39 + 1) >> 62) {
            sub_19E37C7C4();
          }
          uint64_t v41 = v79 - (char *)__dst[0];
          if ((v79 - (char *)__dst[0]) >> 1 > v40) {
            unint64_t v40 = v41 >> 1;
          }
          if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v42 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v42 = v40;
          }
          if (v42)
          {
            if (v42 >> 62) {
              sub_19E37C2B8();
            }
            uint64_t v43 = operator new(4 * v42);
          }
          else
          {
            uint64_t v43 = 0;
          }
          unint64_t v44 = &v43[4 * v39];
          _DWORD *v44 = *(_DWORD *)(v35 + 4 * v21);
          uint64_t v31 = v44 + 1;
          if (v36 != v37)
          {
            unint64_t v45 = v36 - 4 - v37;
            if (v45 < 0x2C) {
              goto LABEL_109;
            }
            if ((unint64_t)(v36 - &v43[v38]) < 0x20) {
              goto LABEL_109;
            }
            uint64_t v46 = (v45 >> 2) + 1;
            int v47 = &v43[4 * v39 - 16];
            unint64_t v48 = v36 - 16;
            uint64_t v49 = v46 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v50 = *(_OWORD *)v48;
              *(v47 - 1) = *((_OWORD *)v48 - 1);
              *int v47 = v50;
              v47 -= 2;
              v48 -= 32;
              v49 -= 8;
            }
            while (v49);
            v44 -= v46 & 0x7FFFFFFFFFFFFFF8;
            v36 -= 4 * (v46 & 0x7FFFFFFFFFFFFFF8);
            if (v46 != (v46 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_109:
              do
              {
                int v51 = *((_DWORD *)v36 - 1);
                v36 -= 4;
                *--unint64_t v44 = v51;
              }
              while (v36 != v37);
            }
          }
          __dst[0] = v44;
          __dst[1] = v31;
          uint64_t v79 = &v43[4 * v42];
          if (v37) {
            operator delete(v37);
          }
        }
        __dst[1] = v31;
        float v32 = *(float *)__p;
        float v33 = log10f(*(float *)__p);
        if (v32 <= 0.0) {
          float v33 = -10.0;
        }
        float v30 = v33 + v30;
        ++v21;
      }
      uint64_t v52 = (std::__shared_weak_count *)a6[1];
      uint64_t v96 = *a6;
      unint64_t v97 = v52;
      if (v52) {
        atomic_fetch_add_explicit(&v52->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v98 = a6[2];
      uint64_t v76 = 0;
      uint64_t v77 = 0;
      size_t v75 = 0;
      __n128 v53 = operator new(0x18uLL);
      long long v54 = v53;
      size_t v75 = v53;
      uint64_t v77 = v53 + 3;
      uint64_t v55 = v97;
      void *v53 = v96;
      v53[1] = v55;
      if (v55) {
        atomic_fetch_add_explicit(&v55->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v53[2] = v98;
      uint64_t v76 = v53 + 3;
      uint64_t v72 = 0;
      uint64_t v73 = 0;
      uint64_t v74 = 0;
      sub_19E49FE30((uint64_t)__p, (uint64_t)v95, (long long *)v83, (uint64_t)v8, (uint64_t)&v75, 0, 0, (uint64_t)&v72, v30, 0.0);
      sub_19E4493D0(a2, (uint64_t)__p);
      sub_19E4446FC((uint64_t)__p);
      long long v56 = (std::__shared_weak_count *)v54[1];
      if (v56 && !atomic_fetch_add(&v56->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
      uint64_t v76 = v54;
      operator delete(v75);
      uint64_t v57 = v97;
      if (v97 && !atomic_fetch_add(&v97->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
      unint64_t v21 = v68;
      uint64_t v7 = a4;
      if (__dst[0])
      {
        __dst[1] = __dst[0];
        operator delete(__dst[0]);
      }
    }
    if (SBYTE7(v84) < 0) {
      operator delete(v83[0]);
    }
    v8 += 23;
  }
  while (v8 != v7);
LABEL_99:
  uint64_t v64 = a2[2];
  uint64_t v65 = a2[3];
  if (v95[0]) {
    operator delete(v95[0]);
  }
  return v64 != v65;
}

void sub_19E4E4244(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_19E37B770(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_19E4E4390()
{
  return CFLog();
}

void sub_19E4E43C0()
{
}

void sub_19E4E43D8(uint64_t a1, const __CFString *a2)
{
}

void sub_19E4E43E0(uint64_t a1)
{
  *(void *)a1 = &unk_1EF0BAD18;
  CFRelease(*(CFTypeRef *)(a1 + 16));
  JUMPOUT(0x19F3BDCF0);
}

uint64_t sub_19E4E444C(uint64_t a1)
{
  *(void *)a1 = &unk_1EF0BAD18;
  CFRelease(*(CFTypeRef *)(a1 + 16));
  return a1;
}

void sub_19E4E4498(int *a1, uint64_t a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (a1[2] >= 3)
  {
    vsnprintf(__str, 0x3E8uLL, a3, &a9);
    CFStringRef v10 = CFStringCreateWithCStringNoCopy(0, __str, 0x8000100u, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
    if (v10)
    {
      (*(void (**)(int *, CFStringRef))(*(void *)a1 + 16))(a1, v10);
      CFRelease(v10);
    }
  }
}

void sub_19E4E4578(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_19E37B770(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E4E45A8()
{
}

void sub_19E4E4648(_Unwind_Exception *a1)
{
  MEMORY[0x19F3BDCF0](v1, 0x1081C409227ACB4);
  _Unwind_Resume(a1);
}

uint64_t sub_19E4E466C(const __CFURL *a1, const void *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  __p[7] = Mutable;
  CFStringRef v5 = CFURLCopyFileSystemPath(a1, kCFURLPOSIXPathStyle);
  __p[6] = (void *)v5;
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F72430], v5);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F72460], @"LegacyTextInputLexicon");
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F72458], a2);
  __p[5] = 0;
  uint64_t v6 = LXLexiconCreateMutable();
  if (!v6)
  {
    if (qword_1E9459E58 != -1) {
      dispatch_once(&qword_1E9459E58, &unk_1EF0BEE58);
    }
    uint64_t v8 = qword_1E9459E50;
    if (os_log_type_enabled((os_log_t)qword_1E9459E50, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl(&dword_19E36B000, v8, OS_LOG_TYPE_DEFAULT, "failed to create a mutable lexicon", (uint8_t *)__p, 2u);
    }
  }
  if (v5) {
    CFRelease(v5);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v6;
}

void sub_19E4E48CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, int a16, __int16 a17, char a18, char a19)
{
  if (a2) {
    sub_19E37B770(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E4E4920(uint64_t result, uint64_t a2, unsigned char *a3)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + ++*(_DWORD *)(result + 24) = 0;
  *a3 = 1;
  return result;
}

uint64_t sub_19E4E4938(uint64_t result, uint64_t a2, unsigned char *a3)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + ++*(_DWORD *)(result + 24) = 0;
  *a3 = 1;
  return result;
}

void *sub_19E4E4950(void *a1)
{
  uint64_t v2 = a1 + 4;
  CFIndex v3 = (void *)a1[7];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  CFStringRef v4 = (void *)a1[3];
  if (v4 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  return a1;
}

const void **sub_19E4E4A38(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  *a1 = 0;
  return a1;
}

uint64_t sub_19E4E4A70(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  *(void *)(result + 40) = v2;
  return result;
}

uint64_t sub_19E4E4A80(uint64_t result)
{
  uint64_t v1 = *(uint64_t **)(result + 40);
  *(void *)(result + 40) = 0;
  if (v1)
  {
    if (*v1)
    {
      sub_19E374B30(v1);
      if (*v1) {
        MEMORY[0x19F3BDCF0](*v1, 0x1010C4006136809);
      }
    }
    JUMPOUT(0x19F3BDCF0);
  }
  return result;
}

uint64_t sub_19E4E4B04(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  *(void *)(result + 40) = v2;
  return result;
}

uint64_t sub_19E4E4B14(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void sub_19E4E4B4C(int a1, uint64_t a2)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = sub_19E49981C(a2, @"lexicon");
  sub_19E3C2CE4();
}

void sub_19E4E4CA4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_19E37B770(a1);
  }
  _Unwind_Resume(a1);
}

void sub_19E4E4E54(void *a1, int a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  int v20 = a2;
  ++*(_DWORD *)(*(void *)(a1[4] + 8) + 24);
  (*(void (**)(void **__return_ptr))(**(void **)(*(void *)(a1[5] + 8) + 40) + 32))(__p);
  unint64_t v4 = HIBYTE(v19);
  LOBYTE(v5) = HIBYTE(v19);
  uint64_t v6 = __p[1];
  if (v19 >= 0) {
    uint64_t v7 = (void *)HIBYTE(v19);
  }
  else {
    uint64_t v7 = __p[1];
  }
  if (!v7)
  {
    (*(void (**)(uint8_t *__return_ptr))(*(void *)a1[8] + 32))(buf);
    if (SHIBYTE(v19) < 0) {
      operator delete(__p[0]);
    }
    int64_t v19 = v26;
    *(_OWORD *)std::string __p = *(_OWORD *)buf;
    unint64_t v4 = HIBYTE(v26);
    uint64_t v6 = *(void **)&buf[8];
    unint64_t v5 = HIBYTE(v26);
  }
  if ((v5 & 0x80u) != 0) {
    unint64_t v4 = (unint64_t)v6;
  }
  if (v4)
  {
    CFStringRef v8 = sub_19E3C2A64((uint64_t)__p);
    cf[1] = v8;
    uint64_t v9 = a1[9];
    *(void *)std::string buf = v8;
    uint64_t v10 = *(void *)(v9 + 56);
    if (!v10) {
      sub_19E3ACB9C();
    }
    (*(void (**)(CFTypeRef *__return_ptr))(*(void *)v10 + 48))(cf);
    CFMutableDictionaryRef Mutable = (const void *)LXEntryCreateMutable();
    v16[5] = Mutable;
    *(void *)std::string buf = 0;
    *(void *)&uint8_t buf[8] = buf;
    unint64_t v26 = 0x2000000000;
    int v27 = 0;
    uint64_t v12 = *(void **)(*(void *)(a1[6] + 8) + 40);
    v16[0] = MEMORY[0x1E4F143A8];
    v16[1] = 0x40000000;
    v16[2] = sub_19E4E5298;
    void v16[3] = &unk_1E59A1338;
    v16[4] = buf;
    sub_19E528DFC(v12, &v20, 1u, (uint64_t)v16);
    if (*(float *)(*(void *)&buf[8] + 24) < 1.0) {
      *(_DWORD *)(*(void *)&buf[8] + ++*(_DWORD *)(result + 24) = 1065353216;
    }
    LXMutableEntryUpdateUsageCount();
    if (sub_19E4E52E8((uint64_t)Mutable, a1[8], *(void **)(*(void *)(a1[5] + 8) + 40), a1[10], a1[9]))
    {
      ++*(_DWORD *)(*(void *)(a1[7] + 8) + 24);
    }
    else
    {
      if (qword_1E9459E58 != -1) {
        dispatch_once(&qword_1E9459E58, &unk_1EF0BEE58);
      }
      long long v14 = qword_1E9459E50;
      if (os_log_type_enabled((os_log_t)qword_1E9459E50, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t v15 = __p;
        if (v19 < 0) {
          unint64_t v15 = (void **)__p[0];
        }
        *(_DWORD *)unint64_t v21 = 136315394;
        CFIndex v22 = v15;
        __int16 v23 = 1024;
        int v24 = a2;
        _os_log_impl(&dword_19E36B000, v14, OS_LOG_TYPE_DEFAULT, "failed to migrate entry '%s' with tokenID=%u", v21, 0x12u);
      }
    }
    _Block_object_dispose(buf, 8);
    if (Mutable) {
      CFRelease(Mutable);
    }
    if (cf[0]) {
      CFRelease(cf[0]);
    }
    if (v8) {
      CFRelease(v8);
    }
  }
  else
  {
    if (qword_1E9459E58 != -1) {
      dispatch_once(&qword_1E9459E58, &unk_1EF0BEE58);
    }
    CFStringRef v13 = qword_1E9459E50;
    if (os_log_type_enabled((os_log_t)qword_1E9459E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = a2;
      _os_log_impl(&dword_19E36B000, v13, OS_LOG_TYPE_DEFAULT, "unable to migrate entry with tokenID=%u (failed to lookup corresponding string)", buf, 8u);
    }
  }
  if (SHIBYTE(v19) < 0) {
    operator delete(__p[0]);
  }
}

void sub_19E4E5214(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, int a15, __int16 a16, char a17, char a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

float sub_19E4E5298(uint64_t a1, float a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8);
  float result = *(float *)(v2 + 24) + a2;
  *(float *)(v2 + ++*(_DWORD *)(result + 24) = result;
  return result;
}

const void **sub_19E4E52B0(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  *a1 = 0;
  return a1;
}

uint64_t sub_19E4E52E8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  CFMutableStringRef MutableCopy = (const void *)LXEntryCreateMutableCopy();
  CFStringRef v9 = (const __CFString *)LXEntryCopyString();
  *(void *)&long long __p = 0;
  *((void *)&__p + 1) = &__p;
  int v36 = 0;
  uint64_t v35 = 0x2000000000;
  v28[0] = (void *)MEMORY[0x1E4F143A8];
  v28[1] = (void *)0x40000000;
  BOOL v29 = sub_19E512428;
  float v30 = &unk_1E59A1D20;
  p_p = &__p;
  CFStringRef v32 = v9;
  uint64_t v33 = 0;
  LXLexiconEnumerateEntriesForString();
  uint64_t v10 = *(unsigned int *)(*((void *)&__p + 1) + 24);
  _Block_object_dispose(&__p, 8);
  if (v10)
  {
    unint64_t v11 = (char *)operator new(0x40uLL);
    strcpy(v11, "skipping migration of string,  already exists with tokenID");
    sub_19E37774C(v9, &__p);
    if (v35 >= 0) {
      uint64_t v12 = &__p;
    }
    else {
      uint64_t v12 = (long long *)__p;
    }
    sub_19E439798("skipping migration of string='%s'; already exists with tokenID=%u", (uint64_t)v28, v12, v10);
    if (SHIBYTE(v35) < 0) {
      operator delete((void *)__p);
    }
    if (qword_1E9459E58 != -1) {
      dispatch_once(&qword_1E9459E58, &unk_1EF0BEE58);
    }
    CFStringRef v13 = qword_1E9459E50;
    if (os_log_type_enabled((os_log_t)qword_1E9459E50, OS_LOG_TYPE_INFO))
    {
      LODWORD(__p) = 136315138;
      *(void *)((char *)&__p + 4) = v11;
      _os_log_impl(&dword_19E36B000, v13, OS_LOG_TYPE_INFO, "%s", (uint8_t *)&__p, 0xCu);
    }
    if (SHIBYTE(v29) < 0) {
      operator delete(v28[0]);
    }
    operator delete(v11);
    goto LABEL_14;
  }
  v28[0] = (void *)v9;
  uint64_t v15 = *(void *)(a5 + 24);
  if (!v15) {
    sub_19E3ACB9C();
  }
  (*(void (**)(long long *__return_ptr))(*(void *)v15 + 48))(&__p);
  int v16 = (*(uint64_t (**)(uint64_t, const __CFString *, void))(*(void *)a2 + 16))(a2, v9, 0);
  if (!v16)
  {
    if (!(void)__p)
    {
LABEL_14:
      uint64_t v14 = 0;
      goto LABEL_30;
    }
    int v16 = (*(uint64_t (**)(void *, void, void))(*a3 + 16))(a3, __p, 0);
    if (!v16) {
      goto LABEL_28;
    }
  }
  uint64_t v17 = (void *)a3[18];
  uint64_t v18 = v17[7];
  if (v17[8] != v18)
  {
    unint64_t v19 = v17[10];
    uint64_t v20 = v17[11];
    unint64_t v21 = (unint64_t *)(v18 + 8 * (v19 / 0x66));
    unint64_t v22 = *v21;
    unint64_t v23 = *v21 + 40 * (v19 % 0x66);
    unint64_t v24 = *(void *)(v18 + 8 * ((v20 + v19) / 0x66)) + 40 * ((v20 + v19) % 0x66);
    while (v23 != v24)
    {
      if (*(_DWORD *)(v23 + 24) == v16) {
        break;
      }
      v23 += 40;
      if (v23 - v22 == 4080)
      {
        unint64_t v26 = v21[1];
        ++v21;
        unint64_t v22 = v26;
        unint64_t v23 = v26;
      }
    }
  }
  CEMStringContainsEmoji();
  LXMutableEntrySetMetaFlags();
  if (!LXLexiconAddEntryWithTokenID())
  {
LABEL_28:
    uint64_t v14 = 0;
    CFStringRef v25 = (const void *)__p;
    if (!(void)__p) {
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  LXLexiconSetUserBitfield();
  uint64_t v14 = 1;
  CFStringRef v25 = (const void *)__p;
  if ((void)__p) {
LABEL_29:
  }
    CFRelease(v25);
LABEL_30:
  if (v9) {
    CFRelease(v9);
  }
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  return v14;
}

void sub_19E4E5704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, const void *a12, const void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
}

void sub_19E4E5798()
{
}

__n128 sub_19E4E57A0(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void sub_19E4E57C4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    uint64_t v3 = *(void *)(a1 + 48);
    unint64_t v4 = *(void **)(a1 + 40);
    if (v3 != v1)
    {
      uint64_t v5 = v3;
      do
      {
        uint64_t v7 = *(const void **)(v5 - 8);
        v5 -= 8;
        uint64_t v6 = v7;
        if (v7) {
          CFRelease(v6);
        }
        *(void *)(v3 - 8) = 0;
        uint64_t v3 = v5;
      }
      while (v5 != v1);
      unint64_t v4 = *(void **)(a1 + 40);
    }
    *(void *)(a1 + 48) = v1;
    operator delete(v4);
  }
}

void sub_19E4E5858(void *a1, const void *a2)
{
  ++*(_DWORD *)(*(void *)(a1[4] + 8) + 24);
  if (sub_19E4E52E8((uint64_t)a2, a1[8], *(void **)(*(void *)(a1[5] + 8) + 40), a1[9], a1[10]))
  {
    ++*(_DWORD *)(*(void *)(a1[6] + 8) + 24);
    return;
  }
  unint64_t v4 = *(void **)(a1[7] + 8);
  CFTypeRef v5 = CFRetain(a2);
  CFTypeRef v6 = v5;
  CFStringRef v8 = (void *)v4[6];
  unint64_t v7 = v4[7];
  if ((unint64_t)v8 >= v7)
  {
    uint64_t v10 = (char *)v4[5];
    uint64_t v11 = ((char *)v8 - v10) >> 3;
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 61) {
      sub_19E37C7C4();
    }
    uint64_t v13 = v7 - (void)v10;
    if (v13 >> 2 > v12) {
      unint64_t v12 = v13 >> 2;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      if (v14 >> 61) {
        sub_19E37C2B8();
      }
      uint64_t v15 = (char *)operator new(8 * v14);
    }
    else
    {
      uint64_t v15 = 0;
    }
    int v16 = &v15[8 * v11];
    uint64_t v17 = &v15[8 * v14];
    *(void *)int v16 = v6;
    CFStringRef v9 = v16 + 8;
    if (v8 == (void *)v10)
    {
      v4[5] = v16;
      v4[6] = v9;
      v4[7] = v17;
LABEL_33:
      if (v8) {
        operator delete(v8);
      }
      goto LABEL_35;
    }
    unint64_t v18 = (char *)v8 - v10 - 8;
    if (v18 > 0x77
      && ((char *)v8 - (v18 & 0xFFFFFFFFFFFFFFF8) - 8 >= v16
       || &v15[(char *)v8 - v10 - (v18 & 0xFFFFFFFFFFFFFFF8) - 8] >= (char *)v8))
    {
      uint64_t v20 = (v18 >> 3) + 1;
      v16 -= 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
      unint64_t v21 = (long long *)(v8 - 4);
      unint64_t v22 = &v15[8 * v11 - 16];
      uint64_t v23 = v20 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v25 = *v21;
        long long v24 = v21[1];
        long long *v21 = 0uLL;
        v21[1] = 0uLL;
        v21 -= 2;
        *((_OWORD *)v22 - 1) = v25;
        *(_OWORD *)unint64_t v22 = v24;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v20 == (v20 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_27:
        CFStringRef v8 = (void *)v4[5];
        int v27 = (void *)v4[6];
        v4[5] = v16;
        v4[6] = v9;
        v4[7] = v17;
        if (v27 != v8)
        {
          uint64_t v28 = v27;
          do
          {
            float v30 = (const void *)*--v28;
            BOOL v29 = v30;
            if (v30) {
              CFRelease(v29);
            }
            *(v27 - 1) = 0;
            int v27 = v28;
          }
          while (v28 != v8);
        }
        goto LABEL_33;
      }
      v8 -= v20 & 0x3FFFFFFFFFFFFFFCLL;
    }
    do
    {
      uint64_t v26 = *--v8;
      void *v8 = 0;
      *((void *)v16 - 1) = v26;
      v16 -= 8;
    }
    while (v8 != (void *)v10);
    goto LABEL_27;
  }
  void *v8 = v5;
  CFStringRef v9 = v8 + 1;
LABEL_35:
  v4[6] = v9;
}

void **sub_19E4E5A6C(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    unint64_t v4 = *a1;
    if (v3 != v2)
    {
      CFTypeRef v5 = (char *)a1[1];
      do
      {
        unint64_t v7 = (const void *)*((void *)v5 - 1);
        v5 -= 8;
        CFTypeRef v6 = v7;
        if (v7) {
          CFRelease(v6);
        }
        *((void *)v3 - 1) = 0;
        uint64_t v3 = v5;
      }
      while (v5 != v2);
      unint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

os_log_t sub_19E4E5AE8()
{
  os_log_t result = os_log_create("com.apple.LanguageModeling", "LexiconMigrator");
  qword_1E9459E50 = (uint64_t)result;
  return result;
}

uint64_t sub_19E4E5B18()
{
  uint64_t result = ucol_open();
  qword_1E945A290 = result;
  return result;
}

void sub_19E4E5B7C(uint64_t a1)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(unsigned int *)(a1 + 40);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + ++*(_DWORD *)(result + 24) = qword_1E945A260[v1];
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    if (v1)
    {
      if (qword_1E945A298 != -1) {
        dispatch_once(&qword_1E945A298, &unk_1EF0BEE78);
      }
      if (qword_1E945A290)
      {
        uint64_t v37 = 0;
        uint64_t v3 = qword_1E945A2B0;
        unint64_t v4 = qword_1E945A2B8;
        if (qword_1E945A2B0 || qword_1E945A2B8 || dword_1E945A2C0)
        {
LABEL_42:
          uint64_t v17 = 0;
          if ((int)v1 >= 1 && v3 && v4)
          {
            unint64_t v18 = *(unsigned int *)(v3 + 4 + 8 * (v1 - 1));
            if (v18 < 5 || v4 <= v18) {
              goto LABEL_50;
            }
            uint64_t v17 = 0;
            int v19 = *(_DWORD *)(v3 + 4 + 8 * (v1 - 1) + 4);
            if (v19)
            {
              if (v4 >= (v19 + v18))
              {
                uint64_t v20 = ucol_openBinary();
                if ((int)v37 > 0)
                {
LABEL_50:
                  uint64_t v17 = 0;
                  goto LABEL_51;
                }
                uint64_t v17 = v20;
                *(_DWORD *)buffer = 0;
                ucol_setStrength();
                ucol_setAttribute();
                if (*(int *)buffer > 0)
                {
                  uint64_t v31 = u_errorName(*(UErrorCode *)buffer);
                  printf("Collator customization failed: %s\n", v31);
                  LODWORD(v37) = *(_DWORD *)buffer;
                  if (*(int *)buffer >= 1)
                  {
                    ucol_close();
                    goto LABEL_50;
                  }
                }
              }
            }
          }
LABEL_51:
          *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + ++*(_DWORD *)(result + 24) = v17;
          uint64_t v21 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
          if (v21)
          {
LABEL_69:
            qword_1E945A260[*(unsigned int *)(a1 + 40)] = v21;
            return;
          }
          uint64_t v22 = *(unsigned int *)(a1 + 40);
          CFMutableDictionaryRef Mutable = CFStringCreateMutable(0, 0);
          long long v24 = Mutable;
          CFStringRef v25 = @"& ь <<< Ь << ъ <<< Ъ & ї <<< Ї << і <<< І & 'ا' << 'أ' << 'إ' << 'آ' & 'و' << 'ؤ' & 'ي' << 'ئ' &[last primary ignorable ] << '׳' << '״' << 'ـ' << 'ً' << 'ٌ' << 'ٍ' << 'َ' << 'ُ' << 'ِ' << 'ّ' << 'ْ' << 'ٓ' << 'ٔ' << 'ٕ' << 'ٖ' << 'ٗ' << 'ٰ' << '़' << 'ँ' << 'ं' << 'ः' << '्' << '্' << '়' << 'ঁ' << 'ঃ' << 'ਁ' << 'ਂ' << 'ਃ' << '਼' << '੍' << 'ੑ' << 'ੰ' << 'ੱ' << 'ઁ' << 'ં' << 'ઃ' << '઼' << '્' << 'ః' << '్' & 'כ' < 'ך' & 'מ' < 'ם' & 'נ' < 'ן' & 'פ' < 'ף' & 'צ' < 'ץ' & 'ๆ' < '็' < '่' < '้' < '๊' < '๋' < '์' < 'ํ' < '๎' [suppressContractions [ก-๛]] & 'ํ' <<< 'ำ'/'า' & [before 1] 'অ' < 'ং' < 'ঃ' & [before 1] 'అ' < 'ఁ' < 'ం' < 'ః' & 'ে' <<< 'ো'/'া' <<< 'ৌ'/'ৗ' & 'ত' <<< 'ৎ'/'্' ";
          switch((int)v22)
          {
            case 0:
              __assert_rtn("LMTIKeyboardCreateCustomCollationRulesForCollatorType", "LMTIKeyboardCollator.cpp", 80, "type != kRootCollator");
            case 1:
              goto LABEL_57;
            case 2:
              CFStringRef v25 = @"& i <<< İ << ı <<< I ";
              goto LABEL_57;
            case 3:
              CFStringRef v25 = @"& z < æ <<< Æ < å <<< Å < ä <<< Ä < ø <<< Ø < ö <<< Ö ";
              goto LABEL_57;
            case 4:
              goto LABEL_57;
            case 5:
              CFStringRef v25 = @"& n << w & k << g & p << b & a << A/a & e << E/e & i << I/i & o << O/o & u << U/u & [last primary ignorable] << ஂ << ் & [last primary ignorable] << அ & ஆ << ா & இ << ி & ஈ << ீ & உ << ு & ஊ << ூ & எ << ெ & ஏ << ே & ஐ << ை & ஒ << ொ & ஓ << ோ & ஔ << ௌ & க << '\u0BBD'/ஷ ";
LABEL_57:
              CFStringAppend(Mutable, v25);
              break;
            default:
              break;
          }
          CFStringAppend(v24, @"& [before 1] a < ' ' < '&' ");
          CFIndex Length = CFStringGetLength(v24);
          int v27 = (UniChar *)malloc_type_malloc(2 * Length, 0x1000040BDFB0063uLL);
          if (!v27) {
            __assert_rtn("LMTIKeyboardCollatorCompile", "LMTIKeyboardCollator.cpp", 207, "buf");
          }
          v40.location = 0;
          v40.length = Length;
          CFStringGetCharacters(v24, v40, v27);
          CFRelease(v24);
          LODWORD(filePath) = 0;
          uint64_t v7 = ucol_openRules();
          free(v27);
          if ((int)filePath < 1)
          {
            LODWORD(cf) = 0;
            ucol_setStrength();
            ucol_setAttribute();
            if ((int)cf <= 0) {
              goto LABEL_68;
            }
            BOOL v29 = u_errorName((UErrorCode)cf);
            printf("Collator customization failed: %s\n", v29);
            LODWORD(filePath) = cf;
            if ((int)cf < 1) {
              goto LABEL_68;
            }
            ucol_close();
          }
          else
          {
            if (v22 > 5) {
              uint64_t v28 = "(unknown custom collator)";
            }
            else {
              uint64_t v28 = off_1E59A1458[v22];
            }
            float v30 = u_errorName((UErrorCode)filePath);
            printf("failed to compile rules for collator type %s: %s\n", v28, v30);
          }
          uint64_t v7 = 0;
LABEL_68:
          *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + ++*(_DWORD *)(result + 24) = v7;
          uint64_t v21 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
          goto LABEL_69;
        }
        CFTypeRef v5 = getenv("LINGUISTIC_DATA");
        if (v5) {
          CFStringRef v6 = CFStringCreateWithCString(0, v5, 0x8000100u);
        }
        else {
          CFStringRef v6 = @"/System/Library/LinguisticData/";
        }
        sub_19E372124(&cf, v6);
        CFStringRef v8 = CFStringCreateWithFormat(0, 0, @"%@/collator.dat", cf);
        sub_19E372124(&filePath, v8);
        CFURLRef v9 = CFURLCreateWithFileSystemPath(0, filePath, kCFURLPOSIXPathStyle, 1u);
        sub_19E36F3C4(&url, v9);
        dword_1E945A2C0 = -1;
        if (CFURLGetFileSystemRepresentation(url, 1u, buffer, 1024))
        {
          int v10 = open((const char *)buffer, 0);
          dword_1E945A2C0 = v10;
          if ((v10 & 0x80000000) == 0) {
            goto LABEL_29;
          }
        }
        else
        {
          int v10 = dword_1E945A2C0;
          if ((dword_1E945A2C0 & 0x80000000) == 0) {
            goto LABEL_29;
          }
        }
        CFStringRef v11 = CFStringCreateWithBytes(0, (const UInt8 *)"/System/Library/PrivateFrameworks/Lexicon.framework/collator.dat", 64, 0x8000100u, 0);
        if (!v11)
        {
          exception = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x19F3BD790](exception, "Could not construct");
          __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        CFStringRef v12 = filePath;
        CFStringRef filePath = v11;
        if (v12)
        {
          CFRelease(v12);
          CFStringRef v11 = filePath;
        }
        CFURLRef v13 = CFURLCreateWithFileSystemPath(0, v11, kCFURLPOSIXPathStyle, 1u);
        sub_19E36F3C4(&v33, v13);
        CFURLRef v14 = v33;
        CFURLRef v15 = url;
        CFURLRef v33 = url;
        CFURLRef url = v14;
        if (v33)
        {
          CFRelease(v15);
          CFURLRef v14 = url;
        }
        if (CFURLGetFileSystemRepresentation(v14, 1u, buffer, 1024))
        {
          int v10 = open((const char *)buffer, 0);
          dword_1E945A2C0 = v10;
          if (v10 < 0) {
            goto LABEL_35;
          }
        }
        else
        {
          int v10 = dword_1E945A2C0;
          if (dword_1E945A2C0 < 0) {
            goto LABEL_35;
          }
        }
LABEL_29:
        off_t v16 = lseek(v10, 0, 2);
        if (v16 < 1)
        {
LABEL_34:
          close(dword_1E945A2C0);
          dword_1E945A2C0 = -1;
          goto LABEL_35;
        }
        qword_1E945A2B8 = v16;
        lseek(dword_1E945A2C0, 0, 0);
        qword_1E945A2B0 = (uint64_t)mmap(0, qword_1E945A2B8, 1, 2, dword_1E945A2C0, 0);
        if (qword_1E945A2B0 == -1)
        {
LABEL_33:
          qword_1E945A2B0 = 0;
          goto LABEL_34;
        }
        ucol_getVersion();
        if (HIDWORD(v37) != *(_DWORD *)qword_1E945A2B0)
        {
          munmap((void *)qword_1E945A2B0, qword_1E945A2B8);
          goto LABEL_33;
        }
LABEL_35:
        if (url) {
          CFRelease(url);
        }
        if (filePath) {
          CFRelease(filePath);
        }
        if (cf) {
          CFRelease(cf);
        }
        uint64_t v3 = qword_1E945A2B0;
        unint64_t v4 = qword_1E945A2B8;
        goto LABEL_42;
      }
    }
    else
    {
      if (qword_1E945A298 != -1) {
        dispatch_once(&qword_1E945A298, &unk_1EF0BEE78);
      }
      uint64_t v7 = qword_1E945A290;
      if (qword_1E945A290) {
        goto LABEL_68;
      }
    }
    __assert_rtn("getRootCollator", "LMTIKeyboardCollator.cpp", 53, "rootCollator");
  }
}

void sub_19E4E6210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  CFTypeRef v5 = va_arg(va1, const void *);
  va_copy(va2, va1);
  uint64_t v7 = va_arg(va2, const void *);
  sub_19E410F68((const void **)va);
  sub_19E3C6F1C((const void **)va1);
  sub_19E3C6F1C((const void **)va2);
  _Unwind_Resume(a1);
}

dispatch_queue_t sub_19E4E62A8()
{
  dispatch_queue_t result = dispatch_queue_create("com.apple.LanguageModeling.KeyboardCollator", 0);
  qword_1E945A2A0 = (uint64_t)result;
  return result;
}

void *sub_19E4E62D4(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_19E4E6358()
{
  return &unk_1EF0B8118;
}

uint64_t sub_19E4E6364(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN2LM22LexiconStringConverter22getDefaultConverterFcnEvE3$_0"
    || ((v3 & (unint64_t)"ZN2LM22LexiconStringConverter22getDefaultConverterFcnEvE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN2LM22LexiconStringConverter22getDefaultConverterFcnEvE3$_0")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN2LM22LexiconStringConverter22getDefaultConverterFcnEvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

CFTypeRef sub_19E4E63BC@<X0>(const void **a1@<X1>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  *a2 = 0;
  if (v2)
  {
    CFTypeRef result = CFRetain(v2);
    *a2 = v2;
  }
  return result;
}

void sub_19E4E6400(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF0BD878;
}

void *sub_19E4E6420()
{
  CFTypeRef result = operator new(0x10uLL);
  *CFTypeRef result = &unk_1EF0BD878;
  return result;
}

void sub_19E4E6458()
{
}

void *sub_19E4E6470()
{
  return &unk_1EF0B8108;
}

uint64_t sub_19E4E647C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN2LM22LexiconStringConverter21hangulStringConverterEvE3$_1"
    || ((v3 & (unint64_t)"ZN2LM22LexiconStringConverter21hangulStringConverterEvE3$_1" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN2LM22LexiconStringConverter21hangulStringConverterEvE3$_1")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN2LM22LexiconStringConverter21hangulStringConverterEvE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

const __CFString *sub_19E4E64D4@<X0>(const __CFString **a1@<X1>, const __CFString **a2@<X8>)
{
  CFStringRef v3 = *a1;
  *a2 = 0;
  CFStringRef result = sub_19E508298(v3);
  if (result) {
    *a2 = result;
  }
  return result;
}

void sub_19E4E6508(_Unwind_Exception *a1)
{
  void *v1 = 0;
  _Unwind_Resume(a1);
}

void sub_19E4E6510(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void sub_19E4E658C(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t sub_19E4E6608(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1EF0BD820;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *sub_19E4E6640(uint64_t a1)
{
  CFStringRef result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *CFStringRef result = &unk_1EF0BD820;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_19E4E669C(void *a1)
{
  *a1 = &unk_1EF0BD820;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x19F3BDCF0);
}

void *sub_19E4E6744(void *a1)
{
  *a1 = &unk_1EF0BD820;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void *sub_19E4E67CC()
{
  return &unk_1EF0B80F8;
}

uint64_t sub_19E4E67D8(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN2LM22LexiconStringConverter21hangulStringConverterEvE3$_0"
    || ((v3 & (unint64_t)"ZN2LM22LexiconStringConverter21hangulStringConverterEvE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN2LM22LexiconStringConverter21hangulStringConverterEvE3$_0")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN2LM22LexiconStringConverter21hangulStringConverterEvE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void sub_19E4E6830(uint64_t a1@<X0>, const __CFString **a2@<X1>, CFMutableStringRef *a3@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  CFStringRef v4 = *a2;
  *a3 = 0;
  if (v4)
  {
    uint64_t Length = CFStringGetLength(v4);
    CFMutableStringRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], Length);
    if (Mutable)
    {
      *(_DWORD *)(v3 + ++*(_DWORD *)(result + 24) = 0;
      CFStringRef v8 = (_WORD *)(v3 + 24);
      *(_DWORD *)(v3 + 2) = 0;
      *(_DWORD *)(v3 + 8) = 0;
      *(_WORD *)(v3 + 28) = 0;
      CFStringRef v9 = *(const __CFString **)(v3 + 16);
      if (v9)
      {
        v10.length = CFStringGetLength(v9);
        if (v10.length >= 1)
        {
          v10.location = 0;
          CFStringDelete(*(CFMutableStringRef *)(v3 + 16), v10);
        }
      }
      if (Length >= 1)
      {
        CFIndex v11 = 0;
        BOOL v178 = (_WORD *)(v3 + 30);
        while (2)
        {
          UniChar v180 = 0;
          unsigned int CharacterAtIndex = CFStringGetCharacterAtIndex(v4, v11);
          UniChar v180 = CharacterAtIndex;
          if (CharacterAtIndex - 12592 > 0x5E)
          {
            if (CharacterAtIndex - 4352 >= 0x5A)
            {
              if (CharacterAtIndex - 4449 >= 0x42)
              {
                if (CharacterAtIndex - 4520 >= 0x52)
                {
                  *(_DWORD *)(v3 + 2) = 0;
                  *(_DWORD *)(v3 + 8) = 0;
                  *(_DWORD *)(v3 + ++*(_DWORD *)(result + 24) = 0;
                  *(_WORD *)(v3 + 28) = 0;
                  CFStringRef v84 = *(const __CFString **)(v3 + 16);
                  if (v84)
                  {
                    v85.length = CFStringGetLength(v84);
                    if (v85.length >= 1)
                    {
                      v85.location = 0;
                      CFStringDelete(*(CFMutableStringRef *)(v3 + 16), v85);
                    }
                  }
                  CFStringAppendCharacters(Mutable, &v180, 1);
                  goto LABEL_164;
                }
                int v15 = 4;
              }
              else
              {
                int v15 = 3;
              }
            }
            else
            {
              int v15 = 2;
            }
          }
          else
          {
            BOOL v14 = CharacterAtIndex <= 0x3186 && CharacterAtIndex - 12623 >= 0x15;
            int v15 = !v14;
          }
          int v16 = *(_DWORD *)(v3 + 8);
          switch(v16)
          {
            case 0:
              BOOL v42 = v15 == 1;
              if (v15 == 1) {
                unsigned int v43 = 0;
              }
              else {
                unsigned int v43 = CharacterAtIndex;
              }
              if (v15 == 1) {
                unsigned int v44 = CharacterAtIndex;
              }
              else {
                unsigned int v44 = 0;
              }
              if (v42) {
                int v45 = 1;
              }
              else {
                int v45 = 2;
              }
              if ((unsigned __int16)(v43 - 12593) <= 0x5Du) {
                LOWORD(v43) = word_19E575DEC[v43 - 12593];
              }
              _WORD *v8 = v43;
              if (v44 - 12593 <= 0x5D) {
                LOWORD(v44) = word_19E575AC8[v44 - 12593];
              }
              int v27 = 0;
              *(_WORD *)(v3 + 26) = v44;
              *(_WORD *)(v3 + 28) = 0;
              *(_DWORD *)(v3 + 8) = v45;
              uint64_t v179 = 0;
              *(_DWORD *)(v3 + 2) = 1;
              CFStringRef v29 = *(const __CFString **)(v3 + 16);
              if (v29) {
                goto LABEL_39;
              }
              goto LABEL_41;
            case 1:
              if (v15 != 1)
              {
                unsigned int v90 = CharacterAtIndex - 12593;
                goto LABEL_281;
              }
              uint64_t v46 = *(unsigned __int16 *)(v3 + 26);
              if ((v46 - 12593) <= 0x5D) {
                LODWORD(v46) = word_19E575AC8[v46 - 12593];
              }
              unsigned int v47 = CharacterAtIndex;
              if (CharacterAtIndex - 12593 <= 0x5D) {
                unsigned int v47 = word_19E575AC8[CharacterAtIndex - 12593];
              }
              int v48 = 0;
              unsigned int v49 = v47 | (v46 << 16);
              int v50 = 25;
              while (1)
              {
                int v51 = v48 + v50;
                if (v48 + v50 < 0 != __OFADD__(v48, v50)) {
                  ++v51;
                }
                int v52 = v51 >> 1;
                uint64_t v53 = (uint64_t)v51 >> 1;
                unsigned int v54 = word_19E575D0E[3 * v52 + 1] | (word_19E575D0E[3 * v52] << 16);
                if (v49 == v54) {
                  break;
                }
                if (v49 <= v54) {
                  int v50 = v53 - 1;
                }
                else {
                  int v48 = v53 + 1;
                }
                if (v48 > v50) {
                  goto LABEL_236;
                }
              }
              uint64_t v115 = word_19E575D0E[3 * (int)v53 + 2];
              if (word_19E575D0E[3 * (int)v53 + 2])
              {
                int v116 = word_19E575D0E[3 * (int)v53 + 2];
                if ((v115 - 12593) <= 0x5D) {
                  int v116 = word_19E575AC8[v115 - 12593];
                }
                if (v116)
                {
                  if ((v116 - 4449) > 0x14)
                  {
                    if (v116 == 4514) {
                      int v117 = 4514;
                    }
                    else {
                      int v117 = 0;
                    }
                    if (v116 == 4510)
                    {
LABEL_442:
                      *(_DWORD *)(v3 + 8) = 1;
                      *(_WORD *)(v3 + ++*(_DWORD *)(result + 24) = 0;
                      if ((v115 - 12593) <= 0x5D) {
                        LOWORD(v115) = word_19E575AC8[v115 - 12593];
                      }
                      int v27 = 0;
                      *(_WORD *)(v3 + 26) = v115;
                      *(_WORD *)(v3 + 28) = 0;
                      uint64_t v179 = 0;
                      __int16 v78 = 1;
                      goto LABEL_151;
                    }
                  }
                  else
                  {
                    int v117 = (unsigned __int16)word_19E575BAA[v116 - 4449];
                  }
                  if (v117) {
                    goto LABEL_442;
                  }
                }
                if ((unsigned __int16)(CharacterAtIndex - 12593) <= 0x5Du) {
                  LOWORD(CharacterAtIndex) = word_19E575AC8[CharacterAtIndex - 12593];
                }
                __int16 v78 = 0;
                LOWORD(v171) = 0;
                HIWORD(v171) = CharacterAtIndex;
                uint64_t v179 = v171;
                int v27 = 1;
                *(_DWORD *)(v3 + 8) = 1;
                goto LABEL_151;
              }
LABEL_236:
              if ((unsigned __int16)(CharacterAtIndex - 12593) <= 0x5Du) {
                goto LABEL_480;
              }
LABEL_481:
              LOWORD(v175) = 0;
              HIWORD(v175) = CharacterAtIndex;
              uint64_t v179 = v175;
              int v27 = 1;
              *(_DWORD *)(v3 + 8) = 1;
              *(_DWORD *)(v3 + 2) = 1;
              CFStringRef v29 = *(const __CFString **)(v3 + 16);
              if (!v29) {
                goto LABEL_41;
              }
              goto LABEL_39;
            case 2:
              uint64_t v55 = (unsigned __int16)*v8;
              unsigned int v56 = v55 - 12593;
              if (v15 != 1)
              {
                if (v56 <= 0x5D) {
                  LODWORD(v55) = word_19E575DEC[v55 - 12593];
                }
                unsigned int v91 = CharacterAtIndex;
                if (CharacterAtIndex - 12593 <= 0x5D) {
                  unsigned int v91 = word_19E575DEC[CharacterAtIndex - 12593];
                }
                signed int v92 = 0;
                unsigned int v93 = v91 | (v55 << 16);
                int v94 = 4;
                while (1)
                {
                  unsigned int v95 = (v92 + v94) >> 1;
                  unsigned int v96 = word_19E575CF0[3 * v95 + 1] | (word_19E575CF0[3 * v95] << 16);
                  if (v93 == v96) {
                    break;
                  }
                  if (v93 <= v96) {
                    int v94 = v95 - 1;
                  }
                  else {
                    signed int v92 = v95 + 1;
                  }
                  if (v92 > v94) {
                    goto LABEL_251;
                  }
                }
                unint64_t v121 = word_19E575CF0[3 * v95 + 2];
                if (!word_19E575CF0[3 * v95 + 2])
                {
LABEL_251:
                  unsigned int v90 = (unsigned __int16)(CharacterAtIndex - 12593);
                  goto LABEL_281;
                }
                if ((v121 - 12593) > 0x5D)
                {
                  if (v121 - 4352 >= 0x13) {
                    goto LABEL_327;
                  }
LABEL_326:
                  int v27 = 0;
                  *(_WORD *)(v3 + ++*(_DWORD *)(result + 24) = v121;
                  *(_DWORD *)(v3 + 26) = 0;
                  uint64_t v179 = 0;
                  __int16 v78 = 1;
                }
                else
                {
                  unint64_t v121 = (unint64_t)&word_19E575DEC[v121];
                  if ((unint64_t)*(unsigned __int16 *)(v121 - 25186) - 4352 < 0x13)
                  {
                    LOWORD(v121) = *(_WORD *)(v121 - 25186);
                    goto LABEL_326;
                  }
LABEL_327:
                  if ((unsigned __int16)(CharacterAtIndex - 12593) <= 0x5Du) {
                    LOWORD(CharacterAtIndex) = word_19E575DEC[CharacterAtIndex - 12593];
                  }
LABEL_148:
                  __int16 v78 = 0;
                  uint64_t v179 = (unsigned __int16)CharacterAtIndex;
                  int v27 = 1;
                }
                int v79 = 2;
                goto LABEL_150;
              }
              if (v56 <= 0x5D) {
                LODWORD(v55) = word_19E575DEC[v55 - 12593];
              }
              uint64_t v57 = *(unsigned __int16 *)(v3 + 28);
              *BOOL v178 = v55;
              unsigned __int16 v18 = CharacterAtIndex - 12593;
              unsigned int v58 = CharacterAtIndex;
              if (CharacterAtIndex - 12593 <= 0x5D) {
                unsigned int v58 = word_19E575AC8[CharacterAtIndex - 12593];
              }
              *(_WORD *)(v3 + 32) = v58;
              if ((v57 - 12593) <= 0x5D) {
                LODWORD(v57) = word_19E575EA8[v57 - 12593];
              }
              *(_WORD *)(v3 + 34) = v57;
              if (v55)
              {
                if (v58)
                {
                  __int16 v59 = 0;
                  if (v58 != 4510 && v58 != 4514)
                  {
                    BOOL v14 = v57 >= 0x11A7;
                    __int16 v60 = v57 - 4519;
                    if (!v14) {
                      __int16 v60 = 0;
                    }
                    __int16 v59 = 28 * v58 + 588 * v55 + v60 - 18076;
                  }
                }
                else if (v57 || (unint64_t v134 = v55 - 4352, v134 > 0x12))
                {
                  __int16 v59 = 0;
                }
                else
                {
                  __int16 v59 = word_19E575B84[v134];
                }
              }
              else
              {
                __int16 v59 = 0;
                if (v58 && !v57)
                {
                  if (v58 - 4449 > 0x14)
                  {
                    if (v58 == 4514) {
                      __int16 v172 = 4514;
                    }
                    else {
                      __int16 v172 = 0;
                    }
                    if (v58 == 4510) {
                      __int16 v59 = 12685;
                    }
                    else {
                      __int16 v59 = v172;
                    }
                  }
                  else
                  {
                    __int16 v59 = word_19E575BAA[v58 - 4449];
                  }
                }
              }
              if (CharacterAtIndex != 12685 && !v59) {
                goto LABEL_479;
              }
              if (CharacterAtIndex == 12685) {
                int v173 = 6;
              }
              else {
                int v173 = 3;
              }
              *(_DWORD *)(v3 + 8) = v173;
              if (v58 - 12593 <= 0x5D) {
                LOWORD(v58) = word_19E575AC8[v58 - 12593];
              }
              int v27 = 0;
              *(_WORD *)(v3 + 26) = v58;
              *(_WORD *)(v3 + 28) = 0;
              *(_WORD *)(v3 + 4) = CharacterAtIndex != 12685;
              *(_WORD *)(v3 + 2) = 1;
              goto LABEL_472;
            case 3:
            case 6:
              if (v15 != 1)
              {
                uint64_t v73 = *(unsigned __int16 *)(v3 + 24);
                if ((unsigned __int16)(v73 - 12593) <= 0x5Du) {
                  LODWORD(v73) = word_19E575DEC[v73 - 12593];
                }
                uint64_t v74 = *(unsigned __int16 *)(v3 + 26);
                if ((v74 - 12593) <= 0x5D) {
                  LODWORD(v74) = word_19E575AC8[v74 - 12593];
                }
                unsigned int v75 = CharacterAtIndex;
                if (CharacterAtIndex - 12593 <= 0x5D)
                {
                  uint64_t v76 = CharacterAtIndex - 12593;
                  unsigned int v75 = word_19E575EA8[v76];
                  if (!word_19E575EA8[v76]) {
                    goto LABEL_147;
                  }
                }
                if (!v73 || !v74 || v74 == 4510 || v74 == 4514) {
                  goto LABEL_145;
                }
                BOOL v14 = v75 >= 0x11A7;
                __int16 v77 = v75 - 4519;
                if (!v14) {
                  __int16 v77 = 0;
                }
                if ((unsigned __int16)(28 * v74 + 588 * v73 + v77) == 18076)
                {
LABEL_145:
                  if ((unsigned __int16)(CharacterAtIndex - 12593) > 0x5Du) {
                    goto LABEL_148;
                  }
                  uint64_t v76 = CharacterAtIndex - 12593;
LABEL_147:
                  LOWORD(CharacterAtIndex) = word_19E575DEC[v76];
                  goto LABEL_148;
                }
                if ((unsigned __int16)(CharacterAtIndex - 12593) <= 0x5Du) {
                  LOWORD(CharacterAtIndex) = word_19E575EA8[CharacterAtIndex - 12593];
                }
                int v27 = 0;
                *(_WORD *)(v3 + 28) = CharacterAtIndex;
                uint64_t v179 = 0;
                __int16 v78 = 1;
                int v79 = 4;
LABEL_150:
                *(_DWORD *)(v3 + 8) = v79;
LABEL_151:
                *(_WORD *)(v3 + 4) = v78;
                *(_WORD *)(v3 + 2) = 1;
                CFStringRef v29 = *(const __CFString **)(v3 + 16);
                if (!v29) {
                  goto LABEL_41;
                }
LABEL_39:
                v30.length = CFStringGetLength(v29);
                if (v30.length >= 1)
                {
                  v30.location = 0;
                  CFStringDelete(*(CFMutableStringRef *)(v3 + 16), v30);
                }
                goto LABEL_41;
              }
              uint64_t v17 = *(unsigned __int16 *)(v3 + 26);
              if ((v17 - 12593) <= 0x5D) {
                LODWORD(v17) = word_19E575AC8[v17 - 12593];
              }
              unsigned __int16 v18 = CharacterAtIndex - 12593;
              unsigned int v19 = CharacterAtIndex;
              if (CharacterAtIndex - 12593 <= 0x5D) {
                unsigned int v19 = word_19E575AC8[CharacterAtIndex - 12593];
              }
              int v20 = 0;
              unsigned int v21 = v19 | (v17 << 16);
              int v22 = 25;
              while (1)
              {
                int v23 = v20 + v22;
                if (v20 + v22 < 0 != __OFADD__(v20, v22)) {
                  ++v23;
                }
                int v24 = v23 >> 1;
                uint64_t v25 = (uint64_t)v23 >> 1;
                unsigned int v26 = word_19E575D0E[3 * v24 + 1] | (word_19E575D0E[3 * v24] << 16);
                if (v21 == v26) {
                  break;
                }
                if (v21 <= v26) {
                  int v22 = v25 - 1;
                }
                else {
                  int v20 = v25 + 1;
                }
                if (v20 > v22) {
                  goto LABEL_479;
                }
              }
              uint64_t v86 = word_19E575D0E[3 * (int)v25 + 2];
              if (!word_19E575D0E[3 * (int)v25 + 2])
              {
LABEL_479:
                if (v18 <= 0x5Du) {
LABEL_480:
                }
                  LOWORD(CharacterAtIndex) = word_19E575AC8[CharacterAtIndex - 12593];
                goto LABEL_481;
              }
              uint64_t v87 = (unsigned __int16)*v8;
              if ((unsigned __int16)(v87 - 12593) <= 0x5Du) {
                LODWORD(v87) = word_19E575DEC[v87 - 12593];
              }
              *BOOL v178 = v87;
              if ((v86 - 12593) <= 0x5D) {
                LODWORD(v86) = word_19E575AC8[v86 - 12593];
              }
              *(_WORD *)(v3 + 32) = v86;
              *(_WORD *)(v3 + 34) = 0;
              if (v87)
              {
                if (v86)
                {
                  if (v86 == 4510 || v86 == 4514) {
                    goto LABEL_474;
                  }
                  __int16 v89 = 28 * v86 + 588 * v87 - 18076;
                }
                else
                {
                  unint64_t v170 = v87 - 4352;
                  if (v170 > 0x12) {
                    goto LABEL_474;
                  }
                  __int16 v89 = word_19E575B84[v170];
                }
              }
              else
              {
                if (!v86) {
                  goto LABEL_474;
                }
                if ((v86 - 4449) > 0x14)
                {
                  if (v86 == 4514) {
                    __int16 v89 = 4514;
                  }
                  else {
                    __int16 v89 = 0;
                  }
                  if (v86 == 4510)
                  {
LABEL_468:
                    int v27 = 0;
                    if (v16 == 6) {
                      __int16 v174 = 2;
                    }
                    else {
                      __int16 v174 = 1;
                    }
                    *(_WORD *)(v3 + 4) = v174;
                    *(_WORD *)(v3 + 2) = 1;
                    *(_DWORD *)(v3 + 8) = 3;
                    *(_DWORD *)CFStringRef v8 = *(_DWORD *)v178;
                    *(_WORD *)(v3 + 28) = *(_WORD *)(v3 + 34);
LABEL_472:
                    uint64_t v179 = 0;
                    CFStringRef v29 = *(const __CFString **)(v3 + 16);
                    if (v29) {
                      goto LABEL_39;
                    }
                    goto LABEL_41;
                  }
                }
                else
                {
                  __int16 v89 = word_19E575BAA[(v86 - 4449)];
                }
              }
              if (v89) {
                goto LABEL_468;
              }
LABEL_474:
              if (CharacterAtIndex != 12685) {
                goto LABEL_479;
              }
              *(_DWORD *)(v3 + 2) = 65537;
              if ((v86 - 12593) <= 0x5D) {
                LOWORD(v86) = word_19E575AC8[v86 - 12593];
              }
              int v27 = 0;
              *(_WORD *)(v3 + 26) = v86;
              *(_WORD *)(v3 + 28) = 0;
              uint64_t v179 = 0;
              *(_DWORD *)(v3 + 8) = 6;
              CFStringRef v29 = *(const __CFString **)(v3 + 16);
              if (v29) {
                goto LABEL_39;
              }
LABEL_41:
              if (v27)
              {
                if ((_WORD)v179)
                {
                  if (WORD1(v179))
                  {
                    if (WORD1(v179) != 4510 && WORD1(v179) != 4514)
                    {
                      __int16 v32 = WORD2(v179) - 4519;
                      if (WORD2(v179) < 0x11A7u) {
                        __int16 v32 = 0;
                      }
                      UniChar v33 = 28 * WORD1(v179) + 588 * v179 + v32 - 18076;
                      goto LABEL_157;
                    }
LABEL_156:
                    UniChar v33 = 0;
                  }
                  else
                  {
                    if (WORD2(v179)) {
                      goto LABEL_156;
                    }
                    unint64_t v80 = (unsigned __int16)v179 - 4352;
                    if (v80 > 0x12) {
                      goto LABEL_156;
                    }
                    UniChar v33 = word_19E575B84[v80];
                  }
                }
                else
                {
                  if (WORD1(v179)) {
                    BOOL v35 = WORD2(v179) == 0;
                  }
                  else {
                    BOOL v35 = 0;
                  }
                  if (!v35) {
                    goto LABEL_156;
                  }
                  unsigned int v36 = WORD1(v179) - 4449;
                  if (v36 > 0x14)
                  {
                    if (WORD1(v179) == 4514) {
                      __int16 v114 = 4514;
                    }
                    else {
                      __int16 v114 = 0;
                    }
                    if (WORD1(v179) == 4510) {
                      UniChar v33 = 12685;
                    }
                    else {
                      UniChar v33 = v114;
                    }
                  }
                  else
                  {
                    UniChar v33 = word_19E575BAA[v36];
                  }
                }
LABEL_157:
                UniChar chars = v33;
                uint64_t v81 = *(__CFString **)(v3 + 16);
                if (v81) {
LABEL_158:
                }
                  CFStringAppendCharacters(v81, &chars, 1);
LABEL_159:
                *(_WORD *)(v3 + 28) = WORD2(v179);
                *(_DWORD *)CFStringRef v8 = v179;
                goto LABEL_160;
              }
              if (*(_DWORD *)(v3 + 8) != 6)
              {
                uint64_t v37 = *(unsigned __int16 *)(v3 + 24);
                int v38 = *(unsigned __int16 *)(v3 + 26);
                if (*(_WORD *)(v3 + 24))
                {
                  if (*(_WORD *)(v3 + 26))
                  {
                    UniChar v39 = 0;
                    if (v38 != 4510 && v38 != 4514)
                    {
                      unsigned int v40 = *(unsigned __int16 *)(v3 + 28);
                      BOOL v14 = v40 >= 0x11A7;
                      __int16 v41 = v40 - 4519;
                      if (!v14) {
                        __int16 v41 = 0;
                      }
                      UniChar v39 = 28 * v38 + 588 * v37 + v41 - 18076;
                    }
                    goto LABEL_289;
                  }
                  if (!*(_WORD *)(v3 + 28) && (unint64_t)(v37 - 4352) <= 0x12)
                  {
                    UniChar v39 = word_19E575B84[v37 - 4352];
                    goto LABEL_289;
                  }
                }
                else if (*(_WORD *)(v3 + 26) && !*(_WORD *)(v3 + 28))
                {
                  if ((v38 - 4449) > 0x14)
                  {
                    if (v38 == 4514) {
                      UniChar v39 = 4514;
                    }
                    else {
                      UniChar v39 = 0;
                    }
                    if (v38 == 4510) {
                      UniChar v39 = 12685;
                    }
                  }
                  else
                  {
                    UniChar v39 = word_19E575BAA[v38 - 4449];
                  }
LABEL_289:
                  UniChar chars = v39;
                  uint64_t v34 = *(__CFString **)(v3 + 16);
                  if (!v34) {
                    goto LABEL_160;
                  }
LABEL_53:
                  CFStringAppendCharacters(v34, &chars, 1);
                  goto LABEL_160;
                }
                UniChar v39 = 0;
                goto LABEL_289;
              }
              UniChar chars = *(_WORD *)(v3 + 26);
              uint64_t v34 = *(__CFString **)(v3 + 16);
              if (v34) {
                goto LABEL_53;
              }
LABEL_160:
              unsigned __int16 v82 = CFStringGetLength(Mutable);
              if (v82)
              {
                v83.length = *(unsigned __int16 *)(v3 + 4);
                if (v82 >= LODWORD(v83.length))
                {
                  v83.location = v82 - v83.length;
                  CFStringDelete(Mutable, v83);
                }
              }
              CFStringAppend(Mutable, *(CFStringRef *)(v3 + 16));
LABEL_164:
              if (++v11 == Length) {
                break;
              }
              continue;
            case 4:
              long long v61 = (char *)*(unsigned __int16 *)(v3 + 28);
              if (v15 == 1)
              {
                if ((v61 - 12592) >= 0x5F)
                {
                  if ((v61 - 4352) >= 0x5A)
                  {
                    if ((v61 - 4520) < 0x52)
                    {
                      uint64_t v62 = v61 - 4520;
                      if ((unint64_t)(v61 - 4520) <= 0x1A)
                      {
                        long long v61 = (char *)&unk_19E575C30;
LABEL_305:
                        LODWORD(v61) = *(unsigned __int16 *)&v61[2 * (void)v62];
                      }
                    }
                  }
                  else
                  {
                    uint64_t v62 = v61 - 4352;
                    if ((unint64_t)(v61 - 4352) <= 0x12)
                    {
                      long long v61 = (char *)&unk_19E575C0A;
                      goto LABEL_305;
                    }
                  }
                }
                if ((v61 - 12593) <= 0x5D) {
                  LODWORD(v61) = word_19E575DEC[v61 - 12593];
                }
                unsigned int v132 = CharacterAtIndex;
                if (CharacterAtIndex - 12593 <= 0x5D) {
                  unsigned int v132 = word_19E575AC8[CharacterAtIndex - 12593];
                }
                if (v61)
                {
                  if (v132)
                  {
                    if (v132 != 4510 && v132 != 4514)
                    {
                      __int16 v133 = 28 * v132 + 588 * (_WORD)v61 - 18076;
                      goto LABEL_415;
                    }
LABEL_417:
                    if (CharacterAtIndex == 12685)
                    {
                      *(_WORD *)(v3 + 28) = 0;
                      if ((v61 - 12593) <= 0x5D) {
                        LOWORD(v61) = word_19E575DEC[v61 - 12593];
                      }
                      int v27 = 0;
                      LOWORD(v13) = (_WORD)v61;
                      WORD1(v13) = 4510;
                      WORD2(v13) = 0;
                      uint64_t v179 = v13;
                      int v28 = 2;
                      __int16 v167 = 1;
                      int v166 = 6;
                    }
                    else
                    {
                      if ((unsigned __int16)(CharacterAtIndex - 12593) <= 0x5Du) {
                        LOWORD(CharacterAtIndex) = word_19E575AC8[CharacterAtIndex - 12593];
                      }
                      __int16 v167 = 0;
                      LOWORD(v168) = 0;
                      HIWORD(v168) = CharacterAtIndex;
                      uint64_t v179 = v168;
                      int v166 = 1;
                      int v27 = 1;
                      int v28 = 1;
                    }
LABEL_424:
                    *(_DWORD *)(v3 + 8) = v166;
                    *(_WORD *)(v3 + 4) = v167;
                    *(_WORD *)(v3 + 2) = v28;
                    if (v28 != 2) {
                      goto LABEL_37;
                    }
                    goto LABEL_374;
                  }
                  unint64_t v136 = v61 - 4352;
                  if (v136 > 0x12) {
                    goto LABEL_417;
                  }
                  __int16 v133 = word_19E575B84[v136];
LABEL_415:
                  if (!v133) {
                    goto LABEL_417;
                  }
                }
                else
                {
                  if (!v132) {
                    goto LABEL_417;
                  }
                  if (v132 - 4449 <= 0x14)
                  {
                    __int16 v133 = word_19E575BAA[v132 - 4449];
                    goto LABEL_415;
                  }
                  if (v132 == 4514) {
                    __int16 v133 = 4514;
                  }
                  else {
                    __int16 v133 = 0;
                  }
                  if (v132 != 4510) {
                    goto LABEL_415;
                  }
                }
                LOWORD(v165) = (_WORD)v61;
                HIWORD(v165) = v132;
                uint64_t v179 = v165;
                *(_WORD *)(v3 + 28) = 0;
                int v28 = 2;
                int v27 = 1;
                int v166 = 3;
                __int16 v167 = 1;
                goto LABEL_424;
              }
              if ((v61 - 12593) <= 0x5D) {
                LODWORD(v61) = word_19E575EA8[(void)v61 - 12593];
              }
              unsigned __int16 v97 = CharacterAtIndex - 12593;
              unsigned int v98 = CharacterAtIndex;
              if (CharacterAtIndex - 12593 <= 0x5D) {
                unsigned int v98 = word_19E575EA8[CharacterAtIndex - 12593];
              }
              int v99 = 0;
              unsigned int v100 = v98 | (v61 << 16);
              int v101 = 10;
              while (1)
              {
                int v102 = v99 + v101;
                if (v99 + v101 < 0 != __OFADD__(v99, v101)) {
                  ++v102;
                }
                int v103 = v102 >> 1;
                uint64_t v104 = (uint64_t)v102 >> 1;
                unsigned int v105 = word_19E575DAA[3 * v103 + 1] | (word_19E575DAA[3 * v103] << 16);
                if (v100 == v105) {
                  break;
                }
                if (v100 <= v105) {
                  int v101 = v104 - 1;
                }
                else {
                  int v99 = v104 + 1;
                }
                if (v99 > v101) {
                  goto LABEL_280;
                }
              }
              uint64_t v122 = word_19E575DAA[3 * (int)v104 + 2];
              if (!word_19E575DAA[3 * (int)v104 + 2]) {
                goto LABEL_280;
              }
              uint64_t v123 = *(unsigned __int16 *)(v3 + 24);
              if ((unsigned __int16)(v123 - 12593) <= 0x5Du) {
                LODWORD(v123) = word_19E575DEC[v123 - 12593];
              }
              uint64_t v124 = *(unsigned __int16 *)(v3 + 26);
              if ((v124 - 12593) <= 0x5D) {
                LODWORD(v1++*(_DWORD *)(result + 24) = word_19E575AC8[v124 - 12593];
              }
              unsigned __int16 v125 = v122 - 12593;
              unsigned int v126 = v122;
              if ((v122 - 12593) <= 0x5D) {
                unsigned int v126 = word_19E575EA8[v122 - 12593];
              }
              if (v123)
              {
                if (v124) {
                  goto LABEL_275;
                }
                goto LABEL_261;
              }
LABEL_321:
              if (!v124 || v126) {
                goto LABEL_507;
              }
              if ((v124 - 4449) > 0x14)
              {
                if (v124 == 4514) {
                  __int16 v129 = 4514;
                }
                else {
                  __int16 v129 = 0;
                }
                if (v124 == 4510) {
                  goto LABEL_504;
                }
              }
              else
              {
                __int16 v129 = word_19E575BAA[(v124 - 4449)];
              }
              goto LABEL_503;
            case 5:
              uint64_t v63 = *(unsigned __int16 *)(v3 + 28);
              unsigned int v64 = v63 - 12593;
              if (v15 != 1)
              {
                if (v64 <= 0x5D) {
                  LODWORD(v63) = word_19E575EA8[v63 - 12593];
                }
                unsigned __int16 v97 = CharacterAtIndex - 12593;
                unsigned int v106 = CharacterAtIndex;
                if (CharacterAtIndex - 12593 <= 0x5D) {
                  unsigned int v106 = word_19E575EA8[CharacterAtIndex - 12593];
                }
                int v107 = 0;
                unsigned int v108 = v106 | (v63 << 16);
                int v109 = 10;
                while (1)
                {
                  int v110 = v107 + v109;
                  if (v107 + v109 < 0 != __OFADD__(v107, v109)) {
                    ++v110;
                  }
                  int v111 = v110 >> 1;
                  uint64_t v112 = (uint64_t)v110 >> 1;
                  unsigned int v113 = word_19E575DAA[3 * v111 + 1] | (word_19E575DAA[3 * v111] << 16);
                  if (v108 == v113) {
                    break;
                  }
                  if (v108 <= v113) {
                    int v109 = v112 - 1;
                  }
                  else {
                    int v107 = v112 + 1;
                  }
                  if (v107 > v109) {
                    goto LABEL_280;
                  }
                }
                uint64_t v122 = word_19E575DAA[3 * (int)v112 + 2];
                if (!word_19E575DAA[3 * (int)v112 + 2])
                {
LABEL_280:
                  unsigned int v90 = v97;
LABEL_281:
                  if (v90 <= 0x5D) {
                    LOWORD(CharacterAtIndex) = word_19E575DEC[CharacterAtIndex - 12593];
                  }
                  uint64_t v179 = (unsigned __int16)CharacterAtIndex;
                  *(_DWORD *)(v3 + 8) = 2;
                  int v27 = 1;
                  *(_DWORD *)(v3 + 2) = 1;
                  CFStringRef v29 = *(const __CFString **)(v3 + 16);
                  if (v29) {
                    goto LABEL_39;
                  }
                  goto LABEL_41;
                }
                uint64_t v123 = *(unsigned __int16 *)(v3 + 24);
                if ((unsigned __int16)(v123 - 12593) <= 0x5Du) {
                  LODWORD(v123) = word_19E575DEC[v123 - 12593];
                }
                uint64_t v124 = *(unsigned __int16 *)(v3 + 26);
                if ((v124 - 12593) <= 0x5D) {
                  LODWORD(v1++*(_DWORD *)(result + 24) = word_19E575AC8[v124 - 12593];
                }
                unsigned __int16 v125 = v122 - 12593;
                unsigned int v126 = v122;
                if ((v122 - 12593) <= 0x5D) {
                  unsigned int v126 = word_19E575EA8[v122 - 12593];
                }
                if (!v123) {
                  goto LABEL_321;
                }
                if (!v124)
                {
LABEL_261:
                  unint64_t v127 = v123 - 4352;
                  if (v126) {
                    BOOL v128 = 1;
                  }
                  else {
                    BOOL v128 = v127 > 0x12;
                  }
                  if (!v128)
                  {
                    __int16 v129 = word_19E575B84[v127];
                    goto LABEL_503;
                  }
                  goto LABEL_507;
                }
LABEL_275:
                if (v124 == 4510 || v124 == 4514) {
                  goto LABEL_507;
                }
                BOOL v14 = v126 >= 0x11A7;
                __int16 v130 = v126 - 4519;
                if (!v14) {
                  __int16 v130 = 0;
                }
                __int16 v129 = 28 * v124 + 588 * v123 - 18076 + v130;
LABEL_503:
                if (!v129)
                {
LABEL_507:
                  if (v97 <= 0x5Du) {
                    LOWORD(CharacterAtIndex) = word_19E575DEC[CharacterAtIndex - 12593];
                  }
                  __int16 v78 = 0;
                  uint64_t v179 = (unsigned __int16)CharacterAtIndex;
                  int v79 = 2;
                  int v27 = 1;
                  goto LABEL_150;
                }
LABEL_504:
                if (v125 <= 0x5Du) {
                  LOWORD(v122) = word_19E575EA8[v122 - 12593];
                }
                int v27 = 0;
                *(_WORD *)(v3 + 28) = v122;
                uint64_t v179 = 0;
                __int16 v78 = 1;
                int v79 = 5;
                goto LABEL_150;
              }
              unsigned int v65 = *(unsigned __int16 *)(v3 + 28);
              if (v64 <= 0x5D) {
                unsigned int v65 = word_19E575EA8[v63 - 12593];
              }
              int v66 = 0;
              int v67 = 10;
              while (1)
              {
                int v68 = v66 + v67;
                int v69 = v66 + v67 < 0 != __OFADD__(v66, v67) ? v68 + 1 : v66 + v67;
                int v70 = v69 >> 1;
                uint64_t v71 = (uint64_t)v69 >> 1;
                unsigned int v72 = word_19E575DAA[3 * v70 + 2];
                if (v72 == v65) {
                  break;
                }
                if (v72 >= v65) {
                  int v67 = v71 - 1;
                }
                else {
                  int v66 = v71 + 1;
                }
                if (v66 > v67) {
                  goto LABEL_239;
                }
              }
              if ((v68 + 3) < 2)
              {
LABEL_239:
                LODWORD(v118) = 0;
                goto LABEL_240;
              }
              float v118 = (char *)word_19E575DAA[3 * (int)v71 + 1];
              if ((unsigned __int16)((_WORD)v118 - 12592) < 0x5Fu) {
                goto LABEL_489;
              }
              if ((v118 - 4352) >= 0x5A)
              {
                unint64_t v131 = (unint64_t)(v118 - 4520);
                if ((v118 - 4520) >= 0x52 || v131 > 0x1A)
                {
LABEL_489:
                  if ((v118 - 12593) <= 0x5D) {
                    LODWORD(v118) = word_19E575DEC[v118 - 12593];
                  }
LABEL_240:
                  unsigned int v119 = CharacterAtIndex;
                  if (CharacterAtIndex - 12593 <= 0x5D) {
                    unsigned int v119 = word_19E575AC8[CharacterAtIndex - 12593];
                  }
                  if (v118)
                  {
                    if (v119)
                    {
                      if (v119 == 4510 || v119 == 4514) {
                        goto LABEL_354;
                      }
                      __int16 v120 = 28 * v119 + 588 * (_WORD)v118 - 18076;
                    }
                    else
                    {
                      unint64_t v135 = v118 - 4352;
                      if (v135 > 0x12) {
                        goto LABEL_354;
                      }
                      __int16 v120 = word_19E575B84[v135];
                    }
                  }
                  else
                  {
                    if (!v119) {
                      goto LABEL_354;
                    }
                    if (v119 - 4449 > 0x14)
                    {
                      if (v119 == 4514) {
                        __int16 v120 = 4514;
                      }
                      else {
                        __int16 v120 = 0;
                      }
                      if (v119 == 4510)
                      {
LABEL_342:
                        *(_DWORD *)(v3 + 8) = 3;
                        if (v64 <= 0x5D) {
                          LODWORD(v63) = word_19E575EA8[v63 - 12593];
                        }
                        int v137 = 0;
                        int v138 = 10;
                        while (1)
                        {
                          int v139 = v137 + v138;
                          int v140 = v137 + v138 < 0 != __OFADD__(v137, v138) ? v139 + 1 : v137 + v138;
                          int v141 = v140 >> 1;
                          uint64_t v142 = (uint64_t)v140 >> 1;
                          unsigned int v143 = word_19E575DAA[3 * v141 + 2];
                          if (v143 == v63) {
                            goto LABEL_370;
                          }
                          if (v143 >= v63) {
                            int v138 = v142 - 1;
                          }
                          else {
                            int v137 = v142 + 1;
                          }
                          if (v137 > v138) {
                            goto LABEL_371;
                          }
                        }
                      }
                    }
                    else
                    {
                      __int16 v120 = word_19E575BAA[v119 - 4449];
                    }
                  }
                  if (v120) {
                    goto LABEL_342;
                  }
LABEL_354:
                  if (CharacterAtIndex != 12685)
                  {
                    if ((unsigned __int16)(CharacterAtIndex - 12593) <= 0x5Du) {
                      LOWORD(CharacterAtIndex) = word_19E575AC8[CharacterAtIndex - 12593];
                    }
                    __int16 v149 = 0;
                    LOWORD(v150) = 0;
                    HIWORD(v150) = CharacterAtIndex;
                    uint64_t v179 = v150;
                    int v28 = 1;
                    *(_DWORD *)(v3 + 8) = 1;
LABEL_373:
                    *(_WORD *)(v3 + 4) = v149;
                    *(_WORD *)(v3 + 2) = v28;
                    int v27 = 1;
                    if (v28 == 2)
                    {
LABEL_374:
                      CFStringRef v153 = *(const __CFString **)(v3 + 16);
                      if (v153)
                      {
                        v154.length = CFStringGetLength(v153);
                        if (v154.length >= 1)
                        {
                          v154.location = 0;
                          CFStringDelete(*(CFMutableStringRef *)(v3 + 16), v154);
                        }
                      }
                      uint64_t v155 = *(unsigned __int16 *)(v3 + 24);
                      int v156 = *(unsigned __int16 *)(v3 + 26);
                      if (*(_WORD *)(v3 + 24))
                      {
                        if (*(_WORD *)(v3 + 26))
                        {
                          UniChar v157 = 0;
                          if (v156 != 4510 && v156 != 4514)
                          {
                            unsigned int v158 = *(unsigned __int16 *)(v3 + 28);
                            BOOL v14 = v158 >= 0x11A7;
                            __int16 v159 = v158 - 4519;
                            if (!v14) {
                              __int16 v159 = 0;
                            }
                            UniChar v157 = 28 * v156 + 588 * v155 + v159 - 18076;
                          }
                          goto LABEL_392;
                        }
                        if (!*(_WORD *)(v3 + 28) && (unint64_t)(v155 - 4352) <= 0x12)
                        {
                          UniChar v157 = word_19E575B84[v155 - 4352];
                          goto LABEL_392;
                        }
                      }
                      else if (*(_WORD *)(v3 + 26) && !*(_WORD *)(v3 + 28))
                      {
                        if ((v156 - 4449) > 0x14)
                        {
                          if (v156 == 4514) {
                            UniChar v157 = 4514;
                          }
                          else {
                            UniChar v157 = 0;
                          }
                          if (v156 == 4510) {
                            UniChar v157 = 12685;
                          }
                        }
                        else
                        {
                          UniChar v157 = word_19E575BAA[v156 - 4449];
                        }
LABEL_392:
                        UniChar chars = v157;
                        float v160 = *(__CFString **)(v3 + 16);
                        if (v160) {
                          CFStringAppendCharacters(v160, &chars, 1);
                        }
                        if (*(_DWORD *)(v3 + 8) == 6)
                        {
                          UniChar chars = v179;
                          uint64_t v161 = *(__CFString **)(v3 + 16);
                          if (!v161) {
                            goto LABEL_159;
                          }
                          CFStringAppendCharacters(v161, &chars, 1);
                          uint64_t v81 = *(__CFString **)(v3 + 16);
                          UniChar chars = WORD1(v179);
                          if (!v81) {
                            goto LABEL_159;
                          }
                        }
                        else
                        {
                          if ((_WORD)v179)
                          {
                            if (WORD1(v179))
                            {
                              UniChar v162 = 0;
                              if (WORD1(v179) != 4510 && WORD1(v179) != 4514)
                              {
                                __int16 v163 = WORD2(v179) - 4519;
                                if (WORD2(v179) < 0x11A7u) {
                                  __int16 v163 = 0;
                                }
                                UniChar v162 = 28 * WORD1(v179) + 588 * v179 + v163 - 18076;
                              }
                            }
                            else if (WORD2(v179) || (unint64_t v169 = (unsigned __int16)v179 - 4352, v169 > 0x12))
                            {
                              UniChar v162 = 0;
                            }
                            else
                            {
                              UniChar v162 = word_19E575B84[v169];
                            }
                          }
                          else
                          {
                            UniChar v162 = 0;
                            if (WORD1(v179) && !WORD2(v179))
                            {
                              unsigned int v164 = WORD1(v179) - 4449;
                              if (v164 > 0x14)
                              {
                                if (WORD1(v179) == 4514) {
                                  __int16 v177 = 4514;
                                }
                                else {
                                  __int16 v177 = 0;
                                }
                                if (WORD1(v179) == 4510) {
                                  UniChar v162 = 12685;
                                }
                                else {
                                  UniChar v162 = v177;
                                }
                              }
                              else
                              {
                                UniChar v162 = word_19E575BAA[v164];
                              }
                            }
                          }
                          UniChar chars = v162;
                          uint64_t v81 = *(__CFString **)(v3 + 16);
                          if (!v81) {
                            goto LABEL_159;
                          }
                        }
                        goto LABEL_158;
                      }
                      UniChar v157 = 0;
                      goto LABEL_392;
                    }
LABEL_37:
                    if (v28 != 1) {
                      goto LABEL_160;
                    }
                    CFStringRef v29 = *(const __CFString **)(v3 + 16);
                    if (!v29) {
                      goto LABEL_41;
                    }
                    goto LABEL_39;
                  }
                  *(_DWORD *)(v3 + 8) = 6;
                  if (v64 <= 0x5D) {
                    LODWORD(v63) = word_19E575EA8[v63 - 12593];
                  }
                  int v144 = 0;
                  int v145 = 10;
                  while (1)
                  {
                    int v139 = v144 + v145;
                    int v146 = v144 + v145 < 0 != __OFADD__(v144, v145) ? v139 + 1 : v144 + v145;
                    int v147 = v146 >> 1;
                    uint64_t v142 = (uint64_t)v146 >> 1;
                    unsigned int v148 = word_19E575DAA[3 * v147 + 2];
                    if (v148 == v63) {
                      break;
                    }
                    if (v148 >= v63) {
                      int v145 = v142 - 1;
                    }
                    else {
                      int v144 = v142 + 1;
                    }
                    if (v144 > v145) {
                      goto LABEL_371;
                    }
                  }
LABEL_370:
                  if ((v139 + 3) >= 2)
                  {
                    uint64_t v151 = word_19E575DAA[3 * (int)v142];
                    if ((v151 - 12593) <= 0x5D) {
                      LOWORD(v151) = word_19E575EA8[v151 - 12593];
                    }
                  }
                  else
                  {
LABEL_371:
                    LOWORD(v151) = 0;
                  }
                  *(_WORD *)(v3 + 28) = v151;
                  LOWORD(v152) = (_WORD)v118;
                  HIWORD(v152) = v119;
                  uint64_t v179 = v152;
                  int v28 = 2;
                  __int16 v149 = 1;
                  goto LABEL_373;
                }
                float v118 = (char *)&unk_19E575C30;
              }
              else
              {
                unint64_t v131 = (unint64_t)(v118 - 4352);
                if ((unint64_t)(v118 - 4352) > 0x12) {
                  goto LABEL_489;
                }
                float v118 = (char *)&unk_19E575C0A;
              }
              LODWORD(v118) = *(unsigned __int16 *)&v118[2 * v131];
              goto LABEL_489;
            default:
              int v27 = 0;
              uint64_t v179 = 0;
              int v28 = *(unsigned __int16 *)(v3 + 2);
              if (v28 != 2) {
                goto LABEL_37;
              }
              goto LABEL_374;
          }
          break;
        }
      }
      *a3 = Mutable;
    }
  }
}

void sub_19E4E81FC(_Unwind_Exception *a1)
{
  void *v1 = 0;
  _Unwind_Resume(a1);
}

void sub_19E4E822C(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void sub_19E4E82A8(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t sub_19E4E8324(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1EF0BD7C8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *sub_19E4E835C(uint64_t a1)
{
  CFStringRef result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *CFStringRef result = &unk_1EF0BD7C8;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_19E4E83B8(void *a1)
{
  *a1 = &unk_1EF0BD7C8;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1 && !atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x19F3BDCF0);
}

void *sub_19E4E8460(void *a1)
{
  *a1 = &unk_1EF0BD7C8;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void sub_19E4E84EC(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 40);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 40) = 0;
  }
}

void sub_19E4E8520(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0BE760;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19F3BDCF0);
}

void sub_19E4E8574(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0BE760;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t sub_19E4E8594(uint64_t a1, CFDictionaryRef theDict)
{
  *(_OWORD *)(a1 + 48) = 0u;
  uint64_t v3 = a1 + 48;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  if (theDict)
  {
    CFTypeRef v5 = (void **)(a1 + 24);
    CFStringRef v6 = (void **)(a1 + 72);
    CFStringRef Value = (const __CFString *)CFDictionaryGetValue(theDict, (const void *)kLMRecordGivenNameKey);
    CFStringRef v8 = Value;
    if (Value)
    {
      CFTypeID v9 = CFGetTypeID(Value);
      if (v9 == CFStringGetTypeID())
      {
        sub_19E37774C(v8, &v20);
        if (*(char *)(a1 + 23) < 0) {
          operator delete(*(void **)a1);
        }
        *(_OWORD *)a1 = v20;
        *(void *)(a1 + 16) = v21;
      }
    }
    CFStringRef v10 = (const __CFString *)CFDictionaryGetValue(theDict, (const void *)kLMRecordFamilyNameKey);
    CFStringRef v11 = v10;
    if (v10)
    {
      CFTypeID v12 = CFGetTypeID(v10);
      if (v12 == CFStringGetTypeID())
      {
        sub_19E37774C(v11, &v20);
        if (*(char *)(a1 + 71) < 0) {
          operator delete(*(void **)v3);
        }
        *(_OWORD *)uint64_t v3 = v20;
        *(void *)(v3 + 16) = v21;
      }
    }
    CFStringRef v13 = (const __CFString *)CFDictionaryGetValue(theDict, (const void *)kLMRecordNicknameKey);
    CFStringRef v14 = v13;
    if (v13)
    {
      CFTypeID v15 = CFGetTypeID(v13);
      if (v15 == CFStringGetTypeID())
      {
        sub_19E37774C(v14, &v20);
        if (*(char *)(a1 + 95) < 0) {
          operator delete(*v6);
        }
        *(_OWORD *)CFStringRef v6 = v20;
        *(void *)(a1 + 88) = v21;
      }
    }
    CFStringRef v16 = (const __CFString *)CFDictionaryGetValue(theDict, (const void *)kLMRecordHashKey);
    CFStringRef v17 = v16;
    if (v16)
    {
      CFTypeID v18 = CFGetTypeID(v16);
      if (v18 == CFStringGetTypeID())
      {
        sub_19E37774C(v17, &v20);
        if (*(char *)(a1 + 47) < 0) {
          operator delete(*v5);
        }
        *(_OWORD *)CFTypeRef v5 = v20;
        *(void *)(a1 + 40) = v21;
      }
    }
  }
  return a1;
}

void sub_19E4E8770(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 95) < 0)
  {
    operator delete(*v4);
    if ((*(char *)(v1 + 71) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v1 + 47) & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((*(char *)(v1 + 71) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v3);
  if ((*(char *)(v1 + 47) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v1 + 23) & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  operator delete(*v2);
  if ((*(char *)(v1 + 23) & 0x80000000) == 0) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_9:
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E4E87DC(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (v6 - *a2) >> 2;
  if (v6 == *a2)
  {
    uint64_t v8 = v6;
  }
  else
  {
    do
    {
      if ((*(uint64_t (**)(void, void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), *a2, v7))break; {
      --v7;
      }
    }
    while (v7);
    uint64_t v6 = *a2;
    uint64_t v8 = a2[1];
  }
  if (v7 == (v8 - v6) >> 2)
  {
    (*(void (**)(void))(**(void **)(a1 + 8) + 64))(*(void *)(a1 + 8));
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(void *)a1 + 136))(a1, a2, v7, a3);
    if (!result) {
      return result;
    }
  }
  unint64_t v10 = (uint64_t)(a2[1] - *a2) >> 2;
  CFStringRef v11 = *(void **)(a1 + 104);
  unint64_t v12 = (uint64_t)(*(void *)(a1 + 112) - (void)v11) >> 2;
  if (v12 >= v10) {
    unint64_t v12 = (uint64_t)(a2[1] - *a2) >> 2;
  }
  if (v12)
  {
    memmove(v11, (const void *)*a2, 4 * v12);
    unint64_t v10 = (uint64_t)(a2[1] - *a2) >> 2;
  }
  *(void *)(a1 + 176) = v10;
  return 1;
}

void *sub_19E4E8928(void *result, uint64_t a2)
{
  uint64_t v2 = result[9];
  if (v2)
  {
    uint64_t v4 = *(char **)(v2 + 80);
    uint64_t v3 = *(char **)(v2 + 88);
    if (v4 != v3)
    {
      while (*(void *)v4 != a2)
      {
        v4 += 8;
        if (v4 == v3)
        {
          uint64_t v4 = *(char **)(v2 + 88);
          break;
        }
      }
    }
    if (v4 != v3)
    {
      int64_t v5 = v3 - (v4 + 8);
      if (v3 != v4 + 8) {
        uint64_t result = memmove(v4, v4 + 8, v3 - (v4 + 8));
      }
      *(void *)(v2 + 88) = &v4[v5];
    }
  }
  return result;
}

void sub_19E4E89A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2)
  {
    uint64_t v4 = (char *)v2[10];
    int64_t v5 = (char *)v2[11];
    uint64_t v6 = v4;
    if (v4 != v5)
    {
      while (*(void *)v6 != a2)
      {
        v6 += 8;
        if (v6 == v5)
        {
          uint64_t v6 = (char *)v2[11];
          break;
        }
      }
    }
    if (v6 == v5)
    {
      unint64_t v7 = v2[12];
      if ((unint64_t)v5 >= v7)
      {
        int64_t v9 = v5 - v4;
        uint64_t v10 = (v5 - v4) >> 3;
        unint64_t v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 61) {
          sub_19E37C7C4();
        }
        uint64_t v12 = v7 - (void)v4;
        if (v12 >> 2 > v11) {
          unint64_t v11 = v12 >> 2;
        }
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v11;
        }
        if (v13)
        {
          if (v13 >> 61) {
            sub_19E37C2B8();
          }
          CFStringRef v14 = operator new(8 * v13);
        }
        else
        {
          CFStringRef v14 = 0;
        }
        CFTypeID v15 = &v14[8 * v10];
        CFStringRef v16 = &v14[8 * v13];
        *CFTypeID v15 = a2;
        uint64_t v8 = v15 + 1;
        if (v4 != v5)
        {
          if ((unint64_t)(v9 - 8) < 0x58) {
            goto LABEL_35;
          }
          if ((unint64_t)(v4 - v14) < 0x20) {
            goto LABEL_35;
          }
          unint64_t v17 = ((unint64_t)(v9 - 8) >> 3) + 1;
          CFTypeID v18 = &v14[8 * v10 - 16];
          unsigned int v19 = v5 - 16;
          uint64_t v20 = v17 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v21 = *(_OWORD *)v19;
            *(v18 - 1) = *((_OWORD *)v19 - 1);
            *CFTypeID v18 = v21;
            v18 -= 2;
            v19 -= 32;
            v20 -= 4;
          }
          while (v20);
          v15 -= v17 & 0x3FFFFFFFFFFFFFFCLL;
          v5 -= 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
          if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_35:
            do
            {
              uint64_t v22 = *((void *)v5 - 1);
              v5 -= 8;
              *--CFTypeID v15 = v22;
            }
            while (v5 != v4);
            uint64_t v4 = (char *)v2[10];
          }
        }
        v2[10] = v15;
        v2[11] = v8;
        v2[12] = v16;
        if (v4) {
          operator delete(v4);
        }
      }
      else
      {
        *(void *)int64_t v5 = a2;
        uint64_t v8 = v5 + 8;
      }
      v2[11] = v8;
    }
  }
}

uint64_t sub_19E4E8B38(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 48))();
}

uint64_t sub_19E4E8B60(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 8) + 80))(*(void *)(a1 + 8));
  uint64_t v2 = *(uint64_t (**)(void))(**(void **)(a1 + 40) + 56);
  return v2();
}

uint64_t sub_19E4E8BDC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 128))();
}

float32_t sub_19E4E8C00(void *a1, uint64_t a2, float32x4_t **a3, uint64_t a4)
{
  if (((*(uint64_t (**)(void *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, a4) & 1) == 0) {
    __assert_rtn("populateOutputLayer", "BaseLanguageModel.cpp", 205, "false");
  }
  unint64_t v7 = (float16x4_t *)a1[2];
  uint64_t v8 = (float16x4_t *)a1[3];
  unint64_t v9 = ((char *)v8 - (char *)v7) >> 1;
  unint64_t v10 = ((char *)a3[1] - (char *)*a3) >> 2;
  if (v9 <= v10)
  {
    if (v9 < v10) {
      a3[1] = (float32x4_t *)((char *)*a3 + 4 * v9);
    }
  }
  else
  {
    sub_19E423EEC((uint64_t)a3, v9 - v10);
    unint64_t v7 = (float16x4_t *)a1[2];
    uint64_t v8 = (float16x4_t *)a1[3];
    unint64_t v9 = ((char *)v8 - (char *)v7) >> 1;
  }
  if (v8 != v7)
  {
    unint64_t v11 = *a3;
    if (v9 <= 1) {
      unint64_t v9 = 1;
    }
    if (v9 <= 0xF)
    {
      unint64_t v12 = 0;
LABEL_14:
      unint64_t v20 = v9 - v12;
      long long v21 = &v11->i32[v12];
      uint64_t v22 = (__int16 *)v7 + v12;
      do
      {
        __int16 v23 = *v22++;
        _H0 = v23;
        __asm { FCVT            S0, H0 }
        *v21++ = _Q0.i32[0];
        --v20;
      }
      while (v20);
      return _Q0.f32[0];
    }
    unint64_t v12 = v9 & 0xFFFFFFFFFFFFFFF0;
    unint64_t v13 = v11 + 2;
    CFStringRef v14 = v7 + 2;
    unint64_t v15 = v9 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      float16x8_t v16 = *(float16x8_t *)v14[-2].i8;
      float32x4_t v17 = vcvtq_f32_f16(*(float16x4_t *)v16.i8);
      _Q0 = vcvt_hight_f32_f16(v16);
      float32x4_t v18 = vcvtq_f32_f16(*v14);
      float32x4_t v19 = vcvt_hight_f32_f16(*(float16x8_t *)v14->i8);
      v13[-2] = v17;
      v13[-1] = _Q0;
      float32x4_t *v13 = v18;
      v13[1] = v19;
      v13 += 4;
      v14 += 4;
      v15 -= 16;
    }
    while (v15);
    if (v9 != v12) {
      goto LABEL_14;
    }
  }
  return _Q0.f32[0];
}

float sub_19E4E8D38@<S0>(void *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, float **a5@<X8>)
{
  if ((*(unsigned int (**)(void))(*(void *)a1[7] + 16))(a1[7]) == 2) {
    __assert_rtn("topNPredictions", "BaseLanguageModel.cpp", 165, "m_tokenIDMapper->modelType() != NNModelType::Fragment");
  }
  unint64_t v10 = (*(uint64_t (**)(void *, uint64_t))(*a1 + 152))(a1, a4);
  unint64_t v11 = HIDWORD(v10);
  uint64_t v12 = (HIDWORD(v10) - v10);
  if (v12 + 1 < a3) {
    uint64_t v13 = v12 + 1;
  }
  else {
    uint64_t v13 = a3;
  }
  if (v11 >= a1[12]) {
    __assert_rtn("topNPredictions", "BaseLanguageModel.cpp", 172, "range.max < m_sizeOutput && \"max value of Montreal token ID range exceeds model output size\"");
  }
  unsigned int v14 = v10;
  uint64_t v91 = 0;
  size_t v15 = *(void *)(a2 + 8) - *(void *)a2;
  float16x8_t v16 = (const void *)a1[13];
  if (v15 != a1[14] - (void)v16 || memcmp(*(const void **)a2, v16, v15)) {
    (*(void (**)(void *, uint64_t, uint64_t *))(*a1 + 120))(a1, a2, &v91);
  }
  unint64_t v18 = a1[23];
  if (v14 <= v11)
  {
    uint64_t v19 = a1[2];
    unint64_t v20 = (_WORD *)(v18 + 4);
    do
    {
      *((_DWORD *)v20 - 1) = v14;
      _Q0.i16[0] = *(_WORD *)(v19 + 2 * v14);
      *unint64_t v20 = _Q0.i16[0];
      ++v14;
      v20 += 4;
    }
    while (v14 <= v11);
  }
  if (!v13)
  {
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    return *(float *)_Q0.i32;
  }
  unint64_t v21 = v18 + 8 * v13;
  unint64_t v22 = v18 + 8 * v12;
  unint64_t v23 = v22 + 8;
  size_t v24 = 2 * v13;
  uint64_t v25 = v13 - 1;
  if (v13 == 1)
  {
    if (v21 == v23) {
      goto LABEL_51;
    }
    short float v39 = *(short float *)(v18 + 4);
    uint64_t v40 = 8;
    do
    {
      unint64_t v41 = v18 + v40;
      short float v42 = *(short float *)(v18 + v40 + 4);
      if (v42 > v39)
      {
        int v43 = *(_DWORD *)v41;
        *(_DWORD *)unint64_t v41 = *(_DWORD *)v18;
        *(_DWORD *)unint64_t v18 = v43;
        *(short float *)(v41 + 4) = v39;
        *(short float *)(v18 + 4) = v42;
        short float v39 = v42;
      }
      v40 += 8;
    }
    while (8 * v12 + 8 != v40);
  }
  else
  {
    int64_t v26 = (unint64_t)(v13 - 2) >> 1;
    int64_t v27 = v26;
    do
    {
      if (v26 >= v27)
      {
        uint64_t v29 = (2 * v27) | 1;
        unint64_t v30 = v18 + 8 * v29;
        if (2 * v27 + 2 < v13 && *(short float *)(v30 + 4) > *(short float *)(v30 + 12))
        {
          v30 += 8;
          uint64_t v29 = 2 * v27 + 2;
        }
        short float v31 = *(short float *)(v30 + 4);
        short float v32 = *(short float *)(v18 + 8 * v27 + 4);
        if (v31 <= v32)
        {
          unint64_t v33 = v18 + 8 * v27;
          int v34 = *(_DWORD *)v33;
          do
          {
            unint64_t v35 = v33;
            unint64_t v33 = v30;
            *(_DWORD *)unint64_t v35 = *(_DWORD *)v30;
            *(short float *)(v35 + 4) = v31;
            if (v26 < v29) {
              break;
            }
            uint64_t v36 = 2 * v29;
            uint64_t v29 = (2 * v29) | 1;
            unint64_t v30 = v18 + 8 * v29;
            uint64_t v37 = v36 + 2;
            if (v37 < v13 && *(short float *)(v30 + 4) > *(short float *)(v30 + 12))
            {
              v30 += 8;
              uint64_t v29 = v37;
            }
            short float v31 = *(short float *)(v30 + 4);
          }
          while (v31 <= v32);
          *(_DWORD *)unint64_t v33 = v34;
          *(short float *)(v33 + 4) = v32;
        }
      }
      BOOL v28 = v27-- <= 0;
    }
    while (!v28);
    if (v21 != v23)
    {
      int v38 = (short float *)(v18 + 4);
      unint64_t v44 = v18 + 8 * v13;
      do
      {
        short float v46 = *(short float *)(v44 + 4);
        short float v47 = *v38;
        if (v46 > *v38)
        {
          int v48 = *(_DWORD *)v44;
          *(_DWORD *)unint64_t v44 = *(_DWORD *)v18;
          *(_DWORD *)unint64_t v18 = v48;
          *(short float *)(v44 + 4) = v47;
          *(short float *)(v18 + 4) = v46;
          if (v13 == 2 || *(short float *)(v18 + 12) <= *(short float *)(v18 + 20))
          {
            unint64_t v49 = v18 + 8;
            uint64_t v50 = 1;
          }
          else
          {
            unint64_t v49 = v18 + 16;
            uint64_t v50 = 2;
          }
          short float v51 = *(short float *)(v49 + 4);
          if (v51 <= v46)
          {
            int v52 = *(_DWORD *)v18;
            unint64_t v53 = v18;
            do
            {
              unint64_t v54 = v53;
              unint64_t v53 = v49;
              *(_DWORD *)unint64_t v54 = *(_DWORD *)v49;
              *(short float *)(v54 + 4) = v51;
              if (v26 < v50) {
                break;
              }
              uint64_t v55 = 2 * v50;
              uint64_t v50 = (2 * v50) | 1;
              unint64_t v49 = v18 + 8 * v50;
              uint64_t v56 = v55 + 2;
              if (v56 < v13 && *(short float *)(v49 + 4) > *(short float *)(v49 + 12))
              {
                v49 += 8;
                uint64_t v50 = v56;
              }
              short float v51 = *(short float *)(v49 + 4);
            }
            while (v51 <= v46);
            *(_DWORD *)unint64_t v53 = v52;
            *(short float *)(v53 + 4) = v46;
          }
        }
        _ZF = v44 == v22;
        v44 += 8;
      }
      while (!_ZF);
    }
  }
  if (v13 != 1)
  {
    unint64_t v74 = v18 + 8 * v13;
    do
    {
      uint64_t v75 = 0;
      int v76 = *(_DWORD *)v18;
      __int16 v77 = *(_WORD *)(v18 + 4);
      unint64_t v78 = v18;
      do
      {
        unint64_t v79 = v78;
        v78 += 8 * (v75 + 1);
        uint64_t v80 = 2 * v75;
        uint64_t v75 = (2 * v75) | 1;
        uint64_t v81 = v80 + 2;
        if (v81 < v13 && *(short float *)(v78 + 4) > *(short float *)(v78 + 12))
        {
          v78 += 8;
          uint64_t v75 = v81;
        }
        *(_DWORD *)unint64_t v79 = *(_DWORD *)v78;
        *(_WORD *)(v79 + 4) = *(_WORD *)(v78 + 4);
      }
      while (v75 <= (uint64_t)((unint64_t)(v13 - 2) >> 1));
      unint64_t v82 = v74 - 8;
      if (v78 == v74 - 8)
      {
        *(_DWORD *)unint64_t v78 = v76;
        *(_WORD *)(v78 + 4) = v77;
      }
      else
      {
        *(_DWORD *)unint64_t v78 = *(_DWORD *)(v74 - 8);
        *(_WORD *)(v78 + 4) = *(_WORD *)(v74 - 4);
        *(_DWORD *)(v74 - 8) = v76;
        *(_WORD *)(v74 - 4) = v77;
        uint64_t v83 = v78 - v18 + 8;
        if (v83 >= 9)
        {
          unint64_t v84 = (((unint64_t)v83 >> 3) - 2) >> 1;
          short float v85 = *(short float *)(v18 + 8 * v84 + 4);
          short float v86 = *(short float *)(v78 + 4);
          if (v85 > v86)
          {
            int v87 = *(_DWORD *)v78;
            do
            {
              unint64_t v88 = v84;
              unint64_t v89 = v78;
              unint64_t v78 = v18 + 8 * v88;
              *(_DWORD *)unint64_t v89 = *(_DWORD *)v78;
              *(short float *)(v89 + 4) = v85;
              if (!v88) {
                break;
              }
              unint64_t v84 = (v88 - 1) >> 1;
              short float v85 = *(short float *)(v18 + 8 * v84 + 4);
            }
            while (v85 > v86);
            *(_DWORD *)unint64_t v78 = v87;
            *(short float *)(v18 + 8 * v88 + 4) = v86;
          }
        }
      }
      unint64_t v74 = v82;
      BOOL v28 = v13-- <= 2;
    }
    while (!v28);
  }
LABEL_51:
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  uint64_t v57 = (float *)operator new(v24 * 4);
  *a5 = v57;
  a5[2] = &v57[v24];
  bzero(v57, v24 * 4);
  a5[1] = &v57[v24];
  uint64_t v58 = v25 & 0x1FFFFFFFFFFFFFFFLL;
  if ((v25 & 0x1FFFFFFFFFFFFFFFuLL) < 7 || (unint64_t)v57 < v18 + v24 * 4 && v18 < (unint64_t)&v57[v24]) {
    goto LABEL_58;
  }
  uint64_t v59 = (v58 + 1) & 0x3FFFFFFFFFFFFFF8;
  __int16 v60 = v57 + 8;
  long long v61 = (int32x4_t *)(v18 + 32);
  uint64_t v62 = v59;
  do
  {
    uint64_t v63 = v60 - 8;
    int32x4_t v65 = v61[-2];
    int32x4_t v64 = v61[-1];
    int32x4_t v67 = *v61;
    int32x4_t v66 = v61[1];
    v61 += 4;
    v92.val[1] = vcvtq_f32_f16((float16x4_t)vmovn_s32(vuzp2q_s32(v65, v64)));
    v92.val[0] = (float32x4_t)vuzp1q_s32(v65, v64);
    vst2q_f32(v63, v92);
    float32x4_t v68 = vcvtq_f32_f16((float16x4_t)vmovn_s32(vuzp2q_s32(v67, v66)));
    _Q0 = vuzp1q_s32(v67, v66);
    vst2q_f32(v60, *(float32x4x2_t *)_Q0.i8);
    v60 += 16;
    v62 -= 8;
  }
  while (v62);
  if (v58 + 1 != v59)
  {
    v57 += 2 * v59;
    v18 += 8 * v59;
    do
    {
LABEL_58:
      uint64_t v69 = *(void *)v18;
      v18 += 8;
      _H0 = WORD2(v69);
      __asm { FCVT            S0, H0 }
      *(_DWORD *)uint64_t v57 = v69;
      v57[1] = *(float *)_Q0.i32;
      v57 += 2;
    }
    while (v18 != v21);
  }
  return *(float *)_Q0.i32;
}

uint64_t sub_19E4E9368(uint64_t a1, uint64_t *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  if (v7 - *a2 != a3[1] - *a3) {
    __assert_rtn("conditionalProbability", "BaseLanguageModel.cpp", 138, "tokens.size() == tokensMetadata.size()");
  }
  if (v7 != v6)
  {
    uint64_t v8 = a3;
    unint64_t v9 = 0;
    uint64_t v121 = *a6;
    while (1)
    {
      unint64_t v10 = (uint64_t *)(v6 + 24 * v9);
      if (0xAAAAAAAAAAAAAAABLL * ((v10[1] - *v10) >> 3) != (uint64_t)(*(void *)(*v8 + 24 * v9 + 8)
                                                                    - *(void *)(*v8 + 24 * v9)) >> 1)
        __assert_rtn("conditionalProbability", "BaseLanguageModel.cpp", 140, "tokens[candidateTokens].size() == tokensMetadata[candidateTokens].size()");
      unint64_t v134 = 0;
      unint64_t v135 = 0;
      unint64_t v136 = 0;
      uint64_t v12 = *(unsigned char **)a4;
      unint64_t v11 = *(unsigned char **)(a4 + 8);
      unsigned int v132 = 0;
      __int16 v133 = 0;
      long long __p = 0;
      int64_t v13 = v11 - v12;
      if (v11 != v12)
      {
        if (v13 < 0) {
          sub_19E37C7C4();
        }
        long long __p = operator new(v11 - v12);
        unsigned int v132 = (char *)__p;
        unsigned int v14 = (char *)__p + 4 * (v13 >> 2);
        __int16 v133 = v14;
        memmove(__p, v12, v13);
        unsigned int v132 = v14;
      }
      *a6 = v121;
      uint64_t v15 = *v10;
      unint64_t v128 = v9;
      if (v10[1] != *v10) {
        break;
      }
LABEL_115:
      unsigned int v113 = *(void **)(a5 + 8);
      if ((unint64_t)v113 >= *(void *)(a5 + 16))
      {
        float v118 = sub_19E438A94((char **)a5, v134, (uint64_t)v135);
      }
      else
      {
        void *v113 = 0;
        v113[1] = 0;
        v113[2] = 0;
        __int16 v114 = v134;
        int64_t v115 = v135 - (unsigned char *)v134;
        if (v135 != v134)
        {
          if (v115 < 0) {
            sub_19E37C7C4();
          }
          int v116 = (char *)operator new(v135 - (unsigned char *)v134);
          void *v113 = v116;
          v113[1] = v116;
          int v117 = &v116[4 * (v115 >> 2)];
          v113[2] = v117;
          memcpy(v116, v114, v115);
          v113[1] = v117;
        }
        float v118 = (char *)(v113 + 3);
        *(void *)(a5 + 8) = v113 + 3;
        unint64_t v9 = v128;
      }
      *(void *)(a5 + 8) = v118;
      if (__p)
      {
        unsigned int v132 = (char *)__p;
        operator delete(__p);
      }
      if (v134)
      {
        unint64_t v135 = (char *)v134;
        operator delete(v134);
      }
      ++v9;
      uint64_t v6 = *a2;
      if (v9 >= 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3)) {
        return 1;
      }
    }
    unint64_t v16 = 0;
    while (1)
    {
      int v130 = 1065353216;
      if (!*(unsigned char *)(*(void *)(*v8 + 24 * v9) + 2 * v16)) {
        break;
      }
      char v17 = (*(uint64_t (**)(uint64_t, unint64_t, void **, int *, uint64_t *))(*(void *)a1 + 24))(a1, v15 + 24 * v16, &__p, &v130, a6);
      uint64_t v19 = (int *)v135;
      unint64_t v18 = v136;
      if (v17)
      {
        unint64_t v9 = v128;
        if ((unint64_t)v135 < v136) {
          goto LABEL_25;
        }
        goto LABEL_15;
      }
      if ((unint64_t)v135 >= v136)
      {
        BOOL v28 = (int *)v134;
        int64_t v29 = v135 - (unsigned char *)v134;
        uint64_t v30 = (v135 - (unsigned char *)v134) >> 2;
        unint64_t v31 = v30 + 1;
        if ((unint64_t)(v30 + 1) >> 62) {
          sub_19E37C7C4();
        }
        uint64_t v32 = v136 - (void)v134;
        if ((uint64_t)(v136 - (void)v134) >> 1 > v31) {
          unint64_t v31 = v32 >> 1;
        }
        if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v33 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v33 = v31;
        }
        if (v33)
        {
          if (v33 >> 62) {
            sub_19E37C2B8();
          }
          int v34 = operator new(4 * v33);
        }
        else
        {
          int v34 = 0;
        }
        short float v39 = &v34[4 * v30];
        *(_DWORD *)short float v39 = 0;
        int64_t v27 = v39 + 4;
        if (v19 != v28)
        {
          unint64_t v40 = (char *)(v19 - 1) - (char *)v28;
          if (v40 < 0x2C) {
            goto LABEL_138;
          }
          if ((unint64_t)((char *)v19 - &v34[v29]) < 0x20) {
            goto LABEL_138;
          }
          uint64_t v41 = (v40 >> 2) + 1;
          short float v42 = &v34[4 * v30 - 16];
          int v43 = v19 - 4;
          uint64_t v44 = v41 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v45 = *(_OWORD *)v43;
            *(v42 - 1) = *((_OWORD *)v43 - 1);
            *short float v42 = v45;
            v42 -= 2;
            v43 -= 8;
            v44 -= 8;
          }
          while (v44);
          v39 -= 4 * (v41 & 0x7FFFFFFFFFFFFFF8);
          v19 -= v41 & 0x7FFFFFFFFFFFFFF8;
          if (v41 != (v41 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_138:
            do
            {
              int v46 = *--v19;
              *((_DWORD *)v39 - 1) = v46;
              v39 -= 4;
            }
            while (v19 != v28);
          }
        }
        unint64_t v134 = v39;
        unint64_t v135 = v27;
        unint64_t v136 = (unint64_t)&v34[4 * v33];
        if (v28) {
          operator delete(v28);
        }
      }
      else
      {
        *(_DWORD *)unint64_t v135 = 0;
        int64_t v27 = (char *)(v19 + 1);
      }
      unint64_t v9 = v128;
LABEL_58:
      unint64_t v135 = v27;
      short float v47 = v8;
      if (!*(unsigned char *)(*(void *)(*v8 + 24 * v9) + 2 * v16 + 1))
      {
        uint64_t v48 = *(void *)(*a2 + 24 * v9) + 24 * v16;
        uint64_t v50 = *(char **)v48;
        unint64_t v49 = *(char **)(v48 + 8);
        uint64_t v51 = v49 - v50;
        if (v49 - v50 >= 1)
        {
          uint64_t v52 = v51 >> 2;
          unint64_t v54 = (unint64_t)__p;
          unint64_t v53 = v132;
          int64_t v55 = v132 - (unsigned char *)__p;
          int64_t v56 = (v132 - (unsigned char *)__p) >> 2;
          uint64_t v57 = (char *)__p + ((v132 - (unsigned char *)__p) & 0xFFFFFFFFFFFFFFFCLL);
          if (v51 >> 2 <= (v133 - v132) >> 2)
          {
            uint64_t v66 = v132 - v57;
            uint64_t v67 = (v132 - v57) >> 2;
            if (v67 >= v52)
            {
              float32x4_t v68 = &v50[4 * v52];
              unsigned int v72 = v132;
              unint64_t v9 = v128;
            }
            else
            {
              float32x4_t v68 = &v50[4 * v67];
              int64_t v69 = v49 - v68;
              if (v49 != v68)
              {
                uint64_t v123 = &v50[4 * v67];
                unsigned __int16 v125 = (char *)__p + ((v132 - (unsigned char *)__p) & 0xFFFFFFFFFFFFFFFCLL);
                size_t v70 = v49 - v68;
                int64_t v71 = (v132 - (unsigned char *)__p) >> 2;
                memmove(v132, v123, v70);
                int64_t v56 = v71;
                float32x4_t v68 = v123;
                uint64_t v57 = v125;
              }
              unsigned int v72 = &v53[v69];
              unsigned int v132 = &v53[v69];
              BOOL v73 = v66 < 1;
              unint64_t v9 = v128;
              if (v73) {
                goto LABEL_11;
              }
            }
            unint64_t v74 = &v57[4 * v52];
            size_t v75 = v72 - v74;
            uint64_t v76 = (v72 - v74) >> 2;
            __int16 v77 = &v72[-4 * v52];
            unint64_t v78 = v72;
            if (v77 < v53)
            {
              unint64_t v79 = (v55 & 0xFFFFFFFFFFFFFFFCLL) + v75;
              unint64_t v80 = v54 + v79 + 4;
              if ((unint64_t)v53 > v80) {
                unint64_t v80 = (unint64_t)v53;
              }
              unint64_t v81 = v80 + ~v54 - v79;
              if (v81 <= 0x2B)
              {
                unint64_t v78 = v72;
                goto LABEL_110;
              }
              unint64_t v78 = v72;
              if ((unint64_t)&v74[-(v55 & 0xFFFFFFFFFFFFFFFCLL) - v54] < 0x20) {
                goto LABEL_139;
              }
              uint64_t v105 = (v81 >> 2) + 1;
              uint64_t v106 = 4 * (v105 & 0x7FFFFFFFFFFFFFF8);
              v77 += v106;
              int v107 = v72 + 16;
              unsigned int v108 = (long long *)(v54 + 4 * v76 + 4 * v56 + 16);
              uint64_t v109 = v105 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v110 = *v108;
                *(v107 - 1) = *(v108 - 1);
                *int v107 = v110;
                v107 += 2;
                v108 += 2;
                v109 -= 8;
              }
              while (v109);
              unint64_t v78 = &v72[v106];
              if (v105 != (v105 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_139:
                do
                {
LABEL_110:
                  int v111 = *(_DWORD *)v77;
                  v77 += 4;
                  *(_DWORD *)unint64_t v78 = v111;
                  v78 += 4;
                }
                while (v77 < v53);
              }
            }
            unsigned int v132 = v78;
            if (v72 != v74)
            {
              uint64_t v112 = v57;
              memmove(&v72[-4 * v76], v57, v75);
              uint64_t v57 = v112;
            }
            if (v68 != v50) {
              memmove(v57, v50, v68 - v50);
            }
            goto LABEL_11;
          }
          unint64_t v58 = v56 + v52;
          if ((unint64_t)(v56 + v52) >> 62) {
            sub_19E37C7C4();
          }
          uint64_t v59 = v133 - (unsigned char *)__p;
          if ((v133 - (unsigned char *)__p) >> 1 > v58) {
            unint64_t v58 = v59 >> 1;
          }
          BOOL v60 = (unint64_t)v59 >= 0x7FFFFFFFFFFFFFFCLL;
          unint64_t v61 = 0x3FFFFFFFFFFFFFFFLL;
          if (!v60) {
            unint64_t v61 = v58;
          }
          unint64_t v124 = v61;
          if (v61)
          {
            if (v61 >> 62) {
              sub_19E37C2B8();
            }
            int64_t v62 = (v132 - (unsigned char *)__p) >> 2;
            uint64_t v63 = (char *)__p + ((v132 - (unsigned char *)__p) & 0xFFFFFFFFFFFFFFFCLL);
            int32x4_t v64 = operator new(4 * v61);
            uint64_t v57 = v63;
            int64_t v56 = v62;
            int32x4_t v65 = v64;
          }
          else
          {
            int32x4_t v65 = 0;
          }
          int v87 = &v65[4 * v56];
          unint64_t v88 = &v87[4 * v52];
          if ((unint64_t)(v51 - 4) >= 0x1C)
          {
            unint64_t v89 = &v65[4 * v56];
            if ((unint64_t)(&v65[v55 & 0xFFFFFFFFFFFFFFFCLL] - v50) < 0x20) {
              goto LABEL_93;
            }
            unint64_t v90 = ((unint64_t)(v51 - 4) >> 2) + 1;
            uint64_t v91 = 4 * (v90 & 0x7FFFFFFFFFFFFFF8);
            unint64_t v89 = &v87[v91];
            float32x4x2_t v92 = (long long *)(v50 + 16);
            unsigned int v93 = &v65[4 * v56 + 16];
            uint64_t v94 = v90 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v95 = *v92;
              *(v93 - 1) = *(v92 - 1);
              *unsigned int v93 = v95;
              v92 += 2;
              v93 += 2;
              v94 -= 8;
            }
            while (v94);
            if (v90 != (v90 & 0x7FFFFFFFFFFFFFF8))
            {
              v50 += v91;
              goto LABEL_93;
            }
          }
          else
          {
            unint64_t v89 = &v65[4 * v56];
            do
            {
LABEL_93:
              int v96 = *(_DWORD *)v50;
              v50 += 4;
              *(_DWORD *)unint64_t v89 = v96;
              v89 += 4;
            }
            while (v89 != v88);
          }
          if ((char *)v54 != v53)
          {
            if ((unint64_t)(v55 - 4) < 0x3C)
            {
              unsigned __int16 v97 = v57;
              goto LABEL_101;
            }
            unsigned __int16 v97 = v57;
            if (v54 + (v55 & 0xFFFFFFFFFFFFFFFCLL) - (unint64_t)&v65[v55 & 0xFFFFFFFFFFFFFFFCLL] < 0x20) {
              goto LABEL_140;
            }
            unint64_t v98 = ((unint64_t)(v55 - 4) >> 2) + 1;
            unsigned __int16 v97 = &v57[-4 * (v98 & 0x7FFFFFFFFFFFFFF8)];
            int v99 = (long long *)(v54 + 4 * v56 - 16);
            unsigned int v100 = &v65[4 * v56 - 16];
            uint64_t v101 = v98 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v102 = *v99;
              *(v100 - 1) = *(v99 - 1);
              *unsigned int v100 = v102;
              v99 -= 2;
              v100 -= 2;
              v101 -= 8;
            }
            while (v101);
            v87 -= 4 * (v98 & 0x7FFFFFFFFFFFFFF8);
            if (v98 != (v98 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_140:
              do
              {
LABEL_101:
                int v103 = *((_DWORD *)v97 - 1);
                v97 -= 4;
                *((_DWORD *)v87 - 1) = v103;
                v87 -= 4;
              }
              while (v97 != (char *)v54);
            }
          }
          size_t v104 = v53 - v57;
          if (v104) {
            memmove(v88, v57, v104);
          }
          long long __p = v87;
          unsigned int v132 = &v88[v104];
          __int16 v133 = &v65[4 * v124];
          unint64_t v9 = v128;
          if (v54) {
            operator delete((void *)v54);
          }
        }
      }
LABEL_11:
      ++v16;
      uint64_t v15 = *(void *)(*a2 + 24 * v9);
      uint64_t v8 = v47;
      if (v16 >= 0xAAAAAAAAAAAAAAABLL * ((*(void *)(*a2 + 24 * v9 + 8) - v15) >> 3)) {
        goto LABEL_115;
      }
    }
    uint64_t v19 = (int *)v135;
    unint64_t v18 = v136;
    if ((unint64_t)v135 < v136)
    {
LABEL_25:
      *uint64_t v19 = v130;
      int64_t v27 = (char *)(v19 + 1);
      goto LABEL_58;
    }
LABEL_15:
    unint64_t v20 = (int *)v134;
    int64_t v21 = (char *)v19 - (unsigned char *)v134;
    uint64_t v22 = ((char *)v19 - (unsigned char *)v134) >> 2;
    unint64_t v23 = v22 + 1;
    if ((unint64_t)(v22 + 1) >> 62) {
      sub_19E37C7C4();
    }
    uint64_t v24 = v18 - (void)v134;
    if (v24 >> 1 > v23) {
      unint64_t v23 = v24 >> 1;
    }
    if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v25 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v25 = v23;
    }
    if (v25)
    {
      if (v25 >> 62) {
        sub_19E37C2B8();
      }
      int64_t v26 = operator new(4 * v25);
    }
    else
    {
      int64_t v26 = 0;
    }
    unint64_t v35 = (int *)&v26[4 * v22];
    *unint64_t v35 = v130;
    int64_t v27 = (char *)(v35 + 1);
    if (v19 == v20)
    {
      unint64_t v9 = v128;
      goto LABEL_45;
    }
    unint64_t v36 = (char *)(v19 - 1) - (char *)v20;
    if (v36 >= 0x2C && (unint64_t)((char *)v19 - &v26[v21]) >= 0x20)
    {
      uint64_t v82 = (v36 >> 2) + 1;
      uint64_t v37 = &v19[-(v82 & 0x7FFFFFFFFFFFFFF8)];
      uint64_t v83 = &v26[4 * v22 - 16];
      unint64_t v84 = v19 - 4;
      uint64_t v85 = v82 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v86 = *(_OWORD *)v84;
        *(v83 - 1) = *((_OWORD *)v84 - 1);
        *uint64_t v83 = v86;
        v83 -= 2;
        v84 -= 8;
        v85 -= 8;
      }
      while (v85);
      v35 -= v82 & 0x7FFFFFFFFFFFFFF8;
      unint64_t v9 = v128;
      if (v82 == (v82 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_45:
        unint64_t v134 = v35;
        unint64_t v135 = v27;
        unint64_t v136 = (unint64_t)&v26[4 * v25];
        if (v20) {
          operator delete(v20);
        }
        goto LABEL_58;
      }
    }
    else
    {
      uint64_t v37 = v19;
      unint64_t v9 = v128;
    }
    do
    {
      int v38 = *--v37;
      *--unint64_t v35 = v38;
    }
    while (v37 != v20);
    goto LABEL_45;
  }
  return 1;
}

void sub_19E4E9C8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  unint64_t v25 = *(void **)v23;
  if (*(void *)v23)
  {
    *(void *)(v23 + 8) = v25;
    operator delete(v25);
  }
  *(void *)(a9 + 8) = v23;
  if (__p)
  {
    operator delete(__p);
    int64_t v26 = a22;
    if (!a22) {
LABEL_5:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    int64_t v26 = a22;
    if (!a22) {
      goto LABEL_5;
    }
  }
  operator delete(v26);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E4E9D18(uint64_t a1, unsigned int **a2, uint64_t a3, float *a4, uint64_t a5)
{
  unint64_t v9 = *(unsigned char **)a3;
  uint64_t v8 = *(unsigned char **)(a3 + 8);
  uint64_t v44 = 0;
  long long v45 = 0;
  long long __p = 0;
  int64_t v10 = v8 - v9;
  if (v8 != v9)
  {
    if (v10 < 0) {
      sub_19E37C7C4();
    }
    unint64_t v11 = (char *)operator new(v8 - v9);
    uint64_t v12 = &v11[4 * (v10 >> 2)];
    long long __p = v11;
    long long v45 = v12;
    memmove(v11, v9, v10);
    uint64_t v44 = v12;
  }
  unint64_t v40 = a4;
  int64_t v13 = *a2;
  unsigned int v14 = a2[1];
  float v15 = 0.0;
  if (*a2 == v14)
  {
LABEL_33:
    float v36 = __exp10(v15);
LABEL_34:
    *unint64_t v40 = v36;
    uint64_t v37 = 1;
    int v38 = (char *)__p;
    if (__p)
    {
LABEL_35:
      uint64_t v44 = v38;
      operator delete(v38);
    }
  }
  else
  {
    while (1)
    {
      uint64_t v17 = *v13;
      float v42 = 1.0;
      if (((*(uint64_t (**)(uint64_t, uint64_t, void **, float *, uint64_t))(*(void *)a1 + 16))(a1, v17, &__p, &v42, a5) & 1) == 0)break; {
      float v18 = v42;
      }
      float v19 = log10f(v42);
      if (v18 <= 0.0) {
        float v19 = -10.0;
      }
      float v15 = v19 + v15;
      if (v15 >= -10.0)
      {
        unint64_t v20 = v44;
        if (v44 < v45)
        {
          *(_DWORD *)uint64_t v44 = v17;
          unint64_t v16 = v20 + 4;
        }
        else
        {
          int64_t v21 = (char *)__p;
          int64_t v22 = v44 - (unsigned char *)__p;
          uint64_t v23 = (v44 - (unsigned char *)__p) >> 2;
          unint64_t v24 = v23 + 1;
          if ((unint64_t)(v23 + 1) >> 62) {
            sub_19E37C7C4();
          }
          uint64_t v25 = v45 - (unsigned char *)__p;
          if ((v45 - (unsigned char *)__p) >> 1 > v24) {
            unint64_t v24 = v25 >> 1;
          }
          unint64_t v26 = (unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v24;
          if (v26)
          {
            if (v26 >> 62) {
              sub_19E37C2B8();
            }
            int64_t v27 = (char *)operator new(4 * v26);
          }
          else
          {
            int64_t v27 = 0;
          }
          BOOL v28 = &v27[4 * v23];
          *(_DWORD *)BOOL v28 = v17;
          unint64_t v16 = v28 + 4;
          if (v20 != v21)
          {
            unint64_t v29 = v20 - 4 - v21;
            if (v29 < 0x2C) {
              goto LABEL_44;
            }
            if ((unint64_t)(v20 - &v27[v22]) < 0x20) {
              goto LABEL_44;
            }
            uint64_t v30 = (v29 >> 2) + 1;
            unint64_t v31 = &v27[4 * v23 - 16];
            uint64_t v32 = v20 - 16;
            uint64_t v33 = v30 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v34 = *(_OWORD *)v32;
              *((_OWORD *)v31 - 1) = *((_OWORD *)v32 - 1);
              *(_OWORD *)unint64_t v31 = v34;
              v31 -= 32;
              v32 -= 32;
              v33 -= 8;
            }
            while (v33);
            v28 -= 4 * (v30 & 0x7FFFFFFFFFFFFFF8);
            v20 -= 4 * (v30 & 0x7FFFFFFFFFFFFFF8);
            if (v30 != (v30 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_44:
              do
              {
                int v35 = *((_DWORD *)v20 - 1);
                v20 -= 4;
                *((_DWORD *)v28 - 1) = v35;
                v28 -= 4;
              }
              while (v20 != v21);
            }
          }
          long long __p = v28;
          uint64_t v44 = v16;
          long long v45 = &v27[4 * v26];
          if (v21) {
            operator delete(v21);
          }
        }
        uint64_t v44 = v16;
        if (++v13 != v14) {
          continue;
        }
      }
      float v36 = 0.0;
      if (v15 <= -10.0) {
        goto LABEL_34;
      }
      goto LABEL_33;
    }
    uint64_t v37 = 0;
    int v38 = (char *)__p;
    if (__p) {
      goto LABEL_35;
    }
  }
  return v37;
}

void sub_19E4E9FD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E4E9FFC(uint64_t a1, unsigned int a2, uint64_t a3, _DWORD *a4, uint64_t a5)
{
  int64_t v10 = *(const void **)a3;
  uint64_t v11 = *(void *)(a3 + 8) - *(void *)a3;
  uint64_t v12 = *(const void **)(a1 + 104);
  if (v11 == *(void *)(a1 + 112) - (void)v12
    && !memcmp(*(const void **)a3, v12, *(void *)(a3 + 8) - *(void *)a3))
  {
LABEL_6:
    _H0 = *(_WORD *)(*(void *)(a1 + 16) + 2 * a2);
    __asm { FCVT            S0, H0 }
    goto LABEL_7;
  }
  if (!(*(unsigned int (**)(void, const void *, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), v10, v11 >> 2))
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 120))(a1, a3, a5);
    if (!result) {
      return result;
    }
    goto LABEL_6;
  }
  (*(void (**)(void))(**(void **)(a1 + 8) + 72))(*(void *)(a1 + 8));
LABEL_7:
  *a4 = _S0;
  return 1;
}

void sub_19E4EA12C(uint64_t a1, CFTypeRef *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = &unk_1EF0BA388;
  *(_OWORD *)(a1 + ++*(_DWORD *)(result + 24) = 0u;
  uint64_t v8 = *(void *)(a6 + 8);
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  CFTypeRef v9 = *a2;
  if (*a2) {
    CFRetain(*a2);
  }
  sub_19E36E590(&theDict, v9);
  if (theDict)
  {
    CFStringRef Value = (const __CFString *)CFDictionaryGetValue(theDict, @"MontrealModelType");
    if (Value)
    {
      CFTypeID TypeID = CFStringGetTypeID();
      if (TypeID == CFGetTypeID(Value))
      {
        sub_19E3C6934(v25, Value);
        char v27 = 1;
        unint64_t v12 = v26;
        if ((v26 & 0x80u) != 0) {
          unint64_t v12 = (unint64_t)v25[1];
        }
        if (v12 == 6)
        {
          if ((v26 & 0x80u) == 0) {
            unint64_t v16 = v25;
          }
          else {
            unint64_t v16 = (void **)v25[0];
          }
          int v17 = *(_DWORD *)v16;
          int v18 = *((unsigned __int16 *)v16 + 2);
          if (v17 == 1701998403 && v18 == 19788)
          {
            if (a7)
            {
              unint64_t v20 = operator new(0x1D0uLL);
              v20[1] = 0;
              v20[2] = 0;
              *unint64_t v20 = &unk_1EF0BE450;
              if (v8) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
              }
              sub_19E441060((uint64_t)(v20 + 3), a2);
            }
            int64_t v21 = operator new(0xE8uLL);
            v21[1] = 0;
            uint64_t v21[2] = 0;
            void *v21 = &unk_1EF0BE568;
            sub_19E441060((uint64_t)(v21 + 3), a2);
          }
        }
        else if (v12 == 4)
        {
          int64_t v13 = v25;
          if ((v26 & 0x80u) != 0) {
            int64_t v13 = (void **)v25[0];
          }
          if (*(_DWORD *)v13 == 808333686)
          {
            CFDictionaryGetValue((CFDictionaryRef)*a2, @"URL");
            sub_19E3C2CE4();
          }
          if (*(_DWORD *)v13 == 808333942)
          {
            unsigned int v14 = operator new(0xE8uLL);
            v14[1] = 0;
            v14[2] = 0;
            *unsigned int v14 = &unk_1EF0BE568;
            sub_19E441060((uint64_t)(v14 + 3), a2);
          }
        }
        exception = __cxa_allocate_exception(0x20uLL);
        std::operator+<char>();
        sub_19E48B618(__p, &v29, "'");
        sub_19E3F5604(exception, (long long *)__p);
        __cxa_throw(exception, (struct type_info *)&unk_1EF0B7540, (void (*)(void *))sub_19E3F56B0);
      }
    }
    LOBYTE(v25[0]) = 0;
    char v27 = 0;
    if (qword_1E945A2D0 != -1) {
      dispatch_once(&qword_1E945A2D0, &unk_1EF0BEE98);
    }
    float v15 = qword_1E945A2C8;
    if (os_log_type_enabled((os_log_t)qword_1E945A2C8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p[0].__r_.__value_.__l.__data_) = 0;
      _os_log_error_impl(&dword_19E36B000, v15, OS_LOG_TYPE_ERROR, "No model type configured; falling back on the legacy montreal model",
        (uint8_t *)__p,
        2u);
    }
    CFDictionaryGetValue((CFDictionaryRef)*a2, @"URL");
    sub_19E3C2CE4();
  }
  int64_t v22 = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x19F3BD790](v22, "Could not construct");
  __cxa_throw(v22, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_19E4EBCFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a70 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_1EC009478);
  sub_19E3D73EC(v71);
  sub_19E3D73EC(v70);
  sub_19E3D73EC(a13);
  BOOL v73 = *a12;
  if (*a12)
  {
    *(void *)(a26 + ++*(_DWORD *)(result + 24) = v73;
    operator delete(v73);
  }
  uint64_t v74 = *a16;
  *a16 = 0;
  if (v74) {
    (*(void (**)(uint64_t))(*(void *)v74 + 8))(v74);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_19E4EC330()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EC009470, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EC009470))
  {
    sub_19E382340(__p, "NeuralNetworkForwardPassLimit");
    qword_1E9459D88 = sub_19E4A00D8((uint64_t)__p);
    *(void *)&byte_1E9459D90 = v2;
    if (v6 < 0) {
      operator delete(*(void **)__p);
    }
    __cxa_guard_release(&qword_1EC009470);
  }
  if (!byte_1E9459D90) {
    return 16;
  }
  if (qword_1EC0095B8 != -1) {
    dispatch_once(&qword_1EC0095B8, &unk_1EF0BEC40);
  }
  uint64_t v0 = qword_1EC0095B0;
  if (os_log_type_enabled((os_log_t)qword_1EC0095B0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long __p = 136315394;
    *(void *)&__p[4] = "NeuralNetworkForwardPassLimit";
    __int16 v4 = 2048;
    uint64_t v5 = qword_1E9459D88;
    _os_log_impl(&dword_19E36B000, v0, OS_LOG_TYPE_DEFAULT, "Setting configuration value %s=%zu (overridden by user preferences)", __p, 0x16u);
  }
  return qword_1E9459D88;
}

void sub_19E4EC48C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_1EC009470);
  _Unwind_Resume(a1);
}

void sub_19E4EC4BC(void **a1, unint64_t a2)
{
  uint64_t v5 = (char *)a1[1];
  __int16 v4 = a1[2];
  char v6 = v5;
  if (a2 <= (v4 - v5) >> 3)
  {
    if (!a2)
    {
LABEL_19:
      a1[1] = v6;
      return;
    }
    if (((a2 - 1) & 0x1FFFFFFFFFFFFFFFLL) != 0)
    {
      uint64_t v14 = ((a2 - 1) & 0x1FFFFFFFFFFFFFFFLL) + 1;
      float v15 = v5 + 8;
      uint64_t v16 = v14 & 0x3FFFFFFFFFFFFFFELL;
      do
      {
        *((_DWORD *)v15 - 2) = 0;
        *(_DWORD *)float v15 = 0;
        *((_WORD *)v15 - 2) = 0;
        *((_WORD *)v15 + 2) = 0;
        v15 += 16;
        v16 -= 2;
      }
      while (v16);
      if (v14 == (v14 & 0x3FFFFFFFFFFFFFFELL)) {
        goto LABEL_18;
      }
      char v6 = &v5[8 * (v14 & 0x3FFFFFFFFFFFFFFELL)];
    }
    do
    {
      *(_DWORD *)char v6 = 0;
      *((_WORD *)v6 + 2) = 0;
      v6 += 8;
    }
    while (v6 != &v5[8 * a2]);
LABEL_18:
    char v6 = &v5[8 * a2];
    goto LABEL_19;
  }
  uint64_t v7 = (char *)*a1;
  uint64_t v8 = v5 - (unsigned char *)*a1;
  uint64_t v9 = v8 >> 3;
  unint64_t v10 = (v8 >> 3) + a2;
  if (v10 >> 61) {
    sub_19E37C7C4();
  }
  uint64_t v11 = v4 - v7;
  if (v11 >> 2 > v10) {
    unint64_t v10 = v11 >> 2;
  }
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v12 = v10;
  }
  if (v12)
  {
    if (v12 >> 61) {
      sub_19E37C2B8();
    }
    int64_t v13 = (char *)operator new(8 * v12);
  }
  else
  {
    int64_t v13 = 0;
  }
  int v17 = &v13[8 * v9];
  int v18 = &v17[8 * a2];
  float v19 = v17;
  uint64_t v20 = (a2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  if (v20)
  {
    uint64_t v21 = (v20 + 1) & 0x3FFFFFFFFFFFFFFELL;
    int64_t v22 = v17 + 8;
    uint64_t v23 = v21;
    do
    {
      *((_DWORD *)v22 - 2) = 0;
      *(_DWORD *)int64_t v22 = 0;
      *((_WORD *)v22 - 2) = 0;
      *((_WORD *)v22 + 2) = 0;
      v22 += 16;
      v23 -= 2;
    }
    while (v23);
    if (v20 + 1 == v21) {
      goto LABEL_27;
    }
    float v19 = &v17[8 * v21];
  }
  do
  {
    *(_DWORD *)float v19 = 0;
    *((_WORD *)v19 + 2) = 0;
    v19 += 8;
  }
  while (v19 != v18);
LABEL_27:
  unint64_t v24 = &v13[8 * v12];
  if (v5 != v7)
  {
    unint64_t v25 = v5 - v7 - 8;
    if (v25 < 0x58) {
      goto LABEL_43;
    }
    if ((unint64_t)(v5 - &v13[v8]) < 0x20) {
      goto LABEL_43;
    }
    uint64_t v26 = (v25 >> 3) + 1;
    char v6 = &v5[-8 * (v26 & 0x3FFFFFFFFFFFFFFCLL)];
    char v27 = &v13[8 * v9 - 16];
    BOOL v28 = (long long *)(v5 - 16);
    uint64_t v29 = v26 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v30 = *v28;
      *((_OWORD *)v27 - 1) = *(v28 - 1);
      *(_OWORD *)char v27 = v30;
      v27 -= 32;
      v28 -= 2;
      v29 -= 4;
    }
    while (v29);
    v17 -= 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
    if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_43:
      do
      {
        uint64_t v31 = *((void *)v6 - 1);
        v6 -= 8;
        *((void *)v17 - 1) = v31;
        v17 -= 8;
      }
      while (v6 != v7);
    }
  }
  uint64_t v32 = *a1;
  *a1 = v17;
  a1[1] = v18;
  a1[2] = v24;
  if (v32)
  {
    operator delete(v32);
  }
}

void sub_19E4EC70C(uint64_t a1, uint64_t a2, uint64_t a3, CFDictionaryRef *a4, uint64_t a5)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  CFIndex v6 = sub_19E4ECDFC(a4, a5);
  if (qword_1EC0095B8 != -1) {
    dispatch_once(&qword_1EC0095B8, &unk_1EF0BEC40);
  }
  uint64_t v7 = qword_1EC0095B0;
  if (os_log_type_enabled((os_log_t)qword_1EC0095B0, OS_LOG_TYPE_INFO))
  {
    uint64_t v8 = MEMORY[0x19F3BCDE0](*(void *)(a5 + 176));
    int v9 = 138412546;
    uint64_t v10 = v8;
    __int16 v11 = 2048;
    CFIndex v12 = v6;
    _os_log_impl(&dword_19E36B000, v7, OS_LOG_TYPE_INFO, "assembling monolithic cache for locale='%@': cacheSize=%lu", (uint8_t *)&v9, 0x16u);
  }
  operator new();
}

void sub_19E4EC8B0(_Unwind_Exception *a1)
{
  operator delete(v2);
  MEMORY[0x19F3BDCF0](v1, 0x10A1C40F8EEC480);
  _Unwind_Resume(a1);
}

void sub_19E4EC8E8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, CFDictionaryRef *a5, uint64_t a6)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  CFIndex v11 = sub_19E4ECDFC(a5, a6);
  LOBYTE(v20[0]) = 0;
  AppIntegerCFNumberRef Value = CFPreferencesGetAppIntegerValue(@"MontrealSparseCacheSize", @"com.apple.LanguageModeling", (Boolean *)v20);
  if (!LOBYTE(v20[0]))
  {
    AppIntegerCFNumberRef Value = *(unsigned int *)(a6 + 384);
    if (!AppIntegerValue)
    {
      if (!CFDictionaryContainsKey(*a5, @"MontrealSparseCacheSize"))
      {
        exception = __cxa_allocate_exception(0x20uLL);
        sub_19E382340(valuePtr, "Montreal resource is missing the 'MontrealSparseCacheSize' configuration parameter.");
        sub_19E3F5604(exception, (long long *)valuePtr);
        __cxa_throw(exception, (struct type_info *)&unk_1EF0B7540, (void (*)(void *))sub_19E3F56B0);
      }
      CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(*a5, @"MontrealSparseCacheSize");
      CFNumberRef v14 = Value;
      if (!Value) {
        __assert_rtn("extractSize", "LMMontrealCacheFactory.hpp", 28, "false && \"missing dictionary entry\"");
      }
      CFTypeID v15 = CFGetTypeID(Value);
      if (v15 != CFNumberGetTypeID()) {
        __assert_rtn("extractSize", "LMMontrealCacheFactory.hpp", 33, "false && \"wrong type for dictionary entry\"");
      }
      *(_DWORD *)int valuePtr = 0;
      if (!CFNumberGetValue(v14, kCFNumberIntType, valuePtr)) {
        __assert_rtn("extractSize", "LMMontrealCacheFactory.hpp", 39, "false && \"Failed to parse CFNumber as kCFNumberIntType\"");
      }
      AppIntegerCFNumberRef Value = *(int *)valuePtr;
    }
  }
  if (qword_1EC0095B8 != -1) {
    dispatch_once(&qword_1EC0095B8, &unk_1EF0BEC40);
  }
  uint64_t v16 = qword_1EC0095B0;
  if (os_log_type_enabled((os_log_t)qword_1EC0095B0, OS_LOG_TYPE_INFO))
  {
    uint64_t v17 = MEMORY[0x19F3BCDE0](*(void *)(a6 + 176));
    *(_DWORD *)int valuePtr = 138412802;
    *(void *)&valuePtr[4] = v17;
    *(_WORD *)&valuePtr[12] = 2048;
    *(void *)&valuePtr[14] = v11;
    __int16 v22 = 2048;
    CFIndex v23 = AppIntegerValue;
    _os_log_impl(&dword_19E36B000, v16, OS_LOG_TYPE_INFO, "assembling segregated cache for locale='%@': fullCacheSize=%lu, sparseCacheSize=%lu", valuePtr, 0x20u);
  }
  v20[0] = a2;
  v20[1] = a3;
  uint64_t v18 = a4[1];
  v20[2] = *a4;
  v20[3] = v18;
  if (v18) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
  }
  v20[4] = v11;
  v20[5] = AppIntegerValue;
  operator new();
}

void sub_19E4ECD6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a20 < 0)
  {
    operator delete(__p);
    if ((v26 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v26)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v25);
  _Unwind_Resume(a1);
}

CFIndex sub_19E4ECDFC(CFDictionaryRef *a1, uint64_t a2)
{
  Boolean keyExistsAndHasValidFormat = 0;
  CFIndex result = CFPreferencesGetAppIntegerValue(@"MontrealFullCacheSize", @"com.apple.LanguageModeling", &keyExistsAndHasValidFormat);
  if (!keyExistsAndHasValidFormat)
  {
    CFIndex result = *(unsigned int *)(a2 + 380);
    if (!result)
    {
      if (!CFDictionaryContainsKey(*a1, @"MontrealFullCacheSize"))
      {
        exception = __cxa_allocate_exception(0x20uLL);
        sub_19E382340(&v9, "Montreal resource is missing the 'MontrealFullCacheSize' configuration parameter.");
        sub_19E3F5604(exception, &v9);
        __cxa_throw(exception, (struct type_info *)&unk_1EF0B7540, (void (*)(void *))sub_19E3F56B0);
      }
      CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(*a1, @"MontrealFullCacheSize");
      if (!Value) {
        __assert_rtn("extractSize", "LMMontrealCacheFactory.hpp", 28, "false && \"missing dictionary entry\"");
      }
      CFNumberRef v6 = Value;
      CFTypeID v7 = CFGetTypeID(Value);
      if (v7 != CFNumberGetTypeID()) {
        __assert_rtn("extractSize", "LMMontrealCacheFactory.hpp", 33, "false && \"wrong type for dictionary entry\"");
      }
      LODWORD(v9) = 0;
      if (!CFNumberGetValue(v6, kCFNumberIntType, &v9)) {
        __assert_rtn("extractSize", "LMMontrealCacheFactory.hpp", 39, "false && \"Failed to parse CFNumber as kCFNumberIntType\"");
      }
      return (int)v9;
    }
  }
  return result;
}

void sub_19E4ECF6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

uint64_t sub_19E4ECFA4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_19E4ECFDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a1 + 40);
  if (!v8)
  {
    uint64_t v9 = *(void *)(a1 + 32);
    if (!v9) {
      sub_19E3ACB9C();
    }
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v9 + 48))(&v14);
    uint64_t v10 = v14;
    uint64_t v14 = 0;
    uint64_t v11 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v10;
    if (v11)
    {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
      uint64_t v12 = v14;
      uint64_t v14 = 0;
      if (v12) {
        (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
      }
    }
    uint64_t v8 = *(void *)(a1 + 40);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v8 + 72))(v8, a2, a3, a4);
}

uint64_t sub_19E4ED0F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *(void *)(a1 + 40);
  if (!v10)
  {
    uint64_t v11 = *(void *)(a1 + 32);
    if (!v11) {
      sub_19E3ACB9C();
    }
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v11 + 48))(&v16);
    uint64_t v12 = v16;
    uint64_t v16 = 0;
    uint64_t v13 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v12;
    if (v13)
    {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
      uint64_t v14 = v16;
      uint64_t v16 = 0;
      if (v14) {
        (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
      }
    }
    uint64_t v10 = *(void *)(a1 + 40);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v10 + 64))(v10, a2, a3, a4, a5);
}

uint64_t sub_19E4ED214(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 40);
  if (!v6)
  {
    uint64_t v7 = *(void *)(a1 + 32);
    if (!v7) {
      sub_19E3ACB9C();
    }
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v7 + 48))(&v12);
    uint64_t v8 = v12;
    uint64_t v12 = 0;
    uint64_t v9 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v8;
    if (v9)
    {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
      uint64_t v10 = v12;
      uint64_t v12 = 0;
      if (v10) {
        (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
      }
    }
    uint64_t v6 = *(void *)(a1 + 40);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 56))(v6, a2, a3);
}

uint64_t sub_19E4ED320(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 40);
  if (!v6)
  {
    uint64_t v7 = *(void *)(a1 + 32);
    if (!v7) {
      sub_19E3ACB9C();
    }
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v7 + 48))(&v12);
    uint64_t v8 = v12;
    uint64_t v12 = 0;
    uint64_t v9 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v8;
    if (v9)
    {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
      uint64_t v10 = v12;
      uint64_t v12 = 0;
      if (v10) {
        (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
      }
    }
    uint64_t v6 = *(void *)(a1 + 40);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 48))(v6, a2, a3);
}

uint64_t sub_19E4ED42C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 40);
  if (!v6)
  {
    uint64_t v7 = *(void *)(a1 + 32);
    if (!v7) {
      sub_19E3ACB9C();
    }
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v7 + 48))(&v12);
    uint64_t v8 = v12;
    uint64_t v12 = 0;
    uint64_t v9 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v8;
    if (v9)
    {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
      uint64_t v10 = v12;
      uint64_t v12 = 0;
      if (v10) {
        (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
      }
    }
    uint64_t v6 = *(void *)(a1 + 40);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 40))(v6, a2, a3);
}

uint64_t sub_19E4ED538(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 40);
  if (!v6)
  {
    uint64_t v7 = *(void *)(a1 + 32);
    if (!v7) {
      sub_19E3ACB9C();
    }
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v7 + 48))(&v12);
    uint64_t v8 = v12;
    uint64_t v12 = 0;
    uint64_t v9 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v8;
    if (v9)
    {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
      uint64_t v10 = v12;
      uint64_t v12 = 0;
      if (v10) {
        (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
      }
    }
    uint64_t v6 = *(void *)(a1 + 40);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 32))(v6, a2, a3);
}

uint64_t sub_19E4ED644(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 40);
  if (!v6)
  {
    uint64_t v7 = *(void *)(a1 + 32);
    if (!v7) {
      sub_19E3ACB9C();
    }
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v7 + 48))(&v12);
    uint64_t v8 = v12;
    uint64_t v12 = 0;
    uint64_t v9 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v8;
    if (v9)
    {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
      uint64_t v10 = v12;
      uint64_t v12 = 0;
      if (v10) {
        (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
      }
    }
    uint64_t v6 = *(void *)(a1 + 40);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 24))(v6, a2, a3);
}

uint64_t sub_19E4ED750(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = *(void *)(a1 + 40);
  if (!v12)
  {
    uint64_t v13 = *(void *)(a1 + 32);
    if (!v13) {
      sub_19E3ACB9C();
    }
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v13 + 48))(&v22);
    uint64_t v14 = v22;
    uint64_t v22 = 0;
    uint64_t v15 = *(void *)(a1 + 40);
    *(void *)(a1 + 40) = v14;
    if (v15)
    {
      (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
      uint64_t v16 = v22;
      uint64_t v22 = 0;
      if (v16) {
        (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
      }
    }
    uint64_t v12 = *(void *)(a1 + 40);
  }
  uint64_t v17 = *a4;
  *a4 = 0;
  uint64_t v21 = v17;
  uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)v12 + 16))(v12, a2, a3, &v21, a5, a6);
  uint64_t v19 = v21;
  uint64_t v21 = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  return v18;
}

void sub_19E4ED8C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E4ED8FC(void *a1)
{
  *a1 = &unk_1EF0BAA80;
  uint64_t v2 = a1[5];
  a1[5] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 == a1 + 1)
  {
    (*(void (**)(void *))(a1[1] + 32))(a1 + 1);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  JUMPOUT(0x19F3BDCF0);
}

void *sub_19E4ED9F0(void *a1)
{
  *a1 = &unk_1EF0BAA80;
  uint64_t v2 = a1[5];
  a1[5] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3 == a1 + 1)
  {
    (*(void (**)(void *))(a1[1] + 32))(a1 + 1);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  return a1;
}

void *sub_19E4EDAC4()
{
  return &unk_1EF0B8148;
}

uint64_t sub_19E4EDAD0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZN2LML24assembleIncrementalCacheIDhEENSt3__110unique_ptrINS_18MontrealStateCacheIT_EENS1_14default_"
                     "deleteIS5_EEEEmmRKNS_8ResourceERKNS_10ParametersEEUlvE_"
    || ((v3 & (unint64_t)"ZN2LML24assembleIncrementalCacheIDhEENSt3__110unique_ptrINS_18MontrealStateCacheIT_EENS1"
                                "_14default_deleteIS5_EEEEmmRKNS_8ResourceERKNS_10ParametersEEUlvE_" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZN2LML24assembleIncrementalCacheIDhEENSt3__110unique_ptrINS_18MontrealStateCacheIT_EENS1_14default_deleteIS5_EEEEmmRKNS_8ResourceERKNS_10ParametersEEUlvE_")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN2LML24assembleIncrementalCacheIDhEENSt3__110unique_ptrINS_18MontrealStateCacheIT_EENS1_14default_deleteIS5_EEEEmmRKNS_8ResourceERKNS_10ParametersEEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void sub_19E4EDB28()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_19E4EDD20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t *a23)
{
  _Block_object_dispose(&a16, 8);
  sub_19E4EE1FC(v23);
  if (a23 == &a20)
  {
    (*(void (**)(uint64_t *))(a20 + 32))(&a20);
  }
  else if (a23)
  {
    (*(void (**)(void))(*a23 + 40))();
  }
  MEMORY[0x19F3BDCF0](v23, 0x10A1C4044578B7ELL);
  _Unwind_Resume(a1);
}

void *sub_19E4EDDCC(void *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  *a1 = &unk_1EF0BA6B0;
  a1[1] = a3;
  a1[2] = 0;
  uint64_t v5 = (char **)(a1 + 2);
  a1[3] = 0;
  a1[4] = 0;
  if (a2)
  {
    LODWORD(v8) = 0;
    while (1)
    {
      uint64_t v9 = *(void *)(a4 + 24);
      if (!v9) {
        sub_19E3ACB9C();
      }
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v9 + 48))(&v37);
      uint64_t v11 = (char *)a1[3];
      unint64_t v10 = a1[4];
      if ((unint64_t)v11 >= v10) {
        break;
      }
      uint64_t v12 = v37;
      uint64_t v37 = 0;
      *(void *)uint64_t v11 = v12;
      uint64_t v13 = v11 + 8;
LABEL_33:
      a1[3] = v13;
      uint64_t v35 = v37;
      uint64_t v37 = 0;
      if (v35) {
        (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
      }
      unint64_t v8 = (v8 + 1);
      if (v8 >= a2) {
        return a1;
      }
    }
    uint64_t v14 = *v5;
    uint64_t v15 = v11 - *v5;
    uint64_t v16 = v15 >> 3;
    unint64_t v17 = (v15 >> 3) + 1;
    if (v17 >> 61) {
      sub_19E37C7C4();
    }
    uint64_t v18 = v10 - (void)v14;
    if (v18 >> 2 > v17) {
      unint64_t v17 = v18 >> 2;
    }
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v19 = v17;
    }
    if (v19)
    {
      if (v19 >> 61) {
        sub_19E37C2B8();
      }
      uint64_t v20 = (char *)operator new(8 * v19);
    }
    else
    {
      uint64_t v20 = 0;
    }
    uint64_t v21 = &v20[8 * v16];
    uint64_t v22 = &v20[8 * v19];
    uint64_t v23 = v37;
    uint64_t v37 = 0;
    *(void *)uint64_t v21 = v23;
    uint64_t v13 = v21 + 8;
    if (v11 == v14)
    {
      a1[2] = v21;
      a1[3] = v13;
      a1[4] = v22;
      goto LABEL_31;
    }
    unint64_t v24 = v11 - v14 - 8;
    if (v24 > 0x77
      && (&v11[-(v24 & 0xFFFFFFFFFFFFFFF8) - 8] >= v21 || &v20[v15 - (v24 & 0xFFFFFFFFFFFFFFF8) - 8] >= v11))
    {
      uint64_t v25 = (v24 >> 3) + 1;
      v21 -= 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL);
      int v26 = v11 - 32;
      char v27 = &v20[8 * v16 - 16];
      uint64_t v28 = v25 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v30 = *(_OWORD *)v26;
        long long v29 = *((_OWORD *)v26 + 1);
        *(_OWORD *)int v26 = 0uLL;
        *((_OWORD *)v26 + 1) = 0uLL;
        v26 -= 32;
        *((_OWORD *)v27 - 1) = v30;
        *(_OWORD *)char v27 = v29;
        v27 -= 32;
        v28 -= 4;
      }
      while (v28);
      if (v25 == (v25 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_26:
        uint64_t v11 = (char *)a1[2];
        uint64_t v32 = (char *)a1[3];
        a1[2] = v21;
        a1[3] = v13;
        a1[4] = v22;
        while (v32 != v11)
        {
          uint64_t v34 = *((void *)v32 - 1);
          v32 -= 8;
          uint64_t v33 = v34;
          *(void *)uint64_t v32 = 0;
          if (v34) {
            (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
          }
        }
LABEL_31:
        if (v11) {
          operator delete(v11);
        }
        goto LABEL_33;
      }
      v11 -= 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL);
    }
    do
    {
      uint64_t v31 = *((void *)v11 - 1);
      v11 -= 8;
      *(void *)uint64_t v11 = 0;
      *((void *)v21 - 1) = v31;
      v21 -= 8;
    }
    while (v11 != v14);
    goto LABEL_26;
  }
  return a1;
}

void sub_19E4EE068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  sub_19E4EFAF4(v10);
  _Unwind_Resume(a1);
}

void *sub_19E4EE0BC(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v5[0] = 0;
  if (!qword_1E9459DF0)
  {
    v5[1] = MEMORY[0x1E4F143A8];
    v5[2] = 0x40000000;
    void v5[3] = sub_19E4EE61C;
    void v5[4] = &unk_1E59A14E8;
    v5[5] = v5;
    long long v6 = xmmword_1E59A14D0;
    uint64_t v7 = 0;
    qword_1E9459DF0 = _sl_dlopen();
    unint64_t v3 = (void *)v5[0];
    uint64_t v2 = (void *)qword_1E9459DF0;
    if (qword_1E9459DF0)
    {
      if (!v5[0]) {
        goto LABEL_5;
      }
    }
    else
    {
      unint64_t v3 = (void *)abort_report_np();
    }
    free(v3);
    goto LABEL_5;
  }
  uint64_t v2 = (void *)qword_1E9459DF0;
LABEL_5:
  uint64_t result = dlsym(v2, "MRLNeuralNetworkIncrementalStateCreate");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + ++*(_DWORD *)(result + 24) = result;
  off_1EC009220 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_19E4EE1FC(void *a1)
{
  *a1 = &unk_1EF0BA6B0;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    unint64_t v3 = (void *)a1[3];
    __int16 v4 = (void *)a1[2];
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *--v3;
        uint64_t v5 = v6;
        *unint64_t v3 = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        }
      }
      while (v3 != v2);
      __int16 v4 = (void *)a1[2];
    }
    a1[3] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_19E4EE2AC(void *a1, char *a2, uint64_t a3)
{
  unsigned int v4 = sub_19E4EE334(a1, a2, a3);
  if ((v4 & 0x80000000) != 0) {
    __assert_rtn("getProbability", "LRUStateBaseCache.hpp", 138, "false && \"client requested a probability for a context that's not in the cache\"");
  }
  uint64_t v5 = *(uint64_t (**)(void))(**(void **)(a1[2] + 8 * v4) + 24);
  return v5();
}

uint64_t sub_19E4EE334(void *a1, char *__s2, uint64_t a3)
{
  if (!a3) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3] - v4;
  if (v5)
  {
    uint64_t v8 = 0;
    size_t v9 = 4 * a3;
    unint64_t v10 = v5 >> 3;
    if (v10 <= 1) {
      uint64_t v11 = 1;
    }
    else {
      uint64_t v11 = v10;
    }
    while (1)
    {
      uint64_t v12 = *(void *)(v4 + 8 * v8);
      uint64_t v13 = *(const void **)(v12 + 8);
      if (a3 == (uint64_t)(*(void *)(v12 + 16) - (void)v13) >> 2 && !memcmp(v13, __s2, v9)) {
        break;
      }
      if (v11 == ++v8)
      {
        LODWORD(v8) = -1;
        goto LABEL_13;
      }
    }
    if ((v8 & 0x80000000) == 0) {
      return v8;
    }
LABEL_13:
    uint64_t v14 = 0;
    uint64_t v5 = 0;
    do
    {
      uint64_t v16 = *(void *)(v4 + 8 * v14);
      unint64_t v17 = *(_DWORD **)(v16 + 8);
      uint64_t v18 = *(_DWORD **)(v16 + 16);
      if (v18 == v17)
      {
        unint64_t v15 = 0;
      }
      else
      {
        unint64_t v15 = 0;
        unint64_t v19 = v18 - 1;
        size_t v20 = v9 - 4;
        do
        {
          if (*v19 != *(_DWORD *)&__s2[v20]) {
            break;
          }
          ++v15;
          if (v19 == v17) {
            break;
          }
          --v19;
          size_t v21 = v20;
          v20 -= 4;
        }
        while (v21);
      }
      if (v15 > v5)
      {
        uint64_t v5 = v15;
        LODWORD(v8) = v14;
      }
      ++v14;
    }
    while (v14 != v11);
  }
  else
  {
    LODWORD(v8) = -1;
  }
  if ((unint64_t)v5 < a1[1]) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v8;
  }
}

uint64_t sub_19E4EE46C(void *a1, char *a2, uint64_t a3)
{
  unsigned int v4 = sub_19E4EE334(a1, a2, a3);
  if ((v4 & 0x80000000) != 0) {
    __assert_rtn("populateProbabilities", "LRUStateBaseCache.hpp", 125, "false && \"client requested probabilities for a context that's not in the cache\"");
  }
  uint64_t v5 = *(uint64_t (**)(void))(**(void **)(a1[2] + 8 * v4) + 16);
  return v5();
}

uint64_t sub_19E4EE504(void *a1, char *a2, uint64_t a3)
{
  unsigned int v4 = sub_19E4EE334(a1, a2, a3);
  if ((v4 & 0x80000000) != 0) {
    return 0;
  }
  else {
    return *(void *)(*(void *)(a1[2] + 8 * v4) + 8);
  }
}

BOOL sub_19E4EE54C(void *a1, char *a2, uint64_t a3)
{
  return (int)sub_19E4EE334(a1, a2, a3) >= 0;
}

BOOL sub_19E4EE56C(uint64_t a1, void *__s2, uint64_t a3)
{
  if (!a3) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24) - v3;
  if (!v4) {
    return 0;
  }
  uint64_t v7 = 0;
  size_t v8 = 4 * a3;
  unint64_t v9 = v4 >> 3;
  if (v9 <= 1) {
    uint64_t v10 = 1;
  }
  else {
    uint64_t v10 = v9;
  }
  while (1)
  {
    uint64_t v11 = *(void *)(v3 + 8 * v7);
    uint64_t v12 = *(const void **)(v11 + 8);
    if (a3 == (uint64_t)(*(void *)(v11 + 16) - (void)v12) >> 2 && !memcmp(v12, __s2, v8)) {
      break;
    }
    if (v10 == ++v7) {
      return 0;
    }
  }
  return (int)v7 >= 0;
}

uint64_t sub_19E4EE61C()
{
  uint64_t result = _sl_dlopen();
  qword_1E9459DF0 = result;
  return result;
}

float sub_19E4EE690(void *a1, char *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6 = sub_19E4EE334(a1, a2, a3);
  if ((v6 & 0x80000000) != 0) {
    __assert_rtn("getProbability", "LRUIncrementalStateCache.hpp", 190, "false && \"client requested a probability for a context that's not in the cache\"");
  }
  uint64_t v7 = 8 * v6;
  float v8 = (*(float (**)(void, uint64_t))(**(void **)(a1[2] + v7) + 24))(*(void *)(a1[2] + v7), a4);
  uint64_t v9 = *(void *)(a1[2] + v7);
  long long __p = 0;
  uint64_t v11 = *(unsigned char **)(v9 + 8);
  uint64_t v10 = *(unsigned char **)(v9 + 16);
  int64_t v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0) {
      sub_19E37C7C4();
    }
    uint64_t v13 = operator new(v10 - v11);
    uint64_t v14 = v12 >> 2;
    long long __p = v13;
    memcpy(v13, v11, v12);
    do
    {
      uint64_t v15 = a1[2];
      uint64_t v16 = a1[3] - v15;
      if (!v16) {
        break;
      }
      uint64_t v17 = 0;
      unint64_t v18 = v16 >> 3;
      uint64_t v19 = v18 <= 1 ? 1 : v18;
      while (1)
      {
        uint64_t v20 = *(void *)(v15 + 8 * v17);
        size_t v21 = *(const void **)(v20 + 8);
        if (v14 == (uint64_t)(*(void *)(v20 + 16) - (void)v21) >> 2 && !memcmp(v21, v13, 4 * v14)) {
          break;
        }
        if (v19 == ++v17) {
          goto LABEL_14;
        }
      }
      if ((v17 & 0x80000000) != 0) {
        break;
      }
      uint64_t v22 = *(void *)(v15 + 8 * v17);
      *(void *)(v22 + 40) = atomic_fetch_add(&qword_1EC009428, 1uLL) + 1;
      --v14;
    }
    while (v14);
  }
LABEL_14:
  if (__p) {
    operator delete(__p);
  }
  return v8;
}

void sub_19E4EE828(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E4EE844(void *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v8 = sub_19E4EE334(a1, a2, a3);
  if ((v8 & 0x80000000) != 0) {
    __assert_rtn("populateProbabilities", "LRUIncrementalStateCache.hpp", 174, "false && \"client requested probabilities for a context that's not in the cache\"");
  }
  uint64_t v9 = 8 * v8;
  (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1[2] + v9) + 16))(*(void *)(a1[2] + v9), a4, a5);
  uint64_t v10 = *(void *)(a1[2] + v9);
  long long __p = 0;
  int64_t v12 = *(unsigned char **)(v10 + 8);
  uint64_t v11 = *(unsigned char **)(v10 + 16);
  int64_t v13 = v11 - v12;
  if (v11 != v12)
  {
    if (v13 < 0) {
      sub_19E37C7C4();
    }
    uint64_t v14 = operator new(v11 - v12);
    uint64_t v15 = v13 >> 2;
    long long __p = v14;
    memcpy(v14, v12, v13);
    do
    {
      uint64_t v16 = a1[2];
      uint64_t v17 = a1[3] - v16;
      if (!v17) {
        break;
      }
      uint64_t v18 = 0;
      unint64_t v19 = v17 >> 3;
      uint64_t v20 = v19 <= 1 ? 1 : v19;
      while (1)
      {
        uint64_t v21 = *(void *)(v16 + 8 * v18);
        uint64_t v22 = *(const void **)(v21 + 8);
        if (v15 == (uint64_t)(*(void *)(v21 + 16) - (void)v22) >> 2 && !memcmp(v22, v14, 4 * v15)) {
          break;
        }
        if (v20 == ++v18) {
          goto LABEL_14;
        }
      }
      if ((v18 & 0x80000000) != 0) {
        break;
      }
      uint64_t v23 = *(void *)(v16 + 8 * v18);
      *(void *)(v23 + 40) = atomic_fetch_add(&qword_1EC009428, 1uLL) + 1;
      --v15;
    }
    while (v15);
  }
LABEL_14:
  if (__p)
  {
    operator delete(__p);
  }
}

void sub_19E4EEA00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E4EEA1C(void *a1, char *a2, uint64_t a3)
{
  unsigned int v4 = sub_19E4EE334(a1, a2, a3);
  if ((v4 & 0x80000000) == 0)
  {
    uint64_t v5 = *(void *)(a1[2] + 8 * v4);
    uint64_t v7 = *(unsigned char **)(v5 + 8);
    unsigned int v6 = *(unsigned char **)(v5 + 16);
    int64_t v8 = v6 - v7;
    if (v6 == v7)
    {
      uint64_t v10 = 0;
      uint64_t v9 = 0;
    }
    else
    {
      if (v8 < 0) {
        sub_19E37C7C4();
      }
      uint64_t v9 = (char *)operator new(v6 - v7);
      uint64_t v10 = &v9[4 * (v8 >> 2)];
      memcpy(v9, v7, v8);
    }
    sub_19E4EED08(a1[5], 1);
    size_t v11 = v10 - v9;
    if (v10 != v9)
    {
      uint64_t v12 = a1[2];
      uint64_t v13 = a1[3] - v12;
      if (v13)
      {
        uint64_t v14 = 0;
        unint64_t v15 = v13 >> 3;
        if (v15 <= 1) {
          uint64_t v16 = 1;
        }
        else {
          uint64_t v16 = v15;
        }
        while (1)
        {
          uint64_t v17 = *(void *)(v12 + 8 * v14);
          uint64_t v18 = *(const void **)(v17 + 8);
          if (*(void *)(v17 + 16) - (void)v18 == v11 && !memcmp(v18, v9, v11)) {
            break;
          }
          if (v16 == ++v14) {
            goto LABEL_17;
          }
        }
        if ((v14 & 0x80000000) == 0)
        {
          uint64_t v19 = *(void *)(v12 + 8 * v14);
          *(void *)(v19 + 40) = atomic_fetch_add(&qword_1EC009428, 1uLL) + 1;
          uint64_t v20 = a1[5];
          uint64_t v21 = (CFArrayRef *)(*(uint64_t (**)(void))(**(void **)(v19 + 32) + 16))(*(void *)(v19 + 32));
          CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*v21, 0);
          sub_19E4EEE04(v20, (uint64_t)ValueAtIndex);
          CFMutableStringRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 1, MEMORY[0x1E4F1D510]);
          CFArrayAppendValue(Mutable, (const void *)a1[5]);
          operator new();
        }
      }
    }
LABEL_17:
    __assert_rtn("getLastIncrementalState", "LRUIncrementalStateCache.hpp", 153, "index >= 0");
  }
  return 0;
}

void sub_19E4EEC9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  MEMORY[0x19F3BDCF0](v11, 0x10E1C406EE1D4F3);
  sub_19E3F6818((const void **)&a9);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_19E4EED08(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = 0;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x2000000000;
  unsigned int v4 = (uint64_t (*)(uint64_t, uint64_t))off_1EC009210;
  uint64_t v11 = off_1EC009210;
  if (!off_1EC009210)
  {
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 0x40000000;
    v7[2] = sub_19E4EF040;
    void v7[3] = &unk_1E59A1510;
    v7[4] = &v8;
    sub_19E4EF040((uint64_t)v7);
    unsigned int v4 = (uint64_t (*)(uint64_t, uint64_t))v9[3];
  }
  _Block_object_dispose(&v8, 8);
  if (!v4)
  {
    dlerror();
    unsigned int v6 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v8, 8);
    _Unwind_Resume(v6);
  }
  return v4(a1, a2);
}

uint64_t sub_19E4EEE04(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = 0;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x2000000000;
  unsigned int v4 = (uint64_t (*)(uint64_t, uint64_t))off_1EC009218;
  uint64_t v11 = off_1EC009218;
  if (!off_1EC009218)
  {
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 0x40000000;
    v7[2] = sub_19E4EEF00;
    void v7[3] = &unk_1E59A1538;
    v7[4] = &v8;
    sub_19E4EEF00((uint64_t)v7);
    unsigned int v4 = (uint64_t (*)(uint64_t, uint64_t))v9[3];
  }
  _Block_object_dispose(&v8, 8);
  if (!v4)
  {
    dlerror();
    unsigned int v6 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v8, 8);
    _Unwind_Resume(v6);
  }
  return v4(a1, a2);
}

void *sub_19E4EEF00(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v5[0] = 0;
  if (!qword_1E9459DF0)
  {
    v5[1] = MEMORY[0x1E4F143A8];
    v5[2] = 0x40000000;
    void v5[3] = sub_19E4EE61C;
    void v5[4] = &unk_1E59A14E8;
    v5[5] = v5;
    long long v6 = xmmword_1E59A14D0;
    uint64_t v7 = 0;
    qword_1E9459DF0 = _sl_dlopen();
    uint64_t v3 = (void *)v5[0];
    uint64_t v2 = (void *)qword_1E9459DF0;
    if (qword_1E9459DF0)
    {
      if (!v5[0]) {
        goto LABEL_5;
      }
    }
    else
    {
      uint64_t v3 = (void *)abort_report_np();
    }
    free(v3);
    goto LABEL_5;
  }
  uint64_t v2 = (void *)qword_1E9459DF0;
LABEL_5:
  uint64_t result = dlsym(v2, "MRLNeuralNetworkAppendIncrementalState");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + ++*(_DWORD *)(result + 24) = result;
  off_1EC009218 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *sub_19E4EF040(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v5[0] = 0;
  if (!qword_1E9459DF0)
  {
    v5[1] = MEMORY[0x1E4F143A8];
    v5[2] = 0x40000000;
    void v5[3] = sub_19E4EE61C;
    void v5[4] = &unk_1E59A14E8;
    v5[5] = v5;
    long long v6 = xmmword_1E59A14D0;
    uint64_t v7 = 0;
    qword_1E9459DF0 = _sl_dlopen();
    uint64_t v3 = (void *)v5[0];
    uint64_t v2 = (void *)qword_1E9459DF0;
    if (qword_1E9459DF0)
    {
      if (!v5[0]) {
        goto LABEL_5;
      }
    }
    else
    {
      uint64_t v3 = (void *)abort_report_np();
    }
    free(v3);
    goto LABEL_5;
  }
  uint64_t v2 = (void *)qword_1E9459DF0;
LABEL_5:
  uint64_t result = dlsym(v2, "MRLNeuralNetworkResetIncrementalState");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + ++*(_DWORD *)(result + 24) = result;
  off_1EC009210 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_19E4EF180(void *a1, char *a2, uint64_t a3)
{
  unsigned int v4 = sub_19E4EE334(a1, a2, a3);
  if ((v4 & 0x80000000) == 0)
  {
    uint64_t v5 = *(void *)(a1[2] + 8 * v4);
    uint64_t v33 = 0;
    uint64_t v32 = 0;
    uint64_t v7 = *(unsigned char **)(v5 + 8);
    long long v6 = *(unsigned char **)(v5 + 16);
    int64_t v8 = v6 - v7;
    if (v6 == v7)
    {
      uint64_t v9 = 0;
      uint64_t v10 = 0;
    }
    else
    {
      if (v8 < 0) {
        sub_19E37C7C4();
      }
      uint64_t v9 = (char *)operator new(v6 - v7);
      uint64_t v10 = &v9[4 * (v8 >> 2)];
      uint64_t v32 = v9;
      memcpy(v9, v7, v8);
      uint64_t v33 = v10;
    }
    uint64_t v11 = v10 - v9;
    sub_19E4EED08(a1[5], (v10 - v9) >> 2);
    long long __p = 0;
    uint64_t v31 = 0;
    if (v10 != v9)
    {
      if (v11 < 0) {
        sub_19E37C7C4();
      }
      uint64_t v12 = (char *)operator new(v10 - v9);
      uint64_t v13 = &v12[4 * ((v10 - v9) >> 2)];
      long long __p = v12;
      memset(v12, 255, v11 & 0xFFFFFFFFFFFFFFFCLL);
      uint64_t v31 = v13;
    }
    for (unint64_t i = 0; ; ++i)
    {
      if (i >= (v33 - v32) >> 2)
      {
        if ((int)((unint64_t)(v31 - __p) >> 2) >= 1)
        {
          unint64_t v27 = ((unint64_t)(v31 - __p) >> 2) + 1;
          do
          {
            uint64_t v28 = *(void *)(a1[2] + 8 * *(int *)&__p[4 * (v27 - 2)]);
            *(void *)(v28 + 40) = atomic_fetch_add(&qword_1EC009428, 1uLL) + 1;
            --v27;
          }
          while (v27 > 1);
        }
        CFMutableStringRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 1, MEMORY[0x1E4F1D510]);
        CFArrayAppendValue(Mutable, (const void *)a1[5]);
        operator new();
      }
      uint64_t v15 = a1[2];
      uint64_t v16 = a1[3] - v15;
      if (!v16) {
        break;
      }
      uint64_t v17 = 0;
      unint64_t v18 = v16 >> 3;
      uint64_t v19 = v18 <= 1 ? 1 : v18;
      while (1)
      {
        uint64_t v20 = *(void *)(v15 + 8 * v17);
        uint64_t v21 = *(const void **)(v20 + 8);
        if (i + 1 == (uint64_t)(*(void *)(v20 + 16) - (void)v21) >> 2 && !memcmp(v21, v32, 4 * (i + 1))) {
          break;
        }
        if (v19 == ++v17) {
          goto LABEL_21;
        }
      }
      if ((v17 & 0x80000000) != 0) {
        break;
      }
      *(_DWORD *)&__p[4 * i] = v17;
      uint64_t v22 = *(void *)(v15 + 8 * v17);
      *(void *)(v22 + 40) = atomic_fetch_add(&qword_1EC009428, 1uLL) + 1;
      uint64_t v23 = a1[5];
      unint64_t v24 = (CFArrayRef *)(*(uint64_t (**)(void))(**(void **)(v22 + 32) + 16))(*(void *)(v22 + 32));
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*v24, 0);
      sub_19E4EEE04(v23, (uint64_t)ValueAtIndex);
    }
LABEL_21:
    if (__p) {
      operator delete(__p);
    }
    if (v32) {
      operator delete(v32);
    }
  }
  return 0;
}

void sub_19E4EF4BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  MEMORY[0x19F3BDCF0](v15, 0x10E1C406EE1D4F3);
  sub_19E3F6818(&a10);
  if (__p) {
    operator delete(__p);
  }
  if (a14)
  {
    a15 = (uint64_t)a14;
    operator delete(a14);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_19E4EF554(uint64_t a1, _DWORD *__src, size_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  if (a3)
  {
    uint64_t v7 = *a4;
    if (*a4)
    {
      uint64_t v9 = *(void **)(a1 + 16);
      uint64_t v10 = *(void **)(a1 + 24);
      if (v9 != v10 && a6 != 0)
      {
        unint64_t v13 = a3;
        uint64_t v15 = 0;
        size_t v16 = a3;
        if ((unint64_t)(v10 - v9) <= 1) {
          uint64_t v17 = 1;
        }
        else {
          uint64_t v17 = v10 - v9;
        }
        while (1)
        {
          uint64_t v18 = v9[v15];
          uint64_t v19 = *(const void **)(v18 + 8);
          if (v13 == (uint64_t)(*(void *)(v18 + 16) - (void)v19) >> 2 && !memcmp(v19, __src, v16 * 4)) {
            break;
          }
          if (v17 == ++v15) {
            goto LABEL_27;
          }
        }
        if ((v15 & 0x80000000) == 0)
        {
          while (1)
          {
            uint64_t v20 = *(void *)(a1 + 16);
            uint64_t v21 = *(void *)(a1 + 24) - v20;
            if (!v21) {
              break;
            }
            uint64_t v22 = 0;
            unint64_t v23 = v21 >> 3;
            uint64_t v24 = v23 <= 1 ? 1 : v23;
            while (1)
            {
              uint64_t v25 = *(void *)(v20 + 8 * v22);
              int v26 = *(const void **)(v25 + 8);
              if (v13 == (uint64_t)(*(void *)(v25 + 16) - (void)v26) >> 2 && !memcmp(v26, __src, 4 * v13)) {
                break;
              }
              ++v22;
              uint64_t result = 1;
              if (v24 == v22) {
                return result;
              }
            }
            if ((v22 & 0x80000000) != 0) {
              break;
            }
            uint64_t v27 = *(void *)(v20 + 8 * v22);
            uint64_t result = 1;
            *(void *)(v27 + 40) = atomic_fetch_add(&qword_1EC009428, 1uLL) + 1;
            if (!--v13) {
              return result;
            }
          }
          return 1;
        }
LABEL_27:
        uint64_t v28 = v9 + 1;
        if (v9 + 1 != v10)
        {
          long long v29 = (void *)*v9;
          long long v30 = v9 + 1;
          do
          {
            uint64_t v32 = (void *)*v30++;
            uint64_t v31 = v32;
            if (v32[5] < v29[5])
            {
              long long v29 = v31;
              uint64_t v9 = v28;
            }
            uint64_t v28 = v30;
          }
          while (v30 != v10);
        }
        if (v9 == v10) {
          __assert_rtn("getOldestEntry", "LRUStateBaseCache.hpp", 31, "entryIterator != m_cache.end()");
        }
        uint64_t v33 = (void *)*v9;
        uint64_t v34 = (_DWORD *)v33[1];
        uint64_t v35 = v33[2] - (void)v34;
        if (!v35 || (unint64_t v36 = v35 >> 2, v36 > v13) || (v36 <= 1 ? (v37 = 1) : (v37 = v36), *v34 != *__src))
        {
LABEL_43:
          *a4 = 0;
          sub_19E494468(v33 + 1, (char *)__src, (char *)&__src[v16], (uint64_t)(4 * v13) >> 2);
          unint64_t add = atomic_fetch_add(&qword_1EC009428, 1uLL);
          uint64_t v44 = v33[4];
          v33[4] = v7;
          v33[5] = add + 1;
          if (v44) {
            (*(void (**)(uint64_t))(*(void *)v44 + 8))(v44);
          }
          (*(void (**)(void *, uint64_t, uint64_t))(*v33 + 32))(v33, a5, a6);
          while (1)
          {
            uint64_t v45 = *(void *)(a1 + 16);
            uint64_t v46 = *(void *)(a1 + 24) - v45;
            if (!v46) {
              break;
            }
            uint64_t v47 = 0;
            unint64_t v48 = v46 >> 3;
            uint64_t v49 = v48 <= 1 ? 1 : v48;
            while (1)
            {
              uint64_t v50 = *(void *)(v45 + 8 * v47);
              uint64_t v51 = *(const void **)(v50 + 8);
              if (v13 == (uint64_t)(*(void *)(v50 + 16) - (void)v51) >> 2 && !memcmp(v51, __src, 4 * v13)) {
                break;
              }
              if (v49 == ++v47) {
                return 1;
              }
            }
            if ((v47 & 0x80000000) != 0) {
              break;
            }
            uint64_t v52 = *(void *)(v45 + 8 * v47);
            uint64_t result = 1;
            *(void *)(v52 + 40) = atomic_fetch_add(&qword_1EC009428, 1uLL) + 1;
            if (!--v13) {
              return result;
            }
          }
          return 1;
        }
        unint64_t v38 = 0;
        short float v39 = v34 + 1;
        uint64_t v40 = v37 - 1;
        while (v40 != v38)
        {
          int v41 = v39[v38];
          int v42 = __src[++v38];
          if (v41 != v42)
          {
            if (v36 <= v38) {
              return 0;
            }
            goto LABEL_43;
          }
        }
      }
    }
  }
  return 0;
}

void sub_19E4EF884(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E4EF8BC(void *a1)
{
  *a1 = &unk_1EF0BB8E8;
  uint64_t v2 = a1[6];
  a1[6] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (const void *)a1[5];
  if (v3) {
    CFRelease(v3);
  }
  a1[5] = 0;
  *a1 = &unk_1EF0BA6B0;
  unsigned int v4 = (void *)a1[2];
  if (v4)
  {
    uint64_t v5 = (void *)a1[3];
    long long v6 = (void *)a1[2];
    if (v5 != v4)
    {
      do
      {
        uint64_t v8 = *--v5;
        uint64_t v7 = v8;
        *uint64_t v5 = 0;
        if (v8) {
          (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
        }
      }
      while (v5 != v4);
      long long v6 = (void *)a1[2];
    }
    a1[3] = v4;
    operator delete(v6);
  }
  JUMPOUT(0x19F3BDCF0);
}

void *sub_19E4EF9E8(void *a1)
{
  *a1 = &unk_1EF0BB8E8;
  uint64_t v2 = a1[6];
  a1[6] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (const void *)a1[5];
  if (v3) {
    CFRelease(v3);
  }
  a1[5] = 0;
  *a1 = &unk_1EF0BA6B0;
  unsigned int v4 = (void *)a1[2];
  if (v4)
  {
    uint64_t v5 = (void *)a1[3];
    long long v6 = (void *)a1[2];
    if (v5 != v4)
    {
      do
      {
        uint64_t v8 = *--v5;
        uint64_t v7 = v8;
        *uint64_t v5 = 0;
        if (v8) {
          (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
        }
      }
      while (v5 != v4);
      long long v6 = (void *)a1[2];
    }
    a1[3] = v4;
    operator delete(v6);
  }
  return a1;
}

void *sub_19E4EFAF4(void *a1)
{
  uint64_t v2 = (void *)*a1;
  if (*a1)
  {
    uint64_t v3 = (void *)a1[1];
    unsigned int v4 = (void *)*a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *--v3;
        uint64_t v5 = v6;
        *uint64_t v3 = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        }
      }
      while (v3 != v2);
      unsigned int v4 = (void *)*a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void *sub_19E4EFB84()
{
  return &unk_1EF0B8358;
}

uint64_t sub_19E4EFB90(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZZN2LML24assembleIncrementalCacheIDhEENSt3__110unique_ptrINS_18MontrealStateCacheIT_EENS1_14default"
                     "_deleteIS5_EEEEmmRKNS_8ResourceERKNS_10ParametersEENKUlvE_clEvEUlvE_"
    || ((v3 & (unint64_t)"ZZN2LML24assembleIncrementalCacheIDhEENSt3__110unique_ptrINS_18MontrealStateCacheIT_EENS"
                                "1_14default_deleteIS5_EEEEmmRKNS_8ResourceERKNS_10ParametersEENKUlvE_clEvEUlvE_" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZZN2LML24assembleIncrementalCacheIDhEENSt3__110unique_ptrINS_18MontrealStateCacheIT_EENS1_14default_deleteIS5_EEEEmmRKNS_8ResourceERKNS_10ParametersEENKUlvE_clEvEUlvE_")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN2LML24assembleIncrementalCacheIDhEENSt3__110unique_ptrINS_18MontrealStateCacheIT_EENS1_14default_deleteIS5_EEEEmmRKNS_8ResourceERKNS_10ParametersEENKUlvE_clEvEUlvE_" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void sub_19E4EFBE8()
{
}

void sub_19E4EFCC0(_Unwind_Exception *a1)
{
  void *v1 = v2;
  uint64_t v5 = v1[4];
  v1[4] = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *v3;
  if (*v3)
  {
    v1[2] = v6;
    operator delete(v6);
  }
  MEMORY[0x19F3BDCF0](v1, 0x10B1C40C560DF64);
  _Unwind_Resume(a1);
}

void *sub_19E4EFD28(void *result, const void *a2, uint64_t a3)
{
  *((void *)result + 5) = atomic_fetch_add(&qword_1EC009428, 1uLL) + 1;
  if (a3) {
    return memmove(*((void **)result + 6), a2, 2 * a3);
  }
  return result;
}

float sub_19E4EFD54(uint64_t a1, unsigned int a2)
{
  *(void *)(a1 + 40) = atomic_fetch_add(&qword_1EC009428, 1uLL) + 1;
  _H0 = *(_WORD *)(*(void *)(a1 + 48) + 2 * a2);
  __asm { FCVT            S0, H0 }
  return result;
}