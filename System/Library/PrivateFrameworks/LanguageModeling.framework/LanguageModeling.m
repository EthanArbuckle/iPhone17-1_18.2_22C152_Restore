void sub_19E36D0E0(uint64_t a1)
{
  sub_19E36E760(*(void *)(a1 + 32) + 8, *(const __CFString **)(a1 + 40), *(void *)(a1 + 48));
}

uint64_t sub_19E36D0F4(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 16))();
}

uint64_t sub_19E36D118(uint64_t result)
{
  *(void *)(result + 16) = &unk_1EF0B8540;
  return result;
}

uint64_t language_modeling::v1::LanguageModel::deallocateInternalBuffers(language_modeling::v1::LanguageModel *this)
{
  return (*(uint64_t (**)(void))(**(void **)this + 128))(*(void *)this);
}

uint64_t language_modeling::v1::LanguageModel::wireMemory(language_modeling::v1::LanguageModel *this)
{
  return (*(uint64_t (**)(void))(**(void **)this + 112))(*(void *)this);
}

void sub_19E36D3E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)(a1 + 184) - *(void *)(a1 + 176) <= 0xFFFFFFFEuLL && a3 >= 1)
  {
    uint64_t v5 = a4;
    uint64_t v7 = 0;
    v194 = (_OWORD *)(a1 + 280);
    v195 = (_OWORD *)(a1 + 296);
    CFAllocatorRef contentsDeallocator = (const __CFAllocator *)*MEMORY[0x1E4F1CFA0];
    while (1)
    {
      LODWORD(v8) = *(_DWORD *)(a1 + 312);
      v10 = *(unsigned char **)(a1 + 184);
      unint64_t v9 = *(void *)(a1 + 192);
      if ((unint64_t)v10 < v9)
      {
        unsigned char *v10 = *(unsigned char *)(a2 + v7);
        uint64_t v11 = (uint64_t)(v10 + 1);
        goto LABEL_41;
      }
      v12 = *(unsigned char **)(a1 + 176);
      unint64_t v13 = v10 - v12;
      uint64_t v14 = v10 - v12 + 1;
      if (v14 < 0) {
        sub_19E37C7C4();
      }
      unint64_t v15 = v9 - (void)v12;
      if (2 * v15 > v14) {
        uint64_t v14 = 2 * v15;
      }
      size_t v16 = v15 >= 0x3FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v14;
      v17 = v16 ? (char *)operator new(v16) : 0;
      v18 = &v17[v13];
      v17[v13] = *(unsigned char *)(a2 + v7);
      uint64_t v11 = (uint64_t)&v17[v13 + 1];
      if (v10 != v12) {
        break;
      }
LABEL_39:
      *(void *)(a1 + 176) = v18;
      *(void *)(a1 + 184) = v11;
      *(void *)(a1 + 192) = &v17[v16];
      if (v10) {
        operator delete(v10);
      }
LABEL_41:
      *(void *)(a1 + 184) = v11;
      uint64_t v31 = *(void *)(a1 + 176);
      uint64_t v32 = *(int *)(a1 + 312);
      uint64_t v33 = v32 + 1;
      *(_DWORD *)(a1 + 312) = v32 + 1;
      int v34 = *(unsigned __int8 *)(v31 + v32);
      if ((v34 & 0x80) != 0)
      {
        int v35 = v11 - v31;
        if (v33 == v11 - v31) {
          goto LABEL_58;
        }
        if (v34 < 0xE0)
        {
          if (v34 < 0xC2) {
            goto LABEL_58;
          }
          int v38 = v34 & 0x1F;
        }
        else
        {
          if (v34 > 0xEF)
          {
            if (v34 > 0xF4
              || (unint64_t v40 = *(unsigned __int8 *)(v31 + v33),
                  ((byte_19E57CD41[v40 >> 4] >> (v34 + 16)) & 1) == 0)
              || (uint64_t v33 = v32 + 2, *(_DWORD *)(a1 + 312) = v32 + 2, v32 + 2 == v35)
              || (unsigned int v37 = *(unsigned __int8 *)(v31 + v33) ^ 0x80, v37 > 0x3F))
            {
LABEL_58:
              int v34 = -1;
              goto LABEL_59;
            }
            int v36 = v40 & 0x3F | ((v34 - 240) << 6);
          }
          else
          {
            int v36 = v34 & 0xF;
            if (((a00000000000000[v34 & 0xF] >> (*(unsigned char *)(v31 + v33) >> 5)) & 1) == 0) {
              goto LABEL_58;
            }
            unsigned int v37 = *(unsigned char *)(v31 + v33) & 0x3F;
          }
          LODWORD(v33) = v33 + 1;
          *(_DWORD *)(a1 + 312) = v33;
          if (v33 == v35) {
            goto LABEL_58;
          }
          int v38 = v37 | (v36 << 6);
        }
        unsigned int v39 = *(unsigned __int8 *)(v31 + (int)v33) ^ 0x80;
        if (v39 > 0x3F) {
          goto LABEL_58;
        }
        int v34 = v39 | (v38 << 6);
        *(_DWORD *)(a1 + 312) = v33 + 1;
      }
LABEL_59:
      v42 = *(char **)(a1 + 256);
      v41 = *(char **)(a1 + 264);
      uint64_t v43 = v41 - v42;
      if (v41 == v42)
      {
        int v45 = 0;
        if (v34 < 0) {
          goto LABEL_69;
        }
        goto LABEL_64;
      }
      v44 = *(char **)(a1 + 264);
      do
      {
        if (v44 == v42)
        {
          int v45 = 0;
          if (v34 < 0) {
            goto LABEL_69;
          }
LABEL_64:
          uint64_t v8 = (int)v8;
          if (!v34)
          {
            int v48 = 0;
            int v47 = 0;
            goto LABEL_83;
          }
          if (((1 << u_charType(v34)) & 0x7000) != 0)
          {
            if (v45)
            {
              int v47 = 0;
              int v48 = 9;
              goto LABEL_83;
            }
            int v48 = 0;
            int v69 = 0;
LABEL_226:
            uint64_t v128 = *(void *)(a1 + 200);
            uint64_t v127 = *(void *)(a1 + 208);
            if (v127 != v128)
            {
              uint64_t v129 = *(void *)(a1 + 224);
              uint64_t v130 = *(void *)(a1 + 232);
              if (v129 == v130
                || *(void *)(v127 - 16) + *(void *)(v127 - 24) > *(void *)(v130 - 16) + *(void *)(v130 - 24))
              {
                if (*(void *)(a1 + 8))
                {
                  if ((v45 - 1) <= 1)
                  {
                    if (v129 != v130)
                    {
                      uint64_t v131 = v129 + 32 * *(void *)(a1 + 248);
                      uint64_t v133 = *(void *)(v131 + 8);
                      uint64_t v132 = *(void *)(v131 + 16);
                      uint64_t v134 = v132 + v133;
                      for (i = (void *)(v128 + 16); ; i += 4)
                      {
                        uint64_t v136 = *(i - 1);
                        if (v136 >= v134 || *i + v136 > v134)
                        {
                          if (v136 != v133)
                          {
                            uint64_t v133 = *(i - 1);
                            goto LABEL_244;
                          }
                          if (*i != v132) {
                            goto LABEL_244;
                          }
                        }
                      }
                    }
                    uint64_t v133 = *(void *)(v128 + 8);
LABEL_244:
                    CFIndex v137 = *(void *)(v127 - 24) - v133 + *(void *)(v127 - 16);
                    CFStringRef v138 = CFStringCreateWithBytesNoCopy(0, (const UInt8 *)(*(void *)(a1 + 176) + v133), v137, *(_DWORD *)(a1 + 16), 0, contentsDeallocator);
                    if (v138)
                    {
                      CFStringRef v139 = v138;
                      v140 = *(__CFStringTokenizer **)(a1 + 8);
                      v199.length = CFStringGetLength(v138);
                      v199.location = 0;
                      CFStringTokenizerSetString(v140, v139, v199);
                      while (CFStringTokenizerAdvanceToNextToken(*(CFStringTokenizerRef *)(a1 + 8)))
                      {
                        CFRange CurrentTokenRange = CFStringTokenizerGetCurrentTokenRange((CFStringTokenizerRef)*(void *)(a1 + 8));
                        uint64_t v142 = sub_19E439008(v139, CurrentTokenRange.location, CurrentTokenRange.length, (char *)(*(void *)(a1 + 176) + v133), v137, *(_DWORD *)(a1 + 16));
                        if (v142 != -1)
                        {
                          uint64_t v144 = v143;
                          uint64_t v192 = v8;
                          uint64_t v145 = v142 + v133;
                          v147 = *(char **)(a1 + 232);
                          unint64_t v146 = *(void *)(a1 + 240);
                          if ((unint64_t)v147 >= v146)
                          {
                            v149 = *(char **)(a1 + 224);
                            uint64_t v150 = (v147 - v149) >> 5;
                            unint64_t v151 = v150 + 1;
                            if ((unint64_t)(v150 + 1) >> 59) {
                              goto LABEL_365;
                            }
                            uint64_t v152 = v146 - (void)v149;
                            if (v152 >> 4 > v151) {
                              unint64_t v151 = v152 >> 4;
                            }
                            if ((unint64_t)v152 >= 0x7FFFFFFFFFFFFFE0) {
                              unint64_t v151 = 0x7FFFFFFFFFFFFFFLL;
                            }
                            unint64_t v191 = v151;
                            if (v151)
                            {
                              uint64_t v190 = v142 + v133;
                              if (v151 >> 59) {
                                goto LABEL_362;
                              }
                              v153 = (char *)operator new(32 * v151);
                              uint64_t v150 = (v147 - v149) >> 5;
                              uint64_t v145 = v190;
                            }
                            else
                            {
                              v153 = 0;
                            }
                            v154 = &v153[32 * v150];
                            *(_DWORD *)v154 = 0;
                            *((void *)v154 + 1) = v145;
                            *((void *)v154 + 2) = v144;
                            *((void *)v154 + 3) = -1;
                            v155 = v154;
                            if (v147 == v149)
                            {
                              unint64_t v156 = v191;
                            }
                            else
                            {
                              unint64_t v156 = v191;
                              do
                              {
                                long long v157 = *((_OWORD *)v147 - 1);
                                *((_OWORD *)v155 - 2) = *((_OWORD *)v147 - 2);
                                *((_OWORD *)v155 - 1) = v157;
                                v155 -= 32;
                                v147 -= 32;
                              }
                              while (v147 != v149);
                              v147 = *(char **)(a1 + 224);
                            }
                            v148 = v154 + 32;
                            *(void *)(a1 + 224) = v155;
                            *(void *)(a1 + 232) = v154 + 32;
                            *(void *)(a1 + 240) = &v153[32 * v156];
                            if (v147) {
                              operator delete(v147);
                            }
                          }
                          else
                          {
                            *(_DWORD *)v147 = 0;
                            *((void *)v147 + 1) = v145;
                            *((void *)v147 + 2) = v143;
                            v148 = v147 + 32;
                            *((void *)v147 + 3) = -1;
                          }
                          uint64_t v5 = a4;
                          *(void *)(a1 + 232) = v148;
                          v133 += v144;
                          v137 -= v144;
                          uint64_t v8 = v192;
                        }
                      }
                      CFRelease(v139);
                    }
                  }
LABEL_268:
                  sub_19E4A68E4(a1, v5);
                }
                else if (!v48 || v48 == 9)
                {
                  goto LABEL_268;
                }
              }
            }
            if ((v45 & 0xFFFFFFF7) == 0 || v69) {
              goto LABEL_289;
            }
            v159 = *(char **)(a1 + 208);
            unint64_t v158 = *(void *)(a1 + 216);
            if ((unint64_t)v159 < v158)
            {
              *(_DWORD *)v159 = 2;
              *((void *)v159 + 1) = v8;
              v160 = v159 + 32;
              *((_OWORD *)v159 + 1) = xmmword_19E572990;
              goto LABEL_288;
            }
            uint64_t v161 = v8;
            v162 = *(unsigned char **)(a1 + 200);
            uint64_t v163 = (v159 - v162) >> 5;
            unint64_t v164 = v163 + 1;
            if (!((unint64_t)(v163 + 1) >> 59))
            {
              uint64_t v165 = v158 - (void)v162;
              if (v165 >> 4 > v164) {
                unint64_t v164 = v165 >> 4;
              }
              if ((unint64_t)v165 >= 0x7FFFFFFFFFFFFFE0) {
                unint64_t v166 = 0x7FFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v166 = v164;
              }
              if (!v166)
              {
                v167 = 0;
                goto LABEL_283;
              }
              if (!(v166 >> 59))
              {
                v167 = (char *)operator new(32 * v166);
LABEL_283:
                v168 = &v167[32 * v163];
                *(_DWORD *)v168 = 2;
                *((void *)v168 + 1) = v161;
                *((_OWORD *)v168 + 1) = xmmword_19E572990;
                v169 = v168;
                if (v159 != v162)
                {
                  do
                  {
                    long long v170 = *((_OWORD *)v159 - 1);
                    *((_OWORD *)v169 - 2) = *((_OWORD *)v159 - 2);
                    *((_OWORD *)v169 - 1) = v170;
                    v169 -= 32;
                    v159 -= 32;
                  }
                  while (v159 != v162);
                  v159 = *(char **)(a1 + 200);
                }
                v160 = v168 + 32;
                *(void *)(a1 + 200) = v169;
                *(void *)(a1 + 208) = v168 + 32;
                *(void *)(a1 + 216) = &v167[32 * v166];
                if (v159) {
                  operator delete(v159);
                }
LABEL_288:
                *(void *)(a1 + 208) = v160;
                sub_19E4A68E4(a1, v5);
LABEL_289:
                v172 = *(char **)(a1 + 264);
                unint64_t v171 = *(void *)(a1 + 272);
                if ((unint64_t)v172 < v171)
                {
                  *(_DWORD *)v172 = v69;
                  v173 = v172 + 4;
LABEL_310:
                  *(void *)(a1 + 264) = v173;
                  uint64_t v188 = *(void *)(a1 + 288);
                  if (v188 != -1) {
                    *(void *)(a1 + 296) = *(int *)(a1 + 312) - v188;
                  }
                  goto LABEL_8;
                }
                v174 = *(char **)(a1 + 256);
                uint64_t v175 = (v172 - v174) >> 2;
                unint64_t v176 = v175 + 1;
                if ((unint64_t)(v175 + 1) >> 62) {
LABEL_364:
                }
                  sub_19E37C7C4();
                uint64_t v177 = v171 - (void)v174;
                if (v177 >> 1 > v176) {
                  unint64_t v176 = v177 >> 1;
                }
                if ((unint64_t)v177 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v178 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v178 = v176;
                }
                if (!v178)
                {
                  v179 = 0;
LABEL_301:
                  v180 = (int *)&v179[4 * v175];
                  int *v180 = v69;
                  v173 = v180 + 1;
                  if (v172 != v174)
                  {
                    unint64_t v181 = v172 - 4 - v174;
                    if (v181 < 0x2C) {
                      goto LABEL_368;
                    }
                    if ((unint64_t)(v174 - v179) < 0x20) {
                      goto LABEL_368;
                    }
                    uint64_t v182 = (v181 >> 2) + 1;
                    v183 = &v179[4 * v175 - 16];
                    v184 = v172 - 16;
                    uint64_t v185 = v182 & 0x7FFFFFFFFFFFFFF8;
                    do
                    {
                      long long v186 = *(_OWORD *)v184;
                      *(v183 - 1) = *((_OWORD *)v184 - 1);
                      _OWORD *v183 = v186;
                      v183 -= 2;
                      v184 -= 32;
                      v185 -= 8;
                    }
                    while (v185);
                    v180 -= v182 & 0x7FFFFFFFFFFFFFF8;
                    v172 -= 4 * (v182 & 0x7FFFFFFFFFFFFFF8);
                    if (v182 != (v182 & 0x7FFFFFFFFFFFFFF8))
                    {
LABEL_368:
                      do
                      {
                        int v187 = *((_DWORD *)v172 - 1);
                        v172 -= 4;
                        *--v180 = v187;
                      }
                      while (v172 != v174);
                    }
                  }
                  *(void *)(a1 + 256) = v180;
                  *(void *)(a1 + 264) = v173;
                  *(void *)(a1 + 272) = &v179[4 * v178];
                  if (v174) {
                    operator delete(v174);
                  }
                  goto LABEL_310;
                }
                if (!(v178 >> 62))
                {
                  v179 = operator new(4 * v178);
                  goto LABEL_301;
                }
              }
LABEL_362:
              sub_19E37C2B8();
            }
LABEL_365:
            sub_19E37C7C4();
          }
          int v47 = 0;
          int v48 = 12;
          if ((v34 - 127995) >= 5 && v34 != 65039)
          {
            if ((v34 & 0xFFFFFFFE) == 0x200C)
            {
              int v47 = 0;
              int v48 = 14;
              goto LABEL_315;
            }
            int v48 = 1;
            if (((1 << u_charType(v34)) & 0x40001FE) != 0)
            {
              int v47 = 0;
              goto LABEL_315;
            }
            if (((1 << u_charType(v34)) & 0x78001) != 0)
            {
              int v48 = 0;
              int v47 = 1;
              goto LABEL_315;
            }
            if ((v34 & 0xFFFFFFFE) == 0xFFFC)
            {
              int v47 = 0;
              int v48 = 10;
              goto LABEL_315;
            }
            int v47 = 0;
            int v48 = 3;
            if (v34 > 1522)
            {
              uint64_t v8 = (int)v8;
              if (((v34 - 8208) > 9 || ((1 << (v34 - 16)) & 0x20B) == 0)
                && (v34 - 1523) >= 2)
              {
                goto LABEL_324;
              }
              goto LABEL_83;
            }
            uint64_t v8 = (int)v8;
            if ((v34 - 38) <= 0x3A && ((1 << (v34 - 38)) & 0x400000000000083) != 0
              || v34 == 699)
            {
              goto LABEL_83;
            }
LABEL_324:
            if (((1 << u_charType(v34)) & 0xE00) != 0)
            {
              int v47 = 0;
              int v48 = 2;
              goto LABEL_83;
            }
            if (v34 > 7293)
            {
              if (v34 > 12289)
              {
                if (v34 <= 44010)
                {
                  if (v34 != 12290)
                  {
                    if (v34 == 43760) {
                      goto LABEL_354;
                    }
                    goto LABEL_357;
                  }
                }
                else
                {
                  if (v34 == 44011) {
                    goto LABEL_354;
                  }
                  if (v34 != 65281 && v34 != 65311) {
                    goto LABEL_357;
                  }
                }
                int v47 = 0;
                int v48 = 8;
                goto LABEL_83;
              }
              if ((v34 - 7294) < 2 || (v34 - 8252) < 2) {
                goto LABEL_354;
              }
              if (v34 == 8230)
              {
                int v47 = 0;
                int v48 = 7;
                goto LABEL_83;
              }
            }
            else if (v34 > 3571)
            {
              if ((v34 - 6100) <= 6 && ((1 << (v34 + 44)) & 0x43) != 0
                || (v34 - 4170) < 2
                || v34 == 3572)
              {
                goto LABEL_354;
              }
            }
            else
            {
              if (v34 <= 1566)
              {
                if (v34 == 33) {
                  goto LABEL_354;
                }
                if (v34 != 46)
                {
                  uint64_t v8 = (int)v8;
                  if (v34 != 63) {
                    goto LABEL_357;
                  }
LABEL_354:
                  int v47 = 0;
                  int v48 = 5;
                  goto LABEL_83;
                }
                int v47 = 0;
                int v48 = 6;
LABEL_315:
                uint64_t v8 = (int)v8;
                goto LABEL_83;
              }
              if ((v34 - 2404) < 2 || v34 == 1567) {
                goto LABEL_354;
              }
            }
LABEL_357:
            if ((v34 - 127462) >= 0x1A)
            {
              int v189 = sub_19E438F7C(v34);
              int v47 = 0;
              if (v189) {
                int v48 = 11;
              }
              else {
                int v48 = 4;
              }
            }
            else
            {
              int v47 = 0;
              int v48 = 13;
            }
            goto LABEL_315;
          }
LABEL_83:
          switch(v45)
          {
            case 0:
              goto LABEL_203;
            case 1:
            case 2:
            case 3:
            case 4:
            case 7:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
              if (v48) {
                goto LABEL_85;
              }
              goto LABEL_86;
            case 5:
            case 6:
              if (v48 == 9) {
                int v47 = 1;
              }
              if (!v48) {
                goto LABEL_86;
              }
LABEL_85:
              if (v48 != 9)
              {
                switch(v45)
                {
                  case 1:
                    if (((1 << v48) & 0x400E) == 0) {
                      break;
                    }
                    goto LABEL_130;
                  case 2:
                    if ((v48 - 11) >= 3) {
                      goto LABEL_130;
                    }
                    break;
                  case 3:
                    if ((v48 - 4) >= 0xFFFFFFFD) {
                      goto LABEL_130;
                    }
                    break;
                  case 4:
                    if ((v48 - 4) >= 0xFFFFFFFE) {
                      goto LABEL_130;
                    }
                    break;
                  case 6:
                    if ((v48 & 0xFFFFFFFB) == 2) {
                      goto LABEL_130;
                    }
                    break;
                  case 8:
                    if (v48 == 8) {
                      goto LABEL_130;
                    }
                    break;
                  case 11:
                    if ((v48 & 0xFFFFFFFD) == 0xC) {
                      goto LABEL_130;
                    }
                    break;
                  case 13:
                    if (v48 == 13) {
                      goto LABEL_130;
                    }
                    break;
                  case 14:
                    if ((v48 - 11) < 4 || v48 == 1) {
                      goto LABEL_130;
                    }
                    break;
                  default:
                    break;
                }
              }
LABEL_86:
              uint64_t v55 = v8;
              v57 = *(char **)(a1 + 208);
              unint64_t v56 = *(void *)(a1 + 216);
              if ((unint64_t)v57 >= v56)
              {
                int v60 = v48;
                uint64_t v61 = v7;
                int v62 = v47;
                v63 = *(char **)(a1 + 200);
                uint64_t v64 = (v57 - v63) >> 5;
                unint64_t v65 = v64 + 1;
                if ((unint64_t)(v64 + 1) >> 59) {
                  goto LABEL_365;
                }
                uint64_t v66 = v56 - (void)v63;
                if (v66 >> 4 > v65) {
                  unint64_t v65 = v66 >> 4;
                }
                if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFE0) {
                  unint64_t v67 = 0x7FFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v67 = v65;
                }
                if (v67)
                {
                  if (v67 >> 59) {
                    goto LABEL_362;
                  }
                  v68 = (char *)operator new(32 * v67);
                }
                else
                {
                  v68 = 0;
                }
                long long v79 = v194[1];
                v80 = &v68[32 * v64];
                *(_OWORD *)v80 = *v194;
                *((_OWORD *)v80 + 1) = v79;
                v81 = v80;
                if (v57 != v63)
                {
                  do
                  {
                    long long v82 = *((_OWORD *)v57 - 1);
                    *((_OWORD *)v81 - 2) = *((_OWORD *)v57 - 2);
                    *((_OWORD *)v81 - 1) = v82;
                    v81 -= 32;
                    v57 -= 32;
                  }
                  while (v57 != v63);
                  v57 = *(char **)(a1 + 200);
                }
                v59 = v80 + 32;
                *(void *)(a1 + 200) = v81;
                *(void *)(a1 + 208) = v80 + 32;
                *(void *)(a1 + 216) = &v68[32 * v67];
                if (v57) {
                  operator delete(v57);
                }
                int v47 = v62;
                uint64_t v7 = v61;
                int v48 = v60;
              }
              else
              {
                long long v58 = v194[1];
                *(_OWORD *)v57 = *v194;
                *((_OWORD *)v57 + 1) = v58;
                v59 = v57 + 32;
              }
              *(void *)(a1 + 208) = v59;
              if (v48) {
                BOOL v83 = v48 == 9;
              }
              else {
                BOOL v83 = 1;
              }
              uint64_t v8 = v55;
              if (v83) {
                uint64_t v84 = -1;
              }
              else {
                uint64_t v84 = v55;
              }
              *(_DWORD *)(a1 + 280) = 0;
              *(void *)(a1 + 288) = v84;
              uint64_t v5 = a4;
              _OWORD *v195 = xmmword_19E572990;
LABEL_130:
              if (v47) {
                int v69 = 0;
              }
              else {
                int v69 = v48;
              }
              goto LABEL_226;
            case 8:
              v86 = *(char **)(a1 + 208);
              unint64_t v85 = *(void *)(a1 + 216);
              if ((unint64_t)v86 >= v85)
              {
                uint64_t v89 = v8;
                v90 = *(char **)(a1 + 200);
                uint64_t v91 = (v86 - v90) >> 5;
                unint64_t v92 = v91 + 1;
                if ((unint64_t)(v91 + 1) >> 59) {
                  goto LABEL_365;
                }
                uint64_t v93 = v85 - (void)v90;
                if (v93 >> 4 > v92) {
                  unint64_t v92 = v93 >> 4;
                }
                if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFE0) {
                  unint64_t v94 = 0x7FFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v94 = v92;
                }
                if (v94)
                {
                  if (v94 >> 59) {
                    goto LABEL_362;
                  }
                  v95 = (char *)operator new(32 * v94);
                }
                else
                {
                  v95 = 0;
                }
                long long v96 = v194[1];
                v97 = &v95[32 * v91];
                *(_OWORD *)v97 = *v194;
                *((_OWORD *)v97 + 1) = v96;
                v98 = v97;
                if (v86 != v90)
                {
                  do
                  {
                    long long v99 = *((_OWORD *)v86 - 1);
                    *((_OWORD *)v98 - 2) = *((_OWORD *)v86 - 2);
                    *((_OWORD *)v98 - 1) = v99;
                    v98 -= 32;
                    v86 -= 32;
                  }
                  while (v86 != v90);
                  v86 = *(char **)(a1 + 200);
                }
                v88 = v97 + 32;
                *(void *)(a1 + 200) = v98;
                *(void *)(a1 + 208) = v97 + 32;
                *(void *)(a1 + 216) = &v95[32 * v94];
                uint64_t v8 = v89;
                if (v86) {
                  operator delete(v86);
                }
                uint64_t v5 = a4;
              }
              else
              {
                long long v87 = v194[1];
                *(_OWORD *)v86 = *v194;
                *((_OWORD *)v86 + 1) = v87;
                v88 = v86 + 32;
              }
              *(void *)(a1 + 208) = v88;
              if (v48 == 8) {
                goto LABEL_195;
              }
              unint64_t v100 = *(void *)(a1 + 216);
              if ((unint64_t)v88 >= v100)
              {
                uint64_t v101 = v8;
                v103 = *(char **)(a1 + 200);
                uint64_t v104 = (v88 - v103) >> 5;
                unint64_t v105 = v104 + 1;
                if ((unint64_t)(v104 + 1) >> 59) {
                  goto LABEL_365;
                }
                uint64_t v106 = v100 - (void)v103;
                if (v106 >> 4 > v105) {
                  unint64_t v105 = v106 >> 4;
                }
                if ((unint64_t)v106 >= 0x7FFFFFFFFFFFFFE0) {
                  unint64_t v107 = 0x7FFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v107 = v105;
                }
                if (v107)
                {
                  if (v107 >> 59) {
                    goto LABEL_362;
                  }
                  v108 = (char *)operator new(32 * v107);
                }
                else
                {
                  v108 = 0;
                }
                v109 = &v108[32 * v104];
                *(_DWORD *)v109 = 2;
                v110 = &v108[32 * v107];
                *((void *)v109 + 1) = v101;
                *((_OWORD *)v109 + 1) = xmmword_19E572990;
                v102 = v109 + 32;
                if (v88 == v103)
                {
                  *(void *)(a1 + 200) = v109;
                  *(void *)(a1 + 208) = v102;
                  *(void *)(a1 + 216) = v110;
                }
                else
                {
                  do
                  {
                    long long v111 = *((_OWORD *)v88 - 1);
                    *((_OWORD *)v109 - 2) = *((_OWORD *)v88 - 2);
                    *((_OWORD *)v109 - 1) = v111;
                    v109 -= 32;
                    v88 -= 32;
                  }
                  while (v88 != v103);
                  v88 = *(char **)(a1 + 200);
                  *(void *)(a1 + 200) = v109;
                  *(void *)(a1 + 208) = v102;
                  *(void *)(a1 + 216) = v110;
                  if (!v88) {
                    goto LABEL_194;
                  }
                }
                operator delete(v88);
              }
              else
              {
                *(_DWORD *)v88 = 2;
                uint64_t v101 = v8;
                *((void *)v88 + 1) = v8;
                v102 = v88 + 32;
                *((_OWORD *)v88 + 1) = xmmword_19E572990;
              }
LABEL_194:
              *(void *)(a1 + 208) = v102;
              uint64_t v8 = v101;
LABEL_195:
              if (v48) {
                BOOL v112 = v48 == 9;
              }
              else {
                BOOL v112 = 1;
              }
              *(_DWORD *)(a1 + 280) = 0;
              if (v112) {
                uint64_t v113 = -1;
              }
              else {
                uint64_t v113 = v8;
              }
              *(void *)(a1 + 288) = v113;
              _OWORD *v195 = xmmword_19E572990;
              if (v48 == 9)
              {
                int v69 = 0;
                goto LABEL_226;
              }
LABEL_203:
              if ((v48 & 7) != 0)
              {
                v115 = *(char **)(a1 + 208);
                unint64_t v114 = *(void *)(a1 + 216);
                if ((unint64_t)v115 >= v114)
                {
                  uint64_t v116 = v8;
                  v118 = *(char **)(a1 + 200);
                  uint64_t v119 = (v115 - v118) >> 5;
                  unint64_t v120 = v119 + 1;
                  if ((unint64_t)(v119 + 1) >> 59) {
                    goto LABEL_365;
                  }
                  uint64_t v121 = v114 - (void)v118;
                  if (v121 >> 4 > v120) {
                    unint64_t v120 = v121 >> 4;
                  }
                  if ((unint64_t)v121 >= 0x7FFFFFFFFFFFFFE0) {
                    unint64_t v122 = 0x7FFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v122 = v120;
                  }
                  if (v122)
                  {
                    if (v122 >> 59) {
                      goto LABEL_362;
                    }
                    v123 = (char *)operator new(32 * v122);
                  }
                  else
                  {
                    v123 = 0;
                  }
                  v124 = &v123[32 * v119];
                  *(_DWORD *)v124 = 1;
                  *((void *)v124 + 1) = v116;
                  *((_OWORD *)v124 + 1) = xmmword_19E572990;
                  v125 = v124;
                  if (v115 != v118)
                  {
                    do
                    {
                      long long v126 = *((_OWORD *)v115 - 1);
                      *((_OWORD *)v125 - 2) = *((_OWORD *)v115 - 2);
                      *((_OWORD *)v125 - 1) = v126;
                      v125 -= 32;
                      v115 -= 32;
                    }
                    while (v115 != v118);
                    v115 = *(char **)(a1 + 200);
                  }
                  v117 = v124 + 32;
                  *(void *)(a1 + 200) = v125;
                  *(void *)(a1 + 208) = v124 + 32;
                  *(void *)(a1 + 216) = &v123[32 * v122];
                  if (v115) {
                    operator delete(v115);
                  }
                }
                else
                {
                  *(_DWORD *)v115 = 1;
                  uint64_t v116 = v8;
                  *((void *)v115 + 1) = v8;
                  v117 = v115 + 32;
                  *((_OWORD *)v115 + 1) = xmmword_19E572990;
                }
                *(void *)(a1 + 208) = v117;
                sub_19E4A68E4(a1, v5);
                uint64_t v8 = v116;
              }
LABEL_222:
              if (v48 && v48 != 9 && *(void *)(a1 + 288) == -1)
              {
                *(_DWORD *)(a1 + 280) = 0;
                *(void *)(a1 + 288) = v8;
                int v69 = v48;
                _OWORD *v195 = xmmword_19E572990;
              }
              else
              {
LABEL_225:
                int v69 = v48;
              }
              goto LABEL_226;
            case 9:
              goto LABEL_222;
            default:
              goto LABEL_225;
          }
        }
        int v46 = *((_DWORD *)v44 - 1);
        v44 -= 4;
        int v45 = v46;
      }
      while (v46 == 15);
      if ((v34 & 0x80000000) == 0) {
        goto LABEL_64;
      }
LABEL_69:
      *(_DWORD *)(a1 + 312) = v8;
      unint64_t v49 = *(void *)(a1 + 272);
      if ((unint64_t)v41 < v49)
      {
        *(_DWORD *)v41 = 15;
        *(void *)(a1 + 264) = v41 + 4;
        goto LABEL_8;
      }
      uint64_t v50 = v43 >> 2;
      unint64_t v51 = (v43 >> 2) + 1;
      if (v51 >> 62) {
        goto LABEL_364;
      }
      uint64_t v52 = v49 - (void)v42;
      if (v52 >> 1 > v51) {
        unint64_t v51 = v52 >> 1;
      }
      if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v53 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v53 = v51;
      }
      if (!v53)
      {
        v54 = 0;
        goto LABEL_102;
      }
      if (v53 >> 62) {
        goto LABEL_362;
      }
      v54 = operator new(4 * v53);
LABEL_102:
      v70 = &v54[4 * v50];
      _DWORD *v70 = 15;
      v71 = v70 + 1;
      if (v41 != v42)
      {
        unint64_t v72 = v41 - 4 - v42;
        if (v72 < 0x2C) {
          goto LABEL_369;
        }
        if ((unint64_t)(v42 - v54) < 0x20) {
          goto LABEL_369;
        }
        uint64_t v73 = (v72 >> 2) + 1;
        v74 = &v54[4 * v50 - 16];
        v75 = v41 - 16;
        uint64_t v76 = v73 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v77 = *(_OWORD *)v75;
          *(v74 - 1) = *((_OWORD *)v75 - 1);
          _OWORD *v74 = v77;
          v74 -= 2;
          v75 -= 32;
          v76 -= 8;
        }
        while (v76);
        v70 -= v73 & 0x7FFFFFFFFFFFFFF8;
        v41 -= 4 * (v73 & 0x7FFFFFFFFFFFFFF8);
        if (v73 != (v73 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_369:
          do
          {
            int v78 = *((_DWORD *)v41 - 1);
            v41 -= 4;
            *--v70 = v78;
          }
          while (v41 != v42);
        }
      }
      *(void *)(a1 + 256) = v70;
      *(void *)(a1 + 264) = v71;
      *(void *)(a1 + 272) = &v54[4 * v53];
      if (v42) {
        operator delete(v42);
      }
      *(void *)(a1 + 264) = v71;
LABEL_8:
      if (++v7 == a3) {
        return;
      }
    }
    if (v13 < 8 || (unint64_t)(v12 - v17) < 0x20) {
      goto LABEL_35;
    }
    if (v13 >= 0x20)
    {
      unint64_t v19 = v13 & 0xFFFFFFFFFFFFFFE0;
      v20 = &v17[v13 - 16];
      v21 = (long long *)(v10 - 16);
      unint64_t v22 = v13 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v23 = *v21;
        *((_OWORD *)v20 - 1) = *(v21 - 1);
        *(_OWORD *)v20 = v23;
        v20 -= 32;
        v21 -= 2;
        v22 -= 32;
      }
      while (v22);
      if (v13 == v19) {
        goto LABEL_32;
      }
      if ((v13 & 0x18) == 0)
      {
        v18 -= v19;
        v10 -= v19;
        goto LABEL_35;
      }
    }
    else
    {
      unint64_t v19 = 0;
    }
    unint64_t v24 = v19 - (v13 & 0xFFFFFFFFFFFFFFF8);
    v25 = &v10[-v19];
    v26 = &v17[&v10[-v19] - v12 - 8];
    v27 = (uint64_t *)(v25 - 8);
    do
    {
      uint64_t v28 = *v27--;
      *(void *)v26 = v28;
      v26 -= 8;
      v24 += 8;
    }
    while (v24);
    if (v13 == (v13 & 0xFFFFFFFFFFFFFFF8))
    {
LABEL_32:
      v10 = v12;
LABEL_38:
      v18 = v17;
      goto LABEL_39;
    }
    v18 -= v13 & 0xFFFFFFFFFFFFFFF8;
    v10 -= v13 & 0xFFFFFFFFFFFFFFF8;
LABEL_35:
    v29 = v18 - 1;
    do
    {
      char v30 = *--v10;
      *v29-- = v30;
    }
    while (v10 != v12);
    v10 = *(unsigned char **)(a1 + 176);
    goto LABEL_38;
  }
}

void *sub_19E36E590(void *a1, CFTypeRef cf)
{
  *a1 = cf;
  if (cf)
  {
    CFTypeID v3 = CFGetTypeID(cf);
    if (v3 != CFDictionaryGetTypeID())
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x19F3BD790](exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  return a1;
}

void sub_19E36E618(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(a1);
}

BOOL sub_19E36E648(const __CFLocale *a1, const __CFString *a2)
{
  CFStringRef Value = (const __CFString *)CFLocaleGetValue(a1, (CFLocaleKey)*MEMORY[0x1E4F1D218]);
  return CFEqual(a2, Value);
}

uint64_t LMStreamTokenizerCreate(uint64_t a1, int a2)
{
  uint64_t v2 = sub_19E374E88(a1, a2);
  CFAllocatorGetDefault();
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EC009390, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EC009390))
  {
    qword_1EC3050B0 = 0;
    unk_1EC3050C0 = 0u;
    unk_1EC3050D0 = 0u;
    qword_1EC0093A0 = _CFRuntimeRegisterClass();
    __cxa_guard_release(&qword_1EC009390);
  }
  uint64_t result = _CFRuntimeCreateInstance();
  *(void *)(result + 24) = v2;
  return result;
}

void sub_19E36E748(_Unwind_Exception *a1)
{
}

void sub_19E36E760(uint64_t a1, const __CFString *a2, uint64_t a3)
{
  if (!a2) {
    return;
  }
  p_p = &__p;
  sub_19E37774C(a2, &__p);
  v6 = (uint64_t **)(a1 + 184);
  uint64_t v7 = *(uint64_t ***)(a1 + 184);
  size_t v8 = v30;
  if (!v7)
  {
    size_t v9 = v29;
    goto LABEL_36;
  }
  size_t v9 = v29;
  if ((v30 & 0x80u) == 0)
  {
    size_t v10 = v30;
  }
  else
  {
    p_p = __p;
    size_t v10 = v29;
  }
  uint64_t v11 = (uint64_t **)(a1 + 184);
  do
  {
    while (1)
    {
      int v12 = *((char *)v7 + 55);
      unint64_t v13 = v12 >= 0 ? (uint64_t *)(v7 + 4) : v7[4];
      size_t v14 = v12 >= 0 ? *((unsigned __int8 *)v7 + 55) : (size_t)v7[5];
      size_t v15 = v10 >= v14 ? v14 : v10;
      int v16 = memcmp(v13, p_p, v15);
      if (v16) {
        break;
      }
      if (v14 >= v10) {
        goto LABEL_21;
      }
LABEL_7:
      uint64_t v7 = (uint64_t **)v7[1];
      if (!v7) {
        goto LABEL_22;
      }
    }
    if (v16 < 0) {
      goto LABEL_7;
    }
LABEL_21:
    uint64_t v11 = v7;
    uint64_t v7 = (uint64_t **)*v7;
  }
  while (v7);
LABEL_22:
  if (v11 == v6) {
    goto LABEL_36;
  }
  int v17 = *((char *)v11 + 55);
  if (v17 >= 0) {
    v18 = (uint64_t *)(v11 + 4);
  }
  else {
    v18 = v11[4];
  }
  if (v17 >= 0) {
    size_t v19 = *((unsigned __int8 *)v11 + 55);
  }
  else {
    size_t v19 = (size_t)v11[5];
  }
  if (v19 >= v10) {
    size_t v20 = v10;
  }
  else {
    size_t v20 = v19;
  }
  int v21 = memcmp(p_p, v18, v20);
  if (!v21)
  {
    if (v10 < v19) {
      goto LABEL_36;
    }
LABEL_55:
    *(_DWORD *)a3 = *((_DWORD *)v11 + 14);
    *(void *)(a3 + 8) = v11[8];
    if ((v8 & 0x80) == 0) {
      return;
    }
    goto LABEL_41;
  }
  if ((v21 & 0x80000000) == 0) {
    goto LABEL_55;
  }
LABEL_36:
  if ((v8 & 0x80u) == 0) {
    size_t v22 = v8;
  }
  else {
    size_t v22 = v9;
  }
  if (!v22)
  {
    long long v23 = *(uint64_t ***)(a1 + 176);
    if (v23 == v6)
    {
      int v24 = 0;
    }
    else
    {
      int v24 = 0;
      do
      {
        if (*((_DWORD *)v23 + 14) > v24) {
          int v24 = *((_DWORD *)v23 + 14);
        }
        v25 = v23[1];
        if (v25)
        {
          do
          {
            v26 = (uint64_t **)v25;
            v25 = (uint64_t *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (uint64_t **)v23[2];
            BOOL v27 = *v26 == (uint64_t *)v23;
            long long v23 = v26;
          }
          while (!v27);
        }
        long long v23 = v26;
      }
      while (v26 != v6);
    }
    *(_DWORD *)a3 = v24;
    if ((v8 & 0x80) == 0) {
      return;
    }
LABEL_41:
    operator delete(__p);
    return;
  }
  if ((v8 & 0x80) != 0) {
    goto LABEL_41;
  }
}

uint64_t sub_19E36E93C(uint64_t a1, const __CFDictionary *a2)
{
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = a1 + 40;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 80) = 0;
  sub_19E3F7C4C((void **)(a1 + 64), "selfSender");
  if (CFDictionaryContainsKey(a2, (const void *)kLMLanguageModelAppGenreKey))
  {
    CFStringRef Value = CFDictionaryGetValue(a2, (const void *)kLMLanguageModelAppGenreKey);
    v6 = Value;
    if (Value)
    {
      if (CFEqual(Value, (CFTypeRef)kLMLanguageModelInformalAppGenre))
      {
        int v7 = 1;
      }
      else
      {
        if (!CFEqual(v6, (CFTypeRef)kLMLanguageModelFormalAppGenre)) {
          goto LABEL_9;
        }
        int v7 = 2;
      }
    }
    else
    {
      int v7 = 0;
    }
    *(_DWORD *)(a1 + 24) = v7;
  }
LABEL_9:
  if (CFDictionaryContainsKey(a2, (const void *)kLMLanguageModelContextIdentifierKey))
  {
    CFStringRef v8 = (const __CFString *)CFDictionaryGetValue(a2, (const void *)kLMLanguageModelContextIdentifierKey);
    sub_19E3743EC((void **)a1, v8, 0);
  }
  else
  {
    BOOL v15 = 0;
    CFStringRef v10 = (const __CFString *)CFDictionaryGetValue(a2, (const void *)kLMLanguageModelAppContextKey);
    sub_19E3743EC((void **)a1, v10, &v15);
    if (!v15)
    {
      uint64_t v11 = (void *)CFDictionaryGetValue(a2, (const void *)kLMLanguageModelRecipientContextKey);
      sub_19E377C98(a1, v11);
    }
    CFStringRef v12 = (const __CFString *)CFDictionaryGetValue(a2, (const void *)kLMLanguageModelSpatialTemporalContextKey);
    CFStringRef v13 = v12;
    if (v12)
    {
      CFTypeID v14 = CFGetTypeID(v12);
      if (v14 == CFStringGetTypeID())
      {
        sub_19E37774C(v13, &v16);
        if (*(char *)(a1 + 63) < 0) {
          operator delete(*(void **)v4);
        }
        *(_OWORD *)uint64_t v4 = v16;
        *(void *)(v4 + 16) = v17;
      }
    }
    else
    {
      if (*(char *)(a1 + 63) < 0)
      {
        *(void *)(a1 + 48) = 0;
        uint64_t v4 = *(void *)(a1 + 40);
      }
      else
      {
        *(unsigned char *)(a1 + 63) = 0;
      }
      *(unsigned char *)uint64_t v4 = 0;
    }
  }
  return a1;
}

void sub_19E36EB1C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 87) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 63) < 0) {
    operator delete(*v4);
  }
  sub_19E4F9950(v2);
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_19E36EB64(uint64_t a1, const void *a2, const __CFDictionary *a3)
{
  *(void *)a1 = 850045863;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  sub_19E36E93C(a1 + 88, a3);
  if (a2) {
    CFTypeRef v6 = CFRetain(a2);
  }
  else {
    CFTypeRef v6 = 0;
  }
  *(void *)(a1 + 176) = v6;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 196) = 2;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 408) = 0;
  *(void *)(a1 + 440) = 0;
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 432) = 0;
  sub_19E36ECB4(a1);
  sub_19E3750B8(a1, a3, 1);
  return a1;
}

void sub_19E36EC20(_Unwind_Exception *a1)
{
  sub_19E3D7810(v2);
  uint64_t v4 = *(void **)(v1 + 64);
  if (v4)
  {
    *(void *)(v1 + 72) = v4;
    operator delete(v4);
  }
  std::mutex::~mutex((std::mutex *)v1);
  _Unwind_Resume(a1);
}

double sub_19E36ECB4(uint64_t a1)
{
  unsigned int v2 = 0;
  *(unsigned char *)(a1 + 192) = 1;
  *(_DWORD *)(a1 + 304) = 0x40000000;
  uint64_t v26 = a1 + 324;
  *(int32x2_t *)(a1 + 336) = vdup_n_s32(0x3E4CCCCDu);
  *(_DWORD *)(a1 + 256) = 1065437102;
  *(void *)(a1 + 248) = 0x3EE666663F266666;
  *(void *)(a1 + 420) = 0x3D4CCCCD3F733333;
  *(_OWORD *)(a1 + 204) = xmmword_19E573120;
  *(_OWORD *)(a1 + 220) = xmmword_19E573130;
  *(void *)(a1 + 236) = 0x3F19999A3F4CCCCDLL;
  unsigned int v3 = 5;
  *(_DWORD *)(a1 + 244) = 5;
  uint64_t v4 = (void **)(a1 + 264);
  uint64_t v5 = *(float **)(a1 + 272);
  do
  {
    float v7 = 1.0 / (float)v3;
    unint64_t v8 = *(void *)(a1 + 280);
    if ((unint64_t)v5 < v8)
    {
      *uint64_t v5 = v7;
      CFTypeRef v6 = v5 + 1;
      goto LABEL_3;
    }
    size_t v9 = (float *)*v4;
    uint64_t v10 = (char *)v5 - (unsigned char *)*v4;
    uint64_t v11 = v10 >> 2;
    unint64_t v12 = (v10 >> 2) + 1;
    if (v12 >> 62) {
      sub_19E37C7C4();
    }
    uint64_t v13 = v8 - (void)v9;
    if (v13 >> 1 > v12) {
      unint64_t v12 = v13 >> 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      if (v14 >> 62) {
        sub_19E37C2B8();
      }
      BOOL v15 = operator new(4 * v14);
    }
    else
    {
      BOOL v15 = 0;
    }
    long long v16 = (float *)&v15[4 * v11];
    *long long v16 = v7;
    CFTypeRef v6 = v16 + 1;
    if (v5 != v9)
    {
      unint64_t v17 = (char *)(v5 - 1) - (char *)v9;
      if (v17 < 0xBC)
      {
        v18 = v5;
        goto LABEL_27;
      }
      if (&v15[v10 - 4 - (v17 & 0xFFFFFFFFFFFFFFFCLL)] > &v15[v10 - 4])
      {
        v18 = v5;
        goto LABEL_27;
      }
      if ((float *)((char *)v5 - (v17 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v5 - 1)
      {
        v18 = v5;
        do
        {
LABEL_27:
          int v24 = *((_DWORD *)v18-- - 1);
          *((_DWORD *)v16-- - 1) = v24;
        }
        while (v18 != v9);
        goto LABEL_28;
      }
      if ((unint64_t)((char *)v5 - v15 - v10) < 0x20)
      {
        v18 = v5;
        goto LABEL_27;
      }
      uint64_t v19 = (v17 >> 2) + 1;
      v18 = &v5[-(v19 & 0x7FFFFFFFFFFFFFF8)];
      size_t v20 = &v15[4 * v11 - 16];
      int v21 = v5 - 4;
      uint64_t v22 = v19 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v23 = *(_OWORD *)v21;
        *(v20 - 1) = *((_OWORD *)v21 - 1);
        _OWORD *v20 = v23;
        v20 -= 2;
        v21 -= 8;
        v22 -= 8;
      }
      while (v22);
      v16 -= v19 & 0x7FFFFFFFFFFFFFF8;
      if (v19 != (v19 & 0x7FFFFFFFFFFFFFF8)) {
        goto LABEL_27;
      }
    }
LABEL_28:
    *(void *)(a1 + 264) = v16;
    *(void *)(a1 + 272) = v6;
    *(void *)(a1 + 280) = &v15[4 * v14];
    if (v9)
    {
      operator delete(v9);
      unsigned int v3 = *(_DWORD *)(a1 + 244);
    }
LABEL_3:
    *(void *)(a1 + 272) = v6;
    ++v2;
    uint64_t v5 = v6;
  }
  while (v2 < v3);
  *(void *)(a1 + 288) = 0xFFFFFF00C00000;
  *(void *)(a1 + 296) = 0x4248000040800000;
  *(void *)(a1 + 308) = 0x200000000007D0;
  *(void *)(a1 + 316) = 0x1800003BA3D70ALL;
  *(_DWORD *)(v26 + 8) = 1065353216;
  *(void *)uint64_t v26 = 0x3F80000000000000;
  *(unsigned char *)(a1 + 344) = 1;
  *(void *)(a1 + 348) = 8;
  *(_WORD *)(a1 + 400) = 0;
  *(void *)(v26 + 32) = 0x10100010001;
  *(_WORD *)(a1 + 364) = 1;
  *(_OWORD *)(a1 + 368) = xmmword_19E573150;
  *(void *)(a1 + 384) = 0;
  *(void *)&double result = 0x700000001;
  *(void *)(a1 + 392) = 0x700000001;
  *(_WORD *)(a1 + 428) = 0;
  *(_DWORD *)(a1 + 416) = 0;
  *(_DWORD *)(a1 + 456) = 2;
  *(void *)(a1 + 464) = 0xC008000000000000;
  return result;
}

void language_modeling::v1::LinguisticContext::LinguisticContext(language_modeling::v1::LinguisticContext *this)
{
}

{
  operator new();
}

__CFArray *sub_19E36F060(const __CFLocale *a1)
{
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  CFStringRef Value = (const __CFString *)CFLocaleGetValue(a1, (CFLocaleKey)*MEMORY[0x1E4F1D218]);
  if (CFStringCompare(Value, @"ars", 0))
  {
    if (CFEqual(Value, @"zh")
      || CFEqual(Value, @"ja"))
    {
      CFStringRef v4 = CFStringCreateWithFormat(0, 0, @"/usr/share/mecabra/%@", Value);
      sub_19E36F264(Mutable, a1, v4);
      if (v4) {
        CFRelease(v4);
      }
    }
  }
  else
  {
    CFStringRef Value = @"ar";
  }
  uint64_t v5 = getenv("LINGUISTIC_DATA");
  if (v5) {
    CFStringRef v6 = CFStringCreateWithCString(0, v5, 0x8000100u);
  }
  else {
    CFStringRef v6 = @"/System/Library/LinguisticData/";
  }
  CFStringRef v7 = CFStringCreateWithFormat(0, 0, @"%@/%@", v6, Value);
  CFRelease(v6);
  sub_19E36F264(Mutable, a1, v7);
  if (v7) {
    CFRelease(v7);
  }
  return Mutable;
}

uint64_t LMLanguageLikelihoodModelGetEmojiUsageCountForApp(uint64_t a1, uint64_t a2, void *a3)
{
  int v7 = 0;
  uint64_t v8 = 0;
  if (a1)
  {
    uint64_t v4 = *(void *)(a1 + 24);
    uint64_t v5 = *(NSObject **)(v4 + 280);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = sub_19E36D0E0;
    block[3] = &unk_1E59A0F98;
    block[4] = v4;
    block[5] = a2;
    block[6] = &v7;
    dispatch_sync(v5, block);
  }
  if (a3) {
    *a3 = v8;
  }
  return v7;
}

void sub_19E36F264(__CFArray *a1, CFLocaleRef locale, const __CFString *a3)
{
  if (a1 && locale && a3)
  {
    CFStringRef v6 = (const __CFString *)CFLocaleGetValue(locale, (CFLocaleKey)*MEMORY[0x1E4F1D220]);
    CFStringRef v7 = (const __CFString *)CFLocaleGetValue(locale, (CFLocaleKey)*MEMORY[0x1E4F1D1F0]);
    CFURLRef v8 = CFURLCreateWithFileSystemPath(0, a3, kCFURLPOSIXPathStyle, 1u);
    sub_19E36F3C4(&url, v8);
    if (v6)
    {
      CFURLRef v9 = CFURLCreateCopyAppendingPathComponent(0, url, v6, 1u);
      sub_19E36F3C4(&value, v9);
      CFArrayAppendValue(a1, value);
      if (value) {
        CFRelease(value);
      }
    }
    if (v7)
    {
      CFURLRef v10 = CFURLCreateCopyAppendingPathComponent(0, url, v7, 1u);
      sub_19E36F3C4(&value, v10);
      CFArrayAppendValue(a1, value);
      if (value) {
        CFRelease(value);
      }
    }
    CFArrayAppendValue(a1, url);
    if (url) {
      CFRelease(url);
    }
  }
}

void sub_19E36F394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
}

void *sub_19E36F3C4(void *a1, CFTypeRef cf)
{
  *a1 = cf;
  if (cf)
  {
    CFTypeID v3 = CFGetTypeID(cf);
    if (v3 != CFURLGetTypeID())
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x19F3BD790](exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  return a1;
}

void sub_19E36F44C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(a1);
}

void language_modeling::v1::LinguisticContext::LinguisticContext(language_modeling::v1::LinguisticContext *this, const language_modeling::v1::LinguisticContext *a2)
{
}

{
  operator new();
}

void sub_19E36F4D4(void *a1)
{
  MEMORY[0x19F3BDCF0](v1, 0x10B2C4009D90DC4);
  sub_19E37B770(a1);
}

uint64_t LMLanguageModelCreate(CFTypeRef cf)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (cf)
  {
    CFRetain(cf);
    CFStringRef Value = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)cf, (const void *)kLMLanguageModelLocaleKey);
    if (!Value) {
      goto LABEL_10;
    }
    CFStringRef v3 = Value;
    CFTypeID v4 = CFGetTypeID(Value);
    if (v4 == CFLocaleGetTypeID())
    {
      CFLocaleRef v5 = (const __CFLocale *)CFRetain(v3);
    }
    else
    {
      CFTypeID v6 = CFGetTypeID(v3);
      if (v6 != CFStringGetTypeID()) {
        goto LABEL_10;
      }
      CFLocaleRef v5 = CFLocaleCreate(0, v3);
    }
    uint64_t v7 = (uint64_t)v5;
    if (sub_19E36E648(v5, @"ars"))
    {
      CFLocaleRef v8 = sub_19E3C3258(v7, @"ar");
      MutableCopy = CFDictionaryCreateMutableCopy(0, 0, (CFDictionaryRef)cf);
      CFDictionarySetValue(MutableCopy, (const void *)kLMLanguageModelLocaleKey, v8);
      CFRelease(cf);
      if (v8) {
        CFRelease(v8);
      }
    }
LABEL_10:
    mach_continuous_time();
    operator new();
  }
  return 0;
}

void sub_19E36FE0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  __cxa_guard_abort(&qword_1EC009560);
  if (a10 && !atomic_fetch_add(&a10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a10->__on_zero_shared)(a10);
    std::__shared_weak_count::__release_weak(a10);
  }
  if (v10) {
    CFRelease(v10);
  }
  _Unwind_Resume(a1);
}

void sub_19E36FF8C()
{
}

void sub_19E3700AC()
{
}

void language_modeling::v1::LinguisticContext::~LinguisticContext(language_modeling::v1::LinguisticContext *this)
{
  uint64_t v2 = *(void *)this;
  *(void *)this = 0;
  if (v2)
  {
    uint64_t v3 = sub_19E370104(v2);
    MEMORY[0x19F3BDCF0](v3, 0x10B2C4009D90DC4);
  }
}

{
  uint64_t v2;
  uint64_t v3;

  uint64_t v2 = *(void *)this;
  *(void *)this = 0;
  if (v2)
  {
    uint64_t v3 = sub_19E370104(v2);
    MEMORY[0x19F3BDCF0](v3, 0x10B2C4009D90DC4);
  }
}

uint64_t sub_19E370104(uint64_t a1)
{
  if (*(char *)(a1 + 231) < 0)
  {
    operator delete(*(void **)(a1 + 208));
    uint64_t v2 = *(void **)(a1 + 184);
    if (!v2) {
      goto LABEL_5;
    }
  }
  else
  {
    uint64_t v2 = *(void **)(a1 + 184);
    if (!v2) {
      goto LABEL_5;
    }
  }
  do
  {
    uint64_t v11 = (void *)*v2;
    unint64_t v12 = (void *)v2[3];
    if (v12)
    {
      v2[4] = v12;
      operator delete(v12);
    }
    operator delete(v2);
    uint64_t v2 = v11;
  }
  while (v11);
LABEL_5:
  uint64_t v3 = *(void **)(a1 + 168);
  *(void *)(a1 + 168) = 0;
  if (v3) {
    operator delete(v3);
  }
  CFTypeID v4 = *(void **)(a1 + 144);
  if (v4)
  {
    do
    {
      uint64_t v13 = (void *)*v4;
      unint64_t v14 = (void *)v4[3];
      if (v14)
      {
        v4[4] = v14;
        operator delete(v14);
      }
      operator delete(v4);
      CFTypeID v4 = v13;
    }
    while (v13);
  }
  CFLocaleRef v5 = *(void **)(a1 + 128);
  *(void *)(a1 + 128) = 0;
  if (v5) {
    operator delete(v5);
  }
  sub_19E3CEF34(a1 + 88);
  CFTypeID v6 = *(void **)(a1 + 64);
  if (v6)
  {
    do
    {
      BOOL v15 = (void *)*v6;
      long long v16 = (void *)v6[3];
      if (v16)
      {
        v6[4] = v16;
        operator delete(v16);
      }
      operator delete(v6);
      CFTypeID v6 = v15;
    }
    while (v15);
  }
  uint64_t v7 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v7) {
    operator delete(v7);
  }
  uint64_t v8 = *(void *)(a1 + 24);
  if (v8)
  {
    uint64_t v9 = *(void *)(a1 + 32);
    CFURLRef v10 = *(void **)(a1 + 24);
    if (v9 != v8)
    {
      do
      {
        if (*(char *)(v9 - 9) < 0) {
          operator delete(*(void **)(v9 - 32));
        }
        v9 -= 32;
      }
      while (v9 != v8);
      CFURLRef v10 = *(void **)(a1 + 24);
    }
    *(void *)(a1 + 32) = v8;
    operator delete(v10);
  }
  unint64_t v17 = *(void ***)a1;
  if (*(void *)a1)
  {
    v18 = *(void ***)(a1 + 8);
    uint64_t v19 = *(void ***)a1;
    if (v18 != v17)
    {
      do
      {
        if (*((char *)v18 - 9) < 0) {
          operator delete(*(v18 - 4));
        }
        v18 -= 4;
      }
      while (v18 != v17);
      uint64_t v19 = *(void ***)a1;
    }
    *(void *)(a1 + 8) = v17;
    operator delete(v19);
  }
  return a1;
}

void language_modeling::v1::LanguageModelSession::~LanguageModelSession(language_modeling::v1::LanguageModelSession *this)
{
  uint64_t v2 = *(void *)this;
  *(void *)this = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
}

{
  uint64_t v2;

  uint64_t v2 = *(void *)this;
  *(void *)this = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
}

void sub_19E3702F8(uint64_t a1)
{
  sub_19E370330(a1);
  JUMPOUT(0x19F3BDCF0);
}

uint64_t sub_19E370330(uint64_t a1)
{
  *(void *)a1 = &unk_1EF0B9818;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 200);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(void *)(a1 + 176);
  *(void *)(a1 + 176) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  CFTypeID v4 = *(std::__shared_weak_count **)(a1 + 168);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    CFLocaleRef v5 = *(std::__shared_weak_count **)(a1 + 152);
    if (!v5) {
      goto LABEL_12;
    }
  }
  else
  {
    CFLocaleRef v5 = *(std::__shared_weak_count **)(a1 + 152);
    if (!v5) {
      goto LABEL_12;
    }
  }
  if (!atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_12:
  CFTypeID v6 = *(std::__shared_weak_count **)(a1 + 136);
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    uint64_t v7 = *(std::__shared_weak_count **)(a1 + 120);
    if (!v7) {
      goto LABEL_18;
    }
  }
  else
  {
    uint64_t v7 = *(std::__shared_weak_count **)(a1 + 120);
    if (!v7) {
      goto LABEL_18;
    }
  }
  if (!atomic_fetch_add(&v7->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_18:
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 104);
  if (!v8 || atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((*(char *)(a1 + 79) & 0x80000000) == 0) {
      goto LABEL_21;
    }
LABEL_24:
    operator delete(*(void **)(a1 + 56));
    if ((*(char *)(a1 + 47) & 0x80000000) == 0) {
      return a1;
    }
LABEL_25:
    operator delete(*(void **)(a1 + 24));
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  if (*(char *)(a1 + 79) < 0) {
    goto LABEL_24;
  }
LABEL_21:
  if (*(char *)(a1 + 47) < 0) {
    goto LABEL_25;
  }
  return a1;
}

uint64_t sub_19E37059C(uint64_t a1)
{
  if (*(char *)(a1 + 231) < 0)
  {
    operator delete(*(void **)(a1 + 208));
    uint64_t v2 = *(void ***)(a1 + 184);
    if (!v2)
    {
LABEL_3:
      uint64_t v3 = *(void ***)(a1 + 160);
      if (!v3) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v2 = *(void ***)(a1 + 184);
    if (!v2) {
      goto LABEL_3;
    }
  }
  CFLocaleRef v5 = *(void ***)(a1 + 192);
  CFTypeID v6 = v2;
  if (v5 != v2)
  {
    do
    {
      if (*((char *)v5 - 9) < 0) {
        operator delete(*(v5 - 4));
      }
      v5 -= 4;
    }
    while (v5 != v2);
    CFTypeID v6 = *(void ***)(a1 + 184);
  }
  *(void *)(a1 + 192) = v2;
  operator delete(v6);
  uint64_t v3 = *(void ***)(a1 + 160);
  if (!v3)
  {
LABEL_4:
    if ((*(char *)(a1 + 47) & 0x80000000) == 0) {
      goto LABEL_5;
    }
LABEL_22:
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
      return a1;
    }
LABEL_23:
    operator delete(*(void **)a1);
    return a1;
  }
LABEL_15:
  uint64_t v7 = *(void ***)(a1 + 168);
  uint64_t v8 = v3;
  if (v7 != v3)
  {
    do
    {
      if (*((char *)v7 - 9) < 0) {
        operator delete(*(v7 - 4));
      }
      v7 -= 4;
    }
    while (v7 != v3);
    uint64_t v8 = *(void ***)(a1 + 160);
  }
  *(void *)(a1 + 168) = v3;
  operator delete(v8);
  if (*(char *)(a1 + 47) < 0) {
    goto LABEL_22;
  }
LABEL_5:
  if (*(char *)(a1 + 23) < 0) {
    goto LABEL_23;
  }
  return a1;
}

void sub_19E3706AC(uint64_t a1)
{
  sub_19E3706E4(a1);
  JUMPOUT(0x19F3BDCF0);
}

uint64_t sub_19E3706E4(uint64_t a1)
{
  *(void *)a1 = &unk_1EF0B98F8;
  sub_19E547B70((void **)(a1 + 224));
  sub_19E41D2BC((void **)(a1 + 152));
  uint64_t v2 = *(void *)(a1 + 136);
  *(void *)(a1 + 136) = 0;
  if (v2)
  {
    uint64_t v3 = sub_19E3709A0(v2);
    MEMORY[0x19F3BDCF0](v3, 0x10F0C4069D522A4);
  }
  CFTypeID v4 = *(std::__shared_weak_count **)(a1 + 128);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  uint64_t v5 = *(void *)(a1 + 112);
  *(void *)(a1 + 112) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *(void *)(a1 + 104);
  *(void *)(a1 + 104) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v8 || atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if ((*(char *)(a1 + 71) & 0x80000000) == 0) {
      goto LABEL_15;
    }
LABEL_18:
    operator delete(*(void **)(a1 + 48));
    if ((*(char *)(a1 + 39) & 0x80000000) == 0) {
      return a1;
    }
LABEL_19:
    operator delete(*(void **)(a1 + 16));
    return a1;
  }
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  if (*(char *)(a1 + 71) < 0) {
    goto LABEL_18;
  }
LABEL_15:
  if (*(char *)(a1 + 39) < 0) {
    goto LABEL_19;
  }
  return a1;
}

void sub_19E3708A8(void *a1)
{
  *a1 = &unk_1EF0B97C8;
  uint64_t v2 = a1[5];
  if (v2)
  {
    uint64_t v3 = a1[6];
    CFTypeID v4 = (void *)a1[5];
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *(const void **)(v3 - 8);
        if (v5) {
          CFRelease(v5);
        }
        v3 -= 32;
      }
      while (v3 != v2);
      CFTypeID v4 = (void *)a1[5];
    }
    a1[6] = v2;
    operator delete(v4);
  }
  uint64_t v6 = (std::__shared_weak_count *)a1[3];
  if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  JUMPOUT(0x19F3BDCF0);
}

uint64_t sub_19E3709A0(uint64_t a1)
{
  uint64_t v2 = *(const void **)a1;
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  if (*(void *)(a1 + 24)) {
    ubrk_close();
  }
  CFTypeID v4 = *(void **)(a1 + 256);
  if (v4)
  {
    *(void *)(a1 + 264) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a1 + 224);
  if (v5)
  {
    *(void *)(a1 + 232) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void **)(a1 + 200);
  if (v6)
  {
    *(void *)(a1 + 208) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *(void **)(a1 + 176);
  if (v7)
  {
    *(void *)(a1 + 184) = v7;
    operator delete(v7);
  }
  return a1;
}

void language_modeling::v1::LinguisticContext::operator=()
{
}

void sub_19E370AA4(void *a1)
{
  MEMORY[0x19F3BDCF0](v1, 0x10B2C4009D90DC4);
  sub_19E37B770(a1);
}

uint64_t sub_19E370ACC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  sub_19E3C38BC((void *)a1, *(void *)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 5);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  sub_19E3C39E4((void *)(a1 + 24), *(void *)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 5);
  sub_19E37140C(a1 + 48, a2 + 48);
  *(_OWORD *)(a1 + 88) = 0u;
  uint64_t v5 = (void *)(a1 + 88);
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  size_t prime = *(void *)(a2 + 96);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_3:
    sub_19E3CEFD8(a1 + 88, prime);
    goto LABEL_4;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(prime);
    int8x8_t v59 = *(int8x8_t *)(a1 + 96);
    BOOL v60 = prime >= *(void *)&v59;
    if (prime > *(void *)&v59) {
      goto LABEL_3;
    }
  }
  else
  {
    int8x8_t v59 = 0;
    BOOL v60 = 1;
    if (prime) {
      goto LABEL_3;
    }
  }
  if (!v60)
  {
    unint64_t v64 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 112) / *(float *)(a1 + 120));
    if (*(void *)&v59 < 3uLL || (uint8x8_t v65 = (uint8x8_t)vcnt_s8(v59), v65.i16[0] = vaddlv_u8(v65), v65.u32[0] > 1uLL))
    {
      unint64_t v64 = std::__next_prime(v64);
    }
    else
    {
      uint64_t v66 = 1 << -(char)__clz(v64 - 1);
      if (v64 >= 2) {
        unint64_t v64 = v66;
      }
    }
    if (prime <= v64) {
      size_t prime = v64;
    }
    if (prime < *(void *)&v59) {
      goto LABEL_3;
    }
  }
LABEL_4:
  uint64_t v70 = a2;
  uint64_t v7 = *(uint64_t **)(a2 + 104);
  if (v7)
  {
    uint64_t v8 = (void *)(a1 + 104);
    do
    {
      unint64_t v9 = *((unsigned int *)v7 + 4);
      unint64_t v10 = *(void *)(a1 + 96);
      if (v10)
      {
        uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
        v11.i16[0] = vaddlv_u8(v11);
        if (v11.u32[0] > 1uLL)
        {
          unint64_t v2 = *((unsigned int *)v7 + 4);
          if (v10 <= v9) {
            unint64_t v2 = v9 % v10;
          }
        }
        else
        {
          unint64_t v2 = (v10 - 1) & v9;
        }
        unint64_t v12 = *(uint64_t ***)(*v5 + 8 * v2);
        if (v12)
        {
          uint64_t v13 = *v12;
          if (v13)
          {
            if (v11.u32[0] < 2uLL)
            {
              while (1)
              {
                uint64_t v15 = v13[1];
                if (v15 == v9)
                {
                  if (*((_DWORD *)v13 + 4) == v9) {
                    goto LABEL_63;
                  }
                }
                else if ((v15 & (v10 - 1)) != v2)
                {
                  goto LABEL_26;
                }
                uint64_t v13 = (uint64_t *)*v13;
                if (!v13) {
                  goto LABEL_26;
                }
              }
            }
            do
            {
              unint64_t v14 = v13[1];
              if (v14 == v9)
              {
                if (*((_DWORD *)v13 + 4) == v9) {
                  goto LABEL_63;
                }
              }
              else
              {
                if (v14 >= v10) {
                  v14 %= v10;
                }
                if (v14 != v2) {
                  break;
                }
              }
              uint64_t v13 = (uint64_t *)*v13;
            }
            while (v13);
          }
        }
      }
LABEL_26:
      v71 = operator new(0x30uLL);
      void *v71 = 0;
      v71[1] = v9;
      *((_DWORD *)v71 + 4) = *((_DWORD *)v7 + 4);
      v71[4] = 0;
      v71[5] = 0;
      v71[3] = 0;
      sub_19E3CF1CC(v71 + 3, (CFTypeRef *)v7[3], (CFTypeRef *)v7[4], (v7[4] - v7[3]) >> 3);
      float v16 = (float)(unint64_t)(*(void *)(a1 + 112) + 1);
      float v17 = *(float *)(a1 + 120);
      if (!v10 || (float)(v17 * (float)v10) < v16)
      {
        BOOL v18 = (v10 & (v10 - 1)) != 0;
        if (v10 < 3) {
          BOOL v18 = 1;
        }
        unint64_t v19 = v18 | (2 * v10);
        unint64_t v20 = vcvtps_u32_f32(v16 / v17);
        if (v19 <= v20) {
          size_t v21 = v20;
        }
        else {
          size_t v21 = v19;
        }
        if (v21 == 1)
        {
          size_t v21 = 2;
        }
        else if ((v21 & (v21 - 1)) != 0)
        {
          size_t v21 = std::__next_prime(v21);
        }
        int8x8_t v22 = *(int8x8_t *)(a1 + 96);
        if (v21 > *(void *)&v22) {
          goto LABEL_38;
        }
        if (v21 < *(void *)&v22)
        {
          unint64_t v23 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 112) / *(float *)(a1 + 120));
          if (*(void *)&v22 < 3uLL || (uint8x8_t v24 = (uint8x8_t)vcnt_s8(v22), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
          {
            unint64_t v23 = std::__next_prime(v23);
          }
          else
          {
            uint64_t v25 = 1 << -(char)__clz(v23 - 1);
            if (v23 >= 2) {
              unint64_t v23 = v25;
            }
          }
          if (v21 <= v23) {
            size_t v21 = v23;
          }
          if (v21 < *(void *)&v22) {
LABEL_38:
          }
            sub_19E3CEFD8(a1 + 88, v21);
        }
        unint64_t v10 = *(void *)(a1 + 96);
        if ((v10 & (v10 - 1)) != 0)
        {
          if (v10 <= v9) {
            unint64_t v2 = v9 % v10;
          }
          else {
            unint64_t v2 = v9;
          }
        }
        else
        {
          unint64_t v2 = (v10 - 1) & v9;
        }
      }
      uint64_t v26 = *(void **)(*v5 + 8 * v2);
      if (v26)
      {
        void *v71 = *v26;
        void *v26 = v71;
      }
      else
      {
        void *v71 = *v8;
        *uint64_t v8 = v71;
        *(void *)(*v5 + 8 * v2) = v8;
        if (*v71)
        {
          unint64_t v27 = *(void *)(*v71 + 8);
          if ((v10 & (v10 - 1)) != 0)
          {
            if (v27 >= v10) {
              v27 %= v10;
            }
          }
          else
          {
            v27 &= v10 - 1;
          }
          *(void *)(*v5 + 8 * v27) = v71;
        }
      }
      ++*(void *)(a1 + 112);
LABEL_63:
      uint64_t v7 = (uint64_t *)*v7;
    }
    while (v7);
  }
  sub_19E37140C(a1 + 128, v70 + 128);
  *(_OWORD *)(a1 + 168) = 0u;
  uint64_t v28 = (void *)(a1 + 168);
  *(_OWORD *)(a1 + 184) = 0u;
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(v70 + 200);
  size_t v29 = *(void *)(v70 + 176);
  if (v29 == 1)
  {
    size_t v29 = 2;
LABEL_66:
    sub_19E3CEFD8(a1 + 168, v29);
    goto LABEL_67;
  }
  if ((v29 & (v29 - 1)) != 0)
  {
    size_t v29 = std::__next_prime(v29);
    int8x8_t v61 = *(int8x8_t *)(a1 + 176);
    BOOL v62 = v29 >= *(void *)&v61;
    if (v29 > *(void *)&v61) {
      goto LABEL_66;
    }
  }
  else
  {
    int8x8_t v61 = 0;
    BOOL v62 = 1;
    if (v29) {
      goto LABEL_66;
    }
  }
  if (!v62)
  {
    unint64_t v67 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 192) / *(float *)(a1 + 200));
    if (*(void *)&v61 < 3uLL || (uint8x8_t v68 = (uint8x8_t)vcnt_s8(v61), v68.i16[0] = vaddlv_u8(v68), v68.u32[0] > 1uLL))
    {
      unint64_t v67 = std::__next_prime(v67);
    }
    else
    {
      uint64_t v69 = 1 << -(char)__clz(v67 - 1);
      if (v67 >= 2) {
        unint64_t v67 = v69;
      }
    }
    if (v29 <= v67) {
      size_t v29 = v67;
    }
    if (v29 < *(void *)&v61) {
      goto LABEL_66;
    }
  }
LABEL_67:
  unsigned __int8 v30 = *(uint64_t **)(v70 + 184);
  if (v30)
  {
    uint64_t v31 = (void *)(a1 + 184);
    unint64_t v32 = *(void *)(a1 + 176);
    do
    {
      unint64_t v33 = *((unsigned int *)v30 + 4);
      if (v32)
      {
        uint8x8_t v34 = (uint8x8_t)vcnt_s8((int8x8_t)v32);
        v34.i16[0] = vaddlv_u8(v34);
        if (v34.u32[0] > 1uLL)
        {
          unint64_t v2 = *((unsigned int *)v30 + 4);
          if (v32 <= v33) {
            unint64_t v2 = v33 % v32;
          }
        }
        else
        {
          unint64_t v2 = (v32 - 1) & v33;
        }
        int v35 = *(uint64_t ***)(*v28 + 8 * v2);
        if (v35)
        {
          int v36 = *v35;
          if (v36)
          {
            if (v34.u32[0] < 2uLL)
            {
              while (1)
              {
                uint64_t v38 = v36[1];
                if (v38 == v33)
                {
                  if (*((_DWORD *)v36 + 4) == v33) {
                    goto LABEL_130;
                  }
                }
                else if ((v38 & (v32 - 1)) != v2)
                {
                  goto LABEL_89;
                }
                int v36 = (uint64_t *)*v36;
                if (!v36) {
                  goto LABEL_89;
                }
              }
            }
            do
            {
              unint64_t v37 = v36[1];
              if (v37 == v33)
              {
                if (*((_DWORD *)v36 + 4) == v33) {
                  goto LABEL_130;
                }
              }
              else
              {
                if (v37 >= v32) {
                  v37 %= v32;
                }
                if (v37 != v2) {
                  break;
                }
              }
              int v36 = (uint64_t *)*v36;
            }
            while (v36);
          }
        }
      }
LABEL_89:
      unsigned int v39 = operator new(0x30uLL);
      unint64_t v72 = v39;
      *unsigned int v39 = 0;
      v39[1] = v33;
      int v40 = *((_DWORD *)v30 + 4);
      v39[3] = 0;
      *((_DWORD *)v39 + 4) = v40;
      v39[4] = 0;
      v39[5] = 0;
      v42 = (unsigned char *)v30[3];
      v41 = (unsigned char *)v30[4];
      int64_t v43 = v41 - v42;
      if (v41 != v42)
      {
        if (v43 < 0) {
          sub_19E37C7C4();
        }
        v44 = (char *)operator new(v41 - v42);
        v39[3] = v44;
        v39[4] = v44;
        int v45 = &v44[8 * (v43 >> 3)];
        v39[5] = v45;
        memcpy(v44, v42, v43);
        v39[4] = v45;
      }
      float v46 = (float)(unint64_t)(*(void *)(a1 + 192) + 1);
      float v47 = *(float *)(a1 + 200);
      if (v32 && (float)(v47 * (float)v32) >= v46)
      {
        uint64_t v28 = (void *)(a1 + 168);
      }
      else
      {
        BOOL v48 = (v32 & (v32 - 1)) != 0;
        if (v32 < 3) {
          BOOL v48 = 1;
        }
        unint64_t v49 = v48 | (2 * v32);
        unint64_t v50 = vcvtps_u32_f32(v46 / v47);
        if (v49 <= v50) {
          size_t v51 = v50;
        }
        else {
          size_t v51 = v49;
        }
        uint64_t v28 = (void *)(a1 + 168);
        if (v51 == 1)
        {
          size_t v51 = 2;
        }
        else if ((v51 & (v51 - 1)) != 0)
        {
          size_t v51 = std::__next_prime(v51);
          unint64_t v32 = *(void *)(a1 + 176);
        }
        if (v51 > v32) {
          goto LABEL_105;
        }
        if (v51 < v32)
        {
          unint64_t v52 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 192) / *(float *)(a1 + 200));
          if (v32 < 3 || (uint8x8_t v53 = (uint8x8_t)vcnt_s8((int8x8_t)v32), v53.i16[0] = vaddlv_u8(v53), v53.u32[0] > 1uLL))
          {
            unint64_t v52 = std::__next_prime(v52);
          }
          else
          {
            uint64_t v54 = 1 << -(char)__clz(v52 - 1);
            if (v52 >= 2) {
              unint64_t v52 = v54;
            }
          }
          if (v51 <= v52) {
            size_t v51 = v52;
          }
          if (v51 < v32) {
LABEL_105:
          }
            sub_19E3CEFD8(a1 + 168, v51);
        }
        unint64_t v32 = *(void *)(a1 + 176);
        if ((v32 & (v32 - 1)) != 0)
        {
          if (v32 <= v33) {
            unint64_t v2 = v33 % v32;
          }
          else {
            unint64_t v2 = v33;
          }
        }
        else
        {
          unint64_t v2 = (v32 - 1) & v33;
        }
      }
      uint64_t v55 = *(void **)(*v28 + 8 * v2);
      if (v55)
      {
        *unint64_t v72 = *v55;
        *uint64_t v55 = v72;
      }
      else
      {
        *unint64_t v72 = *v31;
        *uint64_t v31 = v72;
        *(void *)(*v28 + 8 * v2) = v31;
        if (*v72)
        {
          unint64_t v56 = *(void *)(*v72 + 8);
          if ((v32 & (v32 - 1)) != 0)
          {
            if (v56 >= v32) {
              v56 %= v32;
            }
          }
          else
          {
            v56 &= v32 - 1;
          }
          *(void *)(*v28 + 8 * v56) = v72;
        }
      }
      ++*(void *)(a1 + 192);
LABEL_130:
      unsigned __int8 v30 = (uint64_t *)*v30;
    }
    while (v30);
  }
  v57 = (unsigned char *)(a1 + 208);
  if (*(char *)(v70 + 231) < 0)
  {
    sub_19E39369C(v57, *(void **)(v70 + 208), *(void *)(v70 + 216));
  }
  else
  {
    long long v58 = *(_OWORD *)(v70 + 208);
    *(void *)(a1 + 224) = *(void *)(v70 + 224);
    *(_OWORD *)v57 = v58;
  }
  return a1;
}

void sub_19E371358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13)
{
  sub_19E3CEEC8(v14);
  sub_19E3CEEC8(a10);
  sub_19E3CEF34(a11);
  sub_19E3CEEC8(a12);
  sub_19E3C3B0C(a13);
  sub_19E3C3B0C(v13);
  _Unwind_Resume(a1);
}

uint64_t sub_19E37140C(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    sub_19E3CEFD8(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v6 = *(int8x8_t *)(a1 + 8);
    BOOL v7 = prime >= *(void *)&v6;
    if (prime > *(void *)&v6) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v6 = 0;
    BOOL v7 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v7)
  {
    unint64_t v8 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v6 < 3uLL || (uint8x8_t v9 = (uint8x8_t)vcnt_s8(v6), v9.i16[0] = vaddlv_u8(v9), v9.u32[0] > 1uLL))
    {
      unint64_t v8 = std::__next_prime(v8);
    }
    else
    {
      uint64_t v10 = 1 << -(char)__clz(v8 - 1);
      if (v8 >= 2) {
        unint64_t v8 = v10;
      }
    }
    if (prime <= v8) {
      size_t prime = v8;
    }
    if (prime < *(void *)&v6) {
      goto LABEL_17;
    }
  }
LABEL_18:
  uint8x8_t v11 = *(uint64_t **)(a2 + 16);
  if (v11)
  {
    unint64_t v12 = *(void *)(a1 + 8);
    do
    {
      unint64_t v13 = *((unsigned int *)v11 + 4);
      if (v12)
      {
        uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
        v14.i16[0] = vaddlv_u8(v14);
        if (v14.u32[0] > 1uLL)
        {
          unint64_t v2 = *((unsigned int *)v11 + 4);
          if (v12 <= v13) {
            unint64_t v2 = v13 % v12;
          }
        }
        else
        {
          unint64_t v2 = (v12 - 1) & v13;
        }
        uint64_t v15 = *(uint64_t ***)(*(void *)a1 + 8 * v2);
        if (v15)
        {
          float v16 = *v15;
          if (v16)
          {
            if (v14.u32[0] < 2uLL)
            {
              while (1)
              {
                uint64_t v18 = v16[1];
                if (v18 == v13)
                {
                  if (*((_DWORD *)v16 + 4) == v13) {
                    goto LABEL_80;
                  }
                }
                else if ((v18 & (v12 - 1)) != v2)
                {
                  goto LABEL_40;
                }
                float v16 = (uint64_t *)*v16;
                if (!v16) {
                  goto LABEL_40;
                }
              }
            }
            do
            {
              unint64_t v17 = v16[1];
              if (v17 == v13)
              {
                if (*((_DWORD *)v16 + 4) == v13) {
                  goto LABEL_80;
                }
              }
              else
              {
                if (v17 >= v12) {
                  v17 %= v12;
                }
                if (v17 != v2) {
                  break;
                }
              }
              float v16 = (uint64_t *)*v16;
            }
            while (v16);
          }
        }
      }
LABEL_40:
      unint64_t v19 = operator new(0x30uLL);
      uint64_t v38 = v19;
      *unint64_t v19 = 0;
      v19[1] = v13;
      int v20 = *((_DWORD *)v11 + 4);
      v19[3] = 0;
      *((_DWORD *)v19 + 4) = v20;
      v19[4] = 0;
      v19[5] = 0;
      int8x8_t v22 = (unsigned char *)v11[3];
      size_t v21 = (unsigned char *)v11[4];
      int64_t v23 = v21 - v22;
      if (v21 != v22)
      {
        if (v23 < 0) {
          sub_19E37C7C4();
        }
        uint8x8_t v24 = (char *)operator new(v21 - v22);
        v19[3] = v24;
        v19[4] = v24;
        uint64_t v25 = &v24[4 * (v23 >> 2)];
        v19[5] = v25;
        memcpy(v24, v22, v23);
        v19[4] = v25;
      }
      float v26 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
      float v27 = *(float *)(a1 + 32);
      if (!v12 || (float)(v27 * (float)v12) < v26)
      {
        BOOL v28 = (v12 & (v12 - 1)) != 0;
        if (v12 < 3) {
          BOOL v28 = 1;
        }
        unint64_t v29 = v28 | (2 * v12);
        unint64_t v30 = vcvtps_u32_f32(v26 / v27);
        if (v29 <= v30) {
          size_t v31 = v30;
        }
        else {
          size_t v31 = v29;
        }
        if (v31 == 1)
        {
          size_t v31 = 2;
        }
        else if ((v31 & (v31 - 1)) != 0)
        {
          size_t v31 = std::__next_prime(v31);
          unint64_t v12 = *(void *)(a1 + 8);
        }
        if (v31 > v12) {
          goto LABEL_55;
        }
        if (v31 < v12)
        {
          unint64_t v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
          if (v12 < 3 || (uint8x8_t v33 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
          {
            unint64_t v32 = std::__next_prime(v32);
          }
          else
          {
            uint64_t v34 = 1 << -(char)__clz(v32 - 1);
            if (v32 >= 2) {
              unint64_t v32 = v34;
            }
          }
          if (v31 <= v32) {
            size_t v31 = v32;
          }
          if (v31 < v12) {
LABEL_55:
          }
            sub_19E3CEFD8(a1, v31);
        }
        unint64_t v12 = *(void *)(a1 + 8);
        if ((v12 & (v12 - 1)) != 0)
        {
          if (v12 <= v13) {
            unint64_t v2 = v13 % v12;
          }
          else {
            unint64_t v2 = v13;
          }
        }
        else
        {
          unint64_t v2 = (v12 - 1) & v13;
        }
      }
      int v35 = *(void **)(*(void *)a1 + 8 * v2);
      if (v35)
      {
        *uint64_t v38 = *v35;
        *int v35 = v38;
      }
      else
      {
        *uint64_t v38 = *(void *)(a1 + 16);
        *(void *)(a1 + 16) = v38;
        *(void *)(*(void *)a1 + 8 * v2) = a1 + 16;
        if (*v38)
        {
          unint64_t v36 = *(void *)(*v38 + 8);
          if ((v12 & (v12 - 1)) != 0)
          {
            if (v36 >= v12) {
              v36 %= v12;
            }
          }
          else
          {
            v36 &= v12 - 1;
          }
          *(void *)(*(void *)a1 + 8 * v36) = v38;
        }
      }
      ++*(void *)(a1 + 24);
LABEL_80:
      uint8x8_t v11 = (uint64_t *)*v11;
    }
    while (v11);
  }
  return a1;
}

void sub_19E37183C(_Unwind_Exception *a1)
{
  sub_19E3CEEC8(v1);
  _Unwind_Resume(a1);
}

void *sub_19E371884(void *result, void *a2)
{
  unint64_t v2 = result;
  *double result = 0;
  result[1] = 0;
  result[2] = 0;
  uint64_t v3 = a2[1];
  uint64_t v4 = v3 - *a2;
  if (v3 != *a2)
  {
    if ((v4 & 0x8000000000000000) == 0)
    {
      uint64_t v5 = (char *)operator new(v3 - *a2);
      void *v2 = v5;
      v2[1] = v5;
      v2[2] = &v5[8 * (v4 >> 3)];
      operator new();
    }
    sub_19E37C7C4();
  }
  return result;
}

void sub_19E371930(_Unwind_Exception *exception_object)
{
  uint64_t v3 = (char *)*v1;
  if (*v1)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = *v1;
    if (v4 != v3)
    {
      do
        language_modeling::v1::Prediction::~Prediction((language_modeling::v1::Prediction *)(v4 - 8));
      while (v4 != v3);
      uint64_t v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E371978(void *a1)
{
  MEMORY[0x19F3BDCF0](v1, 0x1032C4057ACE4D0);
  sub_19E37B770(a1);
}

char *sub_19E37199C(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_19E39369C(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    sub_19E39369C(__dst + 24, *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(long long *)((char *)a2 + 24);
    *((void *)__dst + 5) = *((void *)a2 + 5);
    *(_OWORD *)(__dst + 24) = v5;
  }
  long long v6 = a2[7];
  long long v7 = a2[8];
  long long v8 = a2[9];
  long long v9 = a2[3];
  long long v10 = a2[4];
  long long v12 = a2[5];
  long long v11 = a2[6];
  *((void *)__dst + 20) = 0;
  *((_OWORD *)__dst + 3) = v9;
  *((_OWORD *)__dst + 4) = v10;
  *((_OWORD *)__dst + 8) = v7;
  *((_OWORD *)__dst + 9) = v8;
  *((_OWORD *)__dst + 6) = v11;
  *((_OWORD *)__dst + 7) = v6;
  *((_OWORD *)__dst + 5) = v12;
  *((void *)__dst + 21) = 0;
  *((void *)__dst + 22) = 0;
  sub_19E3C38BC((void *)__dst + 20, *((void *)a2 + 20), *((void *)a2 + 21), (uint64_t)(*((void *)a2 + 21) - *((void *)a2 + 20)) >> 5);
  *((void *)__dst + 23) = 0;
  *((void *)__dst + 24) = 0;
  *((void *)__dst + 25) = 0;
  sub_19E3C38BC((void *)__dst + 23, *((void *)a2 + 23), *((void *)a2 + 24), (uint64_t)(*((void *)a2 + 24) - *((void *)a2 + 23)) >> 5);
  unint64_t v13 = __dst + 208;
  if (*((char *)a2 + 231) < 0)
  {
    sub_19E39369C(v13, *((void **)a2 + 26), *((void *)a2 + 27));
  }
  else
  {
    long long v14 = a2[13];
    *((void *)__dst + 28) = *((void *)a2 + 28);
    *(_OWORD *)unint64_t v13 = v14;
  }
  long long v15 = *(long long *)((char *)a2 + 232);
  *((void *)__dst + 31) = *((void *)a2 + 31);
  *(_OWORD *)(__dst + 232) = v15;
  return __dst;
}

void sub_19E371AC8(_Unwind_Exception *a1)
{
  sub_19E3C3B0C(v4);
  sub_19E3C3B0C(v3);
  if (*(char *)(v1 + 47) < 0)
  {
    operator delete(*v2);
    if ((*(char *)(v1 + 23) & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(a1);
  }
  else if ((*(char *)(v1 + 23) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)v1);
  _Unwind_Resume(a1);
}

uint64_t language_modeling::v1::LinguisticContext::try_push_back(uint64_t *a1, uint64_t a2)
{
  return 1;
}

void sub_19E371C70(void *a1, const UInt8 *a2)
{
  unint64_t v2 = a2;
  CFIndex v4 = a2[23];
  if ((v4 & 0x80u) != 0) {
    a2 = *(const UInt8 **)a2;
  }
  if (a2)
  {
    if ((v4 & 0x80u) == 0) {
      CFIndex v5 = v4;
    }
    else {
      CFIndex v5 = *((void *)v2 + 1);
    }
    CFStringRef v6 = CFStringCreateWithBytes(0, a2, v5, 0x8000100u, 0);
    if (!v6)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x19F3BD790](exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  else
  {
    CFStringRef v6 = 0;
  }
  CFMutableStringRef MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, v6);
  v13.length = CFStringGetLength(MutableCopy);
  v13.location = 0;
  CFStringFindAndReplace(MutableCopy, @"‘", @"'", v13, 0);
  v14.length = CFStringGetLength(MutableCopy);
  v14.location = 0;
  CFStringFindAndReplace(MutableCopy, @"’", @"'", v14, 0);
  v15.length = CFStringGetLength(MutableCopy);
  v15.location = 0;
  CFStringFindAndReplace(MutableCopy, @"‚", @"'", v15, 0);
  v16.length = CFStringGetLength(MutableCopy);
  v16.location = 0;
  CFStringFindAndReplace(MutableCopy, @"‛", @"'", v16, 0);
  v17.length = CFStringGetLength(MutableCopy);
  v17.location = 0;
  CFStringFindAndReplace(MutableCopy, @"“", @"\"", v17, 0);
  v18.length = CFStringGetLength(MutableCopy);
  v18.location = 0;
  CFStringFindAndReplace(MutableCopy, @"”", @"\"", v18, 0);
  v19.length = CFStringGetLength(MutableCopy);
  v19.location = 0;
  CFStringFindAndReplace(MutableCopy, @"‟", @"\"", v19, 0);
  if (MutableCopy) {
    CFRetain(MutableCopy);
  }
  sub_19E372124(&v12, MutableCopy);
  CFStringRef v9 = v12;
  if (!v12)
  {
    long long v11 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3BD790](v11, "Could not construct");
    goto LABEL_23;
  }
  CFTypeID TypeID = CFStringGetTypeID();
  if (TypeID != CFGetTypeID(v9))
  {
    long long v11 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3BD790](v11, "Could not convert");
LABEL_23:
    __cxa_throw(v11, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  sub_19E3721DC(a1, v9);
  if (v12) {
    CFRelease(v12);
  }
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  if (v6) {
    CFRelease(v6);
  }
}

void sub_19E371F50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __dst, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15)
{
  if (a2 == 1)
  {
    CFRange v16 = __cxa_begin_catch(exception_object);
    sub_19E393108((uint64_t)&a13);
    CFRange v17 = sub_19E37CA70(&a15, (uint64_t)"failed to sanitize text='", 25);
    int v18 = *(char *)(v15 + 23);
    if (v18 >= 0) {
      uint64_t v19 = v15;
    }
    else {
      uint64_t v19 = *(void *)v15;
    }
    if (v18 >= 0) {
      uint64_t v20 = *(unsigned __int8 *)(v15 + 23);
    }
    else {
      uint64_t v20 = *(void *)(v15 + 8);
    }
    size_t v21 = sub_19E37CA70(v17, v19, v20);
    int8x8_t v22 = sub_19E37CA70(v21, (uint64_t)"': ", 3);
    int64_t v23 = (const char *)(*(uint64_t (**)(void *))(*(void *)v16 + 16))(v16);
    size_t v24 = strlen(v23);
    sub_19E37CA70(v22, (uint64_t)v23, v24);
    exception = __cxa_allocate_exception(0x10uLL);
    sub_19E43BFBC(&__dst, (uint64_t)&a13);
    MEMORY[0x19F3BD7A0](exception, &__dst);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E3720CC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0) {
      goto LABEL_6;
    }
  }
  else if (!v17)
  {
LABEL_6:
    sub_19E3933E0((uint64_t)&a16);
    __cxa_end_catch();
    JUMPOUT(0x19E372118);
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

void *sub_19E372124(void *a1, CFTypeRef cf)
{
  *a1 = cf;
  if (cf)
  {
    CFTypeID v3 = CFGetTypeID(cf);
    if (v3 != CFStringGetTypeID())
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x19F3BD790](exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  return a1;
}

void sub_19E3721AC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(a1);
}

unint64_t sub_19E3721DC(void *a1, CFStringRef theString)
{
  CStringPtr = CFStringGetCStringPtr(theString, 0x8000100u);
  if (CStringPtr)
  {
    CFIndex v5 = CStringPtr;
    unint64_t result = strlen(CStringPtr);
    if (result <= 0x7FFFFFFFFFFFFFF7)
    {
      size_t v7 = result;
      if (result >= 0x17)
      {
        uint64_t v11 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((result | 7) != 0x17) {
          uint64_t v11 = result | 7;
        }
        uint64_t v12 = v11 + 1;
        CFRange v13 = operator new(v11 + 1);
        a1[1] = v7;
        a1[2] = v12 | 0x8000000000000000;
        *a1 = v13;
        a1 = v13;
      }
      else
      {
        *((unsigned char *)a1 + 23) = result;
        if (!result) {
          goto LABEL_14;
        }
      }
      unint64_t result = (unint64_t)memmove(a1, v5, v7);
LABEL_14:
      *((unsigned char *)a1 + v7) = 0;
      return result;
    }
LABEL_23:
    sub_19E37C958();
  }
  CFIndex Length = CFStringGetLength(theString);
  CFIndex maxBufLen = 0;
  v18.location = 0;
  v18.length = Length;
  CFStringGetBytes(theString, v18, 0x8000100u, 0, 0, 0, 0, &maxBufLen);
  size_t v9 = maxBufLen;
  if ((unint64_t)maxBufLen > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_23;
  }
  if ((unint64_t)maxBufLen >= 0x17)
  {
    CFIndex v14 = (maxBufLen & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((maxBufLen | 7) != 0x17) {
      CFIndex v14 = maxBufLen | 7;
    }
    CFIndex v15 = v14 + 1;
    long long v10 = operator new(v14 + 1);
    a1[1] = v9;
    a1[2] = v15 | 0x8000000000000000;
    *a1 = v10;
  }
  else
  {
    *((unsigned char *)a1 + 23) = maxBufLen;
    long long v10 = a1;
    if (!v9) {
      goto LABEL_19;
    }
  }
  bzero(v10, v9);
LABEL_19:
  *((unsigned char *)v10 + v9) = 0;
  if (*((char *)a1 + 23) >= 0) {
    CFRange v16 = (UInt8 *)a1;
  }
  else {
    CFRange v16 = (UInt8 *)*a1;
  }
  v19.location = 0;
  v19.length = Length;
  return CFStringGetBytes(theString, v19, 0x8000100u, 0, 0, v16, maxBufLen, &maxBufLen);
}

void sub_19E372390(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

CFIndex sub_19E3723AC(__CFBundle *a1, const __CFLocale *a2, const __CFString *a3)
{
  CFIndex result = (CFIndex)CFBundleGetInfoDictionary(a1);
  if (result)
  {
    CFDictionaryRef v7 = (const __CFDictionary *)result;
    CFIndex result = CFDictionaryGetCount((CFDictionaryRef)result);
    if (result)
    {
      if (a3)
      {
        CFURLRef v8 = CFBundleCopyBundleURL(a1);
        CFStringRef PathComponent = CFURLCopyLastPathComponent(v8);
        if (CFStringHasSuffix(a3, @".lm"))
        {
          CFComparisonResult v10 = CFStringCompare(PathComponent, a3, 0);
        }
        else
        {
          v23.length = CFStringGetLength(PathComponent) - 3;
          v23.location = 0;
          CFStringRef v11 = CFStringCreateWithSubstring(0, PathComponent, v23);
          CFComparisonResult v10 = CFStringCompare(v11, a3, 0);
          if (v11) {
            CFRelease(v11);
          }
        }
        if (PathComponent) {
          CFRelease(PathComponent);
        }
        if (v8) {
          CFRelease(v8);
        }
        if (v10) {
          return 0;
        }
      }
      CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v7, @"Locale");
      if (Value
        || (result = (CFIndex)CFDictionaryGetValue(v7, @"Language"), (CFStringRef Value = (const __CFString *)result) != 0))
      {
        CFArrayRef v13 = (const __CFArray *)CFDictionaryGetValue(v7, @"Alternate locales");
        if (v13)
        {
          CFArrayRef v14 = v13;
          CFIndex Count = CFArrayGetCount(v13);
          if (Count >= 1)
          {
            CFIndex v16 = Count;
            CFIndex v17 = 0;
            char v18 = 0;
            do
            {
              CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v14, v17);
              CFLocaleRef v20 = CFLocaleCreate(0, ValueAtIndex);
              if (sub_19E372604(v20, a2)) {
                char v18 = 1;
              }
              if (v20) {
                CFRelease(v20);
              }
              ++v17;
            }
            while (v16 != v17);
            if (v18) {
              return 1;
            }
          }
        }
        CFLocaleRef v21 = CFLocaleCreate(0, Value);
        unsigned int v22 = sub_19E372604(v21, a2);
        if (v21) {
          CFRelease(v21);
        }
        return v22 != 0;
      }
    }
  }
  return result;
}

void sub_19E3725A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  CFTypeID v3 = va_arg(va1, const void *);
  va_copy(va2, va1);
  CFIndex v5 = va_arg(va2, const void *);
  sub_19E3DCC24((const void **)va);
  sub_19E3DCC24((const void **)va1);
  sub_19E3F6888((const void **)va2);
  _Unwind_Resume(a1);
}

CFStringRef sub_19E372604(const __CFLocale *a1, const __CFLocale *a2)
{
  CFStringRef v4 = (const __CFString *)*MEMORY[0x1E4F1D218];
  CFStringRef Value = (const __CFString *)CFLocaleGetValue(a1, (CFLocaleKey)*MEMORY[0x1E4F1D218]);
  CFStringRef v6 = (const __CFString *)CFLocaleGetValue(a2, v4);
  if (Value) {
    BOOL v7 = v6 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7 || CFStringCompare(Value, v6, 0)) {
    return 0;
  }
  CFStringRef v9 = (const __CFString *)*MEMORY[0x1E4F1D1F0];
  CFStringRef v10 = (const __CFString *)CFLocaleGetValue(a1, (CFLocaleKey)*MEMORY[0x1E4F1D1F0]);
  if (v10)
  {
    CFStringRef v11 = v10;
    CFStringRef result = (const __CFString *)CFLocaleGetValue(a2, v9);
    if (!result) {
      return result;
    }
    if (CFStringCompare(result, v11, 0)) {
      return 0;
    }
  }
  CFStringRef v12 = (const __CFString *)*MEMORY[0x1E4F1D220];
  CFStringRef v13 = (const __CFString *)CFLocaleGetValue(a1, (CFLocaleKey)*MEMORY[0x1E4F1D220]);
  CFTypeRef v14 = CFLocaleGetValue(a2, v12);
  if (!((unint64_t)v13 | (unint64_t)v14)) {
    return (const __CFString *)1;
  }
  CFStringRef v15 = (const __CFString *)v14;
  CFStringRef result = 0;
  BOOL v16 = v13 != 0;
  if (v15) {
    BOOL v16 = 0;
  }
  if (v13) {
    BOOL v17 = 1;
  }
  else {
    BOOL v17 = v15 == 0;
  }
  if (v17 && !v16) {
    return (const __CFString *)(CFEqual(v15, v13));
  }
  return result;
}

CFURLRef sub_19E37272C(const __CFString *a1)
{
  if (!a1)
  {
    if (qword_1EC009558 == -1) {
      goto LABEL_11;
    }
    goto LABEL_14;
  }
  CFTypeID v2 = CFGetTypeID(a1);
  if (v2 == CFStringGetTypeID())
  {
    CFURLRef result = CFURLCreateWithFileSystemPath(0, a1, kCFURLPOSIXPathStyle, 1u);
    if (result) {
      return result;
    }
  }
  else
  {
    CFTypeID v4 = CFGetTypeID(a1);
    if (v4 == CFURLGetTypeID())
    {
      CFURLRef result = CFURLCopyAbsoluteURL((CFURLRef)a1);
      if (result) {
        return result;
      }
    }
  }
  if (qword_1EC009558 != -1) {
LABEL_14:
  }
    dispatch_once(&qword_1EC009558, &unk_1EF0BEBE0);
LABEL_11:
  CFIndex v5 = (const void *)qword_1EC009550;
  return (CFURLRef)CFRetain(v5);
}

void language_modeling::v1::LanguageModel::makeSession()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_19E3728C0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, long long buf)
{
  if (a2)
  {
    MEMORY[0x19F3BDCF0](v12, 0x20C4093837F09);
    if (a2 == 2)
    {
      CFStringRef v15 = __cxa_begin_catch(a1);
      if (qword_1EC0095B8 != -1) {
        dispatch_once(&qword_1EC0095B8, &unk_1EF0BEC40);
      }
      BOOL v16 = qword_1EC0095B0;
      if (os_log_type_enabled((os_log_t)qword_1EC0095B0, OS_LOG_TYPE_ERROR))
      {
        uint64_t v17 = (*(uint64_t (**)(void *))(*(void *)v15 + 16))(v15);
        LODWORD(buf) = 136315394;
        *(void *)((char *)&buf + 4) = "makeSession";
        WORD6(buf) = 2080;
        *(void *)((char *)&buf + 14) = v17;
        _os_log_error_impl(&dword_19E36B000, v16, OS_LOG_TYPE_ERROR, "%s: caught unexpected exception: %s", (uint8_t *)&buf, 0x16u);
      }
      *CFStringRef v11 = 0;
      __cxa_end_catch();
      JUMPOUT(0x19E372890);
    }
    sub_19E37B770(a1);
  }
  _Unwind_Resume(a1);
}

void sub_19E3729E0(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[56];
  v7[9] = a1[55];
  v7[10] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a1[58];
  v7[7] = a1[57];
  v7[8] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = a1[60];
  v7[5] = a1[59];
  v7[6] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = a1[62];
  v7[3] = a1[61];
  v7[4] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = a1[64];
  v7[1] = a1[63];
  v7[2] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  sub_19E372F7C((uint64_t)v7, (uint64_t)(a1 + 13), a2);
}

void sub_19E372EA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va4, a9);
  va_start(va3, a9);
  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v16 = va_arg(va2, void);
  uint64_t v18 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v19 = va_arg(va3, void);
  uint64_t v21 = va_arg(va3, void);
  va_copy(va4, va3);
  uint64_t v22 = va_arg(va4, void);
  uint64_t v24 = va_arg(va4, void);
  uint64_t v12 = *(void *)(v10 - 136);
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  sub_19E3D73EC(v10 - 128);
  sub_19E3D73EC(v10 - 112);
  sub_19E3D73EC(v10 - 96);
  sub_19E3D73EC(v10 - 80);
  sub_19E3D73EC(v10 - 64);
  MEMORY[0x19F3BDCF0](v9, 0x10F3C403524454CLL);
  sub_19E3D73EC((uint64_t)va);
  sub_19E3D73EC((uint64_t)va1);
  sub_19E3D73EC((uint64_t)va2);
  sub_19E3D73EC((uint64_t)va3);
  sub_19E3D73EC((uint64_t)va4);
  _Unwind_Resume(a1);
}

void sub_19E372F7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (const void *)language_modeling::v1::kEnvironmentAppIdentifierKey;
  size_t v6 = strlen((const char *)language_modeling::v1::kEnvironmentAppIdentifierKey);
  if (v6 > 0x7FFFFFFFFFFFFFF7) {
    sub_19E37C958();
  }
  BOOL v7 = (const void *)v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    CFURLRef v8 = (const void **)operator new(v9 + 1);
    __dst[1] = v7;
    unint64_t v19 = v10 | 0x8000000000000000;
    __dst[0] = v8;
  }
  else
  {
    HIBYTE(v19) = v6;
    CFURLRef v8 = __dst;
    if (!v6)
    {
LABEL_9:
      *((unsigned char *)v7 + (void)v8) = 0;
      CFStringRef v11 = sub_19E374C3C(a3, __dst);
      if (SHIBYTE(v19) < 0) {
        operator delete((void *)__dst[0]);
      }
      if ((uint64_t *)(a3 + 8) == v11) {
LABEL_24:
      }
        operator new();
      if (*((_DWORD *)v11 + 20) != 1) {
        sub_19E3D72EC();
      }
      uint64_t v12 = *(void **)(a2 + 64);
      CFStringRef v13 = (const __CFString *)kLMLanguageModelAppContextKey;
      if (*((char *)v11 + 79) < 0)
      {
        CFTypeRef v14 = (const UInt8 *)v11[7];
        if (!v14)
        {
          uint64_t v16 = 0;
          __dst[0] = 0;
LABEL_18:
          if (sub_19E373D28(v12[29], v13, v16, 0) && *(unsigned char *)(v12[29] + 192) && !v12[6]) {
            sub_19E40D074(v12);
          }
          if (v16) {
            CFRelease(v16);
          }
          goto LABEL_24;
        }
        CFIndex v15 = v11[8];
      }
      else
      {
        CFTypeRef v14 = (const UInt8 *)(v11 + 7);
        CFIndex v15 = *((unsigned __int8 *)v11 + 79);
      }
      uint64_t v16 = (__CFString *)CFStringCreateWithBytes(0, v14, v15, 0x8000100u, 0);
      __dst[0] = v16;
      if (!v16)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x19F3BD790](exception, "Could not construct");
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      goto LABEL_18;
    }
  }
  memmove(v8, v5, (size_t)v7);
  goto LABEL_9;
}

void sub_19E3738AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  __cxa_guard_abort(&qword_1EC009198);
  sub_19E41D2BC(v25);
  uint64_t v29 = *v26;
  uint64_t *v26 = 0;
  if (v29)
  {
    uint64_t v30 = sub_19E3709A0(v29);
    MEMORY[0x19F3BDCF0](v30, 0x10F0C4069D522A4);
  }
  size_t v31 = *(std::__shared_weak_count **)(v27 + 128);
  if (v31 && !atomic_fetch_add(&v31->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
    std::__shared_weak_count::__release_weak(v31);
  }
  uint64_t v32 = *(void *)(v27 + 112);
  *(void *)(v27 + 112) = 0;
  if (v32) {
    (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
  }
  uint64_t v33 = *(void *)(v27 + 104);
  *(void *)(v27 + 104) = 0;
  if (v33) {
    (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
  }
  uint64_t v34 = *(void *)(v27 + 96);
  *(void *)(v27 + 96) = 0;
  if (v34) {
    (*(void (**)(uint64_t))(*(void *)v34 + 8))(v34);
  }
  int v35 = *(std::__shared_weak_count **)(v27 + 80);
  if (v35 && !atomic_fetch_add(&v35->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
  }
  if (*(char *)(v27 + 71) < 0) {
    operator delete(*a9);
  }
  if (*(char *)(v27 + 39) < 0) {
    operator delete(*a10);
  }
  sub_19E3D73EC((uint64_t)&a12);
  MEMORY[0x19F3BDCF0](v27, 0x10B3C40B97B8E0ELL);
  _Unwind_Resume(a1);
}

void *sub_19E373C28(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      sub_19E37C7C4();
    }
    uint64_t v4 = (char *)operator new(24 * a2);
    *a1 = v4;
    a1[2] = &v4[24 * a2];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_19E373CD4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = (void **)*v1;
  if (*v1)
  {
    uint64_t v4 = (void **)v1[1];
    size_t v5 = *v1;
    if (v4 != v3)
    {
      do
      {
        if (*((char *)v4 - 1) < 0) {
          operator delete(*(v4 - 3));
        }
        v4 -= 3;
      }
      while (v4 != v3);
      size_t v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E373D28(uint64_t a1, CFStringRef theString1, __CFString *a3, CFErrorRef *a4)
{
  if (CFEqual(theString1, (CFStringRef)kLMLanguageModelAdaptationEnabledKey))
  {
    *(unsigned char *)(a1 + 192) = sub_19E377394(a3, 0);
    return 1;
  }
  if (CFEqual(theString1, (CFStringRef)kLMLanguageModelAppContextKey))
  {
    if (!sub_19E3743EC((void **)(a1 + 88), a3, 0)) {
      goto LABEL_34;
    }
    HIBYTE(__p[2]) = 17;
    strcpy((char *)__p, "appContextChanged");
    sub_19E3741C4(a1, (uint64_t)__p);
LABEL_50:
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    return 1;
  }
  if (CFEqual(theString1, (CFStringRef)kLMLanguageModelAppGenreKey))
  {
    if (a3)
    {
      if (CFEqual(a3, (CFTypeRef)kLMLanguageModelInformalAppGenre))
      {
        int v10 = 1;
      }
      else
      {
        if (!CFEqual(a3, (CFTypeRef)kLMLanguageModelFormalAppGenre)) {
          goto LABEL_34;
        }
        int v10 = 2;
      }
    }
    else
    {
      int v10 = 0;
    }
    *(_DWORD *)(a1 + 112) = v10;
    HIBYTE(__p[2]) = 15;
    strcpy((char *)__p, "appGenreChanged");
    sub_19E3741C4(a1, (uint64_t)__p);
    goto LABEL_50;
  }
  if (CFEqual(theString1, (CFStringRef)kLMLanguageModelRecipientContextKey))
  {
    if (!sub_19E377C98(a1 + 88, a3)) {
      goto LABEL_34;
    }
    __p[0] = operator new(0x19uLL);
    *(_OWORD *)&__p[1] = xmmword_19E573160;
    strcpy((char *)__p[0], "recipientContextChanged");
    sub_19E3741C4(a1, (uint64_t)__p);
    goto LABEL_50;
  }
  if (CFEqual(theString1, (CFStringRef)kLMLanguageModelSpatialTemporalContextKey))
  {
    if (a3)
    {
      CFTypeID v11 = CFGetTypeID(a3);
      if (v11 != CFStringGetTypeID()) {
        goto LABEL_34;
      }
      sub_19E37774C(a3, __p);
      uint64_t v12 = (void **)(a1 + 128);
      if (*(char *)(a1 + 151) < 0) {
        operator delete(*v12);
      }
      *(_OWORD *)uint64_t v12 = *(_OWORD *)__p;
      *(void **)(a1 + 144) = __p[2];
    }
    else
    {
      if (*(char *)(a1 + 151) < 0)
      {
        *(void *)(a1 + 136) = 0;
        uint64_t v17 = *(unsigned char **)(a1 + 128);
      }
      else
      {
        uint64_t v17 = (unsigned char *)(a1 + 128);
        *(unsigned char *)(a1 + 151) = 0;
      }
      unsigned char *v17 = 0;
    }
    __p[0] = operator new(0x20uLL);
    *(_OWORD *)&__p[1] = xmmword_19E572FC0;
    strcpy((char *)__p[0], "spatialTemporalContextChanged");
    sub_19E3741C4(a1, (uint64_t)__p);
    goto LABEL_50;
  }
  if (CFStringCompare(theString1, (CFStringRef)kLMLanguageModelDynamicNgramCountThresholdKey, 0))
  {
    if (CFEqual(theString1, (CFStringRef)kLMLanguageModelSwearWordPolicyEnabledKey))
    {
      *(unsigned char *)(a1 + 428) = sub_19E377394(a3, 0);
      return 1;
    }
    if (CFEqual(theString1, (CFStringRef)kLMLanguageModelSupportsNormalizedNameTokenKey))
    {
      *(unsigned char *)(a1 + 429) = sub_19E377394(a3, 0);
      return 1;
    }
    if (CFEqual(theString1, (CFStringRef)kLMLanguageModelLegacyGenericNameTokenKey))
    {
      sub_19E37774C(a3, __p);
      uint64_t v18 = (void **)(a1 + 432);
      if (*(char *)(a1 + 455) < 0) {
        operator delete(*v18);
      }
      *(_OWORD *)uint64_t v18 = *(_OWORD *)__p;
      *(void **)(a1 + 448) = __p[2];
      return 1;
    }
    CFComparisonResult v8 = CFStringCompare(theString1, (CFStringRef)kLMLanguageModelMontrealFullCacheSize, 0);
    if (a3)
    {
      if (v8 == kCFCompareEqualTo)
      {
        CFTypeID v9 = CFGetTypeID(a3);
        if (v9 == CFNumberGetTypeID())
        {
          CFNumberGetValue((CFNumberRef)a3, kCFNumberCFIndexType, (void *)(a1 + 380));
          return 1;
        }
      }
    }
  }
  else if (a3)
  {
    CFTypeID v13 = CFGetTypeID(a3);
    if (v13 == CFNumberGetTypeID())
    {
      CFNumberGetValue((CFNumberRef)a3, kCFNumberFloatType, (void *)(a1 + 256));
      return 1;
    }
  }
LABEL_34:
  if (a4)
  {
    sub_19E37774C(theString1, &v19);
    CFTypeRef v14 = std::string::append(&v19, " cannot be set after creation", 0x1DuLL);
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    __p[2] = (void *)v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    *a4 = sub_19E439948((uint64_t)__p);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v19.__r_.__value_.__l.__data_);
    }
  }
  return 0;
}

void sub_19E374170(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E3741C4(uint64_t a1, uint64_t a2)
{
  std::mutex::lock((std::mutex *)a1);
  size_t v5 = *(unsigned char **)(a1 + 64);
  uint64_t v4 = *(unsigned char **)(a1 + 72);
  int64_t v6 = v4 - v5;
  if (v4 == v5)
  {
    std::mutex::unlock((std::mutex *)a1);
  }
  else
  {
    if (v6 < 0) {
      sub_19E37C7C4();
    }
    BOOL v7 = (char *)operator new(v4 - v5);
    memcpy(v7, v5, v6);
    std::mutex::unlock((std::mutex *)a1);
    uint64_t v8 = 0;
    uint64_t v9 = 8 * (v6 >> 3);
    do
    {
      (*(void (**)(void, uint64_t, uint64_t))(**(void **)&v7[v8] + 16))(*(void *)&v7[v8], a1, a2);
      v8 += 8;
    }
    while (v9 != v8);
    operator delete(v7);
  }
}

void sub_19E3742B8(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_19E3742CC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19E3742E0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 - 112) + 168))();
}

void sub_19E374308(uint64_t a1)
{
  sub_19E374B30(*(uint64_t **)(a1 + 8));
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    uint64_t v3 = v2[1];
    if (v3) {
      sub_19E4C7544(v3);
    }
    uint64_t v4 = v2[2];
    if (v4) {
      sub_19E4C7544(v4);
    }
    if (*v2) {
      sub_19E3C2CE4();
    }
  }
}

void sub_19E3743D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E3743EC(void **a1, const __CFString *cf, BOOL *a3)
{
  uint64_t v3 = a1;
  if (!cf)
  {
    if (*((char *)a1 + 23) < 0)
    {
      a1[1] = 0;
      uint64_t v3 = (void **)*a1;
    }
    else
    {
      *((unsigned char *)a1 + 23) = 0;
    }
    *(unsigned char *)uint64_t v3 = 0;
    return 1;
  }
  CFTypeID v6 = CFGetTypeID(cf);
  if (v6 != CFStringGetTypeID()) {
    return 0;
  }
  sub_19E37774C(cf, __p);
  if (*((char *)v3 + 23) < 0) {
    operator delete(*v3);
  }
  *(_OWORD *)uint64_t v3 = *(_OWORD *)__p;
  unint64_t v7 = v83;
  v3[2] = (void *)v83;
  unint64_t v8 = HIBYTE(v7);
  unint64_t v9 = (unint64_t)v3[1];
  if ((v7 & 0x8000000000000000) != 0) {
    unint64_t v8 = (unint64_t)v3[1];
  }
  if (!v8) {
    return 1;
  }
  long long v79 = 0;
  v80 = 0;
  unint64_t v81 = 0;
  if (SHIBYTE(v7) < 0)
  {
    sub_19E39369C(__dst, *v3, v9);
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)v3;
    int v78 = v3[2];
  }
  unint64_t v72 = v3;
  uint64_t v73 = a3;
  unint64_t v11 = 0;
  uint64_t v12 = 0;
  char v76 = 1;
  LOWORD(v74) = 64;
  while (1)
  {
    int v15 = SHIBYTE(v78);
    uint64_t v16 = (unsigned char *)HIBYTE(v78);
    if ((SHIBYTE(v78) & 0x80000000) == 0)
    {
      if (v11 >= HIBYTE(v78) || v12 == -1) {
        break;
      }
      uint64_t v18 = __dst;
      std::string v19 = (char *)HIBYTE(v78);
      goto LABEL_30;
    }
    std::string v19 = (char *)__dst[1];
    if ((void *)v11 >= __dst[1] || v12 == -1) {
      break;
    }
    uint64_t v18 = (void **)__dst[0];
LABEL_30:
    if (v76 >= 0) {
      uint64_t v21 = (char *)&v74;
    }
    else {
      uint64_t v21 = (char *)v74;
    }
    if (v76 >= 0) {
      int64_t v22 = v76;
    }
    else {
      int64_t v22 = v75;
    }
    unint64_t v23 = v11;
    if (!v22) {
      goto LABEL_70;
    }
    uint64_t v24 = (char *)v18 + v11;
    uint64_t v25 = &v19[(void)v18];
    float v26 = &v19[-v11];
    if ((uint64_t)v26 < v22) {
      goto LABEL_38;
    }
    int v33 = *v21;
    while (1)
    {
      uint64_t v34 = &v26[-v22];
      if (v34 == (char *)-1) {
        goto LABEL_38;
      }
      int v35 = (char *)memchr(v24, v33, (size_t)(v34 + 1));
      if (!v35) {
        goto LABEL_38;
      }
      unint64_t v36 = v35;
      if (!memcmp(v35, v21, v22)) {
        break;
      }
      uint64_t v24 = v36 + 1;
      float v26 = (char *)(v25 - (v36 + 1));
      if ((uint64_t)v26 < v22) {
        goto LABEL_38;
      }
    }
    if (v36 == v25 || (unint64_t v23 = v36 - (char *)v18, v36 - (char *)v18 == -1))
    {
LABEL_38:
      if (v15 >= 0) {
        uint64_t v27 = __dst;
      }
      else {
        uint64_t v27 = (void **)__dst[0];
      }
      if (v15 >= 0) {
        BOOL v28 = v16;
      }
      else {
        BOOL v28 = __dst[1];
      }
      uint64_t v29 = (char *)v27 + v11;
      unint64_t v30 = (unint64_t)&v28[-v11];
      if ((unint64_t)&v28[-v11] > 0x7FFFFFFFFFFFFFF7) {
        goto LABEL_132;
      }
      if (v30 > 0x16)
      {
        uint64_t v37 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v30 | 7) != 0x17) {
          uint64_t v37 = v30 | 7;
        }
        uint64_t v38 = v37 + 1;
        size_t v31 = operator new(v37 + 1);
        __p[1] = &v28[-v11];
        unint64_t v83 = v38 | 0x8000000000000000;
        __p[0] = v31;
        unint64_t v32 = (unint64_t)&v28[-v11];
        if (v28 == (unsigned char *)v11) {
          goto LABEL_62;
        }
      }
      else
      {
        HIBYTE(v83) = (_BYTE)v28 - v11;
        size_t v31 = __p;
        unint64_t v32 = (unint64_t)&v28[-v11];
        if (v28 == (unsigned char *)v11) {
          goto LABEL_62;
        }
      }
      if (v32 >= 0x20 && (unint64_t)(&v31[-v11] - (unsigned char *)v27) >= 0x20)
      {
        unint64_t v54 = v32 & 0xFFFFFFFFFFFFFFE0;
        unsigned int v39 = &v31[v32 & 0xFFFFFFFFFFFFFFE0];
        uint64_t v55 = (long long *)((char *)v27 + v11 + 16);
        unint64_t v56 = v31 + 16;
        unint64_t v57 = v32 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v58 = *v55;
          *(v56 - 1) = *(v55 - 1);
          *unint64_t v56 = v58;
          v55 += 2;
          v56 += 2;
          v57 -= 32;
        }
        while (v57);
        if (v32 == v54)
        {
          v31 += v32 & 0xFFFFFFFFFFFFFFE0;
          goto LABEL_62;
        }
        v29 += v54;
      }
      else
      {
        unsigned int v39 = v31;
      }
      size_t v31 = v39;
      do
      {
        char v40 = *v29++;
        *v31++ = v40;
      }
      while (v29 != &v28[(void)v27]);
LABEL_62:
      *size_t v31 = 0;
      v41 = v80;
      if ((unint64_t)v80 < v81)
      {
        long long v13 = *(_OWORD *)__p;
        *((void *)v80 + 2) = v83;
        _OWORD *v41 = v13;
        v80 = (char *)v41 + 24;
        unsigned __int8 v14 = HIBYTE(v78);
        if (SHIBYTE(v78) < 0) {
          goto LABEL_65;
        }
        goto LABEL_18;
      }
      v80 = sub_19E3EB1B8(&v79, (uint64_t)__p);
      if (SHIBYTE(v83) < 0)
      {
        operator delete(__p[0]);
        unsigned __int8 v14 = HIBYTE(v78);
        if ((SHIBYTE(v78) & 0x80000000) == 0) {
          goto LABEL_18;
        }
LABEL_65:
        unint64_t v11 = (unint64_t)__dst[1];
        ++v12;
      }
      else
      {
        unsigned __int8 v14 = HIBYTE(v78);
        if (SHIBYTE(v78) < 0) {
          goto LABEL_65;
        }
LABEL_18:
        unint64_t v11 = v14;
        ++v12;
      }
    }
    else
    {
LABEL_70:
      if (v15 >= 0) {
        v42 = __dst;
      }
      else {
        v42 = (void **)__dst[0];
      }
      int64_t v43 = (char *)v42 + v11;
      unint64_t v44 = v23 - v11;
      if (v23 - v11 > 0x7FFFFFFFFFFFFFF7) {
LABEL_132:
      }
        sub_19E37C958();
      if (v44 > 0x16)
      {
        uint64_t v47 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v44 | 7) != 0x17) {
          uint64_t v47 = v44 | 7;
        }
        uint64_t v48 = v47 + 1;
        int v45 = operator new(v47 + 1);
        __p[1] = (void *)(v23 - v11);
        unint64_t v83 = v48 | 0x8000000000000000;
        __p[0] = v45;
        unint64_t v46 = v23 - v11;
        if (v23 == v11) {
          goto LABEL_85;
        }
      }
      else
      {
        HIBYTE(v83) = v23 - v11;
        int v45 = __p;
        unint64_t v46 = v23 - v11;
        if (v23 == v11) {
          goto LABEL_85;
        }
      }
      if (v46 >= 0x20 && (unint64_t)(v45 - ((char *)v42 + v11)) >= 0x20)
      {
        unint64_t v59 = v46 & 0xFFFFFFFFFFFFFFE0;
        unint64_t v49 = &v45[v46 & 0xFFFFFFFFFFFFFFE0];
        BOOL v60 = (long long *)((char *)v42 + v11 + 16);
        int8x8_t v61 = v45 + 16;
        unint64_t v62 = v46 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v63 = *v60;
          *(v61 - 1) = *(v60 - 1);
          *int8x8_t v61 = v63;
          v60 += 2;
          v61 += 2;
          v62 -= 32;
        }
        while (v62);
        if (v46 == v59)
        {
          v45 += v46 & 0xFFFFFFFFFFFFFFE0;
          goto LABEL_85;
        }
        v43 += v59;
      }
      else
      {
        unint64_t v49 = v45;
      }
      int v45 = v49;
      do
      {
        char v50 = *v43++;
        *v45++ = v50;
      }
      while (v43 != (char *)v42 + v23);
LABEL_85:
      *int v45 = 0;
      size_t v51 = v80;
      if ((unint64_t)v80 >= v81)
      {
        v80 = sub_19E3EB1B8(&v79, (uint64_t)__p);
        if (SHIBYTE(v83) < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        long long v52 = *(_OWORD *)__p;
        *((void *)v80 + 2) = v83;
        *size_t v51 = v52;
        v80 = (char *)v51 + 24;
      }
      int64_t v53 = v76;
      if (v76 < 0) {
        int64_t v53 = v75;
      }
      unint64_t v11 = v53 + v23;
      ++v12;
    }
  }
  if (v76 < 0)
  {
    operator delete(v74);
    unint64_t v64 = v73;
    if ((HIBYTE(v78) & 0x80) != 0) {
      goto LABEL_110;
    }
  }
  else
  {
    unint64_t v64 = v73;
    if ((SHIBYTE(v78) & 0x80) == 0) {
      goto LABEL_104;
    }
LABEL_110:
    operator delete(__dst[0]);
  }
LABEL_104:
  uint8x8_t v65 = (char *)v79;
  if (v80 - (unsigned char *)v79 == 48)
  {
    if (v79 != v72)
    {
      char v66 = *((unsigned char *)v79 + 23);
      if (*((char *)v72 + 23) < 0)
      {
        if (v66 >= 0) {
          uint8x8_t v68 = v79;
        }
        else {
          uint8x8_t v68 = *(void **)v79;
        }
        if (v66 >= 0) {
          size_t v69 = *((unsigned __int8 *)v79 + 23);
        }
        else {
          size_t v69 = *((void *)v79 + 1);
        }
        sub_19E3C6D44(v72, v68, v69);
      }
      else if ((*((unsigned char *)v79 + 23) & 0x80) != 0)
      {
        sub_19E3C6C7C(v72, *(void **)v79, *((void *)v79 + 1));
      }
      else
      {
        long long v67 = *(_OWORD *)v79;
        v72[2] = (void *)*((void *)v79 + 2);
        *(_OWORD *)unint64_t v72 = v67;
      }
    }
    operator new();
  }
  if (v64) {
    *unint64_t v64 = v80 - (unsigned char *)v79 == 48;
  }
  if (v65)
  {
    uint64_t v70 = v80;
    v71 = v65;
    if (v80 != v65)
    {
      do
      {
        if (*(v70 - 1) < 0) {
          operator delete(*((void **)v70 - 3));
        }
        v70 -= 24;
      }
      while (v70 != v65);
      v71 = v79;
    }
    v80 = v65;
    operator delete(v71);
  }
  return 1;
}

void sub_19E374A88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 + 23) < 0) {
    operator delete(*(void **)v33);
  }
  MEMORY[0x19F3BDCF0](v33, 0x1012C4003C2D8E3);
  sub_19E3EB09C(&a25);
  _Unwind_Resume(a1);
}

void sub_19E374B30(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = *(unsigned __int8 *)(v1 + 7);
    int v4 = *(_DWORD *)(v1 + 20);
    CFTypeID v6 = *(char **)(v1 + 24);
    size_t v5 = *(void **)(v1 + 32);
    if (v5)
    {
      free(v5);
      uint64_t v1 = *a1;
    }
    unint64_t v7 = *(void **)(v1 + 40);
    if (v7) {
      free(v7);
    }
    if (v6)
    {
      if (v4) {
        BOOL v8 = v3 == 0;
      }
      else {
        BOOL v8 = 1;
      }
      if (!v8)
      {
        int v10 = 0;
        unint64_t v11 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v3;
        do
        {
          unint64_t v12 = (unint64_t)&v6[(v10 + 24) >> 3];
          unint64_t v13 = v12 & 0xFFFFFFFFFFFFFFF8;
          uint64_t v14 = v10 & 7 | (8 * (v12 & 7));
          uint64_t v15 = *(void *)(v12 & 0xFFFFFFFFFFFFFFF8) >> v14;
          if ((unint64_t)(v14 + v3) >= 0x41) {
            v15 |= *(void *)(v13 + 8) << -(char)v14;
          }
          if ((v15 & v11) != 0) {
            free((void *)(v15 & v11));
          }
          v10 += v3 + 24;
          --v4;
        }
        while (v4);
      }
      free(v6);
    }
    uint64_t v9 = *a1;
    *(unsigned char *)(v9 + 7) = 64;
    *(_DWORD *)(v9 + 20) = 0;
    *(void *)(v9 + 12) = 24;
    *(void *)(v9 + 32) = 0;
    *(void *)(v9 + 40) = 0;
    *(void *)(v9 + 24) = 0;
  }
}

uint64_t *sub_19E374C3C(uint64_t a1, const void **a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  uint64_t v3 = *(uint64_t **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    size_t v5 = a2;
  }
  else {
    size_t v5 = *a2;
  }
  if (v4 >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  unint64_t v7 = (uint64_t *)(a1 + 8);
  do
  {
    while (1)
    {
      int v8 = *((char *)v3 + 55);
      uint64_t v9 = v8 >= 0 ? v3 + 4 : (uint64_t *)v3[4];
      size_t v10 = v8 >= 0 ? *((unsigned __int8 *)v3 + 55) : v3[5];
      size_t v11 = v6 >= v10 ? v10 : v6;
      int v12 = memcmp(v9, v5, v11);
      if (v12) {
        break;
      }
      if (v10 >= v6) {
        goto LABEL_23;
      }
LABEL_9:
      uint64_t v3 = (uint64_t *)v3[1];
      if (!v3) {
        goto LABEL_24;
      }
    }
    if (v12 < 0) {
      goto LABEL_9;
    }
LABEL_23:
    unint64_t v7 = v3;
    uint64_t v3 = (uint64_t *)*v3;
  }
  while (v3);
LABEL_24:
  if (v7 == v2) {
    return v2;
  }
  int v13 = *((char *)v7 + 55);
  if (v13 >= 0) {
    uint64_t v14 = v7 + 4;
  }
  else {
    uint64_t v14 = (const void *)v7[4];
  }
  if (v13 >= 0) {
    size_t v15 = *((unsigned __int8 *)v7 + 55);
  }
  else {
    size_t v15 = v7[5];
  }
  if (v15 >= v6) {
    size_t v16 = v6;
  }
  else {
    size_t v16 = v15;
  }
  int v17 = memcmp(v5, v14, v16);
  if (!v17)
  {
    if (v6 >= v15) {
      return v7;
    }
    return v2;
  }
  if (v17 < 0) {
    return v2;
  }
  return v7;
}

uint64_t *sub_19E374D44(uint64_t *a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 23);
  if (v3 >= 0) {
    int v4 = (const UInt8 *)a2;
  }
  else {
    int v4 = *(const UInt8 **)a2;
  }
  if (v4)
  {
    if (v3 >= 0) {
      CFIndex v5 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      CFIndex v5 = *(void *)(a2 + 8);
    }
    CFStringRef v6 = CFStringCreateWithBytes(0, v4, v5, 0x8000100u, 0);
    if (!v6)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x19F3BD790](exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  else
  {
    CFStringRef v6 = 0;
  }
  CFLocaleRef v8 = CFLocaleCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v6);
  if (v6) {
    CFRelease(v6);
  }
  *a1 = sub_19E374E88((uint64_t)v8, 134217984);
  if (v8) {
    CFRelease(v8);
  }
  return a1;
}

void sub_19E374E38(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19E374E54(_Unwind_Exception *exception_object)
{
  if (v1) {
    CFRelease(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E374E88(uint64_t a1, int a2)
{
  if (a2 == 134217984) {
    operator new();
  }
  return 0;
}

void sub_19E375068(_Unwind_Exception *a1)
{
  MEMORY[0x19F3BDCF0](v1, 0x10F0C4069D522A4);
  _Unwind_Resume(a1);
}

void sub_19E3750B8(uint64_t a1, CFDictionaryRef theDict, char a3)
{
  CFDictionaryRef theDicta = theDict;
  char v263 = a3;
  float v262 = 0.0;
  if (theDict)
  {
    CFStringRef Value = (const __CFString *)CFDictionaryGetValue(theDict, (const void *)kLMLanguageModelAdaptationVersionNumberKey);
    if (Value)
    {
      CFStringRef v5 = Value;
      CFTypeID v6 = CFGetTypeID(Value);
      if (v6 == CFStringGetTypeID())
      {
        sub_19E4339A4((int *)&v266, v5);
        unsigned int v7 = *(_DWORD *)(a1 + 196);
        BOOL v8 = LODWORD(v266.__r_.__value_.__l.__data_) > v7;
        if (LODWORD(v266.__r_.__value_.__l.__data_) == v7) {
          BOOL v8 = HIDWORD(v266.__r_.__value_.__r.__words[0]) > *(_DWORD *)(a1 + 200);
        }
        if (v8) {
          *(void *)(a1 + 196) = v266.__r_.__value_.__r.__words[0];
        }
      }
    }
  }
  v261[0] = &theDicta;
  v261[1] = &v263;
  uint64_t v9 = (unsigned char *)(a1 + 192);
  sub_19E37747C((uint64_t)v261, (unsigned char *)(a1 + 192), (const __CFString *)kLMLanguageModelAdaptationEnabledKey, 1);
  size_t v10 = (unsigned char *)(a1 + 419);
  sub_19E37747C((uint64_t)v261, (unsigned char *)(a1 + 419), (const __CFString *)kLMLanguageModelDisableDynamicLanguageModelsKey, 0);
  sub_19E37747C((uint64_t)v261, (unsigned char *)(a1 + 428), (const __CFString *)kLMLanguageModelSwearWordPolicyEnabledKey, 0);
  sub_19E37747C((uint64_t)v261, (unsigned char *)(a1 + 429), (const __CFString *)kLMLanguageModelSupportsNormalizedNameTokenKey, 0);
  CFStringRef v11 = (const __CFString *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelStaticModelsEnabledKey);
  *(unsigned char *)(a1 + 344) = sub_19E377394(v11, 1);
  CFStringRef v12 = (const __CFString *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelLanguageLikelihoodModelEnabledKey);
  *(unsigned char *)(a1 + 364) = sub_19E377394(v12, 1);
  CFStringRef v13 = (const __CFString *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelPrioritizeVocabulariesKey);
  *(unsigned char *)(a1 + 365) = sub_19E377394(v13, 0);
  if (*(unsigned char *)(a1 + 344))
  {
    if (*v9) {
      goto LABEL_11;
    }
LABEL_55:
    *(void *)(a1 + 248) = 0;
    if (!*v10) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  *(void *)(a1 + 336) = 0;
  if (!*v9) {
    goto LABEL_55;
  }
LABEL_11:
  if (*v10)
  {
LABEL_12:
    *(void *)(a1 + 248) = 0;
    *(_DWORD *)(a1 + 204) = 0;
    *(_DWORD *)(a1 + 324) = 0;
  }
LABEL_13:
  valuePtr = (unsigned int *)(a1 + 244);
  v257 = (unsigned char *)(a1 + 192);
  if (!theDicta) {
    goto LABEL_33;
  }
  CFNumberRef v14 = (const __CFNumber *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelDynamicModelOrderKey);
  if (v14)
  {
    CFNumberRef v15 = v14;
    CFTypeID v16 = CFGetTypeID(v14);
    if (v16 == CFNumberGetTypeID()) {
      CFNumberGetValue(v15, kCFNumberIntType, valuePtr);
    }
  }
  if (!theDicta) {
    goto LABEL_33;
  }
  CFNumberRef v17 = (const __CFNumber *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelMaxDynamicModelSizeKey);
  if (v17)
  {
    CFNumberRef v18 = v17;
    CFTypeID v19 = CFGetTypeID(v17);
    if (v19 == CFNumberGetTypeID()) {
      CFNumberGetValue(v18, kCFNumberIntType, (void *)(a1 + 312));
    }
  }
  if (!theDicta) {
    goto LABEL_33;
  }
  CFNumberRef v20 = (const __CFNumber *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelPruningTargetSizeKey);
  if (v20)
  {
    CFNumberRef v21 = v20;
    CFTypeID v22 = CFGetTypeID(v20);
    if (v22 == CFNumberGetTypeID()) {
      CFNumberGetValue(v21, kCFNumberIntType, (void *)(a1 + 320));
    }
  }
  if (theDicta)
  {
    CFNumberRef v23 = (const __CFNumber *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelDecayExponentKey);
    if (v23)
    {
      CFNumberRef v24 = v23;
      CFTypeID v25 = CFGetTypeID(v23);
      if (v25 == CFNumberGetTypeID()) {
        CFNumberGetValue(v24, kCFNumberFloatType, (void *)(a1 + 208));
      }
    }
    float v26 = (float *)(a1 + 336);
    if (!theDicta)
    {
      unint64_t v30 = (float *)(a1 + 204);
      goto LABEL_58;
    }
    CFNumberRef v27 = (const __CFNumber *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelStaticModelWeightKey);
    if (v27)
    {
      CFNumberRef v28 = v27;
      CFTypeID v29 = CFGetTypeID(v27);
      if (v29 == CFNumberGetTypeID()) {
        CFNumberGetValue(v28, kCFNumberFloatType, (void *)(a1 + 336));
      }
    }
  }
  else
  {
LABEL_33:
    float v26 = (float *)(a1 + 336);
  }
  unint64_t v30 = (float *)(a1 + 204);
  if (!theDicta)
  {
LABEL_58:
    uint64_t v34 = (float *)(a1 + 248);
    goto LABEL_59;
  }
  CFNumberRef v31 = (const __CFNumber *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelCacheModelWeightKey);
  if (v31)
  {
    CFNumberRef v32 = v31;
    CFTypeID v33 = CFGetTypeID(v31);
    if (v33 == CFNumberGetTypeID()) {
      CFNumberGetValue(v32, kCFNumberFloatType, (void *)(a1 + 204));
    }
  }
  uint64_t v34 = (float *)(a1 + 248);
  if (theDicta)
  {
    CFNumberRef v35 = (const __CFNumber *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelDynamicModelWeightKey);
    if (v35)
    {
      CFNumberRef v36 = v35;
      CFTypeID v37 = CFGetTypeID(v35);
      if (v37 == CFNumberGetTypeID()) {
        CFNumberGetValue(v36, kCFNumberFloatType, (void *)(a1 + 248));
      }
    }
    if (theDicta)
    {
      CFNumberRef v38 = (const __CFNumber *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelRecencyModelWeightKey);
      if (v38)
      {
        CFNumberRef v39 = v38;
        CFTypeID v40 = CFGetTypeID(v38);
        if (v40 == CFNumberGetTypeID()) {
          CFNumberGetValue(v39, kCFNumberFloatType, (void *)(a1 + 324));
        }
      }
      if (theDicta)
      {
        CFNumberRef v41 = (const __CFNumber *)CFDictionaryGetValue(theDicta, (const void *)kLMTouconLanguageModelStaticModelWeightKey);
        if (v41)
        {
          CFNumberRef v42 = v41;
          CFTypeID v43 = CFGetTypeID(v41);
          if (v43 == CFNumberGetTypeID()) {
            CFNumberGetValue(v42, kCFNumberFloatType, (void *)(a1 + 420));
          }
        }
        if (theDicta)
        {
          CFNumberRef v44 = (const __CFNumber *)CFDictionaryGetValue(theDicta, (const void *)kLMToucanLanguageModelDynamicModelWeightKey);
          if (v44)
          {
            CFNumberRef v45 = v44;
            CFTypeID v46 = CFGetTypeID(v44);
            if (v46 == CFNumberGetTypeID()) {
              CFNumberGetValue(v45, kCFNumberFloatType, (void *)(a1 + 424));
            }
          }
        }
      }
    }
  }
LABEL_59:
  float v47 = *v30;
  float v48 = *v34;
  float v49 = (float)(*v30 + *v26) + *v34;
  if (v49 > 0.0)
  {
    float v50 = 1.0 / v49;
    float *v26 = *v26 * v50;
    *unint64_t v30 = v47 * v50;
    *uint64_t v34 = v48 * v50;
  }
  float v51 = *(float *)(a1 + 340);
  float v52 = *(float *)(a1 + 252);
  float v53 = v52 + v51;
  if ((float)(v52 + v51) > 0.0)
  {
    *(float *)(a1 + 340) = v51 / v53;
    *(float *)(a1 + 252) = v52 / v53;
  }
  if (!theDicta) {
    goto LABEL_123;
  }
  CFNumberRef v54 = (const __CFNumber *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelTagMatchCountWeightKey);
  if (v54)
  {
    CFNumberRef v55 = v54;
    CFTypeID v56 = CFGetTypeID(v54);
    if (v56 == CFNumberGetTypeID()) {
      CFNumberGetValue(v55, kCFNumberFloatType, (void *)(a1 + 228));
    }
  }
  if (!theDicta) {
    goto LABEL_123;
  }
  CFNumberRef v57 = (const __CFNumber *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelTagGenreMatchCountWeightKey);
  if (v57)
  {
    CFNumberRef v58 = v57;
    CFTypeID v59 = CFGetTypeID(v57);
    if (v59 == CFNumberGetTypeID()) {
      CFNumberGetValue(v58, kCFNumberFloatType, (void *)(a1 + 224));
    }
  }
  if (!theDicta) {
    goto LABEL_123;
  }
  CFNumberRef v60 = (const __CFNumber *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelTagRecipientMatchCountWeightKey);
  if (v60)
  {
    CFNumberRef v61 = v60;
    CFTypeID v62 = CFGetTypeID(v60);
    if (v62 == CFNumberGetTypeID()) {
      CFNumberGetValue(v61, kCFNumberFloatType, (void *)(a1 + 236));
    }
  }
  if (!theDicta) {
    goto LABEL_123;
  }
  CFNumberRef v63 = (const __CFNumber *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelTagSpatialTemporalMatchCountWeightKey);
  if (v63)
  {
    CFNumberRef v64 = v63;
    CFTypeID v65 = CFGetTypeID(v63);
    if (v65 == CFNumberGetTypeID()) {
      CFNumberGetValue(v64, kCFNumberFloatType, (void *)(a1 + 240));
    }
  }
  if (!theDicta) {
    goto LABEL_123;
  }
  CFNumberRef v66 = (const __CFNumber *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelTagMismatchCountWeightKey);
  if (v66)
  {
    CFNumberRef v67 = v66;
    CFTypeID v68 = CFGetTypeID(v66);
    if (v68 == CFNumberGetTypeID()) {
      CFNumberGetValue(v67, kCFNumberFloatType, (void *)(a1 + 232));
    }
  }
  if (!theDicta) {
    goto LABEL_123;
  }
  CFNumberRef v69 = (const __CFNumber *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelDynamicUnigramCountThresholdKey);
  if (v69)
  {
    CFNumberRef v70 = v69;
    CFTypeID v71 = CFGetTypeID(v69);
    if (v71 == CFNumberGetTypeID()) {
      CFNumberGetValue(v70, kCFNumberFloatType, (void *)(a1 + 304));
    }
  }
  if (!theDicta) {
    goto LABEL_123;
  }
  CFNumberRef v72 = (const __CFNumber *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelDynamicNgramCountThresholdKey);
  if (v72)
  {
    CFNumberRef v73 = v72;
    CFTypeID v74 = CFGetTypeID(v72);
    if (v74 == CFNumberGetTypeID()) {
      CFNumberGetValue(v73, kCFNumberFloatType, (void *)(a1 + 256));
    }
  }
  if (!theDicta) {
    goto LABEL_123;
  }
  CFNumberRef v75 = (const __CFNumber *)CFDictionaryGetValue(theDicta, @"DynamicEmojiUnigramCountThreshold");
  if (v75)
  {
    CFNumberRef v76 = v75;
    CFTypeID v77 = CFGetTypeID(v75);
    if (v77 == CFNumberGetTypeID()) {
      CFNumberGetValue(v76, kCFNumberFloatType, (void *)(a1 + 220));
    }
  }
  if (!theDicta) {
    goto LABEL_123;
  }
  CFNumberRef v78 = (const __CFNumber *)CFDictionaryGetValue(theDicta, @"DynamicEmojiNgramCountThreshold");
  if (v78)
  {
    CFNumberRef v79 = v78;
    CFTypeID v80 = CFGetTypeID(v78);
    if (v80 == CFNumberGetTypeID()) {
      CFNumberGetValue(v79, kCFNumberFloatType, (void *)(a1 + 216));
    }
  }
  if (!theDicta) {
    goto LABEL_123;
  }
  CFNumberRef v81 = (const __CFNumber *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelDynamicTotalUnigramCountThresholdKey);
  if (v81)
  {
    CFNumberRef v82 = v81;
    CFTypeID v83 = CFGetTypeID(v81);
    if (v83 == CFNumberGetTypeID()) {
      CFNumberGetValue(v82, kCFNumberFloatType, (void *)(a1 + 300));
    }
  }
  if (!theDicta) {
    goto LABEL_123;
  }
  CFNumberRef v84 = (const __CFNumber *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelRecencyNgramCountThresholdKey);
  if (v84)
  {
    CFNumberRef v85 = v84;
    CFTypeID v86 = CFGetTypeID(v84);
    if (v86 == CFNumberGetTypeID()) {
      CFNumberGetValue(v85, kCFNumberFloatType, (void *)(a1 + 328));
    }
  }
  if (!theDicta) {
    goto LABEL_123;
  }
  CFNumberRef v87 = (const __CFNumber *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelRecencyUnigramCountThresholdKey);
  if (v87)
  {
    CFNumberRef v88 = v87;
    CFTypeID v89 = CFGetTypeID(v87);
    if (v89 == CFNumberGetTypeID()) {
      CFNumberGetValue(v88, kCFNumberFloatType, (void *)(a1 + 332));
    }
  }
  if (!theDicta) {
    goto LABEL_123;
  }
  CFNumberRef v90 = (const __CFNumber *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelMinDynamicTokensTypedThresholdKey);
  if (v90)
  {
    CFNumberRef v91 = v90;
    CFTypeID v92 = CFGetTypeID(v90);
    if (v92 == CFNumberGetTypeID()) {
      CFNumberGetValue(v91, kCFNumberIntType, (void *)(a1 + 368));
    }
  }
  if (!theDicta)
  {
LABEL_123:
    uint64_t v96 = a1 + 292;
LABEL_124:
    unint64_t v100 = (_DWORD *)(a1 + 348);
    if (theDicta)
    {
      CFNumberRef v101 = (const __CFNumber *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelTagBitCountKey);
      if (v101)
      {
        CFNumberRef v102 = v101;
        CFTypeID v103 = CFGetTypeID(v101);
        if (v103 == CFNumberGetTypeID()) {
          CFNumberGetValue(v102, kCFNumberIntType, (void *)(a1 + 348));
        }
      }
    }
    goto LABEL_128;
  }
  CFNumberRef v93 = (const __CFNumber *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelFirstDynamicTokenIDKey);
  if (v93)
  {
    CFNumberRef v94 = v93;
    CFTypeID v95 = CFGetTypeID(v93);
    if (v95 == CFNumberGetTypeID()) {
      CFNumberGetValue(v94, kCFNumberIntType, (void *)(a1 + 288));
    }
  }
  uint64_t v96 = a1 + 292;
  if (theDicta)
  {
    CFNumberRef v97 = (const __CFNumber *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelLastDynamicTokenIDKey);
    if (v97)
    {
      CFNumberRef v98 = v97;
      CFTypeID v99 = CFGetTypeID(v97);
      if (v99 == CFNumberGetTypeID()) {
        CFNumberGetValue(v98, kCFNumberIntType, (void *)(a1 + 292));
      }
    }
    goto LABEL_124;
  }
  unint64_t v100 = (_DWORD *)(a1 + 348);
LABEL_128:
  if (*v100 != 8 && *v100 != 16)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    sub_19E382340(&v266, "invalid tag bit count (valid values are 8 and 16)");
    sub_19E3F5604(exception, (long long *)&v266);
    __cxa_throw(exception, (struct type_info *)&unk_1EF0B7540, (void (*)(void *))sub_19E3F56B0);
  }
  if (*(unsigned char *)(v96 + 3))
  {
    v252 = __cxa_allocate_exception(0x20uLL);
    sub_19E382340(&v266, "invalid dynamic token ID range");
    sub_19E3F5604(v252, (long long *)&v266);
    __cxa_throw(v252, (struct type_info *)&unk_1EF0B7540, (void (*)(void *))sub_19E3F56B0);
  }
  uint64_t v259 = a1;
  if (theDicta)
  {
    CFNumberRef v104 = (const __CFNumber *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelDynamicTokenPenaltyKey);
    if (v104)
    {
      CFNumberRef v105 = v104;
      CFTypeID v106 = CFGetTypeID(v104);
      if (v106 == CFNumberGetTypeID()) {
        CFNumberGetValue(v105, kCFNumberFloatType, (void *)(a1 + 296));
      }
    }
    if (theDicta)
    {
      CFArrayRef v107 = (const __CFArray *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelDynamicNgramWeightsKey);
      if (v107)
      {
        CFArrayRef v108 = v107;
        v109 = (void **)(a1 + 264);
        *(void *)(a1 + 272) = *(void *)(a1 + 264);
        CFIndex Count = CFArrayGetCount(v107);
        if (Count >= 1)
        {
          unint64_t v111 = 0;
          float v112 = 0.0;
          while (1)
          {
            if (v111 >= *valuePtr) {
              goto LABEL_166;
            }
            CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v108, v111);
            CFNumberGetValue(ValueAtIndex, kCFNumberFloatType, &v262);
            uint64_t v116 = *(float **)(a1 + 272);
            unint64_t v115 = *(void *)(a1 + 280);
            if ((unint64_t)v116 >= v115) {
              break;
            }
            *uint64_t v116 = v262;
            uint64_t v113 = v116 + 1;
LABEL_140:
            *(void *)(a1 + 272) = v113;
            float v112 = v262 + v112;
            if (++v111 == Count)
            {
              LODWORD(v111) = Count;
              goto LABEL_166;
            }
          }
          v117 = (float *)*v109;
          uint64_t v118 = (char *)v116 - (unsigned char *)*v109;
          uint64_t v119 = v118 >> 2;
          unint64_t v120 = (v118 >> 2) + 1;
          if (v120 >> 62) {
LABEL_354:
          }
            sub_19E37C7C4();
          uint64_t v121 = v115 - (void)v117;
          if (v121 >> 1 > v120) {
            unint64_t v120 = v121 >> 1;
          }
          if ((unint64_t)v121 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v122 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v122 = v120;
          }
          if (v122)
          {
            if (v122 >> 62) {
LABEL_355:
            }
              sub_19E37C2B8();
            v123 = operator new(4 * v122);
          }
          else
          {
            v123 = 0;
          }
          v124 = (float *)&v123[4 * v119];
          float *v124 = v262;
          uint64_t v113 = v124 + 1;
          if (v116 == v117)
          {
            a1 = v259;
            goto LABEL_162;
          }
          unint64_t v125 = (char *)(v116 - 1) - (char *)v117;
          if (v125 >= 0x2C)
          {
            unint64_t v126 = (char *)v116 - &v123[v118];
            a1 = v259;
            if (v126 >= 0x20)
            {
              uint64_t v127 = (v125 >> 2) + 1;
              uint64_t v128 = &v123[4 * v119 - 16];
              uint64_t v129 = v116 - 4;
              uint64_t v130 = v127 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                long long v131 = *(_OWORD *)v129;
                *(v128 - 1) = *((_OWORD *)v129 - 1);
                *uint64_t v128 = v131;
                v128 -= 2;
                v129 -= 8;
                v130 -= 8;
              }
              while (v130);
              v124 -= v127 & 0x7FFFFFFFFFFFFFF8;
              v116 -= v127 & 0x7FFFFFFFFFFFFFF8;
              if (v127 == (v127 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_162:
                *(void *)(a1 + 264) = v124;
                *(void *)(a1 + 272) = v113;
                *(void *)(a1 + 280) = &v123[4 * v122];
                if (v117) {
                  operator delete(v117);
                }
                goto LABEL_140;
              }
            }
          }
          else
          {
            a1 = v259;
          }
          do
          {
            int v132 = *((_DWORD *)v116-- - 1);
            *((_DWORD *)v124-- - 1) = v132;
          }
          while (v116 != v117);
          goto LABEL_162;
        }
        LODWORD(v111) = 0;
        float v112 = 0.0;
LABEL_166:
        unsigned int v133 = *valuePtr;
        if (v111 < *valuePtr)
        {
          uint64_t v134 = *(char **)(a1 + 272);
          while (1)
          {
            unint64_t v136 = *(void *)(a1 + 280);
            if ((unint64_t)v134 >= v136) {
              break;
            }
            *(_DWORD *)uint64_t v134 = 0;
            v135 = v134 + 4;
LABEL_169:
            *(void *)(a1 + 272) = v135;
            LODWORD(v111) = v111 + 1;
            uint64_t v134 = v135;
            if (v111 >= v133) {
              goto LABEL_196;
            }
          }
          CFIndex v137 = (char *)*v109;
          uint64_t v138 = v134 - (unsigned char *)*v109;
          uint64_t v139 = v138 >> 2;
          unint64_t v140 = (v138 >> 2) + 1;
          if (v140 >> 62) {
            goto LABEL_354;
          }
          uint64_t v141 = v136 - (void)v137;
          if (v141 >> 1 > v140) {
            unint64_t v140 = v141 >> 1;
          }
          if ((unint64_t)v141 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v142 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v142 = v140;
          }
          if (v142)
          {
            if (v142 >> 62) {
              goto LABEL_355;
            }
            uint64_t v143 = operator new(4 * v142);
          }
          else
          {
            uint64_t v143 = 0;
          }
          uint64_t v144 = &v143[4 * v139];
          *uint64_t v144 = 0;
          v135 = (char *)(v144 + 1);
          if (v134 == v137)
          {
            a1 = v259;
            goto LABEL_187;
          }
          unint64_t v145 = v134 - 4 - v137;
          if (v145 < 0xBC
            || &v143[v138 - 4 - (v145 & 0xFFFFFFFFFFFFFFFCLL)] > &v143[v138 - 4]
            || &v134[-(v145 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v134 - 4
            || (unint64_t)(v134 - v143 - v138) < 0x20)
          {
            unint64_t v146 = v134;
            a1 = v259;
          }
          else
          {
            uint64_t v148 = (v145 >> 2) + 1;
            unint64_t v146 = &v134[-4 * (v148 & 0x7FFFFFFFFFFFFFF8)];
            v149 = &v143[4 * v139 - 16];
            uint64_t v150 = v134 - 16;
            uint64_t v151 = v148 & 0x7FFFFFFFFFFFFFF8;
            a1 = v259;
            do
            {
              long long v152 = *(_OWORD *)v150;
              *(v149 - 1) = *((_OWORD *)v150 - 1);
              _OWORD *v149 = v152;
              v149 -= 2;
              v150 -= 32;
              v151 -= 8;
            }
            while (v151);
            v144 -= v148 & 0x7FFFFFFFFFFFFFF8;
            if (v148 == (v148 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_187:
              *(void *)(a1 + 264) = v144;
              *(void *)(a1 + 272) = v135;
              *(void *)(a1 + 280) = &v143[4 * v142];
              if (v137)
              {
                operator delete(v137);
                unsigned int v133 = *valuePtr;
              }
              goto LABEL_169;
            }
          }
          do
          {
            int v147 = *((_DWORD *)v146 - 1);
            v146 -= 4;
            *--uint64_t v144 = v147;
          }
          while (v146 != v137);
          goto LABEL_187;
        }
LABEL_196:
        if (v112 > 0.0 && Count >= 1)
        {
          v154 = (float32x4_t *)*v109;
          if ((unint64_t)Count < 8)
          {
            unint64_t v155 = 0;
LABEL_205:
            unint64_t v160 = Count - v155;
            uint64_t v161 = &v154->f32[v155];
            do
            {
              *uint64_t v161 = *v161 * (float)(1.0 / v112);
              ++v161;
              --v160;
            }
            while (v160);
            goto LABEL_207;
          }
          unint64_t v155 = Count & 0xFFFFFFFFFFFFFFF8;
          unint64_t v156 = v154 + 1;
          unint64_t v157 = Count & 0xFFFFFFFFFFFFFFF8;
          float v158 = 1.0 / v112;
          do
          {
            float32x4_t v159 = vmulq_n_f32(*v156, v158);
            v156[-1] = vmulq_n_f32(v156[-1], v158);
            *unint64_t v156 = v159;
            v156 += 2;
            v157 -= 8;
          }
          while (v157);
          if (Count != v155) {
            goto LABEL_205;
          }
        }
      }
    }
  }
LABEL_207:
  v162 = CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelDynamicDataSchema);
  if (v162)
  {
    CFTypeID v163 = CFGetTypeID(v162);
    if (v163 == CFDictionaryGetTypeID() && !*(void *)(a1 + 184)) {
      operator new();
    }
  }
  if (theDicta)
  {
    CFNumberRef v164 = (const __CFNumber *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelMaxDynamicLexiconEntryCount);
    if (v164)
    {
      CFNumberRef v165 = v164;
      CFTypeID v166 = CFGetTypeID(v164);
      if (v166 == CFNumberGetTypeID()) {
        CFNumberGetValue(v165, kCFNumberIntType, (void *)(a1 + 308));
      }
    }
    if (theDicta)
    {
      CFNumberRef v167 = (const __CFNumber *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelUnknownTokenPenaltyKey);
      if (v167)
      {
        CFNumberRef v168 = v167;
        CFTypeID v169 = CFGetTypeID(v167);
        if (v169 == CFNumberGetTypeID()) {
          CFNumberGetValue(v168, kCFNumberFloatType, (void *)(a1 + 352));
        }
      }
    }
  }
  CFStringRef v170 = (const __CFString *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelUseDynamicTokenCharacterFilterKey);
  *(unsigned char *)(a1 + 356) = sub_19E377394(v170, 1);
  CFStringRef v171 = (const __CFString *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelUseSpecialNumberTokenKey);
  *(unsigned char *)(a1 + 358) = sub_19E377394(v171, 1);
  CFStringRef v172 = (const __CFString *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelUseSerializedCacheKey);
  *(unsigned char *)(a1 + 357) = sub_19E377394(v172, 0);
  CFStringRef v173 = (const __CFString *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelUseMontrealKey);
  *(unsigned char *)(a1 + 360) = sub_19E377394(v173, 1);
  CFStringRef v174 = (const __CFString *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelUseLegacyStaticNgramModelsKey);
  *(unsigned char *)(a1 + 361) = sub_19E377394(v174, 1);
  if (CFDictionaryContainsKey(theDicta, (const void *)kLMLanguageModelUseMontrealUNKKey)) {
    *(unsigned char *)(a1 + 400) = 1;
  }
  if (theDicta)
  {
    CFNumberRef v175 = (const __CFNumber *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelMaxMontrealPredictionsKey);
    if (v175)
    {
      CFNumberRef v176 = v175;
      CFTypeID v177 = CFGetTypeID(v175);
      if (v177 == CFNumberGetTypeID()) {
        CFNumberGetValue(v176, kCFNumberIntType, (void *)(a1 + 372));
      }
    }
    if (theDicta)
    {
      CFNumberRef v178 = (const __CFNumber *)CFDictionaryGetValue(theDicta, @"maxMontrealClassMemberPredictions");
      if (v178)
      {
        CFNumberRef v179 = v178;
        CFTypeID v180 = CFGetTypeID(v178);
        if (v180 == CFNumberGetTypeID()) {
          CFNumberGetValue(v179, kCFNumberIntType, (void *)(a1 + 376));
        }
      }
      if (theDicta)
      {
        CFNumberRef v181 = (const __CFNumber *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelMontrealFullCacheSize);
        if (v181)
        {
          CFNumberRef v182 = v181;
          CFTypeID v183 = CFGetTypeID(v181);
          if (v183 == CFNumberGetTypeID()) {
            CFNumberGetValue(v182, kCFNumberIntType, (void *)(a1 + 380));
          }
        }
        if (theDicta)
        {
          CFNumberRef v184 = (const __CFNumber *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelMontrealSparseCacheSize);
          if (v184)
          {
            CFNumberRef v185 = v184;
            CFTypeID v186 = CFGetTypeID(v184);
            if (v186 == CFNumberGetTypeID()) {
              CFNumberGetValue(v185, kCFNumberIntType, (void *)(a1 + 384));
            }
          }
          if (theDicta)
          {
            CFNumberRef v187 = (const __CFNumber *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelAddressBookNamePenaltyKey);
            if (v187)
            {
              CFNumberRef v188 = v187;
              CFTypeID v189 = CFGetTypeID(v187);
              if (v189 == CFNumberGetTypeID()) {
                CFNumberGetValue(v188, kCFNumberFloatType, (void *)(a1 + 388));
              }
            }
            if (theDicta)
            {
              CFNumberRef v190 = (const __CFNumber *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelNegativeLearningThresholdKey);
              if (v190)
              {
                CFNumberRef v191 = v190;
                CFTypeID v192 = CFGetTypeID(v190);
                if (v192 == CFNumberGetTypeID()) {
                  CFNumberGetValue(v191, kCFNumberIntType, (void *)(a1 + 392));
                }
              }
            }
          }
        }
      }
    }
  }
  CFStringRef v193 = (const __CFString *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelGenerateFstPrimingTokenKey);
  *(unsigned char *)(a1 + 363) = sub_19E377394(v193, 0);
  CFStringRef v194 = (const __CFString *)CFDictionaryGetValue(theDicta, (const void *)kLMExcludeInformalDynamicDataKey);
  *(unsigned char *)(a1 + 401) = sub_19E377394(v194, *(unsigned __int8 *)(a1 + 401));
  CFStringRef v195 = (const __CFString *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelEnableSearchQueryModelLoadingKey);
  *(unsigned char *)(a1 + 362) = sub_19E377394(v195, 0);
  CFLocaleRef v196 = *(const __CFLocale **)(a1 + 176);
  if (v196 && *v257 && *(unsigned char *)(a1 + 344))
  {
    CFStringRef v197 = (const __CFString *)CFLocaleGetValue(v196, (CFLocaleKey)*MEMORY[0x1E4F1D218]);
    uint64_t v198 = (uint64_t)v197;
    if (v197) {
      uint64_t v198 = CFEqual(v197, @"en")
    }
          || CFEqual((CFStringRef)v198, @"fr")
          || CFEqual((CFStringRef)v198, @"de")
          || CFEqual((CFStringRef)v198, @"es")
          || CFEqual((CFStringRef)v198, @"it")
          || CFEqual((CFStringRef)v198, @"pt")
          || CFEqual((CFStringRef)v198, @"tr")
          || CFEqual((CFStringRef)v198, @"ru");
    CFStringRef v199 = (const __CFString *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelDifferentialPrivacyEnabledKey);
    *(unsigned char *)(a1 + 359) = sub_19E377394(v199, v198);
  }
  v200 = CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelDynamicLexiconNameKey);
  if (v200)
  {
    v201 = v200;
    CFTypeID v202 = CFGetTypeID(v200);
    if (v202 == CFStringGetTypeID())
    {
      CFTypeRef v203 = CFRetain(v201);
      v204 = *(const void **)(a1 + 408);
      if (v204) {
        CFRelease(v204);
      }
      *(void *)(a1 + 408) = v203;
    }
  }
  CFStringRef v205 = (const __CFString *)CFDictionaryGetValue(theDicta, (const void *)kLMLanguageModelLegacyGenericNameTokenKey);
  if (v205)
  {
    CFStringRef v206 = v205;
    CFTypeID v207 = CFGetTypeID(v205);
    if (v207 == CFStringGetTypeID())
    {
      sub_19E37774C(v206, &v266);
      v208 = (void **)(a1 + 432);
      if (*(char *)(a1 + 455) < 0) {
        operator delete(*v208);
      }
      *(_OWORD *)v208 = *(_OWORD *)&v266.__r_.__value_.__l.__data_;
      *(void *)(a1 + 448) = *((void *)&v266.__r_.__value_.__l + 2);
    }
  }
  CFDictionaryRef v209 = theDicta;
  if (!theDicta)
  {
    CFDictionaryRef v260 = 0;
LABEL_358:
    v253 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3BD790](v253, "Could not construct");
    __cxa_throw(v253, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFRetain(theDicta);
  sub_19E36E590(&v260, v209);
  if (!v260) {
    goto LABEL_358;
  }
  if (!kLMLearnStaticWordCaseVariantsForLocalesKey) {
    goto LABEL_286;
  }
  v210 = CFDictionaryGetValue(v260, (const void *)kLMLearnStaticWordCaseVariantsForLocalesKey);
  v211 = v210;
  if (!v210) {
    goto LABEL_286;
  }
  CFRetain(v210);
  CFTypeID v212 = CFGetTypeID(v211);
  if (v212 != CFArrayGetTypeID())
  {
    CFRelease(v211);
LABEL_286:
    v266.__r_.__value_.__s.__data_[0] = 0;
    goto LABEL_287;
  }
  v266.__r_.__value_.__r.__words[0] = (std::string::size_type)v211;
  v266.__r_.__value_.__s.__data_[8] = 1;
  CFLocaleRef v213 = *(const __CFLocale **)(a1 + 176);
  if (CFArrayGetCount((CFArrayRef)v211))
  {
    CFIndex v214 = CFArrayGetCount((CFArrayRef)v211);
    CFIndex v215 = CFArrayGetCount((CFArrayRef)v211);
    if (v214)
    {
      CFIndex v216 = v215;
      unint64_t v217 = 0;
      CFStringRef v218 = (const __CFString *)*MEMORY[0x1E4F1D218];
      while (v216 != v217)
      {
        sub_19E4F9D3C(&cf, (CFArrayRef)v211, v217);
        CFStringRef v219 = (const __CFString *)cf;
        CFStringRef v220 = (const __CFString *)MEMORY[0x19F3BCDE0](v213);
        CFComparisonResult v221 = CFStringCompare(v219, v220, 0);
        CFStringRef v222 = (const __CFString *)cf;
        if (v221 == kCFCompareEqualTo)
        {
          if (cf) {
            CFRelease(cf);
          }
LABEL_352:
          char v225 = 1;
          goto LABEL_284;
        }
        CFStringRef v223 = (const __CFString *)CFLocaleGetValue(v213, v218);
        CFComparisonResult v224 = CFStringCompare(v222, v223, 0);
        if (cf) {
          CFRelease(cf);
        }
        if (v224 == kCFCompareEqualTo) {
          goto LABEL_352;
        }
        if (v214 == ++v217) {
          break;
        }
      }
    }
  }
  char v225 = 0;
LABEL_284:
  *(unsigned char *)(a1 + 416) = v225;
  CFRelease(v211);
LABEL_287:
  CFDictionaryRef v226 = v260;
  if (!v260)
  {
    v254 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3BD790](v254, "Could not construct");
    __cxa_throw(v254, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (kLMLanguageModelShouldExcludeMobileAssetsKey)
  {
    CFNumberRef v227 = (const __CFNumber *)CFDictionaryGetValue(v260, (const void *)kLMLanguageModelShouldExcludeMobileAssetsKey);
    if (v227)
    {
      unsigned int v228 = (unsigned __int16)sub_19E3D7020(v227);
      if (v228 <= 0x100) {
        LOBYTE(v228) = 0;
      }
      unsigned int v228 = v228;
    }
    else
    {
      unsigned int v228 = 0;
    }
    CFDictionaryRef v226 = v260;
    *(unsigned char *)(a1 + 417) = v228 != 0;
    if (!v226)
    {
      v255 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x19F3BD790](v255, "Could not construct");
      __cxa_throw(v255, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  else
  {
    *(unsigned char *)(a1 + 417) = 0;
  }
  if (kLMLanguageModelRequiresStaticModelKey
    && (CFNumberRef v229 = (const __CFNumber *)CFDictionaryGetValue(v226, (const void *)kLMLanguageModelRequiresStaticModelKey)) != 0)
  {
    unsigned int v230 = (unsigned __int16)sub_19E3D7020(v229);
    if (v230 <= 0x100) {
      LOBYTE(v230) = 0;
    }
    unsigned int v230 = v230;
  }
  else
  {
    unsigned int v230 = 0;
  }
  *(unsigned char *)(a1 + 418) = v230 != 0;
  CFDictionaryRef v231 = theDicta;
  CFStringRef v232 = (CFStringRef)language_modeling::v1::kLanguageModelInlineCompletionPrecisionOperatingPointKey;
  size_t v233 = strlen((const char *)language_modeling::v1::kLanguageModelInlineCompletionPrecisionOperatingPointKey);
  if (language_modeling::v1::kLanguageModelInlineCompletionPrecisionOperatingPointKey)
  {
    CFStringRef v232 = CFStringCreateWithBytes(0, (const UInt8 *)language_modeling::v1::kLanguageModelInlineCompletionPrecisionOperatingPointKey, v233, 0x8000100u, 0);
    v266.__r_.__value_.__r.__words[0] = (std::string::size_type)v232;
    if (!v232) {
      goto LABEL_331;
    }
  }
  else
  {
    v266.__r_.__value_.__r.__words[0] = 0;
  }
  int v234 = CFDictionaryContainsKey(v231, v232);
  if (v232) {
    CFRelease(v232);
  }
  if (v234)
  {
    CFStringRef v235 = (CFStringRef)language_modeling::v1::kLanguageModelInlineCompletionPrecisionOperatingPointKey;
    size_t v236 = strlen((const char *)language_modeling::v1::kLanguageModelInlineCompletionPrecisionOperatingPointKey);
    if (language_modeling::v1::kLanguageModelInlineCompletionPrecisionOperatingPointKey)
    {
      CFStringRef v235 = CFStringCreateWithBytes(0, (const UInt8 *)language_modeling::v1::kLanguageModelInlineCompletionPrecisionOperatingPointKey, v236, 0x8000100u, 0);
      v266.__r_.__value_.__r.__words[0] = (std::string::size_type)v235;
      if (!v235) {
        goto LABEL_331;
      }
    }
    else
    {
      v266.__r_.__value_.__r.__words[0] = 0;
    }
    CFStringRef v237 = (const __CFString *)CFDictionaryGetValue(v231, v235);
    if (v235) {
      CFRelease(v235);
    }
    CFStringRef v238 = (const __CFString *)language_modeling::v1::kLanguageModelInlineCompletionPrecisionOperatingPoint70;
    size_t v239 = strlen((const char *)language_modeling::v1::kLanguageModelInlineCompletionPrecisionOperatingPoint70);
    if (language_modeling::v1::kLanguageModelInlineCompletionPrecisionOperatingPoint70)
    {
      CFStringRef v238 = CFStringCreateWithBytes(0, (const UInt8 *)language_modeling::v1::kLanguageModelInlineCompletionPrecisionOperatingPoint70, v239, 0x8000100u, 0);
      v266.__r_.__value_.__r.__words[0] = (std::string::size_type)v238;
      if (!v238) {
        goto LABEL_331;
      }
    }
    else
    {
      v266.__r_.__value_.__r.__words[0] = 0;
    }
    CFComparisonResult v240 = CFStringCompare(v237, v238, 0);
    if (v238) {
      CFRelease(v238);
    }
    if (v240 == kCFCompareEqualTo) {
      goto LABEL_338;
    }
    CFStringRef v241 = (const __CFString *)language_modeling::v1::kLanguageModelInlineCompletionPrecisionOperatingPoint80;
    size_t v242 = strlen((const char *)language_modeling::v1::kLanguageModelInlineCompletionPrecisionOperatingPoint80);
    if (language_modeling::v1::kLanguageModelInlineCompletionPrecisionOperatingPoint80)
    {
      CFStringRef v241 = CFStringCreateWithBytes(0, (const UInt8 *)language_modeling::v1::kLanguageModelInlineCompletionPrecisionOperatingPoint80, v242, 0x8000100u, 0);
      v266.__r_.__value_.__r.__words[0] = (std::string::size_type)v241;
      if (!v241)
      {
LABEL_331:
        v246 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x19F3BD790](v246, "Could not construct");
        __cxa_throw(v246, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
    }
    else
    {
      v266.__r_.__value_.__r.__words[0] = 0;
    }
    CFComparisonResult v243 = CFStringCompare(v237, v241, 0);
    if (v241) {
      CFRelease(v241);
    }
    if (v243 == kCFCompareEqualTo)
    {
      int v247 = 1;
      goto LABEL_343;
    }
    CFStringRef v244 = (const __CFString *)language_modeling::v1::kLanguageModelInlineCompletionPrecisionOperatingPoint90;
    size_t v245 = strlen((const char *)language_modeling::v1::kLanguageModelInlineCompletionPrecisionOperatingPoint90);
    if (language_modeling::v1::kLanguageModelInlineCompletionPrecisionOperatingPoint90)
    {
      CFStringRef v244 = CFStringCreateWithBytes(0, (const UInt8 *)language_modeling::v1::kLanguageModelInlineCompletionPrecisionOperatingPoint90, v245, 0x8000100u, 0);
      v266.__r_.__value_.__r.__words[0] = (std::string::size_type)v244;
      if (!v244) {
        goto LABEL_331;
      }
    }
    else
    {
      v266.__r_.__value_.__r.__words[0] = 0;
    }
    CFComparisonResult v248 = CFStringCompare(v237, v244, 0);
    if (v244) {
      CFRelease(v244);
    }
    if (v248 == kCFCompareEqualTo)
    {
      int v247 = 2;
      goto LABEL_343;
    }
  }
  if (_os_feature_enabled_impl())
  {
LABEL_338:
    int v247 = 0;
    goto LABEL_343;
  }
  if (_os_feature_enabled_impl()) {
    int v247 = 1;
  }
  else {
    int v247 = 2;
  }
LABEL_343:
  *(_DWORD *)(a1 + 456) = v247;
  if (theDicta)
  {
    CFNumberRef v249 = (const __CFNumber *)CFDictionaryGetValue(theDicta, (const void *)kLMTransientLanguageModelLogProbabilityModifierKey);
    CFNumberRef v250 = v249;
    if (v249)
    {
      CFTypeID v251 = CFGetTypeID(v249);
      if (v251 == CFNumberGetTypeID()) {
        CFNumberGetValue(v250, kCFNumberDoubleType, (void *)(a1 + 464));
      }
    }
  }
  if (v260) {
    CFRelease(v260);
  }
}

void sub_19E376F30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *a12, void *a13, void **a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  std::exception::~exception(v30);
  if (a30 < 0) {
    operator delete(__p);
  }
  __cxa_free_exception(v30);
  operator delete(a12);
  operator delete(a13);
  CFNumberRef v32 = (void **)a17[5];
  if (v32)
  {
    do
    {
      CFNumberRef v38 = (void **)*v32;
      if (*((char *)v32 + 39) < 0) {
        operator delete(v32[2]);
      }
      operator delete(v32);
      CFNumberRef v32 = v38;
    }
    while (v38);
  }
  CFTypeID v33 = *a14;
  *a14 = 0;
  if (v33) {
    operator delete(v33);
  }
  uint64_t v34 = a17;
  uint64_t v35 = *a17;
  if (*a17)
  {
    uint64_t v36 = a17[1];
    CFTypeID v37 = (void *)*a17;
    if (v36 != v35)
    {
      do
      {
        CFNumberRef v39 = *(const void **)(v36 - 24);
        if (v39) {
          CFRelease(v39);
        }
        CFTypeID v40 = *(const void **)(v36 - 8);
        if (v40) {
          CFRelease(v40);
        }
        if (*(char *)(v36 - 25) < 0) {
          operator delete(*(void **)(v36 - 48));
        }
        v36 -= 48;
      }
      while (v36 != v35);
      CFTypeID v37 = (void *)*a17;
    }
    uint64_t v34 = a17;
    a17[1] = v35;
    operator delete(v37);
  }
  MEMORY[0x19F3BDCF0](v34, 0x10E0C40052DA004);
  _Unwind_Resume(a1);
}

void sub_19E37727C()
{
  while (v1 != v2)
  {
    char v3 = *(const void **)(v1 + 24);
    if (v3) {
      CFRelease(v3);
    }
    int v4 = *(const void **)(v1 + 40);
    if (v4) {
      CFRelease(v4);
    }
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    v1 += 48;
  }
  while (v0 != v2)
  {
    CFStringRef v5 = *(const void **)(v0 - 24);
    if (v5) {
      CFRelease(v5);
    }
    CFTypeID v6 = *(const void **)(v0 - 8);
    if (v6) {
      CFRelease(v6);
    }
    if (*(char *)(v0 - 25) < 0) {
      operator delete(*(void **)(v0 - 48));
    }
    v0 -= 48;
  }
  JUMPOUT(0x19E377144);
}

void sub_19E377330(uint64_t a1, const void *a2, int a3, int a4, CFStringRef theString1)
{
  if (CFEqual(theString1, *(CFStringRef *)(a1 + 40)))
  {
    unsigned int v7 = *(__CFArray **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    CFArrayAppendValue(v7, a2);
  }
}

BOOL sub_19E377394(const __CFString *a1, uint64_t a2)
{
  if (!a1) {
    return a2;
  }
  CFTypeID v3 = CFGetTypeID(a1);
  if (v3 == CFStringGetTypeID())
  {
    uint64_t v4 = 1;
    if (CFStringCompare(a1, @"true", 1uLL) == kCFCompareEqualTo) {
      return v4;
    }
    return CFStringCompare(a1, @"YES", 1uLL) == kCFCompareEqualTo;
  }
  else
  {
    if (v3 == CFNumberGetTypeID() && !CFNumberIsFloatType((CFNumberRef)a1))
    {
      int valuePtr = 0;
      CFNumberGetValue((CFNumberRef)a1, kCFNumberIntType, &valuePtr);
      return valuePtr != 0;
    }
    if (v3 != CFBooleanGetTypeID()) {
      return 0;
    }
    return *MEMORY[0x1E4F1CFD0] == (void)a1;
  }
}

void sub_19E37747C(uint64_t a1, unsigned char *a2, const __CFString *key, uint64_t a4)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  CFStringRef Value = CFDictionaryGetValue(**(CFDictionaryRef **)a1, key);
  sub_19E37774C(key, __p);
  if (!Value) {
    goto LABEL_18;
  }
  CFStringRef v9 = (const __CFString *)CFDictionaryGetValue(**(CFDictionaryRef **)a1, key);
  BOOL v10 = sub_19E377394(v9, a4);
  if (!**(unsigned char **)(a1 + 8))
  {
    if (qword_1EC0095B8 != -1) {
      dispatch_once(&qword_1EC0095B8, &unk_1EF0BEC40);
    }
    CFStringRef v11 = qword_1EC0095B0;
    if (!os_log_type_enabled((os_log_t)qword_1EC0095B0, OS_LOG_TYPE_INFO)) {
      goto LABEL_17;
    }
    CFNumberRef v15 = __p;
    if (v21 < 0) {
      CFNumberRef v15 = (void **)__p[0];
    }
    int v16 = *a2;
    *(_DWORD *)buf = 136315650;
    CFNumberRef v23 = v15;
    __int16 v24 = 1024;
    int v25 = v16;
    __int16 v26 = 1024;
    BOOL v27 = v10;
    CFNumberRef v14 = "LD is Updating %s from %d to %d";
    goto LABEL_16;
  }
  if (*a2 == a4)
  {
    if (qword_1EC0095B8 != -1) {
      dispatch_once(&qword_1EC0095B8, &unk_1EF0BEC40);
    }
    CFStringRef v11 = qword_1EC0095B0;
    if (!os_log_type_enabled((os_log_t)qword_1EC0095B0, OS_LOG_TYPE_INFO)) {
      goto LABEL_17;
    }
    CFStringRef v12 = __p;
    if (v21 < 0) {
      CFStringRef v12 = (void **)__p[0];
    }
    int v13 = *a2;
    *(_DWORD *)buf = 136315650;
    CFNumberRef v23 = v12;
    __int16 v24 = 1024;
    int v25 = v13;
    __int16 v26 = 1024;
    BOOL v27 = v10;
    CFNumberRef v14 = "Options is updating %s from %d to %d";
LABEL_16:
    _os_log_impl(&dword_19E36B000, v11, OS_LOG_TYPE_INFO, v14, buf, 0x18u);
LABEL_17:
    *a2 = v10;
    goto LABEL_18;
  }
  if (qword_1EC0095B8 != -1) {
    dispatch_once(&qword_1EC0095B8, &unk_1EF0BEC40);
  }
  CFNumberRef v17 = qword_1EC0095B0;
  if (os_log_type_enabled((os_log_t)qword_1EC0095B0, OS_LOG_TYPE_INFO))
  {
    CFNumberRef v18 = __p;
    if (v21 < 0) {
      CFNumberRef v18 = (void **)__p[0];
    }
    int v19 = *a2;
    *(_DWORD *)buf = 136315650;
    CFNumberRef v23 = v18;
    __int16 v24 = 1024;
    int v25 = v19;
    __int16 v26 = 1024;
    BOOL v27 = v10;
    _os_log_impl(&dword_19E36B000, v17, OS_LOG_TYPE_INFO, "LD has already modified  %s, not updating from %d to %d", buf, 0x18u);
  }
LABEL_18:
  if (v21 < 0) {
    operator delete(__p[0]);
  }
}

void sub_19E377724(_Unwind_Exception *exception_object)
{
}

void sub_19E377730(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

const __CFString *sub_19E37774C@<X0>(const __CFString *result@<X0>, void *a2@<X8>)
{
  if (result)
  {
    CFStringRef v3 = result;
    CStringPtr = (char *)CFStringGetCStringPtr(result, 0x8000100u);
    if (!CStringPtr)
    {
      CFIndex Length = CFStringGetLength(v3);
      CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
      operator new[]();
    }
    return (const __CFString *)sub_19E382340(a2, CStringPtr);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  return result;
}

void sub_19E377848(_Unwind_Exception *a1)
{
  MEMORY[0x19F3BDCC0](v1, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

void LMStreamTokenizerPushBytes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1) {
    sub_19E36D3E8(*(void *)(a1 + 24), a2, a3, a4);
  }
}

void LMLanguageModelRelease(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

void LMStreamTokenizerRelease(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

void **sub_19E377894(void **__dst, void *__src, size_t __len)
{
  LODWORD(v6) = *((char *)__dst + 23);
  if ((v6 & 0x80000000) != 0)
  {
    unint64_t v10 = (unint64_t)__dst[2];
    unint64_t v8 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (__len > v8)
    {
      size_t v11 = 0x7FFFFFFFFFFFFFF7;
      if (0x7FFFFFFFFFFFFFF7 - (v10 & 0x7FFFFFFFFFFFFFFFLL) >= __len - v8)
      {
        CFStringRef v9 = *__dst;
        if (v8 > 0x3FFFFFFFFFFFFFF2)
        {
LABEL_15:
          unsigned int v7 = operator new(v11);
          memcpy(v7, __src, __len);
          if (v8 != 22) {
            operator delete(v9);
          }
          __dst[2] = (void *)(v11 | 0x8000000000000000);
          *__dst = v7;
LABEL_23:
          __dst[1] = (void *)__len;
          goto LABEL_24;
        }
LABEL_8:
        unint64_t v12 = 2 * v8;
        if (__len > 2 * v8) {
          unint64_t v12 = __len;
        }
        uint64_t v13 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17) {
          uint64_t v13 = v12 | 7;
        }
        if (v12 >= 0x17) {
          size_t v11 = v13 + 1;
        }
        else {
          size_t v11 = 23;
        }
        goto LABEL_15;
      }
LABEL_25:
      sub_19E37C958();
    }
    unint64_t v6 = HIBYTE(v10);
    unsigned int v7 = *__dst;
  }
  else
  {
    unsigned int v7 = __dst;
    if (__len > 0x16)
    {
      if (__len - 0x7FFFFFFFFFFFFFF7 >= 0x800000000000001FLL)
      {
        unint64_t v8 = 22;
        CFStringRef v9 = __dst;
        goto LABEL_8;
      }
      goto LABEL_25;
    }
  }
  if (__len)
  {
    memmove(v7, __src, __len);
    LOBYTE(v6) = *((unsigned char *)__dst + 23);
  }
  if ((v6 & 0x80) != 0) {
    goto LABEL_23;
  }
  *((unsigned char *)__dst + 23) = __len & 0x7F;
LABEL_24:
  *((unsigned char *)v7 + __len) = 0;
  return __dst;
}

uint64_t sub_19E3779F4(uint64_t a1)
{
  return MEMORY[0x1F412A7C0](*(void *)(a1 + 8));
}

uint64_t sub_19E3779FC(uint64_t a1)
{
  return sub_19E377E48((uint64_t *)(a1 + 16));
}

void sub_19E377A04(void *a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a1[16];
  uint64_t v3 = a1[17];
  if (v2 != v3)
  {
    while (mlock(*(const void **)(*(void *)v2 + 112), *(void *)(*(void *)v2 + 120)))
    {
      uint64_t v4 = *__error();
      CFStringRef v5 = std::generic_category();
      *(void *)&v17.__val_ = v4;
      v17.__cat_ = v5;
      if (!v4) {
        goto LABEL_8;
      }
LABEL_3:
      v2 += 16;
      if (v2 == v3) {
        goto LABEL_15;
      }
    }
    unint64_t v6 = std::system_category();
    *(void *)&v17.__val_ = 0;
    v17.__cat_ = v6;
LABEL_8:
    if (qword_1EC0095B8 != -1) {
      dispatch_once(&qword_1EC0095B8, &unk_1EF0BEC40);
    }
    unsigned int v7 = qword_1EC0095B0;
    if (os_log_type_enabled((os_log_t)qword_1EC0095B0, OS_LOG_TYPE_DEFAULT))
    {
      std::error_code::message(&v16, &v17);
      unint64_t v8 = &v16;
      if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        unint64_t v8 = (std::string *)v16.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)buf = 136315394;
      int v19 = "mlock";
      __int16 v20 = 2080;
      char v21 = v8;
      _os_log_impl(&dword_19E36B000, v7, OS_LOG_TYPE_DEFAULT, "%s: mlock() failed: %s", buf, 0x16u);
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v16.__r_.__value_.__l.__data_);
      }
    }
    goto LABEL_3;
  }
LABEL_15:
  uint64_t v9 = a1[23];
  uint64_t v10 = a1[24];
  while (v9 != v10)
  {
    size_t v11 = *(uint64_t **)(*(void *)v9 + 8);
    unint64_t v12 = *(uint64_t **)(*(void *)v9 + 16);
    while (v11 != v12)
    {
      uint64_t v13 = *v11++;
      (*(void (**)(uint64_t))(*(void *)v13 + 72))(v13);
    }
    v9 += 16;
  }
  uint64_t v14 = a1[31];
  if (v14)
  {
    CFNumberRef v15 = *(void (**)(void))(**(void **)(*(void *)(v14 + 16) + 16) + 80);
    v15();
  }
}

void sub_19E377C64(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_19E37B770(a1);
}

uint64_t sub_19E377C70(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 40))();
}

uint64_t sub_19E377C98(uint64_t a1, void *cf)
{
  if (!cf)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    *(void *)(a1 + 32) = 0;
    if (!v4) {
      return 1;
    }
    if (*(char *)(v4 + 95) < 0)
    {
      operator delete(*(void **)(v4 + 72));
      if ((*(char *)(v4 + 71) & 0x80000000) == 0)
      {
LABEL_10:
        if ((*(char *)(v4 + 47) & 0x80000000) == 0) {
          goto LABEL_11;
        }
        goto LABEL_16;
      }
    }
    else if ((*(char *)(v4 + 71) & 0x80000000) == 0)
    {
      goto LABEL_10;
    }
    operator delete(*(void **)(v4 + 48));
    if ((*(char *)(v4 + 47) & 0x80000000) == 0)
    {
LABEL_11:
      if ((*(char *)(v4 + 23) & 0x80000000) == 0)
      {
LABEL_12:
        MEMORY[0x19F3BDCF0](v4, 0x1012C4003C2D8E3);
        return 1;
      }
LABEL_17:
      operator delete(*(void **)v4);
      goto LABEL_12;
    }
LABEL_16:
    operator delete(*(void **)(v4 + 24));
    if ((*(char *)(v4 + 23) & 0x80000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_17;
  }
  CFTypeID v3 = CFGetTypeID(cf);
  if (v3 == CFStringGetTypeID())
  {
    values = cf;
    CFDictionaryCreate(0, (const void **)&kLMRecordHashKey, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    operator new();
  }
  CFTypeID v5 = CFGetTypeID(cf);
  if (v5 == CFDictionaryGetTypeID()) {
    operator new();
  }
  return 0;
}

void sub_19E377E20(_Unwind_Exception *a1)
{
  MEMORY[0x19F3BDCF0](v1, 0x1012C4003C2D8E3);
  _Unwind_Resume(a1);
}

uint64_t sub_19E377E48(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v6 = 0;
  unsigned int v7 = &v6;
  uint64_t v8 = 0x2000000000;
  uint64_t v2 = (uint64_t (*)(uint64_t))off_1EC0091E0;
  uint64_t v9 = off_1EC0091E0;
  if (!off_1EC0091E0)
  {
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 0x40000000;
    v5[2] = sub_19E43E284;
    v5[3] = &unk_1E599F9E0;
    v5[4] = &v6;
    sub_19E43E284((uint64_t)v5);
    uint64_t v2 = (uint64_t (*)(uint64_t))v7[3];
  }
  _Block_object_dispose(&v6, 8);
  if (!v2)
  {
    dlerror();
    uint64_t v4 = (_Unwind_Exception *)abort_report_np();
    _Block_object_dispose(&v6, 8);
    _Unwind_Resume(v4);
  }
  return v2(v1);
}

void *sub_19E377F34(void *a1)
{
  *a1 = &unk_1EF0B8540;
  uint64_t v2 = a1[1];
  if (v2)
  {
    uint64_t v3 = sub_19E3709A0(v2);
    MEMORY[0x19F3BDCF0](v3, 0x10F0C4069D522A4);
  }
  return a1;
}

uint64_t language_modeling::v1::LanguageModelSession::supportsPrefixCompletions(language_modeling::v1::LanguageModelSession *this)
{
  return (*(uint64_t (**)(void))(**(void **)this + 176))(*(void *)this);
}

void sub_19E3780EC(uint64_t a1)
{
  sub_19E377A04(*(void **)(a1 + 168));
  uint64_t v2 = *(void *)(a1 + 440);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 448);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 80))(v2);
  if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_19E3781B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

CFArrayRef sub_19E3781CC(char *a1, char *a2)
{
  size_t v2 = a2 - a1;
  if (a2 == a1)
  {
    CFTypeID v5 = 0;
    uint64_t v6 = 0;
    goto LABEL_13;
  }
  if ((v2 & 0x8000000000000000) != 0) {
    sub_19E37C7C4();
  }
  uint64_t v4 = a1;
  CFTypeID v5 = (char *)operator new(a2 - a1);
  bzero(v5, v2);
  uint64_t v6 = &v5[v2];
  if (v2 - 8 < 0x18)
  {
    uint64_t v10 = v5;
    do
    {
LABEL_12:
      uint64_t v14 = *(void *)v4;
      v4 += 8;
      *(void *)uint64_t v10 = v14;
      v10 += 8;
    }
    while (v4 != a2);
    goto LABEL_13;
  }
  if ((unint64_t)(v5 - v4) < 0x20)
  {
    uint64_t v10 = v5;
    goto LABEL_12;
  }
  uint64_t v7 = 0;
  unint64_t v8 = ((v2 - 8) >> 3) + 1;
  uint64_t v9 = 8 * (v8 & 0x3FFFFFFFFFFFFFFCLL);
  uint64_t v10 = &v5[v9];
  uint64_t v11 = v8 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    unint64_t v12 = &v5[v7];
    long long v13 = *(_OWORD *)&v4[v7 + 16];
    *(_OWORD *)unint64_t v12 = *(_OWORD *)&v4[v7];
    *((_OWORD *)v12 + 1) = v13;
    v7 += 32;
    v11 -= 4;
  }
  while (v11);
  if (v8 != (v8 & 0x3FFFFFFFFFFFFFFCLL))
  {
    v4 += v9;
    goto LABEL_12;
  }
LABEL_13:
  CFArrayRef v15 = CFArrayCreate(0, (const void **)v5, (v6 - v5) >> 3, MEMORY[0x1E4F1D510]);
  if (!v15)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3BD790](exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (v5) {
    operator delete(v5);
  }
  return v15;
}

void sub_19E378318(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(a1);
}

void *sub_19E378340(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1EF0BD418;
  uint64_t v2 = a1[3];
  if (v2)
  {
    MEMORY[0x19F3BDCC0](v2, 0x1000C8052888210);
    a1[3] = 0;
  }
  return a1;
}

uint64_t sub_19E3783A4(uint64_t a1, uint64_t a2, _DWORD *a3, unint64_t a4)
{
  *(void *)a1 = &unk_1EF0B89A0;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = &unk_1EF0BD418;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  uint64_t v7 = (uint64_t *)(a1 + 96);
  *(void *)(a1 + 56) = &unk_1EF0BD418;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  sub_19E3AD4C4((void *)(a1 + 96));
  sub_19E3784E4(a1, a3, a4, &v9);
  sub_19E3AD6EC(v7, &v9);
  sub_19E3AD4CC(&v9);
  return a1;
}

void sub_19E378494(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E3AD4CC((uint64_t *)va);
  sub_19E3AD4CC(v5);
  sub_19E378340(v4);
  sub_19E378340(v3);
  uint64_t v7 = *v2;
  void *v2 = 0;
  if (v7) {
    sub_19E37C9F4((uint64_t)v2, v7);
  }
  _Unwind_Resume(a1);
}

void *sub_19E3784E4@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  unint64_t v8 = a2;
  unint64_t v9 = a3;
  CFURLRef result = sub_19E378B8C(a2, a3, (_DWORD *)(a1 + 88), a4);
  if (!*a4)
  {
    sub_19E3AD4CC(a4);
    CFURLRef result = sub_19E3AB7C8(&v8, 4uLL, a4);
    if (!*a4)
    {
      sub_19E3AD4CC(a4);
      CFURLRef result = sub_19E378B8C(v8, v9, (_DWORD *)(a1 + 92), a4);
      if (!*a4)
      {
        sub_19E3AD4CC(a4);
        CFURLRef result = sub_19E3AB7C8(&v8, 4uLL, a4);
        if (!*a4)
        {
          sub_19E3AD4CC(a4);
          int v7 = 0;
          CFURLRef result = sub_19E378D88(v8, v9, &v7, a4);
          if (!*a4)
          {
            sub_19E3AD4CC(a4);
            CFURLRef result = sub_19E3AB7C8(&v8, 4uLL, a4);
            if (!*a4)
            {
              sub_19E3AD4CC(a4);
              sub_19E378F84();
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_19E378B4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E37908C((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_19E378B8C@<X0>(_DWORD *a1@<X0>, unint64_t a2@<X1>, _DWORD *a3@<X2>, void *a4@<X8>)
{
  if (a2 <= 3)
  {
    unsigned int v7 = 13;
    uint64_t v6 = (void *)sub_19E37B784((uint64_t)v8);
    sub_19E37CA70(v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/util.h", 62);
    sub_19E37CA70(v8, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_19E37CA70(v8, (uint64_t)") [", 3);
    sub_19E37CA70(v8, (uint64_t)"string.size() >= sizeof(T)", 26);
    sub_19E37CA70(v8, (uint64_t)"] ", 2);
    sub_19E378FFC(&v7, (uint64_t)a4);
    v8[0] = *MEMORY[0x1E4FBA418];
    *(void *)((char *)v8 + *(void *)(v8[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v8[1] = MEMORY[0x1E4FBA470] + 16;
    if (v9 < 0) {
      operator delete((void *)v8[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (void *)MEMORY[0x19F3BDC30](&v10);
  }
  else
  {
    *a3 = *a1;
    return sub_19E3AD4C4(a4);
  }
}

void sub_19E378D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_19E378D88@<X0>(_DWORD *a1@<X0>, unint64_t a2@<X1>, _DWORD *a3@<X2>, void *a4@<X8>)
{
  if (a2 <= 3)
  {
    unsigned int v7 = 13;
    uint64_t v6 = (void *)sub_19E37B784((uint64_t)v8);
    sub_19E37CA70(v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/util.h", 62);
    sub_19E37CA70(v8, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_19E37CA70(v8, (uint64_t)") [", 3);
    sub_19E37CA70(v8, (uint64_t)"string.size() >= sizeof(T)", 26);
    sub_19E37CA70(v8, (uint64_t)"] ", 2);
    sub_19E378FFC(&v7, (uint64_t)a4);
    v8[0] = *MEMORY[0x1E4FBA418];
    *(void *)((char *)v8 + *(void *)(v8[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v8[1] = MEMORY[0x1E4FBA470] + 16;
    if (v9 < 0) {
      operator delete((void *)v8[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (void *)MEMORY[0x19F3BDC30](&v10);
  }
  else
  {
    *a3 = *a1;
    return sub_19E3AD4C4(a4);
  }
}

void sub_19E378F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_19E378F84()
{
}

void sub_19E378FD8(_Unwind_Exception *a1)
{
  MEMORY[0x19F3BDCF0](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

void sub_19E378FFC(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  std::stringbuf::str();
  if ((v7 & 0x80u) == 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if ((v7 & 0x80u) == 0) {
    unint64_t v5 = v7;
  }
  else {
    unint64_t v5 = (unint64_t)__p[1];
  }
  sub_19E3AD630(a2, v3, v4, v5);
  if ((char)v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_19E379070(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E37908C(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA418];
  uint64_t v3 = *MEMORY[0x1E4FBA418];
  *(void *)(a1 + 8) = *MEMORY[0x1E4FBA418];
  *(void *)(a1 + 8 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 16) = MEMORY[0x1E4FBA470] + 16;
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x19F3BDC30](a1 + 120);
  return a1;
}

void *sub_19E379194(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 8);
  if (!v1
    || (CFURLRef result = __dynamic_cast(v1, (const struct __class_type_info *)&unk_1EF0B5F58, (const struct __class_type_info *)&unk_1EF0B5EA8, 16)) == 0)
  {
    char v7 = 1;
    uint64_t v3 = sub_19E37CA70(MEMORY[0x1E4FBA240], (uint64_t)"model_interface.cc", 18);
    sub_19E37CA70(v3, (uint64_t)"(", 1);
    uint64_t v4 = (void *)std::ostream::operator<<();
    unint64_t v5 = sub_19E37CA70(v4, (uint64_t)") [", 3);
    uint64_t v6 = sub_19E37CA70(v5, (uint64_t)"(model_proto = dynamic_cast<const ModelProto *>(model_proto_))", 62);
    sub_19E37CA70(v6, (uint64_t)"] ", 2);
    sub_19E37B91C(&v7);
    return 0;
  }
  return result;
}

void sub_19E379278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void *sub_19E37928C(void *a1)
{
  *a1 = &unk_1EF0B89A0;
  sub_19E3AD4CC(a1 + 12);
  a1[8] = 0;
  a1[9] = 0;
  a1[7] = &unk_1EF0BD418;
  uint64_t v2 = a1[10];
  if (v2)
  {
    MEMORY[0x19F3BDCC0](v2, 0x1000C8052888210);
    a1[10] = 0;
  }
  a1[4] = 0;
  a1[5] = 0;
  a1[3] = &unk_1EF0BD418;
  uint64_t v3 = a1[6];
  if (v3)
  {
    MEMORY[0x19F3BDCC0](v3, 0x1000C8052888210);
    a1[6] = 0;
  }
  uint64_t v4 = (uint64_t *)a1[2];
  a1[2] = 0;
  if (v4) {
    sub_19E37C9F4((uint64_t)(a1 + 2), v4);
  }
  return a1;
}

const char *sub_19E379374(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8));
  if (v2) {
    return (const char *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8));
  }
  else {
    return "<unk>";
  }
}

const char *sub_19E3793F8(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8));
  if (v2) {
    return (const char *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8));
  }
  else {
    return "<s>";
  }
}

const char *sub_19E37947C(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8));
  if (v2) {
    return (const char *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8));
  }
  else {
    return "</s>";
  }
}

const char *sub_19E379500(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
  if (v2) {
    return (const char *)(*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))(*(void *)(a1 + 8));
  }
  else {
    return "<pad>";
  }
}

uint64_t sub_19E379584(uint64_t a1, unsigned char *a2, uint64_t a3)
{
  unsigned int v7 = 0;
  sub_19E379608(a1 + 56, a2, (int *)&v7, a3, 0);
  uint64_t result = v7;
  if (v7 == -1)
  {
    sub_19E379608(a1 + 24, a2, (int *)&v7, a3, 0);
    uint64_t result = v7;
    if (v7 == -1) {
      return *(unsigned int *)(a1 + 88);
    }
  }
  return result;
}

uint64_t sub_19E379608(uint64_t result, unsigned char *a2, int *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(result + 16);
  unsigned int v6 = *(_DWORD *)(v5 + 4 * a5);
  if (a4)
  {
    while (1)
    {
      int v7 = *a2++;
      a5 ^= (v6 >> 10 << ((v6 >> 6) & 8)) ^ v7;
      unsigned int v6 = *(_DWORD *)(v5 + 4 * a5);
      if ((v6 & 0x800000FF) != v7) {
        break;
      }
      if (!--a4) {
        goto LABEL_9;
      }
    }
  }
  else
  {
    int v8 = *a2;
    if (*a2)
    {
      char v9 = a2 + 1;
      while (1)
      {
        a5 ^= (v6 >> 10 << ((v6 >> 6) & 8)) ^ v8;
        unsigned int v6 = *(_DWORD *)(v5 + 4 * a5);
        if ((v6 & 0x800000FF) != v8) {
          break;
        }
        int v10 = *v9++;
        int v8 = v10;
        if (!v10) {
          goto LABEL_9;
        }
      }
    }
    else
    {
LABEL_9:
      if ((v6 & 0x100) != 0)
      {
        int v11 = *(_DWORD *)(v5 + 4 * (a5 ^ (v6 >> 10 << ((v6 >> 6) & 8)))) & 0x7FFFFFFF;
        goto LABEL_12;
      }
    }
  }
  int v11 = -1;
LABEL_12:
  *a3 = v11;
  return result;
}

uint64_t sub_19E3796B8@<X0>(uint64_t a1@<X8>)
{
  if ((int)sub_19E3AB380() <= 2)
  {
    char v9 = 0;
    uint64_t v2 = sub_19E37CA70(MEMORY[0x1E4FBA240], (uint64_t)"model_interface.cc", 18);
    sub_19E37CA70(v2, (uint64_t)"(", 1);
    uint64_t v3 = (void *)std::ostream::operator<<();
    uint64_t v4 = sub_19E37CA70(v3, (uint64_t)") ", 2);
    uint64_t v5 = sub_19E37CA70(v4, (uint64_t)"LOG(", 4);
    unsigned int v6 = sub_19E37CA70(v5, (uint64_t)"ERROR", 5);
    int v7 = sub_19E37CA70(v6, (uint64_t)") ", 2);
    sub_19E37CA70(v7, (uint64_t)"Not implemented.", 16);
    sub_19E37B91C(&v9);
  }
  return sub_19E3AD630(a1, 12, "Not implemented.", 16);
}

void sub_19E379790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_19E3797A4@<X0>(uint64_t a1@<X8>)
{
  if ((int)sub_19E3AB380() <= 2)
  {
    char v9 = 0;
    uint64_t v2 = sub_19E37CA70(MEMORY[0x1E4FBA240], (uint64_t)"model_interface.cc", 18);
    sub_19E37CA70(v2, (uint64_t)"(", 1);
    uint64_t v3 = (void *)std::ostream::operator<<();
    uint64_t v4 = sub_19E37CA70(v3, (uint64_t)") ", 2);
    uint64_t v5 = sub_19E37CA70(v4, (uint64_t)"LOG(", 4);
    unsigned int v6 = sub_19E37CA70(v5, (uint64_t)"ERROR", 5);
    int v7 = sub_19E37CA70(v6, (uint64_t)") ", 2);
    sub_19E37CA70(v7, (uint64_t)"Not implemented.", 16);
    sub_19E37B91C(&v9);
  }
  return sub_19E3AD630(a1, 12, "Not implemented.", 16);
}

void sub_19E37987C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sub_19E379890(uint64_t a1)
{
  float v51 = 0;
  uint64_t v52 = 0;
  uint64_t v49 = 0;
  float v50 = &v51;
  float v47 = &v48;
  float v48 = 0;
  *(_DWORD *)(a1 + 88) = -1;
  v46[0] = 0;
  v46[1] = 0;
  CFNumberRef v45 = (uint64_t *)v46;
  LOBYTE(v53) = 0;
  sub_19E37CE9C(&__p, 0x100uLL, (unsigned __int8 *)&v53);
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    uint64_t v3 = v2 - 16;
  }
  else {
    uint64_t v3 = 0;
  }
  if (*(int *)(v3 + 64) < 1)
  {
LABEL_38:
    if (*(_DWORD *)(a1 + 88) == -1)
    {
      sub_19E3AD630(&v53, 13, "unk is not defined.", 19);
      sub_19E3AD6EC((uint64_t *)(a1 + 96), &v53);
    }
    else
    {
      int v25 = *(unsigned char **)(v3 + 80);
      if (!v25) {
        int v25 = &unk_1E945A3E0;
      }
      if (!v25[248]
        || (*(void *)&long long v53 = __p,
            DWORD2(v53) = 0,
            sub_19E37D5C8((uint64_t)&v53, v44, (uint64_t)&v41),
            v41.__r_.__value_.__l.__data_ == (char *)__p + 8 * (v44 >> 6))
        && LODWORD(v41.__r_.__value_.__r.__words[1]) == (v44 & 0x3F))
      {
        if (!v52
          || (sub_19E37A160(a1 + 24, &v50, (uint64_t)&v53),
              sub_19E3AD6EC((uint64_t *)(a1 + 96), &v53),
              sub_19E3AD4CC((uint64_t *)&v53),
              (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)a1 + 16))(&v53, a1),
              uint64_t v26 = v53,
              sub_19E3AD4CC((uint64_t *)&v53),
              !v26))
        {
          if (!v49
            || (sub_19E37A160(a1 + 56, &v47, (uint64_t)&v53),
                sub_19E3AD6EC((uint64_t *)(a1 + 96), &v53),
                sub_19E3AD4CC((uint64_t *)&v53),
                (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)a1 + 16))(&v53, a1),
                uint64_t v27 = v53,
                sub_19E3AD4CC((uint64_t *)&v53),
                !v27))
          {
            sub_19E37A644();
          }
        }
        goto LABEL_69;
      }
      sub_19E3AD6EC((uint64_t *)(a1 + 96), &v53);
    }
LABEL_68:
    sub_19E3AD4CC((uint64_t *)&v53);
    goto LABEL_69;
  }
  int v4 = 0;
  while (1)
  {
    uint64_t v5 = sub_19E37B9F8(v3 + 56, v4);
    uint64_t v6 = v5;
    unint64_t v7 = *(void *)(v5 + 48) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v8 = *(unsigned __int8 *)(v7 + 23);
    if (*(char *)(v7 + 23) < 0)
    {
      if (!*(void *)(v7 + 8))
      {
LABEL_50:
        sub_19E3AD630(&v53, 13, "piece must not be empty.", 24);
        sub_19E3AD6EC((uint64_t *)(a1 + 96), &v53);
        goto LABEL_68;
      }
    }
    else if (!*(unsigned char *)(v7 + 23))
    {
      goto LABEL_50;
    }
    unsigned int v9 = *(_DWORD *)(v5 + 60);
    BOOL v10 = v9 > 5;
    int v11 = (1 << v9) & 0x32;
    BOOL v12 = v10 || v11 == 0;
    long long v13 = (uint64_t **)(v12 ? &v47 : &v50);
    if ((v8 & 0x80) != 0)
    {
      unint64_t v14 = *(void *)v7;
      uint64_t v8 = *(void *)(v7 + 8);
    }
    else
    {
      unint64_t v14 = v7;
    }
    *(void *)&long long v53 = v14;
    *((void *)&v53 + 1) = v8;
    LODWORD(v54) = v4;
    sub_19E37D154(v13, (uint64_t)&v53, (uint64_t)&v53);
    if ((v15 & 1) == 0) {
      break;
    }
    int v16 = *(_DWORD *)(v6 + 60);
    if (v16 == 4)
    {
      unint64_t v17 = *(void *)(v6 + 48) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v17 + 23) < 0)
      {
        unint64_t v19 = *(void *)v17;
        uint64_t v18 = *(void *)(v17 + 8);
      }
      else
      {
        uint64_t v18 = *(unsigned __int8 *)(v17 + 23);
        unint64_t v19 = *(void *)(v6 + 48) & 0xFFFFFFFFFFFFFFFELL;
      }
      *(void *)&long long v53 = v19;
      *((void *)&v53 + 1) = v18;
      sub_19E37D544(&v45, (uint64_t)&v53, &v53);
      int v16 = *(_DWORD *)(v6 + 60);
    }
    if (v16 == 6)
    {
      __int16 v20 = *(unsigned char **)(v3 + 80);
      if (!v20) {
        __int16 v20 = &unk_1E945A3E0;
      }
      if (!v20[248])
      {
        std::operator+<char>();
        long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
        int64_t v54 = v35->__r_.__value_.__r.__words[2];
        long long v53 = v36;
        v35->__r_.__value_.__l.__size_ = 0;
        v35->__r_.__value_.__r.__words[2] = 0;
        v35->__r_.__value_.__r.__words[0] = 0;
        if (v54 >= 0) {
          CFTypeID v37 = (const char *)&v53;
        }
        else {
          CFTypeID v37 = (const char *)v53;
        }
LABEL_78:
        size_t v40 = strlen(v37);
        sub_19E3AD630(&v42, 13, v37, v40);
        sub_19E3AD6EC((uint64_t *)(a1 + 96), &v42);
        sub_19E3AD4CC(&v42);
        if (SHIBYTE(v54) < 0) {
          operator delete((void *)v53);
        }
        if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
        {
          uint64_t v34 = (void *)v41.__r_.__value_.__r.__words[0];
          goto LABEL_82;
        }
        goto LABEL_69;
      }
      unint64_t v21 = *(void *)(v6 + 48) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v21 + 23) < 0)
      {
        CFNumberRef v23 = *(void **)v21;
        size_t v22 = *(void *)(v21 + 8);
      }
      else
      {
        size_t v22 = *(unsigned __int8 *)(v21 + 23);
        CFNumberRef v23 = (void *)(*(void *)(v6 + 48) & 0xFFFFFFFFFFFFFFFELL);
      }
      unsigned int v24 = sub_19E37A010(v23, v22);
      if ((v24 & 0x80000000) != 0)
      {
        std::operator+<char>();
        CFNumberRef v38 = std::string::append(&v41, " is invalid.");
        long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
        int64_t v54 = v38->__r_.__value_.__r.__words[2];
        long long v53 = v39;
        v38->__r_.__value_.__l.__size_ = 0;
        v38->__r_.__value_.__r.__words[2] = 0;
        v38->__r_.__value_.__r.__words[0] = 0;
        if (v54 >= 0) {
          CFTypeID v37 = (const char *)&v53;
        }
        else {
          CFTypeID v37 = (const char *)v53;
        }
        goto LABEL_78;
      }
      *(void *)((char *)__p + (((unint64_t)v24 >> 3) & 0x1FFFFFF8)) |= 1 << v24;
    }
    else if (v16 == 2)
    {
      if ((*(_DWORD *)(a1 + 88) & 0x80000000) == 0)
      {
        sub_19E3AD630(&v53, 13, "unk is already defined.", 23);
        sub_19E3AD6EC((uint64_t *)(a1 + 96), &v53);
        goto LABEL_68;
      }
      *(_DWORD *)(a1 + 88) = v4;
    }
    if (++v4 >= *(_DWORD *)(v3 + 64)) {
      goto LABEL_38;
    }
  }
  unint64_t v28 = *(void *)(v6 + 48) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v28 + 23) >= 0) {
    size_t v29 = *(unsigned __int8 *)(v28 + 23);
  }
  else {
    size_t v29 = *(void *)(v28 + 8);
  }
  unint64_t v30 = &v53;
  sub_19E37D4BC((uint64_t)&v53, v29 + 20);
  if (v54 < 0) {
    unint64_t v30 = (long long *)v53;
  }
  if (v29)
  {
    if (*(char *)(v28 + 23) >= 0) {
      CFNumberRef v31 = (const void *)v28;
    }
    else {
      CFNumberRef v31 = *(const void **)v28;
    }
    memmove(v30, v31, v29);
  }
  strcpy((char *)v30 + v29, " is already defined.");
  if (v54 >= 0) {
    CFNumberRef v32 = (const char *)&v53;
  }
  else {
    CFNumberRef v32 = (const char *)v53;
  }
  size_t v33 = strlen(v32);
  sub_19E3AD630(&v41, 13, v32, v33);
  sub_19E3AD6EC((uint64_t *)(a1 + 96), &v41);
  sub_19E3AD4CC((uint64_t *)&v41);
  if (SHIBYTE(v54) < 0)
  {
    uint64_t v34 = (void *)v53;
LABEL_82:
    operator delete(v34);
  }
LABEL_69:
  if (__p) {
    operator delete(__p);
  }
  sub_19E37CE48((uint64_t)&v45, v46[0]);
  sub_19E37CE48((uint64_t)&v47, v48);
  sub_19E37CE48((uint64_t)&v50, v51);
}

void sub_19E379EF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, char a19, void *a20,uint64_t a21,char a22,void *a23,uint64_t a24,char a25,void *a26)
{
  sub_19E3AD4CC(&a15);
  if (*(char *)(v26 - 89) < 0) {
    operator delete(*(void **)(v26 - 112));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  sub_19E37CE48((uint64_t)&a19, a20);
  sub_19E37CE48((uint64_t)&a22, a23);
  sub_19E37CE48((uint64_t)&a25, a26);
  _Unwind_Resume(a1);
}

uint64_t sub_19E37A010(void *__src, size_t __len)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9459ED0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1E9459ED0))
  {
    sub_19E37AF58();
  }
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    sub_19E37C958();
  }
  int v4 = (void *)qword_1E9459EC8;
  if (__len >= 0x17)
  {
    size_t v6 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v6 = __len | 7;
    }
    size_t v7 = v6 + 1;
    uint64_t v5 = (void **)operator new(v6 + 1);
    __dst[1] = (void *)__len;
    unint64_t v12 = v7 | 0x8000000000000000;
    __dst[0] = v5;
    goto LABEL_9;
  }
  HIBYTE(v12) = __len;
  uint64_t v5 = __dst;
  if (__len) {
LABEL_9:
  }
    memmove(v5, __src, __len);
  *((unsigned char *)v5 + __len) = 0;
  uint64_t v8 = sub_19E37D6F8(v4, (unsigned __int8 *)__dst);
  unsigned int v9 = v8;
  if (SHIBYTE(v12) < 0)
  {
    operator delete(__dst[0]);
    if (v9) {
      return v9[40];
    }
  }
  else if (v8)
  {
    return v9[40];
  }
  return 0xFFFFFFFFLL;
}

void sub_19E37A130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

uint64_t sub_19E37A160@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  if (a2[2])
  {
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    long long v36 = 0;
    __p = 0;
    CFNumberRef v32 = 0;
    size_t v33 = 0;
    int v4 = a2 + 1;
    uint64_t v3 = (void *)*a2;
    while (1)
    {
      uint64_t v5 = v3[4];
      size_t v6 = v35;
      if (v35 >= v36)
      {
        uint64_t v8 = (v35 - (unsigned char *)v34) >> 3;
        if ((unint64_t)(v8 + 1) >> 61) {
          sub_19E37C7C4();
        }
        unint64_t v9 = (v36 - (unsigned char *)v34) >> 2;
        if (v9 <= v8 + 1) {
          unint64_t v9 = v8 + 1;
        }
        if ((unint64_t)(v36 - (unsigned char *)v34) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v10 = v9;
        }
        if (v10) {
          int v11 = (char *)sub_19E37CFB8((uint64_t)&v36, v10);
        }
        else {
          int v11 = 0;
        }
        unint64_t v12 = &v11[8 * v8];
        *(void *)unint64_t v12 = v5;
        size_t v7 = v12 + 8;
        unint64_t v14 = (char *)v34;
        long long v13 = v35;
        if (v35 != v34)
        {
          do
          {
            uint64_t v15 = *((void *)v13 - 1);
            v13 -= 8;
            *((void *)v12 - 1) = v15;
            v12 -= 8;
          }
          while (v13 != v14);
          long long v13 = (char *)v34;
        }
        uint64_t v34 = v12;
        uint64_t v35 = v7;
        long long v36 = &v11[8 * v10];
        if (v13) {
          operator delete(v13);
        }
      }
      else
      {
        *(void *)uint64_t v35 = v5;
        size_t v7 = v6 + 8;
      }
      uint64_t v35 = v7;
      int v16 = v32;
      if (v32 >= v33)
      {
        uint64_t v18 = __p;
        uint64_t v19 = (v32 - __p) >> 2;
        unint64_t v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 62) {
          sub_19E37C7C4();
        }
        uint64_t v21 = v33 - __p;
        if ((v33 - __p) >> 1 > v20) {
          unint64_t v20 = v21 >> 1;
        }
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v22 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v20;
        }
        if (v22)
        {
          CFNumberRef v23 = (char *)sub_19E37D7FC((uint64_t)&v33, v22);
          uint64_t v18 = __p;
          int v16 = v32;
        }
        else
        {
          CFNumberRef v23 = 0;
        }
        unsigned int v24 = &v23[4 * v19];
        *(_DWORD *)unsigned int v24 = *((_DWORD *)v3 + 12);
        unint64_t v17 = v24 + 4;
        while (v16 != v18)
        {
          int v25 = *((_DWORD *)v16 - 1);
          v16 -= 4;
          *((_DWORD *)v24 - 1) = v25;
          v24 -= 4;
        }
        __p = v24;
        size_t v33 = &v23[4 * v22];
        if (v18) {
          operator delete(v18);
        }
      }
      else
      {
        *(_DWORD *)CFNumberRef v32 = *((_DWORD *)v3 + 12);
        unint64_t v17 = v32 + 4;
      }
      CFNumberRef v32 = v17;
      uint64_t v26 = (void *)v3[1];
      if (v26)
      {
        do
        {
          uint64_t v27 = v26;
          uint64_t v26 = (void *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          uint64_t v27 = (void *)v3[2];
          BOOL v28 = *v27 == (void)v3;
          uint64_t v3 = v27;
        }
        while (!v28);
      }
      uint64_t v3 = v27;
      if (v27 == v4) {
        sub_19E37B040(a1, (v35 - (unsigned char *)v34) >> 3, (unint64_t)v34, 0, (unint64_t)__p, 0);
      }
    }
  }
  return sub_19E3AD630(a3, 13, "no pieces are loaded.", 21);
}

void sub_19E37A5EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  if (a17) {
    operator delete(a17);
  }
  if (a20) {
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E37A644()
{
}

void sub_19E37A698(_Unwind_Exception *a1)
{
  MEMORY[0x19F3BDCF0](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

void sub_19E37A6BC(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  memset(&v32, 0, sizeof(v32));
  std::string::resize(&v32, 4uLL, 0);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v4 = &v32;
  }
  else {
    int v4 = (std::string *)v32.__r_.__value_.__r.__words[0];
  }
  LODWORD(v4->__r_.__value_.__l.__data_) = *(_DWORD *)(a1 + 88);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v5 = &v32;
  }
  else {
    uint64_t v5 = (std::string *)v32.__r_.__value_.__r.__words[0];
  }
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v32.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v5, size);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  memset(&v32, 0, sizeof(v32));
  std::string::resize(&v32, 4uLL, 0);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v7 = &v32;
  }
  else {
    size_t v7 = (std::string *)v32.__r_.__value_.__r.__words[0];
  }
  LODWORD(v7->__r_.__value_.__l.__data_) = *(_DWORD *)(a1 + 92);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v8 = &v32;
  }
  else {
    uint64_t v8 = (std::string *)v32.__r_.__value_.__r.__words[0];
  }
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v9 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v9 = v32.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v8, v9);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  sub_19E382258(*(void *)(a1 + 16), &v32);
  int v10 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  int v11 = v32.__r_.__value_.__r.__words[1];
  memset(&__p, 0, sizeof(__p));
  std::string::resize(&__p, 4uLL, 0);
  if ((v10 & 0x80u) == 0) {
    int v12 = v10;
  }
  else {
    int v12 = v11;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  LODWORD(p_p->__r_.__value_.__l.__data_) = v12;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v14 = &__p;
  }
  else {
    unint64_t v14 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v15 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v14, v15);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v16 = &v32;
  }
  else {
    int v16 = (std::string *)v32.__r_.__value_.__r.__words[0];
  }
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v17 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v17 = v32.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v16, v17);
  sub_19E3AB764(a2);
  uint64_t v19 = *(void *)(a1 + 32);
  uint64_t v18 = *(const std::string::value_type **)(a1 + 40);
  memset(&__p, 0, sizeof(__p));
  std::string::resize(&__p, 4uLL, 0);
  std::string::size_type v20 = 4 * v19;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v21 = &__p;
  }
  else {
    uint64_t v21 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  LODWORD(v21->__r_.__value_.__l.__data_) = v20;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v22 = &__p;
  }
  else {
    unint64_t v22 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v23 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v23 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v22, v23);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::append(a2, v18, v20);
  sub_19E3AB764(a2);
  uint64_t v26 = a1 + 64;
  uint64_t v24 = *(void *)(a1 + 64);
  int v25 = *(const std::string::value_type **)(v26 + 8);
  memset(&__p, 0, sizeof(__p));
  std::string::resize(&__p, 4uLL, 0);
  std::string::size_type v27 = 4 * v24;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    BOOL v28 = &__p;
  }
  else {
    BOOL v28 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  LODWORD(v28->__r_.__value_.__l.__data_) = v27;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v29 = &__p;
  }
  else {
    size_t v29 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v30 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v30 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v29, v30);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::append(a2, v25, v27);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
}

void sub_19E37A984(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v20 + 23) < 0) {
    operator delete(*(void **)v20);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E37A9FC(unsigned __int8 *__s1@<X0>, uint64_t a2@<X1>, char a3@<W2>, int a4@<W3>, unsigned __int8 ***a5@<X8>)
{
  size_t v6 = __s1;
  uint64_t v8 = &__s1[a2];
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  if ((a3 & 1) == 0)
  {
    if (a2 < 1) {
      return;
    }
    size_t v40 = 0;
    int v41 = 0;
    uint64_t v42 = a5 + 2;
    CFTypeID v43 = __s1;
    while (1)
    {
      int v44 = asc_19E564BD9[(unint64_t)*v43 >> 4];
      if ((int)v8 - (int)v43 < v44) {
        int v44 = v8 - v43;
      }
      uint64_t v45 = v44;
      if (v44 == 3)
      {
        int v46 = memcmp(v43, "▁", 3uLL);
        int v47 = v46 == 0;
        if (v43 == v6) {
          goto LABEL_62;
        }
        if ((v41 & a4 & 1) == 0 && !v46)
        {
          int v47 = 1;
LABEL_62:
          if ((unint64_t)v40 >= *v42)
          {
            uint64_t v48 = ((char *)v40 - (char *)*a5) >> 4;
            if ((unint64_t)(v48 + 1) >> 60) {
              sub_19E37C7C4();
            }
            uint64_t v49 = *v42 - (void)*a5;
            uint64_t v50 = v49 >> 3;
            if (v49 >> 3 <= (unint64_t)(v48 + 1)) {
              uint64_t v50 = v48 + 1;
            }
            if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v51 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v51 = v50;
            }
            uint64_t v52 = (char *)sub_19E37D6C0((uint64_t)(a5 + 2), v51);
            int64_t v54 = (unsigned __int8 **)&v52[16 * v48];
            unsigned char *v54 = v43;
            v54[1] = 0;
            CFTypeID v56 = (char *)*a5;
            CFNumberRef v55 = (char *)a5[1];
            CFNumberRef v57 = v54;
            if (v55 != (char *)*a5)
            {
              do
              {
                *((_OWORD *)v57 - 1) = *((_OWORD *)v55 - 1);
                v57 -= 2;
                v55 -= 16;
              }
              while (v55 != v56);
              CFNumberRef v55 = (char *)*a5;
            }
            size_t v40 = v54 + 2;
            *a5 = v57;
            a5[1] = v54 + 2;
            a5[2] = (unsigned __int8 **)&v52[16 * v53];
            if (v55) {
              operator delete(v55);
            }
          }
          else
          {
            *size_t v40 = v43;
            v40[1] = 0;
            v40 += 2;
          }
          a5[1] = v40;
          goto LABEL_76;
        }
        if (v41)
        {
          int v47 = v41 & (v46 == 0);
          goto LABEL_76;
        }
      }
      else if (v43 == v6)
      {
        int v47 = 0;
        goto LABEL_62;
      }
      int v47 = 0;
LABEL_76:
      *(v40 - 1) += v45;
      v43 += v45;
      int v41 = v47;
      if (v43 >= v8) {
        return;
      }
    }
  }
  if (a2 >= 1)
  {
    std::string::size_type v9 = a5 + 2;
    int v10 = sub_19E37D6C0((uint64_t)(a5 + 2), 1uLL);
    int v12 = (unsigned __int8 **)&v10[2 * v11];
    void *v10 = v6;
    v10[1] = 0;
    long long v13 = (unsigned __int8 **)(v10 + 2);
    std::string::size_type v15 = (char *)*a5;
    unint64_t v14 = (char *)a5[1];
    if (v14 != (char *)*a5)
    {
      do
      {
        *((_OWORD *)v10 - 1) = *((_OWORD *)v14 - 1);
        v10 -= 2;
        v14 -= 16;
      }
      while (v14 != v15);
      unint64_t v14 = (char *)*a5;
    }
    *a5 = (unsigned __int8 **)v10;
    a5[1] = v13;
    a5[2] = v12;
    if (v14) {
      operator delete(v14);
    }
    BOOL v16 = 0;
    a5[1] = v13;
    do
    {
      int v17 = asc_19E564BD9[(unint64_t)*v6 >> 4];
      if ((int)v8 - (int)v6 < v17) {
        int v17 = v8 - v6;
      }
      uint64_t v18 = v17;
      if (v17 == 3)
      {
        BOOL v19 = memcmp(v6, "▁", 3uLL) == 0;
        if (v19) {
          goto LABEL_18;
        }
      }
      else
      {
        BOOL v19 = 0;
      }
      if ((v16 & a4) != 0)
      {
        if ((unint64_t)v13 >= *v9)
        {
          uint64_t v20 = ((char *)v13 - (char *)*a5) >> 4;
          if ((unint64_t)(v20 + 1) >> 60) {
            sub_19E37C7C4();
          }
          uint64_t v21 = *v9 - (void)*a5;
          uint64_t v22 = v21 >> 3;
          if (v21 >> 3 <= (unint64_t)(v20 + 1)) {
            uint64_t v22 = v20 + 1;
          }
          if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v23 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v23 = v22;
          }
          uint64_t v24 = (char *)sub_19E37D6C0((uint64_t)(a5 + 2), v23);
          uint64_t v26 = (unsigned __int8 **)&v24[16 * v20];
          void *v26 = v6;
          v26[1] = 0;
          BOOL v28 = (char *)*a5;
          std::string::size_type v27 = (char *)a5[1];
          size_t v29 = v26;
          if (v27 != (char *)*a5)
          {
            do
            {
              *((_OWORD *)v29 - 1) = *((_OWORD *)v27 - 1);
              v29 -= 2;
              v27 -= 16;
            }
            while (v27 != v28);
            std::string::size_type v27 = (char *)*a5;
          }
          long long v13 = v26 + 2;
          *a5 = v29;
          a5[1] = v26 + 2;
          a5[2] = (unsigned __int8 **)&v24[16 * v25];
          if (v27) {
            operator delete(v27);
          }
        }
        else
        {
          *long long v13 = v6;
          v13[1] = 0;
          v13 += 2;
        }
        BOOL v16 = 0;
        a5[1] = v13;
        goto LABEL_31;
      }
LABEL_18:
      BOOL v16 = v19;
LABEL_31:
      *(v13 - 1) += v18;
      v6 += v18;
      if (v6 < v8 && v19 && (a4 & 1) == 0)
      {
        if ((unint64_t)v13 >= *v9)
        {
          uint64_t v30 = ((char *)v13 - (char *)*a5) >> 4;
          if ((unint64_t)(v30 + 1) >> 60) {
            sub_19E37C7C4();
          }
          uint64_t v31 = *v9 - (void)*a5;
          uint64_t v32 = v31 >> 3;
          if (v31 >> 3 <= (unint64_t)(v30 + 1)) {
            uint64_t v32 = v30 + 1;
          }
          if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v33 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v33 = v32;
          }
          uint64_t v34 = (char *)sub_19E37D6C0((uint64_t)(a5 + 2), v33);
          long long v36 = (unsigned __int8 **)&v34[16 * v30];
          *long long v36 = v6;
          v36[1] = 0;
          CFNumberRef v38 = (char *)*a5;
          CFTypeID v37 = (char *)a5[1];
          long long v39 = v36;
          if (v37 != (char *)*a5)
          {
            do
            {
              *((_OWORD *)v39 - 1) = *((_OWORD *)v37 - 1);
              v39 -= 2;
              v37 -= 16;
            }
            while (v37 != v38);
            CFTypeID v37 = (char *)*a5;
          }
          long long v13 = v36 + 2;
          *a5 = v39;
          a5[1] = v36 + 2;
          a5[2] = (unsigned __int8 **)&v34[16 * v35];
          if (v37) {
            operator delete(v37);
          }
        }
        else
        {
          *long long v13 = v6;
          v13[1] = 0;
          v13 += 2;
        }
        a5[1] = v13;
      }
    }
    while (v6 < v8);
  }
}

void sub_19E37AE44(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E37AE78@<X0>(unsigned __int8 a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int8 v3 = a1;
  return sub_19E37AEA8("<0x%02X>", &v3, a2);
}

uint64_t sub_19E37AEA8@<X0>(char *__format@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  int v6 = snprintf(0, 0, __format, *a2);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  std::string::resize((std::string *)a3, v6, 0);
  uint64_t v7 = *(unsigned __int8 *)(a3 + 23);
  if ((v7 & 0x80u) == 0) {
    uint64_t v8 = (char *)a3;
  }
  else {
    uint64_t v8 = *(char **)a3;
  }
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *(void *)(a3 + 8);
  }
  return snprintf(v8, v7 + 1, __format, *a2);
}

void sub_19E37AF3C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E37AF58()
{
}

void sub_19E37B024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E37B040(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, void (*a6)(unint64_t, uint64_t))
{
  v12[0] = a2;
  v12[1] = a3;
  v12[2] = a4;
  v12[3] = a5;
  int v6 = a6;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  int v11 = 0;
  sub_19E37D834(&v6, v12);
}

void sub_19E37B154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_19E37B16C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_19E3AD6E8(a2, a1 + 96);
}

uint64_t sub_19E37B178(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_19E37B180@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_19E3AB380();
  if ((int)result <= 2)
  {
    char v9 = 0;
    unsigned __int8 v3 = sub_19E37CA70(MEMORY[0x1E4FBA240], (uint64_t)"model_interface.h", 17);
    sub_19E37CA70(v3, (uint64_t)"(", 1);
    int v4 = (void *)std::ostream::operator<<();
    uint64_t v5 = sub_19E37CA70(v4, (uint64_t)") ", 2);
    int v6 = sub_19E37CA70(v5, (uint64_t)"LOG(", 4);
    long long v7 = sub_19E37CA70(v6, (uint64_t)"ERROR", 5);
    long long v8 = sub_19E37CA70(v7, (uint64_t)") ", 2);
    sub_19E37CA70(v8, (uint64_t)"Not implemented.", 16);
    uint64_t result = (uint64_t)sub_19E37B91C(&v9);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

void sub_19E37B248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_19E37B25C@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_19E3AB380();
  if ((int)result <= 2)
  {
    char v9 = 0;
    unsigned __int8 v3 = sub_19E37CA70(MEMORY[0x1E4FBA240], (uint64_t)"model_interface.h", 17);
    sub_19E37CA70(v3, (uint64_t)"(", 1);
    int v4 = (void *)std::ostream::operator<<();
    uint64_t v5 = sub_19E37CA70(v4, (uint64_t)") ", 2);
    int v6 = sub_19E37CA70(v5, (uint64_t)"LOG(", 4);
    long long v7 = sub_19E37CA70(v6, (uint64_t)"ERROR", 5);
    long long v8 = sub_19E37CA70(v7, (uint64_t)") ", 2);
    sub_19E37CA70(v8, (uint64_t)"Not implemented.", 16);
    uint64_t result = (uint64_t)sub_19E37B91C(&v9);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

void sub_19E37B324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sub_19E37B338(void *a1@<X8>)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if ((int)sub_19E3AB380() <= 2)
  {
    LOBYTE(__p) = 0;
    uint64_t v2 = sub_19E37CA70(MEMORY[0x1E4FBA240], (uint64_t)"model_interface.h", 17);
    sub_19E37CA70(v2, (uint64_t)"(", 1);
    unsigned __int8 v3 = (void *)std::ostream::operator<<();
    int v4 = sub_19E37CA70(v3, (uint64_t)") ", 2);
    uint64_t v5 = sub_19E37CA70(v4, (uint64_t)"LOG(", 4);
    int v6 = sub_19E37CA70(v5, (uint64_t)"ERROR", 5);
    long long v7 = sub_19E37CA70(v6, (uint64_t)") ", 2);
    sub_19E37CA70(v7, (uint64_t)"Not implemented.", 16);
    sub_19E37B91C(&__p);
  }
  std::string __p = 0;
  long long v10 = 0;
  int v12 = 0;
  uint64_t v11 = 0;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  long long v8 = (char *)operator new(0x20uLL);
  *a1 = v8;
  a1[1] = v8;
  a1[2] = v8 + 32;
  a1[1] = sub_19E37C628((uint64_t)(a1 + 2), (uint64_t)&__p, (uint64_t)&v13, (uint64_t)v8);
  if (__p)
  {
    long long v10 = __p;
    operator delete(__p);
  }
}

void sub_19E37B484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, void *__p, uint64_t a13)
{
  uint64_t v15 = v14;
  *(void *)(v13 + 8) = v15;
  sub_19E37C8AC(&a10);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

double sub_19E37B4C8()
{
  if ((int)sub_19E3AB380() <= 2)
  {
    char v7 = 0;
    uint64_t v0 = sub_19E37CA70(MEMORY[0x1E4FBA240], (uint64_t)"model_interface.h", 17);
    sub_19E37CA70(v0, (uint64_t)"(", 1);
    uint64_t v1 = (void *)std::ostream::operator<<();
    uint64_t v2 = sub_19E37CA70(v1, (uint64_t)") ", 2);
    unsigned __int8 v3 = sub_19E37CA70(v2, (uint64_t)"LOG(", 4);
    int v4 = sub_19E37CA70(v3, (uint64_t)"ERROR", 5);
    uint64_t v5 = sub_19E37CA70(v4, (uint64_t)") ", 2);
    sub_19E37CA70(v5, (uint64_t)"Not implemented.", 16);
    sub_19E37B91C(&v7);
  }
  return 0.0;
}

void sub_19E37B588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_19E37B59C()
{
  return 0;
}

uint64_t sub_19E37B5A4()
{
  return 0;
}

uint64_t sub_19E37B5AC()
{
  return 0;
}

uint64_t sub_19E37B5B4()
{
  return 0;
}

uint64_t sub_19E37B5BC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 88))();
}

uint64_t sub_19E37B5E4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 16))();
  }
  return result;
}

uint64_t sub_19E37B614(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 96))();
}

uint64_t sub_19E37B63C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 112))();
}

uint64_t sub_19E37B664(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 120))();
}

uint64_t sub_19E37B68C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 128))();
}

uint64_t sub_19E37B6B4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 136))();
}

uint64_t sub_19E37B6DC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 144))();
}

uint64_t sub_19E37B704(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 64))();
  }
  return result;
}

BOOL sub_19E37B734(int a1, void *__s1, size_t a3, void *__s2, uint64_t a5)
{
  return a3 == a5 && memcmp(__s1, __s2, a3) == 0;
}

void sub_19E37B770(void *a1)
{
}

uint64_t sub_19E37B784(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA498] + 64;
  *(void *)(a1 + 112) = MEMORY[0x1E4FBA498] + 64;
  uint64_t v3 = *(void *)(MEMORY[0x1E4FBA418] + 16);
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA418] + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + *(void *)(v4 - 24)) = v3;
  uint64_t v5 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v5, (void *)(a1 + 8));
  uint64_t v6 = MEMORY[0x1E4FBA498] + 24;
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  *(void *)a1 = v6;
  *(void *)(a1 + 112) = v2;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 8) = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_19E37B8F4(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x19F3BDC30](v1);
  _Unwind_Resume(a1);
}

unsigned char *sub_19E37B91C(unsigned char *a1)
{
  std::ios_base::getloc((const std::ios_base *)(MEMORY[0x1E4FBA240] + *(void *)(*MEMORY[0x1E4FBA240] - 24)));
  uint64_t v2 = std::locale::use_facet(&v4, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  std::ostream::flush();
  if (*a1) {
    sub_19E3AD374();
  }
  return a1;
}

void sub_19E37B9DC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t sub_19E37B9F8(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    sub_19E3AF8D4((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1705);
    std::locale v4 = sub_19E3AF8EC(v8, "CHECK failed: (index) >= (0): ");
    sub_19E3AFA28((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v8);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    sub_19E3AF8D4((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1706);
    uint64_t v5 = sub_19E3AF8EC(v8, "CHECK failed: (index) < (current_size_): ");
    sub_19E3AFA28((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v8);
  }
  return *(void *)(*(void *)(a1 + 16) + 8 * a2 + 8);
}

void sub_19E37BAB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_19E37BAD8(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  long long v8 = (void *)(a1 + 24);
  unint64_t v9 = sub_19E37BD64(a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    uint64_t v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(void **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (sub_19E37C210(a1 + 32, (unsigned __int8 *)i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  int v17 = (void *)(a1 + 16);
  i = operator new(0x30uLL);
  *(void *)i = 0;
  *((void *)i + 1) = v10;
  uint64_t v18 = *a4;
  long long v19 = **a4;
  *((void *)i + 4) = *((void *)*a4 + 2);
  *((_OWORD *)i + 1) = v19;
  *((void *)v18 + 1) = 0;
  *((void *)v18 + 2) = 0;
  *(void *)uint64_t v18 = 0;
  *((unsigned char *)i + 40) = 0;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    BOOL v22 = 1;
    if (v11 >= 3) {
      BOOL v22 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v11);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    sub_19E37C2EC(a1, v25);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v26 = *(void *)a1;
  std::string::size_type v27 = *(void **)(*(void *)a1 + 8 * v4);
  if (v27)
  {
    *(void *)i = *v27;
LABEL_38:
    void *v27 = i;
    goto LABEL_39;
  }
  *(void *)i = *v17;
  void *v17 = i;
  *(void *)(v26 + 8 * v4) = v17;
  if (*(void *)i)
  {
    unint64_t v28 = *(void *)(*(void *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11) {
        v28 %= v11;
      }
    }
    else
    {
      v28 &= v11 - 1;
    }
    std::string::size_type v27 = (void *)(*(void *)a1 + 8 * v28);
    goto LABEL_38;
  }
LABEL_39:
  ++*v8;
  return i;
}

void sub_19E37BD48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_19E37C538(v11, v10);
  _Unwind_Resume(a1);
}

unint64_t sub_19E37BD64(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v3 = v2;
  }
  return sub_19E37BDA4((uint64_t)&v5, (uint64_t *)a2, v3);
}

unint64_t sub_19E37BDA4(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      uint64_t v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      uint64_t v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      uint64_t v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      uint64_t v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      uint64_t v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      uint64_t v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      uint64_t v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      unint64_t v11 = v7 + v9;
      unint64_t v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      unint64_t v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      unint64_t v14 = v8 + a3 + v7 + v4;
      uint64_t v15 = v14 + v5;
      unint64_t v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      uint64_t v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      uint64_t v18 = v17 + v6 + v9;
      uint64_t v19 = __ROR8__(v18, 44);
      uint64_t v20 = v18 + v10;
      uint64_t v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      uint64_t v23 = *a2;
      BOOL v22 = a2 + 4;
      unint64_t v24 = v23 - 0x4B6D499041670D8DLL * v5;
      uint64_t v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        uint64_t v26 = *(v22 - 3);
        uint64_t v27 = v24 + v15 + v11 + v26;
        uint64_t v28 = v22[2];
        uint64_t v29 = v22[3];
        uint64_t v30 = v22[1];
        unint64_t v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        uint64_t v31 = v13 + v20;
        uint64_t v32 = *(v22 - 2);
        uint64_t v33 = *(v22 - 1);
        uint64_t v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        uint64_t v35 = v34 + v20 + v33;
        uint64_t v36 = v34 + v26 + v32;
        uint64_t v15 = v36 + v33;
        uint64_t v37 = __ROR8__(v36, 44) + v34;
        unint64_t v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        unint64_t v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        unint64_t v16 = v37 + __ROR8__(v35 + v38, 21);
        unint64_t v39 = v24 + v21 + *v22;
        uint64_t v20 = v39 + v30 + v28 + v29;
        uint64_t v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        unint64_t v13 = v38;
        v25 += 64;
      }
      while (v25);
      unint64_t v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      unint64_t v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return sub_19E37C150(a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return sub_19E37C0A4(a2, a3);
  }
  else
  {
    return sub_19E37BFAC(a2, a3);
  }
}

unint64_t sub_19E37BFAC(_DWORD *a1, unint64_t a2)
{
  if (a2 < 9)
  {
    if (a2 < 4)
    {
      unint64_t result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        unint64_t v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      uint64_t v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      unint64_t v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    uint64_t v3 = *(void *)((char *)a1 + a2 - 8);
    uint64_t v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t sub_19E37C0A4(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[1];
  unint64_t v3 = 0xB492B66FBE98F273 * *a1;
  uint64_t v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  unint64_t v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8);
  unint64_t v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v4 - 0x3C5A37A36834CED9 * *(void *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t sub_19E37C150(void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)((char *)a1 + a2 - 16);
  uint64_t v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  uint64_t v5 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v6 = __ROR8__(v3 + v4, 52);
  uint64_t v7 = v3 + a1[1];
  uint64_t v8 = __ROR8__(v7, 7);
  uint64_t v9 = v7 + v5;
  uint64_t v10 = *(void *)((char *)a1 + a2 - 32) + v5;
  uint64_t v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  uint64_t v12 = *(void *)((char *)a1 + a2 - 24) + v10 + v2;
  unint64_t v13 = 0xC3A5C85C97CB3127 * (v12 + *(void *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(void *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(void *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

uint64_t sub_19E37C210(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a2[23];
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = a2[23];
  }
  else {
    uint64_t v5 = *((void *)a2 + 1);
  }
  uint64_t v6 = a3[23];
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *((void *)a3 + 1);
  }
  if (v5 != v6) {
    return 0;
  }
  if (v7 < 0) {
    uint64_t v3 = *(unsigned __int8 **)a3;
  }
  if ((v4 & 0x80) != 0) {
    return memcmp(*(const void **)a2, v3, *((void *)a2 + 1)) == 0;
  }
  if (!a2[23]) {
    return 1;
  }
  uint64_t v8 = v4 - 1;
  do
  {
    int v10 = *a2++;
    int v9 = v10;
    int v12 = *v3++;
    int v11 = v12;
    BOOL v14 = v8-- != 0;
    uint64_t result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

void sub_19E37C2B8()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E4FBA350], MEMORY[0x1E4FBA1F8]);
}

void sub_19E37C2EC(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      sub_19E37C3DC(a1, prime);
    }
  }
}

void sub_19E37C3DC(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      sub_19E37C2B8();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      int v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2) {
              v12 %= a2;
            }
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v12))
            {
              *(void *)(*(void *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *uint64_t v7 = *v11;
            *int v11 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = v11;
            int v11 = v7;
          }
          unint64_t v12 = v8;
LABEL_24:
          uint64_t v7 = v11;
          int v11 = (void *)*v11;
          unint64_t v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    int v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

void sub_19E37C538(uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 39) < 0) {
      operator delete(__p[2]);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void sub_19E37C598(const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_19E37C5F4(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E599EEF8, MEMORY[0x1E4FBA1C8]);
}

void sub_19E37C5E0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_19E37C5F4(std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D0] + 16);
  return result;
}

uint64_t sub_19E37C628(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  std::string v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *(void *)uint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
      *(void *)(v4 + 16) = 0;
      sub_19E37C6F0((char *)v4, *(long long **)v6, *(long long **)(v6 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 3));
      *(_DWORD *)(v4 + 24) = *(_DWORD *)(v6 + 24);
      uint64_t v4 = v11 + 32;
      v11 += 32;
      v6 += 32;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  sub_19E37C824((uint64_t)v8);
  return v4;
}

void sub_19E37C6DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char *sub_19E37C6F0(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = sub_19E37C770(result, a4);
    uint64_t v7 = *((void *)v6 + 1);
    while (a2 != a3)
    {
      long long v8 = *a2;
      *(void *)(v7 + 16) = *((void *)a2 + 2);
      *(_OWORD *)uint64_t v7 = v8;
      v7 += 24;
      a2 = (long long *)((char *)a2 + 24);
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_19E37C754(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_19E37C770(void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    sub_19E37C7C4();
  }
  uint64_t result = (char *)sub_19E37C7DC((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void sub_19E37C7C4()
{
}

void *sub_19E37C7DC(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    sub_19E37C2B8();
  }
  return operator new(24 * a2);
}

uint64_t sub_19E37C824(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_19E37C85C(a1);
  }
  return a1;
}

void sub_19E37C85C(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  if (v1 != v2)
  {
    uint64_t v3 = **(void **)(a1 + 16);
    do
    {
      unint64_t v5 = *(void **)(v3 - 32);
      v3 -= 32;
      uint64_t v4 = v5;
      if (v5)
      {
        *(void *)(v1 - 24) = v4;
        operator delete(v4);
      }
      uint64_t v1 = v3;
    }
    while (v3 != v2);
  }
}

void sub_19E37C8AC(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_19E37C900((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_19E37C900(uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      uint64_t v6 = *(void **)(v4 - 32);
      v4 -= 32;
      unint64_t v5 = v6;
      if (v6)
      {
        *(void *)(v2 - 24) = v5;
        operator delete(v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void sub_19E37C958()
{
}

void sub_19E37C970(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1EF0BD418;
  uint64_t v2 = a1[3];
  if (v2)
  {
    MEMORY[0x19F3BDCC0](v2, 0x1000C8052888210);
    a1[3] = 0;
  }
  JUMPOUT(0x19F3BDCF0);
}

void sub_19E37C9F4(uint64_t a1, uint64_t *a2)
{
  if (a2)
  {
    uint64_t v2 = *a2;
    *a2 = 0;
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    JUMPOUT(0x19F3BDCF0);
  }
}

void *sub_19E37CA70(void *a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x19F3BD970](v13, a1);
  if (v13[0])
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *(void *)(v6 + 40);
    int v8 = *(_DWORD *)(v6 + 8);
    int v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      uint64_t v10 = std::locale::use_facet(&v14, MEMORY[0x1E4FBA258]);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v11 = a2 + a3;
    }
    else {
      uint64_t v11 = a2;
    }
    if (!sub_19E37CC14(v7, a2, v11, a2 + a3, v6, (char)v9)) {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x19F3BD980](v13);
  return a1;
}

void sub_19E37CBAC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  MEMORY[0x19F3BD980](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x19E37CB8CLL);
}

void sub_19E37CC00(_Unwind_Exception *a1)
{
}

uint64_t sub_19E37CC14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      int64_t v12 = 0;
    }
    else {
      int64_t v12 = v11 - (a4 - a2);
    }
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1) != a3 - a2) {
      return 0;
    }
    if (v12 >= 1)
    {
      sub_19E37CD9C(__p, v12, __c);
      unint64_t v13 = v18 >= 0 ? __p : (void **)__p[0];
      uint64_t v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(void *)v6 + 96))(v6, v13, v12);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if (v14 != v12) {
        return 0;
      }
    }
    uint64_t v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a3, v15) == v15) {
      *(void *)(a5 + 24) = 0;
    }
    else {
      return 0;
    }
  }
  return v6;
}

void sub_19E37CD80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_19E37CD9C(void *__b, size_t __len, int __c)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    sub_19E37C958();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((unsigned char *)__b + 23) = __len;
    uint64_t v6 = __b;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memset(v6, __c, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __b;
}

void sub_19E37CE48(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_19E37CE48(a1, *a2);
    sub_19E37CE48(a1, a2[1]);
    operator delete(a2);
  }
}

void *sub_19E37CE9C(void *a1, unint64_t a2, unsigned __int8 *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_19E37CF70(a1, a2);
    int v6 = *a3;
    unint64_t v7 = a1[1];
    unint64_t v8 = v7 + a2;
    a1[1] = v7 + a2;
    if (v7)
    {
      unint64_t v9 = v8 - 1;
      if (((v8 - 1) ^ (v7 - 1)) < 0x40)
      {
LABEL_10:
        uint64_t v13 = *a1 + 8 * (v7 >> 6);
        int v14 = v7 & 0x3F;
        if (v6) {
          sub_19E37CFF0(&v13, a2);
        }
        else {
          sub_19E37D0A4((uint64_t)&v13, a2);
        }
        return a1;
      }
    }
    else
    {
      unint64_t v9 = v8 - 1;
    }
    unint64_t v10 = v9 >> 6;
    if (v8 >= 0x41) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = 0;
    }
    *(void *)(*a1 + 8 * v11) = 0;
    goto LABEL_10;
  }
  return a1;
}

void *sub_19E37CF70(void *a1, uint64_t a2)
{
  if (a2 < 0) {
    sub_19E37C7C4();
  }
  uint64_t result = sub_19E37CFB8((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

void *sub_19E37CFB8(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    sub_19E37C2B8();
  }
  return operator new(8 * a2);
}

void *sub_19E37CFF0(void *result, unint64_t a2)
{
  unint64_t v2 = a2;
  uint64_t v3 = result;
  int v4 = *((_DWORD *)result + 2);
  unint64_t v5 = (void *)*result;
  if (v4)
  {
    if ((64 - v4) >= a2) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4);
    unint64_t v2 = a2 - v6;
    *uint64_t result = v5;
  }
  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    uint64_t result = memset(v5, 255, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    unint64_t v8 = &v5[v7];
    *uint64_t v3 = v8;
    *v8 |= 0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F);
  }
  return result;
}

void sub_19E37D0A4(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  int v4 = *(_DWORD *)(a1 + 8);
  unint64_t v5 = *(void **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    unint64_t v2 = a2 - v6;
    *(void *)a1 = v5;
  }
  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    bzero(v5, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    unint64_t v8 = &v5[v7];
    *(void *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

_OWORD *sub_19E37D154(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = (void **)sub_19E37D1E0((uint64_t)a1, &v9, a2);
  unint64_t v6 = *v5;
  if (!*v5)
  {
    unint64_t v7 = (uint64_t **)v5;
    unint64_t v6 = operator new(0x38uLL);
    v6[2] = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
    sub_19E37D280(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

void *sub_19E37D1E0(uint64_t a1, void *a2, uint64_t a3)
{
  unint64_t v5 = (void *)(a1 + 8);
  int v4 = *(void **)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        unint64_t v8 = v4;
        uint64_t v9 = (uint64_t)(v4 + 4);
        if (!sub_19E37D2D8(v7, a3, (uint64_t)(v4 + 4))) {
          break;
        }
        int v4 = (void *)*v8;
        unint64_t v5 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (!sub_19E37D2D8(v7, v9, a3)) {
        break;
      }
      unint64_t v5 = v8 + 1;
      int v4 = (void *)v8[1];
    }
    while (v4);
  }
  else
  {
    unint64_t v8 = (void *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

uint64_t *sub_19E37D280(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  unint64_t v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  uint64_t result = sub_19E37D324(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t sub_19E37D2D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(const void **)a2;
  size_t v4 = *(void *)(a2 + 8);
  unint64_t v5 = *(const void **)a3;
  size_t v6 = *(void *)(a3 + 8);
  if (v6 >= v4) {
    size_t v7 = v4;
  }
  else {
    size_t v7 = *(void *)(a3 + 8);
  }
  int v8 = memcmp(v3, v5, v7);
  if (v4 < v6) {
    unsigned int v9 = -1;
  }
  else {
    unsigned int v9 = 1;
  }
  if (v4 == v6) {
    unsigned int v9 = 0;
  }
  if (v8) {
    unsigned int v9 = v8;
  }
  return v9 >> 31;
}

uint64_t *sub_19E37D324(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      unint64_t v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      uint64_t v3 = (uint64_t *)v2[2];
      size_t v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), unint64_t v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            unsigned int v9 = (uint64_t **)a2[2];
          }
          else
          {
            unsigned int v9 = (uint64_t **)v2[1];
            unint64_t v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              uint64_t v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            *unsigned int v9 = v2;
            v2[2] = (uint64_t)v9;
            uint64_t v3 = v9[2];
            unint64_t v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          *uint64_t v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), unint64_t v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          uint64_t *v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            uint64_t v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          uint64_t v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        unint64_t v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        uint64_t *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      *unint64_t v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

uint64_t sub_19E37D4BC(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x7FFFFFFFFFFFFFF8) {
    sub_19E37C958();
  }
  if (a2 > 0x16)
  {
    uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v4 = a2 | 7;
    }
    uint64_t v5 = v4 + 1;
    int v6 = operator new(v4 + 1);
    *(void *)(a1 + 8) = a2;
    *(void *)(a1 + 16) = v5 | 0x8000000000000000;
    *(void *)a1 = v6;
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    *(unsigned char *)(a1 + 23) = a2;
  }
  return a1;
}

uint64_t *sub_19E37D544(uint64_t **a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v5 = (void **)sub_19E37D1E0((uint64_t)a1, &v9, a2);
  int v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    int v6 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v6 + 2) = *a3;
    sub_19E37D280(a1, v9, v7, v6);
  }
  return v6;
}

uint64_t sub_19E37D5C8@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *(unsigned int *)(result + 8);
  uint64_t v4 = *(void **)result;
  if (!v3) {
    goto LABEL_9;
  }
  unint64_t v5 = (64 - v3);
  if (v5 >= a2) {
    unint64_t v6 = a2;
  }
  else {
    unint64_t v6 = (64 - v3);
  }
  if (((0xFFFFFFFFFFFFFFFFLL >> (64 - v3 - v6)) & (-1 << v3) & ~*v4) != 0)
  {
    unint64_t v7 = __rbit64((0xFFFFFFFFFFFFFFFFLL >> (64 - v3 - v6)) & (-1 << v3) & ~*v4);
LABEL_22:
    *(void *)a3 = v4;
    *(_DWORD *)(a3 + 8) = __clz(v7);
    return result;
  }
  if (v5 < a2)
  {
    a2 -= v6;
    *(void *)uint64_t result = ++v4;
LABEL_9:
    if (a2 < 0x40)
    {
LABEL_12:
      if (!a2 || (unint64_t v8 = (0xFFFFFFFFFFFFFFFFLL >> -(char)a2) & ~*v4) == 0)
      {
        *(void *)a3 = v4;
        *(_DWORD *)(a3 + 8) = a2;
        return result;
      }
    }
    else
    {
      while (*v4 == -1)
      {
        *(void *)uint64_t result = ++v4;
        a2 -= 64;
        if (a2 <= 0x3F) {
          goto LABEL_12;
        }
      }
      unint64_t v8 = ~*v4;
    }
    unint64_t v7 = __rbit64(v8);
    goto LABEL_22;
  }
  uint64_t v9 = v3 + a2 - 63;
  if (v9 < 0) {
    uint64_t v9 = v3 + a2;
  }
  uint64_t v10 = v9 >> 6;
  unint64_t v11 = (v3 + a2) >> 6;
  if ((a2 & 0x8000000000000000) != 0) {
    unint64_t v11 = v10;
  }
  *(void *)a3 = &v4[v11];
  *(_DWORD *)(a3 + 8) = ((_BYTE)v3 + (_BYTE)a2) & 0x3F;
  return result;
}

void *sub_19E37D6C0(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    sub_19E37C2B8();
  }
  return operator new(16 * a2);
}

unsigned __int8 *sub_19E37D6F8(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = sub_19E37BD64((uint64_t)(a1 + 3), (uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  uint64_t v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  unint64_t v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = *((void *)v11 + 1);
      if (v6 == v13)
      {
        if (sub_19E37C210(v12, v11 + 16, a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      unint64_t v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

void *sub_19E37D7FC(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    sub_19E37C2B8();
  }
  return operator new(4 * a2);
}

void sub_19E37D834(void (**a1)(unint64_t, uint64_t), unint64_t *a2)
{
  if (a2[3])
  {
    uint64_t v3 = 0;
    memset(v2, 0, sizeof(v2));
    sub_19E37DDF4(a1, a2, (uint64_t *)v2);
  }
  sub_19E37E23C((uint64_t)a1, a2);
}

void sub_19E37D914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *sub_19E37D928(uint64_t *a1)
{
  if (*a1)
  {
    MEMORY[0x19F3BDCC0](*a1, 0x1000C8077774924);
    *a1 = 0;
  }
  return a1;
}

uint64_t sub_19E37D974(uint64_t *a1)
{
  sub_19E37D9C0((uint64_t)a1, 0);
  uint64_t result = *a1;
  if (*a1)
  {
    uint64_t result = MEMORY[0x19F3BDCC0](result, 0x1000C8077774924);
    *a1 = 0;
  }
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

uint64_t sub_19E37D9C0(uint64_t result, unint64_t a2)
{
  unint64_t v2 = *(void *)(result + 8);
  if (v2 > a2)
  {
    *(void *)(result + 8) = a2;
    unint64_t v2 = a2;
  }
  if (*(void *)(result + 16) < a2) {
    sub_19E37DA20(result, a2);
  }
  if (v2 < a2) {
    *(void *)(result + 8) = a2;
  }
  return result;
}

void sub_19E37DA20(uint64_t a1, unint64_t a2)
{
  if (a2 < 2 * *(void *)(a1 + 16))
  {
    uint64_t v2 = 1;
    do
    {
      unint64_t v3 = v2;
      v2 *= 2;
    }
    while (v3 < a2);
  }
  operator new[]();
}

void sub_19E37DB60(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x19F3BDCF0);
}

const char *sub_19E37DB98(uint64_t a1)
{
  if (*(void *)(a1 + 8)) {
    return *(const char **)(a1 + 8);
  }
  else {
    return "";
  }
}

uint64_t *sub_19E37DBB0(uint64_t *a1)
{
  if (*a1)
  {
    MEMORY[0x19F3BDCC0](*a1, 0x1000C8077774924);
    *a1 = 0;
  }
  return a1;
}

uint64_t sub_19E37DBFC(uint64_t *a1)
{
  sub_19E37DC48(a1, 0);
  uint64_t result = *a1;
  if (*a1)
  {
    uint64_t result = MEMORY[0x19F3BDCC0](result, 0x1000C8077774924);
    *a1 = 0;
  }
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

void sub_19E37DC48(void *a1, unint64_t a2)
{
  unint64_t v4 = a1[1];
  if (v4 > a2)
  {
    a1[1] = a2;
    unint64_t v4 = a2;
  }
  if (a1[2] < a2) {
    sub_19E37DCB8((uint64_t)a1, a2);
  }
  if (a2 > v4)
  {
    bzero((void *)(*a1 + 4 * v4), 4 * (a2 - v4));
    a1[1] = a2;
  }
}

void sub_19E37DCB8(uint64_t a1, unint64_t a2)
{
  if (a2 < 2 * *(void *)(a1 + 16))
  {
    uint64_t v2 = 1;
    do
    {
      unint64_t v3 = v2;
      v2 *= 2;
    }
    while (v3 < a2);
  }
  operator new[]();
}

void sub_19E37DDF4(void (**a1)(unint64_t, uint64_t), unint64_t *a2, uint64_t *a3)
{
  sub_19E37ECA4(a3);
  if (*a2)
  {
    unint64_t v6 = 0;
    do
    {
      unint64_t v7 = a2[2];
      uint64_t v8 = *(void *)(a2[1] + 8 * v6);
      if (v7)
      {
        unint64_t v9 = *(void *)(v7 + 8 * v6);
      }
      else
      {
        while (*(unsigned __int8 *)(v8 + v7++))
          ;
        unint64_t v9 = v7 - 1;
      }
      unint64_t v11 = a2[3];
      if (v11) {
        int v12 = *(_DWORD *)(v11 + 4 * v6);
      }
      else {
        int v12 = v6;
      }
      sub_19E37ED78(a3, v8, v9, v12);
      ++v6;
      if (*a1) {
        (*a1)(v6, *a2 + 1);
      }
    }
    while (v6 < *a2);
  }
  sub_19E37F1B8((uint64_t)a3, 0);
  uint64_t v13 = *a3;
  char v14 = *(unsigned char *)(*a3 + 8);
  int v15 = *(_DWORD *)*a3;
  if (v14) {
    int v16 = (2 * *(unsigned __int8 *)(v13 + 9)) | (4 * v15);
  }
  else {
    int v16 = 2 * v15;
  }
  *(_DWORD *)a3[3] = v16 | *(unsigned __int8 *)(v13 + 10);
  *(unsigned char *)a3[6] = v14;
  sub_19E37EA84(a3);
  sub_19E37E520(a3 + 15);
  sub_19E37E520(a3 + 18);
  sub_19E37E520(a3 + 21);
  sub_19E37F610();
}

void sub_19E37DF1C(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 32);
  uint64_t v3 = 1;
  do
  {
    unint64_t v4 = v3;
    v3 *= 2;
  }
  while (v4 < v2);
  if (*(void *)(a1 + 24) < v4) {
    sub_19E37DCB8(a1 + 8, v4);
  }
  operator new[]();
}

void sub_19E37E23C(uint64_t a1, unint64_t *a2)
{
  unint64_t v2 = *a2;
  uint64_t v3 = 1;
  do
  {
    unint64_t v4 = v3;
    v3 *= 2;
  }
  while (v4 < v2);
  if (*(void *)(a1 + 24) < v4) {
    sub_19E37DCB8(a1 + 8, v4);
  }
  operator new[]();
}

uint64_t *sub_19E37E4E4(uint64_t *a1)
{
  sub_19E37E520(a1);
  return sub_19E37E708(a1);
}

uint64_t sub_19E37E520(uint64_t *a1)
{
  sub_19E37E56C((uint64_t)a1, 0);
  uint64_t result = *a1;
  if (*a1)
  {
    uint64_t result = MEMORY[0x19F3BDCC0](result, 0x1000C8077774924);
    *a1 = 0;
  }
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

uint64_t sub_19E37E56C(uint64_t result, unint64_t a2)
{
  unint64_t v2 = *(void *)(result + 8);
  if (v2 > a2)
  {
    *(void *)(result + 8) = a2;
    unint64_t v2 = a2;
  }
  if (*(void *)(result + 16) < a2) {
    sub_19E37E5CC(result, a2);
  }
  if (v2 < a2) {
    *(void *)(result + 8) = a2;
  }
  return result;
}

void sub_19E37E5CC(uint64_t a1, unint64_t a2)
{
  if (a2 < 2 * *(void *)(a1 + 16))
  {
    uint64_t v2 = 1;
    do
    {
      unint64_t v3 = v2;
      v2 *= 2;
    }
    while (v3 < a2);
  }
  operator new[]();
}

uint64_t *sub_19E37E708(uint64_t *a1)
{
  if (*a1)
  {
    MEMORY[0x19F3BDCC0](*a1, 0x1000C8077774924);
    *a1 = 0;
  }
  return a1;
}

uint64_t *sub_19E37E754(uint64_t *a1)
{
  sub_19E37E7B0(a1);
  uint64_t v2 = a1[3];
  if (v2)
  {
    MEMORY[0x19F3BDCC0](v2, 0x1000C8052888210);
    a1[3] = 0;
  }
  return sub_19E37E708(a1);
}

uint64_t sub_19E37E7B0(uint64_t *a1)
{
  sub_19E37E520(a1);
  uint64_t result = a1[3];
  if (result)
  {
    uint64_t result = MEMORY[0x19F3BDCC0](result, 0x1000C8052888210);
    a1[3] = 0;
  }
  return result;
}

uint64_t *sub_19E37E7F4(uint64_t *a1)
{
  if (*a1)
  {
    MEMORY[0x19F3BDCC0](*a1, 0x1000C8077774924);
    *a1 = 0;
  }
  return a1;
}

uint64_t sub_19E37E840(uint64_t *a1)
{
  sub_19E37E88C(a1, 0);
  uint64_t result = *a1;
  if (*a1)
  {
    uint64_t result = MEMORY[0x19F3BDCC0](result, 0x1000C8077774924);
    *a1 = 0;
  }
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

void sub_19E37E88C(void *a1, unint64_t a2)
{
  unint64_t v4 = a1[1];
  if (v4 > a2)
  {
    a1[1] = a2;
    unint64_t v4 = a2;
  }
  if (a1[2] < a2) {
    sub_19E37E8FC((uint64_t)a1, a2);
  }
  if (a2 > v4)
  {
    bzero((void *)(*a1 + 4 * v4), 4 * (a2 - v4));
    a1[1] = a2;
  }
}

void sub_19E37E8FC(uint64_t a1, unint64_t a2)
{
  if (a2 < 2 * *(void *)(a1 + 16))
  {
    uint64_t v2 = 1;
    do
    {
      unint64_t v3 = v2;
      v2 *= 2;
    }
    while (v3 < a2);
  }
  operator new[]();
}

uint64_t *sub_19E37EA38(uint64_t *a1)
{
  if (*a1)
  {
    MEMORY[0x19F3BDCC0](*a1, 0x1000C8077774924);
    *a1 = 0;
  }
  return a1;
}

uint64_t sub_19E37EA84(uint64_t *a1)
{
  sub_19E37EAD0(a1, 0);
  uint64_t result = *a1;
  if (*a1)
  {
    uint64_t result = MEMORY[0x19F3BDCC0](result, 0x1000C8077774924);
    *a1 = 0;
  }
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

void *sub_19E37EAD0(void *result, unint64_t a2)
{
  unint64_t v2 = result[1];
  if (v2 > a2)
  {
    result[1] = a2;
    unint64_t v2 = a2;
  }
  if (result[2] < a2) {
    sub_19E37EB54((uint64_t)result, a2);
  }
  for (; v2 < a2; unint64_t v2 = result[1])
  {
    result[1] = v2 + 1;
    uint64_t v3 = *result + 12 * v2;
    *(_DWORD *)(v3 + 7) = 0;
    *(void *)uint64_t v3 = 0;
  }
  return result;
}

void sub_19E37EB54(uint64_t a1, unint64_t a2)
{
  if (a2 < 2 * *(void *)(a1 + 16))
  {
    uint64_t v2 = 1;
    do
    {
      unint64_t v3 = v2;
      v2 *= 2;
    }
    while (v3 < a2);
  }
  operator new[]();
}

void *sub_19E37ECA4(uint64_t *a1)
{
  int v7 = 0;
  sub_19E37EFE8(a1 + 15, 0x400uLL, &v7);
  uint64_t v2 = a1[22];
  if (v2)
  {
    uint64_t v3 = *a1 + 12 * *(unsigned int *)(a1[21] + 4 * v2 - 4);
    *(_DWORD *)(v3 + 7) = 0;
    *(void *)uint64_t v3 = 0;
    --a1[22];
  }
  else
  {
    sub_19E37F070(a1);
  }
  sub_19E37F0C8(a1 + 9);
  sub_19E37F118(a1 + 3);
  uint64_t v4 = a1[7];
  if (v4 == a1[8]) {
    sub_19E37DA20((uint64_t)(a1 + 6), v4 + 1);
  }
  a1[7] = v4 + 1;
  a1[24] = 1;
  *(unsigned char *)(*a1 + 8) = -1;
  int v6 = 0;
  return sub_19E37F164(a1 + 18, &v6);
}

void *sub_19E37ED78(void *result, uint64_t a2, unint64_t a3, int a4)
{
  if (a4 < 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    uint64_t v23 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1106: exception: failed to"
          " insert key: negative value";
    goto LABEL_27;
  }
  if (!a3)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    uint64_t v23 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1108: exception: failed to"
          " insert key: zero-length key";
LABEL_27:
    void *exception = &unk_1EF0BD438;
    exception[1] = v23;
    __cxa_throw(exception, (struct type_info *)&unk_1EF0B7568, (void (*)(void *))std::exception::~exception);
  }
  int v5 = a4;
  int v7 = result;
  unint64_t v8 = 0;
  unsigned int v9 = 0;
  uint64_t v10 = *result;
  while (1)
  {
    unsigned int v11 = *(_DWORD *)(v10 + 12 * v9);
    if (!v11) {
      goto LABEL_12;
    }
    unsigned int v12 = *(unsigned __int8 *)(a2 + v8);
    if (v8 < a3 && !*(unsigned char *)(a2 + v8))
    {
      exception = __cxa_allocate_exception(0x10uLL);
      uint64_t v23 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1122: exception: failed "
            "to insert key: invalid null character";
      goto LABEL_27;
    }
    unsigned int v13 = *(unsigned __int8 *)(v10 + 12 * v11 + 8);
    if (v12 < v13)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      uint64_t v23 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1127: exception: failed "
            "to insert key: wrong key order";
      goto LABEL_27;
    }
    if (v12 > v13) {
      break;
    }
    ++v8;
    unsigned int v9 = *(_DWORD *)(v10 + 12 * v9);
    if (v8 > a3) {
      return result;
    }
  }
  *(unsigned char *)(v10 + 12 * v11 + 10) = 1;
  uint64_t result = (void *)sub_19E37F1B8((uint64_t)result, v11);
LABEL_12:
  if (v8 <= a3)
  {
    int v24 = v5;
    do
    {
      if (v8 >= a3) {
        char v14 = 0;
      }
      else {
        char v14 = *(unsigned char *)(a2 + v8);
      }
      unsigned int v25 = 0;
      uint64_t v15 = v7[22];
      if (v15)
      {
        unsigned int v16 = *(_DWORD *)(v7[21] + 4 * v15 - 4);
        uint64_t v17 = *v7 + 12 * v16;
        *(_DWORD *)(v17 + 7) = 0;
        *(void *)uint64_t v17 = 0;
        --v7[22];
      }
      else
      {
        unsigned int v16 = *((_DWORD *)v7 + 2);
        sub_19E37F070(v7);
      }
      unsigned int v25 = v16;
      uint64_t v18 = *v7;
      uint64_t v19 = (int *)(*v7 + 12 * v9);
      int v20 = *v19;
      if (!*v19) {
        *(unsigned char *)(v18 + 12 * v16 + 9) = 1;
      }
      *(_DWORD *)(v18 + 12 * v16 + 4) = v20;
      unsigned int v21 = v25;
      *(unsigned char *)(v18 + 12 * v25 + 8) = v14;
      *uint64_t v19 = v21;
      uint64_t result = sub_19E37F164(v7 + 18, &v25);
      unsigned int v9 = v25;
      ++v8;
    }
    while (v8 <= a3);
    int v5 = v24;
  }
  *(_DWORD *)(*v7 + 12 * v9) = v5;
  return result;
}

uint64_t *sub_19E37EFE8(uint64_t *result, unint64_t a2, _DWORD *a3)
{
  unint64_t v3 = result[1];
  if (v3 > a2)
  {
    result[1] = a2;
    unint64_t v3 = a2;
  }
  if (result[2] < a2) {
    sub_19E37E5CC((uint64_t)result, a2);
  }
  if (v3 < a2)
  {
    uint64_t v4 = *result;
    do
      *(_DWORD *)(v4 + 4 * v3++) = *a3;
    while (a2 != v3);
    result[1] = a2;
  }
  return result;
}

void *sub_19E37F070(void *result)
{
  uint64_t v1 = result[1];
  if (v1 == result[2]) {
    sub_19E37EB54((uint64_t)result, v1 + 1);
  }
  result[1] = v1 + 1;
  uint64_t v2 = *result + 12 * v1;
  *(_DWORD *)(v2 + 7) = 0;
  *(void *)uint64_t v2 = 0;
  return result;
}

void *sub_19E37F0C8(void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = result[5];
  if ((v2 & 0x1F) == 0)
  {
    int v3 = 0;
    uint64_t result = sub_19E37F164(result, &v3);
    uint64_t v2 = v1[5];
  }
  v1[5] = v2 + 1;
  return result;
}

void *sub_19E37F118(void *result)
{
  uint64_t v1 = result[1];
  if (v1 == result[2]) {
    sub_19E37E8FC((uint64_t)result, v1 + 1);
  }
  result[1] = v1 + 1;
  *(_DWORD *)(*result + 4 * v1) = 0;
  return result;
}

void *sub_19E37F164(void *result, _DWORD *a2)
{
  uint64_t v2 = result[1];
  if (v2 == result[2]) {
    sub_19E37E5CC((uint64_t)result, v2 + 1);
  }
  result[1] = v2 + 1;
  *(_DWORD *)(*result + 4 * v2) = *a2;
  return result;
}

uint64_t sub_19E37F1B8(uint64_t result, int a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(void *)(result + 152) - 1;
  unsigned int v4 = *(_DWORD *)(*(void *)(result + 144) + 4 * v3);
  if (v4 != a2)
  {
    uint64_t v35 = (uint64_t *)(result + 120);
    int v5 = (void *)(result + 24);
    int v6 = (void *)(result + 72);
    while (1)
    {
      *(void *)(v2 + 152) = v3;
      unint64_t v7 = *(void *)(v2 + 128);
      if (*(void *)(v2 + 192) >= v7 - (v7 >> 2))
      {
        unint64_t v8 = 2 * v7;
        sub_19E37E520(v35);
        int v38 = 0;
        sub_19E37EFE8(v35, v8, &v38);
        unint64_t v9 = *(void *)(v2 + 32);
        if (v9 >= 2)
        {
          uint64_t v10 = *(void *)(v2 + 48);
          for (uint64_t i = 1; i != v9; ++i)
          {
            if (!*(unsigned char *)(v10 + i) || (*(_DWORD *)(*v5 + 4 * i) & 2) != 0)
            {
              unsigned int v12 = 0;
              if (i)
              {
                unsigned int v13 = i;
                do
                {
                  int v14 = *(_DWORD *)(*v5 + 4 * v13);
                  unsigned int v15 = (v14 ^ ~(*(unsigned __int8 *)(v10 + v13) << 24)) + (v14 << 15);
                  unsigned int v16 = 2057 * ((5 * (v15 ^ (v15 >> 12))) ^ ((5 * (v15 ^ (v15 >> 12))) >> 4));
                  v12 ^= HIWORD(v16) ^ v16;
                  BOOL v17 = __CFADD__(v13++, 1);
                }
                while (!v17 && (v14 & 1) != 0);
              }
              uint64_t v18 = *(void *)(v2 + 120);
              do
              {
                unint64_t v19 = (unint64_t)v12 % *(void *)(v2 + 128);
                unsigned int v12 = v19 + 1;
              }
              while (*(_DWORD *)(v18 + 4 * v19));
              *(_DWORD *)(v18 + 4 * v19) = i;
            }
          }
        }
      }
      int v20 = 0;
      if (v4)
      {
        unsigned int v21 = v4;
        do
        {
          ++v20;
          unsigned int v21 = *(_DWORD *)(*(void *)v2 + 12 * v21 + 4);
        }
        while (v21);
      }
      unsigned int v37 = 0;
      uint64_t result = sub_19E37F4A4((uint64_t *)v2, v4, &v37);
      if (result)
      {
        unsigned int v22 = result;
        *(_DWORD *)(*v6 + 4 * (result >> 5)) |= 1 << result;
        if (v4) {
          goto LABEL_22;
        }
        goto LABEL_23;
      }
      if (!v20) {
        break;
      }
      do
      {
        sub_19E37F0C8((void *)(v2 + 72));
        uint64_t result = (uint64_t)sub_19E37F118((void *)(v2 + 24));
        uint64_t v25 = *(void *)(v2 + 56);
        if (v25 == *(void *)(v2 + 64)) {
          sub_19E37DA20(v2 + 48, v25 + 1);
        }
        *(void *)(v2 + 56) = v25 + 1;
        --v20;
      }
      while (v20);
      unsigned int v26 = *(_DWORD *)(v2 + 112) - 1;
      if (v4) {
        goto LABEL_32;
      }
LABEL_37:
      unsigned int v22 = v26 + 1;
      *(_DWORD *)(*(void *)(v2 + 120) + 4 * v37) = v26 + 1;
      ++*(void *)(v2 + 192);
      if (v4)
      {
        do
        {
LABEL_22:
          unsigned int v23 = *(_DWORD *)(*(void *)v2 + 12 * v4 + 4);
          unsigned int v39 = v4;
          uint64_t result = (uint64_t)sub_19E37F164((void *)(v2 + 168), &v39);
          unsigned int v4 = v23;
        }
        while (v23);
      }
LABEL_23:
      uint64_t v24 = *(void *)(v2 + 144);
      uint64_t v3 = *(void *)(v2 + 152) - 1;
      *(_DWORD *)(*(void *)v2 + 12 * *(unsigned int *)(v24 + 4 * v3)) = v22;
      unsigned int v4 = *(_DWORD *)(v24 + 4 * v3);
      if (v4 == a2) {
        goto LABEL_2;
      }
    }
    unsigned int v26 = 0;
    if (!v4) {
      goto LABEL_37;
    }
LABEL_32:
    uint64_t v27 = *(void *)v2;
    unsigned int v28 = v4;
    do
    {
      uint64_t v29 = v28;
      uint64_t v30 = v27 + 12 * v28;
      int v31 = *(unsigned __int8 *)(v30 + 8);
      int v32 = *(_DWORD *)v30;
      if (v31) {
        int v33 = (2 * *(unsigned __int8 *)(v27 + 12 * v29 + 9)) | (4 * v32);
      }
      else {
        int v33 = 2 * v32;
      }
      uint64_t v34 = 3 * v29;
      *(_DWORD *)(*(void *)(v2 + 24) + 4 * v26) = v33 | *(unsigned __int8 *)(v27 + 4 * v34 + 10);
      *(unsigned char *)(*(void *)(v2 + 48) + v26--) = v31;
      uint64_t v27 = *(void *)v2;
      unsigned int v28 = *(_DWORD *)(*(void *)v2 + 4 * v34 + 4);
    }
    while (v28);
    goto LABEL_37;
  }
LABEL_2:
  *(void *)(v2 + 152) = v3;
  return result;
}

uint64_t sub_19E37F4A4(uint64_t *a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v3 = a2;
  if (a2)
  {
    LODWORD(v4) = 0;
    uint64_t v5 = *a1;
    uint64_t v6 = a2;
    do
    {
      unint64_t v7 = (int *)(v5 + 12 * v6);
      int v8 = *((unsigned __int8 *)v7 + 8);
      int v9 = *v7;
      if (v8) {
        int v10 = (2 * *(unsigned __int8 *)(v5 + 12 * v6 + 9)) | (4 * v9);
      }
      else {
        int v10 = 2 * v9;
      }
      uint64_t v11 = v5 + 12 * v6;
      unsigned int v12 = ((v10 | *(unsigned __int8 *)(v11 + 10)) ^ ~(v8 << 24)) + ((v10 | *(unsigned __int8 *)(v11 + 10)) << 15);
      unsigned int v13 = 2057 * ((5 * (v12 ^ (v12 >> 12))) ^ ((5 * (v12 ^ (v12 >> 12))) >> 4));
      unint64_t v4 = v4 ^ HIWORD(v13) ^ v13;
      uint64_t v6 = *(unsigned int *)(v11 + 4);
    }
    while (v6);
  }
  else
  {
    unint64_t v4 = 0;
  }
  uint64_t v15 = a1[15];
  unint64_t v14 = a1[16];
  unint64_t v16 = v4 % v14;
  *a3 = v4 % v14;
  uint64_t v17 = *(unsigned int *)(v15 + 4 * (v4 % v14));
  if (v17)
  {
    uint64_t v18 = *a1;
    unint64_t v19 = (unsigned int *)(*a1 + 12 * a2 + 4);
    uint64_t v20 = a1[3];
    do
    {
      uint64_t v21 = *v19;
      unsigned int v22 = v17;
      if (v21)
      {
        unsigned int v22 = v17;
        while ((*(_DWORD *)(v20 + 4 * v22) & 1) != 0)
        {
          ++v22;
          LODWORD(v21) = *(_DWORD *)(v18 + 12 * v21 + 4);
          if (!v21) {
            goto LABEL_15;
          }
        }
      }
      else
      {
LABEL_15:
        if ((*(_DWORD *)(v20 + 4 * v22) & 1) == 0)
        {
          if (!v3) {
            return v17;
          }
          uint64_t v23 = v3;
          while (1)
          {
            uint64_t v24 = (int *)(v18 + 12 * v23);
            int v25 = *((unsigned __int8 *)v24 + 8);
            int v26 = *v24;
            int v27 = v25 ? (2 * *(unsigned __int8 *)(v18 + 12 * v23 + 9)) | (4 * v26) : 2 * v26;
            if ((v27 | *(unsigned __int8 *)(v18 + 12 * v23 + 10)) != *(_DWORD *)(v20 + 4 * v22)
              || v25 != *(unsigned __int8 *)(a1[6] + v22))
            {
              break;
            }
            uint64_t v23 = *(unsigned int *)(v18 + 12 * v23 + 4);
            --v22;
            if (!v23) {
              return v17;
            }
          }
        }
      }
      unint64_t v16 = (v16 + 1) % v14;
      *a3 = v16;
      uint64_t v17 = *(unsigned int *)(v15 + 4 * v16);
    }
    while (v17);
  }
  return v17;
}

void sub_19E37F610()
{
}

unsigned int *sub_19E37F754(unsigned int *result, unsigned int a2)
{
  if (a2 >> 29)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    void *exception = &unk_1EF0BD438;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1339: exception: "
                   "failed to modify unit: too large offset";
    __cxa_throw(exception, (struct type_info *)&unk_1EF0B7568, (void (*)(void *))std::exception::~exception);
  }
  int v2 = (4 * a2) | 0x200;
  if (a2 < 0x200000) {
    int v2 = a2 << 10;
  }
  *uint64_t result = *result & 0x800001FF | v2;
  return result;
}

unsigned int *sub_19E37F7DC(uint64_t a1, void *a2, unsigned int a3, unsigned int a4)
{
  int v8 = a2 + 9;
  unint64_t v9 = *(unsigned int *)(a2[3] + 4 * a3);
  unint64_t v10 = v9 >> 2;
  unint64_t v11 = v9 >> 7;
  int v12 = 1 << (v9 >> 2);
  if ((v12 & *(_DWORD *)(a2[9] + 4 * (v9 >> 7))) != 0
    && (int v13 = *(_DWORD *)(*(void *)(a1 + 64) + 4 * (sub_19E37FE18(a2 + 9, v10) - 1))) != 0
    && ((unsigned int v14 = v13 ^ a4, ((v13 ^ a4) & 0x1FE00000) != 0) ? (v15 = (v13 ^ a4) == 0) : (v15 = 1), v15))
  {
    if (*(unsigned char *)(a2[6] + v10))
    {
      uint64_t v16 = *(void *)(a1 + 8);
      uint64_t v17 = a4;
    }
    else
    {
      uint64_t v17 = a4;
      uint64_t v16 = *(void *)(a1 + 8);
      *(_DWORD *)(v16 + 4 * a4) |= 0x100u;
    }
    return sub_19E37F754((unsigned int *)(v16 + 4 * v17), v14);
  }
  else
  {
    uint64_t result = (unsigned int *)sub_19E37FB68(a1, (uint64_t)a2, a3, a4);
    int v19 = (int)result;
    if ((*(_DWORD *)(a2[9] + 4 * v11) & v12) != 0)
    {
      uint64_t result = (unsigned int *)sub_19E37FE18(v8, v10);
      *(_DWORD *)(*(void *)(a1 + 64) + 4 * (result - 1)) = v19;
    }
    do
    {
      if (*(unsigned char *)(a2[6] + v10)) {
        uint64_t result = (unsigned int *)sub_19E37F7DC(a1, a2, v10, v19 ^ *(unsigned __int8 *)(a2[6] + v10));
      }
      if (v10 == -1) {
        break;
      }
      int v20 = *(_DWORD *)(a2[3] + 4 * v10);
      LODWORD(v10) = v10 + 1;
    }
    while ((v20 & 1) != 0);
  }
  return result;
}

void sub_19E37F954(uint64_t a1)
{
  int v2 = (void *)(a1 + 8);
  unint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = (v3 + 256);
  unsigned int v5 = (v3 >> 8) - 16;
  if (v5 >= 0xFFFFFFEF)
  {
    sub_19E37DC48((void *)(a1 + 8), (v3 + 256));
  }
  else
  {
    int v6 = 0;
    unint64_t v7 = v5 << 8;
    uint64_t v8 = *(void *)(a1 + 32);
    while (1)
    {
      char v9 = v7 + v6;
      if (!*(unsigned char *)(v8 + 12 * ((v7 + v6) & 0xFFF) + 9)) {
        break;
      }
      if (++v6 == 256)
      {
        char v9 = 0;
        break;
      }
    }
    uint64_t v10 = 0;
    uint64_t v11 = 3072 * ((v3 >> 8) & 0xF);
    do
    {
      if (!*(unsigned char *)(v8 + v11 + v10 + 8))
      {
        if (*(void *)(a1 + 16) <= v7)
        {
          sub_19E37F954(a1);
          uint64_t v8 = *(void *)(a1 + 32);
        }
        int v12 = (int *)(v8 + v11 + v10);
        uint64_t v13 = v12[1];
        if (v7 == *(_DWORD *)(a1 + 72))
        {
          *(_DWORD *)(a1 + 72) = v13;
          if (v7 == v13) {
            *(_DWORD *)(a1 + 72) = *(void *)(a1 + 16);
          }
        }
        int v14 = *v12;
        *(_DWORD *)(v8 + 12 * (*v12 & 0xFFF) + 4) = v13;
        *(_DWORD *)(v8 + 12 * (v12[1] & 0xFFF)) = v14;
        *((unsigned char *)v12 + 8) = 1;
        *(unsigned char *)(*v2 + 4 * v7) = v9 ^ v7;
      }
      ++v7;
      v10 += 12;
    }
    while (v10 != 3072);
    sub_19E37DC48(v2, (v3 + 256));
    uint64_t v15 = v3;
    if (v3 < (unint64_t)v4)
    {
      uint64_t v16 = *(void *)(a1 + 32);
      do
        *(_WORD *)(v16 + 12 * (v15++ & 0xFFF) + 8) = 0;
      while (v4 != v15);
    }
  }
  uint64_t v17 = *(void *)(a1 + 32);
  if ((int)v3 + 1 < v4)
  {
    for (int i = 0; i != 255; ++i)
    {
      int v19 = v3 + i;
      *(_DWORD *)(v17 + 12 * (v19 & 0xFFF) + 4) = v19 + 1;
      *(_DWORD *)(v17 + 12 * ((v19 + 1) & 0xFFF)) = v19;
    }
  }
  uint64_t v20 = 12 * (v3 & 0xFFF);
  *(_DWORD *)(v17 + v20) = v3 + 255;
  int v21 = *(_DWORD *)(a1 + 72);
  uint64_t v22 = 12 * (v21 & 0xFFF);
  *(_DWORD *)(v17 + v20) = *(_DWORD *)(v17 + v22);
  LOWORD(v20) = *(_DWORD *)(v17 + v22);
  *(_DWORD *)(v17 + 12 * ((v3 + 255) & 0xFFF) + 4) = v21;
  *(_DWORD *)(v17 + 12 * (v20 & 0xFFF) + 4) = v3;
  *(_DWORD *)(v17 + v22) = v3 + 255;
}

uint64_t sub_19E37FB68(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  uint64_t v8 = (void *)(a1 + 40);
  sub_19E37D9C0(a1 + 40, 0);
  unsigned int v9 = *(_DWORD *)(*(void *)(a2 + 24) + 4 * a3);
  if (v9 >= 4)
  {
    unsigned int v10 = v9 >> 2;
    do
    {
      char v35 = *(unsigned char *)(*(void *)(a2 + 48) + v10);
      sub_19E37FE7C(v8, &v35);
      int v11 = *(_DWORD *)(*(void *)(a2 + 24) + 4 * v10);
      BOOL v13 = __CFADD__(v10++, 1);
    }
    while ((v11 & 1) != 0 && !v13);
  }
  unint64_t v14 = *(unsigned int *)(a1 + 72);
  unint64_t v15 = *(void *)(a1 + 16);
  if (v15 <= v14)
  {
LABEL_20:
    uint64_t v19 = a4 | v15;
  }
  else
  {
    uint64_t v17 = *(void *)(a1 + 32);
    uint64_t v16 = *(unsigned __int8 **)(a1 + 40);
    int v18 = *(_DWORD *)(a1 + 72);
    while (1)
    {
      uint64_t v19 = v18 ^ *v16;
      int v20 = ((unsigned __int16)v18 ^ *v16) & 0xFFF;
      if (!*(unsigned char *)(v17 + 12 * (((unsigned __int16)v18 ^ *v16) & 0xFFF) + 9)
        && (!((v18 ^ *v16) ^ a4) || ((v19 ^ a4) & 0x1FE00000) == 0))
      {
        unint64_t v21 = *(void *)(a1 + 48);
        if (v21 < 2) {
          goto LABEL_21;
        }
        if (!*(unsigned char *)(v17 + 12 * (v20 ^ v16[1]) + 8)) {
          break;
        }
      }
LABEL_19:
      int v18 = *(_DWORD *)(v17 + 12 * (v18 & 0xFFF) + 4);
      if (v18 == v14) {
        goto LABEL_20;
      }
    }
    uint64_t v22 = 2;
    while (v21 != v22)
    {
      if (*(unsigned __int8 *)(v17 + 12 * (v20 ^ v16[v22++]) + 8))
      {
        if (v22 - 1 >= v21) {
          break;
        }
        goto LABEL_19;
      }
    }
  }
LABEL_21:
  sub_19E37F754((unsigned int *)(*(void *)(a1 + 8) + 4 * a4), v19 ^ a4);
  if (*(void *)(a1 + 48))
  {
    unint64_t v24 = 0;
    unsigned int v25 = *(_DWORD *)(*(void *)(a2 + 24) + 4 * a3) >> 2;
    do
    {
      unint64_t v26 = v19 ^ *(unsigned __int8 *)(*(void *)(a1 + 40) + v24);
      if (*(void *)(a1 + 16) <= v26) {
        sub_19E37F954(a1);
      }
      if (*(_DWORD *)(a1 + 72) == v26)
      {
        unsigned int v27 = v26 & 0xFFF;
        uint64_t v28 = *(void *)(a1 + 32);
        int v29 = *(_DWORD *)(v28 + 12 * (v26 & 0xFFF) + 4);
        *(_DWORD *)(a1 + 72) = v29;
        if (v29 == v26)
        {
          *(_DWORD *)(a1 + 72) = *(void *)(a1 + 16);
          int v29 = v26;
        }
      }
      else
      {
        uint64_t v28 = *(void *)(a1 + 32);
        unsigned int v27 = v26 & 0xFFF;
        int v29 = *(_DWORD *)(v28 + 12 * (v26 & 0xFFF) + 4);
      }
      uint64_t v30 = (int *)(v28 + 12 * v27);
      int v31 = *v30;
      *(_DWORD *)(v28 + 12 * (*v30 & 0xFFF) + 4) = v29;
      *(_DWORD *)(v28 + 12 * (v30[1] & 0xFFF)) = v31;
      *((unsigned char *)v30 + 8) = 1;
      uint64_t v32 = *(void *)(a1 + 8);
      if (*(unsigned char *)(*(void *)(a2 + 48) + v25))
      {
        *(unsigned char *)(v32 + 4 * v26) = *(unsigned char *)(*v8 + v24);
        unsigned int v33 = *(_DWORD *)(*(void *)(a2 + 24) + 4 * v25);
      }
      else
      {
        *(_DWORD *)(v32 + 4 * a4) |= 0x100u;
        unsigned int v33 = *(_DWORD *)(*(void *)(a2 + 24) + 4 * v25);
        *(_DWORD *)(v32 + 4 * v26) = (v33 >> 1) | 0x80000000;
      }
      unsigned int v25 = ((int)(v33 << 31) >> 31) & (v25 + 1);
      ++v24;
    }
    while (v24 < *(void *)(a1 + 48));
  }
  else
  {
    uint64_t v28 = *(void *)(a1 + 32);
  }
  *(unsigned char *)(v28 + 12 * (v19 & 0xFFF) + 9) = 1;
  return v19;
}

uint64_t sub_19E37FE18(void *a1, unint64_t a2)
{
  uint64_t v2 = (a2 >> 3) & 0x1FFFFFFFFFFFFFFCLL;
  int v3 = *(_DWORD *)(a1[3] + v2);
  LODWORD(v2) = *(_DWORD *)(*a1 + v2) & (0xFFFFFFFF >> ~(_BYTE)a2);
  LODWORD(v2) = ((((unint64_t)(((v2 >> 1) & 0x55555555) + (v2 & 0x55555555)) >> 2) & 0x33333333)
               + ((((v2 >> 1) & 0x55555555) + (v2 & 0x55555555)) & 0x33333333)
               + (((((unint64_t)(((v2 >> 1) & 0x55555555) + (v2 & 0x55555555)) >> 2) & 0x33333333)
                 + ((((v2 >> 1) & 0x55555555) + (v2 & 0x55555555)) & 0x33333333)) >> 4)) & 0xF0F0F0F;
  return (((_BYTE)v2 + BYTE1(v2) + ((v2 + (v2 >> 8)) >> 16)) & 0x3Fu) + v3;
}

void *sub_19E37FE7C(void *result, unsigned char *a2)
{
  uint64_t v2 = result[1];
  if (v2 == result[2]) {
    sub_19E37DA20((uint64_t)result, v2 + 1);
  }
  result[1] = v2 + 1;
  *(unsigned char *)(*result + v2) = *a2;
  return result;
}

uint64_t *sub_19E37FED0(uint64_t *a1)
{
  sub_19E37EA84(a1);
  sub_19E37E840(a1 + 3);
  sub_19E37D974(a1 + 6);
  sub_19E37E7B0(a1 + 9);
  sub_19E37E520(a1 + 15);
  sub_19E37E520(a1 + 18);
  sub_19E37E520(a1 + 21);
  a1[24] = 0;
  sub_19E37E4E4(a1 + 21);
  sub_19E37E4E4(a1 + 18);
  sub_19E37E708(a1 + 15);
  sub_19E37E754(a1 + 9);
  sub_19E37D928(a1 + 6);
  sub_19E37E7F4(a1 + 3);
  return sub_19E37EA38(a1);
}

uint64_t sub_19E37FFA0(uint64_t a1, void *a2, unint64_t a3, unint64_t a4, unint64_t a5, unsigned int a6)
{
  while (1)
  {
    uint64_t result = sub_19E380108(a1, a2, a3, a4, a5, a6);
    int v12 = result;
    if (a3 < a4)
    {
      uint64_t v13 = a2[2];
      while (v13 && *(void *)(v13 + 8 * a3) <= a5 || !*(unsigned char *)(*(void *)(a2[1] + 8 * a3) + a5))
      {
        if (a4 == ++a3) {
          return result;
        }
      }
    }
    if (a3 == a4) {
      break;
    }
    uint64_t v14 = a2[2];
    if (v14 && *(void *)(v14 + 8 * a3) <= a5) {
      unsigned int v15 = 0;
    }
    else {
      unsigned int v15 = *(unsigned __int8 *)(*(void *)(a2[1] + 8 * a3) + a5);
    }
    unint64_t v16 = a3 + 1;
    if (a3 + 1 < a4)
    {
      do
      {
        if (v14 && *(void *)(v14 + 8 * v16) <= a5) {
          int v17 = 0;
        }
        else {
          int v17 = *(unsigned __int8 *)(*(void *)(a2[1] + 8 * v16) + a5);
        }
        if (v17 != v15)
        {
          sub_19E37FFA0(a1, a2, a3, v16, a5 + 1, v12 ^ v15);
          uint64_t v14 = a2[2];
          if (v14 && *(void *)(v14 + 8 * v16) <= a5) {
            unsigned int v15 = 0;
          }
          else {
            unsigned int v15 = *(unsigned __int8 *)(*(void *)(a2[1] + 8 * v16) + a5);
          }
          a3 = v16;
        }
        ++v16;
      }
      while (a4 != v16);
    }
    a6 = v12 ^ v15;
    ++a5;
  }
  return result;
}

uint64_t sub_19E380108(uint64_t a1, void *a2, unint64_t a3, unint64_t a4, unint64_t a5, unsigned int a6)
{
  int v12 = (uint64_t *)(a1 + 40);
  sub_19E37D9C0(a1 + 40, 0);
  int v13 = -1;
  if (a3 < a4)
  {
    do
    {
      unsigned __int8 v41 = 0;
      uint64_t v14 = a2[2];
      if (v14)
      {
        if (*(void *)(v14 + 8 * a3) > a5)
        {
          unsigned __int8 v41 = *(unsigned char *)(*(void *)(a2[1] + 8 * a3) + a5);
          if (!v41)
          {
            exception = __cxa_allocate_exception(0x10uLL);
            unint64_t v40 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1675: exception: f"
                  "ailed to build double-array: invalid null character";
            goto LABEL_52;
          }
          goto LABEL_17;
        }
      }
      else
      {
        unsigned __int8 v41 = *(unsigned char *)(*(void *)(a2[1] + 8 * a3) + a5);
        if (v41) {
          goto LABEL_17;
        }
      }
      uint64_t v15 = a2[3];
      if (v15)
      {
        if ((*(_DWORD *)(v15 + 4 * a3) & 0x80000000) != 0) {
          goto LABEL_51;
        }
      }
      else if ((a3 & 0x80000000) != 0)
      {
LABEL_51:
        exception = __cxa_allocate_exception(0x10uLL);
        unint64_t v40 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1677: exception: faile"
              "d to build double-array: negative value";
LABEL_52:
        void *exception = &unk_1EF0BD438;
        exception[1] = v40;
        __cxa_throw(exception, (struct type_info *)&unk_1EF0B7568, (void (*)(void *))std::exception::~exception);
      }
      if (v13 == -1)
      {
        if (v15) {
          int v13 = *(_DWORD *)(v15 + 4 * a3);
        }
        else {
          int v13 = a3;
        }
      }
      if (*(void *)a1) {
        (*(void (**)(unint64_t, uint64_t))a1)(a3 + 1, *a2 + 1);
      }
LABEL_17:
      uint64_t v16 = *(void *)(a1 + 48);
      if (!v16) {
        goto LABEL_21;
      }
      unsigned int v17 = *(unsigned __int8 *)(v16 + *v12 - 1);
      if (v41 != v17)
      {
        if (v41 < v17)
        {
          exception = __cxa_allocate_exception(0x10uLL);
          unint64_t v40 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1692: exception: fai"
                "led to build double-array: wrong key order";
          goto LABEL_52;
        }
LABEL_21:
        sub_19E37FE7C(v12, &v41);
      }
      ++a3;
    }
    while (a4 != a3);
  }
  unint64_t v18 = *(unsigned int *)(a1 + 72);
  unint64_t v19 = *(void *)(a1 + 16);
  if (v19 <= v18)
  {
LABEL_35:
    uint64_t v23 = a6 | v19;
  }
  else
  {
    uint64_t v21 = *(void *)(a1 + 32);
    int v20 = *(unsigned __int8 **)(a1 + 40);
    int v22 = *(_DWORD *)(a1 + 72);
    while (1)
    {
      uint64_t v23 = v22 ^ *v20;
      int v24 = ((unsigned __int16)v22 ^ *v20) & 0xFFF;
      if (!*(unsigned char *)(v21 + 12 * (((unsigned __int16)v22 ^ *v20) & 0xFFF) + 9)
        && (!((v22 ^ *v20) ^ a6) || ((v23 ^ a6) & 0x1FE00000) == 0))
      {
        unint64_t v25 = *(void *)(a1 + 48);
        if (v25 < 2) {
          goto LABEL_36;
        }
        if (!*(unsigned char *)(v21 + 12 * (v24 ^ v20[1]) + 8)) {
          break;
        }
      }
LABEL_34:
      int v22 = *(_DWORD *)(v21 + 12 * (v22 & 0xFFF) + 4);
      if (v22 == v18) {
        goto LABEL_35;
      }
    }
    uint64_t v26 = 2;
    while (v25 != v26)
    {
      if (*(unsigned __int8 *)(v21 + 12 * (v24 ^ v20[v26++]) + 8))
      {
        if (v26 - 1 >= v25) {
          break;
        }
        goto LABEL_34;
      }
    }
  }
LABEL_36:
  sub_19E37F754((unsigned int *)(*(void *)(a1 + 8) + 4 * a6), v23 ^ a6);
  if (*(void *)(a1 + 48))
  {
    unint64_t v28 = 0;
    unsigned int v29 = v13 | 0x80000000;
    uint64_t v30 = *v12;
    do
    {
      unint64_t v31 = v23 ^ *(unsigned __int8 *)(v30 + v28);
      if (*(void *)(a1 + 16) <= v31) {
        sub_19E37F954(a1);
      }
      if (*(_DWORD *)(a1 + 72) == v31)
      {
        unsigned int v32 = v31 & 0xFFF;
        uint64_t v33 = *(void *)(a1 + 32);
        int v34 = *(_DWORD *)(v33 + 12 * (v31 & 0xFFF) + 4);
        *(_DWORD *)(a1 + 72) = v34;
        if (v34 == v31)
        {
          *(_DWORD *)(a1 + 72) = *(void *)(a1 + 16);
          int v34 = v31;
        }
      }
      else
      {
        uint64_t v33 = *(void *)(a1 + 32);
        unsigned int v32 = v31 & 0xFFF;
        int v34 = *(_DWORD *)(v33 + 12 * (v31 & 0xFFF) + 4);
      }
      char v35 = (int *)(v33 + 12 * v32);
      int v36 = *v35;
      *(_DWORD *)(v33 + 12 * (*v35 & 0xFFF) + 4) = v34;
      *(_DWORD *)(v33 + 12 * (v35[1] & 0xFFF)) = v36;
      *((unsigned char *)v35 + 8) = 1;
      uint64_t v30 = *(void *)(a1 + 40);
      uint64_t v37 = *(void *)(a1 + 8);
      if (*(unsigned char *)(v30 + v28))
      {
        *(unsigned char *)(v37 + 4 * v31) = *(unsigned char *)(v30 + v28);
      }
      else
      {
        *(_DWORD *)(v37 + 4 * a6) |= 0x100u;
        *(_DWORD *)(v37 + 4 * v31) = v29;
      }
      ++v28;
    }
    while (v28 < *(void *)(a1 + 48));
  }
  else
  {
    uint64_t v33 = *(void *)(a1 + 32);
  }
  *(unsigned char *)(v33 + 12 * (v23 & 0xFFF) + 9) = 1;
  return v23;
}

uint64_t sub_19E3804B0(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  sub_19E37DBFC((uint64_t *)(a1 + 8));
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3)
  {
    MEMORY[0x19F3BDCC0](v3, 0x1000C80CBA68D63);
    *(void *)(a1 + 32) = 0;
  }
  sub_19E37D974((uint64_t *)(a1 + 40));
  uint64_t v4 = *(void *)(a1 + 64);
  if (v4)
  {
    MEMORY[0x19F3BDCC0](v4, 0x1000C8052888210);
    *(void *)(a1 + 64) = 0;
  }
  *(_DWORD *)(a1 + 72) = 0;
  sub_19E37D928((uint64_t *)(a1 + 40));
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5)
  {
    MEMORY[0x19F3BDCC0](v5, 0x1000C80CBA68D63);
    *(void *)(a1 + 32) = 0;
  }
  sub_19E37DBB0(v2);
  return a1;
}

void *sub_19E38056C(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_19E3805E4(a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_19E3805C8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_19E3805E4(void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    sub_19E37C7C4();
  }
  uint64_t result = (char *)sub_19E37D6C0((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

uint64_t sub_19E380628(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = &unk_1EF0B8858;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = a2 + 16;
  *(void *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a3 + 245);
  sub_19E3AD4C4((void *)(a1 + 56));
  unint64_t v5 = *(void *)(a2 + 64) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v5 + 23) < 0)
  {
    unint64_t v5 = *(void *)v5;
    unint64_t v6 = *(void *)((*(void *)(a2 + 64) & 0xFFFFFFFFFFFFFFFELL) + 8);
  }
  else
  {
    unint64_t v6 = *(unsigned __int8 *)(v5 + 23);
  }
  sub_19E38070C((uint64_t *)a1, (unsigned int *)v5, v6);
  return a1;
}

void sub_19E3806C0(_Unwind_Exception *a1)
{
  sub_19E3AD4CC(v1);
  uint64_t v4 = *v2;
  uint64_t *v2 = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_19E38070C(uint64_t *result, unsigned int *a2, unint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = result;
    v6[0] = 0;
    v6[1] = 0;
    long long v5 = 0uLL;
    sub_19E380B8C(a2, a3, v6, &v5, &v4);
    sub_19E3AD6EC(v3 + 7, &v4);
    uint64_t result = sub_19E3AD4CC(&v4);
    if (!v3[7]) {
      operator new();
    }
  }
  return result;
}

void sub_19E38086C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E3AD4CC((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E380888(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1EF0B8858;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = a2 + 16;
  *(void *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  sub_19E3AD4C4((void *)(a1 + 56));
  unint64_t v4 = *(void *)(a2 + 64) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v4 + 23) < 0)
  {
    unint64_t v4 = *(void *)v4;
    unint64_t v5 = *(void *)((*(void *)(a2 + 64) & 0xFFFFFFFFFFFFFFFELL) + 8);
  }
  else
  {
    unint64_t v5 = *(unsigned __int8 *)(v4 + 23);
  }
  sub_19E38070C((uint64_t *)a1, (unsigned int *)v4, v5);
  return a1;
}

void sub_19E38091C(_Unwind_Exception *a1)
{
  sub_19E3AD4CC(v1);
  uint64_t v4 = *v2;
  uint64_t *v2 = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_19E38096C(uint64_t *a1, uint64_t a2, _DWORD *a3, unint64_t a4)
{
  *a1 = (uint64_t)&unk_1EF0B8858;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = a2;
  a1[5] = 0;
  *((unsigned char *)a1 + 48) = 0;
  unint64_t v7 = a1 + 7;
  sub_19E3AD4C4(a1 + 7);
  int v11 = 0;
  sub_19E378D88(a3, a4, &v11, &v10);
  sub_19E3AD6EC(v7, &v10);
  sub_19E3AD4CC(&v10);
  (*(void (**)(uint64_t *__return_ptr, uint64_t *))(*a1 + 24))(&v10, a1);
  uint64_t v8 = v10;
  sub_19E3AD4CC(&v10);
  if (!v8)
  {
    *((unsigned char *)a1 + 48) = v11 != 0;
    sub_19E38070C(a1, a3 + 1, a4 - 4);
  }
  return a1;
}

void sub_19E380A74(_Unwind_Exception *a1)
{
  sub_19E3AD4CC(v1);
  uint64_t v4 = *v2;
  uint64_t *v2 = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  _Unwind_Resume(a1);
}

void *sub_19E380ADC(void *a1)
{
  *a1 = &unk_1EF0B8858;
  sub_19E3AD4CC(a1 + 7);
  uint64_t v2 = a1[1];
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_19E380B54(void *a1)
{
  sub_19E380ADC(a1);
  JUMPOUT(0x19F3BDCF0);
}

void *sub_19E380B8C@<X0>(unsigned int *a1@<X0>, unint64_t a2@<X1>, unsigned int **a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  if (a2 < 5 || (unint64_t v7 = (unsigned int *)*a1, a2 <= (unint64_t)v7))
  {
    uint64_t v10 = "Blob for normalization rule is broken.";
    uint64_t v11 = 38;
  }
  else
  {
    if ((unint64_t)(v7 + 1) < a2)
    {
      uint64_t v8 = a1 + 1;
      *a3 = v8;
      a3[1] = v7;
      *a4 = (char *)v7 + (void)v8;
      a4[1] = a2 - (void)v7 - 4;
      return sub_19E3AD4C4(a5);
    }
    uint64_t v10 = "Trie data size exceeds the input blob size.";
    uint64_t v11 = 43;
  }
  return (void *)sub_19E3AD630(a5, 13, v10, v11);
}

void *sub_19E380BF4@<X0>(size_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  unint64_t v6 = a3;
  CFNumberRef v84 = (void **)a5;
  CFNumberRef v85 = (std::string *)a4;
  *(void *)(a5 + 8) = *(void *)a5;
  if (*(char *)(a4 + 23) < 0)
  {
    **(unsigned char **)a4 = 0;
    *(void *)(a4 + 8) = 0;
    if (a3) {
      goto LABEL_3;
    }
LABEL_10:
    return sub_19E3AD4C4(a6);
  }
  *(unsigned char *)a4 = 0;
  *(unsigned char *)(a4 + 23) = 0;
  if (!a3) {
    goto LABEL_10;
  }
LABEL_3:
  uint64_t result = (void *)(*(uint64_t (**)(size_t))(*(void *)a1 + 24))(a1);
  if (*a6) {
    return result;
  }
  sub_19E3AD4CC(a6);
  int v83 = 0;
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32)))
  {
    do
    {
      sub_19E38150C(a1, a2, v6, (uint64_t)&v74);
      if (v75 != 1 || *v74 != 32) {
        goto LABEL_13;
      }
      a2 += (int)v76;
      v83 += v76;
      v6 -= (int)v76;
    }
    while (v6);
    uint64_t v11 = a6;
    return sub_19E3AD4C4(v11);
  }
LABEL_13:
  uint64_t v71 = (uint64_t)a6;
  std::string::reserve(v85, 3 * v6);
  sub_19E3816F4(v84, 3 * v6);
  CFNumberRef v81 = "▁";
  std::string::size_type v82 = 3;
  v80[0] = a1;
  v80[1] = &v83;
  v80[2] = &v85;
  v80[3] = &v84;
  v80[4] = &v81;
  if (!*(unsigned char *)(a1 + 48)
    && (*(unsigned int (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32)))
  {
    sub_19E38179C((uint64_t)v80);
  }
  int v12 = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32));
  do
  {
    sub_19E38150C(a1, a2, v6, (uint64_t)&v74);
    int v13 = v74;
    uint64_t v14 = v75;
    if (v12)
    {
      if (!v75) {
        goto LABEL_66;
      }
      while (*v13 == 32)
      {
        ++v13;
        if (!--v14) {
          goto LABEL_66;
        }
      }
    }
    else if (!v75)
    {
      int v12 = 0;
      goto LABEL_66;
    }
    CFNumberRef v72 = a2;
    unint64_t v73 = v6;
    uint64_t v15 = 0;
    do
    {
      int v16 = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 32))(*(void *)(a1 + 32));
      int v17 = v13[v15];
      if (v16 && v17 == 32)
      {
        std::string::append(v85, v81, v82);
        if (v82)
        {
          for (std::string::size_type i = 0; i < v82; ++i)
          {
            unint64_t v19 = v84;
            uint64_t v20 = v83;
            uint64_t v21 = (char *)v84[1];
            int v22 = (char *)v84[2];
            if (v21 >= v22)
            {
              int v24 = (char *)*v84;
              uint64_t v25 = (v21 - (unsigned char *)*v84) >> 3;
              unint64_t v26 = v25 + 1;
              if ((unint64_t)(v25 + 1) >> 61) {
                goto LABEL_116;
              }
              uint64_t v27 = v22 - v24;
              if (v27 >> 2 > v26) {
                unint64_t v26 = v27 >> 2;
              }
              if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v28 = v26;
              }
              if (v28)
              {
                unsigned int v29 = (char *)sub_19E37CFB8((uint64_t)(v84 + 2), v28);
                int v24 = (char *)*v19;
                uint64_t v21 = (char *)v19[1];
              }
              else
              {
                unsigned int v29 = 0;
              }
              uint64_t v30 = &v29[8 * v25];
              *(void *)uint64_t v30 = v20;
              uint64_t v23 = v30 + 8;
              while (v21 != v24)
              {
                uint64_t v31 = *((void *)v21 - 1);
                v21 -= 8;
                *((void *)v30 - 1) = v31;
                v30 -= 8;
              }
              *unint64_t v19 = v30;
              v19[1] = v23;
              v19[2] = &v29[8 * v28];
              if (v24) {
                operator delete(v24);
              }
            }
            else
            {
              *(void *)uint64_t v21 = v83;
              uint64_t v23 = v21 + 8;
            }
            v19[1] = v23;
          }
        }
      }
      else
      {
        std::string::push_back(v85, v17);
        unsigned int v32 = v84;
        uint64_t v33 = v83;
        int v34 = (char *)v84[1];
        char v35 = (char *)v84[2];
        if (v34 >= v35)
        {
          uint64_t v37 = (char *)*v84;
          uint64_t v38 = (v34 - (unsigned char *)*v84) >> 3;
          unint64_t v39 = v38 + 1;
          if ((unint64_t)(v38 + 1) >> 61) {
LABEL_116:
          }
            sub_19E37C7C4();
          uint64_t v40 = v35 - v37;
          if (v40 >> 2 > v39) {
            unint64_t v39 = v40 >> 2;
          }
          if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v41 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v41 = v39;
          }
          if (v41)
          {
            uint64_t v42 = (char *)sub_19E37CFB8((uint64_t)(v84 + 2), v41);
            uint64_t v37 = (char *)*v32;
            int v34 = (char *)v32[1];
          }
          else
          {
            uint64_t v42 = 0;
          }
          CFTypeID v43 = &v42[8 * v38];
          *(void *)CFTypeID v43 = v33;
          int v36 = v43 + 8;
          while (v34 != v37)
          {
            uint64_t v44 = *((void *)v34 - 1);
            v34 -= 8;
            *((void *)v43 - 1) = v44;
            v43 -= 8;
          }
          *unsigned int v32 = v43;
          v32[1] = v36;
          v32[2] = &v42[8 * v41];
          if (v37) {
            operator delete(v37);
          }
        }
        else
        {
          *(void *)int v34 = v83;
          int v36 = v34 + 8;
        }
        v32[1] = v36;
      }
      ++v15;
    }
    while (v15 != v14);
    int v12 = v13[v14 - 1] == 32;
    a2 = v72;
    unint64_t v6 = v73;
LABEL_66:
    v83 += v76;
    a2 += (int)v76;
    v6 -= (int)v76;
    v12 &= (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32));
  }
  while (v6);
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 32) + 24))(*(void *)(a1 + 32)))
  {
    int v45 = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 32))(*(void *)(a1 + 32));
    if (v45) {
      size_t v46 = v82;
    }
    else {
      size_t v46 = 1;
    }
    if (v45) {
      int v47 = v81;
    }
    else {
      int v47 = " ";
    }
    while (1)
    {
      uint64_t v48 = v85;
      LODWORD(v49) = HIBYTE(v85->__r_.__value_.__r.__words[2]);
      if (SHIBYTE(v85->__r_.__value_.__r.__words[2]) < 0)
      {
        uint64_t v50 = (std::string *)v85->__r_.__value_.__r.__words[0];
        std::string::size_type size = v85->__r_.__value_.__l.__size_;
        if (!v46) {
          goto LABEL_81;
        }
      }
      else
      {
        uint64_t v50 = v85;
        std::string::size_type size = HIBYTE(v85->__r_.__value_.__r.__words[2]);
        if (!v46) {
          goto LABEL_81;
        }
      }
      BOOL v52 = size >= v46;
      std::string::size_type v53 = size - v46;
      if (!v52 || memcmp((char *)v50 + v53, v47, v46)) {
        break;
      }
LABEL_81:
      if ((v49 & 0x80) != 0) {
        std::string::size_type v49 = v48->__r_.__value_.__l.__size_;
      }
      if (v49 - v46 < 0)
      {
        LODWORD(v74) = 13;
        CFTypeID v65 = (void *)sub_19E37B784((uint64_t)&v75);
        sub_19E37CA70(v65, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/normalizer.cc", 69);
        sub_19E37CA70(&v75, (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_19E37CA70(&v75, (uint64_t)") [", 3);
        sub_19E37CA70(&v75, (uint64_t)"(length) >= (0)", 15);
        sub_19E37CA70(&v75, (uint64_t)"] ", 2);
        sub_19E378FFC((unsigned int *)&v74, v71);
        goto LABEL_112;
      }
      int v83 = *((void *)*v84 + (v49 - v46));
      std::string::resize(v48, (v49 - v46), 0);
      sub_19E3819D0((uint64_t)v84, (v49 - v46));
    }
  }
  if (*(unsigned char *)(a1 + 48)
    && (*(unsigned int (**)(void))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32)))
  {
    sub_19E38179C((uint64_t)v80);
  }
  int64_t v54 = v84;
  uint64_t v55 = v83;
  CFTypeID v56 = (char *)v84[1];
  CFNumberRef v57 = (char *)v84[2];
  if (v56 >= v57)
  {
    CFTypeID v59 = (char *)*v84;
    uint64_t v60 = (v56 - (unsigned char *)*v84) >> 3;
    unint64_t v61 = v60 + 1;
    if ((unint64_t)(v60 + 1) >> 61) {
      sub_19E37C7C4();
    }
    uint64_t v62 = v57 - v59;
    if (v62 >> 2 > v61) {
      unint64_t v61 = v62 >> 2;
    }
    if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v63 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v63 = v61;
    }
    if (v63)
    {
      CFNumberRef v64 = (char *)sub_19E37CFB8((uint64_t)(v84 + 2), v63);
      CFTypeID v59 = (char *)*v54;
      CFTypeID v56 = (char *)v54[1];
    }
    else
    {
      CFNumberRef v64 = 0;
    }
    CFNumberRef v66 = &v64[8 * v60];
    CFNumberRef v67 = &v64[8 * v63];
    *(void *)CFNumberRef v66 = v55;
    CFNumberRef v58 = v66 + 8;
    while (v56 != v59)
    {
      uint64_t v68 = *((void *)v56 - 1);
      v56 -= 8;
      *((void *)v66 - 1) = v68;
      v66 -= 8;
    }
    unsigned char *v54 = v66;
    v54[1] = v58;
    v54[2] = v67;
    if (v59) {
      operator delete(v59);
    }
  }
  else
  {
    *(void *)CFTypeID v56 = v83;
    CFNumberRef v58 = v56 + 8;
  }
  v54[1] = v58;
  if (SHIBYTE(v85->__r_.__value_.__r.__words[2]) < 0) {
    std::string::size_type v69 = v85->__r_.__value_.__l.__size_;
  }
  else {
    std::string::size_type v69 = HIBYTE(v85->__r_.__value_.__r.__words[2]);
  }
  if (((unsigned char *)v84[1] - (unsigned char *)*v84) >> 3 == v69 + 1)
  {
    uint64_t v11 = (void *)v71;
    return sub_19E3AD4C4(v11);
  }
  LODWORD(v74) = 13;
  CFNumberRef v70 = (void *)sub_19E37B784((uint64_t)&v75);
  sub_19E37CA70(v70, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/normalizer.cc", 69);
  sub_19E37CA70(&v75, (uint64_t)"(", 1);
  std::ostream::operator<<();
  sub_19E37CA70(&v75, (uint64_t)") [", 3);
  sub_19E37CA70(&v75, (uint64_t)"(norm_to_orig->size()) == (normalized->size() + 1)", 50);
  sub_19E37CA70(&v75, (uint64_t)"] ", 2);
  sub_19E378FFC((unsigned int *)&v74, v71);
LABEL_112:
  uint64_t v75 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&v75 + *(void *)(v75 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  uint64_t v76 = MEMORY[0x1E4FBA470] + 16;
  if (v78 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (void *)MEMORY[0x19F3BDC30](&v79);
}

void sub_19E3814EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_19E37908C((uint64_t)va);
  _Unwind_Resume(a1);
}

size_t sub_19E38150C@<X0>(size_t result@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v27[63] = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    unint64_t v6 = a2;
    size_t v7 = result;
    uint64_t v8 = *(void *)(result + 40);
    if (v8 && (LOBYTE(v26) = 0, uint64_t result = sub_19E381AC4(v8, a2, a3, (BOOL *)&v26), (_BYTE)v26))
    {
      unint64_t v9 = (int)result;
      if (a3 < (int)result) {
        unint64_t v9 = a3;
      }
      *(void *)a4 = v6;
      *(void *)(a4 + 8) = v9;
      *(_DWORD *)(a4 + 16) = result;
    }
    else
    {
      uint64_t v10 = *(void *)(v7 + 8);
      if (!v10) {
        goto LABEL_24;
      }
      uint64_t v11 = 0;
      unint64_t v12 = 0;
      int v13 = *(_DWORD **)(v10 + 16);
      uint64_t v14 = (*v13 >> 10 << ((*v13 >> 6) & 8));
      do
      {
        uint64_t v15 = v6[v11];
        uint64_t v16 = v14 ^ v15;
        unsigned int v17 = v13[v16];
        if ((v17 & 0x800000FF) != v15) {
          break;
        }
        uint64_t v14 = v16 ^ (v17 >> 10 << ((v17 >> 6) & 8));
        if ((v17 & 0x100) != 0)
        {
          if (v12 <= 0x1F)
          {
            unint64_t v18 = &v27[2 * v12 - 1];
            *(_DWORD *)unint64_t v18 = v13[v14] & 0x7FFFFFFF;
            v18[1] = v11 + 1;
          }
          ++v12;
        }
        ++v11;
      }
      while (a3 != v11);
      if (!v12) {
        goto LABEL_24;
      }
      unint64_t v19 = 0;
      int v20 = 0;
      uint64_t v21 = v27;
      int v22 = v27;
      do
      {
        unint64_t v24 = *v22;
        v22 += 2;
        unint64_t v23 = v24;
        if (!v19 || v23 > v19)
        {
          int v20 = *((_DWORD *)v21 - 2);
          unint64_t v19 = v23;
        }
        uint64_t v21 = v22;
        --v12;
      }
      while (v12);
      if (v19)
      {
        unint64_t v6 = (char *)(*(void *)(v7 + 16) + v20);
        uint64_t result = strlen(v6);
      }
      else
      {
LABEL_24:
        uint64_t v26 = 0;
        BOOL v25 = sub_19E3AB390((unsigned __int8 *)v6, (uint64_t)&v6[a3], &v26) != 65533 || v26 == 3;
        if (v25) {
          LODWORD(v19) = v26;
        }
        else {
          LODWORD(v19) = 1;
        }
        if (v25) {
          uint64_t result = (int)v26;
        }
        else {
          uint64_t result = 3;
        }
        if (!v25) {
          unint64_t v6 = (char *)&unk_19E572154;
        }
      }
      *(void *)a4 = v6;
      *(void *)(a4 + 8) = result;
      *(_DWORD *)(a4 + 16) = v19;
    }
  }
  else
  {
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

void sub_19E3816F4(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      sub_19E37C7C4();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    unint64_t v6 = (char *)sub_19E37CFB8(v3, a2);
    size_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    unint64_t v9 = &v6[8 * v8];
    uint64_t v10 = (char *)*a1;
    uint64_t v11 = (char *)a1[1];
    unint64_t v12 = v7;
    if (v11 != *a1)
    {
      unint64_t v12 = v7;
      do
      {
        uint64_t v13 = *((void *)v11 - 1);
        v11 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void sub_19E38179C(uint64_t a1)
{
  int v2 = (*(uint64_t (**)(void))(**(void **)(*(void *)a1 + 32) + 32))(*(void *)(*(void *)a1 + 32));
  uint64_t v3 = **(std::string ***)(a1 + 16);
  if (v2)
  {
    std::string::append(v3, **(const std::string::value_type ***)(a1 + 32), *(void *)(*(void *)(a1 + 32) + 8));
    if (*(void *)(*(void *)(a1 + 32) + 8))
    {
      unint64_t v4 = 0;
      do
      {
        uint64_t v5 = **(void **)(a1 + 24);
        uint64_t v6 = **(int **)(a1 + 8);
        size_t v7 = *(void **)(v5 + 8);
        unint64_t v8 = *(void *)(v5 + 16);
        if ((unint64_t)v7 >= v8)
        {
          uint64_t v10 = *(void **)v5;
          uint64_t v11 = ((uint64_t)v7 - *(void *)v5) >> 3;
          unint64_t v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61) {
            goto LABEL_40;
          }
          uint64_t v13 = v8 - (void)v10;
          if (v13 >> 2 > v12) {
            unint64_t v12 = v13 >> 2;
          }
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v14 = v12;
          }
          if (v14)
          {
            uint64_t v15 = (char *)sub_19E37CFB8(v5 + 16, v14);
            uint64_t v10 = *(void **)v5;
            size_t v7 = *(void **)(v5 + 8);
          }
          else
          {
            uint64_t v15 = 0;
          }
          uint64_t v16 = &v15[8 * v11];
          *(void *)uint64_t v16 = v6;
          unint64_t v9 = v16 + 8;
          while (v7 != v10)
          {
            uint64_t v17 = *--v7;
            *((void *)v16 - 1) = v17;
            v16 -= 8;
          }
          *(void *)uint64_t v5 = v16;
          *(void *)(v5 + 8) = v9;
          *(void *)(v5 + 16) = &v15[8 * v14];
          if (v10) {
            operator delete(v10);
          }
        }
        else
        {
          *size_t v7 = v6;
          unint64_t v9 = v7 + 1;
        }
        *(void *)(v5 + 8) = v9;
        ++v4;
      }
      while (v4 < *(void *)(*(void *)(a1 + 32) + 8));
    }
  }
  else
  {
    std::string::append(v3, " ");
    uint64_t v18 = **(void **)(a1 + 24);
    uint64_t v19 = **(int **)(a1 + 8);
    int v20 = *(void **)(v18 + 8);
    unint64_t v21 = *(void *)(v18 + 16);
    if ((unint64_t)v20 >= v21)
    {
      unint64_t v23 = *(void **)v18;
      uint64_t v24 = ((uint64_t)v20 - *(void *)v18) >> 3;
      unint64_t v25 = v24 + 1;
      if ((unint64_t)(v24 + 1) >> 61) {
LABEL_40:
      }
        sub_19E37C7C4();
      uint64_t v26 = v21 - (void)v23;
      if (v26 >> 2 > v25) {
        unint64_t v25 = v26 >> 2;
      }
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v27 = v25;
      }
      if (v27)
      {
        unint64_t v28 = (char *)sub_19E37CFB8(v18 + 16, v27);
        unint64_t v23 = *(void **)v18;
        int v20 = *(void **)(v18 + 8);
      }
      else
      {
        unint64_t v28 = 0;
      }
      unsigned int v29 = &v28[8 * v24];
      uint64_t v30 = &v28[8 * v27];
      *(void *)unsigned int v29 = v19;
      int v22 = v29 + 8;
      while (v20 != v23)
      {
        uint64_t v31 = *--v20;
        *((void *)v29 - 1) = v31;
        v29 -= 8;
      }
      *(void *)uint64_t v18 = v29;
      *(void *)(v18 + 8) = v22;
      *(void *)(v18 + 16) = v30;
      if (v23) {
        operator delete(v23);
      }
    }
    else
    {
      void *v20 = v19;
      int v22 = v20 + 1;
    }
    *(void *)(v18 + 8) = v22;
  }
}

void sub_19E3819D0(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    sub_19E3823F4((char **)a1, a2 - v2);
  }
}

void sub_19E381A00(uint64_t a1@<X0>, void *a2@<X8>)
{
  std::string __p = 0;
  unint64_t v4 = 0;
  uint64_t v5 = 0;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 32))(&v2);
  nullsub_3(&v2);
  sub_19E3AD4CC(&v2);
  if (__p)
  {
    unint64_t v4 = __p;
    operator delete(__p);
  }
}

void sub_19E381A88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  sub_19E3AD4CC(&a9);
  if (*(char *)(v11 + 23) < 0) {
    operator delete(*(void **)v11);
  }
  if (__p)
  {
    a11 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_19E381AC4(uint64_t a1, unsigned char *a2, uint64_t a3, BOOL *a4)
{
  v23[127] = *MEMORY[0x1E4F143B8];
  if (!*(void *)a1)
  {
    if (a4) {
      *a4 = 0;
    }
    goto LABEL_33;
  }
  unint64_t v4 = *(_DWORD **)(*(void *)a1 + 16);
  uint64_t v5 = (*v4 >> 10 << ((*v4 >> 6) & 8));
  if (a3)
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    do
    {
      uint64_t v8 = a2[v6];
      uint64_t v9 = v5 ^ v8;
      unsigned int v10 = v4[v9];
      if ((v10 & 0x800000FF) != v8) {
        break;
      }
      uint64_t v5 = v9 ^ (v10 >> 10 << ((v10 >> 6) & 8));
      if ((v10 & 0x100) != 0)
      {
        if (v7 <= 0x3F)
        {
          uint64_t v11 = &v22[16 * v7];
          *(_DWORD *)uint64_t v11 = v4[v5] & 0x7FFFFFFF;
          *((void *)v11 + 1) = v6 + 1;
        }
        ++v7;
      }
      ++v6;
    }
    while (a3 != v6);
  }
  else
  {
    unsigned int v12 = *a2;
    if (*a2)
    {
      unint64_t v7 = 0;
      uint64_t v13 = 1;
      do
      {
        uint64_t v14 = v5 ^ v12;
        unsigned int v15 = v4[v14];
        if ((v15 & 0x800000FF) != v12) {
          break;
        }
        uint64_t v5 = v14 ^ (v15 >> 10 << ((v15 >> 6) & 8));
        if ((v15 & 0x100) != 0)
        {
          if (v7 <= 0x3F)
          {
            uint64_t v16 = &v22[16 * v7];
            *(_DWORD *)uint64_t v16 = v4[v5] & 0x7FFFFFFF;
            *((void *)v16 + 1) = v13;
          }
          ++v7;
        }
        unsigned int v12 = a2[v13++];
      }
      while (v12);
    }
    else
    {
      LODWORD(v7) = 0;
    }
  }
  if (a4) {
    *a4 = (int)v7 > 0;
  }
  if (!v7)
  {
LABEL_33:
    int v21 = asc_19E564BD9[(unint64_t)*a2 >> 4];
    if (v21 >= (int)a3) {
      return a3;
    }
    else {
      return v21;
    }
  }
  if ((int)v7 < 1) {
    return 0;
  }
  LODWORD(result) = 0;
  unint64_t v7 = v7;
  uint64_t v18 = (int *)v23;
  do
  {
    int v20 = *v18;
    v18 += 4;
    unsigned int v19 = v20;
    if ((int)result <= v20) {
      uint64_t result = v19;
    }
    else {
      uint64_t result = result;
    }
    --v7;
  }
  while (v7);
  return result;
}

void sub_19E381C94(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = *(unsigned __int8 *)(a1 + 48);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  std::string::resize((std::string *)a2, 4uLL, 0);
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v5 = (_DWORD *)a2;
  }
  else {
    uint64_t v5 = *(_DWORD **)a2;
  }
  *uint64_t v5 = v4;
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    uint64_t v8 = *(void *)(v6 + 8);
    unint64_t v7 = *(const std::string::value_type **)(v6 + 16);
    memset(&v13, 0, sizeof(v13));
    std::string::resize(&v13, 4uLL, 0);
    std::string::size_type v9 = 4 * v8;
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned int v10 = &v13;
    }
    else {
      unsigned int v10 = (std::string *)v13.__r_.__value_.__r.__words[0];
    }
    LODWORD(v10->__r_.__value_.__l.__data_) = v9;
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v11 = &v13;
    }
    else {
      uint64_t v11 = (std::string *)v13.__r_.__value_.__r.__words[0];
    }
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v13.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v13.__r_.__value_.__l.__size_;
    }
    std::string::append((std::string *)a2, (const std::string::value_type *)v11, size);
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v13.__r_.__value_.__l.__data_);
    }
    std::string::append((std::string *)a2, v7, v9);
    std::string::append((std::string *)a2, *(const std::string::value_type **)(a1 + 16), *(void *)(a1 + 24));
  }
}

void sub_19E381D8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

void *sub_19E381DC8(void *result, void *a2)
{
  *uint64_t result = 0;
  unint64_t v3 = a2[2];
  if (v3)
  {
    std::string __p = 0;
    int v21 = 0;
    int v22 = 0;
    sub_19E3820AC(&__p, v3);
    uint64_t v6 = (void *)*a2;
    int v4 = a2 + 1;
    uint64_t v5 = v6;
    if (v6 != v4)
    {
      unint64_t v7 = v21;
      do
      {
        uint64_t v8 = v5[4];
        if (v7 >= v22)
        {
          uint64_t v9 = (v7 - (unsigned char *)__p) >> 3;
          if ((unint64_t)(v9 + 1) >> 61) {
            sub_19E37C7C4();
          }
          unint64_t v10 = (v22 - (unsigned char *)__p) >> 2;
          if (v10 <= v9 + 1) {
            unint64_t v10 = v9 + 1;
          }
          if ((unint64_t)(v22 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v11 = v10;
          }
          if (v11) {
            unsigned int v12 = (char *)sub_19E37CFB8((uint64_t)&v22, v11);
          }
          else {
            unsigned int v12 = 0;
          }
          std::string v13 = &v12[8 * v9];
          *(void *)std::string v13 = v8;
          unint64_t v7 = v13 + 8;
          uint64_t v15 = (char *)__p;
          uint64_t v14 = v21;
          if (v21 != __p)
          {
            do
            {
              uint64_t v16 = *((void *)v14 - 1);
              v14 -= 8;
              *((void *)v13 - 1) = v16;
              v13 -= 8;
            }
            while (v14 != v15);
            uint64_t v14 = (char *)__p;
          }
          std::string __p = v13;
          int v21 = v7;
          int v22 = &v12[8 * v11];
          if (v14) {
            operator delete(v14);
          }
        }
        else
        {
          *(void *)unint64_t v7 = v8;
          v7 += 8;
        }
        int v21 = v7;
        uint64_t v17 = (void *)v5[1];
        if (v17)
        {
          do
          {
            uint64_t v18 = v17;
            uint64_t v17 = (void *)*v17;
          }
          while (v17);
        }
        else
        {
          do
          {
            uint64_t v18 = (void *)v5[2];
            BOOL v19 = *v18 == (void)v5;
            uint64_t v5 = v18;
          }
          while (!v19);
        }
        uint64_t v5 = v18;
      }
      while (v18 != v4);
    }
    operator new();
  }
  return result;
}

void sub_19E382044(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  uint64_t v16 = *v14;
  *uint64_t v14 = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E3820AC(void **a1, unint64_t a2)
{
  int v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      sub_19E37C7C4();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)sub_19E37CFB8(v3, a2);
    unint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    uint64_t v9 = &v6[8 * v8];
    unint64_t v11 = (char *)*a1;
    unint64_t v10 = (char *)a1[1];
    unsigned int v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        uint64_t v13 = *((void *)v10 - 1);
        v10 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      unint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void *sub_19E382158(void *result, uint64_t a2, uint64_t a3)
{
  *uint64_t result = 0;
  if (a3) {
    operator new();
  }
  return result;
}

void sub_19E382238(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  uint64_t *v1 = 0;
  if (v3) {
    sub_19E382510(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_19E382258@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(void *)a1) {
    return sub_19E382294(a2, *(void **)(*(void *)a1 + 16), 4 * *(void *)(*(void *)a1 + 8));
  }
  else {
    return sub_19E382340(a2, "");
  }
}

uint64_t sub_19E382280(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = a2;
  return result;
}

uint64_t sub_19E382288@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_19E3AD6E8(a2, a1 + 56);
}

void *sub_19E382294(void *__dst, void *__src, size_t __len)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    sub_19E37C958();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((unsigned char *)__dst + 23) = __len;
    uint64_t v6 = __dst;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __dst;
}

void *sub_19E382340(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_19E37C958();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    uint64_t v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

void sub_19E3823F4(char **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  size_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 3);
    if (v10 >> 61) {
      sub_19E37C7C4();
    }
    uint64_t v11 = v9 >> 3;
    uint64_t v12 = v5 - v8;
    if (v12 >> 2 > v10) {
      unint64_t v10 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      uint64_t v14 = (char *)sub_19E37CFB8(v4, v13);
      uint64_t v8 = *a1;
      uint64_t v7 = a1[1];
    }
    else
    {
      uint64_t v14 = 0;
    }
    uint64_t v15 = &v14[8 * v11];
    uint64_t v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    uint64_t v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      uint64_t v18 = *((void *)v7 - 1);
      v7 -= 8;
      *((void *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

uint64_t sub_19E382510(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 8))();
}

uint64_t sub_19E382534@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(void *)(a1 + 80)) {
    uint64_t v3 = *(_DWORD **)(a1 + 80);
  }
  else {
    uint64_t v3 = &unk_1E945A3E0;
  }
  switch(v3[68])
  {
    case 1:
      sub_19E3826A0();
    case 2:
      sub_19E382718();
    case 3:
      sub_19E382790();
    case 4:
      sub_19E382808();
    default:
      uint64_t result = sub_19E3AB380();
      if ((int)result <= 2)
      {
        LOBYTE(v11) = 0;
        size_t v5 = sub_19E37CA70(MEMORY[0x1E4FBA240], (uint64_t)"model_factory.cc", 16);
        sub_19E37CA70(v5, (uint64_t)"(", 1);
        uint64_t v6 = (void *)std::ostream::operator<<();
        uint64_t v7 = sub_19E37CA70(v6, (uint64_t)") ", 2);
        uint64_t v8 = sub_19E37CA70(v7, (uint64_t)"LOG(", 4);
        uint64_t v9 = sub_19E37CA70(v8, (uint64_t)"ERROR", 5);
        unint64_t v10 = sub_19E37CA70(v9, (uint64_t)") ", 2);
        sub_19E37CA70(v10, (uint64_t)"Unknown model_type: ", 20);
        std::ostream::operator<<();
        uint64_t result = (uint64_t)sub_19E37B91C(&v11);
      }
      *a2 = 0;
      return result;
  }
}

void sub_19E38267C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E37B91C(va);
  _Unwind_Resume(a1);
}

void sub_19E3826A0()
{
}

void sub_19E3826F4(_Unwind_Exception *a1)
{
  MEMORY[0x19F3BDCF0](v1, 0x10E1C404363080ALL);
  _Unwind_Resume(a1);
}

void sub_19E382718()
{
}

void sub_19E38276C(_Unwind_Exception *a1)
{
  MEMORY[0x19F3BDCF0](v1, 0x10E1C4039E95E28);
  _Unwind_Resume(a1);
}

void sub_19E382790()
{
}

void sub_19E3827E4(_Unwind_Exception *a1)
{
  MEMORY[0x19F3BDCF0](v1, 0x10E1C4039E95E28);
  _Unwind_Resume(a1);
}

void sub_19E382808()
{
}

void sub_19E38285C(_Unwind_Exception *a1)
{
  MEMORY[0x19F3BDCF0](v1, 0x10E1C4039E95E28);
  _Unwind_Resume(a1);
}

uint64_t sub_19E382880@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  v14[1] = a2;
  v14[2] = a3;
  int v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 80))(a1);
  if (v6 == 1) {
    sub_19E382A84();
  }
  if (!v6) {
    sub_19E382A04();
  }
  uint64_t result = sub_19E3AB380();
  if ((int)result <= 2)
  {
    LOBYTE(v14[0]) = 0;
    uint64_t v8 = sub_19E37CA70(MEMORY[0x1E4FBA240], (uint64_t)"model_factory.cc", 16);
    sub_19E37CA70(v8, (uint64_t)"(", 1);
    uint64_t v9 = (void *)std::ostream::operator<<();
    unint64_t v10 = sub_19E37CA70(v9, (uint64_t)") ", 2);
    uint64_t v11 = sub_19E37CA70(v10, (uint64_t)"LOG(", 4);
    uint64_t v12 = sub_19E37CA70(v11, (uint64_t)"ERROR", 5);
    unint64_t v13 = sub_19E37CA70(v12, (uint64_t)") ", 2);
    sub_19E37CA70(v13, (uint64_t)"Unknown model_type: ", 20);
    (*(void (**)(uint64_t))(*(void *)a1 + 80))(a1);
    std::ostream::operator<<();
    uint64_t result = (uint64_t)sub_19E37B91C(v14);
  }
  *a4 = 0;
  return result;
}

void sub_19E3829EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E37B91C(va);
  _Unwind_Resume(a1);
}

void sub_19E382A04()
{
}

void sub_19E382A60(_Unwind_Exception *a1)
{
  MEMORY[0x19F3BDCF0](v1, 0x10E1C404363080ALL);
  _Unwind_Resume(a1);
}

void sub_19E382A84()
{
}

void sub_19E382AE0(_Unwind_Exception *a1)
{
  MEMORY[0x19F3BDCF0](v1, 0x10E1C4039E95E28);
  _Unwind_Resume(a1);
}

void *sub_19E382B04(void *a1)
{
  *a1 = &unk_1EF0B90A8;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    sub_19E3924B8(v2);
  }
  return a1;
}

void sub_19E382B50(void *a1)
{
  *a1 = &unk_1EF0B90A8;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    sub_19E3924B8(v1);
  }
  JUMPOUT(0x19F3BDCF0);
}

uint64_t sub_19E382BBC(void *a1)
{
  uint64_t result = a1[2];
  if (!result)
  {
    sub_19E39260C(&v5);
    long long v3 = v5;
    long long v5 = 0uLL;
    uint64_t v4 = (std::__shared_weak_count *)a1[3];
    *((_OWORD *)a1 + 1) = v3;
    if (v4)
    {
      sub_19E3924B8(v4);
      if (*((void *)&v5 + 1)) {
        sub_19E3924B8(*((std::__shared_weak_count **)&v5 + 1));
      }
    }
    uint64_t result = a1[2];
    a1[1] = result;
  }
  return result;
}

void *sub_19E382C24(void *a1)
{
  *a1 = &unk_1EF0B9108;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_19E3924B8(v2);
  }
  return a1;
}

void sub_19E382C70(void *a1)
{
  *a1 = &unk_1EF0B9108;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    sub_19E3924B8(v1);
  }
  JUMPOUT(0x19F3BDCF0);
}

uint64_t sub_19E382CDC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (!result)
  {
    sub_19E392738(&v5);
    long long v3 = v5;
    long long v5 = 0uLL;
    uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
    *(_OWORD *)(a1 + 8) = v3;
    if (v4)
    {
      sub_19E3924B8(v4);
      if (*((void *)&v5 + 1)) {
        sub_19E3924B8(*((std::__shared_weak_count **)&v5 + 1));
      }
    }
    return *(void *)(a1 + 8);
  }
  return result;
}

void *sub_19E382D40@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    return (void *)sub_19E3BBDC0(v2, (uint64_t)a2);
  }
  else {
    return sub_19E382340(a2, "");
  }
}

double sub_19E382D5C(uint64_t a1)
{
  *(void *)a1 = &unk_1EF0B8DA8;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  return result;
}

uint64_t sub_19E382D9C(uint64_t a1)
{
  *(void *)a1 = &unk_1EF0B8DA8;
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  uint64_t v2 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  long long v3 = *(void **)(a1 + 64);
  if (v3)
  {
    *(void *)(a1 + 72) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 40);
  if (v4)
  {
    *(void *)(a1 + 48) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  return a1;
}

void sub_19E382F00(uint64_t a1)
{
  sub_19E382D9C(a1);
  JUMPOUT(0x19F3BDCF0);
}

uint64_t sub_19E382F38()
{
  v3[19] = *MEMORY[0x1E4F143B8];
  sub_19E3830C4(v1);
  if ((v2[*(void *)(v1[0] - 24) + 16] & 5) == 0) {
    std::istream::read();
  }
  v1[0] = *MEMORY[0x1E4FBA3F8];
  *(uint64_t *)((char *)v1 + *(void *)(v1[0] - 24)) = *(void *)(MEMORY[0x1E4FBA3F8] + 24);
  MEMORY[0x19F3BD8C0](v2);
  std::istream::~istream();
  MEMORY[0x19F3BDC30](v3);
  return 0;
}

void sub_19E3830A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E383288((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_19E3830C4(uint64_t *a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA460] + 64;
  a1[53] = MEMORY[0x1E4FBA460] + 64;
  long long v3 = a1 + 2;
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA3F8] + 16);
  uint64_t v5 = *(void *)(MEMORY[0x1E4FBA3F8] + 8);
  *a1 = v5;
  *(uint64_t *)((char *)a1 + *(void *)(v5 - 24)) = v4;
  a1[1] = 0;
  uint64_t v6 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v6, a1 + 2);
  uint64_t v7 = MEMORY[0x1E4FBA460] + 24;
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *a1 = v7;
  a1[53] = v2;
  MEMORY[0x19F3BD8B0](v3);
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 4);
  }
  return a1;
}

void sub_19E383250(_Unwind_Exception *a1)
{
  std::istream::~istream();
  MEMORY[0x19F3BDC30](v1);
  _Unwind_Resume(a1);
}

void *sub_19E383288(void *a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA3F8];
  uint64_t v3 = *MEMORY[0x1E4FBA3F8];
  *a1 = *MEMORY[0x1E4FBA3F8];
  *(void *)((char *)a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  MEMORY[0x19F3BD8C0](a1 + 2);
  std::istream::~istream();
  MEMORY[0x19F3BDC30](a1 + 53);
  return a1;
}

uint64_t sub_19E383354(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!sub_19E382F38()) {
    sub_19E3834CC();
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 64);
  return v6(a1, a2, a3);
}

void sub_19E3834A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void sub_19E3834CC()
{
}

void sub_19E383514(_Unwind_Exception *a1)
{
  MEMORY[0x19F3BDCF0](v1, 0x10A1C4047CE62CFLL);
  _Unwind_Resume(a1);
}

uint64_t sub_19E383538@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  if (a1) {
    sub_19E3AA5F4();
  }
  return sub_19E3AD630(a2, 5, "model file path should not be empty.", 36);
}

void sub_19E3838BC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 57) < 0) {
    operator delete(*(void **)(v1 - 80));
  }
  uint64_t v3 = *(void *)(v1 - 56);
  *(void *)(v1 - 56) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_19E383934(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 16))(&v11);
  if (v11)
  {
    char v10 = 1;
    uint64_t v1 = sub_19E37CA70(MEMORY[0x1E4FBA240], (uint64_t)"sentencepiece_processor.cc", 26);
    sub_19E37CA70(v1, (uint64_t)"(", 1);
    uint64_t v2 = (void *)std::ostream::operator<<();
    uint64_t v3 = sub_19E37CA70(v2, (uint64_t)") [", 3);
    uint64_t v4 = sub_19E37CA70(v3, (uint64_t)"_status.ok()", 12);
    uint64_t v5 = sub_19E37CA70(v4, (uint64_t)"] ", 2);
    sub_19E3AD800((uint64_t)&v11, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    sub_19E37CA70(v5, (uint64_t)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    sub_19E37B91C(&v10);
  }
  return sub_19E3AD4CC(&v11);
}

void sub_19E383A44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_19E37B91C((unsigned char *)(v15 - 25));
  sub_19E3AD4CC((uint64_t *)(v15 - 24));
  _Unwind_Resume(a1);
}

void sub_19E383A7C()
{
}

void sub_19E383B48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void sub_19E383B74()
{
}

void sub_19E383DD0(_Unwind_Exception *a1)
{
  sub_19E392864((uint64_t *)(v1 - 56), 0);
  _Unwind_Resume(a1);
}

void sub_19E383E14(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *(unsigned char **)(*a2 + 88);
  if (!v5) {
    uint64_t v5 = &unk_1E945A528;
  }
  if (v5[80])
  {
    if ((int)sub_19E3AB380() <= 0)
    {
      LOBYTE(v23) = 0;
      uint64_t v6 = sub_19E37CA70(MEMORY[0x1E4FBA240], (uint64_t)"sentencepiece_processor.cc", 26);
      sub_19E37CA70(v6, (uint64_t)"(", 1);
      uint64_t v7 = (void *)std::ostream::operator<<();
      uint64_t v8 = sub_19E37CA70(v7, (uint64_t)") ", 2);
      uint64_t v9 = sub_19E37CA70(v8, (uint64_t)"LOG(", 4);
      char v10 = sub_19E37CA70(v9, (uint64_t)"INFO", 4);
      uint64_t v11 = sub_19E37CA70(v10, (uint64_t)") ", 2);
      sub_19E37CA70(v11, (uint64_t)"Enable Apple addition for backward compatibility", 48);
      sub_19E37B91C(&v23);
    }
    uint64_t v4 = *a2;
    *(_DWORD *)(v4 + 48) = *(_DWORD *)(*a2 + 48) | 1;
    uint64_t v12 = *(void *)(v4 + 80);
    if (!v12)
    {
      uint64_t v13 = *(void *)(v4 + 8);
      uint64_t v14 = (void *)(v13 & 0xFFFFFFFFFFFFFFFELL);
      if (v13) {
        uint64_t v14 = (void *)*v14;
      }
      uint64_t v12 = sub_19E3A8D34((uint64_t)v14);
      *(void *)(v4 + 8sub_19E392864(&a9, 0) = v12;
      uint64_t v4 = *a2;
    }
    *(_DWORD *)(v12 + 40) |= 0x4000u;
    *(unsigned char *)(v12 + 245) = 1;
    *(_DWORD *)(v4 + 48) |= 2u;
    uint64_t v15 = *(void *)(v4 + 88);
    if (!v15)
    {
      uint64_t v16 = *(void *)(v4 + 8);
      uint64_t v17 = (void *)(v16 & 0xFFFFFFFFFFFFFFFELL);
      if (v16) {
        uint64_t v17 = (void *)*v17;
      }
      uint64_t v15 = sub_19E3A8E04((uint64_t)v17);
      *(void *)(v4 + 88) = v15;
      uint64_t v4 = *a2;
    }
    *(_DWORD *)(v15 + 48) |= 0x10u;
    *(unsigned char *)(v15 + 81) = 1;
  }
  *a2 = 0;
  if (v4) {
    uint64_t v18 = v4 + 16;
  }
  else {
    uint64_t v18 = 0;
  }
  uint64_t v19 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = v18;
  if (v19)
  {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
    uint64_t v18 = *(void *)(a1 + 32);
  }
  sub_19E382534(v18 - 16, &v23);
  uint64_t v20 = v23;
  uint64_t v23 = 0;
  uint64_t v21 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v20;
  if (v21)
  {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
    uint64_t v22 = v23;
    uint64_t v23 = 0;
    if (v22) {
      (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
    }
  }
  sub_19E384860();
}

void sub_19E3847A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char a28)
{
}

void sub_19E384860()
{
}

void sub_19E3848BC(_Unwind_Exception *a1)
{
  MEMORY[0x19F3BDCF0](v1, 0x10F1C40C7D4252BLL);
  _Unwind_Resume(a1);
}

void sub_19E3848E0()
{
}

void sub_19E384934(_Unwind_Exception *a1)
{
  MEMORY[0x19F3BDCF0](v1, 0x10F1C40C7D4252BLL);
  _Unwind_Resume(a1);
}

void sub_19E384958(void *__src@<X0>, size_t __len@<X1>, char *a3@<X2>, void **a4@<X3>, char *a5@<X4>, void **a6@<X5>, std::string *a7@<X8>)
{
  sub_19E382294(&__dst, __src, __len);
  size_t v12 = strlen(a3);
  sub_19E3928B4(a3, v12, a4, a5, a6, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v15 = std::string::append(&__dst, (const std::string::value_type *)p_p, size);
  *a7 = *v15;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
}

void sub_19E384A30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E384A64(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
}

void sub_19E384A6C(uint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, char **a4@<X3>, uint64_t *a5@<X8>)
{
  v46[19] = *MEMORY[0x1E4F143B8];
  a4[1] = *a4;
  if (a3)
  {
    (*(void (**)(uint64_t *))(*a1 + 88))(a1);
    if (!*a5)
    {
      sub_19E3AD4CC(a5);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9459EF0, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_1E9459EF0))
      {
        long long v42 = xmmword_1E599F158;
        *(_OWORD *)std::string __p = unk_1E599F168;
        long long v44 = xmmword_1E599F178;
        uint64_t v45 = 3;
        long long v38 = xmmword_1E599F118;
        long long v39 = unk_1E599F128;
        long long v40 = xmmword_1E599F138;
        long long v41 = *(_OWORD *)&off_1E599F148;
        sub_19E3950D0((uint64_t)&unk_1E9459ED8, (uint64_t)&v38, 5);
        __cxa_atexit((void (*)(void *))sub_19E38EB60, &unk_1E9459ED8, &dword_19E36B000);
        __cxa_guard_release(&qword_1E9459EF0);
      }
      sub_19E391BB4((char **)&v36, a2, a3, ":", 1, 0);
      char v10 = (uint64_t *)v36;
      uint64_t v11 = v37;
      if (v36 == v37)
      {
LABEL_29:
        if (v10)
        {
          uint64_t v37 = v10;
          operator delete(v10);
        }
        sub_19E3AD4C4(a5);
      }
      else
      {
        while (1)
        {
          size_t v12 = sub_19E393078((uint64_t)&unk_1E9459ED8, (uint64_t)v10);
          uint64_t v13 = v12;
          if (v12 == (void *)&unk_1E9459EE0) {
            break;
          }
          uint64_t v15 = a4[1];
          unint64_t v14 = (unint64_t)a4[2];
          if ((unint64_t)v15 >= v14)
          {
            uint64_t v17 = *a4;
            uint64_t v18 = (v15 - *a4) >> 2;
            unint64_t v19 = v18 + 1;
            if ((unint64_t)(v18 + 1) >> 62) {
              sub_19E37C7C4();
            }
            uint64_t v20 = v14 - (void)v17;
            if (v20 >> 1 > v19) {
              unint64_t v19 = v20 >> 1;
            }
            if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v21 = v19;
            }
            if (v21)
            {
              uint64_t v22 = (char *)sub_19E37D7FC((uint64_t)(a4 + 2), v21);
              uint64_t v17 = *a4;
              uint64_t v15 = a4[1];
            }
            else
            {
              uint64_t v22 = 0;
            }
            uint64_t v23 = &v22[4 * v18];
            *(_DWORD *)uint64_t v23 = *((_DWORD *)v13 + 12);
            uint64_t v16 = v23 + 4;
            while (v15 != v17)
            {
              int v24 = *((_DWORD *)v15 - 1);
              v15 -= 4;
              *((_DWORD *)v23 - 1) = v24;
              v23 -= 4;
            }
            *a4 = v23;
            a4[1] = v16;
            a4[2] = &v22[4 * v21];
            if (v17) {
              operator delete(v17);
            }
          }
          else
          {
            *(_DWORD *)uint64_t v15 = *((_DWORD *)v12 + 12);
            uint64_t v16 = v15 + 4;
          }
          a4[1] = v16;
          int v25 = *((_DWORD *)v13 + 12);
          if (v25 == 1)
          {
            uint64_t v26 = sub_19E3793F8(a1[1]);
            size_t v27 = strlen(v26);
            uint64_t v28 = (*(uint64_t (**)(uint64_t *, const char *, size_t))(*a1 + 504))(a1, v26, v27);
            if ((*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 528))(a1, v28))
            {
              LODWORD(v38) = 13;
              sub_19E37B784((uint64_t)&v38 + 8);
              sub_19E37CA70((void *)&v38 + 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
              sub_19E37CA70((void *)&v38 + 1, (uint64_t)"(", 1);
              std::ostream::operator<<();
              sub_19E37CA70((void *)&v38 + 1, (uint64_t)") [", 3);
              sub_19E37CA70((void *)&v38 + 1, (uint64_t)"!IsUnknown(PieceToId(absl::string_view(model_->bos_piece().data())))", 68);
              sub_19E37CA70((void *)&v38 + 1, (uint64_t)"] ", 2);
              unsigned int v32 = sub_19E3793F8(a1[1]);
              sub_19E37CA70((void *)&v38 + 1, (uint64_t)v32, v33);
              sub_19E378FFC((unsigned int *)&v38, (uint64_t)a5);
              goto LABEL_40;
            }
            int v25 = *((_DWORD *)v13 + 12);
          }
          if (v25 == 2)
          {
            unsigned int v29 = sub_19E37947C(a1[1]);
            size_t v30 = strlen(v29);
            uint64_t v31 = (*(uint64_t (**)(uint64_t *, const char *, size_t))(*a1 + 504))(a1, v29, v30);
            if ((*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 528))(a1, v31))
            {
              LODWORD(v38) = 13;
              sub_19E37B784((uint64_t)&v38 + 8);
              sub_19E37CA70((void *)&v38 + 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
              sub_19E37CA70((void *)&v38 + 1, (uint64_t)"(", 1);
              std::ostream::operator<<();
              sub_19E37CA70((void *)&v38 + 1, (uint64_t)") [", 3);
              sub_19E37CA70((void *)&v38 + 1, (uint64_t)"!IsUnknown(PieceToId(absl::string_view(model_->eos_piece().data())))", 68);
              sub_19E37CA70((void *)&v38 + 1, (uint64_t)"] ", 2);
              int v34 = sub_19E37947C(a1[1]);
              sub_19E37CA70((void *)&v38 + 1, (uint64_t)v34, v35);
              sub_19E378FFC((unsigned int *)&v38, (uint64_t)a5);
LABEL_40:
              *((void *)&v38 + 1) = *MEMORY[0x1E4FBA418];
              *(void *)((char *)&v38 + *(void *)(*((void *)&v38 + 1) - 24) + 8) = *(void *)(MEMORY[0x1E4FBA418] + 24);
              *(void *)&long long v39 = MEMORY[0x1E4FBA470] + 16;
              if (SBYTE7(v44) < 0) {
                operator delete(__p[0]);
              }
              goto LABEL_42;
            }
          }
          v10 += 2;
          if (v10 == v11)
          {
            char v10 = (uint64_t *)v36;
            goto LABEL_29;
          }
        }
        LODWORD(v38) = 13;
        sub_19E37B784((uint64_t)&v38 + 8);
        sub_19E37CA70((void *)&v38 + 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_19E37CA70((void *)&v38 + 1, (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_19E37CA70((void *)&v38 + 1, (uint64_t)") [", 3);
        sub_19E37CA70((void *)&v38 + 1, (uint64_t)"it != extra_option_map.end()", 28);
        sub_19E37CA70((void *)&v38 + 1, (uint64_t)"] ", 2);
        sub_19E37CA70((void *)&v38 + 1, (uint64_t)"option \"", 8);
        sub_19E37CA70((void *)&v38 + 1, *v10, v10[1]);
        sub_19E37CA70((void *)&v38 + 1, (uint64_t)"\" is not available.", 19);
        sub_19E378FFC((unsigned int *)&v38, (uint64_t)a5);
        *((void *)&v38 + 1) = *MEMORY[0x1E4FBA418];
        *(void *)((char *)&v38 + *(void *)(*((void *)&v38 + 1) - 24) + 8) = *(void *)(MEMORY[0x1E4FBA418]
                                                                                              + 24);
        *(void *)&long long v39 = MEMORY[0x1E4FBA470] + 16;
        if (SBYTE7(v44) < 0) {
          operator delete(__p[0]);
        }
LABEL_42:
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x19F3BDC30](v46);
        if (v36)
        {
          uint64_t v37 = (uint64_t *)v36;
          operator delete(v36);
        }
      }
    }
  }
  else
  {
    sub_19E3AD4C4(a5);
  }
}

void sub_19E3852BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
}

void sub_19E385338(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
}

void *sub_19E385340@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    if (*(void *)(a1 + 16))
    {
      double result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
      if (!*a2)
      {
        sub_19E3AD4CC(a2);
        double result = (void *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
        if (!*a2)
        {
          uint64_t v6 = sub_19E3AD4CC(a2);
          return sub_19E3AD4C4(v6);
        }
      }
      return result;
    }
    unsigned int v9 = 13;
    uint64_t v8 = (void *)sub_19E37B784((uint64_t)v10);
    sub_19E37CA70(v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_19E37CA70(v10, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_19E37CA70(v10, (uint64_t)") [", 3);
    sub_19E37CA70(v10, (uint64_t)"normalizer_", 11);
    sub_19E37CA70(v10, (uint64_t)"] ", 2);
    sub_19E37CA70(v10, (uint64_t)"Normalizer is not initialized.", 30);
    sub_19E378FFC(&v9, (uint64_t)a2);
  }
  else
  {
    unsigned int v9 = 13;
    uint64_t v7 = (void *)sub_19E37B784((uint64_t)v10);
    sub_19E37CA70(v7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_19E37CA70(v10, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_19E37CA70(v10, (uint64_t)") [", 3);
    sub_19E37CA70(v10, (uint64_t)"model_", 6);
    sub_19E37CA70(v10, (uint64_t)"] ", 2);
    sub_19E37CA70(v10, (uint64_t)"Model is not initialized.", 25);
    sub_19E378FFC(&v9, (uint64_t)a2);
  }
  v10[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v10 + *(void *)(v10[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v10[1] = MEMORY[0x1E4FBA470] + 16;
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (void *)MEMORY[0x19F3BDC30](&v12);
}

void sub_19E385658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_19E385678(void *a1@<X0>, _OWORD **a2@<X1>, uint64_t *a3@<X8>)
{
  (*(void (**)(void *))(*a1 + 88))(a1);
  if (*a3) {
    return;
  }
  sub_19E3AD4CC(a3);
  uint64_t v6 = (const void *)a1[4];
  if (!v6
    || (uint64_t v7 = __dynamic_cast(v6, (const struct __class_type_info *)&unk_1EF0B5F58, (const struct __class_type_info *)&unk_1EF0B5EA8, 16)) == 0)
  {
    unsigned int v23 = 13;
    uint64_t v20 = (void *)sub_19E37B784((uint64_t)v24);
    sub_19E37CA70(v20, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_19E37CA70(v24, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_19E37CA70(v24, (uint64_t)") [", 3);
    sub_19E37CA70(v24, (uint64_t)"(model_proto = dynamic_cast<ModelProto *>(model_proto_.get()))", 62);
    sub_19E37CA70(v24, (uint64_t)"] ", 2);
    sub_19E37CA70(v24, (uint64_t)"SetVocabulary is not supported when mmap-based model is loaded.", 63);
    sub_19E378FFC(&v23, (uint64_t)a3);
LABEL_27:
    v24[0] = *(void **)MEMORY[0x1E4FBA418];
    *(void **)((char *)v24 + *(v24[0] - 3)) = *(void **)(MEMORY[0x1E4FBA418] + 24);
    v24[1] = (void *)(MEMORY[0x1E4FBA470] + 16);
    if (v25 < 0) {
      operator delete(v24[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x19F3BDC30](&v26);
    return;
  }
  uint64_t v8 = v7;
  unsigned int v9 = &unk_1E945A3E0;
  if (v7[10]) {
    unsigned int v9 = (_DWORD *)v7[10];
  }
  if ((v9[68] - 1) >= 2)
  {
    unsigned int v23 = 13;
    unint64_t v21 = (void *)sub_19E37B784((uint64_t)v24);
    sub_19E37CA70(v21, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_19E37CA70(v24, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_19E37CA70(v24, (uint64_t)") [", 3);
    sub_19E37CA70(v24, (uint64_t)"type == TrainerSpec::UNIGRAM || type == TrainerSpec::BPE", 56);
    sub_19E37CA70(v24, (uint64_t)"] ", 2);
    sub_19E37CA70(v24, (uint64_t)"Vocabulary constraint is only enabled in subword units.", 55);
    sub_19E378FFC(&v23, (uint64_t)a3);
    goto LABEL_27;
  }
  sub_19E392DC0((uint64_t)&v23, *a2, a2[1]);
  if (*((int *)v8 + 16) >= 1)
  {
    int v10 = 0;
    do
    {
      uint64_t v11 = sub_19E391AD4((uint64_t)(v8 + 7), v10);
      uint64_t v12 = v11;
      if ((*(_DWORD *)(v11 + 60) - 2) >= 3)
      {
        unint64_t v13 = *(void *)(v11 + 48) & 0xFFFFFFFFFFFFFFFELL;
        if (*(char *)(v13 + 23) < 0)
        {
          unint64_t v15 = *(void *)v13;
          uint64_t v14 = *(void *)(v13 + 8);
        }
        else
        {
          uint64_t v14 = *(unsigned __int8 *)(v13 + 23);
          unint64_t v15 = *(void *)(v11 + 48) & 0xFFFFFFFFFFFFFFFELL;
        }
        v22[0] = v15;
        v22[1] = v14;
        if (v24 == sub_19E393078((uint64_t)&v23, (uint64_t)v22)
          && ((unint64_t v16 = *(void *)(v12 + 48) & 0xFFFFFFFFFFFFFFFELL, *(char *)(v16 + 23) < 0)
            ? (unsigned __int8 *)(v18 = *(unsigned __int8 **)v16, uint64_t v17 = *(void *)(v16 + 8))
            : (uint64_t v17 = *(unsigned __int8 *)(v16 + 23),
               uint64_t v18 = (unsigned __int8 *)(*(void *)(v12 + 48) & 0xFFFFFFFFFFFFFFFELL)),
              v17 != asc_19E564BD9[(unint64_t)*v18 >> 4]))
        {
          if (!sub_19E3A0FD4(5)) {
LABEL_32:
          }
            __assert_rtn("_internal_set_type", "sentencepiece_model.pb.h", 4686, "::sentencepiece::ModelProto_SentencePiece_Type_IsValid(value)");
          int v19 = 5;
        }
        else
        {
          if (!sub_19E3A0FD4(1)) {
            goto LABEL_32;
          }
          int v19 = 1;
        }
        *(_DWORD *)(v12 + 40) |= 4u;
        *(_DWORD *)(v12 + 6sub_19E392864(&a9, 0) = v19;
      }
      ++v10;
    }
    while (v10 < *((_DWORD *)v8 + 16));
  }
  sub_19E3AD4C4(a3);
  sub_19E37CE48((uint64_t)&v23, v24[0]);
}

void sub_19E385ADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, void *a12)
{
}

void *sub_19E385B1C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  double result = (void *)(*(uint64_t (**)(void *))(*a1 + 88))(a1);
  if (!*a2)
  {
    sub_19E3AD4CC(a2);
    uint64_t v5 = (const void *)a1[4];
    if (v5
      && (uint64_t v6 = (int *)__dynamic_cast(v5, (const struct __class_type_info *)&unk_1EF0B5F58, (const struct __class_type_info *)&unk_1EF0B5EA8, 16)) != 0)
    {
      uint64_t v7 = *((void *)v6 + 9);
      if (v7) {
        uint64_t v8 = (uint64_t *)(v7 + 8);
      }
      else {
        uint64_t v8 = 0;
      }
      uint64_t v9 = v6[16];
      if (v9)
      {
        uint64_t v10 = 8 * v9;
        do
        {
          uint64_t v11 = *v8;
          if (*(_DWORD *)(*v8 + 60) == 5)
          {
            if (!sub_19E3A0FD4(1)) {
              sub_19E3957BC();
            }
            *(_DWORD *)(v11 + 40) |= 4u;
            *(_DWORD *)(v11 + 6sub_19E392864(&a9, 0) = 1;
          }
          ++v8;
          v10 -= 8;
        }
        while (v10);
      }
      return sub_19E3AD4C4(a2);
    }
    else
    {
      unsigned int v13 = 13;
      uint64_t v12 = (void *)sub_19E37B784((uint64_t)v14);
      sub_19E37CA70(v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_19E37CA70(v14, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_19E37CA70(v14, (uint64_t)") [", 3);
      sub_19E37CA70(v14, (uint64_t)"(model_proto = dynamic_cast<ModelProto *>(model_proto_.get()))", 62);
      sub_19E37CA70(v14, (uint64_t)"] ", 2);
      sub_19E37CA70(v14, (uint64_t)"ResetVocabulary is not supported when mmap-based model is loaded.", 65);
      sub_19E378FFC(&v13, (uint64_t)a2);
      v14[0] = *MEMORY[0x1E4FBA418];
      *(void *)((char *)v14 + *(void *)(v14[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
      v14[1] = MEMORY[0x1E4FBA470] + 16;
      if (v15 < 0) {
        operator delete((void *)v14[9]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return (void *)MEMORY[0x19F3BDC30](&v16);
    }
  }
  return result;
}

void sub_19E385DE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_19E385DFC()
{
}

void sub_19E3863E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  std::string __p = (void *)(v10 - 176);
  sub_19E391F24((void ***)&__p);
  std::string __p = (void *)(v10 - 152);
  sub_19E391F24((void ***)&__p);
  if (*(char *)(v10 - 105) < 0) {
    operator delete(*(void **)(v10 - 128));
  }
  uint64_t v12 = *(void *)(v10 - 104);
  *(void *)(v10 - 104) = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  _Unwind_Resume(a1);
}

BOOL sub_19E3864D4(const char *a1, uint64_t a2, uint64_t a3)
{
  sub_19E393108((uint64_t)v11);
  size_t v5 = strlen(a1);
  uint64_t v6 = sub_19E37CA70(v12, (uint64_t)a1, v5);
  if ((*((unsigned char *)v6 + *(void *)(*v6 - 24) + 32) & 5) != 0)
  {
    BOOL v7 = 0;
  }
  else
  {
    uint64_t v8 = (void *)MEMORY[0x19F3BD920](v11, a3);
    BOOL v7 = (*((unsigned char *)v8 + *(void *)(*v8 - 24) + 32) & 5) == 0;
  }
  v11[0] = *MEMORY[0x1E4FBA408];
  uint64_t v9 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v11 + *(void *)(v11[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  v12[0] = v9;
  v12[1] = MEMORY[0x1E4FBA470] + 16;
  if (v13 < 0) {
    operator delete((void *)v12[9]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x19F3BDC30](&v14);
  return v7;
}

void sub_19E3866AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E3933E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_19E3866C0@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  double result = sub_19E391FC8(a2, 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3));
  uint64_t v4 = *a1;
  if (a1[1] != *a1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    do
    {
      uint64_t v8 = (void *)(v4 + v5);
      LODWORD(v4) = *(char *)(v4 + v5 + 23);
      if ((v4 & 0x80000000) != 0)
      {
        uint64_t v9 = (void *)*v8;
        uint64_t v4 = v8[1];
      }
      else
      {
        uint64_t v4 = v4;
        uint64_t v9 = v8;
      }
      uint64_t v10 = (void *)(*result + v6);
      void *v10 = v9;
      v10[1] = v4;
      ++v7;
      uint64_t v4 = *a1;
      v6 += 16;
      v5 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3) > v7);
  }
  return result;
}

uint64_t sub_19E386764@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if (!*a5)
  {
    sub_19E3AD4CC(a5);
    if (a4)
    {
      sub_19E391F78(a4);
      sub_19E39EC6C(&v16, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 232))(a1, a2, a3, &v16);
      if (!*a5)
      {
        sub_19E3AD4CC(a5);
        if (v19) {
          uint64_t v11 = v19 + 8;
        }
        else {
          uint64_t v11 = 0;
        }
        if (v18)
        {
          unint64_t v12 = a4[1];
          uint64_t v13 = 8 * v18;
          do
          {
            uint64_t v14 = (long long *)(*(void *)(*(void *)v11 + 48) & 0xFFFFFFFFFFFFFFFELL);
            if (v12 >= a4[2])
            {
              unint64_t v12 = sub_19E393578(a4, v14);
            }
            else
            {
              sub_19E393518(a4, v14);
              v12 += 24;
            }
            a4[1] = v12;
            v11 += 8;
            v13 -= 8;
          }
          while (v13);
        }
        sub_19E3AD4C4(a5);
      }
      return sub_19E39ED94(&v16);
    }
    else
    {
      unsigned int v16 = 13;
      char v15 = (void *)sub_19E37B784((uint64_t)v17);
      sub_19E37CA70(v15, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_19E37CA70(v17, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_19E37CA70(v17, (uint64_t)") [", 3);
      sub_19E37CA70(v17, (uint64_t)"pieces", 6);
      sub_19E37CA70(v17, (uint64_t)"] ", 2);
      sub_19E37CA70(v17, (uint64_t)"output container is null", 24);
      sub_19E378FFC(&v16, (uint64_t)a5);
      v17[0] = *MEMORY[0x1E4FBA418];
      *(void *)((char *)v17 + *(void *)(v17[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
      v17[1] = MEMORY[0x1E4FBA470] + 16;
      if (v21 < 0) {
        operator delete(__p);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return MEMORY[0x19F3BDC30](&v22);
    }
  }
  return result;
}

void sub_19E386A3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_19E386A68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char **a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if (!*a5)
  {
    sub_19E3AD4CC(a5);
    if (a4)
    {
      a4[1] = *a4;
      sub_19E39EC6C(&v26, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 232))(a1, a2, a3, &v26);
      if (!*a5)
      {
        sub_19E3AD4CC(a5);
        if (v29) {
          uint64_t v11 = v29 + 8;
        }
        else {
          uint64_t v11 = 0;
        }
        if (v28)
        {
          unint64_t v12 = a4 + 2;
          uint64_t v13 = a4[1];
          uint64_t v14 = v11 + 8 * v28;
          do
          {
            int v15 = *(_DWORD *)(*(void *)v11 + 64);
            if ((unint64_t)v13 >= *v12)
            {
              uint64_t v17 = *a4;
              uint64_t v18 = (v13 - *a4) >> 2;
              unint64_t v19 = v18 + 1;
              if ((unint64_t)(v18 + 1) >> 62) {
                sub_19E37C7C4();
              }
              uint64_t v20 = *v12 - (void)v17;
              if (v20 >> 1 > v19) {
                unint64_t v19 = v20 >> 1;
              }
              if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v21 = v19;
              }
              if (v21)
              {
                uint64_t v22 = (char *)sub_19E37D7FC((uint64_t)(a4 + 2), v21);
                uint64_t v17 = *a4;
                uint64_t v13 = a4[1];
              }
              else
              {
                uint64_t v22 = 0;
              }
              unsigned int v23 = &v22[4 * v18];
              *(_DWORD *)unsigned int v23 = v15;
              unsigned int v16 = v23 + 4;
              while (v13 != v17)
              {
                int v24 = *((_DWORD *)v13 - 1);
                v13 -= 4;
                *((_DWORD *)v23 - 1) = v24;
                v23 -= 4;
              }
              *a4 = v23;
              a4[1] = v16;
              a4[2] = &v22[4 * v21];
              if (v17) {
                operator delete(v17);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v13 = v15;
              unsigned int v16 = v13 + 4;
            }
            a4[1] = v16;
            v11 += 8;
            uint64_t v13 = v16;
          }
          while (v11 != v14);
        }
        sub_19E3AD4C4(a5);
      }
      return sub_19E39ED94(&v26);
    }
    else
    {
      unsigned int v26 = 13;
      char v25 = (void *)sub_19E37B784((uint64_t)v27);
      sub_19E37CA70(v25, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_19E37CA70(v27, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_19E37CA70(v27, (uint64_t)") [", 3);
      sub_19E37CA70(v27, (uint64_t)"ids", 3);
      sub_19E37CA70(v27, (uint64_t)"] ", 2);
      sub_19E37CA70(v27, (uint64_t)"output container is null", 24);
      sub_19E378FFC(&v26, (uint64_t)a5);
      v27[0] = *MEMORY[0x1E4FBA418];
      *(void *)((char *)v27 + *(void *)(v27[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
      v27[1] = MEMORY[0x1E4FBA470] + 16;
      if (v31 < 0) {
        operator delete(__p);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return MEMORY[0x19F3BDC30](&v32);
    }
  }
  return result;
}

void sub_19E386DD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_19E386E08(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  sub_19E3866C0(a2, __p);
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)a1 + 160))(a1, __p, a3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_19E386E90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E386EAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if (!*a4)
  {
    sub_19E3AD4CC(a4);
    if (a3)
    {
      if (*(char *)(a3 + 23) < 0)
      {
        **(unsigned char **)a3 = 0;
        *(void *)(a3 + 8) = 0;
      }
      else
      {
        *(unsigned char *)a3 = 0;
        *(unsigned char *)(a3 + 23) = 0;
      }
      sub_19E39EC6C(&v10, 0);
      (*(void (**)(uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 272))(a1, a2, &v10);
      if (!*a4)
      {
        sub_19E3AD4CC(a4);
        std::string::operator=((std::string *)a3, (const std::string *)(v11[8] & 0xFFFFFFFFFFFFFFFELL));
        sub_19E3AD4C4(a4);
      }
      return sub_19E39ED94(&v10);
    }
    else
    {
      unsigned int v10 = 13;
      uint64_t v9 = (void *)sub_19E37B784((uint64_t)v11);
      sub_19E37CA70(v9, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_19E37CA70(v11, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_19E37CA70(v11, (uint64_t)") [", 3);
      sub_19E37CA70(v11, (uint64_t)"detokenized", 11);
      sub_19E37CA70(v11, (uint64_t)"] ", 2);
      sub_19E37CA70(v11, (uint64_t)"output container is null", 24);
      sub_19E378FFC(&v10, (uint64_t)a4);
      v11[0] = *MEMORY[0x1E4FBA418];
      *(void *)((char *)v11 + *(void *)(v11[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
      v11[1] = MEMORY[0x1E4FBA470] + 16;
      if (v12 < 0) {
        operator delete((void *)v11[9]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return MEMORY[0x19F3BDC30](&v13);
    }
  }
  return result;
}

void sub_19E387148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_19E387170@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if (!*a4)
  {
    sub_19E3AD4CC(a4);
    if (a3)
    {
      if (*(char *)(a3 + 23) < 0)
      {
        **(unsigned char **)a3 = 0;
        *(void *)(a3 + 8) = 0;
      }
      else
      {
        *(unsigned char *)a3 = 0;
        *(unsigned char *)(a3 + 23) = 0;
      }
      sub_19E39EC6C(&v10, 0);
      (*(void (**)(uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 280))(a1, a2, &v10);
      if (!*a4)
      {
        sub_19E3AD4CC(a4);
        std::string::operator=((std::string *)a3, (const std::string *)(v11[8] & 0xFFFFFFFFFFFFFFFELL));
        sub_19E3AD4C4(a4);
      }
      return sub_19E39ED94(&v10);
    }
    else
    {
      unsigned int v10 = 13;
      uint64_t v9 = (void *)sub_19E37B784((uint64_t)v11);
      sub_19E37CA70(v9, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_19E37CA70(v11, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_19E37CA70(v11, (uint64_t)") [", 3);
      sub_19E37CA70(v11, (uint64_t)"detokenized", 11);
      sub_19E37CA70(v11, (uint64_t)"] ", 2);
      sub_19E37CA70(v11, (uint64_t)"output container is null", 24);
      sub_19E378FFC(&v10, (uint64_t)a4);
      v11[0] = *MEMORY[0x1E4FBA418];
      *(void *)((char *)v11 + *(void *)(v11[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
      v11[1] = MEMORY[0x1E4FBA470] + 16;
      if (v12 < 0) {
        operator delete((void *)v11[9]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return MEMORY[0x19F3BDC30](&v13);
    }
  }
  return result;
}

void sub_19E38740C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_19E387434@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if (!*a6)
  {
    sub_19E3AD4CC(a6);
    if (a5)
    {
      uint64_t v13 = *a5;
      uint64_t v14 = (void **)a5[1];
      while (v14 != (void **)v13)
      {
        v14 -= 3;
        char v31 = v14;
        sub_19E391F24(&v31);
      }
      a5[1] = v13;
      sub_19E39F828(&v31, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void ***))(*(void *)a1 + 240))(a1, a2, a3, a4, &v31);
      if (!*a6)
      {
        sub_19E3AD4CC(a6);
        if (v34) {
          int v15 = (uint64_t *)(v34 + 8);
        }
        else {
          int v15 = 0;
        }
        if (v33)
        {
          unsigned int v16 = &v15[v33];
          do
          {
            uint64_t v17 = *v15;
            int v28 = 0;
            unint64_t v29 = 0;
            unint64_t v30 = 0;
            uint64_t v18 = *(void *)(v17 + 64);
            if (v18) {
              uint64_t v19 = v18 + 8;
            }
            else {
              uint64_t v19 = 0;
            }
            uint64_t v20 = *(int *)(v17 + 56);
            if (v20)
            {
              unint64_t v21 = 0;
              uint64_t v22 = 8 * v20;
              do
              {
                unint64_t v23 = *(void *)(*(void *)v19 + 48) & 0xFFFFFFFFFFFFFFFELL;
                if (v21 >= v30)
                {
                  unint64_t v21 = sub_19E393578((uint64_t *)&v28, (long long *)v23);
                }
                else
                {
                  if (*(char *)(v23 + 23) < 0)
                  {
                    sub_19E39369C((unsigned char *)v21, *(void **)v23, *(void *)(v23 + 8));
                  }
                  else
                  {
                    long long v24 = *(_OWORD *)v23;
                    *(void *)(v21 + 16) = *(void *)(v23 + 16);
                    *(_OWORD *)unint64_t v21 = v24;
                  }
                  v21 += 24;
                }
                unint64_t v29 = v21;
                v19 += 8;
                v22 -= 8;
              }
              while (v22);
            }
            unint64_t v25 = a5[1];
            if (v25 >= a5[2])
            {
              uint64_t v26 = sub_19E39379C(a5, &v28);
            }
            else
            {
              sub_19E39373C((uint64_t)a5, &v28);
              uint64_t v26 = v25 + 24;
            }
            a5[1] = v26;
            long long v38 = &v28;
            sub_19E391F24((void ***)&v38);
            ++v15;
          }
          while (v15 != v16);
        }
        sub_19E3AD4C4(a6);
      }
      return sub_19E39F8E4(&v31);
    }
    else
    {
      LODWORD(v31) = 13;
      size_t v27 = (void *)sub_19E37B784((uint64_t)v32);
      sub_19E37CA70(v27, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_19E37CA70(v32, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_19E37CA70(v32, (uint64_t)") [", 3);
      sub_19E37CA70(v32, (uint64_t)"pieces", 6);
      sub_19E37CA70(v32, (uint64_t)"] ", 2);
      sub_19E37CA70(v32, (uint64_t)"output container is null", 24);
      sub_19E378FFC((unsigned int *)&v31, (uint64_t)a6);
      v32[0] = *MEMORY[0x1E4FBA418];
      *(void *)((char *)v32 + *(void *)(v32[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
      v32[1] = MEMORY[0x1E4FBA470] + 16;
      if (v36 < 0) {
        operator delete(__p);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return MEMORY[0x19F3BDC30](&v37);
    }
  }
  return result;
}

void sub_19E3877D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_19E37908C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E387828@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if (!*a6)
  {
    sub_19E3AD4CC(a6);
    if (a5)
    {
      sub_19E3923EC(a5);
      sub_19E39F828(&v37, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *))(*(void *)a1 + 240))(a1, a2, a3, a4, &v37);
      if (!*a6)
      {
        sub_19E3AD4CC(a6);
        if (v40) {
          uint64_t v13 = (uint64_t *)(v40 + 8);
        }
        else {
          uint64_t v13 = 0;
        }
        if (v39)
        {
          int v33 = &v13[v39];
          do
          {
            uint64_t v14 = *v13;
            std::string __p = 0;
            uint64_t v35 = 0;
            char v36 = 0;
            uint64_t v15 = *(void *)(v14 + 64);
            if (v15) {
              uint64_t v16 = v15 + 8;
            }
            else {
              uint64_t v16 = 0;
            }
            uint64_t v17 = *(int *)(v14 + 56);
            if (v17)
            {
              uint64_t v18 = 0;
              uint64_t v19 = v16 + 8 * v17;
              do
              {
                int v20 = *(_DWORD *)(*(void *)v16 + 64);
                if (v18 >= v36)
                {
                  uint64_t v22 = (char *)__p;
                  uint64_t v23 = (v18 - (unsigned char *)__p) >> 2;
                  unint64_t v24 = v23 + 1;
                  if ((unint64_t)(v23 + 1) >> 62) {
                    sub_19E37C7C4();
                  }
                  uint64_t v25 = v36 - (unsigned char *)__p;
                  if ((v36 - (unsigned char *)__p) >> 1 > v24) {
                    unint64_t v24 = v25 >> 1;
                  }
                  if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v26 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v26 = v24;
                  }
                  if (v26)
                  {
                    size_t v27 = (char *)sub_19E37D7FC((uint64_t)&v36, v26);
                    uint64_t v22 = (char *)__p;
                    uint64_t v18 = v35;
                  }
                  else
                  {
                    size_t v27 = 0;
                  }
                  int v28 = &v27[4 * v23];
                  *(_DWORD *)int v28 = v20;
                  unint64_t v21 = v28 + 4;
                  while (v18 != v22)
                  {
                    int v29 = *((_DWORD *)v18 - 1);
                    v18 -= 4;
                    *((_DWORD *)v28 - 1) = v29;
                    v28 -= 4;
                  }
                  std::string __p = v28;
                  uint64_t v35 = v21;
                  char v36 = &v27[4 * v26];
                  if (v22) {
                    operator delete(v22);
                  }
                }
                else
                {
                  *(_DWORD *)uint64_t v18 = v20;
                  unint64_t v21 = v18 + 4;
                }
                uint64_t v35 = v21;
                v16 += 8;
                uint64_t v18 = v21;
              }
              while (v16 != v19);
            }
            unint64_t v30 = a5[1];
            if (v30 >= a5[2])
            {
              uint64_t v31 = sub_19E393D04(a5, (uint64_t)&__p);
            }
            else
            {
              sub_19E393CB0((uint64_t)a5, (uint64_t)&__p);
              uint64_t v31 = v30 + 24;
            }
            a5[1] = v31;
            if (__p)
            {
              uint64_t v35 = (char *)__p;
              operator delete(__p);
            }
            ++v13;
          }
          while (v13 != v33);
        }
        sub_19E3AD4C4(a6);
      }
      return sub_19E39F8E4(&v37);
    }
    else
    {
      unsigned int v37 = 13;
      uint64_t v32 = (void *)sub_19E37B784((uint64_t)v38);
      sub_19E37CA70(v32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_19E37CA70(v38, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_19E37CA70(v38, (uint64_t)") [", 3);
      sub_19E37CA70(v38, (uint64_t)"ids", 3);
      sub_19E37CA70(v38, (uint64_t)"] ", 2);
      sub_19E37CA70(v38, (uint64_t)"output container is null", 24);
      sub_19E378FFC(&v37, (uint64_t)a6);
      v38[0] = *MEMORY[0x1E4FBA418];
      *(void *)((char *)v38 + *(void *)(v38[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
      v38[1] = MEMORY[0x1E4FBA470] + 16;
      if (v42 < 0) {
        operator delete(v41);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return MEMORY[0x19F3BDC30](&v43);
    }
  }
  return result;
}

void sub_19E387C20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14)
{
}

uint64_t sub_19E387C68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X8>, float a7@<S0>)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if (!*a6)
  {
    sub_19E3AD4CC(a6);
    if (a5)
    {
      sub_19E391F78(a5);
      sub_19E39EC6C(&v20, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *, float))(*(void *)a1 + 248))(a1, a2, a3, a4, &v20, a7);
      if (!*a6)
      {
        sub_19E3AD4CC(a6);
        if (v23) {
          uint64_t v15 = v23 + 8;
        }
        else {
          uint64_t v15 = 0;
        }
        if (v22)
        {
          unint64_t v16 = a5[1];
          uint64_t v17 = 8 * v22;
          do
          {
            uint64_t v18 = (long long *)(*(void *)(*(void *)v15 + 48) & 0xFFFFFFFFFFFFFFFELL);
            if (v16 >= a5[2])
            {
              unint64_t v16 = sub_19E393578(a5, v18);
            }
            else
            {
              sub_19E393518(a5, v18);
              v16 += 24;
            }
            a5[1] = v16;
            v15 += 8;
            v17 -= 8;
          }
          while (v17);
        }
        sub_19E3AD4C4(a6);
      }
      return sub_19E39ED94(&v20);
    }
    else
    {
      unsigned int v20 = 13;
      uint64_t v19 = (void *)sub_19E37B784((uint64_t)v21);
      sub_19E37CA70(v19, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_19E37CA70(v21, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_19E37CA70(v21, (uint64_t)") [", 3);
      sub_19E37CA70(v21, (uint64_t)"pieces", 6);
      sub_19E37CA70(v21, (uint64_t)"] ", 2);
      sub_19E37CA70(v21, (uint64_t)"output container is null", 24);
      sub_19E378FFC(&v20, (uint64_t)a6);
      v21[0] = *MEMORY[0x1E4FBA418];
      *(void *)((char *)v21 + *(void *)(v21[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
      v21[1] = MEMORY[0x1E4FBA470] + 16;
      if (v25 < 0) {
        operator delete(__p);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return MEMORY[0x19F3BDC30](&v26);
    }
  }
  return result;
}

void sub_19E387F60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_19E387F8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char **a5@<X4>, uint64_t *a6@<X8>, float a7@<S0>)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if (!*a6)
  {
    sub_19E3AD4CC(a6);
    if (a5)
    {
      a5[1] = *a5;
      sub_19E39EC6C(&v30, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *, float))(*(void *)a1 + 248))(a1, a2, a3, a4, &v30, a7);
      if (!*a6)
      {
        sub_19E3AD4CC(a6);
        if (v33) {
          uint64_t v15 = v33 + 8;
        }
        else {
          uint64_t v15 = 0;
        }
        if (v32)
        {
          unint64_t v16 = a5 + 2;
          uint64_t v17 = a5[1];
          uint64_t v18 = v15 + 8 * v32;
          do
          {
            int v19 = *(_DWORD *)(*(void *)v15 + 64);
            if ((unint64_t)v17 >= *v16)
            {
              unint64_t v21 = *a5;
              uint64_t v22 = (v17 - *a5) >> 2;
              unint64_t v23 = v22 + 1;
              if ((unint64_t)(v22 + 1) >> 62) {
                sub_19E37C7C4();
              }
              uint64_t v24 = *v16 - (void)v21;
              if (v24 >> 1 > v23) {
                unint64_t v23 = v24 >> 1;
              }
              if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v25 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v25 = v23;
              }
              if (v25)
              {
                uint64_t v26 = (char *)sub_19E37D7FC((uint64_t)(a5 + 2), v25);
                unint64_t v21 = *a5;
                uint64_t v17 = a5[1];
              }
              else
              {
                uint64_t v26 = 0;
              }
              size_t v27 = &v26[4 * v22];
              *(_DWORD *)size_t v27 = v19;
              unsigned int v20 = v27 + 4;
              while (v17 != v21)
              {
                int v28 = *((_DWORD *)v17 - 1);
                v17 -= 4;
                *((_DWORD *)v27 - 1) = v28;
                v27 -= 4;
              }
              *a5 = v27;
              a5[1] = v20;
              a5[2] = &v26[4 * v25];
              if (v21) {
                operator delete(v21);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v17 = v19;
              unsigned int v20 = v17 + 4;
            }
            a5[1] = v20;
            v15 += 8;
            uint64_t v17 = v20;
          }
          while (v15 != v18);
        }
        sub_19E3AD4C4(a6);
      }
      return sub_19E39ED94(&v30);
    }
    else
    {
      unsigned int v30 = 13;
      int v29 = (void *)sub_19E37B784((uint64_t)v31);
      sub_19E37CA70(v29, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_19E37CA70(v31, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_19E37CA70(v31, (uint64_t)") [", 3);
      sub_19E37CA70(v31, (uint64_t)"ids", 3);
      sub_19E37CA70(v31, (uint64_t)"] ", 2);
      sub_19E37CA70(v31, (uint64_t)"output container is null", 24);
      sub_19E378FFC(&v30, (uint64_t)a6);
      v31[0] = *MEMORY[0x1E4FBA418];
      *(void *)((char *)v31 + *(void *)(v31[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
      v31[1] = MEMORY[0x1E4FBA470] + 16;
      if (v35 < 0) {
        operator delete(__p);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return MEMORY[0x19F3BDC30](&v36);
    }
  }
  return result;
}

void sub_19E388314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_19E388344@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X6>, uint64_t *a8@<X8>, float a9@<S0>)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if (!*a8)
  {
    sub_19E3AD4CC(a8);
    if (a7)
    {
      uint64_t v19 = *a7;
      unsigned int v20 = (void **)a7[1];
      while (v20 != (void **)v19)
      {
        v20 -= 4;
        int v39 = v20;
        sub_19E391F24(&v39);
      }
      a7[1] = v19;
      sub_19E39F828(&v39, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void ***, float))(*(void *)a1 + 256))(a1, a2, a3, a4, a5, a6, &v39, a9);
      if (!*a8)
      {
        sub_19E3AD4CC(a8);
        unint64_t v21 = (long long *)*a7;
        uint64_t v22 = (long long *)a7[1];
        while (v22 != v21)
        {
          v22 -= 2;
          uint64_t v36 = v22;
          sub_19E391F24((void ***)&v36);
        }
        a7[1] = (uint64_t)v21;
        sub_19E3887BC(a7, v41);
        if (v42) {
          uint64_t v24 = (uint64_t *)(v42 + 8);
        }
        else {
          uint64_t v24 = 0;
        }
        if (v41)
        {
          unint64_t v25 = &v24[v41];
          do
          {
            uint64_t v26 = *v24;
            uint64_t v36 = 0;
            std::string __dst = 0;
            unint64_t v38 = 0;
            sub_19E388850((uint64_t *)&v36, *(int *)(v26 + 56));
            uint64_t v27 = *(void *)(v26 + 64);
            if (v27) {
              uint64_t v28 = v27 + 8;
            }
            else {
              uint64_t v28 = 0;
            }
            uint64_t v29 = *(int *)(v26 + 56);
            if (v29)
            {
              unint64_t v30 = (unint64_t)__dst;
              uint64_t v31 = 8 * v29;
              do
              {
                unint64_t v32 = *(void *)(*(void *)v28 + 48) & 0xFFFFFFFFFFFFFFFELL;
                if (v30 >= v38)
                {
                  unint64_t v30 = sub_19E393578((uint64_t *)&v36, (long long *)v32);
                }
                else
                {
                  if (*(char *)(v32 + 23) < 0)
                  {
                    sub_19E39369C((unsigned char *)v30, *(void **)v32, *(void *)(v32 + 8));
                  }
                  else
                  {
                    long long v33 = *(_OWORD *)v32;
                    *(void *)(v30 + 16) = *(void *)(v32 + 16);
                    *(_OWORD *)unint64_t v30 = v33;
                  }
                  v30 += 24;
                }
                std::string __dst = (void *)v30;
                v28 += 8;
                v31 -= 8;
              }
              while (v31);
            }
            LODWORD(v46[0]) = *(_DWORD *)(v26 + 80);
            unint64_t v34 = a7[1];
            if (v34 >= a7[2])
            {
              uint64_t v35 = sub_19E3943A4(a7, &v36, v46);
            }
            else
            {
              sub_19E394330((uint64_t)a7, &v36, (float *)v46);
              uint64_t v35 = v34 + 32;
            }
            a7[1] = v35;
            v46[0] = (void **)&v36;
            sub_19E391F24(v46);
            ++v24;
          }
          while (v24 != v25);
        }
        sub_19E3AD4C4(a8);
      }
      return sub_19E39F8E4(&v39);
    }
    else
    {
      LODWORD(v39) = 13;
      unint64_t v23 = (void *)sub_19E37B784((uint64_t)v40);
      sub_19E37CA70(v23, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_19E37CA70(v40, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_19E37CA70(v40, (uint64_t)") [", 3);
      sub_19E37CA70(v40, (uint64_t)"pieces", 6);
      sub_19E37CA70(v40, (uint64_t)"] ", 2);
      sub_19E37CA70(v40, (uint64_t)"output container is null", 24);
      sub_19E378FFC((unsigned int *)&v39, (uint64_t)a8);
      v40[0] = *MEMORY[0x1E4FBA418];
      *(void *)((char *)v40 + *(void *)(v40[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
      v40[1] = MEMORY[0x1E4FBA470] + 16;
      if (v44 < 0) {
        operator delete(__p);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return MEMORY[0x19F3BDC30](&v45);
    }
  }
  return result;
}

void sub_19E388768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_19E37908C((uint64_t)va);
  _Unwind_Resume(a1);
}

void **sub_19E3887BC(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 5)
  {
    if (a2 >> 59) {
      sub_19E37C7C4();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_19E394140((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 32 * v6;
    sub_19E3940C8(a1, v7);
    return sub_19E3942A8(v7);
  }
  return result;
}

void sub_19E38883C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E3942A8((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E388850(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      sub_19E37C7C4();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_19E37C7DC(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 24 * v6;
    sub_19E392B98(a1, v7);
    return sub_19E392D30((uint64_t)v7);
  }
  return result;
}

void sub_19E3888F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E392D30((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E388904@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X6>, uint64_t *a8@<X8>, float a9@<S0>)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if (!*a8)
  {
    sub_19E3AD4CC(a8);
    if (a7)
    {
      sub_19E37C900(a7);
      sub_19E39F828(&v45, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *, float))(*(void *)a1 + 256))(a1, a2, a3, a4, a5, a6, &v45, a9);
      if (!*a8)
      {
        int v39 = a8;
        sub_19E3AD4CC(a8);
        sub_19E37C900(a7);
        sub_19E388DB4(a7, v47);
        if (v48) {
          uint64_t v19 = (uint64_t *)(v48 + 8);
        }
        else {
          uint64_t v19 = 0;
        }
        if (v47)
        {
          uint64_t v40 = &v19[v47];
          do
          {
            uint64_t v20 = *v19;
            std::string __p = 0;
            uint64_t v43 = 0;
            char v44 = 0;
            sub_19E388E48(&__p, *(int *)(v20 + 56));
            uint64_t v21 = *(void *)(v20 + 64);
            if (v21) {
              uint64_t v22 = v21 + 8;
            }
            else {
              uint64_t v22 = 0;
            }
            uint64_t v23 = *(int *)(v20 + 56);
            if (v23)
            {
              uint64_t v24 = v22 + 8 * v23;
              unint64_t v25 = v43;
              do
              {
                int v26 = *(_DWORD *)(*(void *)v22 + 64);
                if (v25 >= v44)
                {
                  uint64_t v28 = (char *)__p;
                  uint64_t v29 = (v25 - (unsigned char *)__p) >> 2;
                  unint64_t v30 = v29 + 1;
                  if ((unint64_t)(v29 + 1) >> 62) {
                    sub_19E37C7C4();
                  }
                  uint64_t v31 = v44 - (unsigned char *)__p;
                  if ((v44 - (unsigned char *)__p) >> 1 > v30) {
                    unint64_t v30 = v31 >> 1;
                  }
                  if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v32 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v32 = v30;
                  }
                  if (v32)
                  {
                    long long v33 = (char *)sub_19E37D7FC((uint64_t)&v44, v32);
                    uint64_t v28 = (char *)__p;
                    unint64_t v25 = v43;
                  }
                  else
                  {
                    long long v33 = 0;
                  }
                  unint64_t v34 = &v33[4 * v29];
                  *(_DWORD *)unint64_t v34 = v26;
                  uint64_t v27 = v34 + 4;
                  while (v25 != v28)
                  {
                    int v35 = *((_DWORD *)v25 - 1);
                    v25 -= 4;
                    *((_DWORD *)v34 - 1) = v35;
                    v34 -= 4;
                  }
                  std::string __p = v34;
                  uint64_t v43 = v27;
                  char v44 = &v33[4 * v32];
                  if (v28) {
                    operator delete(v28);
                  }
                }
                else
                {
                  *(_DWORD *)unint64_t v25 = v26;
                  uint64_t v27 = v25 + 4;
                }
                uint64_t v43 = v27;
                v22 += 8;
                unint64_t v25 = v27;
              }
              while (v22 != v24);
            }
            int v41 = *(_DWORD *)(v20 + 80);
            unint64_t v36 = a7[1];
            if (v36 >= a7[2])
            {
              uint64_t v37 = sub_19E394754(a7, (uint64_t)&__p, &v41);
            }
            else
            {
              sub_19E3946EC((uint64_t)a7, (uint64_t)&__p, (float *)&v41);
              uint64_t v37 = v36 + 32;
            }
            a7[1] = v37;
            if (__p)
            {
              uint64_t v43 = (char *)__p;
              operator delete(__p);
            }
            ++v19;
          }
          while (v19 != v40);
        }
        sub_19E3AD4C4(v39);
      }
      return sub_19E39F8E4(&v45);
    }
    else
    {
      unsigned int v45 = 13;
      unint64_t v38 = (void *)sub_19E37B784((uint64_t)v46);
      sub_19E37CA70(v38, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_19E37CA70(v46, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_19E37CA70(v46, (uint64_t)") [", 3);
      sub_19E37CA70(v46, (uint64_t)"ids", 3);
      sub_19E37CA70(v46, (uint64_t)"] ", 2);
      sub_19E37CA70(v46, (uint64_t)"output container is null", 24);
      sub_19E378FFC(&v45, (uint64_t)a8);
      v46[0] = *MEMORY[0x1E4FBA418];
      *(void *)((char *)v46 + *(void *)(v46[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
      v46[1] = MEMORY[0x1E4FBA470] + 16;
      if (v50 < 0) {
        operator delete(v49);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return MEMORY[0x19F3BDC30](&v51);
    }
  }
  return result;
}

void sub_19E388D68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16)
{
}

uint64_t sub_19E388DB4(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 5)
  {
    if (a2 >> 59) {
      sub_19E37C7C4();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_19E394140(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 32 * v6;
    sub_19E3944B4(a1, v7);
    return sub_19E394658((uint64_t)v7);
  }
  return result;
}

void sub_19E388E34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E394658((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19E388E48(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 2)
  {
    if (a2 >> 62) {
      sub_19E37C7C4();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)sub_19E37D7FC(v3, a2);
    unint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    uint64_t v9 = &v6[4 * v8];
    unsigned int v10 = (char *)*a1;
    uint64_t v11 = (char *)a1[1];
    char v12 = v7;
    if (v11 != *a1)
    {
      char v12 = v7;
      do
      {
        int v13 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v12 - 1) = v13;
        v12 -= 4;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void *sub_19E388EF0@<X0>(uint64_t *a1@<X0>, char *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X4>, uint64_t *a5@<X5>, uint64_t *a6@<X6>, uint64_t a7@<X7>, uint64_t *a8@<X8>)
{
  uint64_t v10 = *a6;
  uint64_t v110 = a6[1];
  if (*a6 != v110)
  {
    uint64_t v11 = a5;
    unint64_t v12 = 0;
    char v13 = 0;
    uint64_t v112 = a7 + 48;
    while (1)
    {
      size_t v14 = *(void *)(v10 + 8);
      if (!v14)
      {
        LODWORD(__p[0]) = 13;
        CFNumberRef v97 = (void *)sub_19E37B784((uint64_t)&__p[1]);
        sub_19E37CA70(v97, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_19E37CA70(&__p[1], (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_19E37CA70(&__p[1], (uint64_t)") [", 3);
        sub_19E37CA70(&__p[1], (uint64_t)"!w.empty()", 10);
        sub_19E37CA70(&__p[1], (uint64_t)"] ", 2);
        sub_19E37CA70(&__p[1], (uint64_t)"Empty piece is not allowed.", 27);
        sub_19E378FFC((unsigned int *)__p, (uint64_t)a8);
        goto LABEL_137;
      }
      uint64_t v15 = *(unsigned __int8 **)v10;
      uint64_t v16 = *(unsigned int *)(v10 + 16);
      int v111 = (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 528))(a1, v16);
      if ((*(unsigned int (**)(uint64_t *, uint64_t))(*a1 + 536))(a1, v16))
      {
        uint64_t v17 = *(int **)(a7 + 64);
        if (v17)
        {
          uint64_t v18 = *(int *)(a7 + 56);
          int v19 = *v17;
          if ((int)v18 < *v17)
          {
            *(_DWORD *)(a7 + 56) = v18 + 1;
            uint64_t v20 = *(void *)&v17[2 * v18 + 2];
LABEL_58:
            *(_DWORD *)(v20 + 40) |= 1u;
            sub_19E382294(__p, v15, v14);
            uint64_t v53 = *(void *)(v20 + 8);
            int64_t v54 = (void *)(v53 & 0xFFFFFFFFFFFFFFFELL);
            if (v53) {
              int64_t v54 = (void *)*v54;
            }
            sub_19E3AE70C((uint64_t *)(v20 + 48), (long long *)__p, (uint64_t)v54);
            if (SHIBYTE(v117) < 0) {
              operator delete(__p[0]);
            }
            int v55 = *(_DWORD *)(v20 + 40);
            *(_DWORD *)(v20 + 64) = v16;
            uint64_t v56 = *(void *)(*v11 + 8 * v12);
            *(_DWORD *)(v20 + 68) = v56;
            *(_DWORD *)(v20 + 4sub_19E392864(&a9, 0) = v55 | 0x1C;
            goto LABEL_83;
          }
          if (v19 != *(_DWORD *)(a7 + 60))
          {
LABEL_57:
            int *v17 = v19 + 1;
            uint64_t v20 = sub_19E3A0030(*(void *)(a7 + 48));
            uint64_t v51 = *(void *)(a7 + 64);
            uint64_t v52 = *(int *)(a7 + 56);
            *(_DWORD *)(a7 + 56) = v52 + 1;
            *(void *)(v51 + 8 * v52 + 8) = v20;
            goto LABEL_58;
          }
        }
        else
        {
          int v19 = *(_DWORD *)(a7 + 60);
        }
        sub_19E3C232C(v112, v19 + 1);
        uint64_t v17 = *(int **)(a7 + 64);
        int v19 = *v17;
        goto LABEL_57;
      }
      uint64_t v21 = *v11;
      uint64_t v22 = v11[1] - *v11;
      if (v12 >= v22 >> 3)
      {
        LODWORD(__p[0]) = 13;
        CFNumberRef v98 = (void *)sub_19E37B784((uint64_t)&__p[1]);
        sub_19E37CA70(v98, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_19E37CA70(&__p[1], (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_19E37CA70(&__p[1], (uint64_t)") [", 3);
        sub_19E37CA70(&__p[1], (uint64_t)"(begin) < (norm_to_orig.size())", 31);
        sub_19E37CA70(&__p[1], (uint64_t)"] ", 2);
        sub_19E378FFC((unsigned int *)__p, (uint64_t)a8);
        goto LABEL_137;
      }
      size_t v23 = v14 + v12;
      if (v14 + v12 >= v22 >> 3)
      {
        LODWORD(__p[0]) = 13;
        CFTypeID v99 = (void *)sub_19E37B784((uint64_t)&__p[1]);
        sub_19E37CA70(v99, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_19E37CA70(&__p[1], (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_19E37CA70(&__p[1], (uint64_t)") [", 3);
        sub_19E37CA70(&__p[1], (uint64_t)"(end) < (norm_to_orig.size())", 29);
        sub_19E37CA70(&__p[1], (uint64_t)"] ", 2);
        sub_19E378FFC((unsigned int *)__p, (uint64_t)a8);
        goto LABEL_137;
      }
      size_t v24 = *(void *)(v21 + 8 * v12);
      if (v24 > a3)
      {
        LODWORD(__p[0]) = 13;
        unint64_t v100 = (void *)sub_19E37B784((uint64_t)&__p[1]);
        sub_19E37CA70(v100, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_19E37CA70(&__p[1], (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_19E37CA70(&__p[1], (uint64_t)") [", 3);
        sub_19E37CA70(&__p[1], (uint64_t)"(orig_begin) <= (input.size())", 30);
        sub_19E37CA70(&__p[1], (uint64_t)"] ", 2);
        sub_19E378FFC((unsigned int *)__p, (uint64_t)a8);
        goto LABEL_137;
      }
      size_t v25 = *(void *)(v21 + 8 * v23);
      if (v25 > a3)
      {
        LODWORD(__p[0]) = 13;
        CFNumberRef v101 = (void *)sub_19E37B784((uint64_t)&__p[1]);
        sub_19E37CA70(v101, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_19E37CA70(&__p[1], (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_19E37CA70(&__p[1], (uint64_t)") [", 3);
        sub_19E37CA70(&__p[1], (uint64_t)"(orig_end) <= (input.size())", 28);
        sub_19E37CA70(&__p[1], (uint64_t)"] ", 2);
        sub_19E378FFC((unsigned int *)__p, (uint64_t)a8);
        goto LABEL_137;
      }
      size_t v26 = v25 - v24;
      if (v25 < v24)
      {
        LODWORD(__p[0]) = 13;
        CFNumberRef v102 = (void *)sub_19E37B784((uint64_t)&__p[1]);
        sub_19E37CA70(v102, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_19E37CA70(&__p[1], (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_19E37CA70(&__p[1], (uint64_t)") [", 3);
        sub_19E37CA70(&__p[1], (uint64_t)"(orig_begin) <= (orig_end)", 26);
        sub_19E37CA70(&__p[1], (uint64_t)"] ", 2);
        sub_19E378FFC((unsigned int *)__p, (uint64_t)a8);
        goto LABEL_137;
      }
      if (a3 >= v24) {
        size_t v27 = v24;
      }
      else {
        size_t v27 = a3;
      }
      uint64_t v28 = &a2[v27];
      size_t v29 = a3 - v27;
      if (v29 < v26) {
        size_t v26 = v29;
      }
      __src = v28;
      size_t __len = v26;
      if (v111)
      {
        if ((*(unsigned int (**)(uint64_t))(*(void *)a1[1] + 184))(a1[1]))
        {
          while (1)
          {
            unsigned __int8 v31 = *v15++;
            unsigned __int8 v30 = v31;
            unint64_t v32 = *(int **)(a7 + 64);
            if (!v32) {
              break;
            }
            uint64_t v33 = *(int *)(a7 + 56);
            int v34 = *v32;
            if ((int)v33 >= *v32)
            {
              if (v34 == *(_DWORD *)(a7 + 60))
              {
LABEL_25:
                sub_19E3C232C(v112, v34 + 1);
                unint64_t v32 = *(int **)(a7 + 64);
                int v34 = *v32;
              }
              *unint64_t v32 = v34 + 1;
              uint64_t v35 = sub_19E3A0030(*(void *)(a7 + 48));
              uint64_t v36 = *(void *)(a7 + 64);
              uint64_t v37 = *(int *)(a7 + 56);
              *(_DWORD *)(a7 + 56) = v37 + 1;
              *(void *)(v36 + 8 * v37 + 8) = v35;
              goto LABEL_27;
            }
            *(_DWORD *)(a7 + 56) = v33 + 1;
            uint64_t v35 = *(void *)&v32[2 * v33 + 2];
LABEL_27:
            sub_19E37AE78(v30, (uint64_t)&__dst);
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              p_dst = &__dst;
            }
            else {
              p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
            }
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type size = __dst.__r_.__value_.__l.__size_;
            }
            int v40 = (*(uint64_t (**)(uint64_t, std::string *, std::string::size_type))(*(void *)a1[1] + 112))(a1[1], p_dst, size);
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              int v41 = &__dst;
            }
            else {
              int v41 = (std::string *)__dst.__r_.__value_.__r.__words[0];
            }
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v42 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v42 = __dst.__r_.__value_.__l.__size_;
            }
            *(_DWORD *)(v35 + 40) |= 1u;
            sub_19E382294(__p, v41, v42);
            uint64_t v43 = *(void *)(v35 + 8);
            char v44 = (void *)(v43 & 0xFFFFFFFFFFFFFFFELL);
            if (v43) {
              char v44 = (void *)*v44;
            }
            sub_19E3AE70C((uint64_t *)(v35 + 48), (long long *)__p, (uint64_t)v44);
            if (SHIBYTE(v117) < 0) {
              operator delete(__p[0]);
            }
            int v45 = *(_DWORD *)(v35 + 40);
            *(_DWORD *)(v35 + 4sub_19E392864(&a9, 0) = v45 | 4;
            *(_DWORD *)(v35 + 64) = v40;
            if (v14 == 1)
            {
              *(_DWORD *)(v35 + 4sub_19E392864(&a9, 0) = v45 | 6;
              sub_19E382294(__p, __src, __len);
              uint64_t v46 = *(void *)(v35 + 8);
              int v47 = (void *)(v46 & 0xFFFFFFFFFFFFFFFELL);
              if (v46) {
                int v47 = (void *)*v47;
              }
              sub_19E3AE70C((uint64_t *)(v35 + 56), (long long *)__p, (uint64_t)v47);
              if (SHIBYTE(v117) < 0) {
                operator delete(__p[0]);
              }
              int v48 = *(_DWORD *)(v35 + 40);
              *(_DWORD *)(v35 + 68) = v24;
              int v49 = v48 | 0x18;
              int v50 = v25;
            }
            else
            {
              *(_DWORD *)(v35 + 68) = v24;
              int v49 = v45 | 0x1C;
              int v50 = v24;
            }
            *(_DWORD *)(v35 + 4sub_19E392864(&a9, 0) = v49;
            *(_DWORD *)(v35 + 72) = v50;
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__dst.__r_.__value_.__l.__data_);
            }
            if (!--v14)
            {
              unint64_t v12 = v23;
              uint64_t v11 = a5;
              goto LABEL_84;
            }
          }
          int v34 = *(_DWORD *)(a7 + 60);
          goto LABEL_25;
        }
        if (v13)
        {
          uint64_t v57 = sub_19E39252C(v112, *(_DWORD *)(a7 + 56) - 1);
          if (v14 > 0x7FFFFFFFFFFFFFF7) {
            goto LABEL_141;
          }
          uint64_t v20 = v57;
          uint64_t v58 = *(void *)(v57 + 48);
          CFNumberRef v104 = (uint64_t *)(v57 + 48);
          if (v14 >= 0x17)
          {
            uint64_t v71 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v14 | 7) != 0x17) {
              uint64_t v71 = v14 | 7;
            }
            uint64_t v103 = v71 + 1;
            CFTypeID v59 = (std::string *)operator new(v71 + 1);
            __dst.__r_.__value_.__l.__size_ = v14;
            __dst.__r_.__value_.__r.__words[2] = v103 | 0x8000000000000000;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v59;
          }
          else
          {
            *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v14;
            CFTypeID v59 = &__dst;
          }
          unint64_t v72 = v58 & 0xFFFFFFFFFFFFFFFELL;
          memmove(v59, v15, v14);
          v59->__r_.__value_.__s.__data_[v14] = 0;
          int v73 = *(char *)(v72 + 23);
          if (v73 >= 0) {
            CFTypeID v74 = (const std::string::value_type *)v72;
          }
          else {
            CFTypeID v74 = *(const std::string::value_type **)v72;
          }
          if (v73 >= 0) {
            std::string::size_type v75 = *(unsigned __int8 *)(v72 + 23);
          }
          else {
            std::string::size_type v75 = *(void *)(v72 + 8);
          }
          uint64_t v76 = std::string::insert(&__dst, 0, v74, v75);
          long long v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
          uint64_t v117 = v76->__r_.__value_.__r.__words[2];
          *(_OWORD *)std::string __p = v77;
          v76->__r_.__value_.__l.__size_ = 0;
          v76->__r_.__value_.__r.__words[2] = 0;
          v76->__r_.__value_.__r.__words[0] = 0;
          *(_DWORD *)(v20 + 40) |= 1u;
          uint64_t v78 = *(void *)(v20 + 8);
          uint64_t v79 = (void *)(v78 & 0xFFFFFFFFFFFFFFFELL);
          size_t v80 = __len;
          if (v78) {
            uint64_t v79 = (void *)*v79;
          }
          sub_19E3AE70C(v104, (long long *)__p, (uint64_t)v79);
          if (SHIBYTE(v117) < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__dst.__r_.__value_.__l.__data_);
          }
          if (__len > 0x7FFFFFFFFFFFFFF7) {
LABEL_141:
          }
            sub_19E37C958();
          uint64_t v81 = *(void *)(v20 + 56);
          if (__len >= 0x17)
          {
            uint64_t v83 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((__len | 7) != 0x17) {
              uint64_t v83 = __len | 7;
            }
            uint64_t v84 = v83 + 1;
            std::string::size_type v82 = (std::string *)operator new(v83 + 1);
            unint64_t v85 = v84 | 0x8000000000000000;
            size_t v80 = __len;
            __dst.__r_.__value_.__l.__size_ = __len;
            __dst.__r_.__value_.__r.__words[2] = v85;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v82;
          }
          else
          {
            *((unsigned char *)&__dst.__r_.__value_.__s + 23) = __len;
            std::string::size_type v82 = &__dst;
            if (!__len) {
              goto LABEL_109;
            }
          }
          memmove(v82, __src, v80);
LABEL_109:
          v82->__r_.__value_.__s.__data_[v80] = 0;
          int v86 = *(char *)((v81 & 0xFFFFFFFFFFFFFFFELL) + 23);
          if (v86 >= 0) {
            CFNumberRef v87 = (const std::string::value_type *)(v81 & 0xFFFFFFFFFFFFFFFELL);
          }
          else {
            CFNumberRef v87 = *(const std::string::value_type **)(v81 & 0xFFFFFFFFFFFFFFFELL);
          }
          if (v86 >= 0) {
            std::string::size_type v88 = *(unsigned __int8 *)((v81 & 0xFFFFFFFFFFFFFFFELL) + 23);
          }
          else {
            std::string::size_type v88 = *(void *)((v81 & 0xFFFFFFFFFFFFFFFELL) + 8);
          }
          CFTypeID v89 = std::string::insert(&__dst, 0, v87, v88);
          long long v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
          uint64_t v117 = v89->__r_.__value_.__r.__words[2];
          *(_OWORD *)std::string __p = v90;
          v89->__r_.__value_.__l.__size_ = 0;
          v89->__r_.__value_.__r.__words[2] = 0;
          v89->__r_.__value_.__r.__words[0] = 0;
          *(_DWORD *)(v20 + 40) |= 2u;
          uint64_t v91 = *(void *)(v20 + 8);
          CFTypeID v92 = (void *)(v91 & 0xFFFFFFFFFFFFFFFELL);
          uint64_t v11 = a5;
          if (v91) {
            CFTypeID v92 = (void *)*v92;
          }
          sub_19E3AE70C((uint64_t *)(v20 + 56), (long long *)__p, (uint64_t)v92);
          if (SHIBYTE(v117) < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__dst.__r_.__value_.__l.__data_);
          }
          *(_DWORD *)(v20 + 40) |= 0x10u;
          LODWORD(v56) = v25;
          unint64_t v12 = v23;
          goto LABEL_83;
        }
      }
      uint64_t v60 = *(int **)(a7 + 64);
      if (!v60) {
        break;
      }
      uint64_t v61 = *(int *)(a7 + 56);
      int v62 = *v60;
      if ((int)v61 >= *v60)
      {
        if (v62 == *(_DWORD *)(a7 + 60))
        {
LABEL_72:
          sub_19E3C232C(v112, v62 + 1);
          uint64_t v60 = *(int **)(a7 + 64);
          int v62 = *v60;
        }
        *uint64_t v60 = v62 + 1;
        uint64_t v20 = sub_19E3A0030(*(void *)(a7 + 48));
        uint64_t v63 = *(void *)(a7 + 64);
        uint64_t v64 = *(int *)(a7 + 56);
        *(_DWORD *)(a7 + 56) = v64 + 1;
        *(void *)(v63 + 8 * v64 + 8) = v20;
        goto LABEL_74;
      }
      *(_DWORD *)(a7 + 56) = v61 + 1;
      uint64_t v20 = *(void *)&v60[2 * v61 + 2];
LABEL_74:
      *(_DWORD *)(v20 + 40) |= 1u;
      sub_19E382294(__p, v15, v14);
      uint64_t v65 = *(void *)(v20 + 8);
      CFNumberRef v66 = (void *)(v65 & 0xFFFFFFFFFFFFFFFELL);
      if (v65) {
        CFNumberRef v66 = (void *)*v66;
      }
      sub_19E3AE70C((uint64_t *)(v20 + 48), (long long *)__p, (uint64_t)v66);
      if (SHIBYTE(v117) < 0) {
        operator delete(__p[0]);
      }
      int v67 = *(_DWORD *)(v20 + 40);
      *(_DWORD *)(v20 + 64) = v16;
      *(_DWORD *)(v20 + 4sub_19E392864(&a9, 0) = v67 | 6;
      sub_19E382294(__p, __src, __len);
      uint64_t v68 = *(void *)(v20 + 8);
      std::string::size_type v69 = (void *)(v68 & 0xFFFFFFFFFFFFFFFELL);
      if (v68) {
        std::string::size_type v69 = (void *)*v69;
      }
      sub_19E3AE70C((uint64_t *)(v20 + 56), (long long *)__p, (uint64_t)v69);
      if (SHIBYTE(v117) < 0) {
        operator delete(__p[0]);
      }
      int v70 = *(_DWORD *)(v20 + 40);
      *(_DWORD *)(v20 + 68) = v24;
      *(_DWORD *)(v20 + 4sub_19E392864(&a9, 0) = v70 | 0x18;
      LODWORD(v56) = v25;
      unint64_t v12 = v23;
      uint64_t v11 = a5;
LABEL_83:
      *(_DWORD *)(v20 + 72) = v56;
      size_t v23 = v12;
LABEL_84:
      v10 += 24;
      char v13 = v111;
      if (v10 == v110) {
        goto LABEL_123;
      }
    }
    int v62 = *(_DWORD *)(a7 + 60);
    goto LABEL_72;
  }
  size_t v23 = 0;
LABEL_123:
  if (v23 == a4)
  {
    uint64_t result = sub_19E389D64(a1, (uint64_t)(a1 + 5), a7, a8);
    if (!*a8)
    {
      sub_19E3AD4CC(a8);
      *(_DWORD *)(a7 + 40) |= 1u;
      sub_19E382294(__p, a2, a3);
      uint64_t v94 = *(void *)(a7 + 8);
      CFTypeID v95 = (void *)(v94 & 0xFFFFFFFFFFFFFFFELL);
      if (v94) {
        CFTypeID v95 = (void *)*v95;
      }
      sub_19E3AE70C((uint64_t *)(a7 + 72), (long long *)__p, (uint64_t)v95);
      if (SHIBYTE(v117) < 0) {
        operator delete(__p[0]);
      }
      return sub_19E3AD4C4(a8);
    }
    return result;
  }
  LODWORD(__p[0]) = 13;
  uint64_t v96 = (void *)sub_19E37B784((uint64_t)&__p[1]);
  sub_19E37CA70(v96, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
  sub_19E37CA70(&__p[1], (uint64_t)"(", 1);
  std::ostream::operator<<();
  sub_19E37CA70(&__p[1], (uint64_t)") [", 3);
  sub_19E37CA70(&__p[1], (uint64_t)"(consumed) == (normalized.size())", 33);
  sub_19E37CA70(&__p[1], (uint64_t)"] ", 2);
  sub_19E37CA70(&__p[1], (uint64_t)"all normalized characters are not consumed.", 43);
  sub_19E378FFC((unsigned int *)__p, (uint64_t)a8);
LABEL_137:
  __p[1] = *(void **)MEMORY[0x1E4FBA418];
  *(void **)((char *)&__p[1] + *((void *)__p[1] - 3)) = *(void **)(MEMORY[0x1E4FBA418] + 24);
  uint64_t v117 = MEMORY[0x1E4FBA470] + 16;
  if (v119 < 0) {
    operator delete(v118);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (void *)MEMORY[0x19F3BDC30](&v120);
}

void sub_19E389CB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_19E389D64@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v6 = *(_DWORD **)a2;
  int64_t v5 = *(_DWORD **)(a2 + 8);
  if (*(_DWORD **)a2 != v5)
  {
    uint64_t v9 = a3 + 48;
    while (1)
    {
      switch(*v6)
      {
        case 0:
          uint64_t v10 = *(void *)(a3 + 64);
          if (v10) {
            unint64_t v11 = v10 + 8;
          }
          else {
            unint64_t v11 = 0;
          }
          uint64_t v12 = *(int *)(a3 + 56);
          char v13 = (uint64_t *)(v11 + 8 * v12 - 8);
          if (v12) {
            BOOL v14 = (unint64_t)v13 > v11;
          }
          else {
            BOOL v14 = 0;
          }
          if (v14)
          {
            unint64_t v15 = v11 + 8;
            do
            {
              uint64_t v16 = *v13--;
              sub_19E39508C(*(void *)(v15 - 8), v16);
              BOOL v17 = v15 >= (unint64_t)v13;
              v15 += 8;
            }
            while (!v17);
          }
          goto LABEL_52;
        case 1:
          uint64_t v18 = *(int **)(a3 + 64);
          if (!v18)
          {
            int v20 = *(_DWORD *)(a3 + 60);
LABEL_34:
            sub_19E3C232C(v9, v20 + 1);
            uint64_t v18 = *(int **)(a3 + 64);
            int v20 = *v18;
            goto LABEL_35;
          }
          int v19 = *(_DWORD *)(a3 + 56);
          int v20 = *v18;
          if (v19 < *v18)
          {
            int v21 = v19 + 1;
            *(_DWORD *)(a3 + 56) = v19 + 1;
            goto LABEL_36;
          }
          if (v20 == *(_DWORD *)(a3 + 60)) {
            goto LABEL_34;
          }
LABEL_35:
          int *v18 = v20 + 1;
          uint64_t v32 = sub_19E3A0030(*(void *)(a3 + 48));
          uint64_t v33 = *(void *)(a3 + 64);
          uint64_t v34 = *(int *)(a3 + 56);
          int v21 = v34 + 1;
          *(_DWORD *)(a3 + 56) = v34 + 1;
          *(void *)(v33 + 8 * v34 + 8) = v32;
LABEL_36:
          if (v21 > 1)
          {
            unint64_t v35 = v21;
            do
            {
              uint64_t v36 = *(void *)(a3 + 64) + 8;
              uint64_t v37 = *(void *)(v36 + 8 * (v35 - 2));
              *(void *)(v36 + 8 * (v35 - 2)) = *(void *)(v36 + 8 * (v35 - 1));
              *(void *)(v36 + 8 * (v35 - 1)) = v37;
              BOOL v14 = v35-- > 2;
            }
            while (v14);
          }
          if (v21 < 1)
          {
            sub_19E3AF8D4((uint64_t)__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1728);
            unint64_t v38 = sub_19E3AF8EC(__p, "CHECK failed: (index) < (current_size_): ");
            sub_19E3AFA28((uint64_t)&v57, (const char **)&v38->__r_.__value_.__l.__data_);
            sub_19E3AFA30((uint64_t)__p);
          }
          uint64_t v39 = *(void *)(*(void *)(a3 + 64) + 8);
          int v40 = sub_19E3793F8(a1[1]);
          size_t v41 = strlen(v40);
          int v42 = (*(uint64_t (**)(uint64_t *, const char *, size_t))(*a1 + 504))(a1, v40, v41);
          *(_DWORD *)(v39 + 40) |= 4u;
          *(_DWORD *)(v39 + 64) = v42;
          uint64_t v43 = (char *)sub_19E3793F8(a1[1]);
          sub_19E3793F8(a1[1]);
          *(_DWORD *)(v39 + 40) |= 1u;
          sub_19E382294(__p, v43, v44);
          uint64_t v45 = *(void *)(v39 + 8);
          uint64_t v46 = (void *)(v45 & 0xFFFFFFFFFFFFFFFELL);
          if (v45) {
            uint64_t v46 = (void *)*v46;
          }
          sub_19E3AE70C((uint64_t *)(v39 + 48), (long long *)__p, (uint64_t)v46);
          goto LABEL_50;
        case 2:
          uint64_t v22 = *(int **)(a3 + 64);
          if (!v22)
          {
            int v24 = *(_DWORD *)(a3 + 60);
LABEL_45:
            sub_19E3C232C(v9, v24 + 1);
            uint64_t v22 = *(int **)(a3 + 64);
            int v24 = *v22;
            goto LABEL_46;
          }
          uint64_t v23 = *(int *)(a3 + 56);
          int v24 = *v22;
          if ((int)v23 < *v22)
          {
            *(_DWORD *)(a3 + 56) = v23 + 1;
            uint64_t v25 = *(void *)&v22[2 * v23 + 2];
            goto LABEL_47;
          }
          if (v24 == *(_DWORD *)(a3 + 60)) {
            goto LABEL_45;
          }
LABEL_46:
          *uint64_t v22 = v24 + 1;
          uint64_t v25 = sub_19E3A0030(*(void *)(a3 + 48));
          uint64_t v47 = *(void *)(a3 + 64);
          uint64_t v48 = *(int *)(a3 + 56);
          *(_DWORD *)(a3 + 56) = v48 + 1;
          *(void *)(v47 + 8 * v48 + 8) = v25;
LABEL_47:
          int v49 = sub_19E37947C(a1[1]);
          size_t v50 = strlen(v49);
          int v51 = (*(uint64_t (**)(uint64_t *, const char *, size_t))(*a1 + 504))(a1, v49, v50);
          *(_DWORD *)(v25 + 40) |= 4u;
          *(_DWORD *)(v25 + 64) = v51;
          uint64_t v52 = (char *)sub_19E37947C(a1[1]);
          sub_19E37947C(a1[1]);
          *(_DWORD *)(v25 + 40) |= 1u;
          sub_19E382294(__p, v52, v53);
          uint64_t v54 = *(void *)(v25 + 8);
          int v55 = (void *)(v54 & 0xFFFFFFFFFFFFFFFELL);
          if (v54) {
            int v55 = (void *)*v55;
          }
          sub_19E3AE70C((uint64_t *)(v25 + 48), (long long *)__p, (uint64_t)v55);
LABEL_50:
          if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p[0].__r_.__value_.__l.__data_);
          }
LABEL_52:
          if (++v6 == v5) {
            return sub_19E3AD4C4(a4);
          }
          break;
        case 3:
          if (*(int *)(a3 + 56) >= 1)
          {
            int v26 = 0;
            do
            {
              uint64_t v27 = sub_19E39252C(v9, v26);
              if ((*(unsigned int (**)(uint64_t *, void))(*a1 + 528))(a1, *(unsigned int *)(v27 + 64)))
              {
                uint64_t v28 = (char *)sub_19E379374(a1[1]);
                sub_19E379374(a1[1]);
                *(_DWORD *)(v27 + 40) |= 1u;
                sub_19E382294(__p, v28, v29);
                uint64_t v30 = *(void *)(v27 + 8);
                unsigned __int8 v31 = (void *)(v30 & 0xFFFFFFFFFFFFFFFELL);
                if (v30) {
                  unsigned __int8 v31 = (void *)*v31;
                }
                sub_19E3AE70C((uint64_t *)(v27 + 48), (long long *)__p, (uint64_t)v31);
                if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p[0].__r_.__value_.__l.__data_);
                }
              }
              ++v26;
            }
            while (v26 < *(_DWORD *)(a3 + 56));
          }
          goto LABEL_52;
        default:
          return (void *)sub_19E3AD630(a4, 13, "unknown extra_option type.", 26);
      }
    }
  }
  return sub_19E3AD4C4(a4);
}

void sub_19E38A234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
}

void sub_19E38A27C(uint64_t *a1@<X0>, char *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  (*(void (**)(uint64_t *))(*a1 + 88))(a1);
  if (!*a5)
  {
    sub_19E3AD4CC(a5);
    if (a4)
    {
      sub_19E39EE0C(a4);
      BOOL v17 = 0;
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      BOOL v14 = 0;
      unint64_t v15 = 0;
      uint64_t v16 = 0;
      (*(void (**)(uint64_t, char *, size_t, void **, void **))(*(void *)a1[2] + 32))(a1[2], a2, a3, &v17, &v14);
      if (!*a5)
      {
        sub_19E3AD4CC(a5);
        (*(void (**)(void **__return_ptr))(*(void *)a1[1] + 40))(__p);
        if (v19 >= 0) {
          uint64_t v10 = HIBYTE(v19);
        }
        else {
          uint64_t v10 = v18;
        }
        sub_19E388EF0(a1, a2, a3, v10, (uint64_t *)&v14, (uint64_t *)__p, a4, a5);
        if (!*a5)
        {
          unint64_t v11 = sub_19E3AD4CC(a5);
          sub_19E3AD4C4(v11);
        }
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }
      if (v14)
      {
        unint64_t v15 = v14;
        operator delete(v14);
      }
      if (SHIBYTE(v19) < 0) {
        operator delete(v17);
      }
    }
    else
    {
      LODWORD(v17) = 13;
      uint64_t v12 = (void *)sub_19E37B784((uint64_t)&v18);
      sub_19E37CA70(v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_19E37CA70(&v18, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_19E37CA70(&v18, (uint64_t)") [", 3);
      sub_19E37CA70(&v18, (uint64_t)"spt", 3);
      sub_19E37CA70(&v18, (uint64_t)"] ", 2);
      sub_19E37CA70(&v18, (uint64_t)"output proto is null", 20);
      sub_19E378FFC((unsigned int *)&v17, (uint64_t)a5);
      uint64_t v18 = *MEMORY[0x1E4FBA418];
      *(uint64_t *)((char *)&v18 + *(void *)(v18 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
      uint64_t v19 = MEMORY[0x1E4FBA470] + 16;
      if (v21 < 0) {
        operator delete(v20);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x19F3BDC30](&v22);
    }
  }
}

void sub_19E38A5B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (__p) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E38A614(uint64_t *a1@<X0>, char *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  (*(void (**)(uint64_t *))(*a1 + 88))(a1);
  if (*a5) {
    return;
  }
  sub_19E3AD4CC(a5);
  if (a4)
  {
    sub_19E39F920(a4);
    int v26 = 0;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    uint64_t v23 = 0;
    int v24 = 0;
    uint64_t v25 = 0;
    (*(void (**)(uint64_t, char *, size_t, void **, void **))(*(void *)a1[2] + 32))(a1[2], a2, a3, &v26, &v23);
    if (!*a5)
    {
      sub_19E3AD4CC(a5);
      if ((*(uint64_t (**)(uint64_t))(*(void *)a1[1] + 88))(a1[1]))
      {
        (*(void (**)(uint64_t *__return_ptr))(*(void *)a1[1] + 48))(&v21);
        uint64_t v10 = v21;
        uint64_t v11 = v22;
        if (v21 != v22)
        {
          while (1)
          {
            uint64_t v12 = *(int **)(a4 + 32);
            if (!v12) {
              break;
            }
            uint64_t v13 = *(int *)(a4 + 24);
            int v14 = *v12;
            if ((int)v13 >= *v12)
            {
              if (v14 == *(_DWORD *)(a4 + 28))
              {
LABEL_12:
                sub_19E3C232C(a4 + 16, v14 + 1);
                uint64_t v12 = *(int **)(a4 + 32);
                int v14 = *v12;
              }
              int *v12 = v14 + 1;
              uint64_t v15 = sub_19E3A0100(*(void *)(a4 + 16));
              uint64_t v16 = *(void *)(a4 + 32);
              uint64_t v17 = *(int *)(a4 + 24);
              *(_DWORD *)(a4 + 24) = v17 + 1;
              *(void *)(v16 + 8 * v17 + 8) = v15;
              goto LABEL_14;
            }
            *(_DWORD *)(a4 + 24) = v13 + 1;
            uint64_t v15 = *(void *)&v12[2 * v13 + 2];
LABEL_14:
            int v18 = *(_DWORD *)(v10 + 24);
            *(_DWORD *)(v15 + 40) |= 2u;
            *(_DWORD *)(v15 + 8sub_19E392864(&a9, 0) = v18;
            if (v28 >= 0) {
              uint64_t v19 = HIBYTE(v28);
            }
            else {
              uint64_t v19 = v27;
            }
            sub_19E388EF0(a1, a2, a3, v19, (uint64_t *)&v23, (uint64_t *)v10, v15, a5);
            if (*a5) {
              goto LABEL_29;
            }
            sub_19E3AD4CC(a5);
            v10 += 32;
            if (v10 == v11)
            {
              sub_19E3AD4C4(a5);
              goto LABEL_29;
            }
          }
          int v14 = *(_DWORD *)(a4 + 28);
          goto LABEL_12;
        }
        LODWORD(v29) = 13;
        sub_19E37B784((uint64_t)&v30);
        sub_19E37CA70(&v30, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_19E37CA70(&v30, (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_19E37CA70(&v30, (uint64_t)") [", 3);
        sub_19E37CA70(&v30, (uint64_t)"!nbests.empty()", 15);
        sub_19E37CA70(&v30, (uint64_t)"] ", 2);
        sub_19E37CA70(&v30, (uint64_t)"NBestEncode returns empty result.", 33);
        sub_19E378FFC((unsigned int *)&v29, (uint64_t)a5);
        uint64_t v30 = *MEMORY[0x1E4FBA418];
        *(uint64_t *)((char *)&v30 + *(void *)(v30 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
        uint64_t v31 = MEMORY[0x1E4FBA470] + 16;
        if (v33 < 0) {
          operator delete(__p);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x19F3BDC30](v34);
LABEL_29:
        size_t v29 = (void **)&v21;
        sub_19E37C8AC(&v29);
      }
      else
      {
        LODWORD(v29) = 13;
        sub_19E37B784((uint64_t)&v30);
        sub_19E37CA70(&v30, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_19E37CA70(&v30, (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_19E37CA70(&v30, (uint64_t)") [", 3);
        sub_19E37CA70(&v30, (uint64_t)"model_->IsNBestEncodeAvailable()", 32);
        sub_19E37CA70(&v30, (uint64_t)"] ", 2);
        sub_19E37CA70(&v30, (uint64_t)"NBestEncode is not available for the current model.", 51);
        sub_19E378FFC((unsigned int *)&v29, (uint64_t)a5);
        uint64_t v30 = *MEMORY[0x1E4FBA418];
        *(uint64_t *)((char *)&v30 + *(void *)(v30 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
        uint64_t v31 = MEMORY[0x1E4FBA470] + 16;
        if (v33 < 0) {
          operator delete(__p);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x19F3BDC30](v34);
      }
    }
    if (v23)
    {
      int v24 = v23;
      operator delete(v23);
    }
    if (SHIBYTE(v28) < 0) {
      operator delete(v26);
    }
  }
  else
  {
    LODWORD(v29) = 13;
    int v20 = (void *)sub_19E37B784((uint64_t)&v30);
    sub_19E37CA70(v20, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_19E37CA70(&v30, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_19E37CA70(&v30, (uint64_t)") [", 3);
    sub_19E37CA70(&v30, (uint64_t)"nbest_spt", 9);
    sub_19E37CA70(&v30, (uint64_t)"] ", 2);
    sub_19E37CA70(&v30, (uint64_t)"output proto is null", 20);
    sub_19E378FFC((unsigned int *)&v29, (uint64_t)a5);
    uint64_t v30 = *MEMORY[0x1E4FBA418];
    *(uint64_t *)((char *)&v30 + *(void *)(v30 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    uint64_t v31 = MEMORY[0x1E4FBA470] + 16;
    if (v33 < 0) {
      operator delete(__p);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x19F3BDC30](v34);
  }
}

void sub_19E38AD58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char *a22)
{
  a22 = &a10;
  sub_19E37C8AC((void ***)&a22);
  if (__p)
  {
    a14 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

void sub_19E38ADE8(uint64_t *a1@<X0>, char *a2@<X1>, size_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t *a6@<X8>, float a7@<S0>)
{
  (*(void (**)(uint64_t *))(*a1 + 88))(a1);
  if (*a6) {
    return;
  }
  sub_19E3AD4CC(a6);
  if (a5)
  {
    sub_19E39EE0C(a5);
    if (a4 < 513)
    {
      unint64_t v35 = 0;
      uint64_t v36 = 0;
      uint64_t v37 = 0;
      std::string __p = 0;
      char v33 = 0;
      uint64_t v34 = 0;
      (*(void (**)(uint64_t, char *, size_t, void **, void **))(*(void *)a1[2] + 32))(a1[2], a2, a3, &v35, &__p);
      if (*a6)
      {
LABEL_5:
        if (__p)
        {
          char v33 = __p;
          operator delete(__p);
        }
        if (SHIBYTE(v37) < 0) {
          operator delete(v35);
        }
        return;
      }
      sub_19E3AD4CC(a6);
      char v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1[1] + 88))(a1[1]);
      if (a4 >= 0) {
        char v17 = v16;
      }
      else {
        char v17 = 0;
      }
      if (v17)
      {
        if (a4 > 1)
        {
          (*(void (**)(uint64_t *__return_ptr))(*(void *)a1[1] + 48))(&v30);
          if (v30 == v31)
          {
            LODWORD(v38) = 13;
            sub_19E37B784((uint64_t)v39);
            sub_19E37CA70(v39, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
            sub_19E37CA70(v39, (uint64_t)"(", 1);
            std::ostream::operator<<();
            sub_19E37CA70(v39, (uint64_t)") [", 3);
            sub_19E37CA70(v39, (uint64_t)"!nbests.empty()", 15);
            sub_19E37CA70(v39, (uint64_t)"] ", 2);
            sub_19E37CA70(v39, (uint64_t)"NBestEncode returns empty result.", 33);
            sub_19E378FFC((unsigned int *)&v38, (uint64_t)a6);
            sub_19E37908C((uint64_t)&v38);
            unint64_t v38 = &v30;
            sub_19E37C8AC((void ***)&v38);
            goto LABEL_5;
          }
          LODWORD(v29[0]) = 0;
          sub_19E394858(&v38, (v31 - v30) >> 5, v29);
          if (v31 != v30)
          {
            uint64_t v19 = (float *)v38;
            if ((unint64_t)((v31 - v30) >> 5) <= 1) {
              uint64_t v20 = 1;
            }
            else {
              uint64_t v20 = (v31 - v30) >> 5;
            }
            uint64_t v21 = (float *)(v30 + 24);
            do
            {
              float v22 = *v21;
              v21 += 8;
              *v19++ = expf(v22 * a7);
              --v20;
            }
            while (v20);
          }
          uint64_t v23 = sub_19E3AB4D8();
          sub_19E3948DC((uint64_t)v29, (float *)v38, v39[0]);
          uint64_t v24 = HIBYTE(v37);
          uint64_t v25 = v36;
          int v26 = sub_19E394C40((uint64_t)v29, v23, (double **)v29);
          if ((v24 & 0x80u) == 0) {
            uint64_t v27 = v24;
          }
          else {
            uint64_t v27 = v25;
          }
          sub_19E388EF0(a1, a2, a3, v27, (uint64_t *)&__p, (uint64_t *)(v30 + 32 * v26), a5, a6);
          uint64_t v28 = *a6;
          if (!*a6) {
            sub_19E3AD4CC(a6);
          }
          if (v29[0])
          {
            v29[1] = v29[0];
            operator delete(v29[0]);
          }
          if (v38)
          {
            v39[0] = (float *)v38;
            operator delete(v38);
          }
          unint64_t v38 = &v30;
          sub_19E37C8AC((void ***)&v38);
          if (v28) {
            goto LABEL_5;
          }
          goto LABEL_51;
        }
        (*(void (**)(void **__return_ptr))(*(void *)a1[1] + 40))(&v38);
        if (v37 >= 0) {
          uint64_t v18 = HIBYTE(v37);
        }
        else {
          uint64_t v18 = v36;
        }
      }
      else
      {
        if (((*(uint64_t (**)(uint64_t))(*(void *)a1[1] + 80))(a1[1]) & 1) == 0)
        {
          LODWORD(v38) = 13;
          sub_19E37B784((uint64_t)v39);
          sub_19E37CA70(v39, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
          sub_19E37CA70(v39, (uint64_t)"(", 1);
          std::ostream::operator<<();
          sub_19E37CA70(v39, (uint64_t)") [", 3);
          sub_19E37CA70(v39, (uint64_t)"model_->IsSampleEncodeAvailable()", 33);
          sub_19E37CA70(v39, (uint64_t)"] ", 2);
          sub_19E37CA70(v39, (uint64_t)"SampleEncode is not available for the current model.", 52);
          sub_19E378FFC((unsigned int *)&v38, (uint64_t)a6);
          sub_19E37908C((uint64_t)&v38);
          goto LABEL_5;
        }
        (*(void (**)(void **__return_ptr, float))(*(void *)a1[1] + 56))(&v38, a7);
        if (v37 >= 0) {
          uint64_t v18 = HIBYTE(v37);
        }
        else {
          uint64_t v18 = v36;
        }
      }
      sub_19E388EF0(a1, a2, a3, v18, (uint64_t *)&__p, (uint64_t *)&v38, a5, a6);
      if (*a6)
      {
        if (v38)
        {
          v39[0] = (float *)v38;
          operator delete(v38);
        }
        goto LABEL_5;
      }
      sub_19E3AD4CC(a6);
      if (v38)
      {
        v39[0] = (float *)v38;
        operator delete(v38);
      }
LABEL_51:
      sub_19E3AD4C4(a6);
      goto LABEL_5;
    }
    LODWORD(v38) = 13;
    uint64_t v15 = (void *)sub_19E37B784((uint64_t)v39);
    sub_19E37CA70(v15, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_19E37CA70(v39, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_19E37CA70(v39, (uint64_t)") [", 3);
    sub_19E37CA70(v39, (uint64_t)"(nbest_size) <= (512)", 21);
    sub_19E37CA70(v39, (uint64_t)"] ", 2);
    sub_19E37CA70(v39, (uint64_t)"nbest_size must be nbest_size <= 512", 36);
    sub_19E378FFC((unsigned int *)&v38, (uint64_t)a6);
  }
  else
  {
    LODWORD(v38) = 13;
    int v14 = (void *)sub_19E37B784((uint64_t)v39);
    sub_19E37CA70(v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_19E37CA70(v39, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_19E37CA70(v39, (uint64_t)") [", 3);
    sub_19E37CA70(v39, (uint64_t)"spt", 3);
    sub_19E37CA70(v39, (uint64_t)"] ", 2);
    sub_19E37CA70(v39, (uint64_t)"output proto is null", 20);
    sub_19E378FFC((unsigned int *)&v38, (uint64_t)a6);
  }
  v39[0] = *(float **)MEMORY[0x1E4FBA418];
  *(float **)((char *)v39 + *((void *)v39[0] - 3)) = *(float **)(MEMORY[0x1E4FBA418] + 24);
  v39[1] = (float *)(MEMORY[0x1E4FBA470] + 16);
  if (v40 < 0) {
    operator delete(v39[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x19F3BDC30](&v41);
}

void sub_19E38B5C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char *a24,uint64_t a25)
{
  a24 = &a12;
  sub_19E37C8AC((void ***)&a24);
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(a1);
}

void sub_19E38B6B4(uint64_t a1@<X0>, char *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X6>, uint64_t *a5@<X8>, float a6@<S0>)
{
  if ((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 96))(*(void *)(a1 + 8)))
  {
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    uint64_t v25 = 0;
    int v26 = 0;
    uint64_t v27 = 0;
    (*(void (**)(void, char *, size_t, void **, void **))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), a2, a3, &v28, &v25);
    if (!*a5)
    {
      sub_19E3AD4CC(a5);
      (*(void (**)(uint64_t *__return_ptr, float))(**(void **)(a1 + 8) + 64))(&v23, a6);
      uint64_t v12 = v23;
      uint64_t v13 = v24;
      if (v23 != v24)
      {
        while (1)
        {
          int v14 = *(int **)(a4 + 32);
          if (!v14) {
            break;
          }
          uint64_t v15 = *(int *)(a4 + 24);
          int v16 = *v14;
          if ((int)v15 >= *v14)
          {
            if (v16 == *(_DWORD *)(a4 + 28))
            {
LABEL_9:
              sub_19E3C232C(a4 + 16, v16 + 1);
              int v14 = *(int **)(a4 + 32);
              int v16 = *v14;
            }
            *int v14 = v16 + 1;
            uint64_t v17 = sub_19E3A0100(*(void *)(a4 + 16));
            uint64_t v18 = *(void *)(a4 + 32);
            uint64_t v19 = *(int *)(a4 + 24);
            *(_DWORD *)(a4 + 24) = v19 + 1;
            *(void *)(v18 + 8 * v19 + 8) = v17;
            goto LABEL_11;
          }
          *(_DWORD *)(a4 + 24) = v15 + 1;
          uint64_t v17 = *(void *)&v14[2 * v15 + 2];
LABEL_11:
          int v20 = *(_DWORD *)(v12 + 24);
          *(_DWORD *)(v17 + 40) |= 2u;
          *(_DWORD *)(v17 + 8sub_19E392864(&a9, 0) = v20;
          if (v30 >= 0) {
            uint64_t v21 = HIBYTE(v30);
          }
          else {
            uint64_t v21 = v29;
          }
          sub_19E388EF0((uint64_t *)a1, a2, a3, v21, (uint64_t *)&v25, (uint64_t *)v12, v17, a5);
          if (*a5) {
            goto LABEL_23;
          }
          sub_19E3AD4CC(a5);
          v12 += 32;
          if (v12 == v13)
          {
            sub_19E3AD4C4(a5);
            goto LABEL_23;
          }
        }
        int v16 = *(_DWORD *)(a4 + 28);
        goto LABEL_9;
      }
      LODWORD(v31) = 13;
      sub_19E37B784((uint64_t)&v32);
      sub_19E37CA70(&v32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_19E37CA70(&v32, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_19E37CA70(&v32, (uint64_t)") [", 3);
      sub_19E37CA70(&v32, (uint64_t)"!results.empty()", 16);
      sub_19E37CA70(&v32, (uint64_t)"] ", 2);
      sub_19E37CA70(&v32, (uint64_t)"SampleEncodeAndScore returns empty result.", 42);
      sub_19E378FFC((unsigned int *)&v31, (uint64_t)a5);
      uint64_t v32 = *MEMORY[0x1E4FBA418];
      *(uint64_t *)((char *)&v32 + *(void *)(v32 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
      uint64_t v33 = MEMORY[0x1E4FBA470] + 16;
      if (v35 < 0) {
        operator delete(__p);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x19F3BDC30](v36);
LABEL_23:
      uint64_t v31 = (void **)&v23;
      sub_19E37C8AC(&v31);
    }
    if (v25)
    {
      int v26 = v25;
      operator delete(v25);
    }
    if (SHIBYTE(v30) < 0) {
      operator delete(v28);
    }
  }
  else
  {
    LODWORD(v31) = 13;
    float v22 = (void *)sub_19E37B784((uint64_t)&v32);
    sub_19E37CA70(v22, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_19E37CA70(&v32, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_19E37CA70(&v32, (uint64_t)") [", 3);
    sub_19E37CA70(&v32, (uint64_t)"model_->IsSampleEncodeAndScoreAvailable()", 41);
    sub_19E37CA70(&v32, (uint64_t)"] ", 2);
    sub_19E37CA70(&v32, (uint64_t)"SampleEncodeAndScore is not available for the current model.", 60);
    sub_19E378FFC((unsigned int *)&v31, (uint64_t)a5);
    uint64_t v32 = *MEMORY[0x1E4FBA418];
    *(uint64_t *)((char *)&v32 + *(void *)(v32 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    uint64_t v33 = MEMORY[0x1E4FBA470] + 16;
    if (v35 < 0) {
      operator delete(__p);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x19F3BDC30](v36);
  }
}

void sub_19E38BC48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char *a22)
{
  a22 = &a10;
  sub_19E37C8AC((void ***)&a22);
  if (__p)
  {
    a14 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

void sub_19E38BCC0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, float *a4@<X3>, uint64_t *a5@<X8>, float a6@<S0>)
{
  if ((*(uint64_t (**)(void))(**(void **)(a1 + 8) + 104))(*(void *)(a1 + 8)))
  {
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    std::string __p = 0;
    int v16 = 0;
    uint64_t v17 = 0;
    (*(void (**)(void, uint64_t, uint64_t, void **, void **))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), a2, a3, &v18, &__p);
    if (!*a5)
    {
      sub_19E3AD4CC(a5);
      if (v20 >= 0) {
        uint64_t v12 = &v18;
      }
      else {
        uint64_t v12 = v18;
      }
      if (v20 >= 0) {
        uint64_t v13 = HIBYTE(v20);
      }
      else {
        uint64_t v13 = v19;
      }
      *a4 = (*(float (**)(void, void *, uint64_t, float))(**(void **)(a1 + 8) + 72))(*(void *)(a1 + 8), v12, v13, a6);
      sub_19E3AD4C4(a5);
    }
    if (__p)
    {
      int v16 = __p;
      operator delete(__p);
    }
    if (SHIBYTE(v20) < 0) {
      operator delete(v18);
    }
  }
  else
  {
    LODWORD(v18) = 13;
    int v14 = (void *)sub_19E37B784((uint64_t)&v19);
    sub_19E37CA70(v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_19E37CA70(&v19, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_19E37CA70(&v19, (uint64_t)") [", 3);
    sub_19E37CA70(&v19, (uint64_t)"model_->IsCalculateEntropyAvailable()", 37);
    sub_19E37CA70(&v19, (uint64_t)"] ", 2);
    sub_19E37CA70(&v19, (uint64_t)"CalculateEntropy is not available for the current model.", 56);
    sub_19E378FFC((unsigned int *)&v18, (uint64_t)a5);
    uint64_t v19 = *MEMORY[0x1E4FBA418];
    *(uint64_t *)((char *)&v19 + *(void *)(v19 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    uint64_t v20 = MEMORY[0x1E4FBA470] + 16;
    if (v22 < 0) {
      operator delete(v21);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x19F3BDC30](&v23);
  }
}

void sub_19E38BF98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (__p) {
    operator delete(__p);
  }
  if (a18 < 0) {
    operator delete(a13);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E38BFD8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  sub_19E3866C0(a2, __p);
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)a1 + 272))(a1, __p, a3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_19E38C068(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E38C084(uint64_t *a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4 = a3;
  uint64_t v68 = a3;
  (*(void (**)(uint64_t *))(*a1 + 88))(a1);
  if (*a4) {
    return;
  }
  sub_19E3AD4CC(a4);
  if (v4)
  {
    sub_19E39EE0C(v4);
    uint64_t v8 = a1[4];
    if (v8 && (*(unsigned int (**)(uint64_t))(*(void *)v8 + 72))(v8)) {
      uint64_t v9 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)a1[4] + 24))(a1[4]);
    }
    else {
      uint64_t v9 = (char *)&unk_19E5721BD;
    }
    uint64_t v10 = *a2;
    uint64_t v11 = a2[1];
    if (*a2 != v11)
    {
      while (1)
      {
        uint64_t v12 = *v10;
        uint64_t v13 = v10[1];
        uint64_t v14 = v68;
        uint64_t v15 = *(int **)(v68 + 64);
        if (!v15) {
          break;
        }
        uint64_t v16 = *(int *)(v68 + 56);
        int v17 = *v15;
        if ((int)v16 >= *v15)
        {
          if (v17 == *(_DWORD *)(v68 + 60))
          {
LABEL_14:
            sub_19E3C232C(v68 + 48, v17 + 1);
            uint64_t v15 = *(int **)(v68 + 64);
            int v17 = *v15;
          }
          *uint64_t v15 = v17 + 1;
          uint64_t v18 = sub_19E3A0030(*(void *)(v14 + 48));
          uint64_t v19 = *(void *)(v14 + 64);
          uint64_t v20 = *(int *)(v14 + 56);
          *(_DWORD *)(v14 + 56) = v20 + 1;
          *(void *)(v19 + 8 * v20 + 8) = v18;
          goto LABEL_16;
        }
        *(_DWORD *)(v68 + 56) = v16 + 1;
        uint64_t v18 = *(void *)&v15[2 * v16 + 2];
LABEL_16:
        *(_DWORD *)(v18 + 40) |= 1u;
        uint64_t v21 = *(void *)(v18 + 8);
        char v22 = (void *)(v21 & 0xFFFFFFFFFFFFFFFELL);
        if (v21) {
          char v22 = (void *)*v22;
        }
        uint64_t v23 = sub_19E3AE730((uint64_t *)(v18 + 48), (uint64_t)v22);
        MEMORY[0x19F3BD810](v23, v12, v13);
        int v24 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a1 + 504))(a1, v12, v13);
        *(_DWORD *)(v18 + 40) |= 4u;
        *(_DWORD *)(v18 + 64) = v24;
        v10 += 2;
        if (v10 == v11)
        {
          uint64_t v4 = v68;
          goto LABEL_20;
        }
      }
      int v17 = *(_DWORD *)(v68 + 60);
      goto LABEL_14;
    }
LABEL_20:
    sub_19E389D64(a1, (uint64_t)(a1 + 8), v4, a4);
    if (*a4) {
      return;
    }
    sub_19E3AD4CC(a4);
    uint64_t v61 = 0;
    *(_DWORD *)(v4 + 40) |= 1u;
    uint64_t v25 = *(void *)(v4 + 8);
    int v26 = (void *)(v25 & 0xFFFFFFFFFFFFFFFELL);
    if (v25) {
      int v26 = (void *)*v26;
    }
    v60[1] = &v61;
    uint64_t v61 = sub_19E3AE730((uint64_t *)(v4 + 72), (uint64_t)v26);
    uint64_t v58 = 0;
    v59[0] = &v68;
    v59[1] = v60;
    v60[0] = &v68;
    __p[0] = 0;
    __p[1] = 0;
    int v27 = *(_DWORD *)(v4 + 56);
    if (v27 >= 1)
    {
      BOOL v28 = 0;
      int v29 = 0;
      int v30 = 0;
      char v31 = 1;
      while (1)
      {
        uint64_t v32 = sub_19E3917CC(v4 + 48, v30);
        if (!(*(unsigned int (**)(uint64_t *, void))(*a1 + 552))(a1, *(unsigned int *)(v32 + 64))) {
          break;
        }
        ++v30;
LABEL_68:
        uint64_t v4 = v68;
        int v27 = *(_DWORD *)(v68 + 56);
        if (v30 >= v27) {
          goto LABEL_89;
        }
      }
      sub_19E38CA24((uint64_t)v59, v29, v30, a4);
      if (*a4) {
        goto LABEL_95;
      }
      sub_19E3AD4CC(a4);
      if (!v28)
      {
        if (*((char *)v61 + 23) < 0)
        {
          if (!v61[1])
          {
LABEL_32:
            unint64_t v33 = *(void *)(v32 + 48) & 0xFFFFFFFFFFFFFFFELL;
            if (*(char *)(v33 + 23) < 0)
            {
              char v35 = *(unsigned __int8 **)v33;
              size_t v34 = *(void *)(v33 + 8);
            }
            else
            {
              size_t v34 = *(unsigned __int8 *)(v33 + 23);
              char v35 = (unsigned __int8 *)(*(void *)(v32 + 48) & 0xFFFFFFFFFFFFFFFELL);
            }
            uint64_t v36 = *(unsigned int *)(v32 + 64);
            if ((*(unsigned int (**)(uint64_t *, uint64_t))(*a1 + 536))(a1, v36))
            {
              sub_19E382340(&v62, "");
LABEL_58:
              BOOL v64 = 0;
LABEL_59:
              if (SHIBYTE(v58) < 0) {
                operator delete(__p[0]);
              }
              uint64_t v58 = v63;
              *(_OWORD *)std::string __p = v62;
              BOOL v28 = v64;
              if (v63 >= 0) {
                uint64_t v46 = __p;
              }
              else {
                uint64_t v46 = (void **)v62;
              }
              if (v63 >= 0) {
                size_t v47 = HIBYTE(v63);
              }
              else {
                size_t v47 = *((void *)&v62 + 1);
              }
              sub_19E38CFBC(v60, v30++, v46, v47);
              int v29 = v30;
              goto LABEL_68;
            }
            if (!(*(unsigned int (**)(uint64_t *, uint64_t))(*a1 + 528))(a1, v36))
            {
              if ((v31 & 1) != 0
                && ((uint64_t v40 = a1[4]) == 0
                 || (uint64_t v41 = (*(uint64_t (**)(uint64_t))(*(void *)v40 + 152))(v40),
                     ((*(uint64_t (**)(uint64_t))(*(void *)v41 + 16))(v41) & 1) != 0)
                 || (uint64_t v42 = (*(uint64_t (**)(uint64_t))(*(void *)a1[4] + 152))(a1[4]),
                     (*(unsigned int (**)(uint64_t))(*(void *)v42 + 24))(v42))))
              {
                if (v34 >= 3)
                {
                  BOOL v49 = *(unsigned __int16 *)v35 != 38626 || v35[2] != 129;
                  if (!v49)
                  {
                    v35 += 3;
                    v34 -= 3;
                  }
                  BOOL v43 = !v49;
                }
                else
                {
                  BOOL v43 = 0;
                }
                uint64_t v50 = a1[4];
                if (v50)
                {
                  uint64_t v51 = (*(uint64_t (**)(uint64_t))(*(void *)v50 + 152))(v50);
                  if ((*(unsigned int (**)(uint64_t))(*(void *)v51 + 24))(v51)) {
                    BOOL v43 = 0;
                  }
                }
              }
              else
              {
                BOOL v43 = 0;
              }
              uint64_t v52 = operator new(0x20uLL);
              int v70 = v52 + 4;
              uint64_t v71 = v52 + 4;
              *uint64_t v52 = &unk_19E572252;
              v52[1] = 3;
              v52[2] = " ";
              v52[3] = 1;
              std::string::size_type v69 = v52;
              sub_19E392040(v35, v34, (uint64_t *)&v69, (uint64_t)&__dst);
              long long v62 = __dst;
              uint64_t v63 = v73;
              unint64_t v73 = 0;
              long long __dst = 0uLL;
              BOOL v64 = v43;
              if (v69)
              {
                int v70 = v69;
                operator delete(v69);
              }
              goto LABEL_59;
            }
            uint64_t v37 = (const void *)(*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 512))(a1, v36);
            if (v38 == v34 && !memcmp(v37, v35, v34))
            {
              sub_19E382340(&v62, v9);
              goto LABEL_58;
            }
            if (v34 >= 0x7FFFFFFFFFFFFFF8) {
              sub_19E37C958();
            }
            if (v34 >= 0x17)
            {
              uint64_t v44 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v34 | 7) != 0x17) {
                uint64_t v44 = v34 | 7;
              }
              uint64_t v45 = v44 + 1;
              p_dst = (long long *)operator new(v44 + 1);
              *((void *)&__dst + 1) = v34;
              unint64_t v73 = v45 | 0x8000000000000000;
              *(void *)&long long __dst = p_dst;
            }
            else
            {
              HIBYTE(v73) = v34;
              p_dst = &__dst;
              if (!v34) {
                goto LABEL_57;
              }
            }
            memmove(p_dst, v35, v34);
LABEL_57:
            *((unsigned char *)p_dst + v34) = 0;
            long long v62 = __dst;
            uint64_t v63 = v73;
            goto LABEL_58;
          }
        }
        else if (!*((unsigned char *)v61 + 23))
        {
          goto LABEL_32;
        }
      }
      char v31 = 0;
      goto LABEL_32;
    }
    int v29 = 0;
LABEL_89:
    sub_19E38CA24((uint64_t)v59, v29, v27, a4);
    if (!*a4)
    {
      sub_19E3AD4CC(a4);
      uint64_t v54 = a1[3];
      if (v54)
      {
        (*(void (**)(long long *__return_ptr))(*(void *)v54 + 40))(&v62);
        int v55 = v61;
        if (*((char *)v61 + 23) < 0) {
          operator delete((void *)*v61);
        }
        long long v56 = v62;
        v55[2] = v63;
        *(_OWORD *)int v55 = v56;
      }
      sub_19E3AD4C4(a4);
    }
LABEL_95:
    if (SHIBYTE(v58) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    LODWORD(v62) = 13;
    size_t v53 = (void *)sub_19E37B784((uint64_t)&v62 + 8);
    sub_19E37CA70(v53, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_19E37CA70((void *)&v62 + 1, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_19E37CA70((void *)&v62 + 1, (uint64_t)") [", 3);
    sub_19E37CA70((void *)&v62 + 1, (uint64_t)"spt", 3);
    sub_19E37CA70((void *)&v62 + 1, (uint64_t)"] ", 2);
    sub_19E37CA70((void *)&v62 + 1, (uint64_t)"output proto is null", 20);
    sub_19E378FFC((unsigned int *)&v62, (uint64_t)a4);
    *((void *)&v62 + 1) = *MEMORY[0x1E4FBA418];
    *(void *)((char *)&v62 + *(void *)(*((void *)&v62 + 1) - 24) + 8) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    uint64_t v63 = MEMORY[0x1E4FBA470] + 16;
    if (v66 < 0) {
      operator delete(v65);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x19F3BDC30](&v67);
  }
}

void sub_19E38C9CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E38CA24(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, void *a4@<X8>)
{
  if (a2 >= a3)
  {
    sub_19E3AD4C4(a4);
  }
  else
  {
    memset(&v37, 0, sizeof(v37));
    int v8 = a2;
    do
    {
      uint64_t v9 = sub_19E3917CC(**(void **)a1 + 48, v8);
      unint64_t v10 = *(void *)(v9 + 48) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v10 + 23) < 0)
      {
        uint64_t v12 = *(void **)v10;
        size_t v11 = *(void *)(v10 + 8);
      }
      else
      {
        size_t v11 = *(unsigned __int8 *)(v10 + 23);
        uint64_t v12 = (void *)(*(void *)(v9 + 48) & 0xFFFFFFFFFFFFFFFELL);
      }
      int v13 = sub_19E37A010(v12, v11);
      if (v13 < 0)
      {
        unsigned int v33 = 13;
        sub_19E37B784((uint64_t)v34);
        sub_19E37CA70(v34, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_19E37CA70(v34, (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_19E37CA70(v34, (uint64_t)") [", 3);
        sub_19E37CA70(v34, (uint64_t)"(0) <= (byte)", 13);
        sub_19E37CA70(v34, (uint64_t)"] ", 2);
        sub_19E378FFC(&v33, (uint64_t)a4);
        goto LABEL_52;
      }
      std::string::append(&v37, 1uLL, v13);
      ++v8;
    }
    while (a3 != v8);
    char v31 = a4;
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v14 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
    }
    else {
      int v14 = v37.__r_.__value_.__r.__words[1];
    }
    if (v14 >= 1)
    {
      int v15 = 0;
      while (1)
      {
        unint64_t v32 = 0;
        std::string::size_type size = HIBYTE(v37.__r_.__value_.__r.__words[2]);
        if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = v37.__r_.__value_.__l.__size_;
        }
        if (size < v15) {
          sub_19E392294("string_view::substr");
        }
        unint64_t v17 = v15;
        uint64_t v18 = (std::string *)v37.__r_.__value_.__r.__words[0];
        if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v18 = &v37;
        }
        if (sub_19E3AB390((unsigned __int8 *)v18 + v17, (uint64_t)v18 + size, (uint64_t *)&v32) != 65533) {
          break;
        }
        int v19 = v17 + a2;
        if (v32 != 1)
        {
          if (v32 != 3)
          {
            unsigned int v33 = 13;
            sub_19E37B784((uint64_t)v34);
            sub_19E37CA70(v34, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
            sub_19E37CA70(v34, (uint64_t)"(", 1);
            std::ostream::operator<<();
            sub_19E37CA70(v34, (uint64_t)") [", 3);
            sub_19E37CA70(v34, (uint64_t)"(consumed) == (1)", 17);
            sub_19E37CA70(v34, (uint64_t)"] ", 2);
            sub_19E378FFC(&v33, (uint64_t)v31);
            goto LABEL_52;
          }
          goto LABEL_23;
        }
        sub_19E38CFBC(*(void ***)(a1 + 8), v19, &unk_19E57224E, 3uLL);
        LODWORD(v22) = v32;
LABEL_42:
        int v15 = v17 + v22;
        if (v15 >= v14) {
          goto LABEL_49;
        }
      }
      int v19 = v17 + a2;
LABEL_23:
      std::string::size_type v20 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
      if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v20 = v37.__r_.__value_.__l.__size_;
      }
      unint64_t v21 = v20 - v17;
      if (v20 < v17) {
        sub_19E392294("string_view::substr");
      }
      unint64_t v22 = v32;
      uint64_t v23 = &v37;
      if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v23 = (std::string *)v37.__r_.__value_.__r.__words[0];
      }
      if (v21 >= v32) {
        unint64_t v24 = v32;
      }
      else {
        unint64_t v24 = v21;
      }
      if (v32)
      {
        unint64_t v25 = 0;
        int v26 = (char *)v23 + v17;
        int v27 = v19;
        do
        {
          unint64_t v28 = v22 - 1;
          if (v25 == v28) {
            int v29 = v26;
          }
          else {
            int v29 = "";
          }
          if (v25 == v28) {
            size_t v30 = v24;
          }
          else {
            size_t v30 = 0;
          }
          sub_19E38CFBC(*(void ***)(a1 + 8), v27 + v25++, v29, v30);
          unint64_t v22 = v32;
        }
        while (v32 > v25);
      }
      goto LABEL_42;
    }
    int v15 = 0;
LABEL_49:
    if (v15 + a2 == a3)
    {
      sub_19E3AD4C4(v31);
      goto LABEL_55;
    }
    unsigned int v33 = 13;
    sub_19E37B784((uint64_t)v34);
    sub_19E37CA70(v34, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_19E37CA70(v34, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_19E37CA70(v34, (uint64_t)") [", 3);
    sub_19E37CA70(v34, (uint64_t)"(token_index_begin + offset) == (token_index_end)", 49);
    sub_19E37CA70(v34, (uint64_t)"] ", 2);
    sub_19E378FFC(&v33, (uint64_t)v31);
LABEL_52:
    v34[0] = *MEMORY[0x1E4FBA418];
    *(void *)((char *)v34 + *(void *)(v34[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v34[1] = MEMORY[0x1E4FBA470] + 16;
    if (v35 < 0) {
      operator delete((void *)v34[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x19F3BDC30](&v36);
LABEL_55:
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v37.__r_.__value_.__l.__data_);
    }
  }
}

void sub_19E38CF54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (*(char *)(v11 - 89) < 0) {
    operator delete(*(void **)(v11 - 112));
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_19E38CFBC(void **a1, int a2, const void *a3, size_t a4)
{
  uint64_t v7 = sub_19E39252C(**a1 + 48, a2);
  if (a4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_19E37C958();
  }
  uint64_t v8 = v7;
  if (a4 >= 0x17)
  {
    uint64_t v10 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17) {
      uint64_t v10 = a4 | 7;
    }
    uint64_t v11 = v10 + 1;
    p_dst = (long long *)operator new(v10 + 1);
    *((void *)&__dst + 1) = a4;
    unint64_t v20 = v11 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v2sub_19E392864(&a9, 0) = a4;
  p_dst = &__dst;
  if (a4) {
LABEL_8:
  }
    memmove(p_dst, a3, a4);
  *((unsigned char *)p_dst + a4) = 0;
  *(_DWORD *)(v8 + 40) |= 2u;
  uint64_t v12 = *(void *)(v8 + 8);
  int v13 = (void *)(v12 & 0xFFFFFFFFFFFFFFFELL);
  if (v12) {
    int v13 = (void *)*v13;
  }
  sub_19E3AE70C((uint64_t *)(v8 + 56), &__dst, (uint64_t)v13);
  if (SHIBYTE(v20) < 0) {
    operator delete((void *)__dst);
  }
  uint64_t v14 = *a1[1];
  if (*(char *)(v14 + 23) < 0) {
    uint64_t v15 = *(void *)(v14 + 8);
  }
  else {
    LODWORD(v15) = *(unsigned __int8 *)(v14 + 23);
  }
  int v16 = *(_DWORD *)(v8 + 40);
  *(_DWORD *)(v8 + 4sub_19E392864(&a9, 0) = v16 | 8;
  *(_DWORD *)(v8 + 68) = v15;
  if (*(char *)(v14 + 23) < 0) {
    uint64_t v17 = *(void *)(v14 + 8);
  }
  else {
    LODWORD(v17) = *(unsigned __int8 *)(v14 + 23);
  }
  *(_DWORD *)(v8 + 4sub_19E392864(&a9, 0) = v16 | 0x18;
  *(_DWORD *)(v8 + 72) = v17 + a4;
  return std::string::append((std::string *)v14, (const std::string::value_type *)a3, a4);
}

void sub_19E38D118(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E38D134(uint64_t a1@<X0>, int **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v19 = 0;
  unint64_t v20 = 0;
  unint64_t v21 = 0;
  int v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 496))(a1);
  sub_19E388850(&v19, a2[1] - *a2);
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  if (*a2 == v10)
  {
LABEL_8:
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 264))(a1, &v19, a3);
  }
  else
  {
    while (1)
    {
      int v11 = *v9;
      int v18 = v11;
      if (v11 < 0 || v11 >= v8) {
        break;
      }
      __p.__r_.__value_.__r.__words[0] = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 512))(a1);
      __p.__r_.__value_.__l.__size_ = v12;
      int v13 = v20;
      if ((unint64_t)v20 >= v21)
      {
        uint64_t v14 = (unsigned char *)sub_19E394EE0(&v19, (uint64_t)&__p);
      }
      else
      {
        sub_19E394FF0((int)&v21, v20, (uint64_t)&__p);
        uint64_t v14 = v13 + 24;
      }
      unint64_t v20 = v14;
      if (++v9 == v10) {
        goto LABEL_8;
      }
    }
    sub_19E38D350("Invalid id: ", 0xCuLL, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    sub_19E3AD630(a4, 11, p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v19;
  sub_19E391F24((void ***)&__p);
}

void sub_19E38D308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::string __p = &a17;
  sub_19E391F24((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_19E38D350(void *__src@<X0>, size_t __len@<X1>, std::string *a3@<X8>)
{
  sub_19E382294(&__dst, __src, __len);
  sub_19E394D98();
  if ((v8 & 0x80u) == 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if ((v8 & 0x80u) == 0) {
    std::string::size_type v5 = v8;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)__p[1];
  }
  uint64_t v6 = std::string::append(&__dst, (const std::string::value_type *)v4, v5);
  *a3 = *v6;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if ((char)v8 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
}

void sub_19E38D3F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E38D428(void **a1)
{
  ((void (*)(uint64_t *__return_ptr))(*a1)[11])(&v14);
  uint64_t v2 = v14;
  sub_19E3AD4CC(&v14);
  if (!v2) {
    return (*(uint64_t (**)(void *))(*a1[1] + 128))(a1[1]);
  }
  if ((int)sub_19E3AB380() <= 2)
  {
    char v13 = 0;
    uint64_t v3 = sub_19E37CA70(MEMORY[0x1E4FBA240], (uint64_t)"sentencepiece_processor.cc", 26);
    sub_19E37CA70(v3, (uint64_t)"(", 1);
    uint64_t v4 = (void *)std::ostream::operator<<();
    std::string::size_type v5 = sub_19E37CA70(v4, (uint64_t)") ", 2);
    uint64_t v6 = sub_19E37CA70(v5, (uint64_t)"LOG(", 4);
    uint64_t v7 = sub_19E37CA70(v6, (uint64_t)"ERROR", 5);
    unsigned __int8 v8 = sub_19E37CA70(v7, (uint64_t)") ", 2);
    ((void (*)(uint64_t *__return_ptr, void **))(*a1)[11])(&v14, a1);
    uint64_t v9 = sub_19E3AD7D4(&v14);
    size_t v10 = strlen(v9);
    int v11 = sub_19E37CA70(v8, (uint64_t)v9, v10);
    sub_19E37CA70(v11, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sub_19E3AD4CC(&v14);
    sub_19E37B91C(&v13);
  }
  return 0;
}

void sub_19E38D5B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
}

uint64_t sub_19E38D5D8(void **a1, uint64_t a2, uint64_t a3)
{
  ((void (*)(uint64_t *__return_ptr))(*a1)[11])(&v18);
  uint64_t v6 = v18;
  sub_19E3AD4CC(&v18);
  if (!v6) {
    return (*(uint64_t (**)(void *, uint64_t, uint64_t))(*a1[1] + 112))(a1[1], a2, a3);
  }
  if ((int)sub_19E3AB380() <= 2)
  {
    char v17 = 0;
    uint64_t v7 = sub_19E37CA70(MEMORY[0x1E4FBA240], (uint64_t)"sentencepiece_processor.cc", 26);
    sub_19E37CA70(v7, (uint64_t)"(", 1);
    unsigned __int8 v8 = (void *)std::ostream::operator<<();
    uint64_t v9 = sub_19E37CA70(v8, (uint64_t)") ", 2);
    size_t v10 = sub_19E37CA70(v9, (uint64_t)"LOG(", 4);
    int v11 = sub_19E37CA70(v10, (uint64_t)"ERROR", 5);
    std::string::size_type v12 = sub_19E37CA70(v11, (uint64_t)") ", 2);
    ((void (*)(uint64_t *__return_ptr, void **))(*a1)[11])(&v18, a1);
    char v13 = sub_19E3AD7D4(&v18);
    size_t v14 = strlen(v13);
    uint64_t v15 = sub_19E37CA70(v12, (uint64_t)v13, v14);
    sub_19E37CA70(v15, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sub_19E3AD4CC(&v18);
    sub_19E37B91C(&v17);
  }
  return 0;
}

void sub_19E38D778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
}

const char *sub_19E38D7A0(void **a1, uint64_t a2)
{
  ((void (*)(uint64_t *__return_ptr))(*a1)[11])(&v17);
  uint64_t v4 = v17;
  sub_19E3AD4CC(&v17);
  if (!v4) {
    return (const char *)(*(uint64_t (**)(void *, uint64_t))(*a1[1] + 120))(a1[1], a2);
  }
  if ((int)sub_19E3AB380() <= 2)
  {
    char v16 = 0;
    std::string::size_type v5 = sub_19E37CA70(MEMORY[0x1E4FBA240], (uint64_t)"sentencepiece_processor.cc", 26);
    sub_19E37CA70(v5, (uint64_t)"(", 1);
    uint64_t v6 = (void *)std::ostream::operator<<();
    uint64_t v7 = sub_19E37CA70(v6, (uint64_t)") ", 2);
    unsigned __int8 v8 = sub_19E37CA70(v7, (uint64_t)"LOG(", 4);
    uint64_t v9 = sub_19E37CA70(v8, (uint64_t)"ERROR", 5);
    size_t v10 = sub_19E37CA70(v9, (uint64_t)") ", 2);
    ((void (*)(uint64_t *__return_ptr, void **))(*a1)[11])(&v17, a1);
    int v11 = sub_19E3AD7D4(&v17);
    size_t v12 = strlen(v11);
    char v13 = sub_19E37CA70(v10, (uint64_t)v11, v12);
    size_t v14 = sub_19E37CA70(v13, (uint64_t)"\nReturns default value ", 23);
    sub_19E37CA70(v14, (uint64_t)"", 0);
    sub_19E3AD4CC(&v17);
    sub_19E37B91C(&v16);
  }
  return "";
}

void sub_19E38D948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
}

float sub_19E38D970(void **a1, uint64_t a2)
{
  ((void (*)(uint64_t *__return_ptr))(*a1)[11])(&v17);
  uint64_t v4 = v17;
  sub_19E3AD4CC(&v17);
  if (!v4) {
    return (*(float (**)(void *, uint64_t))(*a1[1] + 136))(a1[1], a2);
  }
  float v5 = 0.0;
  if ((int)sub_19E3AB380() <= 2)
  {
    char v16 = 0;
    uint64_t v6 = sub_19E37CA70(MEMORY[0x1E4FBA240], (uint64_t)"sentencepiece_processor.cc", 26);
    sub_19E37CA70(v6, (uint64_t)"(", 1);
    uint64_t v7 = (void *)std::ostream::operator<<();
    unsigned __int8 v8 = sub_19E37CA70(v7, (uint64_t)") ", 2);
    uint64_t v9 = sub_19E37CA70(v8, (uint64_t)"LOG(", 4);
    size_t v10 = sub_19E37CA70(v9, (uint64_t)"ERROR", 5);
    int v11 = sub_19E37CA70(v10, (uint64_t)") ", 2);
    ((void (*)(uint64_t *__return_ptr, void **))(*a1)[11])(&v17, a1);
    size_t v12 = sub_19E3AD7D4(&v17);
    size_t v13 = strlen(v12);
    size_t v14 = sub_19E37CA70(v11, (uint64_t)v12, v13);
    sub_19E37CA70(v14, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sub_19E3AD4CC(&v17);
    sub_19E37B91C(&v16);
  }
  return v5;
}

void sub_19E38DB18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
}

uint64_t sub_19E38DB40(void **a1, uint64_t a2)
{
  ((void (*)(uint64_t *__return_ptr))(*a1)[11])(&v16);
  uint64_t v4 = v16;
  sub_19E3AD4CC(&v16);
  if (!v4) {
    return (*(uint64_t (**)(void *, uint64_t))(*a1[1] + 152))(a1[1], a2);
  }
  if ((int)sub_19E3AB380() <= 2)
  {
    char v15 = 0;
    float v5 = sub_19E37CA70(MEMORY[0x1E4FBA240], (uint64_t)"sentencepiece_processor.cc", 26);
    sub_19E37CA70(v5, (uint64_t)"(", 1);
    uint64_t v6 = (void *)std::ostream::operator<<();
    uint64_t v7 = sub_19E37CA70(v6, (uint64_t)") ", 2);
    unsigned __int8 v8 = sub_19E37CA70(v7, (uint64_t)"LOG(", 4);
    uint64_t v9 = sub_19E37CA70(v8, (uint64_t)"ERROR", 5);
    size_t v10 = sub_19E37CA70(v9, (uint64_t)") ", 2);
    ((void (*)(uint64_t *__return_ptr, void **))(*a1)[11])(&v16, a1);
    int v11 = sub_19E3AD7D4(&v16);
    size_t v12 = strlen(v11);
    size_t v13 = sub_19E37CA70(v10, (uint64_t)v11, v12);
    sub_19E37CA70(v13, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sub_19E3AD4CC(&v16);
    sub_19E37B91C(&v15);
  }
  return 0;
}

void sub_19E38DCD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
}

uint64_t sub_19E38DD00(void **a1, uint64_t a2)
{
  ((void (*)(uint64_t *__return_ptr))(*a1)[11])(&v16);
  uint64_t v4 = v16;
  sub_19E3AD4CC(&v16);
  if (!v4) {
    return (*(uint64_t (**)(void *, uint64_t))(*a1[1] + 144))(a1[1], a2);
  }
  if ((int)sub_19E3AB380() <= 2)
  {
    char v15 = 0;
    float v5 = sub_19E37CA70(MEMORY[0x1E4FBA240], (uint64_t)"sentencepiece_processor.cc", 26);
    sub_19E37CA70(v5, (uint64_t)"(", 1);
    uint64_t v6 = (void *)std::ostream::operator<<();
    uint64_t v7 = sub_19E37CA70(v6, (uint64_t)") ", 2);
    unsigned __int8 v8 = sub_19E37CA70(v7, (uint64_t)"LOG(", 4);
    uint64_t v9 = sub_19E37CA70(v8, (uint64_t)"ERROR", 5);
    size_t v10 = sub_19E37CA70(v9, (uint64_t)") ", 2);
    ((void (*)(uint64_t *__return_ptr, void **))(*a1)[11])(&v16, a1);
    int v11 = sub_19E3AD7D4(&v16);
    size_t v12 = strlen(v11);
    size_t v13 = sub_19E37CA70(v10, (uint64_t)v11, v12);
    sub_19E37CA70(v13, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sub_19E3AD4CC(&v16);
    sub_19E37B91C(&v15);
  }
  return 0;
}

void sub_19E38DE98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
}

uint64_t sub_19E38DEC0(void **a1, uint64_t a2)
{
  ((void (*)(uint64_t *__return_ptr))(*a1)[11])(&v16);
  uint64_t v4 = v16;
  sub_19E3AD4CC(&v16);
  if (!v4) {
    return (*(uint64_t (**)(void *, uint64_t))(*a1[1] + 160))(a1[1], a2);
  }
  if ((int)sub_19E3AB380() <= 2)
  {
    char v15 = 0;
    float v5 = sub_19E37CA70(MEMORY[0x1E4FBA240], (uint64_t)"sentencepiece_processor.cc", 26);
    sub_19E37CA70(v5, (uint64_t)"(", 1);
    uint64_t v6 = (void *)std::ostream::operator<<();
    uint64_t v7 = sub_19E37CA70(v6, (uint64_t)") ", 2);
    unsigned __int8 v8 = sub_19E37CA70(v7, (uint64_t)"LOG(", 4);
    uint64_t v9 = sub_19E37CA70(v8, (uint64_t)"ERROR", 5);
    size_t v10 = sub_19E37CA70(v9, (uint64_t)") ", 2);
    ((void (*)(uint64_t *__return_ptr, void **))(*a1)[11])(&v16, a1);
    int v11 = sub_19E3AD7D4(&v16);
    size_t v12 = strlen(v11);
    size_t v13 = sub_19E37CA70(v10, (uint64_t)v11, v12);
    sub_19E37CA70(v13, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sub_19E3AD4CC(&v16);
    sub_19E37B91C(&v15);
  }
  return 0;
}

void sub_19E38E058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
}

uint64_t sub_19E38E080(void **a1, uint64_t a2)
{
  ((void (*)(uint64_t *__return_ptr))(*a1)[11])(&v16);
  uint64_t v4 = v16;
  sub_19E3AD4CC(&v16);
  if (!v4) {
    return (*(uint64_t (**)(void *, uint64_t))(*a1[1] + 176))(a1[1], a2);
  }
  if ((int)sub_19E3AB380() <= 2)
  {
    char v15 = 0;
    float v5 = sub_19E37CA70(MEMORY[0x1E4FBA240], (uint64_t)"sentencepiece_processor.cc", 26);
    sub_19E37CA70(v5, (uint64_t)"(", 1);
    uint64_t v6 = (void *)std::ostream::operator<<();
    uint64_t v7 = sub_19E37CA70(v6, (uint64_t)") ", 2);
    unsigned __int8 v8 = sub_19E37CA70(v7, (uint64_t)"LOG(", 4);
    uint64_t v9 = sub_19E37CA70(v8, (uint64_t)"ERROR", 5);
    size_t v10 = sub_19E37CA70(v9, (uint64_t)") ", 2);
    ((void (*)(uint64_t *__return_ptr, void **))(*a1)[11])(&v16, a1);
    int v11 = sub_19E3AD7D4(&v16);
    size_t v12 = strlen(v11);
    size_t v13 = sub_19E37CA70(v10, (uint64_t)v11, v12);
    sub_19E37CA70(v13, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sub_19E3AD4CC(&v16);
    sub_19E37B91C(&v15);
  }
  return 0;
}

void sub_19E38E218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
}

uint64_t sub_19E38E240(uint64_t *a1)
{
  uint64_t v2 = sub_19E379374(a1[1]);
  size_t v3 = strlen(v2);
  uint64_t v4 = (*(uint64_t (**)(uint64_t *, const char *, size_t))(*a1 + 504))(a1, v2, v3);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(*a1 + 528))(a1, v4)) {
    return v4;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_19E38E300(uint64_t *a1)
{
  uint64_t v2 = sub_19E3793F8(a1[1]);
  size_t v3 = strlen(v2);
  uint64_t v4 = (*(uint64_t (**)(uint64_t *, const char *, size_t))(*a1 + 504))(a1, v2, v3);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(*a1 + 536))(a1, v4)) {
    return v4;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_19E38E3C0(uint64_t *a1)
{
  uint64_t v2 = sub_19E37947C(a1[1]);
  size_t v3 = strlen(v2);
  uint64_t v4 = (*(uint64_t (**)(uint64_t *, const char *, size_t))(*a1 + 504))(a1, v2, v3);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(*a1 + 536))(a1, v4)) {
    return v4;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_19E38E480(uint64_t *a1)
{
  uint64_t v2 = sub_19E379500(a1[1]);
  size_t v3 = strlen(v2);
  uint64_t v4 = (*(uint64_t (**)(uint64_t *, const char *, size_t))(*a1 + 504))(a1, v2, v3);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(*a1 + 536))(a1, v4)) {
    return v4;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t sub_19E38E540@<X0>(void **a1@<X0>, uint64_t *a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t result = ((uint64_t (*)(void **))(*a1)[11])(a1);
  if (!*a3)
  {
    sub_19E3AD4CC(a3);
    if (a2)
    {
      sub_19E391F78(a2);
      uint64_t v7 = *(uint64_t (**)(void))(*a1[1] + 200);
      return v7();
    }
    else
    {
      unsigned int v9 = 13;
      unsigned __int8 v8 = (void *)sub_19E37B784((uint64_t)v10);
      sub_19E37CA70(v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_19E37CA70(v10, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_19E37CA70(v10, (uint64_t)") [", 3);
      sub_19E37CA70(v10, (uint64_t)"pieces", 6);
      sub_19E37CA70(v10, (uint64_t)"] ", 2);
      sub_19E37CA70(v10, (uint64_t)"output container is null", 24);
      sub_19E378FFC(&v9, (uint64_t)a3);
      v10[0] = *MEMORY[0x1E4FBA418];
      *(void *)((char *)v10 + *(void *)(v10[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
      v10[1] = MEMORY[0x1E4FBA470] + 16;
      if (v11 < 0) {
        operator delete((void *)v10[9]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return MEMORY[0x19F3BDC30](&v12);
    }
  }
  return result;
}

void sub_19E38E7C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_19E38E7D8@<X0>(void **a1@<X0>, void *a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t result = ((uint64_t (*)(void **))(*a1)[11])(a1);
  if (!*a3)
  {
    sub_19E3AD4CC(a3);
    if (a2)
    {
      a2[1] = *a2;
      uint64_t v7 = *(uint64_t (**)(void))(*a1[1] + 208);
      return v7();
    }
    else
    {
      unsigned int v9 = 13;
      unsigned __int8 v8 = (void *)sub_19E37B784((uint64_t)v10);
      sub_19E37CA70(v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_19E37CA70(v10, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_19E37CA70(v10, (uint64_t)") [", 3);
      sub_19E37CA70(v10, (uint64_t)"ids", 3);
      sub_19E37CA70(v10, (uint64_t)"] ", 2);
      sub_19E37CA70(v10, (uint64_t)"output container is null", 24);
      sub_19E378FFC(&v9, (uint64_t)a3);
      v10[0] = *MEMORY[0x1E4FBA418];
      *(void *)((char *)v10 + *(void *)(v10[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
      v10[1] = MEMORY[0x1E4FBA470] + 16;
      if (v11 < 0) {
        operator delete((void *)v10[9]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return MEMORY[0x19F3BDC30](&v12);
    }
  }
  return result;
}

void sub_19E38EA58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_19E38EA70(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result)
  {
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)result + 152))(result) + 16);
    return v2();
  }
  return result;
}

uint64_t sub_19E38EAE8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result)
  {
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)result + 152))(result) + 24);
    return v2();
  }
  return result;
}

uint64_t sub_19E38EB60(uint64_t a1)
{
  return a1;
}

void *sub_19E38EB8C@<X0>(_DWORD *a1@<X1>, unint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  size_t v13 = a1;
  unint64_t v14 = a2;
  if (a2 <= 0x13)
  {
    LODWORD(v9) = 13;
    uint64_t v6 = (void *)sub_19E37B784((uint64_t)v10);
    sub_19E37CA70(v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_19E37CA70(v10, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_19E37CA70(v10, (uint64_t)") [", 3);
    sub_19E37CA70(v10, (uint64_t)"(size) >= (sizeof(MMapHeader))", 30);
    sub_19E37CA70(v10, (uint64_t)"] ", 2);
    sub_19E378FFC((unsigned int *)&v9, (uint64_t)a3);
  }
  else if (*a1)
  {
    LODWORD(v9) = 13;
    float v5 = (void *)sub_19E37B784((uint64_t)v10);
    sub_19E37CA70(v5, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_19E37CA70(v10, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_19E37CA70(v10, (uint64_t)") [", 3);
    sub_19E37CA70(v10, (uint64_t)"header->sentinel == 0", 21);
    sub_19E37CA70(v10, (uint64_t)"] ", 2);
    sub_19E37CA70(v10, (uint64_t)"This file format is not for mmap-based loading.", 47);
    sub_19E378FFC((unsigned int *)&v9, (uint64_t)a3);
  }
  else
  {
    uint64_t result = sub_19E3AB7C8(&v13, 0x14uLL, a3);
    if (*a3) {
      return result;
    }
    sub_19E3AD4CC(a3);
    if (v14 >= a1[1]) {
      operator new();
    }
    LODWORD(v9) = 13;
    unsigned __int8 v8 = (void *)sub_19E37B784((uint64_t)v10);
    sub_19E37CA70(v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_19E37CA70(v10, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_19E37CA70(v10, (uint64_t)") [", 3);
    sub_19E37CA70(v10, (uint64_t)"(blob.size()) >= (header->model_proto_size)", 43);
    sub_19E37CA70(v10, (uint64_t)"] ", 2);
    sub_19E378FFC((unsigned int *)&v9, (uint64_t)a3);
  }
  v10[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v10 + *(void *)(v10[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v10[1] = MEMORY[0x1E4FBA470] + 16;
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (void *)MEMORY[0x19F3BDC30](&v12);
}

void sub_19E38F6E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E37908C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19E38F760()
{
}

void sub_19E38F7BC(_Unwind_Exception *a1)
{
  MEMORY[0x19F3BDCF0](v1, 0x10F1C40C7D4252BLL);
  _Unwind_Resume(a1);
}

uint64_t sub_19E38F7E0(uint64_t a1)
{
  uint64_t v2 = a1 + 96;
  MEMORY[0x19F3BD810](a1 + 96);
  if (*(char *)(a1 + 119) < 0)
  {
    uint64_t v2 = *(void *)(a1 + 96);
    uint64_t v3 = *(void *)(a1 + 104);
  }
  else
  {
    uint64_t v3 = *(unsigned __int8 *)(a1 + 119);
  }
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 48);
  return v4(a1, v2, v3);
}

void sub_19E38F868()
{
}

void sub_19E38F990(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E38F9AC(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, void *a4@<X8>)
{
  sub_19E395268(a1);
  if (!a3)
  {
    if (*(char *)(a2 + 23) < 0) {
      sub_19E39369C(__p, *(void **)a2, *(void *)(a2 + 8));
    }
    else {
      __p[0] = *(std::__fs::filesystem::path *)a2;
    }
    if ((__p[0].__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned __int8 v8 = __p;
    }
    else {
      unsigned __int8 v8 = (std::__fs::filesystem::path *)__p[0].__pn_.__r_.__value_.__r.__words[0];
    }
    int v9 = open((const char *)v8, 0, __p[0].__pn_.__r_.__value_.__r.__words[0], __p[0].__pn_.__r_.__value_.__l.__size_, __p[0].__pn_.__r_.__value_.__r.__words[2]);
    int v10 = v9;
    *(_DWORD *)(a1 + 24) = v9;
    if (SHIBYTE(__p[0].__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p[0].__pn_.__r_.__value_.__l.__data_);
      if ((v10 & 0x80000000) == 0) {
        goto LABEL_52;
      }
    }
    else if ((v9 & 0x80000000) == 0)
    {
      goto LABEL_52;
    }
    LODWORD(__p[0].__pn_.__r_.__value_.__l.__data_) = 13;
    char v11 = (void *)sub_19E37B784((uint64_t)&__p[0].__pn_.__r_.__value_.__l.__size_);
    sub_19E37CA70(v11, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/mmap.h", 62);
    sub_19E37CA70(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_19E37CA70(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)") [", 3);
    sub_19E37CA70(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"(fd = ::open(filename.string().data(), mode)) >= 0", 50);
    sub_19E37CA70(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"] ", 2);
    sub_19E37CA70(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"open failed: ", 13);
    uint64_t v12 = *(unsigned __int8 *)(a2 + 23);
    if ((v12 & 0x80u) == 0) {
      size_t v13 = (unsigned char *)a2;
    }
    else {
      size_t v13 = *(unsigned char **)a2;
    }
    if ((v12 & 0x80u) != 0) {
      uint64_t v12 = *(void *)(a2 + 8);
    }
LABEL_66:
    sub_19E395438(&__p[0].__pn_.__r_.__value_.__l.__size_, v13, &v13[v12], 0x22u, 0x5Cu);
    sub_19E378FFC((unsigned int *)__p, (uint64_t)a4);
    __p[0].__pn_.__r_.__value_.__l.__size_ = *MEMORY[0x1E4FBA418];
    *(std::string::size_type *)((char *)&__p[0].__pn_.__r_.__value_.__r.__words[1]
                              + *(void *)(__p[0].__pn_.__r_.__value_.__l.__size_ - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    __p[0].__pn_.__r_.__value_.__r.__words[2] = MEMORY[0x1E4FBA470] + 16;
    if (v28 < 0) {
      operator delete(v27);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x19F3BDC30](v29);
    return;
  }
  sub_19E3952B0((const std::__fs::filesystem::path *)a2, (uint64_t)&v31);
  sub_19E395374((const std::__fs::filesystem::path *)a2, (uint64_t)&v30);
  std::__fs::filesystem::__status(&v31, 0);
  if (__p[0].__pn_.__r_.__value_.__s.__data_[0] != 2) {
    goto LABEL_30;
  }
  if (SHIBYTE(v31.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    sub_19E39369C(__p, v31.__pn_.__r_.__value_.__l.__data_, v31.__pn_.__r_.__value_.__l.__size_);
  }
  else {
    __p[0] = v31;
  }
  if ((__p[0].__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v14 = __p;
  }
  else {
    unint64_t v14 = (std::__fs::filesystem::path *)__p[0].__pn_.__r_.__value_.__r.__words[0];
  }
  int v15 = open((const char *)v14, 0, __p[0].__pn_.__r_.__value_.__r.__words[0], __p[0].__pn_.__r_.__value_.__l.__size_, __p[0].__pn_.__r_.__value_.__r.__words[2]);
  int v16 = v15;
  if (SHIBYTE(__p[0].__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p[0].__pn_.__r_.__value_.__l.__data_);
    if ((v16 & 0x80000000) == 0) {
      goto LABEL_27;
    }
LABEL_30:
    LODWORD(__p[0].__pn_.__r_.__value_.__l.__data_) = 13;
    sub_19E37B784((uint64_t)&__p[0].__pn_.__r_.__value_.__l.__size_);
    sub_19E37CA70(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/mmap.h", 62);
    sub_19E37CA70(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_19E37CA70(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)") [", 3);
    sub_19E37CA70(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"std::filesystem::is_directory(dir) && (dirfd = ::open(dir.string().data(), mode)) >= 0", 86);
    sub_19E37CA70(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"] ", 2);
    sub_19E37CA70(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"open failed: ", 13);
    std::string::size_type size = HIBYTE(v31.__pn_.__r_.__value_.__r.__words[2]);
    if ((v31.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v18 = &v31;
    }
    else {
      uint64_t v18 = (std::__fs::filesystem::path *)v31.__pn_.__r_.__value_.__r.__words[0];
    }
    if ((v31.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v31.__pn_.__r_.__value_.__l.__size_;
    }
    sub_19E395438(&__p[0].__pn_.__r_.__value_.__l.__size_, v18, (unsigned char *)v18 + size, 0x22u, 0x5Cu);
    sub_19E378FFC((unsigned int *)__p, (uint64_t)a4);
    __p[0].__pn_.__r_.__value_.__l.__size_ = *MEMORY[0x1E4FBA418];
    *(std::string::size_type *)((char *)&__p[0].__pn_.__r_.__value_.__r.__words[1]
                              + *(void *)(__p[0].__pn_.__r_.__value_.__l.__size_ - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    __p[0].__pn_.__r_.__value_.__r.__words[2] = MEMORY[0x1E4FBA470] + 16;
    if (v28 < 0) {
      operator delete(v27);
    }
    goto LABEL_37;
  }
  if (v15 < 0) {
    goto LABEL_30;
  }
LABEL_27:
  if (SHIBYTE(v30.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    sub_19E39369C(__p, v30.__pn_.__r_.__value_.__l.__data_, v30.__pn_.__r_.__value_.__l.__size_);
  }
  else {
    __p[0] = v30;
  }
  if ((__p[0].__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v19 = __p;
  }
  else {
    uint64_t v19 = (std::__fs::filesystem::path *)__p[0].__pn_.__r_.__value_.__r.__words[0];
  }
  *(_DWORD *)(a1 + 24) = openat_authenticated_np(v16, (const char *)v19, 0, -1);
  if (SHIBYTE(__p[0].__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__pn_.__r_.__value_.__l.__data_);
  }
  close(v16);
  if ((*(_DWORD *)(a1 + 24) & 0x80000000) == 0)
  {
    if (SHIBYTE(v30.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v30.__pn_.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v31.__pn_.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v31.__pn_.__r_.__value_.__l.__data_);
    }
LABEL_52:
    if (fstat(*(_DWORD *)(a1 + 24), &v32) < 0)
    {
      LODWORD(__p[0].__pn_.__r_.__value_.__l.__data_) = 13;
      unint64_t v22 = (void *)sub_19E37B784((uint64_t)&__p[0].__pn_.__r_.__value_.__l.__size_);
      sub_19E37CA70(v22, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/mmap.h", 62);
      sub_19E37CA70(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_19E37CA70(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)") [", 3);
      sub_19E37CA70(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"::fstat(fd, &st) >= 0", 21);
      sub_19E37CA70(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"] ", 2);
      sub_19E37CA70(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"failed to get file size: ", 25);
      uint64_t v12 = *(unsigned __int8 *)(a2 + 23);
      if ((v12 & 0x80u) == 0) {
        size_t v13 = (unsigned char *)a2;
      }
      else {
        size_t v13 = *(unsigned char **)a2;
      }
      if ((v12 & 0x80u) != 0) {
        uint64_t v12 = *(void *)(a2 + 8);
      }
    }
    else
    {
      st_std::string::size_type size = v32.st_size;
      *(void *)(a1 + 16) = v32.st_size;
      unint64_t v21 = mmap(0, st_size, 1, 1, *(_DWORD *)(a1 + 24), 0);
      if (v21 != (void *)-1)
      {
        *(void *)(a1 + 8) = v21;
        close(*(_DWORD *)(a1 + 24));
        *(_DWORD *)(a1 + 24) = -1;
        sub_19E3AD4C4(a4);
        return;
      }
      LODWORD(__p[0].__pn_.__r_.__value_.__l.__data_) = 13;
      uint64_t v23 = (void *)sub_19E37B784((uint64_t)&__p[0].__pn_.__r_.__value_.__l.__size_);
      sub_19E37CA70(v23, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/mmap.h", 62);
      sub_19E37CA70(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_19E37CA70(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)") [", 3);
      sub_19E37CA70(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"(p = reinterpret_cast<char*>( ::mmap(0, length, PROT_READ, MAP_SHARED, fd, 0))) != MAP_FAILED", 93);
      sub_19E37CA70(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"] ", 2);
      sub_19E37CA70(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"mmap() failed: ", 15);
      uint64_t v12 = *(unsigned __int8 *)(a2 + 23);
      if ((v12 & 0x80u) == 0) {
        size_t v13 = (unsigned char *)a2;
      }
      else {
        size_t v13 = *(unsigned char **)a2;
      }
      if ((v12 & 0x80u) != 0) {
        uint64_t v12 = *(void *)(a2 + 8);
      }
    }
    goto LABEL_66;
  }
  LODWORD(__p[0].__pn_.__r_.__value_.__l.__data_) = 13;
  sub_19E37B784((uint64_t)&__p[0].__pn_.__r_.__value_.__l.__size_);
  sub_19E37CA70(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/mmap.h", 62);
  sub_19E37CA70(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"(", 1);
  std::ostream::operator<<();
  sub_19E37CA70(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)") [", 3);
  sub_19E37CA70(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"fd >= 0", 7);
  sub_19E37CA70(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"] ", 2);
  sub_19E37CA70(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"open failed: ", 13);
  uint64_t v24 = *(unsigned __int8 *)(a2 + 23);
  if ((v24 & 0x80u) == 0) {
    unint64_t v25 = (unsigned char *)a2;
  }
  else {
    unint64_t v25 = *(unsigned char **)a2;
  }
  if ((v24 & 0x80u) != 0) {
    uint64_t v24 = *(void *)(a2 + 8);
  }
  sub_19E395438(&__p[0].__pn_.__r_.__value_.__l.__size_, v25, &v25[v24], 0x22u, 0x5Cu);
  sub_19E378FFC((unsigned int *)__p, (uint64_t)a4);
  __p[0].__pn_.__r_.__value_.__l.__size_ = *MEMORY[0x1E4FBA418];
  *(std::string::size_type *)((char *)&__p[0].__pn_.__r_.__value_.__r.__words[1]
                            + *(void *)(__p[0].__pn_.__r_.__value_.__l.__size_ - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  __p[0].__pn_.__r_.__value_.__r.__words[2] = MEMORY[0x1E4FBA470] + 16;
  if (v28 < 0) {
    operator delete(v27);
  }
LABEL_37:
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x19F3BDC30](v29);
  if (SHIBYTE(v30.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__pn_.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v31.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__pn_.__r_.__value_.__l.__data_);
  }
}

void sub_19E3902C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (*(char *)(v14 - 217) < 0) {
    operator delete(*(void **)(v14 - 240));
  }
  if (*(char *)(v14 - 193) < 0) {
    operator delete(*(void **)(v14 - 216));
  }
  _Unwind_Resume(exception_object);
}

void sub_19E390374()
{
}

void sub_19E39049C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_19E3904B8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 136))(&v3);
  return sub_19E3AD4CC(&v3);
}

void sub_19E39051C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E391F24((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_19E390534@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 144))(&v3);
  return sub_19E3AD4CC(&v3);
}

void sub_19E390598(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_19E3905B4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 176))(&v3);
  return sub_19E3AD4CC(&v3);
}

void sub_19E390618(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E392324((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_19E390630@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 184))(&v3);
  return sub_19E3AD4CC(&v3);
}

void sub_19E390694(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E392398((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_19E3906AC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 192))(&v3);
  return sub_19E3AD4CC(&v3);
}

void sub_19E390710(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E391F24((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_19E390728@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 200))(&v3);
  return sub_19E3AD4CC(&v3);
}

void sub_19E39078C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_19E3907A8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 208))(&v3);
  return sub_19E3AD4CC(&v3);
}

void sub_19E39080C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E392444((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_19E390824@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 216))(&v3);
  return sub_19E3AD4CC(&v3);
}

void sub_19E390888(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E37C8AC((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_19E3908A0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 152))(&v3);
  return sub_19E3AD4CC(&v3);
}

void sub_19E390904(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_19E390920@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 160))(&v3);
  return sub_19E3AD4CC(&v3);
}

void sub_19E390984(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_19E3909A0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 168))(&v3);
  return sub_19E3AD4CC(&v3);
}

void sub_19E390A04(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

float sub_19E390A20(uint64_t a1)
{
  float v4 = 0.0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 224))(&v3);
  float v1 = v4;
  sub_19E3AD4CC(&v3);
  return v1;
}

void sub_19E390A84(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v10 = &unk_1EF0B90A8;
  uint64_t v12 = 0;
  size_t v13 = 0;
  char v11 = sub_19E39EDD0();
  uint64_t v8 = sub_19E382BBC(&v10);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 232))(&v9, a1, a2, a3, v8);
  sub_19E3BBDC0((uint64_t)v11, a4);
  sub_19E3AD4CC(&v9);
  int v10 = &unk_1EF0B90A8;
  if (v13) {
    sub_19E3924B8(v13);
  }
}

void sub_19E390B5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_19E3924B8(a14);
  }
  _Unwind_Resume(a1);
}

void sub_19E390B88(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, float a6@<S0>)
{
  uint64_t v14 = &unk_1EF0B90A8;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  int v15 = sub_19E39EDD0();
  uint64_t v12 = sub_19E382BBC(&v14);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))(*(void *)a1 + 248))(&v13, a1, a2, a3, a4, v12, a6);
  sub_19E3BBDC0((uint64_t)v15, a5);
  sub_19E3AD4CC(&v13);
  uint64_t v14 = &unk_1EF0B90A8;
  if (v17) {
    sub_19E3924B8(v17);
  }
}

void sub_19E390C78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_19E3924B8(a14);
  }
  _Unwind_Resume(a1);
}

void sub_19E390CA4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  v12[1] = 0;
  uint64_t v13 = 0;
  v12[0] = &unk_1EF0B9108;
  uint64_t v10 = sub_19E382CDC((uint64_t)v12);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 240))(&v11, a1, a2, a3, a4, v10);
  sub_19E382D40((uint64_t)v12, a5);
  sub_19E3AD4CC(&v11);
  v12[0] = &unk_1EF0B9108;
  if (v13) {
    sub_19E3924B8(v13);
  }
}

void sub_19E390D7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_19E3924B8(a12);
  }
  _Unwind_Resume(a1);
}

void sub_19E390DA8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>, float a8@<S0>)
{
  v18[1] = 0;
  uint64_t v19 = 0;
  v18[0] = &unk_1EF0B9108;
  uint64_t v16 = sub_19E382CDC((uint64_t)v18);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))(*(void *)a1 + 256))(&v17, a1, a2, a3, a4, a5, a6, v16, a8);
  sub_19E382D40((uint64_t)v18, a7);
  sub_19E3AD4CC(&v17);
  v18[0] = &unk_1EF0B9108;
  if (v19) {
    sub_19E3924B8(v19);
  }
}

void sub_19E390EB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_19E3924B8(a12);
  }
  _Unwind_Resume(a1);
}

void sub_19E390EDC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v8 = &unk_1EF0B90A8;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v9 = sub_19E39EDD0();
  uint64_t v6 = sub_19E382BBC(&v8);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 264))(&v7, a1, a2, v6);
  sub_19E3BBDC0((uint64_t)v9, a3);
  sub_19E3AD4CC(&v7);
  uint64_t v8 = &unk_1EF0B90A8;
  if (v11) {
    sub_19E3924B8(v11);
  }
}

void sub_19E390FAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_19E3924B8(a14);
  }
  _Unwind_Resume(a1);
}

void sub_19E390FD8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v8 = &unk_1EF0B90A8;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v9 = sub_19E39EDD0();
  uint64_t v6 = sub_19E382BBC(&v8);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 272))(&v7, a1, a2, v6);
  sub_19E3BBDC0((uint64_t)v9, a3);
  sub_19E3AD4CC(&v7);
  uint64_t v8 = &unk_1EF0B90A8;
  if (v11) {
    sub_19E3924B8(v11);
  }
}

void sub_19E3910A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_19E3924B8(a14);
  }
  _Unwind_Resume(a1);
}

void sub_19E3910D4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v8 = &unk_1EF0B90A8;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v9 = sub_19E39EDD0();
  uint64_t v6 = sub_19E382BBC(&v8);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 280))(&v7, a1, a2, v6);
  sub_19E3BBDC0((uint64_t)v9, a3);
  sub_19E3AD4CC(&v7);
  uint64_t v8 = &unk_1EF0B90A8;
  if (v11) {
    sub_19E3924B8(v11);
  }
}

void sub_19E3911A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_19E3924B8(a14);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_19E3911D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = &unk_1EF0B90A8;
  uint64_t v8 = sub_19E39EDD0();
  a4[2] = 0;
  a4[3] = 0;
  a4[1] = v8;
  uint64_t v9 = sub_19E382BBC(a4);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 232))(&v11, a1, a2, a3, v9);
  return sub_19E3AD4CC(&v11);
}

void sub_19E391288(_Unwind_Exception *exception_object)
{
  void *v1 = v2;
  float v4 = (std::__shared_weak_count *)v1[3];
  if (v4) {
    sub_19E3924B8(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_19E3912A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>, float a6@<S0>)
{
  *a5 = &unk_1EF0B90A8;
  uint64_t v12 = sub_19E39EDD0();
  a5[2] = 0;
  a5[3] = 0;
  a5[1] = v12;
  uint64_t v13 = sub_19E382BBC(a5);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))(*(void *)a1 + 248))(&v15, a1, a2, a3, a4, v13, a6);
  return sub_19E3AD4CC(&v15);
}

void sub_19E391374(_Unwind_Exception *exception_object)
{
  void *v1 = v2;
  float v4 = (std::__shared_weak_count *)v1[3];
  if (v4) {
    sub_19E3924B8(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_19E391390@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  a5[1] = 0;
  a5[2] = 0;
  *a5 = &unk_1EF0B9108;
  uint64_t v9 = sub_19E382CDC((uint64_t)a5);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 240))(&v11, a1, a2, a3, a4, v9);
  return sub_19E3AD4CC(&v11);
}

void sub_19E391448(_Unwind_Exception *exception_object)
{
  void *v1 = v2;
  float v4 = (std::__shared_weak_count *)v1[2];
  if (v4) {
    sub_19E3924B8(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_19E391464@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>, float a8@<S0>)
{
  a7[1] = 0;
  a7[2] = 0;
  *a7 = &unk_1EF0B9108;
  uint64_t v15 = sub_19E382CDC((uint64_t)a7);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))(*(void *)a1 + 256))(&v17, a1, a2, a3, a4, a5, a6, v15, a8);
  return sub_19E3AD4CC(&v17);
}

void sub_19E39154C(_Unwind_Exception *exception_object)
{
  void *v1 = v2;
  float v4 = (std::__shared_weak_count *)v1[2];
  if (v4) {
    sub_19E3924B8(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_19E391568@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = &unk_1EF0B90A8;
  uint64_t v6 = sub_19E39EDD0();
  a3[2] = 0;
  a3[3] = 0;
  a3[1] = v6;
  uint64_t v7 = sub_19E382BBC(a3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 264))(&v9, a1, a2, v7);
  return sub_19E3AD4CC(&v9);
}

void sub_19E391618(_Unwind_Exception *exception_object)
{
  void *v1 = v2;
  float v4 = (std::__shared_weak_count *)v1[3];
  if (v4) {
    sub_19E3924B8(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_19E391634@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = &unk_1EF0B90A8;
  uint64_t v6 = sub_19E39EDD0();
  a3[2] = 0;
  a3[3] = 0;
  a3[1] = v6;
  uint64_t v7 = sub_19E382BBC(a3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 272))(&v9, a1, a2, v7);
  return sub_19E3AD4CC(&v9);
}

void sub_19E3916E4(_Unwind_Exception *exception_object)
{
  void *v1 = v2;
  float v4 = (std::__shared_weak_count *)v1[3];
  if (v4) {
    sub_19E3924B8(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_19E391700@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = &unk_1EF0B90A8;
  uint64_t v6 = sub_19E39EDD0();
  a3[2] = 0;
  a3[3] = 0;
  a3[1] = v6;
  uint64_t v7 = sub_19E382BBC(a3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 280))(&v9, a1, a2, v7);
  return sub_19E3AD4CC(&v9);
}

void sub_19E3917B0(_Unwind_Exception *exception_object)
{
  void *v1 = v2;
  float v4 = (std::__shared_weak_count *)v1[3];
  if (v4) {
    sub_19E3924B8(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E3917CC(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    sub_19E3AF8D4((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1705);
    float v4 = sub_19E3AF8EC(v8, "CHECK failed: (index) >= (0): ");
    sub_19E3AFA28((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v8);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    sub_19E3AF8D4((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1706);
    float v5 = sub_19E3AF8EC(v8, "CHECK failed: (index) < (current_size_): ");
    sub_19E3AFA28((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v8);
  }
  return *(void *)(*(void *)(a1 + 16) + 8 * a2 + 8);
}

void sub_19E39188C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_19E3918AC(void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    sub_19E37C7C4();
  }
  uint64_t result = (char *)sub_19E37D7FC((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

uint64_t sub_19E3918F0(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    sub_19E3AF8D4((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1705);
    uint64_t v4 = sub_19E3AF8EC(v8, "CHECK failed: (index) >= (0): ");
    sub_19E3AFA28((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v8);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    sub_19E3AF8D4((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1706);
    float v5 = sub_19E3AF8EC(v8, "CHECK failed: (index) < (current_size_): ");
    sub_19E3AFA28((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v8);
  }
  return *(void *)(*(void *)(a1 + 16) + 8 * a2 + 8);
}

void sub_19E3919B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E3919D0(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA418];
  uint64_t v3 = *MEMORY[0x1E4FBA418];
  *(void *)a1 = *MEMORY[0x1E4FBA418];
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 8) = MEMORY[0x1E4FBA470] + 16;
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x19F3BDC30](a1 + 112);
  return a1;
}

uint64_t sub_19E391AD4(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    sub_19E3AF8D4((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1727);
    uint64_t v4 = sub_19E3AF8EC(v8, "CHECK failed: (index) >= (0): ");
    sub_19E3AFA28((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v8);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    sub_19E3AF8D4((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1728);
    float v5 = sub_19E3AF8EC(v8, "CHECK failed: (index) < (current_size_): ");
    sub_19E3AFA28((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v8);
  }
  return *(void *)(*(void *)(a1 + 16) + 8 * a2 + 8);
}

void sub_19E391B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

char **sub_19E391BB4(char **a1, uint64_t a2, unint64_t a3, unsigned __int8 *a4, uint64_t a5, int a6)
{
  uint64_t v9 = 0;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v10 = 0;
  if (a5)
  {
    int v11 = a6;
    if (a3)
    {
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      uint64_t v14 = (unsigned __int8 *)(a2 + a3);
      uint64_t v15 = a1 + 2;
      while (2)
      {
        uint64_t v16 = &v10[a2];
        uint64_t v17 = &v10[a2];
LABEL_5:
        uint64_t v18 = a5;
        uint64_t v19 = a4;
        while (*v17 != *v19)
        {
          ++v19;
          if (!--v18)
          {
            if (++v17 != v14) {
              goto LABEL_5;
            }
            goto LABEL_37;
          }
        }
        if (v17 != v14)
        {
          unint64_t v20 = &v17[-a2];
          if (&v17[-a2] != (unsigned __int8 *)-1)
          {
            unint64_t v21 = (unsigned __int8 *)(v20 - v10);
            BOOL v22 = v20 >= v10;
            if (!v11) {
              BOOL v22 = v20 > v10;
            }
            if (v22)
            {
              uint64_t v23 = (unsigned __int8 *)(a3 - (void)v10);
              if (v23 >= v21) {
                uint64_t v24 = v21;
              }
              else {
                uint64_t v24 = v23;
              }
              if ((unint64_t)v9 >= *v15)
              {
                uint64_t v25 = ((char *)v9 - *a1) >> 4;
                if ((unint64_t)(v25 + 1) >> 60) {
                  sub_19E37C7C4();
                }
                uint64_t v26 = *v15 - (void)*a1;
                uint64_t v27 = v26 >> 3;
                if (v26 >> 3 <= (unint64_t)(v25 + 1)) {
                  uint64_t v27 = v25 + 1;
                }
                if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v28 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v28 = v27;
                }
                if (v28) {
                  int v29 = (char *)sub_19E37D6C0((uint64_t)v15, v28);
                }
                else {
                  int v29 = 0;
                }
                std::__fs::filesystem::path v30 = &v29[16 * v25];
                *(void *)std::__fs::filesystem::path v30 = v16;
                *((void *)v30 + 1) = v24;
                stat v32 = *a1;
                std::__fs::filesystem::path v31 = a1[1];
                unsigned int v33 = v30;
                if (v31 != *a1)
                {
                  do
                  {
                    *((_OWORD *)v33 - 1) = *((_OWORD *)v31 - 1);
                    v33 -= 16;
                    v31 -= 16;
                  }
                  while (v31 != v32);
                  std::__fs::filesystem::path v31 = *a1;
                }
                uint64_t v9 = (unsigned __int8 **)(v30 + 16);
                *a1 = v33;
                a1[1] = v30 + 16;
                a1[2] = &v29[16 * v28];
                if (v31) {
                  operator delete(v31);
                }
                int v11 = a6;
                uint64_t v15 = a1 + 2;
              }
              else
              {
                *uint64_t v9 = v16;
                v9[1] = v24;
                v9 += 2;
              }
              a1[1] = (char *)v9;
            }
            uint64_t v10 = v20 + 1;
            if (a3 > (unint64_t)(v20 + 1)) {
              continue;
            }
          }
        }
        break;
      }
    }
  }
LABEL_37:
  BOOL v34 = a3 > (unint64_t)v10;
  unint64_t v35 = a3 - (void)v10;
  if (v34)
  {
    uint64_t v36 = &v10[a2];
    unint64_t v37 = (unint64_t)a1[2];
    if ((unint64_t)v9 >= v37)
    {
      uint64_t v39 = ((char *)v9 - *a1) >> 4;
      if ((unint64_t)(v39 + 1) >> 60) {
        sub_19E37C7C4();
      }
      uint64_t v40 = v37 - (void)*a1;
      uint64_t v41 = v40 >> 3;
      if (v40 >> 3 <= (unint64_t)(v39 + 1)) {
        uint64_t v41 = v39 + 1;
      }
      if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v42 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v42 = v41;
      }
      if (v42) {
        BOOL v43 = (char *)sub_19E37D6C0((uint64_t)(a1 + 2), v42);
      }
      else {
        BOOL v43 = 0;
      }
      uint64_t v44 = &v43[16 * v39];
      uint64_t v45 = &v43[16 * v42];
      *(void *)uint64_t v44 = v36;
      *((void *)v44 + 1) = v35;
      uint64_t v38 = v44 + 16;
      size_t v47 = *a1;
      uint64_t v46 = a1[1];
      if (v46 != *a1)
      {
        do
        {
          *((_OWORD *)v44 - 1) = *((_OWORD *)v46 - 1);
          v44 -= 16;
          v46 -= 16;
        }
        while (v46 != v47);
        uint64_t v46 = *a1;
      }
      *a1 = v44;
      a1[1] = v38;
      a1[2] = v45;
      if (v46) {
        operator delete(v46);
      }
    }
    else
    {
      *uint64_t v9 = v36;
      v9[1] = (unsigned __int8 *)v35;
      uint64_t v38 = (char *)(v9 + 2);
    }
    a1[1] = v38;
  }
  return a1;
}

void sub_19E391E5C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_19E391E80(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_19E37C770(a1, a2);
    uint64_t v4 = (char *)a1[1];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_19E391F10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_19E391F24(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_19E391F78((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_19E391F78(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

void *sub_19E391FC8(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_19E3805E4(a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_19E392024(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E392040(void *__src@<X0>, size_t __len@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  sub_19E382294(&__dst, __src, __len);
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  uint64_t v6 = *a3;
  uint64_t v7 = a3[1];
  while (v6 != v7)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      **(unsigned char **)a4 = 0;
      *(void *)(a4 + 8) = 0;
    }
    else
    {
      *(unsigned char *)a4 = 0;
      *(unsigned char *)(a4 + 23) = 0;
    }
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_dst = &__dst;
    }
    else {
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __dst.__r_.__value_.__l.__size_;
    }
    uint64_t v10 = *(char **)v6;
    int64_t v11 = *(void *)(v6 + 8);
    uint64_t v12 = *(const std::string::value_type **)(v6 + 16);
    std::string::size_type v13 = *(void *)(v6 + 24);
    uint64_t v18 = p_dst;
    std::string::size_type v19 = size;
    if (v11)
    {
      uint64_t v14 = sub_19E3921D8((uint64_t *)&v18, v10, v11, 0);
      if (v14 == -1)
      {
        uint64_t v16 = 0;
      }
      else
      {
        uint64_t v15 = v14;
        uint64_t v16 = 0;
        do
        {
          std::string::append((std::string *)a4, (const std::string::value_type *)v18 + v16, v15 - v16);
          std::string::append((std::string *)a4, v12, v13);
          uint64_t v16 = v15 + v11;
          uint64_t v15 = sub_19E3921D8((uint64_t *)&v18, v10, v11, v15 + v11);
        }
        while (v15 != -1);
      }
      p_dst = (std::string *)((char *)v18 + v16);
      std::string::size_type size = v19 - v16;
    }
    std::string::append((std::string *)a4, (const std::string::value_type *)p_dst, size);
    std::string::operator=(&__dst, (const std::string *)a4);
    v6 += 32;
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
}

void sub_19E3921A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E3921D8(uint64_t *a1, char *a2, int64_t a3, unint64_t a4)
{
  unint64_t v4 = a1[1];
  if (v4 < a4) {
    return -1;
  }
  if (a3)
  {
    uint64_t v6 = *a1;
    uint64_t v7 = (void *)(*a1 + a4);
    uint64_t v8 = (char *)(v6 + v4);
    uint64_t v9 = v6 + v4 - (void)v7;
    if (v9 >= a3)
    {
      int v13 = *a2;
      do
      {
        uint64_t v14 = v9 - a3;
        if (v14 == -1) {
          break;
        }
        uint64_t v15 = (char *)memchr(v7, v13, v14 + 1);
        if (!v15) {
          break;
        }
        uint64_t v10 = v15;
        if (!memcmp(v15, a2, a3)) {
          goto LABEL_6;
        }
        uint64_t v7 = v10 + 1;
        uint64_t v9 = v8 - (v10 + 1);
      }
      while (v9 >= a3);
    }
    uint64_t v10 = v8;
LABEL_6:
    if (v10 == v8) {
      return -1;
    }
    else {
      return (uint64_t)&v10[-v6];
    }
  }
  return a4;
}

void sub_19E392294(const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_19E3922F0(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E599EF00, MEMORY[0x1E4FBA1D0]);
}

void sub_19E3922DC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_19E3922F0(std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
  return result;
}

void sub_19E392324(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    unint64_t v4 = (void **)v1[1];
    size_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        uint64_t v6 = v4;
        sub_19E391F24(&v6);
      }
      while (v4 != v2);
      size_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_19E392398(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_19E3923EC((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_19E3923EC(uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      uint64_t v6 = *(void **)(v4 - 24);
      v4 -= 24;
      size_t v5 = v6;
      if (v6)
      {
        *(void *)(v2 - 16) = v5;
        operator delete(v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void sub_19E392444(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    size_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 4;
        uint64_t v6 = v4;
        sub_19E391F24(&v6);
      }
      while (v4 != v2);
      size_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_19E3924B8(std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

uint64_t sub_19E39252C(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    sub_19E3AF8D4((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1727);
    uint64_t v4 = sub_19E3AF8EC(v8, "CHECK failed: (index) >= (0): ");
    sub_19E3AFA28((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v8);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    sub_19E3AF8D4((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1728);
    size_t v5 = sub_19E3AF8EC(v8, "CHECK failed: (index) < (current_size_): ");
    sub_19E3AFA28((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v8);
  }
  return *(void *)(*(void *)(a1 + 16) + 8 * a2 + 8);
}

void sub_19E3925EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_19E39260C@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x70uLL);
  uint64_t result = sub_19E392658(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_19E392644(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_19E392658(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1EF0BE1E8;
  sub_19E39EC6C(a1 + 3, 0);
  return a1;
}

void sub_19E3926A4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_19E3926B8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0BE1E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_19E3926D8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0BE1E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19F3BDCF0);
}

uint64_t sub_19E39272C(uint64_t a1)
{
  return sub_19E39ED94(a1 + 24);
}

void *sub_19E392738@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x48uLL);
  uint64_t result = sub_19E392784(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_19E392770(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_19E392784(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1EF0BE220;
  sub_19E39F828(a1 + 3, 0);
  return a1;
}

void sub_19E3927D0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_19E3927E4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0BE220;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_19E392804(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EF0BE220;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19F3BDCF0);
}

uint64_t sub_19E392858(uint64_t a1)
{
  return sub_19E39F8E4(a1 + 24);
}

uint64_t sub_19E392864(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_19E3A7924();
    JUMPOUT(0x19F3BDCF0);
  }
  return result;
}

void sub_19E3928B4(void *__src@<X0>, size_t __len@<X1>, void **a3@<X2>, char *a4@<X3>, void **a5@<X4>, std::string *a6@<X8>)
{
  sub_19E382294(&__dst, __src, __len);
  int v10 = *((char *)a3 + 23);
  if (v10 >= 0) {
    int64_t v11 = a3;
  }
  else {
    int64_t v11 = *a3;
  }
  if (v10 >= 0) {
    size_t v12 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v12 = (size_t)a3[1];
  }
  sub_19E3929B8(v11, v12, a4, a5, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  uint64_t v15 = std::string::append(&__dst, (const std::string::value_type *)p_p, size);
  *a6 = *v15;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
}

void sub_19E392984(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E3929B8(void *__src@<X0>, size_t __len@<X1>, char *a3@<X2>, void **a4@<X3>, std::string *a5@<X8>)
{
  sub_19E382294(&__dst, __src, __len);
  size_t v8 = strlen(a3);
  sub_19E392AAC(a3, v8, a4, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  int64_t v11 = std::string::append(&__dst, (const std::string::value_type *)p_p, size);
  *a5 = *v11;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
}

void sub_19E392A78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E392AAC(void *__src@<X0>, size_t __len@<X1>, void **a3@<X2>, std::string *a4@<X8>)
{
  sub_19E382294(&__dst, __src, __len);
  int v6 = *((char *)a3 + 23);
  if (v6 >= 0) {
    char v7 = a3;
  }
  else {
    char v7 = *a3;
  }
  if (v6 >= 0) {
    size_t v8 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v8 = (size_t)a3[1];
  }
  sub_19E382294(__p, v7, v8);
  if ((v13 & 0x80u) == 0) {
    uint64_t v9 = __p;
  }
  else {
    uint64_t v9 = (void **)__p[0];
  }
  if ((v13 & 0x80u) == 0) {
    std::string::size_type v10 = v13;
  }
  else {
    std::string::size_type v10 = (std::string::size_type)__p[1];
  }
  int64_t v11 = std::string::append(&__dst, (const std::string::value_type *)v9, v10);
  *a4 = *v11;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if ((char)v13 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
}

void sub_19E392B64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E392B98(uint64_t *a1, void *a2)
{
  uint64_t result = sub_19E392C10((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_19E392C10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      *(void *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((void *)&v15 + 1) = v9;
  }
  char v13 = 1;
  sub_19E392CB0((uint64_t)v12);
  return a6;
}

uint64_t sub_19E392CB0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_19E392CE8(a1);
  }
  return a1;
}

void sub_19E392CE8(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    v1 += 24;
  }
}

uint64_t sub_19E392D30(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_19E392D68(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 3;
      *(void *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        uint64_t v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

uint64_t sub_19E392DC0(uint64_t a1, _OWORD *a2, _OWORD *a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (void *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_19E392E44((uint64_t **)a1, v4, (uint64_t)v6, v6);
      ++v6;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_19E392E2C(_Unwind_Exception *a1)
{
  sub_19E37CE48(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_19E392E44(uint64_t **a1, void *a2, uint64_t a3, _OWORD *a4)
{
  uint64_t v6 = sub_19E392ECC(a1, a2, &v11, &v10, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v7 + 2) = *a4;
    sub_19E37D280(a1, v11, v8, v7);
  }
  return v7;
}

uint64_t *sub_19E392ECC(void *a1, void *a2, void *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v9 = a1 + 1;
  if (a1 + 1 != a2 && !sub_19E37D2D8((uint64_t)(a1 + 2), a5, (uint64_t)(a2 + 4)))
  {
    if (!sub_19E37D2D8((uint64_t)(a1 + 2), (uint64_t)(a2 + 4), a5))
    {
      *a3 = a2;
      *a4 = (uint64_t)a2;
      return a4;
    }
    a4 = a2 + 1;
    uint64_t v13 = a2[1];
    if (v13)
    {
      long long v14 = (void *)a2[1];
      do
      {
        long long v15 = v14;
        long long v14 = (void *)*v14;
      }
      while (v14);
    }
    else
    {
      uint64_t v18 = a2;
      do
      {
        long long v15 = (void *)v18[2];
        BOOL v17 = *v15 == (void)v18;
        uint64_t v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!sub_19E37D2D8((uint64_t)(a1 + 2), a5, (uint64_t)(v15 + 4))) {
        goto LABEL_28;
      }
      uint64_t v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = a2;
    }
    return a4;
  }
  if ((void *)*a1 == a2)
  {
    size_t v12 = a2;
LABEL_16:
    if (*a2)
    {
      *a3 = v12;
      return v12 + 1;
    }
    else
    {
      *a3 = a2;
      return a2;
    }
  }
  uint64_t v11 = (void *)*a2;
  if (*a2)
  {
    do
    {
      size_t v12 = v11;
      uint64_t v11 = (void *)v11[1];
    }
    while (v11);
  }
  else
  {
    uint64_t v16 = a2;
    do
    {
      size_t v12 = (void *)v16[2];
      BOOL v17 = *v12 == (void)v16;
      uint64_t v16 = v12;
    }
    while (v17);
  }
  if (sub_19E37D2D8((uint64_t)(a1 + 2), (uint64_t)(v12 + 4), a5)) {
    goto LABEL_16;
  }
LABEL_28:
  return sub_19E37D1E0((uint64_t)a1, a3, a5);
}

void *sub_19E393078(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  uint64_t v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 16;
  uint64_t v6 = (void *)(a1 + 8);
  do
  {
    int v7 = sub_19E37D2D8(v5, (uint64_t)(v3 + 4), a2);
    uint64_t v8 = v3 + 1;
    if (!v7)
    {
      uint64_t v8 = v3;
      uint64_t v6 = v3;
    }
    uint64_t v3 = (void *)*v8;
  }
  while (*v8);
  if (v6 == v2 || sub_19E37D2D8(v5, a2, (uint64_t)(v6 + 4))) {
    return v2;
  }
  return v6;
}

uint64_t sub_19E393108(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA488] + 104;
  *(void *)(a1 + 128) = MEMORY[0x1E4FBA488] + 104;
  uint64_t v3 = a1 + 16;
  uint64_t v4 = MEMORY[0x1E4FBA488] + 64;
  *(void *)(a1 + 16) = MEMORY[0x1E4FBA488] + 64;
  uint64_t v5 = (void *)MEMORY[0x1E4FBA408];
  uint64_t v6 = *(void *)(MEMORY[0x1E4FBA408] + 24);
  uint64_t v7 = *(void *)(MEMORY[0x1E4FBA408] + 16);
  *(void *)a1 = v7;
  *(void *)(a1 + *(void *)(v7 - 24)) = v6;
  *(void *)(a1 + 8) = 0;
  uint64_t v8 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  uint64_t v9 = MEMORY[0x1E4FBA488] + 24;
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  uint64_t v10 = v5[5];
  uint64_t v11 = v5[4];
  *(void *)(a1 + 16) = v11;
  *(void *)(v3 + *(void *)(v11 - 24)) = v10;
  uint64_t v12 = v5[1];
  *(void *)a1 = v12;
  *(void *)(a1 + *(void *)(v12 - 24)) = v5[6];
  *(void *)a1 = v9;
  *(void *)(a1 + 128) = v2;
  *(void *)(a1 + 16) = v4;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 24) = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 12sub_19E392864(&a9, 0) = 24;
  return a1;
}

void sub_19E3933B8(_Unwind_Exception *a1)
{
  std::iostream::~basic_iostream();
  MEMORY[0x19F3BDC30](v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19E3933E0(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA408];
  uint64_t v3 = *MEMORY[0x1E4FBA408];
  *(void *)a1 = *MEMORY[0x1E4FBA408];
  uint64_t v4 = *(void *)(v2 + 72);
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 64);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = MEMORY[0x1E4FBA470] + 16;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x19F3BDC30](a1 + 128);
  return a1;
}

void *sub_19E393518(void *result, long long *a2)
{
  uint64_t v2 = result;
  uint64_t v3 = result[1];
  if (*((char *)a2 + 23) < 0)
  {
    uint64_t result = sub_19E39369C((unsigned char *)result[1], *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *(void *)(v3 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v3 = v4;
  }
  v2[1] = v3 + 24;
  return result;
}

void sub_19E393570(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_19E393578(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_19E37C7C4();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v18 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_19E37C7DC(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[24 * v4];
  v15[0] = v10;
  v15[1] = v11;
  uint64_t v16 = v11;
  BOOL v17 = &v10[24 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    sub_19E39369C(v11, *(void **)a2, *((void *)a2 + 1));
    uint64_t v11 = v16;
  }
  else
  {
    long long v12 = *a2;
    *((void *)v11 + 2) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v11 = v12;
  }
  uint64_t v16 = v11 + 24;
  sub_19E392B98(a1, v15);
  uint64_t v13 = a1[1];
  sub_19E392D30((uint64_t)v15);
  return v13;
}

void sub_19E393688(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E392D30((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_19E39369C(unsigned char *__dst, void *__src, unint64_t a3)
{
  unint64_t v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8) {
      sub_19E37C958();
    }
    uint64_t v6 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17) {
      uint64_t v6 = a3 | 7;
    }
    uint64_t v7 = v6 + 1;
    unint64_t v8 = operator new(v6 + 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000;
    *unint64_t v5 = v8;
    unint64_t v5 = v8;
  }
  else
  {
    __dst[23] = a3;
  }
  return memmove(v5, __src, a3 + 1);
}

char *sub_19E39373C(uint64_t a1, long long **a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)uint64_t v3 = 0;
  *(void *)(v3 + 8) = 0;
  *(void *)(v3 + 16) = 0;
  uint64_t result = sub_19E3938C0((char *)v3, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  *(void *)(a1 + 8) = v3 + 24;
  return result;
}

void sub_19E393794(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_19E39379C(uint64_t *a1, long long **a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_19E37C7C4();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  BOOL v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_19E37C7DC(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  long long v15 = v11;
  uint64_t v16 = &v10[24 * v9];
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  sub_19E3938C0(v11, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  v15 += 24;
  sub_19E393A88(a1, v14);
  uint64_t v12 = a1[1];
  sub_19E393C28(v14);
  return v12;
}

void sub_19E3938AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E393C28((void **)va);
  _Unwind_Resume(a1);
}

char *sub_19E3938C0(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_19E37C770(result, a4);
    uint64_t result = sub_19E393948((uint64_t)(v6 + 16), a2, a3, *((char **)v6 + 1));
    *((void *)v6 + 1) = result;
  }
  return result;
}

void sub_19E393928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_19E391F24(&a9);
  _Unwind_Resume(a1);
}

char *sub_19E393948(uint64_t a1, long long *a2, long long *a3, char *__dst)
{
  unint64_t v4 = __dst;
  uint64_t v11 = __dst;
  uint64_t v12 = __dst;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_19E39369C(v4, *(void **)v6, *((void *)v6 + 1));
        unint64_t v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        *((void *)v4 + 2) = *((void *)v6 + 2);
        *(_OWORD *)unint64_t v4 = v7;
      }
      uint64_t v6 = (long long *)((char *)v6 + 24);
      v4 += 24;
      uint64_t v12 = v4;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  sub_19E393A08((uint64_t)v9);
  return v4;
}

void sub_19E3939F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_19E393A08(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_19E393A40(a1);
  }
  return a1;
}

void sub_19E393A40(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0) {
      operator delete(*(void **)(v1 - 24));
    }
    v1 -= 24;
  }
}

uint64_t sub_19E393A88(uint64_t *a1, void *a2)
{
  uint64_t result = sub_19E393B00((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_19E393B00(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_19E393BA4((uint64_t)v11);
  return v9;
}

uint64_t sub_19E393BA4(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_19E393BDC(a1);
  }
  return a1;
}

void sub_19E393BDC(uint64_t a1)
{
  uint64_t v1 = *(void ***)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void ***)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = v1;
    sub_19E391F24(&v3);
    v1 += 3;
  }
}

void **sub_19E393C28(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_19E393C5C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    unint64_t v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    uint64_t v5 = v4;
    sub_19E391F24(&v5);
  }
}

void *sub_19E393CB0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 8);
  *uint64_t v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  uint64_t result = sub_19E393E1C(v3, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  *(void *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_19E393CFC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_19E393D04(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_19E37C7C4();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  BOOL v17 = a1 + 2;
  if (v9) {
    char v10 = (char *)sub_19E37C7DC(v7, v9);
  }
  else {
    char v10 = 0;
  }
  uint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  long long v15 = v11;
  uint64_t v16 = &v10[24 * v9];
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  sub_19E393E1C(v11, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  v15 += 24;
  sub_19E393E98(a1, v14);
  uint64_t v12 = a1[1];
  sub_19E394034((uint64_t)v14);
  return v12;
}

void sub_19E393E08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E394034((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_19E393E1C(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = sub_19E3918AC(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_19E393E7C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E393E98(uint64_t *a1, void *a2)
{
  uint64_t result = sub_19E393F10((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_19E393F10(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_19E393FB4((uint64_t)v11);
  return v9;
}

uint64_t sub_19E393FB4(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_19E393FEC(a1);
  }
  return a1;
}

void sub_19E393FEC(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

uint64_t sub_19E394034(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_19E39406C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    uint64_t v5 = *(void **)(v2 - 24);
    *(void *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(void *)(v2 - 16) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

uint64_t sub_19E3940C8(uint64_t *a1, void *a2)
{
  uint64_t result = sub_19E394178((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_19E394140(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59) {
    sub_19E37C2B8();
  }
  return operator new(32 * a2);
}

uint64_t sub_19E394178(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      long long v8 = *(_OWORD *)(a3 - 32);
      a3 -= 32;
      *(_OWORD *)(v7 - 32) = v8;
      *(void *)(v7 - 16) = *(void *)(a3 + 16);
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)a3 = 0;
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 + 24);
      uint64_t v7 = *((void *)&v14 + 1) - 32;
      *((void *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_19E394224((uint64_t)v11);
  return v9;
}

uint64_t sub_19E394224(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_19E39425C(a1);
  }
  return a1;
}

void sub_19E39425C(uint64_t a1)
{
  uint64_t v1 = *(void ***)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void ***)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = v1;
    sub_19E391F24(&v3);
    v1 += 4;
  }
}

void **sub_19E3942A8(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_19E3942DC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    unint64_t v4 = (void **)(i - 32);
    *(void *)(a1 + 16) = v4;
    uint64_t v5 = v4;
    sub_19E391F24(&v5);
  }
}

float sub_19E394330(uint64_t a1, long long **a2, float *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)uint64_t v5 = 0;
  *(void *)(v5 + 8) = 0;
  *(void *)(v5 + 16) = 0;
  sub_19E3938C0((char *)v5, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  float result = *a3;
  *(float *)(v5 + 24) = *a3;
  *(void *)(a1 + 8) = v5 + 32;
  return result;
}

void sub_19E39439C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_19E3943A4(uint64_t *a1, long long **a2, _DWORD *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (a1[1] - *a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    sub_19E37C7C4();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v10 = a1[2] - v4;
  if (v10 >> 4 > v6) {
    unint64_t v6 = v10 >> 4;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v6;
  }
  std::string::size_type v19 = a1 + 2;
  if (v11) {
    char v12 = (char *)sub_19E394140(v9, v11);
  }
  else {
    char v12 = 0;
  }
  long long v13 = &v12[32 * v5];
  v16[0] = v12;
  v16[1] = v13;
  BOOL v17 = v13;
  uint64_t v18 = &v12[32 * v11];
  *(void *)long long v13 = 0;
  *((void *)v13 + 1) = 0;
  *((void *)v13 + 2) = 0;
  sub_19E3938C0(v13, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  *((_DWORD *)v13 + 6) = *a3;
  v17 += 32;
  sub_19E3940C8(a1, v16);
  uint64_t v14 = a1[1];
  sub_19E3942A8(v16);
  return v14;
}

void sub_19E3944A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E3942A8((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E3944B4(uint64_t *a1, void *a2)
{
  uint64_t result = sub_19E39452C((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_19E39452C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      long long v8 = *(_OWORD *)(a3 - 32);
      a3 -= 32;
      *(_OWORD *)(v7 - 32) = v8;
      *(void *)(v7 - 16) = *(void *)(a3 + 16);
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)a3 = 0;
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 + 24);
      uint64_t v7 = *((void *)&v14 + 1) - 32;
      *((void *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_19E3945D8((uint64_t)v11);
  return v9;
}

uint64_t sub_19E3945D8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_19E394610(a1);
  }
  return a1;
}

void sub_19E394610(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 32;
  }
}

uint64_t sub_19E394658(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_19E394690(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    uint64_t v5 = *(void **)(v2 - 32);
    *(void *)(a1 + 16) = v2 - 32;
    if (v5)
    {
      *(void *)(v2 - 24) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 32;
    }
  }
}

float sub_19E3946EC(uint64_t a1, uint64_t a2, float *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)uint64_t v5 = 0;
  *(void *)(v5 + 8) = 0;
  *(void *)(v5 + 16) = 0;
  sub_19E393E1C((void *)v5, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  float result = *a3;
  *(float *)(v5 + 24) = *a3;
  *(void *)(a1 + 8) = v5 + 32;
  return result;
}

void sub_19E39474C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_19E394754(uint64_t *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (a1[1] - *a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    sub_19E37C7C4();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v10 = a1[2] - v4;
  if (v10 >> 4 > v6) {
    unint64_t v6 = v10 >> 4;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v6;
  }
  std::string::size_type v19 = a1 + 2;
  if (v11) {
    char v12 = (char *)sub_19E394140(v9, v11);
  }
  else {
    char v12 = 0;
  }
  long long v13 = &v12[32 * v5];
  v16[0] = v12;
  v16[1] = v13;
  BOOL v17 = v13;
  uint64_t v18 = &v12[32 * v11];
  *(void *)long long v13 = 0;
  *((void *)v13 + 1) = 0;
  *((void *)v13 + 2) = 0;
  sub_19E393E1C(v13, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  *((_DWORD *)v13 + 6) = *a3;
  v17 += 32;
  sub_19E3944B4(a1, v16);
  uint64_t v14 = a1[1];
  sub_19E394658((uint64_t)v16);
  return v14;
}

void sub_19E394844(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E394658((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_19E394858(void *a1, unint64_t a2, _DWORD *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_19E3918AC(a1, a2);
    unint64_t v6 = (_DWORD *)a1[1];
    uint64_t v7 = &v6[a2];
    uint64_t v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_19E3948C0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E3948DC(uint64_t a1, float *a2, float *a3)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  sub_19E394A44((char *)a1, a2, a3, a3 - a2);
  sub_19E394938((double **)a1);
  return a1;
}

void sub_19E39491C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E394938(double **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 != v2)
  {
    if ((unint64_t)((char *)v2 - (char *)v1) < 9)
    {
      a1[1] = v1;
      sub_19E394B00((uint64_t)a1);
    }
    else
    {
      uint64_t v4 = v2 - v1;
      double v5 = 0.0;
      unint64_t v6 = *a1;
      do
      {
        double v7 = *v6++;
        double v5 = v5 + v7;
      }
      while (v6 != v2);
      while (v1 < v2)
      {
        double *v1 = *v1 / v5;
        ++v1;
      }
      sub_19E394BC8(&v16, v4 - 1);
      uint64_t v8 = *a1;
      uint64_t v9 = (uint64_t)(a1[1] - 1);
      uint64_t v10 = v16;
      if (*a1 != (double *)v9)
      {
        unint64_t v11 = v8 + 1;
        double v12 = *v8;
        *uint64_t v16 = *v8;
        if (v8 + 1 != (double *)v9)
        {
          long long v13 = v10 + 1;
          do
          {
            double v14 = *v11++;
            double v12 = v12 + v14;
            *v13++ = v12;
          }
          while (v11 != (double *)v9);
        }
      }
      *a1 = v10;
      long long v15 = a1[2];
      *(_OWORD *)(a1 + 1) = v17;
      uint64_t v16 = v8;
      *((void *)&v17 + 1) = v15;
      if (v8)
      {
        *(void *)&long long v17 = v8;
        operator delete(v8);
      }
    }
  }
}

char *sub_19E394A44(char *result, float *a2, float *a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    float result = sub_19E394ABC(result, a4);
    double v7 = (double *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      float v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_19E394AA0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_19E394ABC(void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    sub_19E37C7C4();
  }
  float result = (char *)sub_19E37CFB8((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void sub_19E394B00(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(char **)a1;
  double v5 = *(unsigned char **)(a1 + 8);
  unint64_t v6 = (v5 - v4) >> 3;
  if (v6 >= (v3 - (uint64_t)v4) >> 3) {
    return;
  }
  if (v5 == v4)
  {
    unint64_t v11 = 0;
    uint64_t v9 = 8 * v6;
    goto LABEL_8;
  }
  double v7 = (char *)sub_19E37CFB8(v2, v6);
  uint64_t v4 = *(char **)a1;
  float v8 = *(char **)(a1 + 8);
  uint64_t v9 = (uint64_t)&v7[8 * v6];
  unint64_t v11 = &v7[8 * v10];
  if (v8 == *(char **)a1)
  {
LABEL_8:
    uint64_t v12 = v9;
    goto LABEL_9;
  }
  uint64_t v12 = v9;
  do
  {
    uint64_t v13 = *((void *)v8 - 1);
    v8 -= 8;
    *(void *)(v12 - 8) = v13;
    v12 -= 8;
  }
  while (v8 != v4);
LABEL_9:
  *(void *)a1 = v12;
  *(void *)(a1 + 8) = v9;
  *(void *)(a1 + 16) = v11;
  if (v4)
  {
    operator delete(v4);
  }
}

void *sub_19E394BC8(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_19E394ABC(a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_19E394C24(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_19E394C40(uint64_t a1, uint64_t a2, double **a3)
{
  double v5 = *a3;
  unint64_t v6 = a3[1];
  unsigned int v7 = sub_19E394CF8(a2);
  unsigned int v8 = sub_19E394CF8(a2);
  if (v6 != v5)
  {
    unint64_t v9 = v6 - v5;
    do
    {
      unint64_t v10 = v9 >> 1;
      unint64_t v11 = &v5[v9 >> 1];
      double v13 = *v11;
      uint64_t v12 = v11 + 1;
      v9 += ~(v9 >> 1);
      if (((double)v7 + (double)v8 * 4294967300.0) * 5.42101086e-20 + 0.0 < v13) {
        unint64_t v9 = v10;
      }
      else {
        double v5 = v12;
      }
    }
    while (v9);
    unint64_t v6 = v5;
  }
  return (unint64_t)((char *)v6 - (char *)*a3) >> 3;
}

uint64_t sub_19E394CF8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 2496);
  unint64_t v2 = (v1 + 1) % 0x270uLL;
  unsigned int v3 = *(_DWORD *)(a1 + 4 * ((v1 + 397) % 0x270uLL)) ^ ((*(_DWORD *)(a1 + 4 * v2) & 0x7FFFFFFE | *(_DWORD *)(a1 + 4 * v1) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(a1 + 4 * v2) << 31) >> 31) & 0x9908B0DF;
  *(_DWORD *)(a1 + 4 * v1) = v3;
  *(void *)(a1 + 2496) = v2;
  LODWORD(v1) = ((v3 ^ (v3 >> 11)) << 7) & 0x9D2C5680 ^ v3 ^ (v3 >> 11);
  return (v1 << 15) & 0xEFC60000 ^ v1 ^ (((v1 << 15) & 0xEFC60000 ^ v1) >> 18);
}

uint64_t sub_19E394D98()
{
  sub_19E37B784((uint64_t)v1);
  std::ostream::operator<<();
  std::stringbuf::str();
  v1[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v1 + *(void *)(v1[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v1[1] = MEMORY[0x1E4FBA470] + 16;
  if (v2 < 0) {
    operator delete((void *)v1[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x19F3BDC30](&v3);
}

void sub_19E394ECC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E3919D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E394EE0(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_19E37C7C4();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  double v14 = a1 + 2;
  if (v6) {
    unsigned int v7 = (char *)sub_19E37C7DC((uint64_t)(a1 + 2), v6);
  }
  else {
    unsigned int v7 = 0;
  }
  unint64_t v10 = v7;
  unint64_t v11 = &v7[24 * v3];
  double v13 = &v7[24 * v6];
  sub_19E394FF0(a1 + 16, v11, a2);
  uint64_t v12 = v11 + 24;
  sub_19E392B98(a1, &v10);
  uint64_t v8 = a1[1];
  sub_19E392D30((uint64_t)&v10);
  return v8;
}

void sub_19E394FDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E392D30((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19E394FF0(int a1, unsigned char *__dst, uint64_t a3)
{
  unint64_t v3 = __dst;
  size_t v4 = *(void *)(a3 + 8);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_19E37C958();
  }
  double v5 = *(const void **)a3;
  if (v4 >= 0x17)
  {
    uint64_t v6 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v6 = v4 | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v8 = operator new(v6 + 1);
    v3[1] = v4;
    v3[2] = v7 | 0x8000000000000000;
    *unint64_t v3 = v8;
    unint64_t v3 = v8;
  }
  else
  {
    __dst[23] = v4;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v3, v5, v4);
LABEL_9:
  *((unsigned char *)v3 + v4) = 0;
}

uint64_t sub_19E39508C(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    uint64_t v2 = *(void *)(a1 + 8);
    unint64_t v3 = (void *)(v2 & 0xFFFFFFFFFFFFFFFELL);
    if (v2) {
      unint64_t v3 = (void *)*v3;
    }
    uint64_t v4 = *(void *)(a2 + 8);
    double v5 = (void *)(v4 & 0xFFFFFFFFFFFFFFFELL);
    if (v4) {
      double v5 = (void *)*v5;
    }
    if (v3 == v5) {
      return (uint64_t)sub_19E39E9B0(a1, a2);
    }
    else {
      return sub_19E3BB2F8(a1, a2);
    }
  }
  return a1;
}

uint64_t sub_19E3950D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (void *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 24 * a3;
    do
    {
      sub_19E395154((uint64_t **)a1, v4, a2, a2);
      a2 += 24;
      v6 -= 24;
    }
    while (v6);
  }
  return a1;
}

void sub_19E39513C(_Unwind_Exception *a1)
{
  sub_19E37CE48(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

_OWORD *sub_19E395154(uint64_t **a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = sub_19E392ECC(a1, a2, &v11, &v10, a3);
  uint64_t v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = operator new(0x38uLL);
    v7[2] = *(_OWORD *)a4;
    *((void *)v7 + 6) = *(void *)(a4 + 16);
    sub_19E37D280(a1, v11, v8, (uint64_t *)v7);
  }
  return v7;
}

void sub_19E3951E8(void *a1)
{
  sub_19E395220(a1);
  JUMPOUT(0x19F3BDCF0);
}

void *sub_19E395220(void *a1)
{
  *a1 = &unk_1EF0B9298;
  sub_19E395268((uint64_t)a1);
  return a1;
}

void *sub_19E395268(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 24);
  if ((v2 & 0x80000000) == 0)
  {
    close(v2);
    *(_DWORD *)(a1 + 24) = -1;
  }
  float result = *(void **)(a1 + 8);
  if (result) {
    float result = (void *)munmap(result, *(void *)(a1 + 16));
  }
  *(void *)(a1 + 8) = 0;
  return result;
}

double sub_19E3952B0@<D0>(const std::__fs::filesystem::path *a1@<X0>, uint64_t a2@<X8>)
{
  std::__fs::filesystem::path::__string_view v3 = std::__fs::filesystem::path::__parent_path(a1);
  if (v3.__size_ >= 0x7FFFFFFFFFFFFFF8) {
    sub_19E37C958();
  }
  if (v3.__size_ >= 0x17)
  {
    std::basic_string_view<_CharT, _Traits>::size_type v5 = (v3.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3.__size_ | 7) != 0x17) {
      std::basic_string_view<_CharT, _Traits>::size_type v5 = v3.__size_ | 7;
    }
    std::basic_string_view<_CharT, _Traits>::size_type v6 = v5 + 1;
    p_dst = (long long *)operator new(v5 + 1);
    *((void *)&__dst + 1) = v3.__size_;
    unint64_t v9 = v6 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
  }
  else
  {
    HIBYTE(v9) = v3.__size_;
    p_dst = &__dst;
    if (!v3.__size_) {
      goto LABEL_9;
    }
  }
  memmove(p_dst, v3.__data_, v3.__size_);
LABEL_9:
  *((unsigned char *)p_dst + v3.__size_) = 0;
  double result = *(double *)&__dst;
  *(_OWORD *)a2 = __dst;
  *(void *)(a2 + 16) = v9;
  return result;
}

double sub_19E395374@<D0>(const std::__fs::filesystem::path *a1@<X0>, uint64_t a2@<X8>)
{
  std::__fs::filesystem::path::__string_view v3 = std::__fs::filesystem::path::__filename(a1);
  if (v3.__size_ >= 0x7FFFFFFFFFFFFFF8) {
    sub_19E37C958();
  }
  if (v3.__size_ >= 0x17)
  {
    std::basic_string_view<_CharT, _Traits>::size_type v5 = (v3.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3.__size_ | 7) != 0x17) {
      std::basic_string_view<_CharT, _Traits>::size_type v5 = v3.__size_ | 7;
    }
    std::basic_string_view<_CharT, _Traits>::size_type v6 = v5 + 1;
    p_dst = (long long *)operator new(v5 + 1);
    *((void *)&__dst + 1) = v3.__size_;
    unint64_t v9 = v6 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
  }
  else
  {
    HIBYTE(v9) = v3.__size_;
    p_dst = &__dst;
    if (!v3.__size_) {
      goto LABEL_9;
    }
  }
  memmove(p_dst, v3.__data_, v3.__size_);
LABEL_9:
  *((unsigned char *)p_dst + v3.__size_) = 0;
  double result = *(double *)&__dst;
  *(_OWORD *)a2 = __dst;
  *(void *)(a2 + 16) = v9;
  return result;
}

void *sub_19E395438(void *a1, unsigned char *a2, unsigned char *a3, unsigned __int8 __c, unsigned __int8 a5)
{
  memset(&v15, 0, sizeof(v15));
  std::string::push_back(&v15, __c);
  while (a2 != a3)
  {
    int v10 = *a2;
    if (v10 == a5 || v10 == __c)
    {
      std::string::push_back(&v15, a5);
      LOBYTE(v1sub_19E392864(&a9, 0) = *a2;
    }
    std::string::push_back(&v15, v10);
    ++a2;
  }
  std::string::push_back(&v15, __c);
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v11 = &v15;
  }
  else {
    uint64_t v11 = (std::string *)v15.__r_.__value_.__r.__words[0];
  }
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v15.__r_.__value_.__l.__size_;
  }
  double v13 = sub_19E37CA70(a1, (uint64_t)v11, size);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  return v13;
}

void sub_19E39551C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_19E39553C(std::string *this, char **a2)
{
  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  std::__fs::filesystem::path::__string_view v3 = *a2;
  uint64_t v4 = v3 - 1;
  while (*++v4)
    ;
  sub_19E39559C(this, v3, v4);
  return this;
}

void sub_19E395580(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_19E39559C(std::string *this, char *a2, char *a3)
{
  uint64_t v4 = a2;
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  unint64_t v7 = a3 - a2;
  if ((v6 & 0x80000000) != 0)
  {
    if (a3 == a2) {
      return this;
    }
    std::string::size_type size = this->__r_.__value_.__l.__size_;
    unint64_t v11 = this->__r_.__value_.__r.__words[2];
    std::string::size_type v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    int v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    unint64_t v6 = HIBYTE(v11);
  }
  else
  {
    if (a3 == a2) {
      return this;
    }
    std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    std::string::size_type v9 = 22;
    int v10 = this;
  }
  if (v10 > (std::string *)v4 || (char *)&v10->__r_.__value_.__l.__data_ + size + 1 <= v4)
  {
    if (v9 - size < v7)
    {
      std::string::__grow_by(this, v9, size - v9 + v7, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((unsigned char *)&this->__r_.__value_.__s + 23);
    }
    double v14 = this;
    if ((v6 & 0x80) != 0) {
      double v14 = (std::string *)this->__r_.__value_.__r.__words[0];
    }
    for (uint64_t i = (char *)v14 + size; v4 != a3; ++i)
    {
      char v16 = *v4++;
      unsigned char *i = v16;
    }
    unsigned char *i = 0;
    std::string::size_type v17 = v7 + size;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
      this->__r_.__value_.__l.__size_ = v17;
    }
    else {
      *((unsigned char *)&this->__r_.__value_.__s + 23) = v17 & 0x7F;
    }
  }
  else
  {
    sub_19E395714(__p, v4, a3, v7);
    if ((v20 & 0x80u) == 0) {
      uint64_t v12 = __p;
    }
    else {
      uint64_t v12 = (void **)__p[0];
    }
    if ((v20 & 0x80u) == 0) {
      std::string::size_type v13 = v20;
    }
    else {
      std::string::size_type v13 = (std::string::size_type)__p[1];
    }
    std::string::append(this, (const std::string::value_type *)v12, v13);
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
  }
  return this;
}

void sub_19E3956F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_19E395714(void *result, char *a2, char *a3, unint64_t a4)
{
  uint64_t v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_19E37C958();
  }
  if (a4 > 0x16)
  {
    uint64_t v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17) {
      uint64_t v8 = a4 | 7;
    }
    uint64_t v9 = v8 + 1;
    double result = operator new(v8 + 1);
    v4[1] = a4;
    v4[2] = v9 | 0x8000000000000000;
    *uint64_t v4 = result;
    uint64_t v4 = result;
  }
  else
  {
    *((unsigned char *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    char v10 = *a2++;
    *(unsigned char *)uint64_t v4 = v10;
    uint64_t v4 = (void *)((char *)v4 + 1);
  }
  *(unsigned char *)uint64_t v4 = 0;
  return result;
}

void sub_19E3957BC()
{
}

uint64_t sub_19E3957E8(uint64_t a1)
{
  *(void *)a1 = &unk_1EF0B94F8;
  sub_19E39C4B0((void *)(a1 + 96));
  uint64_t v4 = (void **)(a1 + 72);
  sub_19E392398(&v4);
  uint64_t v4 = (void **)(a1 + 48);
  sub_19E392398(&v4);
  int v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_19E39586C(uint64_t a1)
{
  sub_19E3957E8(a1);
  JUMPOUT(0x19F3BDCF0);
}

uint64_t sub_19E3958A4(void *a1)
{
  uint64_t v2 = a1[5];
  unint64_t v3 = a1[6];
  unint64_t v4 = a1[4];
  if (v4 >= v3)
  {
    unint64_t v4 = 0;
    ++v2;
    a1[4] = 0;
    a1[5] = v2;
  }
  uint64_t v5 = a1[1];
  if (v2 == (a1[2] - v5) >> 3)
  {
    is_mul_ok(v3, 0x30uLL);
    operator new[]();
  }
  uint64_t result = *(void *)(v5 + 8 * v2) + 48 * v4;
  a1[4] = v4 + 1;
  return result;
}

void sub_19E395A28(void *a1)
{
  sub_19E3923EC(a1 + 6);
  sub_19E3923EC(a1 + 9);
  a1[1] = "";
  a1[2] = 0;
  a1[4] = a1[3];
  sub_19E395A80((uint64_t)(a1 + 12));
}

void sub_19E395A80(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 40);
  if (v2 + 1 < (int)((*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3)) {
    int v3 = v2 + 1;
  }
  else {
    int v3 = (*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3;
  }
  if (v3 >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 8 * v3;
    do
    {
      bzero(*(void **)(*(void *)(a1 + 8) + v4), 48 * *(void *)(a1 + 48));
      v4 += 8;
    }
    while (v5 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4sub_19E392864(&a9, 0) = 0;
}

void sub_19E395AFC(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  sub_19E395A28((void *)a1);
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a3;
  unint64_t v6 = (char **)(a1 + 24);
  sub_19E3820AC((void **)(a1 + 24), a3 + 1);
  if (a3)
  {
    unint64_t v7 = (void *)(a1 + 40);
    uint64_t v8 = *(void **)(a1 + 32);
    do
    {
      if ((int)a3 >= asc_19E564BD9[(unint64_t)*a2 >> 4]) {
        int v9 = asc_19E564BD9[(unint64_t)*a2 >> 4];
      }
      else {
        int v9 = a3;
      }
      if ((unint64_t)v8 >= *v7)
      {
        uint64_t v10 = ((char *)v8 - *v6) >> 3;
        if ((unint64_t)(v10 + 1) >> 61) {
          goto LABEL_76;
        }
        uint64_t v11 = *v7 - (void)*v6;
        uint64_t v12 = v11 >> 2;
        if (v11 >> 2 <= (unint64_t)(v10 + 1)) {
          uint64_t v12 = v10 + 1;
        }
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v12;
        }
        if (v13) {
          double v14 = (char *)sub_19E37CFB8(a1 + 40, v13);
        }
        else {
          double v14 = 0;
        }
        std::string v15 = &v14[8 * v10];
        *(void *)std::string v15 = a2;
        uint64_t v8 = v15 + 8;
        std::string::size_type v17 = *(char **)(a1 + 24);
        char v16 = *(char **)(a1 + 32);
        if (v16 != v17)
        {
          do
          {
            uint64_t v18 = *((void *)v16 - 1);
            v16 -= 8;
            *((void *)v15 - 1) = v18;
            v15 -= 8;
          }
          while (v16 != v17);
          char v16 = *v6;
        }
        *(void *)(a1 + 24) = v15;
        *(void *)(a1 + 32) = v8;
        *(void *)(a1 + 4sub_19E392864(&a9, 0) = &v14[8 * v13];
        if (v16) {
          operator delete(v16);
        }
      }
      else
      {
        *v8++ = a2;
      }
      *(void *)(a1 + 32) = v8;
      a2 += v9;
      a3 -= v9;
    }
    while (a3);
  }
  else
  {
    uint64_t v8 = *(void **)(a1 + 32);
  }
  unint64_t v19 = *(void *)(a1 + 40);
  if ((unint64_t)v8 >= v19)
  {
    uint64_t v21 = ((char *)v8 - *v6) >> 3;
    if ((unint64_t)(v21 + 1) >> 61) {
LABEL_76:
    }
      sub_19E37C7C4();
    uint64_t v22 = v19 - (void)*v6;
    uint64_t v23 = v22 >> 2;
    if (v22 >> 2 <= (unint64_t)(v21 + 1)) {
      uint64_t v23 = v21 + 1;
    }
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v24 = v23;
    }
    if (v24) {
      uint64_t v25 = (char *)sub_19E37CFB8(a1 + 40, v24);
    }
    else {
      uint64_t v25 = 0;
    }
    uint64_t v26 = &v25[8 * v21];
    uint64_t v27 = &v25[8 * v24];
    *(void *)uint64_t v26 = a2;
    unsigned __int8 v20 = v26 + 8;
    int v29 = *(char **)(a1 + 24);
    unint64_t v28 = *(char **)(a1 + 32);
    if (v28 != v29)
    {
      do
      {
        uint64_t v30 = *((void *)v28 - 1);
        v28 -= 8;
        *((void *)v26 - 1) = v30;
        v26 -= 8;
      }
      while (v28 != v29);
      unint64_t v28 = *v6;
    }
    *(void *)(a1 + 24) = v26;
    *(void *)(a1 + 32) = v20;
    *(void *)(a1 + 4sub_19E392864(&a9, 0) = v27;
    if (v28) {
      operator delete(v28);
    }
  }
  else
  {
    *uint64_t v8 = a2;
    unsigned __int8 v20 = v8 + 1;
  }
  *(void *)(a1 + 32) = v20;
  int v31 = (((unint64_t)v20 - *(void *)(a1 + 24)) >> 3) - 1;
  unsigned int v32 = v31 & ~(v31 >> 31);
  sub_19E395F3C((uint64_t *)(a1 + 48), v32 + 1);
  sub_19E395F3C((uint64_t *)(a1 + 72), v32 + 1);
  uint64_t v33 = 0;
  do
  {
    sub_19E3820AC((void **)(*(void *)(a1 + 48) + v33), 0x10uLL);
    sub_19E3820AC((void **)(*(void *)(a1 + 72) + v33), 0x10uLL);
    v33 += 24;
  }
  while (24 * v32 + 24 != v33);
  BOOL v34 = (_DWORD *)sub_19E3958A4((void *)(a1 + 96));
  v34[6] = *(_DWORD *)(a1 + 128) + *(_DWORD *)(a1 + 136) * *(_DWORD *)(a1 + 144) - 1;
  v34[7] = -1;
  v34[4] = 0;
  unint64_t v35 = *(void ***)(a1 + 72);
  uint64_t v36 = v35[1];
  unint64_t v37 = (unint64_t)v35[2];
  if ((unint64_t)v36 >= v37)
  {
    uint64_t v39 = ((char *)v36 - (unsigned char *)*v35) >> 3;
    if ((unint64_t)(v39 + 1) >> 61) {
      sub_19E37C7C4();
    }
    uint64_t v40 = v37 - (void)*v35;
    uint64_t v41 = v40 >> 2;
    if (v40 >> 2 <= (unint64_t)(v39 + 1)) {
      uint64_t v41 = v39 + 1;
    }
    if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v42 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v42 = v41;
    }
    if (v42) {
      BOOL v43 = (char *)sub_19E37CFB8((uint64_t)(v35 + 2), v42);
    }
    else {
      BOOL v43 = 0;
    }
    uint64_t v44 = &v43[8 * v39];
    uint64_t v45 = &v43[8 * v42];
    *(void *)uint64_t v44 = v34;
    uint64_t v38 = v44 + 8;
    size_t v47 = (char *)*v35;
    uint64_t v46 = (char *)v35[1];
    if (v46 != *v35)
    {
      do
      {
        uint64_t v48 = *((void *)v46 - 1);
        v46 -= 8;
        *((void *)v44 - 1) = v48;
        v44 -= 8;
      }
      while (v46 != v47);
      uint64_t v46 = (char *)*v35;
    }
    *unint64_t v35 = v44;
    v35[1] = v38;
    v35[2] = v45;
    if (v46) {
      operator delete(v46);
    }
  }
  else
  {
    *uint64_t v36 = v34;
    uint64_t v38 = v36 + 1;
  }
  v35[1] = v38;
  BOOL v49 = (_DWORD *)sub_19E3958A4((void *)(a1 + 96));
  uint64_t v50 = v49;
  v49[6] = *(_DWORD *)(a1 + 128) + *(_DWORD *)(a1 + 136) * *(_DWORD *)(a1 + 144) - 1;
  v49[7] = -1;
  v49[4] = v32;
  uint64_t v51 = (void **)(*(void *)(a1 + 48) + 24 * v32);
  uint64_t v52 = v51 + 1;
  size_t v53 = v51[1];
  unint64_t v54 = (unint64_t)v51[2];
  if ((unint64_t)v53 >= v54)
  {
    uint64_t v56 = ((char *)v53 - (unsigned char *)*v51) >> 3;
    if ((unint64_t)(v56 + 1) >> 61) {
      sub_19E37C7C4();
    }
    uint64_t v57 = v54 - (void)*v51;
    uint64_t v58 = v57 >> 2;
    if (v57 >> 2 <= (unint64_t)(v56 + 1)) {
      uint64_t v58 = v56 + 1;
    }
    if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v59 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v59 = v58;
    }
    if (v59) {
      uint64_t v60 = (char *)sub_19E37CFB8((uint64_t)(v51 + 2), v59);
    }
    else {
      uint64_t v60 = 0;
    }
    uint64_t v61 = &v60[8 * v56];
    long long v62 = &v60[8 * v59];
    *(void *)uint64_t v61 = v50;
    int v55 = v61 + 8;
    uint64_t v63 = (char *)*v52;
    BOOL v64 = (char *)*v51;
    if (*v52 != *v51)
    {
      do
      {
        uint64_t v65 = *((void *)v63 - 1);
        v63 -= 8;
        *((void *)v61 - 1) = v65;
        v61 -= 8;
      }
      while (v63 != v64);
      uint64_t v63 = (char *)*v51;
    }
    *uint64_t v51 = v61;
    *uint64_t v52 = v55;
    v51[2] = v62;
    if (v63) {
      operator delete(v63);
    }
  }
  else
  {
    *size_t v53 = v49;
    int v55 = v53 + 1;
  }
  *uint64_t v52 = v55;
}

void sub_19E395F3C(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    sub_19E39C540(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      uint64_t v8 = a1[1];
      do
      {
        uint64_t v10 = *(void **)(v8 - 24);
        v8 -= 24;
        int v9 = v10;
        if (v10)
        {
          *(void *)(v3 - 16) = v9;
          operator delete(v9);
        }
        uint64_t v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

uint64_t sub_19E395FE4(uint64_t a1, int a2, int a3)
{
  uint64_t v6 = sub_19E3958A4((void *)(a1 + 96));
  uint64_t v7 = v6;
  int v8 = *(_DWORD *)(a1 + 128) + *(_DWORD *)(a1 + 136) * *(_DWORD *)(a1 + 144) - 1;
  *(_DWORD *)(v6 + 2sub_19E392864(&a9, 0) = a3;
  *(_DWORD *)(v6 + 24) = v8;
  *(_DWORD *)(v6 + 16) = a2;
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = *(void *)(v9 + 8 * (a3 + a2));
  uint64_t v11 = *(void *)(v9 + 8 * a2);
  *(void *)uint64_t v6 = v11;
  *(void *)(v6 + 8) = (int)v10 - (int)v11;
  uint64_t v12 = (uint64_t **)(*(void *)(a1 + 48) + 24 * a2);
  unint64_t v13 = (void **)(v12 + 1);
  double v14 = v12[1];
  char v16 = (char **)(v12 + 2);
  unint64_t v15 = (unint64_t)v12[2];
  if ((unint64_t)v14 >= v15)
  {
    uint64_t v18 = v14 - *v12;
    if ((unint64_t)(v18 + 1) >> 61) {
      sub_19E37C7C4();
    }
    uint64_t v19 = v15 - (void)*v12;
    uint64_t v20 = v19 >> 2;
    if (v19 >> 2 <= (unint64_t)(v18 + 1)) {
      uint64_t v20 = v18 + 1;
    }
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v21 = v20;
    }
    if (v21) {
      uint64_t v22 = (char *)sub_19E37CFB8((uint64_t)v16, v21);
    }
    else {
      uint64_t v22 = 0;
    }
    uint64_t v23 = (uint64_t *)&v22[8 * v18];
    unint64_t v24 = &v22[8 * v21];
    *uint64_t v23 = v7;
    std::string::size_type v17 = v23 + 1;
    uint64_t v25 = (char *)*v13;
    uint64_t v26 = (char *)*v12;
    if (*v13 != *v12)
    {
      do
      {
        uint64_t v27 = *((void *)v25 - 1);
        v25 -= 8;
        *--uint64_t v23 = v27;
      }
      while (v25 != v26);
      uint64_t v25 = (char *)*v12;
    }
    unsigned char *v12 = v23;
    *unint64_t v13 = v17;
    *char v16 = v24;
    if (v25) {
      operator delete(v25);
    }
  }
  else
  {
    *double v14 = v6;
    std::string::size_type v17 = v14 + 1;
  }
  *unint64_t v13 = v17;
  unint64_t v28 = (void **)(*(void *)(a1 + 72) + 24 * (*(_DWORD *)(v7 + 20) + a2));
  int v29 = v28 + 1;
  uint64_t v30 = (uint64_t *)v28[1];
  unint64_t v31 = (unint64_t)v28[2];
  if ((unint64_t)v30 >= v31)
  {
    uint64_t v33 = ((char *)v30 - (unsigned char *)*v28) >> 3;
    if ((unint64_t)(v33 + 1) >> 61) {
      sub_19E37C7C4();
    }
    uint64_t v34 = v31 - (void)*v28;
    uint64_t v35 = v34 >> 2;
    if (v34 >> 2 <= (unint64_t)(v33 + 1)) {
      uint64_t v35 = v33 + 1;
    }
    if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v36 = v35;
    }
    if (v36) {
      unint64_t v37 = (char *)sub_19E37CFB8((uint64_t)(v28 + 2), v36);
    }
    else {
      unint64_t v37 = 0;
    }
    uint64_t v38 = (uint64_t *)&v37[8 * v33];
    uint64_t v39 = &v37[8 * v36];
    *uint64_t v38 = v7;
    unsigned int v32 = v38 + 1;
    uint64_t v40 = (char *)*v29;
    uint64_t v41 = (char *)*v28;
    if (*v29 != *v28)
    {
      do
      {
        uint64_t v42 = *((void *)v40 - 1);
        v40 -= 8;
        *--uint64_t v38 = v42;
      }
      while (v40 != v41);
      uint64_t v40 = (char *)*v28;
    }
    *unint64_t v28 = v38;
    char *v29 = v32;
    v28[2] = v39;
    if (v40) {
      operator delete(v40);
    }
  }
  else
  {
    *uint64_t v30 = v7;
    unsigned int v32 = v30 + 1;
  }
  char *v29 = v32;
  return v7;
}

void sub_19E39620C(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = 0;
  int v4 = ((a1[4] - a1[3]) >> 3) - 1;
  unsigned int v5 = v4 & ~(v4 >> 31);
  uint64_t v6 = a1[6];
  while (1)
  {
    uint64_t v7 = (uint64_t **)(v6 + 24 * v3);
    int v8 = *v7;
    uint64_t v9 = v7[1];
    if (v8 != v9) {
      break;
    }
LABEL_14:
    if (++v3 == v5 + 1)
    {
      std::string __p = 0;
      uint64_t v46 = 0;
      size_t v47 = 0;
      uint64_t v21 = **(void **)(v6 + 24 * v5);
      int v22 = *(_DWORD *)(v21 + 36);
      uint64_t v23 = *(void *)(v21 + 40);
      if (*(void *)(v23 + 40))
      {
        unint64_t v24 = 0;
        do
        {
          if (v24 >= v47)
          {
            uint64_t v25 = (v24 - (unsigned char *)__p) >> 3;
            if ((unint64_t)(v25 + 1) >> 61) {
              sub_19E37C7C4();
            }
            unint64_t v26 = (v47 - (unsigned char *)__p) >> 2;
            if (v26 <= v25 + 1) {
              unint64_t v26 = v25 + 1;
            }
            if ((unint64_t)(v47 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v27 = v26;
            }
            if (v27) {
              unint64_t v28 = (char *)sub_19E37CFB8((uint64_t)&v47, v27);
            }
            else {
              unint64_t v28 = 0;
            }
            int v29 = &v28[8 * v25];
            *(void *)int v29 = v23;
            unint64_t v24 = v29 + 8;
            unint64_t v31 = (char *)__p;
            uint64_t v30 = v46;
            if (v46 != __p)
            {
              do
              {
                uint64_t v32 = *((void *)v30 - 1);
                v30 -= 8;
                *((void *)v29 - 1) = v32;
                v29 -= 8;
              }
              while (v30 != v31);
              uint64_t v30 = (char *)__p;
            }
            std::string __p = v29;
            uint64_t v46 = v24;
            size_t v47 = &v28[8 * v27];
            if (v30) {
              operator delete(v30);
            }
          }
          else
          {
            *(void *)unint64_t v24 = v23;
            v24 += 8;
          }
          uint64_t v46 = v24;
          uint64_t v23 = *(void *)(v23 + 40);
        }
        while (*(void *)(v23 + 40));
        uint64_t v33 = __p;
        uint64_t v34 = v24 - 8;
        if (__p != v24 && v34 > __p)
        {
          unint64_t v36 = (char *)__p + 8;
          do
          {
            uint64_t v37 = *((void *)v36 - 1);
            *((void *)v36 - 1) = *(void *)v34;
            *(void *)uint64_t v34 = v37;
            v34 -= 8;
            BOOL v38 = v36 >= v34;
            v36 += 8;
          }
          while (!v38);
          uint64_t v33 = __p;
          unint64_t v24 = v46;
        }
      }
      else
      {
        unint64_t v24 = 0;
        uint64_t v33 = 0;
      }
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      sub_19E39B5FC((void *)a2, v33, (uint64_t)v24, (v24 - (unsigned char *)v33) >> 3);
      *(_DWORD *)(a2 + 24) = v22;
      if (__p)
      {
        uint64_t v46 = (char *)__p;
        operator delete(__p);
      }
      return;
    }
  }
  uint64_t v10 = (uint64_t **)(a1[9] + 24 * v3);
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  while (1)
  {
    uint64_t v13 = *v8;
    *(void *)(*v8 + 4sub_19E392864(&a9, 0) = 0;
    if (v11 == v12) {
      break;
    }
    uint64_t v14 = 0;
    float v15 = 0.0;
    char v16 = v11;
    do
    {
      uint64_t v18 = *v16++;
      uint64_t v17 = v18;
      float v19 = *(float *)(v18 + 36) + *(float *)(v13 + 32);
      if (v19 > v15 || v14 == 0)
      {
        float v15 = v19;
        uint64_t v14 = v17;
      }
    }
    while (v16 != v12);
    if (!v14) {
      break;
    }
    *(void *)(v13 + 4sub_19E392864(&a9, 0) = v14;
    *(float *)(v13 + 36) = v15;
    if (++v8 == v9) {
      goto LABEL_14;
    }
  }
  if ((int)sub_19E3AB380() <= 2)
  {
    LOBYTE(__p) = 0;
    uint64_t v39 = sub_19E37CA70(MEMORY[0x1E4FBA240], (uint64_t)"unigram_model.cc", 16);
    sub_19E37CA70(v39, (uint64_t)"(", 1);
    uint64_t v40 = (void *)std::ostream::operator<<();
    uint64_t v41 = sub_19E37CA70(v40, (uint64_t)") ", 2);
    uint64_t v42 = sub_19E37CA70(v41, (uint64_t)"LOG(", 4);
    BOOL v43 = sub_19E37CA70(v42, (uint64_t)"ERROR", 5);
    uint64_t v44 = sub_19E37CA70(v43, (uint64_t)") ", 2);
    sub_19E37CA70(v44, (uint64_t)"Failed to find the best path in Viterbi.", 40);
    sub_19E37B91C(&__p);
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 24) = 0;
  *(void *)(a2 + 16) = 0;
}

void sub_19E396508(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E39653C(void *a1@<X0>, uint64_t *a2@<X8>, float a3@<S0>)
{
  int v6 = ((a1[4] - a1[3]) >> 3) - 1;
  int v7 = v6 & ~(v6 >> 31);
  unint64_t v8 = a1[16] + a1[17] * a1[18];
  int v29 = 0;
  uint64_t v25 = a2;
  sub_19E394858(a2, v8, &v29);
  uint64_t v9 = 0;
  uint64_t v28 = a1[6];
  unint64_t v26 = a1;
  uint64_t v27 = (v7 + 1);
  do
  {
    uint64_t v10 = (uint64_t *)(v28 + 24 * v9);
    uint64_t v11 = *v10;
    uint64_t v12 = v10[1];
    if (*v10 != v12)
    {
      uint64_t v13 = v26[9] + 24 * v9;
      float v15 = *(void **)v13;
      uint64_t v14 = *(void **)(v13 + 8);
      uint64_t v16 = *v25;
      do
      {
        if (v15 != v14)
        {
          uint64_t v17 = *(unsigned int *)(*(void *)v11 + 24);
          uint64_t v18 = *v15;
          float v19 = *(float *)(v16 + 4 * v17);
          uint64_t v20 = v15;
          do
          {
            float v21 = *(float *)(v16 + 4 * *(unsigned int *)(*v20 + 24)) + (float)(a3 * *(float *)(*v20 + 32));
            if (*v20 != v18)
            {
              if (v21 >= v19) {
                float v22 = v19;
              }
              else {
                float v22 = *(float *)(v16 + 4 * *(unsigned int *)(*v20 + 24)) + (float)(a3 * *(float *)(*v20 + 32));
              }
              if (v19 >= v21) {
                float v21 = v19;
              }
              if (v21 <= (float)(v22 + 50.0))
              {
                double v23 = v21;
                long double v24 = exp((float)(v22 - v21));
                float v21 = log(v24 + 1.0) + v23;
              }
            }
            *(float *)(v16 + 4 * v17) = v21;
            ++v20;
            float v19 = v21;
          }
          while (v20 != v14);
        }
        v11 += 8;
      }
      while (v11 != v12);
    }
    ++v9;
  }
  while (v9 != v27);
}

float sub_19E3966C4(void *a1, float a2)
{
  uint64_t v5 = a1[3];
  uint64_t v4 = a1[4];
  unint64_t v6 = a1[16] + a1[17] * a1[18];
  LODWORD(__p[0]) = 0;
  sub_19E394858(v29, v6, __p);
  sub_19E39653C(a1, (uint64_t *)__p, a2);
  uint64_t v7 = 0;
  uint64_t v27 = a1[6];
  unsigned int v25 = (((unint64_t)(v4 - v5) >> 3) - 1) & ~((int)(((unint64_t)(v4 - v5) >> 3) - 1) >> 31);
  unint64_t v26 = a1;
  do
  {
    unint64_t v8 = (uint64_t *)(v27 + 24 * v7);
    uint64_t v9 = *v8;
    uint64_t v10 = v8[1];
    if (*v8 != v10)
    {
      uint64_t v11 = (uint64_t **)(v26[9] + 24 * v7);
      uint64_t v12 = *v11;
      uint64_t v13 = v11[1];
      uint64_t v14 = (float *)__p[0];
      float v15 = (float *)v29[0];
      do
      {
        if (v12 != v13)
        {
          uint64_t v16 = *(unsigned int *)(*(void *)v9 + 24);
          float v17 = v15[v16];
          uint64_t v18 = v12;
          do
          {
            uint64_t v19 = *v18++;
            uint64_t v20 = *(unsigned int *)(v19 + 24);
            float v21 = (float)(v14[v20] + (float)(a2 * *(float *)(v19 + 32))) - v14[v16];
            float v17 = v17 + (float)(expf(v21) * (float)(v21 + v15[v20]));
            v15[v16] = v17;
          }
          while (v18 != v13);
        }
        v9 += 8;
      }
      while (v9 != v10);
    }
    ++v7;
  }
  while (v7 != v25 + 1);
  float v22 = v29[0];
  float v23 = *((float *)v29[0] + *(unsigned int *)(**(void **)(v27 + 24 * v25) + 24));
  if (!__p[0] || (__p[1] = __p[0], operator delete(__p[0]), (float v22 = v29[0]) != 0))
  {
    v29[1] = v22;
    operator delete(v22);
  }
  return -v23;
}

void sub_19E396868(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E396884(void *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>, float a5@<S0>)
{
  uint64_t v175 = *MEMORY[0x1E4F143B8];
  if (a2 == 1)
  {
    if ((a3 & 1) == 0)
    {
      sub_19E39620C(a1, (uint64_t)&v171);
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      *(void *)unint64_t v157 = a4;
      v157[8] = 0;
      unint64_t v145 = operator new(0x20uLL);
      *a4 = (uint64_t)v145;
      a4[1] = (uint64_t)v145;
      a4[2] = (uint64_t)v145 + 32;
      a4[1] = sub_19E39C7FC((uint64_t)(a4 + 2), (uint64_t)&v171, (uint64_t)&v173[1], (uint64_t)v145);
      if (v171)
      {
        *(void *)&long long v172 = v171;
        operator delete(v171);
      }
      return;
    }
  }
  else if (!a2)
  {
    if ((int)sub_19E3AB380() <= 1)
    {
      LOBYTE(v171) = 0;
      uint64_t v9 = sub_19E37CA70(MEMORY[0x1E4FBA240], (uint64_t)"unigram_model.cc", 16);
      sub_19E37CA70(v9, (uint64_t)"(", 1);
      uint64_t v10 = (void *)std::ostream::operator<<();
      uint64_t v11 = sub_19E37CA70(v10, (uint64_t)") ", 2);
      uint64_t v12 = sub_19E37CA70(v11, (uint64_t)"LOG(", 4);
      uint64_t v13 = sub_19E37CA70(v12, (uint64_t)"WARNING", 7);
      uint64_t v14 = sub_19E37CA70(v13, (uint64_t)") ", 2);
      sub_19E37CA70(v14, (uint64_t)"nbest_size >= 1. Returns empty result.", 38);
      sub_19E37B91C(&v171);
    }
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  long long v172 = 0u;
  memset(v173, 0, sizeof(v173));
  CFStringRef v171 = &unk_1EF0B93A8;
  uint64_t v174 = 512;
  long long v168 = 0uLL;
  uint64_t v169 = 0;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  uint64_t v15 = sub_19E397A70(&v171);
  uint64_t v167 = v15;
  int v16 = ((a1[4] - a1[3]) >> 3) - 1;
  *(void *)uint64_t v15 = **(void **)(a1[6] + 24 * (v16 & ~(v16 >> 31)));
  *(void *)(v15 + 8) = 0;
  *(_DWORD *)(v15 + 2sub_19E392864(&a9, 0) = 0;
  unint64_t v17 = a1[16] + a1[17] * a1[18];
  *(_DWORD *)unint64_t v157 = 0;
  sub_19E394858(__p, v17, v157);
  if (a3)
  {
    sub_19E39653C(a1, (uint64_t *)v157, a5);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    *(_OWORD *)std::string __p = *(_OWORD *)v157;
    std::string __p[2] = *(void **)&v157[16];
    uint64_t v18 = sub_19E3AB4D8();
    unsigned int v19 = sub_19E394CF8(v18);
    float v20 = logf((float)((float)((float)v19 * 2.3283e-10) + 0.0) + 0.0000001);
    float v21 = -logf(-v20);
  }
  else
  {
    sub_19E39620C(a1, (uint64_t)v165);
    if (v165[0])
    {
      v165[1] = v165[0];
      operator delete(v165[0]);
    }
    float v21 = *(float *)(*(void *)v15 + 36);
  }
  *(float *)(v15 + 16) = v21;
  sub_19E397BE0((uint64_t *)&v168, &v167);
  int v146 = 0;
  char v147 = 0;
  if (10 * (int)a2 >= 512) {
    int v22 = 512;
  }
  else {
    int v22 = 10 * a2;
  }
  if (v22 <= 1) {
    int v23 = 1;
  }
  else {
    int v23 = v22;
  }
  int v148 = v23;
  while (1)
  {
    long long v24 = v168;
    if ((void)v168 == *((void *)&v168 + 1)) {
      break;
    }
    unsigned int v25 = *(uint64_t **)v168;
    if ((uint64_t)(*((void *)&v168 + 1) - v168) >= 9)
    {
      uint64_t v26 = 0;
      uint64_t v27 = (uint64_t)(*((void *)&v168 + 1) - v168) >> 3;
      uint64_t v28 = (void *)v168;
      do
      {
        int v29 = v28;
        v28 += v26 + 1;
        uint64_t v30 = 2 * v26;
        uint64_t v26 = (2 * v26) | 1;
        uint64_t v31 = v30 + 2;
        if (v31 < v27 && *(float *)(*v28 + 16) < *(float *)(v28[1] + 16))
        {
          ++v28;
          uint64_t v26 = v31;
        }
        void *v29 = *v28;
      }
      while (v26 <= (uint64_t)((unint64_t)(v27 - 2) >> 1));
      if (v28 == (void *)(*((void *)&v24 + 1) - 8))
      {
        *uint64_t v28 = v25;
      }
      else
      {
        *uint64_t v28 = **((void **)&v24 + 1);
        **((void **)&v24 + 1) = v25;
        sub_19E39C928(v24, (uint64_t)(v28 + 1), (uint64_t)((uint64_t)v28 - v24 + 8) >> 3);
      }
    }
    *((void *)&v168 + 1) -= 8;
    uint64_t v32 = *v25;
    uint64_t v33 = (void **)a1[9];
    if (*v25 == **v33)
    {
      sub_19E397CF4(a4, ((a4[1] - *a4) >> 5) + 1);
      for (uint64_t i = (void *)v25[1]; i[1]; uint64_t i = (void *)i[1])
      {
        uint64_t v35 = a4[1];
        unint64_t v36 = *(void **)(v35 - 24);
        unint64_t v37 = *(void *)(v35 - 16);
        if ((unint64_t)v36 >= v37)
        {
          uint64_t v39 = *(void *)(v35 - 32);
          uint64_t v40 = ((uint64_t)v36 - v39) >> 3;
          if ((unint64_t)(v40 + 1) >> 61) {
            sub_19E37C7C4();
          }
          uint64_t v41 = v37 - v39;
          uint64_t v42 = v41 >> 2;
          if (v41 >> 2 <= (unint64_t)(v40 + 1)) {
            uint64_t v42 = v40 + 1;
          }
          if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v43 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v43 = v42;
          }
          if (v43) {
            uint64_t v44 = (char *)sub_19E37CFB8(v35 - 16, v43);
          }
          else {
            uint64_t v44 = 0;
          }
          uint64_t v45 = &v44[8 * v40];
          *(void *)uint64_t v45 = *i;
          BOOL v38 = v45 + 8;
          size_t v47 = *(char **)(v35 - 32);
          uint64_t v46 = *(char **)(v35 - 24);
          if (v46 != v47)
          {
            do
            {
              uint64_t v48 = *((void *)v46 - 1);
              v46 -= 8;
              *((void *)v45 - 1) = v48;
              v45 -= 8;
            }
            while (v46 != v47);
            uint64_t v46 = *(char **)(v35 - 32);
          }
          *(void *)(v35 - 32) = v45;
          *(void *)(v35 - 24) = v38;
          *(void *)(v35 - 16) = &v44[8 * v43];
          if (v46) {
            operator delete(v46);
          }
        }
        else
        {
          *unint64_t v36 = *i;
          BOOL v38 = v36 + 1;
        }
        *(void *)(v35 - 24) = v38;
      }
      uint64_t v49 = a4[1];
      *(_DWORD *)(v49 - 8) = *((_DWORD *)v25 + 4);
      if (a2 == (v49 - *a4) >> 5) {
        break;
      }
    }
    else
    {
      unint64_t v50 = (int)(v33[3 * *(int *)(v32 + 16) + 1] - v33[3 * *(int *)(v32 + 16)]);
      *(_DWORD *)unint64_t v157 = 0;
      sub_19E394858(v164, v50, v157);
      *(_DWORD *)unint64_t v157 = 0;
      sub_19E394858(v163, v50, v157);
      *(void *)unint64_t v157 = 0;
      sub_19E39CC08(&v161, v50, v157);
      int v51 = *(_DWORD *)(v32 + 16);
      uint64_t v52 = a1[9];
      if (a3)
      {
        uint64_t v53 = *(void *)(v52 + 24 * v51);
        float v54 = -100000000.0;
        if (*(void *)(v52 + 24 * v51 + 8) != v53)
        {
          unint64_t v55 = 0;
          float v56 = *((float *)__p[0] + *(unsigned int *)(v32 + 24));
          float v54 = -100000000.0;
          do
          {
            float v57 = (float)((float)(*((float *)v25 + 5)
                                + *((float *)__p[0] + *(unsigned int *)(*(void *)(v53 + 8 * v55) + 24)))
                        + (float)(a5 * *(float *)(*(void *)(v53 + 8 * v55) + 32)))
                - v56;
            *((float *)v164[0] + v55) = v57;
            uint64_t v58 = sub_19E3AB4D8();
            unsigned int v59 = sub_19E394CF8(v58);
            float v60 = logf((float)((float)((float)v59 * 2.3283e-10) + 0.0) + 0.0000001);
            float v61 = v57 - logf(-v60);
            *((float *)v163[0] + v55) = v61;
            if (v61 > v54) {
              float v54 = v61;
            }
            ++v55;
            int v62 = *(_DWORD *)(v32 + 16);
            uint64_t v52 = a1[9];
            uint64_t v53 = *(void *)(v52 + 24 * v62);
          }
          while (v55 < (*(void *)(v52 + 24 * v62 + 8) - v53) >> 3);
          int v51 = *(_DWORD *)(v32 + 16);
        }
        uint64_t v63 = (double *)v161;
        if (v162 != v161)
        {
          float v64 = *((float *)v25 + 4);
          uint64_t v65 = (float *)v163[0];
          if ((unint64_t)((v162 - (unsigned char *)v161) >> 3) <= 1) {
            uint64_t v5 = 1;
          }
          else {
            uint64_t v5 = (v162 - (unsigned char *)v161) >> 3;
          }
          do
          {
            float v66 = *v65++;
            float v67 = expf(v66 - v54);
            float v68 = (float)(v64 - v66) + log1pf(-v67);
            float v69 = v64 - fmaxf(v68, 0.0);
            float v70 = expf(-fabsf(v68));
            *v63++ = (float)(v69 - log1pf(v70));
            --v5;
          }
          while (v5);
        }
      }
      uint64_t v71 = *(void *)(v52 + 24 * v51);
      if (*(void *)(v52 + 24 * v51 + 8) != v71)
      {
        unint64_t v72 = 0;
        do
        {
          uint64_t v73 = *(void *)(v71 + 8 * v72);
          uint64_t v74 = sub_19E397A70(&v171);
          *(void *)unint64_t v157 = v74;
          *(void *)uint64_t v74 = v73;
          if (a3)
          {
            *(_DWORD *)(v74 + 2sub_19E392864(&a9, 0) = *((_DWORD *)v164[0] + v72);
            float v75 = *((double *)v161 + v72);
          }
          else
          {
            *(float *)(v74 + 2sub_19E392864(&a9, 0) = *(float *)(v73 + 32) + *((float *)v25 + 5);
            float v75 = *(float *)(v73 + 36) + *((float *)v25 + 5);
          }
          *(float *)(v74 + 16) = v75;
          *(void *)(v74 + 8) = v25;
          sub_19E397BE0((uint64_t *)&v168, v157);
          ++v72;
          uint64_t v71 = *(void *)(a1[9] + 24 * *(int *)(v32 + 16));
        }
        while (v72 < (*(void *)(a1[9] + 24 * *(int *)(v32 + 16) + 8) - v71) >> 3);
      }
      if (!(((unint64_t)(v173[1] + v173[2] * v174) < 0x3B9ACA00) | v147 & 1))
      {
        if ((int)sub_19E3AB380() <= 1)
        {
          v157[0] = 0;
          uint64_t v76 = sub_19E37CA70(MEMORY[0x1E4FBA240], (uint64_t)"unigram_model.cc", 16);
          sub_19E37CA70(v76, (uint64_t)"(", 1);
          long long v77 = (void *)std::ostream::operator<<();
          uint64_t v78 = sub_19E37CA70(v77, (uint64_t)") ", 2);
          uint64_t v79 = sub_19E37CA70(v78, (uint64_t)"LOG(", 4);
          size_t v80 = sub_19E37CA70(v79, (uint64_t)"WARNING", 7);
          uint64_t v81 = sub_19E37CA70(v80, (uint64_t)") ", 2);
          sub_19E37CA70(v81, (uint64_t)"Allocator size exceeds ", 23);
          std::string::size_type v82 = (void *)std::ostream::operator<<();
          sub_19E37CA70(v82, (uint64_t)" with an example of length ", 27);
          std::ostream::operator<<();
          sub_19E37B91C(v157);
        }
        char v147 = 1;
      }
      uint64_t v83 = *((void *)&v168 + 1);
      uint64_t v84 = (void *)v168;
      if (*((void *)&v168 + 1) - (void)v168 >= 0x13879uLL)
      {
        long long v159 = 0uLL;
        uint64_t v160 = 0;
        memset(&v157[8], 0, 40);
        *(void *)unint64_t v157 = &unk_1EF0B93A8;
        uint64_t v158 = 512;
        *(_OWORD *)v154 = 0u;
        long long v155 = 0u;
        float v156 = 1.0;
        ++v146;
        if ((int)sub_19E3AB380() <= 1)
        {
          LOBYTE(v17sub_19E392864(&a9, 0) = 0;
          unint64_t v85 = sub_19E37CA70(MEMORY[0x1E4FBA240], (uint64_t)"unigram_model.cc", 16);
          sub_19E37CA70(v85, (uint64_t)"(", 1);
          int v86 = (void *)std::ostream::operator<<();
          CFNumberRef v87 = sub_19E37CA70(v86, (uint64_t)") ", 2);
          std::string::size_type v88 = sub_19E37CA70(v87, (uint64_t)"LOG(", 4);
          CFTypeID v89 = sub_19E37CA70(v88, (uint64_t)"WARNING", 7);
          long long v90 = sub_19E37CA70(v89, (uint64_t)") ", 2);
          sub_19E37CA70(v90, (uint64_t)"Too big agenda size ", 20);
          uint64_t v91 = (void *)std::ostream::operator<<();
          sub_19E37CA70(v91, (uint64_t)". Shrinking (round ", 19);
          CFTypeID v92 = (void *)std::ostream::operator<<();
          sub_19E37CA70(v92, (uint64_t)") down to ", 10);
          CFNumberRef v93 = (void *)std::ostream::operator<<();
          sub_19E37CA70(v93, (uint64_t)".", 1);
          sub_19E37B91C(&v170);
        }
        if (10 * (int)a2 >= 1)
        {
          int v94 = 0;
          while (1)
          {
            v149 = (void *)v168;
            uint64_t v150 = v83;
            unint64_t v95 = *(void *)v168;
            uint64_t v153 = 0;
            uint64_t v170 = 0;
            if (!v95) {
              goto LABEL_181;
            }
            uint64_t v96 = &v170;
            unint64_t v97 = (unint64_t)v154[1];
            do
            {
              unint64_t v98 = 0x9DDFEA08EB382D69 * (((8 * v95) + 8) ^ HIDWORD(v95));
              unint64_t v99 = 0x9DDFEA08EB382D69 * (HIDWORD(v95) ^ (v98 >> 47) ^ v98);
              unint64_t v100 = 0x9DDFEA08EB382D69 * (v99 ^ (v99 >> 47));
              if (v97)
              {
                uint8x8_t v101 = (uint8x8_t)vcnt_s8((int8x8_t)v97);
                v101.i16[0] = vaddlv_u8(v101);
                if (v101.u32[0] > 1uLL)
                {
                  unint64_t v102 = 0x9DDFEA08EB382D69 * (v99 ^ (v99 >> 47));
                  if (v100 >= v97) {
                    unint64_t v102 = v100 % v97;
                  }
                }
                else
                {
                  unint64_t v102 = v100 & (v97 - 1);
                }
                uint64_t v103 = (void *)*((void *)v154[0] + v102);
                if (v103)
                {
                  for (j = (void *)*v103; j; j = (void *)*j)
                  {
                    unint64_t v105 = j[1];
                    if (v105 == v100)
                    {
                      if (j[2] == v95)
                      {
                        *uint64_t v96 = j[3];
                        goto LABEL_181;
                      }
                    }
                    else
                    {
                      if (v101.u32[0] > 1uLL)
                      {
                        if (v105 >= v97) {
                          v105 %= v97;
                        }
                      }
                      else
                      {
                        v105 &= v97 - 1;
                      }
                      if (v105 != v102) {
                        break;
                      }
                    }
                  }
                }
              }
              uint64_t v106 = sub_19E397A70(v157);
              long long v107 = *(_OWORD *)v95;
              *(void *)(v106 + 16) = *(void *)(v95 + 16);
              *(_OWORD *)uint64_t v106 = v107;
              *uint64_t v96 = v106;
              unint64_t v97 = (unint64_t)v154[1];
              if (v154[1])
              {
                uint8x8_t v108 = (uint8x8_t)vcnt_s8((int8x8_t)v154[1]);
                v108.i16[0] = vaddlv_u8(v108);
                if (v108.u32[0] > 1uLL)
                {
                  uint64_t v5 = v100;
                  if ((void *)v100 >= v154[1]) {
                    uint64_t v5 = v100 % (unint64_t)v154[1];
                  }
                }
                else
                {
                  uint64_t v5 = ((unint64_t)v154[1] - 1) & v100;
                }
                v109 = (void *)*((void *)v154[0] + v5);
                if (v109)
                {
                  for (k = (void *)*v109; k; k = (void *)*k)
                  {
                    unint64_t v111 = k[1];
                    if (v111 == v100)
                    {
                      if (k[2] == v95) {
                        goto LABEL_170;
                      }
                    }
                    else
                    {
                      if (v108.u32[0] > 1uLL)
                      {
                        if ((void *)v111 >= v154[1]) {
                          v111 %= (unint64_t)v154[1];
                        }
                      }
                      else
                      {
                        v111 &= (unint64_t)v154[1] - 1;
                      }
                      if (v111 != v5) {
                        break;
                      }
                    }
                  }
                }
              }
              uint64_t v112 = operator new(0x20uLL);
              *uint64_t v112 = 0;
              v112[1] = v100;
              v112[2] = v95;
              v112[3] = v106;
              float v113 = (float)(unint64_t)(*((void *)&v155 + 1) + 1);
              if (!v97 || (float)(v156 * (float)v97) < v113)
              {
                BOOL v114 = (v97 & (v97 - 1)) == 0;
                if (v97 < 3) {
                  BOOL v114 = 0;
                }
                unint64_t v115 = (2 * v97) | !v114;
                unint64_t v116 = vcvtps_u32_f32(v113 / v156);
                if (v115 <= v116) {
                  int8x8_t prime = (int8x8_t)v116;
                }
                else {
                  int8x8_t prime = (int8x8_t)v115;
                }
                if (*(void *)&prime == 1)
                {
                  int8x8_t prime = (int8x8_t)2;
                }
                else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
                {
                  int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
                  unint64_t v97 = (unint64_t)v154[1];
                }
                if (*(void *)&prime <= v97)
                {
                  if (*(void *)&prime < v97)
                  {
                    unint64_t v124 = vcvtps_u32_f32((float)*((unint64_t *)&v155 + 1) / v156);
                    if (v97 < 3
                      || (uint8x8_t v125 = (uint8x8_t)vcnt_s8((int8x8_t)v97), v125.i16[0] = vaddlv_u8(v125), v125.u32[0] > 1uLL))
                    {
                      unint64_t v124 = std::__next_prime(v124);
                    }
                    else
                    {
                      uint64_t v126 = 1 << -(char)__clz(v124 - 1);
                      if (v124 >= 2) {
                        unint64_t v124 = v126;
                      }
                    }
                    if (*(void *)&prime <= v124) {
                      int8x8_t prime = (int8x8_t)v124;
                    }
                    if (*(void *)&prime >= v97)
                    {
                      unint64_t v97 = (unint64_t)v154[1];
                    }
                    else
                    {
                      if (prime) {
                        goto LABEL_126;
                      }
                      int v132 = v154[0];
                      v154[0] = 0;
                      if (v132) {
                        operator delete(v132);
                      }
                      unint64_t v97 = 0;
                      v154[1] = 0;
                    }
                  }
                }
                else
                {
LABEL_126:
                  if (*(void *)&prime >> 61) {
                    sub_19E37C2B8();
                  }
                  uint64_t v118 = operator new(8 * *(void *)&prime);
                  char v119 = v154[0];
                  v154[0] = v118;
                  if (v119) {
                    operator delete(v119);
                  }
                  uint64_t v120 = 0;
                  v154[1] = (void *)prime;
                  do
                    *((void *)v154[0] + v120++) = 0;
                  while (*(void *)&prime != v120);
                  uint64_t v121 = (void **)v155;
                  if ((void)v155)
                  {
                    unint64_t v122 = *(void *)(v155 + 8);
                    uint8x8_t v123 = (uint8x8_t)vcnt_s8(prime);
                    v123.i16[0] = vaddlv_u8(v123);
                    if (v123.u32[0] > 1uLL)
                    {
                      if (v122 >= *(void *)&prime) {
                        v122 %= *(void *)&prime;
                      }
                    }
                    else
                    {
                      v122 &= *(void *)&prime - 1;
                    }
                    *((void *)v154[0] + v122) = &v155;
                    for (m = *v121; m; unint64_t v122 = v128)
                    {
                      unint64_t v128 = m[1];
                      if (v123.u32[0] > 1uLL)
                      {
                        if (v128 >= *(void *)&prime) {
                          v128 %= *(void *)&prime;
                        }
                      }
                      else
                      {
                        v128 &= *(void *)&prime - 1;
                      }
                      if (v128 != v122)
                      {
                        if (!*((void *)v154[0] + v128))
                        {
                          *((void *)v154[0] + v128) = v121;
                          goto LABEL_151;
                        }
                        *uint64_t v121 = (void *)*m;
                        void *m = **((void **)v154[0] + v128);
                        **((void **)v154[0] + v128) = m;
                        m = v121;
                      }
                      unint64_t v128 = v122;
LABEL_151:
                      uint64_t v121 = (void **)m;
                      m = (void *)*m;
                    }
                  }
                  unint64_t v97 = (unint64_t)prime;
                }
                if ((v97 & (v97 - 1)) != 0)
                {
                  if (v100 >= v97) {
                    uint64_t v5 = v100 % v97;
                  }
                  else {
                    uint64_t v5 = v100;
                  }
                }
                else
                {
                  uint64_t v5 = (v97 - 1) & v100;
                }
              }
              uint64_t v129 = v154[0];
              uint64_t v130 = (void *)*((void *)v154[0] + v5);
              if (v130)
              {
                *uint64_t v112 = *v130;
LABEL_168:
                *uint64_t v130 = v112;
                goto LABEL_169;
              }
              *uint64_t v112 = v155;
              *(void *)&long long v155 = v112;
              v129[v5] = &v155;
              if (*v112)
              {
                unint64_t v131 = *(void *)(*v112 + 8);
                if ((v97 & (v97 - 1)) != 0)
                {
                  if (v131 >= v97) {
                    v131 %= v97;
                  }
                }
                else
                {
                  v131 &= v97 - 1;
                }
                uint64_t v130 = (char *)v154[0] + 8 * v131;
                goto LABEL_168;
              }
LABEL_169:
              ++*((void *)&v155 + 1);
LABEL_170:
              unint64_t v95 = *(void *)(v95 + 8);
              uint64_t v96 = (uint64_t *)(v106 + 8);
            }
            while (v95);
LABEL_181:
            uint64_t v153 = v170;
            sub_19E397BE0((uint64_t *)&v159, &v153);
            if (v150 - (uint64_t)v149 >= 9)
            {
              uint64_t v133 = 0;
              uint64_t v134 = (v150 - (uint64_t)v149) >> 3;
              uint64_t v135 = *v149;
              unint64_t v136 = v149;
              do
              {
                CFIndex v137 = v136;
                v136 += v133 + 1;
                uint64_t v138 = 2 * v133;
                uint64_t v133 = (2 * v133) | 1;
                uint64_t v139 = v138 + 2;
                if (v139 < v134 && *(float *)(*v136 + 16) < *(float *)(v136[1] + 16))
                {
                  ++v136;
                  uint64_t v133 = v139;
                }
                *CFIndex v137 = *v136;
              }
              while (v133 <= (uint64_t)((unint64_t)(v134 - 2) >> 1));
              unint64_t v140 = (void *)(v150 - 8);
              if (v136 == (void *)(v150 - 8))
              {
                *unint64_t v136 = v135;
              }
              else
              {
                *unint64_t v136 = *v140;
                void *v140 = v135;
                sub_19E39C928((uint64_t)v149, (uint64_t)(v136 + 1), v136 + 1 - v149);
              }
            }
            uint64_t v83 = *((void *)&v168 + 1) - 8;
            *((void *)&v168 + 1) -= 8;
            if (++v94 == v148)
            {
              uint64_t v84 = (void *)v168;
              break;
            }
          }
        }
        if (v84)
        {
          *((void *)&v168 + 1) = v84;
          operator delete(v84);
        }
        long long v168 = v159;
        uint64_t v169 = v160;
        long long v141 = v172;
        long long v172 = *(_OWORD *)&v157[8];
        *(_OWORD *)&v157[8] = v141;
        uint64_t v142 = *(void *)&v157[24];
        uint64_t v143 = v174;
        *(void *)&v157[24] = v173[0];
        long long v144 = *(_OWORD *)&v173[1];
        *(_OWORD *)&v173[1] = *(_OWORD *)&v157[32];
        *(_OWORD *)&v157[32] = v144;
        v173[0] = v142;
        uint64_t v174 = v158;
        uint64_t v158 = v143;
        sub_19E397D90((uint64_t)v154);
        sub_19E397DDC(v157);
      }
      if (v161)
      {
        v162 = v161;
        operator delete(v161);
      }
      if (v163[0])
      {
        v163[1] = v163[0];
        operator delete(v163[0]);
      }
      if (v164[0])
      {
        v164[1] = v164[0];
        operator delete(v164[0]);
      }
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if ((void)v168) {
    operator delete((void *)v168);
  }
  sub_19E397DDC(&v171);
}

void sub_19E397900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57)
{
  sub_19E397D90((uint64_t)&a21);
  sub_19E397DDC(&a27);
  if (__p)
  {
    a41 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a43)
  {
    a44 = (uint64_t)a43;
    operator delete(a43);
  }
  if (a46)
  {
    a47 = (uint64_t)a46;
    operator delete(a46);
  }
  if (a53)
  {
    a54 = (uint64_t)a53;
    operator delete(a53);
  }
  unsigned int v59 = a57;
  sub_19E37C8AC((void ***)&a27);
  if (v59) {
    operator delete(v59);
  }
  sub_19E397DDC((void *)(v57 - 224));
  _Unwind_Resume(a1);
}

uint64_t sub_19E397A70(void *a1)
{
  uint64_t v2 = a1[5];
  unint64_t v3 = a1[6];
  unint64_t v4 = a1[4];
  if (v4 >= v3)
  {
    unint64_t v4 = 0;
    ++v2;
    a1[4] = 0;
    a1[5] = v2;
  }
  uint64_t v5 = a1[1];
  if (v2 == (a1[2] - v5) >> 3)
  {
    is_mul_ok(v3, 0x18uLL);
    operator new[]();
  }
  uint64_t result = *(void *)(v5 + 8 * v2) + 24 * v4;
  a1[4] = v4 + 1;
  return result;
}

uint64_t sub_19E397BE0(uint64_t *a1, void *a2)
{
  uint64_t v5 = (void *)a1[1];
  unint64_t v4 = a1[2];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = (void *)*a1;
    uint64_t v8 = ((uint64_t)v5 - *a1) >> 3;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61) {
      sub_19E37C7C4();
    }
    uint64_t v10 = v4 - (void)v7;
    if (v10 >> 2 > v9) {
      unint64_t v9 = v10 >> 2;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 >> 61) {
        sub_19E37C2B8();
      }
      uint64_t v12 = (char *)operator new(8 * v11);
    }
    else
    {
      uint64_t v12 = 0;
    }
    uint64_t v13 = &v12[8 * v8];
    *(void *)uint64_t v13 = *a2;
    uint64_t v6 = (uint64_t)(v13 + 8);
    if (v5 != v7)
    {
      do
      {
        uint64_t v14 = *--v5;
        *((void *)v13 - 1) = v14;
        v13 -= 8;
      }
      while (v5 != v7);
      uint64_t v5 = (void *)*a1;
    }
    *a1 = (uint64_t)v13;
    a1[1] = v6;
    a1[2] = (uint64_t)&v12[8 * v11];
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *uint64_t v5 = *a2;
    uint64_t v6 = (uint64_t)(v5 + 1);
  }
  a1[1] = v6;
  uint64_t v15 = *a1;
  uint64_t v16 = (v6 - *a1) >> 3;
  return sub_19E39C928(v15, v6, v16);
}

void sub_19E397CF4(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = (v3 - *a1) >> 5;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      uint64_t v6 = *a1 + 32 * a2;
      if (v3 != v6)
      {
        uint64_t v7 = a1[1];
        do
        {
          unint64_t v9 = *(void **)(v7 - 32);
          v7 -= 32;
          uint64_t v8 = v9;
          if (v9)
          {
            *(void *)(v3 - 24) = v8;
            operator delete(v8);
          }
          uint64_t v3 = v7;
        }
        while (v7 != v6);
      }
      a1[1] = v6;
    }
  }
  else
  {
    unint64_t v5 = a2 - v4;
    sub_19E39C984(a1, v5);
  }
}

uint64_t sub_19E397D90(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void *sub_19E397DDC(void *a1)
{
  *a1 = &unk_1EF0B93A8;
  uint64_t v2 = (void *)a1[1];
  uint64_t v3 = (void *)a1[2];
  if (v2 != v3)
  {
    do
    {
      if (*v2) {
        MEMORY[0x19F3BDCC0](*v2, 0x1020C8062D53EE8);
      }
      ++v2;
    }
    while (v2 != v3);
    uint64_t v2 = (void *)a1[1];
  }
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_19E397E6C(void *a1@<X0>, void **a2@<X8>, float a3@<S0>)
{
  if ((int)(((a1[4] - a1[3]) >> 3) - 1) <= 0)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  else
  {
    unint64_t v6 = a1[16] + a1[17] * a1[18];
    LODWORD(v48[0]) = 0;
    sub_19E394858(__p, v6, v48);
    sub_19E39653C(a1, (uint64_t *)v48, a3);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    *(_OWORD *)std::string __p = *(_OWORD *)v48;
    int v51 = v49;
    uint64_t v46 = sub_19E3AB4D8();
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    v48[0] = 0;
    v48[1] = 0;
    uint64_t v49 = 0;
    int v7 = ((a1[4] - a1[3]) >> 3) - 1;
    uint64_t v8 = **(void **)(a1[6] + 24 * (v7 & ~(v7 >> 31)));
    float v9 = *((float *)__p[0] + *(unsigned int *)(v8 + 24));
    do
    {
      uint64_t v10 = (float *)v48[0];
      v48[1] = v48[0];
      unint64_t v11 = (uint64_t *)(a1[9] + 24 * *(unsigned int *)(v8 + 16));
      uint64_t v13 = *v11;
      uint64_t v12 = v11[1];
      uint64_t v14 = (float *)v48[0];
      if (*v11 != v12)
      {
        do
        {
          float v15 = exp((float)((float)(*((float *)__p[0] + *(unsigned int *)(*(void *)v13 + 24))
                                  + (float)(a3 * *(float *)(*(void *)v13 + 32)))
                          - v9));
          if (v10 >= v49)
          {
            uint64_t v16 = (float *)v48[0];
            uint64_t v17 = ((char *)v10 - (char *)v48[0]) >> 2;
            unint64_t v18 = v17 + 1;
            if ((unint64_t)(v17 + 1) >> 62) {
              sub_19E37C7C4();
            }
            uint64_t v19 = (char *)v49 - (char *)v48[0];
            if (((char *)v49 - (char *)v48[0]) >> 1 > v18) {
              unint64_t v18 = v19 >> 1;
            }
            if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v20 = v18;
            }
            if (v20)
            {
              float v21 = (char *)sub_19E37D7FC((uint64_t)&v49, v20);
              uint64_t v16 = (float *)v48[0];
              uint64_t v10 = (float *)v48[1];
            }
            else
            {
              float v21 = 0;
            }
            int v22 = (float *)&v21[4 * v17];
            *int v22 = v15;
            int v23 = v22 + 1;
            while (v10 != v16)
            {
              int v24 = *((_DWORD *)v10-- - 1);
              *((_DWORD *)v22-- - 1) = v24;
            }
            v48[0] = v22;
            v48[1] = v23;
            uint64_t v49 = (float *)&v21[4 * v20];
            if (v16) {
              operator delete(v16);
            }
            uint64_t v10 = (float *)v23;
          }
          else
          {
            *v10++ = v15;
          }
          v48[1] = v10;
          v13 += 8;
        }
        while (v13 != v12);
        uint64_t v14 = (float *)v48[0];
      }
      sub_19E3948DC((uint64_t)v47, v14, v10);
      unsigned int v25 = *(_DWORD *)(v8 + 16);
      uint64_t v26 = a1[9];
      uint64_t v8 = *(void *)(*(void *)(v26 + 24 * v25) + 8 * (int)sub_19E394C40((uint64_t)v47, v46, (double **)v47));
      uint64_t v27 = **(void **)a1[9];
      if (v8 != v27)
      {
        float v9 = *((float *)__p[0] + *(unsigned int *)(v8 + 24));
        int v29 = a2[1];
        unint64_t v28 = (unint64_t)a2[2];
        if ((unint64_t)v29 >= v28)
        {
          uint64_t v31 = ((char *)v29 - (unsigned char *)*a2) >> 3;
          if ((unint64_t)(v31 + 1) >> 61) {
            sub_19E37C7C4();
          }
          uint64_t v32 = v28 - (void)*a2;
          uint64_t v33 = v32 >> 2;
          if (v32 >> 2 <= (unint64_t)(v31 + 1)) {
            uint64_t v33 = v31 + 1;
          }
          if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v34 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v34 = v33;
          }
          if (v34) {
            uint64_t v35 = (char *)sub_19E37CFB8((uint64_t)(a2 + 2), v34);
          }
          else {
            uint64_t v35 = 0;
          }
          unint64_t v36 = &v35[8 * v31];
          *(void *)unint64_t v36 = v8;
          uint64_t v30 = v36 + 8;
          BOOL v38 = (char *)*a2;
          unint64_t v37 = (char *)a2[1];
          if (v37 != *a2)
          {
            do
            {
              uint64_t v39 = *((void *)v37 - 1);
              v37 -= 8;
              *((void *)v36 - 1) = v39;
              v36 -= 8;
            }
            while (v37 != v38);
            unint64_t v37 = (char *)*a2;
          }
          *a2 = v36;
          a2[1] = v30;
          a2[2] = &v35[8 * v34];
          if (v37) {
            operator delete(v37);
          }
        }
        else
        {
          void *v29 = v8;
          uint64_t v30 = v29 + 1;
        }
        a2[1] = v30;
      }
      if (v47[0])
      {
        v47[1] = v47[0];
        operator delete(v47[0]);
      }
    }
    while (v8 != v27);
    unint64_t v41 = (unint64_t)*a2;
    uint64_t v40 = (char *)a2[1];
    if (*a2 != v40)
    {
      uint64_t v42 = v40 - 8;
      if ((unint64_t)v42 > v41)
      {
        unint64_t v43 = v41 + 8;
        do
        {
          uint64_t v44 = *(void *)(v43 - 8);
          *(void *)(v43 - 8) = *(void *)v42;
          *(void *)uint64_t v42 = v44;
          v42 -= 8;
          BOOL v45 = v43 >= (unint64_t)v42;
          v43 += 8;
        }
        while (!v45);
      }
    }
    if (v48[0])
    {
      v48[1] = v48[0];
      operator delete(v48[0]);
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
}

void sub_19E398224(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E398290(uint64_t a1, void *a2)
{
  float v4 = *(float *)(a1 + 104);
  uint64_t v5 = ((a2[4] - a2[3]) >> 3) - 1;
  uint64_t v6 = a2[1];
  uint64_t v7 = a2[2];
  sub_19E38056C(&__p, *(int *)(a1 + 92) + 1);
  uint64_t v42 = v5;
  if ((int)v5 < 1) {
    goto LABEL_40;
  }
  uint64_t v43 = 0;
  uint64_t v8 = 0;
  float v9 = v4 + -10.0;
  uint64_t v41 = v6 + (int)v7;
  do
  {
    uint64_t v10 = *(unsigned char **)(a2[3] + 8 * v8);
    unint64_t v11 = (char *)__p;
    unint64_t v12 = (v46 - (unsigned char *)__p) >> 4;
    uint64_t v13 = *(_DWORD **)(a1 + 40);
    uint64_t v14 = (*v13 >> 10 << ((*v13 >> 6) & 8));
    if ((v41 - (void)v10) << 32)
    {
      uint64_t v15 = 0;
      unint64_t v16 = 0;
      do
      {
        uint64_t v17 = v10[v15];
        uint64_t v18 = v14 ^ v17;
        unsigned int v19 = v13[v18];
        if ((v19 & 0x800000FF) != v17) {
          break;
        }
        uint64_t v14 = v18 ^ (v19 >> 10 << ((v19 >> 6) & 8));
        if ((v19 & 0x100) != 0)
        {
          if (v16 < v12)
          {
            unint64_t v20 = &v11[16 * v16];
            *(_DWORD *)unint64_t v20 = v13[v14] & 0x7FFFFFFF;
            *((void *)v20 + 1) = v15 + 1;
          }
          ++v16;
        }
        ++v15;
      }
      while (v41 - v10 != v15);
    }
    else
    {
      unsigned int v21 = *v10;
      if (*v10)
      {
        unint64_t v16 = 0;
        uint64_t v22 = 1;
        do
        {
          uint64_t v23 = v14 ^ v21;
          unsigned int v24 = v13[v23];
          if ((v24 & 0x800000FF) != v21) {
            break;
          }
          uint64_t v14 = v23 ^ (v24 >> 10 << ((v24 >> 6) & 8));
          if ((v24 & 0x100) != 0)
          {
            if (v16 < v12)
            {
              unsigned int v25 = &v11[16 * v16];
              *(_DWORD *)unsigned int v25 = v13[v14] & 0x7FFFFFFF;
              *((void *)v25 + 1) = v22;
            }
            ++v16;
          }
          unsigned int v21 = v10[v22++];
        }
        while (v21);
      }
      else
      {
        unint64_t v16 = 0;
      }
    }
    if (v16 >= v12)
    {
      char v44 = 1;
      uint64_t v26 = sub_19E37CA70(MEMORY[0x1E4FBA240], (uint64_t)"unigram_model.cc", 16);
      sub_19E37CA70(v26, (uint64_t)"(", 1);
      uint64_t v27 = (void *)std::ostream::operator<<();
      unint64_t v28 = sub_19E37CA70(v27, (uint64_t)") [", 3);
      int v29 = sub_19E37CA70(v28, (uint64_t)"(num_nodes) < (trie_results.size())", 35);
      sub_19E37CA70(v29, (uint64_t)"] ", 2);
      sub_19E37B91C(&v44);
    }
    if (!v16)
    {
LABEL_38:
      uint64_t v40 = sub_19E395FE4((uint64_t)a2, v8, 1);
      *(_DWORD *)(v40 + 28) = *(_DWORD *)(a1 + 88);
      *(float *)(v40 + 32) = v9;
      goto LABEL_39;
    }
    uint64_t v30 = 0;
    BOOL v31 = 0;
    do
    {
      while (1)
      {
        uint64_t v32 = (unint64_t *)(a2[3] + v43);
        int v33 = -1;
        do
        {
          unint64_t v34 = *v32++;
          ++v33;
        }
        while (v34 < (unint64_t)&v10[*((void *)__p + 2 * v30 + 1)]);
        uint64_t v35 = *((unsigned int *)__p + 4 * v30);
        if ((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 128))(*(void *)(a1 + 8), v35)) {
          break;
        }
        uint64_t v36 = v8;
        uint64_t v37 = sub_19E395FE4((uint64_t)a2, v8, v33);
        *(_DWORD *)(v37 + 28) = v35;
        if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 8) + 136))(*(void *)(a1 + 8), v35)) {
          double v38 = (float)(*(float *)(a1 + 108) * (float)v33) + -0.1;
        }
        else {
          double v38 = (*(float (**)(void, uint64_t))(**(void **)(a1 + 8) + 96))(*(void *)(a1 + 8), v35);
        }
        float v39 = v38;
        *(float *)(v37 + 32) = v39;
        if (!v31)
        {
          BOOL v31 = *(_DWORD *)(v37 + 20) == 1;
          uint64_t v8 = v36;
          break;
        }
        ++v30;
        BOOL v31 = 1;
        uint64_t v8 = v36;
        if (v30 == v16) {
          goto LABEL_39;
        }
      }
      ++v30;
    }
    while (v30 != v16);
    if (!v31) {
      goto LABEL_38;
    }
LABEL_39:
    ++v8;
    v43 += 8;
  }
  while (v8 != v42);
LABEL_40:
  if (__p)
  {
    uint64_t v46 = __p;
    operator delete(__p);
  }
}

void sub_19E398664(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E398698(uint64_t a1@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t *a5@<X4>, uint64_t a6@<X8>)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 16))(&__p);
  unint64_t v12 = __p;
  sub_19E3AD4CC((uint64_t *)&__p);
  if (v12)
  {
    sub_19E3AD6E8(a6, a1 + 96);
  }
  else
  {
    int v13 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 128))(a1);
    sub_19E3988B0(a1 + 24, a2, a3, a4, v13, (uint64_t *)&__p);
    uint64_t v14 = (unsigned int *)__p;
    uint64_t v15 = v22;
    if (__p != v22)
    {
      do
      {
        uint64_t v16 = *v14;
        if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 144))(a1, v16) & 1) == 0
          && ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 152))(a1, v16) & 1) == 0)
        {
          v20[0] = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 120))(a1, v16);
          v20[1] = v17;
          unint64_t v18 = a5[1];
          if (v18 >= a5[2])
          {
            uint64_t v19 = sub_19E394EE0(a5, (uint64_t)v20);
          }
          else
          {
            sub_19E394FF0(a5 + 16, (unsigned char *)a5[1], (uint64_t)v20);
            uint64_t v19 = v18 + 24;
            a5[1] = v18 + 24;
          }
          a5[1] = v19;
        }
        v14 += 4;
      }
      while (v14 != v15);
    }
    sub_19E3AD6E8(a6, a1 + 96);
    if (__p)
    {
      uint64_t v22 = (unsigned int *)__p;
      operator delete(__p);
    }
  }
}

void sub_19E398880(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E3988B0(uint64_t a1@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W4>, uint64_t *a6@<X8>)
{
  if (a4 != -1) {
    a5 = a4;
  }
  sub_19E38056C(a6, a5);
  unint64_t v12 = sub_19E39B678(a1, a2, *a6, (a6[1] - *a6) >> 4, a3, a4);
  sub_19E39B980((uint64_t)a6, v12);
}

void sub_19E398930(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E39894C(uint64_t a1@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 16))(&__p);
  unint64_t v12 = __p;
  sub_19E3AD4CC((uint64_t *)&__p);
  if (v12)
  {
    sub_19E3AD6E8(a6, a1 + 96);
  }
  else
  {
    int v13 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 128))(a1);
    sub_19E3988B0(a1 + 24, a2, a3, a4, v13, (uint64_t *)&__p);
    uint64_t v14 = (unsigned int *)__p;
    uint64_t v15 = v29;
    if (__p != v29)
    {
      do
      {
        uint64_t v16 = *v14;
        if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 144))(a1, v16) & 1) == 0
          && ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 152))(a1, v16) & 1) == 0)
        {
          unint64_t v18 = *(_DWORD **)(a5 + 8);
          unint64_t v17 = *(void *)(a5 + 16);
          if ((unint64_t)v18 >= v17)
          {
            unint64_t v20 = *(_DWORD **)a5;
            uint64_t v21 = ((uint64_t)v18 - *(void *)a5) >> 2;
            unint64_t v22 = v21 + 1;
            if ((unint64_t)(v21 + 1) >> 62) {
              sub_19E37C7C4();
            }
            uint64_t v23 = v17 - (void)v20;
            if (v23 >> 1 > v22) {
              unint64_t v22 = v23 >> 1;
            }
            if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v24 = v22;
            }
            if (v24)
            {
              unsigned int v25 = (char *)sub_19E37D7FC(a5 + 16, v24);
              unint64_t v20 = *(_DWORD **)a5;
              unint64_t v18 = *(_DWORD **)(a5 + 8);
            }
            else
            {
              unsigned int v25 = 0;
            }
            uint64_t v26 = &v25[4 * v21];
            *(_DWORD *)uint64_t v26 = v16;
            uint64_t v19 = v26 + 4;
            while (v18 != v20)
            {
              int v27 = *--v18;
              *((_DWORD *)v26 - 1) = v27;
              v26 -= 4;
            }
            *(void *)a5 = v26;
            *(void *)(a5 + 8) = v19;
            *(void *)(a5 + 16) = &v25[4 * v24];
            if (v20) {
              operator delete(v20);
            }
          }
          else
          {
            _DWORD *v18 = v16;
            uint64_t v19 = v18 + 1;
          }
          *(void *)(a5 + 8) = v19;
        }
        v14 += 4;
      }
      while (v14 != v15);
    }
    sub_19E3AD6E8(a6, a1 + 96);
    if (__p)
    {
      int v29 = (unsigned int *)__p;
      operator delete(__p);
    }
  }
}

void sub_19E398B84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E398BA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_19E398D10(a1);
  *(void *)(v4 + 104) = 0;
  *(_DWORD *)(v4 + 112) = 0;
  *(void *)uint64_t v4 = &unk_1EF0B9408;
  *(void *)(v4 + 8) = a2 + 16;
  sub_19E379890(v4);
  unint64_t v5 = 0;
  *(void *)(a1 + 104) = 0x8000007F7FFFFFLL;
  while (v5 < (*(int (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8)))
  {
    if ((*(unsigned int (**)(void, unint64_t))(**(void **)(a1 + 8) + 104))(*(void *)(a1 + 8), v5))
    {
      float v6 = (*(float (**)(void, unint64_t))(**(void **)(a1 + 8) + 96))(*(void *)(a1 + 8), v5);
      if (v6 >= *(float *)(a1 + 104)) {
        float v6 = *(float *)(a1 + 104);
      }
      *(float *)(a1 + 104) = v6;
      float v7 = (*(float (**)(void, unint64_t))(**(void **)(a1 + 8) + 96))(*(void *)(a1 + 8), v5);
      if (*(float *)(a1 + 108) >= v7) {
        float v7 = *(float *)(a1 + 108);
      }
      *(float *)(a1 + 108) = v7;
    }
    ++v5;
  }
  return a1;
}

void sub_19E398CF0(_Unwind_Exception *a1)
{
  sub_19E37928C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19E398D10(uint64_t a1)
{
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1EF0B89A0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 24) = &unk_1EF0BD418;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4sub_19E392864(&a9, 0) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = &unk_1EF0BD418;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 8sub_19E392864(&a9, 0) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  sub_19E3AD4C4((void *)(a1 + 96));
  return a1;
}

void sub_19E398DB4(_Unwind_Exception *a1)
{
  sub_19E378340(v3);
  sub_19E378340(v2);
  unint64_t v5 = *v1;
  void *v1 = 0;
  if (v5) {
    sub_19E37C9F4((uint64_t)v1, v5);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_19E398DE8(uint64_t a1, uint64_t a2, _DWORD *a3, unint64_t a4)
{
  BOOL v7 = a4 > 7;
  if (a4 <= 7) {
    unint64_t v8 = 0;
  }
  else {
    unint64_t v8 = a4 - 8;
  }
  if (v7) {
    float v9 = (char *)(a3 + 2);
  }
  else {
    float v9 = "";
  }
  uint64_t v10 = sub_19E3783A4(a1, a2, v9, v8);
  *(_DWORD *)(v10 + 104) = 0;
  unint64_t v11 = (_DWORD *)(v10 + 104);
  *(void *)uint64_t v10 = &unk_1EF0B9408;
  *(_DWORD *)(v10 + 108) = 0;
  unint64_t v12 = (_DWORD *)(v10 + 108);
  *(_DWORD *)(v10 + 112) = 0;
  int v13 = (uint64_t *)(v10 + 96);
  sub_19E3AD6E8(&v17, v10 + 96);
  uint64_t v14 = v17;
  sub_19E3AD4CC(&v17);
  if (!v14)
  {
    sub_19E398F64(a3, a4, v11, &v17);
    sub_19E3AD6EC(v13, &v17);
    sub_19E3AD4CC(&v17);
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(&v17, a1);
    uint64_t v15 = v17;
    sub_19E3AD4CC(&v17);
    if (!v15)
    {
      sub_19E398F64(a3 + 1, a4 - 4, v12, &v17);
      sub_19E3AD6EC(v13, &v17);
      sub_19E3AD4CC(&v17);
    }
  }
  return a1;
}

void sub_19E398F30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E3AD4CC((uint64_t *)va);
  sub_19E37928C(v2);
  _Unwind_Resume(a1);
}

void *sub_19E398F64@<X0>(_DWORD *a1@<X0>, unint64_t a2@<X1>, _DWORD *a3@<X2>, void *a4@<X8>)
{
  if (a2 <= 3)
  {
    unsigned int v7 = 13;
    float v6 = (void *)sub_19E37B784((uint64_t)v8);
    sub_19E37CA70(v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/util.h", 62);
    sub_19E37CA70(v8, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_19E37CA70(v8, (uint64_t)") [", 3);
    sub_19E37CA70(v8, (uint64_t)"string.size() >= sizeof(T)", 26);
    sub_19E37CA70(v8, (uint64_t)"] ", 2);
    sub_19E378FFC(&v7, (uint64_t)a4);
    v8[0] = *MEMORY[0x1E4FBA418];
    *(void *)((char *)v8 + *(void *)(v8[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v8[1] = MEMORY[0x1E4FBA470] + 16;
    if (v9 < 0) {
      operator delete((void *)v8[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (void *)MEMORY[0x19F3BDC30](&v10);
  }
  else
  {
    *a3 = *a1;
    return sub_19E3AD4C4(a4);
  }
}

void sub_19E399148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_19E399168(void *a1)
{
  sub_19E37928C(a1);
  JUMPOUT(0x19F3BDCF0);
}

void sub_19E3991A0(_DWORD *a1@<X0>, unsigned __int8 *a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>)
{
  if (a1[28])
  {
    (*(void (**)(void **__return_ptr, _DWORD *))(*(void *)a1 + 16))(&v25, a1);
    if (v25)
    {
      sub_19E3AD4CC((uint64_t *)&v25);
LABEL_4:
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      return;
    }
    sub_19E3AD4CC((uint64_t *)&v25);
    if (!a3) {
      goto LABEL_4;
    }
    unsigned int v25 = &unk_1EF0B94F8;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    uint64_t v31 = 0;
    uint64_t v32 = &unk_1EF0B93C8;
    long long v33 = 0u;
    long long v34 = 0u;
    uint64_t v35 = 0;
    uint64_t v36 = 1024;
    sub_19E395AFC((uint64_t)&v25, a2, a3);
    sub_19E398290((uint64_t)a1, &v25);
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    sub_19E39620C(&v25, (uint64_t)&v23);
    unint64_t v8 = v23;
    char v9 = v24;
    if (v23 != v24)
    {
      uint64_t v10 = a4 + 2;
      unint64_t v11 = (char *)a4[1];
      do
      {
        uint64_t v12 = *v8;
        if ((unint64_t)v11 >= *v10)
        {
          unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v11[-*a4] >> 3);
          unint64_t v14 = v13 + 1;
          if (v13 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_19E37C7C4();
          }
          if (0x5555555555555556 * ((uint64_t)(*v10 - *a4) >> 3) > v14) {
            unint64_t v14 = 0x5555555555555556 * ((uint64_t)(*v10 - *a4) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v10 - *a4) >> 3) >= 0x555555555555555) {
            unint64_t v15 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v15 = v14;
          }
          uint64_t v16 = (char *)sub_19E37C7DC((uint64_t)(a4 + 2), v15);
          unint64_t v18 = &v16[24 * v13];
          *(_OWORD *)unint64_t v18 = *(_OWORD *)v12;
          *((_DWORD *)v18 + 4) = *(_DWORD *)(v12 + 28);
          unint64_t v20 = (char *)*a4;
          uint64_t v19 = (char *)a4[1];
          uint64_t v21 = v18;
          if (v19 != (char *)*a4)
          {
            do
            {
              long long v22 = *(_OWORD *)(v19 - 24);
              *((void *)v21 - 1) = *((void *)v19 - 1);
              *(_OWORD *)(v21 - 24) = v22;
              v21 -= 24;
              v19 -= 24;
            }
            while (v19 != v20);
            uint64_t v19 = (char *)*a4;
          }
          unint64_t v11 = v18 + 24;
          *a4 = v21;
          a4[1] = v18 + 24;
          a4[2] = &v16[24 * v17];
          if (v19) {
            operator delete(v19);
          }
        }
        else
        {
          *(_OWORD *)unint64_t v11 = *(_OWORD *)v12;
          *((_DWORD *)v11 + 4) = *(_DWORD *)(v12 + 28);
          v11 += 24;
        }
        a4[1] = v11;
        ++v8;
      }
      while (v8 != v9);
      unint64_t v8 = v23;
    }
    if (v8)
    {
      unint64_t v24 = v8;
      operator delete(v8);
    }
    sub_19E3957E8((uint64_t)&v25);
  }
  else
  {
    sub_19E3994B0((uint64_t)a1, (uint64_t)a2, a3, a4);
  }
}

void sub_19E399468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  unint64_t v15 = *(void **)v13;
  if (*(void *)v13)
  {
    *(void *)(v13 + 8) = v15;
    operator delete(v15);
  }
  sub_19E3957E8((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_19E3994B0(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>)
{
  (*(void (**)(long long *__return_ptr))(*(void *)a1 + 16))(&v67);
  if ((void)v67)
  {
    sub_19E3AD4CC((uint64_t *)&v67);
LABEL_3:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  sub_19E3AD4CC((uint64_t *)&v67);
  if (!a3) {
    goto LABEL_3;
  }
  float v8 = *(float *)(a1 + 104);
  uint64_t v9 = (a3 << 32) + 0x100000000;
  uint64_t v66 = a2;
  if (a3 << 32 == 0xFFFFFFFF00000000)
  {
    uint64_t v12 = 0;
  }
  else
  {
    if (v9 < 0) {
      sub_19E37C7C4();
    }
    uint64_t v10 = v9 >> 32;
    uint64_t v11 = 3 * v10;
    uint64_t v12 = (float *)operator new(12 * v10);
    uint64_t v13 = v12;
    do
    {
      *(void *)uint64_t v13 = 0xFFFFFFFFLL;
      v13[2] = NAN;
      v13 += 3;
    }
    while (v13 != &v12[v11]);
    a2 = v66;
  }
  if ((int)a3 <= 0)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  else
  {
    uint64_t v65 = a4;
    int v14 = 0;
    float v15 = v8 + -10.0;
    unint64_t v16 = (int)a3;
    int v62 = (char *)(v12 + 5);
    unint64_t v63 = a3;
    float v64 = v12;
    unint64_t v61 = (int)a3;
    do
    {
      float v17 = v12[3 * v14 + 1];
      if ((int)a3 - v14 >= asc_19E564BD9[(unint64_t)*(unsigned __int8 *)(a2 + v14) >> 4]) {
        int v18 = asc_19E564BD9[(unint64_t)*(unsigned __int8 *)(a2 + v14) >> 4];
      }
      else {
        int v18 = a3 - v14;
      }
      if (v16 <= v14) {
        goto LABEL_31;
      }
      uint64_t v19 = 0;
      char v20 = 0;
      uint64_t v21 = 0;
      uint64_t v22 = a2 + v14;
      unint64_t v23 = v16 - v14;
      unint64_t v24 = (int *)&v62[12 * v14];
      do
      {
        uint64_t v25 = *(void *)(a1 + 40);
        int v26 = *(unsigned __int8 *)(v22 + v19);
        LODWORD(v21) = (*(_DWORD *)(v25 + 4 * v21) >> 10 << ((*(_DWORD *)(v25 + 4 * v21) >> 6) & 8)) ^ v21 ^ v26;
        unsigned int v27 = *(_DWORD *)(v25 + 4 * v21);
        if ((v27 & 0x800000FF) != v26) {
          break;
        }
        if ((v27 & 0x100) != 0)
        {
          uint64_t v28 = *(_DWORD *)(v25 + 4 * ((v27 >> 10 << ((v27 >> 6) & 8)) ^ v21)) & 0x7FFFFFFF;
          if (((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 128))(*(void *)(a1 + 8), v28) & 1) == 0)
          {
            if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 8) + 136))(*(void *)(a1 + 8), v28))
            {
              double v29 = (float)(*(float *)(a1 + 108) * (float)(unint64_t)(v19 + 1)) + -0.1;
            }
            else
            {
              double v29 = (*(float (**)(void, uint64_t))(**(void **)(a1 + 8) + 96))(*(void *)(a1 + 8), v28);
            }
            double v30 = v29 + v17;
            if (*v24 == -1 || v30 > *((float *)v24 - 1))
            {
              float v31 = v30;
              *((float *)v24 - 1) = v31;
              *unint64_t v24 = v14;
              *(v24 - 2) = v28;
            }
            v20 |= v18 - 1 == v19;
          }
        }
        ++v19;
        v24 += 3;
      }
      while (v23 != v19);
      LODWORD(a3) = v63;
      uint64_t v12 = v64;
      a2 = v66;
      unint64_t v16 = v61;
      if ((v20 & 1) == 0)
      {
LABEL_31:
        uint64_t v32 = &v12[3 * v18 + 3 * v14];
        int v34 = *((_DWORD *)v32 + 2);
        long long v33 = (int *)(v32 + 2);
        float v35 = v15 + v17;
        if (v34 == -1 || v35 > *((float *)v33 - 1))
        {
          *((float *)v33 - 1) = v35;
          *long long v33 = v14;
          v12[3 * v18 + 3 * v14] = *(float *)(a1 + 88);
        }
      }
      v14 += v18;
    }
    while (v14 < (int)a3);
    uint64_t v37 = 0;
    v65[2] = 0;
    double v38 = v65 + 2;
    *uint64_t v65 = 0;
    v65[1] = 0;
    unsigned int v39 = a3;
    do
    {
      uint64_t v40 = &v12[3 * v39];
      uint64_t v42 = (unsigned int *)(v40 + 2);
      unint64_t v41 = *((int *)v40 + 2);
      if (v63 < v41) {
        sub_19E392294("string_view::substr");
      }
      int v43 = v39 - v41;
      uint64_t v44 = v66 + v41;
      if (v63 - v41 >= v43) {
        unint64_t v45 = v43;
      }
      else {
        unint64_t v45 = v63 - v41;
      }
      if ((unint64_t)v37 >= *v38)
      {
        unint64_t v47 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v37[-*v65] >> 3);
        unint64_t v48 = v47 + 1;
        if (v47 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_19E37C7C4();
        }
        if (0x5555555555555556 * ((uint64_t)(*v38 - *v65) >> 3) > v48) {
          unint64_t v48 = 0x5555555555555556 * ((uint64_t)(*v38 - *v65) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v38 - *v65) >> 3) >= 0x555555555555555) {
          unint64_t v49 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v49 = v48;
        }
        unint64_t v50 = (char *)sub_19E37C7DC((uint64_t)v38, v49);
        uint64_t v52 = &v50[24 * v47];
        *(void *)uint64_t v52 = v44;
        *((void *)v52 + 1) = v45;
        *((float *)v52 + 4) = *v40;
        uint64_t v46 = (char **)v65;
        float v54 = (char *)*v65;
        uint64_t v53 = (char *)v65[1];
        unint64_t v55 = v52;
        if (v53 == (char *)*v65)
        {
          uint64_t v12 = v64;
        }
        else
        {
          uint64_t v12 = v64;
          do
          {
            long long v56 = *(_OWORD *)(v53 - 24);
            *((void *)v55 - 1) = *((void *)v53 - 1);
            *(_OWORD *)(v55 - 24) = v56;
            v55 -= 24;
            v53 -= 24;
          }
          while (v53 != v54);
          uint64_t v53 = (char *)*v65;
        }
        uint64_t v37 = v52 + 24;
        *uint64_t v65 = v55;
        v65[1] = v52 + 24;
        v65[2] = &v50[24 * v51];
        if (v53) {
          operator delete(v53);
        }
      }
      else
      {
        *(void *)uint64_t v37 = v44;
        *((void *)v37 + 1) = v45;
        *((float *)v37 + 4) = *v40;
        v37 += 24;
        uint64_t v12 = v64;
        uint64_t v46 = (char **)v65;
      }
      v46[1] = v37;
      unsigned int v39 = *v42;
    }
    while ((int)*v42 > 0);
    uint64_t v57 = (long long *)*v46;
    if (*v46 != v37)
    {
      for (uint64_t i = v37 - 24; v57 < (long long *)i; i -= 24)
      {
        long long v67 = *v57;
        long long v59 = v67;
        long long *v57 = *(_OWORD *)i;
        *(_OWORD *)uint64_t i = v59;
        int v60 = *((_DWORD *)v57 + 4);
        *((_DWORD *)v57 + 4) = *((_DWORD *)i + 4);
        *((_DWORD *)i + 4) = v60;
        uint64_t v57 = (long long *)((char *)v57 + 24);
      }
    }
  }
  if (v12) {
    operator delete(v12);
  }
}

void sub_19E3999EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  float v15 = *(void **)a14;
  if (*(void *)a14)
  {
    *(void *)(a14 + 8) = v15;
    operator delete(v15);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E399A30(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 16))(__p);
  if (__p[0])
  {
    sub_19E3AD4CC((uint64_t *)__p);
LABEL_3:
    memset(__p, 0, 24);
    sub_19E37C6F0((char *)__p, 0, 0, 0);
    LODWORD(__p[3]) = 0;
    a5[1] = 0;
    a5[2] = 0;
    *a5 = 0;
    *(void *)&long long v38 = a5;
    BYTE8(v38) = 0;
    uint64_t v10 = (char *)operator new(0x20uLL);
    *a5 = (uint64_t)v10;
    a5[1] = (uint64_t)v10;
    a5[2] = (uint64_t)(v10 + 32);
    a5[1] = sub_19E37C628((uint64_t)(a5 + 2), (uint64_t)__p, (uint64_t)&__p[4], (uint64_t)v10);
    uint64_t v11 = __p[0];
    if (!__p[0]) {
      return;
    }
    __p[1] = __p[0];
    goto LABEL_5;
  }
  sub_19E3AD4CC((uint64_t *)__p);
  if (!a3) {
    goto LABEL_3;
  }
  if (a4 >= 1024) {
    int v12 = 1024;
  }
  else {
    int v12 = a4;
  }
  if (v12 <= 1) {
    uint64_t v13 = 1;
  }
  else {
    uint64_t v13 = v12;
  }
  if (v13 > 1)
  {
    __p[0] = &unk_1EF0B94F8;
    memset(&__p[1], 0, 88);
    __p[12] = &unk_1EF0B93C8;
    long long v41 = 0u;
    long long v42 = 0u;
    uint64_t v43 = 0;
    uint64_t v44 = 1024;
    sub_19E395AFC((uint64_t)__p, a2, a3);
    sub_19E398290(a1, __p);
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    int v34 = a5;
    sub_19E396884(__p, v13, 0, (uint64_t *)&v38, 0.0);
    uint64_t v33 = *((void *)&v38 + 1);
    for (uint64_t i = v38; i != v33; i += 32)
    {
      float v35 = 0;
      uint64_t v36 = 0;
      uint64_t v37 = 0;
      unint64_t v16 = *(uint64_t **)i;
      float v17 = *(uint64_t **)(i + 8);
      if (*(uint64_t **)i != v17)
      {
        int v18 = 0;
        do
        {
          uint64_t v19 = *v16;
          if (v18 >= v37)
          {
            unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((v18 - (unsigned char *)v35) >> 3);
            unint64_t v21 = v20 + 1;
            if (v20 + 1 > 0xAAAAAAAAAAAAAAALL) {
              sub_19E37C7C4();
            }
            if (0x5555555555555556 * ((v37 - (unsigned char *)v35) >> 3) > v21) {
              unint64_t v21 = 0x5555555555555556 * ((v37 - (unsigned char *)v35) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((v37 - (unsigned char *)v35) >> 3) >= 0x555555555555555) {
              unint64_t v22 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v22 = v21;
            }
            unint64_t v23 = (char *)sub_19E37C7DC((uint64_t)&v37, v22);
            uint64_t v25 = &v23[24 * v20];
            *(_OWORD *)uint64_t v25 = *(_OWORD *)v19;
            *((_DWORD *)v25 + 4) = *(_DWORD *)(v19 + 28);
            unsigned int v27 = (char *)v35;
            int v26 = v36;
            uint64_t v28 = v25;
            if (v36 != v35)
            {
              do
              {
                long long v29 = *(_OWORD *)(v26 - 24);
                *((void *)v28 - 1) = *((void *)v26 - 1);
                *(_OWORD *)(v28 - 24) = v29;
                v28 -= 24;
                v26 -= 24;
              }
              while (v26 != v27);
              int v26 = (char *)v35;
            }
            int v18 = v25 + 24;
            float v35 = v28;
            uint64_t v36 = v25 + 24;
            uint64_t v37 = &v23[24 * v24];
            if (v26) {
              operator delete(v26);
            }
          }
          else
          {
            *(_OWORD *)int v18 = *(_OWORD *)v19;
            *((_DWORD *)v18 + 4) = *(_DWORD *)(v19 + 28);
            v18 += 24;
          }
          uint64_t v36 = v18;
          ++v16;
        }
        while (v16 != v17);
      }
      double v30 = (float *)(i + 24);
      unint64_t v31 = v34[1];
      if (v31 >= v34[2])
      {
        uint64_t v32 = sub_19E39CD00(v34, (long long **)&v35, v30);
      }
      else
      {
        sub_19E39CC8C((uint64_t)v34, (long long **)&v35, v30);
        uint64_t v32 = v31 + 32;
      }
      v34[1] = v32;
      if (v35)
      {
        uint64_t v36 = (char *)v35;
        operator delete(v35);
      }
    }
    float v35 = &v38;
    sub_19E37C8AC((void ***)&v35);
    sub_19E3957E8((uint64_t)__p);
  }
  else
  {
    (*(void (**)(long long *__return_ptr, uint64_t, unsigned __int8 *, uint64_t))(*(void *)a1 + 40))(&v38, a1, a2, a3);
    *(_OWORD *)std::string __p = v38;
    std::string __p[2] = v39;
    unsigned int v39 = 0;
    long long v38 = 0uLL;
    LODWORD(__p[3]) = 0;
    a5[1] = 0;
    a5[2] = 0;
    *a5 = 0;
    float v35 = a5;
    LOBYTE(v36) = 0;
    int v14 = (char *)operator new(0x20uLL);
    *a5 = (uint64_t)v14;
    a5[1] = (uint64_t)v14;
    a5[2] = (uint64_t)(v14 + 32);
    a5[1] = sub_19E37C628((uint64_t)(a5 + 2), (uint64_t)__p, (uint64_t)&__p[4], (uint64_t)v14);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    uint64_t v11 = (void *)v38;
    if ((void)v38)
    {
      *((void *)&v38 + 1) = v38;
LABEL_5:
      operator delete(v11);
    }
  }
}

void sub_19E399E98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  a12 = a11;
  sub_19E37C8AC((void ***)&a12);
  sub_19E3957E8((uint64_t)&__p);
  _Unwind_Resume(a1);
}

uint64_t *sub_19E399F68@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>, float a5@<S0>)
{
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 16))(&v28);
  if (v28)
  {
    uint64_t result = sub_19E3AD4CC((uint64_t *)&v28);
LABEL_3:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return result;
  }
  uint64_t result = sub_19E3AD4CC((uint64_t *)&v28);
  if (!a3) {
    goto LABEL_3;
  }
  uint64_t v28 = &unk_1EF0B94F8;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  uint64_t v34 = 0;
  float v35 = &unk_1EF0B93C8;
  long long v36 = 0u;
  long long v37 = 0u;
  uint64_t v38 = 0;
  uint64_t v39 = 1024;
  sub_19E395AFC((uint64_t)&v28, a2, a3);
  sub_19E398290(a1, &v28);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_19E397E6C(&v28, (void **)&v26, a5);
  uint64_t v11 = v26;
  int v12 = v27;
  if (v26 != v27)
  {
    uint64_t v13 = 0;
    int v14 = a4 + 2;
    do
    {
      uint64_t v15 = *v11;
      if ((unint64_t)v13 >= *v14)
      {
        unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v13[-*a4] >> 3);
        unint64_t v17 = v16 + 1;
        if (v16 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_19E37C7C4();
        }
        if (0x5555555555555556 * ((uint64_t)(*v14 - *a4) >> 3) > v17) {
          unint64_t v17 = 0x5555555555555556 * ((uint64_t)(*v14 - *a4) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v14 - *a4) >> 3) >= 0x555555555555555) {
          unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v18 = v17;
        }
        uint64_t v19 = (char *)sub_19E37C7DC((uint64_t)(a4 + 2), v18);
        unint64_t v21 = &v19[24 * v16];
        *(_OWORD *)unint64_t v21 = *(_OWORD *)v15;
        *((_DWORD *)v21 + 4) = *(_DWORD *)(v15 + 28);
        unint64_t v23 = (char *)*a4;
        unint64_t v22 = (char *)a4[1];
        uint64_t v24 = v21;
        if (v22 != (char *)*a4)
        {
          do
          {
            long long v25 = *(_OWORD *)(v22 - 24);
            *((void *)v24 - 1) = *((void *)v22 - 1);
            *(_OWORD *)(v24 - 24) = v25;
            v24 -= 24;
            v22 -= 24;
          }
          while (v22 != v23);
          unint64_t v22 = (char *)*a4;
        }
        uint64_t v13 = v21 + 24;
        *a4 = v24;
        a4[1] = v21 + 24;
        a4[2] = &v19[24 * v20];
        if (v22) {
          operator delete(v22);
        }
      }
      else
      {
        *(_OWORD *)uint64_t v13 = *(_OWORD *)v15;
        *((_DWORD *)v13 + 4) = *(_DWORD *)(v15 + 28);
        v13 += 24;
      }
      a4[1] = v13;
      ++v11;
    }
    while (v11 != v12);
    uint64_t v11 = v26;
  }
  if (v11)
  {
    unsigned int v27 = v11;
    operator delete(v11);
  }
  return (uint64_t *)sub_19E3957E8((uint64_t)&v28);
}

void sub_19E39A1F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
}

void sub_19E39A238(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, char a5@<W4>, int a6@<W5>, uint64_t *a7@<X8>, float a8@<S0>)
{
  (*(void (**)(void ***__return_ptr))(*(void *)a1 + 16))(&v122);
  if (v122)
  {
    sub_19E3AD4CC((uint64_t *)&v122);
LABEL_3:
    *a7 = 0;
    a7[1] = 0;
    a7[2] = 0;
    return;
  }
  sub_19E3AD4CC((uint64_t *)&v122);
  if (!a3) {
    goto LABEL_3;
  }
  uint64_t v103 = a7;
  uint64_t v134 = 0;
  uint64_t v135 = 0;
  unint64_t v136 = 0;
  unint64_t v122 = (void **)&unk_1EF0B94F8;
  long long v123 = 0u;
  long long v124 = 0u;
  long long v125 = 0u;
  long long v126 = 0u;
  long long v127 = 0u;
  uint64_t v128 = 0;
  uint64_t v129 = &unk_1EF0B93C8;
  long long v130 = 0u;
  long long v131 = 0u;
  uint64_t v132 = 0;
  uint64_t v133 = 1024;
  sub_19E395AFC((uint64_t)&v122, a2, a3);
  sub_19E398290(a1, &v122);
  sub_19E39653C(&v122, (uint64_t *)v121, a8);
  float v16 = *((float *)v121[0]
        + *(unsigned int *)(**(void **)(*((void *)&v125 + 1)
                                        + 24
                                        * ((((*((void *)&v124 + 1) - (void)v124) >> 3) - 1) & ~((int)(((*((void *)&v124 + 1) - (void)v124) >> 3) - 1) >> 31)))
                          + 24));
  if (a6)
  {
    if ((a5 & 1) == 0)
    {
      if ((int)sub_19E3AB380() <= 2)
      {
        LOBYTE(__p[0]) = 0;
        uint64_t v34 = sub_19E37CA70(MEMORY[0x1E4FBA240], (uint64_t)"unigram_model.cc", 16);
        sub_19E37CA70(v34, (uint64_t)"(", 1);
        float v35 = (void *)std::ostream::operator<<();
        long long v36 = sub_19E37CA70(v35, (uint64_t)") ", 2);
        long long v37 = sub_19E37CA70(v36, (uint64_t)"LOG(", 4);
        uint64_t v38 = sub_19E37CA70(v37, (uint64_t)"ERROR", 5);
        uint64_t v39 = sub_19E37CA70(v38, (uint64_t)") ", 2);
        sub_19E37CA70(v39, (uint64_t)"include_best not supported for wor false", 40);
        sub_19E37B91C(__p);
      }
      uint64_t v40 = a7;
      goto LABEL_114;
    }
    int v104 = a6;
    uint64_t v107 = a3;
    unint64_t v105 = a2;
    uint64_t v118 = 0;
    char v119 = 0;
    uint64_t v120 = 0;
    sub_19E39620C(&v122, (uint64_t)__p);
    unint64_t v17 = (uint64_t *)__p[0];
    unint64_t v18 = (uint64_t *)__p[1];
    if (__p[0] != __p[1])
    {
      uint64_t v19 = v119;
      do
      {
        uint64_t v20 = *v17;
        if (v19 >= (long long *)v120)
        {
          unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * (((char *)v19 - (char *)v118) >> 3);
          unint64_t v22 = v21 + 1;
          if (v21 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_19E37C7C4();
          }
          if (0x5555555555555556 * ((v120 - (char *)v118) >> 3) > v22) {
            unint64_t v22 = 0x5555555555555556 * ((v120 - (char *)v118) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((v120 - (char *)v118) >> 3) >= 0x555555555555555) {
            unint64_t v23 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v23 = v22;
          }
          uint64_t v24 = (char *)sub_19E37C7DC((uint64_t)&v120, v23);
          int v26 = &v24[24 * v21];
          *(_OWORD *)int v26 = *(_OWORD *)v20;
          *((_DWORD *)v26 + 4) = *(_DWORD *)(v20 + 28);
          uint64_t v28 = v118;
          unsigned int v27 = v119;
          long long v29 = (long long *)v26;
          if (v119 != v118)
          {
            do
            {
              long long v30 = *(long long *)((char *)v27 - 24);
              *((void *)v29 - 1) = *((void *)v27 - 1);
              *(long long *)((char *)v29 - 24) = v30;
              long long v29 = (long long *)((char *)v29 - 24);
              unsigned int v27 = (long long *)((char *)v27 - 24);
            }
            while (v27 != v28);
            unsigned int v27 = v118;
          }
          uint64_t v19 = (long long *)(v26 + 24);
          uint64_t v118 = v29;
          char v119 = (long long *)(v26 + 24);
          uint64_t v120 = &v24[24 * v25];
          if (v27) {
            operator delete(v27);
          }
        }
        else
        {
          *uint64_t v19 = *(_OWORD *)v20;
          *((_DWORD *)v19 + 4) = *(_DWORD *)(v20 + 28);
          uint64_t v19 = (long long *)((char *)v19 + 24);
        }
        char v119 = v19;
        ++v17;
      }
      while (v17 != v18);
    }
    double v116 = 0.0;
    long long v31 = v135;
    if ((unint64_t)v135 >= v136)
    {
      uint64_t v33 = sub_19E39CF6C(&v134, &v118, &v116);
    }
    else
    {
      *(void *)uint64_t v135 = 0;
      *((void *)v31 + 1) = 0;
      *((void *)v31 + 2) = 0;
      sub_19E37C6F0(v31, v118, v119, 0xAAAAAAAAAAAAAAABLL * (((char *)v119 - (char *)v118) >> 3));
      float v32 = v116;
      *((float *)v31 + 6) = v32;
      uint64_t v33 = (uint64_t)(v31 + 32);
    }
    a2 = v105;
    a3 = v107;
    a6 = v104;
    uint64_t v135 = (char *)v33;
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v118)
    {
      char v119 = v118;
      operator delete(v118);
    }
  }
  if (a5)
  {
    sub_19E396884(&v122, a4 + 1, 1, (uint64_t *)&v118, a8);
    if (a6)
    {
      sub_19E39D080(&v116, ((char *)v119 - (char *)v118) >> 5);
      long long v42 = v118;
      long long v41 = v119;
      if (v119 != v118)
      {
        uint64_t v43 = 0;
        uint64_t v44 = 0;
        unint64_t v45 = 0;
        do
        {
          if (&v42[v43] != (long long *)(*(void *)&v116 + v44))
          {
            sub_19E39D124((char *)(*(void *)&v116 + v44), *(char **)&v42[v43], *((void *)&v42[v43] + 1), (uint64_t)(*((void *)&v42[v43] + 1) - *(void *)&v42[v43]) >> 3);
            long long v42 = v118;
            long long v41 = v119;
          }
          ++v45;
          v44 += 24;
          v43 += 2;
        }
        while (v45 < ((char *)v41 - (char *)v42) >> 5);
      }
      sub_19E39620C(&v122, (uint64_t)__p);
      uint64_t v46 = sub_19E39D230(*(uint64_t *)&v116, *(uint64_t *)&v117, (uint64_t)__p);
      uint64_t v47 = (int)(-1431655765 * ((unint64_t)(v46 - *(void *)&v116) >> 3));
      if (v47 == ((char *)v119 - (char *)v118) >> 5)
      {
        unint64_t v49 = v119 - 2;
        unint64_t v48 = (void *)*((void *)v119 - 4);
        if (v48)
        {
          *((void *)v119 - 3) = v48;
          operator delete(v48);
        }
      }
      else
      {
        sub_19E39D2A0((__n128 *)&v118[2 * v47 + 2], (__n128 *)v119, (uint64_t)&v118[2 * v47]);
        unint64_t v49 = v69;
        float v70 = v119;
        if (v119 != v69)
        {
          uint64_t v71 = v119;
          do
          {
            uint64_t v73 = (void *)*((void *)v71 - 4);
            v71 -= 2;
            unint64_t v72 = v73;
            if (v73)
            {
              *((void *)v70 - 3) = v72;
              operator delete(v72);
            }
            float v70 = v71;
          }
          while (v71 != v49);
        }
      }
      char v119 = v49;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      __p[0] = &v116;
      sub_19E392398((void ***)__p);
    }
    uint64_t v74 = (void *)*((void *)v119 - 4);
    v109 = v119 - 2;
    float v75 = *((float *)v119 - 2);
    if (v74)
    {
      *((void *)v119 - 3) = v74;
      operator delete(v74);
    }
    char v119 = v109;
    for (uint64_t i = v118; i != v109; i += 2)
    {
      memset(__p, 0, 24);
      long long v77 = *(uint64_t **)i;
      uint64_t v78 = (uint64_t *)*((void *)i + 1);
      if (*(uint64_t **)i == v78)
      {
        float v80 = 0.0;
      }
      else
      {
        uint64_t v79 = 0;
        float v80 = 0.0;
        do
        {
          uint64_t v81 = *v77;
          float v82 = *(float *)(*v77 + 32);
          if (v79 >= __p[2])
          {
            unint64_t v83 = 0xAAAAAAAAAAAAAAABLL * ((v79 - (char *)__p[0]) >> 3);
            unint64_t v84 = v83 + 1;
            if (v83 + 1 > 0xAAAAAAAAAAAAAAALL) {
              sub_19E37C7C4();
            }
            if (0x5555555555555556 * (((char *)__p[2] - (char *)__p[0]) >> 3) > v84) {
              unint64_t v84 = 0x5555555555555556 * (((char *)__p[2] - (char *)__p[0]) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * (((char *)__p[2] - (char *)__p[0]) >> 3) >= 0x555555555555555) {
              unint64_t v85 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v85 = v84;
            }
            int v86 = (char *)sub_19E37C7DC((uint64_t)&__p[2], v85);
            std::string::size_type v88 = &v86[24 * v83];
            *(_OWORD *)std::string::size_type v88 = *(_OWORD *)v81;
            *((_DWORD *)v88 + 4) = *(_DWORD *)(v81 + 28);
            long long v90 = (char *)__p[0];
            CFTypeID v89 = (char *)__p[1];
            uint64_t v91 = v88;
            if (__p[1] != __p[0])
            {
              do
              {
                long long v92 = *(_OWORD *)(v89 - 24);
                *((void *)v91 - 1) = *((void *)v89 - 1);
                *(_OWORD *)(v91 - 24) = v92;
                v91 -= 24;
                v89 -= 24;
              }
              while (v89 != v90);
              CFTypeID v89 = (char *)__p[0];
            }
            uint64_t v79 = v88 + 24;
            __p[0] = v91;
            __p[1] = v88 + 24;
            std::string __p[2] = &v86[24 * v87];
            if (v89) {
              operator delete(v89);
            }
          }
          else
          {
            *(_OWORD *)uint64_t v79 = *(_OWORD *)v81;
            *((_DWORD *)v79 + 4) = *(_DWORD *)(v81 + 28);
            v79 += 24;
          }
          __p[1] = v79;
          float v80 = v80 + (float)(a8 * v82);
          ++v77;
        }
        while (v77 != v78);
      }
      *(float *)&double v116 = v80 - v16;
      CFNumberRef v93 = v135;
      if ((unint64_t)v135 >= v136)
      {
        uint64_t v94 = sub_19E39D360(&v134, (long long **)__p, &v116);
      }
      else
      {
        *(void *)uint64_t v135 = 0;
        *((void *)v93 + 1) = 0;
        *((void *)v93 + 2) = 0;
        sub_19E37C6F0(v93, (long long *)__p[0], (long long *)__p[1], 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3));
        *((_DWORD *)v93 + 6) = LODWORD(v116);
        uint64_t v94 = (uint64_t)(v93 + 32);
      }
      uint64_t v135 = (char *)v94;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
    uint64_t v95 = v134;
    for (j = v135; (char *)v95 != j; v95 += 32)
    {
      float v97 = *(float *)(v95 + 24);
      if (v97 != 0.0)
      {
        double v98 = v97 - v75;
        long double v99 = exp(v98);
        if (v98 <= -10.0)
        {
          double v101 = v98 + v99 * -0.5 + v99 * v99 / 24.0 + pow(v99, 4.0) / -2880.0;
        }
        else
        {
          long double v100 = expm1(-v99);
          double v101 = log(-v100);
        }
        float v102 = v101;
        *(float *)(v95 + 24) = v102;
      }
    }
    __p[0] = &v118;
    sub_19E37C8AC((void ***)__p);
    uint64_t v51 = v134;
    unint64_t v50 = v135;
  }
  else
  {
    uint64_t v51 = v134;
    unint64_t v50 = v135;
    if (a4 > (unint64_t)((uint64_t)&v135[-v134] >> 5))
    {
      uint64_t v108 = a3;
      uint64_t v106 = a2;
      do
      {
        memset(&__p[1], 0, 88);
        __p[0] = &unk_1EF0B94F8;
        __p[12] = &unk_1EF0B93C8;
        long long v112 = 0u;
        long long v113 = 0u;
        uint64_t v114 = 0;
        uint64_t v115 = 1024;
        sub_19E395AFC((uint64_t)__p, a2, a3);
        sub_19E398290(a1, __p);
        uint64_t v118 = 0;
        char v119 = 0;
        uint64_t v120 = 0;
        sub_19E397E6C(__p, (void **)&v116, a8);
        double v53 = v116;
        double v52 = v117;
        float v54 = 0.0;
        if (*(void *)&v116 != *(void *)&v117)
        {
          unint64_t v55 = v119;
          do
          {
            uint64_t v56 = **(void **)&v53;
            if (v55 >= (long long *)v120)
            {
              unint64_t v57 = 0xAAAAAAAAAAAAAAABLL * (((char *)v55 - (char *)v118) >> 3);
              unint64_t v58 = v57 + 1;
              if (v57 + 1 > 0xAAAAAAAAAAAAAAALL) {
                sub_19E37C7C4();
              }
              if (0x5555555555555556 * ((v120 - (char *)v118) >> 3) > v58) {
                unint64_t v58 = 0x5555555555555556 * ((v120 - (char *)v118) >> 3);
              }
              if (0xAAAAAAAAAAAAAAABLL * ((v120 - (char *)v118) >> 3) >= 0x555555555555555) {
                unint64_t v59 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v59 = v58;
              }
              int v60 = (char *)sub_19E37C7DC((uint64_t)&v120, v59);
              int v62 = &v60[24 * v57];
              *(_OWORD *)int v62 = *(_OWORD *)v56;
              *((_DWORD *)v62 + 4) = *(_DWORD *)(v56 + 28);
              float v64 = v118;
              unint64_t v63 = v119;
              uint64_t v65 = (long long *)v62;
              if (v119 != v118)
              {
                do
                {
                  long long v66 = *(long long *)((char *)v63 - 24);
                  *((void *)v65 - 1) = *((void *)v63 - 1);
                  *(long long *)((char *)v65 - 24) = v66;
                  uint64_t v65 = (long long *)((char *)v65 - 24);
                  unint64_t v63 = (long long *)((char *)v63 - 24);
                }
                while (v63 != v64);
                unint64_t v63 = v118;
              }
              unint64_t v55 = (long long *)(v62 + 24);
              uint64_t v118 = v65;
              char v119 = (long long *)(v62 + 24);
              uint64_t v120 = &v60[24 * v61];
              if (v63) {
                operator delete(v63);
              }
            }
            else
            {
              *unint64_t v55 = *(_OWORD *)v56;
              *((_DWORD *)v55 + 4) = *(_DWORD *)(v56 + 28);
              unint64_t v55 = (long long *)((char *)v55 + 24);
            }
            char v119 = v55;
            float v54 = v54 + (float)(a8 * *(float *)(v56 + 32));
            *(void *)&v53 += 8;
          }
          while (*(void *)&v53 != *(void *)&v52);
        }
        float v110 = v54 - v16;
        long long v67 = v135;
        if ((unint64_t)v135 >= v136)
        {
          uint64_t v68 = sub_19E39D360(&v134, &v118, &v110);
        }
        else
        {
          *(void *)uint64_t v135 = 0;
          *((void *)v67 + 1) = 0;
          *((void *)v67 + 2) = 0;
          sub_19E37C6F0(v67, v118, v119, 0xAAAAAAAAAAAAAAABLL * (((char *)v119 - (char *)v118) >> 3));
          *((float *)v67 + 6) = v110;
          uint64_t v68 = (uint64_t)(v67 + 32);
        }
        a2 = v106;
        a3 = v108;
        uint64_t v135 = (char *)v68;
        if (v116 != 0.0)
        {
          double v117 = v116;
          operator delete(*(void **)&v116);
        }
        if (v118)
        {
          char v119 = v118;
          operator delete(v118);
        }
        sub_19E3957E8((uint64_t)__p);
        uint64_t v51 = v134;
        unint64_t v50 = v135;
      }
      while (a4 > (unint64_t)((uint64_t)&v135[-v134] >> 5));
    }
  }
  uint64_t *v103 = v51;
  v103[1] = (uint64_t)v50;
  v103[2] = v136;
  uint64_t v40 = &v134;
LABEL_114:
  *uint64_t v40 = 0;
  v40[1] = 0;
  void v40[2] = 0;
  if (v121[0])
  {
    v121[1] = v121[0];
    operator delete(v121[0]);
  }
  sub_19E3957E8((uint64_t)&v122);
  unint64_t v122 = (void **)&v134;
  sub_19E37C8AC(&v122);
}

void sub_19E39AD3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char *__p, char *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void **a46)
{
  if (__p)
  {
    a19 = __p;
    operator delete(__p);
  }
  std::string __p = &a37;
  sub_19E392398((void ***)&__p);
  std::string __p = &a40;
  sub_19E37C8AC((void ***)&__p);
  unint64_t v49 = *(void **)(v46 + 200);
  if (v49)
  {
    *(void *)(v46 + 208) = v49;
    operator delete(v49);
  }
  sub_19E3957E8((uint64_t)&a46);
  a46 = (void **)(v47 - 160);
  sub_19E37C8AC(&a46);
  _Unwind_Resume(a1);
}

float sub_19E39AEAC(uint64_t a1, unsigned __int8 *a2, uint64_t a3, float a4)
{
  float v8 = &unk_1EF0B94F8;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  uint64_t v14 = 0;
  uint64_t v15 = &unk_1EF0B93C8;
  long long v16 = 0u;
  long long v17 = 0u;
  uint64_t v18 = 0;
  uint64_t v19 = 1024;
  sub_19E395AFC((uint64_t)&v8, a2, a3);
  sub_19E398290(a1, &v8);
  float v6 = sub_19E3966C4(&v8, a4);
  sub_19E3957E8((uint64_t)&v8);
  return v6;
}

void sub_19E39AF6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E3957E8((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_19E39AF80(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  strcpy(__s, " ");
  size_t v10 = strlen(__s);
  sub_19E391BB4((char **)&v43, a2, a3, (unsigned __int8 *)__s, v10, 0);
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  std::string __p = 0;
  sub_19E39C3FC(&__p, v43, (uint64_t)v44, (v44 - (unsigned char *)v43) >> 4);
  long long v11 = __p;
  long long v12 = v46;
  if (__p == v46)
  {
    float v14 = 0.0;
    if (__p)
    {
LABEL_11:
      uint64_t v46 = v11;
      operator delete(v11);
    }
  }
  else
  {
    float v13 = *(float *)(a1 + 104) + -10.0;
    float v14 = 0.0;
    do
    {
      uint64_t v15 = v11[1];
      uint64_t v16 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 112))(a1, *v11, v15);
      if (v16 == *(_DWORD *)(a1 + 88))
      {
        float v14 = v13 + v14;
      }
      else
      {
        if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 8) + 136))(*(void *)(a1 + 8), v16)) {
          double v17 = (float)(*(float *)(a1 + 108) * (float)(int)v15) + -0.1;
        }
        else {
          double v17 = (*(float (**)(void, uint64_t))(**(void **)(a1 + 8) + 96))(*(void *)(a1 + 8), v16);
        }
        float v14 = v17 + v14;
      }
      v11 += 2;
    }
    while (v11 != v12);
    long long v11 = __p;
    if (__p) {
      goto LABEL_11;
    }
  }
  if (v43)
  {
    uint64_t v44 = v43;
    operator delete(v43);
  }
  strcpy(__s, " ");
  size_t v18 = strlen(__s);
  sub_19E391BB4((char **)&v43, a4, a5, (unsigned __int8 *)__s, v18, 0);
  long long v41 = 0;
  uint64_t v42 = 0;
  uint64_t v40 = 0;
  sub_19E39C3FC(&v40, v43, (uint64_t)v44, (v44 - (unsigned char *)v43) >> 4);
  uint64_t v19 = v40;
  uint64_t v20 = v41;
  if (v40 != v41)
  {
    float v21 = *(float *)(a1 + 104) + -10.0;
    float v22 = 0.0;
    do
    {
      uint64_t v23 = v19[1];
      uint64_t v24 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 112))(a1, *v19, v23);
      if (v24 == *(_DWORD *)(a1 + 88))
      {
        float v22 = v21 + v22;
      }
      else
      {
        if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 8) + 136))(*(void *)(a1 + 8), v24)) {
          double v25 = (float)(*(float *)(a1 + 108) * (float)(int)v23) + -0.1;
        }
        else {
          double v25 = (*(float (**)(void, uint64_t))(**(void **)(a1 + 8) + 96))(*(void *)(a1 + 8), v24);
        }
        float v22 = v25 + v22;
      }
      v19 += 2;
    }
    while (v19 != v20);
    uint64_t v19 = v40;
    if (!v40) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  float v22 = 0.0;
  if (v40)
  {
LABEL_24:
    long long v41 = v19;
    operator delete(v19);
  }
LABEL_25:
  if (v43)
  {
    uint64_t v44 = v43;
    operator delete(v43);
  }
  float v26 = vabds_f32(v14, v22);
  if (v26 > 0.0000001 && (int)sub_19E3AB380() <= 1)
  {
    LOBYTE(v43) = 0;
    unsigned int v27 = sub_19E37CA70(MEMORY[0x1E4FBA240], (uint64_t)"unigram_model.cc", 16);
    sub_19E37CA70(v27, (uint64_t)"(", 1);
    uint64_t v28 = (void *)std::ostream::operator<<();
    long long v29 = sub_19E37CA70(v28, (uint64_t)") ", 2);
    long long v30 = sub_19E37CA70(v29, (uint64_t)"LOG(", 4);
    long long v31 = sub_19E37CA70(v30, (uint64_t)"WARNING", 7);
    float v32 = sub_19E37CA70(v31, (uint64_t)") ", 2);
    uint64_t v33 = sub_19E37CA70(v32, (uint64_t)"Two sentence piece sequences are not equivalent! Left: ", 55);
    uint64_t v34 = sub_19E37CA70(v33, a2, a3);
    sub_19E37CA70(v34, (uint64_t)", Score: ", 9);
    float v35 = (void *)std::ostream::operator<<();
    long long v36 = sub_19E37CA70(v35, (uint64_t)". Right: ", 9);
    long long v37 = sub_19E37CA70(v36, a4, a5);
    sub_19E37CA70(v37, (uint64_t)", Score: ", 9);
    uint64_t v38 = (void *)std::ostream::operator<<();
    sub_19E37CA70(v38, (uint64_t)".", 1);
    sub_19E37B91C(&v43);
  }
  return v26 <= 0.0000001;
}

void sub_19E39B3E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E39B444(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  sub_19E37A6BC(a1, &v13);
  memset(&__p, 0, sizeof(__p));
  std::string::resize(&__p, 4uLL, 0);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  LODWORD(p_p->__r_.__value_.__l.__data_) = *(_DWORD *)(a1 + 104);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v5 = &__p;
  }
  else {
    unint64_t v5 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v5, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  memset(&__p, 0, sizeof(__p));
  std::string::resize(&__p, 4uLL, 0);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unsigned int v7 = &__p;
  }
  else {
    unsigned int v7 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  LODWORD(v7->__r_.__value_.__l.__data_) = *(_DWORD *)(a1 + 108);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    float v8 = &__p;
  }
  else {
    float v8 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v9 = __p.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v8, v9);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v10 = &v13;
  }
  else {
    size_t v10 = (std::string *)v13.__r_.__value_.__r.__words[0];
  }
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v11 = HIBYTE(v13.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v11 = v13.__r_.__value_.__l.__size_;
  }
  std::string::append(a2, (const std::string::value_type *)v10, v11);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
}

void sub_19E39B584(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v20 + 23) < 0) {
    operator delete(*(void **)v20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E39B5DC()
{
  return 1;
}

uint64_t sub_19E39B5E4()
{
  return 1;
}

uint64_t sub_19E39B5EC()
{
  return 1;
}

uint64_t sub_19E39B5F4()
{
  return 1;
}

void *sub_19E39B5FC(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    float v6 = result;
    uint64_t result = sub_19E394ABC(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_19E39B65C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_19E39B678(uint64_t a1, unsigned char *a2, uint64_t a3, unint64_t a4, uint64_t a5, int a6)
{
  std::string::size_type v9 = *(unsigned int **)(a1 + 16);
  unsigned int v10 = *v9;
  if (a5)
  {
    int v11 = *a2;
    unint64_t v12 = (v10 >> 10 << ((v10 >> 6) & 8)) ^ v11;
    unsigned int v10 = v9[v12];
    if ((v10 & 0x800000FF) == v11)
    {
      uint64_t v13 = a5 - 1;
      float v14 = a2 + 1;
      while (1)
      {
        unint64_t v15 = v12;
        if (!v13) {
          goto LABEL_16;
        }
        int v16 = *v14++;
        unint64_t v12 = (v10 >> 10 << ((v10 >> 6) & 8)) ^ v12 ^ v16;
        unsigned int v10 = v9[v12];
        --v13;
        if ((v10 & 0x800000FF) != v16) {
          goto LABEL_14;
        }
      }
    }
  }
  else
  {
    int v17 = *a2;
    if (!*a2)
    {
      unint64_t v15 = 0;
      LODWORD(v12) = 0;
LABEL_16:
      if ((v10 & 0x100) != 0) {
        int v22 = v9[(v10 >> 10 << ((v10 >> 6) & 8)) ^ v12] & 0x7FFFFFFF;
      }
      else {
        int v22 = -1;
      }
      goto LABEL_19;
    }
    unint64_t v18 = (v10 >> 10 << ((v10 >> 6) & 8)) ^ v17;
    unsigned int v10 = v9[v18];
    if ((v10 & 0x800000FF) == v17)
    {
      uint64_t v19 = a2 + 1;
      LODWORD(v12) = v18;
      while (1)
      {
        unint64_t v15 = v18;
        int v21 = *v19++;
        int v20 = v21;
        if (!v21) {
          goto LABEL_16;
        }
        unint64_t v18 = (v10 >> 10 << ((v10 >> 6) & 8)) ^ v12 ^ v20;
        unsigned int v10 = v9[v18];
        LODWORD(v12) = v18;
        if ((v10 & 0x800000FF) != v20) {
          goto LABEL_14;
        }
      }
    }
  }
  unint64_t v15 = 0;
LABEL_14:
  int v22 = -2;
LABEL_19:
  long long v44 = 0u;
  memset(v43, 0, sizeof(v43));
  v41.n128_u32[0] = 0;
  v41.n128_u64[1] = v15;
  int v42 = v22;
  sub_19E39B9B0(v43, &v41);
  uint64_t v23 = *((void *)&v44 + 1);
  if (*((void *)&v44 + 1))
  {
    unint64_t v24 = 0;
    do
    {
      double v25 = (int *)(*(void *)(*((void *)&v43[0] + 1) + 8 * ((unint64_t)v44 / 0xAA))
                  + 24 * ((unint64_t)v44 % 0xAA));
      int v26 = *v25;
      uint64_t v27 = v25[2];
      int v28 = v25[4];
      *(void *)&long long v44 = v44 + 1;
      *((void *)&v44 + 1) = v23 - 1;
      if ((unint64_t)v44 >= 0x154)
      {
        operator delete(**((void ***)&v43[0] + 1));
        *((void *)&v43[0] + 1) += 8;
        *(void *)&long long v44 = v44 - 170;
      }
      if ((v28 & 0x80000000) == 0)
      {
        uint64_t v29 = a3 + 16 * v24;
        *(_DWORD *)uint64_t v29 = v28;
        *(void *)(v29 + 8) = a5;
        ++v24;
      }
      BOOL v31 = a6 >= 0 && v26 > a6;
      if (v24 >= a4 || v31) {
        break;
      }
      if (v28 != -2)
      {
        unsigned __int32 v32 = v26 + 1;
        for (int i = 1; i != 256; ++i)
        {
          uint64_t v34 = *(void *)(a1 + 16);
          unint64_t v35 = (*(_DWORD *)(v34 + 4 * v27) >> 10 << ((*(_DWORD *)(v34 + 4 * v27) >> 6) & 8)) ^ v27 ^ i;
          unsigned int v36 = *(_DWORD *)(v34 + 4 * v35);
          if (i == (v36 & 0x800000FF))
          {
            if ((v36 & 0x100) != 0) {
              int v37 = *(_DWORD *)(v34 + 4 * ((v36 >> 10 << ((v36 >> 6) & 8)) ^ v35)) & 0x7FFFFFFF;
            }
            else {
              int v37 = -1;
            }
            v41.n128_u32[0] = v32;
            v41.n128_u64[1] = v35;
            int v42 = v37;
            sub_19E39B9B0(v43, &v41);
          }
        }
      }
      uint64_t v23 = *((void *)&v44 + 1);
    }
    while (*((void *)&v44 + 1));
  }
  else
  {
    unint64_t v24 = 0;
  }
  sub_19E39C1E4(v43);
  return v24;
}

void sub_19E39B968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_19E39C1E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_19E39B980(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 16 * a2;
    }
  }
  else
  {
    sub_19E39C2DC((void **)a1, a2 - v2);
  }
}

__n128 sub_19E39B9B0(void *a1, __n128 *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 170 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_19E39BA60(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  size_t v8 = (__n128 *)(*(void *)(v5 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA));
  __n128 result = *a2;
  v8[1].n128_u64[0] = a2[1].n128_u64[0];
  *size_t v8 = result;
  ++a1[5];
  return result;
}

void sub_19E39BA60(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0xAA;
  unint64_t v4 = v2 - 170;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    size_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    std::string::size_type v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)size_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_19E37CFB8(v5, v33);
      unint64_t v35 = &v34[8 * (v33 >> 2)];
      int v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      size_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        size_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        __n128 v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)__n128 v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      std::string::size_type v9 = (char *)a1[1];
    }
    size_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFF0uLL);
      sub_19E39BD78(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFF0uLL);
    sub_19E39BE90((uint64_t)a1, &v54);
    long long v44 = (void *)a1[1];
    size_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    std::string::size_type v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_19E37CFB8((uint64_t)(a1 + 3), v46);
      unint64_t v35 = &v34[8 * (v46 >> 2)];
      int v37 = &v34[8 * v47];
      unint64_t v48 = (uint64_t *)a1[1];
      size_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        size_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        size_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&long long v54 = sub_19E37CFB8((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  double v53 = operator new(0xFF0uLL);
  sub_19E39BFB0(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_19E39C0C8((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_19E39BD2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_19E39BD78(void *a1, void *a2)
{
  uint64_t v5 = (char *)a1[3];
  uint64_t v4 = (uint64_t)(a1 + 3);
  uint64_t v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    unint64_t v7 = (char *)a1[1];
    uint64_t v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v18 = 1;
      }
      else {
        unint64_t v18 = (uint64_t)&v6[-*a1] >> 2;
      }
      uint64_t v19 = (char *)sub_19E37CFB8(v4, v18);
      uint64_t v21 = &v19[8 * (v18 >> 2)];
      unint64_t v22 = (uint64_t *)a1[1];
      uint64_t v6 = v21;
      uint64_t v23 = a1[2] - (void)v22;
      if (v23)
      {
        uint64_t v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v24 = 8 * (v23 >> 3);
        unint64_t v25 = &v19[8 * (v18 >> 2)];
        do
        {
          uint64_t v26 = *v22++;
          *(void *)unint64_t v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      uint64_t v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        uint64_t v6 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v9 = v8 >> 3;
      BOOL v10 = v8 >> 3 < -1;
      uint64_t v11 = (v8 >> 3) + 2;
      if (v10) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = v9 + 1;
      }
      uint64_t v13 = -(v12 >> 1);
      uint64_t v14 = v12 >> 1;
      uint64_t v15 = &v7[-8 * v14];
      int64_t v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        uint64_t v6 = (char *)a1[1];
      }
      uint64_t v17 = &v6[8 * v13];
      uint64_t v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(void *)uint64_t v6 = *a2;
  a1[2] += 8;
}

void sub_19E39BE90(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = a1 + 24;
    unint64_t v7 = *(unsigned char **)(a1 + 24);
    uint64_t v8 = *(unsigned char **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4) {
        unint64_t v12 = 1;
      }
      else {
        unint64_t v12 = (v7 - v4) >> 2;
      }
      uint64_t v13 = 2 * v12;
      uint64_t v14 = (char *)sub_19E37CFB8(v6, v12);
      uint64_t v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      int64_t v16 = *(uint64_t **)(a1 + 8);
      uint64_t v17 = v5;
      uint64_t v18 = *(void *)(a1 + 16) - (void)v16;
      if (v18)
      {
        uint64_t v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v19 = 8 * (v18 >> 3);
        uint64_t v20 = v5;
        do
        {
          uint64_t v21 = *v16++;
          *(void *)uint64_t v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      unint64_t v22 = *(char **)a1;
      *(void *)a1 = v14;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v17;
      *(void *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v9 = (v7 - v8) >> 3;
      if (v9 >= -1) {
        uint64_t v10 = v9 + 1;
      }
      else {
        uint64_t v10 = v9 + 2;
      }
      uint64_t v11 = v10 >> 1;
      uint64_t v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

void sub_19E39BFB0(void *a1, void *a2)
{
  uint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    uint64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        unint64_t v16 = 1;
      }
      else {
        unint64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      uint64_t v17 = (char *)sub_19E37CFB8(a1[4], v16);
      uint64_t v19 = &v17[8 * (v16 >> 2)];
      uint64_t v20 = (uint64_t *)a1[1];
      uint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        uint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v22 = 8 * (v21 >> 3);
        uint64_t v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)uint64_t v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      unint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        uint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v7 = v6 >> 3;
      BOOL v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      int64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        uint64_t v4 = (char *)a1[1];
      }
      uint64_t v15 = &v4[8 * v11];
      uint64_t v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(void *)uint64_t v4 = *a2;
  a1[2] += 8;
}

void sub_19E39C0C8(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = *(unsigned char **)(a1 + 16);
    uint64_t v7 = *(unsigned char **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = (v7 - v4) >> 2;
      }
      uint64_t v12 = 2 * v11;
      uint64_t v13 = (char *)sub_19E37CFB8(*(void *)(a1 + 32), v11);
      uint64_t v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v15 = *(uint64_t **)(a1 + 8);
      unint64_t v16 = v5;
      uint64_t v17 = *(void *)(a1 + 16) - (void)v15;
      if (v17)
      {
        unint64_t v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v18 = 8 * (v17 >> 3);
        uint64_t v19 = v5;
        do
        {
          uint64_t v20 = *v15++;
          *(void *)uint64_t v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      uint64_t v21 = *(char **)a1;
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v8 = (v7 - v6) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

uint64_t sub_19E39C1E4(void *a1)
{
  unint64_t v2 = (void **)a1[1];
  BOOL v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      BOOL v3 = (void **)a1[2];
      unint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 85;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 170;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    uint64_t v7 = *v2++;
    operator delete(v7);
  }
  return sub_19E39C28C((uint64_t)a1);
}

uint64_t sub_19E39C28C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3) {
    *(void *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  unint64_t v4 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v4);
  }
  return a1;
}

void sub_19E39C2DC(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 4);
    if (v9 >> 60) {
      sub_19E37C7C4();
    }
    uint64_t v10 = v8 >> 4;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 3 > v9) {
      unint64_t v9 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      uint64_t v13 = (char *)sub_19E37D6C0(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = &v13[16 * v10];
    uint64_t v15 = &v13[16 * v12];
    bzero(v14, 16 * a2);
    unint64_t v16 = &v14[16 * a2];
    uint64_t v18 = (char *)*a1;
    uint64_t v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v17 - 1);
        v14 -= 16;
        v17 -= 16;
      }
      while (v17 != v18);
      uint64_t v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

void *sub_19E39C3FC(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    __n128 result = sub_19E3805E4(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_19E39C45C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E39C478(void *a1)
{
  sub_19E39C4B0(a1);
  JUMPOUT(0x19F3BDCF0);
}

void *sub_19E39C4B0(void *a1)
{
  *a1 = &unk_1EF0B93C8;
  uint64_t v2 = (void *)a1[1];
  uint64_t v3 = (void *)a1[2];
  if (v2 != v3)
  {
    do
    {
      if (*v2) {
        MEMORY[0x19F3BDCC0](*v2, 0x1070C8005A2B047);
      }
      ++v2;
    }
    while (v2 != v3);
    uint64_t v2 = (void *)a1[1];
  }
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_19E39C540(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      sub_19E37C7C4();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      unint64_t v12 = (char *)sub_19E37C7DC(v4, v11);
    }
    else {
      unint64_t v12 = 0;
    }
    uint64_t v15 = v12;
    unint64_t v16 = &v12[24 * v8];
    uint64_t v18 = &v12[24 * v11];
    size_t v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    uint64_t v17 = &v16[v14];
    sub_19E39C6A8(a1, &v15);
    sub_19E394034((uint64_t)&v15);
  }
}

void sub_19E39C694(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E394034((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E39C6A8(uint64_t *a1, void *a2)
{
  uint64_t result = sub_19E39C720((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_19E39C720(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_19E39C7C4((uint64_t)v11);
  return v9;
}

uint64_t sub_19E39C7C4(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_19E393FEC(a1);
  }
  return a1;
}

uint64_t sub_19E39C7FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  std::string v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *(void *)uint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
      *(void *)(v4 + 16) = 0;
      sub_19E39B5FC((void *)v4, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 3);
      *(_DWORD *)(v4 + 24) = *(_DWORD *)(v6 + 24);
      uint64_t v4 = v11 + 32;
      v11 += 32;
      v6 += 32;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  sub_19E39C8B8((uint64_t)v8);
  return v4;
}

void sub_19E39C8A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_19E39C8B8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_19E37C85C(a1);
  }
  return a1;
}

void sub_19E39C8F0(void *a1)
{
  sub_19E397DDC(a1);
  JUMPOUT(0x19F3BDCF0);
}

uint64_t sub_19E39C928(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3 >= 2)
  {
    unint64_t v3 = (unint64_t)(a3 - 2) >> 1;
    uint64_t v4 = (void *)(result + 8 * v3);
    uint64_t v5 = *v4;
    uint64_t v8 = *(void *)(a2 - 8);
    uint64_t v6 = (void *)(a2 - 8);
    uint64_t v7 = v8;
    float v9 = *(float *)(v8 + 16);
    if (*(float *)(*v4 + 16) < v9)
    {
      do
      {
        uint64_t v10 = v4;
        void *v6 = v5;
        if (!v3) {
          break;
        }
        unint64_t v3 = (v3 - 1) >> 1;
        uint64_t v4 = (void *)(result + 8 * v3);
        uint64_t v5 = *v4;
        uint64_t v6 = v10;
      }
      while (*(float *)(*v4 + 16) < v9);
      void *v10 = v7;
    }
  }
  return result;
}

uint64_t sub_19E39C984(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(result - 8);
  if (a2 <= (v6 - v7) >> 5)
  {
    if (a2)
    {
      uint64_t v14 = 32 * a2;
      uint64_t v15 = v7 + 32 * a2;
      do
      {
        *(void *)uint64_t v7 = 0;
        *(void *)(v7 + 8) = 0;
        *(_DWORD *)(v7 + 24) = 0;
        *(void *)(v7 + 16) = 0;
        v7 += 32;
        v14 -= 32;
      }
      while (v14);
      uint64_t v7 = v15;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - *a1;
    unint64_t v9 = a2 + (v8 >> 5);
    if (v9 >> 59) {
      sub_19E37C7C4();
    }
    uint64_t v10 = v8 >> 5;
    uint64_t v11 = v5 - *a1;
    if (v11 >> 4 > v9) {
      unint64_t v9 = v11 >> 4;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    v19[4] = result;
    if (v12) {
      long long v13 = (char *)sub_19E394140(result, v12);
    }
    else {
      long long v13 = 0;
    }
    unint64_t v16 = &v13[32 * v10];
    v19[0] = v13;
    v19[1] = v16;
    v19[3] = &v13[32 * v12];
    uint64_t v17 = 32 * a2;
    uint64_t v18 = &v16[32 * a2];
    do
    {
      *(void *)unint64_t v16 = 0;
      *((void *)v16 + 1) = 0;
      *((_DWORD *)v16 + 6) = 0;
      *((void *)v16 + 2) = 0;
      v16 += 32;
      v17 -= 32;
    }
    while (v17);
    v19[2] = v18;
    sub_19E39CAAC(a1, v19);
    return sub_19E394658((uint64_t)v19);
  }
  return result;
}

void sub_19E39CA98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E394658((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E39CAAC(uint64_t *a1, void *a2)
{
  uint64_t result = sub_19E39CB24((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_19E39CB24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      long long v8 = *(_OWORD *)(a3 - 32);
      a3 -= 32;
      *(_OWORD *)(v7 - 32) = v8;
      *(void *)(v7 - 16) = *(void *)(a3 + 16);
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)a3 = 0;
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 + 24);
      uint64_t v7 = *((void *)&v14 + 1) - 32;
      *((void *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_19E39CBD0((uint64_t)v11);
  return v9;
}

uint64_t sub_19E39CBD0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_19E394610(a1);
  }
  return a1;
}

void *sub_19E39CC08(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_19E394ABC(a1, a2);
    uint64_t v6 = (void *)a1[1];
    uint64_t v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_19E39CC70(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

float sub_19E39CC8C(uint64_t a1, long long **a2, float *a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)uint64_t v5 = 0;
  *(void *)(v5 + 8) = 0;
  *(void *)(v5 + 16) = 0;
  sub_19E37C6F0((char *)v5, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  float result = *a3;
  *(float *)(v5 + 24) = *a3;
  *(void *)(a1 + 8) = v5 + 32;
  return result;
}

void sub_19E39CCF8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_19E39CD00(uint64_t *a1, long long **a2, _DWORD *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (a1[1] - *a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    sub_19E37C7C4();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v10 = a1[2] - v4;
  if (v10 >> 4 > v6) {
    unint64_t v6 = v10 >> 4;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v6;
  }
  uint64_t v19 = a1 + 2;
  if (v11) {
    char v12 = (char *)sub_19E394140(v9, v11);
  }
  else {
    char v12 = 0;
  }
  long long v13 = &v12[32 * v5];
  v16[0] = v12;
  v16[1] = v13;
  uint64_t v17 = v13;
  uint64_t v18 = &v12[32 * v11];
  *(void *)long long v13 = 0;
  *((void *)v13 + 1) = 0;
  *((void *)v13 + 2) = 0;
  sub_19E37C6F0(v13, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  *((_DWORD *)v13 + 6) = *a3;
  v17 += 32;
  sub_19E39CE10(a1, v16);
  uint64_t v14 = a1[1];
  sub_19E394658((uint64_t)v16);
  return v14;
}

void sub_19E39CDFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E394658((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E39CE10(uint64_t *a1, void *a2)
{
  uint64_t result = sub_19E39CE88((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_19E39CE88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      long long v8 = *(_OWORD *)(a3 - 32);
      a3 -= 32;
      *(_OWORD *)(v7 - 32) = v8;
      *(void *)(v7 - 16) = *(void *)(a3 + 16);
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)a3 = 0;
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 + 24);
      uint64_t v7 = *((void *)&v14 + 1) - 32;
      *((void *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_19E39CF34((uint64_t)v11);
  return v9;
}

uint64_t sub_19E39CF34(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_19E394610(a1);
  }
  return a1;
}

uint64_t sub_19E39CF6C(uint64_t *a1, long long **a2, double *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (a1[1] - *a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    sub_19E37C7C4();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v10 = a1[2] - v4;
  if (v10 >> 4 > v6) {
    unint64_t v6 = v10 >> 4;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v6;
  }
  uint64_t v20 = a1 + 2;
  if (v11) {
    char v12 = (char *)sub_19E394140(v9, v11);
  }
  else {
    char v12 = 0;
  }
  long long v13 = &v12[32 * v5];
  v17[0] = v12;
  v17[1] = v13;
  uint64_t v18 = v13;
  uint64_t v19 = &v12[32 * v11];
  *(void *)long long v13 = 0;
  *((void *)v13 + 1) = 0;
  *((void *)v13 + 2) = 0;
  sub_19E37C6F0(v13, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  float v14 = *a3;
  *((float *)v13 + 6) = v14;
  v18 += 32;
  sub_19E39CE10(a1, v17);
  uint64_t v15 = a1[1];
  sub_19E394658((uint64_t)v17);
  return v15;
}

void sub_19E39D06C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E394658((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_19E39D080(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_19E37C770(a1, a2);
    uint64_t v4 = (char *)a1[1];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_19E39D110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

char *sub_19E39D124(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 3)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61) {
      sub_19E37C7C4();
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = sub_19E394ABC(v7, v11);
    long long v13 = (char *)v7[1];
    char v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  char v12 = (void **)(result + 8);
  float v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 3;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  unint64_t v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    uint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  char *v12 = &v9[v17];
  return result;
}

uint64_t sub_19E39D230(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    size_t v5 = *(const void **)a3;
    size_t v6 = *(void *)(a3 + 8) - *(void *)a3;
    while (*(void *)(v3 + 8) - *(void *)v3 != v6 || memcmp(*(const void **)v3, v5, v6))
    {
      v3 += 24;
      if (v3 == a2) {
        return a2;
      }
    }
  }
  return v3;
}

__n128 *sub_19E39D2A0(__n128 *a1, __n128 *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 == a2) {
    return a1;
  }
  size_t v5 = a2;
  do
  {
    sub_19E39D30C(a3, v4);
    *(_DWORD *)(a3 + 24) = v4[1].n128_u32[2];
    a3 += 32;
    v4 += 2;
  }
  while (v4 != v5);
  return v5;
}

__n128 sub_19E39D30C(uint64_t a1, __n128 *a2)
{
  uint64_t v4 = *(void **)a1;
  if (v4)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  __n128 result = *a2;
  *(__n128 *)a1 = *a2;
  *(void *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

uint64_t sub_19E39D360(uint64_t *a1, long long **a2, _DWORD *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (a1[1] - *a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    sub_19E37C7C4();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v10 = a1[2] - v4;
  if (v10 >> 4 > v6) {
    unint64_t v6 = v10 >> 4;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v6;
  }
  uint64_t v19 = a1 + 2;
  if (v11) {
    char v12 = (char *)sub_19E394140(v9, v11);
  }
  else {
    char v12 = 0;
  }
  long long v13 = &v12[32 * v5];
  v16[0] = v12;
  v16[1] = v13;
  size_t v17 = v13;
  uint64_t v18 = &v12[32 * v11];
  *(void *)long long v13 = 0;
  *((void *)v13 + 1) = 0;
  *((void *)v13 + 2) = 0;
  sub_19E37C6F0(v13, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  *((_DWORD *)v13 + 6) = *a3;
  v17 += 32;
  sub_19E39CE10(a1, v16);
  uint64_t v14 = a1[1];
  sub_19E394658((uint64_t)v16);
  return v14;
}

void sub_19E39D45C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E394658((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E39D470(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)sub_19E398D10(a1);
  *uint64_t v4 = &unk_1EF0B9518;
  v4[1] = a2 + 16;
  sub_19E379890((uint64_t)v4);
  return a1;
}

void sub_19E39D4C0(_Unwind_Exception *a1)
{
  sub_19E37928C(v1);
  _Unwind_Resume(a1);
}

void sub_19E39D4DC(void *a1)
{
  sub_19E37928C(a1);
  JUMPOUT(0x19F3BDCF0);
}

void sub_19E39D514(uint64_t *a1@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X2>, void **a4@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr))(*a1 + 16))(&v25);
  if (v25)
  {
    sub_19E3AD4CC(&v25);
LABEL_3:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  sub_19E3AD4CC(&v25);
  if (!a3) {
    goto LABEL_3;
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  do
  {
    uint64_t v8 = (int)sub_19E381AC4(a1[2], a2, a3, 0);
    int v9 = (*(uint64_t (**)(uint64_t *, unsigned char *, uint64_t))(*a1 + 112))(a1, a2, v8);
    int v10 = v9;
    char v12 = (char *)a4[1];
    unint64_t v11 = (char *)a4[2];
    if (v12 >= v11)
    {
      unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((v12 - (unsigned char *)*a4) >> 3);
      unint64_t v15 = v14 + 1;
      if (v14 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_19E37C7C4();
      }
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v11 - (unsigned char *)*a4) >> 3);
      if (2 * v16 > v15) {
        unint64_t v15 = 2 * v16;
      }
      if (v16 >= 0x555555555555555) {
        unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v17 = v15;
      }
      uint64_t v18 = (char *)sub_19E37C7DC((uint64_t)(a4 + 2), v17);
      uint64_t v20 = &v18[24 * v14];
      *(void *)uint64_t v20 = a2;
      *((void *)v20 + 1) = v8;
      *((_DWORD *)v20 + 4) = v10;
      uint64_t v22 = (char *)*a4;
      uint64_t v21 = (char *)a4[1];
      uint64_t v23 = v20;
      if (v21 != *a4)
      {
        do
        {
          long long v24 = *(_OWORD *)(v21 - 24);
          *((void *)v23 - 1) = *((void *)v21 - 1);
          *(_OWORD *)(v23 - 24) = v24;
          v23 -= 24;
          v21 -= 24;
        }
        while (v21 != v22);
        uint64_t v21 = (char *)*a4;
      }
      long long v13 = v20 + 24;
      *a4 = v23;
      a4[1] = v20 + 24;
      a4[2] = &v18[24 * v19];
      if (v21) {
        operator delete(v21);
      }
    }
    else
    {
      *(void *)char v12 = a2;
      *((void *)v12 + 1) = v8;
      long long v13 = v12 + 24;
      *((_DWORD *)v12 + 4) = v9;
    }
    a4[1] = v13;
    a2 += v8;
    a3 -= v8;
  }
  while (a3);
}

void sub_19E39D708(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E39D72C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)sub_19E398D10(a1);
  *uint64_t v4 = &unk_1EF0B92B8;
  v4[1] = a2 + 16;
  sub_19E379890((uint64_t)v4);
  return a1;
}

void sub_19E39D77C(_Unwind_Exception *a1)
{
  sub_19E37928C(v1);
  _Unwind_Resume(a1);
}

void sub_19E39D798(void *a1)
{
  sub_19E37928C(a1);
  JUMPOUT(0x19F3BDCF0);
}

void sub_19E39D7D0(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, void **a4@<X8>)
{
  (*(void (**)(unsigned __int8 ***__return_ptr))(*(void *)a1 + 16))(&v26);
  if (v26)
  {
    sub_19E3AD4CC((uint64_t *)&v26);
LABEL_3:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  sub_19E3AD4CC((uint64_t *)&v26);
  if (!a3) {
    goto LABEL_3;
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_19E37A9FC(a2, a3, 0, 0, &v26);
  uint64_t v8 = v26;
  int v9 = v27;
  if (v26 != v27)
  {
    do
    {
      int v10 = (*(uint64_t (**)(uint64_t, unsigned __int8 *, unsigned __int8 *))(*(void *)a1 + 112))(a1, *v8, v8[1]);
      int v11 = v10;
      long long v13 = (char *)a4[1];
      char v12 = (char *)a4[2];
      if (v13 >= v12)
      {
        unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v13 - (unsigned char *)*a4) >> 3);
        unint64_t v16 = v15 + 1;
        if (v15 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_19E37C7C4();
        }
        unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((v12 - (unsigned char *)*a4) >> 3);
        if (2 * v17 > v16) {
          unint64_t v16 = 2 * v17;
        }
        if (v17 >= 0x555555555555555) {
          unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v18 = v16;
        }
        uint64_t v19 = (char *)sub_19E37C7DC((uint64_t)(a4 + 2), v18);
        uint64_t v21 = &v19[24 * v15];
        *(_OWORD *)uint64_t v21 = *(_OWORD *)v8;
        *((_DWORD *)v21 + 4) = v11;
        uint64_t v23 = (char *)*a4;
        uint64_t v22 = (char *)a4[1];
        long long v24 = v21;
        if (v22 != *a4)
        {
          do
          {
            long long v25 = *(_OWORD *)(v22 - 24);
            *((void *)v24 - 1) = *((void *)v22 - 1);
            *(_OWORD *)(v24 - 24) = v25;
            v24 -= 24;
            v22 -= 24;
          }
          while (v22 != v23);
          uint64_t v22 = (char *)*a4;
        }
        unint64_t v14 = v21 + 24;
        *a4 = v24;
        a4[1] = v21 + 24;
        a4[2] = &v19[24 * v20];
        if (v22) {
          operator delete(v22);
        }
      }
      else
      {
        *(_OWORD *)long long v13 = *(_OWORD *)v8;
        *((_DWORD *)v13 + 4) = v10;
        unint64_t v14 = v13 + 24;
      }
      a4[1] = v14;
      v8 += 2;
    }
    while (v8 != v9);
    uint64_t v8 = v26;
  }
  if (v8)
  {
    uint64_t v27 = v8;
    operator delete(v8);
  }
}

void sub_19E39D9E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  long long v13 = *(void **)v11;
  if (*(void *)v11)
  {
    *(void *)(v11 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E39DA18()
{
  sub_19E3AF568(3014000, 3014000, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc");
  sub_19E39F7A4((uint64_t)&unk_1E945A630, 0);
  sub_19E3BBE30((uint64_t)sub_19E3BB214, (uint64_t)&unk_1E945A630);
}

void sub_19E39DA88()
{
  sub_19E3AF568(3014000, 3014000, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc");
  sub_19E39EBB8((uint64_t)&unk_1EC0090D8, 0);
  sub_19E3BBE30((uint64_t)sub_19E3BB214, (uint64_t)&unk_1EC0090D8);
}

void sub_19E39DAF8()
{
  sub_19E3AF568(3014000, 3014000, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc");
  sub_19E39DB68((uint64_t)&unk_1EC009130, 0);
  sub_19E3BBE30((uint64_t)sub_19E3BB214, (uint64_t)&unk_1EC009130);
}

uint64_t sub_19E39DB68(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1EF0B9128;
  *(void *)(a1 + 8) = a2;
  sub_19E3AFEF4(a1 + 16, a2);
  *(void *)(a1 + 4sub_19E392864(&a9, 0) = 0;
  if (atomic_load_explicit(dword_1EC009040, memory_order_acquire)) {
    sub_19E3BB484(dword_1EC009040);
  }
  *(void *)(a1 + 48) = &qword_1E945A358;
  *(void *)(a1 + 56) = &qword_1E945A358;
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_19E39DBEC(_Unwind_Exception *a1)
{
  sub_19E3AFFD4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19E39DC00(uint64_t a1)
{
  return a1;
}

uint64_t *sub_19E39DC3C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (void *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) == 0)
  {
    if (!v3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (*v3)
  {
LABEL_3:
    sub_19E3AF8D4((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", 140);
    uint64_t v4 = sub_19E3AF8EC(v13, "CHECK failed: GetArena() == nullptr: ");
    sub_19E3AFA28((uint64_t)&v12, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v13);
  }
LABEL_4:
  __n128 result = (uint64_t *)(a1 + 48);
  if (*(uint64_t **)(a1 + 48) != &qword_1E945A358)
  {
    uint64_t v6 = sub_19E3A02F0(result);
    uint64_t v7 = v6;
    if (*(char *)(v6 + 23) < 0) {
      operator delete(*(void **)v6);
    }
    __n128 result = (uint64_t *)MEMORY[0x19F3BDCF0](v7, 0x1012C40EC159624);
  }
  int v9 = *(uint64_t **)(a1 + 56);
  uint64_t v8 = (uint64_t *)(a1 + 56);
  if (v9 != &qword_1E945A358)
  {
    uint64_t v10 = sub_19E3A02F0(v8);
    uint64_t v11 = v10;
    if (*(char *)(v10 + 23) < 0) {
      operator delete(*(void **)v10);
    }
    return (uint64_t *)MEMORY[0x19F3BDCF0](v11, 0x1012C40EC159624);
  }
  return result;
}

void sub_19E39DD4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_19E39DD64(uint64_t *result)
{
  uint64_t v1 = *result;
  if (*result)
  {
    unint64_t v2 = v1 & 0xFFFFFFFFFFFFFFFELL;
    if (!*(void *)(v1 & 0xFFFFFFFFFFFFFFFELL) && v2 != 0)
    {
      if (*(char *)(v2 + 31) < 0) {
        operator delete(*(void **)(v2 + 8));
      }
      JUMPOUT(0x19F3BDCF0);
    }
  }
  return result;
}

void sub_19E39DDE0(uint64_t a1)
{
  sub_19E39DC00(a1);
  JUMPOUT(0x19F3BDCF0);
}

unsigned __int8 *sub_19E39DE18(uint64_t a1)
{
  __n128 result = sub_19E3B3D7C((unsigned __int8 *)(a1 + 16));
  int v3 = *(_DWORD *)(a1 + 40);
  if ((v3 & 3) != 0)
  {
    if (v3)
    {
      unint64_t v4 = *(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v4 + 23) < 0)
      {
        **(unsigned char **)unint64_t v4 = 0;
        *(void *)(v4 + 8) = 0;
        if ((v3 & 2) == 0) {
          goto LABEL_11;
        }
        goto LABEL_6;
      }
      *(unsigned char *)unint64_t v4 = 0;
      *(unsigned char *)(v4 + 23) = 0;
    }
    if ((v3 & 2) == 0) {
      goto LABEL_11;
    }
LABEL_6:
    unint64_t v5 = *(void *)(a1 + 56) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v5 + 23) < 0)
    {
      **(unsigned char **)unint64_t v5 = 0;
      *(void *)(v5 + 8) = 0;
    }
    else
    {
      *(unsigned char *)unint64_t v5 = 0;
      *(unsigned char *)(v5 + 23) = 0;
    }
  }
LABEL_11:
  if ((v3 & 0x1C) != 0)
  {
    *(_DWORD *)(a1 + 72) = 0;
    *(void *)(a1 + 64) = 0;
  }
  *(_DWORD *)(a1 + 4sub_19E392864(&a9, 0) = 0;
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    unint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v7 + 31) < 0)
    {
      **(unsigned char **)(v7 + 8) = 0;
      *(void *)(v7 + 16) = 0;
    }
    else
    {
      *(unsigned char *)(v7 + 8) = 0;
      *(unsigned char *)(v7 + 31) = 0;
    }
  }
  return result;
}

uint64_t sub_19E39DEE8(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  *(void *)uint64_t v36 = a2;
  int v5 = 0;
  if ((sub_19E3A03C4((uint64_t)a3, (char **)v36, a3[11].i32[1]) & 1) == 0)
  {
    unint64_t v7 = (void *)(a1 + 8);
    while (1)
    {
      uint64_t v8 = (char *)(*(void *)v36 + 1);
      unsigned int v9 = **(unsigned char **)v36;
      if ((char)**(unsigned char **)v36 < 0)
      {
        unsigned int v10 = v9 + (*v8 << 7);
        unsigned int v9 = v10 - 128;
        if (*v8 < 0)
        {
          uint64_t v27 = sub_19E3BCF3C(*(uint64_t *)v36, v10 - 128);
          *(void *)uint64_t v36 = v27;
          if (!v27) {
            goto LABEL_56;
          }
          uint64_t v8 = (char *)v27;
          unsigned int v9 = v28;
          goto LABEL_8;
        }
        uint64_t v8 = (char *)(*(void *)v36 + 2);
      }
      *(void *)uint64_t v36 = v8;
LABEL_8:
      switch(v9 >> 3)
      {
        case 1u:
          if (v9 != 10) {
            goto LABEL_37;
          }
          *(_DWORD *)(a1 + 40) |= 1u;
          uint64_t v11 = *(void *)(a1 + 8);
          char v12 = (void *)(v11 & 0xFFFFFFFFFFFFFFFELL);
          if (v11) {
            char v12 = (void *)*v12;
          }
          long long v13 = (uint64_t *)(a1 + 48);
          goto LABEL_22;
        case 2u:
          if (v9 != 16) {
            goto LABEL_37;
          }
          v5 |= 4u;
          unint64_t v14 = v8 + 1;
          int v15 = *v8;
          if ((*v8 & 0x80000000) == 0) {
            goto LABEL_17;
          }
          int v16 = *v14;
          int v15 = v15 + (v16 << 7) - 128;
          if (v16 < 0)
          {
            uint64_t v30 = sub_19E3BCE8C((uint64_t)v8, v15);
            *(void *)uint64_t v36 = v30;
            *(_DWORD *)(a1 + 64) = v31;
            if (!v30) {
              goto LABEL_56;
            }
          }
          else
          {
            unint64_t v14 = v8 + 2;
LABEL_17:
            *(void *)uint64_t v36 = v14;
            *(_DWORD *)(a1 + 64) = v15;
          }
          goto LABEL_35;
        case 3u:
          if (v9 != 26) {
            goto LABEL_37;
          }
          *(_DWORD *)(a1 + 40) |= 2u;
          uint64_t v17 = *(void *)(a1 + 8);
          char v12 = (void *)(v17 & 0xFFFFFFFFFFFFFFFELL);
          if (v17) {
            char v12 = (void *)*v12;
          }
          long long v13 = (uint64_t *)(a1 + 56);
LABEL_22:
          unint64_t v18 = (std::string *)sub_19E3AE730(v13, (uint64_t)v12);
          uint64_t v19 = (void *)sub_19E3BCFF0(v18, *(char **)v36, (uint64_t)a3);
          goto LABEL_23;
        case 4u:
          if (v9 != 32) {
            goto LABEL_37;
          }
          v5 |= 8u;
          uint64_t v20 = v8 + 1;
          int v21 = *v8;
          if ((*v8 & 0x80000000) == 0) {
            goto LABEL_29;
          }
          int v22 = *v20;
          int v21 = v21 + (v22 << 7) - 128;
          if (v22 < 0)
          {
            uint64_t v32 = sub_19E3BCE8C((uint64_t)v8, v21);
            *(void *)uint64_t v36 = v32;
            *(_DWORD *)(a1 + 68) = v33;
            if (!v32) {
              goto LABEL_56;
            }
          }
          else
          {
            uint64_t v20 = v8 + 2;
LABEL_29:
            *(void *)uint64_t v36 = v20;
            *(_DWORD *)(a1 + 68) = v21;
          }
          goto LABEL_35;
        case 5u:
          if (v9 != 40) {
            goto LABEL_37;
          }
          v5 |= 0x10u;
          uint64_t v23 = v8 + 1;
          int v24 = *v8;
          if ((*v8 & 0x80000000) == 0) {
            goto LABEL_34;
          }
          int v25 = *v23;
          int v24 = v24 + (v25 << 7) - 128;
          if (v25 < 0)
          {
            uint64_t v34 = sub_19E3BCE8C((uint64_t)v8, v24);
            *(void *)uint64_t v36 = v34;
            *(_DWORD *)(a1 + 72) = v35;
            if (!v34) {
              goto LABEL_56;
            }
          }
          else
          {
            uint64_t v23 = v8 + 2;
LABEL_34:
            *(void *)uint64_t v36 = v23;
            *(_DWORD *)(a1 + 72) = v24;
          }
          goto LABEL_35;
        default:
LABEL_37:
          if (v9) {
            BOOL v26 = (v9 & 7) == 4;
          }
          else {
            BOOL v26 = 1;
          }
          if (v26)
          {
            a3[10].i32[0] = v9 - 1;
            goto LABEL_2;
          }
          if (v9 < 0x640)
          {
            if (*v7)
            {
              uint64_t v29 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
            }
            else
            {
              uint64_t v29 = (std::string *)sub_19E3A0504((unint64_t *)(a1 + 8));
              uint64_t v8 = *(char **)v36;
            }
            uint64_t v19 = sub_19E3BD4AC(v9, v29, v8, a3);
          }
          else
          {
            uint64_t v19 = sub_19E3B564C((uint64_t *)(a1 + 16), v9, (unsigned __int8 *)v8, (uint64_t)&unk_1EC009130, (unint64_t *)(a1 + 8), a3);
          }
LABEL_23:
          *(void *)uint64_t v36 = v19;
          if (!v19)
          {
LABEL_56:
            *(void *)uint64_t v36 = 0;
            goto LABEL_2;
          }
LABEL_35:
          if (sub_19E3A03C4((uint64_t)a3, (char **)v36, a3[11].i32[1])) {
            goto LABEL_2;
          }
          break;
      }
    }
  }
LABEL_2:
  *(_DWORD *)(a1 + 40) |= v5;
  return *(void *)v36;
}

char *sub_19E39E22C(uint64_t a1, char *a2, unint64_t *a3)
{
  unint64_t v4 = a2;
  int v6 = *(_DWORD *)(a1 + 40);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 4) == 0) {
      goto LABEL_3;
    }
LABEL_11:
    if (*a3 <= (unint64_t)v4) {
      unint64_t v4 = sub_19E3AEE48((uint64_t)a3, v4);
    }
    unsigned int v8 = *(_DWORD *)(a1 + 64);
    *unint64_t v4 = 16;
    if (v8 > 0x7F)
    {
      v4[1] = v8 | 0x80;
      unsigned int v10 = v8 >> 7;
      if (v8 >> 14)
      {
        v4 += 3;
        do
        {
          *(v4 - 1) = v10 | 0x80;
          unsigned int v13 = v10 >> 7;
          ++v4;
          unsigned int v14 = v10 >> 14;
          v10 >>= 7;
        }
        while (v14);
        *(v4 - 1) = v13;
        if ((v6 & 2) != 0) {
          goto LABEL_27;
        }
      }
      else
      {
        v4[2] = v10;
        v4 += 3;
        if ((v6 & 2) != 0) {
          goto LABEL_27;
        }
      }
    }
    else
    {
      v4[1] = v8;
      v4 += 2;
      if ((v6 & 2) != 0) {
        goto LABEL_27;
      }
    }
LABEL_4:
    if ((v6 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_28;
  }
  unint64_t v4 = sub_19E39E4E4(a3, 1, (const void **)(*(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL), a2);
  if ((v6 & 4) != 0) {
    goto LABEL_11;
  }
LABEL_3:
  if ((v6 & 2) == 0) {
    goto LABEL_4;
  }
LABEL_27:
  unint64_t v4 = sub_19E39E4E4(a3, 3, (const void **)(*(void *)(a1 + 56) & 0xFFFFFFFFFFFFFFFELL), v4);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0) {
      goto LABEL_39;
    }
    goto LABEL_6;
  }
LABEL_28:
  if (*a3 <= (unint64_t)v4) {
    unint64_t v4 = sub_19E3AEE48((uint64_t)a3, v4);
  }
  unsigned int v15 = *(_DWORD *)(a1 + 68);
  *unint64_t v4 = 32;
  if (v15 > 0x7F)
  {
    v4[1] = v15 | 0x80;
    unsigned int v16 = v15 >> 7;
    if (v15 >> 14)
    {
      v4 += 3;
      do
      {
        *(v4 - 1) = v16 | 0x80;
        unsigned int v17 = v16 >> 7;
        ++v4;
        unsigned int v18 = v16 >> 14;
        v16 >>= 7;
      }
      while (v18);
      *(v4 - 1) = v17;
      if ((v6 & 0x10) == 0) {
        goto LABEL_39;
      }
    }
    else
    {
      v4[2] = v16;
      v4 += 3;
      if ((v6 & 0x10) == 0) {
        goto LABEL_39;
      }
    }
  }
  else
  {
    v4[1] = v15;
    v4 += 2;
    if ((v6 & 0x10) == 0) {
      goto LABEL_39;
    }
  }
LABEL_6:
  if (*a3 <= (unint64_t)v4) {
    unint64_t v4 = sub_19E3AEE48((uint64_t)a3, v4);
  }
  unsigned int v7 = *(_DWORD *)(a1 + 72);
  *unint64_t v4 = 40;
  if (v7 > 0x7F)
  {
    v4[1] = v7 | 0x80;
    unsigned int v9 = v7 >> 7;
    if (v7 >> 14)
    {
      v4 += 3;
      do
      {
        *(v4 - 1) = v9 | 0x80;
        unsigned int v11 = v9 >> 7;
        ++v4;
        unsigned int v12 = v9 >> 14;
        v9 >>= 7;
      }
      while (v12);
      *(v4 - 1) = v11;
    }
    else
    {
      v4[2] = v9;
      v4 += 3;
    }
  }
  else
  {
    v4[1] = v7;
    v4 += 2;
  }
LABEL_39:
  uint64_t v19 = sub_19E3B6444(a1 + 16, 200, 0x20000000, v4, (uint64_t *)a3);
  uint64_t v20 = v19;
  uint64_t v21 = *(void *)(a1 + 8);
  if ((v21 & 1) == 0) {
    return v20;
  }
  unint64_t v23 = v21 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v23 + 31) < 0)
  {
    int v24 = *(void **)(v23 + 8);
    uint64_t v25 = *(void *)(v23 + 16);
  }
  else
  {
    int v24 = (void *)(v23 + 8);
    LODWORD(v25) = *(unsigned __int8 *)(v23 + 31);
  }
  if ((uint64_t)(*a3 - (void)v19) >= (int)v25)
  {
    uint64_t v26 = (int)v25;
    memcpy(v19, v24, (int)v25);
    v20 += v26;
    return v20;
  }
  return sub_19E3AEF5C((uint64_t *)a3, (char *)v24, v25, (unint64_t)v19);
}

char *sub_19E39E4E4(unint64_t *a1, int a2, const void **a3, char *a4)
{
  if (*((char *)a3 + 23) < 0)
  {
    int64_t v4 = (int64_t)a3[1];
    if (v4 > 127) {
      goto LABEL_24;
    }
  }
  else
  {
    int64_t v4 = *((unsigned __int8 *)a3 + 23);
  }
  unsigned int v5 = 8 * a2;
  uint64_t v6 = 1;
  uint64_t v7 = 2;
  uint64_t v8 = 3;
  uint64_t v9 = 4;
  if ((8 * a2) >> 28) {
    uint64_t v9 = 5;
  }
  if (v5 >= 0x200000) {
    uint64_t v8 = v9;
  }
  if (v5 >= 0x4000) {
    uint64_t v7 = v8;
  }
  if (v5 >= 0x80) {
    uint64_t v6 = v7;
  }
  if ((uint64_t)(*a1 + ~(unint64_t)&a4[v6] + 16) >= v4)
  {
    unsigned int v10 = v5 | 2;
    if ((v5 | 2) > 0x7F)
    {
      *a4 = v5 | 0x82;
      unsigned int v12 = v5 >> 7;
      if (v10 >> 14)
      {
        unsigned int v11 = a4 + 2;
        do
        {
          *(v11 - 1) = v12 | 0x80;
          unsigned int v13 = v12 >> 7;
          ++v11;
          unsigned int v14 = v12 >> 14;
          v12 >>= 7;
        }
        while (v14);
        *(v11 - 1) = v13;
      }
      else
      {
        a4[1] = v12;
        unsigned int v11 = a4 + 2;
      }
    }
    else
    {
      *a4 = v10;
      unsigned int v11 = a4 + 1;
    }
    *unsigned int v11 = v4;
    unsigned int v15 = v11 + 1;
    if (*((char *)a3 + 23) >= 0) {
      unsigned int v16 = a3;
    }
    else {
      unsigned int v16 = *a3;
    }
    memcpy(v15, v16, v4);
    return &v15[v4];
  }
LABEL_24:
  return sub_19E3AF1A4(a1, a2, (void **)a3, a4);
}

uint64_t sub_19E39E610(uint64_t a1)
{
  uint64_t result = sub_19E3B9178(a1 + 16);
  int v3 = *(_DWORD *)(a1 + 40);
  if ((v3 & 0x1F) == 0) {
    goto LABEL_8;
  }
  if (v3)
  {
    unint64_t v5 = *(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v6 = *(unsigned __int8 *)(v5 + 23);
    uint64_t v7 = *(void *)(v5 + 8);
    if ((v6 & 0x80u) == 0) {
      uint64_t v7 = v6;
    }
    result += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v3 & 2) == 0)
    {
LABEL_4:
      if ((v3 & 4) == 0) {
        goto LABEL_5;
      }
LABEL_16:
      result += ((9 * (__clz(*(_DWORD *)(a1 + 64) | 1) ^ 0x1F) + 73) >> 6) + 1;
      if ((v3 & 8) == 0)
      {
LABEL_6:
        if ((v3 & 0x10) == 0) {
          goto LABEL_8;
        }
        goto LABEL_7;
      }
      goto LABEL_17;
    }
  }
  else if ((v3 & 2) == 0)
  {
    goto LABEL_4;
  }
  unint64_t v8 = *(void *)(a1 + 56) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v9 = *(unsigned __int8 *)(v8 + 23);
  uint64_t v10 = *(void *)(v8 + 8);
  if ((v9 & 0x80u) == 0) {
    uint64_t v10 = v9;
  }
  result += v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v3 & 4) != 0) {
    goto LABEL_16;
  }
LABEL_5:
  if ((v3 & 8) == 0) {
    goto LABEL_6;
  }
LABEL_17:
  result += ((9 * (__clz(*(_DWORD *)(a1 + 68) | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v3 & 0x10) != 0) {
LABEL_7:
  }
    result += ((9 * (__clz(*(_DWORD *)(a1 + 72) | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_8:
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    unint64_t v11 = v4 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v11 + 31) < 0) {
      uint64_t v12 = *(void *)(v11 + 16);
    }
    else {
      uint64_t v12 = *(unsigned __int8 *)(v11 + 31);
    }
    result += v12;
  }
  *(_DWORD *)(a1 + 44) = result;
  return result;
}

void sub_19E39E784(uint64_t a1, void *lpsrc)
{
  if (!__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0B75B0, (const struct __class_type_info *)&unk_1EF0B6070, 0))sub_19E3A0D08(); {
  sub_19E39E80C(a1, (uint64_t)lpsrc);
  }
}

void sub_19E39E80C(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    sub_19E3AF8D4((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", 375);
    uint64_t v4 = sub_19E3AF8EC(v21, "CHECK failed: (&from) != (this): ");
    sub_19E3AFA28((uint64_t)&v20, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v21);
  }
  sub_19E3B3E1C(a1 + 16, a2 + 16);
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5)
  {
    unint64_t v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    uint64_t v8 = *(void *)(a1 + 8);
    if (v8) {
      uint64_t v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      uint64_t v9 = (std::string *)sub_19E3A0504((unint64_t *)(a1 + 8));
    }
    int v10 = *(char *)(v6 + 31);
    if (v10 >= 0) {
      unint64_t v11 = (const std::string::value_type *)v7;
    }
    else {
      unint64_t v11 = *(const std::string::value_type **)(v6 + 8);
    }
    if (v10 >= 0) {
      std::string::size_type v12 = *(unsigned __int8 *)(v6 + 31);
    }
    else {
      std::string::size_type v12 = *(void *)(v6 + 16);
    }
    std::string::append(v9, v11, v12);
  }
  int v13 = *(_DWORD *)(a2 + 40);
  if ((v13 & 0x1F) != 0)
  {
    if (v13)
    {
      unsigned int v14 = (long long *)(*(void *)(a2 + 48) & 0xFFFFFFFFFFFFFFFELL);
      *(_DWORD *)(a1 + 40) |= 1u;
      uint64_t v15 = *(void *)(a1 + 8);
      unsigned int v16 = (void *)(v15 & 0xFFFFFFFFFFFFFFFELL);
      if (v15) {
        unsigned int v16 = (void *)*v16;
      }
      sub_19E3AE6F8((uint64_t *)(a1 + 48), v14, (uint64_t)v16);
      if ((v13 & 2) == 0)
      {
LABEL_16:
        if ((v13 & 4) == 0) {
          goto LABEL_17;
        }
        goto LABEL_28;
      }
    }
    else if ((v13 & 2) == 0)
    {
      goto LABEL_16;
    }
    unsigned int v17 = (long long *)(*(void *)(a2 + 56) & 0xFFFFFFFFFFFFFFFELL);
    *(_DWORD *)(a1 + 40) |= 2u;
    uint64_t v18 = *(void *)(a1 + 8);
    uint64_t v19 = (void *)(v18 & 0xFFFFFFFFFFFFFFFELL);
    if (v18) {
      uint64_t v19 = (void *)*v19;
    }
    sub_19E3AE6F8((uint64_t *)(a1 + 56), v17, (uint64_t)v19);
    if ((v13 & 4) == 0)
    {
LABEL_17:
      if ((v13 & 8) == 0) {
        goto LABEL_18;
      }
      goto LABEL_29;
    }
LABEL_28:
    *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
    if ((v13 & 8) == 0)
    {
LABEL_18:
      if ((v13 & 0x10) == 0)
      {
LABEL_20:
        *(_DWORD *)(a1 + 40) |= v13;
        return;
      }
LABEL_19:
      *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
      goto LABEL_20;
    }
LABEL_29:
    *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
    if ((v13 & 0x10) == 0) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
}

void sub_19E39E990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E39E9A8(uint64_t a1)
{
  return sub_19E3B52AC(a1 + 16);
}

uint64_t *sub_19E39E9B0(uint64_t a1, uint64_t a2)
{
  sub_19E3B5094(a1 + 16, a2 + 16);
  uint64_t v5 = (uint64_t *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a2 + 8);
  if (v4)
  {
    if ((v6 & 1) == 0)
    {
      unint64_t v10 = sub_19E3A0504((unint64_t *)(a2 + 8));
      uint64_t v4 = *v5;
      if (*v5) {
        goto LABEL_6;
      }
LABEL_21:
      unint64_t v11 = sub_19E3A0504((unint64_t *)(a1 + 8));
      goto LABEL_7;
    }
  }
  else if ((v6 & 1) == 0)
  {
    uint64_t v7 = 0;
    int v8 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 4sub_19E392864(&a9, 0) = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 4sub_19E392864(&a9, 0) = v8;
    uint64_t v9 = (uint64_t *)(v4 & 0xFFFFFFFFFFFFFFFELL);
    goto LABEL_9;
  }
  unint64_t v10 = (v6 & 0xFFFFFFFFFFFFFFFELL) + 8;
  if ((v4 & 1) == 0) {
    goto LABEL_21;
  }
LABEL_6:
  unint64_t v11 = (v4 & 0xFFFFFFFFFFFFFFFELL) + 8;
LABEL_7:
  uint64_t v12 = *(void *)(v11 + 16);
  long long v13 = *(_OWORD *)v11;
  uint64_t v14 = *(void *)(v10 + 16);
  *(_OWORD *)unint64_t v11 = *(_OWORD *)v10;
  *(void *)(v11 + 16) = v14;
  *(_OWORD *)unint64_t v10 = v13;
  *(void *)(v10 + 16) = v12;
  uint64_t v15 = *(void *)(a1 + 8);
  LODWORD(v14) = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(a1 + 4sub_19E392864(&a9, 0) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 4sub_19E392864(&a9, 0) = v14;
  uint64_t v9 = (uint64_t *)(v15 & 0xFFFFFFFFFFFFFFFELL);
  if (v15)
  {
    uint64_t v16 = *v9;
    uint64_t v7 = 1;
    goto LABEL_10;
  }
  uint64_t v7 = 0;
LABEL_9:
  uint64_t v16 = (uint64_t)v9;
LABEL_10:
  if (*(uint64_t **)(a1 + 48) != &qword_1E945A358 || *(uint64_t **)(a2 + 48) != &qword_1E945A358)
  {
    unsigned int v17 = sub_19E3AE730((uint64_t *)(a1 + 48), v16);
    uint64_t v18 = sub_19E3AE730((uint64_t *)(a2 + 48), v16);
    uint64_t v19 = v17[2];
    long long v20 = *(_OWORD *)v17;
    uint64_t v21 = v18[2];
    *(_OWORD *)unsigned int v17 = *(_OWORD *)v18;
    void v17[2] = v21;
    *(_OWORD *)uint64_t v18 = v20;
    void v18[2] = v19;
    uint64_t v7 = *v5 & 1;
    uint64_t v9 = (uint64_t *)(*v5 & 0xFFFFFFFFFFFFFFFELL);
  }
  uint64_t result = (uint64_t *)(a1 + 56);
  if (v7) {
    uint64_t v9 = (uint64_t *)*v9;
  }
  if ((uint64_t *)*result != &qword_1E945A358 || *(uint64_t **)(a2 + 56) != &qword_1E945A358)
  {
    unint64_t v23 = sub_19E3AE730(result, (uint64_t)v9);
    uint64_t result = sub_19E3AE730((uint64_t *)(a2 + 56), (uint64_t)v9);
    uint64_t v24 = v23[2];
    long long v25 = *(_OWORD *)v23;
    uint64_t v26 = result[2];
    *(_OWORD *)unint64_t v23 = *(_OWORD *)result;
    v23[2] = v26;
    *(_OWORD *)uint64_t result = v25;
    result[2] = v24;
  }
  uint64_t v27 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 64) = v27;
  LODWORD(v27) = *(_DWORD *)(a1 + 72);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a2 + 72) = v27;
  return result;
}

void *sub_19E39EBA8@<X0>(void *a1@<X8>)
{
  return sub_19E382340(a1, "sentencepiece.SentencePieceText.SentencePiece");
}

uint64_t sub_19E39EBB8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1EF0B8B70;
  *(void *)(a1 + 8) = a2;
  sub_19E3AFEF4(a1 + 16, a2);
  *(void *)(a1 + 48) = a2;
  *(void *)(a1 + 4sub_19E392864(&a9, 0) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  if (atomic_load_explicit(dword_1EC009058, memory_order_acquire)) {
    sub_19E3BB484(dword_1EC009058);
  }
  *(void *)(a1 + 72) = &qword_1E945A358;
  *(_DWORD *)(a1 + 8sub_19E392864(&a9, 0) = 0;
  return a1;
}

void sub_19E39EC50(_Unwind_Exception *a1)
{
  sub_19E3A0740(v2);
  sub_19E3AFFD4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19E39EC70(uint64_t a1)
{
  return a1;
}

uint64_t sub_19E39ECB4(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 8);
  int v3 = (void *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) == 0)
  {
    if (!v3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (*v3)
  {
LABEL_3:
    sub_19E3AF8D4((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", 486);
    uint64_t v4 = sub_19E3AF8EC(v10, "CHECK failed: GetArena() == nullptr: ");
    sub_19E3AFA28((uint64_t)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    uint64_t result = sub_19E3AFA30((uint64_t)v10);
  }
LABEL_4:
  uint64_t v6 = *(uint64_t **)(v1 + 72);
  uint64_t v5 = (uint64_t *)(v1 + 72);
  if (v6 != &qword_1E945A358)
  {
    uint64_t v7 = sub_19E3A02F0(v5);
    uint64_t v8 = v7;
    if (*(char *)(v7 + 23) < 0) {
      operator delete(*(void **)v7);
    }
    return MEMORY[0x19F3BDCF0](v8, 0x1012C40EC159624);
  }
  return result;
}

void sub_19E39ED7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19E39ED98(uint64_t a1)
{
  sub_19E39EC70(a1);
  JUMPOUT(0x19F3BDCF0);
}

void *sub_19E39EDD0()
{
  if (atomic_load_explicit(dword_1EC009058, memory_order_acquire)) {
    sub_19E3BB484(dword_1EC009058);
  }
  return &unk_1EC0090D8;
}

unsigned __int8 *sub_19E39EE0C(uint64_t a1)
{
  sub_19E3B3D7C((unsigned __int8 *)(a1 + 16));
  uint64_t result = sub_19E3A05E0((unsigned __int8 *)(a1 + 48));
  if (*(unsigned char *)(a1 + 40))
  {
    unint64_t v3 = *(void *)(a1 + 72) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v3 + 23) < 0)
    {
      **(unsigned char **)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
    }
    else
    {
      *(unsigned char *)unint64_t v3 = 0;
      *(unsigned char *)(v3 + 23) = 0;
    }
  }
  *(_DWORD *)(a1 + 8sub_19E392864(&a9, 0) = 0;
  *(_DWORD *)(a1 + 4sub_19E392864(&a9, 0) = 0;
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    unint64_t v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v5 + 31) < 0)
    {
      **(unsigned char **)(v5 + 8) = 0;
      *(void *)(v5 + 16) = 0;
    }
    else
    {
      *(unsigned char *)(v5 + 8) = 0;
      *(unsigned char *)(v5 + 31) = 0;
    }
  }
  return result;
}

uint64_t sub_19E39EEA0(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  *(void *)uint64_t v29 = a2;
  int v5 = 0;
  if ((sub_19E3A03C4((uint64_t)a3, (char **)v29, a3[11].i32[1]) & 1) == 0)
  {
    uint64_t v7 = (void *)(a1 + 8);
    while (1)
    {
      uint64_t v8 = (char *)(*(void *)v29 + 1);
      unsigned int v9 = **(unsigned char **)v29;
      if (((char)**(unsigned char **)v29 & 0x80000000) == 0) {
        goto LABEL_7;
      }
      unsigned int v10 = v9 + (*v8 << 7);
      unsigned int v9 = v10 - 128;
      if ((*v8 & 0x80000000) == 0) {
        break;
      }
      uint64_t v26 = sub_19E3BCF3C(*(uint64_t *)v29, v10 - 128);
      *(void *)uint64_t v29 = v26;
      if (!v26) {
        goto LABEL_48;
      }
      uint64_t v8 = (char *)v26;
      unsigned int v9 = v27;
LABEL_8:
      unsigned int v11 = v9 >> 3;
      if (v9 >> 3 == 3)
      {
        if (v9 == 29)
        {
          v5 |= 2u;
          *(_DWORD *)(a1 + 8sub_19E392864(&a9, 0) = *(_DWORD *)v8;
          *(void *)uint64_t v29 = v8 + 4;
          goto LABEL_44;
        }
        goto LABEL_14;
      }
      if (v11 == 2)
      {
        if (v9 == 18)
        {
          uint64_t v15 = v8 - 1;
          while (1)
          {
            uint64_t v16 = (unsigned __int8 *)(v15 + 1);
            *(void *)uint64_t v29 = v15 + 1;
            unsigned int v17 = *(int **)(a1 + 64);
            if (!v17) {
              break;
            }
            uint64_t v18 = *(int *)(a1 + 56);
            int v19 = *v17;
            if ((int)v18 >= *v17)
            {
              if (v19 == *(_DWORD *)(a1 + 60))
              {
LABEL_29:
                sub_19E3C232C(a1 + 48, v19 + 1);
                unsigned int v17 = *(int **)(a1 + 64);
                int v19 = *v17;
              }
              int *v17 = v19 + 1;
              uint64_t v20 = sub_19E3A0030(*(void *)(a1 + 48));
              uint64_t v21 = *(void *)(a1 + 64);
              uint64_t v22 = *(int *)(a1 + 56);
              *(_DWORD *)(a1 + 56) = v22 + 1;
              *(void *)(v21 + 8 * v22 + 8) = v20;
              uint64_t v16 = *(unsigned __int8 **)v29;
              goto LABEL_31;
            }
            *(_DWORD *)(a1 + 56) = v18 + 1;
            uint64_t v20 = *(void *)&v17[2 * v18 + 2];
LABEL_31:
            uint64_t v15 = (char *)sub_19E39F158(a3, v20, v16);
            *(void *)uint64_t v29 = v15;
            if (!v15) {
              goto LABEL_48;
            }
            if (*(void *)a3 <= (unint64_t)v15 || *v15 != 18) {
              goto LABEL_44;
            }
          }
          int v19 = *(_DWORD *)(a1 + 60);
          goto LABEL_29;
        }
LABEL_14:
        if (v9) {
          BOOL v13 = (v9 & 7) == 4;
        }
        else {
          BOOL v13 = 1;
        }
        if (v13)
        {
          a3[10].i32[0] = v9 - 1;
          goto LABEL_2;
        }
        if (v9 < 0x640)
        {
          if (*v7)
          {
            unsigned int v28 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
          }
          else
          {
            unsigned int v28 = (std::string *)sub_19E3A0504((unint64_t *)(a1 + 8));
            uint64_t v8 = *(char **)v29;
          }
          uint64_t v14 = sub_19E3BD4AC(v9, v28, v8, a3);
        }
        else
        {
          uint64_t v14 = sub_19E3B564C((uint64_t *)(a1 + 16), v9, (unsigned __int8 *)v8, (uint64_t)&unk_1EC0090D8, (unint64_t *)(a1 + 8), a3);
        }
        goto LABEL_43;
      }
      if (v11 != 1 || v9 != 10) {
        goto LABEL_14;
      }
      *(_DWORD *)(a1 + 40) |= 1u;
      uint64_t v23 = *(void *)(a1 + 8);
      uint64_t v24 = (void *)(v23 & 0xFFFFFFFFFFFFFFFELL);
      if (v23) {
        uint64_t v24 = (void *)*v24;
      }
      long long v25 = (std::string *)sub_19E3AE730((uint64_t *)(a1 + 72), (uint64_t)v24);
      uint64_t v14 = (void *)sub_19E3BCFF0(v25, *(char **)v29, (uint64_t)a3);
LABEL_43:
      *(void *)uint64_t v29 = v14;
      if (!v14)
      {
LABEL_48:
        *(void *)uint64_t v29 = 0;
        goto LABEL_2;
      }
LABEL_44:
      if (sub_19E3A03C4((uint64_t)a3, (char **)v29, a3[11].i32[1])) {
        goto LABEL_2;
      }
    }
    uint64_t v8 = (char *)(*(void *)v29 + 2);
LABEL_7:
    *(void *)uint64_t v29 = v8;
    goto LABEL_8;
  }
LABEL_2:
  *(_DWORD *)(a1 + 40) |= v5;
  return *(void *)v29;
}

uint64_t sub_19E39F158(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v6 = (char)*a3;
  unsigned int v7 = *a3;
  if (v6 < 0)
  {
    uint64_t result = sub_19E3BCF80((uint64_t)a3, v7);
    if (!result) {
      return result;
    }
    uint64_t v8 = result;
    unsigned int v7 = v10;
  }
  else
  {
    uint64_t v8 = (uint64_t)(a3 + 1);
  }
  int v11 = sub_19E3A0830((uint64_t)a1, v8, v7);
  int v12 = a1[11].i32[0];
  BOOL v13 = __OFSUB__(v12--, 1);
  a1[11].i32[0] = v12;
  if (v12 < 0 != v13) {
    return 0;
  }
  int v14 = v11;
  uint64_t result = sub_19E39DEE8(a2, v8, a1);
  if (!result) {
    return result;
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v15 = a1[3].i32[1] + v14;
  a1[3].i32[1] = v15;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v15 & (v15 >> 31)));
  return result;
}

char *sub_19E39F220(uint64_t a1, char *a2, unint64_t *a3)
{
  uint64_t v4 = a2;
  int v6 = *(_DWORD *)(a1 + 40);
  if (v6) {
    uint64_t v4 = sub_19E39E4E4(a3, 1, (const void **)(*(void *)(a1 + 72) & 0xFFFFFFFFFFFFFFFELL), a2);
  }
  int v7 = *(_DWORD *)(a1 + 56);
  if (v7)
  {
    for (int i = 0; i != v7; ++i)
    {
      if (*a3 <= (unint64_t)v4) {
        uint64_t v4 = sub_19E3AEE48((uint64_t)a3, v4);
      }
      uint64_t v9 = sub_19E3917CC(a1 + 48, i);
      *uint64_t v4 = 18;
      unsigned int v10 = *(_DWORD *)(v9 + 44);
      if (v10 > 0x7F)
      {
        v4[1] = v10 | 0x80;
        unsigned int v12 = v10 >> 7;
        if (v10 >> 14)
        {
          int v11 = v4 + 3;
          do
          {
            *(v11 - 1) = v12 | 0x80;
            unsigned int v13 = v12 >> 7;
            ++v11;
            unsigned int v14 = v12 >> 14;
            v12 >>= 7;
          }
          while (v14);
          *(v11 - 1) = v13;
        }
        else
        {
          v4[2] = v12;
          int v11 = v4 + 3;
        }
      }
      else
      {
        v4[1] = v10;
        int v11 = v4 + 2;
      }
      uint64_t v4 = sub_19E39E22C(v9, v11, a3);
    }
  }
  if ((v6 & 2) != 0)
  {
    if (*a3 <= (unint64_t)v4) {
      uint64_t v4 = sub_19E3AEE48((uint64_t)a3, v4);
    }
    int v15 = *(_DWORD *)(a1 + 80);
    *uint64_t v4 = 29;
    *(_DWORD *)(v4 + 1) = v15;
    v4 += 5;
  }
  uint64_t v16 = sub_19E3B6444(a1 + 16, 200, 0x20000000, v4, (uint64_t *)a3);
  unsigned int v17 = v16;
  uint64_t v18 = *(void *)(a1 + 8);
  if ((v18 & 1) == 0) {
    return v17;
  }
  unint64_t v20 = v18 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v20 + 31) < 0)
  {
    uint64_t v21 = *(void **)(v20 + 8);
    uint64_t v22 = *(void *)(v20 + 16);
  }
  else
  {
    uint64_t v21 = (void *)(v20 + 8);
    LODWORD(v22) = *(unsigned __int8 *)(v20 + 31);
  }
  if ((uint64_t)(*a3 - (void)v16) >= (int)v22)
  {
    uint64_t v23 = (int)v22;
    memcpy(v16, v21, (int)v22);
    v17 += v23;
    return v17;
  }
  return sub_19E3AEF5C((uint64_t *)a3, (char *)v21, v22, (unint64_t)v16);
}

uint64_t sub_19E39F414(uint64_t a1)
{
  uint64_t v2 = sub_19E3B9178(a1 + 16);
  uint64_t v3 = *(int *)(a1 + 56);
  uint64_t v4 = v2 + v3;
  uint64_t v5 = *(void *)(a1 + 64);
  if (v5) {
    int v6 = (uint64_t *)(v5 + 8);
  }
  else {
    int v6 = 0;
  }
  if (v3)
  {
    uint64_t v7 = 8 * v3;
    do
    {
      uint64_t v8 = *v6++;
      uint64_t v9 = sub_19E39E610(v8);
      v4 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6);
      v7 -= 8;
    }
    while (v7);
  }
  int v10 = *(_DWORD *)(a1 + 40);
  if ((v10 & 3) != 0)
  {
    if (v10)
    {
      unint64_t v11 = *(void *)(a1 + 72) & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v12 = *(unsigned __int8 *)(v11 + 23);
      uint64_t v13 = *(void *)(v11 + 8);
      if ((v12 & 0x80u) == 0) {
        uint64_t v13 = v12;
      }
      v4 += v13 + ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    if ((v10 & 2) != 0) {
      v4 += 5;
    }
  }
  uint64_t v14 = *(void *)(a1 + 8);
  if (v14)
  {
    unint64_t v16 = v14 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v16 + 31) < 0) {
      uint64_t v17 = *(void *)(v16 + 16);
    }
    else {
      uint64_t v17 = *(unsigned __int8 *)(v16 + 31);
    }
    v4 += v17;
  }
  *(_DWORD *)(a1 + 44) = v4;
  return v4;
}

void sub_19E39F520(uint64_t a1, void *lpsrc)
{
  if (!__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0B75B0, (const struct __class_type_info *)&unk_1EF0B5FA0, 0))sub_19E3A0D08(); {
  sub_19E39F5A8(a1, (uint64_t)lpsrc);
  }
}

void sub_19E39F5A8(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    sub_19E3AF8D4((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", 674);
    uint64_t v4 = sub_19E3AF8EC(v18, "CHECK failed: (&from) != (this): ");
    sub_19E3AFA28((uint64_t)&v17, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v18);
  }
  sub_19E3B3E1C(a1 + 16, a2 + 16);
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5)
  {
    unint64_t v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    uint64_t v8 = *(void *)(a1 + 8);
    if (v8) {
      uint64_t v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      uint64_t v9 = (std::string *)sub_19E3A0504((unint64_t *)(a1 + 8));
    }
    int v10 = *(char *)(v6 + 31);
    if (v10 >= 0) {
      unint64_t v11 = (const std::string::value_type *)v7;
    }
    else {
      unint64_t v11 = *(const std::string::value_type **)(v6 + 8);
    }
    if (v10 >= 0) {
      std::string::size_type v12 = *(unsigned __int8 *)(v6 + 31);
    }
    else {
      std::string::size_type v12 = *(void *)(v6 + 16);
    }
    std::string::append(v9, v11, v12);
  }
  sub_19E3A08EC(a1 + 48, a2 + 48);
  int v13 = *(_DWORD *)(a2 + 40);
  if ((v13 & 3) != 0)
  {
    if (v13)
    {
      uint64_t v14 = (long long *)(*(void *)(a2 + 72) & 0xFFFFFFFFFFFFFFFELL);
      *(_DWORD *)(a1 + 40) |= 1u;
      uint64_t v15 = *(void *)(a1 + 8);
      unint64_t v16 = (void *)(v15 & 0xFFFFFFFFFFFFFFFELL);
      if (v15) {
        unint64_t v16 = (void *)*v16;
      }
      sub_19E3AE6F8((uint64_t *)(a1 + 72), v14, (uint64_t)v16);
    }
    if ((v13 & 2) != 0) {
      *(_DWORD *)(a1 + 8sub_19E392864(&a9, 0) = *(_DWORD *)(a2 + 80);
    }
    *(_DWORD *)(a1 + 40) |= v13;
  }
}

void sub_19E39F6D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E39F6F0(uint64_t a1)
{
  uint64_t result = sub_19E3B52AC(a1 + 16);
  if (result)
  {
    return sub_19E39F73C(a1 + 48);
  }
  return result;
}

BOOL sub_19E39F73C(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 8);
  do
  {
    int v3 = v2;
    BOOL v4 = __OFSUB__(v2--, 1);
    if (v2 < 0 != v4) {
      break;
    }
    uint64_t v5 = sub_19E3917CC(a1, v2);
  }
  while ((sub_19E3B52AC(v5 + 16) & 1) != 0);
  return v3 < 1;
}

void *sub_19E39F794@<X0>(void *a1@<X8>)
{
  return sub_19E382340(a1, "sentencepiece.SentencePieceText");
}

uint64_t sub_19E39F7A4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1EF0B8D28;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 4sub_19E392864(&a9, 0) = 0;
  if (atomic_load_explicit(dword_1EC304EA0, memory_order_acquire)) {
    sub_19E3BB484(dword_1EC304EA0);
  }
  return a1;
}

void sub_19E39F814(_Unwind_Exception *a1)
{
  sub_19E3A0A9C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19E39F82C(uint64_t a1)
{
  int v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  BOOL v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if (v2)
  {
    if (!*v4) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (v4)
  {
LABEL_3:
    sub_19E3AF8D4((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", 755);
    uint64_t v5 = sub_19E3AF8EC(v8, "CHECK failed: GetArena() == nullptr: ");
    sub_19E3AFA28((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v8);
  }
LABEL_4:
  sub_19E39DD64(v3);
  sub_19E3A0A9C((uint64_t *)(a1 + 16));
  return a1;
}

void sub_19E39F8C4(void *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  sub_19E37B770(a1);
}

void sub_19E39F8E8(uint64_t a1)
{
  sub_19E39F82C(a1);
  JUMPOUT(0x19F3BDCF0);
}

unsigned __int8 *sub_19E39F920(uint64_t a1)
{
  uint64_t result = sub_19E3A0690((unsigned __int8 *)(a1 + 16));
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3)
  {
    unint64_t v4 = v3 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v4 + 31) < 0)
    {
      **(unsigned char **)(v4 + 8) = 0;
      *(void *)(v4 + 16) = 0;
    }
    else
    {
      *(unsigned char *)(v4 + 8) = 0;
      *(unsigned char *)(v4 + 31) = 0;
    }
  }
  return result;
}

char *sub_19E39F974(uint64_t a1, char *a2, int32x2_t *a3)
{
  uint64_t v22 = a2;
  if ((sub_19E3A03C4((uint64_t)a3, &v22, a3[11].i32[1]) & 1) == 0)
  {
    uint64_t v5 = (void *)(a1 + 8);
    while (1)
    {
      unint64_t v6 = v22 + 1;
      unsigned int v7 = *v22;
      if ((*v22 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      unsigned int v8 = v7 + (*v6 << 7);
      unsigned int v7 = v8 - 128;
      if ((*v6 & 0x80000000) == 0) {
        break;
      }
      int v19 = (char *)sub_19E3BCF3C((uint64_t)v22, v8 - 128);
      uint64_t v22 = v19;
      if (!v19) {
        return 0;
      }
      unint64_t v6 = v19;
      unsigned int v7 = v20;
LABEL_7:
      if (v7 == 10)
      {
        unint64_t v11 = v6 - 1;
        while (1)
        {
          std::string::size_type v12 = (unsigned __int8 *)(v11 + 1);
          uint64_t v22 = v11 + 1;
          int v13 = *(int **)(a1 + 32);
          if (!v13) {
            break;
          }
          uint64_t v14 = *(int *)(a1 + 24);
          int v15 = *v13;
          if ((int)v14 >= *v13)
          {
            if (v15 == *(_DWORD *)(a1 + 28))
            {
LABEL_22:
              sub_19E3C232C(a1 + 16, v15 + 1);
              int v13 = *(int **)(a1 + 32);
              int v15 = *v13;
            }
            *int v13 = v15 + 1;
            uint64_t v16 = sub_19E3A0100(*(void *)(a1 + 16));
            uint64_t v17 = *(void *)(a1 + 32);
            uint64_t v18 = *(int *)(a1 + 24);
            *(_DWORD *)(a1 + 24) = v18 + 1;
            *(void *)(v17 + 8 * v18 + 8) = v16;
            std::string::size_type v12 = (unsigned __int8 *)v22;
            goto LABEL_24;
          }
          *(_DWORD *)(a1 + 24) = v14 + 1;
          uint64_t v16 = *(void *)&v13[2 * v14 + 2];
LABEL_24:
          unint64_t v11 = (char *)sub_19E39FB54(a3, v16, v12);
          uint64_t v22 = v11;
          if (!v11) {
            return 0;
          }
          if (*(void *)a3 <= (unint64_t)v11 || *v11 != 10) {
            goto LABEL_27;
          }
        }
        int v15 = *(_DWORD *)(a1 + 28);
        goto LABEL_22;
      }
      if (v7) {
        BOOL v9 = (v7 & 7) == 4;
      }
      else {
        BOOL v9 = 1;
      }
      if (v9)
      {
        a3[10].i32[0] = v7 - 1;
        return v22;
      }
      if (*v5)
      {
        int v10 = (std::string *)((*v5 & 0xFFFFFFFFFFFFFFFELL) + 8);
      }
      else
      {
        int v10 = (std::string *)sub_19E3A0504((unint64_t *)(a1 + 8));
        unint64_t v6 = v22;
      }
      uint64_t v22 = (char *)sub_19E3BD4AC(v7, v10, v6, a3);
      if (!v22) {
        return 0;
      }
LABEL_27:
      if (sub_19E3A03C4((uint64_t)a3, &v22, a3[11].i32[1])) {
        return v22;
      }
    }
    unint64_t v6 = v22 + 2;
LABEL_6:
    uint64_t v22 = v6;
    goto LABEL_7;
  }
  return v22;
}

uint64_t sub_19E39FB54(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v6 = (char)*a3;
  unsigned int v7 = *a3;
  if (v6 < 0)
  {
    uint64_t result = sub_19E3BCF80((uint64_t)a3, v7);
    if (!result) {
      return result;
    }
    uint64_t v8 = result;
    unsigned int v7 = v10;
  }
  else
  {
    uint64_t v8 = (uint64_t)(a3 + 1);
  }
  int v11 = sub_19E3A0830((uint64_t)a1, v8, v7);
  int v12 = a1[11].i32[0];
  BOOL v13 = __OFSUB__(v12--, 1);
  a1[11].i32[0] = v12;
  if (v12 < 0 != v13) {
    return 0;
  }
  int v14 = v11;
  uint64_t result = sub_19E39EEA0(a2, v8, a1);
  if (!result) {
    return result;
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v15 = a1[3].i32[1] + v14;
  a1[3].i32[1] = v15;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v15 & (v15 >> 31)));
  return result;
}

char *sub_19E39FC1C(uint64_t a1, char *__dst, unint64_t *a3)
{
  int v6 = *(_DWORD *)(a1 + 24);
  if (v6)
  {
    for (int i = 0; i != v6; ++i)
    {
      if (*a3 <= (unint64_t)__dst) {
        long long __dst = sub_19E3AEE48((uint64_t)a3, __dst);
      }
      uint64_t v8 = sub_19E3918F0(a1 + 16, i);
      *long long __dst = 10;
      unsigned int v9 = *(_DWORD *)(v8 + 44);
      if (v9 > 0x7F)
      {
        __dst[1] = v9 | 0x80;
        unsigned int v11 = v9 >> 7;
        if (v9 >> 14)
        {
          unsigned int v10 = __dst + 3;
          do
          {
            *(v10 - 1) = v11 | 0x80;
            unsigned int v12 = v11 >> 7;
            ++v10;
            unsigned int v13 = v11 >> 14;
            v11 >>= 7;
          }
          while (v13);
          *(v10 - 1) = v12;
        }
        else
        {
          __dst[2] = v11;
          unsigned int v10 = __dst + 3;
        }
      }
      else
      {
        __dst[1] = v9;
        unsigned int v10 = __dst + 2;
      }
      long long __dst = sub_19E39F220(v8, v10, a3);
    }
  }
  uint64_t v14 = *(void *)(a1 + 8);
  if ((v14 & 1) == 0) {
    return __dst;
  }
  unint64_t v16 = v14 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v16 + 31) < 0)
  {
    uint64_t v17 = *(void **)(v16 + 8);
    uint64_t v18 = *(void *)(v16 + 16);
  }
  else
  {
    uint64_t v17 = (void *)(v16 + 8);
    LODWORD(v18) = *(unsigned __int8 *)(v16 + 31);
  }
  if ((uint64_t)(*a3 - (void)__dst) >= (int)v18)
  {
    uint64_t v19 = (int)v18;
    memcpy(__dst, v17, (int)v18);
    __dst += v19;
    return __dst;
  }
  return sub_19E3AEF5C((uint64_t *)a3, (char *)v17, v18, (unint64_t)__dst);
}

uint64_t sub_19E39FD98(uint64_t a1)
{
  uint64_t v2 = *(int *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3) {
    unint64_t v4 = (uint64_t *)(v3 + 8);
  }
  else {
    unint64_t v4 = 0;
  }
  if (v2)
  {
    uint64_t v5 = 8 * v2;
    do
    {
      uint64_t v6 = *v4++;
      uint64_t v7 = sub_19E39F414(v6);
      v2 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    uint64_t v2 = 0;
  }
  uint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    unint64_t v10 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v10 + 31) < 0) {
      uint64_t v11 = *(void *)(v10 + 16);
    }
    else {
      uint64_t v11 = *(unsigned __int8 *)(v10 + 31);
    }
    v2 += v11;
  }
  *(_DWORD *)(a1 + 4sub_19E392864(&a9, 0) = v2;
  return v2;
}

void sub_19E39FE44(uint64_t a1, void *lpsrc)
{
  if (!__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0B75B0, (const struct __class_type_info *)&unk_1EF0B5FF8, 0))sub_19E3A0D08(); {
  sub_19E39FECC(a1, (uint64_t)lpsrc);
  }
}

void sub_19E39FECC(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    sub_19E3AF8D4((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", 877);
    unint64_t v4 = sub_19E3AF8EC(v14, "CHECK failed: (&from) != (this): ");
    sub_19E3AFA28((uint64_t)&v13, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v14);
  }
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5)
  {
    unint64_t v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    uint64_t v8 = *(void *)(a1 + 8);
    if (v8) {
      unsigned int v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      unsigned int v9 = (std::string *)sub_19E3A0504((unint64_t *)(a1 + 8));
    }
    int v10 = *(char *)(v6 + 31);
    if (v10 >= 0) {
      uint64_t v11 = (const std::string::value_type *)v7;
    }
    else {
      uint64_t v11 = *(const std::string::value_type **)(v6 + 8);
    }
    if (v10 >= 0) {
      std::string::size_type v12 = *(unsigned __int8 *)(v6 + 31);
    }
    else {
      std::string::size_type v12 = *(void *)(v6 + 16);
    }
    std::string::append(v9, v11, v12);
  }
  sub_19E3A0B58(a1 + 16, a2 + 16);
}

void sub_19E39FF98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_19E39FFB0(uint64_t a1)
{
  return sub_19E39FFB8(a1 + 16);
}

BOOL sub_19E39FFB8(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 8);
  do
  {
    int v3 = v2;
    BOOL v4 = __OFSUB__(v2--, 1);
    if (v2 < 0 != v4) {
      break;
    }
    uint64_t v5 = sub_19E3918F0(a1, v2);
    if (!sub_19E3B52AC(v5 + 16)) {
      break;
    }
  }
  while (sub_19E39F73C(v5 + 48));
  return v3 < 1;
}

void *sub_19E3A0020@<X0>(void *a1@<X8>)
{
  return sub_19E382340(a1, "sentencepiece.NBestSentencePieceText");
}

uint64_t sub_19E3A0030(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  if (*(unsigned char *)(a1 + 24)) {
    (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(a1 + 32) + 32) + 40))(*(void *)(*(void *)(a1 + 32) + 32), &unk_1EF0B6070, 80);
  }
  uint64_t v2 = sub_19E3AE240(a1, 80);
  sub_19E39DB68(v2, a1);
  return v2;
}

void sub_19E3A00DC(_Unwind_Exception *a1)
{
  MEMORY[0x19F3BDCF0](v1, 0x10A1C40E4A317A1);
  _Unwind_Resume(a1);
}

uint64_t sub_19E3A0100(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  if (*(unsigned char *)(a1 + 24)) {
    (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(a1 + 32) + 32) + 40))(*(void *)(*(void *)(a1 + 32) + 32), &unk_1EF0B5FA0, 88);
  }
  uint64_t v2 = sub_19E3AE240(a1, 88);
  sub_19E39EBB8(v2, a1);
  return v2;
}

void sub_19E3A01AC(_Unwind_Exception *a1)
{
  MEMORY[0x19F3BDCF0](v1, 0x10A1C40431D3885);
  _Unwind_Resume(a1);
}

uint64_t sub_19E3A01D0(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  if (*(unsigned char *)(a1 + 24)) {
    (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(a1 + 32) + 32) + 40))(*(void *)(*(void *)(a1 + 32) + 32), &unk_1EF0B5FF8, 48);
  }
  uint64_t v2 = sub_19E3AE240(a1, 48);
  sub_19E39F7A4(v2, a1);
  return v2;
}

void sub_19E3A027C(_Unwind_Exception *a1)
{
  MEMORY[0x19F3BDCF0](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t sub_19E3A02A0()
{
  return sub_19E3A0030(0);
}

uint64_t sub_19E3A02A8(uint64_t a1, uint64_t a2)
{
  return sub_19E3A0030(a2);
}

uint64_t sub_19E3A02B0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

uint64_t sub_19E3A02B8()
{
  return 0;
}

uint64_t sub_19E3A02C0()
{
  return sub_19E3A0100(0);
}

uint64_t sub_19E3A02C8(uint64_t a1, uint64_t a2)
{
  return sub_19E3A0100(a2);
}

uint64_t sub_19E3A02D0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

uint64_t sub_19E3A02D8()
{
  return sub_19E3A01D0(0);
}

uint64_t sub_19E3A02E0(uint64_t a1, uint64_t a2)
{
  return sub_19E3A01D0(a2);
}

uint64_t sub_19E3A02E8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t sub_19E3A02F0(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result)
  {
    sub_19E3AF8D4((uint64_t)v6, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/arenastring.h", 363);
    int v3 = sub_19E3AF8EC(v6, "CHECK failed: !tagged_ptr_.IsTagged(): ");
    sub_19E3AFA28((uint64_t)&v5, (const char **)&v3->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v6);
    uint64_t result = *a1;
  }
  if (!result)
  {
    sub_19E3AF8D4((uint64_t)v6, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/arenastring.h", 364);
    BOOL v4 = sub_19E3AF8EC(v6, "CHECK failed: tagged_ptr_.UnsafeGet() != nullptr: ");
    sub_19E3AFA28((uint64_t)&v5, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v6);
    return *a1;
  }
  return result;
}

void sub_19E3A03A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E3A03C4(uint64_t a1, char **a2, int a3)
{
  unint64_t v6 = *a2;
  if (!*a2)
  {
    sub_19E3AF8D4((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 209);
    unint64_t v7 = sub_19E3AF8EC(v13, "CHECK failed: *ptr: ");
    sub_19E3AFA28((uint64_t)&v12, (const char **)&v7->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v13);
    unint64_t v6 = *a2;
  }
  if ((unint64_t)v6 < *(void *)a1) {
    return 0;
  }
  signed int v9 = v6 - *(_DWORD *)(a1 + 8);
  if (v9 >= 17)
  {
    sub_19E3AF8D4((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 212);
    int v10 = sub_19E3AF8EC(v13, "CHECK failed: (overrun) <= (kSlopBytes): ");
    sub_19E3AFA28((uint64_t)&v12, (const char **)&v10->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v13);
  }
  if (*(_DWORD *)(a1 + 28) == v9)
  {
    if (v9 >= 1 && !*(void *)(a1 + 16)) {
      *a2 = 0;
    }
    return 1;
  }
  else
  {
    *a2 = sub_19E3BC624(a1, v9, a3);
    return v11 & 1;
  }
}

void sub_19E3A04E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_19E3A0504(unint64_t *a1)
{
  unint64_t v2 = *a1 & 0xFFFFFFFFFFFFFFFELL;
  if ((*a1 & 1) == 0)
  {
    if (v2) {
      goto LABEL_3;
    }
LABEL_7:
    operator new();
  }
  unint64_t v2 = *(void *)v2;
  if (!v2) {
    goto LABEL_7;
  }
LABEL_3:
  if (*(unsigned char *)(v2 + 24)) {
    (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v2 + 32) + 32) + 40))(*(void *)(*(void *)(v2 + 32) + 32), &unk_1EF0B76C8, 32);
  }
  unint64_t v3 = sub_19E3ADF44((void *)v2, 0x20uLL, (uint64_t)sub_19E3A05CC);
  *(_OWORD *)unint64_t v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *a1 = v3 | 1;
  *(void *)unint64_t v3 = v2;
  return v3 + 8;
}

void sub_19E3A05CC(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

unsigned __int8 *sub_19E3A05E0(unsigned __int8 *result)
{
  uint64_t v1 = *((unsigned int *)result + 2);
  if ((v1 & 0x80000000) != 0)
  {
    sub_19E3AF8D4((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1780);
    char v5 = sub_19E3AF8EC(v7, "CHECK failed: (n) >= (0): ");
    sub_19E3AFA28((uint64_t)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    return (unsigned __int8 *)sub_19E3AFA30((uint64_t)v7);
  }
  else if (v1)
  {
    unint64_t v2 = result;
    unint64_t v3 = (uint64_t *)(*((void *)result + 2) + 8);
    do
    {
      uint64_t v4 = *v3++;
      uint64_t result = sub_19E39DE18(v4);
      --v1;
    }
    while (v1);
    *((_DWORD *)v2 + 2) = 0;
  }
  return result;
}

void sub_19E3A0678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_19E3A0690(unsigned __int8 *result)
{
  uint64_t v1 = *((unsigned int *)result + 2);
  if ((v1 & 0x80000000) != 0)
  {
    sub_19E3AF8D4((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1780);
    char v5 = sub_19E3AF8EC(v7, "CHECK failed: (n) >= (0): ");
    sub_19E3AFA28((uint64_t)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    return (unsigned __int8 *)sub_19E3AFA30((uint64_t)v7);
  }
  else if (v1)
  {
    unint64_t v2 = result;
    unint64_t v3 = (uint64_t *)(*((void *)result + 2) + 8);
    do
    {
      uint64_t v4 = *v3++;
      uint64_t result = sub_19E39EE0C(v4);
      --v1;
    }
    while (v1);
    *((_DWORD *)v2 + 2) = 0;
  }
  return result;
}

void sub_19E3A0728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_19E3A0740(uint64_t *a1)
{
  sub_19E3A077C(a1);
  return sub_19E3A07FC(a1);
}

void sub_19E3A077C(void *a1)
{
  unint64_t v2 = (uint64_t *)a1[2];
  if (v2 && !*a1)
  {
    unint64_t v3 = v2 + 1;
    uint64_t v4 = *(unsigned int *)v2;
    if ((int)v4 >= 1)
    {
      do
      {
        if (*v3)
        {
          uint64_t v5 = sub_19E39DC00(*v3);
          MEMORY[0x19F3BDCF0](v5, 0x10A1C40E4A317A1);
        }
        ++v3;
        --v4;
      }
      while (v4);
      unint64_t v2 = (uint64_t *)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

uint64_t *sub_19E3A07FC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    sub_19E3ADC28(v2);
  }
  return a1;
}

uint64_t sub_19E3A0830(uint64_t a1, int a2, unsigned int a3)
{
  if (a3 >= 0x7FFFFFF0)
  {
    sub_19E3AF8D4((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 128);
    char v6 = sub_19E3AF8EC(v11, "CHECK failed: limit >= 0 && limit <= INT_MAX - kSlopBytes: ");
    sub_19E3AFA28((uint64_t)&v10, (const char **)&v6->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v11);
  }
  uint64_t v7 = *(void *)(a1 + 8);
  int v8 = a2 - v7 + a3;
  *(void *)a1 = v7 + (v8 & (v8 >> 31));
  LODWORD(v7) = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 28) = v8;
  return (v7 - v8);
}

void sub_19E3A08D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19E3A08EC(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    sub_19E3AF8D4((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1799);
    uint64_t v4 = sub_19E3AF8EC(v11, "CHECK failed: (&other) != (this): ");
    sub_19E3AFA28((uint64_t)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v11);
  }
  unsigned int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    char v6 = (uint64_t *)(*(void *)(a2 + 16) + 8);
    uint64_t v7 = (uint64_t *)sub_19E3C2340((uint64_t *)a1, v5);
    sub_19E3A09DC((uint64_t *)a1, v7, v6, v5, **(_DWORD **)(a1 + 16) - *(_DWORD *)(a1 + 8));
    signed int v8 = *(_DWORD *)(a1 + 8) + v5;
    *(_DWORD *)(a1 + 8) = v8;
    signed int v9 = *(signed int **)(a1 + 16);
    if (*v9 < v8) {
      *signed int v9 = v8;
    }
  }
}

void sub_19E3A09C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19E3A09DC(uint64_t *a1, uint64_t *a2, uint64_t *a3, unsigned int a4, unsigned int a5)
{
  if ((int)a5 >= (int)a4) {
    uint64_t v10 = a4;
  }
  else {
    uint64_t v10 = a5;
  }
  if ((int)v10 >= 1)
  {
    char v11 = a3;
    char v12 = a2;
    do
    {
      uint64_t v14 = *v11++;
      uint64_t v13 = v14;
      uint64_t v15 = *v12++;
      sub_19E3A0A8C(v13, v15);
      --v10;
    }
    while (v10);
  }
  BOOL v16 = __OFSUB__(a4, a5);
  int v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    uint64_t v18 = *a1;
    uint64_t v19 = &a3[a5];
    unsigned int v20 = &a2[a5];
    do
    {
      uint64_t v21 = *v19++;
      uint64_t v22 = sub_19E3A0030(v18);
      sub_19E3A0A8C(v21, v22);
      *v20++ = v22;
      --v17;
    }
    while (v17);
  }
}

void sub_19E3A0A8C(uint64_t a1, uint64_t a2)
{
}

uint64_t *sub_19E3A0A9C(uint64_t *a1)
{
  sub_19E3A0AD8(a1);
  return sub_19E3A07FC(a1);
}

void sub_19E3A0AD8(void *a1)
{
  uint64_t v2 = (uint64_t *)a1[2];
  if (v2 && !*a1)
  {
    unint64_t v3 = v2 + 1;
    uint64_t v4 = *(unsigned int *)v2;
    if ((int)v4 >= 1)
    {
      do
      {
        if (*v3)
        {
          uint64_t v5 = sub_19E39EC70(*v3);
          MEMORY[0x19F3BDCF0](v5, 0x10A1C40431D3885);
        }
        ++v3;
        --v4;
      }
      while (v4);
      uint64_t v2 = (uint64_t *)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

void sub_19E3A0B58(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    sub_19E3AF8D4((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1799);
    uint64_t v4 = sub_19E3AF8EC(v11, "CHECK failed: (&other) != (this): ");
    sub_19E3AFA28((uint64_t)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v11);
  }
  unsigned int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    char v6 = (uint64_t *)(*(void *)(a2 + 16) + 8);
    uint64_t v7 = (uint64_t *)sub_19E3C2340((uint64_t *)a1, v5);
    sub_19E3A0C48((uint64_t *)a1, v7, v6, v5, **(_DWORD **)(a1 + 16) - *(_DWORD *)(a1 + 8));
    signed int v8 = *(_DWORD *)(a1 + 8) + v5;
    *(_DWORD *)(a1 + 8) = v8;
    signed int v9 = *(signed int **)(a1 + 16);
    if (*v9 < v8) {
      *signed int v9 = v8;
    }
  }
}

void sub_19E3A0C30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19E3A0C48(uint64_t *a1, uint64_t *a2, uint64_t *a3, unsigned int a4, unsigned int a5)
{
  if ((int)a5 >= (int)a4) {
    uint64_t v10 = a4;
  }
  else {
    uint64_t v10 = a5;
  }
  if ((int)v10 >= 1)
  {
    char v11 = a3;
    char v12 = a2;
    do
    {
      uint64_t v14 = *v11++;
      uint64_t v13 = v14;
      uint64_t v15 = *v12++;
      sub_19E3A0CF8(v13, v15);
      --v10;
    }
    while (v10);
  }
  BOOL v16 = __OFSUB__(a4, a5);
  int v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    uint64_t v18 = *a1;
    uint64_t v19 = &a3[a5];
    unsigned int v20 = &a2[a5];
    do
    {
      uint64_t v21 = *v19++;
      uint64_t v22 = sub_19E3A0100(v18);
      sub_19E3A0CF8(v21, v22);
      *v20++ = v22;
      --v17;
    }
    while (v17);
  }
}

void sub_19E3A0CF8(uint64_t a1, uint64_t a2)
{
}

void sub_19E3A0D08()
{
  __assert_rtn("down_cast", "casts.h", 94, "f == nullptr || dynamic_cast<To>(f) != nullptr");
}

void sub_19E3A0D34()
{
  sub_19E3AF568(3014000, 3014000, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc");
  sub_19E3A76E8((uint64_t)&unk_1E945A370, 0);
  sub_19E3BBE30((uint64_t)sub_19E3BB214, (uint64_t)&unk_1E945A370);
}

void sub_19E3A0DA4()
{
  sub_19E3AF568(3014000, 3014000, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc");
  sub_19E3A6D58(qword_1E945A580, 0);
  sub_19E3BBE30((uint64_t)sub_19E3BB214, (uint64_t)qword_1E945A580);
}

void sub_19E3A0E14()
{
  sub_19E3AF568(3014000, 3014000, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc");
  sub_19E3A4E8C((uint64_t)&unk_1E945A528, 0);
  sub_19E3BBE30((uint64_t)sub_19E3BB214, (uint64_t)&unk_1E945A528);
}

void sub_19E3A0E84()
{
  sub_19E3AF568(3014000, 3014000, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc");
  sub_19E3A64A4((uint64_t)&unk_1E945A5C0, 0);
  sub_19E3BBE30((uint64_t)sub_19E3BB214, (uint64_t)&unk_1E945A5C0);
}

void sub_19E3A0EF4()
{
  sub_19E3AF568(3014000, 3014000, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc");
  sub_19E3A5CA4(qword_1E945A608, 0);
  sub_19E3BBE30((uint64_t)sub_19E3BB214, (uint64_t)qword_1E945A608);
}

void sub_19E3A0F64()
{
  sub_19E3AF568(3014000, 3014000, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc");
  sub_19E3A0FE4((uint64_t)&unk_1E945A3E0, 0);
  sub_19E3BBE30((uint64_t)sub_19E3BB214, (uint64_t)&unk_1E945A3E0);
}

BOOL sub_19E3A0FD4(int a1)
{
  return (a1 - 1) < 6;
}

uint64_t sub_19E3A0FE4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1EF0B88A0;
  *(void *)(a1 + 8) = a2;
  sub_19E3AFEF4(a1 + 16, a2);
  *(void *)(a1 + 128) = a2;
  *(void *)(a1 + 4sub_19E392864(&a9, 0) = 0;
  *(void *)(a1 + 56) = a2;
  *(_DWORD *)(a1 + 48) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 8sub_19E392864(&a9, 0) = a2;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = a2;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 12sub_19E392864(&a9, 0) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  if (atomic_load_explicit(dword_1EC304FC0, memory_order_acquire)) {
    sub_19E3BB484(dword_1EC304FC0);
  }
  *(void *)(a1 + 152) = &qword_1E945A358;
  *(void *)(a1 + 16sub_19E392864(&a9, 0) = &qword_1E945A358;
  *(void *)(a1 + 168) = &qword_1E945A358;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = &qword_1E945A358;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 24sub_19E392864(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(void *)(a1 + 272) = 0x1F4000000001;
  *(void *)(a1 + 28sub_19E392864(&a9, 0) = 0xF42403F7FDF3BLL;
  *(_DWORD *)(a1 + 288) = 1061158912;
  *(_OWORD *)(a1 + 292) = xmmword_19E5725A0;
  *(_DWORD *)(a1 + 308) = 16843009;
  *(_WORD *)(a1 + 312) = 257;
  *(_DWORD *)(a1 + 316) = 1;
  *(void *)(a1 + 32sub_19E392864(&a9, 0) = 0xFFFFFFFF00000002;
  return a1;
}

void sub_19E3A1120(_Unwind_Exception *a1)
{
  sub_19E3C2328(v3);
  sub_19E3C2328(v5);
  sub_19E3C2328(v4);
  sub_19E3C2328(v2);
  sub_19E3AFFD4(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_19E3A1154(uint64_t *a1)
{
  return a1;
}

uint64_t *sub_19E3A11B0(uint64_t *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = (void *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) == 0)
  {
    if (!v3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (*v3)
  {
LABEL_3:
    sub_19E3AF8D4((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 519);
    uint64_t v4 = sub_19E3AF8EC(v27, "CHECK failed: GetArena() == nullptr: ");
    sub_19E3AFA28((uint64_t)&v26, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v27);
  }
LABEL_4:
  if ((uint64_t *)a1[19] != &qword_1E945A358)
  {
    uint64_t v5 = sub_19E3A02F0(a1 + 19);
    uint64_t v6 = v5;
    if (*(char *)(v5 + 23) < 0) {
      operator delete(*(void **)v5);
    }
    MEMORY[0x19F3BDCF0](v6, 0x1012C40EC159624);
  }
  if ((uint64_t *)a1[20] != &qword_1E945A358)
  {
    uint64_t v7 = sub_19E3A02F0(a1 + 20);
    uint64_t v8 = v7;
    if (*(char *)(v7 + 23) < 0) {
      operator delete(*(void **)v7);
    }
    MEMORY[0x19F3BDCF0](v8, 0x1012C40EC159624);
  }
  if ((uint64_t *)a1[21] != &qword_1E945A358)
  {
    uint64_t v9 = sub_19E3A02F0(a1 + 21);
    uint64_t v10 = v9;
    if (*(char *)(v9 + 23) < 0) {
      operator delete(*(void **)v9);
    }
    MEMORY[0x19F3BDCF0](v10, 0x1012C40EC159624);
  }
  if (a1[22])
  {
    uint64_t v11 = sub_19E3A02F0(a1 + 22);
    uint64_t v12 = v11;
    if (*(char *)(v11 + 23) < 0) {
      operator delete(*(void **)v11);
    }
    MEMORY[0x19F3BDCF0](v12, 0x1012C40EC159624);
  }
  if (a1[23])
  {
    uint64_t v13 = sub_19E3A02F0(a1 + 23);
    uint64_t v14 = v13;
    if (*(char *)(v13 + 23) < 0) {
      operator delete(*(void **)v13);
    }
    MEMORY[0x19F3BDCF0](v14, 0x1012C40EC159624);
  }
  if (a1[24])
  {
    uint64_t v15 = sub_19E3A02F0(a1 + 24);
    uint64_t v16 = v15;
    if (*(char *)(v15 + 23) < 0) {
      operator delete(*(void **)v15);
    }
    MEMORY[0x19F3BDCF0](v16, 0x1012C40EC159624);
  }
  if (a1[25])
  {
    uint64_t v17 = sub_19E3A02F0(a1 + 25);
    uint64_t v18 = v17;
    if (*(char *)(v17 + 23) < 0) {
      operator delete(*(void **)v17);
    }
    MEMORY[0x19F3BDCF0](v18, 0x1012C40EC159624);
  }
  uint64_t result = a1 + 26;
  if (a1[26])
  {
    uint64_t v20 = sub_19E3A02F0(result);
    uint64_t v21 = v20;
    if (*(char *)(v20 + 23) < 0) {
      operator delete(*(void **)v20);
    }
    uint64_t result = (uint64_t *)MEMORY[0x19F3BDCF0](v21, 0x1012C40EC159624);
  }
  uint64_t v23 = (uint64_t *)a1[27];
  uint64_t v22 = a1 + 27;
  if (v23 != &qword_1E945A358)
  {
    uint64_t v24 = sub_19E3A02F0(v22);
    uint64_t v25 = v24;
    if (*(char *)(v24 + 23) < 0) {
      operator delete(*(void **)v24);
    }
    return (uint64_t *)MEMORY[0x19F3BDCF0](v25, 0x1012C40EC159624);
  }
  return result;
}

void sub_19E3A146C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19E3A1488(uint64_t *a1)
{
  sub_19E3A1154(a1);
  JUMPOUT(0x19F3BDCF0);
}

uint64_t sub_19E3A14C0(uint64_t a1)
{
  sub_19E3B3D7C((unsigned __int8 *)(a1 + 16));
  sub_19E3A9BF0(a1 + 56);
  sub_19E3A9BF0(a1 + 80);
  sub_19E3A9BF0(a1 + 104);
  uint64_t result = sub_19E3A9BF0(a1 + 128);
  unsigned int v3 = *(_DWORD *)(a1 + 40);
  if (!(_BYTE)v3) {
    goto LABEL_10;
  }
  if (v3)
  {
    unint64_t v4 = *(void *)(a1 + 152) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v4 + 23) < 0)
    {
      **(unsigned char **)unint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
      if ((v3 & 2) != 0) {
        goto LABEL_16;
      }
    }
    else
    {
      *(unsigned char *)unint64_t v4 = 0;
      *(unsigned char *)(v4 + 23) = 0;
      if ((v3 & 2) != 0) {
        goto LABEL_16;
      }
    }
LABEL_4:
    if ((v3 & 4) == 0) {
      goto LABEL_5;
    }
LABEL_20:
    unint64_t v6 = *(void *)(a1 + 168) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v6 + 23) < 0)
    {
      **(unsigned char **)unint64_t v6 = 0;
      *(void *)(v6 + 8) = 0;
      if ((v3 & 8) != 0) {
        goto LABEL_24;
      }
    }
    else
    {
      *(unsigned char *)unint64_t v6 = 0;
      *(unsigned char *)(v6 + 23) = 0;
      if ((v3 & 8) != 0) {
        goto LABEL_24;
      }
    }
LABEL_6:
    if ((v3 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_25;
  }
  if ((v3 & 2) == 0) {
    goto LABEL_4;
  }
LABEL_16:
  unint64_t v5 = *(void *)(a1 + 160) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v5 + 23) < 0)
  {
    **(unsigned char **)unint64_t v5 = 0;
    *(void *)(v5 + 8) = 0;
    if ((v3 & 4) != 0) {
      goto LABEL_20;
    }
  }
  else
  {
    *(unsigned char *)unint64_t v5 = 0;
    *(unsigned char *)(v5 + 23) = 0;
    if ((v3 & 4) != 0) {
      goto LABEL_20;
    }
  }
LABEL_5:
  if ((v3 & 8) == 0) {
    goto LABEL_6;
  }
LABEL_24:
  uint64_t result = (uint64_t)sub_19E3AEA24((std::string *)(a1 + 176), &off_1E9459528);
  if ((v3 & 0x10) == 0)
  {
LABEL_7:
    if ((v3 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_26;
  }
LABEL_25:
  uint64_t result = (uint64_t)sub_19E3AEA24((std::string *)(a1 + 184), &off_1E94594A8);
  if ((v3 & 0x20) == 0)
  {
LABEL_8:
    if ((v3 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_27;
  }
LABEL_26:
  uint64_t result = (uint64_t)sub_19E3AEA24((std::string *)(a1 + 192), &off_1E94594C8);
  if ((v3 & 0x40) != 0)
  {
LABEL_27:
    uint64_t result = (uint64_t)sub_19E3AEA24((std::string *)(a1 + 200), &off_1E94594E8);
    if ((v3 & 0x80) != 0) {
      goto LABEL_28;
    }
LABEL_10:
    if ((v3 & 0x100) == 0) {
      goto LABEL_32;
    }
    goto LABEL_29;
  }
LABEL_9:
  if ((v3 & 0x80) == 0) {
    goto LABEL_10;
  }
LABEL_28:
  uint64_t result = (uint64_t)sub_19E3AEA24((std::string *)(a1 + 208), &off_1E9459508);
  if ((v3 & 0x100) == 0) {
    goto LABEL_32;
  }
LABEL_29:
  unint64_t v7 = *(void *)(a1 + 216) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v7 + 23) < 0)
  {
    **(unsigned char **)unint64_t v7 = 0;
    *(void *)(v7 + 8) = 0;
  }
  else
  {
    *(unsigned char *)unint64_t v7 = 0;
    *(unsigned char *)(v7 + 23) = 0;
  }
LABEL_32:
  if ((v3 & 0xFE00) != 0)
  {
    *(void *)(a1 + 224) = 0;
    *(void *)(a1 + 232) = 0;
    *(void *)(a1 + 239) = 0;
  }
  if ((v3 & 0xFF0000) != 0)
  {
    *(void *)(a1 + 247) = 0;
    *(unsigned char *)(a1 + 271) = 0;
    *(void *)(a1 + 255) = 0;
    *(void *)(a1 + 263) = 0;
    *(_DWORD *)(a1 + 272) = 1;
  }
  if (HIBYTE(v3))
  {
    *(void *)(a1 + 276) = 0x3F7FDF3B00001F40;
    *(void *)(a1 + 284) = 0x3F400000000F4240;
    *(_OWORD *)(a1 + 292) = xmmword_19E5725A0;
  }
  if (*(unsigned char *)(a1 + 44))
  {
    *(_WORD *)(a1 + 312) = 257;
    *(_DWORD *)(a1 + 308) = 16843009;
    *(void *)(a1 + 316) = 0x200000001;
  }
  *(_DWORD *)(a1 + 324) = -1;
  *(void *)(a1 + 4sub_19E392864(&a9, 0) = 0;
  uint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    unint64_t v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v9 + 31) < 0)
    {
      **(unsigned char **)(v9 + 8) = 0;
      *(void *)(v9 + 16) = 0;
    }
    else
    {
      *(unsigned char *)(v9 + 8) = 0;
      *(unsigned char *)(v9 + 31) = 0;
    }
  }
  return result;
}

char *sub_19E3A1788(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  *(void *)CFNumberRef v188 = a2;
  char v5 = sub_19E3A03C4((uint64_t)a3, (char **)v188, a3[11].i32[1]);
  uint64_t result = *(char **)v188;
  if (v5) {
    return result;
  }
  CFNumberRef v187 = (unint64_t *)(a1 + 8);
  unint64_t v7 = (uint64_t *)(a1 + 128);
  uint64_t v8 = (uint64_t *)(a1 + 104);
  unint64_t v9 = (uint64_t *)(a1 + 80);
  uint64_t v10 = (uint64_t *)(a1 + 56);
  while (2)
  {
    uint64_t v11 = result + 1;
    unsigned int v12 = *result;
    if ((*result & 0x80000000) == 0) {
      goto LABEL_7;
    }
    unsigned int v13 = v12 + (*v11 << 7);
    unsigned int v12 = v13 - 128;
    if ((*v11 & 0x80000000) == 0)
    {
      uint64_t v11 = result + 2;
LABEL_7:
      *(void *)CFNumberRef v188 = v11;
      goto LABEL_8;
    }
    uint64_t result = (char *)sub_19E3BCF3C((uint64_t)result, v13 - 128);
    *(void *)CFNumberRef v188 = result;
    if (!result) {
      return result;
    }
    uint64_t v11 = result;
    unsigned int v12 = v22;
LABEL_8:
    switch(v12 >> 3)
    {
      case 1u:
        if (v12 != 10) {
          goto LABEL_275;
        }
        uint64_t result = v11 - 1;
        while (2)
        {
          uint64_t v14 = result + 1;
          *(void *)CFNumberRef v188 = result + 1;
          uint64_t v15 = *(int **)(a1 + 72);
          if (!v15)
          {
            int v17 = *(_DWORD *)(a1 + 68);
LABEL_16:
            sub_19E3C232C(a1 + 56, v17 + 1);
            uint64_t v15 = *(int **)(a1 + 72);
            int v17 = *v15;
            goto LABEL_17;
          }
          uint64_t v16 = *(int *)(a1 + 64);
          int v17 = *v15;
          if ((int)v16 < *v15)
          {
            *(_DWORD *)(a1 + 64) = v16 + 1;
            uint64_t v18 = *(std::string **)&v15[2 * v16 + 2];
            goto LABEL_22;
          }
          if (v17 == *(_DWORD *)(a1 + 68)) {
            goto LABEL_16;
          }
LABEL_17:
          *uint64_t v15 = v17 + 1;
          uint64_t v19 = *v10;
          if (!*v10) {
            operator new();
          }
          if (*(unsigned char *)(v19 + 24)) {
            (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v19 + 32) + 32) + 40))(*(void *)(*(void *)(v19 + 32) + 32), &unk_1EF0B7BE8, 24);
          }
          uint64_t v18 = (std::string *)sub_19E3ADF44((void *)v19, 0x18uLL, (uint64_t)sub_19E3A9AFC);
          v18->__r_.__value_.__r.__words[0] = 0;
          v18->__r_.__value_.__l.__size_ = 0;
          v18->__r_.__value_.__r.__words[2] = 0;
          uint64_t v20 = *(void *)(a1 + 72);
          uint64_t v21 = *(int *)(a1 + 64);
          *(_DWORD *)(a1 + 64) = v21 + 1;
          *(void *)(v20 + 8 * v21 + 8) = v18;
          uint64_t v14 = *(char **)v188;
LABEL_22:
          uint64_t result = (char *)sub_19E3BCFF0(v18, v14, (uint64_t)a3);
          *(void *)CFNumberRef v188 = result;
          if (result)
          {
            if (*(void *)a3 <= (unint64_t)result || *result != 10) {
              goto LABEL_273;
            }
            continue;
          }
          return result;
        }
      case 2u:
        if (v12 != 18) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 1u;
        uint64_t v23 = *(void *)(a1 + 8);
        uint64_t v24 = (void *)(v23 & 0xFFFFFFFFFFFFFFFELL);
        if (v23) {
          uint64_t v24 = (void *)*v24;
        }
        uint64_t v25 = (uint64_t *)(a1 + 152);
        goto LABEL_265;
      case 3u:
        if (v12 != 24) {
          goto LABEL_275;
        }
        char v26 = v11 + 1;
        unint64_t v27 = *v11;
        if ((*v11 & 0x80000000) == 0) {
          goto LABEL_36;
        }
        int v28 = *v26;
        int v29 = v27 + (v28 << 7);
        unint64_t v27 = (v29 - 128);
        if (v28 < 0)
        {
          uint64_t result = (char *)sub_19E3BCEF4((uint64_t)v11, (v29 - 128));
          *(void *)CFNumberRef v188 = result;
          if (!result) {
            return result;
          }
          unint64_t v27 = v157;
        }
        else
        {
          char v26 = v11 + 2;
LABEL_36:
          *(void *)CFNumberRef v188 = v26;
        }
        if ((v27 - 1) > 3)
        {
          if (*v187) {
            CFTypeID v186 = (std::string *)((*v187 & 0xFFFFFFFFFFFFFFFELL) + 8);
          }
          else {
            CFTypeID v186 = (std::string *)sub_19E3A0504(v187);
          }
          sub_19E3BCDE0(3, v27, v186);
        }
        else
        {
          *(_DWORD *)(a1 + 40) |= 0x800000u;
          *(_DWORD *)(a1 + 272) = v27;
        }
        goto LABEL_273;
      case 4u:
        if (v12 != 32) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x1000000u;
        int v31 = v11 + 1;
        LODWORD(v3sub_19E392864(&a9, 0) = *v11;
        if ((v30 & 0x80) == 0) {
          goto LABEL_43;
        }
        int v32 = *v31;
        uint64_t v30 = v30 + (v32 << 7) - 128;
        if (v32 < 0)
        {
          uint64_t result = (char *)sub_19E3BCEF4((uint64_t)v11, v30);
          *(void *)CFNumberRef v188 = result;
          *(_DWORD *)(a1 + 276) = v158;
          if (!result) {
            return result;
          }
        }
        else
        {
          int v31 = v11 + 2;
LABEL_43:
          *(void *)CFNumberRef v188 = v31;
          *(_DWORD *)(a1 + 276) = v30;
        }
        goto LABEL_273;
      case 5u:
        if (v12 != 42) {
          goto LABEL_275;
        }
        uint64_t result = v11 - 1;
        while (1)
        {
          int v33 = result + 1;
          *(void *)CFNumberRef v188 = result + 1;
          uint64_t v34 = *(int **)(a1 + 96);
          if (!v34) {
            break;
          }
          uint64_t v35 = *(int *)(a1 + 88);
          int v36 = *v34;
          if ((int)v35 >= *v34)
          {
            if (v36 == *(_DWORD *)(a1 + 92))
            {
LABEL_51:
              sub_19E3C232C(a1 + 80, v36 + 1);
              uint64_t v34 = *(int **)(a1 + 96);
              int v36 = *v34;
            }
            *uint64_t v34 = v36 + 1;
            uint64_t v38 = *v9;
            if (!*v9) {
              operator new();
            }
            if (*(unsigned char *)(v38 + 24)) {
              (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v38 + 32) + 32) + 40))(*(void *)(*(void *)(v38 + 32) + 32), &unk_1EF0B7BE8, 24);
            }
            int v37 = (std::string *)sub_19E3ADF44((void *)v38, 0x18uLL, (uint64_t)sub_19E3A9AFC);
            v37->__r_.__value_.__r.__words[0] = 0;
            v37->__r_.__value_.__l.__size_ = 0;
            v37->__r_.__value_.__r.__words[2] = 0;
            uint64_t v39 = *(void *)(a1 + 96);
            uint64_t v40 = *(int *)(a1 + 88);
            *(_DWORD *)(a1 + 88) = v40 + 1;
            *(void *)(v39 + 8 * v40 + 8) = v37;
            int v33 = *(char **)v188;
            goto LABEL_57;
          }
          *(_DWORD *)(a1 + 88) = v35 + 1;
          int v37 = *(std::string **)&v34[2 * v35 + 2];
LABEL_57:
          uint64_t result = (char *)sub_19E3BCFF0(v37, v33, (uint64_t)a3);
          *(void *)CFNumberRef v188 = result;
          if (!result) {
            return result;
          }
          if (*(void *)a3 <= (unint64_t)result || *result != 42) {
            goto LABEL_273;
          }
        }
        int v36 = *(_DWORD *)(a1 + 92);
        goto LABEL_51;
      case 6u:
        if (v12 != 48) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x200u;
        uint64_t v42 = v11 + 1;
        LODWORD(v41) = *v11;
        if ((v41 & 0x80) == 0) {
          goto LABEL_65;
        }
        int v43 = *v42;
        uint64_t v41 = v41 + (v43 << 7) - 128;
        if (v43 < 0)
        {
          uint64_t result = (char *)sub_19E3BCEF4((uint64_t)v11, v41);
          *(void *)CFNumberRef v188 = result;
          *(_DWORD *)(a1 + 224) = v159;
          if (!result) {
            return result;
          }
        }
        else
        {
          uint64_t v42 = v11 + 2;
LABEL_65:
          *(void *)CFNumberRef v188 = v42;
          *(_DWORD *)(a1 + 224) = v41;
        }
        goto LABEL_273;
      case 7u:
        if (v12 != 58) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 2u;
        uint64_t v44 = *(void *)(a1 + 8);
        uint64_t v24 = (void *)(v44 & 0xFFFFFFFFFFFFFFFELL);
        if (v44) {
          uint64_t v24 = (void *)*v24;
        }
        uint64_t v25 = (uint64_t *)(a1 + 160);
        goto LABEL_265;
      case 0xAu:
        if (v12 != 85) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x2000000u;
        int v46 = *(_DWORD *)v11;
        uint64_t v45 = v11 + 4;
        *(_DWORD *)(a1 + 28sub_19E392864(&a9, 0) = v46;
        goto LABEL_255;
      case 0xBu:
        if (v12 != 88) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x800u;
        uint64_t v47 = v11 + 1;
        uint64_t v48 = *v11;
        if ((*v11 & 0x80000000) == 0) {
          goto LABEL_76;
        }
        int v49 = *v47;
        uint64_t v48 = v48 + (v49 << 7) - 128;
        if (v49 < 0)
        {
          uint64_t result = (char *)sub_19E3BCEF4((uint64_t)v11, v48);
          *(void *)CFNumberRef v188 = result;
          *(void *)(a1 + 232) = v160;
          if (!result) {
            return result;
          }
        }
        else
        {
          uint64_t v47 = v11 + 2;
LABEL_76:
          *(void *)CFNumberRef v188 = v47;
          *(void *)(a1 + 232) = v48;
        }
        goto LABEL_273;
      case 0xCu:
        if (v12 != 96) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x400u;
        uint64_t v51 = v11 + 1;
        LODWORD(v5sub_19E392864(&a9, 0) = *v11;
        if ((v50 & 0x80) == 0) {
          goto LABEL_81;
        }
        int v52 = *v51;
        uint64_t v50 = v50 + (v52 << 7) - 128;
        if (v52 < 0)
        {
          uint64_t result = (char *)sub_19E3BCEF4((uint64_t)v11, v50);
          *(void *)CFNumberRef v188 = result;
          *(_DWORD *)(a1 + 228) = v161;
          if (!result) {
            return result;
          }
        }
        else
        {
          uint64_t v51 = v11 + 2;
LABEL_81:
          *(void *)CFNumberRef v188 = v51;
          *(_DWORD *)(a1 + 228) = v50;
        }
        goto LABEL_273;
      case 0xDu:
        if (v12 != 104) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x1000u;
        long long v54 = v11 + 1;
        LODWORD(v53) = *v11;
        if ((v53 & 0x80) == 0) {
          goto LABEL_86;
        }
        int v55 = *v54;
        uint64_t v53 = v53 + (v55 << 7) - 128;
        if (v55 < 0)
        {
          uint64_t result = (char *)sub_19E3BCEF4((uint64_t)v11, v53);
          *(void *)CFNumberRef v188 = result;
          *(_DWORD *)(a1 + 24sub_19E392864(&a9, 0) = v162;
          if (!result) {
            return result;
          }
        }
        else
        {
          long long v54 = v11 + 2;
LABEL_86:
          *(void *)CFNumberRef v188 = v54;
          *(_DWORD *)(a1 + 24sub_19E392864(&a9, 0) = v53;
        }
        goto LABEL_273;
      case 0xEu:
        if (v12 != 112) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x4000000u;
        unint64_t v57 = v11 + 1;
        LODWORD(v56) = *v11;
        if ((v56 & 0x80) == 0) {
          goto LABEL_91;
        }
        int v58 = *v57;
        uint64_t v56 = v56 + (v58 << 7) - 128;
        if (v58 < 0)
        {
          uint64_t result = (char *)sub_19E3BCEF4((uint64_t)v11, v56);
          *(void *)CFNumberRef v188 = result;
          *(_DWORD *)(a1 + 284) = v163;
          if (!result) {
            return result;
          }
        }
        else
        {
          unint64_t v57 = v11 + 2;
LABEL_91:
          *(void *)CFNumberRef v188 = v57;
          *(_DWORD *)(a1 + 284) = v56;
        }
        goto LABEL_273;
      case 0xFu:
        if (v12 != 125) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x8000000u;
        int v59 = *(_DWORD *)v11;
        uint64_t v45 = v11 + 4;
        *(_DWORD *)(a1 + 288) = v59;
        goto LABEL_255;
      case 0x10u:
        if (v12 != 128) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x10000000u;
        uint64_t v61 = v11 + 1;
        LODWORD(v6sub_19E392864(&a9, 0) = *v11;
        if ((v60 & 0x80) == 0) {
          goto LABEL_98;
        }
        int v62 = *v61;
        uint64_t v60 = v60 + (v62 << 7) - 128;
        if (v62 < 0)
        {
          uint64_t result = (char *)sub_19E3BCEF4((uint64_t)v11, v60);
          *(void *)CFNumberRef v188 = result;
          *(_DWORD *)(a1 + 292) = v164;
          if (!result) {
            return result;
          }
        }
        else
        {
          uint64_t v61 = v11 + 2;
LABEL_98:
          *(void *)CFNumberRef v188 = v61;
          *(_DWORD *)(a1 + 292) = v60;
        }
        goto LABEL_273;
      case 0x11u:
        if (v12 != 136) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x20000000u;
        float v64 = v11 + 1;
        LODWORD(v63) = *v11;
        if ((v63 & 0x80) == 0) {
          goto LABEL_103;
        }
        int v65 = *v64;
        uint64_t v63 = v63 + (v65 << 7) - 128;
        if (v65 < 0)
        {
          uint64_t result = (char *)sub_19E3BCEF4((uint64_t)v11, v63);
          *(void *)CFNumberRef v188 = result;
          *(_DWORD *)(a1 + 296) = v165;
          if (!result) {
            return result;
          }
        }
        else
        {
          float v64 = v11 + 2;
LABEL_103:
          *(void *)CFNumberRef v188 = v64;
          *(_DWORD *)(a1 + 296) = v63;
        }
        goto LABEL_273;
      case 0x12u:
        if (v12 != 144) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x40000000u;
        long long v67 = v11 + 1;
        LODWORD(v66) = *v11;
        if ((v66 & 0x80) == 0) {
          goto LABEL_108;
        }
        int v68 = *v67;
        uint64_t v66 = v66 + (v68 << 7) - 128;
        if (v68 < 0)
        {
          uint64_t result = (char *)sub_19E3BCEF4((uint64_t)v11, v66);
          *(void *)CFNumberRef v188 = result;
          *(_DWORD *)(a1 + 30sub_19E392864(&a9, 0) = v166;
          if (!result) {
            return result;
          }
        }
        else
        {
          long long v67 = v11 + 2;
LABEL_108:
          *(void *)CFNumberRef v188 = v67;
          *(_DWORD *)(a1 + 30sub_19E392864(&a9, 0) = v66;
        }
        goto LABEL_273;
      case 0x13u:
        if (v12 != 152) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 44) |= 1u;
        float v69 = v11 + 1;
        uint64_t v70 = *v11;
        if ((*v11 & 0x80000000) == 0) {
          goto LABEL_113;
        }
        int v71 = *v69;
        uint64_t v70 = v70 + (v71 << 7) - 128;
        if (v71 < 0)
        {
          uint64_t result = (char *)sub_19E3BCEF4((uint64_t)v11, v70);
          *(void *)CFNumberRef v188 = result;
          *(unsigned char *)(a1 + 308) = v167 != 0;
          if (!result) {
            return result;
          }
        }
        else
        {
          float v69 = v11 + 2;
LABEL_113:
          *(void *)CFNumberRef v188 = v69;
          *(unsigned char *)(a1 + 308) = v70 != 0;
        }
        goto LABEL_273;
      case 0x14u:
        if (v12 != 160) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x80000000;
        uint64_t v73 = v11 + 1;
        LODWORD(v72) = *v11;
        if ((v72 & 0x80) == 0) {
          goto LABEL_118;
        }
        int v74 = *v73;
        uint64_t v72 = v72 + (v74 << 7) - 128;
        if (v74 < 0)
        {
          uint64_t result = (char *)sub_19E3BCEF4((uint64_t)v11, v72);
          *(void *)CFNumberRef v188 = result;
          *(_DWORD *)(a1 + 304) = v168;
          if (!result) {
            return result;
          }
        }
        else
        {
          uint64_t v73 = v11 + 2;
LABEL_118:
          *(void *)CFNumberRef v188 = v73;
          *(_DWORD *)(a1 + 304) = v72;
        }
        goto LABEL_273;
      case 0x15u:
        if (v12 != 168) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 44) |= 2u;
        float v75 = v11 + 1;
        uint64_t v76 = *v11;
        if ((*v11 & 0x80000000) == 0) {
          goto LABEL_123;
        }
        int v77 = *v75;
        uint64_t v76 = v76 + (v77 << 7) - 128;
        if (v77 < 0)
        {
          uint64_t result = (char *)sub_19E3BCEF4((uint64_t)v11, v76);
          *(void *)CFNumberRef v188 = result;
          *(unsigned char *)(a1 + 309) = v169 != 0;
          if (!result) {
            return result;
          }
        }
        else
        {
          float v75 = v11 + 2;
LABEL_123:
          *(void *)CFNumberRef v188 = v75;
          *(unsigned char *)(a1 + 309) = v76 != 0;
        }
        goto LABEL_273;
      case 0x16u:
        if (v12 != 176) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 44) |= 8u;
        uint64_t v78 = v11 + 1;
        uint64_t v79 = *v11;
        if ((*v11 & 0x80000000) == 0) {
          goto LABEL_128;
        }
        int v80 = *v78;
        uint64_t v79 = v79 + (v80 << 7) - 128;
        if (v80 < 0)
        {
          uint64_t result = (char *)sub_19E3BCEF4((uint64_t)v11, v79);
          *(void *)CFNumberRef v188 = result;
          *(unsigned char *)(a1 + 311) = v170 != 0;
          if (!result) {
            return result;
          }
        }
        else
        {
          uint64_t v78 = v11 + 2;
LABEL_128:
          *(void *)CFNumberRef v188 = v78;
          *(unsigned char *)(a1 + 311) = v79 != 0;
        }
        goto LABEL_273;
      case 0x17u:
        if (v12 != 184) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 44) |= 4u;
        uint64_t v81 = v11 + 1;
        uint64_t v82 = *v11;
        if ((*v11 & 0x80000000) == 0) {
          goto LABEL_133;
        }
        int v83 = *v81;
        uint64_t v82 = v82 + (v83 << 7) - 128;
        if (v83 < 0)
        {
          uint64_t result = (char *)sub_19E3BCEF4((uint64_t)v11, v82);
          *(void *)CFNumberRef v188 = result;
          *(unsigned char *)(a1 + 31sub_19E392864(&a9, 0) = v171 != 0;
          if (!result) {
            return result;
          }
        }
        else
        {
          uint64_t v81 = v11 + 2;
LABEL_133:
          *(void *)CFNumberRef v188 = v81;
          *(unsigned char *)(a1 + 31sub_19E392864(&a9, 0) = v82 != 0;
        }
        goto LABEL_273;
      case 0x18u:
        if (v12 != 192) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x4000u;
        unint64_t v84 = v11 + 1;
        uint64_t v85 = *v11;
        if ((*v11 & 0x80000000) == 0) {
          goto LABEL_138;
        }
        int v86 = *v84;
        uint64_t v85 = v85 + (v86 << 7) - 128;
        if (v86 < 0)
        {
          uint64_t result = (char *)sub_19E3BCEF4((uint64_t)v11, v85);
          *(void *)CFNumberRef v188 = result;
          *(unsigned char *)(a1 + 245) = v172 != 0;
          if (!result) {
            return result;
          }
        }
        else
        {
          unint64_t v84 = v11 + 2;
LABEL_138:
          *(void *)CFNumberRef v188 = v84;
          *(unsigned char *)(a1 + 245) = v85 != 0;
        }
        goto LABEL_273;
      case 0x19u:
        if (v12 != 200) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x10000u;
        uint64_t v87 = v11 + 1;
        uint64_t v88 = *v11;
        if ((*v11 & 0x80000000) == 0) {
          goto LABEL_143;
        }
        int v89 = *v87;
        uint64_t v88 = v88 + (v89 << 7) - 128;
        if (v89 < 0)
        {
          uint64_t result = (char *)sub_19E3BCEF4((uint64_t)v11, v88);
          *(void *)CFNumberRef v188 = result;
          *(unsigned char *)(a1 + 247) = v173 != 0;
          if (!result) {
            return result;
          }
        }
        else
        {
          uint64_t v87 = v11 + 2;
LABEL_143:
          *(void *)CFNumberRef v188 = v87;
          *(unsigned char *)(a1 + 247) = v88 != 0;
        }
        goto LABEL_273;
      case 0x1Au:
        if (v12 != 208) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x8000u;
        long long v90 = v11 + 1;
        uint64_t v91 = *v11;
        if ((*v11 & 0x80000000) == 0) {
          goto LABEL_148;
        }
        int v92 = *v90;
        uint64_t v91 = v91 + (v92 << 7) - 128;
        if (v92 < 0)
        {
          uint64_t result = (char *)sub_19E3BCEF4((uint64_t)v11, v91);
          *(void *)CFNumberRef v188 = result;
          *(unsigned char *)(a1 + 246) = v174 != 0;
          if (!result) {
            return result;
          }
        }
        else
        {
          long long v90 = v11 + 2;
LABEL_148:
          *(void *)CFNumberRef v188 = v90;
          *(unsigned char *)(a1 + 246) = v91 != 0;
        }
        goto LABEL_273;
      case 0x1Eu:
        if (v12 != 242) {
          goto LABEL_275;
        }
        uint64_t result = v11 - 2;
        while (1)
        {
          CFNumberRef v93 = result + 2;
          *(void *)CFNumberRef v188 = result + 2;
          uint64_t v94 = *(int **)(a1 + 120);
          if (!v94) {
            break;
          }
          uint64_t v95 = *(int *)(a1 + 112);
          int v96 = *v94;
          if ((int)v95 >= *v94)
          {
            if (v96 == *(_DWORD *)(a1 + 116))
            {
LABEL_156:
              sub_19E3C232C(a1 + 104, v96 + 1);
              uint64_t v94 = *(int **)(a1 + 120);
              int v96 = *v94;
            }
            *uint64_t v94 = v96 + 1;
            uint64_t v98 = *v8;
            if (!*v8) {
              operator new();
            }
            if (*(unsigned char *)(v98 + 24)) {
              (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v98 + 32) + 32) + 40))(*(void *)(*(void *)(v98 + 32) + 32), &unk_1EF0B7BE8, 24);
            }
            float v97 = (std::string *)sub_19E3ADF44((void *)v98, 0x18uLL, (uint64_t)sub_19E3A9AFC);
            v97->__r_.__value_.__r.__words[0] = 0;
            v97->__r_.__value_.__l.__size_ = 0;
            v97->__r_.__value_.__r.__words[2] = 0;
            uint64_t v99 = *(void *)(a1 + 120);
            uint64_t v100 = *(int *)(a1 + 112);
            *(_DWORD *)(a1 + 112) = v100 + 1;
            *(void *)(v99 + 8 * v100 + 8) = v97;
            CFNumberRef v93 = *(char **)v188;
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 112) = v95 + 1;
          float v97 = *(std::string **)&v94[2 * v95 + 2];
LABEL_162:
          uint64_t result = (char *)sub_19E3BCFF0(v97, v93, (uint64_t)a3);
          *(void *)CFNumberRef v188 = result;
          if (!result) {
            return result;
          }
          if (*(void *)a3 <= (unint64_t)result || *(_WORD *)result != 498) {
            goto LABEL_273;
          }
        }
        int v96 = *(_DWORD *)(a1 + 116);
        goto LABEL_156;
      case 0x1Fu:
        if (v12 != 250) {
          goto LABEL_275;
        }
        uint64_t result = v11 - 2;
        break;
      case 0x20u:
        if ((_BYTE)v12) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 44) |= 0x10u;
        v109 = v11 + 1;
        uint64_t v110 = *v11;
        if ((*v11 & 0x80000000) == 0) {
          goto LABEL_187;
        }
        int v111 = *v109;
        uint64_t v110 = v110 + (v111 << 7) - 128;
        if (v111 < 0)
        {
          uint64_t result = (char *)sub_19E3BCEF4((uint64_t)v11, v110);
          *(void *)CFNumberRef v188 = result;
          *(unsigned char *)(a1 + 312) = v175 != 0;
          if (!result) {
            return result;
          }
        }
        else
        {
          v109 = v11 + 2;
LABEL_187:
          *(void *)CFNumberRef v188 = v109;
          *(unsigned char *)(a1 + 312) = v110 != 0;
        }
        goto LABEL_273;
      case 0x21u:
        if (v12 != 8) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 44) |= 0x20u;
        long long v112 = v11 + 1;
        uint64_t v113 = *v11;
        if ((*v11 & 0x80000000) == 0) {
          goto LABEL_192;
        }
        int v114 = *v112;
        uint64_t v113 = v113 + (v114 << 7) - 128;
        if (v114 < 0)
        {
          uint64_t result = (char *)sub_19E3BCEF4((uint64_t)v11, v113);
          *(void *)CFNumberRef v188 = result;
          *(unsigned char *)(a1 + 313) = v176 != 0;
          if (!result) {
            return result;
          }
        }
        else
        {
          long long v112 = v11 + 2;
LABEL_192:
          *(void *)CFNumberRef v188 = v112;
          *(unsigned char *)(a1 + 313) = v113 != 0;
        }
        goto LABEL_273;
      case 0x22u:
        if (v12 != 16) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x40000u;
        uint64_t v115 = v11 + 1;
        uint64_t v116 = *v11;
        if ((*v11 & 0x80000000) == 0) {
          goto LABEL_197;
        }
        int v117 = *v115;
        uint64_t v116 = v116 + (v117 << 7) - 128;
        if (v117 < 0)
        {
          uint64_t result = (char *)sub_19E3BCEF4((uint64_t)v11, v116);
          *(void *)CFNumberRef v188 = result;
          *(unsigned char *)(a1 + 249) = v177 != 0;
          if (!result) {
            return result;
          }
        }
        else
        {
          uint64_t v115 = v11 + 2;
LABEL_197:
          *(void *)CFNumberRef v188 = v115;
          *(unsigned char *)(a1 + 249) = v116 != 0;
        }
        goto LABEL_273;
      case 0x23u:
        if (v12 != 24) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x20000u;
        uint64_t v118 = v11 + 1;
        uint64_t v119 = *v11;
        if ((*v11 & 0x80000000) == 0) {
          goto LABEL_202;
        }
        int v120 = *v118;
        uint64_t v119 = v119 + (v120 << 7) - 128;
        if (v120 < 0)
        {
          uint64_t result = (char *)sub_19E3BCEF4((uint64_t)v11, v119);
          *(void *)CFNumberRef v188 = result;
          *(unsigned char *)(a1 + 248) = v178 != 0;
          if (!result) {
            return result;
          }
        }
        else
        {
          uint64_t v118 = v11 + 2;
LABEL_202:
          *(void *)CFNumberRef v188 = v118;
          *(unsigned char *)(a1 + 248) = v119 != 0;
        }
        goto LABEL_273;
      case 0x24u:
        if (v12 != 34) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 4u;
        uint64_t v121 = *(void *)(a1 + 8);
        uint64_t v24 = (void *)(v121 & 0xFFFFFFFFFFFFFFFELL);
        if (v121) {
          uint64_t v24 = (void *)*v24;
        }
        uint64_t v25 = (uint64_t *)(a1 + 168);
        goto LABEL_265;
      case 0x28u:
        if (v12 != 64) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x100000u;
        long long v123 = v11 + 1;
        LODWORD(v122) = *v11;
        if ((v122 & 0x80) == 0) {
          goto LABEL_211;
        }
        int v124 = *v123;
        uint64_t v122 = v122 + (v124 << 7) - 128;
        if (v124 < 0)
        {
          uint64_t result = (char *)sub_19E3BCEF4((uint64_t)v11, v122);
          *(void *)CFNumberRef v188 = result;
          *(_DWORD *)(a1 + 252) = v179;
          if (!result) {
            return result;
          }
        }
        else
        {
          long long v123 = v11 + 2;
LABEL_211:
          *(void *)CFNumberRef v188 = v123;
          *(_DWORD *)(a1 + 252) = v122;
        }
        goto LABEL_273;
      case 0x29u:
        if (v12 != 72) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 44) |= 0x40u;
        long long v126 = v11 + 1;
        LODWORD(v125) = *v11;
        if ((v125 & 0x80) == 0) {
          goto LABEL_216;
        }
        int v127 = *v126;
        uint64_t v125 = v125 + (v127 << 7) - 128;
        if (v127 < 0)
        {
          uint64_t result = (char *)sub_19E3BCEF4((uint64_t)v11, v125);
          *(void *)CFNumberRef v188 = result;
          *(_DWORD *)(a1 + 316) = v180;
          if (!result) {
            return result;
          }
        }
        else
        {
          long long v126 = v11 + 2;
LABEL_216:
          *(void *)CFNumberRef v188 = v126;
          *(_DWORD *)(a1 + 316) = v125;
        }
        goto LABEL_273;
      case 0x2Au:
        if (v12 != 80) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 44) |= 0x80u;
        uint64_t v129 = v11 + 1;
        LODWORD(v128) = *v11;
        if ((v128 & 0x80) == 0) {
          goto LABEL_221;
        }
        int v130 = *v129;
        uint64_t v128 = v128 + (v130 << 7) - 128;
        if (v130 < 0)
        {
          uint64_t result = (char *)sub_19E3BCEF4((uint64_t)v11, v128);
          *(void *)CFNumberRef v188 = result;
          *(_DWORD *)(a1 + 32sub_19E392864(&a9, 0) = v181;
          if (!result) {
            return result;
          }
        }
        else
        {
          uint64_t v129 = v11 + 2;
LABEL_221:
          *(void *)CFNumberRef v188 = v129;
          *(_DWORD *)(a1 + 32sub_19E392864(&a9, 0) = v128;
        }
        goto LABEL_273;
      case 0x2Bu:
        if (v12 != 88) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 44) |= 0x100u;
        uint64_t v132 = v11 + 1;
        LODWORD(v131) = *v11;
        if ((v131 & 0x80) == 0) {
          goto LABEL_226;
        }
        int v133 = *v132;
        uint64_t v131 = v131 + (v133 << 7) - 128;
        if (v133 < 0)
        {
          uint64_t result = (char *)sub_19E3BCEF4((uint64_t)v11, v131);
          *(void *)CFNumberRef v188 = result;
          *(_DWORD *)(a1 + 324) = v182;
          if (!result) {
            return result;
          }
        }
        else
        {
          uint64_t v132 = v11 + 2;
LABEL_226:
          *(void *)CFNumberRef v188 = v132;
          *(_DWORD *)(a1 + 324) = v131;
        }
        goto LABEL_273;
      case 0x2Cu:
        if (v12 != 98) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 8u;
        uint64_t v153 = *(void *)(a1 + 8);
        uint64_t v135 = (void *)(v153 & 0xFFFFFFFFFFFFFFFELL);
        if (v153) {
          uint64_t v135 = (void *)*v135;
        }
        unint64_t v136 = &off_1E9459528;
        CFIndex v137 = (uint64_t *)(a1 + 176);
        goto LABEL_270;
      case 0x2Du:
        if (v12 != 106) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x10u;
        uint64_t v134 = *(void *)(a1 + 8);
        uint64_t v135 = (void *)(v134 & 0xFFFFFFFFFFFFFFFELL);
        if (v134) {
          uint64_t v135 = (void *)*v135;
        }
        unint64_t v136 = &off_1E94594A8;
        CFIndex v137 = (uint64_t *)(a1 + 184);
        goto LABEL_270;
      case 0x2Eu:
        if (v12 != 114) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x20u;
        uint64_t v138 = *(void *)(a1 + 8);
        uint64_t v135 = (void *)(v138 & 0xFFFFFFFFFFFFFFFELL);
        if (v138) {
          uint64_t v135 = (void *)*v135;
        }
        unint64_t v136 = &off_1E94594C8;
        CFIndex v137 = (uint64_t *)(a1 + 192);
        goto LABEL_270;
      case 0x2Fu:
        if (v12 != 122) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x40u;
        uint64_t v139 = *(void *)(a1 + 8);
        uint64_t v135 = (void *)(v139 & 0xFFFFFFFFFFFFFFFELL);
        if (v139) {
          uint64_t v135 = (void *)*v135;
        }
        unint64_t v136 = &off_1E94594E8;
        CFIndex v137 = (uint64_t *)(a1 + 200);
        goto LABEL_270;
      case 0x30u:
        if (v12 != 130) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x80u;
        uint64_t v140 = *(void *)(a1 + 8);
        uint64_t v135 = (void *)(v140 & 0xFFFFFFFFFFFFFFFELL);
        if (v140) {
          uint64_t v135 = (void *)*v135;
        }
        unint64_t v136 = &off_1E9459508;
        CFIndex v137 = (uint64_t *)(a1 + 208);
LABEL_270:
        long long v152 = (std::string *)sub_19E3AE86C(v137, v136, (uint64_t)v135);
        goto LABEL_271;
      case 0x31u:
        if (v12 != 136) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x80000u;
        long long v141 = v11 + 1;
        uint64_t v142 = *v11;
        if ((*v11 & 0x80000000) == 0) {
          goto LABEL_247;
        }
        int v143 = *v141;
        uint64_t v142 = v142 + (v143 << 7) - 128;
        if (v143 < 0)
        {
          uint64_t result = (char *)sub_19E3BCEF4((uint64_t)v11, v142);
          *(void *)CFNumberRef v188 = result;
          *(unsigned char *)(a1 + 25sub_19E392864(&a9, 0) = v183 != 0;
          if (!result) {
            return result;
          }
        }
        else
        {
          long long v141 = v11 + 2;
LABEL_247:
          *(void *)CFNumberRef v188 = v141;
          *(unsigned char *)(a1 + 25sub_19E392864(&a9, 0) = v142 != 0;
        }
        goto LABEL_273;
      case 0x32u:
        if (v12 != 144) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x2000u;
        long long v144 = v11 + 1;
        uint64_t v145 = *v11;
        if ((*v11 & 0x80000000) == 0) {
          goto LABEL_252;
        }
        int v146 = *v144;
        uint64_t v145 = v145 + (v146 << 7) - 128;
        if (v146 < 0)
        {
          uint64_t result = (char *)sub_19E3BCEF4((uint64_t)v11, v145);
          *(void *)CFNumberRef v188 = result;
          *(unsigned char *)(a1 + 244) = v184 != 0;
          if (!result) {
            return result;
          }
        }
        else
        {
          long long v144 = v11 + 2;
LABEL_252:
          *(void *)CFNumberRef v188 = v144;
          *(unsigned char *)(a1 + 244) = v145 != 0;
        }
        goto LABEL_273;
      case 0x33u:
        if (v12 != 157) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x200000u;
        int v147 = *(_DWORD *)v11;
        uint64_t v45 = v11 + 4;
        *(_DWORD *)(a1 + 256) = v147;
LABEL_255:
        *(void *)CFNumberRef v188 = v45;
        goto LABEL_273;
      case 0x34u:
        if (v12 != 160) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x400000u;
        int v148 = v11 + 1;
        uint64_t v149 = *v11;
        if ((*v11 & 0x80000000) == 0) {
          goto LABEL_260;
        }
        int v150 = *v148;
        uint64_t v149 = v149 + (v150 << 7) - 128;
        if (v150 < 0)
        {
          uint64_t result = (char *)sub_19E3BCEF4((uint64_t)v11, v149);
          *(void *)CFNumberRef v188 = result;
          *(void *)(a1 + 264) = v185;
          if (!result) {
            return result;
          }
        }
        else
        {
          int v148 = v11 + 2;
LABEL_260:
          *(void *)CFNumberRef v188 = v148;
          *(void *)(a1 + 264) = v149;
        }
        goto LABEL_273;
      case 0x35u:
        if (v12 != 170) {
          goto LABEL_275;
        }
        *(_DWORD *)(a1 + 40) |= 0x100u;
        uint64_t v151 = *(void *)(a1 + 8);
        uint64_t v24 = (void *)(v151 & 0xFFFFFFFFFFFFFFFELL);
        if (v151) {
          uint64_t v24 = (void *)*v24;
        }
        uint64_t v25 = (uint64_t *)(a1 + 216);
LABEL_265:
        long long v152 = (std::string *)sub_19E3AE730(v25, (uint64_t)v24);
LABEL_271:
        uint64_t result = (char *)sub_19E3BCFF0(v152, *(char **)v188, (uint64_t)a3);
        goto LABEL_272;
      default:
LABEL_275:
        if (v12) {
          BOOL v155 = (v12 & 7) == 4;
        }
        else {
          BOOL v155 = 1;
        }
        if (v155)
        {
          a3[10].i32[0] = v12 - 1;
          return v11;
        }
        if (v12 < 0x640)
        {
          if (*v187)
          {
            float v156 = (std::string *)((*v187 & 0xFFFFFFFFFFFFFFFELL) + 8);
          }
          else
          {
            float v156 = (std::string *)sub_19E3A0504(v187);
            uint64_t v11 = *(char **)v188;
          }
          uint64_t result = (char *)sub_19E3BD4AC(v12, v156, v11, a3);
        }
        else
        {
          uint64_t result = (char *)sub_19E3B564C((uint64_t *)(a1 + 16), v12, (unsigned __int8 *)v11, (uint64_t)&unk_1E945A3E0, v187, a3);
        }
LABEL_272:
        *(void *)CFNumberRef v188 = result;
        if (!result) {
          return result;
        }
LABEL_273:
        int v154 = sub_19E3A03C4((uint64_t)a3, (char **)v188, a3[11].i32[1]);
        uint64_t result = *(char **)v188;
        if (v154) {
          return result;
        }
        continue;
    }
    break;
  }
  while (1)
  {
    double v101 = result + 2;
    *(void *)CFNumberRef v188 = result + 2;
    float v102 = *(int **)(a1 + 144);
    if (!v102) {
      break;
    }
    uint64_t v103 = *(int *)(a1 + 136);
    int v104 = *v102;
    if ((int)v103 >= *v102)
    {
      if (v104 == *(_DWORD *)(a1 + 140))
      {
LABEL_173:
        sub_19E3C232C(a1 + 128, v104 + 1);
        float v102 = *(int **)(a1 + 144);
        int v104 = *v102;
      }
      int *v102 = v104 + 1;
      uint64_t v106 = *v7;
      if (!*v7) {
        operator new();
      }
      if (*(unsigned char *)(v106 + 24)) {
        (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v106 + 32) + 32) + 40))(*(void *)(*(void *)(v106 + 32) + 32), &unk_1EF0B7BE8, 24);
      }
      unint64_t v105 = (std::string *)sub_19E3ADF44((void *)v106, 0x18uLL, (uint64_t)sub_19E3A9AFC);
      v105->__r_.__value_.__r.__words[0] = 0;
      v105->__r_.__value_.__l.__size_ = 0;
      v105->__r_.__value_.__r.__words[2] = 0;
      uint64_t v107 = *(void *)(a1 + 144);
      uint64_t v108 = *(int *)(a1 + 136);
      *(_DWORD *)(a1 + 136) = v108 + 1;
      *(void *)(v107 + 8 * v108 + 8) = v105;
      double v101 = *(char **)v188;
      goto LABEL_179;
    }
    *(_DWORD *)(a1 + 136) = v103 + 1;
    unint64_t v105 = *(std::string **)&v102[2 * v103 + 2];
LABEL_179:
    uint64_t result = (char *)sub_19E3BCFF0(v105, v101, (uint64_t)a3);
    *(void *)CFNumberRef v188 = result;
    if (!result) {
      return result;
    }
    if (*(void *)a3 <= (unint64_t)result || *(_WORD *)result != 506) {
      goto LABEL_273;
    }
  }
  int v104 = *(_DWORD *)(a1 + 140);
  goto LABEL_173;
}

char *sub_19E3A2E00(uint64_t a1, char *a2, uint64_t *a3)
{
  int v6 = *(_DWORD *)(a1 + 64);
  if (v6 >= 1)
  {
    for (int i = 0; v6 != i; ++i)
    {
      uint64_t v8 = sub_19E3A9CB4(a1 + 56, i);
      if (*(char *)(v8 + 23) < 0)
      {
        int64_t v9 = *(void *)(v8 + 8);
        if (v9 > 127) {
          goto LABEL_13;
        }
      }
      else
      {
        int64_t v9 = *(unsigned __int8 *)(v8 + 23);
      }
      if (*a3 - (uint64_t)a2 + 14 >= v9)
      {
        *a2 = 10;
        a2[1] = v9;
        if (*(char *)(v8 + 23) >= 0) {
          uint64_t v10 = (const void *)v8;
        }
        else {
          uint64_t v10 = *(const void **)v8;
        }
        memcpy(a2 + 2, v10, v9);
        a2 += v9 + 2;
        continue;
      }
LABEL_13:
      a2 = sub_19E3AF3B8(a3, 1, v8, a2);
    }
  }
  int v11 = *(_DWORD *)(a1 + 40);
  if (v11)
  {
    a2 = sub_19E39E4E4((unint64_t *)a3, 2, (const void **)(*(void *)(a1 + 152) & 0xFFFFFFFFFFFFFFFELL), a2);
    if ((v11 & 0x800000) == 0)
    {
LABEL_16:
      if ((v11 & 0x1000000) == 0) {
        goto LABEL_38;
      }
      goto LABEL_17;
    }
  }
  else if ((v11 & 0x800000) == 0)
  {
    goto LABEL_16;
  }
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_19E3AEE48((uint64_t)a3, a2);
  }
  unint64_t v13 = *(int *)(a1 + 272);
  *a2 = 24;
  if (v13 > 0x7F)
  {
    a2[1] = v13 | 0x80;
    unint64_t v15 = v13 >> 7;
    if (v13 >> 14)
    {
      a2 += 3;
      do
      {
        *(a2 - 1) = v15 | 0x80;
        unint64_t v18 = v15 >> 7;
        ++a2;
        unint64_t v19 = v15 >> 14;
        v15 >>= 7;
      }
      while (v19);
      *(a2 - 1) = v18;
      if ((v11 & 0x1000000) == 0) {
        goto LABEL_38;
      }
    }
    else
    {
      a2[2] = v15;
      a2 += 3;
      if ((v11 & 0x1000000) == 0) {
        goto LABEL_38;
      }
    }
  }
  else
  {
    a2[1] = v13;
    a2 += 2;
    if ((v11 & 0x1000000) == 0) {
      goto LABEL_38;
    }
  }
LABEL_17:
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_19E3AEE48((uint64_t)a3, a2);
  }
  unint64_t v12 = *(int *)(a1 + 276);
  *a2 = 32;
  if (v12 > 0x7F)
  {
    a2[1] = v12 | 0x80;
    unint64_t v14 = v12 >> 7;
    if (v12 >> 14)
    {
      a2 += 3;
      do
      {
        *(a2 - 1) = v14 | 0x80;
        unint64_t v16 = v14 >> 7;
        ++a2;
        unint64_t v17 = v14 >> 14;
        v14 >>= 7;
      }
      while (v17);
      *(a2 - 1) = v16;
    }
    else
    {
      a2[2] = v14;
      a2 += 3;
    }
  }
  else
  {
    a2[1] = v12;
    a2 += 2;
  }
LABEL_38:
  int v20 = *(_DWORD *)(a1 + 88);
  if (v20 >= 1)
  {
    for (int j = 0; v20 != j; ++j)
    {
      uint64_t v22 = sub_19E3A9CB4(a1 + 80, j);
      if (*(char *)(v22 + 23) < 0)
      {
        int64_t v23 = *(void *)(v22 + 8);
        if (v23 > 127) {
          goto LABEL_50;
        }
      }
      else
      {
        int64_t v23 = *(unsigned __int8 *)(v22 + 23);
      }
      if (*a3 - (uint64_t)a2 + 14 >= v23)
      {
        *a2 = 42;
        a2[1] = v23;
        if (*(char *)(v22 + 23) >= 0) {
          uint64_t v24 = (const void *)v22;
        }
        else {
          uint64_t v24 = *(const void **)v22;
        }
        memcpy(a2 + 2, v24, v23);
        a2 += v23 + 2;
        continue;
      }
LABEL_50:
      a2 = sub_19E3AF3B8(a3, 5, v22, a2);
    }
  }
  if ((v11 & 0x200) != 0)
  {
    if (*a3 <= (unint64_t)a2) {
      a2 = sub_19E3AEE48((uint64_t)a3, a2);
    }
    unint64_t v26 = *(int *)(a1 + 224);
    *a2 = 48;
    if (v26 > 0x7F)
    {
      a2[1] = v26 | 0x80;
      unint64_t v28 = v26 >> 7;
      if (v26 >> 14)
      {
        a2 += 3;
        do
        {
          *(a2 - 1) = v28 | 0x80;
          unint64_t v31 = v28 >> 7;
          ++a2;
          unint64_t v32 = v28 >> 14;
          v28 >>= 7;
        }
        while (v32);
        *(a2 - 1) = v31;
        if ((v11 & 2) != 0) {
          goto LABEL_82;
        }
      }
      else
      {
        a2[2] = v28;
        a2 += 3;
        if ((v11 & 2) != 0) {
          goto LABEL_82;
        }
      }
    }
    else
    {
      a2[1] = v26;
      a2 += 2;
      if ((v11 & 2) != 0) {
        goto LABEL_82;
      }
    }
LABEL_53:
    if ((v11 & 0x2000000) == 0) {
      goto LABEL_54;
    }
    goto LABEL_83;
  }
  if ((v11 & 2) == 0) {
    goto LABEL_53;
  }
LABEL_82:
  a2 = sub_19E39E4E4((unint64_t *)a3, 7, (const void **)(*(void *)(a1 + 160) & 0xFFFFFFFFFFFFFFFELL), a2);
  if ((v11 & 0x2000000) == 0)
  {
LABEL_54:
    if ((v11 & 0x800) == 0) {
      goto LABEL_55;
    }
    goto LABEL_86;
  }
LABEL_83:
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_19E3AEE48((uint64_t)a3, a2);
  }
  int v33 = *(_DWORD *)(a1 + 280);
  *a2 = 85;
  *(_DWORD *)(a2 + 1) = v33;
  a2 += 5;
  if ((v11 & 0x800) == 0)
  {
LABEL_55:
    if ((v11 & 0x400) == 0) {
      goto LABEL_56;
    }
LABEL_97:
    if (*a3 <= (unint64_t)a2) {
      a2 = sub_19E3AEE48((uint64_t)a3, a2);
    }
    unint64_t v38 = *(int *)(a1 + 228);
    *a2 = 96;
    if (v38 > 0x7F)
    {
      a2[1] = v38 | 0x80;
      unint64_t v39 = v38 >> 7;
      if (v38 >> 14)
      {
        a2 += 3;
        do
        {
          *(a2 - 1) = v39 | 0x80;
          unint64_t v40 = v39 >> 7;
          ++a2;
          unint64_t v41 = v39 >> 14;
          v39 >>= 7;
        }
        while (v41);
        *(a2 - 1) = v40;
        if ((v11 & 0x1000) != 0) {
          goto LABEL_108;
        }
      }
      else
      {
        a2[2] = v39;
        a2 += 3;
        if ((v11 & 0x1000) != 0) {
          goto LABEL_108;
        }
      }
    }
    else
    {
      a2[1] = v38;
      a2 += 2;
      if ((v11 & 0x1000) != 0) {
        goto LABEL_108;
      }
    }
LABEL_57:
    if ((v11 & 0x4000000) == 0) {
      goto LABEL_58;
    }
LABEL_119:
    if (*a3 <= (unint64_t)a2) {
      a2 = sub_19E3AEE48((uint64_t)a3, a2);
    }
    unint64_t v46 = *(int *)(a1 + 284);
    *a2 = 112;
    if (v46 > 0x7F)
    {
      a2[1] = v46 | 0x80;
      unint64_t v47 = v46 >> 7;
      if (v46 >> 14)
      {
        a2 += 3;
        do
        {
          *(a2 - 1) = v47 | 0x80;
          unint64_t v48 = v47 >> 7;
          ++a2;
          unint64_t v49 = v47 >> 14;
          v47 >>= 7;
        }
        while (v49);
        *(a2 - 1) = v48;
        if ((v11 & 0x8000000) != 0) {
          goto LABEL_130;
        }
      }
      else
      {
        a2[2] = v47;
        a2 += 3;
        if ((v11 & 0x8000000) != 0) {
          goto LABEL_130;
        }
      }
    }
    else
    {
      a2[1] = v46;
      a2 += 2;
      if ((v11 & 0x8000000) != 0) {
        goto LABEL_130;
      }
    }
LABEL_59:
    if ((v11 & 0x10000000) == 0) {
      goto LABEL_60;
    }
LABEL_133:
    if (*a3 <= (unint64_t)a2) {
      a2 = sub_19E3AEE48((uint64_t)a3, a2);
    }
    unint64_t v51 = *(int *)(a1 + 292);
    *(_WORD *)a2 = 384;
    if (v51 > 0x7F)
    {
      a2[2] = v51 | 0x80;
      unint64_t v52 = v51 >> 7;
      if (v51 >> 14)
      {
        a2 += 4;
        do
        {
          *(a2 - 1) = v52 | 0x80;
          unint64_t v53 = v52 >> 7;
          ++a2;
          unint64_t v54 = v52 >> 14;
          v52 >>= 7;
        }
        while (v54);
        *(a2 - 1) = v53;
        if ((v11 & 0x20000000) != 0) {
          goto LABEL_144;
        }
      }
      else
      {
        a2[3] = v52;
        a2 += 4;
        if ((v11 & 0x20000000) != 0) {
          goto LABEL_144;
        }
      }
    }
    else
    {
      a2[2] = v51;
      a2 += 3;
      if ((v11 & 0x20000000) != 0) {
        goto LABEL_144;
      }
    }
LABEL_61:
    if ((v11 & 0x40000000) == 0) {
      goto LABEL_155;
    }
    goto LABEL_62;
  }
LABEL_86:
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_19E3AEE48((uint64_t)a3, a2);
  }
  unint64_t v34 = *(void *)(a1 + 232);
  *a2 = 88;
  if (v34 > 0x7F)
  {
    a2[1] = v34 | 0x80;
    unint64_t v35 = v34 >> 7;
    if (v34 >> 14)
    {
      a2 += 3;
      do
      {
        *(a2 - 1) = v35 | 0x80;
        unint64_t v36 = v35 >> 7;
        ++a2;
        unint64_t v37 = v35 >> 14;
        v35 >>= 7;
      }
      while (v37);
      *(a2 - 1) = v36;
      if ((v11 & 0x400) != 0) {
        goto LABEL_97;
      }
    }
    else
    {
      a2[2] = v35;
      a2 += 3;
      if ((v11 & 0x400) != 0) {
        goto LABEL_97;
      }
    }
  }
  else
  {
    a2[1] = v34;
    a2 += 2;
    if ((v11 & 0x400) != 0) {
      goto LABEL_97;
    }
  }
LABEL_56:
  if ((v11 & 0x1000) == 0) {
    goto LABEL_57;
  }
LABEL_108:
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_19E3AEE48((uint64_t)a3, a2);
  }
  unint64_t v42 = *(int *)(a1 + 240);
  *a2 = 104;
  if (v42 > 0x7F)
  {
    a2[1] = v42 | 0x80;
    unint64_t v43 = v42 >> 7;
    if (v42 >> 14)
    {
      a2 += 3;
      do
      {
        *(a2 - 1) = v43 | 0x80;
        unint64_t v44 = v43 >> 7;
        ++a2;
        unint64_t v45 = v43 >> 14;
        v43 >>= 7;
      }
      while (v45);
      *(a2 - 1) = v44;
      if ((v11 & 0x4000000) != 0) {
        goto LABEL_119;
      }
    }
    else
    {
      a2[2] = v43;
      a2 += 3;
      if ((v11 & 0x4000000) != 0) {
        goto LABEL_119;
      }
    }
  }
  else
  {
    a2[1] = v42;
    a2 += 2;
    if ((v11 & 0x4000000) != 0) {
      goto LABEL_119;
    }
  }
LABEL_58:
  if ((v11 & 0x8000000) == 0) {
    goto LABEL_59;
  }
LABEL_130:
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_19E3AEE48((uint64_t)a3, a2);
  }
  int v50 = *(_DWORD *)(a1 + 288);
  *a2 = 125;
  *(_DWORD *)(a2 + 1) = v50;
  a2 += 5;
  if ((v11 & 0x10000000) != 0) {
    goto LABEL_133;
  }
LABEL_60:
  if ((v11 & 0x20000000) == 0) {
    goto LABEL_61;
  }
LABEL_144:
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_19E3AEE48((uint64_t)a3, a2);
  }
  unint64_t v55 = *(int *)(a1 + 296);
  *(_WORD *)a2 = 392;
  if (v55 > 0x7F)
  {
    a2[2] = v55 | 0x80;
    unint64_t v56 = v55 >> 7;
    if (v55 >> 14)
    {
      a2 += 4;
      do
      {
        *(a2 - 1) = v56 | 0x80;
        unint64_t v57 = v56 >> 7;
        ++a2;
        unint64_t v58 = v56 >> 14;
        v56 >>= 7;
      }
      while (v58);
      *(a2 - 1) = v57;
      if ((v11 & 0x40000000) == 0) {
        goto LABEL_155;
      }
    }
    else
    {
      a2[3] = v56;
      a2 += 4;
      if ((v11 & 0x40000000) == 0) {
        goto LABEL_155;
      }
    }
  }
  else
  {
    a2[2] = v55;
    a2 += 3;
    if ((v11 & 0x40000000) == 0) {
      goto LABEL_155;
    }
  }
LABEL_62:
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_19E3AEE48((uint64_t)a3, a2);
  }
  unint64_t v25 = *(int *)(a1 + 300);
  *(_WORD *)a2 = 400;
  if (v25 > 0x7F)
  {
    a2[2] = v25 | 0x80;
    unint64_t v27 = v25 >> 7;
    if (v25 >> 14)
    {
      a2 += 4;
      do
      {
        *(a2 - 1) = v27 | 0x80;
        unint64_t v29 = v27 >> 7;
        ++a2;
        unint64_t v30 = v27 >> 14;
        v27 >>= 7;
      }
      while (v30);
      *(a2 - 1) = v29;
    }
    else
    {
      a2[3] = v27;
      a2 += 4;
    }
  }
  else
  {
    a2[2] = v25;
    a2 += 3;
  }
LABEL_155:
  if (*(unsigned char *)(a1 + 44))
  {
    if (*a3 <= (unint64_t)a2) {
      a2 = sub_19E3AEE48((uint64_t)a3, a2);
    }
    char v59 = *(unsigned char *)(a1 + 308);
    *(_WORD *)a2 = 408;
    a2[2] = v59;
    a2 += 3;
  }
  if ((*(_DWORD *)(a1 + 40) & 0x80000000) != 0)
  {
    if (*a3 <= (unint64_t)a2) {
      a2 = sub_19E3AEE48((uint64_t)a3, a2);
    }
    unint64_t v60 = *(int *)(a1 + 304);
    *(_WORD *)a2 = 416;
    if (v60 > 0x7F)
    {
      a2[2] = v60 | 0x80;
      unint64_t v61 = v60 >> 7;
      if (v60 >> 14)
      {
        a2 += 4;
        do
        {
          *(a2 - 1) = v61 | 0x80;
          unint64_t v62 = v61 >> 7;
          ++a2;
          unint64_t v63 = v61 >> 14;
          v61 >>= 7;
        }
        while (v63);
        *(a2 - 1) = v62;
      }
      else
      {
        a2[3] = v61;
        a2 += 4;
      }
    }
    else
    {
      a2[2] = v60;
      a2 += 3;
    }
  }
  int v64 = *(_DWORD *)(a1 + 44);
  if ((v64 & 2) != 0)
  {
    if (*a3 <= (unint64_t)a2) {
      a2 = sub_19E3AEE48((uint64_t)a3, a2);
    }
    char v65 = *(unsigned char *)(a1 + 309);
    *(_WORD *)a2 = 424;
    a2[2] = v65;
    a2 += 3;
    if ((v64 & 8) == 0)
    {
LABEL_171:
      if ((v64 & 4) == 0) {
        goto LABEL_182;
      }
      goto LABEL_179;
    }
  }
  else if ((v64 & 8) == 0)
  {
    goto LABEL_171;
  }
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_19E3AEE48((uint64_t)a3, a2);
  }
  char v66 = *(unsigned char *)(a1 + 311);
  *(_WORD *)a2 = 432;
  a2[2] = v66;
  a2 += 3;
  if ((v64 & 4) != 0)
  {
LABEL_179:
    if (*a3 <= (unint64_t)a2) {
      a2 = sub_19E3AEE48((uint64_t)a3, a2);
    }
    char v67 = *(unsigned char *)(a1 + 310);
    *(_WORD *)a2 = 440;
    a2[2] = v67;
    a2 += 3;
  }
LABEL_182:
  int v68 = *(_DWORD *)(a1 + 40);
  if ((v68 & 0x4000) != 0)
  {
    if (*a3 <= (unint64_t)a2) {
      a2 = sub_19E3AEE48((uint64_t)a3, a2);
    }
    char v69 = *(unsigned char *)(a1 + 245);
    *(_WORD *)a2 = 448;
    a2[2] = v69;
    a2 += 3;
    if ((v68 & 0x10000) == 0)
    {
LABEL_184:
      if ((v68 & 0x8000) == 0) {
        goto LABEL_195;
      }
      goto LABEL_192;
    }
  }
  else if ((v68 & 0x10000) == 0)
  {
    goto LABEL_184;
  }
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_19E3AEE48((uint64_t)a3, a2);
  }
  char v70 = *(unsigned char *)(a1 + 247);
  *(_WORD *)a2 = 456;
  a2[2] = v70;
  a2 += 3;
  if ((v68 & 0x8000) != 0)
  {
LABEL_192:
    if (*a3 <= (unint64_t)a2) {
      a2 = sub_19E3AEE48((uint64_t)a3, a2);
    }
    char v71 = *(unsigned char *)(a1 + 246);
    *(_WORD *)a2 = 464;
    a2[2] = v71;
    a2 += 3;
  }
LABEL_195:
  int v72 = *(_DWORD *)(a1 + 112);
  if (v72 >= 1)
  {
    for (int k = 0; v72 != k; ++k)
    {
      uint64_t v74 = sub_19E3A9CB4(a1 + 104, k);
      if (*(char *)(v74 + 23) < 0)
      {
        int64_t v75 = *(void *)(v74 + 8);
        if (v75 > 127) {
          goto LABEL_207;
        }
      }
      else
      {
        int64_t v75 = *(unsigned __int8 *)(v74 + 23);
      }
      if (*a3 - (uint64_t)a2 + 13 >= v75)
      {
        *(_WORD *)a2 = 498;
        a2[2] = v75;
        if (*(char *)(v74 + 23) >= 0) {
          uint64_t v76 = (const void *)v74;
        }
        else {
          uint64_t v76 = *(const void **)v74;
        }
        memcpy(a2 + 3, v76, v75);
        a2 += v75 + 3;
        continue;
      }
LABEL_207:
      a2 = sub_19E3AF3B8(a3, 30, v74, a2);
    }
  }
  int v77 = *(_DWORD *)(a1 + 136);
  if (v77 >= 1)
  {
    for (int m = 0; v77 != m; ++m)
    {
      uint64_t v79 = sub_19E3A9CB4(a1 + 128, m);
      if (*(char *)(v79 + 23) < 0)
      {
        int64_t v80 = *(void *)(v79 + 8);
        if (v80 > 127) {
          goto LABEL_220;
        }
      }
      else
      {
        int64_t v80 = *(unsigned __int8 *)(v79 + 23);
      }
      if (*a3 - (uint64_t)a2 + 13 >= v80)
      {
        *(_WORD *)a2 = 506;
        a2[2] = v80;
        if (*(char *)(v79 + 23) >= 0) {
          uint64_t v81 = (const void *)v79;
        }
        else {
          uint64_t v81 = *(const void **)v79;
        }
        memcpy(a2 + 3, v81, v80);
        a2 += v80 + 3;
        continue;
      }
LABEL_220:
      a2 = sub_19E3AF3B8(a3, 31, v79, a2);
    }
  }
  int v82 = *(_DWORD *)(a1 + 44);
  if ((v82 & 0x10) != 0)
  {
    if (*a3 <= (unint64_t)a2) {
      a2 = sub_19E3AEE48((uint64_t)a3, a2);
    }
    char v83 = *(unsigned char *)(a1 + 312);
    *(_WORD *)a2 = 640;
    a2[2] = v83;
    a2 += 3;
  }
  if ((v82 & 0x20) != 0)
  {
    if (*a3 <= (unint64_t)a2) {
      a2 = sub_19E3AEE48((uint64_t)a3, a2);
    }
    char v84 = *(unsigned char *)(a1 + 313);
    *(_WORD *)a2 = 648;
    a2[2] = v84;
    a2 += 3;
  }
  int v85 = *(_DWORD *)(a1 + 40);
  if ((v85 & 0x40000) != 0)
  {
    if (*a3 <= (unint64_t)a2) {
      a2 = sub_19E3AEE48((uint64_t)a3, a2);
    }
    char v86 = *(unsigned char *)(a1 + 249);
    *(_WORD *)a2 = 656;
    a2[2] = v86;
    a2 += 3;
    if ((v85 & 0x20000) == 0)
    {
LABEL_231:
      if ((v85 & 4) == 0) {
        goto LABEL_232;
      }
      goto LABEL_240;
    }
  }
  else if ((v85 & 0x20000) == 0)
  {
    goto LABEL_231;
  }
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_19E3AEE48((uint64_t)a3, a2);
  }
  char v87 = *(unsigned char *)(a1 + 248);
  *(_WORD *)a2 = 664;
  a2[2] = v87;
  a2 += 3;
  if ((v85 & 4) == 0)
  {
LABEL_232:
    if ((v85 & 0x100000) == 0) {
      goto LABEL_250;
    }
    goto LABEL_241;
  }
LABEL_240:
  a2 = sub_19E39E4E4((unint64_t *)a3, 36, (const void **)(*(void *)(a1 + 168) & 0xFFFFFFFFFFFFFFFELL), a2);
  if ((v85 & 0x100000) == 0) {
    goto LABEL_250;
  }
LABEL_241:
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_19E3AEE48((uint64_t)a3, a2);
  }
  unint64_t v88 = *(int *)(a1 + 252);
  *(_WORD *)a2 = 704;
  if (v88 > 0x7F)
  {
    a2[2] = v88 | 0x80;
    unint64_t v89 = v88 >> 7;
    if (v88 >> 14)
    {
      a2 += 4;
      do
      {
        *(a2 - 1) = v89 | 0x80;
        unint64_t v90 = v89 >> 7;
        ++a2;
        unint64_t v91 = v89 >> 14;
        v89 >>= 7;
      }
      while (v91);
      *(a2 - 1) = v90;
    }
    else
    {
      a2[3] = v89;
      a2 += 4;
    }
  }
  else
  {
    a2[2] = v88;
    a2 += 3;
  }
LABEL_250:
  int v92 = *(_DWORD *)(a1 + 44);
  if ((v92 & 0x40) != 0)
  {
    if (*a3 <= (unint64_t)a2) {
      a2 = sub_19E3AEE48((uint64_t)a3, a2);
    }
    unint64_t v94 = *(int *)(a1 + 316);
    *(_WORD *)a2 = 712;
    if (v94 > 0x7F)
    {
      a2[2] = v94 | 0x80;
      unint64_t v96 = v94 >> 7;
      if (v94 >> 14)
      {
        a2 += 4;
        do
        {
          *(a2 - 1) = v96 | 0x80;
          unint64_t v99 = v96 >> 7;
          ++a2;
          unint64_t v100 = v96 >> 14;
          v96 >>= 7;
        }
        while (v100);
        *(a2 - 1) = v99;
        if ((v92 & 0x80) != 0) {
          goto LABEL_273;
        }
      }
      else
      {
        a2[3] = v96;
        a2 += 4;
        if ((v92 & 0x80) != 0) {
          goto LABEL_273;
        }
      }
    }
    else
    {
      a2[2] = v94;
      a2 += 3;
      if ((v92 & 0x80) != 0) {
        goto LABEL_273;
      }
    }
LABEL_252:
    if ((v92 & 0x100) == 0) {
      goto LABEL_284;
    }
    goto LABEL_253;
  }
  if ((v92 & 0x80) == 0) {
    goto LABEL_252;
  }
LABEL_273:
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_19E3AEE48((uint64_t)a3, a2);
  }
  unint64_t v101 = *(int *)(a1 + 320);
  *(_WORD *)a2 = 720;
  if (v101 > 0x7F)
  {
    a2[2] = v101 | 0x80;
    unint64_t v102 = v101 >> 7;
    if (v101 >> 14)
    {
      a2 += 4;
      do
      {
        *(a2 - 1) = v102 | 0x80;
        unint64_t v103 = v102 >> 7;
        ++a2;
        unint64_t v104 = v102 >> 14;
        v102 >>= 7;
      }
      while (v104);
      *(a2 - 1) = v103;
      if ((v92 & 0x100) == 0) {
        goto LABEL_284;
      }
    }
    else
    {
      a2[3] = v102;
      a2 += 4;
      if ((v92 & 0x100) == 0) {
        goto LABEL_284;
      }
    }
  }
  else
  {
    a2[2] = v101;
    a2 += 3;
    if ((v92 & 0x100) == 0) {
      goto LABEL_284;
    }
  }
LABEL_253:
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_19E3AEE48((uint64_t)a3, a2);
  }
  unint64_t v93 = *(int *)(a1 + 324);
  *(_WORD *)a2 = 728;
  if (v93 > 0x7F)
  {
    a2[2] = v93 | 0x80;
    unint64_t v95 = v93 >> 7;
    if (v93 >> 14)
    {
      a2 += 4;
      do
      {
        *(a2 - 1) = v95 | 0x80;
        unint64_t v97 = v95 >> 7;
        ++a2;
        unint64_t v98 = v95 >> 14;
        v95 >>= 7;
      }
      while (v98);
      *(a2 - 1) = v97;
    }
    else
    {
      a2[3] = v95;
      a2 += 4;
    }
  }
  else
  {
    a2[2] = v93;
    a2 += 3;
  }
LABEL_284:
  int v105 = *(_DWORD *)(a1 + 40);
  if ((v105 & 8) != 0)
  {
    a2 = sub_19E39E4E4((unint64_t *)a3, 44, (const void **)(*(void *)(a1 + 176) & 0xFFFFFFFFFFFFFFFELL), a2);
    if ((v105 & 0x10) == 0)
    {
LABEL_286:
      if ((v105 & 0x20) == 0) {
        goto LABEL_287;
      }
      goto LABEL_299;
    }
  }
  else if ((v105 & 0x10) == 0)
  {
    goto LABEL_286;
  }
  a2 = sub_19E39E4E4((unint64_t *)a3, 45, (const void **)(*(void *)(a1 + 184) & 0xFFFFFFFFFFFFFFFELL), a2);
  if ((v105 & 0x20) == 0)
  {
LABEL_287:
    if ((v105 & 0x40) == 0) {
      goto LABEL_288;
    }
    goto LABEL_300;
  }
LABEL_299:
  a2 = sub_19E39E4E4((unint64_t *)a3, 46, (const void **)(*(void *)(a1 + 192) & 0xFFFFFFFFFFFFFFFELL), a2);
  if ((v105 & 0x40) == 0)
  {
LABEL_288:
    if ((v105 & 0x80) == 0) {
      goto LABEL_289;
    }
    goto LABEL_301;
  }
LABEL_300:
  a2 = sub_19E39E4E4((unint64_t *)a3, 47, (const void **)(*(void *)(a1 + 200) & 0xFFFFFFFFFFFFFFFELL), a2);
  if ((v105 & 0x80) == 0)
  {
LABEL_289:
    if ((v105 & 0x80000) == 0) {
      goto LABEL_290;
    }
    goto LABEL_302;
  }
LABEL_301:
  a2 = sub_19E39E4E4((unint64_t *)a3, 48, (const void **)(*(void *)(a1 + 208) & 0xFFFFFFFFFFFFFFFELL), a2);
  if ((v105 & 0x80000) == 0)
  {
LABEL_290:
    if ((v105 & 0x2000) == 0) {
      goto LABEL_291;
    }
    goto LABEL_305;
  }
LABEL_302:
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_19E3AEE48((uint64_t)a3, a2);
  }
  char v110 = *(unsigned char *)(a1 + 250);
  *(_WORD *)a2 = 904;
  a2[2] = v110;
  a2 += 3;
  if ((v105 & 0x2000) == 0)
  {
LABEL_291:
    if ((v105 & 0x200000) == 0) {
      goto LABEL_292;
    }
    goto LABEL_308;
  }
LABEL_305:
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_19E3AEE48((uint64_t)a3, a2);
  }
  char v111 = *(unsigned char *)(a1 + 244);
  *(_WORD *)a2 = 912;
  a2[2] = v111;
  a2 += 3;
  if ((v105 & 0x200000) == 0)
  {
LABEL_292:
    if ((v105 & 0x400000) == 0) {
      goto LABEL_293;
    }
    goto LABEL_311;
  }
LABEL_308:
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_19E3AEE48((uint64_t)a3, a2);
  }
  int v112 = *(_DWORD *)(a1 + 256);
  *(_WORD *)a2 = 925;
  *(_DWORD *)(a2 + 2) = v112;
  a2 += 6;
  if ((v105 & 0x400000) == 0)
  {
LABEL_293:
    if ((v105 & 0x100) == 0) {
      goto LABEL_295;
    }
    goto LABEL_294;
  }
LABEL_311:
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_19E3AEE48((uint64_t)a3, a2);
  }
  unint64_t v113 = *(void *)(a1 + 264);
  *(_WORD *)a2 = 928;
  if (v113 <= 0x7F)
  {
    a2[2] = v113;
    a2 += 3;
    if ((v105 & 0x100) == 0) {
      goto LABEL_295;
    }
LABEL_294:
    a2 = sub_19E39E4E4((unint64_t *)a3, 53, (const void **)(*(void *)(a1 + 216) & 0xFFFFFFFFFFFFFFFELL), a2);
    goto LABEL_295;
  }
  a2[2] = v113 | 0x80;
  unint64_t v114 = v113 >> 7;
  if (v113 >> 14)
  {
    a2 += 4;
    do
    {
      *(a2 - 1) = v114 | 0x80;
      unint64_t v115 = v114 >> 7;
      ++a2;
      unint64_t v116 = v114 >> 14;
      v114 >>= 7;
    }
    while (v116);
    *(a2 - 1) = v115;
    if ((v105 & 0x100) != 0) {
      goto LABEL_294;
    }
  }
  else
  {
    a2[3] = v114;
    a2 += 4;
    if ((v105 & 0x100) != 0) {
      goto LABEL_294;
    }
  }
LABEL_295:
  uint64_t v106 = sub_19E3B6444(a1 + 16, 200, 0x20000000, a2, a3);
  uint64_t v107 = v106;
  uint64_t v108 = *(void *)(a1 + 8);
  if ((v108 & 1) == 0) {
    return v107;
  }
  unint64_t v117 = v108 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v117 + 31) < 0)
  {
    uint64_t v118 = *(void **)(v117 + 8);
    uint64_t v119 = *(void *)(v117 + 16);
  }
  else
  {
    uint64_t v118 = (void *)(v117 + 8);
    LODWORD(v119) = *(unsigned __int8 *)(v117 + 31);
  }
  if (*a3 - (uint64_t)v106 >= (int)v119)
  {
    uint64_t v120 = (int)v119;
    memcpy(v106, v118, (int)v119);
    v107 += v120;
    return v107;
  }
  return sub_19E3AEF5C(a3, (char *)v118, v119, (unint64_t)v106);
}

uint64_t sub_19E3A3FC8(uint64_t a1)
{
  uint64_t v2 = sub_19E3B9178(a1 + 16);
  uint64_t v3 = *(unsigned int *)(a1 + 64);
  uint64_t v4 = v2 + v3;
  if ((int)v3 >= 1)
  {
    int v5 = 0;
    do
    {
      uint64_t v6 = sub_19E3A9CB4(a1 + 56, v5);
      uint64_t v7 = *(unsigned __int8 *)(v6 + 23);
      if ((v7 & 0x80u) != 0) {
        uint64_t v7 = *(void *)(v6 + 8);
      }
      v4 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      ++v5;
    }
    while (v3 != v5);
  }
  uint64_t v8 = *(unsigned int *)(a1 + 88);
  uint64_t v9 = v4 + v8;
  if ((int)v8 >= 1)
  {
    int v10 = 0;
    do
    {
      uint64_t v11 = sub_19E3A9CB4(a1 + 80, v10);
      uint64_t v12 = *(unsigned __int8 *)(v11 + 23);
      if ((v12 & 0x80u) != 0) {
        uint64_t v12 = *(void *)(v11 + 8);
      }
      v9 += v12 + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6);
      ++v10;
    }
    while (v8 != v10);
  }
  uint64_t v13 = *(unsigned int *)(a1 + 112);
  uint64_t v14 = v9 + 2 * v13;
  if ((int)v13 >= 1)
  {
    int v15 = 0;
    do
    {
      uint64_t v16 = sub_19E3A9CB4(a1 + 104, v15);
      uint64_t v17 = *(unsigned __int8 *)(v16 + 23);
      if ((v17 & 0x80u) != 0) {
        uint64_t v17 = *(void *)(v16 + 8);
      }
      v14 += v17 + ((9 * (__clz(v17 | 1) ^ 0x1F) + 73) >> 6);
      ++v15;
    }
    while (v13 != v15);
  }
  uint64_t v18 = *(unsigned int *)(a1 + 136);
  uint64_t v19 = v14 + 2 * v18;
  if ((int)v18 >= 1)
  {
    int v20 = 0;
    do
    {
      uint64_t v21 = sub_19E3A9CB4(a1 + 128, v20);
      uint64_t v22 = *(unsigned __int8 *)(v21 + 23);
      if ((v22 & 0x80u) != 0) {
        uint64_t v22 = *(void *)(v21 + 8);
      }
      v19 += v22 + ((9 * (__clz(v22 | 1) ^ 0x1F) + 73) >> 6);
      ++v20;
    }
    while (v18 != v20);
  }
  unsigned int v23 = *(_DWORD *)(a1 + 40);
  if (!(_BYTE)v23) {
    goto LABEL_33;
  }
  if (v23)
  {
    unint64_t v58 = *(void *)(a1 + 152) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v59 = *(unsigned __int8 *)(v58 + 23);
    uint64_t v60 = *(void *)(v58 + 8);
    if ((v59 & 0x80u) == 0) {
      uint64_t v60 = v59;
    }
    v19 += v60 + ((9 * (__clz(v60 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v23 & 2) == 0)
    {
LABEL_24:
      if ((v23 & 4) == 0) {
        goto LABEL_25;
      }
      goto LABEL_131;
    }
  }
  else if ((v23 & 2) == 0)
  {
    goto LABEL_24;
  }
  unint64_t v61 = *(void *)(a1 + 160) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v62 = *(unsigned __int8 *)(v61 + 23);
  uint64_t v63 = *(void *)(v61 + 8);
  if ((v62 & 0x80u) == 0) {
    uint64_t v63 = v62;
  }
  v19 += v63 + ((9 * (__clz(v63 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v23 & 4) == 0)
  {
LABEL_25:
    if ((v23 & 8) == 0) {
      goto LABEL_26;
    }
    goto LABEL_134;
  }
LABEL_131:
  unint64_t v64 = *(void *)(a1 + 168) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v65 = *(unsigned __int8 *)(v64 + 23);
  uint64_t v66 = *(void *)(v64 + 8);
  if ((v65 & 0x80u) == 0) {
    uint64_t v66 = v65;
  }
  v19 += v66 + ((9 * (__clz(v66 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if ((v23 & 8) == 0)
  {
LABEL_26:
    if ((v23 & 0x10) == 0) {
      goto LABEL_27;
    }
    goto LABEL_137;
  }
LABEL_134:
  unint64_t v67 = *(void *)(a1 + 176) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v68 = *(unsigned __int8 *)(v67 + 23);
  uint64_t v69 = *(void *)(v67 + 8);
  if ((v68 & 0x80u) == 0) {
    uint64_t v69 = v68;
  }
  v19 += v69 + ((9 * (__clz(v69 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if ((v23 & 0x10) == 0)
  {
LABEL_27:
    if ((v23 & 0x20) == 0) {
      goto LABEL_28;
    }
LABEL_140:
    unint64_t v73 = *(void *)(a1 + 192) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v74 = *(unsigned __int8 *)(v73 + 23);
    uint64_t v75 = *(void *)(v73 + 8);
    if ((v74 & 0x80u) == 0) {
      uint64_t v75 = v74;
    }
    v19 += v75 + ((9 * (__clz(v75 | 1) ^ 0x1F) + 73) >> 6) + 2;
    if ((v23 & 0x40) == 0)
    {
LABEL_29:
      if ((v23 & 0x80) == 0) {
        goto LABEL_33;
      }
      goto LABEL_30;
    }
    goto LABEL_143;
  }
LABEL_137:
  unint64_t v70 = *(void *)(a1 + 184) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v71 = *(unsigned __int8 *)(v70 + 23);
  uint64_t v72 = *(void *)(v70 + 8);
  if ((v71 & 0x80u) == 0) {
    uint64_t v72 = v71;
  }
  v19 += v72 + ((9 * (__clz(v72 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if ((v23 & 0x20) != 0) {
    goto LABEL_140;
  }
LABEL_28:
  if ((v23 & 0x40) == 0) {
    goto LABEL_29;
  }
LABEL_143:
  unint64_t v76 = *(void *)(a1 + 200) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v77 = *(unsigned __int8 *)(v76 + 23);
  uint64_t v78 = *(void *)(v76 + 8);
  if ((v77 & 0x80u) == 0) {
    uint64_t v78 = v77;
  }
  v19 += v78 + ((9 * (__clz(v78 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if ((v23 & 0x80) != 0)
  {
LABEL_30:
    unint64_t v24 = *(void *)(a1 + 208) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v25 = *(unsigned __int8 *)(v24 + 23);
    uint64_t v26 = *(void *)(v24 + 8);
    if ((v25 & 0x80u) == 0) {
      uint64_t v26 = v25;
    }
    v19 += v26 + ((9 * (__clz(v26 | 1) ^ 0x1F) + 73) >> 6) + 2;
  }
LABEL_33:
  if ((v23 & 0xFF00) == 0) {
    goto LABEL_50;
  }
  if ((v23 & 0x100) != 0)
  {
    unint64_t v79 = *(void *)(a1 + 216) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v80 = *(unsigned __int8 *)(v79 + 23);
    uint64_t v81 = *(void *)(v79 + 8);
    if ((v80 & 0x80u) == 0) {
      uint64_t v81 = v80;
    }
    v19 += v81 + ((9 * (__clz(v81 | 1) ^ 0x1F) + 73) >> 6) + 2;
    if ((v23 & 0x200) == 0)
    {
LABEL_36:
      if ((v23 & 0x400) == 0) {
        goto LABEL_37;
      }
      goto LABEL_154;
    }
  }
  else if ((v23 & 0x200) == 0)
  {
    goto LABEL_36;
  }
  int v82 = *(_DWORD *)(a1 + 224);
  uint64_t v83 = (9 * (__clz(v82 | 1) ^ 0x1F) + 73) >> 6;
  if (v82 >= 0) {
    uint64_t v84 = v83;
  }
  else {
    uint64_t v84 = 10;
  }
  v19 += v84 + 1;
  if ((v23 & 0x400) == 0)
  {
LABEL_37:
    if ((v23 & 0x800) == 0) {
      goto LABEL_38;
    }
LABEL_158:
    v19 += ((9 * (__clz(*(void *)(a1 + 232) | 1) ^ 0x3F) + 73) >> 6) + 1;
    if ((v23 & 0x1000) != 0) {
      goto LABEL_39;
    }
    goto LABEL_43;
  }
LABEL_154:
  int v85 = *(_DWORD *)(a1 + 228);
  uint64_t v86 = (9 * (__clz(v85 | 1) ^ 0x1F) + 73) >> 6;
  if (v85 >= 0) {
    uint64_t v87 = v86;
  }
  else {
    uint64_t v87 = 10;
  }
  v19 += v87 + 1;
  if ((v23 & 0x800) != 0) {
    goto LABEL_158;
  }
LABEL_38:
  if ((v23 & 0x1000) != 0)
  {
LABEL_39:
    int v27 = *(_DWORD *)(a1 + 240);
    uint64_t v28 = (9 * (__clz(v27 | 1) ^ 0x1F) + 73) >> 6;
    if (v27 >= 0) {
      uint64_t v29 = v28;
    }
    else {
      uint64_t v29 = 10;
    }
    v19 += v29 + 1;
  }
LABEL_43:
  uint64_t v30 = v19 + 3;
  if ((v23 & 0x2000) == 0) {
    uint64_t v30 = v19;
  }
  if ((v23 & 0x4000) != 0) {
    v30 += 3;
  }
  if ((v23 & 0x8000) != 0) {
    uint64_t v19 = v30 + 3;
  }
  else {
    uint64_t v19 = v30;
  }
LABEL_50:
  if ((v23 & 0xFF0000) != 0)
  {
    uint64_t v31 = v19 + 3;
    if ((v23 & 0x10000) == 0) {
      uint64_t v31 = v19;
    }
    if ((v23 & 0x20000) != 0) {
      v31 += 3;
    }
    if ((v23 & 0x40000) != 0) {
      v31 += 3;
    }
    if ((v23 & 0x80000) != 0) {
      v31 += 3;
    }
    if ((v23 & 0x100000) != 0)
    {
      int v32 = *(_DWORD *)(a1 + 252);
      uint64_t v33 = (9 * (__clz(v32 | 1) ^ 0x1F) + 73) >> 6;
      if (v32 >= 0) {
        uint64_t v34 = v33;
      }
      else {
        uint64_t v34 = 10;
      }
      v31 += v34 + 2;
    }
    if ((v23 & 0x200000) != 0) {
      uint64_t v19 = v31 + 6;
    }
    else {
      uint64_t v19 = v31;
    }
    if ((v23 & 0x400000) != 0) {
      v19 += ((9 * (__clz(*(void *)(a1 + 264) | 1) ^ 0x3F) + 73) >> 6) + 2;
    }
    if ((v23 & 0x800000) != 0)
    {
      int v35 = *(_DWORD *)(a1 + 272);
      uint64_t v36 = (9 * (__clz(v35 | 1) ^ 0x1F) + 73) >> 6;
      if (v35 >= 0) {
        uint64_t v37 = v36;
      }
      else {
        uint64_t v37 = 10;
      }
      v19 += v37 + 1;
    }
  }
  if (!HIBYTE(v23)) {
    goto LABEL_94;
  }
  if ((v23 & 0x1000000) != 0)
  {
    int v38 = *(_DWORD *)(a1 + 276);
    uint64_t v39 = (9 * (__clz(v38 | 1) ^ 0x1F) + 73) >> 6;
    if (v38 >= 0) {
      uint64_t v40 = v39;
    }
    else {
      uint64_t v40 = 10;
    }
    v19 += v40 + 1;
  }
  uint64_t v41 = v19 + 5;
  if ((v23 & 0x2000000) == 0) {
    uint64_t v41 = v19;
  }
  if ((v23 & 0x4000000) != 0)
  {
    int v42 = *(_DWORD *)(a1 + 284);
    uint64_t v43 = (9 * (__clz(v42 | 1) ^ 0x1F) + 73) >> 6;
    if (v42 >= 0) {
      uint64_t v44 = v43;
    }
    else {
      uint64_t v44 = 10;
    }
    v41 += v44 + 1;
  }
  if ((v23 & 0x8000000) != 0) {
    uint64_t v19 = v41 + 5;
  }
  else {
    uint64_t v19 = v41;
  }
  if ((v23 & 0x10000000) == 0)
  {
    if ((v23 & 0x20000000) == 0) {
      goto LABEL_92;
    }
LABEL_164:
    int v91 = *(_DWORD *)(a1 + 296);
    uint64_t v92 = ((9 * (__clz(v91 | 1) ^ 0x1F) + 73) >> 6) + 2;
    if (v91 >= 0) {
      uint64_t v93 = v92;
    }
    else {
      uint64_t v93 = 12;
    }
    v19 += v93;
    if ((v23 & 0x40000000) == 0)
    {
LABEL_93:
      if ((v23 & 0x80000000) == 0) {
        goto LABEL_94;
      }
      goto LABEL_172;
    }
    goto LABEL_168;
  }
  int v88 = *(_DWORD *)(a1 + 292);
  uint64_t v89 = (9 * (__clz(v88 | 1) ^ 0x1F) + 73) >> 6;
  if (v88 >= 0) {
    uint64_t v90 = v89;
  }
  else {
    uint64_t v90 = 10;
  }
  v19 += v90 + 2;
  if ((v23 & 0x20000000) != 0) {
    goto LABEL_164;
  }
LABEL_92:
  if ((v23 & 0x40000000) == 0) {
    goto LABEL_93;
  }
LABEL_168:
  int v94 = *(_DWORD *)(a1 + 300);
  uint64_t v95 = ((9 * (__clz(v94 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if (v94 >= 0) {
    uint64_t v96 = v95;
  }
  else {
    uint64_t v96 = 12;
  }
  v19 += v96;
  if ((v23 & 0x80000000) != 0)
  {
LABEL_172:
    int v97 = *(_DWORD *)(a1 + 304);
    uint64_t v98 = ((9 * (__clz(v97 | 1) ^ 0x1F) + 73) >> 6) + 2;
    if (v97 >= 0) {
      uint64_t v99 = v98;
    }
    else {
      uint64_t v99 = 12;
    }
    v19 += v99;
  }
LABEL_94:
  int v45 = *(_DWORD *)(a1 + 44);
  if ((_BYTE)v45)
  {
    uint64_t v46 = v19 + 3;
    if ((v45 & 1) == 0) {
      uint64_t v46 = v19;
    }
    if ((v45 & 2) != 0) {
      v46 += 3;
    }
    if ((v45 & 4) != 0) {
      v46 += 3;
    }
    if ((v45 & 8) != 0) {
      v46 += 3;
    }
    if ((v45 & 0x10) != 0) {
      v46 += 3;
    }
    if ((v45 & 0x20) != 0) {
      uint64_t v19 = v46 + 3;
    }
    else {
      uint64_t v19 = v46;
    }
    if ((v45 & 0x40) != 0)
    {
      int v47 = *(_DWORD *)(a1 + 316);
      uint64_t v48 = ((9 * (__clz(v47 | 1) ^ 0x1F) + 73) >> 6) + 2;
      if (v47 >= 0) {
        uint64_t v49 = v48;
      }
      else {
        uint64_t v49 = 12;
      }
      v19 += v49;
    }
    if ((v45 & 0x80) != 0)
    {
      int v50 = *(_DWORD *)(a1 + 320);
      uint64_t v51 = ((9 * (__clz(v50 | 1) ^ 0x1F) + 73) >> 6) + 2;
      if (v50 >= 0) {
        uint64_t v52 = v51;
      }
      else {
        uint64_t v52 = 12;
      }
      v19 += v52;
    }
  }
  if ((v45 & 0x100) != 0)
  {
    int v53 = *(_DWORD *)(a1 + 324);
    uint64_t v54 = ((9 * (__clz(v53 | 1) ^ 0x1F) + 73) >> 6) + 2;
    if (v53 >= 0) {
      uint64_t v55 = v54;
    }
    else {
      uint64_t v55 = 12;
    }
    v19 += v55;
  }
  uint64_t v56 = *(void *)(a1 + 8);
  if (v56)
  {
    unint64_t v100 = v56 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v100 + 31) < 0) {
      uint64_t v101 = *(void *)(v100 + 16);
    }
    else {
      uint64_t v101 = *(unsigned __int8 *)(v100 + 31);
    }
    v19 += v101;
  }
  *(_DWORD *)(a1 + 48) = v19;
  return v19;
}

unint64_t sub_19E3A4878(uint64_t a1, void *lpsrc)
{
  if (!__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0B75B0, (const struct __class_type_info *)&unk_1EF0B5F18, 0))sub_19E3A0D08(); {
  return sub_19E3A4900(a1, (uint64_t)lpsrc);
  }
}

unint64_t sub_19E3A4900(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    sub_19E3AF8D4((uint64_t)v45, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 1671);
    uint64_t v4 = sub_19E3AF8EC(v45, "CHECK failed: (&from) != (this): ");
    sub_19E3AFA28((uint64_t)&v44, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v45);
  }
  sub_19E3B3E1C(a1 + 16, a2 + 16);
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5)
  {
    unint64_t v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    uint64_t v8 = *(void *)(a1 + 8);
    if (v8) {
      uint64_t v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      uint64_t v9 = (std::string *)sub_19E3A0504((unint64_t *)(a1 + 8));
    }
    int v10 = *(char *)(v6 + 31);
    if (v10 >= 0) {
      uint64_t v11 = (const std::string::value_type *)v7;
    }
    else {
      uint64_t v11 = *(const std::string::value_type **)(v6 + 8);
    }
    if (v10 >= 0) {
      std::string::size_type v12 = *(unsigned __int8 *)(v6 + 31);
    }
    else {
      std::string::size_type v12 = *(void *)(v6 + 16);
    }
    std::string::append(v9, v11, v12);
  }
  sub_19E3A9EF4(a1 + 56, a2 + 56);
  sub_19E3A9EF4(a1 + 80, a2 + 80);
  sub_19E3A9EF4(a1 + 104, a2 + 104);
  unint64_t result = sub_19E3A9EF4(a1 + 128, a2 + 128);
  unsigned int v14 = *(_DWORD *)(a2 + 40);
  if (!(_BYTE)v14) {
    goto LABEL_47;
  }
  if (v14)
  {
    int v15 = (long long *)(*(void *)(a2 + 152) & 0xFFFFFFFFFFFFFFFELL);
    *(_DWORD *)(a1 + 40) |= 1u;
    uint64_t v16 = *(void *)(a1 + 8);
    uint64_t v17 = (void *)(v16 & 0xFFFFFFFFFFFFFFFELL);
    if (v16) {
      uint64_t v17 = (void *)*v17;
    }
    unint64_t result = sub_19E3AE6F8((uint64_t *)(a1 + 152), v15, (uint64_t)v17);
    if ((v14 & 2) == 0)
    {
LABEL_16:
      if ((v14 & 4) == 0) {
        goto LABEL_17;
      }
      goto LABEL_29;
    }
  }
  else if ((v14 & 2) == 0)
  {
    goto LABEL_16;
  }
  uint64_t v18 = (long long *)(*(void *)(a2 + 160) & 0xFFFFFFFFFFFFFFFELL);
  *(_DWORD *)(a1 + 40) |= 2u;
  uint64_t v19 = *(void *)(a1 + 8);
  int v20 = (void *)(v19 & 0xFFFFFFFFFFFFFFFELL);
  if (v19) {
    int v20 = (void *)*v20;
  }
  unint64_t result = sub_19E3AE6F8((uint64_t *)(a1 + 160), v18, (uint64_t)v20);
  if ((v14 & 4) == 0)
  {
LABEL_17:
    if ((v14 & 8) == 0) {
      goto LABEL_18;
    }
    goto LABEL_32;
  }
LABEL_29:
  uint64_t v21 = (long long *)(*(void *)(a2 + 168) & 0xFFFFFFFFFFFFFFFELL);
  *(_DWORD *)(a1 + 40) |= 4u;
  uint64_t v22 = *(void *)(a1 + 8);
  unsigned int v23 = (void *)(v22 & 0xFFFFFFFFFFFFFFFELL);
  if (v22) {
    unsigned int v23 = (void *)*v23;
  }
  unint64_t result = sub_19E3AE6F8((uint64_t *)(a1 + 168), v21, (uint64_t)v23);
  if ((v14 & 8) == 0)
  {
LABEL_18:
    if ((v14 & 0x10) == 0) {
      goto LABEL_19;
    }
    goto LABEL_35;
  }
LABEL_32:
  unint64_t v24 = (long long *)(*(void *)(a2 + 176) & 0xFFFFFFFFFFFFFFFELL);
  *(_DWORD *)(a1 + 40) |= 8u;
  uint64_t v25 = *(void *)(a1 + 8);
  uint64_t v26 = (void *)(v25 & 0xFFFFFFFFFFFFFFFELL);
  if (v25) {
    uint64_t v26 = (void *)*v26;
  }
  unint64_t result = sub_19E3AE720((uint64_t *)(a1 + 176), v24, (uint64_t)v26);
  if ((v14 & 0x10) == 0)
  {
LABEL_19:
    if ((v14 & 0x20) == 0) {
      goto LABEL_20;
    }
LABEL_38:
    uint64_t v30 = (long long *)(*(void *)(a2 + 192) & 0xFFFFFFFFFFFFFFFELL);
    *(_DWORD *)(a1 + 40) |= 0x20u;
    uint64_t v31 = *(void *)(a1 + 8);
    int v32 = (void *)(v31 & 0xFFFFFFFFFFFFFFFELL);
    if (v31) {
      int v32 = (void *)*v32;
    }
    unint64_t result = sub_19E3AE720((uint64_t *)(a1 + 192), v30, (uint64_t)v32);
    if ((v14 & 0x40) == 0)
    {
LABEL_21:
      if ((v14 & 0x80) == 0) {
        goto LABEL_47;
      }
      goto LABEL_44;
    }
    goto LABEL_41;
  }
LABEL_35:
  int v27 = (long long *)(*(void *)(a2 + 184) & 0xFFFFFFFFFFFFFFFELL);
  *(_DWORD *)(a1 + 40) |= 0x10u;
  uint64_t v28 = *(void *)(a1 + 8);
  uint64_t v29 = (void *)(v28 & 0xFFFFFFFFFFFFFFFELL);
  if (v28) {
    uint64_t v29 = (void *)*v29;
  }
  unint64_t result = sub_19E3AE720((uint64_t *)(a1 + 184), v27, (uint64_t)v29);
  if ((v14 & 0x20) != 0) {
    goto LABEL_38;
  }
LABEL_20:
  if ((v14 & 0x40) == 0) {
    goto LABEL_21;
  }
LABEL_41:
  uint64_t v33 = (long long *)(*(void *)(a2 + 200) & 0xFFFFFFFFFFFFFFFELL);
  *(_DWORD *)(a1 + 40) |= 0x40u;
  uint64_t v34 = *(void *)(a1 + 8);
  int v35 = (void *)(v34 & 0xFFFFFFFFFFFFFFFELL);
  if (v34) {
    int v35 = (void *)*v35;
  }
  unint64_t result = sub_19E3AE720((uint64_t *)(a1 + 200), v33, (uint64_t)v35);
  if ((v14 & 0x80) != 0)
  {
LABEL_44:
    uint64_t v36 = (long long *)(*(void *)(a2 + 208) & 0xFFFFFFFFFFFFFFFELL);
    *(_DWORD *)(a1 + 40) |= 0x80u;
    uint64_t v37 = *(void *)(a1 + 8);
    int v38 = (void *)(v37 & 0xFFFFFFFFFFFFFFFELL);
    if (v37) {
      int v38 = (void *)*v38;
    }
    unint64_t result = sub_19E3AE720((uint64_t *)(a1 + 208), v36, (uint64_t)v38);
  }
LABEL_47:
  if ((v14 & 0xFF00) == 0) {
    goto LABEL_58;
  }
  if ((v14 & 0x100) != 0)
  {
    uint64_t v41 = (long long *)(*(void *)(a2 + 216) & 0xFFFFFFFFFFFFFFFELL);
    *(_DWORD *)(a1 + 40) |= 0x100u;
    uint64_t v42 = *(void *)(a1 + 8);
    uint64_t v43 = (void *)(v42 & 0xFFFFFFFFFFFFFFFELL);
    if (v42) {
      uint64_t v43 = (void *)*v43;
    }
    unint64_t result = sub_19E3AE6F8((uint64_t *)(a1 + 216), v41, (uint64_t)v43);
    if ((v14 & 0x200) == 0)
    {
LABEL_50:
      if ((v14 & 0x400) == 0) {
        goto LABEL_51;
      }
      goto LABEL_97;
    }
  }
  else if ((v14 & 0x200) == 0)
  {
    goto LABEL_50;
  }
  *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
  if ((v14 & 0x400) == 0)
  {
LABEL_51:
    if ((v14 & 0x800) == 0) {
      goto LABEL_52;
    }
    goto LABEL_98;
  }
LABEL_97:
  *(_DWORD *)(a1 + 228) = *(_DWORD *)(a2 + 228);
  if ((v14 & 0x800) == 0)
  {
LABEL_52:
    if ((v14 & 0x1000) == 0) {
      goto LABEL_53;
    }
    goto LABEL_99;
  }
LABEL_98:
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  if ((v14 & 0x1000) == 0)
  {
LABEL_53:
    if ((v14 & 0x2000) == 0) {
      goto LABEL_54;
    }
    goto LABEL_100;
  }
LABEL_99:
  *(_DWORD *)(a1 + 24sub_19E392864(&a9, 0) = *(_DWORD *)(a2 + 240);
  if ((v14 & 0x2000) == 0)
  {
LABEL_54:
    if ((v14 & 0x4000) == 0) {
      goto LABEL_55;
    }
LABEL_101:
    *(unsigned char *)(a1 + 245) = *(unsigned char *)(a2 + 245);
    if ((v14 & 0x8000) == 0) {
      goto LABEL_57;
    }
    goto LABEL_56;
  }
LABEL_100:
  *(unsigned char *)(a1 + 244) = *(unsigned char *)(a2 + 244);
  if ((v14 & 0x4000) != 0) {
    goto LABEL_101;
  }
LABEL_55:
  if ((v14 & 0x8000) != 0) {
LABEL_56:
  }
    *(unsigned char *)(a1 + 246) = *(unsigned char *)(a2 + 246);
LABEL_57:
  *(_DWORD *)(a1 + 40) |= v14;
LABEL_58:
  if ((v14 & 0xFF0000) == 0) {
    goto LABEL_69;
  }
  if ((v14 & 0x10000) != 0)
  {
    *(unsigned char *)(a1 + 247) = *(unsigned char *)(a2 + 247);
    if ((v14 & 0x20000) == 0)
    {
LABEL_61:
      if ((v14 & 0x40000) == 0) {
        goto LABEL_62;
      }
      goto LABEL_105;
    }
  }
  else if ((v14 & 0x20000) == 0)
  {
    goto LABEL_61;
  }
  *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
  if ((v14 & 0x40000) == 0)
  {
LABEL_62:
    if ((v14 & 0x80000) == 0) {
      goto LABEL_63;
    }
    goto LABEL_106;
  }
LABEL_105:
  *(unsigned char *)(a1 + 249) = *(unsigned char *)(a2 + 249);
  if ((v14 & 0x80000) == 0)
  {
LABEL_63:
    if ((v14 & 0x100000) == 0) {
      goto LABEL_64;
    }
    goto LABEL_107;
  }
LABEL_106:
  *(unsigned char *)(a1 + 25sub_19E392864(&a9, 0) = *(unsigned char *)(a2 + 250);
  if ((v14 & 0x100000) == 0)
  {
LABEL_64:
    if ((v14 & 0x200000) == 0) {
      goto LABEL_65;
    }
    goto LABEL_108;
  }
LABEL_107:
  *(_DWORD *)(a1 + 252) = *(_DWORD *)(a2 + 252);
  if ((v14 & 0x200000) == 0)
  {
LABEL_65:
    if ((v14 & 0x400000) == 0) {
      goto LABEL_66;
    }
LABEL_109:
    *(void *)(a1 + 264) = *(void *)(a2 + 264);
    if ((v14 & 0x800000) == 0) {
      goto LABEL_68;
    }
    goto LABEL_67;
  }
LABEL_108:
  *(_DWORD *)(a1 + 256) = *(_DWORD *)(a2 + 256);
  if ((v14 & 0x400000) != 0) {
    goto LABEL_109;
  }
LABEL_66:
  if ((v14 & 0x800000) != 0) {
LABEL_67:
  }
    *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
LABEL_68:
  *(_DWORD *)(a1 + 40) |= v14;
LABEL_69:
  if (!HIBYTE(v14)) {
    goto LABEL_79;
  }
  if ((v14 & 0x1000000) != 0)
  {
    *(_DWORD *)(a1 + 276) = *(_DWORD *)(a2 + 276);
    if ((v14 & 0x2000000) == 0)
    {
LABEL_72:
      if ((v14 & 0x4000000) == 0) {
        goto LABEL_73;
      }
      goto LABEL_121;
    }
  }
  else if ((v14 & 0x2000000) == 0)
  {
    goto LABEL_72;
  }
  *(_DWORD *)(a1 + 28sub_19E392864(&a9, 0) = *(_DWORD *)(a2 + 280);
  if ((v14 & 0x4000000) == 0)
  {
LABEL_73:
    if ((v14 & 0x8000000) == 0) {
      goto LABEL_74;
    }
    goto LABEL_122;
  }
LABEL_121:
  *(_DWORD *)(a1 + 284) = *(_DWORD *)(a2 + 284);
  if ((v14 & 0x8000000) == 0)
  {
LABEL_74:
    if ((v14 & 0x10000000) == 0) {
      goto LABEL_75;
    }
    goto LABEL_123;
  }
LABEL_122:
  *(_DWORD *)(a1 + 288) = *(_DWORD *)(a2 + 288);
  if ((v14 & 0x10000000) == 0)
  {
LABEL_75:
    if ((v14 & 0x20000000) == 0) {
      goto LABEL_76;
    }
    goto LABEL_124;
  }
LABEL_123:
  *(_DWORD *)(a1 + 292) = *(_DWORD *)(a2 + 292);
  if ((v14 & 0x20000000) == 0)
  {
LABEL_76:
    if ((v14 & 0x40000000) == 0) {
      goto LABEL_77;
    }
LABEL_125:
    *(_DWORD *)(a1 + 30sub_19E392864(&a9, 0) = *(_DWORD *)(a2 + 300);
    if ((v14 & 0x80000000) == 0) {
      goto LABEL_78;
    }
LABEL_126:
    *(_DWORD *)(a1 + 304) = *(_DWORD *)(a2 + 304);
    goto LABEL_78;
  }
LABEL_124:
  *(_DWORD *)(a1 + 296) = *(_DWORD *)(a2 + 296);
  if ((v14 & 0x40000000) != 0) {
    goto LABEL_125;
  }
LABEL_77:
  if ((v14 & 0x80000000) != 0) {
    goto LABEL_126;
  }
LABEL_78:
  *(_DWORD *)(a1 + 40) |= v14;
LABEL_79:
  int v39 = *(_DWORD *)(a2 + 44);
  if (!(_BYTE)v39) {
    goto LABEL_90;
  }
  if (v39)
  {
    *(unsigned char *)(a1 + 308) = *(unsigned char *)(a2 + 308);
    if ((v39 & 2) == 0)
    {
LABEL_82:
      if ((v39 & 4) == 0) {
        goto LABEL_83;
      }
      goto LABEL_113;
    }
  }
  else if ((v39 & 2) == 0)
  {
    goto LABEL_82;
  }
  *(unsigned char *)(a1 + 309) = *(unsigned char *)(a2 + 309);
  if ((v39 & 4) == 0)
  {
LABEL_83:
    if ((v39 & 8) == 0) {
      goto LABEL_84;
    }
    goto LABEL_114;
  }
LABEL_113:
  *(unsigned char *)(a1 + 31sub_19E392864(&a9, 0) = *(unsigned char *)(a2 + 310);
  if ((v39 & 8) == 0)
  {
LABEL_84:
    if ((v39 & 0x10) == 0) {
      goto LABEL_85;
    }
    goto LABEL_115;
  }
LABEL_114:
  *(unsigned char *)(a1 + 311) = *(unsigned char *)(a2 + 311);
  if ((v39 & 0x10) == 0)
  {
LABEL_85:
    if ((v39 & 0x20) == 0) {
      goto LABEL_86;
    }
    goto LABEL_116;
  }
LABEL_115:
  *(unsigned char *)(a1 + 312) = *(unsigned char *)(a2 + 312);
  if ((v39 & 0x20) == 0)
  {
LABEL_86:
    if ((v39 & 0x40) == 0) {
      goto LABEL_87;
    }
LABEL_117:
    *(_DWORD *)(a1 + 316) = *(_DWORD *)(a2 + 316);
    if ((v39 & 0x80) == 0) {
      goto LABEL_89;
    }
    goto LABEL_88;
  }
LABEL_116:
  *(unsigned char *)(a1 + 313) = *(unsigned char *)(a2 + 313);
  if ((v39 & 0x40) != 0) {
    goto LABEL_117;
  }
LABEL_87:
  if ((v39 & 0x80) != 0) {
LABEL_88:
  }
    *(_DWORD *)(a1 + 32sub_19E392864(&a9, 0) = *(_DWORD *)(a2 + 320);
LABEL_89:
  *(_DWORD *)(a1 + 44) |= v39;
LABEL_90:
  if ((v39 & 0x100) != 0)
  {
    int v40 = *(_DWORD *)(a2 + 324);
    *(_DWORD *)(a1 + 44) |= 0x100u;
    *(_DWORD *)(a1 + 324) = v40;
  }
  return result;
}

void sub_19E3A4E5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E3A4E74(uint64_t a1)
{
  return sub_19E3B52AC(a1 + 16);
}

void *sub_19E3A4E7C@<X0>(void *a1@<X8>)
{
  return sub_19E382340(a1, "sentencepiece.TrainerSpec");
}

uint64_t sub_19E3A4E8C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1EF0B8A90;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = &unk_1EF0B8B30;
  sub_19E3AFEF4(a1 + 24, a2);
  *(void *)(a1 + 48) = 0;
  if (atomic_load_explicit(dword_1EC304F70, memory_order_acquire)) {
    sub_19E3BB484(dword_1EC304F70);
  }
  *(void *)(a1 + 56) = &qword_1E945A358;
  *(void *)(a1 + 64) = &qword_1E945A358;
  *(void *)(a1 + 72) = &qword_1E945A358;
  *(_DWORD *)(a1 + 8sub_19E392864(&a9, 0) = 16843008;
  return a1;
}

void sub_19E3A4F38(_Unwind_Exception *a1)
{
  sub_19E3AFFD4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19E3A4F4C(uint64_t a1)
{
  return a1;
}

uint64_t *sub_19E3A4F88(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = (void *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) == 0)
  {
    if (!v3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (*v3)
  {
LABEL_3:
    sub_19E3AF8D4((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 1972);
    uint64_t v4 = sub_19E3AF8EC(v15, "CHECK failed: GetArena() == nullptr: ");
    sub_19E3AFA28((uint64_t)&v14, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v15);
  }
LABEL_4:
  if (*(uint64_t **)(a1 + 56) != &qword_1E945A358)
  {
    uint64_t v5 = sub_19E3A02F0((uint64_t *)(a1 + 56));
    uint64_t v6 = v5;
    if (*(char *)(v5 + 23) < 0) {
      operator delete(*(void **)v5);
    }
    MEMORY[0x19F3BDCF0](v6, 0x1012C40EC159624);
  }
  unint64_t result = (uint64_t *)(a1 + 64);
  if (*(uint64_t **)(a1 + 64) != &qword_1E945A358)
  {
    uint64_t v8 = sub_19E3A02F0(result);
    uint64_t v9 = v8;
    if (*(char *)(v8 + 23) < 0) {
      operator delete(*(void **)v8);
    }
    unint64_t result = (uint64_t *)MEMORY[0x19F3BDCF0](v9, 0x1012C40EC159624);
  }
  uint64_t v11 = *(uint64_t **)(a1 + 72);
  int v10 = (uint64_t *)(a1 + 72);
  if (v11 != &qword_1E945A358)
  {
    uint64_t v12 = sub_19E3A02F0(v10);
    uint64_t v13 = v12;
    if (*(char *)(v12 + 23) < 0) {
      operator delete(*(void **)v12);
    }
    return (uint64_t *)MEMORY[0x19F3BDCF0](v13, 0x1012C40EC159624);
  }
  return result;
}

void sub_19E3A50D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E3A50F4(uint64_t a1)
{
  return sub_19E3A4F4C(a1 - 16);
}

void sub_19E3A50FC(uint64_t a1)
{
  sub_19E3A4F4C(a1);
  JUMPOUT(0x19F3BDCF0);
}

void sub_19E3A5134(uint64_t a1)
{
  sub_19E3A4F4C(a1 - 16);
  JUMPOUT(0x19F3BDCF0);
}

unsigned __int8 *sub_19E3A5170(uint64_t a1)
{
  unint64_t result = sub_19E3B3D7C((unsigned __int8 *)(a1 + 24));
  int v3 = *(_DWORD *)(a1 + 48);
  if ((v3 & 7) != 0)
  {
    if ((v3 & 1) == 0)
    {
      if ((v3 & 2) == 0) {
        goto LABEL_4;
      }
LABEL_10:
      unint64_t v5 = *(void *)(a1 + 64) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v5 + 23) < 0)
      {
        **(unsigned char **)unint64_t v5 = 0;
        *(void *)(v5 + 8) = 0;
        if ((v3 & 4) == 0) {
          goto LABEL_17;
        }
      }
      else
      {
        *(unsigned char *)unint64_t v5 = 0;
        *(unsigned char *)(v5 + 23) = 0;
        if ((v3 & 4) == 0) {
          goto LABEL_17;
        }
      }
      goto LABEL_14;
    }
    unint64_t v4 = *(void *)(a1 + 56) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v4 + 23) < 0)
    {
      **(unsigned char **)unint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
      if ((v3 & 2) != 0) {
        goto LABEL_10;
      }
    }
    else
    {
      *(unsigned char *)unint64_t v4 = 0;
      *(unsigned char *)(v4 + 23) = 0;
      if ((v3 & 2) != 0) {
        goto LABEL_10;
      }
    }
LABEL_4:
    if ((v3 & 4) == 0) {
      goto LABEL_17;
    }
LABEL_14:
    unint64_t v6 = *(void *)(a1 + 72) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v6 + 23) < 0)
    {
      **(unsigned char **)unint64_t v6 = 0;
      *(void *)(v6 + 8) = 0;
    }
    else
    {
      *(unsigned char *)unint64_t v6 = 0;
      *(unsigned char *)(v6 + 23) = 0;
    }
  }
LABEL_17:
  if ((v3 & 0x78) != 0) {
    *(_DWORD *)(a1 + 8sub_19E392864(&a9, 0) = 16843008;
  }
  *(_DWORD *)(a1 + 48) = 0;
  uint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    unint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v8 + 31) < 0)
    {
      **(unsigned char **)(v8 + 8) = 0;
      *(void *)(v8 + 16) = 0;
    }
    else
    {
      *(unsigned char *)(v8 + 8) = 0;
      *(unsigned char *)(v8 + 31) = 0;
    }
  }
  return result;
}

uint64_t sub_19E3A5280(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  *(void *)uint64_t v42 = a2;
  int v5 = 0;
  if ((sub_19E3A03C4((uint64_t)a3, (char **)v42, a3[11].i32[1]) & 1) == 0)
  {
    uint64_t v7 = (void *)(a1 + 8);
    while (1)
    {
      unint64_t v8 = (char *)(*(void *)v42 + 1);
      unsigned int v9 = **(unsigned char **)v42;
      if ((char)**(unsigned char **)v42 < 0)
      {
        unsigned int v10 = v9 + (*v8 << 7);
        unsigned int v9 = v10 - 128;
        if (*v8 < 0)
        {
          uint64_t v17 = sub_19E3BCF3C(*(uint64_t *)v42, v10 - 128);
          *(void *)uint64_t v42 = v17;
          if (!v17) {
            goto LABEL_67;
          }
          unint64_t v8 = (char *)v17;
          unsigned int v9 = v18;
          goto LABEL_8;
        }
        unint64_t v8 = (char *)(*(void *)v42 + 2);
      }
      *(void *)uint64_t v42 = v8;
LABEL_8:
      switch(v9 >> 3)
      {
        case 1u:
          if (v9 != 10) {
            goto LABEL_48;
          }
          *(_DWORD *)(a1 + 48) |= 1u;
          uint64_t v11 = *(void *)(a1 + 8);
          uint64_t v12 = (void *)(v11 & 0xFFFFFFFFFFFFFFFELL);
          if (v11) {
            uint64_t v12 = (void *)*v12;
          }
          uint64_t v13 = (uint64_t *)(a1 + 56);
          goto LABEL_44;
        case 2u:
          if (v9 != 18) {
            goto LABEL_48;
          }
          *(_DWORD *)(a1 + 48) |= 2u;
          uint64_t v19 = *(void *)(a1 + 8);
          uint64_t v12 = (void *)(v19 & 0xFFFFFFFFFFFFFFFELL);
          if (v19) {
            uint64_t v12 = (void *)*v12;
          }
          uint64_t v13 = (uint64_t *)(a1 + 64);
          goto LABEL_44;
        case 3u:
          if (v9 != 24) {
            goto LABEL_48;
          }
          v5 |= 0x10u;
          int v20 = v8 + 1;
          uint64_t v21 = *v8;
          if ((*v8 & 0x80000000) == 0) {
            goto LABEL_29;
          }
          int v22 = *v20;
          uint64_t v21 = v21 + (v22 << 7) - 128;
          if (v22 < 0)
          {
            uint64_t v36 = sub_19E3BCEF4((uint64_t)v8, v21);
            *(void *)uint64_t v42 = v36;
            *(unsigned char *)(a1 + 81) = v37 != 0;
            if (!v36) {
              goto LABEL_67;
            }
          }
          else
          {
            int v20 = v8 + 2;
LABEL_29:
            *(void *)uint64_t v42 = v20;
            *(unsigned char *)(a1 + 81) = v21 != 0;
          }
          goto LABEL_46;
        case 4u:
          if (v9 != 32) {
            goto LABEL_48;
          }
          v5 |= 0x20u;
          unsigned int v23 = v8 + 1;
          uint64_t v24 = *v8;
          if ((*v8 & 0x80000000) == 0) {
            goto LABEL_34;
          }
          int v25 = *v23;
          uint64_t v24 = v24 + (v25 << 7) - 128;
          if (v25 < 0)
          {
            uint64_t v38 = sub_19E3BCEF4((uint64_t)v8, v24);
            *(void *)uint64_t v42 = v38;
            *(unsigned char *)(a1 + 82) = v39 != 0;
            if (!v38) {
              goto LABEL_67;
            }
          }
          else
          {
            unsigned int v23 = v8 + 2;
LABEL_34:
            *(void *)uint64_t v42 = v23;
            *(unsigned char *)(a1 + 82) = v24 != 0;
          }
          goto LABEL_46;
        case 5u:
          if (v9 != 40) {
            goto LABEL_48;
          }
          v5 |= 0x40u;
          uint64_t v26 = v8 + 1;
          uint64_t v27 = *v8;
          if ((*v8 & 0x80000000) == 0) {
            goto LABEL_39;
          }
          int v28 = *v26;
          uint64_t v27 = v27 + (v28 << 7) - 128;
          if (v28 < 0)
          {
            uint64_t v40 = sub_19E3BCEF4((uint64_t)v8, v27);
            *(void *)uint64_t v42 = v40;
            *(unsigned char *)(a1 + 83) = v41 != 0;
            if (!v40) {
              goto LABEL_67;
            }
          }
          else
          {
            uint64_t v26 = v8 + 2;
LABEL_39:
            *(void *)uint64_t v42 = v26;
            *(unsigned char *)(a1 + 83) = v27 != 0;
          }
          goto LABEL_46;
        case 6u:
          if (v9 != 50) {
            goto LABEL_48;
          }
          *(_DWORD *)(a1 + 48) |= 4u;
          uint64_t v29 = *(void *)(a1 + 8);
          uint64_t v12 = (void *)(v29 & 0xFFFFFFFFFFFFFFFELL);
          if (v29) {
            uint64_t v12 = (void *)*v12;
          }
          uint64_t v13 = (uint64_t *)(a1 + 72);
LABEL_44:
          uint64_t v30 = (std::string *)sub_19E3AE730(v13, (uint64_t)v12);
          uint64_t v31 = (void *)sub_19E3BCFF0(v30, *(char **)v42, (uint64_t)a3);
          goto LABEL_45;
        default:
          if (v9 >> 3 == 200 && v9 == 64)
          {
            v5 |= 8u;
            char v14 = v8 + 1;
            uint64_t v15 = *v8;
            if ((*v8 & 0x80000000) == 0) {
              goto LABEL_18;
            }
            int v16 = *v14;
            uint64_t v15 = v15 + (v16 << 7) - 128;
            if ((v16 & 0x80000000) == 0)
            {
              char v14 = v8 + 2;
LABEL_18:
              *(void *)uint64_t v42 = v14;
              *(unsigned char *)(a1 + 8sub_19E392864(&a9, 0) = v15 != 0;
              goto LABEL_46;
            }
            uint64_t v34 = sub_19E3BCEF4((uint64_t)v8, v15);
            *(void *)uint64_t v42 = v34;
            *(unsigned char *)(a1 + 8sub_19E392864(&a9, 0) = v35 != 0;
            if (!v34) {
              goto LABEL_67;
            }
          }
          else
          {
LABEL_48:
            if (v9) {
              BOOL v32 = (v9 & 7) == 4;
            }
            else {
              BOOL v32 = 1;
            }
            if (v32)
            {
              a3[10].i32[0] = v9 - 1;
              goto LABEL_2;
            }
            if (v9 < 0x648)
            {
              if (*v7)
              {
                uint64_t v33 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
              }
              else
              {
                uint64_t v33 = (std::string *)sub_19E3A0504((unint64_t *)(a1 + 8));
                unint64_t v8 = *(char **)v42;
              }
              uint64_t v31 = sub_19E3BD4AC(v9, v33, v8, a3);
            }
            else
            {
              uint64_t v31 = sub_19E3B564C((uint64_t *)(a1 + 24), v9, (unsigned __int8 *)v8, (uint64_t)&unk_1E945A528, (unint64_t *)(a1 + 8), a3);
            }
LABEL_45:
            *(void *)uint64_t v42 = v31;
            if (!v31)
            {
LABEL_67:
              *(void *)uint64_t v42 = 0;
              goto LABEL_2;
            }
          }
LABEL_46:
          if (sub_19E3A03C4((uint64_t)a3, (char **)v42, a3[11].i32[1])) {
            goto LABEL_2;
          }
          break;
      }
    }
  }
LABEL_2:
  *(_DWORD *)(a1 + 48) |= v5;
  return *(void *)v42;
}

char *sub_19E3A56A4(uint64_t a1, char *a2, unint64_t *a3)
{
  unint64_t v4 = a2;
  int v6 = *(_DWORD *)(a1 + 48);
  if (v6)
  {
    unint64_t v4 = sub_19E39E4E4(a3, 1, (const void **)(*(void *)(a1 + 56) & 0xFFFFFFFFFFFFFFFELL), a2);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  unint64_t v4 = sub_19E39E4E4(a3, 2, (const void **)(*(void *)(a1 + 64) & 0xFFFFFFFFFFFFFFFELL), v4);
  if ((v6 & 0x10) == 0)
  {
LABEL_4:
    if ((v6 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_11:
  if (*a3 <= (unint64_t)v4) {
    unint64_t v4 = sub_19E3AEE48((uint64_t)a3, v4);
  }
  char v7 = *(unsigned char *)(a1 + 81);
  *unint64_t v4 = 24;
  v4[1] = v7;
  v4 += 2;
  if ((v6 & 0x20) == 0)
  {
LABEL_5:
    if ((v6 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_14:
  if (*a3 <= (unint64_t)v4) {
    unint64_t v4 = sub_19E3AEE48((uint64_t)a3, v4);
  }
  char v8 = *(unsigned char *)(a1 + 82);
  *unint64_t v4 = 32;
  v4[1] = v8;
  v4 += 2;
  if ((v6 & 0x40) == 0)
  {
LABEL_6:
    if ((v6 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }
LABEL_17:
  if (*a3 <= (unint64_t)v4) {
    unint64_t v4 = sub_19E3AEE48((uint64_t)a3, v4);
  }
  char v9 = *(unsigned char *)(a1 + 83);
  *unint64_t v4 = 40;
  v4[1] = v9;
  v4 += 2;
  if ((v6 & 4) == 0)
  {
LABEL_7:
    if ((v6 & 8) == 0) {
      goto LABEL_24;
    }
    goto LABEL_21;
  }
LABEL_20:
  unint64_t v4 = sub_19E39E4E4(a3, 6, (const void **)(*(void *)(a1 + 72) & 0xFFFFFFFFFFFFFFFELL), v4);
  if ((v6 & 8) == 0) {
    goto LABEL_24;
  }
LABEL_21:
  if (*a3 <= (unint64_t)v4) {
    unint64_t v4 = sub_19E3AEE48((uint64_t)a3, v4);
  }
  char v10 = *(unsigned char *)(a1 + 80);
  *(_WORD *)unint64_t v4 = 3264;
  v4[2] = v10;
  v4 += 3;
LABEL_24:
  uint64_t v11 = sub_19E3B6444(a1 + 24, 201, 0x20000000, v4, (uint64_t *)a3);
  uint64_t v12 = v11;
  uint64_t v13 = *(void *)(a1 + 8);
  if ((v13 & 1) == 0) {
    return v12;
  }
  unint64_t v15 = v13 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v15 + 31) < 0)
  {
    int v16 = *(void **)(v15 + 8);
    uint64_t v17 = *(void *)(v15 + 16);
  }
  else
  {
    int v16 = (void *)(v15 + 8);
    LODWORD(v17) = *(unsigned __int8 *)(v15 + 31);
  }
  if ((uint64_t)(*a3 - (void)v11) >= (int)v17)
  {
    uint64_t v18 = (int)v17;
    memcpy(v11, v16, (int)v17);
    v12 += v18;
    return v12;
  }
  return sub_19E3AEF5C((uint64_t *)a3, (char *)v16, v17, (unint64_t)v11);
}

uint64_t sub_19E3A58B8(uint64_t a1)
{
  uint64_t result = sub_19E3B9178(a1 + 24);
  int v3 = *(_DWORD *)(a1 + 48);
  if ((v3 & 0x7F) == 0) {
    goto LABEL_17;
  }
  if ((v3 & 1) == 0)
  {
    if ((v3 & 2) == 0) {
      goto LABEL_4;
    }
LABEL_22:
    unint64_t v12 = *(void *)(a1 + 64) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v13 = *(unsigned __int8 *)(v12 + 23);
    uint64_t v14 = *(void *)(v12 + 8);
    if ((v13 & 0x80u) == 0) {
      uint64_t v14 = v13;
    }
    result += v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v3 & 4) == 0) {
      goto LABEL_8;
    }
    goto LABEL_5;
  }
  unint64_t v9 = *(void *)(a1 + 56) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v10 = *(unsigned __int8 *)(v9 + 23);
  uint64_t v11 = *(void *)(v9 + 8);
  if ((v10 & 0x80u) == 0) {
    uint64_t v11 = v10;
  }
  result += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v3 & 2) != 0) {
    goto LABEL_22;
  }
LABEL_4:
  if ((v3 & 4) != 0)
  {
LABEL_5:
    unint64_t v4 = *(void *)(a1 + 72) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v5 = *(unsigned __int8 *)(v4 + 23);
    uint64_t v6 = *(void *)(v4 + 8);
    if ((v5 & 0x80u) == 0) {
      uint64_t v6 = v5;
    }
    result += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_8:
  uint64_t v7 = result + 3;
  if ((v3 & 8) == 0) {
    uint64_t v7 = result;
  }
  if ((v3 & 0x10) != 0) {
    v7 += 2;
  }
  if ((v3 & 0x20) != 0) {
    v7 += 2;
  }
  if ((v3 & 0x40) != 0) {
    uint64_t result = v7 + 2;
  }
  else {
    uint64_t result = v7;
  }
LABEL_17:
  uint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    unint64_t v15 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v15 + 31) < 0) {
      uint64_t v16 = *(void *)(v15 + 16);
    }
    else {
      uint64_t v16 = *(unsigned __int8 *)(v15 + 31);
    }
    result += v16;
  }
  *(_DWORD *)(a1 + 52) = result;
  return result;
}

void sub_19E3A5A20(uint64_t a1, void *lpsrc)
{
  if (!__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0B75B0, (const struct __class_type_info *)&unk_1EF0B5F68, 0))sub_19E3A0D08(); {
  sub_19E3A5AA8(a1, (uint64_t)lpsrc);
  }
}

void sub_19E3A5AA8(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    sub_19E3AF8D4((uint64_t)v24, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 2246);
    unint64_t v4 = sub_19E3AF8EC(v24, "CHECK failed: (&from) != (this): ");
    sub_19E3AFA28((uint64_t)&v23, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v24);
  }
  sub_19E3B3E1C(a1 + 24, a2 + 24);
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5)
  {
    unint64_t v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    uint64_t v8 = *(void *)(a1 + 8);
    if (v8) {
      unint64_t v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      unint64_t v9 = (std::string *)sub_19E3A0504((unint64_t *)(a1 + 8));
    }
    int v10 = *(char *)(v6 + 31);
    if (v10 >= 0) {
      uint64_t v11 = (const std::string::value_type *)v7;
    }
    else {
      uint64_t v11 = *(const std::string::value_type **)(v6 + 8);
    }
    if (v10 >= 0) {
      std::string::size_type v12 = *(unsigned __int8 *)(v6 + 31);
    }
    else {
      std::string::size_type v12 = *(void *)(v6 + 16);
    }
    std::string::append(v9, v11, v12);
  }
  int v13 = *(_DWORD *)(a2 + 48);
  if ((v13 & 0x7F) != 0)
  {
    if (v13)
    {
      uint64_t v14 = (long long *)(*(void *)(a2 + 56) & 0xFFFFFFFFFFFFFFFELL);
      *(_DWORD *)(a1 + 48) |= 1u;
      uint64_t v15 = *(void *)(a1 + 8);
      uint64_t v16 = (void *)(v15 & 0xFFFFFFFFFFFFFFFELL);
      if (v15) {
        uint64_t v16 = (void *)*v16;
      }
      sub_19E3AE6F8((uint64_t *)(a1 + 56), v14, (uint64_t)v16);
      if ((v13 & 2) == 0)
      {
LABEL_16:
        if ((v13 & 4) == 0) {
          goto LABEL_17;
        }
        goto LABEL_30;
      }
    }
    else if ((v13 & 2) == 0)
    {
      goto LABEL_16;
    }
    uint64_t v17 = (long long *)(*(void *)(a2 + 64) & 0xFFFFFFFFFFFFFFFELL);
    *(_DWORD *)(a1 + 48) |= 2u;
    uint64_t v18 = *(void *)(a1 + 8);
    uint64_t v19 = (void *)(v18 & 0xFFFFFFFFFFFFFFFELL);
    if (v18) {
      uint64_t v19 = (void *)*v19;
    }
    sub_19E3AE6F8((uint64_t *)(a1 + 64), v17, (uint64_t)v19);
    if ((v13 & 4) == 0)
    {
LABEL_17:
      if ((v13 & 8) == 0) {
        goto LABEL_18;
      }
      goto LABEL_33;
    }
LABEL_30:
    int v20 = (long long *)(*(void *)(a2 + 72) & 0xFFFFFFFFFFFFFFFELL);
    *(_DWORD *)(a1 + 48) |= 4u;
    uint64_t v21 = *(void *)(a1 + 8);
    int v22 = (void *)(v21 & 0xFFFFFFFFFFFFFFFELL);
    if (v21) {
      int v22 = (void *)*v22;
    }
    sub_19E3AE6F8((uint64_t *)(a1 + 72), v20, (uint64_t)v22);
    if ((v13 & 8) == 0)
    {
LABEL_18:
      if ((v13 & 0x10) == 0) {
        goto LABEL_19;
      }
      goto LABEL_34;
    }
LABEL_33:
    *(unsigned char *)(a1 + 8sub_19E392864(&a9, 0) = *(unsigned char *)(a2 + 80);
    if ((v13 & 0x10) == 0)
    {
LABEL_19:
      if ((v13 & 0x20) == 0) {
        goto LABEL_20;
      }
      goto LABEL_35;
    }
LABEL_34:
    *(unsigned char *)(a1 + 81) = *(unsigned char *)(a2 + 81);
    if ((v13 & 0x20) == 0)
    {
LABEL_20:
      if ((v13 & 0x40) == 0)
      {
LABEL_22:
        *(_DWORD *)(a1 + 48) |= v13;
        return;
      }
LABEL_21:
      *(unsigned char *)(a1 + 83) = *(unsigned char *)(a2 + 83);
      goto LABEL_22;
    }
LABEL_35:
    *(unsigned char *)(a1 + 82) = *(unsigned char *)(a2 + 82);
    if ((v13 & 0x40) == 0) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
}

void sub_19E3A5C74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E3A5C8C(uint64_t a1)
{
  return sub_19E3B52AC(a1 + 24);
}

void *sub_19E3A5C94@<X0>(void *a1@<X8>)
{
  return sub_19E382340(a1, "sentencepiece.NormalizerSpec");
}

void *sub_19E3A5CA4(void *a1, uint64_t a2)
{
  *a1 = &unk_1EF0B8BF0;
  a1[1] = a2;
  a1[2] = 0;
  if (atomic_load_explicit(dword_1EC304F88, memory_order_acquire)) {
    sub_19E3BB484(dword_1EC304F88);
  }
  a1[3] = &qword_1E945A358;
  a1[4] = &qword_1E945A358;
  return a1;
}

uint64_t sub_19E3A5D14(uint64_t a1)
{
  return a1;
}

uint64_t *sub_19E3A5D48(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = (void *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) == 0)
  {
    if (!v3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (*v3)
  {
LABEL_3:
    sub_19E3AF8D4((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 2362);
    unint64_t v4 = sub_19E3AF8EC(v13, "CHECK failed: GetArena() == nullptr: ");
    sub_19E3AFA28((uint64_t)&v12, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v13);
  }
LABEL_4:
  uint64_t result = (uint64_t *)(a1 + 24);
  if (*(uint64_t **)(a1 + 24) != &qword_1E945A358)
  {
    uint64_t v6 = sub_19E3A02F0(result);
    uint64_t v7 = v6;
    if (*(char *)(v6 + 23) < 0) {
      operator delete(*(void **)v6);
    }
    uint64_t result = (uint64_t *)MEMORY[0x19F3BDCF0](v7, 0x1012C40EC159624);
  }
  unint64_t v9 = *(uint64_t **)(a1 + 32);
  uint64_t v8 = (uint64_t *)(a1 + 32);
  if (v9 != &qword_1E945A358)
  {
    uint64_t v10 = sub_19E3A02F0(v8);
    uint64_t v11 = v10;
    if (*(char *)(v10 + 23) < 0) {
      operator delete(*(void **)v10);
    }
    return (uint64_t *)MEMORY[0x19F3BDCF0](v11, 0x1012C40EC159624);
  }
  return result;
}

void sub_19E3A5E58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19E3A5E74(uint64_t a1)
{
  sub_19E3A5D14(a1);
  JUMPOUT(0x19F3BDCF0);
}

uint64_t sub_19E3A5EAC(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 16);
  if ((v1 & 3) != 0)
  {
    if (v1)
    {
      unint64_t v2 = *(void *)(result + 24) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v2 + 23) < 0)
      {
        **(unsigned char **)unint64_t v2 = 0;
        *(void *)(v2 + 8) = 0;
        if ((v1 & 2) == 0) {
          goto LABEL_11;
        }
        goto LABEL_6;
      }
      *(unsigned char *)unint64_t v2 = 0;
      *(unsigned char *)(v2 + 23) = 0;
    }
    if ((v1 & 2) == 0) {
      goto LABEL_11;
    }
LABEL_6:
    unint64_t v3 = *(void *)(result + 32) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v3 + 23) < 0)
    {
      **(unsigned char **)unint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
    }
    else
    {
      *(unsigned char *)unint64_t v3 = 0;
      *(unsigned char *)(v3 + 23) = 0;
    }
  }
LABEL_11:
  *(_DWORD *)(result + 16) = 0;
  uint64_t v4 = *(void *)(result + 8);
  if (v4)
  {
    unint64_t v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v5 + 31) < 0)
    {
      **(unsigned char **)(v5 + 8) = 0;
      *(void *)(v5 + 16) = 0;
    }
    else
    {
      *(unsigned char *)(v5 + 8) = 0;
      *(unsigned char *)(v5 + 31) = 0;
    }
  }
  return result;
}

uint64_t sub_19E3A5F48(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  *(void *)uint64_t v21 = a2;
  if ((sub_19E3A03C4((uint64_t)a3, (char **)v21, a3[11].i32[1]) & 1) == 0)
  {
    uint64_t v6 = (void *)(a1 + 8);
    while (1)
    {
      uint64_t v7 = (char *)(*(void *)v21 + 1);
      unsigned int v8 = **(unsigned char **)v21;
      if (((char)**(unsigned char **)v21 & 0x80000000) == 0) {
        goto LABEL_7;
      }
      unsigned int v9 = v8 + (*v7 << 7);
      unsigned int v8 = v9 - 128;
      if ((*v7 & 0x80000000) == 0) {
        break;
      }
      uint64_t v19 = sub_19E3BCF3C(*(uint64_t *)v21, v9 - 128);
      *(void *)uint64_t v21 = v19;
      if (!v19)
      {
LABEL_35:
        *(void *)uint64_t v21 = 0;
        return *(void *)v21;
      }
      uint64_t v7 = (char *)v19;
      unsigned int v8 = v20;
LABEL_8:
      if (v8 >> 3 == 2)
      {
        if (v8 == 18)
        {
          *(_DWORD *)(a1 + 16) |= 2u;
          uint64_t v14 = *(void *)(a1 + 8);
          uint64_t v15 = (void *)(v14 & 0xFFFFFFFFFFFFFFFELL);
          if (v14) {
            uint64_t v15 = (void *)*v15;
          }
          uint64_t v16 = (uint64_t *)(a1 + 32);
          goto LABEL_27;
        }
      }
      else if (v8 >> 3 == 1 && v8 == 10)
      {
        *(_DWORD *)(a1 + 16) |= 1u;
        uint64_t v17 = *(void *)(a1 + 8);
        uint64_t v15 = (void *)(v17 & 0xFFFFFFFFFFFFFFFELL);
        if (v17) {
          uint64_t v15 = (void *)*v15;
        }
        uint64_t v16 = (uint64_t *)(a1 + 24);
LABEL_27:
        uint64_t v18 = (std::string *)sub_19E3AE730(v16, (uint64_t)v15);
        int v13 = (void *)sub_19E3BCFF0(v18, *(char **)v21, (uint64_t)a3);
        goto LABEL_28;
      }
      if (v8) {
        BOOL v11 = (v8 & 7) == 4;
      }
      else {
        BOOL v11 = 1;
      }
      if (v11)
      {
        a3[10].i32[0] = v8 - 1;
        return *(void *)v21;
      }
      if (*v6)
      {
        char v12 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFELL) + 8);
      }
      else
      {
        char v12 = (std::string *)sub_19E3A0504((unint64_t *)(a1 + 8));
        uint64_t v7 = *(char **)v21;
      }
      int v13 = sub_19E3BD4AC(v8, v12, v7, a3);
LABEL_28:
      *(void *)uint64_t v21 = v13;
      if (!v13) {
        goto LABEL_35;
      }
      if (sub_19E3A03C4((uint64_t)a3, (char **)v21, a3[11].i32[1])) {
        return *(void *)v21;
      }
    }
    uint64_t v7 = (char *)(*(void *)v21 + 2);
LABEL_7:
    *(void *)uint64_t v21 = v7;
    goto LABEL_8;
  }
  return *(void *)v21;
}

char *sub_19E3A60F4(uint64_t a1, char *__dst, unint64_t *a3)
{
  uint64_t v4 = __dst;
  int v6 = *(_DWORD *)(a1 + 16);
  if (v6) {
    uint64_t v4 = sub_19E39E4E4(a3, 1, (const void **)(*(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL), __dst);
  }
  if ((v6 & 2) != 0) {
    uint64_t v4 = sub_19E39E4E4(a3, 2, (const void **)(*(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL), v4);
  }
  uint64_t v7 = *(void *)(a1 + 8);
  if ((v7 & 1) == 0) {
    return v4;
  }
  unint64_t v9 = v7 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v9 + 31) < 0)
  {
    uint64_t v10 = *(void **)(v9 + 8);
    uint64_t v11 = *(void *)(v9 + 16);
  }
  else
  {
    uint64_t v10 = (void *)(v9 + 8);
    LODWORD(v11) = *(unsigned __int8 *)(v9 + 31);
  }
  if ((uint64_t)(*a3 - (void)v4) >= (int)v11)
  {
    uint64_t v12 = (int)v11;
    memcpy(v4, v10, (int)v11);
    v4 += v12;
    return v4;
  }
  return sub_19E3AEF5C((uint64_t *)a3, (char *)v10, v11, (unint64_t)v4);
}

uint64_t sub_19E3A61E0(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 16);
  if ((v1 & 3) == 0)
  {
    uint64_t v2 = 0;
    goto LABEL_12;
  }
  if ((v1 & 1) == 0)
  {
    uint64_t v2 = 0;
    if ((v1 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_9;
  }
  unint64_t v3 = *(void *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v4 = *(unsigned __int8 *)(v3 + 23);
  uint64_t v5 = *(void *)(v3 + 8);
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = v4;
  }
  uint64_t v2 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v1 & 2) != 0)
  {
LABEL_9:
    unint64_t v6 = *(void *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v7 = *(unsigned __int8 *)(v6 + 23);
    uint64_t v8 = *(void *)(v6 + 8);
    if ((v7 & 0x80u) == 0) {
      uint64_t v8 = v7;
    }
    v2 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_12:
  uint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    unint64_t v11 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v11 + 31) < 0) {
      uint64_t v12 = *(void *)(v11 + 16);
    }
    else {
      uint64_t v12 = *(unsigned __int8 *)(v11 + 31);
    }
    v2 += v12;
  }
  *(_DWORD *)(a1 + 2sub_19E392864(&a9, 0) = v2;
  return v2;
}

unint64_t sub_19E3A62B8(unint64_t a1, void *lpsrc)
{
  if (!__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0B75B0, (const struct __class_type_info *)&unk_1EF0B5FC8, 0))sub_19E3A0D08(); {
  return sub_19E3A6340(a1, (uint64_t)lpsrc);
  }
}

unint64_t sub_19E3A6340(unint64_t result, uint64_t a2)
{
  unint64_t v3 = result;
  if (a2 == result)
  {
    sub_19E3AF8D4((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 2516);
    uint64_t v4 = sub_19E3AF8EC(v21, "CHECK failed: (&from) != (this): ");
    sub_19E3AFA28((uint64_t)&v20, (const char **)&v4->__r_.__value_.__l.__data_);
    uint64_t result = sub_19E3AFA30((uint64_t)v21);
  }
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5)
  {
    unint64_t v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    uint64_t v8 = *(void *)(v3 + 8);
    if (v8) {
      uint64_t v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      uint64_t v9 = (std::string *)sub_19E3A0504((unint64_t *)(v3 + 8));
    }
    int v10 = *(char *)(v6 + 31);
    if (v10 >= 0) {
      unint64_t v11 = (const std::string::value_type *)v7;
    }
    else {
      unint64_t v11 = *(const std::string::value_type **)(v6 + 8);
    }
    if (v10 >= 0) {
      std::string::size_type v12 = *(unsigned __int8 *)(v6 + 31);
    }
    else {
      std::string::size_type v12 = *(void *)(v6 + 16);
    }
    uint64_t result = (unint64_t)std::string::append(v9, v11, v12);
  }
  int v13 = *(_DWORD *)(a2 + 16);
  if ((v13 & 3) != 0)
  {
    if (v13)
    {
      uint64_t v14 = (long long *)(*(void *)(a2 + 24) & 0xFFFFFFFFFFFFFFFELL);
      *(_DWORD *)(v3 + 16) |= 1u;
      uint64_t v15 = *(void *)(v3 + 8);
      uint64_t v16 = (void *)(v15 & 0xFFFFFFFFFFFFFFFELL);
      if (v15) {
        uint64_t v16 = (void *)*v16;
      }
      uint64_t result = sub_19E3AE6F8((uint64_t *)(v3 + 24), v14, (uint64_t)v16);
    }
    if ((v13 & 2) != 0)
    {
      uint64_t v17 = (long long *)(*(void *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL);
      *(_DWORD *)(v3 + 16) |= 2u;
      uint64_t v18 = *(void *)(v3 + 8);
      uint64_t v19 = (void *)(v18 & 0xFFFFFFFFFFFFFFFELL);
      if (v18) {
        uint64_t v19 = (void *)*v19;
      }
      return sub_19E3AE6F8((uint64_t *)(v3 + 32), v17, (uint64_t)v19);
    }
  }
  return result;
}

void sub_19E3A6474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E3A648C()
{
  return 1;
}

void *sub_19E3A6494@<X0>(void *a1@<X8>)
{
  return sub_19E382340(a1, "sentencepiece.SelfTestData.Sample");
}

uint64_t sub_19E3A64A4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1EF0B8920;
  *(void *)(a1 + 8) = a2;
  sub_19E3AFEF4(a1 + 16, a2);
  *(void *)(a1 + 4sub_19E392864(&a9, 0) = a2;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  if (atomic_load_explicit(dword_1EC304FA0, memory_order_acquire)) {
    sub_19E3BB484(dword_1EC304FA0);
  }
  return a1;
}

void sub_19E3A652C(_Unwind_Exception *a1)
{
  sub_19E3AA11C(v2);
  sub_19E3AFFD4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19E3A6548(uint64_t a1)
{
  unint64_t v3 = (uint64_t *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v4 = (void *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if (v2)
  {
    if (!*v4) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (v4)
  {
LABEL_3:
    sub_19E3AF8D4((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 2589);
    uint64_t v5 = sub_19E3AF8EC(v8, "CHECK failed: GetArena() == nullptr: ");
    sub_19E3AFA28((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v8);
  }
LABEL_4:
  sub_19E39DD64(v3);
  sub_19E3AA11C((uint64_t *)(a1 + 40));
  sub_19E3AFFD4(a1 + 16);
  return a1;
}

void sub_19E3A65E8(void *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  sub_19E37B770(a1);
}

void sub_19E3A660C(uint64_t a1)
{
  sub_19E3A6548(a1);
  JUMPOUT(0x19F3BDCF0);
}

uint64_t sub_19E3A6644(uint64_t a1)
{
  sub_19E3B3D7C((unsigned __int8 *)(a1 + 16));
  uint64_t result = sub_19E3A9D94(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3)
  {
    unint64_t v4 = v3 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v4 + 31) < 0)
    {
      **(unsigned char **)(v4 + 8) = 0;
      *(void *)(v4 + 16) = 0;
    }
    else
    {
      *(unsigned char *)(v4 + 8) = 0;
      *(unsigned char *)(v4 + 31) = 0;
    }
  }
  return result;
}

char *sub_19E3A66A0(uint64_t a1, char *a2, int32x2_t *a3)
{
  char v23 = a2;
  if ((sub_19E3A03C4((uint64_t)a3, &v23, a3[11].i32[1]) & 1) == 0)
  {
    uint64_t v5 = (void *)(a1 + 8);
    while (1)
    {
      unint64_t v6 = v23 + 1;
      unsigned int v7 = *v23;
      if ((*v23 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      unsigned int v8 = v7 + (*v6 << 7);
      unsigned int v7 = v8 - 128;
      if ((*v6 & 0x80000000) == 0) {
        break;
      }
      char v20 = (char *)sub_19E3BCF3C((uint64_t)v23, v8 - 128);
      char v23 = v20;
      if (!v20) {
        return 0;
      }
      unint64_t v6 = v20;
      unsigned int v7 = v21;
LABEL_7:
      if (v7 == 10)
      {
        unint64_t v11 = v6 - 1;
        while (1)
        {
          std::string::size_type v12 = (unsigned __int8 *)(v11 + 1);
          char v23 = v11 + 1;
          int v13 = *(int **)(a1 + 56);
          if (!v13) {
            break;
          }
          uint64_t v14 = *(int *)(a1 + 48);
          int v15 = *v13;
          if ((int)v14 >= *v13)
          {
            if (v15 == *(_DWORD *)(a1 + 52))
            {
LABEL_20:
              sub_19E3C232C(a1 + 40, v15 + 1);
              int v13 = *(int **)(a1 + 56);
              int v15 = *v13;
            }
            *int v13 = v15 + 1;
            uint64_t v16 = sub_19E3A8ED4(*(void *)(a1 + 40));
            uint64_t v17 = *(void *)(a1 + 56);
            uint64_t v18 = *(int *)(a1 + 48);
            *(_DWORD *)(a1 + 48) = v18 + 1;
            *(void *)(v17 + 8 * v18 + 8) = v16;
            std::string::size_type v12 = (unsigned __int8 *)v23;
            goto LABEL_22;
          }
          *(_DWORD *)(a1 + 48) = v14 + 1;
          uint64_t v16 = *(void **)&v13[2 * v14 + 2];
LABEL_22:
          unint64_t v11 = (char *)sub_19E3A68B8(a3, (uint64_t)v16, v12);
          char v23 = v11;
          if (!v11) {
            return 0;
          }
          if (*(void *)a3 <= (unint64_t)v11 || *v11 != 10) {
            goto LABEL_30;
          }
        }
        int v15 = *(_DWORD *)(a1 + 52);
        goto LABEL_20;
      }
      if (v7) {
        BOOL v9 = (v7 & 7) == 4;
      }
      else {
        BOOL v9 = 1;
      }
      if (v9)
      {
        a3[10].i32[0] = v7 - 1;
        return v23;
      }
      if (v7 < 0x640)
      {
        if (*v5)
        {
          uint64_t v19 = (std::string *)((*v5 & 0xFFFFFFFFFFFFFFFELL) + 8);
        }
        else
        {
          uint64_t v19 = (std::string *)sub_19E3A0504((unint64_t *)(a1 + 8));
          unint64_t v6 = v23;
        }
        int v10 = sub_19E3BD4AC(v7, v19, v6, a3);
      }
      else
      {
        int v10 = sub_19E3B564C((uint64_t *)(a1 + 16), v7, (unsigned __int8 *)v6, (uint64_t)&unk_1E945A5C0, (unint64_t *)(a1 + 8), a3);
      }
      char v23 = (char *)v10;
      if (!v10) {
        return 0;
      }
LABEL_30:
      if (sub_19E3A03C4((uint64_t)a3, &v23, a3[11].i32[1])) {
        return v23;
      }
    }
    unint64_t v6 = v23 + 2;
LABEL_6:
    char v23 = v6;
    goto LABEL_7;
  }
  return v23;
}

uint64_t sub_19E3A68B8(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v6 = (char)*a3;
  unsigned int v7 = *a3;
  if (v6 < 0)
  {
    uint64_t result = sub_19E3BCF80((uint64_t)a3, v7);
    if (!result) {
      return result;
    }
    uint64_t v8 = result;
    unsigned int v7 = v10;
  }
  else
  {
    uint64_t v8 = (uint64_t)(a3 + 1);
  }
  int v11 = sub_19E3A0830((uint64_t)a1, v8, v7);
  int v12 = a1[11].i32[0];
  BOOL v13 = __OFSUB__(v12--, 1);
  a1[11].i32[0] = v12;
  if (v12 < 0 != v13) {
    return 0;
  }
  int v14 = v11;
  uint64_t result = sub_19E3A5F48(a2, v8, a1);
  if (!result) {
    return result;
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v15 = a1[3].i32[1] + v14;
  a1[3].i32[1] = v15;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v15 & (v15 >> 31)));
  return result;
}

char *sub_19E3A6980(uint64_t a1, char *a2, unint64_t *a3)
{
  int v6 = *(_DWORD *)(a1 + 48);
  if (v6)
  {
    for (int i = 0; i != v6; ++i)
    {
      if (*a3 <= (unint64_t)a2) {
        a2 = sub_19E3AEE48((uint64_t)a3, a2);
      }
      uint64_t v8 = sub_19E3A9B10(a1 + 40, i);
      *a2 = 10;
      unsigned int v9 = *(_DWORD *)(v8 + 20);
      if (v9 > 0x7F)
      {
        a2[1] = v9 | 0x80;
        unsigned int v11 = v9 >> 7;
        if (v9 >> 14)
        {
          unsigned int v10 = a2 + 3;
          do
          {
            *(v10 - 1) = v11 | 0x80;
            unsigned int v12 = v11 >> 7;
            ++v10;
            unsigned int v13 = v11 >> 14;
            v11 >>= 7;
          }
          while (v13);
          *(v10 - 1) = v12;
        }
        else
        {
          a2[2] = v11;
          unsigned int v10 = a2 + 3;
        }
      }
      else
      {
        a2[1] = v9;
        unsigned int v10 = a2 + 2;
      }
      a2 = sub_19E3A60F4(v8, v10, a3);
    }
  }
  int v14 = sub_19E3B6444(a1 + 16, 200, 0x20000000, a2, (uint64_t *)a3);
  int v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if ((v16 & 1) == 0) {
    return v15;
  }
  unint64_t v18 = v16 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v18 + 31) < 0)
  {
    uint64_t v19 = *(void **)(v18 + 8);
    uint64_t v20 = *(void *)(v18 + 16);
  }
  else
  {
    uint64_t v19 = (void *)(v18 + 8);
    LODWORD(v2sub_19E392864(&a9, 0) = *(unsigned __int8 *)(v18 + 31);
  }
  if ((uint64_t)(*a3 - (void)v14) >= (int)v20)
  {
    uint64_t v21 = (int)v20;
    memcpy(v14, v19, (int)v20);
    v15 += v21;
    return v15;
  }
  return sub_19E3AEF5C((uint64_t *)a3, (char *)v19, v20, (unint64_t)v14);
}

uint64_t sub_19E3A6B18(uint64_t a1)
{
  uint64_t v2 = sub_19E3B9178(a1 + 16);
  uint64_t v3 = *(int *)(a1 + 48);
  uint64_t v4 = v2 + v3;
  uint64_t v5 = *(void *)(a1 + 56);
  if (v5) {
    int v6 = (uint64_t *)(v5 + 8);
  }
  else {
    int v6 = 0;
  }
  if (v3)
  {
    uint64_t v7 = 8 * v3;
    do
    {
      uint64_t v8 = *v6++;
      uint64_t v9 = sub_19E3A61E0(v8);
      v4 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6);
      v7 -= 8;
    }
    while (v7);
  }
  uint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v12 + 31) < 0) {
      uint64_t v13 = *(void *)(v12 + 16);
    }
    else {
      uint64_t v13 = *(unsigned __int8 *)(v12 + 31);
    }
    v4 += v13;
  }
  *(_DWORD *)(a1 + 64) = v4;
  return v4;
}

unint64_t sub_19E3A6BC8(uint64_t a1, void *lpsrc)
{
  if (!__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0B75B0, (const struct __class_type_info *)&unk_1EF0B5F30, 0))sub_19E3A0D08(); {
  return sub_19E3A6C50(a1, (uint64_t)lpsrc);
  }
}

unint64_t sub_19E3A6C50(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    sub_19E3AF8D4((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 2724);
    uint64_t v4 = sub_19E3AF8EC(v15, "CHECK failed: (&from) != (this): ");
    sub_19E3AFA28((uint64_t)&v14, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v15);
  }
  sub_19E3B3E1C(a1 + 16, a2 + 16);
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5)
  {
    unint64_t v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    uint64_t v8 = *(void *)(a1 + 8);
    if (v8) {
      uint64_t v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      uint64_t v9 = (std::string *)sub_19E3A0504((unint64_t *)(a1 + 8));
    }
    int v10 = *(char *)(v6 + 31);
    if (v10 >= 0) {
      unsigned int v11 = (const std::string::value_type *)v7;
    }
    else {
      unsigned int v11 = *(const std::string::value_type **)(v6 + 8);
    }
    if (v10 >= 0) {
      std::string::size_type v12 = *(unsigned __int8 *)(v6 + 31);
    }
    else {
      std::string::size_type v12 = *(void *)(v6 + 16);
    }
    std::string::append(v9, v11, v12);
  }
  return sub_19E3AA1D8(a1 + 40, a2 + 40);
}

void sub_19E3A6D28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E3A6D40(uint64_t a1)
{
  return sub_19E3B52AC(a1 + 16);
}

void *sub_19E3A6D48@<X0>(void *a1@<X8>)
{
  return sub_19E382340(a1, "sentencepiece.SelfTestData");
}

void *sub_19E3A6D58(void *a1, uint64_t a2)
{
  *a1 = &unk_1EF0B9028;
  a1[1] = a2;
  sub_19E3AFEF4((uint64_t)(a1 + 2), a2);
  a1[5] = 0;
  if (atomic_load_explicit(dword_1EC304F20, memory_order_acquire)) {
    sub_19E3BB484(dword_1EC304F20);
  }
  a1[6] = &qword_1E945A358;
  a1[7] = 0x100000000;
  return a1;
}

void sub_19E3A6DD8(_Unwind_Exception *a1)
{
  sub_19E3AFFD4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19E3A6DEC(uint64_t a1)
{
  return a1;
}

uint64_t sub_19E3A6E28(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 8);
  uint64_t v3 = (void *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) == 0)
  {
    if (!v3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (*v3)
  {
LABEL_3:
    sub_19E3AF8D4((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 2813);
    uint64_t v4 = sub_19E3AF8EC(v10, "CHECK failed: GetArena() == nullptr: ");
    sub_19E3AFA28((uint64_t)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    uint64_t result = sub_19E3AFA30((uint64_t)v10);
  }
LABEL_4:
  unint64_t v6 = *(uint64_t **)(v1 + 48);
  uint64_t v5 = (uint64_t *)(v1 + 48);
  if (v6 != &qword_1E945A358)
  {
    uint64_t v7 = sub_19E3A02F0(v5);
    uint64_t v8 = v7;
    if (*(char *)(v7 + 23) < 0) {
      operator delete(*(void **)v7);
    }
    return MEMORY[0x19F3BDCF0](v8, 0x1012C40EC159624);
  }
  return result;
}

void sub_19E3A6EF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19E3A6F0C(uint64_t a1)
{
  sub_19E3A6DEC(a1);
  JUMPOUT(0x19F3BDCF0);
}

unsigned __int8 *sub_19E3A6F44(uint64_t a1)
{
  uint64_t result = sub_19E3B3D7C((unsigned __int8 *)(a1 + 16));
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3)
  {
    unint64_t v4 = *(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v4 + 23) < 0)
    {
      **(unsigned char **)unint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
    }
    else
    {
      *(unsigned char *)unint64_t v4 = 0;
      *(unsigned char *)(v4 + 23) = 0;
    }
  }
  if ((v3 & 6) != 0) {
    *(void *)(a1 + 56) = 0x100000000;
  }
  *(_DWORD *)(a1 + 4sub_19E392864(&a9, 0) = 0;
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5)
  {
    unint64_t v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v6 + 31) < 0)
    {
      **(unsigned char **)(v6 + 8) = 0;
      *(void *)(v6 + 16) = 0;
    }
    else
    {
      *(unsigned char *)(v6 + 8) = 0;
      *(unsigned char *)(v6 + 31) = 0;
    }
  }
  return result;
}

uint64_t sub_19E3A6FDC(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  *(void *)uint64_t v27 = a2;
  int v5 = 0;
  if ((sub_19E3A03C4((uint64_t)a3, (char **)v27, a3[11].i32[1]) & 1) == 0)
  {
    uint64_t v7 = (void *)(a1 + 8);
    while (1)
    {
      uint64_t v8 = (char *)(*(void *)v27 + 1);
      unsigned int v9 = **(unsigned char **)v27;
      if (((char)**(unsigned char **)v27 & 0x80000000) == 0) {
        goto LABEL_7;
      }
      unsigned int v10 = v9 + (*v8 << 7);
      unsigned int v9 = v10 - 128;
      if ((*v8 & 0x80000000) == 0) {
        break;
      }
      uint64_t v22 = sub_19E3BCF3C(*(uint64_t *)v27, v10 - 128);
      *(void *)uint64_t v27 = v22;
      if (!v22) {
        goto LABEL_48;
      }
      uint64_t v8 = (char *)v22;
      unsigned int v9 = v23;
LABEL_8:
      unsigned int v11 = v9 >> 3;
      if (v9 >> 3 == 3)
      {
        if (v9 == 24)
        {
          int v15 = v8 + 1;
          unint64_t v16 = *v8;
          if ((*v8 & 0x80000000) == 0) {
            goto LABEL_24;
          }
          int v17 = *v15;
          int v18 = v16 + (v17 << 7);
          unint64_t v16 = (v18 - 128);
          if (v17 < 0)
          {
            *(void *)uint64_t v27 = sub_19E3BCEF4((uint64_t)v8, (v18 - 128));
            if (!*(void *)v27)
            {
LABEL_48:
              *(void *)uint64_t v27 = 0;
              goto LABEL_2;
            }
            unint64_t v16 = v25;
          }
          else
          {
            int v15 = v8 + 2;
LABEL_24:
            *(void *)uint64_t v27 = v15;
          }
          if ((v16 - 1) > 5)
          {
            if (*v7) {
              uint64_t v26 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
            }
            else {
              uint64_t v26 = (std::string *)sub_19E3A0504((unint64_t *)(a1 + 8));
            }
            sub_19E3BCDE0(3, v16, v26);
          }
          else
          {
            *(_DWORD *)(a1 + 40) |= 4u;
            *(_DWORD *)(a1 + 6sub_19E392864(&a9, 0) = v16;
          }
          goto LABEL_38;
        }
      }
      else if (v11 == 2)
      {
        if (v9 == 21)
        {
          v5 |= 2u;
          *(_DWORD *)(a1 + 56) = *(_DWORD *)v8;
          *(void *)uint64_t v27 = v8 + 4;
          goto LABEL_38;
        }
      }
      else if (v11 == 1 && v9 == 10)
      {
        *(_DWORD *)(a1 + 40) |= 1u;
        uint64_t v19 = *(void *)(a1 + 8);
        uint64_t v20 = (void *)(v19 & 0xFFFFFFFFFFFFFFFELL);
        if (v19) {
          uint64_t v20 = (void *)*v20;
        }
        uint64_t v21 = (std::string *)sub_19E3AE730((uint64_t *)(a1 + 48), (uint64_t)v20);
        char v14 = (void *)sub_19E3BCFF0(v21, *(char **)v27, (uint64_t)a3);
        goto LABEL_37;
      }
      if (v9) {
        BOOL v13 = (v9 & 7) == 4;
      }
      else {
        BOOL v13 = 1;
      }
      if (v13)
      {
        a3[10].i32[0] = v9 - 1;
        goto LABEL_2;
      }
      if (v9 < 0x640)
      {
        if (*v7)
        {
          uint64_t v24 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
        }
        else
        {
          uint64_t v24 = (std::string *)sub_19E3A0504((unint64_t *)(a1 + 8));
          uint64_t v8 = *(char **)v27;
        }
        char v14 = sub_19E3BD4AC(v9, v24, v8, a3);
      }
      else
      {
        char v14 = sub_19E3B564C((uint64_t *)(a1 + 16), v9, (unsigned __int8 *)v8, (uint64_t)qword_1E945A580, (unint64_t *)(a1 + 8), a3);
      }
LABEL_37:
      *(void *)uint64_t v27 = v14;
      if (!v14) {
        goto LABEL_48;
      }
LABEL_38:
      if (sub_19E3A03C4((uint64_t)a3, (char **)v27, a3[11].i32[1])) {
        goto LABEL_2;
      }
    }
    uint64_t v8 = (char *)(*(void *)v27 + 2);
LABEL_7:
    *(void *)uint64_t v27 = v8;
    goto LABEL_8;
  }
LABEL_2:
  *(_DWORD *)(a1 + 40) |= v5;
  return *(void *)v27;
}

char *sub_19E3A7264(uint64_t a1, char *a2, unint64_t *a3)
{
  unint64_t v4 = a2;
  int v6 = *(_DWORD *)(a1 + 40);
  if (v6)
  {
    unint64_t v4 = sub_19E39E4E4(a3, 1, (const void **)(*(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL), a2);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_18;
      }
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  if (*a3 <= (unint64_t)v4) {
    unint64_t v4 = sub_19E3AEE48((uint64_t)a3, v4);
  }
  int v7 = *(_DWORD *)(a1 + 56);
  *unint64_t v4 = 21;
  *(_DWORD *)(v4 + 1) = v7;
  v4 += 5;
  if ((v6 & 4) != 0)
  {
LABEL_9:
    if (*a3 <= (unint64_t)v4) {
      unint64_t v4 = sub_19E3AEE48((uint64_t)a3, v4);
    }
    unint64_t v8 = *(int *)(a1 + 60);
    *unint64_t v4 = 24;
    if (v8 > 0x7F)
    {
      v4[1] = v8 | 0x80;
      unint64_t v9 = v8 >> 7;
      if (v8 >> 14)
      {
        v4 += 3;
        do
        {
          *(v4 - 1) = v9 | 0x80;
          unint64_t v10 = v9 >> 7;
          ++v4;
          unint64_t v11 = v9 >> 14;
          v9 >>= 7;
        }
        while (v11);
        *(v4 - 1) = v10;
      }
      else
      {
        v4[2] = v9;
        v4 += 3;
      }
    }
    else
    {
      v4[1] = v8;
      v4 += 2;
    }
  }
LABEL_18:
  std::string::size_type v12 = sub_19E3B6444(a1 + 16, 200, 0x20000000, v4, (uint64_t *)a3);
  BOOL v13 = v12;
  uint64_t v14 = *(void *)(a1 + 8);
  if ((v14 & 1) == 0) {
    return v13;
  }
  unint64_t v16 = v14 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v16 + 31) < 0)
  {
    int v17 = *(void **)(v16 + 8);
    uint64_t v18 = *(void *)(v16 + 16);
  }
  else
  {
    int v17 = (void *)(v16 + 8);
    LODWORD(v18) = *(unsigned __int8 *)(v16 + 31);
  }
  if ((uint64_t)(*a3 - (void)v12) >= (int)v18)
  {
    uint64_t v19 = (int)v18;
    memcpy(v12, v17, (int)v18);
    v13 += v19;
    return v13;
  }
  return sub_19E3AEF5C((uint64_t *)a3, (char *)v17, v18, (unint64_t)v12);
}

uint64_t sub_19E3A7410(uint64_t a1)
{
  uint64_t result = sub_19E3B9178(a1 + 16);
  int v3 = *(_DWORD *)(a1 + 40);
  if ((v3 & 7) != 0)
  {
    if (v3)
    {
      unint64_t v4 = *(void *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL;
      uint64_t v5 = *(unsigned __int8 *)(v4 + 23);
      uint64_t v6 = *(void *)(v4 + 8);
      if ((v5 & 0x80u) == 0) {
        uint64_t v6 = v5;
      }
      result += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    if ((v3 & 2) != 0) {
      result += 5;
    }
    if ((v3 & 4) != 0)
    {
      int v7 = *(_DWORD *)(a1 + 60);
      if (v7 < 0) {
        uint64_t v8 = 11;
      }
      else {
        uint64_t v8 = ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
      }
      result += v8;
    }
  }
  uint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    unint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v10 + 31) < 0) {
      uint64_t v11 = *(void *)(v10 + 16);
    }
    else {
      uint64_t v11 = *(unsigned __int8 *)(v10 + 31);
    }
    result += v11;
  }
  *(_DWORD *)(a1 + 44) = result;
  return result;
}

void sub_19E3A74F4(uint64_t a1, void *lpsrc)
{
  if (!__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0B75B0, (const struct __class_type_info *)&unk_1EF0B6020, 0))sub_19E3A0D08(); {
  sub_19E3A757C(a1, (uint64_t)lpsrc);
  }
}

void sub_19E3A757C(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    sub_19E3AF8D4((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 3001);
    unint64_t v4 = sub_19E3AF8EC(v18, "CHECK failed: (&from) != (this): ");
    sub_19E3AFA28((uint64_t)&v17, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v18);
  }
  sub_19E3B3E1C(a1 + 16, a2 + 16);
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5)
  {
    unint64_t v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    uint64_t v8 = *(void *)(a1 + 8);
    if (v8) {
      uint64_t v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      uint64_t v9 = (std::string *)sub_19E3A0504((unint64_t *)(a1 + 8));
    }
    int v10 = *(char *)(v6 + 31);
    if (v10 >= 0) {
      uint64_t v11 = (const std::string::value_type *)v7;
    }
    else {
      uint64_t v11 = *(const std::string::value_type **)(v6 + 8);
    }
    if (v10 >= 0) {
      std::string::size_type v12 = *(unsigned __int8 *)(v6 + 31);
    }
    else {
      std::string::size_type v12 = *(void *)(v6 + 16);
    }
    std::string::append(v9, v11, v12);
  }
  int v13 = *(_DWORD *)(a2 + 40);
  if ((v13 & 7) != 0)
  {
    if (v13)
    {
      uint64_t v14 = (long long *)(*(void *)(a2 + 48) & 0xFFFFFFFFFFFFFFFELL);
      *(_DWORD *)(a1 + 40) |= 1u;
      uint64_t v15 = *(void *)(a1 + 8);
      unint64_t v16 = (void *)(v15 & 0xFFFFFFFFFFFFFFFELL);
      if (v15) {
        unint64_t v16 = (void *)*v16;
      }
      sub_19E3AE6F8((uint64_t *)(a1 + 48), v14, (uint64_t)v16);
      if ((v13 & 2) == 0)
      {
LABEL_16:
        if ((v13 & 4) == 0)
        {
LABEL_18:
          *(_DWORD *)(a1 + 40) |= v13;
          return;
        }
LABEL_17:
        *(_DWORD *)(a1 + 6sub_19E392864(&a9, 0) = *(_DWORD *)(a2 + 60);
        goto LABEL_18;
      }
    }
    else if ((v13 & 2) == 0)
    {
      goto LABEL_16;
    }
    *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
    if ((v13 & 4) == 0) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
}

void sub_19E3A76B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E3A76D0(uint64_t a1)
{
  return sub_19E3B52AC(a1 + 16);
}

void *sub_19E3A76D8@<X0>(void *a1@<X8>)
{
  return sub_19E382340(a1, "sentencepiece.ModelProto.SentencePiece");
}

uint64_t sub_19E3A76E8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1EF0B8650;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = &unk_1EF0B8768;
  sub_19E3AFEF4(a1 + 24, a2);
  *(void *)(a1 + 56) = a2;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  if (atomic_load_explicit(dword_1EC304F38, memory_order_acquire)) {
    sub_19E3BB484(dword_1EC304F38);
  }
  *(_OWORD *)(a1 + 8sub_19E392864(&a9, 0) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  return a1;
}

void sub_19E3A7798(_Unwind_Exception *a1)
{
  sub_19E3AA388(v2);
  sub_19E3AFFD4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19E3A77B8(uint64_t a1)
{
  return a1;
}

uint64_t sub_19E3A77FC(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 8);
  int v3 = (void *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) == 0)
  {
    if (!v3) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (*v3)
  {
LABEL_3:
    sub_19E3AF8D4((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 3145);
    unint64_t v4 = sub_19E3AF8EC(v13, "CHECK failed: GetArena() == nullptr: ");
    sub_19E3AFA28((uint64_t)&v12, (const char **)&v4->__r_.__value_.__l.__data_);
    uint64_t result = sub_19E3AFA30((uint64_t)v13);
  }
LABEL_4:
  if ((_UNKNOWN *)v1 != &unk_1E945A370)
  {
    uint64_t v5 = *(uint64_t **)(v1 + 80);
    if (v5)
    {
      unint64_t v6 = sub_19E3A1154(v5);
      MEMORY[0x19F3BDCF0](v6, 0x10A1C4074230EEALL);
    }
    uint64_t v7 = *(void *)(v1 + 88);
    if (v7)
    {
      uint64_t v8 = sub_19E3A4F4C(v7);
      MEMORY[0x19F3BDCF0](v8, 0x10A1C402CDD3876);
    }
    uint64_t v9 = *(void *)(v1 + 96);
    if (v9)
    {
      uint64_t v10 = sub_19E3A6548(v9);
      MEMORY[0x19F3BDCF0](v10, 0x10A1C4075D007F8);
    }
    uint64_t result = *(void *)(v1 + 104);
    if (result)
    {
      uint64_t v11 = sub_19E3A4F4C(result);
      return MEMORY[0x19F3BDCF0](v11, 0x10A1C402CDD3876);
    }
  }
  return result;
}

void sub_19E3A790C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E3A7928(uint64_t a1)
{
  return sub_19E3A77B8(a1 - 16);
}

void sub_19E3A7930(uint64_t a1)
{
  sub_19E3A77B8(a1);
  JUMPOUT(0x19F3BDCF0);
}

void sub_19E3A7968(uint64_t a1)
{
  sub_19E3A77B8(a1 - 16);
  JUMPOUT(0x19F3BDCF0);
}

uint64_t sub_19E3A79A4(uint64_t a1)
{
  sub_19E3B3D7C((unsigned __int8 *)(a1 + 24));
  uint64_t result = (uint64_t)sub_19E3A9E44((unsigned __int8 *)(a1 + 56));
  int v3 = *(_DWORD *)(a1 + 48);
  if ((v3 & 0xF) != 0)
  {
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 80);
      if (!v4)
      {
        sub_19E3AF8D4((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 3178);
        uint64_t v5 = sub_19E3AF8EC(v15, "CHECK failed: trainer_spec_ != nullptr: ");
        sub_19E3AFA28((uint64_t)&v14, (const char **)&v5->__r_.__value_.__l.__data_);
        sub_19E3AFA30((uint64_t)v15);
        uint64_t v4 = *(void *)(a1 + 80);
      }
      uint64_t result = sub_19E3A14C0(v4);
    }
    if ((v3 & 2) != 0)
    {
      uint64_t v6 = *(void *)(a1 + 88);
      if (!v6)
      {
        sub_19E3AF8D4((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 3182);
        uint64_t v7 = sub_19E3AF8EC(v15, "CHECK failed: normalizer_spec_ != nullptr: ");
        sub_19E3AFA28((uint64_t)&v14, (const char **)&v7->__r_.__value_.__l.__data_);
        sub_19E3AFA30((uint64_t)v15);
        uint64_t v6 = *(void *)(a1 + 88);
      }
      uint64_t result = (uint64_t)sub_19E3A5170(v6);
    }
    if ((v3 & 4) != 0)
    {
      uint64_t v8 = *(void *)(a1 + 96);
      if (!v8)
      {
        sub_19E3AF8D4((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 3186);
        uint64_t v9 = sub_19E3AF8EC(v15, "CHECK failed: self_test_data_ != nullptr: ");
        sub_19E3AFA28((uint64_t)&v14, (const char **)&v9->__r_.__value_.__l.__data_);
        sub_19E3AFA30((uint64_t)v15);
        uint64_t v8 = *(void *)(a1 + 96);
      }
      uint64_t result = sub_19E3A6644(v8);
    }
    if ((v3 & 8) != 0)
    {
      uint64_t v10 = *(void *)(a1 + 104);
      if (!v10)
      {
        sub_19E3AF8D4((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 3190);
        uint64_t v11 = sub_19E3AF8EC(v15, "CHECK failed: denormalizer_spec_ != nullptr: ");
        sub_19E3AFA28((uint64_t)&v14, (const char **)&v11->__r_.__value_.__l.__data_);
        sub_19E3AFA30((uint64_t)v15);
        uint64_t v10 = *(void *)(a1 + 104);
      }
      uint64_t result = (uint64_t)sub_19E3A5170(v10);
    }
  }
  *(_DWORD *)(a1 + 48) = 0;
  uint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    unint64_t v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v13 + 31) < 0)
    {
      **(unsigned char **)(v13 + 8) = 0;
      *(void *)(v13 + 16) = 0;
    }
    else
    {
      *(unsigned char *)(v13 + 8) = 0;
      *(unsigned char *)(v13 + 31) = 0;
    }
  }
  return result;
}

void sub_19E3A7B58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_19E3A7B88(uint64_t a1, char *a2, int32x2_t *a3)
{
  uint64_t v30 = a2;
  if ((sub_19E3A03C4((uint64_t)a3, &v30, a3[11].i32[1]) & 1) == 0)
  {
    uint64_t v6 = (void *)(a1 + 8);
    while (2)
    {
      uint64_t v7 = v30 + 1;
      unsigned int v8 = *v30;
      if (*v30 < 0)
      {
        unsigned int v9 = v8 + (*v7 << 7);
        unsigned int v8 = v9 - 128;
        if (*v7 < 0)
        {
          uint64_t v27 = (char *)sub_19E3BCF3C((uint64_t)v30, v9 - 128);
          uint64_t v30 = v27;
          if (!v27) {
            return 0;
          }
          uint64_t v7 = v27;
          unsigned int v8 = v28;
LABEL_8:
          switch(v8 >> 3)
          {
            case 1u:
              if (v8 != 10) {
                goto LABEL_49;
              }
              uint64_t v10 = v7 - 1;
              break;
            case 2u:
              if (v8 != 18) {
                goto LABEL_49;
              }
              *(_DWORD *)(a1 + 48) |= 1u;
              uint64_t v18 = *(void *)(a1 + 80);
              if (!v18)
              {
                uint64_t v19 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFELL);
                if (*v6) {
                  uint64_t v19 = (void *)*v19;
                }
                uint64_t v18 = sub_19E3A8D34((uint64_t)v19);
                *(void *)(a1 + 8sub_19E392864(&a9, 0) = v18;
                uint64_t v7 = v30;
              }
              uint64_t v20 = (char *)sub_19E3A7FE8(a3, v18, (unsigned __int8 *)v7);
              goto LABEL_46;
            case 3u:
              if (v8 != 26) {
                goto LABEL_49;
              }
              *(_DWORD *)(a1 + 48) |= 2u;
              uint64_t v21 = *(void *)(a1 + 88);
              if (v21) {
                goto LABEL_45;
              }
              uint64_t v22 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFELL);
              if (*v6) {
                uint64_t v22 = (void *)*v22;
              }
              uint64_t v21 = sub_19E3A8E04((uint64_t)v22);
              *(void *)(a1 + 88) = v21;
              goto LABEL_44;
            case 4u:
              if (v8 != 34) {
                goto LABEL_49;
              }
              *(_DWORD *)(a1 + 48) |= 4u;
              uint64_t v23 = *(void *)(a1 + 96);
              if (!v23)
              {
                uint64_t v24 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFELL);
                if (*v6) {
                  uint64_t v24 = (void *)*v24;
                }
                uint64_t v23 = sub_19E3A8FA4((uint64_t)v24);
                *(void *)(a1 + 96) = v23;
                uint64_t v7 = v30;
              }
              uint64_t v20 = (char *)sub_19E3A8178(a3, v23, v7);
              goto LABEL_46;
            case 5u:
              if (v8 != 42) {
                goto LABEL_49;
              }
              *(_DWORD *)(a1 + 48) |= 8u;
              uint64_t v21 = *(void *)(a1 + 104);
              if (v21) {
                goto LABEL_45;
              }
              unint64_t v25 = (void *)(*v6 & 0xFFFFFFFFFFFFFFFELL);
              if (*v6) {
                unint64_t v25 = (void *)*v25;
              }
              uint64_t v21 = sub_19E3A8E04((uint64_t)v25);
              *(void *)(a1 + 104) = v21;
LABEL_44:
              uint64_t v7 = v30;
LABEL_45:
              uint64_t v20 = (char *)sub_19E3A80B0(a3, v21, (unsigned __int8 *)v7);
              goto LABEL_46;
            default:
LABEL_49:
              if (v8) {
                BOOL v26 = (v8 & 7) == 4;
              }
              else {
                BOOL v26 = 1;
              }
              if (v26)
              {
                a3[10].i32[0] = v8 - 1;
                return v30;
              }
              if (v8 < 0x640)
              {
                if (*v6)
                {
                  uint64_t v29 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFELL) + 8);
                }
                else
                {
                  uint64_t v29 = (std::string *)sub_19E3A0504((unint64_t *)(a1 + 8));
                  uint64_t v7 = v30;
                }
                uint64_t v20 = (char *)sub_19E3BD4AC(v8, v29, v7, a3);
              }
              else
              {
                uint64_t v20 = (char *)sub_19E3B564C((uint64_t *)(a1 + 24), v8, (unsigned __int8 *)v7, (uint64_t)&unk_1E945A370, (unint64_t *)(a1 + 8), a3);
              }
LABEL_46:
              uint64_t v30 = v20;
              if (!v20) {
                return 0;
              }
LABEL_47:
              if (sub_19E3A03C4((uint64_t)a3, &v30, a3[11].i32[1])) {
                return v30;
              }
              continue;
          }
          while (1)
          {
            uint64_t v11 = (unsigned __int8 *)(v10 + 1);
            uint64_t v30 = v10 + 1;
            uint64_t v12 = *(int **)(a1 + 72);
            if (!v12) {
              break;
            }
            uint64_t v13 = *(int *)(a1 + 64);
            int v14 = *v12;
            if ((int)v13 >= *v12)
            {
              if (v14 == *(_DWORD *)(a1 + 68))
              {
LABEL_16:
                sub_19E3C232C(a1 + 56, v14 + 1);
                uint64_t v12 = *(int **)(a1 + 72);
                int v14 = *v12;
              }
              int *v12 = v14 + 1;
              uint64_t v15 = sub_19E3A9074(*(void *)(a1 + 56));
              uint64_t v16 = *(void *)(a1 + 72);
              uint64_t v17 = *(int *)(a1 + 64);
              *(_DWORD *)(a1 + 64) = v17 + 1;
              *(void *)(v16 + 8 * v17 + 8) = v15;
              uint64_t v11 = (unsigned __int8 *)v30;
              goto LABEL_18;
            }
            *(_DWORD *)(a1 + 64) = v13 + 1;
            uint64_t v15 = *(void **)&v12[2 * v13 + 2];
LABEL_18:
            uint64_t v10 = (char *)sub_19E3A7F20(a3, (uint64_t)v15, v11);
            uint64_t v30 = v10;
            if (!v10) {
              return 0;
            }
            if (*(void *)a3 <= (unint64_t)v10 || *v10 != 10) {
              goto LABEL_47;
            }
          }
          int v14 = *(_DWORD *)(a1 + 68);
          goto LABEL_16;
        }
        uint64_t v7 = v30 + 2;
      }
      break;
    }
    uint64_t v30 = v7;
    goto LABEL_8;
  }
  return v30;
}

uint64_t sub_19E3A7F20(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v6 = (char)*a3;
  unsigned int v7 = *a3;
  if (v6 < 0)
  {
    uint64_t result = sub_19E3BCF80((uint64_t)a3, v7);
    if (!result) {
      return result;
    }
    uint64_t v8 = result;
    unsigned int v7 = v10;
  }
  else
  {
    uint64_t v8 = (uint64_t)(a3 + 1);
  }
  int v11 = sub_19E3A0830((uint64_t)a1, v8, v7);
  int v12 = a1[11].i32[0];
  BOOL v13 = __OFSUB__(v12--, 1);
  a1[11].i32[0] = v12;
  if (v12 < 0 != v13) {
    return 0;
  }
  int v14 = v11;
  uint64_t result = sub_19E3A6FDC(a2, v8, a1);
  if (!result) {
    return result;
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v15 = a1[3].i32[1] + v14;
  a1[3].i32[1] = v15;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v15 & (v15 >> 31)));
  return result;
}

uint64_t sub_19E3A7FE8(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v6 = (char)*a3;
  unsigned int v7 = *a3;
  if (v6 < 0)
  {
    uint64_t result = sub_19E3BCF80((uint64_t)a3, v7);
    if (!result) {
      return result;
    }
    uint64_t v8 = result;
    unsigned int v7 = v10;
  }
  else
  {
    uint64_t v8 = (uint64_t)(a3 + 1);
  }
  int v11 = sub_19E3A0830((uint64_t)a1, v8, v7);
  int v12 = a1[11].i32[0];
  BOOL v13 = __OFSUB__(v12--, 1);
  a1[11].i32[0] = v12;
  if (v12 < 0 != v13) {
    return 0;
  }
  int v14 = v11;
  uint64_t result = (uint64_t)sub_19E3A1788(a2, v8, a1);
  if (!result) {
    return result;
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v15 = a1[3].i32[1] + v14;
  a1[3].i32[1] = v15;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v15 & (v15 >> 31)));
  return result;
}

uint64_t sub_19E3A80B0(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v6 = (char)*a3;
  unsigned int v7 = *a3;
  if (v6 < 0)
  {
    uint64_t result = sub_19E3BCF80((uint64_t)a3, v7);
    if (!result) {
      return result;
    }
    uint64_t v8 = result;
    unsigned int v7 = v10;
  }
  else
  {
    uint64_t v8 = (uint64_t)(a3 + 1);
  }
  int v11 = sub_19E3A0830((uint64_t)a1, v8, v7);
  int v12 = a1[11].i32[0];
  BOOL v13 = __OFSUB__(v12--, 1);
  a1[11].i32[0] = v12;
  if (v12 < 0 != v13) {
    return 0;
  }
  int v14 = v11;
  uint64_t result = sub_19E3A5280(a2, v8, a1);
  if (!result) {
    return result;
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v15 = a1[3].i32[1] + v14;
  a1[3].i32[1] = v15;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v15 & (v15 >> 31)));
  return result;
}

uint64_t sub_19E3A8178(int32x2_t *a1, uint64_t a2, char *a3)
{
  int v6 = *a3;
  unsigned int v7 = *a3;
  if (v6 < 0)
  {
    uint64_t result = sub_19E3BCF80((uint64_t)a3, v7);
    if (!result) {
      return result;
    }
    uint64_t v8 = (char *)result;
    unsigned int v7 = v10;
  }
  else
  {
    uint64_t v8 = a3 + 1;
  }
  int v11 = sub_19E3A0830((uint64_t)a1, (int)v8, v7);
  int v12 = a1[11].i32[0];
  BOOL v13 = __OFSUB__(v12--, 1);
  a1[11].i32[0] = v12;
  if (v12 < 0 != v13) {
    return 0;
  }
  int v14 = v11;
  uint64_t result = (uint64_t)sub_19E3A66A0(a2, v8, a1);
  if (!result) {
    return result;
  }
  ++a1[11].i32[0];
  if (a1[10].i32[0]) {
    return 0;
  }
  int v15 = a1[3].i32[1] + v14;
  a1[3].i32[1] = v15;
  *a1 = (int32x2_t)(*(void *)&a1[1] + (v15 & (v15 >> 31)));
  return result;
}

char *sub_19E3A8240(uint64_t a1, char *a2, unint64_t *a3)
{
  int v6 = *(_DWORD *)(a1 + 64);
  if (v6)
  {
    for (int i = 0; i != v6; ++i)
    {
      if (*a3 <= (unint64_t)a2) {
        a2 = sub_19E3AEE48((uint64_t)a3, a2);
      }
      uint64_t v8 = sub_19E37B9F8(a1 + 56, i);
      *a2 = 10;
      unsigned int v9 = *(_DWORD *)(v8 + 44);
      if (v9 > 0x7F)
      {
        a2[1] = v9 | 0x80;
        unsigned int v11 = v9 >> 7;
        if (v9 >> 14)
        {
          unsigned int v10 = a2 + 3;
          do
          {
            *(v10 - 1) = v11 | 0x80;
            unsigned int v12 = v11 >> 7;
            ++v10;
            unsigned int v13 = v11 >> 14;
            v11 >>= 7;
          }
          while (v13);
          *(v10 - 1) = v12;
        }
        else
        {
          a2[2] = v11;
          unsigned int v10 = a2 + 3;
        }
      }
      else
      {
        a2[1] = v9;
        unsigned int v10 = a2 + 2;
      }
      a2 = sub_19E3A7264(v8, v10, a3);
    }
  }
  int v14 = *(_DWORD *)(a1 + 48);
  if (v14)
  {
    if (*a3 <= (unint64_t)a2) {
      a2 = sub_19E3AEE48((uint64_t)a3, a2);
    }
    uint64_t v15 = *(void *)(a1 + 80);
    *a2 = 18;
    unsigned int v16 = *(_DWORD *)(v15 + 48);
    if (v16 > 0x7F)
    {
      a2[1] = v16 | 0x80;
      unsigned int v18 = v16 >> 7;
      if (v16 >> 14)
      {
        uint64_t v17 = a2 + 3;
        do
        {
          *(v17 - 1) = v18 | 0x80;
          unsigned int v19 = v18 >> 7;
          ++v17;
          unsigned int v20 = v18 >> 14;
          v18 >>= 7;
        }
        while (v20);
        *(v17 - 1) = v19;
      }
      else
      {
        a2[2] = v18;
        uint64_t v17 = a2 + 3;
      }
    }
    else
    {
      a2[1] = v16;
      uint64_t v17 = a2 + 2;
    }
    a2 = sub_19E3A2E00(v15, v17, (uint64_t *)a3);
    if ((v14 & 2) == 0)
    {
LABEL_15:
      if ((v14 & 4) == 0) {
        goto LABEL_16;
      }
      goto LABEL_38;
    }
  }
  else if ((v14 & 2) == 0)
  {
    goto LABEL_15;
  }
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_19E3AEE48((uint64_t)a3, a2);
  }
  uint64_t v21 = *(void *)(a1 + 88);
  *a2 = 26;
  unsigned int v22 = *(_DWORD *)(v21 + 52);
  if (v22 > 0x7F)
  {
    a2[1] = v22 | 0x80;
    unsigned int v24 = v22 >> 7;
    if (v22 >> 14)
    {
      uint64_t v23 = a2 + 3;
      do
      {
        *(v23 - 1) = v24 | 0x80;
        unsigned int v25 = v24 >> 7;
        ++v23;
        unsigned int v26 = v24 >> 14;
        v24 >>= 7;
      }
      while (v26);
      *(v23 - 1) = v25;
    }
    else
    {
      a2[2] = v24;
      uint64_t v23 = a2 + 3;
    }
  }
  else
  {
    a2[1] = v22;
    uint64_t v23 = a2 + 2;
  }
  a2 = sub_19E3A56A4(v21, v23, a3);
  if ((v14 & 4) == 0)
  {
LABEL_16:
    if ((v14 & 8) == 0) {
      goto LABEL_58;
    }
    goto LABEL_48;
  }
LABEL_38:
  if (*a3 <= (unint64_t)a2) {
    a2 = sub_19E3AEE48((uint64_t)a3, a2);
  }
  uint64_t v27 = *(void *)(a1 + 96);
  *a2 = 34;
  unsigned int v28 = *(_DWORD *)(v27 + 64);
  if (v28 > 0x7F)
  {
    a2[1] = v28 | 0x80;
    unsigned int v30 = v28 >> 7;
    if (v28 >> 14)
    {
      uint64_t v29 = a2 + 3;
      do
      {
        *(v29 - 1) = v30 | 0x80;
        unsigned int v31 = v30 >> 7;
        ++v29;
        unsigned int v32 = v30 >> 14;
        v30 >>= 7;
      }
      while (v32);
      *(v29 - 1) = v31;
    }
    else
    {
      a2[2] = v30;
      uint64_t v29 = a2 + 3;
    }
  }
  else
  {
    a2[1] = v28;
    uint64_t v29 = a2 + 2;
  }
  a2 = sub_19E3A6980(v27, v29, a3);
  if ((v14 & 8) != 0)
  {
LABEL_48:
    if (*a3 <= (unint64_t)a2) {
      a2 = sub_19E3AEE48((uint64_t)a3, a2);
    }
    uint64_t v33 = *(void *)(a1 + 104);
    *a2 = 42;
    unsigned int v34 = *(_DWORD *)(v33 + 52);
    if (v34 > 0x7F)
    {
      a2[1] = v34 | 0x80;
      unsigned int v36 = v34 >> 7;
      if (v34 >> 14)
      {
        uint64_t v35 = a2 + 3;
        do
        {
          *(v35 - 1) = v36 | 0x80;
          unsigned int v37 = v36 >> 7;
          ++v35;
          unsigned int v38 = v36 >> 14;
          v36 >>= 7;
        }
        while (v38);
        *(v35 - 1) = v37;
      }
      else
      {
        a2[2] = v36;
        uint64_t v35 = a2 + 3;
      }
    }
    else
    {
      a2[1] = v34;
      uint64_t v35 = a2 + 2;
    }
    a2 = sub_19E3A56A4(v33, v35, a3);
  }
LABEL_58:
  uint64_t v39 = sub_19E3B6444(a1 + 24, 200, 0x20000000, a2, (uint64_t *)a3);
  uint64_t v40 = v39;
  uint64_t v41 = *(void *)(a1 + 8);
  if ((v41 & 1) == 0) {
    return v40;
  }
  unint64_t v43 = v41 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v43 + 31) < 0)
  {
    char v44 = *(void **)(v43 + 8);
    uint64_t v45 = *(void *)(v43 + 16);
  }
  else
  {
    char v44 = (void *)(v43 + 8);
    LODWORD(v45) = *(unsigned __int8 *)(v43 + 31);
  }
  if ((uint64_t)(*a3 - (void)v39) >= (int)v45)
  {
    uint64_t v46 = (int)v45;
    memcpy(v39, v44, (int)v45);
    v40 += v46;
    return v40;
  }
  return sub_19E3AEF5C((uint64_t *)a3, (char *)v44, v45, (unint64_t)v39);
}

uint64_t sub_19E3A864C(uint64_t a1)
{
  uint64_t v2 = sub_19E3B9178(a1 + 24);
  uint64_t v3 = *(int *)(a1 + 64);
  uint64_t v4 = v2 + v3;
  uint64_t v5 = *(void *)(a1 + 72);
  if (v5) {
    int v6 = (uint64_t *)(v5 + 8);
  }
  else {
    int v6 = 0;
  }
  if (v3)
  {
    uint64_t v7 = 8 * v3;
    do
    {
      uint64_t v8 = *v6++;
      uint64_t v9 = sub_19E3A7410(v8);
      v4 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6);
      v7 -= 8;
    }
    while (v7);
  }
  int v10 = *(_DWORD *)(a1 + 48);
  if ((v10 & 0xF) == 0) {
    goto LABEL_13;
  }
  if ((v10 & 1) == 0)
  {
    if ((v10 & 2) == 0) {
      goto LABEL_10;
    }
LABEL_16:
    uint64_t v15 = sub_19E3A58B8(*(void *)(a1 + 88));
    v4 += v15 + ((9 * (__clz(v15 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v10 & 4) == 0)
    {
LABEL_11:
      if ((v10 & 8) == 0) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }
    goto LABEL_17;
  }
  uint64_t v14 = sub_19E3A3FC8(*(void *)(a1 + 80));
  v4 += v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v10 & 2) != 0) {
    goto LABEL_16;
  }
LABEL_10:
  if ((v10 & 4) == 0) {
    goto LABEL_11;
  }
LABEL_17:
  uint64_t v16 = sub_19E3A6B18(*(void *)(a1 + 96));
  v4 += v16 + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v10 & 8) != 0)
  {
LABEL_12:
    uint64_t v11 = sub_19E3A58B8(*(void *)(a1 + 104));
    v4 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_13:
  uint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    unint64_t v17 = v12 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v17 + 31) < 0) {
      uint64_t v18 = *(void *)(v17 + 16);
    }
    else {
      uint64_t v18 = *(unsigned __int8 *)(v17 + 31);
    }
    v4 += v18;
  }
  *(_DWORD *)(a1 + 52) = v4;
  return v4;
}

void sub_19E3A87D8(uint64_t a1, void *lpsrc)
{
  if (!__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_1EF0B75B0, (const struct __class_type_info *)&unk_1EF0B5EA8, 0))sub_19E3A0D08(); {
  sub_19E3A8860(a1, (uint64_t)lpsrc);
  }
}

void sub_19E3A8860(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    sub_19E3AF8D4((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 3397);
    uint64_t v4 = sub_19E3AF8EC(v27, "CHECK failed: (&from) != (this): ");
    sub_19E3AFA28((uint64_t)&v26, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v27);
  }
  sub_19E3B3E1C(a1 + 24, a2 + 24);
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v6 = *(void *)(a2 + 8);
  if (v6)
  {
    unint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v8 = (v6 & 0xFFFFFFFFFFFFFFFELL) + 8;
    if (*v5) {
      uint64_t v9 = (std::string *)((*v5 & 0xFFFFFFFFFFFFFFFELL) + 8);
    }
    else {
      uint64_t v9 = (std::string *)sub_19E3A0504((unint64_t *)(a1 + 8));
    }
    int v10 = *(char *)(v7 + 31);
    if (v10 >= 0) {
      uint64_t v11 = (const std::string::value_type *)v8;
    }
    else {
      uint64_t v11 = *(const std::string::value_type **)(v7 + 8);
    }
    if (v10 >= 0) {
      std::string::size_type v12 = *(unsigned __int8 *)(v7 + 31);
    }
    else {
      std::string::size_type v12 = *(void *)(v7 + 16);
    }
    std::string::append(v9, v11, v12);
  }
  sub_19E3AA444(a1 + 56, a2 + 56);
  int v13 = *(_DWORD *)(a2 + 48);
  if ((v13 & 0xF) != 0)
  {
    if (v13)
    {
      *(_DWORD *)(a1 + 48) |= 1u;
      uint64_t v14 = *(void *)(a1 + 80);
      if (!v14)
      {
        uint64_t v15 = (void *)(*v5 & 0xFFFFFFFFFFFFFFFELL);
        if (*v5) {
          uint64_t v15 = (void *)*v15;
        }
        uint64_t v14 = sub_19E3A8D34((uint64_t)v15);
        *(void *)(a1 + 8sub_19E392864(&a9, 0) = v14;
      }
      if (*(void *)(a2 + 80)) {
        uint64_t v16 = *(void **)(a2 + 80);
      }
      else {
        uint64_t v16 = &unk_1E945A3E0;
      }
      sub_19E3A4900(v14, (uint64_t)v16);
    }
    if ((v13 & 2) != 0)
    {
      *(_DWORD *)(a1 + 48) |= 2u;
      uint64_t v17 = *(void *)(a1 + 88);
      if (!v17)
      {
        uint64_t v18 = (void *)(*v5 & 0xFFFFFFFFFFFFFFFELL);
        if (*v5) {
          uint64_t v18 = (void *)*v18;
        }
        uint64_t v17 = sub_19E3A8E04((uint64_t)v18);
        *(void *)(a1 + 88) = v17;
      }
      if (*(void *)(a2 + 88)) {
        unsigned int v19 = *(void **)(a2 + 88);
      }
      else {
        unsigned int v19 = &unk_1E945A528;
      }
      sub_19E3A5AA8(v17, (uint64_t)v19);
      if ((v13 & 4) == 0)
      {
LABEL_25:
        if ((v13 & 8) == 0) {
          return;
        }
        goto LABEL_43;
      }
    }
    else if ((v13 & 4) == 0)
    {
      goto LABEL_25;
    }
    *(_DWORD *)(a1 + 48) |= 4u;
    uint64_t v20 = *(void *)(a1 + 96);
    if (!v20)
    {
      uint64_t v21 = (void *)(*v5 & 0xFFFFFFFFFFFFFFFELL);
      if (*v5) {
        uint64_t v21 = (void *)*v21;
      }
      uint64_t v20 = sub_19E3A8FA4((uint64_t)v21);
      *(void *)(a1 + 96) = v20;
    }
    if (*(void *)(a2 + 96)) {
      unsigned int v22 = *(void **)(a2 + 96);
    }
    else {
      unsigned int v22 = &unk_1E945A5C0;
    }
    sub_19E3A6C50(v20, (uint64_t)v22);
    if ((v13 & 8) != 0)
    {
LABEL_43:
      *(_DWORD *)(a1 + 48) |= 8u;
      uint64_t v23 = *(void *)(a1 + 104);
      if (!v23)
      {
        unsigned int v24 = (void *)(*v5 & 0xFFFFFFFFFFFFFFFELL);
        if (*v5) {
          unsigned int v24 = (void *)*v24;
        }
        uint64_t v23 = sub_19E3A8E04((uint64_t)v24);
        *(void *)(a1 + 104) = v23;
      }
      if (*(void *)(a2 + 104)) {
        unsigned int v25 = *(void **)(a2 + 104);
      }
      else {
        unsigned int v25 = &unk_1E945A528;
      }
      sub_19E3A5AA8(v23, (uint64_t)v25);
    }
  }
}

void sub_19E3A8A84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19E3A8A9C(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    sub_19E3A79A4(a1);
    sub_19E3A8860(a1, a2);
  }
}

uint64_t sub_19E3A8AE8(uint64_t a1)
{
  uint64_t result = sub_19E3B52AC(a1 + 24);
  if (!result) {
    return result;
  }
  uint64_t result = sub_19E3A8CCC(a1 + 56);
  if (!result) {
    return result;
  }
  int v3 = *(_DWORD *)(a1 + 48);
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 80);
    if (!v4)
    {
      sub_19E3AF8D4((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.h", 4741);
      uint64_t v5 = sub_19E3AF8EC(v13, "CHECK failed: !value || trainer_spec_ != nullptr: ");
      sub_19E3AFA28((uint64_t)&v12, (const char **)&v5->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v13);
      uint64_t v4 = *(void *)(a1 + 80);
    }
    uint64_t result = sub_19E3B52AC(v4 + 16);
    if (!result) {
      return result;
    }
    int v3 = *(_DWORD *)(a1 + 48);
  }
  if ((v3 & 2) != 0)
  {
    uint64_t v6 = *(void *)(a1 + 88);
    if (!v6)
    {
      sub_19E3AF8D4((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.h", 4824);
      unint64_t v7 = sub_19E3AF8EC(v13, "CHECK failed: !value || normalizer_spec_ != nullptr: ");
      sub_19E3AFA28((uint64_t)&v12, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v13);
      uint64_t v6 = *(void *)(a1 + 88);
    }
    uint64_t result = sub_19E3B52AC(v6 + 24);
    if (!result) {
      return result;
    }
    int v3 = *(_DWORD *)(a1 + 48);
  }
  if ((v3 & 4) == 0)
  {
LABEL_18:
    if ((v3 & 8) == 0) {
      return 1;
    }
    uint64_t v10 = *(void *)(a1 + 104);
    if (!v10)
    {
      sub_19E3AF8D4((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.h", 4990);
      uint64_t v11 = sub_19E3AF8EC(v13, "CHECK failed: !value || denormalizer_spec_ != nullptr: ");
      sub_19E3AFA28((uint64_t)&v12, (const char **)&v11->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v13);
      uint64_t v10 = *(void *)(a1 + 104);
    }
    uint64_t result = sub_19E3B52AC(v10 + 24);
    if (result) {
      return 1;
    }
    return result;
  }
  uint64_t v8 = *(void *)(a1 + 96);
  if (!v8)
  {
    sub_19E3AF8D4((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.h", 4907);
    uint64_t v9 = sub_19E3AF8EC(v13, "CHECK failed: !value || self_test_data_ != nullptr: ");
    sub_19E3AFA28((uint64_t)&v12, (const char **)&v9->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v13);
    uint64_t v8 = *(void *)(a1 + 96);
  }
  uint64_t result = sub_19E3B52AC(v8 + 16);
  if (result)
  {
    int v3 = *(_DWORD *)(a1 + 48);
    goto LABEL_18;
  }
  return result;
}

void sub_19E3A8C9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_19E3A8CCC(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 8);
  do
  {
    int v3 = v2;
    BOOL v4 = __OFSUB__(v2--, 1);
    if (v2 < 0 != v4) {
      break;
    }
    uint64_t v5 = sub_19E37B9F8(a1, v2);
  }
  while ((sub_19E3B52AC(v5 + 16) & 1) != 0);
  return v3 < 1;
}

void *sub_19E3A8D24@<X0>(void *a1@<X8>)
{
  return sub_19E382340(a1, "sentencepiece.ModelProto");
}

uint64_t sub_19E3A8D34(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  if (*(unsigned char *)(a1 + 24)) {
    (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(a1 + 32) + 32) + 40))(*(void *)(*(void *)(a1 + 32) + 32), &unk_1EF0B5F18, 328);
  }
  uint64_t v2 = sub_19E3AE240(a1, 328);
  sub_19E3A0FE4(v2, a1);
  return v2;
}

void sub_19E3A8DE0(_Unwind_Exception *a1)
{
  MEMORY[0x19F3BDCF0](v1, 0x10A1C4074230EEALL);
  _Unwind_Resume(a1);
}

uint64_t sub_19E3A8E04(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  if (*(unsigned char *)(a1 + 24)) {
    (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(a1 + 32) + 32) + 40))(*(void *)(*(void *)(a1 + 32) + 32), &unk_1EF0B5F68, 88);
  }
  uint64_t v2 = sub_19E3AE240(a1, 88);
  sub_19E3A4E8C(v2, a1);
  return v2;
}

void sub_19E3A8EB0(_Unwind_Exception *a1)
{
  MEMORY[0x19F3BDCF0](v1, 0x10A1C402CDD3876);
  _Unwind_Resume(a1);
}

void *sub_19E3A8ED4(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  if (*(unsigned char *)(a1 + 24)) {
    (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(a1 + 32) + 32) + 40))(*(void *)(*(void *)(a1 + 32) + 32), &unk_1EF0B5FC8, 40);
  }
  uint64_t v2 = (void *)sub_19E3AE240(a1, 40);
  sub_19E3A5CA4(v2, a1);
  return v2;
}

void sub_19E3A8F80(_Unwind_Exception *a1)
{
  MEMORY[0x19F3BDCF0](v1, 0x1081C400F7E8713);
  _Unwind_Resume(a1);
}

uint64_t sub_19E3A8FA4(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  if (*(unsigned char *)(a1 + 24)) {
    (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(a1 + 32) + 32) + 40))(*(void *)(*(void *)(a1 + 32) + 32), &unk_1EF0B5F30, 72);
  }
  uint64_t v2 = sub_19E3AE240(a1, 72);
  sub_19E3A64A4(v2, a1);
  return v2;
}

void sub_19E3A9050(_Unwind_Exception *a1)
{
  MEMORY[0x19F3BDCF0](v1, 0x10A1C4075D007F8);
  _Unwind_Resume(a1);
}

void *sub_19E3A9074(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  if (*(unsigned char *)(a1 + 24)) {
    (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(a1 + 32) + 32) + 40))(*(void *)(*(void *)(a1 + 32) + 32), &unk_1EF0B6020, 64);
  }
  uint64_t v2 = (void *)sub_19E3AE240(a1, 64);
  sub_19E3A6D58(v2, a1);
  return v2;
}

void sub_19E3A9120(_Unwind_Exception *a1)
{
  MEMORY[0x19F3BDCF0](v1, 0x10A1C40F497E4DALL);
  _Unwind_Resume(a1);
}

uint64_t sub_19E3A9144(uint64_t a1)
{
  if (!a1) {
    operator new();
  }
  if (*(unsigned char *)(a1 + 24)) {
    (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(a1 + 32) + 32) + 40))(*(void *)(*(void *)(a1 + 32) + 32), &unk_1EF0B5EA8, 112);
  }
  uint64_t v2 = sub_19E3AE240(a1, 112);
  sub_19E3A76E8(v2, a1);
  return v2;
}

void sub_19E3A91F0(_Unwind_Exception *a1)
{
  MEMORY[0x19F3BDCF0](v1, 0x10A1C4047CE62CFLL);
  _Unwind_Resume(a1);
}

uint64_t sub_19E3A9214()
{
  return sub_19E3A8D34(0);
}

uint64_t sub_19E3A921C(uint64_t a1, uint64_t a2)
{
  return sub_19E3A8D34(a2);
}

uint64_t sub_19E3A9224(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t sub_19E3A922C()
{
  return sub_19E3A8E04(0);
}

uint64_t sub_19E3A9234(uint64_t a1, uint64_t a2)
{
  return sub_19E3A8E04(a2);
}

uint64_t sub_19E3A923C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 52);
}

uint64_t sub_19E3A9244(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 80);
}

uint64_t sub_19E3A924C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 81);
}

uint64_t sub_19E3A9254(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 82);
}

uint64_t sub_19E3A925C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 83);
}

uint64_t sub_19E3A9264(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 65);
}

uint64_t sub_19E3A926C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 66);
}

uint64_t sub_19E3A9274(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 67);
}

uint64_t sub_19E3A927C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 64);
}

void *sub_19E3A9284()
{
  return sub_19E3A8ED4(0);
}

void *sub_19E3A928C(uint64_t a1, uint64_t a2)
{
  return sub_19E3A8ED4(a2);
}

uint64_t sub_19E3A9294(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

uint64_t sub_19E3A929C()
{
  return sub_19E3A8FA4(0);
}

uint64_t sub_19E3A92A4(uint64_t a1, uint64_t a2)
{
  return sub_19E3A8FA4(a2);
}

uint64_t sub_19E3A92AC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 64);
}

void *sub_19E3A92B4()
{
  return sub_19E3A9074(0);
}

void *sub_19E3A92BC(uint64_t a1, uint64_t a2)
{
  return sub_19E3A9074(a2);
}

uint64_t sub_19E3A92C4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

uint64_t sub_19E3A92CC()
{
  return sub_19E3A9144(0);
}

uint64_t sub_19E3A92D4(uint64_t a1, uint64_t a2)
{
  return sub_19E3A9144(a2);
}

uint64_t sub_19E3A92DC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 52);
}

uint64_t sub_19E3A92E4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 64);
}

char *sub_19E3A92EC(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 80);
  if (!v1) {
    uint64_t v1 = &unk_1E945A3E0;
  }
  uint64_t v2 = v1[22];
  if (v2)
  {
    uint64_t result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    uint64_t result = (char *)atomic_load_explicit(&qword_1E9459540, memory_order_acquire);
    if (!result) {
      uint64_t result = (char *)sub_19E3AE394(&off_1E9459528);
    }
  }
  if (result[23] < 0) {
    return *(char **)result;
  }
  return result;
}

char *sub_19E3A9358(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 80);
  if (!v1) {
    uint64_t v1 = &unk_1E945A3E0;
  }
  uint64_t v2 = v1[23];
  if (v2)
  {
    uint64_t result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    uint64_t result = (char *)atomic_load_explicit(&qword_1E94594C0, memory_order_acquire);
    if (!result) {
      uint64_t result = (char *)sub_19E3AE394(&off_1E94594A8);
    }
  }
  if (result[23] < 0) {
    return *(char **)result;
  }
  return result;
}

char *sub_19E3A93C4(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 80);
  if (!v1) {
    uint64_t v1 = &unk_1E945A3E0;
  }
  uint64_t v2 = v1[24];
  if (v2)
  {
    uint64_t result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    uint64_t result = (char *)atomic_load_explicit(&qword_1E94594E0, memory_order_acquire);
    if (!result) {
      uint64_t result = (char *)sub_19E3AE394(&off_1E94594C8);
    }
  }
  if (result[23] < 0) {
    return *(char **)result;
  }
  return result;
}

char *sub_19E3A9430(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 80);
  if (!v1) {
    uint64_t v1 = &unk_1E945A3E0;
  }
  uint64_t v2 = v1[25];
  if (v2)
  {
    uint64_t result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    uint64_t result = (char *)atomic_load_explicit(&qword_1E9459500, memory_order_acquire);
    if (!result) {
      uint64_t result = (char *)sub_19E3AE394(&off_1E94594E8);
    }
  }
  if (result[23] < 0) {
    return *(char **)result;
  }
  return result;
}

char *sub_19E3A949C(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 80);
  if (!v1) {
    uint64_t v1 = &unk_1E945A3E0;
  }
  uint64_t v2 = v1[26];
  if (v2)
  {
    uint64_t result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    uint64_t result = (char *)atomic_load_explicit(&qword_1E9459520, memory_order_acquire);
    if (!result) {
      uint64_t result = (char *)sub_19E3AE394(&off_1E9459508);
    }
  }
  if (result[23] < 0) {
    return *(char **)result;
  }
  return result;
}

uint64_t sub_19E3A9508(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 **)(a1 + 80);
  if (!v1) {
    uint64_t v1 = (unsigned __int8 *)&unk_1E945A3E0;
  }
  return v1[248];
}

uint64_t sub_19E3A9524(uint64_t a1)
{
  uint64_t v1 = (unsigned __int8 *)&unk_1E945A3E0;
  if (*(void *)(a1 + 80)) {
    uint64_t v1 = *(unsigned __int8 **)(a1 + 80);
  }
  return (v1[40] >> 3) & 1;
}

char *sub_19E3A9544(uint64_t a1, int a2)
{
  uint64_t result = (char *)(*(void *)(sub_19E37B9F8(a1 + 56, a2) + 48) & 0xFFFFFFFFFFFFFFFELL);
  if (result[23] < 0) {
    return *(char **)result;
  }
  return result;
}

float sub_19E3A957C(uint64_t a1, int a2)
{
  return *(float *)(sub_19E37B9F8(a1 + 56, a2) + 56);
}

BOOL sub_19E3A959C(uint64_t a1, int a2)
{
  return *(_DWORD *)(sub_19E37B9F8(a1 + 56, a2) + 60) == 1;
}

BOOL sub_19E3A95C4(uint64_t a1, int a2)
{
  return *(_DWORD *)(sub_19E37B9F8(a1 + 56, a2) + 60) == 2;
}

BOOL sub_19E3A95EC(uint64_t a1, int a2)
{
  return *(_DWORD *)(sub_19E37B9F8(a1 + 56, a2) + 60) == 3;
}

BOOL sub_19E3A9614(uint64_t a1, int a2)
{
  return *(_DWORD *)(sub_19E37B9F8(a1 + 56, a2) + 60) == 5;
}

BOOL sub_19E3A963C(uint64_t a1, int a2)
{
  return *(_DWORD *)(sub_19E37B9F8(a1 + 56, a2) + 60) == 4;
}

BOOL sub_19E3A9664(uint64_t a1, int a2)
{
  return *(_DWORD *)(sub_19E37B9F8(a1 + 56, a2) + 60) == 6;
}

char *sub_19E3A968C(uint64_t a1)
{
  uint64_t v1 = *(char **)(a1 + 88);
  if (!v1) {
    uint64_t v1 = (char *)&unk_1E945A528;
  }
  return v1 + 16;
}

char *sub_19E3A96A8(uint64_t a1)
{
  uint64_t v1 = *(char **)(a1 + 104);
  if (!v1) {
    uint64_t v1 = (char *)&unk_1E945A528;
  }
  return v1 + 16;
}

uint64_t sub_19E3A96C4(uint64_t a1)
{
  uint64_t v1 = *(_DWORD **)(a1 + 80);
  if (!v1) {
    uint64_t v1 = &unk_1E945A3E0;
  }
  int v2 = v1[68];
  unsigned int v3 = v2 - 2;
  unsigned int v4 = v2 - 1;
  if (v3 >= 3) {
    return 0;
  }
  else {
    return v4;
  }
}

uint64_t sub_19E3A96F0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

char *sub_19E3A96F8(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 64);
  if (!v1) {
    uint64_t v1 = &unk_1E945A3E0;
  }
  uint64_t v2 = v1[22];
  if (v2)
  {
    uint64_t result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    uint64_t result = (char *)atomic_load_explicit(&qword_1E9459540, memory_order_acquire);
    if (!result) {
      uint64_t result = (char *)sub_19E3AE394(&off_1E9459528);
    }
  }
  if (result[23] < 0) {
    return *(char **)result;
  }
  return result;
}

char *sub_19E3A9764(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 64);
  if (!v1) {
    uint64_t v1 = &unk_1E945A3E0;
  }
  uint64_t v2 = v1[23];
  if (v2)
  {
    uint64_t result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    uint64_t result = (char *)atomic_load_explicit(&qword_1E94594C0, memory_order_acquire);
    if (!result) {
      uint64_t result = (char *)sub_19E3AE394(&off_1E94594A8);
    }
  }
  if (result[23] < 0) {
    return *(char **)result;
  }
  return result;
}

char *sub_19E3A97D0(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 64);
  if (!v1) {
    uint64_t v1 = &unk_1E945A3E0;
  }
  uint64_t v2 = v1[24];
  if (v2)
  {
    uint64_t result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    uint64_t result = (char *)atomic_load_explicit(&qword_1E94594E0, memory_order_acquire);
    if (!result) {
      uint64_t result = (char *)sub_19E3AE394(&off_1E94594C8);
    }
  }
  if (result[23] < 0) {
    return *(char **)result;
  }
  return result;
}

char *sub_19E3A983C(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 64);
  if (!v1) {
    uint64_t v1 = &unk_1E945A3E0;
  }
  uint64_t v2 = v1[25];
  if (v2)
  {
    uint64_t result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    uint64_t result = (char *)atomic_load_explicit(&qword_1E9459500, memory_order_acquire);
    if (!result) {
      uint64_t result = (char *)sub_19E3AE394(&off_1E94594E8);
    }
  }
  if (result[23] < 0) {
    return *(char **)result;
  }
  return result;
}

char *sub_19E3A98A8(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 64);
  if (!v1) {
    uint64_t v1 = &unk_1E945A3E0;
  }
  uint64_t v2 = v1[26];
  if (v2)
  {
    uint64_t result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    uint64_t result = (char *)atomic_load_explicit(&qword_1E9459520, memory_order_acquire);
    if (!result) {
      uint64_t result = (char *)sub_19E3AE394(&off_1E9459508);
    }
  }
  if (result[23] < 0) {
    return *(char **)result;
  }
  return result;
}

uint64_t sub_19E3A9914(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 **)(a1 + 64);
  if (!v1) {
    uint64_t v1 = (unsigned __int8 *)&unk_1E945A3E0;
  }
  return v1[248];
}

uint64_t sub_19E3A9930(uint64_t a1)
{
  uint64_t v1 = (unsigned __int8 *)&unk_1E945A3E0;
  if (*(void *)(a1 + 64)) {
    uint64_t v1 = *(unsigned __int8 **)(a1 + 64);
  }
  return (v1[40] >> 3) & 1;
}

uint64_t sub_19E3A9950(uint64_t a1)
{
  uint64_t v1 = *(_DWORD **)(a1 + 64);
  if (!v1) {
    uint64_t v1 = &unk_1E945A3E0;
  }
  int v2 = v1[68];
  unsigned int v3 = v2 - 2;
  unsigned int v4 = v2 - 1;
  if (v3 >= 3) {
    return 0;
  }
  else {
    return v4;
  }
}

char *sub_19E3A997C(uint64_t a1, int a2)
{
  uint64_t result = (char *)(*(void *)(sub_19E37B9F8(a1 + 40, a2) + 48) & 0xFFFFFFFFFFFFFFFELL);
  if (result[23] < 0) {
    return *(char **)result;
  }
  return result;
}

float sub_19E3A99B4(uint64_t a1, int a2)
{
  return *(float *)(sub_19E37B9F8(a1 + 40, a2) + 56);
}

BOOL sub_19E3A99D4(uint64_t a1, int a2)
{
  return *(_DWORD *)(sub_19E37B9F8(a1 + 40, a2) + 60) == 1;
}

BOOL sub_19E3A99FC(uint64_t a1, int a2)
{
  return *(_DWORD *)(sub_19E37B9F8(a1 + 40, a2) + 60) == 2;
}

BOOL sub_19E3A9A24(uint64_t a1, int a2)
{
  return *(_DWORD *)(sub_19E37B9F8(a1 + 40, a2) + 60) == 3;
}

BOOL sub_19E3A9A4C(uint64_t a1, int a2)
{
  return *(_DWORD *)(sub_19E37B9F8(a1 + 40, a2) + 60) == 5;
}

BOOL sub_19E3A9A74(uint64_t a1, int a2)
{
  return *(_DWORD *)(sub_19E37B9F8(a1 + 40, a2) + 60) == 4;
}

BOOL sub_19E3A9A9C(uint64_t a1, int a2)
{
  return *(_DWORD *)(sub_19E37B9F8(a1 + 40, a2) + 60) == 6;
}

char *sub_19E3A9AC4(uint64_t a1)
{
  uint64_t v1 = *(char **)(a1 + 72);
  if (!v1) {
    uint64_t v1 = (char *)&unk_1E945A528;
  }
  return v1 + 16;
}

char *sub_19E3A9AE0(uint64_t a1)
{
  uint64_t v1 = *(char **)(a1 + 88);
  if (!v1) {
    uint64_t v1 = (char *)&unk_1E945A528;
  }
  return v1 + 16;
}

void sub_19E3A9AFC(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

uint64_t sub_19E3A9B10(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    sub_19E3AF8D4((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1705);
    unsigned int v4 = sub_19E3AF8EC(v8, "CHECK failed: (index) >= (0): ");
    sub_19E3AFA28((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v8);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    sub_19E3AF8D4((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1706);
    uint64_t v5 = sub_19E3AF8EC(v8, "CHECK failed: (index) < (current_size_): ");
    sub_19E3AFA28((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v8);
  }
  return *(void *)(*(void *)(a1 + 16) + 8 * a2 + 8);
}

void sub_19E3A9BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E3A9BF0(uint64_t result)
{
  uint64_t v1 = *(unsigned int *)(result + 8);
  if ((v1 & 0x80000000) != 0)
  {
    sub_19E3AF8D4((uint64_t)v6, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1780);
    unsigned int v4 = sub_19E3AF8EC(v6, "CHECK failed: (n) >= (0): ");
    sub_19E3AFA28((uint64_t)&v5, (const char **)&v4->__r_.__value_.__l.__data_);
    return sub_19E3AFA30((uint64_t)v6);
  }
  else if (v1)
  {
    uint64_t v2 = *(void *)(result + 16) + 8;
    do
    {
      uint64_t v3 = *(void *)v2;
      if (*(char *)(*(void *)v2 + 23) < 0)
      {
        **(unsigned char **)uint64_t v3 = 0;
        *(void *)(v3 + 8) = 0;
      }
      else
      {
        *(unsigned char *)uint64_t v3 = 0;
        *(unsigned char *)(v3 + 23) = 0;
      }
      v2 += 8;
      --v1;
    }
    while (v1);
    *(_DWORD *)(result + 8) = 0;
  }
  return result;
}

void sub_19E3A9C9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E3A9CB4(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    sub_19E3AF8D4((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1705);
    unsigned int v4 = sub_19E3AF8EC(v8, "CHECK failed: (index) >= (0): ");
    sub_19E3AFA28((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v8);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    sub_19E3AF8D4((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1706);
    char v5 = sub_19E3AF8EC(v8, "CHECK failed: (index) < (current_size_): ");
    sub_19E3AFA28((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v8);
  }
  return *(void *)(*(void *)(a1 + 16) + 8 * a2 + 8);
}

void sub_19E3A9D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E3A9D94(uint64_t result)
{
  uint64_t v1 = *(unsigned int *)(result + 8);
  if ((v1 & 0x80000000) != 0)
  {
    sub_19E3AF8D4((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1780);
    char v5 = sub_19E3AF8EC(v7, "CHECK failed: (n) >= (0): ");
    sub_19E3AFA28((uint64_t)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    return sub_19E3AFA30((uint64_t)v7);
  }
  else if (v1)
  {
    uint64_t v2 = result;
    uint64_t v3 = (uint64_t *)(*(void *)(result + 16) + 8);
    do
    {
      uint64_t v4 = *v3++;
      uint64_t result = sub_19E3A5EAC(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(v2 + 8) = 0;
  }
  return result;
}

void sub_19E3A9E2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_19E3A9E44(unsigned __int8 *result)
{
  uint64_t v1 = *((unsigned int *)result + 2);
  if ((v1 & 0x80000000) != 0)
  {
    sub_19E3AF8D4((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1780);
    char v5 = sub_19E3AF8EC(v7, "CHECK failed: (n) >= (0): ");
    sub_19E3AFA28((uint64_t)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    return (unsigned __int8 *)sub_19E3AFA30((uint64_t)v7);
  }
  else if (v1)
  {
    uint64_t v2 = result;
    uint64_t v3 = (uint64_t *)(*((void *)result + 2) + 8);
    do
    {
      uint64_t v4 = *v3++;
      uint64_t result = sub_19E3A6F44(v4);
      --v1;
    }
    while (v1);
    *((_DWORD *)v2 + 2) = 0;
  }
  return result;
}

void sub_19E3A9EDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E3A9EF4(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  if (a2 == result)
  {
    sub_19E3AF8D4((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1799);
    uint64_t v4 = sub_19E3AF8EC(v11, "CHECK failed: (&other) != (this): ");
    sub_19E3AFA28((uint64_t)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    uint64_t result = sub_19E3AFA30((uint64_t)v11);
  }
  unsigned int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    char v6 = (const std::string **)(*(void *)(a2 + 16) + 8);
    char v7 = (std::string **)sub_19E3C2340((uint64_t *)v3, v5);
    uint64_t result = (uint64_t)sub_19E3A9FE4((std::string *)v3, v7, v6, v5, **(_DWORD **)(v3 + 16) - *(_DWORD *)(v3 + 8));
    signed int v8 = *(_DWORD *)(v3 + 8) + v5;
    *(_DWORD *)(v3 + 8) = v8;
    uint64_t v9 = *(signed int **)(v3 + 16);
    if (*v9 < v8) {
      *uint64_t v9 = v8;
    }
  }
  return result;
}

void sub_19E3A9FCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

std::string *sub_19E3A9FE4(std::string *result, std::string **a2, const std::string **a3, unsigned int a4, unsigned int a5)
{
  uint64_t v9 = (std::string::__raw *)result;
  if ((int)a5 >= (int)a4) {
    uint64_t v10 = a4;
  }
  else {
    uint64_t v10 = a5;
  }
  if ((int)v10 >= 1)
  {
    uint64_t v11 = a3;
    char v12 = a2;
    do
    {
      uint64_t v14 = *v11++;
      int v13 = v14;
      uint64_t v15 = *v12++;
      uint64_t result = std::string::operator=(v15, v13);
      --v10;
    }
    while (v10);
  }
  BOOL v16 = __OFSUB__(a4, a5);
  int v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    std::string::size_type v18 = v9->__words[0];
    unsigned int v19 = &a3[a5];
    uint64_t v20 = &a2[a5];
    do
    {
      uint64_t v21 = *v19;
      if (!v18) {
        operator new();
      }
      if (*(unsigned char *)(v18 + 24)) {
        (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v18 + 32) + 32) + 40))(*(void *)(*(void *)(v18 + 32) + 32), &unk_1EF0B7BE8, 24);
      }
      unsigned int v22 = (std::string *)sub_19E3ADF44((void *)v18, 0x18uLL, (uint64_t)sub_19E3A9AFC);
      v22->__r_.__value_.__r.__words[0] = 0;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      uint64_t result = std::string::operator=(v22, v21);
      *v20++ = v22;
      ++v19;
      --v17;
    }
    while (v17);
  }
  return result;
}

uint64_t *sub_19E3AA11C(uint64_t *a1)
{
  sub_19E3AA158(a1);
  return sub_19E3A07FC(a1);
}

void sub_19E3AA158(void *a1)
{
  uint64_t v2 = (uint64_t *)a1[2];
  if (v2 && !*a1)
  {
    uint64_t v3 = v2 + 1;
    uint64_t v4 = *(unsigned int *)v2;
    if ((int)v4 >= 1)
    {
      do
      {
        if (*v3)
        {
          uint64_t v5 = sub_19E3A5D14(*v3);
          MEMORY[0x19F3BDCF0](v5, 0x1081C400F7E8713);
        }
        ++v3;
        --v4;
      }
      while (v4);
      uint64_t v2 = (uint64_t *)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

unint64_t sub_19E3AA1D8(unint64_t result, uint64_t a2)
{
  unint64_t v3 = result;
  if (a2 == result)
  {
    sub_19E3AF8D4((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1799);
    uint64_t v4 = sub_19E3AF8EC(v11, "CHECK failed: (&other) != (this): ");
    sub_19E3AFA28((uint64_t)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    uint64_t result = sub_19E3AFA30((uint64_t)v11);
  }
  unsigned int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    char v6 = (uint64_t *)(*(void *)(a2 + 16) + 8);
    char v7 = (unint64_t *)sub_19E3C2340((uint64_t *)v3, v5);
    uint64_t result = sub_19E3AA2C8(v3, v7, v6, v5, **(_DWORD **)(v3 + 16) - *(_DWORD *)(v3 + 8));
    signed int v8 = *(_DWORD *)(v3 + 8) + v5;
    *(_DWORD *)(v3 + 8) = v8;
    uint64_t v9 = *(signed int **)(v3 + 16);
    if (*v9 < v8) {
      *uint64_t v9 = v8;
    }
  }
  return result;
}

void sub_19E3AA2B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_19E3AA2C8(unint64_t result, unint64_t *a2, uint64_t *a3, unsigned int a4, unsigned int a5)
{
  uint64_t v9 = (uint64_t *)result;
  if ((int)a5 >= (int)a4) {
    uint64_t v10 = a4;
  }
  else {
    uint64_t v10 = a5;
  }
  if ((int)v10 >= 1)
  {
    uint64_t v11 = a3;
    char v12 = a2;
    do
    {
      uint64_t v14 = *v11++;
      uint64_t v13 = v14;
      unint64_t v15 = *v12++;
      uint64_t result = sub_19E3AA378(v13, v15);
      --v10;
    }
    while (v10);
  }
  BOOL v16 = __OFSUB__(a4, a5);
  int v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    uint64_t v18 = *v9;
    unsigned int v19 = &a3[a5];
    uint64_t v20 = &a2[a5];
    do
    {
      uint64_t v21 = *v19++;
      unsigned int v22 = sub_19E3A8ED4(v18);
      uint64_t result = sub_19E3AA378(v21, (unint64_t)v22);
      *v20++ = (unint64_t)v22;
      --v17;
    }
    while (v17);
  }
  return result;
}

unint64_t sub_19E3AA378(uint64_t a1, unint64_t a2)
{
  return sub_19E3A6340(a2, a1);
}

uint64_t *sub_19E3AA388(uint64_t *a1)
{
  sub_19E3AA3C4(a1);
  return sub_19E3A07FC(a1);
}

void sub_19E3AA3C4(void *a1)
{
  uint64_t v2 = (uint64_t *)a1[2];
  if (v2 && !*a1)
  {
    unint64_t v3 = v2 + 1;
    uint64_t v4 = *(unsigned int *)v2;
    if ((int)v4 >= 1)
    {
      do
      {
        if (*v3)
        {
          uint64_t v5 = sub_19E3A6DEC(*v3);
          MEMORY[0x19F3BDCF0](v5, 0x10A1C40F497E4DALL);
        }
        ++v3;
        --v4;
      }
      while (v4);
      uint64_t v2 = (uint64_t *)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

void sub_19E3AA444(uint64_t a1, uint64_t a2)
{
  if (a2 == a1)
  {
    sub_19E3AF8D4((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1799);
    uint64_t v4 = sub_19E3AF8EC(v11, "CHECK failed: (&other) != (this): ");
    sub_19E3AFA28((uint64_t)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v11);
  }
  unsigned int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    char v6 = (uint64_t *)(*(void *)(a2 + 16) + 8);
    char v7 = (uint64_t *)sub_19E3C2340((uint64_t *)a1, v5);
    sub_19E3AA534((uint64_t *)a1, v7, v6, v5, **(_DWORD **)(a1 + 16) - *(_DWORD *)(a1 + 8));
    signed int v8 = *(_DWORD *)(a1 + 8) + v5;
    *(_DWORD *)(a1 + 8) = v8;
    uint64_t v9 = *(signed int **)(a1 + 16);
    if (*v9 < v8) {
      *uint64_t v9 = v8;
    }
  }
}

void sub_19E3AA51C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19E3AA534(uint64_t *a1, uint64_t *a2, uint64_t *a3, unsigned int a4, unsigned int a5)
{
  if ((int)a5 >= (int)a4) {
    uint64_t v10 = a4;
  }
  else {
    uint64_t v10 = a5;
  }
  if ((int)v10 >= 1)
  {
    uint64_t v11 = a3;
    char v12 = a2;
    do
    {
      uint64_t v14 = *v11++;
      uint64_t v13 = v14;
      uint64_t v15 = *v12++;
      sub_19E3AA5E4(v13, v15);
      --v10;
    }
    while (v10);
  }
  BOOL v16 = __OFSUB__(a4, a5);
  int v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    uint64_t v18 = *a1;
    unsigned int v19 = &a3[a5];
    uint64_t v20 = &a2[a5];
    do
    {
      uint64_t v21 = *v19++;
      unsigned int v22 = sub_19E3A9074(v18);
      sub_19E3AA5E4(v21, (uint64_t)v22);
      *v20++ = (uint64_t)v22;
      --v17;
    }
    while (v17);
  }
}

void sub_19E3AA5E4(uint64_t a1, uint64_t a2)
{
}

void sub_19E3AA5F4()
{
}

void sub_19E3AA63C()
{
}

void sub_19E3AA698(_Unwind_Exception *a1)
{
  MEMORY[0x19F3BDCF0](v1, 0xA1C409BE6959DLL);
  _Unwind_Resume(a1);
}

void *sub_19E3AA6BC(void *a1, const char *a2, uint64_t a3)
{
  *a1 = &unk_1EF0B8820;
  char v6 = a1 + 1;
  sub_19E3AD4C4(a1 + 1);
  if (a3) {
    operator new();
  }
  char v7 = (void *)MEMORY[0x1E4FBA238];
  a1[2] = MEMORY[0x1E4FBA238];
  if ((*((unsigned char *)v7 + *(void *)(*v7 - 24) + 32) & 5) != 0)
  {
    unsigned int v15 = 5;
    sub_19E37B784((uint64_t)v16);
    sub_19E37CA70(v16, (uint64_t)"\"", 1);
    size_t v8 = strlen(a2);
    sub_19E37CA70(v16, (uint64_t)a2, v8);
    sub_19E37CA70(v16, (uint64_t)"\": ", 3);
    uint64_t v9 = __error();
    sub_19E3AB590(*v9);
    if ((v14 & 0x80u) == 0) {
      uint64_t v10 = __p;
    }
    else {
      uint64_t v10 = (void **)__p[0];
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v11 = v14;
    }
    else {
      uint64_t v11 = (uint64_t)__p[1];
    }
    sub_19E37CA70(v16, (uint64_t)v10, v11);
    sub_19E378FFC(&v15, (uint64_t)&v19);
    sub_19E3AD6EC(v6, &v19);
    sub_19E3AD4CC(&v19);
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
    v16[0] = *MEMORY[0x1E4FBA418];
    *(void *)((char *)v16 + *(void *)(v16[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v16[1] = MEMORY[0x1E4FBA470] + 16;
    if (v17 < 0) {
      operator delete((void *)v16[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x19F3BDC30](&v18);
  }
  return a1;
}

void sub_19E3AA930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sub_19E3AD4CC((uint64_t *)(v16 - 56));
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_19E37908C((uint64_t)&a15);
  sub_19E3AD4CC(v15);
  _Unwind_Resume(a1);
}

void sub_19E3AA9AC(void *a1)
{
  sub_19E3AABF0(a1);
  JUMPOUT(0x19F3BDCF0);
}

uint64_t sub_19E3AA9E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_19E3AD6E8(a2, a1 + 8);
}

BOOL sub_19E3AA9F0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void **)(a1 + 16);
  std::ios_base::getloc((const std::ios_base *)((char *)v3 + *(void *)(*v3 - 24)));
  uint64_t v4 = std::locale::use_facet(&v8, MEMORY[0x1E4FBA258]);
  unsigned __int8 v5 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 10);
  std::locale::~locale(&v8);
  char v6 = sub_19E3AAC74(v3, a2, v5);
  return (*((unsigned char *)v6 + *(void *)(*v6 - 24) + 32) & 5) == 0;
}

void sub_19E3AAAC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

BOOL sub_19E3AAAD4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 16);
  unint64_t v3 = (void *)MEMORY[0x1E4FBA238];
  if (v2 == (void *)MEMORY[0x1E4FBA238])
  {
    if ((int)sub_19E3AB380() <= 2)
    {
      char v11 = 0;
      uint64_t v4 = sub_19E37CA70(MEMORY[0x1E4FBA240], (uint64_t)"filesystem.cc", 13);
      sub_19E37CA70(v4, (uint64_t)"(", 1);
      unsigned __int8 v5 = (void *)std::ostream::operator<<();
      char v6 = sub_19E37CA70(v5, (uint64_t)") ", 2);
      char v7 = sub_19E37CA70(v6, (uint64_t)"LOG(", 4);
      std::locale v8 = sub_19E37CA70(v7, (uint64_t)"ERROR", 5);
      uint64_t v9 = sub_19E37CA70(v8, (uint64_t)") ", 2);
      sub_19E37CA70(v9, (uint64_t)"ReadAll is not supported for stdin.", 35);
      sub_19E37B91C(&v11);
    }
  }
  else
  {
    sub_19E3AAE64(a2, *(void **)((char *)v2 + *(void *)(*v2 - 24) + 40), 0);
  }
  return v2 != v3;
}

void sub_19E3AABDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void *sub_19E3AABF0(void *a1)
{
  *a1 = &unk_1EF0B8820;
  uint64_t v2 = a1[2];
  if (v2 != MEMORY[0x1E4FBA238] && v2 != 0) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  sub_19E3AD4CC(a1 + 1);
  return a1;
}

void *sub_19E3AAC74(void *a1, uint64_t a2, unsigned __int8 a3)
{
  MEMORY[0x19F3BD900](&v11, a1, 1);
  if (!v11) {
    return a1;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    **(unsigned char **)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 23) = 0;
  }
  uint64_t v6 = 0;
  while (1)
  {
    char v7 = *(void **)((char *)a1 + *(void *)(*a1 - 24) + 40);
    std::locale v8 = (unsigned char *)v7[3];
    if (v8 != (unsigned char *)v7[4])
    {
      v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(void *))(*v7 + 80))(v7);
    if (v7 == -1) {
      break;
    }
LABEL_9:
    if (v7 == a3)
    {
      int v9 = 0;
      goto LABEL_17;
    }
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    --v6;
    if (*(char *)(a2 + 23) < 0 && *(void *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      int v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6) {
    int v9 = 2;
  }
  else {
    int v9 = 6;
  }
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_19E3AADD4(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v2 = *v1;
  *(_DWORD *)((char *)v1 + *(void *)(*v1 - 24) + 32) |= 1u;
  if ((*((unsigned char *)v1 + *(void *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x19E3AAD94);
  }
  __cxa_rethrow();
}

void sub_19E3AAE50(_Unwind_Exception *a1)
{
}

void sub_19E3AAE64(uint64_t a1, void *a2, void *a3)
{
  sub_19E3AAEE4(&__p, a2, a3);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  MEMORY[0x19F3BD810](a1, p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_19E3AAEC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_19E3AAEE4(std::string *a1, void *a2, void *a3)
{
  char v11 = a3;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = 0;
  while (1)
  {
    if (a2)
    {
      if (a2[3] == a2[4])
      {
        int v6 = (*(uint64_t (**)(void *))(*a2 + 72))(a2);
        int v5 = v6 == -1;
        if (v6 == -1) {
          a2 = 0;
        }
      }
      else
      {
        int v5 = 0;
      }
    }
    else
    {
      int v5 = 1;
    }
    BOOL result = sub_19E3AB044(&v11);
    if (v5 == result) {
      break;
    }
    std::locale v8 = (std::string::value_type *)a2[3];
    if (v8 == (std::string::value_type *)a2[4]) {
      std::string::value_type v9 = (*(uint64_t (**)(void *))(*a2 + 72))(a2);
    }
    else {
      std::string::value_type v9 = *v8;
    }
    std::string::push_back(a1, v9);
    uint64_t v10 = a2[3];
    if (v10 == a2[4]) {
      (*(void (**)(void *))(*a2 + 80))(a2);
    }
    else {
      a2[3] = v10 + 1;
    }
  }
  return result;
}

void sub_19E3AB014(void *a1)
{
  __cxa_begin_catch(a1);
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  __cxa_rethrow();
}

void sub_19E3AB030(_Unwind_Exception *a1)
{
}

BOOL sub_19E3AB044(void **a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    if (v2[3] != v2[4]) {
      return 0;
    }
    if ((*(unsigned int (**)(void *))(*v2 + 72))(v2) != -1) {
      return *a1 == 0;
    }
    *a1 = 0;
  }
  return 1;
}

uint64_t *sub_19E3AB0C4(uint64_t *a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA468] + 64;
  a1[52] = MEMORY[0x1E4FBA468] + 64;
  unint64_t v3 = a1 + 1;
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA400] + 16);
  uint64_t v5 = *(void *)(MEMORY[0x1E4FBA400] + 8);
  *a1 = v5;
  *(uint64_t *)((char *)a1 + *(void *)(v5 - 24)) = v4;
  int v6 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v6, a1 + 1);
  uint64_t v7 = MEMORY[0x1E4FBA468] + 24;
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *a1 = v7;
  a1[52] = v2;
  MEMORY[0x19F3BD8B0](v3);
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 4);
  }
  return a1;
}

void sub_19E3AB24C(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x19F3BDC30](v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19E3AB284()
{
  unsigned int v0 = atomic_load((unsigned int *)&unk_1E9459548);
  if (v0 != -1) {
    return atomic_load((unsigned int *)&unk_1E9459548);
  }
  sub_19E3AB30C(&v3);
  uint64_t v1 = MEMORY[0x19F3BDA30](&v3);
  std::random_device::~random_device(&v3);
  return v1;
}

void sub_19E3AB2E4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, std::random_device a11, std::random_device a12)
{
  std::random_device::~random_device(&a11);
  __cxa_begin_catch(a1);
  atomic_load(v12);
  __cxa_end_catch();
  JUMPOUT(0x19E3AB2D0);
}

std::random_device *sub_19E3AB30C(std::random_device *a1)
{
  sub_19E382340(&__token, "/dev/urandom");
  std::random_device::random_device(a1, &__token);
  if (SHIBYTE(__token.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__token.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_19E3AB364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E3AB380()
{
  return atomic_load((unsigned int *)&unk_1E9459EF8);
}

uint64_t sub_19E3AB390(unsigned __int8 *a1, uint64_t a2, uint64_t *a3)
{
  int v3 = (char)*a1;
  if ((v3 & 0x80000000) == 0)
  {
    *a3 = 1;
    return *a1;
  }
  unint64_t v5 = a2 - (void)a1;
  if ((unint64_t)(a2 - (void)a1) >= 2)
  {
    if ((v3 & 0xE0) == 0xC0)
    {
      char v6 = a1[1];
      if (v6 <= -65)
      {
        uint64_t result = v6 & 0x3F | ((v3 & 0x1F) << 6);
        if (result >= 0x80)
        {
          uint64_t v7 = 2;
LABEL_8:
          *a3 = v7;
          return result;
        }
      }
    }
    else if (v5 >= 3)
    {
      if ((v3 & 0xF0) == 0xE0)
      {
        int v8 = (char)a1[1];
        if (v8 <= -65)
        {
          char v9 = a1[2];
          if (v9 <= -65)
          {
            uint64_t result = v9 & 0x3F | ((v8 & 0x3F) << 6) & 0xFFF | ((v3 & 0xF) << 12);
            if (result >= 0x800
              && (((v3 & 0xF) << 12) - 57344 < 0x102000u || result >> 11 <= 0x1A))
            {
              uint64_t v7 = 3;
              goto LABEL_8;
            }
          }
        }
      }
      else if (v5 >= 4 && (v3 & 0xF8) == 0xF0)
      {
        int v10 = (char)a1[1];
        if (v10 <= -65)
        {
          int v11 = (char)a1[2];
          if (v11 <= -65)
          {
            char v12 = a1[3];
            if (v12 <= -65)
            {
              int v13 = ((v3 & 7) << 18) | ((v10 & 0x3F) << 12);
              uint64_t result = v12 & 0x3F | ((v11 & 0x3F) << 6) | v13;
              if (result >= 0x10000 && (v13 - 57344) < 0x102000)
              {
                uint64_t v7 = 4;
                goto LABEL_8;
              }
            }
          }
        }
      }
    }
  }
  *a3 = 1;
  return 65533;
}

uint64_t sub_19E3AB4D8()
{
  unsigned int v0 = off_1EC305110;
  if ((*(unsigned char *)off_1EC305110(&off_1EC305110) & 1) == 0)
  {
    sub_19E3AB284();
    uint64_t v2 = (_DWORD *)off_1EC3050F8(&off_1EC3050F8);
    _DWORD *v2 = v4;
    do
    {
      uint64_t v5 = v3(&off_1EC3050F8);
      *(_DWORD *)(v5 + 4 * v7) = v6;
    }
    while (v7 != 623);
    *(void *)(v3(&off_1EC3050F8) + 2496) = 0;
    *(unsigned char *)v0(&off_1EC30511sub_19E392864(&a9, 0) = 1;
  }
  return off_1EC3050F8(&off_1EC3050F8);
}

uint64_t sub_19E3AB590(int a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  strerror_r(a1, __strerrbuf, 0x3FFuLL);
  sub_19E37B784((uint64_t)v4);
  size_t v1 = strlen(__strerrbuf);
  uint64_t v2 = sub_19E37CA70(v4, (uint64_t)__strerrbuf, v1);
  sub_19E37CA70(v2, (uint64_t)" Error #", 8);
  std::ostream::operator<<();
  std::stringbuf::str();
  v4[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v4 + *(void *)(v4[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v4[1] = MEMORY[0x1E4FBA470] + 16;
  if (v5 < 0) {
    operator delete((void *)v4[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x19F3BDC30](&v6);
}

void sub_19E3AB720(_Unwind_Exception *exception_object)
{
}

unint64_t sub_19E3AB73C(uint64_t a1, unint64_t a2)
{
  if (!a2) {
    sub_19E3AB9CC();
  }
  return (a1 + a2 - 1) / a2 * a2;
}

void sub_19E3AB764(std::string *this)
{
  LOBYTE(size) = *((unsigned char *)&this->__r_.__value_.__s + 23);
  if ((size & 0x80u) != 0) {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
  }
  if ((size & 3) != 0)
  {
    do
    {
      std::string::push_back(this, 0);
      LOBYTE(v3) = *((unsigned char *)&this->__r_.__value_.__s + 23);
      if ((v3 & 0x80u) != 0) {
        std::string::size_type v3 = this->__r_.__value_.__l.__size_;
      }
    }
    while ((v3 & 3) != 0);
  }
}

void *sub_19E3AB7C8@<X0>(void *a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v4 = a1[1];
  BOOL v5 = v4 >= a2;
  unint64_t v6 = v4 - a2;
  if (v5)
  {
    *a1 += a2;
    a1[1] = v6;
    return sub_19E3AD4C4(a3);
  }
  else
  {
    unsigned int v9 = 13;
    uint64_t v7 = (void *)sub_19E37B784((uint64_t)v10);
    sub_19E37CA70(v7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/util.cc", 63);
    sub_19E37CA70(v10, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_19E37CA70(v10, (uint64_t)") [", 3);
    sub_19E37CA70(v10, (uint64_t)"string.size() >= size", 21);
    sub_19E37CA70(v10, (uint64_t)"] ", 2);
    sub_19E378FFC(&v9, (uint64_t)a3);
    v10[0] = *MEMORY[0x1E4FBA418];
    *(void *)((char *)v10 + *(void *)(v10[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v10[1] = MEMORY[0x1E4FBA470] + 16;
    if (v11 < 0) {
      operator delete((void *)v10[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (void *)MEMORY[0x19F3BDC30](&v12);
  }
}

void sub_19E3AB9B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_19E3AB9CC()
{
}

uint64_t sub_19E3AB9F8(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (void *)sub_19E398D10(a1);
  *unint64_t v4 = &unk_1EF0B91A8;
  v4[1] = a2 + 16;
  sub_19E379890((uint64_t)v4);
  return a1;
}

void sub_19E3ABA48(_Unwind_Exception *a1)
{
  sub_19E37928C(v1);
  _Unwind_Resume(a1);
}

void *sub_19E3ABA60(uint64_t a1, uint64_t a2, _DWORD *a3, unint64_t a4)
{
  uint64_t result = (void *)sub_19E3783A4(a1, a2, a3, a4);
  *uint64_t result = &unk_1EF0B91A8;
  return result;
}

void sub_19E3ABA98(void *a1)
{
  sub_19E37928C(a1);
  JUMPOUT(0x19F3BDCF0);
}

void sub_19E3ABAD0(uint64_t *a1@<X0>, unsigned char *a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>, float a5@<S0>)
{
  uint64_t v82 = *MEMORY[0x1E4F143B8];
  (*(void (**)(void **__return_ptr))(*a1 + 16))(&v66);
  if (v66)
  {
    sub_19E3AD4CC((uint64_t *)&v66);
LABEL_3:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  sub_19E3AD4CC((uint64_t *)&v66);
  if (!a3) {
    goto LABEL_3;
  }
  unint64_t v76 = 0;
  uint64_t v77 = 0;
  uint64_t v78 = 0;
  std::string __p = 0;
  uint64_t v74 = 0;
  uint64_t v75 = 0;
  if (a3 >> 59) {
    sub_19E37C7C4();
  }
  int v8 = 0;
  std::string __p = operator new(32 * a3);
  uint64_t v74 = (char *)__p;
  uint64_t v75 = (char *)__p + 32 * a3;
  memset(v71, 0, sizeof(v71));
  int v72 = 1065353216;
  long long v67 = 0u;
  long long v68 = 0u;
  uint64_t v69 = 0;
  uint64_t v70 = 256;
  v65[0] = (uint64_t)a1;
  v65[1] = (uint64_t)&v66;
  v65[2] = (uint64_t)&__p;
  v65[3] = (uint64_t)&v76;
  v65[4] = (uint64_t)v71;
  uint64_t v66 = &unk_1EF0B93E8;
  do
  {
    long long v81 = 0uLL;
    int v9 = sub_19E381AC4(a1[2], a2, a3, (BOOL *)&v80 + 8);
    *(void *)&long long v81 = a2;
    *((void *)&v81 + 1) = v9;
    a3 -= v9;
    if (a3) {
      int v10 = v8 + 1;
    }
    else {
      int v10 = -1;
    }
    LODWORD(v8sub_19E392864(&a9, 0) = v8 - 1;
    DWORD1(v8sub_19E392864(&a9, 0) = v10;
    char v11 = v74;
    if (v74 >= v75)
    {
      unsigned __int8 v14 = (char *)__p;
      uint64_t v15 = (v74 - (unsigned char *)__p) >> 5;
      unint64_t v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 59) {
        sub_19E37C7C4();
      }
      uint64_t v17 = v75 - (unsigned char *)__p;
      if ((v75 - (unsigned char *)__p) >> 4 > v16) {
        unint64_t v16 = v17 >> 4;
      }
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v18 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v18 = v16;
      }
      if (v18)
      {
        if (v18 >> 59) {
          sub_19E37C2B8();
        }
        uint64_t v19 = (char *)operator new(32 * v18);
      }
      else
      {
        uint64_t v19 = 0;
      }
      long long v20 = v81;
      uint64_t v21 = &v19[32 * v15];
      *(_OWORD *)uint64_t v21 = v80;
      *((_OWORD *)v21 + 1) = v20;
      unsigned int v22 = v21;
      if (v11 != v14)
      {
        do
        {
          long long v23 = *((_OWORD *)v11 - 1);
          *((_OWORD *)v22 - 2) = *((_OWORD *)v11 - 2);
          *((_OWORD *)v22 - 1) = v23;
          v22 -= 32;
          v11 -= 32;
        }
        while (v11 != v14);
        char v11 = v14;
      }
      unsigned int v24 = &v19[32 * v18];
      int v13 = v21 + 32;
      std::string __p = v22;
      uint64_t v74 = v21 + 32;
      uint64_t v75 = v24;
      if (v11) {
        operator delete(v11);
      }
    }
    else
    {
      long long v12 = v81;
      *(_OWORD *)uint64_t v74 = v80;
      *((_OWORD *)v11 + 1) = v12;
      int v13 = v11 + 32;
    }
    a2 += v9;
    ++v8;
    uint64_t v74 = v13;
  }
  while (a3);
  if (__p == v13)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  else
  {
    if ((unint64_t)(v13 - (unsigned char *)__p) >= 0x21)
    {
      unint64_t v25 = 1;
      do
      {
        sub_19E3AC234(v65, v25 - 1, v25);
        ++v25;
      }
      while (v25 < (v74 - (unsigned char *)__p) >> 5);
    }
    char v26 = (int **)v76;
    uint64_t v27 = v77;
    if (v76 != v77)
    {
      uint64_t v28 = 0;
      do
      {
        uint64_t v29 = *v26;
        if (v27 - (char *)v26 >= 9)
        {
          uint64_t v30 = 0;
          uint64_t v31 = (v27 - (char *)v26) >> 3;
          unsigned int v32 = v26;
          do
          {
            uint64_t v33 = v32;
            v32 += v30 + 1;
            uint64_t v34 = 2 * v30;
            uint64_t v30 = (2 * v30) | 1;
            uint64_t v35 = v34 + 2;
            if (v35 < v31)
            {
              unsigned int v36 = v32[1];
              float v37 = *((float *)*v32 + 2);
              float v38 = *((float *)v36 + 2);
              if (v37 < v38 || v37 == v38 && **v32 > *v36)
              {
                ++v32;
                uint64_t v30 = v35;
              }
            }
            *uint64_t v33 = *v32;
          }
          while (v30 <= (uint64_t)((unint64_t)(v31 - 2) >> 1));
          uint64_t v39 = (int **)(v27 - 8);
          if (v32 == v39)
          {
            *unsigned int v32 = v29;
          }
          else
          {
            *unsigned int v32 = *v39;
            *uint64_t v39 = v29;
            sub_19E3AC7A8((uint64_t)v26, (uint64_t)(v32 + 1), v32 + 1 - v26);
          }
        }
        v77 -= 8;
        int v40 = *v29;
        uint64_t v41 = *v29;
        uint64_t v42 = __p;
        uint64_t v43 = *((void *)__p + 4 * v41 + 3);
        if (!v43) {
          goto LABEL_58;
        }
        uint64_t v44 = v29[1];
        uint64_t v45 = *((void *)__p + 4 * v44 + 3);
        if (!v45) {
          goto LABEL_58;
        }
        uint64_t v46 = v45 + v43;
        if (v46 != *((void *)v29 + 2)) {
          goto LABEL_58;
        }
        if (a5 > 0.0)
        {
          if (a5 >= 1.0) {
            goto LABEL_58;
          }
          if (!v28) {
            uint64_t v28 = sub_19E3AB4D8();
          }
          unsigned int v47 = sub_19E394CF8(v28);
          if (((double)v47 + (double)sub_19E394CF8(v28) * 4294967300.0) * 5.42101086e-20 + 0.0 < a5) {
            goto LABEL_58;
          }
          uint64_t v42 = __p;
          int v40 = *v29;
          uint64_t v44 = v29[1];
          uint64_t v41 = *v29;
          uint64_t v46 = *((void *)__p + 4 * v44 + 3) + *((void *)__p + 4 * v41 + 3);
        }
        uint64_t v48 = (char *)&v42[8 * v41];
        uint64_t v49 = (char *)&v42[8 * v44];
        *((void *)v48 + 3) = v46;
        *((_DWORD *)v48 + 1) = *((_DWORD *)v49 + 1);
        uint64_t v50 = *((unsigned int *)v49 + 1);
        if ((v50 & 0x80000000) == 0) {
          v42[8 * v50] = v40;
        }
        *((void *)v49 + 2) = "";
        *((void *)v49 + 3) = 0;
        sub_19E3AC234(v65, *((_DWORD *)__p + 8 * v41), v40);
        sub_19E3AC234(v65, *v29, *((_DWORD *)__p + 8 * *v29 + 1));
LABEL_58:
        char v26 = (int **)v76;
        uint64_t v27 = v77;
      }
      while (v76 != v77);
    }
    v79[3] = 0;
    uint64_t v51 = operator new(0x20uLL);
    *uint64_t v51 = &unk_1EF0BD9D8;
    v51[1] = a1;
    v51[2] = v79;
    v51[3] = v71;
    *((void *)&v81 + 1) = v51;
    sub_19E3AD108(&v80, v79);
    sub_19E3ACB18(&v80);
    int v52 = 0;
    int v53 = (void *)MEMORY[0x1E4FBA240];
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    do
    {
      if (v52 < 0)
      {
        LOBYTE(v8sub_19E392864(&a9, 0) = 1;
        uint64_t v54 = sub_19E37CA70(v53, (uint64_t)"bpe_model.cc", 12);
        sub_19E37CA70(v54, (uint64_t)"(", 1);
        uint64_t v55 = (void *)std::ostream::operator<<();
        uint64_t v56 = sub_19E37CA70(v55, (uint64_t)") [", 3);
        unint64_t v57 = sub_19E37CA70(v56, (uint64_t)"(index) >= (0)", 14);
        sub_19E37CA70(v57, (uint64_t)"] ", 2);
        sub_19E37B91C(&v80);
      }
      unint64_t v58 = __p;
      if (v52 >= (int)((unint64_t)(v74 - (unsigned char *)__p) >> 5))
      {
        LOBYTE(v8sub_19E392864(&a9, 0) = 1;
        uint64_t v59 = sub_19E37CA70(v53, (uint64_t)"bpe_model.cc", 12);
        sub_19E37CA70(v59, (uint64_t)"(", 1);
        uint64_t v60 = (void *)std::ostream::operator<<();
        unint64_t v61 = sub_19E37CA70(v60, (uint64_t)") [", 3);
        uint64_t v62 = sub_19E37CA70(v61, (uint64_t)"(index) < (static_cast<int>(symbols.size()))", 44);
        sub_19E37CA70(v62, (uint64_t)"] ", 2);
        sub_19E37B91C(&v80);
        unint64_t v58 = __p;
      }
      sub_19E3AC684((uint64_t)v79, v58[4 * v52 + 2], v58[4 * v52 + 3], (uint64_t)a4);
      int v52 = *((_DWORD *)__p + 8 * v52 + 1);
    }
    while (v52 != -1);
    sub_19E3ACB18(v79);
  }
  sub_19E3AC6E0(&v66);
  sub_19E397D90((uint64_t)v71);
  if (__p)
  {
    uint64_t v74 = (char *)__p;
    operator delete(__p);
  }
  if (v76)
  {
    uint64_t v77 = (char *)v76;
    operator delete(v76);
  }
}

void sub_19E3AC198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  sub_19E3ACB18((void *)(v33 - 200));
  sub_19E3AC6E0(&a16);
  sub_19E397D90((uint64_t)&a23);
  if (__p)
  {
    a30 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a32)
  {
    a33 = (uint64_t)a32;
    operator delete(a32);
  }
  _Unwind_Resume(a1);
}

__n128 sub_19E3AC234(uint64_t *a1, int a2, int a3)
{
  if (a2 != -1 && a3 != -1)
  {
    uint64_t v4 = a2;
    uint64_t v5 = *(void *)a1[2];
    if (!*(unsigned char *)(v5 + 32 * a2 + 8))
    {
      uint64_t v6 = a3;
      uint64_t v7 = v5 + 32 * a3;
      if (!*(unsigned char *)(v7 + 8))
      {
        uint64_t v8 = *a1;
        uint64_t v9 = v5 + 32 * a2;
        int v10 = *(unsigned char **)(v9 + 16);
        uint64_t v11 = *(void *)(v7 + 24) + *(void *)(v9 + 24);
        v47[0] = v10;
        v47[1] = v11;
        long long v12 = *(unsigned int **)(v8 + 40);
        unsigned int v13 = *v12;
        if (v11)
        {
          uint64_t v14 = 0;
          uint64_t v15 = v11;
          while (1)
          {
            int v16 = *v10++;
            v14 ^= (v13 >> 10 << ((v13 >> 6) & 8)) ^ v16;
            unsigned int v13 = v12[v14];
            if ((v13 & 0x800000FF) != v16) {
              break;
            }
            if (!--v15) {
              goto LABEL_17;
            }
          }
        }
        else
        {
          int v17 = *v10;
          if (*v10)
          {
            uint64_t v14 = 0;
            unint64_t v18 = v10 + 1;
            while (1)
            {
              v14 ^= (v13 >> 10 << ((v13 >> 6) & 8)) ^ v17;
              unsigned int v13 = v12[v14];
              if ((v13 & 0x800000FF) != v17) {
                break;
              }
              int v19 = *v18++;
              int v17 = v19;
              if (!v19) {
                goto LABEL_17;
              }
            }
          }
          else
          {
            uint64_t v14 = 0;
LABEL_17:
            if ((v13 & 0x100) != 0)
            {
              unsigned int v20 = v12[v14 ^ (v13 >> 10 << ((v13 >> 6) & 8))];
              uint64_t v21 = (void *)a1[1];
              uint64_t v22 = v21[5];
              unint64_t v23 = v21[6];
              unint64_t v24 = v21[4];
              if (v24 >= v23)
              {
                unint64_t v24 = 0;
                ++v22;
                v21[4] = 0;
                v21[5] = v22;
              }
              uint64_t v25 = v21[1];
              if (v22 == (v21[2] - v25) >> 3)
              {
                is_mul_ok(v23, 0x18uLL);
                operator new[]();
              }
              uint64_t v26 = *(void *)(v25 + 8 * v22) + 24 * v24;
              v21[4] = v24 + 1;
              *(_DWORD *)uint64_t v26 = a2;
              *(_DWORD *)(v26 + 4) = a3;
              unsigned int v44 = v20 & 0x7FFFFFFF;
              *(float *)(v26 + 8) = (*(float (**)(uint64_t))(*(void *)v8 + 136))(v8);
              *(void *)(v26 + 16) = v11;
              uint64_t v27 = (uint64_t *)a1[3];
              uint64_t v29 = (void *)v27[1];
              unint64_t v28 = v27[2];
              if ((unint64_t)v29 >= v28)
              {
                uint64_t v32 = *v27;
                uint64_t v33 = ((uint64_t)v29 - *v27) >> 3;
                unint64_t v34 = v33 + 1;
                if ((unint64_t)(v33 + 1) >> 61) {
                  sub_19E37C7C4();
                }
                uint64_t v35 = v28 - v32;
                if (v35 >> 2 > v34) {
                  unint64_t v34 = v35 >> 2;
                }
                if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v36 = v34;
                }
                if (v36)
                {
                  if (v36 >> 61) {
                    sub_19E37C2B8();
                  }
                  float v37 = (char *)operator new(8 * v36);
                }
                else
                {
                  float v37 = 0;
                }
                float v38 = (uint64_t *)&v37[8 * v33];
                *float v38 = v26;
                uint64_t v30 = (uint64_t)(v38 + 1);
                if (v29 == (void *)v32)
                {
                  uint64_t v31 = v44;
                }
                else
                {
                  uint64_t v31 = v44;
                  do
                  {
                    uint64_t v39 = *--v29;
                    *--float v38 = v39;
                  }
                  while (v29 != (void *)v32);
                  uint64_t v29 = (void *)*v27;
                }
                uint64_t *v27 = (uint64_t)v38;
                v27[1] = v30;
                std::string v27[2] = (uint64_t)&v37[8 * v36];
                if (v29) {
                  operator delete(v29);
                }
              }
              else
              {
                void *v29 = v26;
                uint64_t v30 = (uint64_t)(v29 + 1);
                uint64_t v31 = v44;
              }
              v27[1] = v30;
              sub_19E3AC7A8(*v27, v30, (v30 - *v27) >> 3);
              if ((*(unsigned int (**)(void, uint64_t))(**(void **)(v8 + 8) + 128))(*(void *)(v8 + 8), v31))
              {
                uint64_t v41 = *(void *)a1[2];
                __n128 v45 = *(__n128 *)(v41 + 32 * v4 + 16);
                __n128 v46 = *(__n128 *)(v41 + 32 * v6 + 16);
                uint64_t v42 = a1[4];
                uint64_t v48 = v47;
                uint64_t v43 = (__n128 *)sub_19E3AC840(v42, (uint64_t)v47, (uint64_t)&unk_19E57E374, &v48);
                __n128 result = v45;
                _OWORD v43[2] = v45;
                v43[3] = v46;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_19E3AC684(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v7[0] = a2;
  v7[1] = a3;
  uint64_t v6 = a4;
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    sub_19E3ACB9C();
  }
  return (*(uint64_t (**)(uint64_t, void *, uint64_t *))(*(void *)v4 + 48))(v4, v7, &v6);
}

void *sub_19E3AC6E0(void *a1)
{
  *a1 = &unk_1EF0B93E8;
  uint64_t v2 = (void *)a1[1];
  std::string::size_type v3 = (void *)a1[2];
  if (v2 != v3)
  {
    do
    {
      if (*v2) {
        MEMORY[0x19F3BDCC0](*v2, 0x1000C801E56706BLL);
      }
      ++v2;
    }
    while (v2 != v3);
    uint64_t v2 = (void *)a1[1];
  }
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_19E3AC770(uint64_t a1)
{
  return (*(uint64_t (**)(double))(*(void *)a1 + 56))(0.0);
}

uint64_t sub_19E3AC798()
{
  return 1;
}

uint64_t sub_19E3AC7A0()
{
  return 0;
}

uint64_t sub_19E3AC7A8(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = a3 - 2;
  if (a3 >= 2)
  {
    unint64_t v4 = v3 >> 1;
    uint64_t v5 = result + 8 * (v3 >> 1);
    uint64_t v6 = *(_DWORD **)v5;
    uint64_t v7 = *(void *)(a2 - 8);
    float v8 = *(float *)(*(void *)v5 + 8);
    float v9 = *(float *)(v7 + 8);
    if (v8 < v9 || v8 == v9 && *v6 > *(_DWORD *)v7)
    {
      *(void *)(a2 - 8) = v6;
      if (v3 >= 2)
      {
        while (1)
        {
          unint64_t v11 = v4 - 1;
          unint64_t v4 = (v4 - 1) >> 1;
          uint64_t v10 = result + 8 * v4;
          long long v12 = *(_DWORD **)v10;
          float v13 = *(float *)(*(void *)v10 + 8);
          if (v13 >= v9 && (v13 != v9 || *v12 <= *(_DWORD *)v7)) {
            break;
          }
          *(void *)uint64_t v5 = v12;
          uint64_t v5 = result + 8 * v4;
          if (v11 <= 1) {
            goto LABEL_11;
          }
        }
      }
      uint64_t v10 = v5;
LABEL_11:
      *(void *)uint64_t v10 = v7;
    }
  }
  return result;
}

void *sub_19E3AC840(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  float v8 = (void *)(a1 + 24);
  unint64_t v9 = sub_19E3ACAB8(a1 + 24, *(uint64_t **)a2, *(void *)(a2 + 8));
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    uint64_t v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      uint64_t v15 = *v14;
      if (*v14)
      {
        uint64_t v18 = a2;
        int v16 = *(uint64_t **)a2;
        size_t v17 = *(void *)(v18 + 8);
        do
        {
          unint64_t v19 = *((void *)v15 + 1);
          if (v19 == v10)
          {
            if (*((void *)v15 + 3) == v17 && !memcmp(*((const void **)v15 + 2), v16, v17)) {
              return v15;
            }
          }
          else
          {
            if (v13 > 1)
            {
              if (v19 >= v11) {
                v19 %= v11;
              }
            }
            else
            {
              v19 &= v11 - 1;
            }
            if (v19 != v4) {
              break;
            }
          }
          uint64_t v15 = *(void **)v15;
        }
        while (v15);
      }
    }
  }
  uint64_t v15 = operator new(0x40uLL);
  *(void *)uint64_t v15 = 0;
  *((void *)v15 + 1) = v10;
  *((_OWORD *)v15 + 1) = **a4;
  *((_OWORD *)v15 + 2) = 0u;
  *((_OWORD *)v15 + 3) = 0u;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    BOOL v22 = 1;
    if (v11 >= 3) {
      BOOL v22 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v11);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    sub_19E37C2EC(a1, v25);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v26 = *(void *)a1;
  uint64_t v27 = *(void **)(*(void *)a1 + 8 * v4);
  if (v27)
  {
    *(void *)uint64_t v15 = *v27;
LABEL_40:
    void *v27 = v15;
    goto LABEL_41;
  }
  *(void *)uint64_t v15 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v15;
  *(void *)(v26 + 8 * v4) = a1 + 16;
  if (*(void *)v15)
  {
    unint64_t v28 = *(void *)(*(void *)v15 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11) {
        v28 %= v11;
      }
    }
    else
    {
      v28 &= v11 - 1;
    }
    uint64_t v27 = (void *)(*(void *)a1 + 8 * v28);
    goto LABEL_40;
  }
LABEL_41:
  ++*v8;
  return v15;
}

void sub_19E3ACAA4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_19E3ACAB8(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  return sub_19E37BDA4((uint64_t)&v4, a2, a3);
}

void sub_19E3ACAE0(void *a1)
{
  sub_19E3AC6E0(a1);
  JUMPOUT(0x19F3BDCF0);
}

void *sub_19E3ACB18(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_19E3ACB9C()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = &unk_1EF0BE1C0;
  __cxa_throw(exception, (struct type_info *)&unk_1EF0B7BF8, (void (*)(void *))std::exception::~exception);
}

void sub_19E3ACBEC(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x19F3BDCF0);
}

void sub_19E3ACC28()
{
}

__n128 sub_19E3ACC3C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EF0BD9D8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_19E3ACC90(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF0BD9D8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_19E3ACCC8(uint64_t a1, void *a2, void ***a3)
{
  uint64_t v4 = a2[1];
  uint64_t v5 = *a3;
  *(void *)&long long v33 = *a2;
  *((void *)&v33 + 1) = v4;
  uint64_t v6 = *(void ***)(a1 + 8);
  uint64_t v7 = ((uint64_t (*)(void **, void, uint64_t))(*v6)[14])(v6, v33, v4);
  if (v7 == -1 || ((*(uint64_t (**)(void *, uint64_t))(*v6[1] + 128))(v6[1], v7) & 1) == 0)
  {
    unint64_t v10 = (char *)v5[2];
    unint64_t v11 = (char *)v5[1];
    if (v11 >= v10)
    {
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((v11 - (unsigned char *)*v5) >> 3);
      unint64_t v14 = v13 + 1;
      if (v13 + 1 <= 0xAAAAAAAAAAAAAAALL)
      {
        unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v10 - (unsigned char *)*v5) >> 3);
        if (2 * v15 > v14) {
          unint64_t v14 = 2 * v15;
        }
        if (v15 >= 0x555555555555555) {
          unint64_t v16 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v16 = v14;
        }
        size_t v17 = (char *)sub_19E37C7DC((uint64_t)(v5 + 2), v16);
        uint64_t v18 = &v17[24 * v13];
        float v20 = &v17[24 * v19];
        *(_OWORD *)uint64_t v18 = v33;
        *((_DWORD *)v18 + 4) = v7;
        uint8x8_t v12 = v18 + 24;
        BOOL v22 = (char *)*v5;
        float v21 = (char *)v5[1];
        if (v21 == *v5) {
          goto LABEL_16;
        }
        do
        {
          long long v23 = *(_OWORD *)(v21 - 24);
          *((void *)v18 - 1) = *((void *)v21 - 1);
          *(_OWORD *)(v18 - 24) = v23;
          v18 -= 24;
          v21 -= 24;
        }
        while (v21 != v22);
        goto LABEL_15;
      }
LABEL_30:
      sub_19E37C7C4();
    }
  }
  else
  {
    float v8 = sub_19E3ACFA0(*(void **)(a1 + 24), (uint64_t)&v33);
    if (v8)
    {
      unint64_t v9 = (uint64_t *)v8;
      sub_19E3AC684(*(void *)(a1 + 16), v9[4], v9[5], (uint64_t)v5);
      sub_19E3AC684(*(void *)(a1 + 16), v9[6], v9[7], (uint64_t)v5);
      return;
    }
    unint64_t v24 = (char *)v5[2];
    unint64_t v11 = (char *)v5[1];
    if (v11 >= v24)
    {
      unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((v11 - (unsigned char *)*v5) >> 3);
      unint64_t v26 = v25 + 1;
      if (v25 + 1 <= 0xAAAAAAAAAAAAAAALL)
      {
        unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((v24 - (unsigned char *)*v5) >> 3);
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x555555555555555) {
          unint64_t v28 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v28 = v26;
        }
        uint64_t v29 = (char *)sub_19E37C7DC((uint64_t)(v5 + 2), v28);
        uint64_t v18 = &v29[24 * v25];
        float v20 = &v29[24 * v30];
        *(_OWORD *)uint64_t v18 = v33;
        *((_DWORD *)v18 + 4) = v7;
        uint8x8_t v12 = v18 + 24;
        uint64_t v31 = (char *)*v5;
        float v21 = (char *)v5[1];
        if (v21 == *v5) {
          goto LABEL_16;
        }
        do
        {
          long long v32 = *(_OWORD *)(v21 - 24);
          *((void *)v18 - 1) = *((void *)v21 - 1);
          *(_OWORD *)(v18 - 24) = v32;
          v18 -= 24;
          v21 -= 24;
        }
        while (v21 != v31);
LABEL_15:
        float v21 = (char *)*v5;
LABEL_16:
        *uint64_t v5 = v18;
        v5[1] = v12;
        v5[2] = v20;
        if (v21) {
          operator delete(v21);
        }
        goto LABEL_18;
      }
      goto LABEL_30;
    }
  }
  *(_OWORD *)unint64_t v11 = v33;
  *((_DWORD *)v11 + 4) = v7;
  uint8x8_t v12 = v11 + 24;
LABEL_18:
  v5[1] = v12;
}

uint64_t sub_19E3ACF54(uint64_t a1, uint64_t a2)
{
  if (sub_19E3AD0B8(a2, (uint64_t)&unk_1EF0B8168)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_19E3ACF94()
{
  return &unk_1EF0B8168;
}

uint64_t **sub_19E3ACFA0(void *a1, uint64_t a2)
{
  unint64_t v4 = sub_19E3ACAB8((uint64_t)(a1 + 3), *(uint64_t **)a2, *(void *)(a2 + 8));
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  unint64_t v10 = *(uint64_t ****)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  unint64_t v11 = *v10;
  if (*v10)
  {
    uint64_t v14 = a2;
    uint8x8_t v12 = *(uint64_t **)a2;
    size_t v13 = *(void *)(v14 + 8);
    do
    {
      unint64_t v15 = (unint64_t)v11[1];
      if (v15 == v6)
      {
        if (v11[3] == (uint64_t *)v13 && !memcmp(v11[2], v12, v13)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v15 >= *(void *)&v5) {
            v15 %= *(void *)&v5;
          }
        }
        else
        {
          v15 &= *(void *)&v5 - 1;
        }
        if (v15 != v9) {
          return 0;
        }
      }
      unint64_t v11 = (uint64_t **)*v11;
    }
    while (v11);
  }
  return v11;
}

BOOL sub_19E3AD0B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v2 == v3) {
    return 1;
  }
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3)) {
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  }
  return 0;
}

void *sub_19E3AD108(void *result, void *a2)
{
  v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    uint64_t v3 = result;
    unint64_t v4 = (void *)result[3];
    int8x8_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_19E3AD368(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_19E37B770(a1);
}

void sub_19E3AD374()
{
  if (!dword_1E945A660)
  {
    unsigned int v0 = sub_19E3AD3C0(MEMORY[0x1E4FBA240], "Program terminated with an unrecoverable error.");
    size_t v1 = sub_19E3AD408(v0);
    sub_19E3AD4C0(v1);
    exit(-1);
  }
  dword_1E945A660 = 2;
}

void *sub_19E3AD3C0(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  return sub_19E37CA70(a1, (uint64_t)__s, v4);
}

void *sub_19E3AD408(void *a1)
{
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
  uint64_t v2 = std::locale::use_facet(&v4, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  std::ostream::flush();
  return a1;
}

void sub_19E3AD4AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void *sub_19E3AD4C4(void *result)
{
  *__n128 result = 0;
  return result;
}

uint64_t *sub_19E3AD4CC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2) {
    sub_19E3AD8D8((uint64_t)a1, v2);
  }
  return a1;
}

void sub_19E3AD504()
{
}

void sub_19E3AD610(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  uint64_t *v1 = 0;
  if (v3) {
    sub_19E3AD8D8((uint64_t)v1, v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_19E3AD634(void *result, void *a2)
{
  if (*a2) {
    operator new();
  }
  *__n128 result = 0;
  return result;
}

void sub_19E3AD6C4(_Unwind_Exception *a1)
{
  MEMORY[0x19F3BDCF0](v1, 0x1012C40849EBCB1);
  _Unwind_Resume(a1);
}

void sub_19E3AD6EC(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  if (*a1 != *a2)
  {
    if (*a2) {
      operator new();
    }
    *a1 = 0;
    if (v3)
    {
      sub_19E3AD8D8((uint64_t)a1, v3);
    }
  }
}

void sub_19E3AD7B0(_Unwind_Exception *a1)
{
  MEMORY[0x19F3BDCF0](v1, 0x1012C40849EBCB1);
  _Unwind_Resume(a1);
}

const char *sub_19E3AD7D4(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (!*a1) {
    return "";
  }
  __n128 result = (const char *)(v1 + 8);
  if (*(char *)(v1 + 31) < 0) {
    return *(const char **)result;
  }
  return result;
}

std::string *sub_19E3AD800@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v3 = *(_DWORD **)a1;
  if (*(void *)a1)
  {
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    unsigned int v5 = *v3 - 1;
    if (v5 < 0x10) {
      MEMORY[0x19F3BD800](a2, off_1E599F190[v5]);
    }
    std::string::append(a2, ": ");
    int v6 = *(char *)(*(void *)a1 + 31);
    if (v6 >= 0) {
      uint8x8_t v7 = (const std::string::value_type *)(*(void *)a1 + 8);
    }
    else {
      uint8x8_t v7 = *(const std::string::value_type **)(*(void *)a1 + 8);
    }
    if (v6 >= 0) {
      std::string::size_type v8 = *(unsigned __int8 *)(*(void *)a1 + 31);
    }
    else {
      std::string::size_type v8 = *(void *)(*(void *)a1 + 16);
    }
    return std::string::append(a2, v7, v8);
  }
  else
  {
    return (std::string *)sub_19E382340(a2, "OK");
  }
}

void sub_19E3AD8B8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E3AD8D8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(char *)(a2 + 31) < 0) {
      operator delete(*(void **)(a2 + 8));
    }
    JUMPOUT(0x19F3BDCF0);
  }
}

void *sub_19E3AD940()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9459F08, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1E9459F08))
  {
    operator new();
  }
  unsigned int v0 = (pthread_key_t *)qword_1E9459F00;
  return sub_19E3ADA10(v0);
}

void sub_19E3AD9D8(_Unwind_Exception *a1)
{
  MEMORY[0x19F3BDCF0](v1, 0x1000C4000313F17);
  __cxa_guard_abort(&qword_1E9459F08);
  _Unwind_Resume(a1);
}

void *sub_19E3ADA10(pthread_key_t *a1)
{
  uint64_t v2 = pthread_getspecific(*a1);
  if (!v2)
  {
    uint64_t v2 = operator new(0x40uLL, (std::align_val_t)0x40uLL);
    *(_OWORD *)uint64_t v2 = xmmword_19E572990;
    v2[2] = 0;
    pthread_setspecific(*a1, v2);
  }
  return v2;
}

uint64_t sub_19E3ADA7C(uint64_t a1, unint64_t a2)
{
  if (*(void *)(a1 + 16) < a2)
  {
    sub_19E3AF8D4((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/arena_impl.h", 111);
    std::locale v4 = sub_19E3AF8EC(v7, "CHECK failed: n <= size_: ");
    sub_19E3AFA28((uint64_t)&v6, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v7);
  }
  return a1 + a2;
}

void sub_19E3ADAF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_19E3ADB28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = v6 + 72;
  if (v6 + 72 > *(void *)(a1 + 16))
  {
    sub_19E3AF8D4((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/arena.cc", 398);
    std::string::size_type v8 = sub_19E3AF8EC(v13, "CHECK failed: (pos + ArenaImpl::kSerialArenaSize) <= (b->size()): ");
    sub_19E3AFA28((uint64_t)&v12, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v13);
  }
  unint64_t v9 = (void *)sub_19E3ADA7C(a1, v6);
  *(void *)(a1 + 8) = v7;
  *unint64_t v9 = a3;
  v9[1] = a2;
  v9[2] = a1;
  v9[5] = sub_19E3ADA7C(a1, v7);
  uint64_t v10 = sub_19E3ADA7C(a1, *(void *)(a1 + 16));
  void v9[3] = 0;
  v9[7] = 0;
  v9[8] = 0;
  v9[6] = v10;
  return v9;
}

void sub_19E3ADBFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E3ADC28(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void *sub_19E3ADC44(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 32);
  if (a2 == -1)
  {
    if (v5) {
      unint64_t v7 = *(void *)v5;
    }
    else {
      unint64_t v7 = 256;
    }
  }
  else
  {
    if (v5) {
      unint64_t v6 = *(void *)(v5 + 8);
    }
    else {
      unint64_t v6 = 0x2000;
    }
    if (v6 >= 2 * a2) {
      unint64_t v7 = 2 * a2;
    }
    else {
      unint64_t v7 = v6;
    }
  }
  if (a3 >= 0xFFFFFFFFFFFFFFE8)
  {
    sub_19E3AF8D4((uint64_t)v12, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/arena.cc", 245);
    std::string::size_type v8 = sub_19E3AF8EC(v12, "CHECK failed: (min_bytes) <= (std::numeric_limits<size_t>::max() - kBlockHeaderSize): ");
    sub_19E3AFA28((uint64_t)&v11, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v12);
    uint64_t v5 = *(void *)(a1 + 32);
  }
  if (v7 <= a3 + 24) {
    size_t v9 = a3 + 24;
  }
  else {
    size_t v9 = v7;
  }
  if (v5) {
    __n128 result = (void *)(*(uint64_t (**)(size_t))(v5 + 16))(v9);
  }
  else {
    __n128 result = operator new(v9);
  }
  atomic_fetch_add_explicit((atomic_ullong *volatile)(a1 + 16), v9, memory_order_relaxed);
  return result;
}

void sub_19E3ADD30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_19E3ADD48(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (a1) {
    uint64_t v6 = *(void *)(a1 + 16);
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v7 = (uint64_t *)sub_19E3ADC44(a3, v6, a2);
  return sub_19E3AE2D8(v7, v8, a1, 0, 0);
}

void *sub_19E3ADDA4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  __n128 result = (void *)a1[3];
  do
  {
    if (result)
    {
      if ((unint64_t)(2 * *result) >= 0x40) {
        uint64_t v7 = 64;
      }
      else {
        uint64_t v7 = 2 * *result;
      }
    }
    else
    {
      uint64_t v7 = 8;
    }
    __n128 result = (void *)sub_19E3ADE3C(a1, (16 * (_WORD)v7 + 23) & 0xFF0);
    uint64_t v8 = a1[3];
    *__n128 result = v7;
    result[1] = v8;
    a1[3] = (uint64_t)result;
    a1[7] = (uint64_t)(result + 2);
    a1[8] = (uint64_t)&result[2 * v7 + 2];
  }
  while (!(16 * v7));
  result[2] = a2;
  result[3] = a3;
  a1[7] = (uint64_t)(result + 4);
  return result;
}

unint64_t sub_19E3ADE3C(uint64_t *a1, unint64_t a2)
{
  if (((a2 + 7) & 0xFFFFFFFFFFFFFFF8) != a2)
  {
    sub_19E3AF8D4((uint64_t)v9, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/arena_impl.h", 159);
    std::locale v4 = sub_19E3AF8EC(v9, "CHECK failed: (internal::AlignUpTo8(n)) == (n): ");
    sub_19E3AFA28((uint64_t)&v8, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v9);
  }
  unint64_t result = a1[5];
  unint64_t v6 = a1[6];
  if (v6 < result)
  {
    sub_19E3AF8D4((uint64_t)v9, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/arena_impl.h", 160);
    uint64_t v7 = sub_19E3AF8EC(v9, "CHECK failed: (limit_) >= (ptr_): ");
    sub_19E3AFA28((uint64_t)&v8, (const char **)&v7->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v9);
    unint64_t result = a1[5];
    unint64_t v6 = a1[6];
  }
  if (v6 - result < a2) {
    return sub_19E3AE1C4(a1, a2);
  }
  a1[5] = result + a2;
  return result;
}

void sub_19E3ADF24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_19E3ADF44(void *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_19E3AD940();
  if (v6[1] == a1[3])
  {
    explicit = (uint64_t *)v6[2];
    goto LABEL_3;
  }
  size_t v9 = sub_19E3AD940();
  explicit = (uint64_t *)atomic_load_explicit(a1 + 1, memory_order_acquire);
  if (explicit && (void *)explicit[1] == v9)
  {
LABEL_3:
    return sub_19E3ADFF0(explicit, a2, a3);
  }
  return sub_19E3AE050(a1, a2, a3);
}

unint64_t sub_19E3ADFF0(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5 = sub_19E3ADE3C(a1, a2);
  unint64_t v6 = v5;
  uint64_t v7 = (unint64_t *)a1[7];
  if (v7 == (unint64_t *)a1[8])
  {
    sub_19E3ADDA4(a1, v5, a3);
  }
  else
  {
    *uint64_t v7 = v5;
    v7[1] = a3;
    a1[7] = (uint64_t)(v7 + 2);
  }
  return v6;
}

unint64_t sub_19E3AE050(void *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_19E3AD940();
  uint64_t v7 = (uint64_t *)sub_19E3AE0FC(a1, (uint64_t)v6);
  return sub_19E3ADFF0(v7, a2, a3);
}

unint64_t sub_19E3AE0B4(void *a1, unint64_t a2)
{
  std::locale v4 = sub_19E3AD940();
  unint64_t v5 = (uint64_t *)sub_19E3AE0FC(a1, (uint64_t)v4);
  return sub_19E3ADE3C(v5, a2);
}

unint64_t sub_19E3AE0FC(void *a1, uint64_t a2)
{
  unint64_t explicit = atomic_load_explicit(a1, memory_order_acquire);
  if (explicit)
  {
    while (*(void *)(explicit + 8) != a2)
    {
      unint64_t explicit = *(void *)(explicit + 32);
      if (!explicit) {
        goto LABEL_4;
      }
    }
  }
  else
  {
LABEL_4:
    unint64_t v5 = sub_19E3ADC44((uint64_t)a1, -1, 0x48uLL);
    *(_OWORD *)unint64_t v5 = xmmword_19E5729A0;
    v5[2] = v6;
    uint64_t v7 = sub_19E3ADB28((uint64_t)v5, a2, (uint64_t)a1);
    unint64_t explicit = (unint64_t)v7;
    atomic_ullong v8 = *a1;
    v7[4] = *a1;
    atomic_ullong v9 = v8;
    atomic_compare_exchange_strong_explicit(a1, (unint64_t *)&v9, (unint64_t)v7, memory_order_release, memory_order_relaxed);
    if (v9 != v8)
    {
      atomic_ullong v10 = v9;
      do
      {
        v7[4] = v9;
        atomic_compare_exchange_strong_explicit(a1, (unint64_t *)&v10, (unint64_t)v7, memory_order_release, memory_order_relaxed);
        BOOL v11 = v10 == v9;
        atomic_ullong v9 = v10;
      }
      while (!v11);
    }
  }
  sub_19E3AD940()[2] = explicit;
  uint64_t v12 = a1[3];
  sub_19E3AD940()[1] = v12;
  atomic_store(explicit, a1 + 1);
  return explicit;
}

uint64_t sub_19E3AE1C4(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  *(void *)(v4 + 8) = *(void *)(v4 + 16) - a1[6] + a1[5];
  unint64_t v5 = sub_19E3ADD48(v4, a2, *a1);
  a1[2] = (uint64_t)v5;
  a1[5] = sub_19E3ADA7C((uint64_t)v5, v5[1]);
  a1[6] = sub_19E3ADA7C(a1[2], *(void *)(a1[2] + 16));
  return sub_19E3ADE3C(a1, a2);
}

unint64_t sub_19E3AE244(void *a1, unint64_t a2)
{
  uint64_t v4 = sub_19E3AD940();
  if (v4[1] == a1[3])
  {
    unint64_t explicit = (uint64_t *)v4[2];
    goto LABEL_3;
  }
  uint64_t v7 = sub_19E3AD940();
  unint64_t explicit = (uint64_t *)atomic_load_explicit(a1 + 1, memory_order_acquire);
  if (explicit && (void *)explicit[1] == v7)
  {
LABEL_3:
    return sub_19E3ADE3C(explicit, a2);
  }
  return sub_19E3AE0B4(a1, a2);
}

uint64_t *sub_19E3AE2D8(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5)
{
  uint64_t v6 = 2;
  if (!a5) {
    uint64_t v6 = 0;
  }
  *a1 = v6 | a4 | a3;
  a1[1] = 24;
  a1[2] = a2;
  if ((a3 & 3) != 0)
  {
    sub_19E3AF8D4((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/arena_impl.h", 107);
    uint64_t v7 = sub_19E3AF8EC(v10, "CHECK failed: (reinterpret_cast<uintptr_t>(next) & 3) == (0u): ");
    sub_19E3AFA28((uint64_t)&v9, (const char **)&v7->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v10);
  }
  return a1;
}

void sub_19E3AE36C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E3AE384(uint64_t result)
{
  if (result) {
    JUMPOUT(0x19F3BDCE0);
  }
  return result;
}

unint64_t sub_19E3AE394(void *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9459F10, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1E9459F10))
  {
    __cxa_atexit((void (*)(void *))std::mutex::~mutex, &stru_1E9459550, &dword_19E36B000);
    __cxa_guard_release(&qword_1E9459F10);
  }
  std::mutex::lock(&stru_1E9459550);
  unint64_t explicit = atomic_load_explicit(a1 + 3, memory_order_acquire);
  if (!explicit)
  {
    sub_19E382294(a1, (void *)*a1, a1[1]);
    atomic_store((unint64_t)a1, a1 + 3);
    unint64_t explicit = (unint64_t)a1;
  }
  std::mutex::unlock(&stru_1E9459550);
  return explicit;
}

unint64_t sub_19E3AE450(uint64_t *a1, uint64_t a2, long long *a3, uint64_t a4)
{
  if (*a1 != a2)
  {
    sub_19E3A02F0(a1);
    JUMPOUT(0x19F3BD810);
  }
  if (!a4) {
    operator new();
  }
  if (*(unsigned char *)(a4 + 24)) {
    (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(a4 + 32) + 32) + 40))(*(void *)(*(void *)(a4 + 32) + 32), &unk_1EF0B7BE8, 24);
  }
  unint64_t result = sub_19E3ADF44((void *)a4, 0x18uLL, (uint64_t)sub_19E3A9AFC);
  unint64_t v8 = result;
  if (*((char *)a3 + 23) < 0)
  {
    unint64_t result = (unint64_t)sub_19E39369C((unsigned char *)result, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v9 = *a3;
    *(void *)(result + 16) = *((void *)a3 + 2);
    *(_OWORD *)unint64_t result = v9;
  }
  *a1 = v8;
  return result;
}

void sub_19E3AE5A8(_Unwind_Exception *a1)
{
  MEMORY[0x19F3BDCF0](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

void sub_19E3AE5CC(uint64_t *a1, uint64_t a2, long long *a3, uint64_t a4)
{
  if (*a1 == a2)
  {
    if (!a4) {
      operator new();
    }
    if (*(unsigned char *)(a4 + 24))
    {
      uint64_t v11 = a4;
      (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(a4 + 32) + 32) + 40))(*(void *)(*(void *)(a4 + 32) + 32), &unk_1EF0B7BE8, 24);
      a4 = v11;
    }
    unint64_t v9 = sub_19E3ADF44((void *)a4, 0x18uLL, (uint64_t)sub_19E3A9AFC);
    uint64_t v10 = *((void *)a3 + 2);
    *(_OWORD *)unint64_t v9 = *a3;
    *(void *)(v9 + 16) = v10;
    *((void *)a3 + 1) = 0;
    *((void *)a3 + 2) = 0;
    *(void *)a3 = 0;
    *a1 = v9;
  }
  else
  {
    uint64_t v6 = sub_19E3A02F0(a1);
    uint64_t v7 = v6;
    if (*(char *)(v6 + 23) < 0) {
      operator delete(*(void **)v6);
    }
    long long v8 = *a3;
    *(void *)(v7 + 16) = *((void *)a3 + 2);
    *(_OWORD *)uint64_t v7 = v8;
    *((unsigned char *)a3 + 23) = 0;
    *(unsigned char *)a3 = 0;
  }
}

unint64_t sub_19E3AE6F8(uint64_t *a1, long long *a2, uint64_t a3)
{
  return sub_19E3AE450(a1, (uint64_t)&qword_1E945A358, a2, a3);
}

void sub_19E3AE70C(uint64_t *a1, long long *a2, uint64_t a3)
{
}

unint64_t sub_19E3AE720(uint64_t *a1, long long *a2, uint64_t a3)
{
  return sub_19E3AE450(a1, 0, a2, a3);
}

uint64_t *sub_19E3AE730(uint64_t *a1, uint64_t a2)
{
  if ((uint64_t *)*a1 == &qword_1E945A358) {
    return sub_19E3AE74C((uint64_t **)a1, a2);
  }
  else {
    return (uint64_t *)sub_19E3A02F0(a1);
  }
}

uint64_t *sub_19E3AE74C(uint64_t **a1, uint64_t a2)
{
  if (*a1 != &qword_1E945A358)
  {
    sub_19E3AF8D4((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/arenastring.cc", 147);
    uint64_t v4 = sub_19E3AF8EC(v7, "CHECK failed: IsDefault(default_value): ");
    sub_19E3AFA28((uint64_t)&v6, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v7);
  }
  if (!a2) {
    operator new();
  }
  if (*(unsigned char *)(a2 + 24)) {
    (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(a2 + 32) + 32) + 40))(*(void *)(*(void *)(a2 + 32) + 32), &unk_1EF0B7BE8, 24);
  }
  unint64_t result = (uint64_t *)sub_19E3ADF44((void *)a2, 0x18uLL, (uint64_t)sub_19E3A9AFC);
  *unint64_t result = 0;
  result[1] = 0;
  result[2] = 0;
  *a1 = result;
  return result;
}

void sub_19E3AE854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_19E3AE86C(uint64_t *a1, void *a2, uint64_t a3)
{
  if (*a1) {
    return sub_19E3A02F0(a1);
  }
  else {
    return sub_19E3AE888((unint64_t *)a1, a3, a2);
  }
}

unint64_t sub_19E3AE888(unint64_t *a1, uint64_t a2, void *a3)
{
  if (*a1)
  {
    sub_19E3AF8D4((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/arenastring.cc", 147);
    char v6 = sub_19E3AF8EC(v13, "CHECK failed: IsDefault(default_value): ");
    sub_19E3AFA28((uint64_t)&v12, (const char **)&v6->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v13);
  }
  unint64_t explicit = atomic_load_explicit(a3 + 3, memory_order_acquire);
  if (explicit)
  {
    if (a2) {
      goto LABEL_5;
    }
LABEL_10:
    operator new();
  }
  unint64_t explicit = sub_19E3AE394(a3);
  if (!a2) {
    goto LABEL_10;
  }
LABEL_5:
  if (*(unsigned char *)(a2 + 24)) {
    (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(a2 + 32) + 32) + 40))(*(void *)(*(void *)(a2 + 32) + 32), &unk_1EF0B7BE8, 24);
  }
  unint64_t v8 = sub_19E3ADF44((void *)a2, 0x18uLL, (uint64_t)sub_19E3A9AFC);
  unint64_t v9 = v8;
  if (*(char *)(explicit + 23) < 0)
  {
    sub_19E39369C((unsigned char *)v8, *(void **)explicit, *(void *)(explicit + 8));
  }
  else
  {
    long long v10 = *(_OWORD *)explicit;
    *(void *)(v8 + 16) = *(void *)(explicit + 16);
    *(_OWORD *)unint64_t v8 = v10;
  }
  *a1 = v9;
  return v9;
}

void sub_19E3AE9EC(_Unwind_Exception *a1)
{
  MEMORY[0x19F3BDCF0](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

std::string *sub_19E3AEA24(std::string *result, void *a2)
{
  if (result->__r_.__value_.__r.__words[0])
  {
    uint64_t v3 = (std::string *)sub_19E3A02F0((uint64_t *)result);
    unint64_t explicit = (const std::string *)atomic_load_explicit(a2 + 3, memory_order_acquire);
    if (!explicit) {
      unint64_t explicit = (const std::string *)sub_19E3AE394(a2);
    }
    return std::string::operator=(v3, explicit);
  }
  return result;
}

int64_t sub_19E3AEA90(uint64_t a1, char *a2)
{
  while (1)
  {
    unint64_t v5 = *(char **)a1;
    uint64_t v4 = *(void **)(a1 + 8);
    if (!v4)
    {
      int64_t v10 = v5 - a2;
      int64_t v9 = v10 + 16;
      *(void *)(a1 + 8) = a2;
      if (((v10 + 16) & 0x80000000) == 0) {
        return v9;
      }
      goto LABEL_12;
    }
    int v6 = a2 - v5;
    if (a2 <= v5) {
      break;
    }
    if (*(unsigned char *)(a1 + 56))
    {
      sub_19E3AF8D4((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 685);
      uint64_t v7 = sub_19E3AF8EC(v15, "CHECK failed: !had_error_: ");
      sub_19E3AFA28((uint64_t)&v14, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v15);
    }
    if (v6 >= 17)
    {
      sub_19E3AF8D4((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 686);
      unint64_t v8 = sub_19E3AF8EC(v15, "CHECK failed: overrun <= kSlopBytes: ");
      sub_19E3AFA28((uint64_t)&v14, (const char **)&v8->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v15);
    }
    a2 = &sub_19E3AEC28((char **)a1)[v6];
    if (*(unsigned char *)(a1 + 56)) {
      return 0;
    }
  }
  memcpy(v4, (const void *)(a1 + 16), (size_t)&a2[-a1 - 16]);
  uint64_t v11 = *(char **)a1;
  *(void *)(a1 + 8) += &a2[-a1 - 16];
  int64_t v9 = v11 - a2;
  if (((v11 - a2) & 0x80000000) == 0) {
    return v9;
  }
LABEL_12:
  sub_19E3AF8D4((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 700);
  char v12 = sub_19E3AF8EC(v15, "CHECK failed: s >= 0: ");
  sub_19E3AFA28((uint64_t)&v14, (const char **)&v12->__r_.__value_.__l.__data_);
  sub_19E3AFA30((uint64_t)v15);
  return v9;
}

void sub_19E3AEC00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_19E3AEC28(char **a1)
{
  if (*((unsigned char *)a1 + 56))
  {
    sub_19E3AF8D4((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 788);
    uint64_t v2 = sub_19E3AF8EC(v13, "CHECK failed: !had_error_: ");
    sub_19E3AFA28((uint64_t)&v12, (const char **)&v2->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v13);
  }
  if (a1[6])
  {
    uint64_t v3 = (char *)(a1 + 2);
    unint64_t v5 = *a1;
    uint64_t v4 = a1[1];
    if (v4)
    {
      memcpy(v4, a1 + 2, v5 - v3);
      int v12 = 0;
      do
      {
        v13[0].__r_.__value_.__r.__words[0] = 0;
        if (((*(uint64_t (**)(char *, std::string *, int *))(*(void *)a1[6] + 16))(a1[6], v13, &v12) & 1) == 0)
        {
          *((unsigned char *)a1 + 56) = 1;
          goto LABEL_14;
        }
        uint64_t v6 = v12;
      }
      while (!v12);
      unint64_t v5 = (char *)v13[0].__r_.__value_.__r.__words[0];
      if (v12 >= 17)
      {
        *(_OWORD *)v13[0].__r_.__value_.__l.__data_ = *(_OWORD *)*a1;
        *a1 = &v5[v6 - 16];
        a1[1] = 0;
        return v5;
      }
      if (v12 <= 0)
      {
        std::string::size_type v10 = v13[0].__r_.__value_.__r.__words[0];
        sub_19E3AF8D4((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 810);
        int64_t v9 = sub_19E3AF8EC(v13, "CHECK failed: size > 0: ");
        sub_19E3AFA28((uint64_t)&v11, (const char **)&v9->__r_.__value_.__l.__data_);
        sub_19E3AFA30((uint64_t)v13);
        LODWORD(v6) = v12;
        unint64_t v5 = (char *)v10;
      }
      *(_OWORD *)uint64_t v3 = *(_OWORD *)*a1;
      uint64_t v7 = &v3[(int)v6];
    }
    else
    {
      *(_OWORD *)uint64_t v3 = *(_OWORD *)v5;
      uint64_t v7 = (char *)(a1 + 4);
    }
    *a1 = v7;
    a1[1] = v5;
  }
  else
  {
    *((unsigned char *)a1 + 56) = 1;
    uint64_t v3 = (char *)(a1 + 2);
LABEL_14:
    *a1 = (char *)(a1 + 4);
  }
  return v3;
}

void sub_19E3AEDC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_19E3AEDE0(uint64_t a1, char *a2)
{
  if (!*(unsigned char *)(a1 + 56))
  {
    int64_t v3 = sub_19E3AEA90(a1, a2);
    if (v3) {
      (*(void (**)(void, int64_t))(**(void **)(a1 + 48) + 24))(*(void *)(a1 + 48), v3);
    }
    a2 = (char *)(a1 + 16);
    *(void *)a1 = a1 + 16;
    *(void *)(a1 + 8) = a1 + 16;
  }
  return a2;
}

char *sub_19E3AEE48(uint64_t a1, char *a2)
{
  while (!*(unsigned char *)(a1 + 56))
  {
    int64_t v3 = &a2[-*(void *)a1];
    if ((v3 & 0x80000000) != 0)
    {
      sub_19E3AF8D4((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 829);
      unint64_t v5 = sub_19E3AF8EC(v8, "CHECK failed: overrun >= 0: ");
      sub_19E3AFA28((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
      goto LABEL_6;
    }
    if (v3 > 0x10)
    {
      sub_19E3AF8D4((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 830);
      uint64_t v4 = sub_19E3AF8EC(v8, "CHECK failed: overrun <= kSlopBytes: ");
      sub_19E3AFA28((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
LABEL_6:
      sub_19E3AFA30((uint64_t)v8);
    }
    a2 = &sub_19E3AEC28((char **)a1)[(int)v3];
    if ((unint64_t)a2 < *(void *)a1) {
      return a2;
    }
  }
  return (char *)(a1 + 16);
}

void sub_19E3AEF3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_19E3AEF5C(uint64_t *a1, char *a2, int a3, unint64_t a4)
{
  uint64_t v4 = (char *)a4;
  for (int i = sub_19E3AF000(a1, a4); a3 > i; int i = sub_19E3AF000(a1, (unint64_t)v4))
  {
    memcpy(v4, a2, i);
    a3 -= i;
    a2 += i;
    uint64_t v4 = sub_19E3AEE48((uint64_t)a1, &v4[i]);
  }
  memcpy(v4, a2, a3);
  return &v4[a3];
}

uint64_t sub_19E3AF000(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = *a1;
  if (*a1 + 16 < a2)
  {
    sub_19E3AF8D4((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/io/coded_stream.h", 838);
    unint64_t v5 = sub_19E3AF8EC(v8, "CHECK failed: ptr <= end_ + kSlopBytes: ");
    sub_19E3AFA28((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v8);
    uint64_t v3 = *a1;
  }
  return v3 - a2 + 16;
}

void sub_19E3AF084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_19E3AF09C(uint64_t a1, void *a2, uint64_t a3, char *a4)
{
  if (sub_19E3AF000((uint64_t *)a1, (unint64_t)a4) <= (int)a3)
  {
    unint64_t v8 = sub_19E3AEDE0(a1, a4);
    if (((*(uint64_t (**)(void, void *, uint64_t))(**(void **)(a1 + 48) + 40))(*(void *)(a1 + 48), a2, a3) & 1) == 0)
    {
      *(unsigned char *)(a1 + 56) = 1;
      unint64_t v8 = (char *)(a1 + 16);
      *(void *)a1 = a1 + 32;
    }
    return v8;
  }
  if (*(void *)a1 - (void)a4 >= (int)a3)
  {
    memcpy(a4, a2, (int)a3);
    return &a4[(int)a3];
  }
  return sub_19E3AEF5C((uint64_t *)a1, (char *)a2, a3, (unint64_t)a4);
}

char *sub_19E3AF1A4(unint64_t *a1, int a2, void **a3, char *a4)
{
  uint64_t v4 = a4;
  unint64_t v8 = *a1;
  if (*a1 <= (unint64_t)a4)
  {
    uint64_t v4 = sub_19E3AEE48((uint64_t)a1, a4);
    unint64_t v8 = *a1;
  }
  if (*((char *)a3 + 23) >= 0) {
    uint64_t v9 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    uint64_t v9 = *((unsigned int *)a3 + 2);
  }
  if (v8 <= (unint64_t)v4)
  {
    sub_19E3AF8D4((uint64_t)v23, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/io/coded_stream.h", 858);
    std::string::size_type v10 = sub_19E3AF8EC(v23, "CHECK failed: ptr < end_: ");
    sub_19E3AFA28((uint64_t)&v22, (const char **)&v10->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v23);
  }
  unsigned int v11 = (8 * a2) | 2;
  if (v11 > 0x7F)
  {
    *uint64_t v4 = (8 * a2) | 0x82;
    unsigned int v13 = (8 * a2) >> 7;
    if (v11 >> 14)
    {
      int v12 = v4 + 2;
      do
      {
        *(v12 - 1) = v13 | 0x80;
        unsigned int v14 = v13 >> 7;
        ++v12;
        unsigned int v15 = v13 >> 14;
        v13 >>= 7;
      }
      while (v15);
      *(v12 - 1) = v14;
    }
    else
    {
      v4[1] = v13;
      int v12 = v4 + 2;
    }
  }
  else
  {
    *uint64_t v4 = v11;
    int v12 = v4 + 1;
  }
  if (v9 >= 0x80)
  {
    unsigned int v20 = v9;
    do
    {
      *v12++ = v20 | 0x80;
      unsigned int v16 = v20 >> 7;
      unsigned int v21 = v20 >> 14;
      v20 >>= 7;
    }
    while (v21);
  }
  else
  {
    LOBYTE(v16) = v9;
  }
  unsigned char *v12 = v16;
  size_t v17 = v12 + 1;
  if (*((char *)a3 + 23) >= 0) {
    uint64_t v18 = a3;
  }
  else {
    uint64_t v18 = *a3;
  }
  return sub_19E3AF32C((uint64_t)a1, v18, v9, v17);
}

void sub_19E3AF314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_19E3AF32C(uint64_t a1, void *a2, uint64_t a3, char *__dst)
{
  if (*(unsigned char *)(a1 + 57))
  {
    return sub_19E3AF09C(a1, a2, a3, __dst);
  }
  else if (*(void *)a1 - (void)__dst < (int)a3)
  {
    return sub_19E3AEF5C((uint64_t *)a1, (char *)a2, a3, (unint64_t)__dst);
  }
  else
  {
    uint64_t v6 = (int)a3;
    memcpy(__dst, a2, (int)a3);
    return &__dst[v6];
  }
}

char *sub_19E3AF3B8(uint64_t *a1, int a2, uint64_t a3, char *a4)
{
  uint64_t v4 = a4;
  unint64_t v8 = *a1;
  if (*a1 <= (unint64_t)a4)
  {
    uint64_t v4 = sub_19E3AEE48((uint64_t)a1, a4);
    unint64_t v8 = *a1;
  }
  if (*(char *)(a3 + 23) >= 0) {
    LODWORD(v9) = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v9 = *(void *)(a3 + 8);
  }
  if (v8 <= (unint64_t)v4)
  {
    sub_19E3AF8D4((uint64_t)v23, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/io/coded_stream.h", 858);
    std::string::size_type v10 = sub_19E3AF8EC(v23, "CHECK failed: ptr < end_: ");
    sub_19E3AFA28((uint64_t)&v22, (const char **)&v10->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v23);
  }
  unsigned int v11 = (8 * a2) | 2;
  if (v11 > 0x7F)
  {
    *uint64_t v4 = (8 * a2) | 0x82;
    unsigned int v13 = (8 * a2) >> 7;
    if (v11 >> 14)
    {
      int v12 = v4 + 2;
      do
      {
        *(v12 - 1) = v13 | 0x80;
        unsigned int v14 = v13 >> 7;
        ++v12;
        unsigned int v15 = v13 >> 14;
        v13 >>= 7;
      }
      while (v15);
      *(v12 - 1) = v14;
    }
    else
    {
      v4[1] = v13;
      int v12 = v4 + 2;
    }
  }
  else
  {
    *uint64_t v4 = v11;
    int v12 = v4 + 1;
  }
  if (v9 >= 0x80)
  {
    unsigned int v20 = v9;
    do
    {
      *v12++ = v20 | 0x80;
      unsigned int v16 = v20 >> 7;
      unsigned int v21 = v20 >> 14;
      v20 >>= 7;
    }
    while (v21);
  }
  else
  {
    LOBYTE(v16) = v9;
  }
  unsigned char *v12 = v16;
  size_t v17 = v12 + 1;
  if (*(char *)(a3 + 23) >= 0) {
    uint64_t v18 = (char *)a3;
  }
  else {
    uint64_t v18 = *(char **)a3;
  }
  if (*a1 - (uint64_t)v17 < (int)v9) {
    return sub_19E3AEF5C(a1, v18, v9, (unint64_t)v17);
  }
  memcpy(v17, v18, (int)v9);
  return &v17[(int)v9];
}

void sub_19E3AF550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19E3AF568(int a1, int a2, const std::string::value_type *a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (a2 > 3014000)
  {
    LODWORD(v2sub_19E392864(&a9, 0) = 3;
    unsigned int v21 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/common.cc";
    int v22 = 76;
    memset(&v23, 0, sizeof(v23));
    std::string::append(&v23, "This program requires version ");
    sub_19E3AF95C(a2, &v17);
    if ((v19 & 0x80u) == 0) {
      uint64_t v6 = (const std::string::value_type *)&v17;
    }
    else {
      uint64_t v6 = (const std::string::value_type *)v17;
    }
    if ((v19 & 0x80u) == 0) {
      std::string::size_type v7 = v19;
    }
    else {
      std::string::size_type v7 = v18;
    }
    std::string::append(&v23, v6, v7);
    std::string::append(&v23, " of the Protocol Buffer runtime library, but the installed version is ");
    snprintf(__str, 0x80uLL, "%d.%d.%d", 3, 14, 0);
    char v25 = 0;
    sub_19E382340(&__p, __str);
    if ((v16 & 0x80u) == 0) {
      p_p = (const std::string::value_type *)&__p;
    }
    else {
      p_p = (const std::string::value_type *)__p;
    }
    if ((v16 & 0x80u) == 0) {
      std::string::size_type v9 = v16;
    }
    else {
      std::string::size_type v9 = v15;
    }
    std::string::append(&v23, p_p, v9);
    std::string::append(&v23, ".  Please update your library.  If you compiled the program yourself, make sure that your headers are from the same version of Protocol Buffers as your link-time library.  (Version verification failed in \"");
    std::string::append(&v23, a3);
    std::string::append(&v23, "\".)");
    sub_19E3AFBE4(&v20);
    if ((char)v16 < 0) {
      operator delete(__p);
    }
    if ((char)v19 < 0) {
      operator delete(v17);
    }
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
  }
  if (a1 < 3014000)
  {
    LODWORD(v2sub_19E392864(&a9, 0) = 3;
    unsigned int v21 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/common.cc";
    int v22 = 87;
    memset(&v23, 0, sizeof(v23));
    std::string::append(&v23, "This program was compiled against version ");
    sub_19E3AF95C(a1, &v17);
    if ((v19 & 0x80u) == 0) {
      std::string::size_type v10 = (const std::string::value_type *)&v17;
    }
    else {
      std::string::size_type v10 = (const std::string::value_type *)v17;
    }
    if ((v19 & 0x80u) == 0) {
      std::string::size_type v11 = v19;
    }
    else {
      std::string::size_type v11 = v18;
    }
    std::string::append(&v23, v10, v11);
    std::string::append(&v23, " of the Protocol Buffer runtime library, which is not compatible with the installed version (");
    snprintf(__str, 0x80uLL, "%d.%d.%d", 3, 14, 0);
    char v25 = 0;
    sub_19E382340(&__p, __str);
    if ((v16 & 0x80u) == 0) {
      int v12 = (const std::string::value_type *)&__p;
    }
    else {
      int v12 = (const std::string::value_type *)__p;
    }
    if ((v16 & 0x80u) == 0) {
      std::string::size_type v13 = v16;
    }
    else {
      std::string::size_type v13 = v15;
    }
    std::string::append(&v23, v12, v13);
    std::string::append(&v23, ").  Contact the program author for an update.  If you compiled the program yourself, make sure that your headers are from the same version of Protocol Buffers as your link-time library.  (Version verification failed in \"");
    std::string::append(&v23, a3);
    std::string::append(&v23, "\".)");
    sub_19E3AFBE4(&v20);
    if ((char)v16 < 0) {
      operator delete(__p);
    }
    if ((char)v19 < 0) {
      operator delete(v17);
    }
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
  }
}

void sub_19E3AF864(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E3AF8D4(uint64_t result, int a2, uint64_t a3, int a4)
{
  *(_DWORD *)unint64_t result = a2;
  *(void *)(result + 8) = a3;
  *(_DWORD *)(result + 16) = a4;
  *(void *)(result + 32) = 0;
  *(void *)(result + 4sub_19E392864(&a9, 0) = 0;
  *(void *)(result + 24) = 0;
  return result;
}

std::string *sub_19E3AF8EC(std::string *a1, const std::string::value_type *a2)
{
  return a1;
}

std::string *sub_19E3AF918(std::string *a1, const std::string::value_type *a2)
{
  uint64_t v3 = a1 + 1;
  std::string::size_type v4 = *((void *)a2 + 1);
  if (a2[23] >= 0)
  {
    std::string::size_type v5 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = *(const std::string::value_type **)a2;
    std::string::size_type v5 = v4;
  }
  std::string::append(v3, a2, v5);
  return a1;
}

void *sub_19E3AF95C@<X0>(int a1@<W0>, void *a2@<X8>)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  snprintf(__str, 0x80uLL, "%d.%d.%d", a1 / 1000000, a1 / 1000 % 1000, a1 % 1000);
  char __str[127] = 0;
  return sub_19E382340(a2, __str);
}

const char **sub_19E3AFA28(uint64_t a1, const char **a2)
{
  return sub_19E3AFBE4(a2);
}

uint64_t sub_19E3AFA30(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

uint64_t sub_19E3AFA64(uint64_t result, const char *a2, int a3, uint64_t a4)
{
  if ((result & 0x80000000) == 0)
  {
    std::string::size_type v4 = (FILE **)MEMORY[0x1E4F143C8];
    if (*(char *)(a4 + 23) >= 0) {
      uint64_t v5 = (const char *)a4;
    }
    else {
      uint64_t v5 = *(const char **)a4;
    }
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "[libprotobuf %s %s:%d] %s\n", off_1E599F210[result], a2, a3, v5);
    uint64_t v6 = *v4;
    return fflush(v6);
  }
  return result;
}

std::string *sub_19E3AFAE4(std::string *a1, int a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  snprintf(__str, 0x80uLL, "%d", a2);
  char __str[127] = 0;
  std::string::append(a1 + 1, __str);
  return a1;
}

std::string *sub_19E3AFB64(std::string *a1, uint64_t a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  snprintf(__str, 0x80uLL, "%lu", a2);
  char __str[127] = 0;
  std::string::append(a1 + 1, __str);
  return a1;
}

const char **sub_19E3AFBE4(const char **result)
{
  uint64_t v1 = result;
  if (*(_DWORD *)result == 3)
  {
    uint64_t v2 = 3;
  }
  else
  {
    int v3 = atomic_load((unsigned int *)&unk_1E9459F18);
    if (v3 > 0) {
      goto LABEL_6;
    }
    uint64_t v2 = *(unsigned int *)result;
  }
  unint64_t result = (const char **)off_1EC304E38(v2, v1[1], *((_DWORD *)v1 + 4), (uint64_t)(v1 + 3));
LABEL_6:
  if (*(_DWORD *)v1 == 3)
  {
    exception = __cxa_allocate_exception(0x30uLL);
    sub_19E3AFCA4(exception, v1[1], *((unsigned int *)v1 + 4), v1 + 3);
    __cxa_throw(exception, (struct type_info *)&unk_1EF0B7630, (void (*)(void *))sub_19E3AFCA8);
  }
  return result;
}

void sub_19E3AFC90(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19E3AFCAC(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&unk_1EF0BD460;
  if (SHIBYTE(this[5].__vftable) < 0) {
    operator delete(this[3].__vftable);
  }
  std::exception::~exception(this);
}

void sub_19E3AFD0C(std::exception *a1)
{
  sub_19E3AFCAC(a1);
  JUMPOUT(0x19F3BDCF0);
}

uint64_t sub_19E3AFD44(uint64_t a1)
{
  uint64_t result = a1 + 24;
  if (*(char *)(a1 + 47) < 0) {
    return *(void *)result;
  }
  return result;
}

uint64_t sub_19E3AFD60(uint64_t a1, uint64_t a2, int a3, long long *a4)
{
  *(void *)a1 = &unk_1EF0BD460;
  *(void *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 16) = a3;
  uint64_t v5 = a1 + 24;
  if (*((char *)a4 + 23) < 0)
  {
    sub_19E39369C((unsigned char *)v5, *(void **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v6 = *a4;
    *(void *)(v5 + 16) = *((void *)a4 + 2);
    *(_OWORD *)uint64_t v5 = v6;
  }
  return a1;
}

void sub_19E3AFDCC(_Unwind_Exception *a1)
{
  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19E3AFDE0(uint64_t a1, int a2, _OWORD *a3)
{
  if (qword_1E9459F20)
  {
    int8x8_t v3 = *(int8x8_t *)(qword_1E9459F20 + 8);
    if (v3)
    {
      unint64_t v4 = *(void *)(a1 + 8);
      unint64_t v5 = 0x9DDFEA08EB382D69 * (((8 * v4) + 8) ^ HIDWORD(v4));
      unint64_t v6 = 0x9DDFEA08EB382D69 * (HIDWORD(v4) ^ (v5 >> 47) ^ v5);
      unint64_t v7 = (0x9DDFEA08EB382D69 * (v6 ^ (v6 >> 47))) ^ a2;
      uint8x8_t v8 = (uint8x8_t)vcnt_s8(v3);
      v8.i16[0] = vaddlv_u8(v8);
      if (v8.u32[0] > 1uLL)
      {
        unint64_t v9 = v7;
        if (v7 >= *(void *)&v3) {
          unint64_t v9 = v7 % *(void *)&v3;
        }
      }
      else
      {
        unint64_t v9 = (*(void *)&v3 - 1) & v7;
      }
      std::string::size_type v10 = *(uint64_t ***)(*(void *)qword_1E9459F20 + 8 * v9);
      if (v10)
      {
        for (int i = *v10; i; int i = (uint64_t *)*i)
        {
          unint64_t v12 = i[1];
          if (v7 == v12)
          {
            if (i[2] == v4 && *((_DWORD *)i + 6) == a2)
            {
              long long v14 = *((_OWORD *)i + 3);
              *a3 = *((_OWORD *)i + 2);
              a3[1] = v14;
              return 1;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v12 >= *(void *)&v3) {
                v12 %= *(void *)&v3;
              }
            }
            else
            {
              v12 &= *(void *)&v3 - 1;
            }
            if (v12 != v9) {
              return 0;
            }
          }
        }
      }
    }
  }
  return 0;
}

uint64_t sub_19E3AFEF4(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = a2;
  *(_DWORD *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  return result;
}

uint64_t sub_19E3AFF04(uint64_t a1)
{
  if (!*(void *)a1)
  {
    uint64_t v2 = *(void *)(a1 + 16);
    if (*(unsigned __int16 *)(a1 + 8) >= 0x101u)
    {
      sub_19E3BA20C(*(unsigned __int8 **)v2, (unsigned __int8 *)(v2 + 8));
    }
    else if (*(_WORD *)(a1 + 10))
    {
      uint64_t v3 = 32 * *(unsigned __int16 *)(a1 + 10);
      unint64_t v4 = (unsigned __int8 *)(v2 + 8);
      do
      {
        sub_19E3B9F50(v4);
        v4 += 32;
        v3 -= 32;
      }
      while (v3);
    }
    uint64_t v5 = *(void *)(a1 + 16);
    if (*(unsigned __int16 *)(a1 + 8) >= 0x101u)
    {
      if (v5)
      {
        uint64_t v7 = *(void *)(a1 + 16);
        sub_19E37CE48(v5, *(void **)(v5 + 8));
        MEMORY[0x19F3BDCF0](v7, 0x1020C4062D53EE8);
      }
    }
    else if (v5)
    {
      MEMORY[0x19F3BDCC0](v5, 0x1062C802AB6010CLL);
    }
  }
  return a1;
}

unsigned __int8 *sub_19E3AFFD8(unsigned __int8 *result)
{
  uint64_t v1 = result;
  if (result[9])
  {
    uint64_t v2 = result[8];
    if ((v2 - 19) <= 0xFFFFFFED)
    {
      sub_19E3AF8D4((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      uint64_t v3 = sub_19E3AF8EC(v10, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19E3AFA28((uint64_t)&v9, (const char **)&v3->__r_.__value_.__l.__data_);
      uint64_t result = (unsigned __int8 *)sub_19E3AFA30((uint64_t)v10);
    }
    switch(v2)
    {
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
        **(_DWORD **)uint64_t v1 = 0;
        break;
      case 9:
      case 12:
        uint64_t result = (unsigned __int8 *)sub_19E3A9BF0(*(void *)v1);
        break;
      case 10:
      case 11:
        uint64_t result = (unsigned __int8 *)sub_19E3BAA14(*(void *)v1);
        break;
      default:
        return result;
    }
  }
  else if ((result[10] & 1) == 0)
  {
    uint64_t v4 = result[8];
    if ((v4 - 19) <= 0xFFFFFFED)
    {
      sub_19E3AF8D4((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      uint64_t v5 = sub_19E3AF8EC(v10, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19E3AFA28((uint64_t)&v9, (const char **)&v5->__r_.__value_.__l.__data_);
      uint64_t result = (unsigned __int8 *)sub_19E3AFA30((uint64_t)v10);
    }
    int v6 = dword_19E572D20[v4];
    if (v6 == 10)
    {
      uint64_t v8 = **(void **)v1;
      if ((v1[10] & 0x10) != 0) {
        uint64_t result = (unsigned __int8 *)(*(uint64_t (**)(void))(v8 + 112))();
      }
      else {
        uint64_t result = (unsigned __int8 *)(*(uint64_t (**)(void))(v8 + 40))();
      }
    }
    else if (v6 == 9)
    {
      uint64_t v7 = *(void *)v1;
      if (*(char *)(*(void *)v1 + 23) < 0)
      {
        **(unsigned char **)uint64_t v7 = 0;
        *(void *)(v7 + 8) = 0;
      }
      else
      {
        *(unsigned char *)uint64_t v7 = 0;
        *(unsigned char *)(v7 + 23) = 0;
      }
    }
    v1[10] = v1[10] & 0xF0 | 1;
  }
  return result;
}

void sub_19E3B01AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E3B01F4(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  uint64_t result = (uint64_t)sub_19E3B5160(a1, a2);
  uint64_t v9 = result;
  *(void *)(result + 16) = a5;
  if (v10)
  {
    *(unsigned char *)(result + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_19E3AF8D4((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      std::string::size_type v11 = sub_19E3AF8EC(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19E3AFA28((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
      uint64_t result = sub_19E3AFA30((uint64_t)v18);
    }
    if (dword_19E572D20[a3] != 1)
    {
      sub_19E3AF8D4((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 348);
      unint64_t v12 = sub_19E3AF8EC(v18, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_INT32): ");
      sub_19E3AFA28((uint64_t)&v17, (const char **)&v12->__r_.__value_.__l.__data_);
      uint64_t result = sub_19E3AFA30((uint64_t)v18);
    }
    *(unsigned char *)(v9 + 9) = 0;
  }
  else
  {
    if (*(unsigned char *)(result + 9))
    {
      sub_19E3AF8D4((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 348);
      std::string::size_type v13 = sub_19E3AF8EC(v18, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      sub_19E3AFA28((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
      uint64_t result = sub_19E3AFA30((uint64_t)v18);
    }
    uint64_t v14 = *(unsigned __int8 *)(v9 + 8);
    if ((v14 - 19) <= 0xFFFFFFED)
    {
      sub_19E3AF8D4((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      std::string::size_type v15 = sub_19E3AF8EC(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19E3AFA28((uint64_t)&v17, (const char **)&v15->__r_.__value_.__l.__data_);
      uint64_t result = sub_19E3AFA30((uint64_t)v18);
    }
    if (dword_19E572D20[v14] != 1)
    {
      sub_19E3AF8D4((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 348);
      unsigned __int8 v16 = sub_19E3AF8EC(v18, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_INT32): ");
      sub_19E3AFA28((uint64_t)&v17, (const char **)&v16->__r_.__value_.__l.__data_);
      uint64_t result = sub_19E3AFA30((uint64_t)v18);
    }
  }
  *(unsigned char *)(v9 + 10) &= 0xF0u;
  *(_DWORD *)uint64_t v9 = a4;
  return result;
}

void sub_19E3B03D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E3B040C(uint64_t *a1, uint64_t a2, int a3, int a4, int a5, uint64_t *a6)
{
  std::string::size_type v11 = sub_19E3B5160((uint64_t)a1, a2);
  unint64_t v12 = v11;
  std::string v11[2] = a6;
  if (v13)
  {
    *((unsigned char *)v11 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_19E3AF8D4((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      uint64_t v14 = sub_19E3AF8EC(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19E3AFA28((uint64_t)&v27, (const char **)&v14->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v28);
    }
    if (dword_19E572D20[a3] != 1)
    {
      sub_19E3AF8D4((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 348);
      std::string::size_type v15 = sub_19E3AF8EC(v28, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_INT32): ");
      sub_19E3AFA28((uint64_t)&v27, (const char **)&v15->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v28);
    }
    *((unsigned char *)v12 + 9) = 1;
    *((unsigned char *)v12 + 11) = a4;
    uint64_t v16 = *a1;
    if (!*a1) {
      operator new();
    }
    if (*(unsigned char *)(v16 + 24)) {
      (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v16 + 32) + 32) + 40))(*(void *)(*(void *)(v16 + 32) + 32), &unk_1EF0B75F0, 16);
    }
    char v17 = (uint64_t *)sub_19E3ADF44((void *)v16, 0x10uLL, (uint64_t)sub_19E3BA27C);
    uint64_t *v17 = 0;
    v17[1] = v16;
    std::string *v12 = v17;
  }
  else
  {
    if (!*((unsigned char *)v11 + 9))
    {
      sub_19E3AF8D4((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 348);
      std::string::size_type v18 = sub_19E3AF8EC(v28, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      sub_19E3AFA28((uint64_t)&v27, (const char **)&v18->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v28);
    }
    uint64_t v19 = *((unsigned __int8 *)v12 + 8);
    if ((v19 - 19) <= 0xFFFFFFED)
    {
      sub_19E3AF8D4((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      unsigned int v20 = sub_19E3AF8EC(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19E3AFA28((uint64_t)&v27, (const char **)&v20->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v28);
    }
    if (dword_19E572D20[v19] != 1)
    {
      sub_19E3AF8D4((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 348);
      unsigned int v21 = sub_19E3AF8EC(v28, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_INT32): ");
      sub_19E3AFA28((uint64_t)&v27, (const char **)&v21->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v28);
    }
    if (*((unsigned __int8 *)v12 + 11) != a4)
    {
      sub_19E3AF8D4((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 348);
      int v22 = sub_19E3AF8EC(v28, "CHECK failed: (extension->is_packed) == (packed): ");
      sub_19E3AFA28((uint64_t)&v27, (const char **)&v22->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v28);
    }
  }
  std::string v23 = (int *)*v12;
  uint64_t v24 = *v23;
  if (v24 == v23[1])
  {
    int v25 = v24 + 1;
    sub_19E3BFC34(v23, v24 + 1);
    uint64_t result = sub_19E3C00D4((uint64_t)v23);
    *(_DWORD *)(result + 4 * v24) = a5;
  }
  else
  {
    uint64_t result = sub_19E3C00D4((uint64_t)v23);
    *(_DWORD *)(result + 4 * v24) = a5;
    int v25 = v24 + 1;
  }
  *std::string v23 = v25;
  return result;
}

void sub_19E3B0710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E3B0750(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = (uint64_t)sub_19E3B5160(a1, a2);
  uint64_t v9 = result;
  *(void *)(result + 16) = a5;
  if (v10)
  {
    *(unsigned char *)(result + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_19E3AF8D4((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      std::string::size_type v11 = sub_19E3AF8EC(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19E3AFA28((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
      uint64_t result = sub_19E3AFA30((uint64_t)v18);
    }
    if (dword_19E572D20[a3] != 2)
    {
      sub_19E3AF8D4((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 349);
      unint64_t v12 = sub_19E3AF8EC(v18, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_INT64): ");
      sub_19E3AFA28((uint64_t)&v17, (const char **)&v12->__r_.__value_.__l.__data_);
      uint64_t result = sub_19E3AFA30((uint64_t)v18);
    }
    *(unsigned char *)(v9 + 9) = 0;
  }
  else
  {
    if (*(unsigned char *)(result + 9))
    {
      sub_19E3AF8D4((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 349);
      char v13 = sub_19E3AF8EC(v18, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      sub_19E3AFA28((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
      uint64_t result = sub_19E3AFA30((uint64_t)v18);
    }
    uint64_t v14 = *(unsigned __int8 *)(v9 + 8);
    if ((v14 - 19) <= 0xFFFFFFED)
    {
      sub_19E3AF8D4((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      std::string::size_type v15 = sub_19E3AF8EC(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19E3AFA28((uint64_t)&v17, (const char **)&v15->__r_.__value_.__l.__data_);
      uint64_t result = sub_19E3AFA30((uint64_t)v18);
    }
    if (dword_19E572D20[v14] != 2)
    {
      sub_19E3AF8D4((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 349);
      uint64_t v16 = sub_19E3AF8EC(v18, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_INT64): ");
      sub_19E3AFA28((uint64_t)&v17, (const char **)&v16->__r_.__value_.__l.__data_);
      uint64_t result = sub_19E3AFA30((uint64_t)v18);
    }
  }
  *(unsigned char *)(v9 + 10) &= 0xF0u;
  *(void *)uint64_t v9 = a4;
  return result;
}

void sub_19E3B0930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E3B0968(uint64_t *a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t *a6)
{
  std::string::size_type v11 = sub_19E3B5160((uint64_t)a1, a2);
  unint64_t v12 = v11;
  std::string v11[2] = a6;
  if (v13)
  {
    *((unsigned char *)v11 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_19E3AF8D4((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      uint64_t v14 = sub_19E3AF8EC(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19E3AFA28((uint64_t)&v27, (const char **)&v14->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v28);
    }
    if (dword_19E572D20[a3] != 2)
    {
      sub_19E3AF8D4((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 349);
      std::string::size_type v15 = sub_19E3AF8EC(v28, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_INT64): ");
      sub_19E3AFA28((uint64_t)&v27, (const char **)&v15->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v28);
    }
    *((unsigned char *)v12 + 9) = 1;
    *((unsigned char *)v12 + 11) = a4;
    uint64_t v16 = *a1;
    if (!*a1) {
      operator new();
    }
    if (*(unsigned char *)(v16 + 24)) {
      (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v16 + 32) + 32) + 40))(*(void *)(*(void *)(v16 + 32) + 32), &unk_1EF0B7610, 16);
    }
    char v17 = (uint64_t *)sub_19E3ADF44((void *)v16, 0x10uLL, (uint64_t)sub_19E3BA280);
    uint64_t *v17 = 0;
    v17[1] = v16;
    std::string *v12 = v17;
  }
  else
  {
    if (!*((unsigned char *)v11 + 9))
    {
      sub_19E3AF8D4((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 349);
      std::string::size_type v18 = sub_19E3AF8EC(v28, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      sub_19E3AFA28((uint64_t)&v27, (const char **)&v18->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v28);
    }
    uint64_t v19 = *((unsigned __int8 *)v12 + 8);
    if ((v19 - 19) <= 0xFFFFFFED)
    {
      sub_19E3AF8D4((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      unsigned int v20 = sub_19E3AF8EC(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19E3AFA28((uint64_t)&v27, (const char **)&v20->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v28);
    }
    if (dword_19E572D20[v19] != 2)
    {
      sub_19E3AF8D4((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 349);
      unsigned int v21 = sub_19E3AF8EC(v28, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_INT64): ");
      sub_19E3AFA28((uint64_t)&v27, (const char **)&v21->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v28);
    }
    if (*((unsigned __int8 *)v12 + 11) != a4)
    {
      sub_19E3AF8D4((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 349);
      int v22 = sub_19E3AF8EC(v28, "CHECK failed: (extension->is_packed) == (packed): ");
      sub_19E3AFA28((uint64_t)&v27, (const char **)&v22->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v28);
    }
  }
  std::string v23 = (int *)*v12;
  uint64_t v24 = *v23;
  if (v24 == v23[1])
  {
    int v25 = v24 + 1;
    sub_19E3C08EC(v23, v24 + 1);
    uint64_t result = sub_19E3C0D8C((uint64_t)v23);
    *(void *)(result + 8 * v24) = a5;
  }
  else
  {
    uint64_t result = sub_19E3C0D8C((uint64_t)v23);
    *(void *)(result + 8 * v24) = a5;
    int v25 = v24 + 1;
  }
  *std::string v23 = v25;
  return result;
}

void sub_19E3B0C6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E3B0CAC(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  uint64_t result = (uint64_t)sub_19E3B5160(a1, a2);
  uint64_t v9 = result;
  *(void *)(result + 16) = a5;
  if (v10)
  {
    *(unsigned char *)(result + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_19E3AF8D4((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      std::string::size_type v11 = sub_19E3AF8EC(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19E3AFA28((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
      uint64_t result = sub_19E3AFA30((uint64_t)v18);
    }
    if (dword_19E572D20[a3] != 3)
    {
      sub_19E3AF8D4((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 350);
      unint64_t v12 = sub_19E3AF8EC(v18, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_UINT32): ");
      sub_19E3AFA28((uint64_t)&v17, (const char **)&v12->__r_.__value_.__l.__data_);
      uint64_t result = sub_19E3AFA30((uint64_t)v18);
    }
    *(unsigned char *)(v9 + 9) = 0;
  }
  else
  {
    if (*(unsigned char *)(result + 9))
    {
      sub_19E3AF8D4((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 350);
      char v13 = sub_19E3AF8EC(v18, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      sub_19E3AFA28((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
      uint64_t result = sub_19E3AFA30((uint64_t)v18);
    }
    uint64_t v14 = *(unsigned __int8 *)(v9 + 8);
    if ((v14 - 19) <= 0xFFFFFFED)
    {
      sub_19E3AF8D4((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      std::string::size_type v15 = sub_19E3AF8EC(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19E3AFA28((uint64_t)&v17, (const char **)&v15->__r_.__value_.__l.__data_);
      uint64_t result = sub_19E3AFA30((uint64_t)v18);
    }
    if (dword_19E572D20[v14] != 3)
    {
      sub_19E3AF8D4((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 350);
      uint64_t v16 = sub_19E3AF8EC(v18, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_UINT32): ");
      sub_19E3AFA28((uint64_t)&v17, (const char **)&v16->__r_.__value_.__l.__data_);
      uint64_t result = sub_19E3AFA30((uint64_t)v18);
    }
  }
  *(unsigned char *)(v9 + 10) &= 0xF0u;
  *(_DWORD *)uint64_t v9 = a4;
  return result;
}

void sub_19E3B0E8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E3B0EC4(uint64_t *a1, uint64_t a2, int a3, int a4, int a5, uint64_t *a6)
{
  std::string::size_type v11 = sub_19E3B5160((uint64_t)a1, a2);
  unint64_t v12 = v11;
  std::string v11[2] = a6;
  if (v13)
  {
    *((unsigned char *)v11 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_19E3AF8D4((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      uint64_t v14 = sub_19E3AF8EC(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19E3AFA28((uint64_t)&v27, (const char **)&v14->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v28);
    }
    if (dword_19E572D20[a3] != 3)
    {
      sub_19E3AF8D4((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 350);
      std::string::size_type v15 = sub_19E3AF8EC(v28, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_UINT32): ");
      sub_19E3AFA28((uint64_t)&v27, (const char **)&v15->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v28);
    }
    *((unsigned char *)v12 + 9) = 1;
    *((unsigned char *)v12 + 11) = a4;
    uint64_t v16 = *a1;
    if (!*a1) {
      operator new();
    }
    if (*(unsigned char *)(v16 + 24)) {
      (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v16 + 32) + 32) + 40))(*(void *)(*(void *)(v16 + 32) + 32), &unk_1EF0B7600, 16);
    }
    char v17 = (uint64_t *)sub_19E3ADF44((void *)v16, 0x10uLL, (uint64_t)sub_19E3BA284);
    uint64_t *v17 = 0;
    v17[1] = v16;
    std::string *v12 = v17;
  }
  else
  {
    if (!*((unsigned char *)v11 + 9))
    {
      sub_19E3AF8D4((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 350);
      std::string::size_type v18 = sub_19E3AF8EC(v28, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      sub_19E3AFA28((uint64_t)&v27, (const char **)&v18->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v28);
    }
    uint64_t v19 = *((unsigned __int8 *)v12 + 8);
    if ((v19 - 19) <= 0xFFFFFFED)
    {
      sub_19E3AF8D4((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      unsigned int v20 = sub_19E3AF8EC(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19E3AFA28((uint64_t)&v27, (const char **)&v20->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v28);
    }
    if (dword_19E572D20[v19] != 3)
    {
      sub_19E3AF8D4((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 350);
      unsigned int v21 = sub_19E3AF8EC(v28, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_UINT32): ");
      sub_19E3AFA28((uint64_t)&v27, (const char **)&v21->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v28);
    }
    if (*((unsigned __int8 *)v12 + 11) != a4)
    {
      sub_19E3AF8D4((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 350);
      int v22 = sub_19E3AF8EC(v28, "CHECK failed: (extension->is_packed) == (packed): ");
      sub_19E3AFA28((uint64_t)&v27, (const char **)&v22->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v28);
    }
  }
  std::string v23 = (int *)*v12;
  uint64_t v24 = *v23;
  if (v24 == v23[1])
  {
    int v25 = v24 + 1;
    sub_19E3C0290(v23, v24 + 1);
    uint64_t result = sub_19E3C0730((uint64_t)v23);
    *(_DWORD *)(result + 4 * v24) = a5;
  }
  else
  {
    uint64_t result = sub_19E3C0730((uint64_t)v23);
    *(_DWORD *)(result + 4 * v24) = a5;
    int v25 = v24 + 1;
  }
  *std::string v23 = v25;
  return result;
}

void sub_19E3B11C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E3B1208(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = (uint64_t)sub_19E3B5160(a1, a2);
  uint64_t v9 = result;
  *(void *)(result + 16) = a5;
  if (v10)
  {
    *(unsigned char *)(result + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_19E3AF8D4((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      std::string::size_type v11 = sub_19E3AF8EC(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19E3AFA28((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
      uint64_t result = sub_19E3AFA30((uint64_t)v18);
    }
    if (dword_19E572D20[a3] != 4)
    {
      sub_19E3AF8D4((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 351);
      unint64_t v12 = sub_19E3AF8EC(v18, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_UINT64): ");
      sub_19E3AFA28((uint64_t)&v17, (const char **)&v12->__r_.__value_.__l.__data_);
      uint64_t result = sub_19E3AFA30((uint64_t)v18);
    }
    *(unsigned char *)(v9 + 9) = 0;
  }
  else
  {
    if (*(unsigned char *)(result + 9))
    {
      sub_19E3AF8D4((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 351);
      char v13 = sub_19E3AF8EC(v18, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      sub_19E3AFA28((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
      uint64_t result = sub_19E3AFA30((uint64_t)v18);
    }
    uint64_t v14 = *(unsigned __int8 *)(v9 + 8);
    if ((v14 - 19) <= 0xFFFFFFED)
    {
      sub_19E3AF8D4((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      std::string::size_type v15 = sub_19E3AF8EC(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19E3AFA28((uint64_t)&v17, (const char **)&v15->__r_.__value_.__l.__data_);
      uint64_t result = sub_19E3AFA30((uint64_t)v18);
    }
    if (dword_19E572D20[v14] != 4)
    {
      sub_19E3AF8D4((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 351);
      uint64_t v16 = sub_19E3AF8EC(v18, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_UINT64): ");
      sub_19E3AFA28((uint64_t)&v17, (const char **)&v16->__r_.__value_.__l.__data_);
      uint64_t result = sub_19E3AFA30((uint64_t)v18);
    }
  }
  *(unsigned char *)(v9 + 10) &= 0xF0u;
  *(void *)uint64_t v9 = a4;
  return result;
}

void sub_19E3B13E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E3B1420(uint64_t *a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t *a6)
{
  std::string::size_type v11 = sub_19E3B5160((uint64_t)a1, a2);
  unint64_t v12 = v11;
  std::string v11[2] = a6;
  if (v13)
  {
    *((unsigned char *)v11 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_19E3AF8D4((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      uint64_t v14 = sub_19E3AF8EC(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19E3AFA28((uint64_t)&v27, (const char **)&v14->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v28);
    }
    if (dword_19E572D20[a3] != 4)
    {
      sub_19E3AF8D4((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 351);
      std::string::size_type v15 = sub_19E3AF8EC(v28, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_UINT64): ");
      sub_19E3AFA28((uint64_t)&v27, (const char **)&v15->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v28);
    }
    *((unsigned char *)v12 + 9) = 1;
    *((unsigned char *)v12 + 11) = a4;
    uint64_t v16 = *a1;
    if (!*a1) {
      operator new();
    }
    if (*(unsigned char *)(v16 + 24)) {
      (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v16 + 32) + 32) + 40))(*(void *)(*(void *)(v16 + 32) + 32), &unk_1EF0B7620, 16);
    }
    char v17 = (uint64_t *)sub_19E3ADF44((void *)v16, 0x10uLL, (uint64_t)sub_19E3BA288);
    uint64_t *v17 = 0;
    v17[1] = v16;
    std::string *v12 = v17;
  }
  else
  {
    if (!*((unsigned char *)v11 + 9))
    {
      sub_19E3AF8D4((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 351);
      std::string::size_type v18 = sub_19E3AF8EC(v28, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      sub_19E3AFA28((uint64_t)&v27, (const char **)&v18->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v28);
    }
    uint64_t v19 = *((unsigned __int8 *)v12 + 8);
    if ((v19 - 19) <= 0xFFFFFFED)
    {
      sub_19E3AF8D4((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      unsigned int v20 = sub_19E3AF8EC(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19E3AFA28((uint64_t)&v27, (const char **)&v20->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v28);
    }
    if (dword_19E572D20[v19] != 4)
    {
      sub_19E3AF8D4((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 351);
      unsigned int v21 = sub_19E3AF8EC(v28, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_UINT64): ");
      sub_19E3AFA28((uint64_t)&v27, (const char **)&v21->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v28);
    }
    if (*((unsigned __int8 *)v12 + 11) != a4)
    {
      sub_19E3AF8D4((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 351);
      int v22 = sub_19E3AF8EC(v28, "CHECK failed: (extension->is_packed) == (packed): ");
      sub_19E3AFA28((uint64_t)&v27, (const char **)&v22->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v28);
    }
  }
  std::string v23 = (int *)*v12;
  uint64_t v24 = *v23;
  if (v24 == v23[1])
  {
    int v25 = v24 + 1;
    sub_19E3C0F48(v23, v24 + 1);
    uint64_t result = sub_19E3C13E8((uint64_t)v23);
    *(void *)(result + 8 * v24) = a5;
  }
  else
  {
    uint64_t result = sub_19E3C13E8((uint64_t)v23);
    *(void *)(result + 8 * v24) = a5;
    int v25 = v24 + 1;
  }
  *std::string v23 = v25;
  return result;
}

void sub_19E3B1724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E3B1764(uint64_t a1, uint64_t a2, int a3, uint64_t a4, float a5)
{
  uint64_t result = (uint64_t)sub_19E3B5160(a1, a2);
  uint64_t v9 = result;
  *(void *)(result + 16) = a4;
  if (v10)
  {
    *(unsigned char *)(result + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_19E3AF8D4((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      std::string::size_type v11 = sub_19E3AF8EC(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19E3AFA28((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
      uint64_t result = sub_19E3AFA30((uint64_t)v18);
    }
    if (dword_19E572D20[a3] != 6)
    {
      sub_19E3AF8D4((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 352);
      unint64_t v12 = sub_19E3AF8EC(v18, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_FLOAT): ");
      sub_19E3AFA28((uint64_t)&v17, (const char **)&v12->__r_.__value_.__l.__data_);
      uint64_t result = sub_19E3AFA30((uint64_t)v18);
    }
    *(unsigned char *)(v9 + 9) = 0;
  }
  else
  {
    if (*(unsigned char *)(result + 9))
    {
      sub_19E3AF8D4((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 352);
      char v13 = sub_19E3AF8EC(v18, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      sub_19E3AFA28((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
      uint64_t result = sub_19E3AFA30((uint64_t)v18);
    }
    uint64_t v14 = *(unsigned __int8 *)(v9 + 8);
    if ((v14 - 19) <= 0xFFFFFFED)
    {
      sub_19E3AF8D4((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      std::string::size_type v15 = sub_19E3AF8EC(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19E3AFA28((uint64_t)&v17, (const char **)&v15->__r_.__value_.__l.__data_);
      uint64_t result = sub_19E3AFA30((uint64_t)v18);
    }
    if (dword_19E572D20[v14] != 6)
    {
      sub_19E3AF8D4((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 352);
      uint64_t v16 = sub_19E3AF8EC(v18, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_FLOAT): ");
      sub_19E3AFA28((uint64_t)&v17, (const char **)&v16->__r_.__value_.__l.__data_);
      uint64_t result = sub_19E3AFA30((uint64_t)v18);
    }
  }
  *(unsigned char *)(v9 + 10) &= 0xF0u;
  *(float *)uint64_t v9 = a5;
  return result;
}

void sub_19E3B194C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E3B1984(uint64_t *a1, uint64_t a2, int a3, int a4, uint64_t *a5, float a6)
{
  std::string::size_type v11 = sub_19E3B5160((uint64_t)a1, a2);
  unint64_t v12 = v11;
  std::string v11[2] = a5;
  if (v13)
  {
    *((unsigned char *)v11 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_19E3AF8D4((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      uint64_t v14 = sub_19E3AF8EC(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19E3AFA28((uint64_t)&v27, (const char **)&v14->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v28);
    }
    if (dword_19E572D20[a3] != 6)
    {
      sub_19E3AF8D4((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 352);
      std::string::size_type v15 = sub_19E3AF8EC(v28, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_FLOAT): ");
      sub_19E3AFA28((uint64_t)&v27, (const char **)&v15->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v28);
    }
    *((unsigned char *)v12 + 9) = 1;
    *((unsigned char *)v12 + 11) = a4;
    uint64_t v16 = *a1;
    if (!*a1) {
      operator new();
    }
    if (*(unsigned char *)(v16 + 24)) {
      (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v16 + 32) + 32) + 40))(*(void *)(*(void *)(v16 + 32) + 32), &unk_1EF0B75E0, 16);
    }
    char v17 = (uint64_t *)sub_19E3ADF44((void *)v16, 0x10uLL, (uint64_t)sub_19E3BA28C);
    uint64_t *v17 = 0;
    v17[1] = v16;
    std::string *v12 = v17;
  }
  else
  {
    if (!*((unsigned char *)v11 + 9))
    {
      sub_19E3AF8D4((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 352);
      std::string::size_type v18 = sub_19E3AF8EC(v28, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      sub_19E3AFA28((uint64_t)&v27, (const char **)&v18->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v28);
    }
    uint64_t v19 = *((unsigned __int8 *)v12 + 8);
    if ((v19 - 19) <= 0xFFFFFFED)
    {
      sub_19E3AF8D4((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      unsigned int v20 = sub_19E3AF8EC(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19E3AFA28((uint64_t)&v27, (const char **)&v20->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v28);
    }
    if (dword_19E572D20[v19] != 6)
    {
      sub_19E3AF8D4((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 352);
      unsigned int v21 = sub_19E3AF8EC(v28, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_FLOAT): ");
      sub_19E3AFA28((uint64_t)&v27, (const char **)&v21->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v28);
    }
    if (*((unsigned __int8 *)v12 + 11) != a4)
    {
      sub_19E3AF8D4((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 352);
      int v22 = sub_19E3AF8EC(v28, "CHECK failed: (extension->is_packed) == (packed): ");
      sub_19E3AFA28((uint64_t)&v27, (const char **)&v22->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v28);
    }
  }
  std::string v23 = (int *)*v12;
  uint64_t v24 = *v23;
  if (v24 == v23[1])
  {
    int v25 = v24 + 1;
    sub_19E3C15A4(v23, v24 + 1);
    uint64_t result = sub_19E3C1A44((uint64_t)v23);
    *(float *)(result + 4 * v24) = a6;
  }
  else
  {
    uint64_t result = sub_19E3C1A44((uint64_t)v23);
    *(float *)(result + 4 * v24) = a6;
    int v25 = v24 + 1;
  }
  *std::string v23 = v25;
  return result;
}

void sub_19E3B1C90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E3B1CD0(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5)
{
  uint64_t result = (uint64_t)sub_19E3B5160(a1, a2);
  uint64_t v9 = result;
  *(void *)(result + 16) = a4;
  if (v10)
  {
    *(unsigned char *)(result + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_19E3AF8D4((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      std::string::size_type v11 = sub_19E3AF8EC(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19E3AFA28((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
      uint64_t result = sub_19E3AFA30((uint64_t)v18);
    }
    if (dword_19E572D20[a3] != 5)
    {
      sub_19E3AF8D4((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 353);
      unint64_t v12 = sub_19E3AF8EC(v18, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_DOUBLE): ");
      sub_19E3AFA28((uint64_t)&v17, (const char **)&v12->__r_.__value_.__l.__data_);
      uint64_t result = sub_19E3AFA30((uint64_t)v18);
    }
    *(unsigned char *)(v9 + 9) = 0;
  }
  else
  {
    if (*(unsigned char *)(result + 9))
    {
      sub_19E3AF8D4((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 353);
      char v13 = sub_19E3AF8EC(v18, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      sub_19E3AFA28((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
      uint64_t result = sub_19E3AFA30((uint64_t)v18);
    }
    uint64_t v14 = *(unsigned __int8 *)(v9 + 8);
    if ((v14 - 19) <= 0xFFFFFFED)
    {
      sub_19E3AF8D4((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      std::string::size_type v15 = sub_19E3AF8EC(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19E3AFA28((uint64_t)&v17, (const char **)&v15->__r_.__value_.__l.__data_);
      uint64_t result = sub_19E3AFA30((uint64_t)v18);
    }
    if (dword_19E572D20[v14] != 5)
    {
      sub_19E3AF8D4((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 353);
      uint64_t v16 = sub_19E3AF8EC(v18, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_DOUBLE): ");
      sub_19E3AFA28((uint64_t)&v17, (const char **)&v16->__r_.__value_.__l.__data_);
      uint64_t result = sub_19E3AFA30((uint64_t)v18);
    }
  }
  *(unsigned char *)(v9 + 10) &= 0xF0u;
  *(double *)uint64_t v9 = a5;
  return result;
}

void sub_19E3B1EB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E3B1EF0(uint64_t *a1, uint64_t a2, int a3, int a4, uint64_t *a5, double a6)
{
  std::string::size_type v11 = sub_19E3B5160((uint64_t)a1, a2);
  unint64_t v12 = v11;
  std::string v11[2] = a5;
  if (v13)
  {
    *((unsigned char *)v11 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_19E3AF8D4((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      uint64_t v14 = sub_19E3AF8EC(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19E3AFA28((uint64_t)&v27, (const char **)&v14->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v28);
    }
    if (dword_19E572D20[a3] != 5)
    {
      sub_19E3AF8D4((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 353);
      std::string::size_type v15 = sub_19E3AF8EC(v28, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_DOUBLE): ");
      sub_19E3AFA28((uint64_t)&v27, (const char **)&v15->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v28);
    }
    *((unsigned char *)v12 + 9) = 1;
    *((unsigned char *)v12 + 11) = a4;
    uint64_t v16 = *a1;
    if (!*a1) {
      operator new();
    }
    if (*(unsigned char *)(v16 + 24)) {
      (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v16 + 32) + 32) + 40))(*(void *)(*(void *)(v16 + 32) + 32), &unk_1EF0B75D0, 16);
    }
    char v17 = (uint64_t *)sub_19E3ADF44((void *)v16, 0x10uLL, (uint64_t)sub_19E3BA290);
    uint64_t *v17 = 0;
    v17[1] = v16;
    std::string *v12 = v17;
  }
  else
  {
    if (!*((unsigned char *)v11 + 9))
    {
      sub_19E3AF8D4((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 353);
      std::string::size_type v18 = sub_19E3AF8EC(v28, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      sub_19E3AFA28((uint64_t)&v27, (const char **)&v18->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v28);
    }
    uint64_t v19 = *((unsigned __int8 *)v12 + 8);
    if ((v19 - 19) <= 0xFFFFFFED)
    {
      sub_19E3AF8D4((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      unsigned int v20 = sub_19E3AF8EC(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19E3AFA28((uint64_t)&v27, (const char **)&v20->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v28);
    }
    if (dword_19E572D20[v19] != 5)
    {
      sub_19E3AF8D4((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 353);
      unsigned int v21 = sub_19E3AF8EC(v28, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_DOUBLE): ");
      sub_19E3AFA28((uint64_t)&v27, (const char **)&v21->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v28);
    }
    if (*((unsigned __int8 *)v12 + 11) != a4)
    {
      sub_19E3AF8D4((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 353);
      int v22 = sub_19E3AF8EC(v28, "CHECK failed: (extension->is_packed) == (packed): ");
      sub_19E3AFA28((uint64_t)&v27, (const char **)&v22->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v28);
    }
  }
  std::string v23 = (int *)*v12;
  uint64_t v24 = *v23;
  if (v24 == v23[1])
  {
    int v25 = v24 + 1;
    sub_19E3C1C00(v23, v24 + 1);
    uint64_t result = sub_19E3C20A0((uint64_t)v23);
    *(double *)(result + 8 * v24) = a6;
  }
  else
  {
    uint64_t result = sub_19E3C20A0((uint64_t)v23);
    *(double *)(result + 8 * v24) = a6;
    int v25 = v24 + 1;
  }
  *std::string v23 = v25;
  return result;
}

void sub_19E3B21FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E3B223C(uint64_t a1, uint64_t a2, int a3, char a4, uint64_t a5)
{
  uint64_t result = (uint64_t)sub_19E3B5160(a1, a2);
  uint64_t v9 = (unsigned char *)result;
  *(void *)(result + 16) = a5;
  if (v10)
  {
    *(unsigned char *)(result + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_19E3AF8D4((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      std::string::size_type v11 = sub_19E3AF8EC(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19E3AFA28((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
      uint64_t result = sub_19E3AFA30((uint64_t)v18);
    }
    if (dword_19E572D20[a3] != 7)
    {
      sub_19E3AF8D4((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 354);
      unint64_t v12 = sub_19E3AF8EC(v18, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_BOOL): ");
      sub_19E3AFA28((uint64_t)&v17, (const char **)&v12->__r_.__value_.__l.__data_);
      uint64_t result = sub_19E3AFA30((uint64_t)v18);
    }
    v9[9] = 0;
  }
  else
  {
    if (*(unsigned char *)(result + 9))
    {
      sub_19E3AF8D4((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 354);
      char v13 = sub_19E3AF8EC(v18, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      sub_19E3AFA28((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
      uint64_t result = sub_19E3AFA30((uint64_t)v18);
    }
    uint64_t v14 = v9[8];
    if ((v14 - 19) <= 0xFFFFFFED)
    {
      sub_19E3AF8D4((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      std::string::size_type v15 = sub_19E3AF8EC(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19E3AFA28((uint64_t)&v17, (const char **)&v15->__r_.__value_.__l.__data_);
      uint64_t result = sub_19E3AFA30((uint64_t)v18);
    }
    if (dword_19E572D20[v14] != 7)
    {
      sub_19E3AF8D4((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 354);
      uint64_t v16 = sub_19E3AF8EC(v18, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_BOOL): ");
      sub_19E3AFA28((uint64_t)&v17, (const char **)&v16->__r_.__value_.__l.__data_);
      uint64_t result = sub_19E3AFA30((uint64_t)v18);
    }
  }
  v9[10] &= 0xF0u;
  *uint64_t v9 = a4;
  return result;
}

void sub_19E3B241C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E3B2454(uint64_t *a1, uint64_t a2, int a3, int a4, char a5, uint64_t *a6)
{
  std::string::size_type v11 = sub_19E3B5160((uint64_t)a1, a2);
  unint64_t v12 = v11;
  std::string v11[2] = a6;
  if (v13)
  {
    *((unsigned char *)v11 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_19E3AF8D4((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      uint64_t v14 = sub_19E3AF8EC(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19E3AFA28((uint64_t)&v27, (const char **)&v14->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v28);
    }
    if (dword_19E572D20[a3] != 7)
    {
      sub_19E3AF8D4((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 354);
      std::string::size_type v15 = sub_19E3AF8EC(v28, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_BOOL): ");
      sub_19E3AFA28((uint64_t)&v27, (const char **)&v15->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v28);
    }
    *((unsigned char *)v12 + 9) = 1;
    *((unsigned char *)v12 + 11) = a4;
    uint64_t v16 = *a1;
    if (!*a1) {
      operator new();
    }
    if (*(unsigned char *)(v16 + 24)) {
      (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v16 + 32) + 32) + 40))(*(void *)(*(void *)(v16 + 32) + 32), &unk_1EF0B75C0, 16);
    }
    char v17 = (uint64_t *)sub_19E3ADF44((void *)v16, 0x10uLL, (uint64_t)sub_19E3BA294);
    uint64_t *v17 = 0;
    v17[1] = v16;
    std::string *v12 = v17;
  }
  else
  {
    if (!*((unsigned char *)v11 + 9))
    {
      sub_19E3AF8D4((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 354);
      std::string::size_type v18 = sub_19E3AF8EC(v28, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      sub_19E3AFA28((uint64_t)&v27, (const char **)&v18->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v28);
    }
    uint64_t v19 = *((unsigned __int8 *)v12 + 8);
    if ((v19 - 19) <= 0xFFFFFFED)
    {
      sub_19E3AF8D4((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      unsigned int v20 = sub_19E3AF8EC(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19E3AFA28((uint64_t)&v27, (const char **)&v20->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v28);
    }
    if (dword_19E572D20[v19] != 7)
    {
      sub_19E3AF8D4((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 354);
      unsigned int v21 = sub_19E3AF8EC(v28, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_BOOL): ");
      sub_19E3AFA28((uint64_t)&v27, (const char **)&v21->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v28);
    }
    if (*((unsigned __int8 *)v12 + 11) != a4)
    {
      sub_19E3AF8D4((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 354);
      int v22 = sub_19E3AF8EC(v28, "CHECK failed: (extension->is_packed) == (packed): ");
      sub_19E3AFA28((uint64_t)&v27, (const char **)&v22->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v28);
    }
  }
  std::string v23 = (int *)*v12;
  uint64_t v24 = *v23;
  if (v24 == v23[1])
  {
    int v25 = v24 + 1;
    sub_19E3BF5E0(v23, v24 + 1);
    uint64_t result = sub_19E3BFA7C((uint64_t)v23);
    *(unsigned char *)(result + v24) = a5;
  }
  else
  {
    uint64_t result = sub_19E3BFA7C((uint64_t)v23);
    *(unsigned char *)(result + v24) = a5;
    int v25 = v24 + 1;
  }
  *std::string v23 = v25;
  return result;
}

void sub_19E3B2758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_19E3B2798(uint64_t *a1, uint64_t a2, int a3, char a4, uint64_t *a5)
{
  uint64_t v9 = sub_19E3B5160((uint64_t)a1, a2);
  char v10 = v9;
  std::string v9[2] = a5;
  if (v11)
  {
    *((unsigned char *)v9 + 9) = 1;
    *((unsigned char *)v9 + 8) = a3;
    *((unsigned char *)v9 + 11) = a4;
    switch(a3)
    {
      case 1:
        uint64_t v12 = *a1;
        if (!v12) {
          goto LABEL_32;
        }
        if (*(unsigned char *)(v12 + 24)) {
          (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v12 + 32) + 32) + 40))(*(void *)(*(void *)(v12 + 32) + 32), &unk_1EF0B75D0, 16);
        }
        char v13 = sub_19E3BA290;
        goto LABEL_31;
      case 2:
        uint64_t v12 = *a1;
        if (!v12) {
          goto LABEL_32;
        }
        if (*(unsigned char *)(v12 + 24)) {
          (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v12 + 32) + 32) + 40))(*(void *)(*(void *)(v12 + 32) + 32), &unk_1EF0B75E0, 16);
        }
        char v13 = sub_19E3BA28C;
        goto LABEL_31;
      case 3:
      case 16:
      case 18:
        uint64_t v12 = *a1;
        if (!v12) {
          goto LABEL_32;
        }
        if (*(unsigned char *)(v12 + 24)) {
          (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v12 + 32) + 32) + 40))(*(void *)(*(void *)(v12 + 32) + 32), &unk_1EF0B7610, 16);
        }
        char v13 = sub_19E3BA280;
        goto LABEL_31;
      case 4:
      case 6:
        uint64_t v12 = *a1;
        if (!v12) {
          goto LABEL_32;
        }
        if (*(unsigned char *)(v12 + 24)) {
          (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v12 + 32) + 32) + 40))(*(void *)(*(void *)(v12 + 32) + 32), &unk_1EF0B7620, 16);
        }
        char v13 = sub_19E3BA288;
        goto LABEL_31;
      case 5:
      case 14:
      case 15:
      case 17:
        uint64_t v12 = *a1;
        if (!v12) {
          goto LABEL_32;
        }
        if (*(unsigned char *)(v12 + 24)) {
          (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v12 + 32) + 32) + 40))(*(void *)(*(void *)(v12 + 32) + 32), &unk_1EF0B75F0, 16);
        }
        char v13 = sub_19E3BA27C;
        goto LABEL_31;
      case 7:
      case 13:
        uint64_t v12 = *a1;
        if (!v12) {
          goto LABEL_32;
        }
        if (*(unsigned char *)(v12 + 24)) {
          (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v12 + 32) + 32) + 40))(*(void *)(*(void *)(v12 + 32) + 32), &unk_1EF0B7600, 16);
        }
        char v13 = sub_19E3BA284;
        goto LABEL_31;
      case 8:
        uint64_t v12 = *a1;
        if (!v12) {
LABEL_32:
        }
          operator new();
        if (*(unsigned char *)(v12 + 24)) {
          (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v12 + 32) + 32) + 40))(*(void *)(*(void *)(v12 + 32) + 32), &unk_1EF0B75C0, 16);
        }
        char v13 = sub_19E3BA294;
LABEL_31:
        uint64_t v14 = (uint64_t *)sub_19E3ADF44((void *)v12, 0x10uLL, (uint64_t)v13);
        *uint64_t v14 = 0;
        v14[1] = v12;
        goto LABEL_43;
      case 9:
      case 12:
        uint64_t v15 = *a1;
        if (!v15) {
          goto LABEL_42;
        }
        if (*(unsigned char *)(v15 + 24)) {
          (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v15 + 32) + 32) + 40))(*(void *)(*(void *)(v15 + 32) + 32), &unk_1EF0B7670, 24);
        }
        uint64_t v16 = (uint64_t *(*)(uint64_t *))sub_19E3BA298;
        goto LABEL_41;
      case 10:
      case 11:
        uint64_t v15 = *a1;
        if (!v15) {
LABEL_42:
        }
          operator new();
        if (*(unsigned char *)(v15 + 24)) {
          (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v15 + 32) + 32) + 40))(*(void *)(*(void *)(v15 + 32) + 32), &unk_1EF0B7648, 24);
        }
        uint64_t v16 = sub_19E3BA29C;
LABEL_41:
        uint64_t v14 = (uint64_t *)sub_19E3ADF44((void *)v15, 0x18uLL, (uint64_t)v16);
        std::string v14[2] = 0;
        *uint64_t v14 = v15;
        v14[1] = 0;
LABEL_43:
        const std::string::value_type *v10 = v14;
        break;
      default:
        return *v10;
    }
  }
  return *v10;
}

uint64_t sub_19E3B2C0C(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  uint64_t result = (uint64_t)sub_19E3B5160(a1, a2);
  uint64_t v9 = result;
  *(void *)(result + 16) = a5;
  if (v10)
  {
    *(unsigned char *)(result + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_19E3AF8D4((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      char v11 = sub_19E3AF8EC(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19E3AFA28((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
      uint64_t result = sub_19E3AFA30((uint64_t)v18);
    }
    if (dword_19E572D20[a3] != 8)
    {
      sub_19E3AF8D4((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 460);
      uint64_t v12 = sub_19E3AF8EC(v18, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_ENUM): ");
      sub_19E3AFA28((uint64_t)&v17, (const char **)&v12->__r_.__value_.__l.__data_);
      uint64_t result = sub_19E3AFA30((uint64_t)v18);
    }
    *(unsigned char *)(v9 + 9) = 0;
  }
  else
  {
    if (*(unsigned char *)(result + 9))
    {
      sub_19E3AF8D4((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 463);
      char v13 = sub_19E3AF8EC(v18, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      sub_19E3AFA28((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
      uint64_t result = sub_19E3AFA30((uint64_t)v18);
    }
    uint64_t v14 = *(unsigned __int8 *)(v9 + 8);
    if ((v14 - 19) <= 0xFFFFFFED)
    {
      sub_19E3AF8D4((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      uint64_t v15 = sub_19E3AF8EC(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19E3AFA28((uint64_t)&v17, (const char **)&v15->__r_.__value_.__l.__data_);
      uint64_t result = sub_19E3AFA30((uint64_t)v18);
    }
    if (dword_19E572D20[v14] != 8)
    {
      sub_19E3AF8D4((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 463);
      uint64_t v16 = sub_19E3AF8EC(v18, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_ENUM): ");
      sub_19E3AFA28((uint64_t)&v17, (const char **)&v16->__r_.__value_.__l.__data_);
      uint64_t result = sub_19E3AFA30((uint64_t)v18);
    }
  }
  *(unsigned char *)(v9 + 10) &= 0xF0u;
  *(_DWORD *)uint64_t v9 = a4;
  return result;
}

void sub_19E3B2DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E3B2E24(uint64_t *a1, uint64_t a2, int a3, int a4, int a5, uint64_t *a6)
{
  char v11 = sub_19E3B5160((uint64_t)a1, a2);
  uint64_t v12 = v11;
  std::string v11[2] = a6;
  if (v13)
  {
    *((unsigned char *)v11 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_19E3AF8D4((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      uint64_t v14 = sub_19E3AF8EC(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19E3AFA28((uint64_t)&v27, (const char **)&v14->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v28);
    }
    if (dword_19E572D20[a3] != 8)
    {
      sub_19E3AF8D4((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 488);
      uint64_t v15 = sub_19E3AF8EC(v28, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_ENUM): ");
      sub_19E3AFA28((uint64_t)&v27, (const char **)&v15->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v28);
    }
    *((unsigned char *)v12 + 9) = 1;
    *((unsigned char *)v12 + 11) = a4;
    uint64_t v16 = *a1;
    if (!*a1) {
      operator new();
    }
    if (*(unsigned char *)(v16 + 24)) {
      (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v16 + 32) + 32) + 40))(*(void *)(*(void *)(v16 + 32) + 32), &unk_1EF0B75F0, 16);
    }
    char v17 = (uint64_t *)sub_19E3ADF44((void *)v16, 0x10uLL, (uint64_t)sub_19E3BA27C);
    uint64_t *v17 = 0;
    v17[1] = v16;
    std::string *v12 = v17;
  }
  else
  {
    if (!*((unsigned char *)v11 + 9))
    {
      sub_19E3AF8D4((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 494);
      std::string::size_type v18 = sub_19E3AF8EC(v28, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      sub_19E3AFA28((uint64_t)&v27, (const char **)&v18->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v28);
    }
    uint64_t v19 = *((unsigned __int8 *)v12 + 8);
    if ((v19 - 19) <= 0xFFFFFFED)
    {
      sub_19E3AF8D4((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      unsigned int v20 = sub_19E3AF8EC(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19E3AFA28((uint64_t)&v27, (const char **)&v20->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v28);
    }
    if (dword_19E572D20[v19] != 8)
    {
      sub_19E3AF8D4((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 494);
      unsigned int v21 = sub_19E3AF8EC(v28, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_ENUM): ");
      sub_19E3AFA28((uint64_t)&v27, (const char **)&v21->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v28);
    }
    if (*((unsigned __int8 *)v12 + 11) != a4)
    {
      sub_19E3AF8D4((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 495);
      int v22 = sub_19E3AF8EC(v28, "CHECK failed: (extension->is_packed) == (packed): ");
      sub_19E3AFA28((uint64_t)&v27, (const char **)&v22->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v28);
    }
  }
  std::string v23 = (int *)*v12;
  uint64_t v24 = *v23;
  if (v24 == v23[1])
  {
    int v25 = v24 + 1;
    sub_19E3BFC34(v23, v24 + 1);
    uint64_t result = sub_19E3C00D4((uint64_t)v23);
    *(_DWORD *)(result + 4 * v24) = a5;
  }
  else
  {
    uint64_t result = sub_19E3C00D4((uint64_t)v23);
    *(_DWORD *)(result + 4 * v24) = a5;
    int v25 = v24 + 1;
  }
  *std::string v23 = v25;
  return result;
}

void sub_19E3B3128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E3B3168(uint64_t *a1, uint64_t a2, int a3, uint64_t *a4)
{
  uint64_t v7 = sub_19E3B5160((uint64_t)a1, a2);
  uint64_t v8 = (unsigned __int8 *)v7;
  std::string v7[2] = a4;
  if (v9)
  {
    *((unsigned char *)v7 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_19E3AF8D4((uint64_t)v20, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      char v10 = sub_19E3AF8EC(v20, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19E3AFA28((uint64_t)&v19, (const char **)&v10->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v20);
    }
    if (dword_19E572D20[a3] != 9)
    {
      sub_19E3AF8D4((uint64_t)v20, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 520);
      char v11 = sub_19E3AF8EC(v20, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_STRING): ");
      sub_19E3AFA28((uint64_t)&v19, (const char **)&v11->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v20);
    }
    v8[9] = 0;
    uint64_t v12 = *a1;
    if (!v12) {
      operator new();
    }
    if (*(unsigned char *)(v12 + 24)) {
      (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v12 + 32) + 32) + 40))(*(void *)(*(void *)(v12 + 32) + 32), &unk_1EF0B7BE8, 24);
    }
    char v13 = (void *)sub_19E3ADF44((void *)v12, 0x18uLL, (uint64_t)sub_19E3A9AFC);
    *char v13 = 0;
    v13[1] = 0;
    std::string v13[2] = 0;
    *(void *)uint64_t v8 = v13;
  }
  else
  {
    if (*((unsigned char *)v7 + 9))
    {
      sub_19E3AF8D4((uint64_t)v20, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 524);
      uint64_t v14 = sub_19E3AF8EC(v20, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      sub_19E3AFA28((uint64_t)&v19, (const char **)&v14->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v20);
    }
    uint64_t v15 = v8[8];
    if ((v15 - 19) <= 0xFFFFFFED)
    {
      sub_19E3AF8D4((uint64_t)v20, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      uint64_t v16 = sub_19E3AF8EC(v20, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19E3AFA28((uint64_t)&v19, (const char **)&v16->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v20);
    }
    if (dword_19E572D20[v15] != 9)
    {
      sub_19E3AF8D4((uint64_t)v20, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 524);
      char v17 = sub_19E3AF8EC(v20, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_STRING): ");
      sub_19E3AFA28((uint64_t)&v19, (const char **)&v17->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v20);
    }
  }
  v8[10] &= 0xF0u;
  return *(void *)v8;
}

void sub_19E3B33D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_19E3B3410(uint64_t *a1, uint64_t a2, int a3, uint64_t *a4)
{
  uint64_t v7 = sub_19E3B5160((uint64_t)a1, a2);
  uint64_t v8 = v7;
  std::string v7[2] = a4;
  if (v9)
  {
    *((unsigned char *)v7 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_19E3AF8D4((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      char v10 = sub_19E3AF8EC(v27, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19E3AFA28((uint64_t)&v26, (const char **)&v10->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v27);
    }
    if (dword_19E572D20[a3] != 9)
    {
      sub_19E3AF8D4((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 550);
      char v11 = sub_19E3AF8EC(v27, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_STRING): ");
      sub_19E3AFA28((uint64_t)&v26, (const char **)&v11->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v27);
    }
    *((unsigned char *)v8 + 9) = 1;
    *((unsigned char *)v8 + 11) = 0;
    uint64_t v12 = *a1;
    if (!v12) {
      operator new();
    }
    if (*(unsigned char *)(v12 + 24)) {
      (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v12 + 32) + 32) + 40))(*(void *)(*(void *)(v12 + 32) + 32), &unk_1EF0B7670, 24);
    }
    char v13 = (uint64_t *)sub_19E3ADF44((void *)v12, 0x18uLL, (uint64_t)sub_19E3BA298);
    std::string v13[2] = 0;
    *char v13 = v12;
    v13[1] = 0;
    *uint64_t v8 = v13;
  }
  else
  {
    if (!*((unsigned char *)v7 + 9))
    {
      sub_19E3AF8D4((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 556);
      uint64_t v14 = sub_19E3AF8EC(v27, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      sub_19E3AFA28((uint64_t)&v26, (const char **)&v14->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v27);
    }
    uint64_t v15 = *((unsigned __int8 *)v8 + 8);
    if ((v15 - 19) <= 0xFFFFFFED)
    {
      sub_19E3AF8D4((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      uint64_t v16 = sub_19E3AF8EC(v27, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19E3AFA28((uint64_t)&v26, (const char **)&v16->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v27);
    }
    if (dword_19E572D20[v15] != 9)
    {
      sub_19E3AF8D4((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 556);
      char v17 = sub_19E3AF8EC(v27, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_STRING): ");
      sub_19E3AFA28((uint64_t)&v26, (const char **)&v17->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v27);
    }
  }
  uint64_t v18 = (uint64_t)*v8;
  char v19 = *(int **)(v18 + 16);
  if (!v19)
  {
    int v21 = *(_DWORD *)(v18 + 12);
LABEL_22:
    sub_19E3C232C(v18, v21 + 1);
    char v19 = *(int **)(v18 + 16);
    int v21 = *v19;
    goto LABEL_23;
  }
  uint64_t v20 = *(int *)(v18 + 8);
  int v21 = *v19;
  if ((int)v20 < *v19)
  {
    *(_DWORD *)(v18 + 8) = v20 + 1;
    return *(void **)&v19[2 * v20 + 2];
  }
  if (v21 == *(_DWORD *)(v18 + 12)) {
    goto LABEL_22;
  }
LABEL_23:
  *char v19 = v21 + 1;
  uint64_t v23 = *(void *)v18;
  if (!*(void *)v18) {
    operator new();
  }
  if (*(unsigned char *)(v23 + 24)) {
    (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v23 + 32) + 32) + 40))(*(void *)(*(void *)(v23 + 32) + 32), &unk_1EF0B7BE8, 24);
  }
  uint64_t result = (void *)sub_19E3ADF44((void *)v23, 0x18uLL, (uint64_t)sub_19E3A9AFC);
  *uint64_t result = 0;
  result[1] = 0;
  result[2] = 0;
  uint64_t v24 = *(void *)(v18 + 16);
  uint64_t v25 = *(int *)(v18 + 8);
  *(_DWORD *)(v18 + 8) = v25 + 1;
  *(void *)(v24 + 8 * v25 + 8) = result;
  return result;
}

void sub_19E3B3788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E3B37C0(void *a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  char v9 = sub_19E3B5160((uint64_t)a1, a2);
  char v10 = v9;
  std::string v9[2] = a5;
  if (v11)
  {
    *((unsigned char *)v9 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_19E3AF8D4((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      uint64_t v12 = sub_19E3AF8EC(v21, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19E3AFA28((uint64_t)&v20, (const char **)&v12->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v21);
    }
    if (dword_19E572D20[a3] != 10)
    {
      sub_19E3AF8D4((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 591);
      char v13 = sub_19E3AF8EC(v21, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_MESSAGE): ");
      sub_19E3AFA28((uint64_t)&v20, (const char **)&v13->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v21);
    }
    *((unsigned char *)v10 + 9) = 0;
    *((unsigned char *)v10 + 10) &= 0xFu;
    uint64_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)a4 + 32))(a4, *a1);
    std::string *v10 = (uint64_t *)result;
    *((unsigned char *)v10 + 10) &= 0xF0u;
  }
  else
  {
    if (*((unsigned char *)v9 + 9))
    {
      sub_19E3AF8D4((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 598);
      uint64_t v15 = sub_19E3AF8EC(v21, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      sub_19E3AFA28((uint64_t)&v20, (const char **)&v15->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v21);
    }
    uint64_t v16 = *((unsigned __int8 *)v10 + 8);
    if ((v16 - 19) <= 0xFFFFFFED)
    {
      sub_19E3AF8D4((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      char v17 = sub_19E3AF8EC(v21, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19E3AFA28((uint64_t)&v20, (const char **)&v17->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v21);
    }
    if (dword_19E572D20[v16] != 10)
    {
      sub_19E3AF8D4((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 598);
      uint64_t v18 = sub_19E3AF8EC(v21, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_MESSAGE): ");
      sub_19E3AFA28((uint64_t)&v20, (const char **)&v18->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v21);
    }
    char v19 = *((unsigned char *)v10 + 10);
    *((unsigned char *)v10 + 1sub_19E392864(&a9, 0) = v19 & 0xF0;
    uint64_t result = (uint64_t)*v10;
    if ((v19 & 0x10) != 0) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 32))(result, a4);
    }
  }
  return result;
}

void sub_19E3B3A20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E3B3A58(void *a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  char v9 = sub_19E3B5160((uint64_t)a1, a2);
  char v10 = (unsigned __int8 *)v9;
  std::string v9[2] = a5;
  if (v11)
  {
    *((unsigned char *)v9 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_19E3AF8D4((uint64_t)v26, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      uint64_t v12 = sub_19E3AF8EC(v26, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19E3AFA28((uint64_t)&v25, (const char **)&v12->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v26);
    }
    if (dword_19E572D20[a3] != 10)
    {
      sub_19E3AF8D4((uint64_t)v26, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 762);
      char v13 = sub_19E3AF8EC(v26, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_MESSAGE): ");
      sub_19E3AFA28((uint64_t)&v25, (const char **)&v13->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v26);
    }
    v10[9] = 1;
    uint64_t v14 = *a1;
    if (!*a1) {
      operator new();
    }
    if (*(unsigned char *)(v14 + 24)) {
      (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v14 + 32) + 32) + 40))(*(void *)(*(void *)(v14 + 32) + 32), &unk_1EF0B7648, 24);
    }
    uint64_t v15 = (void *)sub_19E3ADF44((void *)v14, 0x18uLL, (uint64_t)sub_19E3BA29C);
    std::string v15[2] = 0;
    *uint64_t v15 = v14;
    v15[1] = 0;
    *(void *)char v10 = v15;
  }
  else
  {
    if (!*((unsigned char *)v9 + 9))
    {
      sub_19E3AF8D4((uint64_t)v26, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 767);
      uint64_t v16 = sub_19E3AF8EC(v26, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      sub_19E3AFA28((uint64_t)&v25, (const char **)&v16->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v26);
    }
    uint64_t v17 = v10[8];
    if ((v17 - 19) <= 0xFFFFFFED)
    {
      sub_19E3AF8D4((uint64_t)v26, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      uint64_t v18 = sub_19E3AF8EC(v26, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19E3AFA28((uint64_t)&v25, (const char **)&v18->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v26);
    }
    if (dword_19E572D20[v17] != 10)
    {
      sub_19E3AF8D4((uint64_t)v26, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 767);
      char v19 = sub_19E3AF8EC(v26, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_MESSAGE): ");
      sub_19E3AFA28((uint64_t)&v25, (const char **)&v19->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v26);
    }
  }
  uint64_t v20 = *(void *)v10;
  int v21 = *(_DWORD **)(*(void *)v10 + 16);
  if (!v21
    || (uint64_t v22 = *(int *)(v20 + 8), (int)v22 >= *v21)
    || (*(_DWORD *)(v20 + 8) = v22 + 1, (uint64_t v23 = *(void *)&v21[2 * v22 + 2]) == 0))
  {
    uint64_t v23 = (*(uint64_t (**)(uint64_t, void))(*(void *)a4 + 32))(a4, *a1);
    sub_19E3BA3B4(*(void *)v10, v23);
  }
  return v23;
}

void sub_19E3B3D44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_19E3B3D7C(unsigned __int8 *result)
{
  uint64_t v1 = (void *)*((void *)result + 2);
  if (*((unsigned __int16 *)result + 4) >= 0x101u)
  {
    int v6 = (unsigned __int8 *)*v1;
    uint64_t v4 = (unsigned __int8 *)(v1 + 1);
    uint64_t v5 = v6;
    if (v6 != v4)
    {
      do
      {
        uint64_t result = sub_19E3AFFD8(v5 + 40);
        uint64_t v7 = (unsigned __int8 *)*((void *)v5 + 1);
        if (v7)
        {
          do
          {
            uint64_t v8 = v7;
            uint64_t v7 = *(unsigned __int8 **)v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            uint64_t v8 = (unsigned __int8 *)*((void *)v5 + 2);
            BOOL v9 = *(void *)v8 == (void)v5;
            uint64_t v5 = v8;
          }
          while (!v9);
        }
        uint64_t v5 = v8;
      }
      while (v8 != v4);
    }
  }
  else if (*((_WORD *)result + 5))
  {
    uint64_t v2 = 32 * *((unsigned __int16 *)result + 5);
    uint64_t v3 = (unsigned __int8 *)(v1 + 1);
    do
    {
      uint64_t result = sub_19E3AFFD8(v3);
      v3 += 32;
      v2 -= 32;
    }
    while (v2);
  }
  return result;
}

void sub_19E3B3E1C(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int16 *)(a1 + 8) <= 0x100u)
  {
    unsigned int v4 = *(unsigned __int16 *)(a2 + 8);
    uint64_t v5 = *(char **)(a1 + 16);
    uint64_t v6 = *(unsigned __int16 *)(a1 + 10);
    uint64_t v7 = &v5[32 * v6];
    uint64_t v8 = *(void *)(a2 + 16);
    if (v4 > 0x100)
    {
      unint64_t v14 = sub_19E3B4174(v5, v7, *(void **)v8, (void *)(v8 + 8));
    }
    else
    {
      uint64_t v9 = *(unsigned __int16 *)(a2 + 10);
      uint64_t v10 = v8 + 32 * v9;
      BOOL v12 = v6 == 0;
      uint64_t v11 = 0;
      BOOL v12 = v12 || v9 == 0;
      if (!v12)
      {
        do
        {
          if (*(_DWORD *)v5 == *(_DWORD *)v8) {
            char v13 = v5 + 32;
          }
          else {
            char v13 = v5;
          }
          if (*(_DWORD *)v5 < *(_DWORD *)v8)
          {
            v5 += 32;
          }
          else
          {
            v8 += 32;
            uint64_t v5 = v13;
          }
          ++v11;
        }
        while (v5 != v7 && v8 != v10);
      }
      unint64_t v14 = v11 + ((v10 - v8) >> 5) + ((v7 - v5) >> 5);
    }
    sub_19E3B3F4C((void *)a1, v14);
  }
  uint64_t v15 = *(int **)(a2 + 16);
  if (*(unsigned __int16 *)(a2 + 8) >= 0x101u)
  {
    char v19 = *(void **)v15;
    sub_19E3BA4E8(v19, (void *)v15 + 1, (uint64_t *)a1);
  }
  else if (*(_WORD *)(a2 + 10))
  {
    uint64_t v16 = &v15[8 * *(unsigned __int16 *)(a2 + 10)];
    do
    {
      uint64_t v17 = v15 + 2;
      unsigned int v18 = *v15;
      v15 += 8;
      sub_19E3B427C((uint64_t *)a1, v18, v17);
    }
    while (v15 != v16);
  }
}

void *sub_19E3B3F4C(void *result, unint64_t a2)
{
  unint64_t v2 = *((unsigned __int16 *)result + 4);
  if (v2 <= 0x100 && v2 < a2)
  {
    unsigned int v4 = result;
    do
    {
      if ((_WORD)v2) {
        LOWORD(v2) = 4 * v2;
      }
      else {
        LOWORD(v2) = 1;
      }
    }
    while ((unsigned __int16)v2 < a2);
    uint64_t v5 = (char *)result[2];
    uint64_t v6 = *((unsigned __int16 *)result + 5);
    uint64_t v7 = (uint64_t *)*result;
    if ((unsigned __int16)v2 < 0x101u)
    {
      size_t v8 = 32 * (unsigned __int16)v2;
      if (v7)
      {
        if (v7[3])
        {
          (*(void (**)(void, void *, size_t))(**(void **)(v7[4] + 32) + 40))(*(void *)(v7[4] + 32), &unk_1EF0B7698, v8);
          size_t v8 = 32 * (unsigned __int16)v2;
        }
        uint64_t result = (void *)sub_19E3AE240(v7, v8);
      }
      else
      {
        uint64_t result = operator new[](v8);
      }
      uint64_t v9 = (uint64_t **)result;
      if (v6) {
        uint64_t result = memmove(result, v5, 32 * v6);
      }
    }
    else
    {
      if (!v7) {
        operator new();
      }
      if (v7[3]) {
        (*(void (**)(void, void *, uint64_t))(**(void **)(v7[4] + 32) + 40))(*(void *)(v7[4] + 32), &unk_1EF0B7FF8, 24);
      }
      uint64_t result = (void *)sub_19E3ADF44(v7, 0x18uLL, (uint64_t)sub_19E3BAC2C);
      uint64_t v9 = (uint64_t **)result;
      result[1] = 0;
      uint64_t v10 = result + 1;
      result[2] = 0;
      *uint64_t result = result + 1;
      if (v6)
      {
        uint64_t v11 = &v5[32 * v6];
        BOOL v12 = v5;
        do
        {
          int v15 = *(_DWORD *)v12;
          long long v13 = *(_OWORD *)(v12 + 8);
          uint64_t v17 = *((void *)v12 + 3);
          long long v16 = v13;
          uint64_t result = sub_19E3BAC34(v9, v10, &v15, &v15);
          uint64_t v10 = result;
          v12 += 32;
        }
        while (v12 != v11);
      }
    }
    if (*v4) {
      BOOL v14 = 1;
    }
    else {
      BOOL v14 = v5 == 0;
    }
    if (!v14) {
      uint64_t result = (void *)MEMORY[0x19F3BDCC0](v5, 0x1062C802AB6010CLL);
    }
    *((_WORD *)v4 + 4) = v2;
    v4[2] = v9;
    if ((unsigned __int16)v2 >= 0x101u) {
      *((_WORD *)v4 + 5) = 0;
    }
  }
  return result;
}

uint64_t sub_19E3B4174(char *a1, char *a2, void *a3, void *a4)
{
  uint64_t v4 = 0;
  if (a1 != a2 && a3 != a4)
  {
    uint64_t v4 = 0;
    do
    {
      int v5 = *((_DWORD *)a3 + 8);
      if (*(_DWORD *)a1 >= v5)
      {
        if (*(_DWORD *)a1 == v5)
        {
          a1 += 32;
          uint64_t v6 = (void *)a3[1];
          if (v6)
          {
            do
            {
              a3 = v6;
              uint64_t v6 = (void *)*v6;
            }
            while (v6);
          }
          else
          {
            do
            {
              uint64_t v7 = a3;
              a3 = (void *)a3[2];
            }
            while ((void *)*a3 != v7);
          }
        }
        else
        {
          size_t v8 = (void *)a3[1];
          if (v8)
          {
            do
            {
              a3 = v8;
              size_t v8 = (void *)*v8;
            }
            while (v8);
          }
          else
          {
            do
            {
              uint64_t v9 = a3;
              a3 = (void *)a3[2];
            }
            while ((void *)*a3 != v9);
          }
        }
      }
      else
      {
        a1 += 32;
      }
      ++v4;
    }
    while (a1 != a2 && a3 != a4);
  }
  if (a3 == a4)
  {
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v10 = 0;
    do
    {
      uint64_t v11 = (void *)a3[1];
      if (v11)
      {
        do
        {
          BOOL v12 = v11;
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          BOOL v12 = (void *)a3[2];
          BOOL v13 = *v12 == (void)a3;
          a3 = v12;
        }
        while (!v13);
      }
      ++v10;
      a3 = v12;
    }
    while (v12 != a4);
  }
  return v4 + ((a2 - a1) >> 5) + v10;
}

void sub_19E3B427C(uint64_t *a1, uint64_t a2, void *a3)
{
  if (!*((unsigned char *)a3 + 9))
  {
    if (*((unsigned char *)a3 + 10)) {
      return;
    }
    uint64_t v11 = *((unsigned __int8 *)a3 + 8);
    if ((v11 - 19) <= 0xFFFFFFED)
    {
      sub_19E3AF8D4((uint64_t)v63, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      BOOL v12 = sub_19E3AF8EC(v63, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19E3AFA28((uint64_t)&v62, (const char **)&v12->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v63);
    }
    switch(v11)
    {
      case 1:
        sub_19E3B1CD0((uint64_t)a1, a2, *((unsigned __int8 *)a3 + 8), a3[2], *(double *)a3);
        return;
      case 2:
        sub_19E3B1764((uint64_t)a1, a2, *((unsigned __int8 *)a3 + 8), a3[2], *(float *)a3);
        return;
      case 3:
      case 16:
      case 18:
        sub_19E3B0750((uint64_t)a1, a2, *((unsigned __int8 *)a3 + 8), *a3, a3[2]);
        return;
      case 4:
      case 6:
        sub_19E3B1208((uint64_t)a1, a2, *((unsigned __int8 *)a3 + 8), *a3, a3[2]);
        return;
      case 5:
      case 15:
      case 17:
        sub_19E3B01F4((uint64_t)a1, a2, *((unsigned __int8 *)a3 + 8), *(_DWORD *)a3, a3[2]);
        return;
      case 7:
      case 13:
        sub_19E3B0CAC((uint64_t)a1, a2, *((unsigned __int8 *)a3 + 8), *(_DWORD *)a3, a3[2]);
        return;
      case 8:
        sub_19E3B223C((uint64_t)a1, a2, *((unsigned __int8 *)a3 + 8), *(unsigned char *)a3, a3[2]);
        return;
      case 9:
      case 12:
        int v36 = *((unsigned __int8 *)a3 + 8);
        double v37 = *(double *)a3;
        if (*(char *)(*a3 + 23) < 0)
        {
          sub_19E39369C(__p, **(void ***)&v37, *(void *)(*(void *)&v37 + 8));
        }
        else
        {
          long long v38 = **(_OWORD **)&v37;
          uint64_t v61 = *(void *)(*(void *)&v37 + 16);
          *(_OWORD *)std::string __p = v38;
        }
        sub_19E3B5040(a1, a2, v36, (__n128 *)__p, (uint64_t *)a3[2]);
        if (SHIBYTE(v61) < 0) {
          operator delete(__p[0]);
        }
        return;
      case 10:
      case 11:
        uint64_t v39 = (uint64_t *)a3[2];
        int v40 = sub_19E3B5160((uint64_t)a1, a2);
        uint64_t v41 = v40;
        void v40[2] = v39;
        if (v42)
        {
          *((unsigned char *)v40 + 8) = *((unsigned char *)a3 + 8);
          *((unsigned char *)v40 + 11) = *((unsigned char *)a3 + 11);
          *((unsigned char *)v40 + 9) = 0;
          char v43 = *((unsigned char *)v40 + 10) & 0xF;
          if ((*((unsigned char *)a3 + 10) & 0x10) == 0)
          {
            *((unsigned char *)v40 + 1sub_19E392864(&a9, 0) = v43;
            uint64_t v44 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a3 + 32))(*a3, *a1);
            void *v41 = v44;
LABEL_120:
            (*(void (**)(uint64_t, void))(*(void *)v44 + 64))(v44, *a3);
            goto LABEL_126;
          }
          *((unsigned char *)v40 + 1sub_19E392864(&a9, 0) = v43 | 0x10;
          uint64_t v59 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a3 + 16))(*a3, *a1);
          void *v41 = v59;
          (*(void (**)(uint64_t, void))(*(void *)v59 + 104))(v59, *a3);
        }
        else
        {
          if (*((unsigned __int8 *)v40 + 8) != *((unsigned __int8 *)a3 + 8))
          {
            sub_19E3AF8D4((uint64_t)v63, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 1026);
            int v53 = sub_19E3AF8EC(v63, "CHECK failed: (extension->type) == (other_extension.type): ");
            sub_19E3AFA28((uint64_t)&v62, (const char **)&v53->__r_.__value_.__l.__data_);
            sub_19E3AFA30((uint64_t)v63);
          }
          if (*((unsigned __int8 *)v41 + 11) != *((unsigned __int8 *)a3 + 11))
          {
            sub_19E3AF8D4((uint64_t)v63, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 1027);
            uint64_t v54 = sub_19E3AF8EC(v63, "CHECK failed: (extension->is_packed) == (other_extension.is_packed): ");
            sub_19E3AFA28((uint64_t)&v62, (const char **)&v54->__r_.__value_.__l.__data_);
            sub_19E3AFA30((uint64_t)v63);
          }
          if (*((unsigned char *)v41 + 9))
          {
            sub_19E3AF8D4((uint64_t)v63, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 1028);
            uint64_t v55 = sub_19E3AF8EC(v63, "CHECK failed: !extension->is_repeated: ");
            sub_19E3AFA28((uint64_t)&v62, (const char **)&v55->__r_.__value_.__l.__data_);
            sub_19E3AFA30((uint64_t)v63);
          }
          uint64_t v56 = (uint64_t *)*v41;
          double v57 = *(double *)a3;
          if ((*((unsigned char *)a3 + 10) & 0x10) != 0)
          {
            if ((*((unsigned char *)v41 + 10) & 0x10) != 0)
            {
              (*(void (**)(void, double))(*v56 + 104))(*v41, COERCE_DOUBLE(*(void *)&v57));
              goto LABEL_126;
            }
            double v57 = COERCE_DOUBLE((*(uint64_t (**)(void, void))(**(void **)&v57 + 24))(*a3, *v41));
            uint64_t v58 = *v56;
          }
          else
          {
            uint64_t v58 = *v56;
            if ((*((unsigned char *)v41 + 10) & 0x10) != 0)
            {
              uint64_t v44 = (*(uint64_t (**)(void, double))(v58 + 32))(*v41, COERCE_DOUBLE(*(void *)&v57));
              goto LABEL_120;
            }
          }
          (*(void (**)(uint64_t *, double))(v58 + 64))(v56, COERCE_DOUBLE(*(void *)&v57));
        }
LABEL_126:
        *((unsigned char *)v41 + 10) &= 0xF0u;
        return;
      case 14:
        sub_19E3B2C0C((uint64_t)a1, a2, *((unsigned __int8 *)a3 + 8), *(_DWORD *)a3, a3[2]);
        return;
      default:
        return;
    }
  }
  uint64_t v6 = (uint64_t *)a3[2];
  uint64_t v7 = sub_19E3B5160((uint64_t)a1, a2);
  size_t v8 = (uint64_t *)v7;
  std::string v7[2] = v6;
  uint64_t v10 = v9;
  if (v9)
  {
    *((unsigned char *)v7 + 8) = *((unsigned char *)a3 + 8);
    *((unsigned char *)v7 + 11) = *((unsigned char *)a3 + 11);
    *((unsigned char *)v7 + 9) = 1;
  }
  else
  {
    if (*((unsigned __int8 *)v7 + 8) != *((unsigned __int8 *)a3 + 8))
    {
      sub_19E3AF8D4((uint64_t)v63, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 931);
      BOOL v13 = sub_19E3AF8EC(v63, "CHECK failed: (extension->type) == (other_extension.type): ");
      sub_19E3AFA28((uint64_t)&v62, (const char **)&v13->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v63);
    }
    if (*((unsigned __int8 *)v8 + 11) != *((unsigned __int8 *)a3 + 11))
    {
      sub_19E3AF8D4((uint64_t)v63, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 932);
      BOOL v14 = sub_19E3AF8EC(v63, "CHECK failed: (extension->is_packed) == (other_extension.is_packed): ");
      sub_19E3AFA28((uint64_t)&v62, (const char **)&v14->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v63);
    }
    if (!*((unsigned char *)v8 + 9))
    {
      sub_19E3AF8D4((uint64_t)v63, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 933);
      int v15 = sub_19E3AF8EC(v63, "CHECK failed: extension->is_repeated: ");
      sub_19E3AFA28((uint64_t)&v62, (const char **)&v15->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v63);
    }
  }
  uint64_t v16 = *((unsigned __int8 *)a3 + 8);
  if ((v16 - 19) <= 0xFFFFFFED)
  {
    sub_19E3AF8D4((uint64_t)v63, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
    uint64_t v17 = sub_19E3AF8EC(v63, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
    sub_19E3AFA28((uint64_t)&v62, (const char **)&v17->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v63);
  }
  switch(v16)
  {
    case 1:
      if (v10)
      {
        uint64_t v26 = *a1;
        if (!v26) {
          operator new();
        }
        if (*(unsigned char *)(v26 + 24)) {
          (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v26 + 32) + 32) + 40))(*(void *)(*(void *)(v26 + 32) + 32), &unk_1EF0B75D0, 16);
        }
        unint64_t v27 = sub_19E3ADF44((void *)v26, 0x10uLL, (uint64_t)sub_19E3BA290);
        *(void *)unint64_t v27 = 0;
        *(void *)(v27 + 8) = v26;
        *size_t v8 = v27;
      }
      else
      {
        unint64_t v27 = *v8;
      }
      sub_19E3C212C((int *)v27, (int *)*a3);
      break;
    case 2:
      if (v10)
      {
        uint64_t v28 = *a1;
        if (!v28) {
          operator new();
        }
        if (*(unsigned char *)(v28 + 24)) {
          (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v28 + 32) + 32) + 40))(*(void *)(*(void *)(v28 + 32) + 32), &unk_1EF0B75E0, 16);
        }
        unint64_t v29 = sub_19E3ADF44((void *)v28, 0x10uLL, (uint64_t)sub_19E3BA28C);
        *(void *)unint64_t v29 = 0;
        *(void *)(v29 + 8) = v28;
        *size_t v8 = v29;
      }
      else
      {
        unint64_t v29 = *v8;
      }
      sub_19E3C1AD0((int *)v29, (int *)*a3);
      break;
    case 3:
    case 16:
    case 18:
      if (v10)
      {
        uint64_t v20 = *a1;
        if (!v20) {
          operator new();
        }
        if (*(unsigned char *)(v20 + 24)) {
          (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v20 + 32) + 32) + 40))(*(void *)(*(void *)(v20 + 32) + 32), &unk_1EF0B7610, 16);
        }
        unint64_t v21 = sub_19E3ADF44((void *)v20, 0x10uLL, (uint64_t)sub_19E3BA280);
        *(void *)unint64_t v21 = 0;
        *(void *)(v21 + 8) = v20;
        *size_t v8 = v21;
      }
      else
      {
        unint64_t v21 = *v8;
      }
      sub_19E3C0E18((int *)v21, (int *)*a3);
      break;
    case 4:
    case 6:
      if (v10)
      {
        uint64_t v24 = *a1;
        if (!v24) {
          operator new();
        }
        if (*(unsigned char *)(v24 + 24)) {
          (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v24 + 32) + 32) + 40))(*(void *)(*(void *)(v24 + 32) + 32), &unk_1EF0B7620, 16);
        }
        unint64_t v25 = sub_19E3ADF44((void *)v24, 0x10uLL, (uint64_t)sub_19E3BA288);
        *(void *)unint64_t v25 = 0;
        *(void *)(v25 + 8) = v24;
        *size_t v8 = v25;
      }
      else
      {
        unint64_t v25 = *v8;
      }
      sub_19E3C1474((int *)v25, (int *)*a3);
      break;
    case 5:
    case 14:
    case 15:
    case 17:
      if (v10)
      {
        uint64_t v18 = *a1;
        if (!v18) {
          operator new();
        }
        if (*(unsigned char *)(v18 + 24)) {
          (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v18 + 32) + 32) + 40))(*(void *)(*(void *)(v18 + 32) + 32), &unk_1EF0B75F0, 16);
        }
        unint64_t v19 = sub_19E3ADF44((void *)v18, 0x10uLL, (uint64_t)sub_19E3BA27C);
        *(void *)unint64_t v19 = 0;
        *(void *)(v19 + 8) = v18;
        *size_t v8 = v19;
      }
      else
      {
        unint64_t v19 = *v8;
      }
      sub_19E3C0160((int *)v19, (int *)*a3);
      break;
    case 7:
    case 13:
      if (v10)
      {
        uint64_t v22 = *a1;
        if (!v22) {
          operator new();
        }
        if (*(unsigned char *)(v22 + 24)) {
          (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v22 + 32) + 32) + 40))(*(void *)(*(void *)(v22 + 32) + 32), &unk_1EF0B7600, 16);
        }
        unint64_t v23 = sub_19E3ADF44((void *)v22, 0x10uLL, (uint64_t)sub_19E3BA284);
        *(void *)unint64_t v23 = 0;
        *(void *)(v23 + 8) = v22;
        *size_t v8 = v23;
      }
      else
      {
        unint64_t v23 = *v8;
      }
      sub_19E3C07BC((int *)v23, (int *)*a3);
      break;
    case 8:
      if (v10)
      {
        uint64_t v30 = *a1;
        if (!v30) {
          operator new();
        }
        if (*(unsigned char *)(v30 + 24)) {
          (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v30 + 32) + 32) + 40))(*(void *)(*(void *)(v30 + 32) + 32), &unk_1EF0B75C0, 16);
        }
        unint64_t v31 = sub_19E3ADF44((void *)v30, 0x10uLL, (uint64_t)sub_19E3BA294);
        *(void *)unint64_t v31 = 0;
        *(void *)(v31 + 8) = v30;
        *size_t v8 = v31;
      }
      else
      {
        unint64_t v31 = *v8;
      }
      sub_19E3BFB08((int *)v31, (int *)*a3);
      break;
    case 9:
    case 12:
      if (v10)
      {
        uint64_t v32 = *a1;
        if (!v32) {
          operator new();
        }
        if (*(unsigned char *)(v32 + 24)) {
          (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v32 + 32) + 32) + 40))(*(void *)(*(void *)(v32 + 32) + 32), &unk_1EF0B7670, 24);
        }
        long long v33 = (void *)sub_19E3ADF44((void *)v32, 0x18uLL, (uint64_t)sub_19E3BA298);
        v33[2] = 0;
        *long long v33 = v32;
        v33[1] = 0;
        *size_t v8 = (uint64_t)v33;
      }
      else
      {
        long long v33 = (void *)*v8;
      }
      sub_19E3A9EF4((uint64_t)v33, *a3);
      break;
    case 10:
    case 11:
      if (v10)
      {
        uint64_t v34 = *a1;
        if (!*a1) {
          operator new();
        }
        if (*(unsigned char *)(v34 + 24)) {
          (*(void (**)(void, void *, uint64_t))(**(void **)(*(void *)(v34 + 32) + 32) + 40))(*(void *)(*(void *)(v34 + 32) + 32), &unk_1EF0B7648, 24);
        }
        uint64_t v35 = (void *)sub_19E3ADF44((void *)v34, 0x18uLL, (uint64_t)sub_19E3BA29C);
        v35[2] = 0;
        *uint64_t v35 = v34;
        v35[1] = 0;
        *size_t v8 = (uint64_t)v35;
      }
      double v45 = *(double *)a3;
      if (*(int *)(*(void *)&v45 + 8) >= 1)
      {
        int v46 = 0;
        do
        {
          uint64_t v47 = sub_19E3BA2D4(*(uint64_t *)&v45, v46);
          uint64_t v48 = v47;
          uint64_t v49 = *v8;
          uint64_t v50 = *(_DWORD **)(*v8 + 16);
          if (!v50
            || (uint64_t v51 = *(int *)(v49 + 8), (int)v51 >= *v50)
            || (*(_DWORD *)(v49 + 8) = v51 + 1, (uint64_t v52 = *(void *)&v50[2 * v51 + 2]) == 0))
          {
            uint64_t v52 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v47 + 32))(v47, *a1);
            sub_19E3BA3B4(*v8, v52);
          }
          (*(void (**)(uint64_t, uint64_t))(*(void *)v52 + 64))(v52, v48);
          ++v46;
        }
        while (v46 < *(_DWORD *)(*(void *)&v45 + 8));
      }
      break;
    default:
      return;
  }
}

void sub_19E3B4F88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
}

__n128 sub_19E3B5040(uint64_t *a1, uint64_t a2, int a3, __n128 *a4, uint64_t *a5)
{
  uint64_t v6 = sub_19E3B3168(a1, a2, a3, a5);
  uint64_t v7 = (__n128 *)v6;
  if (*(char *)(v6 + 23) < 0) {
    operator delete(*(void **)v6);
  }
  __n128 result = *a4;
  v7[1].n128_u64[0] = a4[1].n128_u64[0];
  *uint64_t v7 = result;
  a4[1].n128_u8[7] = 0;
  a4->n128_u8[0] = 0;
  return result;
}

uint64_t sub_19E3B5094(uint64_t result, uint64_t a2)
{
  uint64_t v3 = (unsigned __int8 *)result;
  if (*(void *)result == *(void *)a2)
  {
    __int16 v4 = *(_WORD *)(result + 8);
    *(_WORD *)(result + 8) = *(_WORD *)(a2 + 8);
    *(_WORD *)(a2 + 8) = v4;
    __int16 v5 = *(_WORD *)(result + 10);
    *(_WORD *)(result + 1sub_19E392864(&a9, 0) = *(_WORD *)(a2 + 10);
    *(_WORD *)(a2 + 1sub_19E392864(&a9, 0) = v5;
    uint64_t v6 = *(void *)(result + 16);
    *(void *)(result + 16) = *(void *)(a2 + 16);
    *(void *)(a2 + 16) = v6;
  }
  else
  {
    uint64_t v7 = 0;
    int v8 = 0;
    uint64_t v9 = 0;
    sub_19E3B3E1C((uint64_t)&v7, a2);
    sub_19E3B3D7C((unsigned __int8 *)a2);
    sub_19E3B3E1C(a2, (uint64_t)v3);
    sub_19E3B3D7C(v3);
    sub_19E3B3E1C((uint64_t)v3, (uint64_t)&v7);
    return sub_19E3AFF04((uint64_t)&v7);
  }
  return result;
}

void sub_19E3B514C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E3AFF04((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t **sub_19E3B5160(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(unsigned __int16 *)(a1 + 8);
  __int16 v4 = *(uint64_t ***)(a1 + 16);
  if (v3 >= 0x101)
  {
    *((void *)&v14 + 1) = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    LODWORD(v14) = a2;
    return sub_19E3BAB70(v4, (int *)&v14, &v14) + 5;
  }
  uint64_t v6 = *(unsigned __int16 *)(a1 + 10);
  uint64_t v7 = &v4[4 * v6];
  if (!*(_WORD *)(a1 + 10))
  {
    if (!*(_WORD *)(a1 + 8)) {
      goto LABEL_18;
    }
    LOWORD(v6) = 0;
LABEL_17:
    *(_WORD *)(a1 + 1sub_19E392864(&a9, 0) = v6 + 1;
    *(_DWORD *)uint64_t v7 = a2;
    v7[1] = 0;
    __n128 result = v7 + 1;
    std::string v7[2] = 0;
    v7[3] = 0;
    return result;
  }
  unint64_t v8 = *(unsigned __int16 *)(a1 + 10);
  do
  {
    unint64_t v9 = v8 >> 1;
    uint64_t v10 = (int *)&v4[4 * (v8 >> 1)];
    int v12 = *v10;
    uint64_t v11 = (uint64_t **)(v10 + 8);
    v8 += ~(v8 >> 1);
    if (v12 < (int)a2) {
      __int16 v4 = v11;
    }
    else {
      unint64_t v8 = v9;
    }
  }
  while (v8);
  if (v4 != v7)
  {
    if (*(_DWORD *)v4 == a2) {
      return v4 + 1;
    }
    if (v6 < v3)
    {
      memmove(v4 + 4, v4, (char *)v7 - (char *)v4);
      LOWORD(v6) = *(_WORD *)(a1 + 10);
      uint64_t v7 = v4;
      goto LABEL_17;
    }
    goto LABEL_18;
  }
  if (v6 < v3) {
    goto LABEL_17;
  }
LABEL_18:
  sub_19E3B3F4C((void *)a1, v6 + 1);
  return (uint64_t **)sub_19E3B5160(a1, a2);
}

uint64_t sub_19E3B52AC(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 16);
  if (*(unsigned __int16 *)(a1 + 8) >= 0x101u)
  {
    unint64_t v8 = (unsigned __int8 *)*v1;
    uint64_t v7 = (unsigned __int8 *)(v1 + 1);
    uint64_t v6 = v8;
    if (v8 == v7)
    {
      return 1;
    }
    else
    {
      do
      {
        uint64_t v4 = sub_19E3B5380(v6 + 40);
        if (!v4) {
          break;
        }
        unint64_t v9 = (unsigned __int8 *)*((void *)v6 + 1);
        if (v9)
        {
          do
          {
            uint64_t v10 = v9;
            unint64_t v9 = *(unsigned __int8 **)v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            uint64_t v10 = (unsigned __int8 *)*((void *)v6 + 2);
            BOOL v11 = *(void *)v10 == (void)v6;
            uint64_t v6 = v10;
          }
          while (!v11);
        }
        uint64_t v6 = v10;
      }
      while (v10 != v7);
    }
  }
  else
  {
    while (1)
    {
      uint64_t v3 = *(void *)(a1 + 16) + 32 * *(unsigned __int16 *)(a1 + 10);
      uint64_t v4 = v1 == (void *)v3;
      if (v1 == (void *)v3) {
        break;
      }
      __int16 v5 = (unsigned __int8 *)(v1 + 1);
      if (!sub_19E3B5380(v5)) {
        break;
      }
      uint64_t v1 = v5 + 24;
      if (*(unsigned __int16 *)(a1 + 8) > 0x100u) {
        sub_19E3BB1E8();
      }
    }
  }
  return v4;
}

uint64_t sub_19E3B5380(unsigned __int8 *a1)
{
  uint64_t v2 = a1[8];
  if ((v2 - 19) <= 0xFFFFFFED)
  {
    sub_19E3AF8D4((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
    uint64_t v3 = sub_19E3AF8EC(v10, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
    sub_19E3AFA28((uint64_t)&v9, (const char **)&v3->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v10);
  }
  if (dword_19E572D20[v2] != 10) {
    return 1;
  }
  if (a1[9])
  {
    uint64_t v4 = *(void *)a1;
    if (*(int *)(*(void *)a1 + 8) >= 1)
    {
      int v5 = 0;
      while (1)
      {
        uint64_t v6 = sub_19E3BA2D4(v4, v5);
        if (((*(uint64_t (**)(uint64_t))(*(void *)v6 + 48))(v6) & 1) == 0) {
          break;
        }
        ++v5;
        uint64_t v4 = *(void *)a1;
        if (v5 >= *(_DWORD *)(*(void *)a1 + 8)) {
          return 1;
        }
      }
      return 0;
    }
    return 1;
  }
  if (a1[10]) {
    return 1;
  }
  uint64_t v7 = **(void **)a1;
  if ((a1[10] & 0x10) != 0) {
    return ((*(uint64_t (**)(void))(v7 + 72))() & 1) != 0;
  }
  uint64_t result = (*(uint64_t (**)(void))(v7 + 48))();
  if (result) {
    return 1;
  }
  return result;
}

void sub_19E3B54D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E3B54F0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5, unsigned char *a6)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *))(*(void *)a4 + 16))(a4, a3, a5);
  if (result)
  {
    uint64_t v10 = *a5;
    if ((v10 - 19) <= 0xFFFFFFED)
    {
      sub_19E3AF8D4((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      BOOL v11 = sub_19E3AF8EC(v15, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19E3AFA28((uint64_t)&v14, (const char **)&v11->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v15);
    }
    unsigned int v12 = dword_19E572D6C[v10];
    *a6 = 0;
    if (a2 == 2 && a5[1])
    {
      if (v12 > 5)
      {
        sub_19E3AF8D4((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 82);
        BOOL v13 = sub_19E3AF8EC(v15, "can't reach here.");
        sub_19E3AFA28((uint64_t)&v14, (const char **)&v13->__r_.__value_.__l.__data_);
        sub_19E3AFA30((uint64_t)v15);
      }
      else
      {
        uint64_t result = 1;
        if (((1 << v12) & 0x1C) == 0)
        {
          *a6 = 1;
          return result;
        }
      }
    }
    return v12 == a2;
  }
  return result;
}

void sub_19E3B562C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_19E3B564C(uint64_t *a1, unint64_t a2, unsigned __int8 *a3, uint64_t a4, unint64_t *a5, int32x2_t *a6)
{
  unsigned int v9 = a2;
  v16[0] = &unk_1EF0BD488;
  v16[1] = a4;
  uint64_t v11 = a2 >> 3;
  unsigned __int8 v15 = 0;
  if (sub_19E3B54F0((uint64_t)a1, a2 & 7, a2 >> 3, (uint64_t)v16, v14, &v15)) {
    return sub_19E3B572C(a1, v11, v15, (uint64_t)v14, a5, a3, a6);
  }
  if (*a5) {
    BOOL v13 = (std::string *)((*a5 & 0xFFFFFFFFFFFFFFFELL) + 8);
  }
  else {
    BOOL v13 = (std::string *)sub_19E3A0504(a5);
  }
  return sub_19E3BD4AC(v9, v13, (char *)a3, a6);
}

unsigned __int8 *sub_19E3B572C(uint64_t *a1, uint64_t a2, int a3, uint64_t a4, unint64_t *a5, unsigned __int8 *a6, int32x2_t *a7)
{
  unint64_t v8 = a6;
  uint64_t v11 = a2;
  unsigned int v12 = a1;
  if (a3)
  {
    switch(*(unsigned char *)a4)
    {
      case 1:
        uint64_t v30 = sub_19E3B2798(a1, a2, 1, *(unsigned char *)(a4 + 2), *(uint64_t **)(a4 + 24));
        uint64_t result = (unsigned __int8 *)sub_19E3BD344(v30, v8, a7);
        break;
      case 2:
        unint64_t v31 = sub_19E3B2798(a1, a2, 2, *(unsigned char *)(a4 + 2), *(uint64_t **)(a4 + 24));
        uint64_t result = (unsigned __int8 *)sub_19E3BD2C8(v31, v8, a7);
        break;
      case 3:
        uint64_t v32 = sub_19E3B2798(a1, a2, 3, *(unsigned char *)(a4 + 2), *(uint64_t **)(a4 + 24));
        uint64_t result = sub_19E3BD088((int *)v32, v8, (uint64_t)a7);
        break;
      case 4:
        long long v33 = sub_19E3B2798(a1, a2, 4, *(unsigned char *)(a4 + 2), *(uint64_t **)(a4 + 24));
        uint64_t result = sub_19E3BD098((int *)v33, v8, (uint64_t)a7);
        break;
      case 5:
        uint64_t v16 = sub_19E3B2798(a1, a2, 5, *(unsigned char *)(a4 + 2), *(uint64_t **)(a4 + 24));
        uint64_t result = sub_19E3BD068((int *)v16, v8, (uint64_t)a7);
        break;
      case 6:
        uint64_t v34 = sub_19E3B2798(a1, a2, 6, *(unsigned char *)(a4 + 2), *(uint64_t **)(a4 + 24));
        uint64_t result = (unsigned __int8 *)sub_19E3BD1D0(v34, v8, a7);
        break;
      case 7:
        uint64_t v35 = sub_19E3B2798(a1, a2, 7, *(unsigned char *)(a4 + 2), *(uint64_t **)(a4 + 24));
        uint64_t result = (unsigned __int8 *)sub_19E3BD0D8(v35, v8, a7);
        break;
      case 8:
        int v36 = sub_19E3B2798(a1, a2, 8, *(unsigned char *)(a4 + 2), *(uint64_t **)(a4 + 24));
        uint64_t result = sub_19E3BD0C8((int *)v36, v8, (uint64_t)a7);
        break;
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
        sub_19E3AF8D4((uint64_t)&v89, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/extension_set_inl.h", 79);
        BOOL v13 = sub_19E3AF8EC(&v89, "Non-primitive types can't be packed.");
        sub_19E3AFA28((uint64_t)&v88, (const char **)&v13->__r_.__value_.__l.__data_);
        sub_19E3AFA30((uint64_t)&v89);
        goto LABEL_169;
      case 0xD:
        uint64_t v18 = sub_19E3B2798(a1, a2, 13, *(unsigned char *)(a4 + 2), *(uint64_t **)(a4 + 24));
        uint64_t result = sub_19E3BD078((int *)v18, v8, (uint64_t)a7);
        break;
      case 0xE:
        v89.__r_.__value_.__r.__words[0] = (std::string::size_type)sub_19E3B2798(a1, a2, 14, *(unsigned char *)(a4 + 2), *(uint64_t **)(a4 + 24));
        *(_OWORD *)&v89.__r_.__value_.__r.__words[1] = *(_OWORD *)(a4 + 8);
        uint64_t v90 = a5;
        int v91 = v11;
        unint64_t v8 = (unsigned __int8 *)sub_19E3BA5D8((uint64_t)a7, (char *)v8, (uint64_t)&v89);
        goto LABEL_169;
      case 0xF:
        unint64_t v19 = sub_19E3B2798(a1, a2, 15, *(unsigned char *)(a4 + 2), *(uint64_t **)(a4 + 24));
        uint64_t result = (unsigned __int8 *)sub_19E3BD154(v19, v8, a7);
        break;
      case 0x10:
        double v37 = sub_19E3B2798(a1, a2, 16, *(unsigned char *)(a4 + 2), *(uint64_t **)(a4 + 24));
        uint64_t result = (unsigned __int8 *)sub_19E3BD24C(v37, v8, a7);
        break;
      case 0x11:
        uint64_t v20 = sub_19E3B2798(a1, a2, 17, *(unsigned char *)(a4 + 2), *(uint64_t **)(a4 + 24));
        uint64_t result = sub_19E3BD0A8((int *)v20, v8, (uint64_t)a7);
        break;
      case 0x12:
        long long v38 = sub_19E3B2798(a1, a2, 18, *(unsigned char *)(a4 + 2), *(uint64_t **)(a4 + 24));
        uint64_t result = sub_19E3BD0B8((int *)v38, v8, (uint64_t)a7);
        break;
      default:
        goto LABEL_169;
    }
  }
  else
  {
    switch(*(unsigned char *)a4)
    {
      case 1:
        unint64_t v8 = a6 + 8;
        double v39 = *(double *)a6;
        if (*(unsigned char *)(a4 + 1)) {
          sub_19E3B1EF0(a1, a2, 1, *(unsigned __int8 *)(a4 + 2), *(uint64_t **)(a4 + 24), v39);
        }
        else {
          sub_19E3B1CD0((uint64_t)a1, a2, 1, *(void *)(a4 + 24), v39);
        }
        goto LABEL_169;
      case 2:
        unint64_t v8 = a6 + 4;
        float v40 = *(float *)a6;
        if (*(unsigned char *)(a4 + 1)) {
          sub_19E3B1984(a1, a2, 2, *(unsigned __int8 *)(a4 + 2), *(uint64_t **)(a4 + 24), v40);
        }
        else {
          sub_19E3B1764((uint64_t)a1, a2, 2, *(void *)(a4 + 24), v40);
        }
        goto LABEL_169;
      case 3:
        uint64_t v41 = *a6;
        if ((char)*a6 < 0)
        {
          int v67 = v41 + (a6[1] << 7);
          uint64_t v41 = (v67 - 128);
          if ((char)a6[1] < 0)
          {
            unint64_t v8 = (unsigned __int8 *)sub_19E3BCEF4((uint64_t)a6, (v67 - 128));
            if (!v8) {
              goto LABEL_169;
            }
            uint64_t v41 = v84;
          }
          else
          {
            unint64_t v8 = a6 + 2;
          }
        }
        else
        {
          unint64_t v8 = a6 + 1;
        }
        if (*(unsigned char *)(a4 + 1))
        {
          int v54 = *(unsigned __int8 *)(a4 + 2);
          uint64_t v55 = *(uint64_t **)(a4 + 24);
          a1 = v12;
          a2 = v11;
          int v56 = 3;
          goto LABEL_166;
        }
        uint64_t v79 = *(void *)(a4 + 24);
        a1 = v12;
        a2 = v11;
        int v80 = 3;
        goto LABEL_168;
      case 4:
        uint64_t v42 = *a6;
        if ((char)*a6 < 0)
        {
          int v68 = v42 + (a6[1] << 7);
          uint64_t v42 = (v68 - 128);
          if ((char)a6[1] < 0)
          {
            unint64_t v8 = (unsigned __int8 *)sub_19E3BCEF4((uint64_t)a6, (v68 - 128));
            if (!v8) {
              goto LABEL_169;
            }
            uint64_t v42 = v85;
          }
          else
          {
            unint64_t v8 = a6 + 2;
          }
        }
        else
        {
          unint64_t v8 = a6 + 1;
        }
        if (*(unsigned char *)(a4 + 1))
        {
          int v43 = *(unsigned __int8 *)(a4 + 2);
          uint64_t v44 = *(uint64_t **)(a4 + 24);
          a1 = v12;
          a2 = v11;
          int v45 = 4;
          goto LABEL_147;
        }
        uint64_t v69 = *(void *)(a4 + 24);
        a1 = v12;
        a2 = v11;
        int v70 = 4;
        goto LABEL_149;
      case 5:
        int v21 = *a6;
        if ((char)*a6 < 0)
        {
          int v63 = v21 + (a6[1] << 7);
          int v21 = v63 - 128;
          if ((char)a6[1] < 0)
          {
            unint64_t v8 = (unsigned __int8 *)sub_19E3BCEF4((uint64_t)a6, (v63 - 128));
            if (!v8) {
              goto LABEL_169;
            }
            int v21 = v81;
          }
          else
          {
            unint64_t v8 = a6 + 2;
          }
        }
        else
        {
          unint64_t v8 = a6 + 1;
        }
        if (*(unsigned char *)(a4 + 1))
        {
          int v26 = *(unsigned __int8 *)(a4 + 2);
          unint64_t v27 = *(uint64_t **)(a4 + 24);
          a1 = v12;
          a2 = v11;
          int v28 = 5;
          goto LABEL_134;
        }
        uint64_t v65 = *(void *)(a4 + 24);
        a1 = v12;
        a2 = v11;
        int v66 = 5;
        int v82 = v21;
        goto LABEL_137;
      case 6:
        unint64_t v8 = a6 + 8;
        uint64_t v42 = *(void *)a6;
        if (*(unsigned char *)(a4 + 1))
        {
          int v43 = *(unsigned __int8 *)(a4 + 2);
          uint64_t v44 = *(uint64_t **)(a4 + 24);
          int v45 = 6;
LABEL_147:
          sub_19E3B1420(a1, a2, v45, v43, v42, v44);
        }
        else
        {
          uint64_t v69 = *(void *)(a4 + 24);
          int v70 = 6;
LABEL_149:
          sub_19E3B1208((uint64_t)a1, a2, v70, v42, v69);
        }
        goto LABEL_169;
      case 7:
        unint64_t v8 = a6 + 4;
        int v25 = *(_DWORD *)a6;
        if (*(unsigned char *)(a4 + 1))
        {
          int v46 = *(unsigned __int8 *)(a4 + 2);
          uint64_t v47 = *(uint64_t **)(a4 + 24);
          int v48 = 7;
          goto LABEL_128;
        }
        uint64_t v71 = *(void *)(a4 + 24);
        int v72 = 7;
        int v73 = *(_DWORD *)a6;
        goto LABEL_130;
      case 8:
        uint64_t v49 = *a6;
        if ((char)*a6 < 0)
        {
          uint64_t v49 = v49 + (a6[1] << 7) - 128;
          if ((char)a6[1] < 0)
          {
            unint64_t v8 = (unsigned __int8 *)sub_19E3BCEF4((uint64_t)a6, v49);
            if (!v8) {
              goto LABEL_169;
            }
          }
          else
          {
            unint64_t v8 = a6 + 2;
          }
        }
        else
        {
          unint64_t v8 = a6 + 1;
        }
        if (*(unsigned char *)(a4 + 1)) {
          sub_19E3B2454(v12, v11, 8, *(unsigned __int8 *)(a4 + 2), v49 != 0, *(uint64_t **)(a4 + 24));
        }
        else {
          sub_19E3B223C((uint64_t)v12, v11, 8, v49 != 0, *(void *)(a4 + 24));
        }
        goto LABEL_169;
      case 9:
      case 0xC:
        char v14 = *(uint64_t **)(a4 + 24);
        if (*(unsigned char *)(a4 + 1)) {
          uint64_t v15 = (uint64_t)sub_19E3B3410(a1, a2, 9, v14);
        }
        else {
          uint64_t v15 = sub_19E3B3168(a1, a2, 9, v14);
        }
        uint64_t v58 = (std::string *)v15;
        int v59 = *v8;
        if ((char)*v8 < 0)
        {
          uint64_t v61 = sub_19E3BCF80((uint64_t)v8, *v8);
          if (!v61)
          {
LABEL_113:
            unint64_t v8 = 0;
            goto LABEL_169;
          }
          uint64_t v60 = (std::string::value_type *)v61;
          int v59 = v62;
        }
        else
        {
          uint64_t v60 = (std::string::value_type *)(v8 + 1);
        }
        return (unsigned __int8 *)sub_19E3BA56C((uint64_t)a7, v60, v59, v58);
      case 0xA:
        uint64_t v50 = *(void *)(a4 + 8);
        uint64_t v51 = *(uint64_t **)(a4 + 24);
        if (*(unsigned char *)(a4 + 1)) {
          uint64_t v52 = sub_19E3B3A58(a1, a2, 10, v50, v51);
        }
        else {
          uint64_t v52 = sub_19E3B37C0(a1, a2, 10, v50, v51);
        }
        int v74 = a7[11].i32[0];
        BOOL v75 = __OFSUB__(v74--, 1);
        a7[11].i32[0] = v74;
        if (v74 < 0 != v75) {
          goto LABEL_113;
        }
        ++a7[11].i32[1];
        uint64_t v76 = (*(uint64_t (**)(uint64_t, unsigned __int8 *, int32x2_t *))(*(void *)v52 + 88))(v52, v8, a7);
        a7[11] = vadd_s32(a7[11], (int32x2_t)0xFFFFFFFF00000001);
        __int32 v77 = a7[10].i32[0];
        a7[10].i32[0] = 0;
        if (v77 == ((8 * v11) | 3)) {
          unint64_t v8 = (unsigned __int8 *)v76;
        }
        else {
          unint64_t v8 = 0;
        }
        goto LABEL_169;
      case 0xB:
        uint64_t v22 = *(void *)(a4 + 8);
        unint64_t v23 = *(uint64_t **)(a4 + 24);
        if (*(unsigned char *)(a4 + 1)) {
          uint64_t v24 = sub_19E3B3A58(a1, a2, 11, v22, v23);
        }
        else {
          uint64_t v24 = sub_19E3B37C0(a1, a2, 11, v22, v23);
        }
        return (unsigned __int8 *)sub_19E3BCCF4(a7, v24, v8);
      case 0xD:
        int v25 = *a6;
        if ((char)*a6 < 0)
        {
          int v64 = v25 + (a6[1] << 7);
          int v25 = v64 - 128;
          if ((char)a6[1] < 0)
          {
            unint64_t v8 = (unsigned __int8 *)sub_19E3BCEF4((uint64_t)a6, (v64 - 128));
            if (!v8) {
              goto LABEL_169;
            }
            int v25 = v83;
          }
          else
          {
            unint64_t v8 = a6 + 2;
          }
        }
        else
        {
          unint64_t v8 = a6 + 1;
        }
        if (*(unsigned char *)(a4 + 1))
        {
          int v46 = *(unsigned __int8 *)(a4 + 2);
          uint64_t v47 = *(uint64_t **)(a4 + 24);
          a1 = v12;
          a2 = v11;
          int v48 = 13;
LABEL_128:
          sub_19E3B0EC4(a1, a2, v48, v46, v25, v47);
        }
        else
        {
          uint64_t v71 = *(void *)(a4 + 24);
          a1 = v12;
          a2 = v11;
          int v72 = 13;
          int v73 = v25;
LABEL_130:
          sub_19E3B0CAC((uint64_t)a1, a2, v72, v73, v71);
        }
        goto LABEL_169;
      case 0xE:
        unint64_t v53 = *a6;
        if ((char)*a6 < 0)
        {
          int v78 = v53 + (a6[1] << 7);
          unint64_t v53 = (v78 - 128);
          if ((char)a6[1] < 0)
          {
            unint64_t v8 = (unsigned __int8 *)sub_19E3BCEF4((uint64_t)a6, (v78 - 128));
            if (!v8) {
              goto LABEL_169;
            }
            unint64_t v53 = v86;
          }
          else
          {
            unint64_t v8 = a6 + 2;
          }
        }
        else
        {
          unint64_t v8 = a6 + 1;
        }
        if ((*(uint64_t (**)(void, unint64_t))(a4 + 8))(*(void *)(a4 + 16), v53))
        {
          if (*(unsigned char *)(a4 + 1)) {
            sub_19E3B2E24(v12, v11, 14, *(unsigned __int8 *)(a4 + 2), v53, *(uint64_t **)(a4 + 24));
          }
          else {
            sub_19E3B2C0C((uint64_t)v12, v11, 14, v53, *(void *)(a4 + 24));
          }
        }
        else
        {
          if (*a5) {
            uint64_t v87 = (std::string *)((*a5 & 0xFFFFFFFFFFFFFFFELL) + 8);
          }
          else {
            uint64_t v87 = (std::string *)sub_19E3A0504(a5);
          }
          sub_19E3BCDE0(v11, v53, v87);
        }
        goto LABEL_169;
      case 0xF:
        unint64_t v8 = a6 + 4;
        int v21 = *(_DWORD *)a6;
        if (*(unsigned char *)(a4 + 1))
        {
          int v26 = *(unsigned __int8 *)(a4 + 2);
          unint64_t v27 = *(uint64_t **)(a4 + 24);
          int v28 = 15;
          goto LABEL_134;
        }
        uint64_t v65 = *(void *)(a4 + 24);
        int v66 = 15;
        goto LABEL_136;
      case 0x10:
        unint64_t v8 = a6 + 8;
        uint64_t v41 = *(void *)a6;
        if (*(unsigned char *)(a4 + 1))
        {
          int v54 = *(unsigned __int8 *)(a4 + 2);
          uint64_t v55 = *(uint64_t **)(a4 + 24);
          int v56 = 16;
          goto LABEL_166;
        }
        uint64_t v79 = *(void *)(a4 + 24);
        int v80 = 16;
        goto LABEL_168;
      case 0x11:
        LODWORD(v29) = *a6;
        if ((char)*a6 < 0)
        {
          uint64_t v29 = v29 + (a6[1] << 7) - 128;
          if ((char)a6[1] < 0)
          {
            unint64_t v8 = (unsigned __int8 *)sub_19E3BCEF4((uint64_t)a6, v29);
            if (!v8) {
              goto LABEL_169;
            }
          }
          else
          {
            unint64_t v8 = a6 + 2;
          }
        }
        else
        {
          unint64_t v8 = a6 + 1;
        }
        int v21 = -(v29 & 1) ^ (v29 >> 1);
        if (*(unsigned char *)(a4 + 1))
        {
          int v26 = *(unsigned __int8 *)(a4 + 2);
          unint64_t v27 = *(uint64_t **)(a4 + 24);
          a1 = v12;
          a2 = v11;
          int v28 = 17;
LABEL_134:
          sub_19E3B040C(a1, a2, v28, v26, v21, v27);
        }
        else
        {
          uint64_t v65 = *(void *)(a4 + 24);
          a1 = v12;
          a2 = v11;
          int v66 = 17;
LABEL_136:
          int v82 = v21;
LABEL_137:
          sub_19E3B01F4((uint64_t)a1, a2, v66, v82, v65);
        }
        goto LABEL_169;
      case 0x12:
        unint64_t v57 = *a6;
        if ((char)*a6 < 0)
        {
          unint64_t v57 = v57 + (a6[1] << 7) - 128;
          if ((char)a6[1] < 0)
          {
            unint64_t v8 = (unsigned __int8 *)sub_19E3BCEF4((uint64_t)a6, v57);
            if (!v8) {
              goto LABEL_169;
            }
          }
          else
          {
            unint64_t v8 = a6 + 2;
          }
        }
        else
        {
          unint64_t v8 = a6 + 1;
        }
        uint64_t v41 = -(uint64_t)(v57 & 1) ^ (v57 >> 1);
        if (*(unsigned char *)(a4 + 1))
        {
          int v54 = *(unsigned __int8 *)(a4 + 2);
          uint64_t v55 = *(uint64_t **)(a4 + 24);
          a1 = v12;
          a2 = v11;
          int v56 = 18;
LABEL_166:
          sub_19E3B0968(a1, a2, v56, v54, v41, v55);
        }
        else
        {
          uint64_t v79 = *(void *)(a4 + 24);
          a1 = v12;
          a2 = v11;
          int v80 = 18;
LABEL_168:
          sub_19E3B0750((uint64_t)a1, a2, v80, v41, v79);
        }
LABEL_169:
        uint64_t result = v8;
        break;
      default:
        goto LABEL_169;
    }
  }
  return result;
}

void sub_19E3B6398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_19E3B6444(uint64_t a1, signed int a2, int a3, char *a4, uint64_t *a5)
{
  uint64_t v7 = *(unsigned int **)(a1 + 16);
  if (*(unsigned __int16 *)(a1 + 8) >= 0x101u)
  {
    uint64_t v18 = *((void *)v7 + 1);
    uint64_t v17 = v7 + 2;
    uint64_t v16 = v18;
    if (v18)
    {
      unint64_t v19 = v17;
      do
      {
        int v20 = *(_DWORD *)(v16 + 32);
        BOOL v21 = v20 < a2;
        if (v20 >= a2) {
          uint64_t v22 = (uint64_t *)v16;
        }
        else {
          uint64_t v22 = (uint64_t *)(v16 + 8);
        }
        if (!v21) {
          unint64_t v19 = (void *)v16;
        }
        uint64_t v16 = *v22;
      }
      while (*v22);
      if (v19 != (void *)v17)
      {
        do
        {
          uint64_t v23 = *((unsigned int *)v19 + 8);
          if ((int)v23 >= a3) {
            break;
          }
          a4 = sub_19E3B6574((unsigned char *)v19 + 40, v23, a4, a5);
          uint64_t v24 = (unsigned int *)v19[1];
          if (v24)
          {
            do
            {
              int v25 = v24;
              uint64_t v24 = *(unsigned int **)v24;
            }
            while (v24);
          }
          else
          {
            do
            {
              int v25 = (unsigned int *)v19[2];
              BOOL v26 = *(void *)v25 == (void)v19;
              unint64_t v19 = v25;
            }
            while (!v26);
          }
          unint64_t v19 = v25;
        }
        while (v25 != v17);
      }
    }
  }
  else
  {
    unint64_t v8 = *(unsigned __int16 *)(a1 + 10);
    if (*(_WORD *)(a1 + 10))
    {
      unsigned int v9 = &v7[8 * v8];
      do
      {
        unint64_t v10 = v8 >> 1;
        uint64_t v11 = &v7[8 * (v8 >> 1)];
        signed int v13 = *v11;
        unsigned int v12 = v11 + 8;
        v8 += ~(v8 >> 1);
        if (v13 < a2) {
          uint64_t v7 = v12;
        }
        else {
          unint64_t v8 = v10;
        }
      }
      while (v8);
      while (v7 != v9)
      {
        uint64_t v14 = *v7;
        if ((int)v14 >= a3) {
          break;
        }
        a4 = sub_19E3B6574((unsigned char *)v7 + 8, v14, a4, a5);
        v7 += 8;
      }
    }
  }
  return a4;
}

char *sub_19E3B6574(unsigned char *a1, uint64_t a2, char *a3, uint64_t *a4)
{
  int v5 = a3;
  if (a1[9])
  {
    if (a1[11])
    {
      if (*((_DWORD *)a1 + 3))
      {
        if (*a4 <= (unint64_t)a3) {
          int v5 = sub_19E3AEE48((uint64_t)a4, a3);
        }
        unsigned int v8 = (8 * a2) | 2;
        if (v8 > 0x7F)
        {
          *int v5 = (8 * a2) | 0x82;
          unsigned int v32 = (8 * a2) >> 7;
          if (v8 >> 14)
          {
            unsigned int v9 = v5 + 2;
            do
            {
              *(v9 - 1) = v32 | 0x80;
              unsigned int v33 = v32 >> 7;
              ++v9;
              unsigned int v34 = v32 >> 14;
              v32 >>= 7;
            }
            while (v34);
            *(v9 - 1) = v33;
          }
          else
          {
            v5[1] = v32;
            unsigned int v9 = v5 + 2;
          }
        }
        else
        {
          *int v5 = v8;
          unsigned int v9 = v5 + 1;
        }
        unint64_t v35 = *((int *)a1 + 3);
        if (v35 > 0x7F)
        {
          *unsigned int v9 = v35 | 0x80;
          unint64_t v36 = v35 >> 7;
          if (v35 >> 14)
          {
            int v5 = v9 + 2;
            do
            {
              *(v5 - 1) = v36 | 0x80;
              unint64_t v37 = v36 >> 7;
              ++v5;
              unint64_t v38 = v36 >> 14;
              v36 >>= 7;
            }
            while (v38);
            *(v5 - 1) = v37;
          }
          else
          {
            v9[1] = v36;
            int v5 = v9 + 2;
          }
        }
        else
        {
          *unsigned int v9 = v35;
          int v5 = v9 + 1;
        }
        int v39 = a1[8];
        if ((v39 - 19) <= 0xFFFFFFED)
        {
          sub_19E3AF8D4((uint64_t)v432, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
          float v40 = sub_19E3AF8EC(v432, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
          sub_19E3AFA28((uint64_t)&v431, (const char **)&v40->__r_.__value_.__l.__data_);
          sub_19E3AFA30((uint64_t)v432);
        }
        switch(v39)
        {
          case 1:
            int v63 = *(int **)a1;
            if (**(int **)a1 >= 1)
            {
              int v64 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  int v5 = sub_19E3AEE48((uint64_t)a4, v5);
                  int v63 = *(int **)a1;
                }
                *(void *)int v5 = *(void *)sub_19E3C1F74(v63, v64);
                v5 += 8;
                ++v64;
                int v63 = *(int **)a1;
              }
              while (v64 < **(_DWORD **)a1);
            }
            break;
          case 2:
            uint64_t v65 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              int v66 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  int v5 = sub_19E3AEE48((uint64_t)a4, v5);
                  uint64_t v65 = *(_DWORD **)a1;
                }
                *(_DWORD *)int v5 = *(_DWORD *)sub_19E3C1918(v65, v66);
                v5 += 4;
                ++v66;
                uint64_t v65 = *(_DWORD **)a1;
              }
              while (v66 < **(_DWORD **)a1);
            }
            break;
          case 3:
            int v67 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              int v68 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  int v5 = sub_19E3AEE48((uint64_t)a4, v5);
                  int v67 = *(_DWORD **)a1;
                }
                unint64_t v69 = *(void *)sub_19E3C0C60(v67, v68);
                if (v69 > 0x7F)
                {
                  *int v5 = v69 | 0x80;
                  unint64_t v70 = v69 >> 7;
                  if (v69 >> 14)
                  {
                    v5 += 2;
                    do
                    {
                      *(v5 - 1) = v70 | 0x80;
                      unint64_t v71 = v70 >> 7;
                      ++v5;
                      unint64_t v72 = v70 >> 14;
                      v70 >>= 7;
                    }
                    while (v72);
                    *(v5 - 1) = v71;
                  }
                  else
                  {
                    v5[1] = v70;
                    v5 += 2;
                  }
                }
                else
                {
                  *v5++ = v69;
                }
                ++v68;
                int v67 = *(_DWORD **)a1;
              }
              while (v68 < **(_DWORD **)a1);
            }
            break;
          case 4:
            int v73 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              int v74 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  int v5 = sub_19E3AEE48((uint64_t)a4, v5);
                  int v73 = *(_DWORD **)a1;
                }
                unint64_t v75 = *(void *)sub_19E3C12BC(v73, v74);
                if (v75 > 0x7F)
                {
                  *int v5 = v75 | 0x80;
                  unint64_t v76 = v75 >> 7;
                  if (v75 >> 14)
                  {
                    v5 += 2;
                    do
                    {
                      *(v5 - 1) = v76 | 0x80;
                      unint64_t v77 = v76 >> 7;
                      ++v5;
                      unint64_t v78 = v76 >> 14;
                      v76 >>= 7;
                    }
                    while (v78);
                    *(v5 - 1) = v77;
                  }
                  else
                  {
                    v5[1] = v76;
                    v5 += 2;
                  }
                }
                else
                {
                  *v5++ = v75;
                }
                ++v74;
                int v73 = *(_DWORD **)a1;
              }
              while (v74 < **(_DWORD **)a1);
            }
            break;
          case 5:
            uint64_t v42 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              int v43 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  int v5 = sub_19E3AEE48((uint64_t)a4, v5);
                  uint64_t v42 = *(_DWORD **)a1;
                }
                unint64_t v44 = *(int *)sub_19E3BFFA8(v42, v43);
                if (v44 > 0x7F)
                {
                  *int v5 = v44 | 0x80;
                  unint64_t v45 = v44 >> 7;
                  if (v44 >> 14)
                  {
                    v5 += 2;
                    do
                    {
                      *(v5 - 1) = v45 | 0x80;
                      unint64_t v46 = v45 >> 7;
                      ++v5;
                      unint64_t v47 = v45 >> 14;
                      v45 >>= 7;
                    }
                    while (v47);
                    *(v5 - 1) = v46;
                  }
                  else
                  {
                    v5[1] = v45;
                    v5 += 2;
                  }
                }
                else
                {
                  *v5++ = v44;
                }
                ++v43;
                uint64_t v42 = *(_DWORD **)a1;
              }
              while (v43 < **(_DWORD **)a1);
            }
            break;
          case 6:
            uint64_t v79 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              int v80 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  int v5 = sub_19E3AEE48((uint64_t)a4, v5);
                  uint64_t v79 = *(_DWORD **)a1;
                }
                *(void *)int v5 = *(void *)sub_19E3C12BC(v79, v80);
                v5 += 8;
                ++v80;
                uint64_t v79 = *(_DWORD **)a1;
              }
              while (v80 < **(_DWORD **)a1);
            }
            break;
          case 7:
            int v81 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              int v82 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  int v5 = sub_19E3AEE48((uint64_t)a4, v5);
                  int v81 = *(_DWORD **)a1;
                }
                *(_DWORD *)int v5 = *(_DWORD *)sub_19E3C0604(v81, v82);
                v5 += 4;
                ++v82;
                int v81 = *(_DWORD **)a1;
              }
              while (v82 < **(_DWORD **)a1);
            }
            break;
          case 8:
            int v83 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              int v84 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  int v5 = sub_19E3AEE48((uint64_t)a4, v5);
                  int v83 = *(_DWORD **)a1;
                }
                *v5++ = *(unsigned char *)sub_19E3BF950(v83, v84++);
                int v83 = *(_DWORD **)a1;
              }
              while (v84 < **(_DWORD **)a1);
            }
            break;
          case 9:
          case 10:
          case 11:
          case 12:
            sub_19E3AF8D4((uint64_t)v432, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 1966);
            uint64_t v41 = sub_19E3AF8EC(v432, "Non-primitive types can't be packed.");
            sub_19E3AFA28((uint64_t)&v431, (const char **)&v41->__r_.__value_.__l.__data_);
            sub_19E3AFA30((uint64_t)v432);
            break;
          case 13:
            int v48 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              int v49 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  int v5 = sub_19E3AEE48((uint64_t)a4, v5);
                  int v48 = *(_DWORD **)a1;
                }
                unsigned int v50 = *(_DWORD *)sub_19E3C0604(v48, v49);
                if (v50 > 0x7F)
                {
                  *int v5 = v50 | 0x80;
                  unsigned int v51 = v50 >> 7;
                  if (v50 >> 14)
                  {
                    v5 += 2;
                    do
                    {
                      *(v5 - 1) = v51 | 0x80;
                      unsigned int v52 = v51 >> 7;
                      ++v5;
                      unsigned int v53 = v51 >> 14;
                      v51 >>= 7;
                    }
                    while (v53);
                    *(v5 - 1) = v52;
                  }
                  else
                  {
                    v5[1] = v51;
                    v5 += 2;
                  }
                }
                else
                {
                  *v5++ = v50;
                }
                ++v49;
                int v48 = *(_DWORD **)a1;
              }
              while (v49 < **(_DWORD **)a1);
            }
            break;
          case 14:
            uint64_t v85 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              int v86 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  int v5 = sub_19E3AEE48((uint64_t)a4, v5);
                  uint64_t v85 = *(_DWORD **)a1;
                }
                unint64_t v87 = *(int *)sub_19E3BFFA8(v85, v86);
                if (v87 > 0x7F)
                {
                  *int v5 = v87 | 0x80;
                  unint64_t v88 = v87 >> 7;
                  if (v87 >> 14)
                  {
                    v5 += 2;
                    do
                    {
                      *(v5 - 1) = v88 | 0x80;
                      unint64_t v89 = v88 >> 7;
                      ++v5;
                      unint64_t v90 = v88 >> 14;
                      v88 >>= 7;
                    }
                    while (v90);
                    *(v5 - 1) = v89;
                  }
                  else
                  {
                    v5[1] = v88;
                    v5 += 2;
                  }
                }
                else
                {
                  *v5++ = v87;
                }
                ++v86;
                uint64_t v85 = *(_DWORD **)a1;
              }
              while (v86 < **(_DWORD **)a1);
            }
            break;
          case 15:
            int v54 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              int v55 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  int v5 = sub_19E3AEE48((uint64_t)a4, v5);
                  int v54 = *(_DWORD **)a1;
                }
                *(_DWORD *)int v5 = *(_DWORD *)sub_19E3BFFA8(v54, v55);
                v5 += 4;
                ++v55;
                int v54 = *(_DWORD **)a1;
              }
              while (v55 < **(_DWORD **)a1);
            }
            break;
          case 16:
            int v91 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              int v92 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  int v5 = sub_19E3AEE48((uint64_t)a4, v5);
                  int v91 = *(_DWORD **)a1;
                }
                *(void *)int v5 = *(void *)sub_19E3C0C60(v91, v92);
                v5 += 8;
                ++v92;
                int v91 = *(_DWORD **)a1;
              }
              while (v92 < **(_DWORD **)a1);
            }
            break;
          case 17:
            int v56 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              int v57 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  int v5 = sub_19E3AEE48((uint64_t)a4, v5);
                  int v56 = *(_DWORD **)a1;
                }
                uint64_t v58 = (int *)sub_19E3BFFA8(v56, v57);
                unsigned int v59 = (2 * *v58) ^ (*v58 >> 31);
                if (v59 > 0x7F)
                {
                  *int v5 = v59 | 0x80;
                  unsigned int v60 = v59 >> 7;
                  if (v59 >> 14)
                  {
                    v5 += 2;
                    do
                    {
                      *(v5 - 1) = v60 | 0x80;
                      unsigned int v61 = v60 >> 7;
                      ++v5;
                      unsigned int v62 = v60 >> 14;
                      v60 >>= 7;
                    }
                    while (v62);
                    *(v5 - 1) = v61;
                  }
                  else
                  {
                    v5[1] = v60;
                    v5 += 2;
                  }
                }
                else
                {
                  *v5++ = v59;
                }
                ++v57;
                int v56 = *(_DWORD **)a1;
              }
              while (v57 < **(_DWORD **)a1);
            }
            break;
          case 18:
            uint64_t v93 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              int v94 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  int v5 = sub_19E3AEE48((uint64_t)a4, v5);
                  uint64_t v93 = *(_DWORD **)a1;
                }
                uint64_t v95 = (uint64_t *)sub_19E3C0C60(v93, v94);
                unint64_t v96 = (2 * *v95) ^ (*v95 >> 63);
                if (v96 > 0x7F)
                {
                  *int v5 = v96 | 0x80;
                  unint64_t v97 = v96 >> 7;
                  if (v96 >> 14)
                  {
                    v5 += 2;
                    do
                    {
                      *(v5 - 1) = v97 | 0x80;
                      unint64_t v98 = v97 >> 7;
                      ++v5;
                      unint64_t v99 = v97 >> 14;
                      v97 >>= 7;
                    }
                    while (v99);
                    *(v5 - 1) = v98;
                  }
                  else
                  {
                    v5[1] = v97;
                    v5 += 2;
                  }
                }
                else
                {
                  *v5++ = v96;
                }
                ++v94;
                uint64_t v93 = *(_DWORD **)a1;
              }
              while (v94 < **(_DWORD **)a1);
            }
            break;
          default:
            return v5;
        }
      }
      return v5;
    }
    int v18 = a1[8];
    if ((v18 - 19) <= 0xFFFFFFED)
    {
      sub_19E3AF8D4((uint64_t)v432, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      unint64_t v19 = sub_19E3AF8EC(v432, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19E3AFA28((uint64_t)&v431, (const char **)&v19->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v432);
    }
    switch(v18)
    {
      case 1:
        int v20 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          int v21 = 0;
          unsigned int v22 = 8 * a2;
          unsigned int v23 = (8 * a2) | 1;
          char v24 = (8 * a2) | 0x81;
          unsigned int v25 = (a2 >> 4) & 0x1FFFFFF;
          unsigned int v26 = v22 >> 7;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              int v5 = sub_19E3AEE48((uint64_t)a4, v5);
              int v20 = *(_DWORD **)a1;
            }
            uint64_t v27 = *(void *)sub_19E3C1F74(v20, v21);
            if (v23 > 0x7F)
            {
              *int v5 = v24;
              if (v23 >= 0x4000)
              {
                int v28 = v5 + 2;
                unsigned int v29 = v25;
                do
                {
                  *((unsigned char *)v28 - 1) = v29 | 0x80;
                  unsigned int v30 = v29 >> 7;
                  int v28 = (void *)((char *)v28 + 1);
                  unsigned int v31 = v29 >> 14;
                  v29 >>= 7;
                }
                while (v31);
                *((unsigned char *)v28 - 1) = v30;
              }
              else
              {
                v5[1] = v26;
                int v28 = v5 + 2;
              }
            }
            else
            {
              *int v5 = v23;
              int v28 = v5 + 1;
            }
            *int v28 = v27;
            int v5 = (char *)(v28 + 1);
            ++v21;
            int v20 = *(_DWORD **)a1;
          }
          while (v21 < **(_DWORD **)a1);
        }
        return v5;
      case 2:
        unint64_t v100 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          int v101 = 0;
          unsigned int v102 = (8 * a2) | 5;
          unsigned int v103 = (a2 >> 4) & 0x1FFFFFF;
          unsigned int v104 = (8 * a2) >> 7;
          char v105 = (8 * a2) | 0x85;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              int v5 = sub_19E3AEE48((uint64_t)a4, v5);
              unint64_t v100 = *(_DWORD **)a1;
            }
            int v106 = *(_DWORD *)sub_19E3C1918(v100, v101);
            if (v102 > 0x7F)
            {
              *int v5 = v105;
              if (v102 >= 0x4000)
              {
                uint64_t v107 = v5 + 2;
                unsigned int v108 = v103;
                do
                {
                  *((unsigned char *)v107 - 1) = v108 | 0x80;
                  unsigned int v109 = v108 >> 7;
                  uint64_t v107 = (_DWORD *)((char *)v107 + 1);
                  unsigned int v110 = v108 >> 14;
                  v108 >>= 7;
                }
                while (v110);
                *((unsigned char *)v107 - 1) = v109;
              }
              else
              {
                v5[1] = v104;
                uint64_t v107 = v5 + 2;
              }
            }
            else
            {
              *int v5 = v102;
              uint64_t v107 = v5 + 1;
            }
            *uint64_t v107 = v106;
            int v5 = (char *)(v107 + 1);
            ++v101;
            unint64_t v100 = *(_DWORD **)a1;
          }
          while (v101 < **(_DWORD **)a1);
        }
        return v5;
      case 3:
        char v111 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          int v112 = 0;
          unsigned int v113 = 8 * a2;
          char v114 = (8 * a2) | 0x80;
          unsigned int v115 = (a2 >> 4) & 0x1FFFFFF;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              int v5 = sub_19E3AEE48((uint64_t)a4, v5);
              char v111 = *(_DWORD **)a1;
            }
            unint64_t v116 = *(void *)sub_19E3C0C60(v111, v112);
            if (v113 > 0x7F)
            {
              *int v5 = v114;
              if (v113 >= 0x4000)
              {
                unint64_t v117 = v5 + 2;
                unsigned int v118 = v115;
                do
                {
                  *(v117 - 1) = v118 | 0x80;
                  unsigned int v119 = v118 >> 7;
                  ++v117;
                  unsigned int v120 = v118 >> 14;
                  v118 >>= 7;
                }
                while (v120);
                *(v117 - 1) = v119;
              }
              else
              {
                v5[1] = v113 >> 7;
                unint64_t v117 = v5 + 2;
              }
            }
            else
            {
              unint64_t v117 = v5 + 1;
              *int v5 = v113;
            }
            if (v116 > 0x7F)
            {
              unsigned char *v117 = v116 | 0x80;
              unint64_t v121 = v116 >> 7;
              if (v116 >> 14)
              {
                int v5 = v117 + 2;
                do
                {
                  *(v5 - 1) = v121 | 0x80;
                  unint64_t v122 = v121 >> 7;
                  ++v5;
                  unint64_t v123 = v121 >> 14;
                  v121 >>= 7;
                }
                while (v123);
                *(v5 - 1) = v122;
              }
              else
              {
                v117[1] = v121;
                int v5 = v117 + 2;
              }
            }
            else
            {
              unsigned char *v117 = v116;
              int v5 = v117 + 1;
            }
            ++v112;
            char v111 = *(_DWORD **)a1;
          }
          while (v112 < **(_DWORD **)a1);
        }
        return v5;
      case 4:
        int v124 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          int v125 = 0;
          unsigned int v126 = 8 * a2;
          char v127 = (8 * a2) | 0x80;
          unsigned int v128 = (a2 >> 4) & 0x1FFFFFF;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              int v5 = sub_19E3AEE48((uint64_t)a4, v5);
              int v124 = *(_DWORD **)a1;
            }
            unint64_t v129 = *(void *)sub_19E3C12BC(v124, v125);
            if (v126 > 0x7F)
            {
              *int v5 = v127;
              if (v126 >= 0x4000)
              {
                int v130 = v5 + 2;
                unsigned int v131 = v128;
                do
                {
                  *(v130 - 1) = v131 | 0x80;
                  unsigned int v132 = v131 >> 7;
                  ++v130;
                  unsigned int v133 = v131 >> 14;
                  v131 >>= 7;
                }
                while (v133);
                *(v130 - 1) = v132;
              }
              else
              {
                v5[1] = v126 >> 7;
                int v130 = v5 + 2;
              }
            }
            else
            {
              int v130 = v5 + 1;
              *int v5 = v126;
            }
            if (v129 > 0x7F)
            {
              *int v130 = v129 | 0x80;
              unint64_t v134 = v129 >> 7;
              if (v129 >> 14)
              {
                int v5 = v130 + 2;
                do
                {
                  *(v5 - 1) = v134 | 0x80;
                  unint64_t v135 = v134 >> 7;
                  ++v5;
                  unint64_t v136 = v134 >> 14;
                  v134 >>= 7;
                }
                while (v136);
                *(v5 - 1) = v135;
              }
              else
              {
                v130[1] = v134;
                int v5 = v130 + 2;
              }
            }
            else
            {
              *int v130 = v129;
              int v5 = v130 + 1;
            }
            ++v125;
            int v124 = *(_DWORD **)a1;
          }
          while (v125 < **(_DWORD **)a1);
        }
        return v5;
      case 5:
        CFIndex v137 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          int v138 = 0;
          unsigned int v139 = 8 * a2;
          char v140 = (8 * a2) | 0x80;
          unsigned int v141 = (a2 >> 4) & 0x1FFFFFF;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              int v5 = sub_19E3AEE48((uint64_t)a4, v5);
              CFIndex v137 = *(_DWORD **)a1;
            }
            unint64_t v142 = *(int *)sub_19E3BFFA8(v137, v138);
            if (v139 > 0x7F)
            {
              *int v5 = v140;
              if (v139 >= 0x4000)
              {
                int v143 = v5 + 2;
                unsigned int v144 = v141;
                do
                {
                  *(v143 - 1) = v144 | 0x80;
                  unsigned int v145 = v144 >> 7;
                  ++v143;
                  unsigned int v146 = v144 >> 14;
                  v144 >>= 7;
                }
                while (v146);
                *(v143 - 1) = v145;
              }
              else
              {
                v5[1] = v139 >> 7;
                int v143 = v5 + 2;
              }
            }
            else
            {
              int v143 = v5 + 1;
              *int v5 = v139;
            }
            if (v142 > 0x7F)
            {
              *int v143 = v142 | 0x80;
              unint64_t v147 = v142 >> 7;
              if (v142 >> 14)
              {
                int v5 = v143 + 2;
                do
                {
                  *(v5 - 1) = v147 | 0x80;
                  unint64_t v148 = v147 >> 7;
                  ++v5;
                  unint64_t v149 = v147 >> 14;
                  v147 >>= 7;
                }
                while (v149);
                *(v5 - 1) = v148;
              }
              else
              {
                v143[1] = v147;
                int v5 = v143 + 2;
              }
            }
            else
            {
              *int v143 = v142;
              int v5 = v143 + 1;
            }
            ++v138;
            CFIndex v137 = *(_DWORD **)a1;
          }
          while (v138 < **(_DWORD **)a1);
        }
        return v5;
      case 6:
        int v150 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          int v151 = 0;
          unsigned int v152 = 8 * a2;
          unsigned int v153 = (8 * a2) | 1;
          char v154 = (8 * a2) | 0x81;
          unsigned int v155 = (a2 >> 4) & 0x1FFFFFF;
          unsigned int v156 = v152 >> 7;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              int v5 = sub_19E3AEE48((uint64_t)a4, v5);
              int v150 = *(_DWORD **)a1;
            }
            uint64_t v157 = *(void *)sub_19E3C12BC(v150, v151);
            if (v153 > 0x7F)
            {
              *int v5 = v154;
              if (v153 >= 0x4000)
              {
                int v158 = v5 + 2;
                unsigned int v159 = v155;
                do
                {
                  *((unsigned char *)v158 - 1) = v159 | 0x80;
                  unsigned int v160 = v159 >> 7;
                  int v158 = (void *)((char *)v158 + 1);
                  unsigned int v161 = v159 >> 14;
                  v159 >>= 7;
                }
                while (v161);
                *((unsigned char *)v158 - 1) = v160;
              }
              else
              {
                v5[1] = v156;
                int v158 = v5 + 2;
              }
            }
            else
            {
              *int v5 = v153;
              int v158 = v5 + 1;
            }
            *int v158 = v157;
            int v5 = (char *)(v158 + 1);
            ++v151;
            int v150 = *(_DWORD **)a1;
          }
          while (v151 < **(_DWORD **)a1);
        }
        return v5;
      case 7:
        int v162 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          int v163 = 0;
          unsigned int v164 = (8 * a2) | 5;
          unsigned int v165 = (a2 >> 4) & 0x1FFFFFF;
          unsigned int v166 = (8 * a2) >> 7;
          char v167 = (8 * a2) | 0x85;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              int v5 = sub_19E3AEE48((uint64_t)a4, v5);
              int v162 = *(_DWORD **)a1;
            }
            int v168 = *(_DWORD *)sub_19E3C0604(v162, v163);
            if (v164 > 0x7F)
            {
              *int v5 = v167;
              if (v164 >= 0x4000)
              {
                uint64_t v169 = v5 + 2;
                unsigned int v170 = v165;
                do
                {
                  *((unsigned char *)v169 - 1) = v170 | 0x80;
                  unsigned int v171 = v170 >> 7;
                  uint64_t v169 = (_DWORD *)((char *)v169 + 1);
                  unsigned int v172 = v170 >> 14;
                  v170 >>= 7;
                }
                while (v172);
                *((unsigned char *)v169 - 1) = v171;
              }
              else
              {
                v5[1] = v166;
                uint64_t v169 = v5 + 2;
              }
            }
            else
            {
              *int v5 = v164;
              uint64_t v169 = v5 + 1;
            }
            _DWORD *v169 = v168;
            int v5 = (char *)(v169 + 1);
            ++v163;
            int v162 = *(_DWORD **)a1;
          }
          while (v163 < **(_DWORD **)a1);
        }
        return v5;
      case 8:
        uint64_t v173 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          int v174 = 0;
          unsigned int v175 = 8 * a2;
          char v176 = (8 * a2) | 0x80;
          unsigned int v177 = (a2 >> 4) & 0x1FFFFFF;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              int v5 = sub_19E3AEE48((uint64_t)a4, v5);
              uint64_t v173 = *(_DWORD **)a1;
            }
            char v178 = *(unsigned char *)sub_19E3BF950(v173, v174);
            if (v175 > 0x7F)
            {
              *int v5 = v176;
              if (v175 >= 0x4000)
              {
                int v179 = v5 + 2;
                unsigned int v180 = v177;
                do
                {
                  *(v179 - 1) = v180 | 0x80;
                  unsigned int v181 = v180 >> 7;
                  ++v179;
                  unsigned int v182 = v180 >> 14;
                  v180 >>= 7;
                }
                while (v182);
                *(v179 - 1) = v181;
              }
              else
              {
                v5[1] = v175 >> 7;
                int v179 = v5 + 2;
              }
            }
            else
            {
              *int v5 = v175;
              int v179 = v5 + 1;
            }
            unsigned char *v179 = v178;
            int v5 = v179 + 1;
            ++v174;
            uint64_t v173 = *(_DWORD **)a1;
          }
          while (v174 < **(_DWORD **)a1);
        }
        return v5;
      case 9:
        uint64_t v183 = *(void *)a1;
        if (*(int *)(*(void *)a1 + 8) < 1) {
          return v5;
        }
        int v184 = 0;
        unsigned int v185 = 8 * a2;
        uint64_t v186 = 4;
        if (((a2 >> 25) & 0xF) != 0) {
          uint64_t v186 = 5;
        }
        unsigned int v187 = (8 * a2) | 2;
        uint64_t v188 = 1;
        if (v185 >= 0x80) {
          uint64_t v188 = 2;
        }
        if (v185 < 0x200000) {
          uint64_t v186 = 3;
        }
        if (v185 >= 0x4000) {
          uint64_t v189 = v186;
        }
        else {
          uint64_t v189 = v188;
        }
        unsigned int v429 = v185 >> 7;
        while (1)
        {
          if (*a4 <= (unint64_t)v5)
          {
            int v5 = sub_19E3AEE48((uint64_t)a4, v5);
            uint64_t v183 = *(void *)a1;
          }
          uint64_t v190 = sub_19E3A9CB4(v183, v184);
          if (*(char *)(v190 + 23) < 0)
          {
            int64_t v191 = *(void *)(v190 + 8);
            if (v191 > 127) {
              goto LABEL_326;
            }
          }
          else
          {
            int64_t v191 = *(unsigned __int8 *)(v190 + 23);
          }
          if ((uint64_t)(*a4 + ~(unint64_t)&v5[v189] + 16) >= v191)
          {
            if (v187 > 0x7F)
            {
              *int v5 = (8 * a2) | 0x82;
              if (v187 >= 0x4000)
              {
                CFTypeID v192 = v5 + 2;
                unsigned int v193 = (a2 >> 4) & 0x1FFFFFF;
                do
                {
                  *(v192 - 1) = v193 | 0x80;
                  unsigned int v194 = v193 >> 7;
                  ++v192;
                  unsigned int v195 = v193 >> 14;
                  v193 >>= 7;
                }
                while (v195);
                *(v192 - 1) = v194;
              }
              else
              {
                v5[1] = v429;
                CFTypeID v192 = v5 + 2;
              }
            }
            else
            {
              CFTypeID v192 = v5 + 1;
              *int v5 = v187;
            }
            *CFTypeID v192 = v191;
            CFLocaleRef v196 = v192 + 1;
            if (*(char *)(v190 + 23) >= 0) {
              CFStringRef v197 = (const void *)v190;
            }
            else {
              CFStringRef v197 = *(const void **)v190;
            }
            memcpy(v196, v197, v191);
            int v5 = &v196[v191];
            goto LABEL_324;
          }
LABEL_326:
          int v5 = sub_19E3AF3B8(a4, a2, v190, v5);
LABEL_324:
          ++v184;
          uint64_t v183 = *(void *)a1;
          if (v184 >= *(_DWORD *)(*(void *)a1 + 8)) {
            return v5;
          }
        }
      case 10:
        uint64_t v198 = *(void *)a1;
        if (*(int *)(*(void *)a1 + 8) >= 1)
        {
          int v199 = 0;
          unsigned int v200 = (8 * a2) | 3;
          char v201 = (8 * a2) | 0x83;
          unsigned int v202 = (a2 >> 4) & 0x1FFFFFF;
          unsigned int v203 = (8 * a2) | 4;
          unsigned int v204 = (8 * a2) >> 7;
          char v205 = (8 * a2) | 0x84;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              int v5 = sub_19E3AEE48((uint64_t)a4, v5);
              uint64_t v198 = *(void *)a1;
            }
            uint64_t v206 = sub_19E3BA2D4(v198, v199);
            if (v200 > 0x7F)
            {
              *int v5 = v201;
              if (v200 >= 0x4000)
              {
                CFTypeID v207 = v5 + 2;
                unsigned int v208 = v202;
                do
                {
                  *(v207 - 1) = v208 | 0x80;
                  unsigned int v209 = v208 >> 7;
                  ++v207;
                  unsigned int v210 = v208 >> 14;
                  v208 >>= 7;
                }
                while (v210);
                *(v207 - 1) = v209;
              }
              else
              {
                v5[1] = v204;
                CFTypeID v207 = v5 + 2;
              }
            }
            else
            {
              CFTypeID v207 = v5 + 1;
              *int v5 = v200;
            }
            v211 = (char *)(*(uint64_t (**)(uint64_t, char *, uint64_t *))(*(void *)v206 + 96))(v206, v207, a4);
            if (*a4 <= (unint64_t)v211) {
              v211 = sub_19E3AEE48((uint64_t)a4, v211);
            }
            if (v203 > 0x7F)
            {
              char *v211 = v205;
              if (v203 >= 0x4000)
              {
                int v5 = v211 + 2;
                unsigned int v212 = v202;
                do
                {
                  *(v5 - 1) = v212 | 0x80;
                  unsigned int v213 = v212 >> 7;
                  ++v5;
                  unsigned int v214 = v212 >> 14;
                  v212 >>= 7;
                }
                while (v214);
                *(v5 - 1) = v213;
              }
              else
              {
                v211[1] = v204;
                int v5 = v211 + 2;
              }
            }
            else
            {
              int v5 = v211 + 1;
              char *v211 = v203;
            }
            ++v199;
            uint64_t v198 = *(void *)a1;
          }
          while (v199 < *(_DWORD *)(*(void *)a1 + 8));
        }
        return v5;
      case 11:
        uint64_t v215 = *(void *)a1;
        if (*(int *)(*(void *)a1 + 8) >= 1)
        {
          int v216 = 0;
          unsigned int v217 = (8 * a2) | 2;
          unsigned int v218 = (a2 >> 4) & 0x1FFFFFF;
          unsigned int v219 = (8 * a2) >> 7;
          char v220 = (8 * a2) | 0x82;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              int v5 = sub_19E3AEE48((uint64_t)a4, v5);
              uint64_t v215 = *(void *)a1;
            }
            uint64_t v221 = sub_19E3BA2D4(v215, v216);
            uint64_t v222 = v221;
            if (v217 > 0x7F)
            {
              *int v5 = v220;
              if (v217 >= 0x4000)
              {
                CFStringRef v223 = v5 + 2;
                unsigned int v224 = v218;
                do
                {
                  *(v223 - 1) = v224 | 0x80;
                  unsigned int v225 = v224 >> 7;
                  ++v223;
                  unsigned int v226 = v224 >> 14;
                  v224 >>= 7;
                }
                while (v226);
                *(v223 - 1) = v225;
              }
              else
              {
                v5[1] = v219;
                CFStringRef v223 = v5 + 2;
              }
            }
            else
            {
              CFStringRef v223 = v5 + 1;
              *int v5 = v217;
            }
            unsigned int v227 = (*(uint64_t (**)(uint64_t))(*(void *)v221 + 80))(v221);
            if (v227 > 0x7F)
            {
              *CFStringRef v223 = v227 | 0x80;
              unsigned int v229 = v227 >> 7;
              if (v227 >> 14)
              {
                unsigned int v228 = v223 + 2;
                do
                {
                  *(v228 - 1) = v229 | 0x80;
                  unsigned int v230 = v229 >> 7;
                  ++v228;
                  unsigned int v231 = v229 >> 14;
                  v229 >>= 7;
                }
                while (v231);
                *(v228 - 1) = v230;
              }
              else
              {
                v223[1] = v229;
                unsigned int v228 = v223 + 2;
              }
            }
            else
            {
              *CFStringRef v223 = v227;
              unsigned int v228 = v223 + 1;
            }
            int v5 = (char *)(*(uint64_t (**)(uint64_t, unsigned char *, uint64_t *))(*(void *)v222 + 96))(v222, v228, a4);
            ++v216;
            uint64_t v215 = *(void *)a1;
          }
          while (v216 < *(_DWORD *)(*(void *)a1 + 8));
        }
        return v5;
      case 12:
        uint64_t v232 = *(void *)a1;
        if (*(int *)(*(void *)a1 + 8) < 1) {
          return v5;
        }
        int v233 = 0;
        unsigned int v234 = 8 * a2;
        uint64_t v235 = 4;
        if (((a2 >> 25) & 0xF) != 0) {
          uint64_t v235 = 5;
        }
        unsigned int v236 = (8 * a2) | 2;
        uint64_t v237 = 1;
        if (v234 >= 0x80) {
          uint64_t v237 = 2;
        }
        if (v234 < 0x200000) {
          uint64_t v235 = 3;
        }
        if (v234 >= 0x4000) {
          uint64_t v238 = v235;
        }
        else {
          uint64_t v238 = v237;
        }
        unsigned int v430 = v234 >> 7;
        break;
      case 13:
        int v247 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          int v248 = 0;
          unsigned int v249 = 8 * a2;
          char v250 = (8 * a2) | 0x80;
          unsigned int v251 = (a2 >> 4) & 0x1FFFFFF;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              int v5 = sub_19E3AEE48((uint64_t)a4, v5);
              int v247 = *(_DWORD **)a1;
            }
            unsigned int v252 = *(_DWORD *)sub_19E3C0604(v247, v248);
            if (v249 > 0x7F)
            {
              *int v5 = v250;
              if (v249 >= 0x4000)
              {
                v253 = v5 + 2;
                unsigned int v254 = v251;
                do
                {
                  *(v253 - 1) = v254 | 0x80;
                  unsigned int v255 = v254 >> 7;
                  ++v253;
                  unsigned int v256 = v254 >> 14;
                  v254 >>= 7;
                }
                while (v256);
                *(v253 - 1) = v255;
              }
              else
              {
                v5[1] = v249 >> 7;
                v253 = v5 + 2;
              }
            }
            else
            {
              v253 = v5 + 1;
              *int v5 = v249;
            }
            if (v252 > 0x7F)
            {
              unsigned char *v253 = v252 | 0x80;
              unsigned int v257 = v252 >> 7;
              if (v252 >> 14)
              {
                int v5 = v253 + 2;
                do
                {
                  *(v5 - 1) = v257 | 0x80;
                  unsigned int v258 = v257 >> 7;
                  ++v5;
                  unsigned int v259 = v257 >> 14;
                  v257 >>= 7;
                }
                while (v259);
                *(v5 - 1) = v258;
              }
              else
              {
                v253[1] = v257;
                int v5 = v253 + 2;
              }
            }
            else
            {
              unsigned char *v253 = v252;
              int v5 = v253 + 1;
            }
            ++v248;
            int v247 = *(_DWORD **)a1;
          }
          while (v248 < **(_DWORD **)a1);
        }
        return v5;
      case 14:
        CFDictionaryRef v260 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          int v261 = 0;
          unsigned int v262 = 8 * a2;
          char v263 = (8 * a2) | 0x80;
          unsigned int v264 = (a2 >> 4) & 0x1FFFFFF;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              int v5 = sub_19E3AEE48((uint64_t)a4, v5);
              CFDictionaryRef v260 = *(_DWORD **)a1;
            }
            unint64_t v265 = *(int *)sub_19E3BFFA8(v260, v261);
            if (v262 > 0x7F)
            {
              *int v5 = v263;
              if (v262 >= 0x4000)
              {
                std::string v266 = v5 + 2;
                unsigned int v267 = v264;
                do
                {
                  *(v266 - 1) = v267 | 0x80;
                  unsigned int v268 = v267 >> 7;
                  ++v266;
                  unsigned int v269 = v267 >> 14;
                  v267 >>= 7;
                }
                while (v269);
                *(v266 - 1) = v268;
              }
              else
              {
                v5[1] = v262 >> 7;
                std::string v266 = v5 + 2;
              }
            }
            else
            {
              std::string v266 = v5 + 1;
              *int v5 = v262;
            }
            if (v265 > 0x7F)
            {
              *std::string v266 = v265 | 0x80;
              unint64_t v270 = v265 >> 7;
              if (v265 >> 14)
              {
                int v5 = v266 + 2;
                do
                {
                  *(v5 - 1) = v270 | 0x80;
                  unint64_t v271 = v270 >> 7;
                  ++v5;
                  unint64_t v272 = v270 >> 14;
                  v270 >>= 7;
                }
                while (v272);
                *(v5 - 1) = v271;
              }
              else
              {
                v266[1] = v270;
                int v5 = v266 + 2;
              }
            }
            else
            {
              *std::string v266 = v265;
              int v5 = v266 + 1;
            }
            ++v261;
            CFDictionaryRef v260 = *(_DWORD **)a1;
          }
          while (v261 < **(_DWORD **)a1);
        }
        return v5;
      case 15:
        v273 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          int v274 = 0;
          unsigned int v275 = (8 * a2) | 5;
          unsigned int v276 = (a2 >> 4) & 0x1FFFFFF;
          unsigned int v277 = (8 * a2) >> 7;
          char v278 = (8 * a2) | 0x85;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              int v5 = sub_19E3AEE48((uint64_t)a4, v5);
              v273 = *(_DWORD **)a1;
            }
            int v279 = *(_DWORD *)sub_19E3BFFA8(v273, v274);
            if (v275 > 0x7F)
            {
              *int v5 = v278;
              if (v275 >= 0x4000)
              {
                v280 = v5 + 2;
                unsigned int v281 = v276;
                do
                {
                  *((unsigned char *)v280 - 1) = v281 | 0x80;
                  unsigned int v282 = v281 >> 7;
                  v280 = (_DWORD *)((char *)v280 + 1);
                  unsigned int v283 = v281 >> 14;
                  v281 >>= 7;
                }
                while (v283);
                *((unsigned char *)v280 - 1) = v282;
              }
              else
              {
                v5[1] = v277;
                v280 = v5 + 2;
              }
            }
            else
            {
              *int v5 = v275;
              v280 = v5 + 1;
            }
            _DWORD *v280 = v279;
            int v5 = (char *)(v280 + 1);
            ++v274;
            v273 = *(_DWORD **)a1;
          }
          while (v274 < **(_DWORD **)a1);
        }
        return v5;
      case 16:
        v284 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          int v285 = 0;
          unsigned int v286 = 8 * a2;
          unsigned int v287 = (8 * a2) | 1;
          char v288 = (8 * a2) | 0x81;
          unsigned int v289 = (a2 >> 4) & 0x1FFFFFF;
          unsigned int v290 = v286 >> 7;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              int v5 = sub_19E3AEE48((uint64_t)a4, v5);
              v284 = *(_DWORD **)a1;
            }
            uint64_t v291 = *(void *)sub_19E3C0C60(v284, v285);
            if (v287 > 0x7F)
            {
              *int v5 = v288;
              if (v287 >= 0x4000)
              {
                v292 = v5 + 2;
                unsigned int v293 = v289;
                do
                {
                  *((unsigned char *)v292 - 1) = v293 | 0x80;
                  unsigned int v294 = v293 >> 7;
                  v292 = (void *)((char *)v292 + 1);
                  unsigned int v295 = v293 >> 14;
                  v293 >>= 7;
                }
                while (v295);
                *((unsigned char *)v292 - 1) = v294;
              }
              else
              {
                v5[1] = v290;
                v292 = v5 + 2;
              }
            }
            else
            {
              *int v5 = v287;
              v292 = v5 + 1;
            }
            void *v292 = v291;
            int v5 = (char *)(v292 + 1);
            ++v285;
            v284 = *(_DWORD **)a1;
          }
          while (v285 < **(_DWORD **)a1);
        }
        return v5;
      case 17:
        v296 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          int v297 = 0;
          unsigned int v298 = 8 * a2;
          char v299 = (8 * a2) | 0x80;
          unsigned int v300 = (a2 >> 4) & 0x1FFFFFF;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              int v5 = sub_19E3AEE48((uint64_t)a4, v5);
              v296 = *(_DWORD **)a1;
            }
            int v301 = *(_DWORD *)sub_19E3BFFA8(v296, v297);
            if (v298 > 0x7F)
            {
              *int v5 = v299;
              if (v298 >= 0x4000)
              {
                v302 = v5 + 2;
                unsigned int v303 = v300;
                do
                {
                  *(v302 - 1) = v303 | 0x80;
                  unsigned int v304 = v303 >> 7;
                  ++v302;
                  unsigned int v305 = v303 >> 14;
                  v303 >>= 7;
                }
                while (v305);
                *(v302 - 1) = v304;
              }
              else
              {
                v5[1] = v298 >> 7;
                v302 = v5 + 2;
              }
            }
            else
            {
              v302 = v5 + 1;
              *int v5 = v298;
            }
            unsigned int v306 = (2 * v301) ^ (v301 >> 31);
            if (v306 > 0x7F)
            {
              unsigned char *v302 = v306 | 0x80;
              unsigned int v307 = v306 >> 7;
              if (v306 >> 14)
              {
                int v5 = v302 + 2;
                do
                {
                  *(v5 - 1) = v307 | 0x80;
                  unsigned int v308 = v307 >> 7;
                  ++v5;
                  unsigned int v309 = v307 >> 14;
                  v307 >>= 7;
                }
                while (v309);
                *(v5 - 1) = v308;
              }
              else
              {
                v302[1] = v307;
                int v5 = v302 + 2;
              }
            }
            else
            {
              unsigned char *v302 = v306;
              int v5 = v302 + 1;
            }
            ++v297;
            v296 = *(_DWORD **)a1;
          }
          while (v297 < **(_DWORD **)a1);
        }
        return v5;
      case 18:
        v310 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          int v311 = 0;
          unsigned int v312 = 8 * a2;
          char v313 = (8 * a2) | 0x80;
          unsigned int v314 = (a2 >> 4) & 0x1FFFFFF;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              int v5 = sub_19E3AEE48((uint64_t)a4, v5);
              v310 = *(_DWORD **)a1;
            }
            uint64_t v315 = *(void *)sub_19E3C0C60(v310, v311);
            if (v312 > 0x7F)
            {
              *int v5 = v313;
              if (v312 >= 0x4000)
              {
                v316 = v5 + 2;
                unsigned int v317 = v314;
                do
                {
                  *(v316 - 1) = v317 | 0x80;
                  unsigned int v318 = v317 >> 7;
                  ++v316;
                  unsigned int v319 = v317 >> 14;
                  v317 >>= 7;
                }
                while (v319);
                *(v316 - 1) = v318;
              }
              else
              {
                v5[1] = v312 >> 7;
                v316 = v5 + 2;
              }
            }
            else
            {
              v316 = v5 + 1;
              *int v5 = v312;
            }
            unint64_t v320 = (2 * v315) ^ (v315 >> 63);
            if (v320 > 0x7F)
            {
              unsigned char *v316 = v320 | 0x80;
              unint64_t v321 = v320 >> 7;
              if (v320 >> 14)
              {
                int v5 = v316 + 2;
                do
                {
                  *(v5 - 1) = v321 | 0x80;
                  unint64_t v322 = v321 >> 7;
                  ++v5;
                  unint64_t v323 = v321 >> 14;
                  v321 >>= 7;
                }
                while (v323);
                *(v5 - 1) = v322;
              }
              else
              {
                v316[1] = v321;
                int v5 = v316 + 2;
              }
            }
            else
            {
              unsigned char *v316 = v320;
              int v5 = v316 + 1;
            }
            ++v311;
            v310 = *(_DWORD **)a1;
          }
          while (v311 < **(_DWORD **)a1);
        }
        return v5;
      default:
        return v5;
    }
    while (1)
    {
      if (*a4 <= (unint64_t)v5)
      {
        int v5 = sub_19E3AEE48((uint64_t)a4, v5);
        uint64_t v232 = *(void *)a1;
      }
      uint64_t v239 = sub_19E3A9CB4(v232, v233);
      if (*(char *)(v239 + 23) < 0)
      {
        int64_t v240 = *(void *)(v239 + 8);
        if (v240 > 127) {
          goto LABEL_399;
        }
      }
      else
      {
        int64_t v240 = *(unsigned __int8 *)(v239 + 23);
      }
      if ((uint64_t)(*a4 + ~(unint64_t)&v5[v238] + 16) >= v240)
      {
        if (v236 > 0x7F)
        {
          *int v5 = (8 * a2) | 0x82;
          if (v236 >= 0x4000)
          {
            CFStringRef v241 = v5 + 2;
            unsigned int v242 = (a2 >> 4) & 0x1FFFFFF;
            do
            {
              *(v241 - 1) = v242 | 0x80;
              unsigned int v243 = v242 >> 7;
              ++v241;
              unsigned int v244 = v242 >> 14;
              v242 >>= 7;
            }
            while (v244);
            *(v241 - 1) = v243;
          }
          else
          {
            v5[1] = v430;
            CFStringRef v241 = v5 + 2;
          }
        }
        else
        {
          CFStringRef v241 = v5 + 1;
          *int v5 = v236;
        }
        *CFStringRef v241 = v240;
        size_t v245 = v241 + 1;
        if (*(char *)(v239 + 23) >= 0) {
          v246 = (const void *)v239;
        }
        else {
          v246 = *(const void **)v239;
        }
        memcpy(v245, v246, v240);
        int v5 = &v245[v240];
        goto LABEL_397;
      }
LABEL_399:
      int v5 = sub_19E3AF3B8(a4, a2, v239, v5);
LABEL_397:
      ++v233;
      uint64_t v232 = *(void *)a1;
      if (v233 >= *(_DWORD *)(*(void *)a1 + 8)) {
        return v5;
      }
    }
  }
  if (a1[10]) {
    return v5;
  }
  int v10 = a1[8];
  if ((v10 - 19) <= 0xFFFFFFED)
  {
    sub_19E3AF8D4((uint64_t)v432, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
    uint64_t v11 = sub_19E3AF8EC(v432, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
    sub_19E3AFA28((uint64_t)&v431, (const char **)&v11->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v432);
  }
  switch(v10)
  {
    case 1:
      if (*a4 <= (unint64_t)v5) {
        int v5 = sub_19E3AEE48((uint64_t)a4, v5);
      }
      uint64_t v12 = *(void *)a1;
      unsigned int v13 = (8 * a2) | 1;
      if (v13 <= 0x7F) {
        goto LABEL_575;
      }
      *int v5 = (8 * a2) | 0x81;
      unsigned int v14 = (8 * a2) >> 7;
      if (!(v13 >> 14)) {
        goto LABEL_602;
      }
      uint64_t v15 = v5 + 2;
      do
      {
        *((unsigned char *)v15 - 1) = v14 | 0x80;
        unsigned int v16 = v14 >> 7;
        uint64_t v15 = (void *)((char *)v15 + 1);
        unsigned int v17 = v14 >> 14;
        v14 >>= 7;
      }
      while (v17);
      goto LABEL_693;
    case 2:
      if (*a4 <= (unint64_t)v5) {
        int v5 = sub_19E3AEE48((uint64_t)a4, v5);
      }
      int v324 = *(_DWORD *)a1;
      unsigned int v325 = (8 * a2) | 5;
      if (v325 <= 0x7F) {
        goto LABEL_571;
      }
      *int v5 = (8 * a2) | 0x85;
      unsigned int v326 = (8 * a2) >> 7;
      if (!(v325 >> 14)) {
        goto LABEL_600;
      }
      v327 = v5 + 2;
      do
      {
        *((unsigned char *)v327 - 1) = v326 | 0x80;
        unsigned int v328 = v326 >> 7;
        v327 = (_DWORD *)((char *)v327 + 1);
        unsigned int v329 = v326 >> 14;
        v326 >>= 7;
      }
      while (v329);
      goto LABEL_689;
    case 3:
      if (*a4 <= (unint64_t)v5) {
        int v5 = sub_19E3AEE48((uint64_t)a4, v5);
      }
      unint64_t v330 = *(void *)a1;
      unsigned int v331 = 8 * a2;
      if ((8 * a2) > 0x7F)
      {
        *int v5 = v331 | 0x80;
        unsigned int v355 = v331 >> 7;
        if (v331 >> 14)
        {
          v332 = v5 + 2;
          do
          {
            *(v332 - 1) = v355 | 0x80;
            unsigned int v380 = v355 >> 7;
            ++v332;
            unsigned int v381 = v355 >> 14;
            v355 >>= 7;
          }
          while (v381);
          *(v332 - 1) = v380;
        }
        else
        {
          v5[1] = v355;
          v332 = v5 + 2;
        }
      }
      else
      {
        *int v5 = v331;
        v332 = v5 + 1;
      }
      if (v330 <= 0x7F) {
        goto LABEL_684;
      }
      char *v332 = v330 | 0x80;
      unint64_t v382 = v330 >> 7;
      if (!(v330 >> 14)) {
        goto LABEL_686;
      }
      int v5 = v332 + 2;
      do
      {
        *(v5 - 1) = v382 | 0x80;
        unint64_t v383 = v382 >> 7;
        ++v5;
        unint64_t v384 = v382 >> 14;
        v382 >>= 7;
      }
      while (v384);
      goto LABEL_718;
    case 4:
      if (*a4 <= (unint64_t)v5) {
        int v5 = sub_19E3AEE48((uint64_t)a4, v5);
      }
      unint64_t v330 = *(void *)a1;
      unsigned int v333 = 8 * a2;
      if ((8 * a2) > 0x7F)
      {
        *int v5 = v333 | 0x80;
        unsigned int v356 = v333 >> 7;
        if (v333 >> 14)
        {
          v332 = v5 + 2;
          do
          {
            *(v332 - 1) = v356 | 0x80;
            unsigned int v385 = v356 >> 7;
            ++v332;
            unsigned int v386 = v356 >> 14;
            v356 >>= 7;
          }
          while (v386);
          *(v332 - 1) = v385;
        }
        else
        {
          v5[1] = v356;
          v332 = v5 + 2;
        }
      }
      else
      {
        *int v5 = v333;
        v332 = v5 + 1;
      }
      if (v330 <= 0x7F) {
        goto LABEL_684;
      }
      char *v332 = v330 | 0x80;
      unint64_t v382 = v330 >> 7;
      if (!(v330 >> 14)) {
        goto LABEL_686;
      }
      int v5 = v332 + 2;
      do
      {
        *(v5 - 1) = v382 | 0x80;
        unint64_t v383 = v382 >> 7;
        ++v5;
        unint64_t v387 = v382 >> 14;
        v382 >>= 7;
      }
      while (v387);
      goto LABEL_718;
    case 5:
      if (*a4 <= (unint64_t)v5) {
        int v5 = sub_19E3AEE48((uint64_t)a4, v5);
      }
      unint64_t v330 = *(int *)a1;
      unsigned int v334 = 8 * a2;
      if ((8 * a2) > 0x7F)
      {
        *int v5 = v334 | 0x80;
        unsigned int v357 = v334 >> 7;
        if (v334 >> 14)
        {
          v332 = v5 + 2;
          do
          {
            *(v332 - 1) = v357 | 0x80;
            unsigned int v388 = v357 >> 7;
            ++v332;
            unsigned int v389 = v357 >> 14;
            v357 >>= 7;
          }
          while (v389);
          *(v332 - 1) = v388;
        }
        else
        {
          v5[1] = v357;
          v332 = v5 + 2;
        }
      }
      else
      {
        *int v5 = v334;
        v332 = v5 + 1;
      }
      if (v330 <= 0x7F) {
        goto LABEL_684;
      }
      char *v332 = v330 | 0x80;
      unint64_t v382 = v330 >> 7;
      if (!(v330 >> 14)) {
        goto LABEL_686;
      }
      int v5 = v332 + 2;
      do
      {
        *(v5 - 1) = v382 | 0x80;
        unint64_t v383 = v382 >> 7;
        ++v5;
        unint64_t v390 = v382 >> 14;
        v382 >>= 7;
      }
      while (v390);
      goto LABEL_718;
    case 6:
      if (*a4 <= (unint64_t)v5) {
        int v5 = sub_19E3AEE48((uint64_t)a4, v5);
      }
      uint64_t v12 = *(void *)a1;
      unsigned int v13 = (8 * a2) | 1;
      if (v13 <= 0x7F) {
        goto LABEL_575;
      }
      *int v5 = (8 * a2) | 0x81;
      unsigned int v14 = (8 * a2) >> 7;
      if (!(v13 >> 14)) {
        goto LABEL_602;
      }
      uint64_t v15 = v5 + 2;
      do
      {
        *((unsigned char *)v15 - 1) = v14 | 0x80;
        unsigned int v16 = v14 >> 7;
        uint64_t v15 = (void *)((char *)v15 + 1);
        unsigned int v335 = v14 >> 14;
        v14 >>= 7;
      }
      while (v335);
      goto LABEL_693;
    case 7:
      if (*a4 <= (unint64_t)v5) {
        int v5 = sub_19E3AEE48((uint64_t)a4, v5);
      }
      int v324 = *(_DWORD *)a1;
      unsigned int v325 = (8 * a2) | 5;
      if (v325 <= 0x7F) {
        goto LABEL_571;
      }
      *int v5 = (8 * a2) | 0x85;
      unsigned int v326 = (8 * a2) >> 7;
      if (!(v325 >> 14)) {
        goto LABEL_600;
      }
      v327 = v5 + 2;
      do
      {
        *((unsigned char *)v327 - 1) = v326 | 0x80;
        unsigned int v328 = v326 >> 7;
        v327 = (_DWORD *)((char *)v327 + 1);
        unsigned int v336 = v326 >> 14;
        v326 >>= 7;
      }
      while (v336);
      goto LABEL_689;
    case 8:
      if (*a4 <= (unint64_t)v5) {
        int v5 = sub_19E3AEE48((uint64_t)a4, v5);
      }
      LOBYTE(v337) = *a1;
      unsigned int v338 = 8 * a2;
      if ((8 * a2) > 0x7F)
      {
        *int v5 = v338 | 0x80;
        unsigned int v358 = v338 >> 7;
        if (v338 >> 14)
        {
          v332 = v5 + 2;
          do
          {
            *(v332 - 1) = v358 | 0x80;
            unsigned int v391 = v358 >> 7;
            ++v332;
            unsigned int v392 = v358 >> 14;
            v358 >>= 7;
          }
          while (v392);
          *(v332 - 1) = v391;
        }
        else
        {
          v5[1] = v358;
          v332 = v5 + 2;
        }
      }
      else
      {
        *int v5 = v338;
        v332 = v5 + 1;
      }
      goto LABEL_677;
    case 9:
      if (*a4 <= (unint64_t)v5) {
        int v5 = sub_19E3AEE48((uint64_t)a4, v5);
      }
      v339 = *(void **)a1;
      if (*(char *)(*(void *)a1 + 23) < 0)
      {
        int64_t v340 = v339[1];
        if (v340 > 127) {
          return sub_19E3AF3B8(a4, a2, (uint64_t)v339, v5);
        }
      }
      else
      {
        int64_t v340 = *(unsigned __int8 *)(*(void *)a1 + 23);
      }
      unsigned int v364 = 8 * a2;
      uint64_t v365 = 1;
      uint64_t v366 = 2;
      uint64_t v367 = 3;
      uint64_t v368 = 4;
      if ((8 * a2) >> 28) {
        uint64_t v368 = 5;
      }
      if (v364 >= 0x200000) {
        uint64_t v367 = v368;
      }
      if (v364 >= 0x4000) {
        uint64_t v366 = v367;
      }
      if (v364 >= 0x80) {
        uint64_t v365 = v366;
      }
      if ((uint64_t)(*a4 + ~(unint64_t)&v5[v365] + 16) < v340) {
        return sub_19E3AF3B8(a4, a2, (uint64_t)v339, v5);
      }
      unsigned int v369 = v364 | 2;
      if ((v364 | 2) <= 0x7F) {
        goto LABEL_633;
      }
      *int v5 = v364 | 0x82;
      unsigned int v370 = v364 >> 7;
      if (!(v369 >> 14)) {
        goto LABEL_635;
      }
      v371 = v5 + 2;
      do
      {
        *(v371 - 1) = v370 | 0x80;
        unsigned int v372 = v370 >> 7;
        ++v371;
        unsigned int v373 = v370 >> 14;
        v370 >>= 7;
      }
      while (v373);
      goto LABEL_727;
    case 10:
      if (*a4 <= (unint64_t)v5) {
        int v5 = sub_19E3AEE48((uint64_t)a4, v5);
      }
      uint64_t v341 = *(void *)a1;
      unsigned int v342 = 8 * a2;
      unsigned int v343 = (8 * a2) | 3;
      unsigned int v344 = (8 * a2) >> 7;
      if (v343 > 0x7F)
      {
        *int v5 = (8 * a2) | 0x83;
        if (v343 >> 14)
        {
          v345 = v5 + 2;
          unsigned int v393 = v342 >> 7;
          do
          {
            *(v345 - 1) = v393 | 0x80;
            unsigned int v394 = v393 >> 7;
            ++v345;
            unsigned int v395 = v393 >> 14;
            v393 >>= 7;
          }
          while (v395);
          *(v345 - 1) = v394;
        }
        else
        {
          v5[1] = v344;
          v345 = v5 + 2;
        }
      }
      else
      {
        *int v5 = v343;
        v345 = v5 + 1;
      }
      v332 = (char *)(*(uint64_t (**)(uint64_t, char *, uint64_t *))(*(void *)v341 + 96))(v341, v345, a4);
      if (*a4 <= (unint64_t)v332) {
        v332 = sub_19E3AEE48((uint64_t)a4, v332);
      }
      unsigned int v337 = v342 | 4;
      if ((v342 | 4) <= 0x7F) {
        goto LABEL_677;
      }
      char *v332 = v342 | 0x84;
      if (!(v337 >> 14))
      {
        v332[1] = v344;
        return v332 + 2;
      }
      int v5 = v332 + 2;
      do
      {
        *(v5 - 1) = v344 | 0x80;
        unsigned int v411 = v344 >> 7;
        ++v5;
        unsigned int v412 = v344 >> 14;
        v344 >>= 7;
      }
      while (v412);
      goto LABEL_715;
    case 11:
      if ((a1[10] & 0x10) != 0) {
        return (char *)(*(uint64_t (**)(void, uint64_t, char *, uint64_t *))(**(void **)a1 + 136))(*(void *)a1, a2, v5, a4);
      }
      if (*a4 <= (unint64_t)v5) {
        int v5 = sub_19E3AEE48((uint64_t)a4, v5);
      }
      uint64_t v346 = *(void *)a1;
      unsigned int v347 = (8 * a2) | 2;
      if (v347 > 0x7F)
      {
        *int v5 = (8 * a2) | 0x82;
        unsigned int v379 = (8 * a2) >> 7;
        if (v347 >> 14)
        {
          v348 = v5 + 2;
          do
          {
            *(v348 - 1) = v379 | 0x80;
            unsigned int v421 = v379 >> 7;
            ++v348;
            unsigned int v422 = v379 >> 14;
            v379 >>= 7;
          }
          while (v422);
          *(v348 - 1) = v421;
        }
        else
        {
          v5[1] = v379;
          v348 = v5 + 2;
        }
      }
      else
      {
        *int v5 = v347;
        v348 = v5 + 1;
      }
      unsigned int v423 = (*(uint64_t (**)(uint64_t))(*(void *)v346 + 80))(v346);
      if (v423 > 0x7F)
      {
        unsigned char *v348 = v423 | 0x80;
        unsigned int v425 = v423 >> 7;
        if (v423 >> 14)
        {
          v424 = v348 + 2;
          do
          {
            *(v424 - 1) = v425 | 0x80;
            unsigned int v426 = v425 >> 7;
            ++v424;
            unsigned int v427 = v425 >> 14;
            v425 >>= 7;
          }
          while (v427);
          *(v424 - 1) = v426;
        }
        else
        {
          v348[1] = v425;
          v424 = v348 + 2;
        }
      }
      else
      {
        unsigned char *v348 = v423;
        v424 = v348 + 1;
      }
      return (char *)(*(uint64_t (**)(uint64_t, unsigned char *, uint64_t *))(*(void *)v346 + 96))(v346, v424, a4);
    case 12:
      if (*a4 <= (unint64_t)v5) {
        int v5 = sub_19E3AEE48((uint64_t)a4, v5);
      }
      v339 = *(void **)a1;
      if (*(char *)(*(void *)a1 + 23) < 0)
      {
        int64_t v340 = v339[1];
        if (v340 > 127) {
          return sub_19E3AF3B8(a4, a2, (uint64_t)v339, v5);
        }
      }
      else
      {
        int64_t v340 = *(unsigned __int8 *)(*(void *)a1 + 23);
      }
      unsigned int v374 = 8 * a2;
      uint64_t v375 = 1;
      uint64_t v376 = 2;
      uint64_t v377 = 3;
      uint64_t v378 = 4;
      if ((8 * a2) >> 28) {
        uint64_t v378 = 5;
      }
      if (v374 >= 0x200000) {
        uint64_t v377 = v378;
      }
      if (v374 >= 0x4000) {
        uint64_t v376 = v377;
      }
      if (v374 >= 0x80) {
        uint64_t v375 = v376;
      }
      if ((uint64_t)(*a4 + ~(unint64_t)&v5[v375] + 16) < v340) {
        return sub_19E3AF3B8(a4, a2, (uint64_t)v339, v5);
      }
      unsigned int v369 = v374 | 2;
      if ((v374 | 2) > 0x7F)
      {
        *int v5 = v374 | 0x82;
        unsigned int v370 = v374 >> 7;
        if (v369 >> 14)
        {
          v371 = v5 + 2;
          do
          {
            *(v371 - 1) = v370 | 0x80;
            unsigned int v372 = v370 >> 7;
            ++v371;
            unsigned int v419 = v370 >> 14;
            v370 >>= 7;
          }
          while (v419);
LABEL_727:
          *(v371 - 1) = v372;
        }
        else
        {
LABEL_635:
          v5[1] = v370;
          v371 = v5 + 2;
        }
      }
      else
      {
LABEL_633:
        *int v5 = v369;
        v371 = v5 + 1;
      }
      unsigned char *v371 = v340;
      v420 = v371 + 1;
      if (*((char *)v339 + 23) < 0) {
        v339 = (void *)*v339;
      }
      memcpy(v420, v339, v340);
      return &v420[v340];
    case 13:
      if (*a4 <= (unint64_t)v5) {
        int v5 = sub_19E3AEE48((uint64_t)a4, v5);
      }
      unsigned int v337 = *(_DWORD *)a1;
      unsigned int v349 = 8 * a2;
      if ((8 * a2) > 0x7F)
      {
        *int v5 = v349 | 0x80;
        unsigned int v360 = v349 >> 7;
        if (v349 >> 14)
        {
          v332 = v5 + 2;
          do
          {
            *(v332 - 1) = v360 | 0x80;
            unsigned int v396 = v360 >> 7;
            ++v332;
            unsigned int v397 = v360 >> 14;
            v360 >>= 7;
          }
          while (v397);
          *(v332 - 1) = v396;
        }
        else
        {
          v5[1] = v360;
          v332 = v5 + 2;
        }
      }
      else
      {
        *int v5 = v349;
        v332 = v5 + 1;
      }
      if (v337 <= 0x7F)
      {
LABEL_677:
        char *v332 = v337;
        return v332 + 1;
      }
      char *v332 = v337 | 0x80;
      unsigned int v398 = v337 >> 7;
      if (!(v337 >> 14))
      {
        v332[1] = v398;
        return v332 + 2;
      }
      int v5 = v332 + 2;
      do
      {
        *(v5 - 1) = v398 | 0x80;
        unsigned int v411 = v398 >> 7;
        ++v5;
        unsigned int v413 = v398 >> 14;
        v398 >>= 7;
      }
      while (v413);
LABEL_715:
      *(v5 - 1) = v411;
      return v5;
    case 14:
      if (*a4 <= (unint64_t)v5) {
        int v5 = sub_19E3AEE48((uint64_t)a4, v5);
      }
      unint64_t v330 = *(int *)a1;
      unsigned int v350 = 8 * a2;
      if ((8 * a2) > 0x7F)
      {
        *int v5 = v350 | 0x80;
        unsigned int v361 = v350 >> 7;
        if (v350 >> 14)
        {
          v332 = v5 + 2;
          do
          {
            *(v332 - 1) = v361 | 0x80;
            unsigned int v399 = v361 >> 7;
            ++v332;
            unsigned int v400 = v361 >> 14;
            v361 >>= 7;
          }
          while (v400);
          *(v332 - 1) = v399;
        }
        else
        {
          v5[1] = v361;
          v332 = v5 + 2;
        }
      }
      else
      {
        *int v5 = v350;
        v332 = v5 + 1;
      }
      if (v330 <= 0x7F)
      {
LABEL_684:
        char *v332 = v330;
        return v332 + 1;
      }
      char *v332 = v330 | 0x80;
      unint64_t v382 = v330 >> 7;
      if (!(v330 >> 14))
      {
LABEL_686:
        v332[1] = v382;
        return v332 + 2;
      }
      int v5 = v332 + 2;
      do
      {
        *(v5 - 1) = v382 | 0x80;
        unint64_t v383 = v382 >> 7;
        ++v5;
        unint64_t v414 = v382 >> 14;
        v382 >>= 7;
      }
      while (v414);
LABEL_718:
      *(v5 - 1) = v383;
      return v5;
    case 15:
      if (*a4 <= (unint64_t)v5) {
        int v5 = sub_19E3AEE48((uint64_t)a4, v5);
      }
      int v324 = *(_DWORD *)a1;
      unsigned int v325 = (8 * a2) | 5;
      if (v325 > 0x7F)
      {
        *int v5 = (8 * a2) | 0x85;
        unsigned int v326 = (8 * a2) >> 7;
        if (v325 >> 14)
        {
          v327 = v5 + 2;
          do
          {
            *((unsigned char *)v327 - 1) = v326 | 0x80;
            unsigned int v328 = v326 >> 7;
            v327 = (_DWORD *)((char *)v327 + 1);
            unsigned int v401 = v326 >> 14;
            v326 >>= 7;
          }
          while (v401);
LABEL_689:
          *((unsigned char *)v327 - 1) = v328;
        }
        else
        {
LABEL_600:
          v5[1] = v326;
          v327 = v5 + 2;
        }
      }
      else
      {
LABEL_571:
        *int v5 = v325;
        v327 = v5 + 1;
      }
      _DWORD *v327 = v324;
      return (char *)(v327 + 1);
    case 16:
      if (*a4 <= (unint64_t)v5) {
        int v5 = sub_19E3AEE48((uint64_t)a4, v5);
      }
      uint64_t v12 = *(void *)a1;
      unsigned int v13 = (8 * a2) | 1;
      if (v13 > 0x7F)
      {
        *int v5 = (8 * a2) | 0x81;
        unsigned int v14 = (8 * a2) >> 7;
        if (v13 >> 14)
        {
          uint64_t v15 = v5 + 2;
          do
          {
            *((unsigned char *)v15 - 1) = v14 | 0x80;
            unsigned int v16 = v14 >> 7;
            uint64_t v15 = (void *)((char *)v15 + 1);
            unsigned int v402 = v14 >> 14;
            v14 >>= 7;
          }
          while (v402);
LABEL_693:
          *((unsigned char *)v15 - 1) = v16;
        }
        else
        {
LABEL_602:
          v5[1] = v14;
          uint64_t v15 = v5 + 2;
        }
      }
      else
      {
LABEL_575:
        *int v5 = v13;
        uint64_t v15 = v5 + 1;
      }
      *uint64_t v15 = v12;
      return (char *)(v15 + 1);
    case 17:
      if (*a4 <= (unint64_t)v5) {
        int v5 = sub_19E3AEE48((uint64_t)a4, v5);
      }
      int v351 = *(_DWORD *)a1;
      unsigned int v352 = 8 * a2;
      if ((8 * a2) > 0x7F)
      {
        *int v5 = v352 | 0x80;
        unsigned int v362 = v352 >> 7;
        if (v352 >> 14)
        {
          v332 = v5 + 2;
          do
          {
            *(v332 - 1) = v362 | 0x80;
            unsigned int v403 = v362 >> 7;
            ++v332;
            unsigned int v404 = v362 >> 14;
            v362 >>= 7;
          }
          while (v404);
          *(v332 - 1) = v403;
        }
        else
        {
          v5[1] = v362;
          v332 = v5 + 2;
        }
      }
      else
      {
        *int v5 = v352;
        v332 = v5 + 1;
      }
      unsigned int v405 = (2 * v351) ^ (v351 >> 31);
      if (v405 <= 0x7F)
      {
        char *v332 = v405;
        return v332 + 1;
      }
      char *v332 = v405 | 0x80;
      unsigned int v406 = v405 >> 7;
      if (!(v405 >> 14))
      {
        v332[1] = v406;
        return v332 + 2;
      }
      int v5 = v332 + 2;
      do
      {
        *(v5 - 1) = v406 | 0x80;
        unsigned int v415 = v406 >> 7;
        ++v5;
        unsigned int v416 = v406 >> 14;
        v406 >>= 7;
      }
      while (v416);
      *(v5 - 1) = v415;
      return v5;
    case 18:
      if (*a4 <= (unint64_t)v5) {
        int v5 = sub_19E3AEE48((uint64_t)a4, v5);
      }
      uint64_t v353 = *(void *)a1;
      unsigned int v354 = 8 * a2;
      if ((8 * a2) > 0x7F)
      {
        *int v5 = v354 | 0x80;
        unsigned int v363 = v354 >> 7;
        if (v354 >> 14)
        {
          v332 = v5 + 2;
          do
          {
            *(v332 - 1) = v363 | 0x80;
            unsigned int v407 = v363 >> 7;
            ++v332;
            unsigned int v408 = v363 >> 14;
            v363 >>= 7;
          }
          while (v408);
          *(v332 - 1) = v407;
        }
        else
        {
          v5[1] = v363;
          v332 = v5 + 2;
        }
      }
      else
      {
        *int v5 = v354;
        v332 = v5 + 1;
      }
      unint64_t v409 = (2 * v353) ^ (v353 >> 63);
      if (v409 > 0x7F)
      {
        char *v332 = v409 | 0x80;
        unint64_t v410 = v409 >> 7;
        if (v409 >> 14)
        {
          int v5 = v332 + 2;
          do
          {
            *(v5 - 1) = v410 | 0x80;
            unint64_t v417 = v410 >> 7;
            ++v5;
            unint64_t v418 = v410 >> 14;
            v410 >>= 7;
          }
          while (v418);
          *(v5 - 1) = v417;
        }
        else
        {
          v332[1] = v410;
          return v332 + 2;
        }
      }
      else
      {
        char *v332 = v409;
        return v332 + 1;
      }
      return v5;
    default:
      return v5;
  }
}

void sub_19E3B9070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E3B9178(uint64_t a1)
{
  uint64_t v1 = *(int **)(a1 + 16);
  if (*(unsigned __int16 *)(a1 + 8) < 0x101u)
  {
    if (*(_WORD *)(a1 + 10))
    {
      uint64_t v2 = 0;
      uint64_t v3 = &v1[8 * *(unsigned __int16 *)(a1 + 10)];
      do
      {
        uint64_t v4 = (_DWORD **)(v1 + 2);
        int v5 = *v1;
        v1 += 8;
        v2 += sub_19E3B923C(v4, v5);
      }
      while (v1 != v3);
      return v2;
    }
    return 0;
  }
  unsigned int v8 = *(int **)v1;
  uint64_t v6 = v1 + 2;
  uint64_t v7 = v8;
  if (v8 == v6) {
    return 0;
  }
  uint64_t v2 = 0;
  do
  {
    unint64_t v9 = sub_19E3B923C((_DWORD **)v7 + 5, v7[8]);
    int v10 = (int *)*((void *)v7 + 1);
    if (v10)
    {
      do
      {
        uint64_t v11 = v10;
        int v10 = *(int **)v10;
      }
      while (v10);
    }
    else
    {
      do
      {
        uint64_t v11 = (int *)*((void *)v7 + 2);
        BOOL v12 = *(void *)v11 == (void)v7;
        uint64_t v7 = v11;
      }
      while (!v12);
    }
    v2 += v9;
    uint64_t v7 = v11;
  }
  while (v11 != v6);
  return v2;
}

unint64_t sub_19E3B923C(_DWORD **a1, int a2)
{
  if (*((unsigned char *)a1 + 9))
  {
    int v4 = *((unsigned __int8 *)a1 + 8);
    unsigned __int8 v5 = v4 - 19;
    if (*((unsigned char *)a1 + 11))
    {
      if ((v4 - 19) <= 0xEDu)
      {
        sub_19E3AF8D4((uint64_t)v102, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
        uint64_t v6 = sub_19E3AF8EC(v102, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
        sub_19E3AFA28((uint64_t)&v101, (const char **)&v6->__r_.__value_.__l.__data_);
        sub_19E3AFA30((uint64_t)v102);
      }
      switch(v4)
      {
        case 1:
        case 6:
        case 16:
          uint64_t v21 = 8 * **a1;
          goto LABEL_63;
        case 2:
        case 7:
        case 15:
          uint64_t v21 = 4 * **a1;
          goto LABEL_63;
        case 3:
          uint64_t v27 = *a1;
          if ((int)**a1 < 1) {
            goto LABEL_7;
          }
          uint64_t v21 = 0;
          int v28 = 0;
          do
          {
            v21 += (9 * (__clz(*(void *)sub_19E3C0C60(v27, v28++) | 1) ^ 0x3F) + 73) >> 6;
            uint64_t v27 = *a1;
          }
          while (v28 < **a1);
          goto LABEL_63;
        case 4:
          unsigned int v29 = *a1;
          if ((int)**a1 < 1) {
            goto LABEL_7;
          }
          uint64_t v21 = 0;
          int v30 = 0;
          do
          {
            v21 += (9 * (__clz(*(void *)sub_19E3C12BC(v29, v30++) | 1) ^ 0x3F) + 73) >> 6;
            unsigned int v29 = *a1;
          }
          while (v30 < **a1);
          goto LABEL_63;
        case 5:
          unsigned int v31 = *a1;
          if ((int)**a1 < 1) {
            goto LABEL_7;
          }
          uint64_t v21 = 0;
          int v32 = 0;
          do
          {
            unsigned int v33 = (int *)sub_19E3BFFA8(v31, v32);
            uint64_t v34 = (9 * (__clz(*v33 | 1) ^ 0x1F) + 73) >> 6;
            if (*v33 >= 0) {
              uint64_t v35 = v34;
            }
            else {
              uint64_t v35 = 10;
            }
            v21 += v35;
            ++v32;
            unsigned int v31 = *a1;
          }
          while (v32 < **a1);
          goto LABEL_63;
        case 8:
          uint64_t v21 = **a1;
          goto LABEL_63;
        case 9:
        case 10:
        case 11:
        case 12:
          sub_19E3AF8D4((uint64_t)v102, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 1599);
          uint64_t v7 = sub_19E3AF8EC(v102, "Non-primitive types can't be packed.");
          sub_19E3AFA28((uint64_t)&v101, (const char **)&v7->__r_.__value_.__l.__data_);
          sub_19E3AFA30((uint64_t)v102);
          goto LABEL_7;
        case 13:
          unsigned int v22 = *a1;
          if ((int)**a1 < 1) {
            goto LABEL_7;
          }
          uint64_t v21 = 0;
          int v23 = 0;
          do
          {
            v21 += (9 * (__clz(*(_DWORD *)sub_19E3C0604(v22, v23++) | 1) ^ 0x1F) + 73) >> 6;
            unsigned int v22 = *a1;
          }
          while (v23 < **a1);
          goto LABEL_63;
        case 14:
          unint64_t v36 = *a1;
          if ((int)**a1 < 1) {
            goto LABEL_7;
          }
          uint64_t v21 = 0;
          int v37 = 0;
          do
          {
            unint64_t v38 = (int *)sub_19E3BFFA8(v36, v37);
            uint64_t v39 = (9 * (__clz(*v38 | 1) ^ 0x1F) + 73) >> 6;
            if (*v38 >= 0) {
              uint64_t v40 = v39;
            }
            else {
              uint64_t v40 = 10;
            }
            v21 += v40;
            ++v37;
            unint64_t v36 = *a1;
          }
          while (v37 < **a1);
          goto LABEL_63;
        case 17:
          char v24 = *a1;
          if ((int)**a1 < 1) {
            goto LABEL_7;
          }
          uint64_t v21 = 0;
          int v25 = 0;
          do
          {
            unsigned int v26 = (int *)sub_19E3BFFA8(v24, v25);
            v21 += (9 * (__clz((2 * *v26) ^ (*v26 >> 31) | 1) ^ 0x1F) + 73) >> 6;
            ++v25;
            char v24 = *a1;
          }
          while (v25 < **a1);
          goto LABEL_63;
        case 18:
          uint64_t v41 = *a1;
          if ((int)**a1 < 1) {
            goto LABEL_7;
          }
          uint64_t v21 = 0;
          int v42 = 0;
          do
          {
            int v43 = (uint64_t *)sub_19E3C0C60(v41, v42);
            v21 += (9 * (__clz((2 * *v43) ^ (*v43 >> 63) | 1) ^ 0x3F) + 73) >> 6;
            ++v42;
            uint64_t v41 = *a1;
          }
          while (v42 < **a1);
LABEL_63:
          *((_DWORD *)a1 + 3) = v21;
          unint64_t v44 = v21 + ((9 * (__clz((8 * a2) | 3) ^ 0x1F) + 73) >> 6) + ((9 * (__clz(v21 | 1) ^ 0x1F) + 73) >> 6);
          if (v21) {
            unint64_t v8 = v44;
          }
          else {
            unint64_t v8 = 0;
          }
          break;
        default:
LABEL_7:
          unint64_t v8 = 0;
          *((_DWORD *)a1 + 3) = 0;
          break;
      }
    }
    else
    {
      if ((v4 - 19) > 0xEDu)
      {
        int v14 = *((unsigned __int8 *)a1 + 8);
      }
      else
      {
        sub_19E3AF8D4((uint64_t)v102, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
        unsigned int v13 = sub_19E3AF8EC(v102, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
        sub_19E3AFA28((uint64_t)&v101, (const char **)&v13->__r_.__value_.__l.__data_);
        sub_19E3AFA30((uint64_t)v102);
        int v14 = *((unsigned __int8 *)a1 + 8);
        unsigned __int8 v5 = v14 - 19;
      }
      char v15 = v4 == 10;
      if (v5 <= 0xEDu)
      {
        sub_19E3AF8D4((uint64_t)v102, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
        unsigned int v16 = sub_19E3AF8EC(v102, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
        sub_19E3AFA28((uint64_t)&v101, (const char **)&v16->__r_.__value_.__l.__data_);
        sub_19E3AFA30((uint64_t)v102);
      }
      unint64_t v17 = (unint64_t)((9 * (__clz((8 * a2) | 1) ^ 0x1F) + 73) >> 6) << v15;
      switch(v14)
      {
        case 1:
        case 6:
        case 16:
          unsigned int v18 = v17 + 8;
          goto LABEL_27;
        case 2:
        case 7:
        case 15:
          unsigned int v18 = v17 + 4;
LABEL_27:
          unint64_t v8 = v18 * (unint64_t)**a1;
          break;
        case 3:
          unsigned int v50 = *a1;
          int v51 = **a1;
          unint64_t v8 = v17 * (unint64_t)v51;
          if (v51 >= 1)
          {
            int v52 = 0;
            do
            {
              v8 += (9 * (__clz(*(void *)sub_19E3C0C60(v50, v52++) | 1) ^ 0x3F) + 73) >> 6;
              unsigned int v50 = *a1;
            }
            while (v52 < **a1);
          }
          break;
        case 4:
          unsigned int v53 = *a1;
          int v54 = **a1;
          unint64_t v8 = v17 * (unint64_t)v54;
          if (v54 >= 1)
          {
            int v55 = 0;
            do
            {
              v8 += (9 * (__clz(*(void *)sub_19E3C12BC(v53, v55++) | 1) ^ 0x3F) + 73) >> 6;
              unsigned int v53 = *a1;
            }
            while (v55 < **a1);
          }
          break;
        case 5:
          int v56 = *a1;
          int v57 = **a1;
          unint64_t v8 = v17 * (unint64_t)v57;
          if (v57 >= 1)
          {
            int v58 = 0;
            do
            {
              unsigned int v59 = (int *)sub_19E3BFFA8(v56, v58);
              uint64_t v60 = (9 * (__clz(*v59 | 1) ^ 0x1F) + 73) >> 6;
              if (*v59 >= 0) {
                uint64_t v61 = v60;
              }
              else {
                uint64_t v61 = 10;
              }
              v8 += v61;
              ++v58;
              int v56 = *a1;
            }
            while (v58 < **a1);
          }
          break;
        case 8:
          unint64_t v8 = **a1 + **a1 * (unint64_t)v17;
          break;
        case 9:
          unsigned int v62 = *a1;
          int v63 = (*a1)[2];
          unint64_t v8 = v17 * (unint64_t)v63;
          if (v63 >= 1)
          {
            int v64 = 0;
            do
            {
              uint64_t v65 = sub_19E3A9CB4((uint64_t)v62, v64);
              uint64_t v66 = *(unsigned __int8 *)(v65 + 23);
              if ((v66 & 0x80u) != 0) {
                uint64_t v66 = *(void *)(v65 + 8);
              }
              v8 += v66 + ((9 * (__clz(v66 | 1) ^ 0x1F) + 73) >> 6);
              ++v64;
              unsigned int v62 = *a1;
            }
            while (v64 < (*a1)[2]);
          }
          break;
        case 10:
          int v67 = *a1;
          int v68 = (*a1)[2];
          unint64_t v8 = v17 * (unint64_t)v68;
          if (v68 >= 1)
          {
            int v69 = 0;
            do
            {
              uint64_t v70 = sub_19E3BA2D4((uint64_t)v67, v69);
              v8 += (*(uint64_t (**)(uint64_t))(*(void *)v70 + 72))(v70);
              ++v69;
              int v67 = *a1;
            }
            while (v69 < (*a1)[2]);
          }
          break;
        case 11:
          unint64_t v71 = *a1;
          int v72 = (*a1)[2];
          unint64_t v8 = v17 * (unint64_t)v72;
          if (v72 >= 1)
          {
            int v73 = 0;
            do
            {
              uint64_t v74 = sub_19E3BA2D4((uint64_t)v71, v73);
              uint64_t v75 = (*(uint64_t (**)(uint64_t))(*(void *)v74 + 72))(v74);
              v8 += v75 + ((9 * (__clz(v75 | 1) ^ 0x1F) + 73) >> 6);
              ++v73;
              unint64_t v71 = *a1;
            }
            while (v73 < (*a1)[2]);
          }
          break;
        case 12:
          unint64_t v76 = *a1;
          int v77 = (*a1)[2];
          unint64_t v8 = v17 * (unint64_t)v77;
          if (v77 >= 1)
          {
            int v78 = 0;
            do
            {
              uint64_t v79 = sub_19E3A9CB4((uint64_t)v76, v78);
              uint64_t v80 = *(unsigned __int8 *)(v79 + 23);
              if ((v80 & 0x80u) != 0) {
                uint64_t v80 = *(void *)(v79 + 8);
              }
              v8 += v80 + ((9 * (__clz(v80 | 1) ^ 0x1F) + 73) >> 6);
              ++v78;
              unint64_t v76 = *a1;
            }
            while (v78 < (*a1)[2]);
          }
          break;
        case 13:
          int v81 = *a1;
          int v82 = **a1;
          unint64_t v8 = v17 * (unint64_t)v82;
          if (v82 >= 1)
          {
            int v83 = 0;
            do
            {
              v8 += (9 * (__clz(*(_DWORD *)sub_19E3C0604(v81, v83++) | 1) ^ 0x1F) + 73) >> 6;
              int v81 = *a1;
            }
            while (v83 < **a1);
          }
          break;
        case 14:
          int v84 = *a1;
          int v85 = **a1;
          unint64_t v8 = v17 * (unint64_t)v85;
          if (v85 >= 1)
          {
            int v86 = 0;
            do
            {
              unint64_t v87 = (int *)sub_19E3BFFA8(v84, v86);
              uint64_t v88 = (9 * (__clz(*v87 | 1) ^ 0x1F) + 73) >> 6;
              if (*v87 >= 0) {
                uint64_t v89 = v88;
              }
              else {
                uint64_t v89 = 10;
              }
              v8 += v89;
              ++v86;
              int v84 = *a1;
            }
            while (v86 < **a1);
          }
          break;
        case 17:
          unint64_t v90 = *a1;
          int v91 = **a1;
          unint64_t v8 = v17 * (unint64_t)v91;
          if (v91 >= 1)
          {
            int v92 = 0;
            do
            {
              uint64_t v93 = (int *)sub_19E3BFFA8(v90, v92);
              v8 += (9 * (__clz((2 * *v93) ^ (*v93 >> 31) | 1) ^ 0x1F) + 73) >> 6;
              ++v92;
              unint64_t v90 = *a1;
            }
            while (v92 < **a1);
          }
          break;
        case 18:
          int v94 = *a1;
          int v95 = **a1;
          unint64_t v8 = v17 * (unint64_t)v95;
          if (v95 >= 1)
          {
            int v96 = 0;
            do
            {
              unint64_t v97 = (uint64_t *)sub_19E3C0C60(v94, v96);
              v8 += (9 * (__clz((2 * *v97) ^ (*v97 >> 63) | 1) ^ 0x3F) + 73) >> 6;
              ++v96;
              int v94 = *a1;
            }
            while (v96 < **a1);
          }
          break;
        default:
          return 0;
      }
    }
  }
  else if (*((unsigned char *)a1 + 10))
  {
    return 0;
  }
  else
  {
    int v9 = *((unsigned __int8 *)a1 + 8);
    unsigned __int8 v10 = v9 - 19;
    if ((v9 - 19) > 0xEDu)
    {
      int v12 = *((unsigned __int8 *)a1 + 8);
    }
    else
    {
      sub_19E3AF8D4((uint64_t)v102, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      uint64_t v11 = sub_19E3AF8EC(v102, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19E3AFA28((uint64_t)&v101, (const char **)&v11->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v102);
      int v12 = *((unsigned __int8 *)a1 + 8);
      unsigned __int8 v10 = v12 - 19;
    }
    char v19 = v9 == 10;
    if (v10 <= 0xEDu)
    {
      sub_19E3AF8D4((uint64_t)v102, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      int v20 = sub_19E3AF8EC(v102, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19E3AFA28((uint64_t)&v101, (const char **)&v20->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v102);
    }
    unint64_t v8 = (unint64_t)((9 * (__clz((8 * a2) | 1) ^ 0x1F) + 73) >> 6) << v19;
    switch(v12)
    {
      case 1:
      case 6:
      case 16:
        v8 += 8;
        return v8;
      case 2:
      case 7:
      case 15:
        v8 += 4;
        return v8;
      case 3:
      case 4:
        unint64_t v46 = (unint64_t)*a1;
        goto LABEL_138;
      case 5:
      case 14:
        uint64_t v47 = (9 * (__clz(*(_DWORD *)a1 | 1) ^ 0x1F) + 73) >> 6;
        if (*(int *)a1 >= 0) {
          uint64_t v48 = v47;
        }
        else {
          uint64_t v48 = 10;
        }
        v8 += v48;
        return v8;
      case 8:
        return ++v8;
      case 9:
      case 12:
        uint64_t v49 = *((void *)*a1 + 1);
        if (*((char *)*a1 + 23) >= 0) {
          uint64_t v49 = *((unsigned __int8 *)*a1 + 23);
        }
        v8 += v49 + ((9 * (__clz(v49 | 1) ^ 0x1F) + 73) >> 6);
        return v8;
      case 10:
        v8 += (*(uint64_t (**)(void))(*(void *)*a1 + 72))();
        return v8;
      case 11:
        uint64_t v98 = *(void *)*a1;
        if ((*((unsigned char *)a1 + 10) & 0x10) != 0) {
          uint64_t v99 = (*(uint64_t (**)(void))(v98 + 88))();
        }
        else {
          uint64_t v99 = (*(uint64_t (**)(void))(v98 + 72))();
        }
        v8 += v99 + ((9 * (__clz(v99 | 1) ^ 0x1F) + 73) >> 6);
        return v8;
      case 13:
        int v100 = *(_DWORD *)a1;
        goto LABEL_136;
      case 17:
        int v100 = (2 * *(_DWORD *)a1) ^ (*(int *)a1 >> 31);
LABEL_136:
        v8 += (9 * (__clz(v100 | 1) ^ 0x1F) + 73) >> 6;
        break;
      case 18:
        unint64_t v46 = (2 * (void)*a1) ^ ((uint64_t)*a1 >> 63);
LABEL_138:
        v8 += (9 * (__clz(v46 | 1) ^ 0x3F) + 73) >> 6;
        break;
      default:
        return v8;
    }
  }
  return v8;
}

void sub_19E3B9E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_19E3B9F50(unsigned __int8 *result)
{
  uint64_t v1 = result;
  uint64_t v2 = result[8];
  if (result[9])
  {
    if ((v2 - 19) <= 0xFFFFFFED)
    {
      sub_19E3AF8D4((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      uint64_t v3 = sub_19E3AF8EC(v11, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19E3AFA28((uint64_t)&v10, (const char **)&v3->__r_.__value_.__l.__data_);
      uint64_t result = (unsigned __int8 *)sub_19E3AFA30((uint64_t)v11);
    }
    switch(v2)
    {
      case 1:
        uint64_t result = *(unsigned __int8 **)v1;
        if (*(void *)v1)
        {
          int v4 = (uint64_t *)sub_19E3C209C();
          goto LABEL_32;
        }
        break;
      case 2:
        uint64_t result = *(unsigned __int8 **)v1;
        if (*(void *)v1)
        {
          int v4 = (uint64_t *)sub_19E3C1A40();
          goto LABEL_32;
        }
        break;
      case 3:
      case 16:
      case 18:
        uint64_t result = *(unsigned __int8 **)v1;
        if (*(void *)v1)
        {
          int v4 = (uint64_t *)sub_19E3C0D88();
          goto LABEL_32;
        }
        break;
      case 4:
      case 6:
        uint64_t result = *(unsigned __int8 **)v1;
        if (*(void *)v1)
        {
          int v4 = (uint64_t *)sub_19E3C13E4();
          goto LABEL_32;
        }
        break;
      case 5:
      case 14:
      case 15:
      case 17:
        uint64_t result = *(unsigned __int8 **)v1;
        if (*(void *)v1)
        {
          int v4 = (uint64_t *)sub_19E3C00D0();
          goto LABEL_32;
        }
        break;
      case 7:
      case 13:
        uint64_t result = *(unsigned __int8 **)v1;
        if (*(void *)v1)
        {
          int v4 = (uint64_t *)sub_19E3C072C();
          goto LABEL_32;
        }
        break;
      case 8:
        uint64_t result = *(unsigned __int8 **)v1;
        if (*(void *)v1)
        {
          int v4 = (uint64_t *)sub_19E3BFA78();
LABEL_32:
          uint64_t v8 = 0x1080C4057E67DB5;
          return (unsigned __int8 *)MEMORY[0x19F3BDCF0](v4, v8);
        }
        break;
      case 9:
      case 12:
        uint64_t result = *(unsigned __int8 **)v1;
        if (*(void *)v1)
        {
          int v4 = (uint64_t *)sub_19E3C2328();
          goto LABEL_37;
        }
        break;
      case 10:
      case 11:
        int v9 = *(unsigned __int8 **)v1;
        if (v9)
        {
          sub_19E3BAAE4(v9);
          int v4 = sub_19E3A07FC((uint64_t *)v9);
LABEL_37:
          uint64_t v8 = 0x1020C4014030ADELL;
          return (unsigned __int8 *)MEMORY[0x19F3BDCF0](v4, v8);
        }
        break;
      default:
        return result;
    }
  }
  else
  {
    if ((v2 - 19) <= 0xFFFFFFED)
    {
      sub_19E3AF8D4((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      unsigned __int8 v5 = sub_19E3AF8EC(v11, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_19E3AFA28((uint64_t)&v10, (const char **)&v5->__r_.__value_.__l.__data_);
      uint64_t result = (unsigned __int8 *)sub_19E3AFA30((uint64_t)v11);
    }
    int v6 = dword_19E572D20[v2];
    if (v6 == 10)
    {
      uint64_t result = *(unsigned __int8 **)v1;
      if ((v1[10] & 0x10) != 0)
      {
        if (!result) {
          return result;
        }
      }
      else if (!result)
      {
        return result;
      }
      return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(void *)result + 8))(result);
    }
    if (v6 == 9)
    {
      uint64_t v7 = *(unsigned __int8 **)v1;
      if (v7)
      {
        if ((char)v7[23] < 0) {
          operator delete(*(void **)v7);
        }
        int v4 = (uint64_t *)v7;
        uint64_t v8 = 0x1012C40EC159624;
        return (unsigned __int8 *)MEMORY[0x19F3BDCF0](v4, v8);
      }
    }
  }
  return result;
}

void sub_19E3BA1B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19E3BA1F8()
{
}

unsigned __int8 *sub_19E3BA20C(unsigned __int8 *result, unsigned __int8 *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t result = sub_19E3B9F50(v3 + 40);
      int v4 = (unsigned __int8 *)*((void *)v3 + 1);
      if (v4)
      {
        do
        {
          unsigned __int8 v5 = v4;
          int v4 = *(unsigned __int8 **)v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          unsigned __int8 v5 = (unsigned __int8 *)*((void *)v3 + 2);
          BOOL v6 = *(void *)v5 == (void)v3;
          uint64_t v3 = v5;
        }
        while (!v6);
      }
      uint64_t v3 = v5;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t *sub_19E3BA29C(uint64_t *a1)
{
  sub_19E3BAAE4(a1);
  return sub_19E3A07FC(a1);
}

uint64_t sub_19E3BA2D4(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    sub_19E3AF8D4((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1705);
    int v4 = sub_19E3AF8EC(v8, "CHECK failed: (index) >= (0): ");
    sub_19E3AFA28((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v8);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    sub_19E3AF8D4((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1706);
    unsigned __int8 v5 = sub_19E3AF8EC(v8, "CHECK failed: (index) < (current_size_): ");
    sub_19E3AFA28((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v8);
  }
  return *(void *)(*(void *)(a1 + 16) + 8 * a2 + 8);
}

void sub_19E3BA394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E3BA3B4(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(int **)(result + 16);
  if (!v2) {
    return sub_19E3BA408(result, a2);
  }
  uint64_t v3 = *v2;
  if ((int)v3 >= *(_DWORD *)(result + 12)) {
    return sub_19E3BA408(result, a2);
  }
  int v4 = v2 + 2;
  uint64_t v5 = *(int *)(result + 8);
  if ((int)v5 < (int)v3) {
    *(void *)&v4[2 * v3] = *(void *)&v4[2 * v5];
  }
  *(void *)&v4[2 * v5] = a2;
  *(_DWORD *)(result + 8) = v5 + 1;
  ++**(_DWORD **)(result + 16);
  return result;
}

uint64_t sub_19E3BA408(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  int v4 = *(int **)(result + 16);
  if (!v4)
  {
    int v5 = *(_DWORD *)(result + 12);
    goto LABEL_11;
  }
  int v5 = *(_DWORD *)(result + 8);
  int v6 = *(_DWORD *)(result + 12);
  if (v5 == v6)
  {
LABEL_11:
    uint64_t result = sub_19E3C232C(result, v5 + 1);
    goto LABEL_12;
  }
  uint64_t v7 = *v4;
  if (v7 != v6)
  {
    if (v5 >= (int)v7)
    {
      int v9 = v7 + 1;
      goto LABEL_13;
    }
    *(void *)&v4[2 * v7 + 2] = *(void *)&v4[2 * v5 + 2];
LABEL_12:
    int v4 = *(int **)(v3 + 16);
    int v9 = *v4 + 1;
LABEL_13:
    *int v4 = v9;
    goto LABEL_14;
  }
  uint64_t result = *(void *)&v4[2 * v5 + 2];
  if (result) {
    BOOL v8 = *(void *)v3 == 0;
  }
  else {
    BOOL v8 = 0;
  }
  if (v8)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    int v4 = *(int **)(v3 + 16);
  }
LABEL_14:
  uint64_t v10 = *(int *)(v3 + 8);
  *(_DWORD *)(v3 + 8) = v10 + 1;
  *(void *)&v4[2 * v10 + 2] = a2;
  return result;
}

uint64_t *sub_19E3BA4E8(void *a1, void *a2, uint64_t *a3)
{
  if (a1 != a2)
  {
    int v5 = a1;
    do
    {
      sub_19E3B427C(a3, *((unsigned int *)v5 + 8), v5 + 5);
      int v6 = (void *)v5[1];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          int v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (void *)v5[2];
          BOOL v8 = *v7 == (void)v5;
          int v5 = v7;
        }
        while (!v8);
      }
      int v5 = v7;
    }
    while (v7 != a2);
  }
  return a3;
}

const std::string::value_type *sub_19E3BA56C(uint64_t a1, std::string::value_type *__s, int a3, std::string *a4)
{
  if (*(void *)(a1 + 8) - (void)__s + 16 >= a3)
  {
    uint64_t v6 = a3;
    MEMORY[0x19F3BD810](a4, __s, a3);
    return &__s[v6];
  }
  else
  {
    return sub_19E3BCA04(a1, __s, a3, a4);
  }
}

char *sub_19E3BA5D8(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  int v5 = *a2;
  if (*a2 < 0)
  {
    uint64_t result = (char *)sub_19E3BCF80((uint64_t)a2, *a2);
    if (!result) {
      return result;
    }
    int v5 = v7;
  }
  else
  {
    uint64_t result = a2 + 1;
  }
  unint64_t v8 = *(void *)(a1 + 8);
  int v9 = v8 - result;
  if (v5 <= (int)v8 - (int)result)
  {
LABEL_15:
    unint64_t v15 = (unint64_t)&result[v5];
    long long v16 = *(_OWORD *)(a3 + 16);
    v19[0] = *(_OWORD *)a3;
    v19[1] = v16;
    uint64_t v20 = *(void *)(a3 + 32);
    uint64_t result = sub_19E3BA834(result, v15, (unsigned int **)v19);
    if ((char *)v15 != result) {
      return 0;
    }
  }
  else
  {
    while (1)
    {
      long long v10 = *(_OWORD *)(a3 + 16);
      v24[0] = *(_OWORD *)a3;
      v24[1] = v10;
      uint64_t v25 = *(void *)(a3 + 32);
      uint64_t result = sub_19E3BA834(result, v8, (unsigned int **)v24);
      if (!result) {
        break;
      }
      signed int v11 = result - *(void *)(a1 + 8);
      if (v11 >= 0x11)
      {
        sub_19E3AF8D4((uint64_t)&v26, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 674);
        int v12 = sub_19E3AF8EC(&v26, "CHECK failed: overrun >= 0 && overrun <= kSlopBytes: ");
        sub_19E3AFA28((uint64_t)&v23, (const char **)&v12->__r_.__value_.__l.__data_);
        sub_19E3AFA30((uint64_t)&v26);
      }
      int v13 = v5 - v9;
      if (v5 - v9 <= 16)
      {
        __int16 v27 = 0;
        v26.__r_.__value_.__r.__words[2] = 0;
        *(_OWORD *)&v26.__r_.__value_.__l.__data_ = *(_OWORD *)*(void *)(a1 + 8);
        uint64_t v22 = *(void *)(a3 + 32);
        long long v17 = *(_OWORD *)(a3 + 16);
        v21[0] = *(_OWORD *)a3;
        v21[1] = v17;
        unsigned int v18 = (std::string *)sub_19E3BA834((char *)&v26 + v11, (unint64_t)&v26 + v13, (unsigned int **)v21);
        uint64_t result = 0;
        if (v18 && v18 == (std::string *)((char *)&v26 + v13)) {
          return (char *)(*(void *)(a1 + 8) + v13);
        }
        return result;
      }
      int v5 = v5 - v9 - v11;
      if (v5 <= 0)
      {
        sub_19E3AF8D4((uint64_t)&v26, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 688);
        int v14 = sub_19E3AF8EC(&v26, "CHECK failed: (size) > (0): ");
        sub_19E3AFA28((uint64_t)&v23, (const char **)&v14->__r_.__value_.__l.__data_);
        sub_19E3AFA30((uint64_t)&v26);
      }
      if (*(int *)(a1 + 28) < 17) {
        return 0;
      }
      uint64_t result = (char *)sub_19E3BC130(a1);
      if (!result) {
        return result;
      }
      result += v11;
      unint64_t v8 = *(void *)(a1 + 8);
      int v9 = v8 - result;
      if (v5 <= (int)v8 - (int)result) {
        goto LABEL_15;
      }
    }
  }
  return result;
}

void sub_19E3BA80C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

char *sub_19E3BA834(char *a1, unint64_t a2, unsigned int **a3)
{
  uint64_t v3 = a1;
  while ((unint64_t)v3 < a2)
  {
    unint64_t v6 = *v3;
    if (*v3 < 0)
    {
      int v7 = v6 + (v3[1] << 7);
      unint64_t v6 = (v7 - 128);
      if (v3[1] < 0)
      {
        uint64_t v3 = (char *)sub_19E3BCEF4((uint64_t)v3, (v7 - 128));
        if (!v3) {
          return v3;
        }
        unint64_t v6 = v8;
      }
      else
      {
        v3 += 2;
      }
    }
    else
    {
      ++v3;
    }
    if (((unsigned int (*)(unsigned int *, unint64_t))a3[1])(a3[2], v6))
    {
      int v9 = (int *)*a3;
      uint64_t v10 = **a3;
      if (v10 == (*a3)[1])
      {
        int v11 = v10 + 1;
        sub_19E3BFC34((int *)*a3, v10 + 1);
        *(_DWORD *)(sub_19E3C00D4((uint64_t)v9) + 4 * v1sub_19E392864(&a9, 0) = v6;
      }
      else
      {
        *(_DWORD *)(sub_19E3C00D4((uint64_t)*a3) + 4 * v1sub_19E392864(&a9, 0) = v6;
        int v11 = v10 + 1;
      }
      *int v9 = v11;
    }
    else
    {
      int v12 = *((_DWORD *)a3 + 8);
      int v13 = (unint64_t *)a3[3];
      if (*v13) {
        int v14 = (std::string *)((*v13 & 0xFFFFFFFFFFFFFFFELL) + 8);
      }
      else {
        int v14 = (std::string *)sub_19E3A0504(v13);
      }
      sub_19E3BCDE0(v12, v6, v14);
    }
  }
  return v3;
}

char *sub_19E3BA960(uint64_t a1, char *__src, int64_t __n)
{
  *(_DWORD *)(a1 + 84) = 0;
  if (__n >= 17)
  {
    *(_DWORD *)(a1 + 28) = 16;
    unint64_t v6 = &__src[__n - 16];
    *(void *)a1 = v6;
    *(void *)(a1 + 8) = v6;
    *(void *)(a1 + 16) = a1 + 40;
    if (*(void *)(a1 + 72) != 1) {
      return __src;
    }
    uint64_t v7 = 2;
    unint64_t v8 = __src;
    goto LABEL_6;
  }
  unint64_t v8 = (char *)(a1 + 40);
  memcpy((void *)(a1 + 40), __src, __n);
  *(_DWORD *)(a1 + 28) = 0;
  *(void *)a1 = &v8[__n];
  *(void *)(a1 + 8) = &v8[__n];
  *(void *)(a1 + 16) = 0;
  if (*(void *)(a1 + 72) == 1)
  {
    uint64_t v7 = __src - v8;
LABEL_6:
    *(void *)(a1 + 72) = v7;
  }
  return v8;
}

uint64_t sub_19E3BAA14(uint64_t result)
{
  uint64_t v1 = *(unsigned int *)(result + 8);
  if ((v1 & 0x80000000) != 0)
  {
    sub_19E3AF8D4((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1780);
    int v5 = sub_19E3AF8EC(v7, "CHECK failed: (n) >= (0): ");
    sub_19E3AFA28((uint64_t)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    return sub_19E3AFA30((uint64_t)v7);
  }
  else if (v1)
  {
    uint64_t v2 = result;
    uint64_t v3 = (uint64_t *)(*(void *)(result + 16) + 8);
    do
    {
      uint64_t v4 = *v3++;
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(v2 + 8) = 0;
  }
  return result;
}

void sub_19E3BAACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19E3BAAE4(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[2];
  if (v2 && !*a1)
  {
    uint64_t v3 = v2 + 2;
    uint64_t v4 = *v2;
    if ((int)v4 >= 1)
    {
      do
      {
        if (*v3) {
          (*(void (**)(void))(*(void *)*v3 + 8))(*v3);
        }
        ++v3;
        --v4;
      }
      while (v4);
      uint64_t v2 = (unsigned int *)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

uint64_t **sub_19E3BAB70(uint64_t **a1, int *a2, _OWORD *a3)
{
  char v6 = a1 + 1;
  int v5 = a1[1];
  if (v5)
  {
    int v7 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v8 = (uint64_t **)v5;
        int v9 = *((_DWORD *)v5 + 8);
        if (v7 >= v9) {
          break;
        }
        int v5 = *v8;
        char v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      int v5 = v8[1];
      if (!v5)
      {
        char v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unint64_t v8 = a1 + 1;
LABEL_10:
    uint64_t v10 = (uint64_t *)operator new(0x40uLL);
    long long v11 = a3[1];
    *((_OWORD *)v10 + 2) = *a3;
    *((_OWORD *)v10 + 3) = v11;
    sub_19E37D280(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

void sub_19E3BAC2C(uint64_t a1)
{
}

uint64_t *sub_19E3BAC34(uint64_t **a1, uint64_t *a2, int *a3, _OWORD *a4)
{
  char v6 = sub_19E3BACBC(a1, a2, &v12, &v11, a3);
  int v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    unint64_t v8 = (uint64_t **)v6;
    int v7 = (uint64_t *)operator new(0x40uLL);
    long long v9 = a4[1];
    *((_OWORD *)v7 + 2) = *a4;
    *((_OWORD *)v7 + 3) = v9;
    sub_19E37D280(a1, (uint64_t)v12, v8, v7);
  }
  return v7;
}

uint64_t *sub_19E3BACBC(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, int *a5)
{
  int v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, int v7 = *((_DWORD *)a2 + 8), *a5 < v7))
  {
    unint64_t v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      long long v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        long long v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      int v13 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        int v13 = v10;
      }
      while (v14);
    }
    int v15 = *a5;
    if (*((_DWORD *)v10 + 8) < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          long long v17 = (uint64_t *)v16;
          int v18 = *(_DWORD *)(v16 + 32);
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *v17;
          int v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        int v5 = v17 + 1;
        uint64_t v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      long long v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    int v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      int v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    char v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      char v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 8))
  {
    uint64_t v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v21 = (uint64_t *)v20;
          int v22 = *(_DWORD *)(v20 + 32);
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = *v21;
          int v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        int v5 = v21 + 1;
        uint64_t v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      uint64_t v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t *sub_19E3BAE64(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2;
  if (*a2)
  {
    uint64_t v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      uint64_t v3 = a2;
      goto LABEL_7;
    }
    do
    {
      uint64_t v3 = v4;
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  uint64_t v2 = v3[1];
  if (v2)
  {
LABEL_7:
    int v5 = 0;
    *(void *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  int v5 = 1;
LABEL_8:
  int v6 = (uint64_t **)v3[2];
  int v7 = *v6;
  if (*v6 == v3)
  {
    uint64_t *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      int v7 = 0;
      uint64_t result = (uint64_t *)v2;
    }
    else
    {
      int v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    uint64_t v9 = a2[2];
    v3[2] = v9;
    *(void *)(v9 + 8 * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    *uint64_t v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((unsigned char *)v3 + 24) = *((unsigned char *)a2 + 24);
    if (result == a2) {
      uint64_t result = v3;
    }
  }
  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(unsigned char *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    uint64_t v12 = v7[2];
    if (*(uint64_t **)v12 == v7) {
      break;
    }
    if (!*((unsigned char *)v7 + 24))
    {
      *((unsigned char *)v7 + 24) = 1;
      *(unsigned char *)(v12 + 24) = 0;
      int v13 = *(uint64_t **)(v12 + 8);
      uint64_t v14 = *v13;
      *(void *)(v12 + 8) = *v13;
      if (v14) {
        *(void *)(v14 + 16) = v12;
      }
      std::string v13[2] = *(void *)(v12 + 16);
      *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v13;
      *int v13 = v12;
      *(void *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7) {
        uint64_t result = v7;
      }
      int v7 = *(uint64_t **)(*v7 + 8);
    }
    int v15 = (void *)*v7;
    if (*v7 && !*((unsigned char *)v15 + 24))
    {
      uint64_t v16 = (uint64_t *)v7[1];
      if (!v16) {
        goto LABEL_56;
      }
LABEL_55:
      if (*((unsigned char *)v16 + 24))
      {
LABEL_56:
        *((unsigned char *)v15 + 24) = 1;
        *((unsigned char *)v7 + 24) = 0;
        uint64_t v22 = v15[1];
        *int v7 = v22;
        if (v22) {
          *(void *)(v22 + 16) = v7;
        }
        std::string v15[2] = v7[2];
        *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v15;
        v15[1] = v7;
        std::string v7[2] = (uint64_t)v15;
        uint64_t v16 = v7;
      }
      else
      {
        int v15 = v7;
      }
      uint64_t v23 = v15[2];
      *((unsigned char *)v15 + 24) = *(unsigned char *)(v23 + 24);
      *(unsigned char *)(v23 + 24) = 1;
      *((unsigned char *)v16 + 24) = 1;
      char v24 = *(uint64_t **)(v23 + 8);
      uint64_t v25 = *v24;
      *(void *)(v23 + 8) = *v24;
      if (v25) {
        *(void *)(v25 + 16) = v23;
      }
      _OWORD v24[2] = *(void *)(v23 + 16);
      *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
      *char v24 = v23;
      goto LABEL_72;
    }
    uint64_t v16 = (uint64_t *)v7[1];
    if (v16 && !*((unsigned char *)v16 + 24)) {
      goto LABEL_55;
    }
    *((unsigned char *)v7 + 24) = 0;
    long long v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      long long v17 = result;
LABEL_53:
      *((unsigned char *)v17 + 24) = 1;
      return result;
    }
    if (!*((unsigned char *)v17 + 24)) {
      goto LABEL_53;
    }
LABEL_49:
    int v7 = *(uint64_t **)(v17[2] + 8 * (*(void *)v17[2] == (void)v17));
  }
  if (!*((unsigned char *)v7 + 24))
  {
    *((unsigned char *)v7 + 24) = 1;
    *(unsigned char *)(v12 + 24) = 0;
    uint64_t v18 = v7[1];
    *(void *)uint64_t v12 = v18;
    if (v18) {
      *(void *)(v18 + 16) = v12;
    }
    std::string v7[2] = *(void *)(v12 + 16);
    *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(void *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12) {
      uint64_t result = v7;
    }
    int v7 = *(uint64_t **)v12;
  }
  char v19 = (void *)*v7;
  if (*v7 && !*((unsigned char *)v19 + 24)) {
    goto LABEL_68;
  }
  uint64_t v20 = (uint64_t *)v7[1];
  if (!v20 || *((unsigned char *)v20 + 24))
  {
    *((unsigned char *)v7 + 24) = 0;
    long long v17 = (uint64_t *)v7[2];
    if (*((unsigned char *)v17 + 24)) {
      BOOL v21 = v17 == result;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21) {
      goto LABEL_53;
    }
    goto LABEL_49;
  }
  if (v19 && !*((unsigned char *)v19 + 24))
  {
LABEL_68:
    uint64_t v20 = v7;
  }
  else
  {
    *((unsigned char *)v20 + 24) = 1;
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v26 = *v20;
    v7[1] = *v20;
    if (v26) {
      *(void *)(v26 + 16) = v7;
    }
    std::string v20[2] = v7[2];
    *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v20;
    uint64_t *v20 = (uint64_t)v7;
    std::string v7[2] = (uint64_t)v20;
    char v19 = v7;
  }
  uint64_t v23 = v20[2];
  *((unsigned char *)v20 + 24) = *(unsigned char *)(v23 + 24);
  *(unsigned char *)(v23 + 24) = 1;
  *((unsigned char *)v19 + 24) = 1;
  char v24 = *(uint64_t **)v23;
  uint64_t v27 = *(void *)(*(void *)v23 + 8);
  *(void *)uint64_t v23 = v27;
  if (v27) {
    *(void *)(v27 + 16) = v23;
  }
  _OWORD v24[2] = *(void *)(v23 + 16);
  *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(void *)(v23 + 16) = v24;
  return result;
}

void sub_19E3BB1E8()
{
}

uint64_t sub_19E3BB214(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

void sub_19E3BB238(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

void sub_19E3BB24C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EC0091C0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EC0091C0))
  {
    qword_1E945A358 = 0;
    unk_1E945A360 = 0;
    qword_1E945A368 = 0;
    sub_19E3BBE30((uint64_t)sub_19E3BB238, (uint64_t)&qword_1E945A358);
    atomic_store(1u, (unsigned __int8 *)&unk_1EC009180);
    __cxa_guard_release(&qword_1EC0091C0);
  }
}

void sub_19E3BB2E0(_Unwind_Exception *a1)
{
}

uint64_t sub_19E3BB2F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 64))(v4, a1);
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 64))(a1, a2);
  (*(void (**)(uint64_t))(*(void *)a2 + 40))(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 64))(a2, v4);
  int v5 = *(uint64_t (**)(uint64_t))(*(void *)v4 + 8);
  return v5(v4);
}

void sub_19E3BB450(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_19E3BB484(_DWORD *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EC0091B8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EC0091B8))
  {
    __cxa_atexit((void (*)(void *))std::mutex::~mutex, &unk_1EC008FF8, &dword_19E36B000);
    __cxa_guard_release(&qword_1EC0091B8);
  }
  pthread_t v2 = pthread_self();
  uint64_t v3 = (uint64_t)v2;
  if (qword_1E9459F28)
  {
    if (v2 && v2 == (pthread_t)qword_1E9459F28) {
      goto LABEL_5;
    }
  }
  else if (!v2)
  {
LABEL_5:
    if (*a1 != 1)
    {
      sub_19E3AF8D4((uint64_t)v6, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/generated_message_util.cc", 785);
      uint64_t v4 = sub_19E3AF8EC(v6, "CHECK failed: (scc->visit_status.load(std::memory_order_relaxed)) == (SCCInfoBase::kRunning): ");
      sub_19E3AFA28((uint64_t)&v5, (const char **)&v4->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v6);
    }
    return;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&unk_1EC009180, memory_order_acquire) & 1) == 0) {
    sub_19E3BB24C();
  }
  std::mutex::lock((std::mutex *)&unk_1EC008FF8);
  qword_1E9459F28 = v3;
  sub_19E3BB5F0(a1);
  qword_1E9459F28 = 0;
  std::mutex::unlock((std::mutex *)&unk_1EC008FF8);
}

void sub_19E3BB5D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_19E3BB5F0(_DWORD *result)
{
  if (*result == -1)
  {
    uint64_t v1 = (uint64_t (**)(void))result;
    *uint64_t result = 1;
    pthread_t v2 = result + 6;
    int v3 = result[1];
    if (v3 >= 1)
    {
      for (uint64_t i = 0; i < v3; ++i)
      {
        if (*(void *)&v2[2 * i])
        {
          sub_19E3BB5F0();
          int v3 = *((_DWORD *)v1 + 1);
        }
      }
    }
    uint64_t v5 = v3;
    int v6 = *((_DWORD *)v1 + 2);
    if (v6 >= 1)
    {
      uint64_t v7 = 0;
      int v8 = &v2[2 * v5];
      do
      {
        if (**(void **)&v8[2 * v7])
        {
          sub_19E3BB5F0();
          int v6 = *((_DWORD *)v1 + 2);
        }
        ++v7;
      }
      while (v7 < v6);
    }
    uint64_t result = (_DWORD *)v1[2]();
    atomic_store(0, (unsigned int *)v1);
  }
  return result;
}

uint64_t sub_19E3BB6A0(char *__src, int64_t __n, uint64_t a3, char a4)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  uint64_t v13 = 0x7FFFFFFF00000000;
  int v14 = dword_1E9459590;
  unsigned int v15 = 0x80000000;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  int v6 = sub_19E3BA960((uint64_t)v9, __src, __n);
  if ((*(uint64_t (**)(uint64_t, char *, unsigned char *))(*(void *)a3 + 88))(a3, v6, v9)) {
    BOOL v7 = v13 == 0;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7)
  {
    if (a4 & 2) != 0 || ((*(uint64_t (**)(uint64_t))(*(void *)a3 + 48))(a3)) {
      return 1;
    }
    sub_19E3BB7CC(a3);
  }
  return 0;
}

void *sub_19E3BB7BC@<X0>(void *a1@<X8>)
{
  return sub_19E382340(a1, "(cannot determine missing fields for lite message)");
}

uint64_t sub_19E3BB7CC(uint64_t a1)
{
  sub_19E3AF8D4((uint64_t)v6, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/message_lite.cc", 133);
  sub_19E3BB880("parse", a1, &__p);
  pthread_t v2 = sub_19E3AF918(v6, (const std::string::value_type *)&__p);
  sub_19E3AFA28((uint64_t)&v4, (const char **)&v2->__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return sub_19E3AFA30((uint64_t)v6);
}

void sub_19E3BB850(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_19E3AFA30((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_19E3BB880(const std::string::value_type *a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a3, "Can't ");
  std::string::append(a3, a1);
  std::string::append(a3, " message of type \"");
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a2 + 16))(&__p, a2);
  if ((v12 & 0x80u) == 0) {
    p_p = (const std::string::value_type *)&__p;
  }
  else {
    p_p = (const std::string::value_type *)__p;
  }
  if ((v12 & 0x80u) == 0) {
    std::string::size_type v7 = v12;
  }
  else {
    std::string::size_type v7 = v11;
  }
  std::string::append(a3, p_p, v7);
  if ((char)v12 < 0) {
    operator delete(__p);
  }
  std::string::append(a3, "\" because it is missing required fields: ");
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a2 + 56))(&__p, a2);
  if ((v12 & 0x80u) == 0) {
    int v8 = (const std::string::value_type *)&__p;
  }
  else {
    int v8 = (const std::string::value_type *)__p;
  }
  if ((v12 & 0x80u) == 0) {
    std::string::size_type v9 = v12;
  }
  else {
    std::string::size_type v9 = v11;
  }
  std::string::append(a3, v8, v9);
  if ((char)v12 < 0) {
    operator delete(__p);
  }
}

void sub_19E3BB9BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E3BB9FC(uint64_t a1, char *a2, unsigned int a3)
{
  if ((a3 & 0x80000000) != 0) {
    sub_19E3BC104();
  }
  int64_t v5 = a3;
  (*(void (**)(uint64_t))(*(void *)a1 + 40))(a1);
  return sub_19E3BB6A0(a2, v5, a1, 1);
}

BOOL sub_19E3BBA78(uint64_t a1, std::string *a2)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1) & 1) == 0)
  {
    sub_19E3AF8D4((uint64_t)v9, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/message_lite.cc", 449);
    char v4 = sub_19E3AF8EC(v9, "CHECK failed: IsInitialized(): ");
    sub_19E3BB880("serialize", a1, &__p);
    int64_t v5 = sub_19E3AF918(v4, (const std::string::value_type *)&__p);
    sub_19E3AFA28((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    sub_19E3AFA30((uint64_t)v9);
  }
  return sub_19E3BBB84(a1, a2);
}

void sub_19E3BBB50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_19E3AFA30((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL sub_19E3BBB84(uint64_t a1, std::string *a2)
{
  pthread_t v2 = a2;
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0) {
    std::string::size_type size = a2->__r_.__value_.__l.__size_;
  }
  else {
    std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  }
  unint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 72))(a1);
  uint64_t v6 = v5;
  unint64_t v7 = v5 >> 31;
  if (v5 >> 31)
  {
    sub_19E3AF8D4((uint64_t)v16, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/message_lite.cc", 457);
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a1 + 16))(__p, a1);
    long long v10 = sub_19E3AF918(v16, (const std::string::value_type *)__p);
    std::string::size_type v11 = sub_19E3AF8EC(v10, " exceeded maximum protobuf size of 2GB: ");
    unsigned __int8 v12 = sub_19E3AFB64(v11, v6);
    sub_19E3AFA28((uint64_t)&v14, (const char **)&v12->__r_.__value_.__l.__data_);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    std::string::size_type v9 = v16;
    goto LABEL_12;
  }
  std::string::resize(v2, v5 + size, 0);
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0) {
    pthread_t v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
  }
  *(_OWORD *)&v16[0].__r_.__value_.__l.__data_ = (unint64_t)v2 + size + v6;
  uint64_t v17 = 0;
  __int16 v18 = 0;
  char v19 = byte_1E945A664 & 1;
  if (v16[0].__r_.__value_.__r.__words[0] != (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1))
  {
    sub_19E3AF8D4((uint64_t)__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/message_lite.cc", 360);
    int v8 = sub_19E3AF8EC(__p, "CHECK failed: target + size == res: ");
    sub_19E3AFA28((uint64_t)&v14, (const char **)&v8->__r_.__value_.__l.__data_);
    std::string::size_type v9 = __p;
LABEL_12:
    sub_19E3AFA30((uint64_t)v9);
  }
  return v7 == 0;
}

void sub_19E3BBD78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
}

BOOL sub_19E3BBDC0@<W0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  BOOL result = sub_19E3BBA78(a1, (std::string *)a2);
  if (!result)
  {
    if (*(char *)(a2 + 23) < 0)
    {
      **(unsigned char **)a2 = 0;
      *(void *)(a2 + 8) = 0;
    }
    else
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 23) = 0;
    }
  }
  return result;
}

void sub_19E3BBE14(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E3BBE30(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_19E3BBF64();
  std::mutex::lock((std::mutex *)(v4 + 24));
  unint64_t v5 = *(void **)(v4 + 8);
  unint64_t v6 = *(void *)(v4 + 16);
  if ((unint64_t)v5 >= v6)
  {
    uint64_t v8 = ((uint64_t)v5 - *(void *)v4) >> 4;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 60) {
      sub_19E37C7C4();
    }
    uint64_t v10 = v6 - *(void *)v4;
    if (v10 >> 3 > v9) {
      unint64_t v9 = v10 >> 3;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      unsigned __int8 v12 = (char *)sub_19E37D6C0(v4 + 16, v11);
    }
    else {
      unsigned __int8 v12 = 0;
    }
    uint64_t v13 = &v12[16 * v8];
    char v14 = &v12[16 * v11];
    *(void *)uint64_t v13 = a1;
    *((void *)v13 + 1) = a2;
    unint64_t v7 = v13 + 16;
    uint64_t v16 = *(char **)v4;
    uint64_t v15 = *(char **)(v4 + 8);
    if (v15 != *(char **)v4)
    {
      do
      {
        *((_OWORD *)v13 - 1) = *((_OWORD *)v15 - 1);
        v13 -= 16;
        v15 -= 16;
      }
      while (v15 != v16);
      uint64_t v15 = *(char **)v4;
    }
    *(void *)uint64_t v4 = v13;
    *(void *)(v4 + 8) = v7;
    *(void *)(v4 + 16) = v14;
    if (v15) {
      operator delete(v15);
    }
  }
  else
  {
    *unint64_t v5 = a1;
    v5[1] = a2;
    unint64_t v7 = v5 + 2;
  }
  *(void *)(v4 + 8) = v7;
  std::mutex::unlock((std::mutex *)(v4 + 24));
}

void sub_19E3BBF50(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19E3BBF64()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EC008FF0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EC008FF0))
  {
    operator new();
  }
  return qword_1EC009038;
}

void sub_19E3BBFF4(_Unwind_Exception *a1)
{
}

void sub_19E3BC00C()
{
  if ((byte_1E9459F30 & 1) == 0)
  {
    uint64_t v0 = sub_19E3BBF64();
    if (v0)
    {
      uint64_t v1 = sub_19E3BC05C(v0);
      MEMORY[0x19F3BDCF0](v1, 0x1020C40A0054943);
    }
    byte_1E9459F30 = 1;
  }
}

uint64_t sub_19E3BC05C(uint64_t a1)
{
  pthread_t v2 = *(void **)a1;
  int v3 = *(void **)(a1 + 8);
  uint64_t v4 = v3 - 2;
  if (*(void **)a1 != v3 && v4 > v2)
  {
    do
    {
      unint64_t v6 = (void (*)(void))*v2;
      void *v2 = *v4;
      *uint64_t v4 = v6;
      uint64_t v7 = v2[1];
      v2[1] = v4[1];
      v4[1] = v7;
      v2 += 2;
      v4 -= 2;
    }
    while (v2 < v4);
    pthread_t v2 = *(void **)a1;
    int v3 = *(void **)(a1 + 8);
  }
  while (v2 != v3)
  {
    ((void (*)(void))*v2)(v2[1]);
    v2 += 2;
  }
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  uint64_t v8 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v8;
    operator delete(v8);
  }
  return a1;
}

void sub_19E3BC104()
{
  __assert_rtn("StringPiece", "stringpiece.h", 229, "len >= 0");
}

_OWORD *sub_19E3BC130(uint64_t a1)
{
  if (*(int *)(a1 + 28) <= 16)
  {
    sub_19E3AF8D4((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 158);
    pthread_t v2 = sub_19E3AF8EC(v7, "CHECK failed: limit_ > kSlopBytes: ");
    sub_19E3AFA28((uint64_t)&v6, (const char **)&v2->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v7);
  }
  BOOL result = sub_19E3BC1F8(a1, 0, -1);
  uint64_t v4 = *(void *)(a1 + 8);
  if (result)
  {
    int v5 = *(_DWORD *)(a1 + 28) + result - v4;
    *(_DWORD *)(a1 + 28) = v5;
    v4 += v5 & (v5 >> 31);
  }
  else
  {
    *(_DWORD *)(a1 + 8sub_19E392864(&a9, 0) = 1;
  }
  *(void *)a1 = v4;
  return result;
}

void sub_19E3BC1E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

_OWORD *sub_19E3BC1F8(uint64_t a1, unsigned int a2, int a3)
{
  int v3 = *(_OWORD **)(a1 + 16);
  if (!v3) {
    return v3;
  }
  uint64_t v5 = a1 + 40;
  if (v3 != (_OWORD *)(a1 + 40))
  {
    int v6 = *(_DWORD *)(a1 + 24);
    if (v6 <= 16)
    {
      sub_19E3AF8D4((uint64_t)v33, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 105);
      uint64_t v7 = sub_19E3AF8EC(v33, "CHECK failed: size_ > kSlopBytes: ");
      sub_19E3AFA28((uint64_t)&__src, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v33);
      int v3 = *(_OWORD **)(a1 + 16);
      int v6 = *(_DWORD *)(a1 + 24);
    }
    *(void *)(a1 + 8) = (char *)v3 + v6 - 16;
    *(void *)(a1 + 16) = v5;
    if (*(void *)(a1 + 72) == 1) {
      *(void *)(a1 + 72) = 2;
    }
    return v3;
  }
  *int v3 = *(_OWORD *)*(void *)(a1 + 8);
  if (*(int *)(a1 + 84) < 1) {
    goto LABEL_46;
  }
  int v8 = a3;
  if (a3 < 0) {
    goto LABEL_39;
  }
  if ((a2 & 0x80000000) != 0)
  {
    sub_19E3AF8D4((uint64_t)v33, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 53);
    unint64_t v11 = sub_19E3AF8EC(v33, "CHECK failed: overrun >= 0: ");
    sub_19E3AFA28((uint64_t)&__src, (const char **)&v11->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v33);
LABEL_14:
    unint64_t v12 = a1 + 56;
    uint64_t v13 = (unsigned __int8 *)v3 + (int)a2;
    char v14 = v13;
    while (2)
    {
      int v15 = (char)*v14++;
      int v16 = v15;
      if (v15 < 0)
      {
        int v16 = v16 + (*v14 << 7) - 128;
        if ((char)*v14 < 0)
        {
          char v14 = v13 + 3;
          uint64_t v20 = -21;
          while (1)
          {
            v16 += (*(v14 - 1) - 1) << (v20 + 35);
            if (((char)*(v14 - 1) & 0x80000000) == 0) {
              break;
            }
            ++v14;
            v20 += 7;
            if (!v20) {
              goto LABEL_39;
            }
          }
        }
        else
        {
          char v14 = v13 + 2;
        }
      }
      if ((unint64_t)v14 <= v12)
      {
        if (!v16) {
          goto LABEL_46;
        }
        switch(v16 & 7)
        {
          case 0:
            v33[0].__r_.__value_.__r.__words[0] = 0;
            char v14 = sub_19E3BD638((char *)v14, v33);
            if (!v14) {
              goto LABEL_39;
            }
            goto LABEL_38;
          case 1:
            v14 += 8;
            goto LABEL_38;
          case 2:
            int v18 = *v14;
            if ((char)*v14 < 0)
            {
              uint64_t v19 = sub_19E3BCF80((uint64_t)v14, v18);
              if (!v19) {
                goto LABEL_39;
              }
            }
            else
            {
              uint64_t v19 = (uint64_t)(v14 + 1);
            }
            if ((uint64_t)(v12 - v19) < v18) {
              goto LABEL_39;
            }
            char v14 = (unsigned __int8 *)(v19 + v18);
LABEL_38:
            uint64_t v13 = v14;
            if ((unint64_t)v14 >= v12) {
              goto LABEL_39;
            }
            continue;
          case 3:
            ++v8;
            goto LABEL_38;
          case 4:
            BOOL v17 = __OFSUB__(v8--, 1);
            if (v8 < 0 != v17) {
              goto LABEL_46;
            }
            goto LABEL_38;
          case 5:
            v14 += 4;
            goto LABEL_38;
          default:
            goto LABEL_39;
        }
      }
      goto LABEL_39;
    }
  }
  if (a2 >= 0x11)
  {
    sub_19E3AF8D4((uint64_t)v33, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 54);
    uint64_t v10 = sub_19E3AF8EC(v33, "CHECK failed: overrun <= kSlopBytes: ");
    sub_19E3AFA28((uint64_t)&__src, (const char **)&v10->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v33);
    goto LABEL_39;
  }
  if (a2 != 16) {
    goto LABEL_14;
  }
LABEL_39:
  __src = 0;
  if (!(*(unsigned int (**)(void, void **, uint64_t))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), &__src, a1 + 24))
  {
LABEL_45:
    *(_DWORD *)(a1 + 84) = 0;
LABEL_46:
    if (*(void *)(a1 + 72) == 2) {
      *(void *)(a1 + 72) = *(void *)(a1 + 8) - (void)v3;
    }
    *(void *)(a1 + 8) = a1 + 56;
    *(void *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    return v3;
  }
  while (1)
  {
    size_t v21 = *(unsigned int *)(a1 + 24);
    *(_DWORD *)(a1 + 84) -= v21;
    if ((int)v21 >= 17)
    {
      unint64_t v27 = *(void *)(a1 + 72);
      uint64_t v26 = (void *)(a1 + 72);
      unint64_t v25 = v27;
      uint64_t v28 = (char *)(v26 - 2);
      unsigned int v29 = __src;
      *((_OWORD *)v26 - 1) = *(_OWORD *)__src;
      *(v26 - 7) = v29;
      goto LABEL_52;
    }
    if ((int)v21 >= 1) {
      break;
    }
    if (v21)
    {
      sub_19E3AF8D4((uint64_t)v33, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 137);
      uint64_t v22 = sub_19E3AF8EC(v33, "CHECK failed: size_ == 0: ");
      uint64_t v23 = sub_19E3AFAE4(v22, *(_DWORD *)(a1 + 24));
      sub_19E3AFA28((uint64_t)&v31, (const char **)&v23->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v33);
    }
    if (((*(uint64_t (**)(void, void **, uint64_t))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), &__src, a1 + 24) & 1) == 0)goto LABEL_45; {
  }
    }
  memcpy((void *)(a1 + 56), __src, v21);
  unint64_t v30 = *(void *)(a1 + 72);
  uint64_t v26 = (void *)(a1 + 72);
  unint64_t v25 = v30;
  uint64_t v28 = (char *)v3 + v21;
  *(v26 - 7) = v3;
LABEL_52:
  *(v26 - 8) = v28;
  if (v25 > 1) {
    void *v26 = 1;
  }
  return v3;
}

void sub_19E3BC5DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_19E3BC624(uint64_t a1, signed int a2, int a3)
{
  int v3 = *(_DWORD *)(a1 + 28);
  if (v3 < a2) {
    return 0;
  }
  signed int v5 = a2;
  if (v3 == a2)
  {
    sub_19E3AF8D4((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 175);
    uint64_t v7 = sub_19E3AF8EC(v19, "CHECK failed: overrun != limit_: ");
    sub_19E3AFA28((uint64_t)&v18, (const char **)&v7->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v19);
    int v3 = *(_DWORD *)(a1 + 28);
  }
  if (v3 <= v5)
  {
    sub_19E3AF8D4((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 176);
    int v8 = sub_19E3AF8EC(v19, "CHECK failed: overrun < limit_: ");
    sub_19E3AFA28((uint64_t)&v18, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v19);
    int v3 = *(_DWORD *)(a1 + 28);
  }
  if (*(void *)a1 != *(void *)(a1 + 8) + (v3 & (v3 >> 31)))
  {
    sub_19E3AF8D4((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 181);
    unint64_t v9 = sub_19E3AF8EC(v19, "CHECK failed: limit_end_ == buffer_end_ + (std::min)(0, limit_): ");
    sub_19E3AFA28((uint64_t)&v18, (const char **)&v9->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v19);
    int v3 = *(_DWORD *)(a1 + 28);
  }
  if (v3 <= 0)
  {
    sub_19E3AF8D4((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 183);
    uint64_t v10 = sub_19E3AF8EC(v19, "CHECK failed: limit_ > 0: ");
    sub_19E3AFA28((uint64_t)&v18, (const char **)&v10->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v19);
  }
  if (*(void *)a1 != *(void *)(a1 + 8))
  {
    sub_19E3AF8D4((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 184);
    unint64_t v11 = sub_19E3AF8EC(v19, "CHECK failed: limit_end_ == buffer_end_: ");
    sub_19E3AFA28((uint64_t)&v18, (const char **)&v11->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v19);
  }
  while (1)
  {
    if (v5 < 0)
    {
      sub_19E3AF8D4((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 188);
      unint64_t v12 = sub_19E3AF8EC(v19, "CHECK failed: overrun >= 0: ");
      sub_19E3AFA28((uint64_t)&v18, (const char **)&v12->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v19);
    }
    uint64_t v13 = sub_19E3BC1F8(a1, v5, a3);
    if (!v13) {
      break;
    }
    uint64_t v14 = *(void *)(a1 + 8);
    int v15 = *(_DWORD *)(a1 + 28) + v13 - v14;
    *(_DWORD *)(a1 + 28) = v15;
    BOOL result = (char *)v13 + v5;
    signed int v5 = result - v14;
    if ((int)result - (int)v14 < 0)
    {
      *(void *)a1 = v14 + (v15 & (v15 >> 31));
      return result;
    }
  }
  if (v5) {
    return 0;
  }
  if (*(int *)(a1 + 28) <= 0)
  {
    sub_19E3AF8D4((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 193);
    BOOL v17 = sub_19E3AF8EC(v19, "CHECK failed: limit_ > 0: ");
    sub_19E3AFA28((uint64_t)&v18, (const char **)&v17->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v19);
  }
  BOOL result = *(char **)(a1 + 8);
  *(void *)a1 = result;
  *(_DWORD *)(a1 + 8sub_19E392864(&a9, 0) = 1;
  return result;
}

void sub_19E3BC8D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

_OWORD *sub_19E3BC91C(uint64_t a1, int a2, int a3)
{
  int v5 = *(_DWORD *)(a1 + 8) - a2 + 16;
  while (1)
  {
    BOOL v6 = __OFSUB__(a3, v5);
    a3 -= v5;
    if ((a3 < 0) ^ v6 | (a3 == 0))
    {
      sub_19E3AF8D4((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 323);
      uint64_t v7 = sub_19E3AF8EC(v10, "CHECK failed: size > chunk_size: ");
      sub_19E3AFA28((uint64_t)&v9, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v10);
    }
    if (!*(void *)(a1 + 16) || *(int *)(a1 + 28) < 17) {
      break;
    }
    BOOL result = sub_19E3BC130(a1);
    if (!result) {
      return result;
    }
    int v5 = *(_DWORD *)(a1 + 8) - result;
    if (a3 <= v5) {
      return (_OWORD *)((char *)result + a3 + 16);
    }
  }
  return 0;
}

void sub_19E3BC9EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

const std::string::value_type *sub_19E3BCA04(uint64_t a1, std::string::value_type *__s, int a3, std::string *this)
{
  int v5 = a3;
  BOOL v6 = __s;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    *this->__r_.__value_.__l.__data_ = 0;
    this->__r_.__value_.__l.__size_ = 0;
  }
  else
  {
    this->__r_.__value_.__s.__data_[0] = 0;
    *((unsigned char *)&this->__r_.__value_.__s + 23) = 0;
  }
  uint64_t v8 = *(void *)(a1 + 8);
  if (v8 - (uint64_t)__s + *(int *)(a1 + 28) >= a3)
  {
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
      std::string::size_type size = this->__r_.__value_.__l.__size_;
    }
    else {
      std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    }
    if (a3 >= 50000000) {
      int v10 = 50000000;
    }
    else {
      int v10 = a3;
    }
    std::string::reserve(this, size + v10);
    uint64_t v8 = *(void *)(a1 + 8);
  }
  int v11 = v8 - v6 + 16;
  while (1)
  {
    BOOL v12 = __OFSUB__(v5, v11);
    v5 -= v11;
    if ((v5 < 0) ^ v12 | (v5 == 0))
    {
      sub_19E3AF8D4((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 323);
      uint64_t v13 = sub_19E3AF8EC(v16, "CHECK failed: size > chunk_size: ");
      sub_19E3AFA28((uint64_t)&v15, (const char **)&v13->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v16);
    }
    if (!*(void *)(a1 + 16)) {
      break;
    }
    std::string::append(this, v6, v11);
    if (*(int *)(a1 + 28) < 17) {
      break;
    }
    BOOL result = (const std::string::value_type *)sub_19E3BC130(a1);
    if (!result) {
      return result;
    }
    BOOL v6 = result + 16;
    int v11 = *(_DWORD *)(a1 + 8) - result;
    if (v5 <= v11)
    {
      std::string::append(this, v6, v5);
      return &v6[v5];
    }
  }
  return 0;
}

void sub_19E3BCB74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

const std::string::value_type *sub_19E3BCB8C(uint64_t a1, std::string::value_type *__s, int a3, std::string *this)
{
  int v5 = a3;
  BOOL v6 = __s;
  uint64_t v8 = *(void *)(a1 + 8);
  if (v8 - (uint64_t)__s + *(int *)(a1 + 28) >= a3)
  {
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
      std::string::size_type size = this->__r_.__value_.__l.__size_;
    }
    else {
      std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    }
    if (a3 >= 50000000) {
      int v10 = 50000000;
    }
    else {
      int v10 = a3;
    }
    std::string::reserve(this, size + v10);
    uint64_t v8 = *(void *)(a1 + 8);
  }
  int v11 = v8 - v6 + 16;
  while (1)
  {
    BOOL v12 = __OFSUB__(v5, v11);
    v5 -= v11;
    if ((v5 < 0) ^ v12 | (v5 == 0))
    {
      sub_19E3AF8D4((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 323);
      uint64_t v13 = sub_19E3AF8EC(v16, "CHECK failed: size > chunk_size: ");
      sub_19E3AFA28((uint64_t)&v15, (const char **)&v13->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v16);
    }
    if (!*(void *)(a1 + 16)) {
      break;
    }
    std::string::append(this, v6, v11);
    if (*(int *)(a1 + 28) < 17) {
      break;
    }
    BOOL result = (const std::string::value_type *)sub_19E3BC130(a1);
    if (!result) {
      return result;
    }
    BOOL v6 = result + 16;
    int v11 = *(_DWORD *)(a1 + 8) - result;
    if (v5 <= v11)
    {
      std::string::append(this, v6, v5);
      return &v6[v5];
    }
  }
  return 0;
}

void sub_19E3BCCDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E3BCCF8(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  int v6 = (char)*a3;
  unsigned int v7 = *a3;
  if (v6 < 0)
  {
    uint64_t result = sub_19E3BCF80((uint64_t)a3, v7);
    if (!result) {
      return result;
    }
    uint64_t v8 = (char *)result;
    unsigned int v7 = v10;
  }
  else
  {
    uint64_t v8 = (char *)(a3 + 1);
  }
  int v11 = sub_19E3A0830(a1, (int)v8, v7);
  int v12 = *(_DWORD *)(a1 + 88);
  BOOL v13 = __OFSUB__(v12--, 1);
  *(_DWORD *)(a1 + 88) = v12;
  if (v12 < 0 != v13) {
    return 0;
  }
  int v14 = v11;
  uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)a2 + 88))(a2, v8, a1);
  if (!result) {
    return result;
  }
  ++*(_DWORD *)(a1 + 88);
  if (*(_DWORD *)(a1 + 80)) {
    return 0;
  }
  int v15 = *(_DWORD *)(a1 + 28) + v14;
  *(_DWORD *)(a1 + 28) = v15;
  *(void *)a1 = *(void *)(a1 + 8) + (v15 & (v15 >> 31));
  return result;
}

void sub_19E3BCDE0(int a1, unint64_t a2, std::string *this)
{
  unint64_t v5 = (8 * a1);
  if (v5 < 0x80)
  {
    LOBYTE(v6) = 8 * a1;
  }
  else
  {
    do
    {
      std::string::push_back(this, v5 | 0x80);
      unint64_t v6 = v5 >> 7;
      unint64_t v7 = v5 >> 14;
      v5 >>= 7;
    }
    while (v7);
  }
  std::string::push_back(this, v6);
  if (a2 < 0x80)
  {
    LOBYTE(v8) = a2;
  }
  else
  {
    do
    {
      std::string::push_back(this, a2 | 0x80);
      unint64_t v8 = a2 >> 7;
      unint64_t v9 = a2 >> 14;
      a2 >>= 7;
    }
    while (v9);
  }
  std::string::push_back(this, v8);
}

uint64_t sub_19E3BCE8C(uint64_t a1, int a2)
{
  uint64_t result = a1 + 3;
  uint64_t v4 = -21;
  while (1)
  {
    a2 += (*(unsigned __int8 *)(result - 1) - 1) << (v4 + 35);
    if ((*(char *)(result - 1) & 0x80000000) == 0) {
      break;
    }
    ++result;
    v4 += 7;
    if (!v4)
    {
      while (*(char *)(a1 + v4 + 5) < 0)
      {
        uint64_t result = 0;
        if (++v4 == 5) {
          return result;
        }
      }
      return a1 + v4 + 6;
    }
  }
  return result;
}

uint64_t sub_19E3BCEF4(uint64_t a1, uint64_t a2)
{
  a2 = a2;
  uint64_t result = a1 + 3;
  uint64_t v4 = (char *)(a1 + 2);
  uint64_t v5 = 14;
  while (1)
  {
    int v6 = *v4++;
    a2 += (v6 - 1) << v5;
    if ((v6 & 0x80000000) == 0) {
      break;
    }
    ++result;
    v5 += 7;
    if (v5 == 70) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_19E3BCF3C(uint64_t a1, int a2)
{
  uint64_t result = a1 + 3;
  uint64_t v4 = (char *)(a1 + 2);
  uint64_t v5 = -21;
  while (1)
  {
    int v6 = *v4++;
    a2 += (v6 - 1) << (v5 + 35);
    if ((v6 & 0x80000000) == 0) {
      break;
    }
    ++result;
    v5 += 7;
    if (!v5) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_19E3BCF80(uint64_t a1, int a2)
{
  uint64_t result = a1 + 2;
  uint64_t v4 = -21;
  while (1)
  {
    a2 += (*(unsigned __int8 *)(result - 1) - 1) << (v4 + 28);
    if ((*(char *)(result - 1) & 0x80000000) == 0) {
      break;
    }
    ++result;
    v4 += 7;
    if (!v4)
    {
      unsigned int v5 = *(unsigned __int8 *)(a1 + 4);
      uint64_t v6 = a1 + 5;
      if (a2 + (v5 << 28) - 0x10000000 > 0x7FFFFFEF) {
        uint64_t v6 = 0;
      }
      if (v5 <= 7) {
        return v6;
      }
      else {
        return 0;
      }
    }
  }
  return result;
}

const std::string::value_type *sub_19E3BCFF0(std::string *a1, char *a2, uint64_t a3)
{
  int v5 = *a2;
  if (*a2 < 0)
  {
    uint64_t result = (const std::string::value_type *)sub_19E3BCF80((uint64_t)a2, *a2);
    if (!result) {
      return result;
    }
    uint64_t v6 = (std::string::value_type *)result;
    int v5 = v8;
  }
  else
  {
    uint64_t v6 = a2 + 1;
  }
  return sub_19E3BA56C(a3, v6, v5, a1);
}

unsigned __int8 *sub_19E3BD068(int *a1, unsigned __int8 *a2, uint64_t a3)
{
  return sub_19E3BD6AC(a3, a2, a1);
}

unsigned __int8 *sub_19E3BD078(int *a1, unsigned __int8 *a2, uint64_t a3)
{
  return sub_19E3BD980(a3, a2, a1);
}

unsigned __int8 *sub_19E3BD088(int *a1, unsigned __int8 *a2, uint64_t a3)
{
  return sub_19E3BDC54(a3, a2, a1);
}

unsigned __int8 *sub_19E3BD098(int *a1, unsigned __int8 *a2, uint64_t a3)
{
  return sub_19E3BDF28(a3, a2, a1);
}

unsigned __int8 *sub_19E3BD0A8(int *a1, unsigned __int8 *a2, uint64_t a3)
{
  return sub_19E3BE1FC(a3, a2, a1);
}

unsigned __int8 *sub_19E3BD0B8(int *a1, unsigned __int8 *a2, uint64_t a3)
{
  return sub_19E3BE4DC(a3, a2, a1);
}

unsigned __int8 *sub_19E3BD0C8(int *a1, unsigned __int8 *a2, uint64_t a3)
{
  return sub_19E3BE7BC(a3, a2, a1);
}

char *sub_19E3BD0DC(int *a1, char *a2, uint64_t a3)
{
  int v5 = *a2;
  if (*a2 < 0)
  {
    uint64_t result = (char *)sub_19E3BCF80((uint64_t)a2, *a2);
    if (!result) {
      return result;
    }
    uint64_t v6 = result;
    int v5 = v8;
  }
  else
  {
    uint64_t v6 = a2 + 1;
  }
  return sub_19E3BEA98(a3, v6, v5, a1);
}

char *sub_19E3BD158(int *a1, char *a2, uint64_t a3)
{
  int v5 = *a2;
  if (*a2 < 0)
  {
    uint64_t result = (char *)sub_19E3BCF80((uint64_t)a2, *a2);
    if (!result) {
      return result;
    }
    uint64_t v6 = result;
    int v5 = v8;
  }
  else
  {
    uint64_t v6 = a2 + 1;
  }
  return sub_19E3BEBA0(a3, v6, v5, a1);
}

char *sub_19E3BD1D4(int *a1, char *a2, uint64_t a3)
{
  int v5 = *a2;
  if (*a2 < 0)
  {
    uint64_t result = (char *)sub_19E3BCF80((uint64_t)a2, *a2);
    if (!result) {
      return result;
    }
    uint64_t v6 = result;
    int v5 = v8;
  }
  else
  {
    uint64_t v6 = a2 + 1;
  }
  return sub_19E3BECA8(a3, v6, v5, a1);
}

char *sub_19E3BD250(int *a1, char *a2, uint64_t a3)
{
  int v5 = *a2;
  if (*a2 < 0)
  {
    uint64_t result = (char *)sub_19E3BCF80((uint64_t)a2, *a2);
    if (!result) {
      return result;
    }
    uint64_t v6 = result;
    int v5 = v8;
  }
  else
  {
    uint64_t v6 = a2 + 1;
  }
  return sub_19E3BEDB0(a3, v6, v5, a1);
}

char *sub_19E3BD2CC(int *a1, char *a2, uint64_t a3)
{
  int v5 = *a2;
  if (*a2 < 0)
  {
    uint64_t result = (char *)sub_19E3BCF80((uint64_t)a2, *a2);
    if (!result) {
      return result;
    }
    uint64_t v6 = result;
    int v5 = v8;
  }
  else
  {
    uint64_t v6 = a2 + 1;
  }
  return sub_19E3BEEB8(a3, v6, v5, a1);
}

char *sub_19E3BD348(int *a1, char *a2, uint64_t a3)
{
  int v5 = *a2;
  if (*a2 < 0)
  {
    uint64_t result = (char *)sub_19E3BCF80((uint64_t)a2, *a2);
    if (!result) {
      return result;
    }
    uint64_t v6 = result;
    int v5 = v8;
  }
  else
  {
    uint64_t v6 = a2 + 1;
  }
  return sub_19E3BEFC0(a3, v6, v5, a1);
}

char *sub_19E3BD3C0(uint64_t a1, char *a2, uint64_t a3)
{
  unsigned int v10 = a2;
  while (1)
  {
    if (sub_19E3A03C4(a3, &v10, *(_DWORD *)(a3 + 92))) {
      return v10;
    }
    int v5 = v10 + 1;
    unsigned int v6 = *v10;
    if (*v10 < 0)
    {
      unsigned int v6 = v6 + (*v5 << 7) - 128;
      if (*v5 < 0)
      {
        int v5 = v10 + 3;
        uint64_t v8 = -21;
        while (1)
        {
          v6 += (*(v5 - 1) - 1) << (v8 + 35);
          if ((*(v5 - 1) & 0x80000000) == 0) {
            break;
          }
          ++v5;
          v8 += 7;
          if (!v8) {
            return 0;
          }
        }
      }
      else
      {
        int v5 = v10 + 2;
      }
    }
    unsigned int v10 = v5;
    if (!v6 || (v6 & 7) == 4) {
      break;
    }
    unsigned int v10 = (char *)sub_19E3BD4D8(v6, a1);
    if (!v10) {
      return 0;
    }
  }
  *(_DWORD *)(a3 + 8sub_19E392864(&a9, 0) = v6 - 1;
  return v5;
}

unsigned __int8 *sub_19E3BD4AC(unsigned int a1, std::string *a2, char *a3, int32x2_t *a4)
{
  int v5 = a2;
  return sub_19E3BD4D8(a1, &v5, a3, a4);
}

unsigned __int8 *sub_19E3BD4D8(unint64_t a1, std::string **a2, char *a3, int32x2_t *a4)
{
  unint64_t v4 = a1 >> 3;
  if (!(a1 >> 3)) {
    return 0;
  }
  int v5 = (unsigned __int8 *)a3;
  switch(a1 & 7)
  {
    case 0uLL:
      v11[0].__r_.__value_.__r.__words[0] = 0;
      int v5 = sub_19E3BD638(a3, v11);
      if (v5) {
        sub_19E3BF0C8(a2, v4, v11[0].__r_.__value_.__r.__words[0]);
      }
      return v5;
    case 1uLL:
      int v5 = (unsigned __int8 *)(a3 + 8);
      sub_19E3BF190((std::string *)a2, v4, *(void *)a3);
      return v5;
    case 2uLL:
      uint64_t v8 = (unsigned __int8 *)sub_19E3BF24C(a2, v4, a3, (uint64_t)a4);
      goto LABEL_10;
    case 3uLL:
      uint64_t v8 = (unsigned __int8 *)sub_19E3BF3B8(a2, v4, a3, a4);
LABEL_10:
      int v5 = v8;
      break;
    case 4uLL:
      sub_19E3AF8D4((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 758);
      unint64_t v7 = sub_19E3AF8EC(v11, "Can't happen");
      sub_19E3AFA28((uint64_t)&v10, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v11);
      break;
    case 5uLL:
      int v5 = (unsigned __int8 *)(a3 + 4);
      sub_19E3BF4E4((std::string *)a2, v4, *(_DWORD *)a3);
      break;
    default:
      return 0;
  }
  return v5;
}

void sub_19E3BD608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_19E3BD638(char *a1, void *a2)
{
  uint64_t v2 = *a1;
  if (*a1 < 0)
  {
    int v4 = a1[1];
    uint64_t v5 = (v2 + (v4 << 7) - 128);
    if ((v4 & 0x80) != 0)
    {
      uint64_t result = (unsigned __int8 *)(a1 + 3);
      uint64_t v6 = 14;
      while (1)
      {
        v5 += (*(result - 1) - 1) << v6;
        if (((char)*(result - 1) & 0x80000000) == 0) {
          break;
        }
        ++result;
        v6 += 7;
        if (v6 == 70)
        {
          uint64_t result = 0;
          uint64_t v5 = 0;
          break;
        }
      }
      *a2 = v5;
    }
    else
    {
      *a2 = v5;
      return (unsigned __int8 *)(a1 + 2);
    }
  }
  else
  {
    *a2 = v2;
    return (unsigned __int8 *)(a1 + 1);
  }
  return result;
}

unsigned __int8 *sub_19E3BD6AC(uint64_t a1, unsigned __int8 *a2, int *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  int v5 = *a2;
  if ((char)*a2 < 0)
  {
    uint64_t result = (unsigned __int8 *)sub_19E3BCF80((uint64_t)a2, *a2);
    if (!result) {
      return result;
    }
    int v5 = v7;
  }
  else
  {
    uint64_t result = a2 + 1;
  }
  unint64_t v8 = *(void *)(a1 + 8);
  int v9 = v8 - result;
  if (v5 <= (int)v8 - (int)result)
  {
LABEL_15:
    unint64_t v14 = (unint64_t)&result[v5];
    uint64_t result = sub_19E3BD8D0(result, v14, a3);
    if ((unsigned __int8 *)v14 != result) {
      return 0;
    }
  }
  else
  {
    while (1)
    {
      uint64_t result = sub_19E3BD8D0(result, v8, a3);
      if (!result) {
        break;
      }
      signed int v10 = result - *(void *)(a1 + 8);
      if (v10 >= 0x11)
      {
        sub_19E3AF8D4((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 674);
        int v11 = sub_19E3AF8EC(&v18, "CHECK failed: overrun >= 0 && overrun <= kSlopBytes: ");
        sub_19E3AFA28((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
        sub_19E3AFA30((uint64_t)&v18);
      }
      int v12 = v5 - v9;
      if (v5 - v9 <= 16)
      {
        __int16 v19 = 0;
        v18.__r_.__value_.__r.__words[2] = 0;
        *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)*(void *)(a1 + 8);
        int v15 = sub_19E3BD8D0((unsigned __int8 *)&v18 + v10, (unint64_t)&v18 + v12, a3);
        if (v15) {
          BOOL v16 = v15 == (unsigned __int8 *)((char *)&v18 + v12);
        }
        else {
          BOOL v16 = 0;
        }
        if (!v16) {
          return 0;
        }
        return (unsigned __int8 *)(*(void *)(a1 + 8) + v12);
      }
      int v5 = v5 - v9 - v10;
      if (v5 <= 0)
      {
        sub_19E3AF8D4((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 688);
        BOOL v13 = sub_19E3AF8EC(&v18, "CHECK failed: (size) > (0): ");
        sub_19E3AFA28((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
        sub_19E3AFA30((uint64_t)&v18);
      }
      if (*(int *)(a1 + 28) < 17) {
        return 0;
      }
      uint64_t result = (unsigned __int8 *)sub_19E3BC130(a1);
      if (!result) {
        return result;
      }
      result += v10;
      unint64_t v8 = *(void *)(a1 + 8);
      int v9 = v8 - result;
      if (v5 <= (int)v8 - (int)result) {
        goto LABEL_15;
      }
    }
  }
  return result;
}

void sub_19E3BD8A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_19E3BD8D0(unsigned __int8 *a1, unint64_t a2, int *a3)
{
  for (uint64_t i = a1; (unint64_t)i < a2; *a3 = v8)
  {
    uint64_t v10 = 0;
    uint64_t i = sub_19E3BD638((char *)i, &v10);
    if (!i) {
      break;
    }
    int v6 = v10;
    uint64_t v7 = *a3;
    if (v7 == a3[1])
    {
      int v8 = v7 + 1;
      sub_19E3BFC34(a3, v7 + 1);
      *(_DWORD *)(sub_19E3C00D4((uint64_t)a3) + 4 * v7) = v6;
    }
    else
    {
      *(_DWORD *)(sub_19E3C00D4((uint64_t)a3) + 4 * v7) = v6;
      int v8 = v7 + 1;
    }
  }
  return i;
}

unsigned __int8 *sub_19E3BD980(uint64_t a1, unsigned __int8 *a2, int *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  int v5 = *a2;
  if ((char)*a2 < 0)
  {
    uint64_t result = (unsigned __int8 *)sub_19E3BCF80((uint64_t)a2, *a2);
    if (!result) {
      return result;
    }
    int v5 = v7;
  }
  else
  {
    uint64_t result = a2 + 1;
  }
  unint64_t v8 = *(void *)(a1 + 8);
  int v9 = v8 - result;
  if (v5 <= (int)v8 - (int)result)
  {
LABEL_15:
    unint64_t v14 = (unint64_t)&result[v5];
    uint64_t result = sub_19E3BDBA4(result, v14, a3);
    if ((unsigned __int8 *)v14 != result) {
      return 0;
    }
  }
  else
  {
    while (1)
    {
      uint64_t result = sub_19E3BDBA4(result, v8, a3);
      if (!result) {
        break;
      }
      signed int v10 = result - *(void *)(a1 + 8);
      if (v10 >= 0x11)
      {
        sub_19E3AF8D4((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 674);
        int v11 = sub_19E3AF8EC(&v18, "CHECK failed: overrun >= 0 && overrun <= kSlopBytes: ");
        sub_19E3AFA28((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
        sub_19E3AFA30((uint64_t)&v18);
      }
      int v12 = v5 - v9;
      if (v5 - v9 <= 16)
      {
        __int16 v19 = 0;
        v18.__r_.__value_.__r.__words[2] = 0;
        *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)*(void *)(a1 + 8);
        int v15 = sub_19E3BDBA4((unsigned __int8 *)&v18 + v10, (unint64_t)&v18 + v12, a3);
        if (v15) {
          BOOL v16 = v15 == (unsigned __int8 *)((char *)&v18 + v12);
        }
        else {
          BOOL v16 = 0;
        }
        if (!v16) {
          return 0;
        }
        return (unsigned __int8 *)(*(void *)(a1 + 8) + v12);
      }
      int v5 = v5 - v9 - v10;
      if (v5 <= 0)
      {
        sub_19E3AF8D4((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 688);
        BOOL v13 = sub_19E3AF8EC(&v18, "CHECK failed: (size) > (0): ");
        sub_19E3AFA28((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
        sub_19E3AFA30((uint64_t)&v18);
      }
      if (*(int *)(a1 + 28) < 17) {
        return 0;
      }
      uint64_t result = (unsigned __int8 *)sub_19E3BC130(a1);
      if (!result) {
        return result;
      }
      result += v10;
      unint64_t v8 = *(void *)(a1 + 8);
      int v9 = v8 - result;
      if (v5 <= (int)v8 - (int)result) {
        goto LABEL_15;
      }
    }
  }
  return result;
}

void sub_19E3BDB7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_19E3BDBA4(unsigned __int8 *a1, unint64_t a2, int *a3)
{
  for (uint64_t i = a1; (unint64_t)i < a2; *a3 = v8)
  {
    uint64_t v10 = 0;
    uint64_t i = sub_19E3BD638((char *)i, &v10);
    if (!i) {
      break;
    }
    int v6 = v10;
    uint64_t v7 = *a3;
    if (v7 == a3[1])
    {
      int v8 = v7 + 1;
      sub_19E3C0290(a3, v7 + 1);
      *(_DWORD *)(sub_19E3C0730((uint64_t)a3) + 4 * v7) = v6;
    }
    else
    {
      *(_DWORD *)(sub_19E3C0730((uint64_t)a3) + 4 * v7) = v6;
      int v8 = v7 + 1;
    }
  }
  return i;
}

unsigned __int8 *sub_19E3BDC54(uint64_t a1, unsigned __int8 *a2, int *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  int v5 = *a2;
  if ((char)*a2 < 0)
  {
    uint64_t result = (unsigned __int8 *)sub_19E3BCF80((uint64_t)a2, *a2);
    if (!result) {
      return result;
    }
    int v5 = v7;
  }
  else
  {
    uint64_t result = a2 + 1;
  }
  unint64_t v8 = *(void *)(a1 + 8);
  int v9 = v8 - result;
  if (v5 <= (int)v8 - (int)result)
  {
LABEL_15:
    unint64_t v14 = (unint64_t)&result[v5];
    uint64_t result = sub_19E3BDE78(result, v14, a3);
    if ((unsigned __int8 *)v14 != result) {
      return 0;
    }
  }
  else
  {
    while (1)
    {
      uint64_t result = sub_19E3BDE78(result, v8, a3);
      if (!result) {
        break;
      }
      signed int v10 = result - *(void *)(a1 + 8);
      if (v10 >= 0x11)
      {
        sub_19E3AF8D4((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 674);
        int v11 = sub_19E3AF8EC(&v18, "CHECK failed: overrun >= 0 && overrun <= kSlopBytes: ");
        sub_19E3AFA28((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
        sub_19E3AFA30((uint64_t)&v18);
      }
      int v12 = v5 - v9;
      if (v5 - v9 <= 16)
      {
        __int16 v19 = 0;
        v18.__r_.__value_.__r.__words[2] = 0;
        *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)*(void *)(a1 + 8);
        int v15 = sub_19E3BDE78((unsigned __int8 *)&v18 + v10, (unint64_t)&v18 + v12, a3);
        if (v15) {
          BOOL v16 = v15 == (unsigned __int8 *)((char *)&v18 + v12);
        }
        else {
          BOOL v16 = 0;
        }
        if (!v16) {
          return 0;
        }
        return (unsigned __int8 *)(*(void *)(a1 + 8) + v12);
      }
      int v5 = v5 - v9 - v10;
      if (v5 <= 0)
      {
        sub_19E3AF8D4((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 688);
        BOOL v13 = sub_19E3AF8EC(&v18, "CHECK failed: (size) > (0): ");
        sub_19E3AFA28((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
        sub_19E3AFA30((uint64_t)&v18);
      }
      if (*(int *)(a1 + 28) < 17) {
        return 0;
      }
      uint64_t result = (unsigned __int8 *)sub_19E3BC130(a1);
      if (!result) {
        return result;
      }
      result += v10;
      unint64_t v8 = *(void *)(a1 + 8);
      int v9 = v8 - result;
      if (v5 <= (int)v8 - (int)result) {
        goto LABEL_15;
      }
    }
  }
  return result;
}

void sub_19E3BDE50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_19E3BDE78(unsigned __int8 *a1, unint64_t a2, int *a3)
{
  for (uint64_t i = a1; (unint64_t)i < a2; *a3 = v8)
  {
    uint64_t v10 = 0;
    uint64_t i = sub_19E3BD638((char *)i, &v10);
    if (!i) {
      break;
    }
    uint64_t v6 = v10;
    uint64_t v7 = *a3;
    if (v7 == a3[1])
    {
      int v8 = v7 + 1;
      sub_19E3C08EC(a3, v7 + 1);
      *(void *)(sub_19E3C0D8C((uint64_t)a3) + 8 * v7) = v6;
    }
    else
    {
      *(void *)(sub_19E3C0D8C((uint64_t)a3) + 8 * v7) = v6;
      int v8 = v7 + 1;
    }
  }
  return i;
}

unsigned __int8 *sub_19E3BDF28(uint64_t a1, unsigned __int8 *a2, int *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  int v5 = *a2;
  if ((char)*a2 < 0)
  {
    uint64_t result = (unsigned __int8 *)sub_19E3BCF80((uint64_t)a2, *a2);
    if (!result) {
      return result;
    }
    int v5 = v7;
  }
  else
  {
    uint64_t result = a2 + 1;
  }
  unint64_t v8 = *(void *)(a1 + 8);
  int v9 = v8 - result;
  if (v5 <= (int)v8 - (int)result)
  {
LABEL_15:
    unint64_t v14 = (unint64_t)&result[v5];
    uint64_t result = sub_19E3BE14C(result, v14, a3);
    if ((unsigned __int8 *)v14 != result) {
      return 0;
    }
  }
  else
  {
    while (1)
    {
      uint64_t result = sub_19E3BE14C(result, v8, a3);
      if (!result) {
        break;
      }
      signed int v10 = result - *(void *)(a1 + 8);
      if (v10 >= 0x11)
      {
        sub_19E3AF8D4((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 674);
        int v11 = sub_19E3AF8EC(&v18, "CHECK failed: overrun >= 0 && overrun <= kSlopBytes: ");
        sub_19E3AFA28((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
        sub_19E3AFA30((uint64_t)&v18);
      }
      int v12 = v5 - v9;
      if (v5 - v9 <= 16)
      {
        __int16 v19 = 0;
        v18.__r_.__value_.__r.__words[2] = 0;
        *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)*(void *)(a1 + 8);
        int v15 = sub_19E3BE14C((unsigned __int8 *)&v18 + v10, (unint64_t)&v18 + v12, a3);
        if (v15) {
          BOOL v16 = v15 == (unsigned __int8 *)((char *)&v18 + v12);
        }
        else {
          BOOL v16 = 0;
        }
        if (!v16) {
          return 0;
        }
        return (unsigned __int8 *)(*(void *)(a1 + 8) + v12);
      }
      int v5 = v5 - v9 - v10;
      if (v5 <= 0)
      {
        sub_19E3AF8D4((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 688);
        BOOL v13 = sub_19E3AF8EC(&v18, "CHECK failed: (size) > (0): ");
        sub_19E3AFA28((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
        sub_19E3AFA30((uint64_t)&v18);
      }
      if (*(int *)(a1 + 28) < 17) {
        return 0;
      }
      uint64_t result = (unsigned __int8 *)sub_19E3BC130(a1);
      if (!result) {
        return result;
      }
      result += v10;
      unint64_t v8 = *(void *)(a1 + 8);
      int v9 = v8 - result;
      if (v5 <= (int)v8 - (int)result) {
        goto LABEL_15;
      }
    }
  }
  return result;
}

void sub_19E3BE124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_19E3BE14C(unsigned __int8 *a1, unint64_t a2, int *a3)
{
  for (uint64_t i = a1; (unint64_t)i < a2; *a3 = v8)
  {
    uint64_t v10 = 0;
    uint64_t i = sub_19E3BD638((char *)i, &v10);
    if (!i) {
      break;
    }
    uint64_t v6 = v10;
    uint64_t v7 = *a3;
    if (v7 == a3[1])
    {
      int v8 = v7 + 1;
      sub_19E3C0F48(a3, v7 + 1);
      *(void *)(sub_19E3C13E8((uint64_t)a3) + 8 * v7) = v6;
    }
    else
    {
      *(void *)(sub_19E3C13E8((uint64_t)a3) + 8 * v7) = v6;
      int v8 = v7 + 1;
    }
  }
  return i;
}

unsigned __int8 *sub_19E3BE1FC(uint64_t a1, unsigned __int8 *a2, int *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  int v5 = *a2;
  if ((char)*a2 < 0)
  {
    uint64_t result = (unsigned __int8 *)sub_19E3BCF80((uint64_t)a2, *a2);
    if (!result) {
      return result;
    }
    int v5 = v7;
  }
  else
  {
    uint64_t result = a2 + 1;
  }
  unint64_t v8 = *(void *)(a1 + 8);
  int v9 = v8 - result;
  if (v5 <= (int)v8 - (int)result)
  {
LABEL_15:
    unint64_t v14 = (unint64_t)&result[v5];
    uint64_t result = sub_19E3BE420(result, v14, a3);
    if ((unsigned __int8 *)v14 != result) {
      return 0;
    }
  }
  else
  {
    while (1)
    {
      uint64_t result = sub_19E3BE420(result, v8, a3);
      if (!result) {
        break;
      }
      signed int v10 = result - *(void *)(a1 + 8);
      if (v10 >= 0x11)
      {
        sub_19E3AF8D4((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 674);
        int v11 = sub_19E3AF8EC(&v18, "CHECK failed: overrun >= 0 && overrun <= kSlopBytes: ");
        sub_19E3AFA28((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
        sub_19E3AFA30((uint64_t)&v18);
      }
      int v12 = v5 - v9;
      if (v5 - v9 <= 16)
      {
        __int16 v19 = 0;
        v18.__r_.__value_.__r.__words[2] = 0;
        *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)*(void *)(a1 + 8);
        int v15 = sub_19E3BE420((unsigned __int8 *)&v18 + v10, (unint64_t)&v18 + v12, a3);
        if (v15) {
          BOOL v16 = v15 == (unsigned __int8 *)((char *)&v18 + v12);
        }
        else {
          BOOL v16 = 0;
        }
        if (!v16) {
          return 0;
        }
        return (unsigned __int8 *)(*(void *)(a1 + 8) + v12);
      }
      int v5 = v5 - v9 - v10;
      if (v5 <= 0)
      {
        sub_19E3AF8D4((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 688);
        BOOL v13 = sub_19E3AF8EC(&v18, "CHECK failed: (size) > (0): ");
        sub_19E3AFA28((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
        sub_19E3AFA30((uint64_t)&v18);
      }
      if (*(int *)(a1 + 28) < 17) {
        return 0;
      }
      uint64_t result = (unsigned __int8 *)sub_19E3BC130(a1);
      if (!result) {
        return result;
      }
      result += v10;
      unint64_t v8 = *(void *)(a1 + 8);
      int v9 = v8 - result;
      if (v5 <= (int)v8 - (int)result) {
        goto LABEL_15;
      }
    }
  }
  return result;
}

void sub_19E3BE3F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_19E3BE420(unsigned __int8 *a1, unint64_t a2, int *a3)
{
  for (uint64_t i = a1; (unint64_t)i < a2; *a3 = v8)
  {
    uint64_t v10 = 0;
    uint64_t i = sub_19E3BD638((char *)i, &v10);
    if (!i) {
      break;
    }
    int v6 = -(v10 & 1) ^ (v10 >> 1);
    uint64_t v7 = *a3;
    if (v7 == a3[1])
    {
      int v8 = v7 + 1;
      sub_19E3BFC34(a3, v7 + 1);
      *(_DWORD *)(sub_19E3C00D4((uint64_t)a3) + 4 * v7) = v6;
    }
    else
    {
      *(_DWORD *)(sub_19E3C00D4((uint64_t)a3) + 4 * v7) = v6;
      int v8 = v7 + 1;
    }
  }
  return i;
}

unsigned __int8 *sub_19E3BE4DC(uint64_t a1, unsigned __int8 *a2, int *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  int v5 = *a2;
  if ((char)*a2 < 0)
  {
    uint64_t result = (unsigned __int8 *)sub_19E3BCF80((uint64_t)a2, *a2);
    if (!result) {
      return result;
    }
    int v5 = v7;
  }
  else
  {
    uint64_t result = a2 + 1;
  }
  unint64_t v8 = *(void *)(a1 + 8);
  int v9 = v8 - result;
  if (v5 <= (int)v8 - (int)result)
  {
LABEL_15:
    unint64_t v14 = (unint64_t)&result[v5];
    uint64_t result = sub_19E3BE700(result, v14, a3);
    if ((unsigned __int8 *)v14 != result) {
      return 0;
    }
  }
  else
  {
    while (1)
    {
      uint64_t result = sub_19E3BE700(result, v8, a3);
      if (!result) {
        break;
      }
      signed int v10 = result - *(void *)(a1 + 8);
      if (v10 >= 0x11)
      {
        sub_19E3AF8D4((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 674);
        int v11 = sub_19E3AF8EC(&v18, "CHECK failed: overrun >= 0 && overrun <= kSlopBytes: ");
        sub_19E3AFA28((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
        sub_19E3AFA30((uint64_t)&v18);
      }
      int v12 = v5 - v9;
      if (v5 - v9 <= 16)
      {
        __int16 v19 = 0;
        v18.__r_.__value_.__r.__words[2] = 0;
        *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)*(void *)(a1 + 8);
        int v15 = sub_19E3BE700((unsigned __int8 *)&v18 + v10, (unint64_t)&v18 + v12, a3);
        if (v15) {
          BOOL v16 = v15 == (unsigned __int8 *)((char *)&v18 + v12);
        }
        else {
          BOOL v16 = 0;
        }
        if (!v16) {
          return 0;
        }
        return (unsigned __int8 *)(*(void *)(a1 + 8) + v12);
      }
      int v5 = v5 - v9 - v10;
      if (v5 <= 0)
      {
        sub_19E3AF8D4((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 688);
        BOOL v13 = sub_19E3AF8EC(&v18, "CHECK failed: (size) > (0): ");
        sub_19E3AFA28((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
        sub_19E3AFA30((uint64_t)&v18);
      }
      if (*(int *)(a1 + 28) < 17) {
        return 0;
      }
      uint64_t result = (unsigned __int8 *)sub_19E3BC130(a1);
      if (!result) {
        return result;
      }
      result += v10;
      unint64_t v8 = *(void *)(a1 + 8);
      int v9 = v8 - result;
      if (v5 <= (int)v8 - (int)result) {
        goto LABEL_15;
      }
    }
  }
  return result;
}

void sub_19E3BE6D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_19E3BE700(unsigned __int8 *a1, unint64_t a2, int *a3)
{
  for (uint64_t i = a1; (unint64_t)i < a2; *a3 = v8)
  {
    unint64_t v10 = 0;
    uint64_t i = sub_19E3BD638((char *)i, &v10);
    if (!i) {
      break;
    }
    unint64_t v6 = -(uint64_t)(v10 & 1) ^ (v10 >> 1);
    uint64_t v7 = *a3;
    if (v7 == a3[1])
    {
      int v8 = v7 + 1;
      sub_19E3C08EC(a3, v7 + 1);
      *(void *)(sub_19E3C0D8C((uint64_t)a3) + 8 * v7) = v6;
    }
    else
    {
      *(void *)(sub_19E3C0D8C((uint64_t)a3) + 8 * v7) = v6;
      int v8 = v7 + 1;
    }
  }
  return i;
}

unsigned __int8 *sub_19E3BE7BC(uint64_t a1, unsigned __int8 *a2, int *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  int v5 = *a2;
  if ((char)*a2 < 0)
  {
    uint64_t result = (unsigned __int8 *)sub_19E3BCF80((uint64_t)a2, *a2);
    if (!result) {
      return result;
    }
    int v5 = v7;
  }
  else
  {
    uint64_t result = a2 + 1;
  }
  unint64_t v8 = *(void *)(a1 + 8);
  int v9 = v8 - result;
  if (v5 <= (int)v8 - (int)result)
  {
LABEL_15:
    unint64_t v14 = (unint64_t)&result[v5];
    uint64_t result = sub_19E3BE9E0(result, v14, a3);
    if ((unsigned __int8 *)v14 != result) {
      return 0;
    }
  }
  else
  {
    while (1)
    {
      uint64_t result = sub_19E3BE9E0(result, v8, a3);
      if (!result) {
        break;
      }
      signed int v10 = result - *(void *)(a1 + 8);
      if (v10 >= 0x11)
      {
        sub_19E3AF8D4((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 674);
        int v11 = sub_19E3AF8EC(&v18, "CHECK failed: overrun >= 0 && overrun <= kSlopBytes: ");
        sub_19E3AFA28((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
        sub_19E3AFA30((uint64_t)&v18);
      }
      int v12 = v5 - v9;
      if (v5 - v9 <= 16)
      {
        __int16 v19 = 0;
        v18.__r_.__value_.__r.__words[2] = 0;
        *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)*(void *)(a1 + 8);
        int v15 = sub_19E3BE9E0((unsigned __int8 *)&v18 + v10, (unint64_t)&v18 + v12, a3);
        if (v15) {
          BOOL v16 = v15 == (unsigned __int8 *)((char *)&v18 + v12);
        }
        else {
          BOOL v16 = 0;
        }
        if (!v16) {
          return 0;
        }
        return (unsigned __int8 *)(*(void *)(a1 + 8) + v12);
      }
      int v5 = v5 - v9 - v10;
      if (v5 <= 0)
      {
        sub_19E3AF8D4((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 688);
        BOOL v13 = sub_19E3AF8EC(&v18, "CHECK failed: (size) > (0): ");
        sub_19E3AFA28((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
        sub_19E3AFA30((uint64_t)&v18);
      }
      if (*(int *)(a1 + 28) < 17) {
        return 0;
      }
      uint64_t result = (unsigned __int8 *)sub_19E3BC130(a1);
      if (!result) {
        return result;
      }
      result += v10;
      unint64_t v8 = *(void *)(a1 + 8);
      int v9 = v8 - result;
      if (v5 <= (int)v8 - (int)result) {
        goto LABEL_15;
      }
    }
  }
  return result;
}

void sub_19E3BE9B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_19E3BE9E0(unsigned __int8 *a1, unint64_t a2, int *a3)
{
  for (uint64_t i = a1; (unint64_t)i < a2; *a3 = v8)
  {
    uint64_t v10 = 0;
    uint64_t i = sub_19E3BD638((char *)i, &v10);
    if (!i) {
      break;
    }
    BOOL v6 = v10 != 0;
    uint64_t v7 = *a3;
    if (v7 == a3[1])
    {
      int v8 = v7 + 1;
      sub_19E3BF5E0(a3, v7 + 1);
      *(unsigned char *)(sub_19E3BFA7C((uint64_t)a3) + v7) = v6;
    }
    else
    {
      *(unsigned char *)(sub_19E3BFA7C((uint64_t)a3) + v7) = v6;
      int v8 = v7 + 1;
    }
  }
  return i;
}

char *sub_19E3BEA98(uint64_t a1, char *a2, int a3, int *a4)
{
  int v5 = a3;
  BOOL v6 = a2;
  int v7 = *(_DWORD *)(a1 + 8) - a2 + 16;
  if (v7 >= a3)
  {
LABEL_5:
    sub_19E3C0290(a4, *a4 + (v5 >> 2));
    int v11 = (void *)sub_19E3C0464((uint64_t)a4, v5 >> 2);
    memcpy(v11, v6, (int)(v5 & 0xFFFFFFFC));
    if (v5 == (v5 & 0xFFFFFFFC)) {
      return &v6[v5 & 0xFFFFFFFC];
    }
    else {
      return 0;
    }
  }
  else
  {
    while (1)
    {
      sub_19E3C0290(a4, *a4 + (v7 >> 2));
      int v9 = (void *)sub_19E3C0464((uint64_t)a4, v7 >> 2);
      memcpy(v9, v6, (int)(v7 & 0xFFFFFFFC));
      if (*(int *)(a1 + 28) < 17) {
        return 0;
      }
      uint64_t result = (char *)sub_19E3BC130(a1);
      if (!result) {
        return result;
      }
      v5 -= v7 & 0xFFFFFFFC;
      BOOL v6 = &result[-(v7 & 3) + 16];
      int v7 = *(_DWORD *)(a1 + 8) - (result - (v7 & 3));
      if (v5 <= v7) {
        goto LABEL_5;
      }
    }
  }
}

char *sub_19E3BEBA0(uint64_t a1, char *a2, int a3, int *a4)
{
  int v5 = a3;
  BOOL v6 = a2;
  int v7 = *(_DWORD *)(a1 + 8) - a2 + 16;
  if (v7 >= a3)
  {
LABEL_5:
    sub_19E3BFC34(a4, *a4 + (v5 >> 2));
    int v11 = (void *)sub_19E3BFE08((uint64_t)a4, v5 >> 2);
    memcpy(v11, v6, (int)(v5 & 0xFFFFFFFC));
    if (v5 == (v5 & 0xFFFFFFFC)) {
      return &v6[v5 & 0xFFFFFFFC];
    }
    else {
      return 0;
    }
  }
  else
  {
    while (1)
    {
      sub_19E3BFC34(a4, *a4 + (v7 >> 2));
      int v9 = (void *)sub_19E3BFE08((uint64_t)a4, v7 >> 2);
      memcpy(v9, v6, (int)(v7 & 0xFFFFFFFC));
      if (*(int *)(a1 + 28) < 17) {
        return 0;
      }
      uint64_t result = (char *)sub_19E3BC130(a1);
      if (!result) {
        return result;
      }
      v5 -= v7 & 0xFFFFFFFC;
      BOOL v6 = &result[-(v7 & 3) + 16];
      int v7 = *(_DWORD *)(a1 + 8) - (result - (v7 & 3));
      if (v5 <= v7) {
        goto LABEL_5;
      }
    }
  }
}

char *sub_19E3BECA8(uint64_t a1, char *a2, int a3, int *a4)
{
  int v5 = a3;
  BOOL v6 = a2;
  int v7 = *(_DWORD *)(a1 + 8) - a2 + 16;
  if (v7 >= a3)
  {
LABEL_5:
    sub_19E3C0F48(a4, *a4 + (v5 >> 3));
    int v11 = (void *)sub_19E3C111C((uint64_t)a4, v5 >> 3);
    memcpy(v11, v6, (int)(v5 & 0xFFFFFFF8));
    if (v5 == (v5 & 0xFFFFFFF8)) {
      return &v6[v5 & 0xFFFFFFF8];
    }
    else {
      return 0;
    }
  }
  else
  {
    while (1)
    {
      sub_19E3C0F48(a4, *a4 + (v7 >> 3));
      int v9 = (void *)sub_19E3C111C((uint64_t)a4, v7 >> 3);
      memcpy(v9, v6, (int)(v7 & 0xFFFFFFF8));
      if (*(int *)(a1 + 28) < 17) {
        return 0;
      }
      uint64_t result = (char *)sub_19E3BC130(a1);
      if (!result) {
        return result;
      }
      v5 -= v7 & 0xFFFFFFF8;
      BOOL v6 = &result[-(v7 & 7) + 16];
      int v7 = *(_DWORD *)(a1 + 8) - (result - (v7 & 7));
      if (v5 <= v7) {
        goto LABEL_5;
      }
    }
  }
}

char *sub_19E3BEDB0(uint64_t a1, char *a2, int a3, int *a4)
{
  int v5 = a3;
  BOOL v6 = a2;
  int v7 = *(_DWORD *)(a1 + 8) - a2 + 16;
  if (v7 >= a3)
  {
LABEL_5:
    sub_19E3C08EC(a4, *a4 + (v5 >> 3));
    int v11 = (void *)sub_19E3C0AC0((uint64_t)a4, v5 >> 3);
    memcpy(v11, v6, (int)(v5 & 0xFFFFFFF8));
    if (v5 == (v5 & 0xFFFFFFF8)) {
      return &v6[v5 & 0xFFFFFFF8];
    }
    else {
      return 0;
    }
  }
  else
  {
    while (1)
    {
      sub_19E3C08EC(a4, *a4 + (v7 >> 3));
      int v9 = (void *)sub_19E3C0AC0((uint64_t)a4, v7 >> 3);
      memcpy(v9, v6, (int)(v7 & 0xFFFFFFF8));
      if (*(int *)(a1 + 28) < 17) {
        return 0;
      }
      uint64_t result = (char *)sub_19E3BC130(a1);
      if (!result) {
        return result;
      }
      v5 -= v7 & 0xFFFFFFF8;
      BOOL v6 = &result[-(v7 & 7) + 16];
      int v7 = *(_DWORD *)(a1 + 8) - (result - (v7 & 7));
      if (v5 <= v7) {
        goto LABEL_5;
      }
    }
  }
}

char *sub_19E3BEEB8(uint64_t a1, char *a2, int a3, int *a4)
{
  int v5 = a3;
  BOOL v6 = a2;
  int v7 = *(_DWORD *)(a1 + 8) - a2 + 16;
  if (v7 >= a3)
  {
LABEL_5:
    sub_19E3C15A4(a4, *a4 + (v5 >> 2));
    int v11 = (void *)sub_19E3C1778((uint64_t)a4, v5 >> 2);
    memcpy(v11, v6, (int)(v5 & 0xFFFFFFFC));
    if (v5 == (v5 & 0xFFFFFFFC)) {
      return &v6[v5 & 0xFFFFFFFC];
    }
    else {
      return 0;
    }
  }
  else
  {
    while (1)
    {
      sub_19E3C15A4(a4, *a4 + (v7 >> 2));
      int v9 = (void *)sub_19E3C1778((uint64_t)a4, v7 >> 2);
      memcpy(v9, v6, (int)(v7 & 0xFFFFFFFC));
      if (*(int *)(a1 + 28) < 17) {
        return 0;
      }
      uint64_t result = (char *)sub_19E3BC130(a1);
      if (!result) {
        return result;
      }
      v5 -= v7 & 0xFFFFFFFC;
      BOOL v6 = &result[-(v7 & 3) + 16];
      int v7 = *(_DWORD *)(a1 + 8) - (result - (v7 & 3));
      if (v5 <= v7) {
        goto LABEL_5;
      }
    }
  }
}

char *sub_19E3BEFC0(uint64_t a1, char *a2, int a3, int *a4)
{
  int v5 = a3;
  BOOL v6 = a2;
  int v7 = *(_DWORD *)(a1 + 8) - a2 + 16;
  if (v7 >= a3)
  {
LABEL_5:
    sub_19E3C1C00(a4, *a4 + (v5 >> 3));
    int v11 = (void *)sub_19E3C1DD4((uint64_t)a4, v5 >> 3);
    memcpy(v11, v6, (int)(v5 & 0xFFFFFFF8));
    if (v5 == (v5 & 0xFFFFFFF8)) {
      return &v6[v5 & 0xFFFFFFF8];
    }
    else {
      return 0;
    }
  }
  else
  {
    while (1)
    {
      sub_19E3C1C00(a4, *a4 + (v7 >> 3));
      int v9 = (void *)sub_19E3C1DD4((uint64_t)a4, v7 >> 3);
      memcpy(v9, v6, (int)(v7 & 0xFFFFFFF8));
      if (*(int *)(a1 + 28) < 17) {
        return 0;
      }
      uint64_t result = (char *)sub_19E3BC130(a1);
      if (!result) {
        return result;
      }
      v5 -= v7 & 0xFFFFFFF8;
      BOOL v6 = &result[-(v7 & 7) + 16];
      int v7 = *(_DWORD *)(a1 + 8) - (result - (v7 & 7));
      if (v5 <= v7) {
        goto LABEL_5;
      }
    }
  }
}

void sub_19E3BF0C8(std::string **a1, int a2, unint64_t a3)
{
  int v3 = *a1;
  if (*a1)
  {
    unint64_t v6 = (8 * a2);
    if (v6 < 0x80)
    {
      LOBYTE(v7) = 8 * a2;
    }
    else
    {
      do
      {
        std::string::push_back(v3, v6 | 0x80);
        unint64_t v7 = v6 >> 7;
        unint64_t v8 = v6 >> 14;
        v6 >>= 7;
      }
      while (v8);
    }
    std::string::push_back(v3, v7);
    int v9 = *a1;
    if (a3 < 0x80)
    {
      LOBYTE(v1sub_19E392864(&a9, 0) = a3;
    }
    else
    {
      do
      {
        std::string::push_back(v9, a3 | 0x80);
        unint64_t v10 = a3 >> 7;
        unint64_t v11 = a3 >> 14;
        a3 >>= 7;
      }
      while (v11);
    }
    std::string::push_back(v9, v10);
  }
}

std::string *sub_19E3BF190(std::string *result, int a2, uint64_t a3)
{
  v9[1] = *MEMORY[0x1E4F143B8];
  int v3 = (std::string *)result->__r_.__value_.__r.__words[0];
  if (result->__r_.__value_.__r.__words[0])
  {
    int v5 = (std::string **)result;
    unint64_t v6 = (8 * a2) | 1u;
    if (v6 < 0x80)
    {
      LOBYTE(v7) = (8 * a2) | 1;
    }
    else
    {
      do
      {
        std::string::push_back(v3, v6 | 0x80);
        unint64_t v7 = v6 >> 7;
        unint64_t v8 = v6 >> 14;
        v6 >>= 7;
      }
      while (v8);
    }
    std::string::push_back(v3, v7);
    v9[0] = a3;
    return std::string::append(*v5, (const std::string::value_type *)v9, 8uLL);
  }
  return result;
}

const std::string::value_type *sub_19E3BF24C(std::string **a1, int a2, char *a3, uint64_t a4)
{
  int v7 = *a3;
  if (*a3 < 0)
  {
    uint64_t result = (const std::string::value_type *)sub_19E3BCF80((uint64_t)a3, *a3);
    if (!result) {
      return result;
    }
    unint64_t v8 = (std::string::value_type *)result;
    int v7 = v10;
  }
  else
  {
    unint64_t v8 = a3 + 1;
  }
  unint64_t v11 = *a1;
  if (*a1)
  {
    unint64_t v12 = (8 * a2) | 2u;
    if (v12 < 0x80)
    {
      LOBYTE(v13) = v12;
    }
    else
    {
      do
      {
        std::string::push_back(v11, v12 | 0x80);
        unint64_t v13 = v12 >> 7;
        unint64_t v14 = v12 >> 14;
        v12 >>= 7;
      }
      while (v14);
    }
    std::string::push_back(v11, v13);
    unint64_t v15 = v7;
    BOOL v16 = *a1;
    if (v7 < 0x80)
    {
      LOBYTE(v17) = v7;
    }
    else
    {
      do
      {
        std::string::push_back(v16, v15 | 0x80);
        unint64_t v17 = v15 >> 7;
        unint64_t v18 = v15 >> 14;
        v15 >>= 7;
      }
      while (v18);
    }
    std::string::push_back(v16, v17);
    __int16 v19 = *a1;
    return sub_19E3BF574(a4, v8, v7, v19);
  }
  else if (*(void *)(a4 + 8) - (void)v8 + 16 >= v7)
  {
    return &v8[v7];
  }
  else
  {
    return (const std::string::value_type *)sub_19E3BC91C(a4, (int)v8, v7);
  }
}

char *sub_19E3BF3B8(std::string **a1, int a2, char *a3, int32x2_t *a4)
{
  int v7 = *a1;
  int v8 = 8 * a2;
  if (*a1)
  {
    unint64_t v9 = v8 | 3u;
    if (v9 < 0x80)
    {
      LOBYTE(v1sub_19E392864(&a9, 0) = v8 | 3;
    }
    else
    {
      do
      {
        std::string::push_back(v7, v9 | 0x80);
        unint64_t v10 = v9 >> 7;
        unint64_t v11 = v9 >> 14;
        v9 >>= 7;
      }
      while (v11);
    }
    std::string::push_back(v7, v10);
  }
  int v12 = a4[11].i32[0];
  BOOL v13 = __OFSUB__(v12--, 1);
  a4[11].i32[0] = v12;
  if (v12 < 0 != v13) {
    return 0;
  }
  ++a4[11].i32[1];
  unint64_t v14 = sub_19E3BD3C0((uint64_t)a1, a3, (uint64_t)a4);
  a4[11] = vadd_s32(a4[11], (int32x2_t)0xFFFFFFFF00000001);
  __int32 v15 = a4[10].i32[0];
  a4[10].i32[0] = 0;
  if (v15 != (v8 | 3) || v14 == 0) {
    return 0;
  }
  unint64_t v17 = v14;
  unint64_t v18 = *a1;
  if (v18)
  {
    unint64_t v19 = v8 | 4u;
    if (v19 < 0x80)
    {
      LOBYTE(v2sub_19E392864(&a9, 0) = v8 | 4;
    }
    else
    {
      do
      {
        std::string::push_back(v18, v19 | 0x80);
        unint64_t v20 = v19 >> 7;
        unint64_t v21 = v19 >> 14;
        v19 >>= 7;
      }
      while (v21);
    }
    std::string::push_back(v18, v20);
  }
  return v17;
}

std::string *sub_19E3BF4E4(std::string *result, int a2, int a3)
{
  int v3 = (std::string *)result->__r_.__value_.__r.__words[0];
  if (result->__r_.__value_.__r.__words[0])
  {
    int v5 = (std::string **)result;
    unint64_t v6 = (8 * a2) | 5u;
    if (v6 < 0x80)
    {
      LOBYTE(v7) = (8 * a2) | 5;
    }
    else
    {
      do
      {
        std::string::push_back(v3, v6 | 0x80);
        unint64_t v7 = v6 >> 7;
        unint64_t v8 = v6 >> 14;
        v6 >>= 7;
      }
      while (v8);
    }
    std::string::push_back(v3, v7);
    *(_DWORD *)__s = a3;
    return std::string::append(*v5, __s, 4uLL);
  }
  return result;
}

const std::string::value_type *sub_19E3BF574(uint64_t a1, std::string::value_type *__s, int a3, std::string *this)
{
  if (*(void *)(a1 + 8) - (void)__s + 16 >= a3)
  {
    uint64_t v6 = a3;
    std::string::append(this, __s, a3);
    return &__s[v6];
  }
  else
  {
    return sub_19E3BCB8C(a1, __s, a3, this);
  }
}

void sub_19E3BF5E0(int *a1, int a2)
{
  int v2 = a1[1];
  if (v2 >= a2) {
    return;
  }
  if (v2 < 1)
  {
    int v5 = 0;
    if (v2)
    {
LABEL_4:
      uint64_t v6 = *(void *)(sub_19E3BFA7C((uint64_t)a1) - 8);
      if (a2 >= 4)
      {
        int v7 = a1[1];
        if (v7 > 0x3FFFFFFF)
        {
          if (a2 <= 0x40000000)
          {
            sub_19E3AF8D4((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1550);
            unint64_t v8 = sub_19E3AF8EC(v15, "CHECK failed: (new_size) > (kRepeatedFieldUpperClampLimit): ");
            sub_19E3AFA28((uint64_t)&v14, (const char **)&v8->__r_.__value_.__l.__data_);
            sub_19E3AFA30((uint64_t)v15);
          }
          unsigned int v9 = 0x7FFFFFFF;
          goto LABEL_16;
        }
        goto LABEL_13;
      }
      goto LABEL_11;
    }
  }
  else
  {
    int v5 = (void *)(sub_19E3BFA7C((uint64_t)a1) - 8);
    if (a1[1]) {
      goto LABEL_4;
    }
  }
  uint64_t v6 = *((void *)a1 + 1);
  if (a2 >= 4)
  {
    int v7 = 0;
LABEL_13:
    int v10 = 2 * v7;
    if (v10 <= a2) {
      unsigned int v9 = a2;
    }
    else {
      unsigned int v9 = v10;
    }
    goto LABEL_16;
  }
LABEL_11:
  unsigned int v9 = 4;
LABEL_16:
  if (v6)
  {
    uint64_t v11 = (v9 + 15) & 0x1FFFFFFF8;
    if (*(unsigned char *)(v6 + 24)) {
      (*(void (**)(void, void, uint64_t))(**(void **)(*(void *)(v6 + 32) + 32) + 40))(*(void *)(*(void *)(v6 + 32) + 32), MEMORY[0x1E4FBA380], v11);
    }
    int v12 = (void *)sub_19E3AE240(v6, v11);
  }
  else
  {
    int v12 = operator new(v9 + 8);
  }
  void *v12 = v6;
  a1[1] = v9;
  *((void *)a1 + 1) = v12 + 1;
  sub_19E3BFA7C((uint64_t)a1);
  if (*a1 >= 1)
  {
    BOOL v13 = (void *)sub_19E3BFA7C((uint64_t)a1);
    memcpy(v13, v5 + 1, *a1);
  }
  if (v5)
  {
    if (!*v5) {
      operator delete(v5);
    }
  }
}

void sub_19E3BF798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E3BF7B0(uint64_t a1, int a2)
{
  int v4 = *(_DWORD *)a1;
  if (*(_DWORD *)(a1 + 4) - *(_DWORD *)a1 < a2)
  {
    sub_19E3AF8D4((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1278);
    int v5 = sub_19E3AF8EC(v11, "CHECK failed: (total_size_ - current_size_) >= (n): ");
    uint64_t v6 = sub_19E3AFAE4(v5, *(_DWORD *)(a1 + 4));
    int v7 = sub_19E3AF8EC(v6, ", ");
    unint64_t v8 = sub_19E3AFAE4(v7, *(_DWORD *)a1);
    sub_19E3AFA28((uint64_t)&v10, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v11);
    int v4 = *(_DWORD *)a1;
  }
  uint64_t result = *(void *)(a1 + 8) + v4;
  *(_DWORD *)a1 = v4 + a2;
  return result;
}

void sub_19E3BF858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E3BF870(_DWORD *a1, int a2)
{
  if (a2 < 0)
  {
    sub_19E3AF8D4((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1322);
    int v4 = sub_19E3AF8EC(v8, "CHECK failed: (index) >= (0): ");
    sub_19E3AFA28((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_19E3AF8D4((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1323);
    int v5 = sub_19E3AF8EC(v8, "CHECK failed: (index) < (current_size_): ");
    sub_19E3AFA28((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v8);
  }
  return sub_19E3BFA7C((uint64_t)a1) + a2;
}

void sub_19E3BF930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E3BF950(_DWORD *a1, int a2)
{
  if (a2 < 0)
  {
    sub_19E3AF8D4((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1301);
    int v4 = sub_19E3AF8EC(v8, "CHECK failed: (index) >= (0): ");
    sub_19E3AFA28((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_19E3AF8D4((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
    int v5 = sub_19E3AF8EC(v8, "CHECK failed: (index) < (current_size_): ");
    sub_19E3AFA28((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v8);
  }
  return sub_19E3BFA7C((uint64_t)a1) + a2;
}

void sub_19E3BFA10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E3BFA30(uint64_t a1)
{
  if (*(int *)(a1 + 4) >= 1)
  {
    uint64_t v2 = sub_19E3BFA7C(a1);
    uint64_t v4 = *(void *)(v2 - 8);
    int v3 = (void *)(v2 - 8);
    if (!v4) {
      operator delete(v3);
    }
  }
  return a1;
}

uint64_t sub_19E3BFA7C(uint64_t a1)
{
  if (*(int *)(a1 + 4) <= 0)
  {
    sub_19E3AF8D4((uint64_t)v5, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 352);
    uint64_t v2 = sub_19E3AF8EC(v5, "CHECK failed: (total_size_) > (0): ");
    sub_19E3AFA28((uint64_t)&v4, (const char **)&v2->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v5);
  }
  return *(void *)(a1 + 8);
}

void sub_19E3BFAF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

int *sub_19E3BFB08(int *result, int *a2)
{
  int v3 = result;
  if (a2 == result)
  {
    sub_19E3AF8D4((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1415);
    char v4 = sub_19E3AF8EC(v10, "CHECK failed: (&other) != (this): ");
    sub_19E3AFA28((uint64_t)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    uint64_t result = (int *)sub_19E3AFA30((uint64_t)v10);
  }
  if (*a2)
  {
    int v5 = *v3;
    sub_19E3BF5E0(v3, *v3 + *a2);
    sub_19E3BF7B0((uint64_t)v3, *a2);
    uint64_t v6 = (void *)sub_19E3BF870(v3, v5);
    if (*a2 <= 0)
    {
      sub_19E3AF8D4((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
      char v7 = sub_19E3AF8EC(v10, "CHECK failed: (index) < (current_size_): ");
      sub_19E3AFA28((uint64_t)&v9, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v10);
    }
    unint64_t v8 = (const void *)sub_19E3BFA7C((uint64_t)a2);
    return (int *)memcpy(v6, v8, *a2);
  }
  return result;
}

void sub_19E3BFC14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19E3BFC34(int *a1, int a2)
{
  int v2 = a1[1];
  if (v2 >= a2) {
    return;
  }
  if (v2 < 1)
  {
    int v5 = 0;
    if (v2)
    {
LABEL_4:
      uint64_t v6 = *(void *)(sub_19E3C00D4((uint64_t)a1) - 8);
      if (a2 >= 4)
      {
        int v7 = a1[1];
        if (v7 > 0x3FFFFFFF)
        {
          if (a2 <= 0x40000000)
          {
            sub_19E3AF8D4((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1550);
            unint64_t v8 = sub_19E3AF8EC(v16, "CHECK failed: (new_size) > (kRepeatedFieldUpperClampLimit): ");
            sub_19E3AFA28((uint64_t)&v15, (const char **)&v8->__r_.__value_.__l.__data_);
            sub_19E3AFA30((uint64_t)v16);
          }
          unsigned int v9 = 0x7FFFFFFF;
          goto LABEL_16;
        }
        goto LABEL_13;
      }
      goto LABEL_11;
    }
  }
  else
  {
    int v5 = (void *)(sub_19E3C00D4((uint64_t)a1) - 8);
    if (a1[1]) {
      goto LABEL_4;
    }
  }
  uint64_t v6 = *((void *)a1 + 1);
  if (a2 >= 4)
  {
    int v7 = 0;
LABEL_13:
    int v10 = 2 * v7;
    if (v10 <= a2) {
      unsigned int v9 = a2;
    }
    else {
      unsigned int v9 = v10;
    }
    goto LABEL_16;
  }
LABEL_11:
  unsigned int v9 = 4;
LABEL_16:
  uint64_t v11 = 4 * v9;
  if (v6)
  {
    uint64_t v12 = (v11 + 15) & 0x7FFFFFFF8;
    if (*(unsigned char *)(v6 + 24)) {
      (*(void (**)(void, void, uint64_t))(**(void **)(*(void *)(v6 + 32) + 32) + 40))(*(void *)(*(void *)(v6 + 32) + 32), MEMORY[0x1E4FBA380], v12);
    }
    BOOL v13 = (void *)sub_19E3AE240(v6, v12);
  }
  else
  {
    BOOL v13 = operator new(v11 + 8);
  }
  *BOOL v13 = v6;
  a1[1] = v9;
  *((void *)a1 + 1) = v13 + 1;
  sub_19E3C00D4((uint64_t)a1);
  if (*a1 >= 1)
  {
    char v14 = (void *)sub_19E3C00D4((uint64_t)a1);
    memcpy(v14, v5 + 1, 4 * *a1);
  }
  if (v5)
  {
    if (!*v5) {
      operator delete(v5);
    }
  }
}

void sub_19E3BFDF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E3BFE08(uint64_t a1, int a2)
{
  int v4 = *(_DWORD *)a1;
  if (*(_DWORD *)(a1 + 4) - *(_DWORD *)a1 < a2)
  {
    sub_19E3AF8D4((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1278);
    int v5 = sub_19E3AF8EC(v11, "CHECK failed: (total_size_ - current_size_) >= (n): ");
    uint64_t v6 = sub_19E3AFAE4(v5, *(_DWORD *)(a1 + 4));
    int v7 = sub_19E3AF8EC(v6, ", ");
    unint64_t v8 = sub_19E3AFAE4(v7, *(_DWORD *)a1);
    sub_19E3AFA28((uint64_t)&v10, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v11);
    int v4 = *(_DWORD *)a1;
  }
  uint64_t result = *(void *)(a1 + 8) + 4 * v4;
  *(_DWORD *)a1 = v4 + a2;
  return result;
}

void sub_19E3BFEB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E3BFEC8(_DWORD *a1, int a2)
{
  if (a2 < 0)
  {
    sub_19E3AF8D4((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1322);
    int v4 = sub_19E3AF8EC(v8, "CHECK failed: (index) >= (0): ");
    sub_19E3AFA28((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_19E3AF8D4((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1323);
    int v5 = sub_19E3AF8EC(v8, "CHECK failed: (index) < (current_size_): ");
    sub_19E3AFA28((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v8);
  }
  return sub_19E3C00D4((uint64_t)a1) + 4 * a2;
}

void sub_19E3BFF88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E3BFFA8(_DWORD *a1, int a2)
{
  if (a2 < 0)
  {
    sub_19E3AF8D4((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1301);
    int v4 = sub_19E3AF8EC(v8, "CHECK failed: (index) >= (0): ");
    sub_19E3AFA28((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_19E3AF8D4((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
    int v5 = sub_19E3AF8EC(v8, "CHECK failed: (index) < (current_size_): ");
    sub_19E3AFA28((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v8);
  }
  return sub_19E3C00D4((uint64_t)a1) + 4 * a2;
}

void sub_19E3C0068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E3C0088(uint64_t a1)
{
  if (*(int *)(a1 + 4) >= 1)
  {
    uint64_t v2 = sub_19E3C00D4(a1);
    uint64_t v4 = *(void *)(v2 - 8);
    int v3 = (void *)(v2 - 8);
    if (!v4) {
      operator delete(v3);
    }
  }
  return a1;
}

uint64_t sub_19E3C00D4(uint64_t a1)
{
  if (*(int *)(a1 + 4) <= 0)
  {
    sub_19E3AF8D4((uint64_t)v5, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 352);
    uint64_t v2 = sub_19E3AF8EC(v5, "CHECK failed: (total_size_) > (0): ");
    sub_19E3AFA28((uint64_t)&v4, (const char **)&v2->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v5);
  }
  return *(void *)(a1 + 8);
}

void sub_19E3C0148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

int *sub_19E3C0160(int *result, int *a2)
{
  int v3 = result;
  if (a2 == result)
  {
    sub_19E3AF8D4((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1415);
    char v4 = sub_19E3AF8EC(v10, "CHECK failed: (&other) != (this): ");
    sub_19E3AFA28((uint64_t)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    uint64_t result = (int *)sub_19E3AFA30((uint64_t)v10);
  }
  if (*a2)
  {
    int v5 = *v3;
    sub_19E3BFC34(v3, *v3 + *a2);
    sub_19E3BFE08((uint64_t)v3, *a2);
    uint64_t v6 = (void *)sub_19E3BFEC8(v3, v5);
    if (*a2 <= 0)
    {
      sub_19E3AF8D4((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
      char v7 = sub_19E3AF8EC(v10, "CHECK failed: (index) < (current_size_): ");
      sub_19E3AFA28((uint64_t)&v9, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v10);
    }
    unint64_t v8 = (const void *)sub_19E3C00D4((uint64_t)a2);
    return (int *)memcpy(v6, v8, 4 * *a2);
  }
  return result;
}

void sub_19E3C0270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19E3C0290(int *a1, int a2)
{
  int v2 = a1[1];
  if (v2 >= a2) {
    return;
  }
  if (v2 < 1)
  {
    int v5 = 0;
    if (v2)
    {
LABEL_4:
      uint64_t v6 = *(void *)(sub_19E3C0730((uint64_t)a1) - 8);
      if (a2 >= 4)
      {
        int v7 = a1[1];
        if (v7 > 0x3FFFFFFF)
        {
          if (a2 <= 0x40000000)
          {
            sub_19E3AF8D4((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1550);
            unint64_t v8 = sub_19E3AF8EC(v16, "CHECK failed: (new_size) > (kRepeatedFieldUpperClampLimit): ");
            sub_19E3AFA28((uint64_t)&v15, (const char **)&v8->__r_.__value_.__l.__data_);
            sub_19E3AFA30((uint64_t)v16);
          }
          unsigned int v9 = 0x7FFFFFFF;
          goto LABEL_16;
        }
        goto LABEL_13;
      }
      goto LABEL_11;
    }
  }
  else
  {
    int v5 = (void *)(sub_19E3C0730((uint64_t)a1) - 8);
    if (a1[1]) {
      goto LABEL_4;
    }
  }
  uint64_t v6 = *((void *)a1 + 1);
  if (a2 >= 4)
  {
    int v7 = 0;
LABEL_13:
    int v10 = 2 * v7;
    if (v10 <= a2) {
      unsigned int v9 = a2;
    }
    else {
      unsigned int v9 = v10;
    }
    goto LABEL_16;
  }
LABEL_11:
  unsigned int v9 = 4;
LABEL_16:
  uint64_t v11 = 4 * v9;
  if (v6)
  {
    uint64_t v12 = (v11 + 15) & 0x7FFFFFFF8;
    if (*(unsigned char *)(v6 + 24)) {
      (*(void (**)(void, void, uint64_t))(**(void **)(*(void *)(v6 + 32) + 32) + 40))(*(void *)(*(void *)(v6 + 32) + 32), MEMORY[0x1E4FBA380], v12);
    }
    BOOL v13 = (void *)sub_19E3AE240(v6, v12);
  }
  else
  {
    BOOL v13 = operator new(v11 + 8);
  }
  *BOOL v13 = v6;
  a1[1] = v9;
  *((void *)a1 + 1) = v13 + 1;
  sub_19E3C0730((uint64_t)a1);
  if (*a1 >= 1)
  {
    char v14 = (void *)sub_19E3C0730((uint64_t)a1);
    memcpy(v14, v5 + 1, 4 * *a1);
  }
  if (v5)
  {
    if (!*v5) {
      operator delete(v5);
    }
  }
}

void sub_19E3C044C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E3C0464(uint64_t a1, int a2)
{
  int v4 = *(_DWORD *)a1;
  if (*(_DWORD *)(a1 + 4) - *(_DWORD *)a1 < a2)
  {
    sub_19E3AF8D4((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1278);
    int v5 = sub_19E3AF8EC(v11, "CHECK failed: (total_size_ - current_size_) >= (n): ");
    uint64_t v6 = sub_19E3AFAE4(v5, *(_DWORD *)(a1 + 4));
    int v7 = sub_19E3AF8EC(v6, ", ");
    unint64_t v8 = sub_19E3AFAE4(v7, *(_DWORD *)a1);
    sub_19E3AFA28((uint64_t)&v10, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v11);
    int v4 = *(_DWORD *)a1;
  }
  uint64_t result = *(void *)(a1 + 8) + 4 * v4;
  *(_DWORD *)a1 = v4 + a2;
  return result;
}

void sub_19E3C050C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E3C0524(_DWORD *a1, int a2)
{
  if (a2 < 0)
  {
    sub_19E3AF8D4((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1322);
    int v4 = sub_19E3AF8EC(v8, "CHECK failed: (index) >= (0): ");
    sub_19E3AFA28((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_19E3AF8D4((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1323);
    int v5 = sub_19E3AF8EC(v8, "CHECK failed: (index) < (current_size_): ");
    sub_19E3AFA28((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v8);
  }
  return sub_19E3C0730((uint64_t)a1) + 4 * a2;
}

void sub_19E3C05E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E3C0604(_DWORD *a1, int a2)
{
  if (a2 < 0)
  {
    sub_19E3AF8D4((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1301);
    int v4 = sub_19E3AF8EC(v8, "CHECK failed: (index) >= (0): ");
    sub_19E3AFA28((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_19E3AF8D4((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
    int v5 = sub_19E3AF8EC(v8, "CHECK failed: (index) < (current_size_): ");
    sub_19E3AFA28((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v8);
  }
  return sub_19E3C0730((uint64_t)a1) + 4 * a2;
}

void sub_19E3C06C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E3C06E4(uint64_t a1)
{
  if (*(int *)(a1 + 4) >= 1)
  {
    uint64_t v2 = sub_19E3C0730(a1);
    uint64_t v4 = *(void *)(v2 - 8);
    int v3 = (void *)(v2 - 8);
    if (!v4) {
      operator delete(v3);
    }
  }
  return a1;
}

uint64_t sub_19E3C0730(uint64_t a1)
{
  if (*(int *)(a1 + 4) <= 0)
  {
    sub_19E3AF8D4((uint64_t)v5, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 352);
    uint64_t v2 = sub_19E3AF8EC(v5, "CHECK failed: (total_size_) > (0): ");
    sub_19E3AFA28((uint64_t)&v4, (const char **)&v2->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v5);
  }
  return *(void *)(a1 + 8);
}

void sub_19E3C07A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

int *sub_19E3C07BC(int *result, int *a2)
{
  int v3 = result;
  if (a2 == result)
  {
    sub_19E3AF8D4((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1415);
    char v4 = sub_19E3AF8EC(v10, "CHECK failed: (&other) != (this): ");
    sub_19E3AFA28((uint64_t)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    uint64_t result = (int *)sub_19E3AFA30((uint64_t)v10);
  }
  if (*a2)
  {
    int v5 = *v3;
    sub_19E3C0290(v3, *v3 + *a2);
    sub_19E3C0464((uint64_t)v3, *a2);
    uint64_t v6 = (void *)sub_19E3C0524(v3, v5);
    if (*a2 <= 0)
    {
      sub_19E3AF8D4((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
      char v7 = sub_19E3AF8EC(v10, "CHECK failed: (index) < (current_size_): ");
      sub_19E3AFA28((uint64_t)&v9, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v10);
    }
    unint64_t v8 = (const void *)sub_19E3C0730((uint64_t)a2);
    return (int *)memcpy(v6, v8, 4 * *a2);
  }
  return result;
}

void sub_19E3C08CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19E3C08EC(int *a1, int a2)
{
  int v2 = a1[1];
  if (v2 >= a2) {
    return;
  }
  if (v2 < 1)
  {
    int v5 = 0;
    if (v2)
    {
LABEL_4:
      uint64_t v6 = *(void *)(sub_19E3C0D8C((uint64_t)a1) - 8);
      if (a2 >= 4)
      {
        int v7 = a1[1];
        if (v7 > 0x3FFFFFFF)
        {
          if (a2 <= 0x40000000)
          {
            sub_19E3AF8D4((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1550);
            unint64_t v8 = sub_19E3AF8EC(v16, "CHECK failed: (new_size) > (kRepeatedFieldUpperClampLimit): ");
            sub_19E3AFA28((uint64_t)&v15, (const char **)&v8->__r_.__value_.__l.__data_);
            sub_19E3AFA30((uint64_t)v16);
          }
          unsigned int v9 = 0x7FFFFFFF;
          goto LABEL_16;
        }
        goto LABEL_13;
      }
      goto LABEL_11;
    }
  }
  else
  {
    int v5 = (void *)(sub_19E3C0D8C((uint64_t)a1) - 8);
    if (a1[1]) {
      goto LABEL_4;
    }
  }
  uint64_t v6 = *((void *)a1 + 1);
  if (a2 >= 4)
  {
    int v7 = 0;
LABEL_13:
    int v10 = 2 * v7;
    if (v10 <= a2) {
      unsigned int v9 = a2;
    }
    else {
      unsigned int v9 = v10;
    }
    goto LABEL_16;
  }
LABEL_11:
  unsigned int v9 = 4;
LABEL_16:
  uint64_t v11 = 8 * v9;
  if (v6)
  {
    uint64_t v12 = (v11 + 15) & 0xFFFFFFFF8;
    if (*(unsigned char *)(v6 + 24)) {
      (*(void (**)(void, void, uint64_t))(**(void **)(*(void *)(v6 + 32) + 32) + 40))(*(void *)(*(void *)(v6 + 32) + 32), MEMORY[0x1E4FBA380], v12);
    }
    BOOL v13 = (void *)sub_19E3AE240(v6, v12);
  }
  else
  {
    BOOL v13 = operator new(v11 + 8);
  }
  *BOOL v13 = v6;
  a1[1] = v9;
  *((void *)a1 + 1) = v13 + 1;
  sub_19E3C0D8C((uint64_t)a1);
  if (*a1 >= 1)
  {
    char v14 = (void *)sub_19E3C0D8C((uint64_t)a1);
    memcpy(v14, v5 + 1, 8 * *a1);
  }
  if (v5)
  {
    if (!*v5) {
      operator delete(v5);
    }
  }
}

void sub_19E3C0AA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E3C0AC0(uint64_t a1, int a2)
{
  int v4 = *(_DWORD *)a1;
  if (*(_DWORD *)(a1 + 4) - *(_DWORD *)a1 < a2)
  {
    sub_19E3AF8D4((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1278);
    int v5 = sub_19E3AF8EC(v11, "CHECK failed: (total_size_ - current_size_) >= (n): ");
    uint64_t v6 = sub_19E3AFAE4(v5, *(_DWORD *)(a1 + 4));
    int v7 = sub_19E3AF8EC(v6, ", ");
    unint64_t v8 = sub_19E3AFAE4(v7, *(_DWORD *)a1);
    sub_19E3AFA28((uint64_t)&v10, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v11);
    int v4 = *(_DWORD *)a1;
  }
  uint64_t result = *(void *)(a1 + 8) + 8 * v4;
  *(_DWORD *)a1 = v4 + a2;
  return result;
}

void sub_19E3C0B68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E3C0B80(_DWORD *a1, int a2)
{
  if (a2 < 0)
  {
    sub_19E3AF8D4((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1322);
    int v4 = sub_19E3AF8EC(v8, "CHECK failed: (index) >= (0): ");
    sub_19E3AFA28((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_19E3AF8D4((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1323);
    int v5 = sub_19E3AF8EC(v8, "CHECK failed: (index) < (current_size_): ");
    sub_19E3AFA28((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v8);
  }
  return sub_19E3C0D8C((uint64_t)a1) + 8 * a2;
}

void sub_19E3C0C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E3C0C60(_DWORD *a1, int a2)
{
  if (a2 < 0)
  {
    sub_19E3AF8D4((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1301);
    int v4 = sub_19E3AF8EC(v8, "CHECK failed: (index) >= (0): ");
    sub_19E3AFA28((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_19E3AF8D4((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
    int v5 = sub_19E3AF8EC(v8, "CHECK failed: (index) < (current_size_): ");
    sub_19E3AFA28((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v8);
  }
  return sub_19E3C0D8C((uint64_t)a1) + 8 * a2;
}

void sub_19E3C0D20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E3C0D40(uint64_t a1)
{
  if (*(int *)(a1 + 4) >= 1)
  {
    uint64_t v2 = sub_19E3C0D8C(a1);
    uint64_t v4 = *(void *)(v2 - 8);
    int v3 = (void *)(v2 - 8);
    if (!v4) {
      operator delete(v3);
    }
  }
  return a1;
}

uint64_t sub_19E3C0D8C(uint64_t a1)
{
  if (*(int *)(a1 + 4) <= 0)
  {
    sub_19E3AF8D4((uint64_t)v5, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 352);
    uint64_t v2 = sub_19E3AF8EC(v5, "CHECK failed: (total_size_) > (0): ");
    sub_19E3AFA28((uint64_t)&v4, (const char **)&v2->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v5);
  }
  return *(void *)(a1 + 8);
}

void sub_19E3C0E00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

int *sub_19E3C0E18(int *result, int *a2)
{
  int v3 = result;
  if (a2 == result)
  {
    sub_19E3AF8D4((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1415);
    char v4 = sub_19E3AF8EC(v10, "CHECK failed: (&other) != (this): ");
    sub_19E3AFA28((uint64_t)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    uint64_t result = (int *)sub_19E3AFA30((uint64_t)v10);
  }
  if (*a2)
  {
    int v5 = *v3;
    sub_19E3C08EC(v3, *v3 + *a2);
    sub_19E3C0AC0((uint64_t)v3, *a2);
    uint64_t v6 = (void *)sub_19E3C0B80(v3, v5);
    if (*a2 <= 0)
    {
      sub_19E3AF8D4((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
      char v7 = sub_19E3AF8EC(v10, "CHECK failed: (index) < (current_size_): ");
      sub_19E3AFA28((uint64_t)&v9, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v10);
    }
    unint64_t v8 = (const void *)sub_19E3C0D8C((uint64_t)a2);
    return (int *)memcpy(v6, v8, 8 * *a2);
  }
  return result;
}

void sub_19E3C0F28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19E3C0F48(int *a1, int a2)
{
  int v2 = a1[1];
  if (v2 >= a2) {
    return;
  }
  if (v2 < 1)
  {
    int v5 = 0;
    if (v2)
    {
LABEL_4:
      uint64_t v6 = *(void *)(sub_19E3C13E8((uint64_t)a1) - 8);
      if (a2 >= 4)
      {
        int v7 = a1[1];
        if (v7 > 0x3FFFFFFF)
        {
          if (a2 <= 0x40000000)
          {
            sub_19E3AF8D4((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1550);
            unint64_t v8 = sub_19E3AF8EC(v16, "CHECK failed: (new_size) > (kRepeatedFieldUpperClampLimit): ");
            sub_19E3AFA28((uint64_t)&v15, (const char **)&v8->__r_.__value_.__l.__data_);
            sub_19E3AFA30((uint64_t)v16);
          }
          unsigned int v9 = 0x7FFFFFFF;
          goto LABEL_16;
        }
        goto LABEL_13;
      }
      goto LABEL_11;
    }
  }
  else
  {
    int v5 = (void *)(sub_19E3C13E8((uint64_t)a1) - 8);
    if (a1[1]) {
      goto LABEL_4;
    }
  }
  uint64_t v6 = *((void *)a1 + 1);
  if (a2 >= 4)
  {
    int v7 = 0;
LABEL_13:
    int v10 = 2 * v7;
    if (v10 <= a2) {
      unsigned int v9 = a2;
    }
    else {
      unsigned int v9 = v10;
    }
    goto LABEL_16;
  }
LABEL_11:
  unsigned int v9 = 4;
LABEL_16:
  uint64_t v11 = 8 * v9;
  if (v6)
  {
    uint64_t v12 = (v11 + 15) & 0xFFFFFFFF8;
    if (*(unsigned char *)(v6 + 24)) {
      (*(void (**)(void, void, uint64_t))(**(void **)(*(void *)(v6 + 32) + 32) + 40))(*(void *)(*(void *)(v6 + 32) + 32), MEMORY[0x1E4FBA380], v12);
    }
    BOOL v13 = (void *)sub_19E3AE240(v6, v12);
  }
  else
  {
    BOOL v13 = operator new(v11 + 8);
  }
  *BOOL v13 = v6;
  a1[1] = v9;
  *((void *)a1 + 1) = v13 + 1;
  sub_19E3C13E8((uint64_t)a1);
  if (*a1 >= 1)
  {
    char v14 = (void *)sub_19E3C13E8((uint64_t)a1);
    memcpy(v14, v5 + 1, 8 * *a1);
  }
  if (v5)
  {
    if (!*v5) {
      operator delete(v5);
    }
  }
}

void sub_19E3C1104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E3C111C(uint64_t a1, int a2)
{
  int v4 = *(_DWORD *)a1;
  if (*(_DWORD *)(a1 + 4) - *(_DWORD *)a1 < a2)
  {
    sub_19E3AF8D4((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1278);
    int v5 = sub_19E3AF8EC(v11, "CHECK failed: (total_size_ - current_size_) >= (n): ");
    uint64_t v6 = sub_19E3AFAE4(v5, *(_DWORD *)(a1 + 4));
    int v7 = sub_19E3AF8EC(v6, ", ");
    unint64_t v8 = sub_19E3AFAE4(v7, *(_DWORD *)a1);
    sub_19E3AFA28((uint64_t)&v10, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v11);
    int v4 = *(_DWORD *)a1;
  }
  uint64_t result = *(void *)(a1 + 8) + 8 * v4;
  *(_DWORD *)a1 = v4 + a2;
  return result;
}

void sub_19E3C11C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E3C11DC(_DWORD *a1, int a2)
{
  if (a2 < 0)
  {
    sub_19E3AF8D4((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1322);
    int v4 = sub_19E3AF8EC(v8, "CHECK failed: (index) >= (0): ");
    sub_19E3AFA28((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_19E3AF8D4((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1323);
    int v5 = sub_19E3AF8EC(v8, "CHECK failed: (index) < (current_size_): ");
    sub_19E3AFA28((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v8);
  }
  return sub_19E3C13E8((uint64_t)a1) + 8 * a2;
}

void sub_19E3C129C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E3C12BC(_DWORD *a1, int a2)
{
  if (a2 < 0)
  {
    sub_19E3AF8D4((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1301);
    int v4 = sub_19E3AF8EC(v8, "CHECK failed: (index) >= (0): ");
    sub_19E3AFA28((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_19E3AF8D4((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
    int v5 = sub_19E3AF8EC(v8, "CHECK failed: (index) < (current_size_): ");
    sub_19E3AFA28((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v8);
  }
  return sub_19E3C13E8((uint64_t)a1) + 8 * a2;
}

void sub_19E3C137C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E3C139C(uint64_t a1)
{
  if (*(int *)(a1 + 4) >= 1)
  {
    uint64_t v2 = sub_19E3C13E8(a1);
    uint64_t v4 = *(void *)(v2 - 8);
    int v3 = (void *)(v2 - 8);
    if (!v4) {
      operator delete(v3);
    }
  }
  return a1;
}

uint64_t sub_19E3C13E8(uint64_t a1)
{
  if (*(int *)(a1 + 4) <= 0)
  {
    sub_19E3AF8D4((uint64_t)v5, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 352);
    uint64_t v2 = sub_19E3AF8EC(v5, "CHECK failed: (total_size_) > (0): ");
    sub_19E3AFA28((uint64_t)&v4, (const char **)&v2->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v5);
  }
  return *(void *)(a1 + 8);
}

void sub_19E3C145C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

int *sub_19E3C1474(int *result, int *a2)
{
  int v3 = result;
  if (a2 == result)
  {
    sub_19E3AF8D4((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1415);
    char v4 = sub_19E3AF8EC(v10, "CHECK failed: (&other) != (this): ");
    sub_19E3AFA28((uint64_t)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    uint64_t result = (int *)sub_19E3AFA30((uint64_t)v10);
  }
  if (*a2)
  {
    int v5 = *v3;
    sub_19E3C0F48(v3, *v3 + *a2);
    sub_19E3C111C((uint64_t)v3, *a2);
    uint64_t v6 = (void *)sub_19E3C11DC(v3, v5);
    if (*a2 <= 0)
    {
      sub_19E3AF8D4((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
      char v7 = sub_19E3AF8EC(v10, "CHECK failed: (index) < (current_size_): ");
      sub_19E3AFA28((uint64_t)&v9, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v10);
    }
    unint64_t v8 = (const void *)sub_19E3C13E8((uint64_t)a2);
    return (int *)memcpy(v6, v8, 8 * *a2);
  }
  return result;
}

void sub_19E3C1584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19E3C15A4(int *a1, int a2)
{
  int v2 = a1[1];
  if (v2 >= a2) {
    return;
  }
  if (v2 < 1)
  {
    int v5 = 0;
    if (v2)
    {
LABEL_4:
      uint64_t v6 = *(void *)(sub_19E3C1A44((uint64_t)a1) - 8);
      if (a2 >= 4)
      {
        int v7 = a1[1];
        if (v7 > 0x3FFFFFFF)
        {
          if (a2 <= 0x40000000)
          {
            sub_19E3AF8D4((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1550);
            unint64_t v8 = sub_19E3AF8EC(v16, "CHECK failed: (new_size) > (kRepeatedFieldUpperClampLimit): ");
            sub_19E3AFA28((uint64_t)&v15, (const char **)&v8->__r_.__value_.__l.__data_);
            sub_19E3AFA30((uint64_t)v16);
          }
          unsigned int v9 = 0x7FFFFFFF;
          goto LABEL_16;
        }
        goto LABEL_13;
      }
      goto LABEL_11;
    }
  }
  else
  {
    int v5 = (void *)(sub_19E3C1A44((uint64_t)a1) - 8);
    if (a1[1]) {
      goto LABEL_4;
    }
  }
  uint64_t v6 = *((void *)a1 + 1);
  if (a2 >= 4)
  {
    int v7 = 0;
LABEL_13:
    int v10 = 2 * v7;
    if (v10 <= a2) {
      unsigned int v9 = a2;
    }
    else {
      unsigned int v9 = v10;
    }
    goto LABEL_16;
  }
LABEL_11:
  unsigned int v9 = 4;
LABEL_16:
  uint64_t v11 = 4 * v9;
  if (v6)
  {
    uint64_t v12 = (v11 + 15) & 0x7FFFFFFF8;
    if (*(unsigned char *)(v6 + 24)) {
      (*(void (**)(void, void, uint64_t))(**(void **)(*(void *)(v6 + 32) + 32) + 40))(*(void *)(*(void *)(v6 + 32) + 32), MEMORY[0x1E4FBA380], v12);
    }
    BOOL v13 = (void *)sub_19E3AE240(v6, v12);
  }
  else
  {
    BOOL v13 = operator new(v11 + 8);
  }
  *BOOL v13 = v6;
  a1[1] = v9;
  *((void *)a1 + 1) = v13 + 1;
  sub_19E3C1A44((uint64_t)a1);
  if (*a1 >= 1)
  {
    char v14 = (void *)sub_19E3C1A44((uint64_t)a1);
    memcpy(v14, v5 + 1, 4 * *a1);
  }
  if (v5)
  {
    if (!*v5) {
      operator delete(v5);
    }
  }
}

void sub_19E3C1760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E3C1778(uint64_t a1, int a2)
{
  int v4 = *(_DWORD *)a1;
  if (*(_DWORD *)(a1 + 4) - *(_DWORD *)a1 < a2)
  {
    sub_19E3AF8D4((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1278);
    int v5 = sub_19E3AF8EC(v11, "CHECK failed: (total_size_ - current_size_) >= (n): ");
    uint64_t v6 = sub_19E3AFAE4(v5, *(_DWORD *)(a1 + 4));
    int v7 = sub_19E3AF8EC(v6, ", ");
    unint64_t v8 = sub_19E3AFAE4(v7, *(_DWORD *)a1);
    sub_19E3AFA28((uint64_t)&v10, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v11);
    int v4 = *(_DWORD *)a1;
  }
  uint64_t result = *(void *)(a1 + 8) + 4 * v4;
  *(_DWORD *)a1 = v4 + a2;
  return result;
}

void sub_19E3C1820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E3C1838(_DWORD *a1, int a2)
{
  if (a2 < 0)
  {
    sub_19E3AF8D4((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1322);
    int v4 = sub_19E3AF8EC(v8, "CHECK failed: (index) >= (0): ");
    sub_19E3AFA28((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_19E3AF8D4((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1323);
    int v5 = sub_19E3AF8EC(v8, "CHECK failed: (index) < (current_size_): ");
    sub_19E3AFA28((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v8);
  }
  return sub_19E3C1A44((uint64_t)a1) + 4 * a2;
}

void sub_19E3C18F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E3C1918(_DWORD *a1, int a2)
{
  if (a2 < 0)
  {
    sub_19E3AF8D4((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1301);
    int v4 = sub_19E3AF8EC(v8, "CHECK failed: (index) >= (0): ");
    sub_19E3AFA28((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_19E3AF8D4((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
    int v5 = sub_19E3AF8EC(v8, "CHECK failed: (index) < (current_size_): ");
    sub_19E3AFA28((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v8);
  }
  return sub_19E3C1A44((uint64_t)a1) + 4 * a2;
}

void sub_19E3C19D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E3C19F8(uint64_t a1)
{
  if (*(int *)(a1 + 4) >= 1)
  {
    uint64_t v2 = sub_19E3C1A44(a1);
    uint64_t v4 = *(void *)(v2 - 8);
    int v3 = (void *)(v2 - 8);
    if (!v4) {
      operator delete(v3);
    }
  }
  return a1;
}

uint64_t sub_19E3C1A44(uint64_t a1)
{
  if (*(int *)(a1 + 4) <= 0)
  {
    sub_19E3AF8D4((uint64_t)v5, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 352);
    uint64_t v2 = sub_19E3AF8EC(v5, "CHECK failed: (total_size_) > (0): ");
    sub_19E3AFA28((uint64_t)&v4, (const char **)&v2->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v5);
  }
  return *(void *)(a1 + 8);
}

void sub_19E3C1AB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

int *sub_19E3C1AD0(int *result, int *a2)
{
  int v3 = result;
  if (a2 == result)
  {
    sub_19E3AF8D4((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1415);
    char v4 = sub_19E3AF8EC(v10, "CHECK failed: (&other) != (this): ");
    sub_19E3AFA28((uint64_t)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    uint64_t result = (int *)sub_19E3AFA30((uint64_t)v10);
  }
  if (*a2)
  {
    int v5 = *v3;
    sub_19E3C15A4(v3, *v3 + *a2);
    sub_19E3C1778((uint64_t)v3, *a2);
    uint64_t v6 = (void *)sub_19E3C1838(v3, v5);
    if (*a2 <= 0)
    {
      sub_19E3AF8D4((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
      char v7 = sub_19E3AF8EC(v10, "CHECK failed: (index) < (current_size_): ");
      sub_19E3AFA28((uint64_t)&v9, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v10);
    }
    unint64_t v8 = (const void *)sub_19E3C1A44((uint64_t)a2);
    return (int *)memcpy(v6, v8, 4 * *a2);
  }
  return result;
}

void sub_19E3C1BE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_19E3C1C00(int *a1, int a2)
{
  int v2 = a1[1];
  if (v2 >= a2) {
    return;
  }
  if (v2 < 1)
  {
    int v5 = 0;
    if (v2)
    {
LABEL_4:
      uint64_t v6 = *(void *)(sub_19E3C20A0((uint64_t)a1) - 8);
      if (a2 >= 4)
      {
        int v7 = a1[1];
        if (v7 > 0x3FFFFFFF)
        {
          if (a2 <= 0x40000000)
          {
            sub_19E3AF8D4((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1550);
            unint64_t v8 = sub_19E3AF8EC(v16, "CHECK failed: (new_size) > (kRepeatedFieldUpperClampLimit): ");
            sub_19E3AFA28((uint64_t)&v15, (const char **)&v8->__r_.__value_.__l.__data_);
            sub_19E3AFA30((uint64_t)v16);
          }
          unsigned int v9 = 0x7FFFFFFF;
          goto LABEL_16;
        }
        goto LABEL_13;
      }
      goto LABEL_11;
    }
  }
  else
  {
    int v5 = (void *)(sub_19E3C20A0((uint64_t)a1) - 8);
    if (a1[1]) {
      goto LABEL_4;
    }
  }
  uint64_t v6 = *((void *)a1 + 1);
  if (a2 >= 4)
  {
    int v7 = 0;
LABEL_13:
    int v10 = 2 * v7;
    if (v10 <= a2) {
      unsigned int v9 = a2;
    }
    else {
      unsigned int v9 = v10;
    }
    goto LABEL_16;
  }
LABEL_11:
  unsigned int v9 = 4;
LABEL_16:
  uint64_t v11 = 8 * v9;
  if (v6)
  {
    uint64_t v12 = (v11 + 15) & 0xFFFFFFFF8;
    if (*(unsigned char *)(v6 + 24)) {
      (*(void (**)(void, void, uint64_t))(**(void **)(*(void *)(v6 + 32) + 32) + 40))(*(void *)(*(void *)(v6 + 32) + 32), MEMORY[0x1E4FBA380], v12);
    }
    BOOL v13 = (void *)sub_19E3AE240(v6, v12);
  }
  else
  {
    BOOL v13 = operator new(v11 + 8);
  }
  *BOOL v13 = v6;
  a1[1] = v9;
  *((void *)a1 + 1) = v13 + 1;
  sub_19E3C20A0((uint64_t)a1);
  if (*a1 >= 1)
  {
    char v14 = (void *)sub_19E3C20A0((uint64_t)a1);
    memcpy(v14, v5 + 1, 8 * *a1);
  }
  if (v5)
  {
    if (!*v5) {
      operator delete(v5);
    }
  }
}

void sub_19E3C1DBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E3C1DD4(uint64_t a1, int a2)
{
  int v4 = *(_DWORD *)a1;
  if (*(_DWORD *)(a1 + 4) - *(_DWORD *)a1 < a2)
  {
    sub_19E3AF8D4((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1278);
    int v5 = sub_19E3AF8EC(v11, "CHECK failed: (total_size_ - current_size_) >= (n): ");
    uint64_t v6 = sub_19E3AFAE4(v5, *(_DWORD *)(a1 + 4));
    int v7 = sub_19E3AF8EC(v6, ", ");
    unint64_t v8 = sub_19E3AFAE4(v7, *(_DWORD *)a1);
    sub_19E3AFA28((uint64_t)&v10, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v11);
    int v4 = *(_DWORD *)a1;
  }
  uint64_t result = *(void *)(a1 + 8) + 8 * v4;
  *(_DWORD *)a1 = v4 + a2;
  return result;
}

void sub_19E3C1E7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E3C1E94(_DWORD *a1, int a2)
{
  if (a2 < 0)
  {
    sub_19E3AF8D4((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1322);
    int v4 = sub_19E3AF8EC(v8, "CHECK failed: (index) >= (0): ");
    sub_19E3AFA28((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_19E3AF8D4((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1323);
    int v5 = sub_19E3AF8EC(v8, "CHECK failed: (index) < (current_size_): ");
    sub_19E3AFA28((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v8);
  }
  return sub_19E3C20A0((uint64_t)a1) + 8 * a2;
}

void sub_19E3C1F54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E3C1F74(_DWORD *a1, int a2)
{
  if (a2 < 0)
  {
    sub_19E3AF8D4((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1301);
    int v4 = sub_19E3AF8EC(v8, "CHECK failed: (index) >= (0): ");
    sub_19E3AFA28((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_19E3AF8D4((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
    int v5 = sub_19E3AF8EC(v8, "CHECK failed: (index) < (current_size_): ");
    sub_19E3AFA28((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v8);
  }
  return sub_19E3C20A0((uint64_t)a1) + 8 * a2;
}

void sub_19E3C2034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E3C2054(uint64_t a1)
{
  if (*(int *)(a1 + 4) >= 1)
  {
    uint64_t v2 = sub_19E3C20A0(a1);
    uint64_t v4 = *(void *)(v2 - 8);
    int v3 = (void *)(v2 - 8);
    if (!v4) {
      operator delete(v3);
    }
  }
  return a1;
}

uint64_t sub_19E3C20A0(uint64_t a1)
{
  if (*(int *)(a1 + 4) <= 0)
  {
    sub_19E3AF8D4((uint64_t)v5, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 352);
    uint64_t v2 = sub_19E3AF8EC(v5, "CHECK failed: (total_size_) > (0): ");
    sub_19E3AFA28((uint64_t)&v4, (const char **)&v2->__r_.__value_.__l.__data_);
    sub_19E3AFA30((uint64_t)v5);
  }
  return *(void *)(a1 + 8);
}

void sub_19E3C2114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

int *sub_19E3C212C(int *result, int *a2)
{
  int v3 = result;
  if (a2 == result)
  {
    sub_19E3AF8D4((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1415);
    char v4 = sub_19E3AF8EC(v10, "CHECK failed: (&other) != (this): ");
    sub_19E3AFA28((uint64_t)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    uint64_t result = (int *)sub_19E3AFA30((uint64_t)v10);
  }
  if (*a2)
  {
    int v5 = *v3;
    sub_19E3C1C00(v3, *v3 + *a2);
    sub_19E3C1DD4((uint64_t)v3, *a2);
    uint64_t v6 = (void *)sub_19E3C1E94(v3, v5);
    if (*a2 <= 0)
    {
      sub_19E3AF8D4((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
      char v7 = sub_19E3AF8EC(v10, "CHECK failed: (index) < (current_size_): ");
      sub_19E3AFA28((uint64_t)&v9, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_19E3AFA30((uint64_t)v10);
    }
    unint64_t v8 = (const void *)sub_19E3C20A0((uint64_t)a2);
    return (int *)memcpy(v6, v8, 8 * *a2);
  }
  return result;
}

void sub_19E3C223C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19E3AFA30((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_19E3C225C(uint64_t *a1)
{
  sub_19E3C2298(a1);
  return sub_19E3A07FC(a1);
}

void sub_19E3C2298(void *a1)
{
  uint64_t v2 = (unsigned int *)a1[2];
  if (v2 && !*a1)
  {
    int v3 = (uint64_t *)(v2 + 2);
    uint64_t v4 = *v2;
    if ((int)v4 >= 1)
    {
      do
      {
        uint64_t v5 = *v3;
        if (*v3)
        {
          if (*(char *)(v5 + 23) < 0) {
            operator delete(*(void **)v5);
          }
          MEMORY[0x19F3BDCF0](v5, 0x1012C40EC159624);
        }
        ++v3;
        --v4;
      }
      while (v4);
      uint64_t v2 = (unsigned int *)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

uint64_t sub_19E3C232C(uint64_t result, int a2)
{
  int v2 = *(_DWORD *)(result + 8);
  BOOL v3 = __OFSUB__(a2, v2);
  int v4 = a2 - v2;
  if (!((v4 < 0) ^ v3 | (v4 == 0))) {
    return sub_19E3C2340((uint64_t *)result, v4);
  }
  return result;
}

uint64_t sub_19E3C2340(uint64_t *a1, int a2)
{
  int v2 = *((_DWORD *)a1 + 2);
  int v3 = *((_DWORD *)a1 + 3);
  int v4 = v2 + a2;
  uint64_t v5 = (unsigned int *)a1[2];
  if (v3 < v2 + a2)
  {
    uint64_t v7 = *a1;
    int v8 = 2 * v3;
    if (2 * v3 <= v4) {
      int v8 = v4;
    }
    if (v8 <= 4) {
      unsigned int v9 = 4;
    }
    else {
      unsigned int v9 = v8;
    }
    uint64_t v10 = 8 * v9;
    if (v7)
    {
      uint64_t v11 = (v10 + 15) & 0x7FFFFFFF8;
      if (*(unsigned char *)(v7 + 24)) {
        (*(void (**)(void, void, uint64_t))(**(void **)(*(void *)(v7 + 32) + 32) + 40))(*(void *)(*(void *)(v7 + 32) + 32), MEMORY[0x1E4FBA380], v11);
      }
      uint64_t v12 = (unsigned int *)sub_19E3AE240(v7, v11);
    }
    else
    {
      uint64_t v12 = (unsigned int *)operator new(v10 + 8);
    }
    a1[2] = (uint64_t)v12;
    *((_DWORD *)a1 + 3) = v9;
    if (v5 && (uint64_t v13 = *v5, (int)v13 >= 1))
    {
      memcpy(v12 + 2, v5 + 2, 8 * v13);
      uint64_t v12 = (unsigned int *)a1[2];
      unsigned int *v12 = *v5;
      if (!v7) {
        goto LABEL_17;
      }
    }
    else
    {
      unsigned int *v12 = 0;
      if (!v7)
      {
LABEL_17:
        operator delete(v5);
        uint64_t v12 = (unsigned int *)a1[2];
      }
    }
    int v2 = *((_DWORD *)a1 + 2);
    uint64_t v5 = v12;
  }
  return (uint64_t)&v5[2 * v2 + 2];
}

uint64_t sub_19E3C246C(uint64_t a1, _DWORD *a2, unint64_t a3)
{
  *(void *)a1 = &unk_1EF0B8C70;
  *(void *)(a1 + 16) = &unk_1EF0B90C8;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = &unk_1EF0B90C8;
  *(_DWORD *)(a1 + 4sub_19E392864(&a9, 0) = 0;
  uint64_t v6 = (uint64_t *)(a1 + 88);
  sub_19E3AD4C4((void *)(a1 + 88));
  sub_19E3C2564(a1, a2, a3, &v8);
  sub_19E3AD6EC(v6, &v8);
  sub_19E3AD4CC(&v8);
  return a1;
}

void sub_19E3C2540(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E3AD4CC((uint64_t *)va);
  sub_19E3AD4CC(v2);
  _Unwind_Resume(a1);
}

void *sub_19E3C2564@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v13 = a2;
  unint64_t v14 = a3;
  int v12 = 0;
  uint64_t result = sub_19E378D88(a2, a3, &v12, a4);
  if (!*a4)
  {
    sub_19E3AD4CC(a4);
    uint64_t result = sub_19E3AB7C8(&v13, 4uLL, a4);
    if (!*a4)
    {
      sub_19E3AD4CC(a4);
      *(_DWORD *)(a1 + 8) = v12;
      int v11 = 0;
      uint64_t result = sub_19E378D88(v13, v14, &v11, a4);
      if (!*a4)
      {
        sub_19E3AD4CC(a4);
        uint64_t result = sub_19E3AB7C8(&v13, 4uLL, a4);
        if (!*a4)
        {
          sub_19E3AD4CC(a4);
          *(_DWORD *)(a1 + 24) = v11;
          int v10 = 0;
          uint64_t result = sub_19E378D88(v13, v14, &v10, a4);
          if (!*a4)
          {
            sub_19E3AD4CC(a4);
            uint64_t result = sub_19E3AB7C8(&v13, 4uLL, a4);
            if (!*a4)
            {
              sub_19E3AD4CC(a4);
              int v7 = v10;
              *(_DWORD *)(a1 + 48) = 0;
              *(_DWORD *)(a1 + 4sub_19E392864(&a9, 0) = v7;
              uint64_t result = sub_19E378B8C(v13, v14, (_DWORD *)(a1 + 48), a4);
              if (!*a4)
              {
                sub_19E3AD4CC(a4);
                uint64_t result = sub_19E3AB7C8(&v13, 4uLL, a4);
                if (!*a4)
                {
                  sub_19E3AD4CC(a4);
                  *(void *)(a1 + 56) = v13;
                  unint64_t v8 = sub_19E3AB73C(*(int *)(a1 + 48), 4uLL);
                  uint64_t result = sub_19E3AB7C8(&v13, v8, a4);
                  if (!*a4)
                  {
                    sub_19E3AD4CC(a4);
                    *(void *)(a1 + 64) = v13;
                    uint64_t result = sub_19E3AB7C8(&v13, 4 * *(int *)(a1 + 48), a4);
                    if (!*a4)
                    {
                      sub_19E3AD4CC(a4);
                      *(void *)(a1 + 72) = v13;
                      uint64_t result = sub_19E3AB7C8(&v13, 4 * *(int *)(a1 + 48) + 20, a4);
                      if (!*a4)
                      {
                        unsigned int v9 = sub_19E3AD4CC(a4);
                        *(void *)(a1 + 8sub_19E392864(&a9, 0) = v13;
                        return sub_19E3AD4C4(v9);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_19E3C2764()
{
}

uint64_t sub_19E3C2778(uint64_t a1)
{
  return *(_DWORD *)(a1 + 8) & 1;
}

uint64_t sub_19E3C2784(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 8) >> 1) & 1;
}

uint64_t sub_19E3C2790(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 8) >> 2) & 1;
}

uint64_t sub_19E3C279C(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 8) >> 3) & 1;
}

void *sub_19E3C27A8(void *a1)
{
  *a1 = &unk_1EF0B8C70;
  sub_19E3AD4CC(a1 + 11);
  return a1;
}

void sub_19E3C27EC(void *a1)
{
  *a1 = &unk_1EF0B8C70;
  sub_19E3AD4CC(a1 + 11);
  JUMPOUT(0x19F3BDCF0);
}

uint64_t sub_19E3C2850(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

const char *sub_19E3C2858(uint64_t a1)
{
  uint64_t v1 = (const char *)(*(void *)(a1 + 80) + **(unsigned int **)(a1 + 72));
  strlen(v1);
  return v1;
}

const char *sub_19E3C2890(uint64_t a1)
{
  uint64_t v1 = (const char *)(*(void *)(a1 + 80) + *(unsigned int *)(*(void *)(a1 + 72) + 4));
  strlen(v1);
  return v1;
}

const char *sub_19E3C28C8(uint64_t a1)
{
  uint64_t v1 = (const char *)(*(void *)(a1 + 80) + *(unsigned int *)(*(void *)(a1 + 72) + 8));
  strlen(v1);
  return v1;
}

const char *sub_19E3C2900(uint64_t a1)
{
  uint64_t v1 = (const char *)(*(void *)(a1 + 80) + *(unsigned int *)(*(void *)(a1 + 72) + 12));
  strlen(v1);
  return v1;
}

const char *sub_19E3C2938(uint64_t a1)
{
  uint64_t v1 = (const char *)(*(void *)(a1 + 80) + *(unsigned int *)(*(void *)(a1 + 72) + 16));
  strlen(v1);
  return v1;
}

uint64_t sub_19E3C2970(uint64_t a1)
{
  return *(_DWORD *)(a1 + 8) & 1;
}

uint64_t sub_19E3C297C(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 8) >> 1) & 1;
}

uint64_t sub_19E3C2988(uint64_t a1)
{
  return *(_DWORD *)(a1 + 8) >> 30;
}

const char *sub_19E3C2994(uint64_t a1, int a2)
{
  int v2 = (const char *)(*(void *)(a1 + 80) + *(unsigned int *)(*(void *)(a1 + 72) + 4 * (a2 + 5)));
  strlen(v2);
  return v2;
}

float sub_19E3C29D0(uint64_t a1, int a2)
{
  return *(float *)(*(void *)(a1 + 64) + 4 * a2);
}

BOOL sub_19E3C29DC(uint64_t a1, int a2)
{
  return *(unsigned char *)(*(void *)(a1 + 56) + a2) == 1;
}

BOOL sub_19E3C29F0(uint64_t a1, int a2)
{
  return *(unsigned char *)(*(void *)(a1 + 56) + a2) == 2;
}

BOOL sub_19E3C2A04(uint64_t a1, int a2)
{
  return *(unsigned char *)(*(void *)(a1 + 56) + a2) == 3;
}

BOOL sub_19E3C2A18(uint64_t a1, int a2)
{
  return *(unsigned char *)(*(void *)(a1 + 56) + a2) == 4;
}

BOOL sub_19E3C2A2C(uint64_t a1, int a2)
{
  return *(unsigned char *)(*(void *)(a1 + 56) + a2) == 5;
}

BOOL sub_19E3C2A40(uint64_t a1, int a2)
{
  return *(unsigned char *)(*(void *)(a1 + 56) + a2) == 6;
}

uint64_t sub_19E3C2A54(uint64_t a1)
{
  return a1 + 16;
}

uint64_t sub_19E3C2A5C(uint64_t a1)
{
  return a1 + 32;
}

CFStringRef sub_19E3C2A64(uint64_t a1)
{
  uint64_t v1 = (const UInt8 *)a1;
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    CFIndex v2 = *(unsigned __int8 *)(a1 + 23);
    if (!*(unsigned char *)(a1 + 23)) {
      return &stru_1EF0BEFF0;
    }
    return CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v1, v2, 0x8000100u, 0);
  }
  CFIndex v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v1 = *(const UInt8 **)a1;
    return CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v1, v2, 0x8000100u, 0);
  }
  return &stru_1EF0BEFF0;
}

const char *sub_19E3C2AB0(const __CFString *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFStringRef v21 = a1;
  uint64_t v24 = a2;
  int64_t v25 = a3;
  CharactersPtr = CFStringGetCharactersPtr(a1);
  if (CharactersPtr) {
    uint64_t result = 0;
  }
  else {
    uint64_t result = CFStringGetCStringPtr(a1, 0x600u);
  }
  uint64_t v23 = result;
  int64_t v26 = 0;
  int64_t v27 = 0;
  char v19 = 0;
  if (a3 >= 1)
  {
    int64_t v8 = 0;
    while ((v8 & 0x8000000000000000) == 0)
    {
      int64_t v9 = v25;
      if (v25 <= v8) {
        break;
      }
      if (CharactersPtr)
      {
        LOWORD(v1sub_19E392864(&a9, 0) = CharactersPtr[v24 + v8];
      }
      else if (v23)
      {
        LOWORD(v1sub_19E392864(&a9, 0) = v23[v24 + v8];
      }
      else
      {
        if (v27 <= v8 || (int64_t v12 = v26, v26 > v8))
        {
          int64_t v13 = v8 - 4;
          if ((unint64_t)v8 < 4) {
            int64_t v13 = 0;
          }
          if (v13 + 64 < v25) {
            int64_t v9 = v13 + 64;
          }
          int64_t v26 = v13;
          int64_t v27 = v9;
          v28.location = v24 + v13;
          v28.length = v9 - v13;
          CFStringGetCharacters(v21, v28, buffer);
          int64_t v12 = v26;
        }
        LOWORD(v1sub_19E392864(&a9, 0) = buffer[v8 - v12];
      }
      if ((unsigned __int16)v10 >> 10 != 54) {
        goto LABEL_11;
      }
      int64_t v14 = v8 + 1;
      int64_t v15 = v25;
      if (v25 <= v8 + 1) {
        goto LABEL_11;
      }
      if (CharactersPtr)
      {
        UniChar v16 = CharactersPtr[v24 + v14];
      }
      else if (v23)
      {
        UniChar v16 = v23[v24 + v14];
      }
      else
      {
        if (v27 <= v14 || (int64_t v17 = v26, v26 > v14))
        {
          int64_t v18 = v8 - 3;
          if ((unint64_t)v8 < 3) {
            int64_t v18 = 0;
          }
          if (v18 + 64 < v25) {
            int64_t v15 = v18 + 64;
          }
          int64_t v26 = v18;
          int64_t v27 = v15;
          v29.location = v24 + v18;
          v29.length = v15 - v18;
          CFStringGetCharacters(v21, v29, buffer);
          int64_t v17 = v26;
        }
        UniChar v16 = buffer[v14 - v17];
      }
      if (v16 >> 10 != 55) {
        goto LABEL_11;
      }
      uint64_t v10 = ((unsigned __int16)v10 << 10) + v16 - 56613888;
LABEL_12:
      uint64_t result = (const char *)(*(uint64_t (**)(uint64_t, uint64_t, char *))(a4 + 16))(a4, v10, &v19);
      if (!v19)
      {
        uint64_t v11 = (v10 & 0xFFFF0000) != 0 ? v8 + 1 : v8;
        int64_t v8 = v11 + 1;
        if (v11 + 1 < a3) {
          continue;
        }
      }
      return result;
    }
    LOWORD(v1sub_19E392864(&a9, 0) = 0;
LABEL_11:
    uint64_t v10 = (unsigned __int16)v10;
    goto LABEL_12;
  }
  return result;
}

void sub_19E3C2CE4()
{
}

void sub_19E3C2D70(_Unwind_Exception *a1)
{
  MEMORY[0x19F3BDCC0](v1, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

BOOL sub_19E3C2D94(const void *a1, CFURLRef fileURL, CFPropertyListFormat a3, int a4, CFErrorRef *a5)
{
  BOOL v5 = 0;
  if (a1 && fileURL)
  {
    buffer[0] = 0;
    buffer[1] = 0;
    uint64_t v13 = 0;
    if (a4)
    {
      CFURLCreateCopyDeletingLastPathComponent(0, fileURL);
      sub_19E3C2CE4();
    }
    int64_t v9 = CFWriteStreamCreateWithFile(0, fileURL);
    if (v9)
    {
      if (CFWriteStreamOpen(v9))
      {
        CFIndex v10 = CFPropertyListWrite(a1, v9, a3, 0, a5);
        CFWriteStreamClose(v9);
      }
      else
      {
        CFIndex v10 = 0;
      }
      CFRelease(v9);
      BOOL v5 = v10 > 0;
    }
    else
    {
      BOOL v5 = 0;
    }
    if (SHIBYTE(v13) < 0) {
      operator delete(buffer[0]);
    }
  }
  return v5;
}

void sub_19E3C2FC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_19E3C300C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0)
  {
    sub_19E39369C((unsigned char *)a2, *(void **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
    *(void *)(a2 + 16) = *(void *)(a1 + 16);
  }
  uint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a2 + 8);
  }
  if (!v3)
  {
    int v4 = getenv("TMPDIR");
    if (v4) {
      BOOL v5 = v4;
    }
    else {
      BOOL v5 = "/tmp";
    }
    MEMORY[0x19F3BD800](a2, v5);
  }
  std::string::append((std::string *)a2, "/nlptemp-XXXXXX");
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v6 = (char *)a2;
  }
  else {
    uint64_t v6 = *(char **)a2;
  }
  return mktemp(v6);
}

void sub_19E3C30B4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

CFPropertyListRef sub_19E3C30D0(const __CFURL *a1, CFErrorRef *a2)
{
  return sub_19E3C30DC(a1, 0, a2);
}

CFPropertyListRef sub_19E3C30DC(CFURLRef fileURL, int a2, CFErrorRef *a3)
{
  uint64_t v6 = CFReadStreamCreateWithFile((CFAllocatorRef)*MEMORY[0x1E4F1CF80], fileURL);
  if (v6)
  {
    int v7 = v6;
    if (CFReadStreamOpen(v6)
      && (!a2 ? (CFOptionFlags v8 = 0) : (CFOptionFlags v8 = 2),
          CFPropertyListRef v9 = CFPropertyListCreateWithStream(0, v7, 0, v8, 0, 0),
          CFReadStreamClose(v7),
          v9))
    {
      CFTypeID v10 = CFGetTypeID(v9);
      if (v10 != CFDictionaryGetTypeID())
      {
        if (a3) {
          *a3 = sub_19E3C3368(@"Property list at URL is not a dictionary", fileURL);
        }
        CFRelease(v9);
        goto LABEL_15;
      }
    }
    else
    {
      if (!a3)
      {
LABEL_15:
        CFPropertyListRef v9 = 0;
        goto LABEL_16;
      }
      CFPropertyListRef v9 = 0;
      *a3 = sub_19E3C3368(@"File at URL is not a valid property list", fileURL);
    }
LABEL_16:
    CFRelease(v7);
    return v9;
  }
  CFPropertyListRef v9 = 0;
  if (a3) {
    *a3 = sub_19E3C3368(@"File at URL is not readable", fileURL);
  }
  return v9;
}

void sub_19E3C3218(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E3C34D4((const void **)va, 0);
  _Unwind_Resume(a1);
}

CFPropertyListRef sub_19E3C324C(const __CFURL *a1, CFErrorRef *a2)
{
  return sub_19E3C30DC(a1, 1, a2);
}

CFLocaleRef sub_19E3C3258(uint64_t a1, const void *a2)
{
  CFStringRef v3 = (const __CFString *)MEMORY[0x19F3BCDE0]();
  CFDictionaryRef ComponentsFromLocaleIdentifier = CFLocaleCreateComponentsFromLocaleIdentifier(0, v3);
  CFMutableStringRef MutableCopy = CFDictionaryCreateMutableCopy(0, 3, ComponentsFromLocaleIdentifier);
  CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E4F1D218], a2);
  CFStringRef LocaleIdentifierFromComponents = CFLocaleCreateLocaleIdentifierFromComponents(0, MutableCopy);
  CFLocaleRef v7 = CFLocaleCreate(0, LocaleIdentifierFromComponents);
  if (LocaleIdentifierFromComponents) {
    CFRelease(LocaleIdentifierFromComponents);
  }
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  if (ComponentsFromLocaleIdentifier) {
    CFRelease(ComponentsFromLocaleIdentifier);
  }
  return v7;
}

void sub_19E3C3324(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  CFStringRef v3 = va_arg(va1, const void *);
  va_copy(va2, va1);
  BOOL v5 = va_arg(va2, const void *);
  sub_19E3C350C((const void **)va, 0);
  sub_19E3C349C((const void **)va1, 0);
  sub_19E3C3544((const void **)va2, 0);
  _Unwind_Resume(a1);
}

CFErrorRef sub_19E3C3368(uint64_t a1, CFURLRef anURL)
{
  CFStringRef v3 = CFURLCopyPath(anURL);
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFStringRef v5 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%@: %@", a1, v3);
  Mutable = CFDictionaryCreateMutable(v4, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F1D170], v5);
  CFErrorRef v7 = CFErrorCreate(v4, @"com.apple.NLPUtils.ErrorDomain", 0, Mutable);
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v5) {
    CFRelease(v5);
  }
  if (v3) {
    CFRelease(v3);
  }
  return v7;
}

void sub_19E3C345C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  CFStringRef v5 = va_arg(va1, const void *);
  sub_19E3C350C((const void **)va, 0);
  sub_19E3C350C((const void **)va1, 0);
  _Unwind_Resume(a1);
}

void sub_19E3C349C(const void **a1, const void *a2)
{
  CFAllocatorRef v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  *a1 = a2;
}

void sub_19E3C34D4(const void **a1, const void *a2)
{
  CFAllocatorRef v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  *a1 = a2;
}

void sub_19E3C350C(const void **a1, const void *a2)
{
  CFAllocatorRef v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  *a1 = a2;
}

void sub_19E3C3544(const void **a1, const void *a2)
{
  CFAllocatorRef v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  *a1 = a2;
}

void language_modeling::v1::CompletionStem::CompletionStem(language_modeling::v1::CompletionStem *this)
{
}

{
  operator new();
}

void language_modeling::v1::CompletionStem::CompletionStem(language_modeling::v1::CompletionStem *this, const language_modeling::v1::CompletionStem *a2)
{
}

{
  operator new();
}

void sub_19E3C369C(void *a1)
{
  MEMORY[0x19F3BDCF0](v1, 0x1030C403C62F202);
  sub_19E37B770(a1);
}

uint64_t sub_19E3C36C4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  sub_19E3C38BC((void *)a1, *(void *)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 5);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4sub_19E392864(&a9, 0) = 0;
  sub_19E3C39E4((void *)(a1 + 24), *(void *)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 5);
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  sub_19E3C39E4((void *)(a1 + 48), *(void *)(a2 + 48), *(void *)(a2 + 56), (uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 5);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 8sub_19E392864(&a9, 0) = 0;
  *(void *)(a1 + 88) = 0;
  CFStringRef v5 = *(unsigned char **)(a2 + 72);
  CFAllocatorRef v4 = *(unsigned char **)(a2 + 80);
  int64_t v6 = v4 - v5;
  if (v4 != v5)
  {
    if (v6 < 0) {
      sub_19E37C7C4();
    }
    CFErrorRef v7 = (char *)operator new(v4 - v5);
    *(void *)(a1 + 72) = v7;
    *(void *)(a1 + 8sub_19E392864(&a9, 0) = v7;
    CFOptionFlags v8 = &v7[4 * (v6 >> 2)];
    *(void *)(a1 + 88) = v8;
    memcpy(v7, v5, v6);
    *(void *)(a1 + 8sub_19E392864(&a9, 0) = v8;
  }
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  CFTypeID v10 = *(unsigned char **)(a2 + 96);
  CFPropertyListRef v9 = *(unsigned char **)(a2 + 104);
  int64_t v11 = v9 - v10;
  if (v9 != v10)
  {
    if (v11 < 0) {
      sub_19E37C7C4();
    }
    int64_t v12 = (char *)operator new(v9 - v10);
    *(void *)(a1 + 96) = v12;
    *(void *)(a1 + 104) = v12;
    uint64_t v13 = &v12[4 * (v11 >> 2)];
    *(void *)(a1 + 112) = v13;
    memcpy(v12, v10, v11);
    *(void *)(a1 + 104) = v13;
  }
  long long v14 = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 12sub_19E392864(&a9, 0) = v14;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  sub_19E3C39E4((void *)(a1 + 136), *(void *)(a2 + 136), *(void *)(a2 + 144), (uint64_t)(*(void *)(a2 + 144) - *(void *)(a2 + 136)) >> 5);
  *(void *)(a1 + 16sub_19E392864(&a9, 0) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  sub_19E3C39E4((void *)(a1 + 160), *(void *)(a2 + 160), *(void *)(a2 + 168), (uint64_t)(*(void *)(a2 + 168) - *(void *)(a2 + 160)) >> 5);
  return a1;
}

void sub_19E3C384C(_Unwind_Exception *a1)
{
  sub_19E3C3B0C(v6);
  CFOptionFlags v8 = *v5;
  if (*v5)
  {
    *(void *)(v1 + 104) = v8;
    operator delete(v8);
  }
  CFPropertyListRef v9 = *v4;
  if (*v4)
  {
    *(void *)(v1 + 8sub_19E392864(&a9, 0) = v9;
    operator delete(v9);
  }
  sub_19E3C3B0C(v3);
  sub_19E3C3B0C(v2);
  sub_19E3C3B0C((void **)v1);
  _Unwind_Resume(a1);
}

void *sub_19E3C38BC(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >> 59) {
      sub_19E37C7C4();
    }
    CFErrorRef v7 = result;
    uint64_t result = operator new(32 * a4);
    CFOptionFlags v8 = result;
    *CFErrorRef v7 = result;
    v7[1] = result;
    std::string v7[2] = &result[4 * a4];
    if (a2 != a3)
    {
      unint64_t v9 = 0;
      do
      {
        CFTypeID v10 = &v8[v9 / 8];
        uint64_t v11 = a2 + v9;
        if (*(char *)(a2 + v9 + 23) < 0)
        {
          uint64_t result = sub_19E39369C(&v8[v9 / 8], *(void **)v11, *(void *)(v11 + 8));
        }
        else
        {
          *(_OWORD *)CFTypeID v10 = *(_OWORD *)v11;
          std::string v10[2] = *(void *)(v11 + 16);
        }
        LODWORD(v8[v9 / 8 + 3]) = *(_DWORD *)(a2 + v9 + 24);
        v9 += 32;
      }
      while (a2 + v9 != a3);
      CFOptionFlags v8 = (void *)((char *)v8 + v9);
    }
    v7[1] = v8;
  }
  return result;
}

void sub_19E3C399C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void *sub_19E3C39E4(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >> 59) {
      sub_19E37C7C4();
    }
    CFErrorRef v7 = result;
    uint64_t result = operator new(32 * a4);
    CFOptionFlags v8 = result;
    *CFErrorRef v7 = result;
    v7[1] = result;
    std::string v7[2] = &result[4 * a4];
    if (a2 != a3)
    {
      unint64_t v9 = 0;
      do
      {
        CFTypeID v10 = &v8[v9 / 8];
        uint64_t v11 = a2 + v9;
        if (*(char *)(a2 + v9 + 23) < 0)
        {
          uint64_t result = sub_19E39369C(&v8[v9 / 8], *(void **)v11, *(void *)(v11 + 8));
        }
        else
        {
          *(_OWORD *)CFTypeID v10 = *(_OWORD *)v11;
          std::string v10[2] = *(void *)(v11 + 16);
        }
        LODWORD(v8[v9 / 8 + 3]) = *(_DWORD *)(a2 + v9 + 24);
        v9 += 32;
      }
      while (a2 + v9 != a3);
      CFOptionFlags v8 = (void *)((char *)v8 + v9);
    }
    v7[1] = v8;
  }
  return result;
}

void sub_19E3C3AC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void **sub_19E3C3B0C(void **a1)
{
  CFIndex v2 = (void **)*a1;
  if (*a1)
  {
    CFStringRef v3 = (void **)a1[1];
    CFAllocatorRef v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 9) < 0) {
          operator delete(*(v3 - 4));
        }
        v3 -= 4;
      }
      while (v3 != v2);
      CFAllocatorRef v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void ***sub_19E3C3B80(void ***a1)
{
  if (!*((unsigned char *)a1 + 8))
  {
    CFIndex v2 = *a1;
    CFStringRef v3 = (void **)**a1;
    if (v3)
    {
      CFAllocatorRef v4 = (void **)v2[1];
      CFStringRef v5 = **a1;
      if (v4 != v3)
      {
        do
        {
          if (*((char *)v4 - 9) < 0) {
            operator delete(*(v4 - 4));
          }
          v4 -= 4;
        }
        while (v4 != v3);
        CFStringRef v5 = **a1;
      }
      v2[1] = v3;
      operator delete(v5);
    }
  }
  return a1;
}

void sub_19E3C3C5C(void *a1)
{
  MEMORY[0x19F3BDCF0](v1, 0x1030C403C62F202);
  sub_19E37B770(a1);
}

void language_modeling::v1::CompletionStem::operator=()
{
}

void sub_19E3C3CFC(void *a1)
{
  MEMORY[0x19F3BDCF0](v1, 0x1030C403C62F202);
  sub_19E37B770(a1);
}

void **sub_19E3C3D24(void **a1)
{
  CFIndex v2 = (void **)a1[20];
  if (v2)
  {
    CFStringRef v3 = (void **)a1[21];
    CFAllocatorRef v4 = a1[20];
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 9) < 0) {
          operator delete(*(v3 - 4));
        }
        v3 -= 4;
      }
      while (v3 != v2);
      CFAllocatorRef v4 = a1[20];
    }
    a1[21] = v2;
    operator delete(v4);
  }
  CFStringRef v5 = (void **)a1[17];
  if (v5)
  {
    int64_t v6 = (void **)a1[18];
    CFErrorRef v7 = a1[17];
    if (v6 != v5)
    {
      do
      {
        if (*((char *)v6 - 9) < 0) {
          operator delete(*(v6 - 4));
        }
        v6 -= 4;
      }
      while (v6 != v5);
      CFErrorRef v7 = a1[17];
    }
    a1[18] = v5;
    operator delete(v7);
  }
  CFOptionFlags v8 = a1[12];
  if (v8)
  {
    a1[13] = v8;
    operator delete(v8);
  }
  unint64_t v9 = a1[9];
  if (v9)
  {
    a1[10] = v9;
    operator delete(v9);
  }
  CFTypeID v10 = (void **)a1[6];
  if (v10)
  {
    uint64_t v11 = (void **)a1[7];
    int64_t v12 = a1[6];
    if (v11 != v10)
    {
      do
      {
        if (*((char *)v11 - 9) < 0) {
          operator delete(*(v11 - 4));
        }
        v11 -= 4;
      }
      while (v11 != v10);
      int64_t v12 = a1[6];
    }
    a1[7] = v10;
    operator delete(v12);
  }
  uint64_t v13 = (void **)a1[3];
  if (v13)
  {
    long long v14 = (void **)a1[4];
    int64_t v15 = a1[3];
    if (v14 != v13)
    {
      do
      {
        if (*((char *)v14 - 9) < 0) {
          operator delete(*(v14 - 4));
        }
        v14 -= 4;
      }
      while (v14 != v13);
      int64_t v15 = a1[3];
    }
    a1[4] = v13;
    operator delete(v15);
  }
  UniChar v16 = (void **)*a1;
  if (*a1)
  {
    int64_t v17 = (void **)a1[1];
    int64_t v18 = *a1;
    if (v17 != v16)
    {
      do
      {
        if (*((char *)v17 - 9) < 0) {
          operator delete(*(v17 - 4));
        }
        v17 -= 4;
      }
      while (v17 != v16);
      int64_t v18 = *a1;
    }
    a1[1] = v16;
    operator delete(v18);
  }
  return a1;
}

void *language_modeling::v1::CompletionStem::CompletionStem(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  *uint64_t result = v2;
  return result;
}

{
  uint64_t v2;

  uint64_t v2 = *a2;
  *a2 = 0;
  *uint64_t result = v2;
  return result;
}

void ***language_modeling::v1::CompletionStem::operator=(void ***a1, void ***a2)
{
  CFStringRef v3 = *a2;
  *a2 = 0;
  CFAllocatorRef v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    CFStringRef v5 = sub_19E3C3D24(v4);
    MEMORY[0x19F3BDCF0](v5, 0x1030C403C62F202);
  }
  return a1;
}

void language_modeling::v1::CompletionStem::~CompletionStem(void ***this)
{
  uint64_t v2 = *this;
  *this = 0;
  if (v2)
  {
    CFStringRef v3 = sub_19E3C3D24(v2);
    MEMORY[0x19F3BDCF0](v3, 0x1030C403C62F202);
  }
}

{
  void **v2;
  void **v3;

  uint64_t v2 = *this;
  *this = 0;
  if (v2)
  {
    CFStringRef v3 = sub_19E3C3D24(v2);
    MEMORY[0x19F3BDCF0](v3, 0x1030C403C62F202);
  }
}

uint64_t language_modeling::v1::CompletionStem::try_push_back(uint64_t *a1, uint64_t a2)
{
  return 1;
}

void language_modeling::v1::CompletionStem::pop_back(language_modeling::v1::CompletionStem *this)
{
  uint64_t v1 = *(void **)this;
  uint64_t v2 = *(void *)(*(void *)this + 8);
  uint64_t v3 = (v2 - **(void **)this) >> 5;
  uint64_t v4 = *(void *)(*(void *)this + 32);
  if (v3 != (v4 - *(void *)(*(void *)this + 24)) >> 5)
  {
    unint64_t v9 = "m_tokens.size() == m_sanitizedTokens.size()";
    int v10 = 23;
    goto LABEL_12;
  }
  if (v3 != (uint64_t)(v1[7] - v1[6]) >> 5)
  {
    unint64_t v9 = "m_tokens.size() == m_normalizedTokens.size()";
    int v10 = 24;
LABEL_12:
    __assert_rtn("pop_back", "CompletionStemImpl.cpp", v10, v9);
  }
  CFStringRef v5 = (void **)(v2 - 32);
  if (*(char *)(v2 - 9) < 0)
  {
    operator delete(*v5);
    uint64_t v4 = v1[4];
  }
  v1[1] = v5;
  int64_t v6 = (void **)(v4 - 32);
  if (*(char *)(v4 - 9) < 0) {
    operator delete(*v6);
  }
  v1[4] = v6;
  uint64_t v7 = v1[7];
  CFOptionFlags v8 = (void **)(v7 - 32);
  if (*(char *)(v7 - 9) < 0) {
    operator delete(*v8);
  }
  v1[7] = v8;
}

void language_modeling::v1::CompletionStem::clear(uint64_t **this)
{
  uint64_t v1 = *this;
  uint64_t v2 = **this;
  for (uint64_t i = (*this)[1]; i != v2; i -= 32)
  {
    if (*(char *)(i - 9) < 0) {
      operator delete(*(void **)(i - 32));
    }
  }
  v1[1] = v2;
  uint64_t v4 = v1[3];
  for (uint64_t j = v1[4]; j != v4; j -= 32)
  {
    if (*(char *)(j - 9) < 0) {
      operator delete(*(void **)(j - 32));
    }
  }
  v1[4] = v4;
  uint64_t v6 = v1[6];
  for (uint64_t k = v1[7]; k != v6; k -= 32)
  {
    if (*(char *)(k - 9) < 0) {
      operator delete(*(void **)(k - 32));
    }
  }
  v1[7] = v6;
  v1[10] = v1[9];
  v1[13] = v1[12];
  v1[15] = 0;
  v1[16] = 0;
}

uint64_t language_modeling::v1::CompletionStem::tokenSpan(language_modeling::v1::CompletionStem *this)
{
  return **(void **)this;
}

uint64_t language_modeling::v1::CompletionStem::set_unique_id(uint64_t this, uint64_t a2)
{
  *(void *)(*(void *)this + 12sub_19E392864(&a9, 0) = a2;
  return this;
}

uint64_t language_modeling::v1::CompletionStem::set_score(uint64_t this, double a2)
{
  *(double *)(*(void *)this + 128) = a2;
  return this;
}

uint64_t language_modeling::v1::CompletionStem::unique_id(language_modeling::v1::CompletionStem *this)
{
  return *(void *)(*(void *)this + 120);
}

double language_modeling::v1::CompletionStem::score(language_modeling::v1::CompletionStem *this)
{
  return *(double *)(*(void *)this + 128);
}

void *language_modeling::v1::CompletionStem::prefix@<X0>(void *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(*(void *)this + 32);
  if (*(void *)(*(void *)this + 24) == v2)
  {
    *(unsigned char *)(a2 + 23) = 0;
    *(unsigned char *)a2 = 0;
  }
  else if (*(char *)(v2 - 9) < 0)
  {
    return sub_19E39369C((unsigned char *)a2, *(void **)(v2 - 32), *(void *)(v2 - 24));
  }
  else
  {
    long long v3 = *(_OWORD *)(v2 - 32);
    *(void *)(a2 + 16) = *(void *)(v2 - 16);
    *(_OWORD *)a2 = v3;
  }
  return this;
}

void language_modeling::v1::CompletionStem::string(const void ****this@<X0>, std::string *a2@<X8>)
{
}

void language_modeling::v1::Prediction::Prediction(language_modeling::v1::Prediction *this, const language_modeling::v1::Prediction *a2)
{
}

{
  operator new();
}

void sub_19E3C44C8(void *a1)
{
  MEMORY[0x19F3BDCF0](v1, 0x1032C4057ACE4D0);
  sub_19E37B770(a1);
}

void sub_19E3C4548(void *a1)
{
  MEMORY[0x19F3BDCF0](v1, 0x1032C4057ACE4D0);
  sub_19E37B770(a1);
}

void language_modeling::v1::Prediction::operator=()
{
}

void sub_19E3C45E8(void *a1)
{
  MEMORY[0x19F3BDCF0](v1, 0x1032C4057ACE4D0);
  sub_19E37B770(a1);
}

void *language_modeling::v1::Prediction::Prediction(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  *uint64_t result = v2;
  return result;
}

{
  uint64_t v2;

  uint64_t v2 = *a2;
  *a2 = 0;
  *uint64_t result = v2;
  return result;
}

{
  uint64_t v2;

  uint64_t v2 = *a2;
  *a2 = 0;
  *uint64_t result = v2;
  return result;
}

{
  uint64_t v2;

  uint64_t v2 = *a2;
  *a2 = 0;
  *uint64_t result = v2;
  return result;
}

uint64_t *language_modeling::v1::Prediction::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    uint64_t v5 = sub_19E37059C(v4);
    MEMORY[0x19F3BDCF0](v5, 0x1032C4057ACE4D0);
  }
  return a1;
}

void language_modeling::v1::Prediction::~Prediction(language_modeling::v1::Prediction *this)
{
  uint64_t v2 = *(void *)this;
  *(void *)this = 0;
  if (v2)
  {
    uint64_t v3 = sub_19E37059C(v2);
    MEMORY[0x19F3BDCF0](v3, 0x1032C4057ACE4D0);
  }
}

{
  uint64_t v2;
  uint64_t v3;

  uint64_t v2 = *(void *)this;
  *(void *)this = 0;
  if (v2)
  {
    uint64_t v3 = sub_19E37059C(v2);
    MEMORY[0x19F3BDCF0](v3, 0x1032C4057ACE4D0);
  }
}

long long **language_modeling::v1::Prediction::string@<X0>(long long **this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *this;
  if (*((char *)*this + 23) < 0) {
    return (long long **)sub_19E39369C((unsigned char *)a2, *(void **)v2, *((void *)v2 + 1));
  }
  long long v3 = *v2;
  *(void *)(a2 + 16) = *((void *)v2 + 2);
  *(_OWORD *)a2 = v3;
  return this;
}

uint64_t *language_modeling::v1::Prediction::exactPredictionString@<X0>(uint64_t *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *this;
  if (*(char *)(*this + 47) < 0) {
    return (uint64_t *)sub_19E39369C((unsigned char *)a2, *(void **)(v2 + 24), *(void *)(v2 + 32));
  }
  long long v3 = *(_OWORD *)(v2 + 24);
  *(void *)(a2 + 16) = *(void *)(v2 + 40);
  *(_OWORD *)a2 = v3;
  return this;
}

uint64_t language_modeling::v1::Prediction::probability(language_modeling::v1::Prediction *this)
{
  return *(void *)(*(void *)this + 48);
}

double language_modeling::v1::Prediction::log@<D0>(language_modeling::v1::Prediction *this@<X0>, char *a2@<X8>)
{
  return sub_19E3C47D8(a2, *(void *)this + 48);
}

double sub_19E3C47D8(char *a1, uint64_t a2)
{
  *((unsigned char *)&v21.__r_.__value_.__s + 23) = 0;
  v21.__r_.__value_.__s.__data_[0] = 0;
  if (!*(unsigned char *)(a2 + 32))
  {
    a1[23] = 20;
    double result = *(double *)"Cannot provide split";
    strcpy(a1, "Cannot provide split");
    return result;
  }
  uint64_t v4 = (long double *)(a2 + 48);
  if (*(double *)(a2 + 48) > 0.0)
  {
    int v5 = *(_DWORD *)(a2 + 56);
    if (v5)
    {
      if (v5 == 2)
      {
        *((unsigned char *)&v18.__r_.__value_.__s + 23) = 11;
        strcpy((char *)&v18, "static (sp)");
        sub_19E43C098(__p, (uint64_t)&v18, v4);
        if (v20 >= 0) {
          uint64_t v6 = __p;
        }
        else {
          uint64_t v6 = (void **)__p[0];
        }
        if (v20 >= 0) {
          std::string::size_type v7 = HIBYTE(v20);
        }
        else {
          std::string::size_type v7 = (std::string::size_type)__p[1];
        }
      }
      else
      {
        if (v5 != 1) {
          goto LABEL_27;
        }
        *((unsigned char *)&v18.__r_.__value_.__s + 23) = 13;
        strcpy((char *)&v18, "static (word)");
        sub_19E43C098(__p, (uint64_t)&v18, v4);
        if (v20 >= 0) {
          uint64_t v6 = __p;
        }
        else {
          uint64_t v6 = (void **)__p[0];
        }
        if (v20 >= 0) {
          std::string::size_type v7 = HIBYTE(v20);
        }
        else {
          std::string::size_type v7 = (std::string::size_type)__p[1];
        }
      }
    }
    else
    {
      *((unsigned char *)&v18.__r_.__value_.__s + 23) = 16;
      strcpy((char *)&v18, "static (unknown)");
      sub_19E43C098(__p, (uint64_t)&v18, v4);
      if (v20 >= 0) {
        uint64_t v6 = __p;
      }
      else {
        uint64_t v6 = (void **)__p[0];
      }
      if (v20 >= 0) {
        std::string::size_type v7 = HIBYTE(v20);
      }
      else {
        std::string::size_type v7 = (std::string::size_type)__p[1];
      }
    }
    std::string::append(&v21, (const std::string::value_type *)v6, v7);
    if (SHIBYTE(v20) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_27;
      }
    }
    else if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_27;
    }
    operator delete(v18.__r_.__value_.__l.__data_);
  }
LABEL_27:
  if (*(double *)(a2 + 72) <= 0.0) {
    goto LABEL_36;
  }
  *((unsigned char *)&v18.__r_.__value_.__s + 23) = 10;
  strcpy((char *)&v18, "dynamic-lm");
  sub_19E43C098(__p, (uint64_t)&v18, (long double *)(a2 + 72));
  if (v20 >= 0) {
    unint64_t v9 = __p;
  }
  else {
    unint64_t v9 = (void **)__p[0];
  }
  if (v20 >= 0) {
    std::string::size_type v10 = HIBYTE(v20);
  }
  else {
    std::string::size_type v10 = (std::string::size_type)__p[1];
  }
  std::string::append(&v21, (const std::string::value_type *)v9, v10);
  if (SHIBYTE(v20) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_36;
    }
  }
  else if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_36;
  }
  operator delete(v18.__r_.__value_.__l.__data_);
LABEL_36:
  if (*(double *)(a2 + 88) <= 0.0) {
    goto LABEL_45;
  }
  v18.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&v18.__r_.__value_.__r.__words[1] = xmmword_19E572FA0;
  strcpy(v18.__r_.__value_.__l.__data_, "transient + supplemental");
  sub_19E43C098(__p, (uint64_t)&v18, (long double *)(a2 + 88));
  if (v20 >= 0) {
    uint64_t v11 = __p;
  }
  else {
    uint64_t v11 = (void **)__p[0];
  }
  if (v20 >= 0) {
    std::string::size_type v12 = HIBYTE(v20);
  }
  else {
    std::string::size_type v12 = (std::string::size_type)__p[1];
  }
  std::string::append(&v21, (const std::string::value_type *)v11, v12);
  if (SHIBYTE(v20) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_45;
    }
  }
  else if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_45;
  }
  operator delete(v18.__r_.__value_.__l.__data_);
LABEL_45:
  double v13 = *(double *)(a2 + 96);
  if (v13 > 0.0)
  {
    std::to_string(&v18, v13);
    long long v14 = std::string::insert(&v18, 0, "penalty", 7uLL);
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    int64_t v20 = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    if (v20 >= 0) {
      UniChar v16 = __p;
    }
    else {
      UniChar v16 = (void **)__p[0];
    }
    if (v20 >= 0) {
      std::string::size_type v17 = HIBYTE(v20);
    }
    else {
      std::string::size_type v17 = (std::string::size_type)__p[1];
    }
    std::string::append(&v21, (const std::string::value_type *)v16, v17);
    if (SHIBYTE(v20) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_54;
      }
    }
    else if ((SHIBYTE(v18.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_54;
    }
    operator delete(v18.__r_.__value_.__l.__data_);
  }
LABEL_54:
  double result = *(double *)&v21.__r_.__value_.__l.__data_;
  *(std::string *)a1 = v21;
  return result;
}

void sub_19E3C4B88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if (a14 < 0)
    {
LABEL_5:
      operator delete(a9);
      if ((a27 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_8;
    }
  }
  else if (a14 < 0)
  {
    goto LABEL_5;
  }
  if ((a27 & 0x80000000) == 0) {
LABEL_6:
  }
    _Unwind_Resume(a1);
LABEL_8:
  operator delete(a22);
  _Unwind_Resume(a1);
}

void sub_19E3C4C28()
{
}

uint64_t language_modeling::v1::Prediction::tokenSpan(language_modeling::v1::Prediction *this)
{
  return *(void *)(*(void *)this + 160);
}

uint64_t language_modeling::v1::Prediction::exactTokenSpan(language_modeling::v1::Prediction *this)
{
  return *(void *)(*(void *)this + 184);
}

uint64_t language_modeling::v1::Prediction::tokenProbabilitySpan(language_modeling::v1::Prediction *this)
{
  return 0;
}

uint64_t *language_modeling::v1::Prediction::prefix@<X0>(uint64_t *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *this;
  if (*(char *)(*this + 231) < 0) {
    return (uint64_t *)sub_19E39369C((unsigned char *)a2, *(void **)(v2 + 208), *(void *)(v2 + 216));
  }
  long long v3 = *(_OWORD *)(v2 + 208);
  *(void *)(a2 + 16) = *(void *)(v2 + 224);
  *(_OWORD *)a2 = v3;
  return this;
}

uint64_t language_modeling::v1::Prediction::contextSize(language_modeling::v1::Prediction *this)
{
  return *(void *)(*(void *)this + 232);
}

uint64_t language_modeling::v1::Prediction::source(language_modeling::v1::Prediction *this)
{
  return *(unsigned int *)(*(void *)this + 240);
}

uint64_t language_modeling::v1::Prediction::unique_id(language_modeling::v1::Prediction *this)
{
  return *(void *)(*(void *)this + 248);
}

uint64_t language_modeling::v1::convertAbsoluteTime(language_modeling::v1 *this, CFAbsoluteTime a2)
{
  std::chrono::system_clock::now();
  CFDateRef v3 = CFDateCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2);
  CFDateRef v4 = v3;
  if (!v3)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3BD790](exception, "Could not construct");
    goto LABEL_8;
  }
  CFTypeID v5 = CFGetTypeID(v3);
  if (v5 != CFDateGetTypeID())
  {
    std::string::size_type v10 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3BD790](v10, "Could not construct");
    __cxa_throw(v10, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFTypeID TypeID = CFDateGetTypeID();
  if (TypeID != CFGetTypeID(v4))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3BD790](exception, "Could not convert");
LABEL_8:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  double v7 = MEMORY[0x19F3BCC60](v4);
  CFRelease(v4);
  return (uint64_t)((*MEMORY[0x1E4F1CF78] + v7) * 1000000.0);
}

void sub_19E3C4E94(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, const void *a10, long long buf)
{
  if (a2)
  {
    __cxa_free_exception(v11);
    sub_19E43BEB4(&a10);
    if (a2 == 2)
    {
      long long v14 = __cxa_begin_catch(a1);
      if (qword_1EC0095B8 != -1) {
        dispatch_once(&qword_1EC0095B8, &unk_1EF0BEC40);
      }
      long long v15 = qword_1EC0095B0;
      if (os_log_type_enabled((os_log_t)qword_1EC0095B0, OS_LOG_TYPE_ERROR))
      {
        uint64_t v16 = (*(uint64_t (**)(void *))(*(void *)v14 + 16))(v14);
        LODWORD(buf) = 136315394;
        *(void *)((char *)&buf + 4) = "convertAbsoluteTime";
        WORD6(buf) = 2080;
        *(void *)((char *)&buf + 14) = v16;
        _os_log_error_impl(&dword_19E36B000, v15, OS_LOG_TYPE_ERROR, "%s: caught unexpected exception: %s", (uint8_t *)&buf, 0x16u);
      }
      __cxa_end_catch();
      JUMPOUT(0x19E3C4DC4);
    }
    sub_19E37B770(a1);
  }
  _Unwind_Resume(a1);
}

void language_modeling::v1::convertTimePoint(uint64_t a1)
{
}

CFDictionaryRef LM::TrialParameters::copyEncodedRepresentation(LM::TrialParameters *this)
{
  sub_19E3C5174(&v2, (uint64_t)this);
  return v2;
}

void sub_19E3C5174(CFDictionaryRef *a1, uint64_t a2)
{
  uint64_t v107 = 0;
  unint64_t v108 = 0;
  int v106 = &v107;
  sub_19E3C5B70((uint64_t *)&v106, *(void **)(a2 + 24), (void *)(a2 + 32));
  if (*(char *)(a2 + 23) < 0)
  {
    sub_19E39369C(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    unsigned int v113 = *(char **)(a2 + 16);
  }
  CFDateRef v4 = (char *)operator new(0x28uLL);
  uint64_t v99 = a1;
  strcpy(v4, "B90D4859-A11E-4A91-A804-CFABD2A099BF");
  CFTypeID v5 = v107;
  if (v107)
  {
    while (1)
    {
      double v7 = (uint64_t **)v5;
      uint64_t v10 = v5[4];
      CFOptionFlags v8 = v5 + 4;
      unint64_t v9 = (uint64_t *)v10;
      int v11 = *((char *)v8 + 23);
      if (v11 >= 0) {
        std::string::size_type v12 = v8;
      }
      else {
        std::string::size_type v12 = v9;
      }
      if (v11 >= 0) {
        unint64_t v13 = *((unsigned __int8 *)v8 + 23);
      }
      else {
        unint64_t v13 = v8[1];
      }
      if (v13 >= 0x24) {
        size_t v14 = 36;
      }
      else {
        size_t v14 = v13;
      }
      int v15 = memcmp(v4, v12, v14);
      if (v15)
      {
        if (v15 < 0) {
          goto LABEL_6;
        }
LABEL_20:
        int v16 = memcmp(v12, v4, v14);
        if (v16)
        {
          if ((v16 & 0x80000000) == 0) {
            goto LABEL_30;
          }
        }
        else if (v13 >= 0x24)
        {
LABEL_30:
          std::string::size_type v17 = (char *)v7;
          char v19 = 0x80;
          goto LABEL_31;
        }
        CFTypeID v5 = v7[1];
        if (!v5)
        {
          uint64_t v6 = v7 + 1;
          goto LABEL_27;
        }
      }
      else
      {
        if (v13 <= 0x24) {
          goto LABEL_20;
        }
LABEL_6:
        CFTypeID v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_27;
        }
      }
    }
  }
  uint64_t v6 = &v107;
  double v7 = &v107;
LABEL_27:
  std::string::size_type v17 = (char *)operator new(0x50uLL);
  *((void *)v17 + 4) = v4;
  *(_OWORD *)(v17 + 4sub_19E392864(&a9, 0) = xmmword_19E572FB0;
  *((void *)v17 + 8) = 0;
  *((void *)v17 + 9) = 0;
  *((void *)v17 + 7) = 0;
  *(void *)std::string::size_type v17 = 0;
  *((void *)v17 + 1) = 0;
  *((void *)v17 + 2) = v7;
  __CFReadStream *v6 = (uint64_t *)v17;
  std::string v18 = (uint64_t *)v17;
  if (*v106)
  {
    int v106 = (uint64_t **)*v106;
    std::string v18 = *v6;
  }
  sub_19E37D324(v107, v18);
  CFDateRef v4 = 0;
  ++v108;
  char v19 = 0;
LABEL_31:
  int64_t v20 = (void **)(v17 + 56);
  if (v17[79] < 0)
  {
    char v105 = v19;
    operator delete(*v20);
    char v19 = v105;
  }
  *(_OWORD *)int64_t v20 = *(_OWORD *)__p;
  *((void *)v17 + 9) = v113;
  HIBYTE(v113) = 0;
  LOBYTE(__p[0]) = 0;
  if (v19 < 0)
  {
    operator delete(v4);
    if (SHIBYTE(v113) < 0) {
      operator delete(__p[0]);
    }
  }
  unsigned int v109 = 0;
  unsigned int v110 = 0;
  char v111 = 0;
  unint64_t v21 = v108;
  if (v108)
  {
    if (v108 >> 60) {
      sub_19E37C7C4();
    }
    uint64_t v22 = (char *)operator new(16 * v108);
    unsigned int v109 = v22;
    unsigned int v110 = v22;
    char v111 = &v22[16 * v21];
  }
  else
  {
    uint64_t v22 = 0;
  }
  uint64_t v23 = (uint64_t)v106;
  if (v106 == &v107)
  {
    CFIndex v89 = 0;
    unsigned int v50 = 0;
    goto LABEL_144;
  }
  do
  {
    if (v22 < v111)
    {
      sub_19E3C5E34((CFStringRef *)v22, (const UInt8 *)(v23 + 32), v23 + 56);
      v22 += 16;
      goto LABEL_78;
    }
    uint64_t v24 = (v22 - (unsigned char *)v109) >> 4;
    if ((unint64_t)(v24 + 1) >> 60) {
      sub_19E37C7C4();
    }
    unint64_t v25 = (v111 - (unsigned char *)v109) >> 3;
    if (v25 <= v24 + 1) {
      unint64_t v25 = v24 + 1;
    }
    if ((unint64_t)(v111 - (unsigned char *)v109) >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v26 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v26 = v25;
    }
    unsigned int v115 = &v111;
    if (v26)
    {
      if (v26 >> 60) {
        sub_19E37C2B8();
      }
      int64_t v27 = (char *)operator new(16 * v26);
    }
    else
    {
      int64_t v27 = 0;
    }
    __p[0] = v27;
    __p[1] = &v27[16 * v24];
    unsigned int v113 = (char *)__p[1];
    char v114 = &v27[16 * v26];
    sub_19E3C5E34((CFStringRef *)__p[1], (const UInt8 *)(v23 + 32), v23 + 56);
    CFRange v28 = (char *)__p[1];
    uint64_t v22 = v113 + 16;
    CFRange v29 = v109;
    unint64_t v30 = v110;
    if (v110 != v109)
    {
      unint64_t v31 = v110 - (unsigned char *)v109 - 16;
      if (v31 >= 0x70)
      {
        unint64_t v33 = ((unsigned char *)v109 - v110 + 15) & 0xFFFFFFFFFFFFFFF0;
        if ((char *)__p[1] + v33 >= v110 || &v110[v33] >= __p[1])
        {
          uint64_t v34 = (v31 >> 4) + 1;
          int v32 = (char *)__p[1] - 16 * (v34 & 0x1FFFFFFFFFFFFFFELL);
          uint64_t v35 = 0x1FFFFFFFFFFFFFFCLL;
          uint64_t v36 = v34 & 0x1FFFFFFFFFFFFFFELL;
          do
          {
            int v37 = (const double *)&v30[v35];
            float64x2x2_t v116 = vld2q_f64(v37);
            unint64_t v38 = (double *)&v28[v35 * 8];
            vst2q_f64(v38, v116);
            *(_OWORD *)int v37 = 0uLL;
            *((_OWORD *)v37 + 1) = 0uLL;
            v35 -= 4;
            v36 -= 2;
          }
          while (v36);
          if (v34 == (v34 & 0x1FFFFFFFFFFFFFFELL)) {
            goto LABEL_68;
          }
          v30 -= 2 * (v34 & 0x1FFFFFFFFFFFFFFELL);
        }
        else
        {
          int v32 = __p[1];
        }
      }
      else
      {
        int v32 = __p[1];
      }
      do
      {
        uint64_t v39 = *(v30 - 2);
        v30 -= 2;
        *(v32 - 2) = v39;
        v32 -= 2;
        *unint64_t v30 = 0;
        v32[1] = v30[1];
        v30[1] = 0;
      }
      while (v30 != v29);
      CFRange v29 = v109;
      unint64_t v30 = v110;
LABEL_68:
      unsigned int v109 = v32;
      unsigned int v110 = v22;
      char v111 = v114;
      if (v30 != v29)
      {
        do
        {
          uint64_t v40 = (const void *)*(v30 - 1);
          if (v40) {
            CFRelease(v40);
          }
          uint64_t v41 = (const void *)*(v30 - 2);
          if (v41) {
            CFRelease(v41);
          }
          v30 -= 2;
        }
        while (v30 != v29);
        unint64_t v30 = v29;
      }
      goto LABEL_76;
    }
    unsigned int v109 = __p[1];
    unsigned int v110 = v113 + 16;
    char v111 = v114;
LABEL_76:
    if (v30) {
      operator delete(v30);
    }
LABEL_78:
    unsigned int v110 = v22;
    int v42 = *(uint64_t **)(v23 + 8);
    if (v42)
    {
      do
      {
        int v43 = (uint64_t **)v42;
        int v42 = (uint64_t *)*v42;
      }
      while (v42);
    }
    else
    {
      do
      {
        int v43 = *(uint64_t ***)(v23 + 16);
        BOOL v44 = *v43 == (uint64_t *)v23;
        uint64_t v23 = (uint64_t)v43;
      }
      while (!v44);
    }
    uint64_t v23 = (uint64_t)v43;
  }
  while (v43 != &v107);
  unint64_t v45 = (char *)v109;
  unint64_t v46 = v22 - (unsigned char *)v109;
  uint64_t v47 = (v22 - (unsigned char *)v109) >> 4;
  if (v22 != v109)
  {
    if ((v46 & 0x8000000000000000) != 0) {
      sub_19E37C7C4();
    }
    size_t v48 = v46 >> 1;
    uint64_t v49 = (char *)operator new(v46 >> 1);
    unsigned int v50 = (char *)operator new(v48);
    CFIndex v98 = v47;
    int v51 = &v49[8 * v47];
    int v52 = &v50[8 * v47];
    unsigned int v53 = v50;
    int v54 = v49;
    while (1)
    {
      uint64_t v56 = *(void *)v45;
      if (!*(void *)v45 || !*((void *)v45 + 1))
      {
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x19F3BD790](exception, "Could not construct");
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      if (v49 < v51)
      {
        *(void *)uint64_t v49 = v56;
        v49 += 8;
        goto LABEL_116;
      }
      unsigned int v103 = v22;
      int v57 = v49;
      uint64_t v58 = v49 - v54;
      uint64_t v59 = v58 >> 3;
      unint64_t v60 = (v58 >> 3) + 1;
      if (v60 >> 61) {
        sub_19E37C7C4();
      }
      if ((v51 - v54) >> 2 > v60) {
        unint64_t v60 = (v51 - v54) >> 2;
      }
      if ((unint64_t)(v51 - v54) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v61 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v61 = v60;
      }
      int v100 = v52;
      if (v61)
      {
        if (v61 >> 61) {
          sub_19E37C2B8();
        }
        unsigned int v62 = (char *)operator new(8 * v61);
      }
      else
      {
        unsigned int v62 = 0;
      }
      int v63 = &v62[8 * v59];
      char v101 = &v62[8 * v61];
      *(void *)int v63 = v56;
      int v64 = v63 + 8;
      if (v57 == v54)
      {
        int v54 = v57;
        uint64_t v22 = v103;
LABEL_114:
        operator delete(v54);
        goto LABEL_115;
      }
      unint64_t v65 = v57 - 8 - v54;
      if (v65 < 0x58) {
        break;
      }
      if ((unint64_t)(v57 - &v62[v58]) < 0x20)
      {
        uint64_t v66 = v57;
        uint64_t v22 = v103;
        do
        {
LABEL_112:
          uint64_t v72 = *((void *)v66 - 1);
          v66 -= 8;
          *((void *)v63 - 1) = v72;
          v63 -= 8;
        }
        while (v66 != v54);
        goto LABEL_113;
      }
      uint64_t v67 = (v65 >> 3) + 1;
      uint64_t v66 = &v57[-8 * (v67 & 0x3FFFFFFFFFFFFFFCLL)];
      int v68 = &v62[8 * v59 - 16];
      int v69 = (long long *)(v57 - 16);
      uint64_t v70 = v67 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v71 = *v69;
        *((_OWORD *)v68 - 1) = *(v69 - 1);
        *(_OWORD *)int v68 = v71;
        v68 -= 32;
        v69 -= 2;
        v70 -= 4;
      }
      while (v70);
      v63 -= 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v22 = v103;
      if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_112;
      }
LABEL_113:
      if (v54) {
        goto LABEL_114;
      }
LABEL_115:
      int v54 = v63;
      uint64_t v49 = v64;
      int v52 = v100;
      int v51 = v101;
LABEL_116:
      uint64_t v73 = *((void *)v45 + 1);
      if (v53 >= v52)
      {
        unsigned int v104 = v22;
        uint64_t v74 = (v53 - v50) >> 3;
        unint64_t v75 = v74 + 1;
        if ((unint64_t)(v74 + 1) >> 61) {
          sub_19E37C7C4();
        }
        if ((v52 - v50) >> 2 > v75) {
          unint64_t v75 = (v52 - v50) >> 2;
        }
        if ((unint64_t)(v52 - v50) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v76 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v76 = v75;
        }
        unsigned int v102 = v51;
        if (v76)
        {
          if (v76 >> 61) {
            sub_19E37C2B8();
          }
          unint64_t v77 = v76;
          int v78 = operator new(8 * v76);
          unint64_t v76 = v77;
        }
        else
        {
          int v78 = 0;
        }
        uint64_t v79 = &v78[8 * v74];
        *(void *)uint64_t v79 = v73;
        int v55 = v79 + 8;
        if (v53 == v50)
        {
          uint64_t v22 = v104;
          int v52 = &v78[8 * v76];
          if (v50) {
            goto LABEL_133;
          }
        }
        else
        {
          unint64_t v80 = v53 - 8 - v50;
          if (v80 < 0x58 || (unint64_t)(v50 - v78) < 0x20)
          {
            int v81 = v53;
            uint64_t v22 = v104;
            goto LABEL_131;
          }
          uint64_t v84 = (v80 >> 3) + 1;
          int v81 = &v53[-8 * (v84 & 0x3FFFFFFFFFFFFFFCLL)];
          int v85 = &v78[8 * v74 - 16];
          int v86 = v53 - 16;
          uint64_t v87 = v84 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v88 = *(_OWORD *)v86;
            *(v85 - 1) = *((_OWORD *)v86 - 1);
            *int v85 = v88;
            v85 -= 2;
            v86 -= 32;
            v87 -= 4;
          }
          while (v87);
          v79 -= 8 * (v84 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v22 = v104;
          if (v84 != (v84 & 0x3FFFFFFFFFFFFFFCLL))
          {
            do
            {
LABEL_131:
              uint64_t v82 = *((void *)v81 - 1);
              v81 -= 8;
              *((void *)v79 - 1) = v82;
              v79 -= 8;
            }
            while (v81 != v50);
          }
          int v52 = &v78[8 * v76];
          if (v50)
          {
LABEL_133:
            int v83 = v52;
            operator delete(v50);
            int v52 = v83;
          }
        }
        unsigned int v50 = v79;
        int v51 = v102;
        goto LABEL_88;
      }
      *(void *)unsigned int v53 = v73;
      int v55 = v53 + 8;
LABEL_88:
      v45 += 16;
      unsigned int v53 = v55;
      if (v45 == v22)
      {
        CFIndex v89 = v98;
        goto LABEL_145;
      }
    }
    uint64_t v66 = v57;
    uint64_t v22 = v103;
    goto LABEL_112;
  }
  unsigned int v50 = 0;
  CFIndex v89 = (v22 - (unsigned char *)v109) >> 4;
LABEL_144:
  int v54 = 0;
LABEL_145:
  CFDictionaryRef v90 = CFDictionaryCreate(0, (const void **)v54, (const void **)v50, v89, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!v90)
  {
    unint64_t v97 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3BD790](v97, "Could not construct");
    __cxa_throw(v97, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (v50) {
    operator delete(v50);
  }
  if (v54) {
    operator delete(v54);
  }
  int v91 = (char *)v109;
  if (v109)
  {
    int v92 = v110;
    uint64_t v93 = v109;
    if (v110 != v109)
    {
      do
      {
        int v94 = (const void *)*((void *)v92 - 1);
        if (v94) {
          CFRelease(v94);
        }
        int v95 = (const void *)*((void *)v92 - 2);
        if (v95) {
          CFRelease(v95);
        }
        v92 -= 16;
      }
      while (v92 != v91);
      uint64_t v93 = v109;
    }
    unsigned int v110 = v91;
    operator delete(v93);
  }
  *uint64_t v99 = v90;
  sub_19E3C5DBC((char *)v107);
}

void sub_19E3C5A90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char *a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
}

uint64_t *sub_19E3C5B70(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    CFDateRef v3 = a2;
    uint64_t v4 = (uint64_t)result;
    CFTypeID v5 = result + 1;
    do
    {
      uint64_t v6 = *(uint64_t **)(v4 + 8);
      double v7 = v5;
      if (*(uint64_t **)v4 != v5)
      {
        CFOptionFlags v8 = *(uint64_t **)(v4 + 8);
        unint64_t v9 = v5;
        if (v6)
        {
          do
          {
            double v7 = v8;
            CFOptionFlags v8 = (uint64_t *)v8[1];
          }
          while (v8);
        }
        else
        {
          do
          {
            double v7 = (uint64_t *)v9[2];
            BOOL v10 = *v7 == (void)v9;
            unint64_t v9 = v7;
          }
          while (v10);
        }
        int v11 = *((char *)v7 + 55);
        if (v11 >= 0) {
          std::string::size_type v12 = v7 + 4;
        }
        else {
          std::string::size_type v12 = (const void *)v7[4];
        }
        if (v11 >= 0) {
          size_t v13 = *((unsigned __int8 *)v7 + 55);
        }
        else {
          size_t v13 = v7[5];
        }
        int v14 = *((char *)v3 + 55);
        if (v14 >= 0) {
          int v15 = v3 + 4;
        }
        else {
          int v15 = (const void *)v3[4];
        }
        if (v14 >= 0) {
          size_t v16 = *((unsigned __int8 *)v3 + 55);
        }
        else {
          size_t v16 = v3[5];
        }
        if (v16 >= v13) {
          size_t v17 = v13;
        }
        else {
          size_t v17 = v16;
        }
        double result = (uint64_t *)memcmp(v12, v15, v17);
        if (result)
        {
          if ((result & 0x80000000) == 0) {
            goto LABEL_26;
          }
        }
        else if (v13 >= v16)
        {
LABEL_26:
          std::string v18 = (uint64_t **)v5;
          char v19 = (uint64_t **)v5;
          if (!v6)
          {
LABEL_54:
            sub_19E3C60DC((uint64_t)&v31, v4, (uint64_t)(v3 + 4));
            int64_t v27 = v31;
            *unint64_t v31 = 0;
            v27[1] = 0;
            std::string v27[2] = (uint64_t)v19;
            uint64_t *v18 = v27;
            uint64_t v28 = **(void **)v4;
            if (v28)
            {
              *(void *)uint64_t v4 = v28;
              int64_t v27 = *v18;
            }
            double result = sub_19E37D324(*(uint64_t **)(v4 + 8), v27);
            ++*(void *)(v4 + 16);
            unint64_t v26 = (void *)v3[1];
            if (v26) {
              goto LABEL_57;
            }
            do
            {
LABEL_59:
              CFRange v29 = (void *)v3[2];
              BOOL v10 = *v29 == (void)v3;
              CFDateRef v3 = v29;
            }
            while (!v10);
            goto LABEL_3;
          }
          while (1)
          {
            char v19 = (uint64_t **)v6;
            size_t v20 = *((unsigned __int8 *)v6 + 55);
            size_t v21 = v6[5];
            if ((v20 & 0x80u) == 0) {
              uint64_t v22 = v6 + 4;
            }
            else {
              uint64_t v22 = (const void *)v6[4];
            }
            if ((v20 & 0x80u) == 0) {
              size_t v23 = v20;
            }
            else {
              size_t v23 = v21;
            }
            if (v23 >= v16) {
              size_t v24 = v16;
            }
            else {
              size_t v24 = v23;
            }
            int v25 = memcmp(v15, v22, v24);
            if (v25)
            {
              if (v25 < 0) {
                goto LABEL_28;
              }
            }
            else if (v16 < v23)
            {
LABEL_28:
              uint64_t v6 = *v19;
              std::string v18 = v19;
              if (!*v19) {
                goto LABEL_54;
              }
              continue;
            }
            double result = (uint64_t *)memcmp(v22, v15, v24);
            if (result)
            {
              if ((result & 0x80000000) == 0) {
                goto LABEL_51;
              }
            }
            else if (v23 >= v16)
            {
              goto LABEL_51;
            }
            std::string v18 = v19 + 1;
            uint64_t v6 = v19[1];
            if (!v6) {
              goto LABEL_54;
            }
          }
        }
      }
      std::string v18 = (uint64_t **)v5;
      char v19 = (uint64_t **)v5;
      if (!v6) {
        goto LABEL_54;
      }
      std::string v18 = (uint64_t **)(v7 + 1);
      if (!v7[1])
      {
        char v19 = (uint64_t **)v7;
        goto LABEL_54;
      }
LABEL_51:
      unint64_t v26 = (void *)v3[1];
      if (!v26) {
        goto LABEL_59;
      }
      do
      {
LABEL_57:
        CFRange v29 = v26;
        unint64_t v26 = (void *)*v26;
      }
      while (v26);
LABEL_3:
      CFDateRef v3 = v29;
    }
    while (v29 != a3);
  }
  return result;
}

void sub_19E3C5DBC(char *a1)
{
  if (!a1) {
    return;
  }
  sub_19E3C5DBC(*(void *)a1);
  sub_19E3C5DBC(*((void *)a1 + 1));
  if (a1[79] < 0)
  {
    operator delete(*((void **)a1 + 7));
    if ((a1[55] & 0x80000000) == 0) {
      goto LABEL_4;
    }
LABEL_9:
    operator delete(*((void **)a1 + 4));
    goto LABEL_4;
  }
  if (a1[55] < 0) {
    goto LABEL_9;
  }
LABEL_4:
  operator delete(a1);
}

CFStringRef *sub_19E3C5E34(CFStringRef *a1, const UInt8 *a2, uint64_t a3)
{
  CFIndex v5 = *((void *)a2 + 1);
  if (*((char *)a2 + 23) >= 0)
  {
    CFIndex v6 = a2[23];
  }
  else
  {
    a2 = *(const UInt8 **)a2;
    CFIndex v6 = v5;
  }
  CFStringRef v7 = CFStringCreateWithBytes(0, a2, v6, 0x8000100u, 0);
  *a1 = v7;
  if (!v7)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3BD790](exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v8 = *(char *)(a3 + 23);
  if (v8 >= 0) {
    unint64_t v9 = (const UInt8 *)a3;
  }
  else {
    unint64_t v9 = *(const UInt8 **)a3;
  }
  if (v8 >= 0) {
    CFIndex v10 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    CFIndex v10 = *(void *)(a3 + 8);
  }
  CFStringRef v11 = CFStringCreateWithBytes(0, v9, v10, 0x8000100u, 0);
  a1[1] = v11;
  if (!v11)
  {
    int v14 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3BD790](v14, "Could not construct");
    __cxa_throw(v14, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return a1;
}

void sub_19E3C5F44(_Unwind_Exception *a1)
{
  CFDateRef v3 = *(const void **)(v1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  sub_19E3C60A8((const void **)v1);
  _Unwind_Resume(a1);
}

void **sub_19E3C5FAC(void **a1)
{
  CFDictionaryRef v2 = (char *)*a1;
  if (*a1)
  {
    CFDateRef v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        CFIndex v5 = (const void *)*((void *)v3 - 1);
        if (v5) {
          CFRelease(v5);
        }
        CFIndex v6 = (const void *)*((void *)v3 - 2);
        if (v6) {
          CFRelease(v6);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_19E3C6030(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = (CFTypeRef *)(i - 16);
    *(void *)(a1 + 16) = i - 16;
    CFIndex v5 = *(const void **)(i - 8);
    if (v5) {
      CFRelease(v5);
    }
    if (*v4) {
      CFRelease(*v4);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

const void **sub_19E3C60A8(const void **a1)
{
  CFDictionaryRef v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

unsigned char *sub_19E3C60DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a2 + 8;
  CFIndex v6 = operator new(0x50uLL);
  CFStringRef v7 = v6;
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = 0;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_19E39369C(v6 + 32, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *((_OWORD *)v6 + 2) = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
  }
  double result = v7 + 56;
  if (*(char *)(a3 + 47) < 0)
  {
    double result = sub_19E39369C(result, *(void **)(a3 + 24), *(void *)(a3 + 32));
  }
  else
  {
    *(_OWORD *)double result = *(_OWORD *)(a3 + 24);
    *((void *)v7 + 9) = *(void *)(a3 + 40);
  }
  *(unsigned char *)(a1 + 16) = 1;
  return result;
}

void sub_19E3C6180(_Unwind_Exception *a1)
{
  if (*(char *)(v2 + 55) < 0) {
    operator delete(*v3);
  }
  sub_19E3C61AC(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_19E3C61AC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      if (*(char *)(v2 + 79) < 0)
      {
        operator delete(*(void **)(v2 + 56));
        if ((*(char *)(v2 + 55) & 0x80000000) == 0) {
          goto LABEL_5;
        }
      }
      else if ((*(char *)(v2 + 55) & 0x80000000) == 0)
      {
        goto LABEL_5;
      }
      operator delete(*(void **)(v2 + 32));
    }
LABEL_5:
    operator delete((void *)v2);
  }
  return a1;
}

void LM::TrialParameters::createWithEncodedRepresentation(LM::TrialParameters *this@<X0>, uint64_t a2@<X8>)
{
  if (!this) {
    __assert_rtn("createWithEncodedRepresentation", "TrialParameters.mm", 33, "dict");
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 24) = a2 + 32;
  *(void *)(a2 + 4sub_19E392864(&a9, 0) = 0;
  CFRetain(this);
  sub_19E36E590(v56, this);
  sub_19E3C6720((uint64_t)&v50, v56[0]);
  while (1)
  {
    sub_19E3C6720((uint64_t)&__p, v56[0]);
    uint64_t v5 = v46;
    uint64_t v45 = (v47 - (unsigned char *)v46) >> 3;
    if (!v50 || v51 == (v53 - (unsigned char *)v52) >> 3)
    {
      BOOL v6 = 1;
      CFStringRef v7 = v48;
      if (!v48) {
        goto LABEL_8;
      }
LABEL_7:
      uint64_t v49 = v7;
      operator delete(v7);
      uint64_t v5 = v46;
      goto LABEL_8;
    }
    BOOL v6 = v50 == __p && v51 == (v47 - (unsigned char *)v46) >> 3;
    CFStringRef v7 = v48;
    if (v48) {
      goto LABEL_7;
    }
LABEL_8:
    if (v5)
    {
      uint64_t v47 = v5;
      operator delete(v5);
    }
    if (v6) {
      break;
    }
    sub_19E3C67E4(cf, &v50);
    CFStringRef v8 = (const __CFString *)cf[0];
    if (!cf[0] || (CFTypeID TypeID = CFStringGetTypeID(), TypeID != CFGetTypeID(v8)))
    {
      HIBYTE(v46) = 0;
      LOBYTE(__p) = 0;
      CFTypeRef v10 = cf[1];
      if (!cf[1]) {
        goto LABEL_17;
      }
LABEL_16:
      CFRelease(v10);
      goto LABEL_17;
    }
    sub_19E3C6934(&__p, v8);
    CFTypeRef v10 = cf[1];
    if (cf[1]) {
      goto LABEL_16;
    }
LABEL_17:
    if (v8) {
      CFRelease(v8);
    }
    sub_19E3C67E4(&v40, &v50);
    CFStringRef v11 = v41;
    if (v41)
    {
      CFTypeID v12 = CFStringGetTypeID();
      if (v12 == CFGetTypeID(v11))
      {
        sub_19E3C6934(cf, v11);
      }
      else
      {
        HIBYTE(v43) = 0;
        LOBYTE(cf[0]) = 0;
      }
      CFRelease(v11);
    }
    else
    {
      HIBYTE(v43) = 0;
      LOBYTE(cf[0]) = 0;
    }
    if (v40) {
      CFRelease(v40);
    }
    int v14 = v52;
    size_t v15 = v53 - (unsigned char *)v52;
    if (v53 == v52)
    {
      size_t v16 = 0;
    }
    else
    {
      if ((v15 & 0x8000000000000000) != 0) {
        sub_19E37C7C4();
      }
      size_t v16 = operator new(v53 - (unsigned char *)v52);
      memcpy(v16, v14, v15);
    }
    size_t v17 = v54;
    size_t v18 = v55 - (unsigned char *)v54;
    if (v55 == v54)
    {
      ++v51;
      if (v16) {
        goto LABEL_42;
      }
    }
    else
    {
      if ((v18 & 0x8000000000000000) != 0) {
        sub_19E37C7C4();
      }
      char v19 = operator new(v55 - (unsigned char *)v54);
      memcpy(v19, v17, v18);
      ++v51;
      operator delete(v19);
      if (v16) {
LABEL_42:
      }
        operator delete(v16);
    }
    if (SHIBYTE(v46) >= 0) {
      uint64_t v20 = HIBYTE(v46);
    }
    else {
      uint64_t v20 = v45;
    }
    if (!v20) {
      goto LABEL_91;
    }
    size_t v21 = (char *)HIBYTE(v43);
    char v22 = HIBYTE(v43);
    size_t v23 = (char *)cf[1];
    if (!(SHIBYTE(v43) >= 0 ? (CFTypeRef)HIBYTE(v43) : cf[1])) {
      goto LABEL_91;
    }
    if (v20 == 36)
    {
      p_p = &__p;
      if (SHIBYTE(v46) < 0) {
        p_p = __p;
      }
      uint64_t v26 = *p_p;
      uint64_t v27 = p_p[1];
      uint64_t v28 = p_p[2];
      uint64_t v29 = p_p[3];
      int v30 = *((_DWORD *)p_p + 8);
      BOOL v31 = v26 == 0x3935383444303942 && v27 == 0x41342D453131412DLL;
      BOOL v32 = v31 && v28 == 0x2D343038412D3139;
      BOOL v33 = v32 && v29 == 0x3041324442414643;
      if (v33 && v30 == 1178745145)
      {
        if (*(char *)(a2 + 23) < 0)
        {
          **(unsigned char **)a2 = 0;
          *(void *)(a2 + 8) = 0;
          size_t v21 = (char *)HIBYTE(v43);
          size_t v23 = (char *)cf[1];
          char v22 = HIBYTE(v43);
        }
        else
        {
          *(unsigned char *)a2 = 0;
          *(unsigned char *)(a2 + 23) = 0;
        }
        if (v22 >= 0) {
          uint64_t v39 = (char *)cf;
        }
        else {
          uint64_t v39 = (char *)cf[0];
        }
        if (v22 < 0) {
          size_t v21 = v23;
        }
        sub_19E39559C((std::string *)a2, v39, &v21[(void)v39]);
        goto LABEL_91;
      }
    }
    uint64_t v35 = sub_19E3C6AF4((uint64_t **)(a2 + 24), (const void **)&__p, (uint64_t)&__p);
    uint64_t v36 = (void **)(v35 + 7);
    if (v35 + 7 != (uint64_t **)cf)
    {
      if (*((char *)v35 + 79) < 0)
      {
        if (SHIBYTE(v43) >= 0) {
          int v37 = cf;
        }
        else {
          int v37 = (CFTypeRef *)cf[0];
        }
        if (SHIBYTE(v43) >= 0) {
          size_t v38 = HIBYTE(v43);
        }
        else {
          size_t v38 = (size_t)cf[1];
        }
        sub_19E3C6D44(v36, v37, v38);
        goto LABEL_91;
      }
      if ((HIBYTE(v43) & 0x80) != 0)
      {
        sub_19E3C6C7C(v36, (void *)cf[0], (size_t)cf[1]);
        goto LABEL_91;
      }
      *(_OWORD *)uint64_t v36 = *(_OWORD *)cf;
      v35[9] = v43;
      if (SHIBYTE(v46) < 0) {
        goto LABEL_3;
      }
    }
    else
    {
LABEL_91:
      if (SHIBYTE(v43) < 0)
      {
        operator delete((void *)cf[0]);
        if (SHIBYTE(v46) < 0) {
LABEL_3:
        }
          operator delete(__p);
      }
      else if (SHIBYTE(v46) < 0)
      {
        goto LABEL_3;
      }
    }
  }
  if (v54)
  {
    int v55 = v54;
    operator delete(v54);
  }
  if (v52)
  {
    unsigned int v53 = v52;
    operator delete(v52);
  }
  if (v56[0]) {
    CFRelease(v56[0]);
  }
}

void sub_19E3C667C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_19E3C6EE0(v29);
  _Unwind_Resume(a1);
}

uint64_t sub_19E3C6720(uint64_t a1, CFDictionaryRef theDict)
{
  *(void *)a1 = theDict;
  *(_OWORD *)(a1 + 4sub_19E392864(&a9, 0) = 0u;
  uint64_t v3 = (const void ***)(a1 + 40);
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 56) = 0;
  if (theDict)
  {
    unint64_t Count = CFDictionaryGetCount(theDict);
    unint64_t v5 = Count;
    uint64_t v6 = *(void *)(a1 + 16);
    unint64_t v7 = (*(void *)(a1 + 24) - v6) >> 3;
    if (Count <= v7)
    {
      if (Count < v7) {
        *(void *)(a1 + 24) = v6 + 8 * Count;
      }
    }
    else
    {
      sub_19E3C6F50(a1 + 16, Count - v7);
    }
    CFStringRef v8 = *(const void ***)(a1 + 40);
    unint64_t v9 = (uint64_t)(*(void *)(a1 + 48) - (void)v8) >> 3;
    if (v5 <= v9)
    {
      if (v5 < v9) {
        *(void *)(a1 + 48) = &v8[v5];
      }
    }
    else
    {
      sub_19E3C6F50((uint64_t)v3, v5 - v9);
      CFStringRef v8 = *v3;
    }
    CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)a1, *(const void ***)(a1 + 16), v8);
  }
  return a1;
}

void sub_19E3C67E4(void *a1, void *a2)
{
  unint64_t v2 = a2[1];
  if ((v2 & 0x8000000000000000) != 0 || (uint64_t v4 = a2[2], v2 >= (a2[3] - v4) >> 3))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_19E3922F0(exception, "DictionaryRef_iterator iterator out of range.");
    __cxa_throw(exception, (struct type_info *)off_1E599EF00, MEMORY[0x1E4FBA1D0]);
  }
  uint64_t v6 = *(const void **)(v4 + 8 * v2);
  if (v6)
  {
    CFRetain(*(CFTypeRef *)(v4 + 8 * v2));
    sub_19E372124(&v13, v6);
    unint64_t v2 = a2[1];
  }
  else
  {
    CFTypeRef v13 = 0;
  }
  uint64_t v7 = a2[5];
  CFStringRef v8 = *(const void **)(v7 + 8 * v2);
  if (v8) {
    CFRetain(*(CFTypeRef *)(v7 + 8 * v2));
  }
  sub_19E372124(&v12, v8);
  CFTypeRef v10 = v12;
  CFTypeRef v9 = v13;
  if (v13) {
    CFRetain(v13);
  }
  *a1 = v9;
  if (v10)
  {
    CFRetain(v10);
    a1[1] = v10;
    CFRelease(v10);
    if (!v9) {
      return;
    }
  }
  else
  {
    a1[1] = 0;
    if (!v9) {
      return;
    }
  }
  CFRelease(v9);
}

void sub_19E3C690C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19E3C6920(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E3C6F1C((const void **)va);
  _Unwind_Resume(a1);
}

unint64_t sub_19E3C6934(void *a1, CFStringRef theString)
{
  CStringPtr = CFStringGetCStringPtr(theString, 0x8000100u);
  unint64_t v5 = CStringPtr;
  if (CStringPtr)
  {
    unint64_t result = strlen(CStringPtr);
    if (result <= 0x7FFFFFFFFFFFFFF7)
    {
      size_t v7 = result;
      if (result >= 0x17)
      {
        uint64_t v11 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((result | 7) != 0x17) {
          uint64_t v11 = result | 7;
        }
        uint64_t v12 = v11 + 1;
        CFTypeRef v13 = operator new(v11 + 1);
        a1[1] = v7;
        a1[2] = v12 | 0x8000000000000000;
        *a1 = v13;
        a1 = v13;
      }
      else
      {
        *((unsigned char *)a1 + 23) = result;
        if (!result) {
          goto LABEL_14;
        }
      }
      unint64_t result = (unint64_t)memmove(a1, v5, v7);
LABEL_14:
      *((unsigned char *)a1 + v7) = 0;
      return result;
    }
LABEL_23:
    sub_19E37C958();
  }
  CFIndex Length = CFStringGetLength(theString);
  CFIndex maxBufLen = 0;
  v18.location = 0;
  v18.length = Length;
  CFStringGetBytes(theString, v18, 0x8000100u, 0, 0, 0, 0, &maxBufLen);
  size_t v9 = maxBufLen;
  if ((unint64_t)maxBufLen > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_23;
  }
  if ((unint64_t)maxBufLen >= 0x17)
  {
    CFIndex v14 = (maxBufLen & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((maxBufLen | 7) != 0x17) {
      CFIndex v14 = maxBufLen | 7;
    }
    CFIndex v15 = v14 + 1;
    CFTypeRef v10 = operator new(v14 + 1);
    a1[1] = v9;
    a1[2] = v15 | 0x8000000000000000;
    *a1 = v10;
  }
  else
  {
    *((unsigned char *)a1 + 23) = maxBufLen;
    CFTypeRef v10 = a1;
    if (!v9) {
      goto LABEL_19;
    }
  }
  bzero(v10, v9);
LABEL_19:
  *((unsigned char *)v10 + v9) = 0;
  if (*((char *)a1 + 23) >= 0) {
    size_t v16 = (UInt8 *)a1;
  }
  else {
    size_t v16 = (UInt8 *)*a1;
  }
  v19.location = 0;
  v19.length = Length;
  return CFStringGetBytes(theString, v19, 0x8000100u, 0, 0, v16, maxBufLen, &maxBufLen);
}

uint64_t **sub_19E3C6AF4(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t v6 = a1 + 1;
  unint64_t v5 = a1[1];
  if (v5)
  {
    int v7 = *((char *)a2 + 23);
    if (v7 >= 0) {
      CFStringRef v8 = a2;
    }
    else {
      CFStringRef v8 = *a2;
    }
    if (v7 >= 0) {
      size_t v9 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v9 = (size_t)a2[1];
    }
    while (1)
    {
      CFTypeRef v10 = (uint64_t **)v5;
      CFTypeRef v13 = (const void *)v5[4];
      uint64_t v11 = v5 + 4;
      uint64_t v12 = v13;
      int v14 = *((char *)v11 + 23);
      if (v14 >= 0) {
        CFIndex v15 = v11;
      }
      else {
        CFIndex v15 = v12;
      }
      if (v14 >= 0) {
        size_t v16 = *((unsigned __int8 *)v11 + 23);
      }
      else {
        size_t v16 = v11[1];
      }
      if (v16 >= v9) {
        size_t v17 = v9;
      }
      else {
        size_t v17 = v16;
      }
      int v18 = memcmp(v8, v15, v17);
      if (v18)
      {
        if (v18 < 0) {
          goto LABEL_8;
        }
LABEL_22:
        int v19 = memcmp(v15, v8, v17);
        if (v19)
        {
          if ((v19 & 0x80000000) == 0) {
            return v10;
          }
        }
        else if (v16 >= v9)
        {
          return v10;
        }
        unint64_t v5 = v10[1];
        if (!v5)
        {
          uint64_t v6 = v10 + 1;
          goto LABEL_29;
        }
      }
      else
      {
        if (v9 >= v16) {
          goto LABEL_22;
        }
LABEL_8:
        unint64_t v5 = *v10;
        uint64_t v6 = v10;
        if (!*v10) {
          goto LABEL_29;
        }
      }
    }
  }
  CFTypeRef v10 = a1 + 1;
LABEL_29:
  uint64_t v20 = operator new(0x50uLL);
  size_t v21 = v20 + 4;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_19E39369C(v21, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)size_t v21 = *(_OWORD *)a3;
    v20[6] = *(void *)(a3 + 16);
  }
  v20[7] = 0;
  v20[8] = 0;
  v20[9] = 0;
  void *v20 = 0;
  v20[1] = 0;
  std::string v20[2] = v10;
  const void *v6 = v20;
  char v22 = (uint64_t *)**a1;
  size_t v23 = v20;
  if (v22)
  {
    *a1 = v22;
    size_t v23 = *v6;
  }
  sub_19E37D324(a1[1], v23);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t **)v20;
}

void sub_19E3C6C68(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_19E3C6C7C(void *__dst, void *__src, size_t __len)
{
  if (__len > 0x16)
  {
    if (__len - 0x7FFFFFFFFFFFFFF7 <= 0x800000000000001ELL) {
      sub_19E37C958();
    }
    size_t v7 = 44;
    if (__len > 0x2C) {
      size_t v7 = __len;
    }
    size_t v8 = (v7 | 7) + 1;
    uint64_t v6 = operator new(v8);
    memcpy(v6, __src, __len);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *long long __dst = v6;
  }
  else
  {
    *((unsigned char *)__dst + 23) = __len;
    uint64_t v6 = __dst;
    if (__len)
    {
      memmove(__dst, __src, __len);
      uint64_t v6 = __dst;
    }
  }
  *((unsigned char *)v6 + __len) = 0;
  return __dst;
}

void **sub_19E3C6D44(void **a1, void *__src, size_t __len)
{
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t v7 = v6 & 0x7FFFFFFFFFFFFFFFLL;
  if ((v6 & 0x7FFFFFFFFFFFFFFFLL) <= __len)
  {
    size_t v9 = 0x7FFFFFFFFFFFFFF7;
    if (0x7FFFFFFFFFFFFFF7 - v7 < __len - v7 + 1) {
      sub_19E37C958();
    }
    unint64_t v10 = v7 - 1;
    uint64_t v11 = a1;
    if ((v6 & 0x8000000000000000) != 0) {
      uint64_t v11 = *a1;
    }
    if (v10 <= 0x3FFFFFFFFFFFFFF2)
    {
      unint64_t v12 = 2 * v10;
      if (__len > 2 * v10) {
        unint64_t v12 = __len;
      }
      uint64_t v13 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v12 | 7) != 0x17) {
        uint64_t v13 = v12 | 7;
      }
      if (v12 >= 0x17) {
        size_t v9 = v13 + 1;
      }
      else {
        size_t v9 = 23;
      }
    }
    int v14 = operator new(v9);
    size_t v8 = v14;
    if (__len) {
      memcpy(v14, __src, __len);
    }
    if (v10 != 22) {
      operator delete(v11);
    }
    a1[1] = (void *)__len;
    a1[2] = (void *)(v9 | 0x8000000000000000);
    *a1 = v8;
  }
  else
  {
    size_t v8 = *a1;
    a1[1] = (void *)__len;
    if (__len) {
      memmove(v8, __src, __len);
    }
  }
  *((unsigned char *)v8 + __len) = 0;
  return a1;
}

void *sub_19E3C6E68(void *a1)
{
  unint64_t v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[2];
  if (v3)
  {
    a1[3] = v3;
    operator delete(v3);
  }
  return a1;
}

const void **sub_19E3C6EAC(const void **a1)
{
  unint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t sub_19E3C6EE0(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

const void **sub_19E3C6F1C(const void **a1)
{
  unint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void sub_19E3C6F50(uint64_t a1, unint64_t a2)
{
  unint64_t v5 = *(char **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  unint64_t v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      unint64_t v6 = &v5[8 * a2];
    }
    *(void *)(a1 + 8) = v6;
  }
  else
  {
    uint64_t v7 = *(char **)a1;
    uint64_t v8 = (uint64_t)&v5[-*(void *)a1];
    uint64_t v9 = v8 >> 3;
    unint64_t v10 = (v8 >> 3) + a2;
    if (v10 >> 61) {
      sub_19E37C7C4();
    }
    uint64_t v11 = v4 - (void)v7;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 61) {
        sub_19E37C2B8();
      }
      uint64_t v13 = operator new(8 * v12);
    }
    else
    {
      uint64_t v13 = 0;
    }
    int v14 = &v13[8 * v9];
    size_t v15 = 8 * a2;
    size_t v16 = &v13[8 * v12];
    bzero(v14, v15);
    size_t v17 = &v14[v15];
    if (v5 == v7)
    {
      uint64_t v7 = v5;
    }
    else
    {
      unint64_t v18 = v5 - v7 - 8;
      if (v18 < 0x58) {
        goto LABEL_33;
      }
      if ((unint64_t)(v5 - v13 - v8) < 0x20) {
        goto LABEL_33;
      }
      uint64_t v19 = (v18 >> 3) + 1;
      unint64_t v6 = &v5[-8 * (v19 & 0x3FFFFFFFFFFFFFFCLL)];
      uint64_t v20 = &v13[8 * v9 - 16];
      size_t v21 = v5 - 16;
      uint64_t v22 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v23 = *(_OWORD *)v21;
        *(v20 - 1) = *((_OWORD *)v21 - 1);
        _OWORD *v20 = v23;
        v20 -= 2;
        v21 -= 32;
        v22 -= 4;
      }
      while (v22);
      v14 -= 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_33:
        do
        {
          uint64_t v24 = *((void *)v6 - 1);
          v6 -= 8;
          *((void *)v14 - 1) = v24;
          v14 -= 8;
        }
        while (v6 != v7);
        uint64_t v7 = *(char **)a1;
      }
    }
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v17;
    *(void *)(a1 + 16) = v16;
    if (v7)
    {
      operator delete(v7);
    }
  }
}

uint64_t LM::TrialParameters::operator==(const std::__fs::filesystem::path *a1, std::__fs::filesystem::path::__string_view a2)
{
  data = a2.__data_;
  std::basic_string_view<_CharT, _Traits>::size_type v4 = *((void *)a2.__data_ + 1);
  if (*((char *)a2.__data_ + 23) >= 0)
  {
    a2.__size_ = *((unsigned __int8 *)a2.__data_ + 23);
  }
  else
  {
    a2.__data_ = *(const std::string_view::value_type **)a2.__data_;
    a2.__size_ = v4;
  }
  if (std::__fs::filesystem::path::__compare(a1, a2)
    || a1[1].__pn_.__r_.__value_.__r.__words[2] != *((void *)data + 5))
  {
    return 0;
  }
  std::string::pointer v5 = a1[1].__pn_.__r_.__value_.__l.__data_;
  p_std::string::size_type size = &a1[1].__pn_.__r_.__value_.__l.__size_;
  if (v5 != (std::string::pointer)p_size)
  {
    uint64_t v7 = (void *)*((void *)data + 3);
    while (1)
    {
      uint64_t v8 = v5[55];
      if ((v8 & 0x80u) == 0) {
        uint64_t v9 = v5[55];
      }
      else {
        uint64_t v9 = *((void *)v5 + 5);
      }
      uint64_t v10 = *((unsigned __int8 *)v7 + 55);
      int v11 = (char)v10;
      if ((v10 & 0x80u) != 0) {
        uint64_t v10 = v7[5];
      }
      if (v9 != v10) {
        return 0;
      }
      unint64_t v12 = (const void **)(v5 + 32);
      if (v11 >= 0) {
        uint64_t v13 = (unsigned __int8 *)(v7 + 4);
      }
      else {
        uint64_t v13 = (unsigned __int8 *)v7[4];
      }
      if ((v8 & 0x80) != 0)
      {
        if (memcmp(*v12, v13, *((void *)v5 + 5))) {
          return 0;
        }
      }
      else if (v5[55])
      {
        while (*(unsigned __int8 *)v12 == *v13)
        {
          unint64_t v12 = (const void **)((char *)v12 + 1);
          ++v13;
          if (!--v8) {
            goto LABEL_23;
          }
        }
        return 0;
      }
LABEL_23:
      uint64_t v14 = v5[79];
      if ((v14 & 0x80u) == 0) {
        uint64_t v15 = v5[79];
      }
      else {
        uint64_t v15 = *((void *)v5 + 8);
      }
      uint64_t v16 = *((unsigned __int8 *)v7 + 79);
      int v17 = (char)v16;
      if ((v16 & 0x80u) != 0) {
        uint64_t v16 = v7[8];
      }
      if (v15 != v16) {
        return 0;
      }
      unint64_t v18 = (const void **)(v5 + 56);
      if (v17 >= 0) {
        uint64_t v19 = (unsigned __int8 *)(v7 + 7);
      }
      else {
        uint64_t v19 = (unsigned __int8 *)v7[7];
      }
      if ((v14 & 0x80) != 0)
      {
        if (memcmp(*v18, v19, *((void *)v5 + 8))) {
          return 0;
        }
      }
      else if (v5[79])
      {
        uint64_t v20 = v14 - 1;
        do
        {
          int v22 = *(unsigned __int8 *)v18;
          unint64_t v18 = (const void **)((char *)v18 + 1);
          int v21 = v22;
          int v24 = *v19++;
          int v23 = v24;
          BOOL v26 = v20-- != 0;
        }
        while (v21 == v23 && v26);
        if (v21 != v23) {
          return 0;
        }
      }
      uint64_t v27 = (char *)*((void *)v5 + 1);
      if (v27)
      {
        do
        {
          uint64_t v28 = v27;
          uint64_t v27 = *(char **)v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          uint64_t v28 = (char *)*((void *)v5 + 2);
          BOOL v29 = *(void *)v28 == (void)v5;
          std::string::pointer v5 = v28;
        }
        while (!v29);
      }
      int v30 = (void *)v7[1];
      if (v30)
      {
        do
        {
          BOOL v31 = v30;
          int v30 = (void *)*v30;
        }
        while (v30);
      }
      else
      {
        do
        {
          BOOL v31 = (void *)v7[2];
          BOOL v29 = *v31 == (void)v7;
          uint64_t v7 = v31;
        }
        while (!v29);
      }
      uint64_t result = 1;
      uint64_t v7 = v31;
      std::string::pointer v5 = v28;
      if (v28 == (char *)p_size) {
        return result;
      }
    }
  }
  return 1;
}

void LM::TrialParameters::description(LM::TrialParameters *this@<X0>, void *a2@<X8>)
{
  sub_19E3C5174((CFDictionaryRef *)&cf, (uint64_t)this);
  CFTypeRef v3 = cf;
  CFStringRef v4 = CFCopyDescription(cf);
  sub_19E3721DC(a2, v4);
  if (v4) {
    CFRelease(v4);
  }
  if (v3) {
    CFRelease(v3);
  }
}

void sub_19E3C7374(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  if (v10) {
    CFRelease(v10);
  }
  sub_19E3C6EAC(&a10);
  _Unwind_Resume(a1);
}

uint64_t LMLanguageModelSetParameterValue(uint64_t a1, const __CFString *a2, __CFString *a3, CFErrorRef *a4)
{
  if (a1 && a2)
  {
    std::string::pointer v5 = *(void **)(a1 + 24);
    uint64_t result = sub_19E373D28(v5[29], a2, a3, a4);
    if (result)
    {
      if (*(unsigned char *)(v5[29] + 192))
      {
        if (!v5[6]) {
          sub_19E40D074(v5);
        }
      }
      return 1;
    }
  }
  else
  {
    if (a4)
    {
      std::string __p = operator new(0x20uLL);
      long long v8 = xmmword_19E572FC0;
      strcpy((char *)__p, "a required parameter was NULL");
      *a4 = sub_19E439948((uint64_t)&__p);
      if (SHIBYTE(v8) < 0) {
        operator delete(__p);
      }
    }
    return 0;
  }
  return result;
}

void sub_19E3C7464(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double LMLanguageModelConditionalProbability(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  if (qword_1EC009490 != -1) {
    dispatch_once(&qword_1EC009490, &unk_1EF0BEE38);
  }
  uint64_t v8 = qword_1EC009488;
  return sub_19E3C7510(a1, a2, a3, a4, 0, 0, 1, v8);
}

double sub_19E3C7510(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, void *a5, _DWORD *a6, int a7, uint64_t a8)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  double result = -1.79769313e308;
  if (!a1 || a4 < 0) {
    return result;
  }
  uint64_t v11 = *(void *)(a1 + 24);
  int64x2_t v14 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  uint64_t v15 = 0;
  __int16 v16 = 0;
  char v17 = 1;
  long long v18 = xmmword_19E572FD0;
  int v19 = 0;
  long long v20 = xmmword_19E572FD0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  unint64_t v21 = 0xFFEFFFFFFFFFFFFFLL;
  v13[0] = a3;
  v13[1] = a4;
  std::string v13[2] = a3;
  v13[3] = a4;
  v13[4] = a3;
  v13[5] = a4;
  v13[6] = a3;
  v13[7] = a4;
  int v25 = 0;
  char v12 = sub_19E413378(v11, a2 | ((unint64_t)a2 << 32), v13, (uint64_t)&v14, a8, a7, 1, v24, (__n128)xmmword_19E572FD0);
  if (v25 == v24)
  {
    (*(void (**)(void *))(v24[0] + 32))(v24);
    if (v12) {
      goto LABEL_8;
    }
  }
  else
  {
    if (v25) {
      (*(void (**)(void *))(*v25 + 40))(v25);
    }
    if (v12) {
      goto LABEL_8;
    }
  }
  v14.i64[0] = 0xFFEFFFFFFFFFFFFFLL;
LABEL_8:
  if (a5) {
    *a5 = v15;
  }
  if (a6) {
    *a6 |= v16 | (2 * HIBYTE(v16));
  }
  return *(double *)v14.i64;
}

void sub_19E3C76A4(_Unwind_Exception *a1)
{
  sub_19E3C76B8((void *)(v1 - 88));
  _Unwind_Resume(a1);
}

void *sub_19E3C76B8(void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

double LMLanguageModelStaticConditionalProbability(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  if (qword_1EC009490 != -1) {
    dispatch_once(&qword_1EC009490, &unk_1EF0BEE38);
  }
  uint64_t v8 = qword_1EC009488;
  return sub_19E3C7510(a1, a2, a3, a4, 0, 0, 0, v8);
}

double LMLanguageModelConditionalProbabilityWithEffectiveOrder(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (qword_1EC009490 != -1) {
    dispatch_once(&qword_1EC009490, &unk_1EF0BEE38);
  }
  uint64_t v10 = qword_1EC009488;
  return sub_19E3C7510(a1, a2, a3, a4, a5, 0, 1, v10);
}

double LMLanguageModelConditionalProbabilityWithFlags(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, void *a5, _DWORD *a6)
{
  if (qword_1EC009490 != -1) {
    dispatch_once(&qword_1EC009490, &unk_1EF0BEE38);
  }
  uint64_t v12 = qword_1EC009488;
  return sub_19E3C7510(a1, a2, a3, a4, a5, a6, 1, v12);
}

double LMLanguageModelConditionalProbabilityWithFlagsAndLogs(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, void *a5, _DWORD *a6, __CFString *a7)
{
  if (a7)
  {
    int v18 = 7;
    char v17 = &unk_1EF0BAD18;
    CFStringRef appendedString = CFStringCreateMutable(0, 0);
    double v14 = sub_19E3C7510(a1, a2, a3, a4, a5, a6, 1, (uint64_t)&v17);
    CFStringAppend(a7, appendedString);
    char v17 = &unk_1EF0BAD18;
    CFRelease(appendedString);
    return v14;
  }
  else
  {
    if (qword_1EC009490 != -1) {
      dispatch_once(&qword_1EC009490, &unk_1EF0BEE38);
    }
    uint64_t v16 = qword_1EC009488;
    return sub_19E3C7510(a1, a2, a3, a4, a5, a6, 1, v16);
  }
}

void sub_19E3C7A6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E4E444C((uint64_t)va);
  _Unwind_Resume(a1);
}

double LMLanguageModelJointProbability(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result = -1.79769313e308;
  if (a1)
  {
    if ((a3 & 0x8000000000000000) == 0)
    {
      double v4 = 0.0;
      sub_19E414A74(*(void *)(a1 + 24), a2, a3, &v4);
      return v4;
    }
  }
  return result;
}

uint64_t LMLanguageModelConditionalProbabilityVector(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  return LMLanguageModelConditionalProbabilityVectorWithEffectiveOrders(a1, a2, a3, a4, a5, a6, 0);
}

uint64_t LMLanguageModelConditionalProbabilityVectorWithEffectiveOrders(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7)
{
  uint64_t v7 = 0;
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  if (!a6) {
    return v7;
  }
  uint64_t v8 = a2;
  if (!a2 || !a1 || a5 < 0) {
    return v7;
  }
  uint64_t v11 = a6;
  uint64_t v13 = a3;
  uint64_t v23 = *(void *)(a1 + 24);
  if (qword_1EC009490 == -1)
  {
    if (a3 >= 1) {
      goto LABEL_7;
    }
    return 1;
  }
  dispatch_once(&qword_1EC009490, &unk_1EF0BEE38);
  if (v13 < 1) {
    return 1;
  }
LABEL_7:
  uint64_t v14 = qword_1EC009488;
  int64x2_t v15 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  if (a7)
  {
    int64x2_t v21 = v15;
    LODWORD(v7) = 1;
    do
    {
      int64x2_t v24 = v21;
      uint64_t v25 = 0;
      __int16 v26 = 0;
      char v27 = 1;
      long long v28 = xmmword_19E572FD0;
      int v29 = 0;
      long long v30 = xmmword_19E572FD0;
      unint64_t v31 = 0xFFEFFFFFFFFFFFFFLL;
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      unsigned int v16 = *v8++;
      uint64_t v34 = a4;
      uint64_t v35 = a5;
      uint64_t v36 = a4;
      uint64_t v37 = a5;
      uint64_t v38 = a4;
      uint64_t v39 = a5;
      uint64_t v40 = a4;
      uint64_t v41 = a5;
      int v43 = 0;
      int v17 = sub_19E413378(v23, v16 | ((unint64_t)v16 << 32), &v34, (uint64_t)&v24, v14, 1, 1, v42, (__n128)xmmword_19E572FD0);
      if (v43 == v42)
      {
        (*(void (**)(void *))(v42[0] + 32))(v42);
      }
      else if (v43)
      {
        (*(void (**)(void *))(*v43 + 40))(v43);
      }
      uint64_t v7 = v7 & v17;
      *v11++ = v24.i64[0];
      *a7++ = v25;
      --v13;
    }
    while (v13);
  }
  else
  {
    int64x2_t v22 = v15;
    LODWORD(v7) = 1;
    do
    {
      int64x2_t v24 = v22;
      uint64_t v25 = 0;
      __int16 v26 = 0;
      char v27 = 1;
      long long v28 = xmmword_19E572FD0;
      int v29 = 0;
      long long v30 = xmmword_19E572FD0;
      unint64_t v31 = 0xFFEFFFFFFFFFFFFFLL;
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      unsigned int v18 = *v8++;
      uint64_t v34 = a4;
      uint64_t v35 = a5;
      uint64_t v36 = a4;
      uint64_t v37 = a5;
      uint64_t v38 = a4;
      uint64_t v39 = a5;
      uint64_t v40 = a4;
      uint64_t v41 = a5;
      int v43 = 0;
      int v19 = sub_19E413378(v23, v18 | ((unint64_t)v18 << 32), &v34, (uint64_t)&v24, v14, 1, 1, v42, (__n128)xmmword_19E572FD0);
      if (v43 == v42)
      {
        (*(void (**)(void *))(v42[0] + 32))(v42);
      }
      else if (v43)
      {
        (*(void (**)(void *))(*v43 + 40))(v43);
      }
      uint64_t v7 = v7 & v19;
      *v11++ = v24.i64[0];
      --v13;
    }
    while (v13);
  }
  return v7;
}

void sub_19E3C7DD8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 - 104);
  if (v3 == v1 - 128)
  {
    (*(void (**)(uint64_t))(*(void *)(v1 - 128) + 32))(v1 - 128);
    _Unwind_Resume(exception_object);
  }
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t LMLanguageModelJointProbabilityVector(uint64_t a1, int *a2, uint64_t a3, const void *a4, uint64_t a5, double *a6)
{
  if (a1) {
    BOOL v6 = a5 < 0;
  }
  else {
    BOOL v6 = 1;
  }
  BOOL v8 = v6 || a2 == 0 || a6 == 0;
  int v9 = v8;
  if (!v8)
  {
    uint64_t v11 = *(void *)(a1 + 24);
    if ((unint64_t)a5 >= 0x3FFFFFFFFFFFFFFFLL) {
      sub_19E37C7C4();
    }
    uint64_t v12 = a6;
    int64x2_t v15 = a2;
    int64_t v16 = 4 * a5 + 4;
    int v17 = operator new(v16);
    bzero(v17, 4 * a5 + 4);
    if (a5) {
      memcpy(v17, a4, 4 * a5);
    }
    if (a3 >= 1)
    {
      do
      {
        int v18 = *v15++;
        *((_DWORD *)v17 + a5) = v18;
        sub_19E414A74(v11, (uint64_t)v17, v16 >> 2, v12++);
        --a3;
      }
      while (a3);
    }
    operator delete(v17);
  }
  return v9 ^ 1u;
}

void sub_19E3C7F58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t LMLanguageModelEnumeratePredictionsWithBlock(uint64_t result, uint64_t a2, uint64_t a3)
{
  v4[15] = *MEMORY[0x1E4F143B8];
  if (result)
  {
    if ((a3 & 0x8000000000000000) == 0)
    {
      uint64_t v3 = *(void *)(result + 24);
      v4[0] = a2;
      v4[1] = a3;
      v4[2] = a2;
      v4[3] = a3;
      v4[4] = a2;
      v4[5] = a3;
      v4[6] = a2;
      v4[7] = a3;
      sub_19E414CD8(v3, v4);
    }
  }
  return result;
}

uint64_t LMLanguageModelCreatePredictionEnumerator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 && (a3 & 0x8000000000000000) == 0)
  {
    uint64_t v3 = *(void *)(a1 + 24);
    v5[0] = a2;
    v5[1] = a3;
    std::string v5[2] = a2;
    v5[3] = a3;
    v5[4] = a2;
    void v5[5] = a3;
    v5[6] = a2;
    v5[7] = a3;
    sub_19E414CD8(v3, v5);
  }
  return 0;
}

uint64_t LMPredictionEnumeratorAdvance(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(**(void **)(result + 24) + 16))();
  }
  return result;
}

uint64_t LMPredictionEnumeratorGetPrediction(uint64_t result, uint64_t a2, void *a3, void *a4)
{
  if (result)
  {
    int64x2_t v6 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    uint64_t v7 = 0;
    __int16 v8 = 0;
    char v9 = 1;
    long long v10 = xmmword_19E572FD0;
    int v11 = 0;
    long long v12 = xmmword_19E572FD0;
    int v18 = 0;
    unint64_t v13 = 0xFFEFFFFFFFFFFFFFLL;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    __int16 v17 = 0;
    double result = (*(uint64_t (**)(void, uint64_t, int64x2_t *))(**(void **)(result + 24) + 24))(*(void *)(result + 24), a2, &v6);
    if (a3) {
      *a3 = v6.i64[0];
    }
    if (a4) {
      *a4 = v16;
    }
  }
  return result;
}

void LMPredictionEnumeratorRelease(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t LMLanguageModelGetTokenIDForString(uint64_t a1, const __CFString *a2, uint64_t a3)
{
  if (a1 && a2) {
    return sub_19E3FE9C0(*(void **)(a1 + 24), a2, a3);
  }
  else {
    return 0;
  }
}

uint64_t LMLanguageModelGetTokenIDForUTF8String(uint64_t a1, void *__src, size_t __n, void *a4)
{
  uint64_t v4 = 0;
  if (a1 && __src && __n)
  {
    if (__n >= 0x7FFFFFFFFFFFFFF8) {
      sub_19E37C958();
    }
    __int16 v8 = *(void **)(a1 + 24);
    if (__n >= 0x17)
    {
      size_t v10 = (__n & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((__n | 7) != 0x17) {
        size_t v10 = __n | 7;
      }
      size_t v11 = v10 + 1;
      char v9 = (void **)operator new(v10 + 1);
      __dst[1] = (void *)__n;
      unint64_t v14 = v11 | 0x8000000000000000;
      __dst[0] = v9;
    }
    else
    {
      HIBYTE(v14) = __n;
      char v9 = __dst;
    }
    memcpy(v9, __src, __n);
    *((unsigned char *)v9 + __n) = 0;
    uint64_t v4 = sub_19E3FE284(v8, (uint64_t)__dst, a4);
    if (SHIBYTE(v14) < 0) {
      operator delete(__dst[0]);
    }
  }
  return v4;
}

void sub_19E3C83A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

CFStringRef LMLanguageModelCreateStringForTokenID(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  sub_19E3FDF08(*(void **)(a1 + 24), a2, (uint64_t)__p);
  unint64_t v2 = v7;
  if ((v7 & 0x80u) != 0) {
    unint64_t v2 = (unint64_t)__p[1];
  }
  if (v2)
  {
    if ((v7 & 0x80u) == 0) {
      uint64_t v3 = __p;
    }
    else {
      uint64_t v3 = (void **)__p[0];
    }
    CFStringRef v4 = CFStringCreateWithCString(0, (const char *)v3, 0x8000100u);
    if ((v7 & 0x80) != 0) {
      goto LABEL_12;
    }
  }
  else
  {
    CFStringRef v4 = 0;
    if ((v7 & 0x80) != 0) {
LABEL_12:
    }
      operator delete(__p[0]);
  }
  return v4;
}

void sub_19E3C845C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t LMLanguageModelAddTokenForString(uint64_t a1, const __CFString *a2, int *a3)
{
  if (a1 && a2) {
    return sub_19E415218(*(void *)(a1 + 24), a2, a3);
  }
  else {
    return 0;
  }
}

void LMLanguageModelRecordTokenUsageWithDifferentialPrivacy(uint64_t a1, const __CFString *a2)
{
  if (a1)
  {
    if (a2) {
      sub_19E4152D0(*(void **)(a1 + 24), a2);
    }
  }
}

void LMLanguageModelRecordRevisedTokenUsageWithDifferentialPrivacy(uint64_t a1, const __CFString *a2)
{
  if (a1)
  {
    if (a2) {
      sub_19E4154DC(*(void **)(a1 + 24), a2);
    }
  }
}

uint64_t LMLanguageModelRemoveTokenForString(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 24);
  if (!*(unsigned char *)(*(void *)(v2 + 232) + 192)) {
    return 0;
  }
  uint64_t v3 = *(void *)(v2 + 48);
  uint64_t v4 = *(void *)(v3 + 560);
  std::string::pointer v5 = *(std::__shared_weak_count **)(v3 + 568);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v4 + 16))(v4, a2, 0);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 136))(v4, v6);
  if (v7)
  {
    uint64_t v8 = *(void *)(*(void *)(v2 + 48) + 544);
    std::mutex::lock((std::mutex *)(v8 + 96));
    *(unsigned char *)(v8 + 24) = 1;
    std::mutex::unlock((std::mutex *)(v8 + 96));
  }
  if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return v7;
}

void sub_19E3C85E0(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t LMLanguageModelAddOrUpdateTokenWithAttributes(uint64_t a1)
{
  if (!a1) {
    return 3;
  }
  uint64_t v1 = *(void *)(a1 + 24);
  if (!*(unsigned char *)(*(void *)(v1 + 232) + 192)) {
    return 3;
  }
  uint64_t v2 = *(void *)(v1 + 48);
  uint64_t v3 = *(void *)(v2 + 560);
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 568);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 248))(v3);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  if (v5 <= 1)
  {
    uint64_t v6 = *(void *)(*(void *)(v1 + 48) + 544);
    std::mutex::lock((std::mutex *)(v6 + 96));
    *(unsigned char *)(v6 + 24) = 1;
    std::mutex::unlock((std::mutex *)(v6 + 96));
  }
  return v5;
}

void sub_19E3C8728(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t LMLanguageModelUpdateAttributesForToken(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = *(void *)(a1 + 24);
  if (!*(unsigned char *)(*(void *)(v1 + 232) + 192)) {
    return 0;
  }
  uint64_t v2 = *(void *)(v1 + 48);
  uint64_t v3 = *(void *)(v2 + 560);
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 568);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 256))(v3);
  int v6 = v5;
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (v6) {
      goto LABEL_8;
    }
    return 0;
  }
  if (!v5) {
    return 0;
  }
LABEL_8:
  uint64_t v7 = *(void *)(*(void *)(v1 + 48) + 544);
  std::mutex::lock((std::mutex *)(v7 + 96));
  uint64_t v8 = 1;
  *(unsigned char *)(v7 + 24) = 1;
  std::mutex::unlock((std::mutex *)(v7 + 96));
  return v8;
}

void sub_19E3C8878(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

__CFDictionary *LMLanguageModelCopyTokenAttributes(uint64_t a1, unsigned int a2)
{
  if (!a1) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 24);
  if ((a2 & 0x40000000) == 0)
  {
    if (*(unsigned char *)(*(void *)(v2 + 232) + 192))
    {
      uint64_t v3 = *(void *)(v2 + 48);
      uint64_t v4 = *(void *)(v3 + 560);
      int v5 = *(std::__shared_weak_count **)(v3 + 568);
      if (v5) {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Mutable = (__CFDictionary *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 264))(v4);
      if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      return Mutable;
    }
    return 0;
  }
  sub_19E3FF96C(v2 + 344, a2, (uint64_t *)&v26);
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v7 = v26;
  if (v26 != v27)
  {
    CFStringRef v8 = (const __CFString *)*MEMORY[0x1E4F1D260];
    do
    {
      char v9 = (const char *)(v7 + 4);
      if (*((char *)v7 + 55) < 0) {
        char v9 = *(const char **)v9;
      }
      CFStringRef v10 = CFStringCreateWithCString(0, v9, 0x8000100u);
      size_t v11 = (const char *)(v7 + 7);
      if (*((char *)v7 + 79) < 0) {
        size_t v11 = *(const char **)v11;
      }
      CFStringRef v12 = CFStringCreateWithCString(0, v11, 0x8000100u);
      if (CFStringGetLength(v12) <= 0) {
        CFStringRef v13 = v8;
      }
      else {
        CFStringRef v13 = v12;
      }
      CFDictionaryAddValue(Mutable, v10, v13);
      CFRelease(v10);
      CFRelease(v12);
      unint64_t v14 = v7[1];
      if (v14)
      {
        do
        {
          uint64_t v15 = (char **)v14;
          unint64_t v14 = *(char **)v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          uint64_t v15 = (char **)v7[2];
          BOOL v16 = *v15 == (char *)v7;
          uint64_t v7 = v15;
        }
        while (!v16);
      }
      uint64_t v7 = v15;
    }
    while (v15 != v27);
  }
  if (v29[1])
  {
    __int16 v17 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    int v18 = v28;
    if (v28 != v29)
    {
      do
      {
        long long v20 = (const char *)(v18 + 4);
        if (*((char *)v18 + 55) < 0) {
          long long v20 = *(const char **)v20;
        }
        CFStringRef v21 = CFStringCreateWithCString(0, v20, 0x8000100u);
        int64x2_t v22 = (const char *)(v18 + 7);
        if (*((char *)v18 + 79) < 0) {
          int64x2_t v22 = *(const char **)v22;
        }
        CFStringRef v23 = CFStringCreateWithCString(0, v22, 0x8000100u);
        CFDictionaryAddValue(v17, v21, v23);
        CFRelease(v21);
        CFRelease(v23);
        int64x2_t v24 = v18[1];
        if (v24)
        {
          do
          {
            uint64_t v25 = (char **)v24;
            int64x2_t v24 = *(char **)v24;
          }
          while (v24);
        }
        else
        {
          do
          {
            uint64_t v25 = (char **)v18[2];
            BOOL v16 = *v25 == (char *)v18;
            int v18 = v25;
          }
          while (!v16);
        }
        int v18 = v25;
      }
      while (v25 != v29);
    }
    CFDictionarySetValue(Mutable, (const void *)kLMAttributedTokenQualifiersKey, v17);
    CFRelease(v17);
  }
  sub_19E3C5DBC(v29[0]);
  sub_19E3C5DBC(v27[0]);
  return Mutable;
}

void sub_19E3C8BBC(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_19E3C8C0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char *a10, uint64_t a11, uint64_t a12, char *a13)
{
}

uint64_t LMLanguageModelGetIntegerAttributeValue(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = *(void *)(a1 + 24);
  if (!*(unsigned char *)(*(void *)(v1 + 232) + 192)) {
    return 0;
  }
  uint64_t v2 = *(void *)(v1 + 48);
  uint64_t v3 = *(void *)(v2 + 560);
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 568);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 272))(v3);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v5;
}

void sub_19E3C8CFC(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t LMLanguageModelCopyStringAttributeValue(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = *(void *)(a1 + 24);
  if (!*(unsigned char *)(*(void *)(v1 + 232) + 192)) {
    return 0;
  }
  uint64_t v2 = *(void *)(v1 + 48);
  uint64_t v3 = *(void *)(v2 + 560);
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 568);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 280))(v3);
  if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v5;
}

void sub_19E3C8E18(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

void LMLanguageModelEnumerateDynamicTokensWithBlock(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    uint64_t v3 = *(void *)(a1 + 24);
    if (*(unsigned char *)(*(void *)(v3 + 232) + 192))
    {
      uint64_t v4 = *(void *)(v3 + 48);
      uint64_t v5 = *(void *)(v4 + 560);
      int v6 = *(std::__shared_weak_count **)(v4 + 568);
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v5) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 88))(v5, a3);
      }
      if (v6 && !atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_19E3C8F3C(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    if (!atomic_fetch_add(&v1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

BOOL LMLanguageModelGetDynamicTokenIDRange(uint64_t a1, _DWORD *a2, unsigned int *a3)
{
  if (a1)
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 24) + 232);
    if (a2) {
      *a2 = *(_DWORD *)(v3 + 288);
    }
    if (a3) {
      *a3 = *(_DWORD *)(v3 + 292) | 0x80000000;
    }
  }
  return a1 != 0;
}

unint64_t LMLanguageModelTokenIDisUnknown(unint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v2 = *(void *)(*(void *)(result + 24) + 248);
    if (v2) {
      return sub_19E4A43D8(*(void *)(v2 + 16), a2);
    }
    else {
      return 1;
    }
  }
  return result;
}

uint64_t LMCreateMontrealIDsFromLMTokenIDSequence(uint64_t a1, uint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5)
{
  std::__fs::filesystem::path __p[3] = *(void **)MEMORY[0x1E4F143B8];
  if (a5)
  {
    sub_19E37774C(a3, __p);
    sub_19E488AFC((uint64_t)&v6, (uint64_t)__p);
  }
  return 0;
}

void sub_19E3C9194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (v17) {
    operator delete(v17);
  }
  (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  _Unwind_Resume(a1);
}

uint64_t LMLanguageModelEnumerateCompletionsForPrefixWithBlock(uint64_t result, uint64_t a2)
{
  if (result)
  {
    if (a2)
    {
      uint64_t v2 = *(void *)(result + 24);
      long long v6 = 0u;
      long long v7 = 0u;
      long long v4 = 0u;
      long long v5 = 0u;
      sub_19E3FD31C((int)&v3, *(void *)(v2 + 8), *(std::__shared_weak_count **)(v2 + 16));
    }
  }
  return result;
}

void sub_19E3C9400(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t LMLanguageModelTokenSequenceIsBlocklisted(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a1) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 24);
  long long v6 = *(void ***)(v5 + 184);
  unint64_t v7 = *(void *)(v5 + 192) - (void)v6;
  if (v7 >= 0x11) {
    __assert_rtn("LMLanguageModelTokenSequenceIsBlocklisted", "LMLanguageModel.cpp", 438, "compositeLanguageModel->getLocaleResources().size() <= 1 && \"LMLanguageModelTokenSequenceIsBlocklisted() is not supported for multilingual models\"");
  }
  if (v7 != 16) {
    return 0;
  }
  CFStringRef v8 = *v6;
  return sub_19E41566C(v5, a2, a3, a4, a5, 0, 1, v8);
}

BOOL LMLanguageModelAdaptationIsEnabled(BOOL result)
{
  if (result) {
    return *(unsigned char *)(*(void *)(*(void *)(result + 24) + 232) + 192) != 0;
  }
  return result;
}

uint64_t LMLanguageModelPreheatResources(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = *(void **)(result + 24);
    uint64_t v2 = (uint64_t *)v1[16];
    for (i = (uint64_t *)v1[17]; v2 != i; double result = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 32))(v4))
    {
      uint64_t v4 = *v2;
      v2 += 2;
    }
    uint64_t v5 = (uint64_t *)v1[19];
    for (j = (uint64_t *)v1[20]; v5 != j; double result = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 32))(v7))
      uint64_t v7 = *v5++;
    if (*(unsigned char *)(v1[29] + 360))
    {
      v8[0] = (uint64_t)&unk_19E573270;
      v8[1] = 1;
      std::string v8[2] = (uint64_t)&unk_19E573270;
      void v8[3] = 1;
      v8[4] = (uint64_t)&unk_19E573270;
      v8[5] = 1;
      v8[6] = (uint64_t)&unk_19E573270;
      v8[7] = 1;
      sub_19E414CD8((uint64_t)v1, v8);
    }
  }
  return result;
}

uint64_t LMLanguageModelPreheatContexts(uint64_t result)
{
  if (!result) {
    __assert_rtn("LMLanguageModelPreheatContexts", "LMLanguageModel.cpp", 500, "false && \"NULL language model reference\"");
  }
  return result;
}

void LMLanguageModelIncrementUsageCount(uint64_t a1, int a2, uint64_t a3, _DWORD *a4, unint64_t a5)
{
  if (a1) {
    sub_19E415A64(*(void **)(a1 + 24), a2, 0, a3, a4, a5);
  }
}

void LMLanguageModelIncrementUsageCountWithEffectiveTime(uint64_t a1, int a2, uint64_t a3, _DWORD *a4, unint64_t a5, double a6)
{
  double v6 = a6;
  if (a1) {
    sub_19E415A64(*(void **)(a1 + 24), a2, &v6, a3, a4, a5);
  }
}

void LMLanguageModelDecrementUsageCount(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if (a1) {
    sub_19E415CD0(*(void **)(a1 + 24), a2, a3, a4, a5);
  }
}

void LMLanguageModelRegisterNegativeEvidenceForToken(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1) {
    sub_19E415E94(*(void **)(a1 + 24), a3);
  }
}

float LMLanguageModelGetUsageCount(uint64_t a1, uint64_t a2, uint64_t a3, __n128 a4)
{
  a4.n128_u64[0] = 0;
  if (a1)
  {
    uint64_t v4 = *(void *)(*(void *)(a1 + 24) + 272);
    if (v4)
    {
      unsigned __int32 v8 = 0;
      uint64_t v5 = *(void *)(v4 + 24);
      if (*(unsigned char *)(v5 + 401)) {
        uint64_t v6 = 2;
      }
      else {
        uint64_t v6 = 1;
      }
      (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int32 *, void, __n128))(**(void **)(v4 + 8) + 104))(*(void *)(v4 + 8), a2, a3, v5 + 88, v6, &v8, 0, a4);
      a4.n128_u32[0] = v8;
    }
  }
  return a4.n128_f32[0];
}

double LMLanguageModelGetLastOfflineAdaptationTime(uint64_t a1)
{
  double v1 = 0.0;
  if (a1)
  {
    uint64_t v2 = *(void **)(a1 + 24);
    uint64_t v3 = v2[29];
    if (*(unsigned char *)(v3 + 192))
    {
      uint64_t v4 = v2[34];
      if (v4)
      {
        uint64_t v5 = *(void *)(v2[6] + 544);
        int v6 = (*(uint64_t (**)(void, uint64_t))(**(void **)(v4 + 8) + 72))(*(void *)(v4 + 8), v3 + 88);
        std::mutex::lock((std::mutex *)(v5 + 96));
        if (v6 == 2)
        {
          uint64_t v7 = (double *)(v5 + 80);
        }
        else
        {
          if (v6 != 1)
          {
LABEL_9:
            std::mutex::unlock((std::mutex *)(v5 + 96));
            return v1;
          }
          uint64_t v7 = (double *)(v5 + 72);
        }
        double v1 = *v7;
        goto LABEL_9;
      }
    }
  }
  return v1;
}

double LMLanguageModelGetLastFlushTime(uint64_t a1)
{
  double v1 = 0.0;
  if (a1)
  {
    uint64_t v2 = *(void *)(a1 + 24);
    if (*(unsigned char *)(*(void *)(v2 + 232) + 192))
    {
      uint64_t v3 = *(void *)(*(void *)(v2 + 48) + 544);
      std::mutex::lock((std::mutex *)(v3 + 96));
      double v1 = *(double *)(v3 + 88);
      std::mutex::unlock((std::mutex *)(v3 + 96));
    }
  }
  return v1;
}

BOOL LMLanguageModelShouldAdaptToParagraph(BOOL result, const __CFString *a2, CFIndex a3, CFIndex a4)
{
  if (result) {
    return sub_19E416150(*(uint64_t **)(result + 24), a2, a3, a4);
  }
  return result;
}

BOOL LMLanguageModelShouldAdaptToTokenSequence(BOOL result, unsigned int *a2, unint64_t a3)
{
  if (result) {
    return sub_19E416368(*(uint64_t **)(result + 24), a2, a3);
  }
  return result;
}

void LMLanguageModelFlushDynamicData(uint64_t a1, char a2)
{
  if (a1)
  {
    uint64_t v3 = *(void *)(a1 + 24);
    if (*(unsigned char *)(*(void *)(v3 + 232) + 192))
    {
      uint64_t v4 = *(void *)(v3 + 48);
      if (v4)
      {
        sub_19E42CFDC(v4);
        uint64_t v5 = *(std::recursive_mutex **)(v3 + 464);
        if (v5)
        {
          std::recursive_mutex::lock(*(std::recursive_mutex **)(v3 + 464));
          sub_19E42CFDC(v5[2].__m_.__sig);
          std::recursive_mutex::unlock(v5);
        }
      }
    }
    if (a2)
    {
      sub_19E4164AC((void *)v3);
    }
  }
}

void sub_19E3C990C(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void LMLanguageModelResetDynamicData(uint64_t a1, char a2)
{
  if (a1) {
    sub_19E4169B8(*(void *)(a1 + 24), a2);
  }
}

void LMLanguageModelAddConversationHistory(uint64_t a1, const __CFString *a2, _DWORD *a3, uint64_t a4)
{
  if (a1) {
    sub_19E416DB0(*(void **)(a1 + 24), a2, a3, a4);
  }
}

void LMLanguageModelResetConversationHistory(uint64_t a1)
{
  if (a1) {
    sub_19E416894(*(void **)(a1 + 24));
  }
}

uint64_t LMLanguageModelPerformMaintenance()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1EF0BD560;
  v4[1] = CFAbsoluteTimeGetCurrent();
  uint64_t v5 = v4;
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 0x40000000;
  v2[2] = sub_19E42CBBC;
  v2[3] = &unk_1E599F7B8;
  v2[4] = v4;
  uint64_t v0 = sub_19E42B418();
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = sub_19E42CC10;
  block[3] = &unk_1E599F898;
  block[4] = v2;
  dispatch_sync(v0, block);
  uint64_t result = (uint64_t)v5;
  if (v5 == v4) {
    return (*(uint64_t (**)(void *))(v4[0] + 32))(v4);
  }
  if (v5) {
    return (*(uint64_t (**)(void *))(*v5 + 40))(v5);
  }
  return result;
}

void *sub_19E3C9AC8()
{
  return &unk_1EF0B8038;
}

uint64_t sub_19E3C9AD4(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "Z50LMLanguageModelPerformMaintenanceWithEffectiveTimeE3$_0"
    || ((v3 & (unint64_t)"Z50LMLanguageModelPerformMaintenanceWithEffectiveTimeE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "Z50LMLanguageModelPerformMaintenanceWithEffectiveTimeE3$_0")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"Z50LMLanguageModelPerformMaintenanceWithEffectiveTimeE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void sub_19E3C9B2C(uint64_t a1, uint64_t a2)
{
  buf[3] = *MEMORY[0x1E4F143B8];
  double v3 = *(double *)(a1 + 8);
  if (qword_1EC009570 != -1) {
    dispatch_once(&qword_1EC009570, &unk_1EF0BEAF0);
  }
  os_signpost_id_t v4 = os_signpost_id_generate((os_log_t)qword_1EC009568);
  if (qword_1EC009570 != -1) {
    dispatch_once(&qword_1EC009570, &unk_1EF0BEAF0);
  }
  unint64_t v5 = v4 - 1;
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v6 = qword_1EC009568;
    if (os_signpost_enabled((os_log_t)qword_1EC009568))
    {
      LOWORD(__p[0]) = 0;
      _os_signpost_emit_with_name_impl(&dword_19E36B000, v6, OS_SIGNPOST_INTERVAL_BEGIN, v4, "PerformMaintenance", (const char *)&unk_19E5812E5, (uint8_t *)__p, 2u);
    }
  }
  if ((*(uint64_t (**)(void))(**(void **)(a2 + 640) + 144))(*(void *)(a2 + 640)))
  {
    std::mutex::lock((std::mutex *)(a2 + 664));
    (*(void (**)(void, void, double))(**(void **)(a2 + 560) + 176))(*(void *)(a2 + 560), *(void *)(a2 + 640), v3);
    std::mutex::unlock((std::mutex *)(a2 + 664));
    if ((*(unsigned int (**)(void))(**(void **)(a2 + 640) + 192))(*(void *)(a2 + 640)))
    {
      uint64_t v7 = *(void *)(a2 + 544);
      std::mutex::lock((std::mutex *)(v7 + 96));
      *(unsigned char *)(v7 + 24) = 1;
      std::mutex::unlock((std::mutex *)(v7 + 96));
    }
    sub_19E42CD2C((uint64_t *)a2, 0, v3);
    std::mutex::lock((std::mutex *)(a2 + 664));
    uint64_t v8 = *(void *)(a2 + 544);
    CFLocaleRef v9 = *(const __CFLocale **)(a2 + 32);
    CFStringRef v10 = (std::mutex *)(v8 + 96);
    std::mutex::lock((std::mutex *)(v8 + 96));
    CFStringRef Value = (const __CFString *)CFLocaleGetValue(v9, (CFLocaleKey)*MEMORY[0x1E4F1D218]);
    if (!*(unsigned char *)(v8 + 25))
    {
      CFStringRef v12 = Value;
      if (Value)
      {
        if (CFStringCompare(Value, @"ja", 0))
        {
          CFComparisonResult v13 = CFStringCompare(v12, @"zh", 0);
          std::mutex::unlock((std::mutex *)(v8 + 96));
          if (v13 == kCFCompareEqualTo)
          {
LABEL_17:
            std::mutex::unlock((std::mutex *)(a2 + 664));
            uint64_t v16 = *(unsigned int *)(a2 + 360);
            std::mutex::lock((std::mutex *)(a2 + 664));
            int v17 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 640) + 152))(*(void *)(a2 + 640), v16);
            if (v17)
            {
              uint64_t v18 = *(void *)(a2 + 544);
              std::mutex::lock((std::mutex *)(v18 + 96));
              *(CFAbsoluteTime *)(v18 + 64) = CFAbsoluteTimeGetCurrent();
              *(unsigned char *)(v18 + 24) = 1;
              std::mutex::unlock((std::mutex *)(v18 + 96));
              (*(void (**)(void, void, uint64_t))(**(void **)(a2 + 560) + 152))(*(void *)(a2 + 560), *(void *)(a2 + 640), a2 + 40);
            }
            std::mutex::unlock((std::mutex *)(a2 + 664));
            sub_19E42CFDC(a2);
            int v19 = (void **)MEMORY[0x1E4F1CFD0];
            if (!v17) {
              int v19 = (void **)MEMORY[0x1E4F1CFC8];
            }
            __p[0] = *v19;
            CFDictionaryRef v20 = CFDictionaryCreate(0, (const void **)&kLMLanguageModelDidPerformPruningKey, (const void **)__p, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
            buf[0] = v20;
            CFNotificationCenterPostNotification(*(CFNotificationCenterRef *)(a2 + 656), @"MaintenanceNotification", (const void *)a2, v20, 0);
            if (v20) {
              CFRelease(v20);
            }
            goto LABEL_28;
          }
          (*(void (**)(void))(**(void **)(a2 + 640) + 184))(*(void *)(a2 + 640));
          uint64_t v14 = *(void *)(a2 + 544);
          std::mutex::lock((std::mutex *)(v14 + 96));
          *(void *)(v14 + 72) = 0;
          *(unsigned char *)(v14 + 25) = 1;
          std::mutex::unlock((std::mutex *)(v14 + 96));
          uint64_t v15 = *(void *)(a2 + 544);
          CFStringRef v10 = (std::mutex *)(v15 + 96);
          std::mutex::lock((std::mutex *)(v15 + 96));
          *(unsigned char *)(v15 + 24) = 1;
        }
      }
    }
    std::mutex::unlock(v10);
    goto LABEL_17;
  }
  if (qword_1E9459FA8 != -1) {
    dispatch_once(&qword_1E9459FA8, &unk_1EF0B5D60);
  }
  CFStringRef v21 = qword_1E9459FA0;
  if (os_log_type_enabled((os_log_t)qword_1E9459FA0, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p[0]) = 0;
    _os_log_impl(&dword_19E36B000, v21, OS_LOG_TYPE_DEFAULT, "resetting dynamic data due to validation failure", (uint8_t *)__p, 2u);
  }
  sub_19E42C57C(a2);
LABEL_28:
  if (qword_1EC009570 == -1)
  {
    if (v5 > 0xFFFFFFFFFFFFFFFDLL) {
      return;
    }
  }
  else
  {
    dispatch_once(&qword_1EC009570, &unk_1EF0BEAF0);
    if (v5 > 0xFFFFFFFFFFFFFFFDLL) {
      return;
    }
  }
  int64x2_t v22 = qword_1EC009568;
  if (os_signpost_enabled((os_log_t)qword_1EC009568))
  {
    CFStringRef v23 = (const __CFString *)MEMORY[0x19F3BCDE0](*(void *)(a2 + 32));
    sub_19E37774C(v23, __p);
    if (v26 >= 0) {
      int64x2_t v24 = __p;
    }
    else {
      int64x2_t v24 = (void **)__p[0];
    }
    LODWORD(buf[0]) = 136315138;
    *(void *)((char *)buf + 4) = v24;
    _os_signpost_emit_with_name_impl(&dword_19E36B000, v22, OS_SIGNPOST_INTERVAL_END, v4, "PerformMaintenance", "locale=%s", (uint8_t *)buf, 0xCu);
    if (v26 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_19E3CA060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  std::mutex::unlock(v14);
  std::mutex::unlock(v13);
  _Unwind_Resume(a1);
}

uint64_t sub_19E3CA0D4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF0BD560;
  a2[1] = v2;
  return result;
}

void *sub_19E3CA0F8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF0BD560;
  result[1] = v3;
  return result;
}

void sub_19E3CA140()
{
}

uint64_t LMLanguageModelPerformMaintenanceWithEffectiveTime(double a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v5[0] = &unk_1EF0BD560;
  *(double *)&v5[1] = a1;
  uint64_t v6 = v5;
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  v3[2] = sub_19E42CBBC;
  v3[3] = &unk_1E599F7B8;
  v3[4] = v5;
  double v1 = sub_19E42B418();
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = sub_19E42CC10;
  block[3] = &unk_1E599F898;
  block[4] = v3;
  dispatch_sync(v1, block);
  uint64_t result = (uint64_t)v6;
  if (v6 == v5) {
    return (*(uint64_t (**)(void *))(v5[0] + 32))(v5);
  }
  if (v6) {
    return (*(uint64_t (**)(void *))(*v6 + 40))(v6);
  }
  return result;
}

void LMLanguageModelAddObserver(uint64_t a1, const void *a2, void (__cdecl *a3)(CFNotificationCenterRef, void *, CFNotificationName, const void *, CFDictionaryRef))
{
  if (a1)
  {
    uint64_t v3 = *(void *)(a1 + 24);
    if (*(unsigned char *)(*(void *)(v3 + 232) + 192)) {
      CFNotificationCenterAddObserver(*(CFNotificationCenterRef *)(*(void *)(v3 + 48) + 656), a2, a3, @"MaintenanceNotification", *(const void **)(v3 + 48), CFNotificationSuspensionBehaviorHold);
    }
  }
}

void LMLanguageModelRemoveObserver(uint64_t a1, const void *a2)
{
  if (a1)
  {
    uint64_t v2 = *(void *)(a1 + 24);
    if (*(unsigned char *)(*(void *)(v2 + 232) + 192)) {
      CFNotificationCenterRemoveObserver(*(CFNotificationCenterRef *)(*(void *)(v2 + 48) + 656), a2, @"MaintenanceNotification", *(const void **)(v2 + 48));
    }
  }
}

void LMLanguageModelRemoveModelBundlesInDirectory()
{
}

void sub_19E3CA650(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a26 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a36 & 0x80000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if ((a26 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a21);
  if ((a36 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a42 & 0x80000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  operator delete(a31);
  if ((a42 & 0x80000000) == 0) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_9:
  operator delete(a37);
  _Unwind_Resume(exception_object);
}

uint64_t LMLanguageModelTokenHasAttributes(uint64_t a1, unsigned int a2)
{
  return (a2 >> 30) & 1;
}

void LMLanguageModelAddTransientVocabulary(uint64_t a1, uint64_t *cf)
{
  if (a1 && cf)
  {
    uint64_t v3 = *(void **)(a1 + 24);
    CFRetain(cf);
    uint64_t v4 = cf[3];
    sub_19E417004(v3, v4);
  }
}

void LMLanguageModelRemoveTransientVocabulary(uint64_t a1, void *cf)
{
  if (a1 && cf)
  {
    uint64_t v3 = *(void **)(a1 + 24);
    uint64_t v4 = cf[3];
    uint64_t v6 = (char *)v3[3];
    unint64_t v5 = (char *)v3[4];
    if (v6 != v5)
    {
      while (*(void *)v6 != v4)
      {
        v6 += 8;
        if (v6 == v5)
        {
          uint64_t v6 = (char *)v3[4];
          break;
        }
      }
    }
    if (v6 != v5)
    {
      int64_t v7 = v5 - (v6 + 8);
      if (v5 != v6 + 8) {
        memmove(v6, v6 + 8, v5 - (v6 + 8));
      }
      v3[4] = &v6[v7];
      uint64_t v8 = v3[31];
      if (v8) {
        (*(void (**)(void, uint64_t))(**(void **)(*(void *)(v8 + 16) + 16) + 104))(*(void *)(*(void *)(v8 + 16) + 16), v4);
      }
    }
    CFRelease(cf);
  }
}

void LMLanguageModelSetLexicon(uint64_t a1, const void *a2, unint64_t a3)
{
  if (a1)
  {
    if (a2) {
      sub_19E4171F0(*(void **)(a1 + 24), a2, a3);
    }
  }
}

void LMLanguageModelRemoveLexicon(uint64_t a1, unint64_t a2)
{
  if (a1) {
    sub_19E4177F0(*(void **)(a1 + 24), a2);
  }
}

uint64_t LMLanguageModelReset(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = *(void *)(*(void *)(result + 24) + 248);
    if (v1) {
      return (*(uint64_t (**)(void))(**(void **)(*(void *)(v1 + 16) + 16) + 72))();
    }
  }
  return result;
}

CFTypeRef LMLanguageModelRetain(CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  return cf;
}

uint64_t LMPredictionEnumeratorGetPredictionWithFlags(uint64_t result, uint64_t a2, void *a3, void *a4, _DWORD *a5)
{
  if (result)
  {
    int64x2_t v8 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
    uint64_t v9 = 0;
    __int16 v10 = 0;
    char v11 = 1;
    long long v12 = xmmword_19E572FD0;
    int v13 = 0;
    long long v14 = xmmword_19E572FD0;
    int v20 = 0;
    unint64_t v15 = 0xFFEFFFFFFFFFFFFFLL;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    __int16 v19 = 0;
    uint64_t result = (*(uint64_t (**)(void, uint64_t, int64x2_t *))(**(void **)(result + 24) + 24))(*(void *)(result + 24), a2, &v8);
    if (a3) {
      *a3 = v8.i64[0];
    }
    if (a4) {
      *a4 = v18;
    }
    if (a5) {
      *a5 |= v19 | (2 * HIBYTE(v19));
    }
  }
  return result;
}

double LMStreamTokenizerPopBytes(uint64_t a1, unint64_t a2, size_t __sz)
{
  if (!a1 || !a2) {
    return *(double *)&v18;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  if (HIDWORD(a2)
    || (unint64_t v5 = *(const uint8_t **)(v4 + 176), v6 = *(void *)(v4 + 184) - (void)v5, v7 = v6 - a2, v6 < a2))
  {
    int v7 = 0;
    *(_DWORD *)(v4 + 312) = 0;
  }
  else
  {
    *(_DWORD *)(v4 + 312) = v7;
    unsigned int v20 = v7 - 1;
    if (v7 >= 1 && (char)v5[v7] <= -65)
    {
      *(_DWORD *)(v4 + 312) = v20;
      if ((char)v5[v20] <= -65) {
        *(_DWORD *)(v4 + 312) = utf8_back1SafeBody(v5, 0, v20);
      }
    }
  }
  unint64_t v8 = v7;
  __int16 v10 = *(char **)(v4 + 176);
  uint64_t v9 = *(char **)(v4 + 184);
  unint64_t v11 = v9 - v10;
  if (v8 > v9 - v10)
  {
    uint64_t v12 = *(void *)(v4 + 192);
    if (v12 - (uint64_t)v9 >= v8 - (v9 - v10))
    {
      bzero(*(void **)(v4 + 184), v8 - (v9 - v10));
      *(void *)(v4 + 184) = &v10[v8];
      goto LABEL_40;
    }
    size_t v72 = __sz;
    if ((v8 & 0x80000000) != 0) {
      sub_19E37C7C4();
    }
    unint64_t v13 = v12 - (void)v10;
    uint64_t v14 = 2 * v13;
    if (2 * v13 <= v8) {
      uint64_t v14 = v8;
    }
    if (v13 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v15 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v15 = v14;
    }
    uint64_t v16 = (char *)operator new(v15);
    uint64_t v17 = &v16[v11];
    bzero(&v16[v11], v8 - (v9 - v10));
    if (v9 == v10) {
      goto LABEL_38;
    }
    if (v11 < 8 || (unint64_t)(v10 - v16) < 0x20) {
      goto LABEL_35;
    }
    if (v11 >= 0x20)
    {
      unint64_t v19 = v11 & 0xFFFFFFFFFFFFFFE0;
      CFStringRef v21 = v9 - 16;
      int64x2_t v22 = &v16[v9 - 16 - v10];
      unint64_t v23 = v11 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v18 = *(_OWORD *)v21;
        *((_OWORD *)v22 - 1) = *((_OWORD *)v21 - 1);
        *(_OWORD *)int64x2_t v22 = v18;
        v22 -= 32;
        v21 -= 32;
        v23 -= 32;
      }
      while (v23);
      if (v11 == v19) {
        goto LABEL_37;
      }
      if ((v11 & 0x18) == 0)
      {
        v17 -= v19;
        v9 -= v19;
        goto LABEL_35;
      }
    }
    else
    {
      unint64_t v19 = 0;
    }
    unint64_t v24 = v19 - (v11 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v25 = &v9[-v19 - 8];
    char v26 = (char *)(v25 - v10);
    do
    {
      uint64_t v27 = *(void *)v25;
      v25 -= 8;
      *(void *)&long long v18 = v27;
      *(void *)&v26[(void)v16] = v27;
      v26 -= 8;
      v24 += 8;
    }
    while (v24);
    if (v11 == (v11 & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_37;
    }
    v17 -= v11 & 0xFFFFFFFFFFFFFFF8;
    v9 -= v11 & 0xFFFFFFFFFFFFFFF8;
LABEL_35:
    long long v28 = v17 - 1;
    do
    {
      char v29 = *--v9;
      *v28-- = v29;
    }
    while (v9 != v10);
LABEL_37:
    uint64_t v9 = v10;
    uint64_t v17 = v16;
LABEL_38:
    *(void *)(v4 + 176) = v17;
    *(void *)(v4 + 184) = &v16[v8];
    *(void *)(v4 + 192) = &v16[v15];
    __sz = v72;
    if (v9) {
      operator delete(v9);
    }
    goto LABEL_40;
  }
  if (v8 < v9 - v10) {
    *(void *)(v4 + 184) = &v10[v8];
  }
LABEL_40:
  long long v30 = *(unsigned char **)(v4 + 256);
  unint64_t v31 = *(unsigned char **)(v4 + 264);
  unint64_t v32 = (v31 - v30) >> 2;
  unint64_t v33 = v8 - v32;
  if (v8 > v32)
  {
    uint64_t v34 = *(void *)(v4 + 272);
    if (v33 > (v34 - (uint64_t)v31) >> 2)
    {
      if ((v8 & 0x80000000) != 0) {
        sub_19E37C7C4();
      }
      size_t v73 = __sz;
      uint64_t v35 = v34 - (void)v30;
      uint64_t v36 = v35 >> 1;
      if (v35 >> 1 <= v8) {
        uint64_t v36 = v8;
      }
      BOOL v37 = (unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL;
      unint64_t v38 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v37) {
        unint64_t v38 = v36;
      }
      if (v38 >> 62) {
        sub_19E37C2B8();
      }
      uint64_t v39 = 4 * v38;
      uint64_t v40 = operator new(4 * v38);
      uint64_t v41 = &v40[4 * v32];
      int v42 = &v40[v39];
      bzero(v41, 4 * v33);
      int v43 = &v41[4 * v33];
      if (v31 == v30)
      {
        __sz = v73;
      }
      else
      {
        unint64_t v44 = v31 - v30 - 4;
        __sz = v73;
        if (v44 < 0x2C) {
          goto LABEL_103;
        }
        if ((unint64_t)(v30 - v40) < 0x20) {
          goto LABEL_103;
        }
        uint64_t v45 = (v44 >> 2) + 1;
        unint64_t v46 = &v40[4 * v32 - 16];
        uint64_t v47 = (long long *)(v31 - 16);
        uint64_t v48 = v45 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v18 = *v47;
          *(v46 - 1) = *(v47 - 1);
          *unint64_t v46 = v18;
          v46 -= 2;
          v47 -= 2;
          v48 -= 8;
        }
        while (v48);
        v41 -= 4 * (v45 & 0x7FFFFFFFFFFFFFF8);
        v31 -= 4 * (v45 & 0x7FFFFFFFFFFFFFF8);
        if (v45 != (v45 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_103:
          do
          {
            int v49 = *((_DWORD *)v31 - 1);
            v31 -= 4;
            *((_DWORD *)v41 - 1) = v49;
            v41 -= 4;
          }
          while (v31 != v30);
        }
      }
      *(void *)(v4 + 256) = v41;
      *(void *)(v4 + 264) = v43;
      *(void *)(v4 + 272) = v42;
      if (v30) {
        operator delete(v30);
      }
      goto LABEL_63;
    }
    bzero(*(void **)(v4 + 264), 4 * v33);
    unsigned int v50 = &v31[4 * v33];
    goto LABEL_59;
  }
  if (v8 < v32)
  {
    unsigned int v50 = &v30[4 * v8];
LABEL_59:
    *(void *)(v4 + 264) = v50;
  }
LABEL_63:
  uint64_t v51 = *(long long **)(v4 + 200);
  int v52 = *(long long **)(v4 + 208);
  uint64_t v53 = *(int *)(v4 + 312);
  int v54 = v51;
  if (v52 != v51)
  {
    int v55 = v52 - 2;
    while (*((void *)v55 + 2) + *((void *)v55 + 1) >= v53)
    {
      long long v18 = *v55;
      long long v56 = v55[1];
      *(_OWORD *)(v4 + 28sub_19E392864(&a9, 0) = *v55;
      *(_OWORD *)(v4 + 296) = v56;
      *(void *)(v4 + 208) = v55;
      BOOL v57 = v55 == v51;
      v55 -= 2;
      if (v57)
      {
        int v54 = v51;
        goto LABEL_70;
      }
    }
    int v54 = v55 + 2;
  }
LABEL_70:
  uint64_t v58 = *(void *)(v4 + 288);
  if (v58 > v53)
  {
    *(_DWORD *)(v4 + 28sub_19E392864(&a9, 0) = 0;
    *(void *)&long long v18 = -1;
    *(_OWORD *)(v4 + 288) = xmmword_19E572FE0;
    uint64_t v58 = -1;
    *(void *)(v4 + 304) = -1;
  }
  uint64_t v59 = *(void *)(v4 + 224);
  uint64_t v60 = *(void *)(v4 + 232);
  if (v60 != v59)
  {
    uint64_t v61 = 0;
    uint64_t v62 = v60 - v59 - 32;
    do
    {
      if (*(void *)(v60 - 8) <= v53)
      {
        uint64_t v63 = *(void *)(v60 - 24);
        uint64_t v64 = *(void *)(v4 + 296) + v58;
        uint64_t v65 = *(void *)(v60 - 16) + v63;
        BOOL v66 = v63 < v58 || v64 <= v63;
        BOOL v67 = v66 || v65 <= v58;
        if (v67 || v65 > v64) {
          break;
        }
      }
      v60 -= 32;
      *(void *)(v4 + 232) = v60;
      uint64_t v69 = *(void *)(v4 + 248);
      if (v69 >= v62 >> 5)
      {
        *(void *)(v4 + 248) = v69 - 1;
        ++v61;
      }
      v62 -= 32;
    }
    while (v60 != v59);
    if (v61 >= 1)
    {
      (*(void (**)(size_t))(__sz + 16))(__sz);
      uint64_t v51 = *(long long **)(v4 + 200);
      int v54 = *(long long **)(v4 + 208);
    }
  }
  if (v51 == v54 || !*(void *)(v4 + 296))
  {
    *(_DWORD *)(v4 + 28sub_19E392864(&a9, 0) = 0;
    *(void *)&long long v18 = -1;
    *(_OWORD *)(v4 + 288) = xmmword_19E572FE0;
    *(void *)(v4 + 304) = -1;
  }
  else
  {
    uint64_t v70 = *(void *)(v4 + 288);
    if (v70 != -1) {
      *(void *)(v4 + 296) = *(int *)(v4 + 312) - v70;
    }
  }
  return *(double *)&v18;
}

double LMStreamTokenizerReset(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = *(void *)(a1 + 24);
    *(void *)(v1 + 184) = *(void *)(v1 + 176);
    *(void *)(v1 + 208) = *(void *)(v1 + 200);
    *(void *)(v1 + 232) = *(void *)(v1 + 224);
    *(void *)(v1 + 264) = *(void *)(v1 + 256);
    *(_DWORD *)(v1 + 28sub_19E392864(&a9, 0) = 0;
    double result = NAN;
    *(_OWORD *)(v1 + 288) = xmmword_19E572FE0;
    *(void *)(v1 + 304) = -1;
    *(_DWORD *)(v1 + 312) = 0;
    *(void *)(v1 + 248) = -1;
  }
  return result;
}

uint64_t LMLanguageModelGetOrder(uint64_t a1)
{
  if (!a1) {
    return -1;
  }
  uint64_t v1 = *(void **)(a1 + 24);
  uint64_t v3 = (char *)v1[16];
  uint64_t v2 = (char *)v1[17];
  if (v3 == v2)
  {
    unint64_t v8 = (char *)v1[19];
    int v7 = (char *)v1[20];
    if (v8 != v7)
    {
      unint64_t v9 = v7 - v8 - 8;
      if (v9 >= 8)
      {
        uint64_t v22 = (v9 >> 3) + 1;
        __int16 v10 = &v8[8 * (v22 & 0x3FFFFFFFFFFFFFFELL)];
        unint64_t v23 = v8 + 8;
        uint64_t v24 = -1;
        uint64_t v25 = v22 & 0x3FFFFFFFFFFFFFFELL;
        uint64_t v26 = -1;
        do
        {
          if (*(void *)(*(v23 - 1) + 16) > v24) {
            uint64_t v24 = *(void *)(*(v23 - 1) + 16);
          }
          if (*(void *)(*v23 + 16) > v26) {
            uint64_t v26 = *(void *)(*v23 + 16);
          }
          v23 += 2;
          v25 -= 2;
        }
        while (v25);
        if (v24 <= v26) {
          uint64_t result = v26;
        }
        else {
          uint64_t result = v24;
        }
        if (v22 == (v22 & 0x3FFFFFFFFFFFFFFELL)) {
          return result;
        }
      }
      else
      {
        uint64_t result = -1;
        __int16 v10 = v8;
      }
      do
      {
        uint64_t v27 = *(void *)v10;
        v10 += 8;
        uint64_t v28 = *(void *)(v27 + 16);
        if (v28 > result) {
          uint64_t result = v28;
        }
      }
      while (v10 != v7);
      return result;
    }
    return -1;
  }
  unint64_t v4 = v2 - v3 - 16;
  if (v4 < 0x10)
  {
    uint64_t result = -1;
    unint64_t v6 = v3;
    do
    {
LABEL_19:
      uint64_t v20 = *(void *)v6;
      v6 += 16;
      uint64_t v21 = *(void *)(v20 + 16);
      if (v21 > result) {
        uint64_t result = v21;
      }
    }
    while (v6 != v2);
    return result;
  }
  uint64_t v11 = (v4 >> 4) + 1;
  unint64_t v6 = &v3[16 * (v11 & 0x1FFFFFFFFFFFFFFELL)];
  uint64_t v12 = (uint64_t *)(v3 + 16);
  uint64_t v13 = -1;
  uint64_t v14 = v11 & 0x1FFFFFFFFFFFFFFELL;
  uint64_t v15 = -1;
  do
  {
    uint64_t v16 = *(v12 - 2);
    uint64_t v17 = *v12;
    v12 += 4;
    uint64_t v18 = *(void *)(v16 + 16);
    uint64_t v19 = *(void *)(v17 + 16);
    if (v18 > v13) {
      uint64_t v13 = v18;
    }
    if (v19 > v15) {
      uint64_t v15 = v19;
    }
    v14 -= 2;
  }
  while (v14);
  if (v13 <= v15) {
    uint64_t result = v15;
  }
  else {
    uint64_t result = v13;
  }
  if (v11 != (v11 & 0x1FFFFFFFFFFFFFFELL)) {
    goto LABEL_19;
  }
  return result;
}

void LMLanguageModelSetLogLevel(int a1)
{
  if (qword_1EC009490 != -1) {
    dispatch_once(&qword_1EC009490, &unk_1EF0BEE38);
  }
  *(_DWORD *)(qword_1EC009488 + 8) = a1;
}

uint64_t LMLanguageModelGetLogLevel()
{
  if (qword_1EC009490 != -1) {
    dispatch_once(&qword_1EC009490, &unk_1EF0BEE38);
  }
  return *(unsigned int *)(qword_1EC009488 + 8);
}

uint64_t LMLanguageModelDumpDynamicData(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    uint64_t v3 = *(void *)(result + 24);
    if (*(unsigned char *)(*(void *)(v3 + 232) + 192))
    {
      if (a3) {
        operator new();
      }
      uint64_t v4 = *(void *)(v3 + 48);
      v5[0] = MEMORY[0x1E4F143A8];
      v5[1] = 0x40000000;
      std::string v5[2] = sub_19E416CE0;
      void v5[3] = &unk_1E599F3E0;
      v5[4] = v3;
      void v5[5] = 0;
      std::mutex::lock((std::mutex *)(v4 + 664));
      sub_19E3C2CE4();
    }
  }
  return result;
}

void sub_19E3CC1A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _Unwind_Exception *exception_objecta, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  __cxa_end_catch();
  a63 = *MEMORY[0x1E4FBA408];
  uint64_t v72 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(uint64_t *)((char *)&a63 + *(void *)(a63 - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  a65 = v72;
  a66 = MEMORY[0x1E4FBA470] + 16;
  if (SLOBYTE(STACK[0x207]) < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x19F3BDC30](&STACK[0x218]);
  if (SLOBYTE(STACK[0x2CF]) < 0) {
    operator delete((void *)STACK[0x2B8]);
  }
  if (SLOBYTE(STACK[0x2E7]) < 0) {
    operator delete((void *)STACK[0x2D0]);
  }
  uint64_t v73 = MEMORY[0x1E4FBA3F8];
  uint64_t v74 = *MEMORY[0x1E4FBA3F8];
  STACK[0x2E8] = *MEMORY[0x1E4FBA3F8];
  *(unint64_t *)((char *)&STACK[0x2E8] + *(void *)(v74 - 24)) = *(void *)(v73 + 24);
  MEMORY[0x19F3BD8C0](&STACK[0x2F8]);
  std::istream::~istream();
  MEMORY[0x19F3BDC30](&STACK[0x490]);
  *(void *)a16 = &unk_1EF0B9A68;
  sub_19E418A38(*(char **)(a16 + 56));
  sub_19E3CD3E0(*(char **)(a16 + 32));
  if (a24 < 0) {
    operator delete(a19);
  }
  MEMORY[0x19F3BDCF0](a16, 0x10A1C4020241834);
  _Unwind_Resume(a1);
}

void sub_19E3CC1B0(void *a1, int a2)
{
  if (a2) {
    sub_19E37B770(a1);
  }
  JUMPOUT(0x19E3CC344);
}

void sub_19E3CC310()
{
}

void sub_19E3CC318()
{
}

void sub_19E3CC320(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,...)
{
  va_start(va, a35);
  if (v35 < 0) {
    operator delete(__p);
  }
  a17 = *MEMORY[0x1E4FBA408];
  uint64_t v36 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  a19 = v36;
  a20 = MEMORY[0x1E4FBA470] + 16;
  if (a33 < 0) {
    operator delete(a28);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x19F3BDC30]((uint64_t *)va);
  JUMPOUT(0x19E3CC524);
}

void sub_19E3CC338()
{
}

void sub_19E3CC34C()
{
}

void sub_19E3CC364()
{
}

void sub_19E3CC3F0()
{
}

void sub_19E3CC510(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::locale a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::locale::~locale(&a25);
  a60 = *MEMORY[0x1E4FBA408];
  uint64_t v71 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(uint64_t *)((char *)&a60 + *(void *)(a60 - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  a62 = v71;
  a63 = MEMORY[0x1E4FBA470] + 16;
  if (SLOBYTE(STACK[0x207]) < 0) {
    operator delete(a71);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x19F3BDC30](&STACK[0x218]);
  if (SLOBYTE(STACK[0x2CF]) < 0) {
    operator delete((void *)STACK[0x2B8]);
  }
  if (SLOBYTE(STACK[0x2E7]) < 0) {
    operator delete((void *)STACK[0x2D0]);
  }
  uint64_t v72 = MEMORY[0x1E4FBA3F8];
  uint64_t v73 = *MEMORY[0x1E4FBA3F8];
  STACK[0x2E8] = *MEMORY[0x1E4FBA3F8];
  *(unint64_t *)((char *)&STACK[0x2E8] + *(void *)(v73 - 24)) = *(void *)(v72 + 24);
  MEMORY[0x19F3BD8C0](&STACK[0x2F8]);
  std::istream::~istream();
  MEMORY[0x19F3BDC30](&STACK[0x490]);
  *(void *)a16 = &unk_1EF0B9A68;
  sub_19E418A38(*(char **)(a16 + 56));
  sub_19E3CD3E0(*(char **)(a16 + 32));
  if (SHIBYTE(a21) < 0) {
    operator delete(a19);
  }
  MEMORY[0x19F3BDCF0](a16, 0x10A1C4020241834);
  _Unwind_Resume(a1);
}

uint64_t LMLanguageModelCountDynamicNgrams(uint64_t result, uint64_t a2, _DWORD *a3, _DWORD *a4, __n128 a5)
{
  if (result)
  {
    float v7 = a5.n128_f32[0];
    uint64_t v9 = *(void *)(result + 24);
    if (a3)
    {
      uint64_t v10 = *(void *)(v9 + 272);
      if (v10)
      {
        uint64_t result = (*(uint64_t (**)(void, uint64_t, __n128))(**(void **)(v10 + 8) + 96))(*(void *)(v10 + 8), a2, a5);
        *a3 = result;
      }
    }
    if (a4)
    {
      uint64_t v11 = *(void *)(v9 + 264);
      if (v11)
      {
        uint64_t result = (*(uint64_t (**)(void, uint64_t, float))(**(void **)(v11 + 8) + 96))(*(void *)(v11 + 8), a2, v7);
        *a4 = result;
      }
    }
  }
  return result;
}

void LMLanguageModelApplyExponentialDecay(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = *(void *)(a1 + 24);
    if (*(unsigned char *)(*(void *)(v1 + 232) + 192))
    {
      uint64_t v2 = *(uint64_t **)(v1 + 48);
      double Current = CFAbsoluteTimeGetCurrent();
      sub_19E42CD2C(v2, 1, Current);
    }
  }
}

uint64_t LMLanguageModelGetDynamicDataSize(uint64_t a1)
{
  if (a1 && (uint64_t v1 = *(void *)(a1 + 24), *(unsigned char *)(*(void *)(v1 + 232) + 192))) {
    return (*(uint64_t (**)(void))(**(void **)(*(void *)(v1 + 48) + 640) + 40))();
  }
  else {
    return 0;
  }
}

void LMLanguageModelPrune(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v2 = *(void *)(a1 + 24);
    if (*(unsigned char *)(*(void *)(v2 + 232) + 192))
    {
      uint64_t v4 = *(void *)(v2 + 48);
      std::mutex::lock((std::mutex *)(v4 + 664));
      if ((*(uint64_t (**)(void, uint64_t))(**(void **)(v4 + 640) + 152))(*(void *)(v4 + 640), a2))
      {
        uint64_t v5 = *(void *)(v4 + 544);
        std::mutex::lock((std::mutex *)(v5 + 96));
        *(CFAbsoluteTime *)(v5 + 64) = CFAbsoluteTimeGetCurrent();
        *(unsigned char *)(v5 + 24) = 1;
        std::mutex::unlock((std::mutex *)(v5 + 96));
        (*(void (**)(void, void, uint64_t))(**(void **)(v4 + 560) + 152))(*(void *)(v4 + 560), *(void *)(v4 + 640), v4 + 40);
      }
      std::mutex::unlock((std::mutex *)(v4 + 664));
    }
  }
}

void sub_19E3CC9C4(_Unwind_Exception *a1)
{
  std::mutex::unlock(v2);
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t LMLanguageModelConvertToInternalTokenIDs(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = *(void *)(a1 + 24);
  uint64_t v2 = *(void *)(v1 + 128);
  uint64_t v3 = *(void *)(v1 + 136);
  if (v2 == v3) {
    return 0;
  }
  while (*(_DWORD *)(*(void *)v2 + 48) != 12)
  {
    v2 += 16;
    if (v2 == v3) {
      return 0;
    }
  }
  return (*(uint64_t (**)(void))(*(void *)(*(void *)v2 + 304) + 24))();
}

uint64_t LMLanguageModelConvertToExternalTokenIDs(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = *(void *)(a1 + 24);
  uint64_t v2 = *(void *)(v1 + 128);
  uint64_t v3 = *(void *)(v1 + 136);
  if (v2 == v3) {
    return 0;
  }
  while (*(_DWORD *)(*(void *)v2 + 48) != 12)
  {
    v2 += 16;
    if (v2 == v3) {
      return 0;
    }
  }
  return (*(uint64_t (**)(void))(*(void *)(*(void *)v2 + 304) + 16))();
}

void LMLanguageModelCreateExemplarCharacterStringForLocale(uint64_t a1)
{
  int v1 = 0;
  sub_19E4296D8(a1, &v1);
  uset_toPattern();
  int v1 = 0;
  operator new[]();
}

void sub_19E3CCB80(_Unwind_Exception *a1)
{
  MEMORY[0x19F3BDCC0](v1, 0x1000C80BDFB0063);
  _Unwind_Resume(a1);
}

uint64_t LMLanguageModelIsAppleColorEmojiCharacter(UTF32Char theChar)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EC009388, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EC009388))
  {
    qword_1EC009398 = CEMCreateEmojiCharacterSet();
    __cxa_guard_release(&qword_1EC009388);
  }
  uint64_t result = qword_1EC009398;
  if (qword_1EC009398) {
    return CFCharacterSetIsLongCharacterMember((CFCharacterSetRef)qword_1EC009398, theChar) != 0;
  }
  return result;
}

void sub_19E3CCC18(_Unwind_Exception *a1)
{
}

uint64_t LMEnumerateAssetDataItems()
{
  return LDEnumerateAssetDataItems();
}

BOOL LMLanguageModelWireMemory(uint64_t a1)
{
  if (a1) {
    sub_19E377A04(*(void **)(a1 + 24));
  }
  return a1 != 0;
}

BOOL LMLanguageModelUnwireMemory(uint64_t a1)
{
  if (a1) {
    sub_19E417960(*(void **)(a1 + 24));
  }
  return a1 != 0;
}

uint64_t LMLanguageModelDynamicModelIsEmpty(uint64_t a1)
{
  if (a1 && (uint64_t v1 = *(void *)(*(void *)(a1 + 24) + 272)) != 0) {
    return (*(uint64_t (**)(void))(**(void **)(v1 + 8) + 24))();
  }
  else {
    return 1;
  }
}

CFStringRef LMLanguageModelCopyDynamicModelBundlePath(uint64_t a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v1 = *(void *)(a1 + 24);
  if (!*(unsigned char *)(*(void *)(v1 + 232) + 192)) {
    return 0;
  }
  uint64_t v2 = *(const char **)(v1 + 48);
  if (v2[23] < 0) {
    uint64_t v2 = *(const char **)v2;
  }
  return CFStringCreateWithCString(0, v2, 0x8000100u);
}

CFURLRef LMLanguageLikelihoodModelGetUserModel(const __CFDictionary *Value)
{
  if (Value) {
    CFStringRef Value = (const __CFDictionary *)CFDictionaryGetValue(Value, (const void *)kLMLanguageModelCustomDynamicResourceDirectoryKey);
  }
  CFURLRef result = sub_19E37272C((const __CFString *)Value);
  if (result) {
    sub_19E4D9B70(result);
  }
  return result;
}

double LMLanguageLikelihoodModelGetLastOfflineAdaptationTime(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 0.0;
  }
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v7 = 0;
  unint64_t v8 = (double *)&v7;
  uint64_t v9 = 0x2000000000;
  uint64_t v10 = 0;
  uint64_t v3 = *(NSObject **)(v2 + 280);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = sub_19E4D975C;
  block[3] = &unk_1E59A0F58;
  block[4] = &v7;
  void block[5] = v2;
  block[6] = a2;
  dispatch_sync(v3, block);
  double v4 = v8[3];
  _Block_object_dispose(&v7, 8);
  return v4;
}

void LMLanguageLikelihoodModelAddEvidenceForLanguage(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  if (a1)
  {
    uint64_t v7 = *(void *)(a1 + 24);
    unint64_t v8 = *(NSObject **)(v7 + 280);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = sub_19E4D9A90;
    block[3] = &unk_1E59A0F30;
    block[4] = v7;
    int v10 = a2;
    *(double *)&void block[5] = a7;
    block[6] = a3;
    void block[7] = a4;
    block[8] = a5;
    block[9] = a6;
    dispatch_sync(v8, block);
  }
}

void LMLanguageLikelihoodModelGetLanguagePriorProbabilities(uint64_t a1, uint64_t a2, int a3, CFDictionaryRef theDict)
{
  if (a1)
  {
    v28[0] = 0;
    v28[1] = 0;
    uint64_t v27 = v28;
    if (CFDictionaryGetCount(theDict))
    {
      unint64_t Count = CFDictionaryGetCount(theDict);
      if (Count)
      {
        if (Count >> 61) {
          sub_19E37C7C4();
        }
        size_t v8 = 8 * Count;
        uint64_t v9 = (const __CFString **)operator new(8 * Count);
        bzero(v9, v8);
        int v10 = operator new(v8);
        uint64_t v11 = &v9[v8 / 8];
        bzero(v10, v8);
      }
      else
      {
        uint64_t v11 = 0;
        uint64_t v9 = 0;
        int v10 = 0;
      }
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v26 = 0;
      CFDictionaryGetKeysAndValues(theDict, (const void **)v9, (const void **)v10);
      if (v9 == v11)
      {
        BOOL v15 = 0;
      }
      else
      {
        uint64_t v14 = v9;
        do
        {
          sub_19E37774C(*v14, &block);
          if (SHIBYTE(v26) < 0) {
            operator delete(__p[0]);
          }
          *(_OWORD *)std::string __p = block;
          uint64_t v26 = v30;
          sub_19E3CD25C((uint64_t **)&v27, (const void **)__p, (uint64_t)__p)[7] = 0;
          ++v14;
        }
        while (v14 != v11);
        BOOL v15 = SHIBYTE(v26) < 0;
      }
      uint64_t v16 = *(void *)(a1 + 24);
      uint64_t v17 = *(NSObject **)(v16 + 280);
      *(void *)&blocuint64_t k = MEMORY[0x1E4F143A8];
      *((void *)&block + 1) = 0x40000000;
      long long v30 = sub_19E4D9904;
      unint64_t v31 = &unk_1E59A0F78;
      uint64_t v32 = v16;
      uint64_t v33 = a2;
      uint64_t v34 = (uint64_t **)&v27;
      dispatch_sync(v17, &block);
      if (v15) {
        operator delete(__p[0]);
      }
      if (v10) {
        operator delete(v10);
      }
      if (v9) {
        operator delete(v9);
      }
    }
    else
    {
      uint64_t v12 = *(void *)(a1 + 24);
      uint64_t v13 = *(NSObject **)(v12 + 280);
      *(void *)&blocuint64_t k = MEMORY[0x1E4F143A8];
      *((void *)&block + 1) = 0x40000000;
      long long v30 = sub_19E4D9904;
      unint64_t v31 = &unk_1E59A0F78;
      uint64_t v32 = v12;
      uint64_t v33 = a2;
      uint64_t v34 = (uint64_t **)&v27;
      dispatch_sync(v13, &block);
    }
    uint64_t v18 = (uint64_t *)v27;
    if (v27 != v28)
    {
      CFAllocatorRef v19 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      do
      {
        *(void *)&blocuint64_t k = v18[7];
        CFStringRef v20 = sub_19E3C2A64((uint64_t)(v18 + 4));
        CFNumberRef v21 = CFNumberCreate(v19, kCFNumberDoubleType, &block);
        CFDictionarySetValue(theDict, v20, v21);
        CFRelease(v20);
        CFRelease(v21);
        uint64_t v22 = (char *)v18[1];
        if (v22)
        {
          do
          {
            unint64_t v23 = (char **)v22;
            uint64_t v22 = *(char **)v22;
          }
          while (v22);
        }
        else
        {
          do
          {
            unint64_t v23 = (char **)v18[2];
            BOOL v24 = *v23 == (char *)v18;
            uint64_t v18 = (uint64_t *)v23;
          }
          while (!v24);
        }
        uint64_t v18 = (uint64_t *)v23;
      }
      while (v23 != v28);
    }
    sub_19E3CD3E0(v28[0]);
  }
}

void sub_19E3CD1EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  operator delete(v17);
  sub_19E3CD3E0(a17);
  _Unwind_Resume(a1);
}

uint64_t **sub_19E3CD25C(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    int v7 = *((char *)a2 + 23);
    if (v7 >= 0) {
      size_t v8 = a2;
    }
    else {
      size_t v8 = *a2;
    }
    if (v7 >= 0) {
      size_t v9 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v9 = (size_t)a2[1];
    }
    while (1)
    {
      int v10 = (uint64_t **)v5;
      uint64_t v13 = (const void *)v5[4];
      uint64_t v11 = v5 + 4;
      uint64_t v12 = v13;
      int v14 = *((char *)v11 + 23);
      if (v14 >= 0) {
        BOOL v15 = v11;
      }
      else {
        BOOL v15 = v12;
      }
      if (v14 >= 0) {
        size_t v16 = *((unsigned __int8 *)v11 + 23);
      }
      else {
        size_t v16 = v11[1];
      }
      if (v16 >= v9) {
        size_t v17 = v9;
      }
      else {
        size_t v17 = v16;
      }
      int v18 = memcmp(v8, v15, v17);
      if (v18)
      {
        if (v18 < 0) {
          goto LABEL_8;
        }
LABEL_22:
        int v19 = memcmp(v15, v8, v17);
        if (v19)
        {
          if ((v19 & 0x80000000) == 0) {
            return v10;
          }
        }
        else if (v16 >= v9)
        {
          return v10;
        }
        uint64_t v5 = v10[1];
        if (!v5)
        {
          uint64_t v6 = v10 + 1;
          goto LABEL_29;
        }
      }
      else
      {
        if (v9 >= v16) {
          goto LABEL_22;
        }
LABEL_8:
        uint64_t v5 = *v10;
        uint64_t v6 = v10;
        if (!*v10) {
          goto LABEL_29;
        }
      }
    }
  }
  int v10 = a1 + 1;
LABEL_29:
  CFStringRef v20 = operator new(0x40uLL);
  CFNumberRef v21 = v20 + 4;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_19E39369C(v21, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)CFNumberRef v21 = *(_OWORD *)a3;
    v20[6] = *(void *)(a3 + 16);
  }
  v20[7] = 0;
  void *v20 = 0;
  v20[1] = 0;
  std::string v20[2] = v10;
  char *v6 = v20;
  uint64_t v22 = (uint64_t *)**a1;
  unint64_t v23 = v20;
  if (v22)
  {
    *a1 = v22;
    unint64_t v23 = *v6;
  }
  sub_19E37D324(a1[1], v23);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t **)v20;
}

void sub_19E3CD3CC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_19E3CD3E0(char *a1)
{
  if (a1)
  {
    sub_19E3CD3E0(*(void *)a1);
    sub_19E3CD3E0(*((void *)a1 + 1));
    if (a1[55] < 0) {
      operator delete(*((void **)a1 + 4));
    }
    operator delete(a1);
  }
}

uint64_t LMLanguageLikelihoodModelGetLanguageProbabilities(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v9 = 0;
  int v10 = &v9;
  uint64_t v11 = 0x2000000000;
  char v12 = 1;
  uint64_t v5 = *(NSObject **)(v4 + 280);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = sub_19E4D99D0;
  block[3] = &unk_1E59A0FC0;
  block[4] = &v9;
  void block[5] = v4;
  block[6] = a2;
  void block[7] = a3;
  block[8] = a4;
  dispatch_sync(v5, block);
  uint64_t v6 = *((unsigned __int8 *)v10 + 24);
  _Block_object_dispose(&v9, 8);
  return v6;
}

void LMLanguageContextCreate()
{
}

void sub_19E3CD644(_Unwind_Exception *a1)
{
}

void sub_19E3CD660(_Unwind_Exception *a1)
{
  uint64_t v4 = v2;
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v6 = *(void *)(v1 + 72);
  if (v6)
  {
    uint64_t v8 = *(void *)(v1 + 80);
    uint64_t v9 = *(void **)(v1 + 72);
    if (v8 != v6)
    {
      do
      {
        if (*(char *)(v8 - 9) < 0) {
          operator delete(*(void **)(v8 - 32));
        }
        v8 -= 32;
      }
      while (v8 != v6);
      uint64_t v9 = *(void **)(v1 + 72);
    }
    *(void *)(v1 + 8sub_19E392864(&a9, 0) = v6;
    operator delete(v9);
    int v7 = *(void ***)(v1 + 48);
    if (!v7)
    {
LABEL_5:
      if ((*v3 & 0x80000000) == 0) {
        goto LABEL_6;
      }
      goto LABEL_23;
    }
  }
  else
  {
    int v7 = *(void ***)(v1 + 48);
    if (!v7) {
      goto LABEL_5;
    }
  }
  int v10 = *(void ***)(v1 + 56);
  uint64_t v11 = v7;
  if (v10 != v7)
  {
    do
    {
      if (*((char *)v10 - 1) < 0) {
        operator delete(*(v10 - 3));
      }
      v10 -= 3;
    }
    while (v10 != v7);
    uint64_t v11 = *(void ***)(v1 + 48);
  }
  *(void *)(v1 + 56) = v7;
  operator delete(v11);
  if ((*v3 & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(v1 + 23) & 0x80000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_23:
  operator delete(*(void **)(v1 + 24));
  if ((*(char *)(v1 + 23) & 0x80000000) == 0)
  {
LABEL_8:
    MEMORY[0x19F3BDCF0](v1, 0x1032C40D853B9C0);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(*(void **)v1);
  goto LABEL_8;
}

void LMLanguageContextSetFeatures(uint64_t a1, unsigned int *a2)
{
  uint64_t v169 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return;
  }
  uint64_t v3 = *(const void ***)(a1 + 24);
  int64x2_t v153 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  uint64_t v154 = 0;
  __int16 v155 = 0;
  char v156 = 1;
  long long v157 = xmmword_19E572FD0;
  int v158 = 0;
  long long v159 = xmmword_19E572FD0;
  uint64_t v161 = 0;
  uint64_t v162 = 0;
  unint64_t v160 = 0xFFEFFFFFFFFFFFFFLL;
  uint64_t v4 = (uint64_t)v3[12];
  uint64_t v5 = *a2;
  if (qword_1EC009490 != -1) {
    dispatch_once(&qword_1EC009490, &unk_1EF0BEE38);
  }
  long long v165 = 0u;
  long long v166 = 0u;
  *(_OWORD *)std::string __p = 0u;
  long long v164 = 0u;
  int v168 = 0;
  sub_19E413378(v4, v5 | (v5 << 32), (uint64_t *)__p, (uint64_t)&v153, qword_1EC009488, 1, 1, &v167, (__n128)0);
  if (v168 == &v167)
  {
    (*(void (**)(std::string *))(v167.__r_.__value_.__r.__words[0] + 32))(&v167);
  }
  else if (v168)
  {
    (*(void (**)(std::string *))(v168->__r_.__value_.__r.__words[0] + 40))(v168);
  }
  int v6 = *((char *)v3 + 23);
  if (v6 >= 0) {
    size_t v7 = *((unsigned __int8 *)v3 + 23);
  }
  else {
    size_t v7 = (size_t)v3[1];
  }
  unint64_t v8 = v7 + 3;
  if (v7 + 3 > 0x7FFFFFFFFFFFFFF7) {
    sub_19E37C958();
  }
  if (v8 >= 0x17)
  {
    uint64_t v10 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17) {
      uint64_t v10 = v8 | 7;
    }
    uint64_t v11 = v10 + 1;
    char v12 = (char *)operator new(v10 + 1);
    v167.__r_.__value_.__l.__size_ = v7 + 3;
    v167.__r_.__value_.__r.__words[2] = v11 | 0x8000000000000000;
    v167.__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
    uint64_t v9 = v12 + 3;
    *(_WORD *)char v12 = 19788;
    std::string v12[2] = 95;
  }
  else
  {
    v167.__r_.__value_.__r.__words[2] = 0;
    *(_OWORD *)&v167.__r_.__value_.__l.__data_ = 0x5F4D4CuLL;
    *((unsigned char *)&v167.__r_.__value_.__s + 23) = v7 + 3;
    uint64_t v9 = &v167.__r_.__value_.__s.__data_[3];
    if (!v7) {
      goto LABEL_22;
    }
  }
  if (v6 >= 0) {
    uint64_t v13 = v3;
  }
  else {
    uint64_t v13 = *v3;
  }
  memmove(v9, v13, v7);
LABEL_22:
  v9[v7] = 0;
  int v14 = std::string::append(&v167, "_W0", 3uLL);
  size_t v16 = (void *)v14->__r_.__value_.__r.__words[0];
  std::string::size_type size = (void *)v14->__r_.__value_.__l.__size_;
  LODWORD(v152.__r_.__value_.__l.__data_) = v14->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v152.__r_.__value_.__r.__words + 3) = *(_DWORD *)((char *)&v14->__r_.__value_.__r.__words[2] + 3);
  int v17 = SHIBYTE(v14->__r_.__value_.__r.__words[2]);
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  double v18 = *(double *)v153.i64;
  if (v17 < 0)
  {
    sub_19E39369C(__p, v16, (unint64_t)size);
  }
  else
  {
    __p[0] = v16;
    __p[1] = size;
    LODWORD(v164) = v152.__r_.__value_.__l.__data_;
    *(_DWORD *)((char *)&v164 + 3) = *(_DWORD *)((char *)v152.__r_.__value_.__r.__words + 3);
    BYTE7(v164) = v17;
  }
  *((double *)&v164 + 1) = trunc(v18 * 10.0) * 0.1;
  int v19 = (__n128 *)v3[10];
  if (v19 >= v3[11])
  {
    CFNumberRef v21 = sub_19E45D0D0((void **)v3 + 9, (uint64_t)__p);
    int v22 = SBYTE7(v164);
    v3[10] = v21;
    if (v22 < 0)
    {
      operator delete(__p[0]);
      if ((v17 & 0x80000000) == 0) {
        goto LABEL_31;
      }
    }
    else if ((v17 & 0x80000000) == 0)
    {
      goto LABEL_31;
    }
LABEL_27:
    operator delete(v16);
    if ((SHIBYTE(v167.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_28;
  }
  __n128 v20 = *(__n128 *)__p;
  v19[1].n128_u64[0] = v164;
  *int v19 = v20;
  v20.n128_u64[0] = *((void *)&v164 + 1);
  v19[1].n128_u64[1] = *((void *)&v164 + 1);
  v3[10] = &v19[2];
  if (v17 < 0) {
    goto LABEL_27;
  }
LABEL_31:
  if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0) {
LABEL_28:
  }
    operator delete(v167.__r_.__value_.__l.__data_);
LABEL_32:
  uint64_t v23 = (uint64_t)v3[12];
  uint64_t v24 = a2[1];
  if (qword_1EC009490 != -1) {
    dispatch_once(&qword_1EC009490, &unk_1EF0BEE38);
  }
  __p[0] = a2;
  __p[1] = (void *)1;
  *(void *)&long long v164 = a2;
  *((void *)&v164 + 1) = 1;
  *(void *)&long long v165 = a2;
  *((void *)&v165 + 1) = 1;
  *(void *)&long long v166 = a2;
  *((void *)&v166 + 1) = 1;
  int v168 = 0;
  sub_19E413378(v23, v24 | (v24 << 32), (uint64_t *)__p, (uint64_t)&v153, qword_1EC009488, 1, 1, &v167, v20);
  if (v168 == &v167)
  {
    (*(void (**)(std::string *))(v167.__r_.__value_.__r.__words[0] + 32))(&v167);
  }
  else if (v168)
  {
    (*(void (**)(void))(v168->__r_.__value_.__r.__words[0] + 40))();
  }
  int v25 = *((char *)v3 + 23);
  if (v25 >= 0) {
    size_t v26 = *((unsigned __int8 *)v3 + 23);
  }
  else {
    size_t v26 = (size_t)v3[1];
  }
  unint64_t v27 = v26 + 3;
  if (v26 + 3 > 0x7FFFFFFFFFFFFFF7) {
    sub_19E37C958();
  }
  if (v27 >= 0x17)
  {
    uint64_t v29 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v27 | 7) != 0x17) {
      uint64_t v29 = v27 | 7;
    }
    uint64_t v30 = v29 + 1;
    unint64_t v31 = (char *)operator new(v29 + 1);
    v167.__r_.__value_.__l.__size_ = v26 + 3;
    v167.__r_.__value_.__r.__words[2] = v30 | 0x8000000000000000;
    v167.__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
    uint64_t v28 = v31 + 3;
    *(_WORD *)unint64_t v31 = 19788;
    v31[2] = 95;
  }
  else
  {
    v167.__r_.__value_.__r.__words[2] = 0;
    *(_OWORD *)&v167.__r_.__value_.__l.__data_ = 0x5F4D4CuLL;
    *((unsigned char *)&v167.__r_.__value_.__s + 23) = v26 + 3;
    uint64_t v28 = &v167.__r_.__value_.__s.__data_[3];
    if (!v26) {
      goto LABEL_52;
    }
  }
  if (v25 >= 0) {
    uint64_t v32 = v3;
  }
  else {
    uint64_t v32 = *v3;
  }
  memmove(v28, v32, v26);
LABEL_52:
  v28[v26] = 0;
  uint64_t v33 = std::string::append(&v167, "_W-1", 4uLL);
  int v35 = (void *)v33->__r_.__value_.__r.__words[0];
  uint64_t v34 = (void *)v33->__r_.__value_.__l.__size_;
  LODWORD(v152.__r_.__value_.__l.__data_) = v33->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v152.__r_.__value_.__r.__words + 3) = *(_DWORD *)((char *)&v33->__r_.__value_.__r.__words[2] + 3);
  int v36 = SHIBYTE(v33->__r_.__value_.__r.__words[2]);
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  double v37 = *(double *)v153.i64;
  if (v36 < 0)
  {
    sub_19E39369C(__p, v35, (unint64_t)v34);
  }
  else
  {
    __p[0] = v35;
    __p[1] = v34;
    LODWORD(v164) = v152.__r_.__value_.__l.__data_;
    *(_DWORD *)((char *)&v164 + 3) = *(_DWORD *)((char *)v152.__r_.__value_.__r.__words + 3);
    BYTE7(v164) = v36;
  }
  *((double *)&v164 + 1) = trunc(v37 * 10.0) * 0.1;
  unint64_t v38 = (__n128 *)v3[10];
  if (v38 >= v3[11])
  {
    uint64_t v40 = sub_19E45D0D0((void **)v3 + 9, (uint64_t)__p);
    int v41 = SBYTE7(v164);
    v3[10] = v40;
    if (v41 < 0)
    {
      operator delete(__p[0]);
      if ((v36 & 0x80000000) == 0) {
        goto LABEL_61;
      }
    }
    else if ((v36 & 0x80000000) == 0)
    {
      goto LABEL_61;
    }
LABEL_57:
    operator delete(v35);
    if ((SHIBYTE(v167.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_62;
    }
    goto LABEL_58;
  }
  __n128 v39 = *(__n128 *)__p;
  v38[1].n128_u64[0] = v164;
  *unint64_t v38 = v39;
  v39.n128_u64[0] = *((void *)&v164 + 1);
  v38[1].n128_u64[1] = *((void *)&v164 + 1);
  v3[10] = &v38[2];
  if (v36 < 0) {
    goto LABEL_57;
  }
LABEL_61:
  if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0) {
LABEL_58:
  }
    operator delete(v167.__r_.__value_.__l.__data_);
LABEL_62:
  uint64_t v42 = (uint64_t)v3[12];
  uint64_t v43 = a2[2];
  if (qword_1EC009490 != -1) {
    dispatch_once(&qword_1EC009490, &unk_1EF0BEE38);
  }
  __p[0] = a2;
  __p[1] = (void *)2;
  *(void *)&long long v164 = a2;
  *((void *)&v164 + 1) = 2;
  *(void *)&long long v165 = a2;
  *((void *)&v165 + 1) = 2;
  *(void *)&long long v166 = a2;
  *((void *)&v166 + 1) = 2;
  int v168 = 0;
  sub_19E413378(v42, v43 | (v43 << 32), (uint64_t *)__p, (uint64_t)&v153, qword_1EC009488, 1, 1, &v167, v39);
  if (v168 == &v167)
  {
    (*(void (**)(std::string *))(v167.__r_.__value_.__r.__words[0] + 32))(&v167);
  }
  else if (v168)
  {
    (*(void (**)(void))(v168->__r_.__value_.__r.__words[0] + 40))();
  }
  int v44 = *((char *)v3 + 23);
  if (v44 >= 0) {
    size_t v45 = *((unsigned __int8 *)v3 + 23);
  }
  else {
    size_t v45 = (size_t)v3[1];
  }
  unint64_t v46 = v45 + 3;
  if (v45 + 3 > 0x7FFFFFFFFFFFFFF7) {
    sub_19E37C958();
  }
  if (v46 >= 0x17)
  {
    uint64_t v48 = (v46 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v46 | 7) != 0x17) {
      uint64_t v48 = v46 | 7;
    }
    uint64_t v49 = v48 + 1;
    unsigned int v50 = (char *)operator new(v48 + 1);
    v167.__r_.__value_.__l.__size_ = v45 + 3;
    v167.__r_.__value_.__r.__words[2] = v49 | 0x8000000000000000;
    v167.__r_.__value_.__r.__words[0] = (std::string::size_type)v50;
    uint64_t v47 = v50 + 3;
    *(_WORD *)unsigned int v50 = 19788;
    v50[2] = 95;
  }
  else
  {
    v167.__r_.__value_.__r.__words[2] = 0;
    *(_OWORD *)&v167.__r_.__value_.__l.__data_ = 0x5F4D4CuLL;
    *((unsigned char *)&v167.__r_.__value_.__s + 23) = v45 + 3;
    uint64_t v47 = &v167.__r_.__value_.__s.__data_[3];
    if (!v45) {
      goto LABEL_82;
    }
  }
  if (v44 >= 0) {
    uint64_t v51 = v3;
  }
  else {
    uint64_t v51 = *v3;
  }
  memmove(v47, v51, v45);
LABEL_82:
  v47[v45] = 0;
  int v52 = std::string::append(&v167, "_W-2", 4uLL);
  int v54 = (void *)v52->__r_.__value_.__r.__words[0];
  uint64_t v53 = (void *)v52->__r_.__value_.__l.__size_;
  LODWORD(v152.__r_.__value_.__l.__data_) = v52->__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v152.__r_.__value_.__r.__words + 3) = *(_DWORD *)((char *)&v52->__r_.__value_.__r.__words[2] + 3);
  int v55 = SHIBYTE(v52->__r_.__value_.__r.__words[2]);
  v52->__r_.__value_.__l.__size_ = 0;
  v52->__r_.__value_.__r.__words[2] = 0;
  v52->__r_.__value_.__r.__words[0] = 0;
  double v56 = *(double *)v153.i64;
  if (v55 < 0)
  {
    sub_19E39369C(__p, v54, (unint64_t)v53);
  }
  else
  {
    __p[0] = v54;
    __p[1] = v53;
    LODWORD(v164) = v152.__r_.__value_.__l.__data_;
    *(_DWORD *)((char *)&v164 + 3) = *(_DWORD *)((char *)v152.__r_.__value_.__r.__words + 3);
    BYTE7(v164) = v55;
  }
  *((double *)&v164 + 1) = trunc(v56 * 10.0) * 0.1;
  BOOL v57 = v3[10];
  if (v57 >= v3[11])
  {
    uint64_t v59 = sub_19E45D0D0((void **)v3 + 9, (uint64_t)__p);
    int v60 = SBYTE7(v164);
    v3[10] = v59;
    if (v60 < 0)
    {
      operator delete(__p[0]);
      if ((v55 & 0x80000000) == 0) {
        goto LABEL_91;
      }
    }
    else if ((v55 & 0x80000000) == 0)
    {
      goto LABEL_91;
    }
LABEL_87:
    operator delete(v54);
    if ((SHIBYTE(v167.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_92;
    }
    goto LABEL_88;
  }
  long long v58 = *(_OWORD *)__p;
  v57[2] = v164;
  *(_OWORD *)BOOL v57 = v58;
  v57[3] = *((void *)&v164 + 1);
  v3[10] = v57 + 4;
  if (v55 < 0) {
    goto LABEL_87;
  }
LABEL_91:
  if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0) {
LABEL_88:
  }
    operator delete(v167.__r_.__value_.__l.__data_);
LABEL_92:
  if (*a2)
  {
    int v61 = *((char *)v3 + 23);
    if (v61 >= 0) {
      size_t v62 = *((unsigned __int8 *)v3 + 23);
    }
    else {
      size_t v62 = (size_t)v3[1];
    }
    unint64_t v63 = v62 + 4;
    if (v62 + 4 > 0x7FFFFFFFFFFFFFF7) {
      sub_19E37C958();
    }
    if (v63 >= 0x17)
    {
      uint64_t v69 = (v63 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v63 | 7) != 0x17) {
        uint64_t v69 = v63 | 7;
      }
      uint64_t v70 = v69 + 1;
      uint64_t v71 = operator new(v69 + 1);
      v152.__r_.__value_.__l.__size_ = v62 + 4;
      v152.__r_.__value_.__r.__words[2] = v70 | 0x8000000000000000;
      v152.__r_.__value_.__r.__words[0] = (std::string::size_type)v71;
      _DWORD *v71 = 1601725772;
      uint64_t v64 = (std::string::value_type *)(v71 + 1);
    }
    else
    {
      *(_OWORD *)&v152.__r_.__value_.__r.__words[1] = 0uLL;
      *((unsigned char *)&v152.__r_.__value_.__s + 23) = v62 + 4;
      uint64_t v64 = &v152.__r_.__value_.__s.__data_[4];
      v152.__r_.__value_.__r.__words[0] = 1601725772;
      if (!v62) {
        goto LABEL_114;
      }
    }
    if (v61 >= 0) {
      uint64_t v72 = v3;
    }
    else {
      uint64_t v72 = *v3;
    }
    memmove(v64, v72, v62);
LABEL_114:
    v64[v62] = 0;
    uint64_t v73 = std::string::append(&v152, "_W0", 3uLL);
    long long v74 = *(_OWORD *)&v73->__r_.__value_.__l.__data_;
    v167.__r_.__value_.__r.__words[2] = v73->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v167.__r_.__value_.__l.__data_ = v74;
    v73->__r_.__value_.__l.__size_ = 0;
    v73->__r_.__value_.__r.__words[2] = 0;
    v73->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v151, 1);
    if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v75 = &v151;
    }
    else {
      unint64_t v75 = (std::string *)v151.__r_.__value_.__r.__words[0];
    }
    if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v76 = HIBYTE(v151.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v76 = v151.__r_.__value_.__l.__size_;
    }
    unint64_t v77 = std::string::append(&v167, (const std::string::value_type *)v75, v76);
    *(_OWORD *)std::string __p = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
    *(void *)&long long v164 = *((void *)&v77->__r_.__value_.__l + 2);
    v77->__r_.__value_.__l.__size_ = 0;
    v77->__r_.__value_.__r.__words[2] = 0;
    v77->__r_.__value_.__r.__words[0] = 0;
    int v78 = v3[7];
    if (v78 < v3[8])
    {
      char v79 = BYTE7(v164);
      if (SBYTE7(v164) < 0)
      {
LABEL_122:
        sub_19E39369C(v3[7], __p[0], (unint64_t)__p[1]);
        goto LABEL_146;
      }
LABEL_145:
      *(_OWORD *)int v78 = *(_OWORD *)__p;
      v78[2] = v164;
LABEL_146:
      v3[7] = v78 + 3;
      v3[7] = v78 + 3;
      if ((v79 & 0x80) == 0) {
        goto LABEL_148;
      }
      goto LABEL_147;
    }
    goto LABEL_186;
  }
  int v65 = *((char *)v3 + 23);
  if (v65 >= 0) {
    size_t v66 = *((unsigned __int8 *)v3 + 23);
  }
  else {
    size_t v66 = (size_t)v3[1];
  }
  unint64_t v67 = v66 + 4;
  if (v66 + 4 > 0x7FFFFFFFFFFFFFF7) {
    sub_19E37C958();
  }
  if (v67 >= 0x17)
  {
    uint64_t v80 = (v67 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v67 | 7) != 0x17) {
      uint64_t v80 = v67 | 7;
    }
    uint64_t v81 = v80 + 1;
    uint64_t v82 = operator new(v80 + 1);
    v152.__r_.__value_.__l.__size_ = v66 + 4;
    v152.__r_.__value_.__r.__words[2] = v81 | 0x8000000000000000;
    v152.__r_.__value_.__r.__words[0] = (std::string::size_type)v82;
    *uint64_t v82 = 1601725772;
    int v68 = (std::string::value_type *)(v82 + 1);
  }
  else
  {
    *(_OWORD *)&v152.__r_.__value_.__r.__words[1] = 0uLL;
    *((unsigned char *)&v152.__r_.__value_.__s + 23) = v66 + 4;
    int v68 = &v152.__r_.__value_.__s.__data_[4];
    v152.__r_.__value_.__r.__words[0] = 1601725772;
    if (!v66) {
      goto LABEL_137;
    }
  }
  if (v65 >= 0) {
    int v83 = v3;
  }
  else {
    int v83 = *v3;
  }
  memmove(v68, v83, v66);
LABEL_137:
  v68[v66] = 0;
  uint64_t v84 = std::string::append(&v152, "_W0", 3uLL);
  long long v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
  v167.__r_.__value_.__r.__words[2] = v84->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v167.__r_.__value_.__l.__data_ = v85;
  v84->__r_.__value_.__l.__size_ = 0;
  v84->__r_.__value_.__r.__words[2] = 0;
  v84->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v151, 0);
  if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v86 = &v151;
  }
  else {
    int v86 = (std::string *)v151.__r_.__value_.__r.__words[0];
  }
  if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v87 = HIBYTE(v151.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v87 = v151.__r_.__value_.__l.__size_;
  }
  long long v88 = std::string::append(&v167, (const std::string::value_type *)v86, v87);
  *(_OWORD *)std::string __p = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
  *(void *)&long long v164 = *((void *)&v88->__r_.__value_.__l + 2);
  v88->__r_.__value_.__l.__size_ = 0;
  v88->__r_.__value_.__r.__words[2] = 0;
  v88->__r_.__value_.__r.__words[0] = 0;
  int v78 = v3[7];
  if (v78 < v3[8])
  {
    char v79 = BYTE7(v164);
    if (SBYTE7(v164) < 0) {
      goto LABEL_122;
    }
    goto LABEL_145;
  }
LABEL_186:
  unint64_t v108 = sub_19E3FC244((char **)v3 + 6, (uint64_t)__p);
  char v109 = BYTE7(v164);
  v3[7] = v108;
  if (v109 < 0) {
LABEL_147:
  }
    operator delete(__p[0]);
LABEL_148:
  if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v151.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v167.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_150:
      if ((SHIBYTE(v152.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_151;
      }
      goto LABEL_161;
    }
  }
  else if ((SHIBYTE(v167.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_150;
  }
  operator delete(v167.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v152.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_151:
    if (a2[1]) {
      goto LABEL_152;
    }
    goto LABEL_162;
  }
LABEL_161:
  operator delete(v152.__r_.__value_.__l.__data_);
  if (a2[1])
  {
LABEL_152:
    int v89 = *((char *)v3 + 23);
    if (v89 >= 0) {
      size_t v90 = *((unsigned __int8 *)v3 + 23);
    }
    else {
      size_t v90 = (size_t)v3[1];
    }
    unint64_t v91 = v90 + 4;
    if (v90 + 4 > 0x7FFFFFFFFFFFFFF7) {
      sub_19E37C958();
    }
    if (v91 >= 0x17)
    {
      uint64_t v97 = (v91 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v91 | 7) != 0x17) {
        uint64_t v97 = v91 | 7;
      }
      uint64_t v98 = v97 + 1;
      uint64_t v99 = operator new(v97 + 1);
      v152.__r_.__value_.__l.__size_ = v90 + 4;
      v152.__r_.__value_.__r.__words[2] = v98 | 0x8000000000000000;
      v152.__r_.__value_.__r.__words[0] = (std::string::size_type)v99;
      *uint64_t v99 = 1601725772;
      int v92 = (std::string::value_type *)(v99 + 1);
    }
    else
    {
      *(_OWORD *)&v152.__r_.__value_.__r.__words[1] = 0uLL;
      *((unsigned char *)&v152.__r_.__value_.__s + 23) = v90 + 4;
      int v92 = &v152.__r_.__value_.__s.__data_[4];
      v152.__r_.__value_.__r.__words[0] = 1601725772;
      if (!v90) {
        goto LABEL_176;
      }
    }
    if (v89 >= 0) {
      int v100 = v3;
    }
    else {
      int v100 = *v3;
    }
    memmove(v92, v100, v90);
LABEL_176:
    v92[v90] = 0;
    char v101 = std::string::append(&v152, "_W-1", 4uLL);
    long long v102 = *(_OWORD *)&v101->__r_.__value_.__l.__data_;
    v167.__r_.__value_.__r.__words[2] = v101->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v167.__r_.__value_.__l.__data_ = v102;
    v101->__r_.__value_.__l.__size_ = 0;
    v101->__r_.__value_.__r.__words[2] = 0;
    v101->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v151, 1);
    if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned int v103 = &v151;
    }
    else {
      unsigned int v103 = (std::string *)v151.__r_.__value_.__r.__words[0];
    }
    if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v104 = HIBYTE(v151.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v104 = v151.__r_.__value_.__l.__size_;
    }
    char v105 = std::string::append(&v167, (const std::string::value_type *)v103, v104);
    *(_OWORD *)std::string __p = *(_OWORD *)&v105->__r_.__value_.__l.__data_;
    *(void *)&long long v164 = *((void *)&v105->__r_.__value_.__l + 2);
    v105->__r_.__value_.__l.__size_ = 0;
    v105->__r_.__value_.__r.__words[2] = 0;
    v105->__r_.__value_.__r.__words[0] = 0;
    int v106 = v3[7];
    if (v106 < v3[8])
    {
      char v107 = BYTE7(v164);
      if (SBYTE7(v164) < 0)
      {
LABEL_184:
        sub_19E39369C(v3[7], __p[0], (unint64_t)__p[1]);
        goto LABEL_204;
      }
LABEL_203:
      *(_OWORD *)int v106 = *(_OWORD *)__p;
      v106[2] = v164;
LABEL_204:
      v3[7] = v106 + 3;
      v3[7] = v106 + 3;
      if ((v107 & 0x80) == 0) {
        goto LABEL_206;
      }
      goto LABEL_205;
    }
    goto LABEL_244;
  }
LABEL_162:
  int v93 = *((char *)v3 + 23);
  if (v93 >= 0) {
    size_t v94 = *((unsigned __int8 *)v3 + 23);
  }
  else {
    size_t v94 = (size_t)v3[1];
  }
  unint64_t v95 = v94 + 4;
  if (v94 + 4 > 0x7FFFFFFFFFFFFFF7) {
    sub_19E37C958();
  }
  if (v95 >= 0x17)
  {
    uint64_t v110 = (v95 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v95 | 7) != 0x17) {
      uint64_t v110 = v95 | 7;
    }
    uint64_t v111 = v110 + 1;
    int v112 = operator new(v110 + 1);
    v152.__r_.__value_.__l.__size_ = v94 + 4;
    v152.__r_.__value_.__r.__words[2] = v111 | 0x8000000000000000;
    v152.__r_.__value_.__r.__words[0] = (std::string::size_type)v112;
    *int v112 = 1601725772;
    int v96 = (std::string::value_type *)(v112 + 1);
  }
  else
  {
    *(_OWORD *)&v152.__r_.__value_.__r.__words[1] = 0uLL;
    *((unsigned char *)&v152.__r_.__value_.__s + 23) = v94 + 4;
    int v96 = &v152.__r_.__value_.__s.__data_[4];
    v152.__r_.__value_.__r.__words[0] = 1601725772;
    if (!v94) {
      goto LABEL_195;
    }
  }
  if (v93 >= 0) {
    unsigned int v113 = v3;
  }
  else {
    unsigned int v113 = *v3;
  }
  memmove(v96, v113, v94);
LABEL_195:
  v96[v94] = 0;
  char v114 = std::string::append(&v152, "_W-1", 4uLL);
  long long v115 = *(_OWORD *)&v114->__r_.__value_.__l.__data_;
  v167.__r_.__value_.__r.__words[2] = v114->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v167.__r_.__value_.__l.__data_ = v115;
  v114->__r_.__value_.__l.__size_ = 0;
  v114->__r_.__value_.__r.__words[2] = 0;
  v114->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v151, 0);
  if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    float64x2x2_t v116 = &v151;
  }
  else {
    float64x2x2_t v116 = (std::string *)v151.__r_.__value_.__r.__words[0];
  }
  if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v117 = HIBYTE(v151.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v117 = v151.__r_.__value_.__l.__size_;
  }
  unsigned int v118 = std::string::append(&v167, (const std::string::value_type *)v116, v117);
  *(_OWORD *)std::string __p = *(_OWORD *)&v118->__r_.__value_.__l.__data_;
  *(void *)&long long v164 = *((void *)&v118->__r_.__value_.__l + 2);
  v118->__r_.__value_.__l.__size_ = 0;
  v118->__r_.__value_.__r.__words[2] = 0;
  v118->__r_.__value_.__r.__words[0] = 0;
  int v106 = v3[7];
  if (v106 < v3[8])
  {
    char v107 = BYTE7(v164);
    if (SBYTE7(v164) < 0) {
      goto LABEL_184;
    }
    goto LABEL_203;
  }
LABEL_244:
  int v138 = sub_19E3FC244((char **)v3 + 6, (uint64_t)__p);
  char v139 = BYTE7(v164);
  v3[7] = v138;
  if (v139 < 0) {
LABEL_205:
  }
    operator delete(__p[0]);
LABEL_206:
  if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v151.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v167.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_208:
      if ((SHIBYTE(v152.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_209;
      }
      goto LABEL_219;
    }
  }
  else if ((SHIBYTE(v167.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_208;
  }
  operator delete(v167.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v152.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_209:
    if (a2[2]) {
      goto LABEL_210;
    }
LABEL_220:
    int v123 = *((char *)v3 + 23);
    if (v123 >= 0) {
      size_t v124 = *((unsigned __int8 *)v3 + 23);
    }
    else {
      size_t v124 = (size_t)v3[1];
    }
    unint64_t v125 = v124 + 4;
    if (v124 + 4 > 0x7FFFFFFFFFFFFFF7) {
      sub_19E37C958();
    }
    if (v125 >= 0x17)
    {
      uint64_t v140 = (v125 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v125 | 7) != 0x17) {
        uint64_t v140 = v125 | 7;
      }
      uint64_t v141 = v140 + 1;
      unint64_t v142 = operator new(v140 + 1);
      v152.__r_.__value_.__l.__size_ = v124 + 4;
      v152.__r_.__value_.__r.__words[2] = v141 | 0x8000000000000000;
      v152.__r_.__value_.__r.__words[0] = (std::string::size_type)v142;
      *unint64_t v142 = 1601725772;
      unsigned int v126 = (std::string::value_type *)(v142 + 1);
    }
    else
    {
      *(_OWORD *)&v152.__r_.__value_.__r.__words[1] = 0uLL;
      *((unsigned char *)&v152.__r_.__value_.__s + 23) = v124 + 4;
      unsigned int v126 = &v152.__r_.__value_.__s.__data_[4];
      v152.__r_.__value_.__r.__words[0] = 1601725772;
      if (!v124) {
        goto LABEL_253;
      }
    }
    if (v123 >= 0) {
      int v143 = v3;
    }
    else {
      int v143 = *v3;
    }
    memmove(v126, v143, v124);
LABEL_253:
    v126[v124] = 0;
    unsigned int v144 = std::string::append(&v152, "_W-2", 4uLL);
    long long v145 = *(_OWORD *)&v144->__r_.__value_.__l.__data_;
    v167.__r_.__value_.__r.__words[2] = v144->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v167.__r_.__value_.__l.__data_ = v145;
    v144->__r_.__value_.__l.__size_ = 0;
    v144->__r_.__value_.__r.__words[2] = 0;
    v144->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v151, 0);
    if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unsigned int v146 = &v151;
    }
    else {
      unsigned int v146 = (std::string *)v151.__r_.__value_.__r.__words[0];
    }
    if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v147 = HIBYTE(v151.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v147 = v151.__r_.__value_.__l.__size_;
    }
    unint64_t v148 = std::string::append(&v167, (const std::string::value_type *)v146, v147);
    *(_OWORD *)std::string __p = *(_OWORD *)&v148->__r_.__value_.__l.__data_;
    *(void *)&long long v164 = *((void *)&v148->__r_.__value_.__l + 2);
    v148->__r_.__value_.__l.__size_ = 0;
    v148->__r_.__value_.__r.__words[2] = 0;
    v148->__r_.__value_.__r.__words[0] = 0;
    unint64_t v136 = v3[7];
    if (v136 < v3[8])
    {
      char v137 = BYTE7(v164);
      if (SBYTE7(v164) < 0) {
        goto LABEL_242;
      }
      goto LABEL_261;
    }
LABEL_271:
    unint64_t v149 = sub_19E3FC244((char **)v3 + 6, (uint64_t)__p);
    char v150 = BYTE7(v164);
    v3[7] = v149;
    if ((v150 & 0x80) == 0) {
      goto LABEL_264;
    }
    goto LABEL_263;
  }
LABEL_219:
  operator delete(v152.__r_.__value_.__l.__data_);
  if (!a2[2]) {
    goto LABEL_220;
  }
LABEL_210:
  int v119 = *((char *)v3 + 23);
  if (v119 >= 0) {
    size_t v120 = *((unsigned __int8 *)v3 + 23);
  }
  else {
    size_t v120 = (size_t)v3[1];
  }
  unint64_t v121 = v120 + 4;
  if (v120 + 4 > 0x7FFFFFFFFFFFFFF7) {
    sub_19E37C958();
  }
  if (v121 >= 0x17)
  {
    uint64_t v127 = (v121 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v121 | 7) != 0x17) {
      uint64_t v127 = v121 | 7;
    }
    uint64_t v128 = v127 + 1;
    unint64_t v129 = operator new(v127 + 1);
    v152.__r_.__value_.__l.__size_ = v120 + 4;
    v152.__r_.__value_.__r.__words[2] = v128 | 0x8000000000000000;
    v152.__r_.__value_.__r.__words[0] = (std::string::size_type)v129;
    *unint64_t v129 = 1601725772;
    unint64_t v122 = (std::string::value_type *)(v129 + 1);
  }
  else
  {
    *(_OWORD *)&v152.__r_.__value_.__r.__words[1] = 0uLL;
    *((unsigned char *)&v152.__r_.__value_.__s + 23) = v120 + 4;
    unint64_t v122 = &v152.__r_.__value_.__s.__data_[4];
    v152.__r_.__value_.__r.__words[0] = 1601725772;
    if (!v120) {
      goto LABEL_234;
    }
  }
  if (v119 >= 0) {
    int v130 = v3;
  }
  else {
    int v130 = *v3;
  }
  memmove(v122, v130, v120);
LABEL_234:
  v122[v120] = 0;
  unsigned int v131 = std::string::append(&v152, "_W-2", 4uLL);
  long long v132 = *(_OWORD *)&v131->__r_.__value_.__l.__data_;
  v167.__r_.__value_.__r.__words[2] = v131->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v167.__r_.__value_.__l.__data_ = v132;
  v131->__r_.__value_.__l.__size_ = 0;
  v131->__r_.__value_.__r.__words[2] = 0;
  v131->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v151, 1);
  if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unsigned int v133 = &v151;
  }
  else {
    unsigned int v133 = (std::string *)v151.__r_.__value_.__r.__words[0];
  }
  if ((v151.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v134 = HIBYTE(v151.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v134 = v151.__r_.__value_.__l.__size_;
  }
  unint64_t v135 = std::string::append(&v167, (const std::string::value_type *)v133, v134);
  *(_OWORD *)std::string __p = *(_OWORD *)&v135->__r_.__value_.__l.__data_;
  *(void *)&long long v164 = *((void *)&v135->__r_.__value_.__l + 2);
  v135->__r_.__value_.__l.__size_ = 0;
  v135->__r_.__value_.__r.__words[2] = 0;
  v135->__r_.__value_.__r.__words[0] = 0;
  unint64_t v136 = v3[7];
  if (v136 >= v3[8]) {
    goto LABEL_271;
  }
  char v137 = BYTE7(v164);
  if (SBYTE7(v164) < 0)
  {
LABEL_242:
    sub_19E39369C(v3[7], __p[0], (unint64_t)__p[1]);
    goto LABEL_262;
  }
LABEL_261:
  *(_OWORD *)unint64_t v136 = *(_OWORD *)__p;
  v136[2] = v164;
LABEL_262:
  v3[7] = v136 + 3;
  v3[7] = v136 + 3;
  if (v137 < 0) {
LABEL_263:
  }
    operator delete(__p[0]);
LABEL_264:
  if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v151.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v167.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_266:
      if ((SHIBYTE(v152.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return;
      }
LABEL_270:
      operator delete(v152.__r_.__value_.__l.__data_);
      return;
    }
  }
  else if ((SHIBYTE(v167.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_266;
  }
  operator delete(v167.__r_.__value_.__l.__data_);
  if (SHIBYTE(v152.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_270;
  }
}

void sub_19E3CE93C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  *(void *)(v42 + 56) = v40;
  operator delete(v41);
  if (a14 < 0)
  {
    operator delete(__p);
    if (*(char *)(v43 - 137) < 0)
    {
LABEL_5:
      operator delete(*(void **)(v43 - 160));
      if (a20 < 0)
      {
LABEL_8:
        operator delete(a15);
        _Unwind_Resume(a1);
      }
LABEL_9:
      _Unwind_Resume(a1);
    }
  }
  else if (*(char *)(v43 - 137) < 0)
  {
    goto LABEL_5;
  }
  if (a20 < 0) {
    goto LABEL_8;
  }
  goto LABEL_9;
}

uint64_t LMLanguageModelSetDPStringRecorder(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(*(void *)(*(void *)(result + 24) + 232) + 359)) {
      operator new();
    }
  }
  return result;
}

void sub_19E3CECCC(_Unwind_Exception *a1)
{
  MEMORY[0x19F3BDCF0](v1, 0x10E0C40F5622EBCLL);
  _Unwind_Resume(a1);
}

uint64_t LMLanguageModelGetTestingParameters(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = (uint64_t *)(*(void *)(a1 + 24) + 456);
  }
  else if (atomic_load_explicit((atomic_uchar *volatile)&qword_1E9459F40, memory_order_acquire))
  {
    uint64_t v1 = &qword_1E9459F38;
  }
  else
  {
    uint64_t v1 = &qword_1E9459F38;
    if (__cxa_guard_acquire(&qword_1E9459F40))
    {
      qword_1E9459F38 = (uint64_t)CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      __cxa_guard_release(&qword_1E9459F40);
    }
  }
  return *v1;
}

void sub_19E3CEDA0(_Unwind_Exception *a1)
{
}

void sub_19E3CEEA0(void *a1)
{
  MEMORY[0x19F3BDCF0](v1, 0x10B2C4009D90DC4);
  sub_19E37B770(a1);
}

uint64_t sub_19E3CEEC8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v5 = (void *)*v2;
      int v6 = (void *)v2[3];
      if (v6)
      {
        v2[4] = v6;
        operator delete(v6);
      }
      operator delete(v2);
      uint64_t v2 = v5;
    }
    while (v5);
  }
  uint64_t v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_19E3CEF34(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      int v6 = (void *)*v2;
      uint64_t v7 = v2[3];
      if (v7)
      {
        uint64_t v8 = v2[4];
        uint64_t v5 = (void *)v2[3];
        if (v8 != v7)
        {
          do
          {
            uint64_t v10 = *(const void **)(v8 - 8);
            v8 -= 8;
            uint64_t v9 = v10;
            if (v10) {
              CFRelease(v9);
            }
          }
          while (v8 != v7);
          uint64_t v5 = (void *)v2[3];
        }
        v2[4] = v7;
        operator delete(v5);
      }
      operator delete(v2);
      uint64_t v2 = v6;
    }
    while (v6);
  }
  uint64_t v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

void sub_19E3CEFD8(uint64_t a1, unint64_t a2)
{
  if (!a2)
  {
    BOOL v15 = *(void **)a1;
    *(void *)a1 = 0;
    if (v15) {
      operator delete(v15);
    }
    *(void *)(a1 + 8) = 0;
    return;
  }
  if (a2 >> 61) {
    sub_19E37C2B8();
  }
  uint64_t v4 = operator new(8 * a2);
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v6 = 0;
  *(void *)(a1 + 8) = a2;
  do
    *(void *)(*(void *)a1 + 8 * v6++) = 0;
  while (a2 != v6);
  uint64_t v8 = a1 + 16;
  uint64_t v7 = *(void **)(a1 + 16);
  if (v7)
  {
    unint64_t v9 = v7[1];
    unint64_t v10 = a2 - 1;
    if ((a2 & (a2 - 1)) == 0)
    {
      uint64_t v11 = v9 & v10;
      *(void *)(*(void *)a1 + 8 * v11) = v8;
      while (1)
      {
        char v12 = (void *)*v7;
        if (!*v7) {
          break;
        }
        uint64_t v13 = v12[1] & v10;
        if (v13 == v11)
        {
          uint64_t v7 = (void *)*v7;
        }
        else if (*(void *)(*(void *)a1 + 8 * v13))
        {
          *uint64_t v7 = *v12;
          uint64_t v14 = 8 * v13;
          void *v12 = **(void **)(*(void *)a1 + v14);
          **(void **)(*(void *)a1 + v14) = v12;
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v13) = v7;
          uint64_t v7 = v12;
          uint64_t v11 = v13;
        }
      }
      return;
    }
    if (v9 >= a2) {
      v9 %= a2;
    }
    *(void *)(*(void *)a1 + 8 * v9) = v8;
    size_t v16 = (void *)*v7;
    if (*v7)
    {
      do
      {
        unint64_t v18 = v16[1];
        if (v18 >= a2) {
          v18 %= a2;
        }
        if (v18 != v9)
        {
          if (!*(void *)(*(void *)a1 + 8 * v18))
          {
            *(void *)(*(void *)a1 + 8 * v18) = v7;
            goto LABEL_26;
          }
          *uint64_t v7 = *v16;
          uint64_t v17 = 8 * v18;
          *size_t v16 = **(void **)(*(void *)a1 + v17);
          **(void **)(*(void *)a1 + v17) = v16;
          size_t v16 = v7;
        }
        unint64_t v18 = v9;
LABEL_26:
        uint64_t v7 = v16;
        size_t v16 = (void *)*v16;
        unint64_t v9 = v18;
      }
      while (v16);
    }
  }
}

uint64_t sub_19E3CF17C(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      uint64_t v3 = (void *)v2[3];
      if (v3)
      {
        v2[4] = v3;
        operator delete(v3);
      }
    }
    operator delete(v2);
  }
  return a1;
}

void *sub_19E3CF1CC(void *result, CFTypeRef *a2, CFTypeRef *a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >> 61) {
      sub_19E37C7C4();
    }
    uint64_t v7 = result;
    CFURLRef result = operator new(8 * a4);
    uint64_t v8 = result;
    *uint64_t v7 = result;
    v7[1] = result;
    std::string v7[2] = &result[a4];
    while (a2 != a3)
    {
      CFTypeRef v9 = *a2;
      if (*a2) {
        CFURLRef result = CFRetain(*a2);
      }
      *v8++ = v9;
      ++a2;
    }
    v7[1] = v8;
  }
  return result;
}

void sub_19E3CF270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t sub_19E3CF288(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      uint64_t v3 = v2[3];
      if (v3)
      {
        uint64_t v4 = v2[4];
        uint64_t v5 = (void *)v2[3];
        if (v4 != v3)
        {
          do
          {
            uint64_t v7 = *(const void **)(v4 - 8);
            v4 -= 8;
            uint64_t v6 = v7;
            if (v7) {
              CFRelease(v6);
            }
          }
          while (v4 != v3);
          uint64_t v5 = (void *)v2[3];
        }
        v2[4] = v3;
        operator delete(v5);
      }
    }
    operator delete(v2);
  }
  return a1;
}

void ***sub_19E3CF314(void ***a1)
{
  if (!*((unsigned char *)a1 + 8))
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (char *)**a1;
    if (v3)
    {
      uint64_t v4 = (char *)v2[1];
      uint64_t v5 = **a1;
      if (v4 != v3)
      {
        do
        {
          uint64_t v7 = (const void *)*((void *)v4 - 1);
          v4 -= 8;
          uint64_t v6 = v7;
          if (v7) {
            CFRelease(v6);
          }
        }
        while (v4 != v3);
        uint64_t v5 = **a1;
      }
      v2[1] = v3;
      operator delete(v5);
    }
  }
  return a1;
}

void *language_modeling::v1::LinguisticContext::LinguisticContext(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  *CFURLRef result = v2;
  return result;
}

{
  uint64_t v2;

  uint64_t v2 = *a2;
  *a2 = 0;
  *CFURLRef result = v2;
  return result;
}

uint64_t *language_modeling::v1::LinguisticContext::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    uint64_t v5 = sub_19E370104(v4);
    MEMORY[0x19F3BDCF0](v5, 0x10B2C4009D90DC4);
  }
  return a1;
}

void language_modeling::v1::LinguisticContext::pop_back(language_modeling::v1::LinguisticContext *this)
{
}

void language_modeling::v1::LinguisticContext::remove_first(uint64_t **this, unint64_t a2)
{
  if (!a2) {
    return;
  }
  uint64_t v2 = *this;
  uint64_t v3 = **this;
  uint64_t v4 = (*this)[1];
  unint64_t v5 = (v4 - v3) >> 5;
  if (v5 != ((*this)[4] - (*this)[3]) >> 5)
  {
    int v55 = "m_tokens.size() == m_sanitizedTokens.size()";
    int v54 = 62;
LABEL_82:
    int v41 = "remove_first";
    goto LABEL_78;
  }
  if (v5 < a2)
  {
    int v55 = "count <= m_tokens.size()";
    int v54 = 63;
    goto LABEL_82;
  }
  uint64_t v7 = 32 * a2;
  if (v3 + 32 * a2 != v4)
  {
    do
    {
      if (*(char *)(v3 + 23) < 0) {
        operator delete(*(void **)v3);
      }
      uint64_t v8 = (unsigned char *)(v3 + v7);
      *(_OWORD *)uint64_t v3 = *(_OWORD *)(v3 + 32 * a2);
      *(void *)(v3 + 16) = *(void *)(v3 + v7 + 16);
      v8[23] = 0;
      *uint64_t v8 = 0;
      *(_DWORD *)(v3 + 24) = *(_DWORD *)(v3 + v7 + 24);
      v3 += 32;
    }
    while (v3 + v7 != v4);
    uint64_t v4 = v2[1];
  }
  while (v4 != v3)
  {
    if (*(char *)(v4 - 9) < 0) {
      operator delete(*(void **)(v4 - 32));
    }
    v4 -= 32;
  }
  v2[1] = v3;
  uint64_t v9 = v2[3];
  uint64_t v10 = v2[4];
  uint64_t v11 = v9 + 32 * a2;
  if (v11 != v10)
  {
    do
    {
      if (*(char *)(v9 + 23) < 0) {
        operator delete(*(void **)v9);
      }
      char v12 = (unsigned char *)(v9 + v7);
      *(_OWORD *)uint64_t v9 = *(_OWORD *)(v9 + 32 * a2);
      *(void *)(v9 + 16) = *(void *)(v9 + v7 + 16);
      v12[23] = 0;
      unsigned char *v12 = 0;
      *(_DWORD *)(v9 + 24) = *(_DWORD *)(v9 + v7 + 24);
      v9 += 32;
    }
    while (v9 + v7 != v10);
    uint64_t v11 = v2[4];
  }
  while (v11 != v9)
  {
    if (*(char *)(v11 - 9) < 0) {
      operator delete(*(void **)(v11 - 32));
    }
    v11 -= 32;
  }
  v2[4] = v9;
  for (uint64_t i = (uint64_t **)v2[8]; i; uint64_t i = (uint64_t **)*i)
  {
    size_t v16 = i[3];
    uint64_t v17 = i[4];
    if (a2 < ((char *)v17 - (char *)v16) >> 2)
    {
      unint64_t v18 = (uint64_t *)((char *)v16 + 4 * a2);
      int64_t v19 = (char *)v17 - (char *)v18;
      if (v17 != v18) {
        memmove(i[3], v18, (char *)v17 - (char *)v18);
      }
      size_t v16 = (uint64_t *)((char *)v16 + v19);
    }
    i[4] = v16;
  }
  uint64_t v14 = (void *)v2[13];
  if (v14)
  {
    uint64_t v15 = 8 * a2;
    while (1)
    {
      CFNumberRef v21 = (char *)v14[3];
      __n128 v20 = (char *)v14[4];
      if (a2 >= (v20 - v21) >> 3)
      {
        if (v20 != v21)
        {
          do
          {
            size_t v26 = (const void *)*((void *)v20 - 1);
            v20 -= 8;
            int v25 = v26;
            if (v26) {
              CFRelease(v25);
            }
          }
          while (v20 != v21);
          __n128 v20 = v21;
        }
        goto LABEL_33;
      }
      int v22 = &v21[8 * a2];
      if (v22 == v20)
      {
        uint64_t v24 = (char *)v14[3];
        if (v20 != v21) {
          goto LABEL_58;
        }
        goto LABEL_33;
      }
      unint64_t v23 = v20 - &v21[v15] - 8;
      if (v23 < 0x38)
      {
        uint64_t v24 = (char *)v14[3];
        goto LABEL_54;
      }
      unint64_t v27 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
      if (v21 < &v27[8 * a2 + 8] && v22 < v27 + 8) {
        break;
      }
      uint64_t v29 = (v23 >> 3) + 1;
      uint64_t v30 = 8 * (v29 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v24 = &v21[v30];
      uint64_t v31 = v29 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        uint64_t v32 = &v21[v15];
        long long v33 = *(_OWORD *)v21;
        long long v34 = *((_OWORD *)v21 + 1);
        long long v35 = *(_OWORD *)&v21[v15 + 16];
        *(_OWORD *)CFNumberRef v21 = *(_OWORD *)&v21[8 * a2];
        *((_OWORD *)v21 + 1) = v35;
        v21 += 32;
        *(_OWORD *)uint64_t v32 = v33;
        *((_OWORD *)v32 + 1) = v34;
        v31 -= 4;
      }
      while (v31);
      if (v29 != (v29 & 0x3FFFFFFFFFFFFFFCLL))
      {
        v22 += v30;
        do
        {
LABEL_54:
          uint64_t v36 = *(void *)v24;
          *(void *)uint64_t v24 = *(void *)v22;
          v24 += 8;
          *(void *)int v22 = v36;
          v22 += 8;
        }
        while (v22 != v20);
      }
      __n128 v20 = (char *)v14[4];
      if (v20 != v24)
      {
        do
        {
LABEL_58:
          unint64_t v38 = (const void *)*((void *)v20 - 1);
          v20 -= 8;
          double v37 = v38;
          if (v38) {
            CFRelease(v37);
          }
        }
        while (v20 != v24);
        __n128 v20 = v24;
      }
LABEL_33:
      v14[4] = v20;
      uint64_t v14 = (void *)*v14;
      if (!v14) {
        goto LABEL_61;
      }
    }
    uint64_t v24 = (char *)v14[3];
    goto LABEL_54;
  }
LABEL_61:
  if (v2[19] != v2[24])
  {
    int v55 = "m_fragmentCaches.size() == m_cumulativeFragmentCounts.size()";
    int v54 = 74;
    goto LABEL_82;
  }
  __n128 v39 = (uint64_t *)v2[18];
  if (v39)
  {
    uint64_t v40 = (uint64_t)(v2 + 21);
    int v41 = "operator()";
    do
    {
      uint64_t v42 = sub_19E3F996C(v40, *((_DWORD *)v39 + 4), (_DWORD *)v39 + 4);
      uint64_t v43 = v42;
      size_t v45 = (unint64_t *)v42[3];
      int v44 = (unsigned char *)v42[4];
      if (a2 >= (v44 - (unsigned char *)v45) >> 3)
      {
        v42[4] = v45;
        v39[4] = v39[3];
      }
      else
      {
        unint64_t v46 = v45[a2 - 1];
        if (v46)
        {
          uint64_t v48 = v39[3];
          uint64_t v47 = (unsigned char *)v39[4];
          uint64_t v49 = (unsigned char *)(v48 + 4 * v46);
          int64_t v50 = v47 - v49;
          if (v47 != v49)
          {
            memmove((void *)v39[3], v49, v47 - v49);
            size_t v45 = (unint64_t *)v43[3];
            int v44 = (unsigned char *)v43[4];
          }
          v39[4] = v48 + v50;
        }
        uint64_t v51 = (char *)&v45[a2];
        uint64_t v52 = v44 - v51;
        uint64_t v53 = v45;
        if (v44 != v51)
        {
          memmove(v45, v51, v44 - v51);
          uint64_t v53 = (unint64_t *)v43[3];
        }
        v43[4] = (char *)v45 + v52;
        if (v53 != (unint64_t *)((char *)v45 + v52))
        {
          while (*v53 > v46)
          {
            *v53++ -= v46;
            if (v53 == (unint64_t *)((char *)v45 + v52)) {
              goto LABEL_65;
            }
          }
          int v54 = 84;
          int v55 = "fragmentCount > fragmentsToRemove";
LABEL_78:
          __assert_rtn(v41, "LinguisticContextImpl.cpp", v54, v55);
        }
      }
LABEL_65:
      __n128 v39 = (uint64_t *)*v39;
    }
    while (v39);
  }
}

void language_modeling::v1::LinguisticContext::clear(uint64_t **this)
{
  uint64_t v1 = *this;
  uint64_t v2 = **this;
  for (uint64_t i = (*this)[1]; i != v2; i -= 32)
  {
    if (*(char *)(i - 9) < 0) {
      operator delete(*(void **)(i - 32));
    }
  }
  v1[1] = v2;
  uint64_t v4 = v1[3];
  for (uint64_t j = v1[4]; j != v4; j -= 32)
  {
    if (*(char *)(j - 9) < 0) {
      operator delete(*(void **)(j - 32));
    }
  }
  v1[4] = v4;
  if (v1[9])
  {
    uint64_t v6 = (void *)v1[8];
    if (v6)
    {
      do
      {
        unint64_t v18 = (void *)*v6;
        int64_t v19 = (void *)v6[3];
        if (v19)
        {
          void v6[4] = v19;
          operator delete(v19);
        }
        operator delete(v6);
        uint64_t v6 = v18;
      }
      while (v18);
    }
    v1[8] = 0;
    uint64_t v7 = v1[7];
    if (v7)
    {
      for (uint64_t k = 0; k != v7; ++k)
        *(void *)(v1[6] + 8 * k) = 0;
    }
    v1[9] = 0;
  }
  if (v1[14])
  {
    uint64_t v9 = (void *)v1[13];
    if (v9)
    {
      do
      {
        int v25 = (void *)*v9;
        uint64_t v26 = v9[3];
        if (v26)
        {
          uint64_t v27 = v9[4];
          uint64_t v24 = (void *)v9[3];
          if (v27 != v26)
          {
            do
            {
              uint64_t v29 = *(const void **)(v27 - 8);
              v27 -= 8;
              uint64_t v28 = v29;
              if (v29) {
                CFRelease(v28);
              }
            }
            while (v27 != v26);
            uint64_t v24 = (void *)v9[3];
          }
          v9[4] = v26;
          operator delete(v24);
        }
        operator delete(v9);
        uint64_t v9 = v25;
      }
      while (v25);
    }
    v1[13] = 0;
    uint64_t v10 = v1[12];
    if (v10)
    {
      for (uint64_t m = 0; m != v10; ++m)
        *(void *)(v1[11] + 8 * m) = 0;
    }
    v1[14] = 0;
  }
  if (v1[19])
  {
    char v12 = (void *)v1[18];
    if (v12)
    {
      do
      {
        __n128 v20 = (void *)*v12;
        CFNumberRef v21 = (void *)v12[3];
        if (v21)
        {
          unint64_t v12[4] = v21;
          operator delete(v21);
        }
        operator delete(v12);
        char v12 = v20;
      }
      while (v20);
    }
    v1[18] = 0;
    uint64_t v13 = v1[17];
    if (v13)
    {
      for (uint64_t n = 0; n != v13; ++n)
        *(void *)(v1[16] + 8 * n) = 0;
    }
    v1[19] = 0;
  }
  if (v1[24])
  {
    uint64_t v15 = (void *)v1[23];
    if (v15)
    {
      do
      {
        int v22 = (void *)*v15;
        unint64_t v23 = (void *)v15[3];
        if (v23)
        {
          v15[4] = v23;
          operator delete(v23);
        }
        operator delete(v15);
        uint64_t v15 = v22;
      }
      while (v22);
    }
    v1[23] = 0;
    uint64_t v16 = v1[22];
    if (v16)
    {
      for (iuint64_t i = 0; ii != v16; ++ii)
        *(void *)(v1[21] + 8 * ii) = 0;
    }
    v1[24] = 0;
  }
}

uint64_t language_modeling::v1::LinguisticContext::tokenSpan(language_modeling::v1::LinguisticContext *this)
{
  return **(void **)this;
}

void language_modeling::v1::LinguisticContext::set_predominant_locale(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_19E39369C(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v7 = *(void *)(a2 + 16);
  }
  uint64_t v3 = (void **)(v2 + 208);
  if ((void **)(v2 + 208) != __p)
  {
    if (*(char *)(v2 + 231) < 0)
    {
      if (v7 >= 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      if (v7 >= 0) {
        size_t v5 = HIBYTE(v7);
      }
      else {
        size_t v5 = (size_t)__p[1];
      }
      sub_19E3C6D44(v3, v4, v5);
    }
    else if (v7 < 0)
    {
      sub_19E3C6C7C(v3, __p[0], (size_t)__p[1]);
    }
    else
    {
      *(_OWORD *)uint64_t v3 = *(_OWORD *)__p;
      *(void *)(v2 + 224) = v7;
    }
  }
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
}

void language_modeling::v1::Probability::Probability(language_modeling::v1::Probability *this, const language_modeling::v1::Probability *a2)
{
}

{
  operator new();
}

void language_modeling::v1::Probability::operator=()
{
}

void *language_modeling::v1::Probability::Probability(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  *CFURLRef result = v2;
  return result;
}

{
  uint64_t v2;

  uint64_t v2 = *a2;
  *a2 = 0;
  *CFURLRef result = v2;
  return result;
}

{
  uint64_t v2;

  uint64_t v2 = *a2;
  *a2 = 0;
  *CFURLRef result = v2;
  return result;
}

{
  uint64_t v2;

  uint64_t v2 = *a2;
  *a2 = 0;
  *CFURLRef result = v2;
  return result;
}

uint64_t *language_modeling::v1::Probability::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v4 = *a1;
  *a1 = v3;
  if (v4) {
    MEMORY[0x19F3BDCF0](v4, 0x1000C4065B674BELL);
  }
  return a1;
}

void language_modeling::v1::Probability::~Probability(language_modeling::v1::Probability *this)
{
  uint64_t v2 = *(void *)this;
  *(void *)this = 0;
  if (v2) {
    MEMORY[0x19F3BDCF0](v2, 0x1000C4065B674BELL);
  }
}

{
  uint64_t v2;

  uint64_t v2 = *(void *)this;
  *(void *)this = 0;
  if (v2) {
    MEMORY[0x19F3BDCF0](v2, 0x1000C4065B674BELL);
  }
}

double language_modeling::v1::Probability::log@<D0>(language_modeling::v1::Probability *this@<X0>, char *a2@<X8>)
{
  return sub_19E3C47D8(a2, *(void *)this);
}

double language_modeling::v1::Probability::probability(uint64_t *a1, int a2)
{
  if (a2 == 1)
  {
    uint64_t v2 = *a1 + 8;
  }
  else
  {
    if (a2) {
      __assert_rtn("probability", "Probability.cpp", 50, "false");
    }
    uint64_t v2 = *a1;
  }
  return *(double *)v2;
}

uint64_t language_modeling::v1::Probability::flags(language_modeling::v1::Probability *this)
{
  return *(unsigned int *)(*(void *)this + 104);
}

uint64_t LMVocabularyGetSharedVocabulary()
{
  if (qword_1EC0093C0 != -1) {
    dispatch_once(&qword_1EC0093C0, &unk_1EF0BEE18);
  }
  return qword_1EC0093B8;
}

void LMVocabularyCreate(const void *a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    CFRetain(a1);
    sub_19E36E590(&theDict, a1);
    if (!theDict)
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x19F3BD790](exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    CFStringRef Value = CFDictionaryGetValue(theDict, @"locale");
    uint64_t v3 = Value;
    if (Value)
    {
      CFTypeID v4 = CFGetTypeID(Value);
      if (v4 != CFStringGetTypeID())
      {
        CFTypeID v5 = CFGetTypeID(v3);
        if (v5 != CFLocaleGetTypeID())
        {
          if (qword_1EC0095B8 != -1) {
            dispatch_once(&qword_1EC0095B8, &unk_1EF0BEC40);
          }
          uint64_t v7 = qword_1EC0095B0;
          if (os_log_type_enabled((os_log_t)qword_1EC0095B0, OS_LOG_TYPE_ERROR))
          {
            int __p = 138412290;
            __p_4 = (void *)v3;
            _os_log_error_impl(&dword_19E36B000, v7, OS_LOG_TYPE_ERROR, "Invalid CFType for kLMVocabularyLocaleKey: %@", (uint8_t *)&__p, 0xCu);
          }
          __assert_rtn("getLocaleIdentifierFromOptions", "LanguageModeling_Vocabulary.cpp", 46, "false && \"Invalid CFType for kLMVocabularyLocaleKey\"");
        }
        MEMORY[0x19F3BCDE0](v3);
      }
    }
    if (theDict) {
      CFRelease(theDict);
    }
  }
  operator new();
}

void sub_19E3D0468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
}

void sub_19E3D060C()
{
}

void sub_19E3D0680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_19E3D06A4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19E3D04F4);
}

uint64_t LMVocabularySetLanguages(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v7 = 0;
  uint64_t v8 = &v7;
  uint64_t v9 = 0x2000000000;
  char v10 = 0;
  uint64_t v3 = *(NSObject **)(v2 + 168);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = sub_19E4DCFA4;
  block[3] = &unk_1E59A1068;
  block[4] = &v7;
  void block[5] = v2;
  block[6] = a2;
  dispatch_sync(v3, block);
  uint64_t v4 = *((unsigned __int8 *)v8 + 24);
  _Block_object_dispose(&v7, 8);
  return v4;
}

uint64_t LMVocabularyContainsLemma(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v7 = 0;
  uint64_t v8 = &v7;
  uint64_t v9 = 0x2000000000;
  char v10 = 0;
  uint64_t v3 = *(NSObject **)(v2 + 168);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = sub_19E4DCD60;
  block[3] = &unk_1E59A1090;
  block[4] = &v7;
  void block[5] = v2;
  block[6] = a2;
  dispatch_sync(v3, block);
  uint64_t v4 = *((unsigned __int8 *)v8 + 24);
  _Block_object_dispose(&v7, 8);
  return v4;
}

uint64_t LMVocabularyContainsLemmaForCharacters(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a1) {
    return 0;
  }
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v8 = 0;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x2000000000;
  char v11 = 0;
  uint64_t v4 = *(NSObject **)(v3 + 168);
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 0x40000000;
  std::string v7[2] = sub_19E4DCC74;
  v7[3] = &unk_1E59A10B8;
  v7[4] = &v8;
  void v7[5] = v3;
  v7[6] = a2;
  v7[7] = a3;
  dispatch_sync(v4, v7);
  uint64_t v5 = *((unsigned __int8 *)v9 + 24);
  _Block_object_dispose(&v8, 8);
  return v5;
}

uint64_t LMVocabularyGetTokenIDForLemma(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v7 = 0;
  uint64_t v8 = &v7;
  int v10 = 0;
  uint64_t v9 = 0x2000000000;
  uint64_t v3 = *(NSObject **)(v2 + 168);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  std::string v6[2] = sub_19E4DC8C0;
  v6[3] = &unk_1E59A1130;
  void v6[4] = &v7;
  v6[5] = v2;
  v6[6] = a2;
  v6[7] = 0;
  dispatch_sync(v3, v6);
  uint64_t v4 = *((unsigned int *)v8 + 6);
  _Block_object_dispose(&v7, 8);
  return v4;
}

uint64_t LMVocabularyGetClassForTokenID(uint64_t a1, int a2)
{
  if (!a1) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v8 = 0;
  uint64_t v9 = &v8;
  int v11 = 0;
  uint64_t v10 = 0x2000000000;
  uint64_t v3 = *(NSObject **)(v2 + 168);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = sub_19E4DC43C;
  block[3] = &unk_1E59A11A8;
  block[4] = &v8;
  void block[5] = v2;
  int v7 = a2;
  dispatch_sync(v3, block);
  uint64_t v4 = *((unsigned int *)v9 + 6);
  _Block_object_dispose(&v8, 8);
  return v4;
}

double LMVocabularyGetPriorProbabilityForTokenID(uint64_t a1, int a2)
{
  if (!a1) {
    return 0.0;
  }
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v8 = 0;
  uint64_t v9 = (double *)&v8;
  uint64_t v10 = 0x2000000000;
  uint64_t v11 = 0;
  uint64_t v3 = *(NSObject **)(v2 + 168);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = sub_19E4DC290;
  block[3] = &unk_1E59A11D0;
  block[4] = &v8;
  void block[5] = v2;
  int v7 = a2;
  dispatch_sync(v3, block);
  double v4 = v9[3];
  _Block_object_dispose(&v8, 8);
  return v4;
}

uint64_t LMVocabularyAddLemma(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5)
{
  if (!a1) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v11 = 0;
  char v12 = &v11;
  int v14 = 0;
  uint64_t v13 = 0x2000000000;
  uint64_t v6 = *(NSObject **)(v5 + 168);
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 0x40000000;
  void v9[2] = sub_19E4DCEB4;
  void v9[3] = &unk_1E59A12A8;
  v9[4] = &v11;
  v9[5] = v5;
  v9[6] = a2;
  int v10 = a3;
  *(double *)&v9[7] = a5;
  v9[8] = a4;
  dispatch_sync(v6, v9);
  uint64_t v7 = *((unsigned int *)v12 + 6);
  _Block_object_dispose(&v11, 8);
  return v7;
}

void LMVocabularyEnumerateInflectionsOfLemma(uint64_t a1, int a2, uint64_t a3)
{
  if (a1)
  {
    uint64_t v3 = *(void *)(a1 + 24);
    double v4 = *(NSObject **)(v3 + 168);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = sub_19E4DCBB0;
    block[3] = &unk_1E59A10E0;
    int v6 = a2;
    block[4] = a3;
    void block[5] = v3;
    dispatch_sync(v4, block);
  }
}

void LMVocabularyAddObserver(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    uint64_t v3 = *(void *)(a1 + 24);
    double v4 = *(NSObject **)(v3 + 168);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = sub_19E4DC00C;
    block[3] = &unk_1E59A1240;
    block[4] = v3;
    void block[5] = a2;
    void block[6] = a3;
    dispatch_sync(v4, block);
  }
}

void LMVocabularyRemoveObserver(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v2 = *(void *)(a1 + 24);
    uint64_t v3 = *(NSObject **)(v2 + 168);
    v4[0] = MEMORY[0x1E4F143A8];
    v4[1] = 0x40000000;
    v4[2] = sub_19E4DBF4C;
    void v4[3] = &unk_1E59A1260;
    v4[4] = v2;
    v4[5] = a2;
    dispatch_sync(v3, v4);
  }
}

void LMVocabularyCommitChanges(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = *(void *)(a1 + 24);
    uint64_t v2 = *(NSObject **)(v1 + 168);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = sub_19E4DBE8C;
    block[3] = &unk_1E59A1280;
    block[4] = v1;
    dispatch_sync(v2, block);
  }
}

void LMVocabularyReset(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = *(void *)(a1 + 24);
    uint64_t v2 = *(NSObject **)(v1 + 168);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = sub_19E4DBE0C;
    block[3] = &unk_1E59A12C8;
    block[4] = v1;
    dispatch_sync(v2, block);
  }
}

void *language_modeling::v1::LanguageModelSession::LanguageModelSession(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  *CFURLRef result = v2;
  return result;
}

{
  uint64_t v2;

  uint64_t v2 = *a2;
  *a2 = 0;
  *CFURLRef result = v2;
  return result;
}

void language_modeling::v1::LanguageModelSession::addPriorText(uint64_t *a1, const UInt8 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *a1;
  sub_19E371C70(__p, a2);
  (*(void (**)(uint64_t, void **, uint64_t, uint64_t, uint64_t))(*(void *)v8 + 88))(v8, __p, a3, a4, a5);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
}

void sub_19E3D0F80(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, long long buf)
{
  if (a2)
  {
    if (a15 < 0) {
      operator delete(__p);
    }
    if (a2 == 2)
    {
      unint64_t v18 = __cxa_begin_catch(a1);
      if (qword_1EC0095B8 != -1) {
        dispatch_once(&qword_1EC0095B8, &unk_1EF0BEC40);
      }
      int64_t v19 = qword_1EC0095B0;
      if (os_log_type_enabled((os_log_t)qword_1EC0095B0, OS_LOG_TYPE_ERROR))
      {
        uint64_t v20 = (*(uint64_t (**)(void *))(*(void *)v18 + 16))(v18);
        LODWORD(buf) = 136315394;
        *(void *)((char *)&buf + 4) = "addPriorText";
        WORD6(buf) = 2080;
        *(void *)((char *)&buf + 14) = v20;
        _os_log_error_impl(&dword_19E36B000, v19, OS_LOG_TYPE_ERROR, "%s: caught unexpected exception: %s", (uint8_t *)&buf, 0x16u);
      }
      __cxa_end_catch();
      JUMPOUT(0x19E3D0F50);
    }
    sub_19E37B770(a1);
  }
  _Unwind_Resume(a1);
}

void language_modeling::v1::LanguageModelSession::adaptToText(uint64_t *a1, const UInt8 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *a1;
  sub_19E371C70(__p, a2);
  (*(void (**)(uint64_t, void **, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, __p, a3, a4);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
}

void sub_19E3D1144(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, long long buf)
{
  if (a2)
  {
    if (a15 < 0) {
      operator delete(__p);
    }
    if (a2 == 2)
    {
      unint64_t v18 = __cxa_begin_catch(a1);
      if (qword_1EC0095B8 != -1) {
        dispatch_once(&qword_1EC0095B8, &unk_1EF0BEC40);
      }
      int64_t v19 = qword_1EC0095B0;
      if (os_log_type_enabled((os_log_t)qword_1EC0095B0, OS_LOG_TYPE_ERROR))
      {
        uint64_t v20 = (*(uint64_t (**)(void *))(*(void *)v18 + 16))(v18);
        LODWORD(buf) = 136315394;
        *(void *)((char *)&buf + 4) = "adaptToText";
        WORD6(buf) = 2080;
        *(void *)((char *)&buf + 14) = v20;
        _os_log_error_impl(&dword_19E36B000, v19, OS_LOG_TYPE_ERROR, "%s: caught unexpected exception: %s", (uint8_t *)&buf, 0x16u);
      }
      __cxa_end_catch();
      JUMPOUT(0x19E3D1114);
    }
    sub_19E37B770(a1);
  }
  _Unwind_Resume(a1);
}

void language_modeling::v1::LanguageModelSession::adaptToToken(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a1;
  sub_19E371C70(__p, (const UInt8 *)a2);
  int v8 = *(_DWORD *)(a2 + 24);
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v5 + 104))(v5, __p, a3);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_19E3D130C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, long long buf)
{
  if (a2)
  {
    if (a14 < 0) {
      operator delete(__p);
    }
    if (a2 == 2)
    {
      unint64_t v18 = __cxa_begin_catch(a1);
      if (qword_1EC0095B8 != -1) {
        dispatch_once(&qword_1EC0095B8, &unk_1EF0BEC40);
      }
      int64_t v19 = qword_1EC0095B0;
      if (os_log_type_enabled((os_log_t)qword_1EC0095B0, OS_LOG_TYPE_ERROR))
      {
        uint64_t v20 = (*(uint64_t (**)(void *))(*(void *)v18 + 16))(v18);
        LODWORD(buf) = 136315394;
        *(void *)((char *)&buf + 4) = "adaptToToken";
        WORD6(buf) = 2080;
        *(void *)((char *)&buf + 14) = v20;
        _os_log_error_impl(&dword_19E36B000, v19, OS_LOG_TYPE_ERROR, "%s: caught unexpected exception: %s", (uint8_t *)&buf, 0x16u);
      }
      __cxa_end_catch();
      JUMPOUT(0x19E3D12DCLL);
    }
    sub_19E37B770(a1);
  }
  _Unwind_Resume(a1);
}

void language_modeling::v1::LanguageModelSession::unAdaptToToken(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a1;
  sub_19E371C70(__p, (const UInt8 *)a2);
  int v8 = *(_DWORD *)(a2 + 24);
  (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v5 + 112))(v5, __p, a3);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_19E3D14D4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, long long buf)
{
  if (a2)
  {
    if (a14 < 0) {
      operator delete(__p);
    }
    if (a2 == 2)
    {
      unint64_t v18 = __cxa_begin_catch(a1);
      if (qword_1EC0095B8 != -1) {
        dispatch_once(&qword_1EC0095B8, &unk_1EF0BEC40);
      }
      int64_t v19 = qword_1EC0095B0;
      if (os_log_type_enabled((os_log_t)qword_1EC0095B0, OS_LOG_TYPE_ERROR))
      {
        uint64_t v20 = (*(uint64_t (**)(void *))(*(void *)v18 + 16))(v18);
        LODWORD(buf) = 136315394;
        *(void *)((char *)&buf + 4) = "unAdaptToToken";
        WORD6(buf) = 2080;
        *(void *)((char *)&buf + 14) = v20;
        _os_log_error_impl(&dword_19E36B000, v19, OS_LOG_TYPE_ERROR, "%s: caught unexpected exception: %s", (uint8_t *)&buf, 0x16u);
      }
      __cxa_end_catch();
      JUMPOUT(0x19E3D14A4);
    }
    sub_19E37B770(a1);
  }
  _Unwind_Resume(a1);
}

void language_modeling::v1::LanguageModelSession::registerNegativeEvidence(uint64_t *a1, const UInt8 *a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  sub_19E371C70(__p, a2);
  (*(void (**)(uint64_t, void **))(*(void *)v2 + 120))(v2, __p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
}

void sub_19E3D1680(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, long long buf)
{
  if (a2)
  {
    if (a15 < 0) {
      operator delete(__p);
    }
    if (a2 == 2)
    {
      unint64_t v18 = __cxa_begin_catch(a1);
      if (qword_1EC0095B8 != -1) {
        dispatch_once(&qword_1EC0095B8, &unk_1EF0BEC40);
      }
      int64_t v19 = qword_1EC0095B0;
      if (os_log_type_enabled((os_log_t)qword_1EC0095B0, OS_LOG_TYPE_ERROR))
      {
        uint64_t v20 = (*(uint64_t (**)(void *))(*(void *)v18 + 16))(v18);
        LODWORD(buf) = 136315394;
        *(void *)((char *)&buf + 4) = "registerNegativeEvidence";
        WORD6(buf) = 2080;
        *(void *)((char *)&buf + 14) = v20;
        _os_log_error_impl(&dword_19E36B000, v19, OS_LOG_TYPE_ERROR, "%s: caught unexpected exception: %s", (uint8_t *)&buf, 0x16u);
      }
      __cxa_end_catch();
      JUMPOUT(0x19E3D1654);
    }
    sub_19E37B770(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t language_modeling::v1::LanguageModelSession::canReasonAbout(void *a1)
{
  return (*(uint64_t (**)(void))(*(void *)*a1 + 16))(*a1);
}

void language_modeling::v1::LanguageModelSession::detailedConditionalProbability()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_19E3D1A24(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, long long buf)
{
  if (a2)
  {
    if (a14 < 0) {
      operator delete(__p);
    }
    if (a2 == 2)
    {
      uint64_t v20 = __cxa_begin_catch(a1);
      if (qword_1EC0095B8 != -1) {
        dispatch_once(&qword_1EC0095B8, &unk_1EF0BEC40);
      }
      CFNumberRef v21 = qword_1EC0095B0;
      if (os_log_type_enabled((os_log_t)qword_1EC0095B0, OS_LOG_TYPE_ERROR))
      {
        uint64_t v22 = (*(uint64_t (**)(void *))(*(void *)v20 + 16))(v20);
        LODWORD(buf) = 136315394;
        *(void *)((char *)&buf + 4) = "detailedConditionalProbability";
        WORD6(buf) = 2080;
        *(void *)((char *)&buf + 14) = v22;
        _os_log_error_impl(&dword_19E36B000, v21, OS_LOG_TYPE_ERROR, "%s: caught unexpected exception: %s", (uint8_t *)&buf, 0x16u);
      }
      void *v17 = v16;
      __cxa_end_catch();
      JUMPOUT(0x19E3D19F0);
    }
    sub_19E37B770(a1);
  }
  _Unwind_Resume(a1);
}

void language_modeling::v1::LanguageModelSession::detailedConditionalProbability(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  int __p = 0;
  p_p = &__p;
  char v18 = 0;
  uint64_t v7 = v6 - v5;
  if (v6 != v5)
  {
    if (v7 < 0) {
      sub_19E37C7C4();
    }
    int v8 = (char *)operator new(v6 - v5);
    uint64_t v9 = 0;
    int __p = v8;
    uint64_t v15 = v8;
    uint64_t v16 = &v8[32 * (v7 >> 5)];
    do
    {
      uint64_t v10 = v5 + v9;
      sub_19E371C70(&v8[v9], (const UInt8 *)(v5 + v9));
      *(_DWORD *)&v8[v9 + 24] = *(_DWORD *)(v5 + v9 + 24);
      v9 += 32;
    }
    while (v10 + 32 != v6);
    uint64_t v15 = &v8[v9];
  }
  (*(void (**)(void, void **, uint64_t))(*(void *)*a1 + 40))(*a1, &__p, a3);
  uint64_t v11 = (void **)__p;
  if (__p)
  {
    char v12 = (void **)v15;
    uint64_t v13 = __p;
    if (v15 != __p)
    {
      do
      {
        if (*((char *)v12 - 9) < 0) {
          operator delete(*(v12 - 4));
        }
        v12 -= 4;
      }
      while (v12 != v11);
      uint64_t v13 = __p;
    }
    uint64_t v15 = (char *)v11;
    operator delete(v13);
  }
}

void sub_19E3D1CB4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long buf)
{
  if (a2)
  {
    if (a2 == 2)
    {
      int v14 = __cxa_begin_catch(a1);
      if (qword_1EC0095B8 != -1) {
        dispatch_once(&qword_1EC0095B8, &unk_1EF0BEC40);
      }
      uint64_t v15 = qword_1EC0095B0;
      if (os_log_type_enabled((os_log_t)qword_1EC0095B0, OS_LOG_TYPE_ERROR))
      {
        uint64_t v16 = (*(uint64_t (**)(void *))(*(void *)v14 + 16))(v14);
        LODWORD(buf) = 136315394;
        *(void *)((char *)&buf + 4) = "detailedConditionalProbability";
        WORD6(buf) = 2080;
        *(void *)((char *)&buf + 14) = v16;
        _os_log_error_impl(&dword_19E36B000, v15, OS_LOG_TYPE_ERROR, "%s: caught unexpected exception: %s", (uint8_t *)&buf, 0x16u);
      }
      *uint64_t v13 = 0;
      v13[1] = 0;
      std::string v13[2] = 0;
      __cxa_end_catch();
      JUMPOUT(0x19E3D1C28);
    }
    sub_19E37B770(a1);
  }
  _Unwind_Resume(a1);
}

void language_modeling::v1::LanguageModelSession::detailedConditionalProbability(void *a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  unint64_t v28 = 0;
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  while (v5 != v6)
  {
    int __p = 0;
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    sub_19E3C38BC(&__p, *v5, v5[1], (v5[1] - *v5) >> 5);
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    unint64_t v23 = 0;
    sub_19E3D213C(&v23, (uint64_t)__p, (uint64_t)v30, ((char *)v30 - (unsigned char *)__p) >> 5);
    int v8 = v27;
    if ((unint64_t)v27 >= v28)
    {
      uint64_t v9 = sub_19E3D2244((void ***)&v26, (uint64_t)v23, (uint64_t)v24);
    }
    else
    {
      *(void *)uint64_t v27 = 0;
      *((void *)v8 + 1) = 0;
      *((void *)v8 + 2) = 0;
      sub_19E3C39E4(v8, (uint64_t)v23, (uint64_t)v24, ((char *)v24 - (unsigned char *)v23) >> 5);
      uint64_t v9 = v8 + 24;
    }
    uint64_t v27 = v9;
    uint64_t v10 = (void **)v23;
    if (v23)
    {
      uint64_t v11 = v24;
      char v12 = v23;
      if (v24 != v23)
      {
        do
        {
          if (*((char *)v11 - 9) < 0) {
            operator delete(*(v11 - 4));
          }
          v11 -= 4;
        }
        while (v11 != v10);
        char v12 = v23;
      }
      uint64_t v24 = v10;
      operator delete(v12);
    }
    uint64_t v13 = (void **)__p;
    if (__p)
    {
      int v14 = v30;
      uint64_t v7 = __p;
      if (v30 != __p)
      {
        do
        {
          if (*((char *)v14 - 9) < 0) {
            operator delete(*(v14 - 4));
          }
          v14 -= 4;
        }
        while (v14 != v13);
        uint64_t v7 = __p;
      }
      uint64_t v30 = v13;
      operator delete(v7);
    }
    v5 += 3;
  }
  (*(void (**)(void, void **, uint64_t))(*(void *)*a1 + 48))(*a1, &v26, a3);
  uint64_t v15 = (void **)v26;
  if (v26)
  {
    uint64_t v16 = (void **)v27;
    uint64_t v17 = v26;
    if (v27 != v26)
    {
      char v18 = (void **)v27;
      do
      {
        CFNumberRef v21 = (void **)*(v18 - 3);
        v18 -= 3;
        uint64_t v20 = v21;
        if (v21)
        {
          uint64_t v22 = (void **)*(v16 - 2);
          uint64_t v19 = v20;
          if (v22 != v20)
          {
            do
            {
              if (*((char *)v22 - 9) < 0) {
                operator delete(*(v22 - 4));
              }
              v22 -= 4;
            }
            while (v22 != v20);
            uint64_t v19 = *v18;
          }
          *(v16 - 2) = v20;
          operator delete(v19);
        }
        uint64_t v16 = v18;
      }
      while (v18 != v15);
      uint64_t v17 = v26;
    }
    uint64_t v27 = (char *)v15;
    operator delete(v17);
  }
}

void sub_19E3D213C(void *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >> 59) {
      sub_19E37C7C4();
    }
    int v8 = (char *)operator new(32 * a4);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[32 * a4];
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t v10 = a2 + v9;
        sub_19E371C70(&v8[v9], (const UInt8 *)(a2 + v9));
        *(_DWORD *)&v8[v9 + 24] = *(_DWORD *)(a2 + v9 + 24);
        v9 += 32;
      }
      while (v10 + 32 != a3);
      v8 += v9;
    }
    a1[1] = v8;
  }
}

void sub_19E3D21FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

char *sub_19E3D2244(void ***a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (a1[1] - *a1);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_19E37C7C4();
  }
  if (0x5555555555555556 * (a1[2] - *a1) > v4) {
    unint64_t v4 = 0x5555555555555556 * (a1[2] - *a1);
  }
  if (0xAAAAAAAAAAAAAAABLL * (a1[2] - *a1) >= 0x555555555555555) {
    unint64_t v8 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v8 = v4;
  }
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL) {
      sub_19E37C2B8();
    }
    uint64_t v9 = (char *)operator new(24 * v8);
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v22 = &v9[24 * v3];
  unint64_t v23 = (void **)&v9[24 * v8];
  *((void *)v22 + 1) = 0;
  *((void *)v22 + 2) = 0;
  *(void *)uint64_t v22 = 0;
  sub_19E3C39E4(v22, a2, a3, (a3 - a2) >> 5);
  uint64_t v10 = (void **)v22;
  uint64_t v11 = (void **)(v22 + 24);
  char v12 = *a1;
  uint64_t v13 = a1[1];
  if (v13 == *a1)
  {
    *a1 = (void **)v22;
    a1[1] = v11;
    a1[2] = v23;
  }
  else
  {
    do
    {
      *(v10 - 3) = 0;
      *(v10 - 2) = 0;
      v10 -= 3;
      std::string v10[2] = 0;
      long long v14 = *(_OWORD *)(v13 - 3);
      v13 -= 3;
      *(_OWORD *)uint64_t v10 = v14;
      std::string v10[2] = v13[2];
      *uint64_t v13 = 0;
      v13[1] = 0;
      std::string v13[2] = 0;
    }
    while (v13 != v12);
    uint64_t v13 = *a1;
    uint64_t v15 = a1[1];
    *a1 = v10;
    a1[1] = v11;
    a1[2] = v23;
    if (v15 != v13)
    {
      uint64_t v16 = v15;
      do
      {
        uint64_t v19 = (void **)*(v16 - 3);
        v16 -= 3;
        char v18 = v19;
        if (v19)
        {
          uint64_t v20 = (void **)*(v15 - 2);
          uint64_t v17 = v18;
          if (v20 != v18)
          {
            do
            {
              if (*((char *)v20 - 9) < 0) {
                operator delete(*(v20 - 4));
              }
              v20 -= 4;
            }
            while (v20 != v18);
            uint64_t v17 = *v16;
          }
          *(v15 - 2) = v18;
          operator delete(v17);
        }
        uint64_t v15 = v16;
      }
      while (v16 != v13);
    }
  }
  if (v13) {
    operator delete(v13);
  }
  return v22 + 24;
}

void sub_19E3D240C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E3D2420((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19E3D2420(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  unint64_t v3 = *(void ***)(a1 + 16);
  if (v3 != v2)
  {
    unint64_t v4 = *(void ***)(a1 + 16);
    do
    {
      uint64_t v7 = (void **)*(v4 - 3);
      v4 -= 3;
      uint64_t v6 = v7;
      *(void *)(a1 + 16) = v4;
      if (v7)
      {
        unint64_t v8 = (void **)*(v3 - 2);
        uint64_t v5 = v6;
        if (v8 != v6)
        {
          do
          {
            if (*((char *)v8 - 9) < 0) {
              operator delete(*(v8 - 4));
            }
            v8 -= 4;
          }
          while (v8 != v6);
          uint64_t v5 = *v4;
        }
        *(v3 - 2) = v6;
        operator delete(v5);
        unint64_t v4 = *(void ***)(a1 + 16);
      }
      unint64_t v3 = v4;
    }
    while (v4 != v2);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void language_modeling::v1::LanguageModelSession::detailedConditionalProbability(void *a1, uint64_t **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  unint64_t v28 = 0;
  uint64_t v29 = 0;
  unint64_t v30 = 0;
  uint64_t v7 = *a2;
  unint64_t v8 = a2[1];
  while (v7 != v8)
  {
    int __p = 0;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    sub_19E3C38BC(&__p, *v7, v7[1], (v7[1] - *v7) >> 5);
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    uint64_t v25 = 0;
    sub_19E3D213C(&v25, (uint64_t)__p, (uint64_t)v32, ((char *)v32 - (unsigned char *)__p) >> 5);
    uint64_t v10 = v29;
    if ((unint64_t)v29 >= v30)
    {
      uint64_t v11 = sub_19E3D2244((void ***)&v28, (uint64_t)v25, (uint64_t)v26);
    }
    else
    {
      *(void *)uint64_t v29 = 0;
      *((void *)v10 + 1) = 0;
      *((void *)v10 + 2) = 0;
      sub_19E3C39E4(v10, (uint64_t)v25, (uint64_t)v26, ((char *)v26 - (unsigned char *)v25) >> 5);
      uint64_t v11 = v10 + 24;
    }
    uint64_t v29 = v11;
    char v12 = (void **)v25;
    if (v25)
    {
      uint64_t v13 = v26;
      long long v14 = v25;
      if (v26 != v25)
      {
        do
        {
          if (*((char *)v13 - 9) < 0) {
            operator delete(*(v13 - 4));
          }
          v13 -= 4;
        }
        while (v13 != v12);
        long long v14 = v25;
      }
      uint64_t v26 = v12;
      operator delete(v14);
    }
    uint64_t v15 = (void **)__p;
    if (__p)
    {
      uint64_t v16 = v32;
      uint64_t v9 = __p;
      if (v32 != __p)
      {
        do
        {
          if (*((char *)v16 - 9) < 0) {
            operator delete(*(v16 - 4));
          }
          v16 -= 4;
        }
        while (v16 != v15);
        uint64_t v9 = __p;
      }
      uint64_t v32 = v15;
      operator delete(v9);
    }
    v7 += 3;
  }
  (*(void (**)(void, void **, uint64_t, uint64_t))(*(void *)*a1 + 56))(*a1, &v28, a3, a4);
  uint64_t v17 = (void **)v28;
  if (v28)
  {
    char v18 = (void **)v29;
    uint64_t v19 = v28;
    if (v29 != v28)
    {
      uint64_t v20 = (void **)v29;
      do
      {
        unint64_t v23 = (void **)*(v20 - 3);
        v20 -= 3;
        uint64_t v22 = v23;
        if (v23)
        {
          uint64_t v24 = (void **)*(v18 - 2);
          CFNumberRef v21 = v22;
          if (v24 != v22)
          {
            do
            {
              if (*((char *)v24 - 9) < 0) {
                operator delete(*(v24 - 4));
              }
              v24 -= 4;
            }
            while (v24 != v22);
            CFNumberRef v21 = *v20;
          }
          *(v18 - 2) = v22;
          operator delete(v21);
        }
        char v18 = v20;
      }
      while (v20 != v17);
      uint64_t v19 = v28;
    }
    uint64_t v29 = (char *)v17;
    operator delete(v19);
  }
}

void language_modeling::v1::LanguageModelSession::conditionalProbability()
{
}

void language_modeling::v1::LanguageModelSession::combinedConditionalProbability()
{
}

void language_modeling::v1::LanguageModelSession::conditionalProbability(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, void **a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  language_modeling::v1::LanguageModelSession::detailedConditionalProbability(a1, a2, a3);
  uint64_t v5 = __p;
  if (__p != v26)
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t v9 = **v5;
      uint64_t v8 = (*v5)[1];
      int v10 = *((_DWORD *)*v5 + 26);
      unint64_t v11 = (unint64_t)a4[2];
      if ((unint64_t)v6 < v11)
      {
        *(void *)uint64_t v6 = v9;
        *((void *)v6 + 1) = v8;
        uint64_t v7 = v6 + 24;
        *((_DWORD *)v6 + 4) = v10;
      }
      else
      {
        char v12 = (char *)*a4;
        unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((v6 - (unsigned char *)*a4) >> 3);
        unint64_t v14 = v13 + 1;
        if (v13 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_19E37C7C4();
        }
        unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (void)v12) >> 3);
        if (2 * v15 > v14) {
          unint64_t v14 = 2 * v15;
        }
        if (v15 >= 0x555555555555555) {
          unint64_t v16 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v16 = v14;
        }
        if (v16)
        {
          if (v16 > 0xAAAAAAAAAAAAAAALL) {
            sub_19E37C2B8();
          }
          uint64_t v17 = (char *)operator new(24 * v16);
        }
        else
        {
          uint64_t v17 = 0;
        }
        char v18 = &v17[24 * v13];
        *(void *)char v18 = v9;
        *((void *)v18 + 1) = v8;
        *((_DWORD *)v18 + 4) = v10;
        uint64_t v19 = v18;
        if (v6 != v12)
        {
          do
          {
            long long v20 = *(_OWORD *)(v6 - 24);
            *((void *)v19 - 1) = *((void *)v6 - 1);
            *(_OWORD *)(v19 - 24) = v20;
            v19 -= 24;
            v6 -= 24;
          }
          while (v6 != v12);
          uint64_t v6 = (char *)*a4;
        }
        uint64_t v7 = v18 + 24;
        *a4 = v19;
        a4[1] = v18 + 24;
        a4[2] = &v17[24 * v16];
        if (v6) {
          operator delete(v6);
        }
      }
      a4[1] = v7;
      ++v5;
      uint64_t v6 = v7;
    }
    while (v5 != v26);
    uint64_t v5 = __p;
  }
  if (v5)
  {
    CFNumberRef v21 = v26;
    uint64_t v22 = v5;
    if (v26 != v5)
    {
      do
      {
        uint64_t v24 = (uint64_t)*--v21;
        uint64_t v23 = v24;
        void *v21 = 0;
        if (v24) {
          MEMORY[0x19F3BDCF0](v23, 0x1000C4065B674BELL);
        }
      }
      while (v21 != v5);
      uint64_t v22 = __p;
    }
    operator delete(v22);
  }
}

void language_modeling::v1::LanguageModelSession::conditionalProbability(void *a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X2>, char **a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  language_modeling::v1::LanguageModelSession::detailedConditionalProbability(a1, a2, a3);
  uint64_t v5 = __p;
  if (__p != v60)
  {
    BOOL v57 = a4;
    do
    {
      uint64_t v6 = (uint64_t **)*v5;
      uint64_t v7 = (void **)v5[1];
      long long v58 = v5;
      if (*v5 == v7)
      {
        uint64_t v8 = 0;
        uint64_t v9 = 0;
      }
      else
      {
        uint64_t v8 = 0;
        uint64_t v9 = 0;
        int v10 = 0;
        do
        {
          uint64_t v12 = **v6;
          uint64_t v11 = (*v6)[1];
          int v13 = *((_DWORD *)*v6 + 26);
          if (v9 < v10)
          {
            *(void *)uint64_t v9 = v12;
            *((void *)v9 + 1) = v11;
            *((_DWORD *)v9 + 4) = v13;
            v9 += 24;
          }
          else
          {
            unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((v9 - v8) >> 3) + 1;
            if (v14 > 0xAAAAAAAAAAAAAAALL) {
              sub_19E37C7C4();
            }
            if (0x5555555555555556 * ((v10 - v8) >> 3) > v14) {
              unint64_t v14 = 0x5555555555555556 * ((v10 - v8) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((v10 - v8) >> 3) >= 0x555555555555555) {
              unint64_t v15 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v15 = v14;
            }
            if (v15)
            {
              if (v15 > 0xAAAAAAAAAAAAAAALL) {
                sub_19E37C2B8();
              }
              unint64_t v16 = (char *)operator new(24 * v15);
            }
            else
            {
              unint64_t v16 = 0;
            }
            uint64_t v17 = &v16[8 * ((v9 - v8) >> 3)];
            *(void *)uint64_t v17 = v12;
            *((void *)v17 + 1) = v11;
            *((_DWORD *)v17 + 4) = v13;
            if (v9 == v8)
            {
              long long v20 = &v16[8 * ((v9 - v8) >> 3)];
            }
            else
            {
              char v18 = &v16[8 * ((v9 - v8) >> 3)];
              do
              {
                long long v19 = *(_OWORD *)(v9 - 24);
                long long v20 = v18 - 24;
                *((void *)v18 - 1) = *((void *)v9 - 1);
                *(_OWORD *)(v18 - 24) = v19;
                v9 -= 24;
                v18 -= 24;
              }
              while (v9 != v8);
            }
            int v10 = &v16[24 * v15];
            uint64_t v9 = v17 + 24;
            if (v8) {
              operator delete(v8);
            }
            uint64_t v8 = v20;
          }
          ++v6;
        }
        while (v6 != v7);
      }
      CFNumberRef v21 = v57;
      uint64_t v23 = v57[1];
      unint64_t v22 = (unint64_t)v57[2];
      if ((unint64_t)v23 >= v22)
      {
        uint64_t v29 = *v57;
        unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * ((v23 - *v57) >> 3);
        unint64_t v31 = v30 + 1;
        if (v30 + 1 > 0xAAAAAAAAAAAAAAALL) {
          sub_19E37C7C4();
        }
        unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - (void)v29) >> 3);
        if (2 * v32 > v31) {
          unint64_t v31 = 2 * v32;
        }
        if (v32 >= 0x555555555555555) {
          unint64_t v33 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v33 = v31;
        }
        if (v33)
        {
          if (v33 > 0xAAAAAAAAAAAAAAALL) {
            sub_19E37C2B8();
          }
          uint64_t v34 = (char *)operator new(24 * v33);
        }
        else
        {
          uint64_t v34 = 0;
        }
        long long v35 = &v34[24 * v30];
        uint64_t v36 = &v34[24 * v33];
        *((void *)v35 + 1) = 0;
        *((void *)&v61 + 1) = v36;
        *((void *)v35 + 2) = 0;
        *(void *)long long v35 = 0;
        int64_t v37 = v9 - v8;
        if (v37)
        {
          int v55 = &v34[24 * v33];
          double v56 = (char **)(v35 + 8);
          if (0xAAAAAAAAAAAAAAABLL * (v37 >> 3) > 0xAAAAAAAAAAAAAAALL) {
            sub_19E37C7C4();
          }
          unint64_t v38 = (char *)operator new(v37);
          *(void *)long long v35 = v38;
          *double v56 = v38;
          __n128 v39 = &v38[8 * (v37 >> 3)];
          *((void *)v35 + 2) = v39;
          memcpy(v38, v8, v37);
          *double v56 = v39;
          uint64_t v36 = v55;
        }
        unint64_t v28 = v35 + 24;
        *(void *)&long long v61 = v35 + 24;
        if (v23 == v29)
        {
          CFNumberRef v21 = v57;
          uint64_t v25 = v58;
          void *v57 = v35;
          v57[1] = v28;
          v57[2] = v36;
        }
        else
        {
          do
          {
            uint64_t v40 = v35;
            *((void *)v35 - 2) = 0;
            *((void *)v35 - 1) = 0;
            long long v41 = *(_OWORD *)(v23 - 24);
            v23 -= 24;
            *(_OWORD *)(v35 - 24) = v41;
            v35 -= 24;
            *((void *)v40 - 1) = *((void *)v23 + 2);
            *(void *)uint64_t v23 = 0;
            *((void *)v23 + 1) = 0;
            *((void *)v23 + 2) = 0;
          }
          while (v23 != v29);
          CFNumberRef v21 = v57;
          uint64_t v25 = v58;
          uint64_t v23 = *v57;
          uint64_t v42 = v57[1];
          void *v57 = v35;
          *(_OWORD *)(v57 + 1) = v61;
          unint64_t v28 = (char *)v61;
          if (v42 != v23)
          {
            uint64_t v43 = v42;
            do
            {
              size_t v45 = (void *)*((void *)v43 - 3);
              v43 -= 24;
              int v44 = v45;
              if (v45)
              {
                *((void *)v42 - 2) = v44;
                operator delete(v44);
              }
              uint64_t v42 = v43;
            }
            while (v43 != v23);
          }
        }
        if (v23) {
          operator delete(v23);
        }
      }
      else
      {
        *(void *)uint64_t v23 = 0;
        *((void *)v23 + 1) = 0;
        *((void *)v23 + 2) = 0;
        int64_t v24 = v9 - v8;
        uint64_t v25 = v58;
        if (v24)
        {
          if (0xAAAAAAAAAAAAAAABLL * (v24 >> 3) > 0xAAAAAAAAAAAAAAALL) {
            sub_19E37C7C4();
          }
          uint64_t v26 = (char *)operator new(v24);
          *(void *)uint64_t v23 = v26;
          *((void *)v23 + 1) = v26;
          uint64_t v27 = &v26[8 * (v24 >> 3)];
          *((void *)v23 + 2) = v27;
          memcpy(v26, v8, v24);
          *((void *)v23 + 1) = v27;
        }
        unint64_t v28 = v23 + 24;
      }
      v21[1] = v28;
      if (v8) {
        operator delete(v8);
      }
      uint64_t v5 = v25 + 3;
    }
    while (v5 != v60);
    uint64_t v5 = __p;
  }
  if (v5)
  {
    unint64_t v46 = v60;
    uint64_t v47 = v5;
    if (v60 != v5)
    {
      uint64_t v48 = v60;
      do
      {
        uint64_t v51 = *(v48 - 3);
        v48 -= 3;
        int64_t v50 = v51;
        if (v51)
        {
          uint64_t v52 = *(v46 - 2);
          uint64_t v49 = v50;
          if (v52 != v50)
          {
            do
            {
              uint64_t v54 = *--v52;
              uint64_t v53 = v54;
              *uint64_t v52 = 0;
              if (v54) {
                MEMORY[0x19F3BDCF0](v53, 0x1000C4065B674BELL);
              }
            }
            while (v52 != v50);
            uint64_t v49 = *v48;
          }
          *(v46 - 2) = v50;
          operator delete(v49);
        }
        unint64_t v46 = v48;
      }
      while (v48 != v5);
      uint64_t v47 = __p;
    }
    operator delete(v47);
  }
}

void sub_19E3D2F30(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  uint64_t v12 = *v10;
  if (*v10)
  {
    *a4 = v12;
    operator delete(v12);
  }
  sub_19E3D2F94((uint64_t)va);
  sub_19E37B770(a1);
}

uint64_t sub_19E3D2F94(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        uint64_t v5 = v2 - 24;
        unint64_t v4 = *(void **)(v2 - 24);
        *(void *)(a1 + 16) = v2 - 24;
        if (!v4) {
          break;
        }
        *(void *)(v2 - 16) = v4;
        operator delete(v4);
        uint64_t v2 = *(void *)(a1 + 16);
        if (v2 == v3) {
          goto LABEL_6;
        }
      }
      v2 -= 24;
    }
    while (v5 != v3);
  }
LABEL_6:
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *language_modeling::v1::LanguageModelSession::predictions@<X0>(language_modeling::v1::LanguageModelSession *this@<X0>, void *a2@<X8>)
{
  return (*(void *(**)(void *__return_ptr))(**(void **)this + 64))(a2);
}

void language_modeling::v1::LanguageModelSession::enumeratePredictions(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *a1;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_19E39369C(__dst, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)long long __dst = *(_OWORD *)a3;
    uint64_t v31 = *(void *)(a3 + 16);
  }
  uint64_t v32 = 0;
  int64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v23 = 0;
  unint64_t v28 = &v23;
  char v29 = 0;
  uint64_t v9 = operator new(0x20uLL);
  int v10 = v9;
  uint64_t v23 = v9;
  int64_t v24 = (void **)v9;
  uint64_t v11 = (uint64_t)(v9 + 4);
  uint64_t v25 = v9 + 4;
  if (SHIBYTE(v31) < 0)
  {
    sub_19E39369C(v9, __dst[0], (unint64_t)__dst[1]);
    uint64_t v12 = v32;
    int v13 = v23;
  }
  else
  {
    *(_OWORD *)uint64_t v9 = *(_OWORD *)__dst;
    void v9[2] = v31;
    uint64_t v12 = 0;
    int v13 = v9;
  }
  v10[3] = v12;
  int64_t v24 = (void **)v11;
  sub_19E43C554(&__p, (uint64_t)v13, v11);
  (*(void (**)(uint64_t, uint64_t, void **, uint64_t, uint64_t))(*(void *)v8 + 72))(v8, a2, &__p, a4, a5);
  unint64_t v14 = __p;
  if (__p)
  {
    unint64_t v15 = v27;
    unint64_t v16 = __p;
    if (v27 != __p)
    {
      do
      {
        char v18 = (void **)*--v15;
        uint64_t v17 = v18;
        *unint64_t v15 = 0;
        if (v18)
        {
          long long v19 = sub_19E3C3D24(v17);
          MEMORY[0x19F3BDCF0](v19, 0x1030C403C62F202);
        }
      }
      while (v15 != v14);
      unint64_t v16 = __p;
    }
    uint64_t v27 = v14;
    operator delete(v16);
  }
  long long v20 = (void **)v23;
  if (v23)
  {
    CFNumberRef v21 = v24;
    unint64_t v22 = v23;
    if (v24 != v23)
    {
      do
      {
        if (*((char *)v21 - 9) < 0) {
          operator delete(*(v21 - 4));
        }
        v21 -= 4;
      }
      while (v21 != v20);
      unint64_t v22 = v23;
    }
    int64_t v24 = v20;
    operator delete(v22);
  }
  if (SHIBYTE(v31) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_19E3D3370(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, long long buf, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a2)
  {
    sub_19E3C3B80((void ***)&buf);
    if (a23 < 0) {
      operator delete(__p);
    }
    if (a2 == 2)
    {
      uint64_t v25 = __cxa_begin_catch(a1);
      if (qword_1EC0095B8 != -1) {
        dispatch_once(&qword_1EC0095B8, &unk_1EF0BEC40);
      }
      uint64_t v26 = qword_1EC0095B0;
      if (os_log_type_enabled((os_log_t)qword_1EC0095B0, OS_LOG_TYPE_ERROR))
      {
        uint64_t v27 = (*(uint64_t (**)(void *))(*(void *)v25 + 16))(v25);
        LODWORD(buf) = 136315394;
        *(void *)((char *)&buf + 4) = "enumeratePredictions";
        WORD6(buf) = 2080;
        *(void *)((char *)&buf + 14) = v27;
        _os_log_error_impl(&dword_19E36B000, v26, OS_LOG_TYPE_ERROR, "%s: caught unexpected exception: %s", (uint8_t *)&buf, 0x16u);
      }
      __cxa_end_catch();
      JUMPOUT(0x19E3D333CLL);
    }
    sub_19E37B770(a1);
  }
  _Unwind_Resume(a1);
}

void *sub_19E3D34D0(void *a1)
{
  uint64_t v2 = (void *)*a1;
  if (*a1)
  {
    uint64_t v3 = (void *)a1[1];
    unint64_t v4 = (void *)*a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = (void **)*--v3;
        uint64_t v5 = v6;
        *uint64_t v3 = 0;
        if (v6)
        {
          uint64_t v7 = sub_19E3C3D24(v5);
          MEMORY[0x19F3BDCF0](v7, 0x1030C403C62F202);
        }
      }
      while (v3 != v2);
      unint64_t v4 = (void *)*a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void language_modeling::v1::LanguageModelSession::enumeratePredictions(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *a1;
  sub_19E43C554(&__p, *a3, a3[1]);
  (*(void (**)(uint64_t, uint64_t, void **, uint64_t, uint64_t))(*(void *)v8 + 72))(v8, a2, &__p, a4, a5);
  uint64_t v9 = __p;
  if (__p)
  {
    int v10 = v16;
    uint64_t v11 = __p;
    if (v16 != __p)
    {
      do
      {
        int v13 = (void **)*--v10;
        uint64_t v12 = v13;
        void *v10 = 0;
        if (v13)
        {
          unint64_t v14 = sub_19E3C3D24(v12);
          MEMORY[0x19F3BDCF0](v14, 0x1030C403C62F202);
        }
      }
      while (v10 != v9);
      uint64_t v11 = __p;
    }
    unint64_t v16 = v9;
    operator delete(v11);
  }
}

void sub_19E3D3658(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long buf)
{
  if (a2)
  {
    sub_19E3D34D0(&a10);
    if (a2 == 2)
    {
      unint64_t v15 = __cxa_begin_catch(a1);
      if (qword_1EC0095B8 != -1) {
        dispatch_once(&qword_1EC0095B8, &unk_1EF0BEC40);
      }
      unint64_t v16 = qword_1EC0095B0;
      if (os_log_type_enabled((os_log_t)qword_1EC0095B0, OS_LOG_TYPE_ERROR))
      {
        uint64_t v17 = (*(uint64_t (**)(void *))(*(void *)v15 + 16))(v15);
        LODWORD(buf) = 136315394;
        *(void *)((char *)&buf + 4) = "enumeratePredictions";
        WORD6(buf) = 2080;
        *(void *)((char *)&buf + 14) = v17;
        _os_log_error_impl(&dword_19E36B000, v16, OS_LOG_TYPE_ERROR, "%s: caught unexpected exception: %s", (uint8_t *)&buf, 0x16u);
      }
      __cxa_end_catch();
      JUMPOUT(0x19E3D3628);
    }
    sub_19E37B770(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t language_modeling::v1::LanguageModelSession::enumeratePredictions(void *a1)
{
  return (*(uint64_t (**)(void))(*(void *)*a1 + 72))(*a1);
}

uint64_t language_modeling::v1::LanguageModelSession::enumerateInlineCompletions(void *a1)
{
  return (*(uint64_t (**)(void))(*(void *)*a1 + 80))(*a1);
}

{
  uint64_t result;
  void v2[5];

  v2[4] = *MEMORY[0x1E4F143B8];
  v2[3] = 0;
  language_modeling::v1::LanguageModelSession::enumerateInlineCompletions(a1);
  CFURLRef result = 0;
  if (!v2) {
    return (*(uint64_t (**)(void *))(v2[0] + 32))(v2);
  }
  return result;
}

void language_modeling::v1::LanguageModelSession::enumerateInlineCompletions(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  int __p = 0;
  char v18 = 0;
  uint64_t v19 = 0;
  v22[0] = &unk_1EF0BE168;
  v22[1] = &__p;
  void v22[2] = a1;
  uint64_t v23 = v22;
  CFNumberRef v21 = 0;
  (*(void (**)(void, uint64_t, uint64_t, void *, uint64_t, void *))(*(void *)*a1 + 80))(*a1, a2, a3, v22, a5, v20);
  if (v21 == v20)
  {
    (*(void (**)(void *))(v20[0] + 32))(v20);
  }
  else if (v21)
  {
    (*(void (**)(void))(*v21 + 40))();
  }
  uint64_t v6 = (char *)__p;
  uint64_t v7 = v18;
  if (__p != v18)
  {
    do
    {
      uint64_t v8 = *(void *)(a4 + 24);
      if (!v8) {
        sub_19E3ACB9C();
      }
      char v9 = (*(uint64_t (**)(uint64_t, char *))(*(void *)v8 + 48))(v8, v6);
      v6 += 8;
      if (v6 == v7) {
        char v10 = 0;
      }
      else {
        char v10 = v9;
      }
    }
    while ((v10 & 1) != 0);
  }
  if (v23 == v22)
  {
    (*(void (**)(void *))(v22[0] + 32))(v22);
    uint64_t v11 = (char *)__p;
    if (!__p) {
      return;
    }
    goto LABEL_17;
  }
  if (v23) {
    (*(void (**)(void))(*v23 + 40))();
  }
  uint64_t v11 = (char *)__p;
  if (__p)
  {
LABEL_17:
    uint64_t v12 = v18;
    int v13 = v11;
    if (v18 != v11)
    {
      do
      {
        uint64_t v15 = *((void *)v12 - 1);
        v12 -= 8;
        uint64_t v14 = v15;
        *(void *)uint64_t v12 = 0;
        if (v15)
        {
          uint64_t v16 = sub_19E37059C(v14);
          MEMORY[0x19F3BDCF0](v16, 0x1032C4057ACE4D0);
        }
      }
      while (v12 != v11);
      int v13 = __p;
    }
    char v18 = v11;
    operator delete(v13);
  }
}

void sub_19E3D3D0C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    if (a2 == 2)
    {
      uint64_t v3 = __cxa_begin_catch(a1);
      if (qword_1EC0095B8 != -1) {
        dispatch_once(&qword_1EC0095B8, &unk_1EF0BEC40);
      }
      unint64_t v4 = qword_1EC0095B0;
      if (os_log_type_enabled((os_log_t)qword_1EC0095B0, OS_LOG_TYPE_ERROR))
      {
        uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v3 + 16))(v3);
        *(_DWORD *)(v2 - 64) = 136315394;
        *(void *)(v2 - 6sub_19E392864(&a9, 0) = "enumerateInlineCompletions";
        *(_WORD *)(v2 - 52) = 2080;
        *(void *)(v2 - 5sub_19E392864(&a9, 0) = v5;
        _os_log_error_impl(&dword_19E36B000, v4, OS_LOG_TYPE_ERROR, "%s: caught unexpected exception: %s", (uint8_t *)(v2 - 64), 0x16u);
      }
      __cxa_end_catch();
      JUMPOUT(0x19E3D3B60);
    }
    sub_19E37B770(a1);
  }
  _Unwind_Resume(a1);
}

void *sub_19E3D3F00(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_19E3D3F84(void *a1)
{
  uint64_t v2 = (void *)*a1;
  if (*a1)
  {
    uint64_t v3 = (void *)a1[1];
    unint64_t v4 = (void *)*a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *--v3;
        uint64_t v5 = v6;
        *uint64_t v3 = 0;
        if (v6)
        {
          uint64_t v7 = sub_19E37059C(v5);
          MEMORY[0x19F3BDCF0](v7, 0x1032C4057ACE4D0);
        }
      }
      while (v3 != v2);
      unint64_t v4 = (void *)*a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void *sub_19E3D4008()
{
  return &unk_1EF0B8368;
}

uint64_t sub_19E3D4014(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZZNK17language_modeling2v120LanguageModelSession26enumerateInlineCompletionsERKNS0_17LinguisticCont"
                     "extERKNSt3__16vectorINS0_14CompletionStemENS5_9allocatorIS7_EEEERKNS5_8functionIFbRKNS0_10Predictio"
                     "nEEEEPK14__CFDictionaryENK3$_0clEvEUlRKNS0_16InlineCompletionEE_"
    || ((v3 & (unint64_t)"ZZNK17language_modeling2v120LanguageModelSession26enumerateInlineCompletionsERKNS0_17Lin"
                                "guisticContextERKNSt3__16vectorINS0_14CompletionStemENS5_9allocatorIS7_EEEERKNS5_8functi"
                                "onIFbRKNS0_10PredictionEEEEPK14__CFDictionaryENK3$_0clEvEUlRKNS0_16InlineCompletionEE_" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZZNK17language_modeling2v120LanguageModelSession26enumerateInlineCompletionsERKNS0_17LinguisticContextERKNSt3__16vectorINS0_14CompletionStemENS5_9allocatorIS7_EEEERKNS5_8functionIFbRKNS0_10PredictionEEEEPK14__CFDictionaryENK3$_0clEvEUlRKNS0_16InlineCompletionEE_")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZNK17language_modeling2v120LanguageModelSession26enumerateInlineCompletionsERKNS0_17LinguisticContextERKNSt3__16vectorINS0_14CompletionStemENS5_9allocatorIS7_EEEERKNS5_8functionIFbRKNS0_10PredictionEEEEPK14__CFDictionaryENK3$_0clEvEUlRKNS0_16InlineCompletionEE_" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void sub_19E3D406C(uint64_t a1, const language_modeling::v1::InlineCompletion *a2)
{
  language_modeling::v1::InlineCompletion::InlineCompletion((language_modeling::v1::InlineCompletion *)&v2, a2);
}

void sub_19E3D4180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  language_modeling::v1::Prediction::~Prediction((language_modeling::v1::Prediction *)va1);
  language_modeling::v1::InlineCompletion::~InlineCompletion((language_modeling::v1::InlineCompletion *)va);
  _Unwind_Resume(a1);
}

void *sub_19E3D41C4(void *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1] - *a1;
  uint64_t v3 = v2 >> 3;
  unint64_t v4 = (v2 >> 3) + 1;
  if (v4 >> 61) {
    sub_19E37C7C4();
  }
  uint64_t v7 = a1[2] - *a1;
  if (v7 >> 2 > v4) {
    unint64_t v4 = v7 >> 2;
  }
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v8 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v8 = v4;
  }
  if (v8)
  {
    if (v8 >> 61) {
      sub_19E37C2B8();
    }
    char v9 = (char *)operator new(8 * v8);
  }
  else
  {
    char v9 = 0;
  }
  char v10 = &v9[8 * v3];
  uint64_t v11 = &v9[8 * v8];
  uint64_t v12 = *a2;
  *a2 = 0;
  *(void *)char v10 = v12;
  int v13 = v10 + 8;
  uint64_t v14 = (char *)*a1;
  uint64_t v15 = (char *)a1[1];
  if (v15 == (char *)*a1)
  {
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
  }
  else
  {
    unint64_t v16 = (unint64_t)&v15[-*a1 - 8];
    if (v16 < 0x78 || &v15[-(v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v10 && &v9[v2 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8] < v15) {
      goto LABEL_31;
    }
    uint64_t v17 = (v16 >> 3) + 1;
    uint64_t v18 = 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v19 = &v15[-v18];
    v10 -= v18;
    long long v20 = &v9[8 * v3 - 16];
    CFNumberRef v21 = v15 - 16;
    uint64_t v22 = v17 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v24 = *((_OWORD *)v21 - 1);
      long long v23 = *(_OWORD *)v21;
      *((_OWORD *)v21 - 1) = 0uLL;
      *(_OWORD *)CFNumberRef v21 = 0uLL;
      *((_OWORD *)v20 - 1) = v24;
      *(_OWORD *)long long v20 = v23;
      v20 -= 32;
      v21 -= 32;
      v22 -= 4;
    }
    while (v22);
    uint64_t v15 = v19;
    if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_31:
      do
      {
        uint64_t v25 = *((void *)v15 - 1);
        v15 -= 8;
        *(void *)uint64_t v15 = 0;
        *((void *)v10 - 1) = v25;
        v10 -= 8;
      }
      while (v15 != v14);
    }
    uint64_t v15 = (char *)*a1;
    uint64_t v26 = (char *)a1[1];
    *a1 = v10;
    a1[1] = v13;
    a1[2] = v11;
    while (v26 != v15)
    {
      uint64_t v28 = *((void *)v26 - 1);
      v26 -= 8;
      uint64_t v27 = v28;
      *(void *)uint64_t v26 = 0;
      if (v28)
      {
        uint64_t v29 = sub_19E37059C(v27);
        MEMORY[0x19F3BDCF0](v29, 0x1032C4057ACE4D0);
      }
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v13;
}

__n128 sub_19E3D4374(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF0BE168;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 sub_19E3D439C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1EF0BE168;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void sub_19E3D43E8()
{
}

void language_modeling::v1::LanguageModelSession::recordWordRevision(uint64_t *a1, const UInt8 *a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  sub_19E371C70(__p, a2);
  (*(void (**)(uint64_t, void **))(*(void *)v2 + 128))(v2, __p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
}

void sub_19E3D4498(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, long long buf)
{
  if (a2)
  {
    if (a15 < 0) {
      operator delete(__p);
    }
    if (a2 == 2)
    {
      uint64_t v18 = __cxa_begin_catch(a1);
      if (qword_1EC0095B8 != -1) {
        dispatch_once(&qword_1EC0095B8, &unk_1EF0BEC40);
      }
      uint64_t v19 = qword_1EC0095B0;
      if (os_log_type_enabled((os_log_t)qword_1EC0095B0, OS_LOG_TYPE_ERROR))
      {
        uint64_t v20 = (*(uint64_t (**)(void *))(*(void *)v18 + 16))(v18);
        LODWORD(buf) = 136315394;
        *(void *)((char *)&buf + 4) = "recordWordRevision";
        WORD6(buf) = 2080;
        *(void *)((char *)&buf + 14) = v20;
        _os_log_error_impl(&dword_19E36B000, v19, OS_LOG_TYPE_ERROR, "%s: caught unexpected exception: %s", (uint8_t *)&buf, 0x16u);
      }
      __cxa_end_catch();
      JUMPOUT(0x19E3D446CLL);
    }
    sub_19E37B770(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t language_modeling::v1::LanguageModelSession::clearPriorText(language_modeling::v1::LanguageModelSession *this)
{
  return (*(uint64_t (**)(void))(**(void **)this + 136))(*(void *)this);
}

uint64_t language_modeling::v1::LanguageModelSession::clearDynamicLearningCache(language_modeling::v1::LanguageModelSession *this)
{
  return (*(uint64_t (**)(void))(**(void **)this + 144))(*(void *)this);
}

uint64_t language_modeling::v1::LanguageModelSession::flushCacheAndRecencyData(language_modeling::v1::LanguageModelSession *this)
{
  return (*(uint64_t (**)(void))(**(void **)this + 152))(*(void *)this);
}

uint64_t language_modeling::v1::LanguageModelSession::removeDynamicResourceDirectory(language_modeling::v1::LanguageModelSession *this)
{
  return (*(uint64_t (**)(void))(**(void **)this + 160))(*(void *)this);
}

uint64_t language_modeling::v1::LanguageModelSession::setDynamicResourceDirectory(void *a1)
{
  return (*(uint64_t (**)(void))(*(void *)*a1 + 168))(*a1);
}

uint64_t language_modeling::v1::LanguageModelSession::supportsFragmentsBasedConditionalProbability(language_modeling::v1::LanguageModelSession *this)
{
  return (*(uint64_t (**)(void))(**(void **)this + 184))(*(void *)this);
}

uint64_t language_modeling::v1::LanguageModelSession::supportsNormalizedNameTokenProbability(language_modeling::v1::LanguageModelSession *this)
{
  return (*(uint64_t (**)(void))(**(void **)this + 192))(*(void *)this);
}

void *language_modeling::v1::LanguageModelSession::normalizedNameTokenConditionalProbability@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return (*(void *(**)(void *__return_ptr))(**(void **)a1 + 200))(a2);
}

uint64_t LMLexiconCreate(uint64_t a1)
{
  if (a1) {
    operator new();
  }
  return 0;
}

void sub_19E3D517C()
{
}

uint64_t LMLexiconRetain(uint64_t result)
{
  if (result) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(result + 8), 1u, memory_order_relaxed);
  }
  return result;
}

atomic_uint *LMLexiconRelease(atomic_uint *result)
{
  if (result)
  {
    if ((int)atomic_fetch_add_explicit(result + 2, 0xFFFFFFFF, memory_order_relaxed) <= 1) {
      return (atomic_uint *)(*(uint64_t (**)(void))(*(void *)result + 8))();
    }
  }
  return result;
}

void *LMLexiconResetCursors(void *a1)
{
  if (a1) {
    return (void *)sub_19E5170E4(a1);
  }
  return a1;
}

uint64_t LMLexiconGetFirstTokenIDForString(uint64_t a1, const __CFString *a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2000000000;
  char v9 = 0;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  std::string v5[2] = sub_19E3D52B0;
  void v5[3] = &unk_1E599F240;
  v5[4] = &v6;
  void v5[5] = a2;
  v5[6] = a3;
  LMLexiconEnumerateEntriesForStringWithBlock(a1, a2, (uint64_t)v5);
  uint64_t v3 = *((unsigned __int8 *)v7 + 24);
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_19E3D5298(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_19E3D52B0(uint64_t a1, int a2, char *cStr, uint64_t a4, uint64_t a5, unsigned char *a6)
{
  if (cStr)
  {
    CFStringRef v9 = CFStringCreateWithCStringNoCopy(0, cStr, 0x8000100u, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
    if (v9)
    {
      CFStringRef v10 = v9;
      if (CFEqual(*(CFStringRef *)(a1 + 40), v9))
      {
        *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
        uint64_t v11 = *(_DWORD **)(a1 + 48);
        if (v11) {
          *uint64_t v11 = a2;
        }
        *a6 = 1;
      }
      CFRelease(v10);
    }
  }
  else
  {
    uint64_t v12 = *(_DWORD **)(a1 + 48);
    if (v12) {
      _DWORD *v12 = a2;
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
    *a6 = 1;
  }
}

void LMLexiconEnumerateEntriesForStringWithBlock(uint64_t a1, CFStringRef theString, uint64_t a3)
{
  CFIndex Length = CFStringGetLength(theString);
  if (a1)
  {
    CFIndex v7 = Length;
    if (Length >= 1)
    {
      uint64_t v8 = (UniChar *)malloc_type_malloc(2 * Length, 0x1000040BDFB0063uLL);
      v16.locatiouint64_t n = 0;
      v16.length = v7;
      CFStringGetCharacters(theString, v16, v8);
      uint64_t v9 = sub_19E518A2C(a1, ***(void ***)(a1 + 48), (uint64_t)v8, v7, 0);
      if (v9)
      {
        uint64_t v10 = v9;
        unint64_t v11 = 0;
        uint64_t v12 = 0x5000000000;
        while (1)
        {
          uint64_t v13 = *(void *)(a1 + 24);
          if (v11 >= (*(void *)(a1 + 32) - v13) >> 3) {
            break;
          }
          int v14 = (*(uint64_t (**)(void, uint64_t))(**(void **)(v13 + 8 * v11) + 48))(*(void *)(v13 + 8 * v11), v10 + (v12 >> 32));
          ++v11;
          v12 += 0x5000000000;
          if (v14)
          {
            sub_19E51365C(a1, v10, (uint64_t)v8, v7, a3);
            break;
          }
        }
      }
      free(v8);
    }
  }
}

uint64_t LMLexiconCopyStringForTokenID(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v2 = *(void **)(result + 24);
    uint64_t v3 = *(void **)(result + 32);
    if (v2 == v3)
    {
      return 0;
    }
    else
    {
      while (1)
      {
        __n128 result = (*(uint64_t (**)(void, uint64_t))(*(void *)*v2 + 128))(*v2, a2);
        if (result) {
          break;
        }
        if (++v2 == v3) {
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t LMLexiconGetRootCursor(uint64_t result)
{
  if (result) {
    return ***(void ***)(result + 48);
  }
  return result;
}

uint64_t LMLexiconGetCursorByAdvancingWithCharacters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double *a5)
{
  if (a1 && a2) {
    return sub_19E518A2C(a1, a2, a3, a4, a5);
  }
  else {
    return 0;
  }
}

BOOL LMLexiconCursorIsRoot(uint64_t a1, uint64_t a2)
{
  BOOL result = 0;
  if (a1 && a2)
  {
    unint64_t v5 = 0;
    for (uint64_t i = 0x5000000000; ; i += 0x5000000000)
    {
      uint64_t v7 = *(void *)(a1 + 24);
      unint64_t v8 = (*(void *)(a1 + 32) - v7) >> 3;
      BOOL result = v8 <= v5;
      if (v8 <= v5) {
        break;
      }
      char v9 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v7 + 8 * v5) + 40))(*(void *)(v7 + 8 * v5), a2 + (i >> 32), ***(void ***)(a1 + 48) + (i >> 32));
      ++v5;
      if ((v9 & 1) == 0) {
        return 0;
      }
    }
  }
  return result;
}

BOOL LMLexiconCursorHasEntries(uint64_t a1, uint64_t a2)
{
  BOOL result = 0;
  if (a1 && a2)
  {
    unint64_t v5 = 0;
    for (uint64_t i = 0x5000000000; ; i += 0x5000000000)
    {
      uint64_t v7 = *(void *)(a1 + 24);
      unint64_t v8 = (*(void *)(a1 + 32) - v7) >> 3;
      BOOL result = v8 > v5;
      if (v8 <= v5) {
        break;
      }
      int v9 = (*(uint64_t (**)(void, uint64_t))(**(void **)(v7 + 8 * v5) + 48))(*(void *)(v7 + 8 * v5), a2 + (i >> 32));
      ++v5;
      if (v9) {
        return 1;
      }
    }
  }
  return result;
}

void LMLexiconCursorEnumerateEntriesWithBlock(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    if (a2) {
      sub_19E51365C(a1, a2, 0, 0, a3);
    }
  }
}

void LMLexiconCursorEnumerateEntriesWithCharactersAndBlock(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a1)
  {
    if (a2) {
      sub_19E51365C(a1, a2, a3, a4, a5);
    }
  }
}

uint64_t LMLexiconCursorFirstTokenID(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0;
  if (a1 && a2)
  {
    unint64_t v5 = 0;
    for (uint64_t i = 0x5000000000; ; i += 0x5000000000)
    {
      uint64_t v7 = *(void *)(a1 + 24);
      if (v5 >= (*(void *)(a1 + 32) - v7) >> 3) {
        break;
      }
      uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(v7 + 8 * v5) + 96))(*(void *)(v7 + 8 * v5), a2 + (i >> 32));
      ++v5;
      if (result) {
        return result;
      }
    }
    return 0;
  }
  return result;
}

BOOL LMLexiconCursorHasChildren(uint64_t a1, uint64_t a2)
{
  BOOL result = 0;
  if (a1 && a2)
  {
    unint64_t v5 = 0;
    for (uint64_t i = 0x5000000000; ; i += 0x5000000000)
    {
      uint64_t v7 = *(void *)(a1 + 24);
      unint64_t v8 = (*(void *)(a1 + 32) - v7) >> 3;
      BOOL result = v8 > v5;
      if (v8 <= v5) {
        break;
      }
      int v9 = (*(uint64_t (**)(void, uint64_t))(**(void **)(v7 + 8 * v5) + 64))(*(void *)(v7 + 8 * v5), a2 + (i >> 32));
      ++v5;
      if (v9) {
        return 1;
      }
    }
  }
  return result;
}

void LMLexiconCursorConditionalProbability(uint64_t a1, uint64_t a2, __n128 a3)
{
  a3.n128_u64[0] = 0;
  if (a1)
  {
    if (a2)
    {
      uint64_t v5 = *(void *)(a1 + 24);
      if (*(void *)(a1 + 32) != v5)
      {
        unint64_t v6 = 0;
        uint64_t v7 = 0x5000000000;
        do
        {
          a3.n128_f64[0] = (*(double (**)(void, uint64_t, __n128))(**(void **)(v5 + 8 * v6) + 72))(*(void *)(v5 + 8 * v6), a2 + (v7 >> 32), a3);
          if (a3.n128_f64[0] != 0.0) {
            break;
          }
          ++v6;
          uint64_t v5 = *(void *)(a1 + 24);
          v7 += 0x5000000000;
        }
        while (v6 < (*(void *)(a1 + 32) - v5) >> 3);
      }
    }
  }
}

void LMLexiconCursorTerminationProbability(uint64_t a1, uint64_t a2, __n128 a3)
{
  a3.n128_u64[0] = 0;
  if (a1)
  {
    if (a2)
    {
      uint64_t v5 = *(void *)(a1 + 24);
      if (*(void *)(a1 + 32) != v5)
      {
        unint64_t v6 = 0;
        uint64_t v7 = 0x5000000000;
        do
        {
          a3.n128_f64[0] = (*(double (**)(void, uint64_t, __n128))(**(void **)(v5 + 8 * v6) + 80))(*(void *)(v5 + 8 * v6), a2 + (v7 >> 32), a3);
          if (a3.n128_f64[0] != 0.0) {
            break;
          }
          ++v6;
          uint64_t v5 = *(void *)(a1 + 24);
          v7 += 0x5000000000;
        }
        while (v6 < (*(void *)(a1 + 32) - v5) >> 3);
      }
    }
  }
}

uint64_t LMLexiconCursorTraversedLength(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0;
  if (a1 && a2)
  {
    unint64_t v5 = 0;
    for (uint64_t i = 0x5000000000; ; i += 0x5000000000)
    {
      uint64_t v7 = *(void *)(a1 + 24);
      if (v5 >= (*(void *)(a1 + 32) - v7) >> 3) {
        break;
      }
      uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(v7 + 8 * v5) + 104))(*(void *)(v7 + 8 * v5), a2 + (i >> 32));
      ++v5;
      if (result) {
        return result;
      }
    }
    return 0;
  }
  return result;
}

uint64_t LMLexiconCursorGetTraversedCharacters(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = 0;
  if (a1 && a2)
  {
    unint64_t v9 = 0;
    for (uint64_t i = 0x5000000000; ; i += 0x5000000000)
    {
      uint64_t v11 = *(void *)(a1 + 24);
      if (v9 >= (*(void *)(a1 + 32) - v11) >> 3) {
        break;
      }
      uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(v11 + 8 * v9) + 112))(*(void *)(v11 + 8 * v9), a2 + (i >> 32), a3, a4);
      ++v9;
      if (result) {
        return result;
      }
    }
    return 0;
  }
  return result;
}

uint64_t LMLexiconCursorHash(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  if (a1 && a2)
  {
    uint64_t v5 = *(void *)(a1 + 24);
    if (*(void *)(a1 + 32) == v5)
    {
      return 0;
    }
    else
    {
      unint64_t v6 = 0;
      uint64_t v2 = 0;
      uint64_t v7 = 0x5000000000;
      do
      {
        v2 ^= (*(uint64_t (**)(void, uint64_t))(**(void **)(v5 + 8 * v6) + 88))(*(void *)(v5 + 8 * v6), a2 + (v7 >> 32));
        ++v6;
        uint64_t v5 = *(void *)(a1 + 24);
        v7 += 0x5000000000;
      }
      while (v6 < (*(void *)(a1 + 32) - v5) >> 3);
    }
  }
  return v2;
}

uint64_t LMLexiconIDConverterCreate(uint64_t a1)
{
  if (a1) {
    operator new();
  }
  return 0;
}

void sub_19E3D5C90()
{
}

uint64_t LMLexiconIDConverterCreateWithUnigramsPath(CFStringRef filePath)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (filePath)
  {
    CFURLRef v1 = CFURLCreateWithFileSystemPath(0, filePath, kCFURLPOSIXPathStyle, 0);
    if (v1)
    {
      CFURLRef v2 = v1;
      CFURLRef PathComponent = CFURLCreateCopyDeletingLastPathComponent(0, v1);
      CFStringRef v4 = CFURLCopyLastPathComponent(v2);
      if (CFStringHasPrefix(v4, @"Unigrams"))
      {
        v12.length = CFStringGetLength(v4) - 8;
        v12.locatiouint64_t n = 8;
        CFStringRef v5 = CFStringCreateWithSubstring(0, v4, v12);
        CFStringRef v6 = CFStringCreateWithFormat(0, 0, @"lstsfmap%@", v5);
        CFURLRef v7 = CFURLCreateCopyAppendingPathComponent(0, PathComponent, v6, 0);
        CFRelease(v6);
        CFRelease(v5);
      }
      else
      {
        CFURLRef v7 = 0;
      }
      CFRelease(v4);
      CFRelease(PathComponent);
      CFRelease(v2);
      if (v7)
      {
        if (CFURLGetFileSystemRepresentation(v7, 1u, buffer, 1024) && !stat((const char *)buffer, &v9)) {
          operator new();
        }
        CFRelease(v7);
      }
    }
  }
  return 0;
}

#error "19E3D5ED8: call analysis failed (funcsize=39)"

uint64_t LMLexiconIDConverterGetStemSuffixTokenID(uint64_t result, unsigned int a2, unsigned int a3, int *a4)
{
  if (result)
  {
    CFStringRef v4 = *(char **)(result + 16);
    if (*(_DWORD *)v4 > a2) {
      return 0;
    }
    uint64_t v5 = *(unsigned int *)(result + 8);
    if (*(_DWORD *)&v4[4 * v5] <= a2) {
      return 0;
    }
    uint64_t v6 = *(void *)(result + 24) - (void)v4;
    if (v6)
    {
      unint64_t v7 = v6 >> 2;
      unint64_t v8 = *(_DWORD **)(result + 16);
      do
      {
        unint64_t v9 = v7 >> 1;
        uint64_t v10 = &v8[v7 >> 1];
        unsigned int v12 = *v10;
        uint64_t v11 = v10 + 1;
        v7 += ~(v7 >> 1);
        if (v12 > a2) {
          unint64_t v7 = v9;
        }
        else {
          unint64_t v8 = v11;
        }
      }
      while (v7);
    }
    else
    {
      unint64_t v8 = *(_DWORD **)(result + 16);
    }
    uint64_t v13 = *(char **)(result + 40);
    if (*(_DWORD *)v13 > a3 || *(_DWORD *)&v13[4 * v5] <= a3) {
      return 0;
    }
    int v14 = *(v8 - 1);
    unint64_t v15 = (char *)(v8 - 1) - v4;
    unint64_t v16 = v15 >> 2;
    uint64_t v17 = *(_DWORD **)(result + 40);
    uint64_t v18 = *(void *)(result + 48) - (void)v13;
    if (v18)
    {
      unint64_t v19 = v18 >> 2;
      uint64_t v17 = *(_DWORD **)(result + 40);
      do
      {
        unint64_t v20 = v19 >> 1;
        CFNumberRef v21 = &v17[v19 >> 1];
        unsigned int v23 = *v21;
        uint64_t v22 = v21 + 1;
        v19 += ~(v19 >> 1);
        if (v23 > a3) {
          unint64_t v19 = v20;
        }
        else {
          uint64_t v17 = v22;
        }
      }
      while (v19);
    }
    long long v24 = (char *)(v17 - 1);
    if (v16 == ((unint64_t)(v24 - v13) >> 2))
    {
      int v25 = a3
          - *(_DWORD *)v24
          + (*(_DWORD *)&v13[4 * (v16 + 1)] - *(_DWORD *)&v13[v15 & 0x3FFFFFFFCLL]) * (a2 - v14)
          + *(_DWORD *)(*(void *)(result + 64) + (v15 & 0x3FFFFFFFCLL));
      uint64_t result = v25 != 0;
      if (a4)
      {
        if (v25)
        {
          *a4 = v25;
          return 1;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t LMLexiconIDConverterGetStemAndSuffixTokenIDs(uint64_t result, unsigned int a2, _DWORD *a3, _DWORD *a4)
{
  if (result)
  {
    CFStringRef v4 = *(unsigned int **)(result + 64);
    if (*v4 > a2 || v4[*(unsigned int *)(result + 8)] <= a2)
    {
      return 0;
    }
    else
    {
      uint64_t v5 = *(void *)(result + 72) - (void)v4;
      if (v5)
      {
        unint64_t v6 = v5 >> 2;
        unint64_t v7 = *(_DWORD **)(result + 64);
        do
        {
          unint64_t v8 = v6 >> 1;
          unint64_t v9 = &v7[v6 >> 1];
          unsigned int v11 = *v9;
          uint64_t v10 = v9 + 1;
          v6 += ~(v6 >> 1);
          if (v11 > a2) {
            unint64_t v6 = v8;
          }
          else {
            unint64_t v7 = v10;
          }
        }
        while (v6);
      }
      else
      {
        unint64_t v7 = *(_DWORD **)(result + 64);
      }
      int v12 = *(v7 - 1);
      uint64_t v13 = v7 - 1 - v4;
      uint64_t v14 = *(void *)(result + 40);
      uint64_t v15 = v13;
      unsigned int v16 = *(_DWORD *)(v14 + 4 * (v13 + 1)) - *(_DWORD *)(v14 + 4 * v13);
      int v17 = a2 - v12;
      unsigned int v18 = (a2 - v12) / v16;
      if (a3) {
        *a3 = v18 + *(_DWORD *)(*(void *)(result + 16) + 4 * v15);
      }
      if (a4) {
        *a4 = v17 - v18 * v16 + *(_DWORD *)(v14 + 4 * v15);
      }
      return 1;
    }
  }
  return result;
}

uint64_t LMLexiconIDConverterGetStemData(uint64_t result, unsigned int a2, uint64_t *a3, void *a4, unsigned __int16 **a5, void *a6)
{
  if (result)
  {
    unint64_t v6 = *(char **)(result + 16);
    if (*(_DWORD *)v6 > a2 || *(_DWORD *)&v6[4 * *(unsigned int *)(result + 8)] <= a2) {
      return 0;
    }
    uint64_t v7 = *(void *)(result + 24) - (void)v6;
    if (v7)
    {
      unint64_t v8 = v7 >> 2;
      unint64_t v9 = *(char **)(result + 16);
      do
      {
        unint64_t v10 = v8 >> 1;
        unsigned int v11 = (unsigned int *)&v9[4 * (v8 >> 1)];
        unsigned int v13 = *v11;
        int v12 = (char *)(v11 + 1);
        v8 += ~(v8 >> 1);
        if (v13 > a2) {
          unint64_t v8 = v10;
        }
        else {
          unint64_t v9 = v12;
        }
      }
      while (v8);
    }
    else
    {
      unint64_t v9 = *(char **)(result + 16);
    }
    int v14 = *(_DWORD *)(result + 12);
    unint64_t v15 = v9 - v6 - 4;
    unint64_t v16 = v15 >> 2;
    BOOL v17 = __CFADD__(v14, (v15 >> 2));
    unsigned int v18 = v14 + (v15 >> 2);
    if (v17 || **(_DWORD **)(result + 40) <= v18)
    {
      return 0;
    }
    else
    {
      uint64_t v19 = (v15 >> 2);
      if (a3)
      {
        uint64_t v20 = *(void *)(result + 88) + 32 * v19;
        uint64_t v21 = *(void *)(v20 + 8);
        uint64_t v22 = v20 + 16;
        if (v21) {
          uint64_t v22 = v21;
        }
        *a3 = v22;
      }
      if (a4) {
        *a4 = *(unsigned __int16 *)(*(void *)(result + 88) + 32 * v19);
      }
      if (a5)
      {
        unsigned int v23 = (unsigned __int16 *)(*(void *)(result + 112) + 16 * v16);
        if (*v23 < 0xFu) {
          long long v24 = v23 + 1;
        }
        else {
          long long v24 = (unsigned __int16 *)*((void *)v23 + 1);
        }
        *a5 = v24;
      }
      if (a6) {
        *a6 = *(unsigned __int16 *)(*(void *)(result + 112) + 16 * v19);
      }
      return 1;
    }
  }
  return result;
}

uint64_t LMLexiconIDConverterGetSuffixData(uint64_t result, unsigned int a2, uint64_t *a3, void *a4, unsigned __int16 **a5, void *a6)
{
  if (result)
  {
    unint64_t v6 = *(char **)(result + 40);
    unsigned int v7 = *(_DWORD *)v6;
    if (*(_DWORD *)v6 > a2 || *(_DWORD *)&v6[4 * *(unsigned int *)(result + 8)] <= a2) {
      return 0;
    }
    uint64_t v8 = *(void *)(result + 48) - (void)v6;
    if (v8)
    {
      unint64_t v9 = v8 >> 2;
      unint64_t v10 = *(char **)(result + 40);
      do
      {
        unint64_t v11 = v9 >> 1;
        int v12 = (unsigned int *)&v10[4 * (v9 >> 1)];
        unsigned int v14 = *v12;
        unsigned int v13 = (char *)(v12 + 1);
        v9 += ~(v9 >> 1);
        if (v14 > a2) {
          unint64_t v9 = v11;
        }
        else {
          unint64_t v10 = v13;
        }
      }
      while (v9);
    }
    else
    {
      unint64_t v10 = *(char **)(result + 40);
    }
    unsigned int v15 = *(_DWORD *)(result + 12);
    unint64_t v16 = v10 - v6 - 4;
    unint64_t v17 = v16 >> 2;
    unsigned int v18 = v15 + (v16 >> 2);
    if (v15 <= v18 && v7 > v18)
    {
      uint64_t v20 = (v16 >> 2);
      if (a3)
      {
        uint64_t v21 = *(void *)(result + 88) + 32 * v20;
        uint64_t v22 = *(void *)(v21 + 8);
        uint64_t v23 = v21 + 16;
        if (v22) {
          uint64_t v23 = v22;
        }
        *a3 = v23;
      }
      if (a4) {
        *a4 = *(unsigned __int16 *)(*(void *)(result + 88) + 32 * v20);
      }
      if (a5)
      {
        long long v24 = (unsigned __int16 *)(*(void *)(result + 112) + 16 * v17);
        if (*v24 < 0xFu) {
          int v25 = v24 + 1;
        }
        else {
          int v25 = (unsigned __int16 *)*((void *)v24 + 1);
        }
        *a5 = v25;
      }
      if (a6) {
        *a6 = *(unsigned __int16 *)(*(void *)(result + 112) + 16 * v20);
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t LMLexiconIDConverterDestroy(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void *language_modeling::v1::LanguageModel::LanguageModel(void *this)
{
  *this = 0;
  return this;
}

{
  *this = 0;
  return this;
}

void language_modeling::v1::LanguageModel::~LanguageModel(language_modeling::v1::LanguageModel *this)
{
  uint64_t v2 = *(void *)this;
  *(void *)this = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
}

{
  uint64_t v2;

  uint64_t v2 = *(void *)this;
  *(void *)this = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
}

void language_modeling::v1::LanguageModel::init(uint64_t a1, uint64_t a2)
{
}

{
  __CFDictionary *v2;
  CFTypeRef v3[9];

  v3[8] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  uint64_t v2 = sub_19E52211C(a2);
  sub_19E36E590(v3, v2);
  operator new();
}

void sub_19E3D6DC4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19E3D6E14);
}

void sub_19E3D6DD4(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x19E3D6DDCLL);
  }
  sub_19E37B770(a1);
}

void sub_19E3D6DE4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19E3D6E48);
}

void sub_19E3D6DF4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  if (a2)
  {
    sub_19E3D73EC((uint64_t)va);
    JUMPOUT(0x19E3D6E08);
  }
  _Unwind_Resume(a1);
}

void sub_19E3D6E24(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    JUMPOUT(0x19E3D6E2CLL);
  }
  _Unwind_Resume(a1);
}

void sub_19E3D6EC4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    JUMPOUT(0x19E3D6ECCLL);
  }
  _Unwind_Resume(a1);
}

void sub_19E3D6ED4(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    MEMORY[0x19F3BDCF0](v2, 0x1072C40FEAF31FBLL);
    JUMPOUT(0x19E3D6E50);
  }
  _Unwind_Resume(a1);
}

void sub_19E3D6EFC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19E3D6E50);
}

void sub_19E3D6F0C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x19E3D6E5CLL);
}

const void *sub_19E3D6F18(const __CFDictionary *a1, const UInt8 *__s)
{
  uint64_t v2 = __s;
  size_t v4 = strlen((const char *)__s);
  if (v2)
  {
    uint64_t v2 = (const UInt8 *)CFStringCreateWithBytes(0, v2, v4, 0x8000100u, 0);
    if (!v2)
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x19F3BD790](exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  CFStringRef Value = CFDictionaryGetValue(a1, v2);
  if (v2) {
    CFRelease(v2);
  }
  return Value;
}

void sub_19E3D6FD8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t sub_19E3D7020(const __CFNumber *a1)
{
  if (!a1)
  {
LABEL_8:
    BOOL v3 = 0;
LABEL_9:
    int v4 = 0;
    return v3 | (v4 << 8);
  }
  CFTypeID TypeID = CFBooleanGetTypeID();
  if (TypeID != CFGetTypeID(a1))
  {
    CFTypeID v5 = CFNumberGetTypeID();
    if (v5 == CFGetTypeID(a1))
    {
      switch(CFNumberGetType(a1))
      {
        case kCFNumberSInt8Type:
          LOBYTE(valuePtr) = 0;
          int Value = CFNumberGetValue(a1, kCFNumberSInt8Type, &valuePtr);
          goto LABEL_17;
        case kCFNumberSInt16Type:
          LOWORD(valuePtr) = 0;
          int Value = CFNumberGetValue(a1, kCFNumberSInt16Type, &valuePtr);
          goto LABEL_19;
        case kCFNumberSInt32Type:
          LODWORD(valuePtr) = 0;
          int Value = CFNumberGetValue(a1, kCFNumberSInt32Type, &valuePtr);
          goto LABEL_21;
        case kCFNumberSInt64Type:
          double valuePtr = 0.0;
          int v8 = CFNumberGetValue(a1, kCFNumberSInt64Type, &valuePtr);
          goto LABEL_37;
        case kCFNumberFloat32Type:
          LODWORD(valuePtr) = 0;
          int v9 = CFNumberGetValue(a1, kCFNumberFloat32Type, &valuePtr);
          goto LABEL_33;
        case kCFNumberFloat64Type:
          double valuePtr = 0.0;
          int v9 = CFNumberGetValue(a1, kCFNumberFloat64Type, &valuePtr);
          goto LABEL_46;
        case kCFNumberCharType:
          LOBYTE(valuePtr) = 0;
          int Value = CFNumberGetValue(a1, kCFNumberCharType, &valuePtr);
LABEL_17:
          BOOL v10 = Value == 0;
          int v11 = LOBYTE(valuePtr);
          goto LABEL_22;
        case kCFNumberShortType:
          LOWORD(valuePtr) = 0;
          int Value = CFNumberGetValue(a1, kCFNumberShortType, &valuePtr);
LABEL_19:
          BOOL v10 = Value == 0;
          int v11 = LOWORD(valuePtr);
          goto LABEL_22;
        case kCFNumberIntType:
          LODWORD(valuePtr) = 0;
          int Value = CFNumberGetValue(a1, kCFNumberIntType, &valuePtr);
LABEL_21:
          BOOL v10 = Value == 0;
          int v11 = LODWORD(valuePtr);
LABEL_22:
          BOOL v3 = !v10 && v11 != 0;
          if (!Value) {
            goto LABEL_9;
          }
          goto LABEL_4;
        case kCFNumberLongType:
          double valuePtr = 0.0;
          int v8 = CFNumberGetValue(a1, kCFNumberLongType, &valuePtr);
          goto LABEL_37;
        case kCFNumberLongLongType:
          double valuePtr = 0.0;
          int v8 = CFNumberGetValue(a1, kCFNumberLongLongType, &valuePtr);
          goto LABEL_37;
        case kCFNumberFloatType:
          LODWORD(valuePtr) = 0;
          int v9 = CFNumberGetValue(a1, kCFNumberFloatType, &valuePtr);
LABEL_33:
          BOOL v13 = *(float *)&valuePtr == 0.0;
          goto LABEL_47;
        case kCFNumberDoubleType:
          double valuePtr = 0.0;
          int v9 = CFNumberGetValue(a1, kCFNumberDoubleType, &valuePtr);
          goto LABEL_46;
        case kCFNumberCFIndexType:
          double valuePtr = 0.0;
          int v8 = CFNumberGetValue(a1, kCFNumberCFIndexType, &valuePtr);
          goto LABEL_37;
        case kCFNumberNSIntegerType:
          double valuePtr = 0.0;
          int v8 = CFNumberGetValue(a1, kCFNumberNSIntegerType, &valuePtr);
LABEL_37:
          if (v8) {
            BOOL v14 = *(void *)&valuePtr == 0;
          }
          else {
            BOOL v14 = 1;
          }
          BOOL v3 = !v14;
          if (!v8) {
            goto LABEL_9;
          }
          goto LABEL_4;
        case kCFNumberCGFloatType:
          double valuePtr = 0.0;
          int v9 = CFNumberGetValue(a1, kCFNumberCGFloatType, &valuePtr);
LABEL_46:
          BOOL v13 = valuePtr == 0.0;
LABEL_47:
          BOOL v3 = !v13 && v9 != 0;
          if (!v9) {
            goto LABEL_9;
          }
          goto LABEL_4;
        default:
          goto LABEL_8;
      }
    }
    goto LABEL_8;
  }
  BOOL v3 = CFBooleanGetValue(a1) != 0;
LABEL_4:
  int v4 = 1;
  return v3 | (v4 << 8);
}

void sub_19E3D72EC()
{
  exceptiouint64_t n = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x1E4FBA4F0] + 16;
  __cxa_throw(exception, MEMORY[0x1E4FBA340], (void (*)(void *))std::exception::~exception);
}

void **sub_19E3D7338(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    BOOL v3 = (char *)a1[1];
    int v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        CFTypeID v5 = (std::__shared_weak_count *)*((void *)v3 - 1);
        if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      int v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_19E3D73EC(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

uint64_t sub_19E3D7458(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 152);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  BOOL v3 = *(int **)(a1 + 136);
  *(void *)(a1 + 136) = 0;
  if (v3)
  {
    if (*v3 != -1)
    {
      flock(*v3, 8);
      close(*v3);
    }
    MEMORY[0x19F3BDCF0](v3, 0x1000C4052888210);
  }
  if (*(unsigned char *)(a1 + 128))
  {
    sub_19E3C5DBC(*(char **)(a1 + 112));
    if (*(char *)(a1 + 103) < 0) {
      operator delete(*(void **)(a1 + 80));
    }
  }
  uint64_t v4 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  if (v4)
  {
    sub_19E3D7670(v4);
    MEMORY[0x19F3BDCF0]();
  }
  CFTypeID v5 = *(const void **)(a1 + 56);
  if (v5) {
    CFRelease(v5);
  }
  *(void *)(a1 + 56) = 0;
  unint64_t v6 = *(const void **)(a1 + 48);
  if (v6) {
    CFRelease(v6);
  }
  *(void *)(a1 + 48) = 0;
  unsigned int v7 = *(const void **)(a1 + 40);
  if (v7) {
    CFRelease(v7);
  }
  *(void *)(a1 + 4sub_19E392864(&a9, 0) = 0;
  int v8 = *(const void **)(a1 + 32);
  if (v8) {
    CFRelease(v8);
  }
  *(void *)(a1 + 32) = 0;
  int v9 = *(const void **)(a1 + 24);
  if (v9) {
    CFRelease(v9);
  }
  *(void *)(a1 + 24) = 0;
  BOOL v10 = *(const void **)(a1 + 8);
  if (v10) {
    CFRelease(v10);
  }
  *(void *)(a1 + 8) = 0;
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
  *(void *)a1 = 0;
  return a1;
}

uint64_t *sub_19E3D75D8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = sub_19E3D7458(v2);
    MEMORY[0x19F3BDCF0](v3, 0x1072C40FEAF31FBLL);
  }
  return a1;
}

_DWORD *sub_19E3D7620(_DWORD *a1, int a2, long long *a3)
{
  *a1 = a2;
  uint64_t v4 = a1 + 2;
  if (*((char *)a3 + 23) < 0)
  {
    sub_19E39369C(v4, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v5 = *a3;
    *((void *)v4 + 2) = *((void *)a3 + 2);
    *(_OWORD *)uint64_t v4 = v5;
  }
  return a1;
}

void sub_19E3D7670(uint64_t a1)
{
  if (*(char *)(a1 + 455) < 0)
  {
    operator delete(*(void **)(a1 + 432));
    uint64_t v2 = *(const void **)(a1 + 408);
    if (!v2) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t v2 = *(const void **)(a1 + 408);
  if (v2) {
LABEL_5:
  }
    CFRelease(v2);
LABEL_6:
  *(void *)(a1 + 408) = 0;
  uint64_t v3 = *(void **)(a1 + 264);
  if (v3)
  {
    *(void *)(a1 + 272) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void ***)(a1 + 184);
  *(void *)(a1 + 184) = 0;
  if (v4) {
    sub_19E3D7720(v4);
  }
  long long v5 = *(const void **)(a1 + 176);
  if (v5) {
    CFRelease(v5);
  }
  *(void *)(a1 + 176) = 0;
  sub_19E3D7810(a1 + 88);
  unint64_t v6 = *(void **)(a1 + 64);
  if (v6)
  {
    *(void *)(a1 + 72) = v6;
    operator delete(v6);
  }
  std::mutex::~mutex((std::mutex *)a1);
}

void sub_19E3D7720(void **a1)
{
  uint64_t v2 = (void **)a1[5];
  if (v2)
  {
    do
    {
      unsigned int v7 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      uint64_t v2 = v7;
    }
    while (v7);
  }
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    operator delete(v3);
  }
  uint64_t v4 = (char *)*a1;
  if (*a1)
  {
    long long v5 = (char *)a1[1];
    unint64_t v6 = *a1;
    if (v5 != v4)
    {
      do
      {
        int v8 = (const void *)*((void *)v5 - 3);
        if (v8) {
          CFRelease(v8);
        }
        int v9 = (const void *)*((void *)v5 - 1);
        if (v9) {
          CFRelease(v9);
        }
        if (*(v5 - 25) < 0) {
          operator delete(*((void **)v5 - 6));
        }
        v5 -= 48;
      }
      while (v5 != v4);
      unint64_t v6 = *a1;
    }
    a1[1] = v4;
    operator delete(v6);
  }
  JUMPOUT(0x19F3BDCF0);
}

uint64_t sub_19E3D7810(uint64_t a1)
{
  if (*(char *)(a1 + 87) < 0)
  {
    operator delete(*(void **)(a1 + 64));
    if ((*(char *)(a1 + 63) & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((*(char *)(a1 + 63) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 40));
LABEL_3:
  uint64_t v2 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (!v2) {
    goto LABEL_9;
  }
  if (*(char *)(v2 + 95) < 0)
  {
    operator delete(*(void **)(v2 + 72));
    if ((*(char *)(v2 + 71) & 0x80000000) == 0)
    {
LABEL_6:
      if ((*(char *)(v2 + 47) & 0x80000000) == 0) {
        goto LABEL_7;
      }
LABEL_16:
      operator delete(*(void **)(v2 + 24));
      if ((*(char *)(v2 + 23) & 0x80000000) == 0) {
        goto LABEL_8;
      }
LABEL_17:
      operator delete(*(void **)v2);
      goto LABEL_8;
    }
  }
  else if ((*(char *)(v2 + 71) & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(*(void **)(v2 + 48));
  if (*(char *)(v2 + 47) < 0) {
    goto LABEL_16;
  }
LABEL_7:
  if (*(char *)(v2 + 23) < 0) {
    goto LABEL_17;
  }
LABEL_8:
  MEMORY[0x19F3BDCF0](v2, 0x1012C4003C2D8E3);
LABEL_9:
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_19E3D78F4(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN2LM14ResourceLoaderEEE"
    || ((v3 & (unint64_t)"NSt3__114default_deleteIN2LM14ResourceLoaderEEE" & 0x8000000000000000) != 0) != __OFSUB__(v3, "NSt3__114default_deleteIN2LM14ResourceLoaderEEE")
    && !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN2LM14ResourceLoaderEEE" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_19E3D794C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result)
  {
    sub_19E3D7458(result);
    JUMPOUT(0x19F3BDCF0);
  }
  return result;
}

void sub_19E3D7994(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x19F3BDCF0);
}

void *language_modeling::v1::LanguageModel::wordSeparator@<X0>(language_modeling::v1::LanguageModel *this@<X0>, void *a2@<X8>)
{
  return (*(void *(**)(void *__return_ptr))(**(void **)this + 16))(a2);
}

void language_modeling::v1::LanguageModel::makeDefaultSession(language_modeling::v1::LanguageModel *this)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  CFURLRef v1 = (const void *)language_modeling::v1::kEnvironmentSessionTypeKey;
  size_t v2 = strlen((const char *)language_modeling::v1::kEnvironmentSessionTypeKey);
  if (v2 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_18;
  }
  unint64_t v3 = (const void *)v2;
  if (v2 >= 0x17)
  {
    uint64_t v5 = (v2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v2 | 7) != 0x17) {
      uint64_t v5 = v2 | 7;
    }
    uint64_t v6 = v5 + 1;
    uint64_t v4 = (const void **)operator new(v5 + 1);
    __dst[1] = v3;
    unint64_t v17 = v6 | 0x8000000000000000;
    __dst[0] = v4;
  }
  else
  {
    HIBYTE(v17) = v2;
    uint64_t v4 = __dst;
    if (!v2)
    {
LABEL_9:
      *((unsigned char *)v3 + (void)v4) = 0;
      int v18 = 0;
      int v19 = 0;
      unsigned int v7 = (const void *)language_modeling::v1::kEnvironmentAppIdentifierKey;
      size_t v8 = strlen((const char *)language_modeling::v1::kEnvironmentAppIdentifierKey);
      if (v8 <= 0x7FFFFFFFFFFFFFF7)
      {
        int v9 = (void *)v8;
        if (v8 >= 0x17)
        {
          uint64_t v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v8 | 7) != 0x17) {
            uint64_t v11 = v8 | 7;
          }
          uint64_t v12 = v11 + 1;
          BOOL v10 = operator new(v11 + 1);
          __p[1] = v9;
          unint64_t v21 = v12 | 0x8000000000000000;
          __p[0] = v10;
        }
        else
        {
          HIBYTE(v21) = v8;
          BOOL v10 = __p;
          if (!v8)
          {
LABEL_17:
            *((unsigned char *)v9 + (void)v1sub_19E392864(&a9, 0) = 0;
            uint64_t v22 = 0x746C7561666564;
            *(void *)uint64_t v23 = v15[0];
            *(void *)&v23[7] = *(void *)((char *)v15 + 7);
            char v24 = 7;
            v15[0] = 0;
            *(void *)((char *)v15 + 7) = 0;
            int v25 = 1;
            v14[0] = 0;
            v14[1] = 0;
            BOOL v13 = v14;
            sub_19E3D7E04((uint64_t *)&v13, (uint64_t)v14, __dst, (uint64_t)__dst);
            sub_19E3D7E04((uint64_t *)&v13, (uint64_t)v14, (const void **)__p, (uint64_t)__p);
            language_modeling::v1::LanguageModel::makeSession();
          }
        }
        memmove(v10, v7, (size_t)v9);
        goto LABEL_17;
      }
LABEL_18:
      sub_19E37C958();
    }
  }
  memmove(v4, v1, (size_t)v3);
  goto LABEL_9;
}

void sub_19E3D7DD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_19E37B770(exception_object);
}

uint64_t *sub_19E3D7E04(uint64_t *result, uint64_t a2, const void **a3, uint64_t a4)
{
  unsigned int v7 = result;
  size_t v8 = result + 1;
  if (result + 1 == (uint64_t *)a2) {
    goto LABEL_23;
  }
  int v9 = *((char *)a3 + 23);
  if (v9 >= 0) {
    BOOL v10 = a3;
  }
  else {
    BOOL v10 = *a3;
  }
  if (v9 >= 0) {
    size_t v11 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v11 = (size_t)a3[1];
  }
  int v12 = *(char *)(a2 + 55);
  if (v12 >= 0) {
    BOOL v13 = (const void *)(a2 + 32);
  }
  else {
    BOOL v13 = *(const void **)(a2 + 32);
  }
  if (v12 >= 0) {
    size_t v14 = *(unsigned __int8 *)(a2 + 55);
  }
  else {
    size_t v14 = *(void *)(a2 + 40);
  }
  if (v14 >= v11) {
    size_t v15 = v11;
  }
  else {
    size_t v15 = v14;
  }
  uint64_t result = (uint64_t *)memcmp(v10, v13, v15);
  if (result)
  {
    if ((result & 0x80000000) == 0) {
      goto LABEL_19;
    }
LABEL_23:
    uint64_t v16 = *(void *)a2;
    if (*v7 == a2)
    {
      uint64_t v18 = a2;
    }
    else
    {
      if (v16)
      {
        uint64_t v17 = *(void *)a2;
        do
        {
          uint64_t v18 = v17;
          uint64_t v17 = *(void *)(v17 + 8);
        }
        while (v17);
      }
      else
      {
        uint64_t v19 = a2;
        do
        {
          uint64_t v18 = *(void *)(v19 + 16);
          BOOL v37 = *(void *)v18 == v19;
          uint64_t v19 = v18;
        }
        while (v37);
      }
      int v20 = *(char *)(v18 + 55);
      if (v20 >= 0) {
        unint64_t v21 = (const void *)(v18 + 32);
      }
      else {
        unint64_t v21 = *(const void **)(v18 + 32);
      }
      if (v20 >= 0) {
        size_t v22 = *(unsigned __int8 *)(v18 + 55);
      }
      else {
        size_t v22 = *(void *)(v18 + 40);
      }
      int v23 = *((char *)a3 + 23);
      if (v23 >= 0) {
        char v24 = a3;
      }
      else {
        char v24 = *a3;
      }
      if (v23 >= 0) {
        size_t v25 = *((unsigned __int8 *)a3 + 23);
      }
      else {
        size_t v25 = (size_t)a3[1];
      }
      if (v25 >= v22) {
        size_t v26 = v22;
      }
      else {
        size_t v26 = v25;
      }
      uint64_t result = (uint64_t *)memcmp(v21, v24, v26);
      if (result)
      {
        if ((result & 0x80000000) == 0) {
          goto LABEL_48;
        }
      }
      else if (v22 >= v25)
      {
LABEL_48:
        uint64_t v27 = (void *)*v8;
        if (!*v8) {
          goto LABEL_49;
        }
        while (1)
        {
          uint64_t v28 = v27;
          uint64_t v31 = (const void *)v27[4];
          uint64_t v29 = v27 + 4;
          unint64_t v30 = v31;
          int v32 = *((char *)v29 + 23);
          if (v32 >= 0) {
            uint64_t v33 = v29;
          }
          else {
            uint64_t v33 = v30;
          }
          if (v32 >= 0) {
            size_t v34 = *((unsigned __int8 *)v29 + 23);
          }
          else {
            size_t v34 = v29[1];
          }
          if (v34 >= v25) {
            size_t v35 = v25;
          }
          else {
            size_t v35 = v34;
          }
          int v36 = memcmp(v24, v33, v35);
          if (v36)
          {
            if (v36 < 0) {
              goto LABEL_50;
            }
LABEL_64:
            uint64_t result = (uint64_t *)memcmp(v33, v24, v35);
            if (result)
            {
              if ((result & 0x80000000) == 0) {
                goto LABEL_130;
              }
            }
            else if (v34 >= v25)
            {
LABEL_130:
              unint64_t v38 = v8;
              goto LABEL_77;
            }
            size_t v8 = v28 + 1;
            uint64_t v27 = (void *)v28[1];
            if (!v27) {
              goto LABEL_78;
            }
          }
          else
          {
            if (v25 >= v34) {
              goto LABEL_64;
            }
LABEL_50:
            uint64_t v27 = (void *)*v28;
            size_t v8 = v28;
            if (!*v28) {
              goto LABEL_78;
            }
          }
        }
      }
    }
    BOOL v37 = v16 == 0;
    if (v16) {
      uint64_t v28 = (void *)v18;
    }
    else {
      uint64_t v28 = (void *)a2;
    }
    if (v37) {
      unint64_t v38 = (void *)a2;
    }
    else {
      unint64_t v38 = (void *)(v18 + 8);
    }
LABEL_77:
    size_t v8 = v38;
    if (*v38) {
      return result;
    }
    goto LABEL_78;
  }
  if (v11 < v14) {
    goto LABEL_23;
  }
LABEL_19:
  uint64_t result = (uint64_t *)memcmp(v13, v10, v15);
  if (result)
  {
    if ((result & 0x80000000) == 0) {
      return result;
    }
  }
  else if (v14 >= v11)
  {
    return result;
  }
  unint64_t v38 = (void *)(a2 + 8);
  uint64_t v43 = *(void **)(a2 + 8);
  if (v43)
  {
    do
    {
      unint64_t v38 = v43;
      uint64_t v43 = (void *)*v43;
      uint64_t v28 = v38;
      int v44 = v38;
    }
    while (v43);
    if (v38 == v8) {
      goto LABEL_77;
    }
  }
  else
  {
    int v44 = (void *)a2;
    do
    {
      size_t v45 = v44;
      int v44 = (void *)v44[2];
    }
    while ((void *)*v44 != v45);
    uint64_t v28 = (void *)a2;
    if (v44 == v8) {
      goto LABEL_77;
    }
  }
  uint64_t v48 = (const void *)v44[4];
  unint64_t v46 = v44 + 4;
  uint64_t v47 = v48;
  int v49 = *((char *)v46 + 23);
  if (v49 >= 0) {
    int64_t v50 = v46;
  }
  else {
    int64_t v50 = v47;
  }
  if (v49 >= 0) {
    size_t v51 = *((unsigned __int8 *)v46 + 23);
  }
  else {
    size_t v51 = v46[1];
  }
  if (v51 >= v11) {
    size_t v52 = v11;
  }
  else {
    size_t v52 = v51;
  }
  uint64_t result = (uint64_t *)memcmp(v10, v50, v52);
  if (result)
  {
    if ((result & 0x80000000) != 0) {
      goto LABEL_77;
    }
  }
  else if (v11 < v51)
  {
    goto LABEL_77;
  }
  uint64_t v53 = (void *)*v8;
  if (*v8)
  {
    while (1)
    {
      uint64_t v28 = v53;
      double v56 = (const void *)v53[4];
      uint64_t v54 = v53 + 4;
      int v55 = v56;
      int v57 = *((char *)v54 + 23);
      if (v57 >= 0) {
        long long v58 = v54;
      }
      else {
        long long v58 = v55;
      }
      if (v57 >= 0) {
        size_t v59 = *((unsigned __int8 *)v54 + 23);
      }
      else {
        size_t v59 = v54[1];
      }
      if (v59 >= v11) {
        size_t v60 = v11;
      }
      else {
        size_t v60 = v59;
      }
      int v61 = memcmp(v10, v58, v60);
      if (v61)
      {
        if (v61 < 0) {
          goto LABEL_110;
        }
LABEL_124:
        uint64_t result = (uint64_t *)memcmp(v58, v10, v60);
        if (result)
        {
          if ((result & 0x80000000) == 0) {
            goto LABEL_130;
          }
        }
        else if (v59 >= v11)
        {
          goto LABEL_130;
        }
        size_t v8 = v28 + 1;
        uint64_t v53 = (void *)v28[1];
        if (!v53) {
          goto LABEL_78;
        }
      }
      else
      {
        if (v11 >= v59) {
          goto LABEL_124;
        }
LABEL_110:
        uint64_t v53 = (void *)*v28;
        size_t v8 = v28;
        if (!*v28) {
          goto LABEL_78;
        }
      }
    }
  }
LABEL_49:
  uint64_t v28 = v8;
LABEL_78:
  __n128 v39 = operator new(0x58uLL);
  uint64_t v40 = v39;
  if (*(char *)(a4 + 23) < 0)
  {
    sub_19E39369C(v39 + 32, *(void **)a4, *(void *)(a4 + 8));
  }
  else
  {
    *((_OWORD *)v39 + 2) = *(_OWORD *)a4;
    *((void *)v39 + 6) = *(void *)(a4 + 16);
  }
  v40[56] = 0;
  *((_DWORD *)v40 + 2sub_19E392864(&a9, 0) = -1;
  uint64_t v41 = *(unsigned int *)(a4 + 48);
  if (v41 != -1)
  {
    ((void (*)(char *, unsigned char *, uint64_t))*(&off_1EF0BEB40 + v41))(v62, v40 + 56, a4 + 24);
    *((_DWORD *)v40 + 2sub_19E392864(&a9, 0) = v41;
  }
  *(void *)uint64_t v40 = 0;
  *((void *)v40 + 1) = 0;
  *((void *)v40 + 2) = v28;
  *size_t v8 = v40;
  uint64_t v42 = *(void *)*v7;
  if (v42)
  {
    *unsigned int v7 = v42;
    uint64_t v40 = (unsigned char *)*v8;
  }
  uint64_t result = sub_19E37D324((uint64_t *)v7[1], (uint64_t *)v40);
  ++v7[2];
  return result;
}

void sub_19E3D821C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  operator delete(v13);
  _Unwind_Resume(a1);
}

void sub_19E3D8278(unsigned int *a1)
{
  if (a1)
  {
    sub_19E3D8278(*(void *)a1);
    sub_19E3D8278(*((void *)a1 + 1));
    uint64_t v2 = a1[20];
    if (v2 != -1) {
      ((void (*)(char *, unsigned int *))off_1EF0BEB30[v2])(&v3, a1 + 14);
    }
    a1[20] = -1;
    if (*((char *)a1 + 55) < 0) {
      operator delete(*((void **)a1 + 4));
    }
    operator delete(a1);
  }
}

void sub_19E3D82FC(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
}

void *sub_19E3D8314(int a1, void *__dst, long long *a3)
{
  if (*((char *)a3 + 23) < 0) {
    return sub_19E39369C(__dst, *(void **)a3, *((void *)a3 + 1));
  }
  long long v3 = *a3;
  __dst[2] = *((void *)a3 + 2);
  *(_OWORD *)long long __dst = v3;
  return result;
}

void sub_19E3D8340(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

uint64_t language_modeling::v1::LanguageModel::getLanguageLocales(language_modeling::v1::LanguageModel *this)
{
  return (*(uint64_t (**)(void))(**(void **)this + 56))();
}

uint64_t language_modeling::v1::LanguageModel::reloadWithLocales@<X0>(language_modeling::v1::LanguageModel *this@<X0>, const __CFArray *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void, const __CFArray *))(**(void **)this + 48))(*(void *)this, a2);
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = 0x73736563637553;
  *(unsigned char *)(a3 + 31) = 7;
  return result;
}

uint64_t language_modeling::v1::LanguageModel::addLexicon(void *a1)
{
  return (*(uint64_t (**)(void))(*(void *)*a1 + 64))(*a1);
}

uint64_t language_modeling::v1::LanguageModel::removeLexicon(void *a1)
{
  return (*(uint64_t (**)(void))(*(void *)*a1 + 72))(*a1);
}

uint64_t language_modeling::v1::LanguageModel::blocklistStatus(void *a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*a1 + 32))(*a1, a2, a3, 1);
}

{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*a1 + 40))(*a1, a2, a3, 1);
}

uint64_t language_modeling::v1::LanguageModel::blocklistStatus(void *a1)
{
  return (*(uint64_t (**)(void))(*(void *)*a1 + 32))(*a1);
}

{
  return (*(uint64_t (**)(void))(*(void *)*a1 + 40))(*a1);
}

uint64_t language_modeling::v1::LanguageModel::addVocabulary(language_modeling::v1::LanguageModel *this, void *a2)
{
  return (*(uint64_t (**)(void, void *))(**(void **)this + 80))(*(void *)this, a2);
}

uint64_t language_modeling::v1::LanguageModel::removeVocabulary(language_modeling::v1::LanguageModel *this, void *a2)
{
  return (*(uint64_t (**)(void, void *))(**(void **)this + 88))(*(void *)this, a2);
}

uint64_t language_modeling::v1::LanguageModel::flushDynamicData(language_modeling::v1::LanguageModel *this)
{
  return (*(uint64_t (**)(void))(**(void **)this + 96))(*(void *)this);
}

uint64_t language_modeling::v1::LanguageModel::clearDynamicDataForTesting(language_modeling::v1::LanguageModel *this)
{
  return (*(uint64_t (**)(void))(**(void **)this + 104))(*(void *)this);
}

uint64_t language_modeling::v1::LanguageModel::unwireMemory(language_modeling::v1::LanguageModel *this)
{
  return (*(uint64_t (**)(void))(**(void **)this + 120))(*(void *)this);
}

uint64_t language_modeling::v1::LanguageModel::testingParameters(language_modeling::v1::LanguageModel *this)
{
  return (*(uint64_t (**)(void))(**(void **)this + 136))();
}

uint64_t language_modeling::v1::LanguageModel::copyLinguisticDataFileInfo(language_modeling::v1::LanguageModel *this)
{
  (*(void (**)(uint64_t *__return_ptr))(**(void **)this + 144))(&v2);
  return v2;
}

uint64_t language_modeling::v1::LanguageModel::parameters(language_modeling::v1::LanguageModel *this)
{
  (*(void (**)(uint64_t *__return_ptr))(**(void **)this + 152))(&v2);
  return v2;
}

uint64_t language_modeling::v1::LanguageModel::modelType(language_modeling::v1::LanguageModel *this)
{
  return (*(uint64_t (**)(void))(**(void **)this + 160))();
}

void sub_19E3D93E8(void *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  size_t v8 = (const void **)a1[1];
  int v9 = *((char *)v8 + 23);
  if (v9 >= 0) {
    size_t v10 = *((unsigned __int8 *)v8 + 23);
  }
  else {
    size_t v10 = (size_t)v8[1];
  }
  if (v10 != strlen((const char *)language_modeling::v1::kLanguageModelTypeTokenID)
    || (v9 >= 0 ? (size_t v11 = v8) : (size_t v11 = *v8),
        memcmp(v11, (const void *)language_modeling::v1::kLanguageModelTypeTokenID, v10)))
  {
    uint64_t v28 = 0;
    if (a2[1] - *a2 != a3[1] - *a3) {
      __assert_rtn("normalizedNameTokenConditionalProbability", "ToucanLanguageModelSession.cpp", 1165, "tokens.size() == tokensMetadata.size()");
    }
    uint64_t v12 = a1[22];
    uint64_t v13 = *(void *)(v12 + 72);
    size_t v14 = *(std::__shared_weak_count **)(v12 + 80);
    v35[0] = v13;
    v35[1] = v14;
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 64))(v13);
    uint64_t v16 = (const void *)MEMORY[0x19F3BCDE0](v15);
    uint64_t v17 = v16;
    if (v16) {
      CFRetain(v16);
    }
    sub_19E372124(cf, v17);
    CFStringRef v18 = (const __CFString *)cf[0];
    if (cf[0])
    {
      CFTypeID TypeID = CFStringGetTypeID();
      if (TypeID == CFGetTypeID(v18))
      {
        sub_19E3721DC(__p, v18);
        if (cf[0]) {
          CFRelease(cf[0]);
        }
        if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
        int v20 = operator new(0x20uLL);
        v20[1] = __p;
        unint64_t v21 = v20 + 1;
        void *v20 = &unk_1EF0BDD48;
        std::string v20[2] = a1;
        void v20[3] = &v28;
        int v36 = v20;
        cf[0] = &unk_1EF0BDDA0;
        cf[1] = a1;
        size_t v34 = cf;
        uint64_t v22 = a1[22];
        int v23 = (char *)operator new(0x20uLL);
        *(void *)int v23 = &unk_1EF0BDD48;
        *(_OWORD *)(v23 + 8) = *(_OWORD *)v21;
        *((void *)v23 + 3) = v21[2];
        int v32 = v23;
        unint64_t v30 = v29;
        v29[0] = &unk_1EF0BDDA0;
        v29[1] = a1;
        sub_19E539074(a4, v22, a2, a3);
        if (v30 == v29)
        {
          (*(void (**)(void *))(v29[0] + 32))(v29);
        }
        else if (v30)
        {
          (*(void (**)(void))(*v30 + 40))();
        }
        if (v32 == v31)
        {
          (*(void (**)(void *))(v31[0] + 32))(v31);
        }
        else if (v32)
        {
          (*(void (**)(void))(*v32 + 40))();
        }
        if (v34 == cf)
        {
          (*((void (**)(CFTypeRef *))cf[0] + 4))(cf);
        }
        else if (v34)
        {
          (*((void (**)(void))*v34 + 5))();
        }
        if (v36 == v35)
        {
          (*(void (**)(void *))(v35[0] + 32))(v35);
          if ((v27 & 0x80000000) == 0) {
            return;
          }
        }
        else
        {
          if (v36) {
            (*(void (**)(void))(*v36 + 40))();
          }
          if ((v27 & 0x80000000) == 0) {
            return;
          }
        }
        operator delete(__p[0]);
        return;
      }
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x19F3BD790](exception, "Could not convert");
    }
    else
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x19F3BD790](exception, "Could not construct");
    }
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v24 = a1[22];
  sub_19E538DB8(v24, a2, a3, a4);
}

void sub_19E3D990C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,const void *a25)
{
  __cxa_free_exception(v25);
  sub_19E3C6F1C(&a25);
  sub_19E3D73EC(v26 - 120);
  _Unwind_Resume(a1);
}

void *sub_19E3D99A4(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_19E3D9A28(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_19E3D9AAC()
{
  return &unk_1EF0B8238;
}

uint64_t sub_19E3D9AB8(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZNK17language_modeling2v126ToucanLanguageModelSession41normalizedNameTokenConditionalProbabilityERK"
                     "NSt3__16vectorINS3_INS0_5TokenENS2_9allocatorIS4_EEEENS5_IS7_EEEERKNS3_INS3_INS0_13TokenMetadataENS"
                     "5_ISC_EEEENS5_ISE_EEEERKNS0_17LinguisticContextEE3$_1"
    || ((v3 & (unint64_t)"ZNK17language_modeling2v126ToucanLanguageModelSession41normalizedNameTokenConditionalPro"
                                "babilityERKNSt3__16vectorINS3_INS0_5TokenENS2_9allocatorIS4_EEEENS5_IS7_EEEERKNS3_INS3_I"
                                "NS0_13TokenMetadataENS5_ISC_EEEENS5_ISE_EEEERKNS0_17LinguisticContextEE3$_1" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZNK17language_modeling2v126ToucanLanguageModelSession41normalizedNameTokenConditionalProbabilityERKNSt3__16vectorINS3_INS0_5TokenENS2_9allocatorIS4_EEEENS5_IS7_EEEERKNS3_INS3_INS0_13TokenMetadataENS5_ISC_EEEENS5_ISE_EEEERKNS0_17LinguisticContextEE3$_1")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK17language_modeling2v126ToucanLanguageModelSession41normalizedNameTokenConditionalProbabilityERKNSt3__16vectorINS3_INS0_5TokenENS2_9allocatorIS4_EEEENS5_IS7_EEEERKNS3_INS3_INS0_13TokenMetadataENS5_ISC_EEEENS5_ISE_EEEERKNS0_17LinguisticContextEE3$_1" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void sub_19E3D9B10(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  *(_OWORD *)unsigned int v7 = *(_OWORD *)a2;
  uint64_t v8 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  int v9 = *(_DWORD *)(a2 + 24);
  uint64_t v6 = *(void *)(a1 + 8);
  sub_19E371C70(__p, (const UInt8 *)v7);
  int v11 = v9;
  sub_19E3D9C08(v6, __p, a3, a4);
}

void sub_19E3D9BBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  _Unwind_Resume(exception_object);
}

void sub_19E3D9C08(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  v22[4] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(const void ***)(a1 + 8);
  int v9 = *((char *)v8 + 23);
  if (v9 >= 0) {
    size_t v10 = *((unsigned __int8 *)v8 + 23);
  }
  else {
    size_t v10 = (size_t)v8[1];
  }
  if (v10 == strlen((const char *)language_modeling::v1::kLanguageModelTypeTokenID))
  {
    if (v9 >= 0) {
      int v11 = v8;
    }
    else {
      int v11 = *v8;
    }
    if (!memcmp(v11, (const void *)language_modeling::v1::kLanguageModelTypeTokenID, v10))
    {
      uint64_t v12 = *(void *)(a1 + 176);
      int64x2_t v13 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
      uint64_t v14 = 0;
      __int16 v15 = 0;
      char v16 = 1;
      long long v17 = xmmword_19E572FD0;
      int v18 = 0;
      long long v19 = xmmword_19E572FD0;
      uint64_t v21 = 0;
      long long v20 = 0xFFEFFFFFFFFFFFFFLL;
      void v22[3] = 0;
      sub_19E53AAAC(a4, v12, (uint64_t)a2, *a3, (uint64_t)&v13, 1, v22);
    }
  }
  v22[0] = 0;
  sub_19E3D9E88((uint64_t)&v13, a1, a2, a3, 1, (uint64_t)v22, 0);
  operator new();
}

void sub_19E3D9E08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (a25 == v25)
  {
    (*(void (**)(uint64_t *))(a22 + 32))(&a22);
    _Unwind_Resume(exception_object);
  }
  if (a25)
  {
    (*(void (**)(void))(*(void *)a25 + 40))();
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E3D9E88(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t *a4, int a5, uint64_t a6, int a7)
{
  uint64_t v7 = a6;
  int v8 = a5;
  int v9 = a4;
  size_t v10 = a3;
  uint64_t v11 = a2;
  uint64_t v12 = a1;
  uint64_t v88 = *MEMORY[0x1E4F143B8];
  int64x2_t v13 = (uint64_t *)*a4;
  v83[0] = 0;
  v83[1] = 0;
  uint64_t v84 = 0;
  if (!a7) {
    goto LABEL_45;
  }
  uint64_t v14 = *(void *)(a2 + 176);
  __int16 v15 = *(void **)(v14 + 72);
  char v16 = *(std::__shared_weak_count **)(v14 + 80);
  __p[0] = v15;
  __p[1] = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v15[15])
  {
    int v17 = (*(uint64_t (**)(void))(**(void **)(a2 + 112) + 184))(*(void *)(a2 + 112));
    if (!v16) {
      goto LABEL_10;
    }
  }
  else
  {
    int v17 = 0;
    if (!v16) {
      goto LABEL_10;
    }
  }
  if (!atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
LABEL_10:
  uint64_t v12 = a1;
  int v8 = a5;
  int v9 = a4;
  size_t v10 = a3;
  uint64_t v7 = a6;
  if (!v17)
  {
LABEL_45:
    sub_19E3DBE64((char **)__p, v11, v13);
    if (v83[0])
    {
      v83[1] = v83[0];
      operator delete(v83[0]);
    }
    long long v34 = *(_OWORD *)__p;
    *(_OWORD *)int v83 = *(_OWORD *)__p;
    uint64_t v84 = v77;
    goto LABEL_106;
  }
  uint64_t v72 = v11;
  uint64_t v80 = 0;
  uint64_t v81 = 0;
  uint64_t v82 = 0;
  LOBYTE(__p[0]) = 0;
  char v79 = 0;
  uint64_t v19 = *v13;
  uint64_t v18 = v13[1];
  if (v18 != *v13)
  {
    long long v20 = 0;
    while (1)
    {
      sub_19E371C70(&v74, (const UInt8 *)v19);
      int v75 = *(_DWORD *)(v19 + 24);
      if ((*(unsigned int (**)(void))(**(void **)(v11 + 112) + 176))(*(void *)(v11 + 112)) == 2)
      {
        sub_19E3DAACC((uint64_t)&v85, v11, (void **)&v80, (const void **)__p, (uint64_t)&v74);
        long long v20 = v81;
      }
      else
      {
        sub_19E3DB07C((uint64_t)&v85, v11, &v74);
      }
      if (v20 >= v82)
      {
        int v23 = v80;
        uint64_t v24 = (v20 - v80) >> 5;
        unint64_t v25 = v24 + 1;
        if ((unint64_t)(v24 + 1) >> 59) {
          sub_19E37C7C4();
        }
        uint64_t v26 = v82 - v80;
        if ((v82 - v80) >> 4 > v25) {
          unint64_t v25 = v26 >> 4;
        }
        if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v27 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v27 = v25;
        }
        if (v27 >> 59) {
          sub_19E37C2B8();
        }
        uint64_t v28 = (char *)operator new(32 * v27);
        uint64_t v29 = &v28[32 * v24];
        unint64_t v30 = &v28[32 * v27];
        *(_OWORD *)uint64_t v29 = v85;
        *((void *)v29 + 2) = v86;
        int v86 = 0;
        long long v85 = 0uLL;
        *((_DWORD *)v29 + 6) = v87;
        uint64_t v31 = v29 + 32;
        if (v20 == v23)
        {
          uint64_t v80 = v29;
          uint64_t v81 = v29 + 32;
          uint64_t v82 = &v28[32 * v27];
        }
        else
        {
          do
          {
            long long v32 = *((_OWORD *)v20 - 2);
            *((void *)v29 - 2) = *((void *)v20 - 2);
            *((_OWORD *)v29 - 2) = v32;
            *((void *)v20 - 3) = 0;
            *((void *)v20 - 2) = 0;
            *((void *)v20 - 4) = 0;
            *((_DWORD *)v29 - 2) = *((_DWORD *)v20 - 2);
            v29 -= 32;
            v20 -= 32;
          }
          while (v20 != v23);
          long long v20 = v80;
          uint64_t v33 = (void **)v81;
          uint64_t v80 = v29;
          uint64_t v81 = v31;
          uint64_t v82 = v30;
          while (v33 != (void **)v20)
          {
            if (*((char *)v33 - 9) < 0) {
              operator delete(*(v33 - 4));
            }
            v33 -= 4;
          }
        }
        if (v20) {
          operator delete(v20);
        }
        uint64_t v81 = v31;
        if (SHIBYTE(v86) < 0) {
          operator delete((void *)v85);
        }
        long long v20 = v31;
        if ((SHIBYTE(v74.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_20:
          if (v79) {
            goto LABEL_21;
          }
          goto LABEL_44;
        }
      }
      else
      {
        long long v21 = v85;
        *((void *)v20 + 2) = v86;
        *(_OWORD *)long long v20 = v21;
        int v86 = 0;
        long long v85 = 0uLL;
        *((_DWORD *)v20 + 6) = v87;
        v20 += 32;
        uint64_t v81 = v20;
        if ((SHIBYTE(v74.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_20;
        }
      }
      operator delete(v74.__r_.__value_.__l.__data_);
      if (v79)
      {
LABEL_21:
        sub_19E371C70(&v85, (const UInt8 *)v19);
        int v22 = *(_DWORD *)(v19 + 24);
        LODWORD(v87) = v22;
        if (SHIBYTE(v77) < 0)
        {
          operator delete(__p[0]);
          int v22 = (int)v87;
        }
        *(_OWORD *)int __p = v85;
        unint64_t v77 = v86;
        int v78 = v22;
        goto LABEL_14;
      }
LABEL_44:
      sub_19E371C70(__p, (const UInt8 *)v19);
      int v78 = *(_DWORD *)(v19 + 24);
      char v79 = 1;
LABEL_14:
      v19 += 32;
      if (v19 == v18) {
        goto LABEL_49;
      }
    }
  }
  long long v20 = 0;
LABEL_49:
  size_t v35 = v83[0];
  if (v84 == v83[0])
  {
    if (v84)
    {
      v83[1] = v84;
      operator delete(v84);
      v83[0] = 0;
      v83[1] = 0;
      uint64_t v84 = 0;
    }
    size_t v35 = operator new(4uLL);
    v83[0] = v35;
    v83[1] = v35;
    uint64_t v84 = v35 + 1;
  }
  *size_t v35 = 1;
  v83[1] = v35 + 1;
  int v36 = (unsigned __int8 *)v20;
  if (v20 != v80)
  {
    unint64_t v37 = 0;
    int v36 = (unsigned __int8 *)v80;
    do
    {
      sub_19E3DB9A0((uint64_t)&v85, v11, &v36[32 * v37], (unsigned int *)v83[0], (unsigned int *)v83[1]);
      (*(void (**)(std::string *__return_ptr))(**(void **)(v11 + 112) + 16))(&v74);
      unint64_t v38 = (unsigned int *)v74.__r_.__value_.__r.__words[0];
      if (v74.__r_.__value_.__l.__size_ == v74.__r_.__value_.__r.__words[0])
      {
LABEL_90:
        uint64_t v41 = (int *)v74.__r_.__value_.__r.__words[0];
      }
      else
      {
        uint64_t v39 = 4 * ((uint64_t)(v74.__r_.__value_.__l.__size_ - v74.__r_.__value_.__r.__words[0]) >> 2);
        do
        {
          if ((*(uint64_t (**)(void, void))(**(void **)(v11 + 112) + 96))(*(void *)(v11 + 112), *v38))goto LABEL_90; {
          ++v38;
          }
          v39 -= 4;
        }
        while (v39);
        std::string::size_type size = v74.__r_.__value_.__l.__size_;
        uint64_t v41 = (int *)v74.__r_.__value_.__r.__words[0];
        if (v74.__r_.__value_.__r.__words[0] != v74.__r_.__value_.__l.__size_)
        {
          uint64_t v42 = (char *)v83[1];
          while (1)
          {
            int v44 = *v41;
            if (v42 >= v84) {
              break;
            }
            *(_DWORD *)uint64_t v42 = v44;
            uint64_t v43 = v42 + 4;
LABEL_63:
            v83[1] = v43;
            ++v41;
            uint64_t v42 = (char *)v43;
            if (v41 == (int *)size) {
              goto LABEL_90;
            }
          }
          size_t v45 = (char *)v83[0];
          int64_t v46 = v42 - (char *)v83[0];
          uint64_t v47 = (v42 - (char *)v83[0]) >> 2;
          unint64_t v48 = v47 + 1;
          if ((unint64_t)(v47 + 1) >> 62) {
            sub_19E37C7C4();
          }
          int64_t v49 = (unsigned char *)v84 - (char *)v83[0];
          if ((int64_t)((uint64_t)v84 - (unint64_t)v83[0]) >> 1 > v48) {
            unint64_t v48 = v49 >> 1;
          }
          if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v50 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v50 = v48;
          }
          if (v50)
          {
            if (v50 >> 62) {
              sub_19E37C2B8();
            }
            size_t v51 = operator new(4 * v50);
          }
          else
          {
            size_t v51 = 0;
          }
          size_t v52 = &v51[4 * v47];
          *size_t v52 = v44;
          uint64_t v43 = v52 + 1;
          if (v42 == v45)
          {
            uint64_t v11 = v72;
            goto LABEL_81;
          }
          unint64_t v53 = v42 - 4 - v45;
          if (v53 < 0xBC
            || &v51[v46 - 4 - (v53 & 0xFFFFFFFFFFFFFFFCLL)] > &v51[v46 - 4]
            || &v42[-(v53 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v42 - 4
            || (unint64_t)(v42 - v51 - v46) < 0x20)
          {
            uint64_t v54 = v42;
            uint64_t v11 = v72;
          }
          else
          {
            uint64_t v56 = (v53 >> 2) + 1;
            uint64_t v54 = &v42[-4 * (v56 & 0x7FFFFFFFFFFFFFF8)];
            int v57 = &v51[4 * v47 - 16];
            long long v58 = v42 - 16;
            uint64_t v59 = v56 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v60 = *(_OWORD *)v58;
              *(v57 - 1) = *((_OWORD *)v58 - 1);
              _OWORD *v57 = v60;
              v57 -= 2;
              v58 -= 32;
              v59 -= 8;
            }
            while (v59);
            v52 -= v56 & 0x7FFFFFFFFFFFFFF8;
            uint64_t v11 = v72;
            if (v56 == (v56 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_81:
              v83[0] = v52;
              v83[1] = v43;
              uint64_t v84 = &v51[4 * v50];
              if (v45) {
                operator delete(v45);
              }
              goto LABEL_63;
            }
          }
          do
          {
            int v55 = *((_DWORD *)v54 - 1);
            v54 -= 4;
            *--size_t v52 = v55;
          }
          while (v54 != v45);
          goto LABEL_81;
        }
      }
      if (v41)
      {
        v74.__r_.__value_.__l.__size_ = (std::string::size_type)v41;
        operator delete(v41);
      }
      if (SHIBYTE(v86) < 0) {
        operator delete((void *)v85);
      }
      ++v37;
      int v36 = (unsigned __int8 *)v80;
      long long v20 = v81;
    }
    while (v37 < (v81 - v80) >> 5);
  }
  if (v79 && SHIBYTE(v77) < 0) {
    operator delete(__p[0]);
  }
  if (v36)
  {
    while (v20 != (char *)v36)
    {
      if (*(v20 - 9) < 0) {
        operator delete(*((void **)v20 - 4));
      }
      v20 -= 32;
    }
    uint64_t v81 = (char *)v36;
    operator delete(v36);
  }
  long long v34 = *(_OWORD *)v83;
  uint64_t v12 = a1;
  int v8 = a5;
  int v9 = a4;
  size_t v10 = a3;
  uint64_t v7 = a6;
LABEL_106:
  sub_19E3DB9A0((uint64_t)__p, v11, v10, (unsigned int *)v34, *((unsigned int **)&v34 + 1));
  (*(void (**)(std::string *__return_ptr))(**(void **)(v11 + 112) + 16))(&v74);
  LODWORD(v8sub_19E392864(&a9, 0) = 1065353216;
  if (*(unsigned char *)(v11 + 81)
    || (size_t v62 = (unsigned int *)v74.__r_.__value_.__r.__words[0],
        v74.__r_.__value_.__l.__size_ == v74.__r_.__value_.__r.__words[0]))
  {
LABEL_107:
    if ((*(unsigned int (**)(void, std::string *, void **, char **, uint64_t))(**(void **)(v11 + 96)
                                                                                          + 24))(*(void *)(v11 + 96), &v74, v83, &v80, v7))
    {
      float v61 = *(float *)&v80;
      goto LABEL_115;
    }
  }
  else
  {
    uint64_t v63 = 4 * ((uint64_t)(v74.__r_.__value_.__l.__size_ - v74.__r_.__value_.__r.__words[0]) >> 2);
    while (!(*(unsigned int (**)(void, void))(**(void **)(v11 + 112) + 96))(*(void *)(v11 + 112), *v62))
    {
      ++v62;
      v63 -= 4;
      if (!v63) {
        goto LABEL_107;
      }
    }
  }
  LODWORD(v8sub_19E392864(&a9, 0) = 0;
  float v61 = 0.0;
LABEL_115:
  float v64 = log10f(v61);
  *(void *)(v12 + 16) = 0;
  *(_WORD *)(v12 + 24) = 0;
  if (v61 <= 0.0) {
    float v64 = -10.0;
  }
  double v65 = v64;
  *(unsigned char *)(v12 + 32) = 1;
  *(_OWORD *)(v12 + 64) = xmmword_19E572FD0;
  *(void *)(v12 + 88) = 0;
  *(void *)(v12 + 96) = 0;
  *(void *)(v12 + 8sub_19E392864(&a9, 0) = 0xFFEFFFFFFFFFFFFFLL;
  *(void *)(v12 + 48) = 0x3FF0000000000000;
  *(double *)(v12 + 4sub_19E392864(&a9, 0) = v65;
  *(_DWORD *)(v12 + 56) = 2;
  *(double *)uint64_t v12 = v65;
  *(double *)(v12 + 8) = v65;
  if (*(_DWORD *)(v11 + 48) != 3)
  {
    uint64_t v66 = *(void *)(v11 + 176);
    *(void *)&long long v85 = &unk_1EF0BDCF0;
    std::string::size_type v87 = &v85;
    sub_19E53AAAC((uint64_t)&v73, v66, (uint64_t)v10, *v9, v12, v8, &v85);
  }
  if (v74.__r_.__value_.__r.__words[0])
  {
    v74.__r_.__value_.__l.__size_ = v74.__r_.__value_.__r.__words[0];
    operator delete(v74.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v77) < 0) {
    operator delete(__p[0]);
  }
  if (v83[0])
  {
    v83[1] = v83[0];
    operator delete(v83[0]);
  }
}

void sub_19E3DA984(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,char a31,int a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37)
{
  if (a31 && a29 < 0) {
    operator delete(__p);
  }
  sub_19E3C3B0C(&a33);
  if (a36)
  {
    a37 = (uint64_t)a36;
    operator delete(a36);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_19E3DAACC(uint64_t a1, uint64_t a2, void **a3, const void **a4, uint64_t a5)
{
  if (!*((unsigned char *)a4 + 32)
    || ((v10 = *((char *)a4 + 23), v10 >= 0) ? (size_t v11 = *((unsigned __int8 *)a4 + 23)) : (size_t v11 = (size_t)a4[1]), !v11))
  {
LABEL_48:
    uint64_t v37 = *(void *)(a2 + 176);
    std::string::size_type v38 = *(void *)(v37 + 72);
    uint64_t v39 = *(std::__shared_weak_count **)(v37 + 80);
    __dst.__r_.__value_.__r.__words[0] = v38;
    __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v39;
    if (v39) {
      atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v40 = sub_19E488534((uint64_t *)(v38 + 120), (const char *)a5);
    if (v39 && !atomic_fetch_add(&v39->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
    sub_19E3DCCD0((char *)&v46, a5, v40, a3);
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
      sub_19E39369C(&__dst, v46.__r_.__value_.__l.__data_, v46.__r_.__value_.__l.__size_);
    }
    else {
      std::string __dst = v46;
    }
    int v49 = *(_DWORD *)(a5 + 24);
    sub_19E371C70((void *)a1, (const UInt8 *)&__dst);
    *(_DWORD *)(a1 + 24) = v49;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__dst.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return;
      }
    }
    else if ((SHIBYTE(v46.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      return;
    }
    uint64_t v41 = (void *)v46.__r_.__value_.__r.__words[0];
    goto LABEL_61;
  }
  unint64_t v12 = v11 + 1;
  if (v11 + 1 >= 0x7FFFFFFFFFFFFFF8) {
    sub_19E37C958();
  }
  if (v12 > 0x16)
  {
    uint64_t v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17) {
      uint64_t v14 = v12 | 7;
    }
    uint64_t v15 = v14 + 1;
    p_dst = (std::string *)operator new(v14 + 1);
    __dst.__r_.__value_.__l.__size_ = v11 + 1;
    __dst.__r_.__value_.__r.__words[2] = v15 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v11 + 1;
  }
  if (v10 >= 0) {
    char v16 = a4;
  }
  else {
    char v16 = *a4;
  }
  memmove(p_dst, v16, v11);
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v11) = 32;
  int v17 = *(char *)(a5 + 23);
  if (v17 >= 0) {
    uint64_t v18 = (const std::string::value_type *)a5;
  }
  else {
    uint64_t v18 = *(const std::string::value_type **)a5;
  }
  if (v17 >= 0) {
    std::string::size_type v19 = *(unsigned __int8 *)(a5 + 23);
  }
  else {
    std::string::size_type v19 = *(void *)(a5 + 8);
  }
  long long v20 = std::string::append(&__dst, v18, v19);
  long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  std::string::size_type v52 = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)size_t v51 = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  uint64_t v22 = *(void *)(a2 + 176);
  std::string::size_type v23 = *(void *)(v22 + 72);
  uint64_t v24 = *(std::__shared_weak_count **)(v22 + 80);
  __dst.__r_.__value_.__r.__words[0] = v23;
  __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v24;
  if (v24) {
    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v25 = sub_19E488534((uint64_t *)(v23 + 120), (const char *)v51);
  int v26 = v25;
  if (!v24 || atomic_fetch_add(&v24->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    if (v25) {
      goto LABEL_28;
    }
LABEL_46:
    if (SHIBYTE(v52) < 0) {
      operator delete(v51[0]);
    }
    goto LABEL_48;
  }
  ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
  std::__shared_weak_count::__release_weak(v24);
  if (!v26) {
    goto LABEL_46;
  }
LABEL_28:
  sub_19E3DCCD0((char *)&__p, (uint64_t)v51, v26, a3);
  if ((v26 - 11) <= 3)
  {
    unint64_t v27 = (char *)a3[1];
    if (*a3 != v27)
    {
      uint64_t v28 = (void **)(v27 - 32);
      if (*(v27 - 9) < 0) {
        operator delete(*v28);
      }
      a3[1] = v28;
      *((unsigned char *)&v46.__r_.__value_.__s + 23) = 7;
      strcpy((char *)&v46, "_U_NT52");
      int v47 = 0;
      sub_19E371C70(&__dst, (const UInt8 *)&v46);
      int v49 = v47;
      uint64_t v29 = a3[1];
      if (v29 >= a3[2])
      {
        uint64_t v42 = sub_19E3DB868(a3, (uint64_t)&__dst);
        int v43 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
        a3[1] = v42;
        if (v43 < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        long long v30 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
        int v29[2] = *((void *)&__dst.__r_.__value_.__l + 2);
        *(_OWORD *)uint64_t v29 = v30;
        memset(&__dst, 0, sizeof(__dst));
        *((_DWORD *)v29 + 6) = v49;
        a3[1] = v29 + 4;
      }
      if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v46.__r_.__value_.__l.__data_);
      }
    }
    if (*(char *)(a5 + 23) < 0)
    {
      sub_19E39369C((unsigned char *)a1, *(void **)a5, *(void *)(a5 + 8));
    }
    else
    {
      *(_OWORD *)a1 = *(_OWORD *)a5;
      *(void *)(a1 + 16) = *(void *)(a5 + 16);
    }
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a5 + 24);
    goto LABEL_71;
  }
  std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  char v32 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (size < 5) {
    goto LABEL_43;
  }
  p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  int data = (int)p_p->__r_.__value_.__l.__data_;
  int v35 = p_p->__r_.__value_.__s.__data_[4];
  if (data != 1314870623 || v35 != 84)
  {
LABEL_43:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    goto LABEL_46;
  }
  int v44 = (char *)a3[1];
  if (v44 != *a3)
  {
    size_t v45 = (void **)(v44 - 32);
    if (*(v44 - 9) < 0)
    {
      operator delete(*v45);
      char v32 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    a3[1] = v45;
  }
  if (v32 < 0) {
    sub_19E39369C(&__dst, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string __dst = __p;
  }
  int v49 = *(_DWORD *)(a5 + 24);
  sub_19E371C70((void *)a1, (const UInt8 *)&__dst);
  *(_DWORD *)(a1 + 24) = v49;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
LABEL_71:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v52) < 0)
  {
    uint64_t v41 = v51[0];
LABEL_61:
    operator delete(v41);
  }
}

void sub_19E3DAF9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  if (a35 < 0)
  {
    operator delete(a30);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E3DB07C(uint64_t a1, uint64_t a2, std::string *a3)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  memset(&__p, 0, sizeof(__p));
  uint64_t v6 = v59;
  sub_19E4394BC(v59, (const char *)a3);
  if (v60 < 0) {
    uint64_t v6 = (void **)v59[0];
  }
  WORD2(v65.__r_.__value_.__r.__words[0]) = 0;
  LODWORD(v65.__r_.__value_.__l.__data_) = 0x100000;
  v65.__r_.__value_.__s.__data_[6] = 1;
  v65.__r_.__value_.__l.__size_ = 0;
  if (v6)
  {
    __int16 v7 = strlen((const char *)v6);
    unsigned __int16 v8 = v7;
    v65.__r_.__value_.__r.__words[2] = 0;
    uint64_t v66 = 0;
    if (v7)
    {
      sub_19E50EFF8((unsigned __int16 *)&v65, v7);
      if (*(unsigned __int16 *)&v65.__r_.__value_.__s.__data_[2] < v8) {
        __assert_rtn("initialize", "LMTIString.cpp", 269, "len <= m_capacity");
      }
      if (v65.__r_.__value_.__l.__size_) {
        std::string::size_type size = (std::string::value_type *)v65.__r_.__value_.__l.__size_;
      }
      else {
        std::string::size_type size = &v65.__r_.__value_.__s.__data_[16];
      }
      memcpy(size, v6, v8);
      LOWORD(v65.__r_.__value_.__l.__data_) = v8;
    }
  }
  else
  {
    v65.__r_.__value_.__r.__words[2] = 0;
    uint64_t v66 = 0;
  }
  sub_19E50F1DC((uint64_t)&__src, (unsigned __int16 *)&v65);
  if (__src.__r_.__value_.__l.__size_) {
    int v10 = (const char *)__src.__r_.__value_.__l.__size_;
  }
  else {
    int v10 = &__src.__r_.__value_.__s.__data_[16];
  }
  size_t v11 = strlen(v10);
  if (v11 >= 0x7FFFFFFFFFFFFFF8) {
    sub_19E37C958();
  }
  unint64_t v12 = (void *)v11;
  if (v11 >= 0x17)
  {
    uint64_t v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17) {
      uint64_t v14 = v11 | 7;
    }
    uint64_t v15 = v14 + 1;
    int64x2_t v13 = (void **)operator new(v14 + 1);
    __dst[1] = v12;
    int64_t v58 = v15 | 0x8000000000000000;
    __dst[0] = v13;
  }
  else
  {
    HIBYTE(v58) = v11;
    int64x2_t v13 = __dst;
    if (!v11) {
      goto LABEL_22;
    }
  }
  memmove(v13, v10, (size_t)v12);
LABEL_22:
  *((unsigned char *)v12 + (void)v13) = 0;
  if (__src.__r_.__value_.__l.__size_ && __src.__r_.__value_.__s.__data_[6] == 1) {
    free((void *)__src.__r_.__value_.__l.__size_);
  }
  if (v65.__r_.__value_.__l.__size_ && v65.__r_.__value_.__s.__data_[6] == 1) {
    free((void *)v65.__r_.__value_.__l.__size_);
  }
  if (v58 >= 0) {
    char v16 = (const char *)__dst;
  }
  else {
    char v16 = (const char *)__dst[0];
  }
  CFStringRef v17 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v16, 0x8000100u);
  CFTypeRef cf = v17;
  uint64_t v18 = *(void *)(a2 + 176);
  std::string::size_type v19 = *(void *)(v18 + 72);
  long long v20 = *(std::__shared_weak_count **)(v18 + 80);
  v54.__r_.__value_.__r.__words[0] = v19;
  v54.__r_.__value_.__l.__size_ = (std::string::size_type)v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v21 = *(void *)(v19 + 120);
  v65.__r_.__value_.__r.__words[0] = 0;
  v65.__r_.__value_.__l.__size_ = (std::string::size_type)&v65;
  v65.__r_.__value_.__r.__words[2] = 0x2000000000;
  uint64_t v22 = (uint64_t (*)(uint64_t, CFStringRef))off_1E9459F48;
  uint64_t v66 = off_1E9459F48;
  if (!off_1E9459F48)
  {
    __src.__r_.__value_.__r.__words[0] = MEMORY[0x1E4F143A8];
    __src.__r_.__value_.__l.__size_ = 0x40000000;
    __src.__r_.__value_.__r.__words[2] = (std::string::size_type)sub_19E3DCAE4;
    uint64_t v63 = &unk_1E599F2C0;
    float v64 = &v65;
    sub_19E3DCAE4((uint64_t)&__src);
    uint64_t v22 = *(uint64_t (**)(uint64_t, CFStringRef))(v65.__r_.__value_.__l.__size_ + 24);
  }
  _Block_object_dispose(&v65, 8);
  if (!v22)
  {
    dlerror();
    abort_report_np();
    __break(1u);
  }
  CFStringRef v23 = (const __CFString *)v22(v21, v17);
  CFStringRef v55 = v23;
  if (v20)
  {
    if (!atomic_fetch_add(&v20->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
    CFStringRef v23 = v55;
  }
  if (v23)
  {
    sub_19E37774C(v23, &__src);
    MEMORY[0x19F3BDBC0](&v54);
    int v24 = SHIBYTE(a3->__r_.__value_.__r.__words[2]);
    BOOL v25 = v24 < 0;
    if (v24 >= 0) {
      int v26 = (char *)a3;
    }
    else {
      int v26 = (char *)a3->__r_.__value_.__r.__words[0];
    }
    std::string::size_type v27 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
    if (v25) {
      std::string::size_type v27 = a3->__r_.__value_.__l.__size_;
    }
    sub_19E3DCA10(&v65, v26, (std::locale *)&v54, &v26[v27]);
    uint64_t v28 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
    if ((v28 & 0x80u) == 0) {
      std::string::size_type v29 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v29 = a3->__r_.__value_.__l.__size_;
    }
    std::string::size_type v30 = HIBYTE(v65.__r_.__value_.__r.__words[2]);
    int v31 = SHIBYTE(v65.__r_.__value_.__r.__words[2]);
    if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v30 = v65.__r_.__value_.__l.__size_;
    }
    if (v29 == v30)
    {
      if ((v65.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        char v32 = &v65;
      }
      else {
        char v32 = (std::string *)v65.__r_.__value_.__r.__words[0];
      }
      if ((v28 & 0x80) != 0)
      {
        BOOL v41 = memcmp(a3->__r_.__value_.__l.__data_, v32, a3->__r_.__value_.__l.__size_) == 0;
      }
      else
      {
        if (!*((unsigned char *)&a3->__r_.__value_.__s + 23))
        {
          BOOL v41 = 1;
          if ((SHIBYTE(v65.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_73;
          }
          goto LABEL_72;
        }
        uint64_t v33 = v28 - 1;
        long long v34 = a3;
        do
        {
          int v36 = v34->__r_.__value_.__s.__data_[0];
          long long v34 = (std::string *)((char *)v34 + 1);
          int v35 = v36;
          int v38 = v32->__r_.__value_.__s.__data_[0];
          char v32 = (std::string *)((char *)v32 + 1);
          int v37 = v38;
          BOOL v40 = v33-- != 0;
          BOOL v41 = v35 == v37;
        }
        while (v35 == v37 && v40);
      }
      if (v31 < 0) {
LABEL_72:
      }
        operator delete(v65.__r_.__value_.__l.__data_);
    }
    else
    {
      BOOL v41 = 0;
      if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_72;
      }
    }
LABEL_73:
    std::locale::~locale((std::locale *)&v54);
    if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v43 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v43 = __src.__r_.__value_.__l.__size_;
    }
    if (v43 == 7)
    {
      p_src = (std::string *)__src.__r_.__value_.__r.__words[0];
      if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_src = &__src;
      }
      int data = (int)p_src->__r_.__value_.__l.__data_;
      int v46 = *(_DWORD *)((char *)p_src->__r_.__value_.__r.__words + 3);
      BOOL v48 = data == 1314870623 && v46 == 942691406;
    }
    else
    {
      BOOL v48 = 0;
    }
    if (v41 || v48)
    {
      if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0) {
        sub_19E39369C(&v65, __src.__r_.__value_.__l.__data_, __src.__r_.__value_.__l.__size_);
      }
      else {
        std::string v65 = __src;
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string __p = v65;
    }
    else
    {
      *((unsigned char *)&v54.__r_.__value_.__s + 23) = 7;
      strcpy((char *)&v54, "_U_CAP_");
      if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v49 = &__src;
      }
      else {
        int v49 = (std::string *)__src.__r_.__value_.__r.__words[0];
      }
      unint64_t v50 = std::string::append(&v54, (const std::string::value_type *)v49, v43);
      long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
      v65.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v65.__r_.__value_.__l.__data_ = v51;
      v50->__r_.__value_.__l.__size_ = 0;
      v50->__r_.__value_.__r.__words[2] = 0;
      v50->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string __p = v65;
      *((unsigned char *)&v65.__r_.__value_.__s + 23) = 0;
      v65.__r_.__value_.__s.__data_[0] = 0;
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v54.__r_.__value_.__l.__data_);
      }
    }
    if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__src.__r_.__value_.__l.__data_);
    }
    goto LABEL_112;
  }
  if (&__p != a3)
  {
    signed __int8 v42 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v42 >= 0) {
        std::string::size_type v52 = a3;
      }
      else {
        std::string::size_type v52 = (std::string *)a3->__r_.__value_.__r.__words[0];
      }
      if (v42 >= 0) {
        size_t v53 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v53 = a3->__r_.__value_.__l.__size_;
      }
      sub_19E3C6D44((void **)&__p.__r_.__value_.__l.__data_, v52, v53);
    }
    else if ((*((unsigned char *)&a3->__r_.__value_.__s + 23) & 0x80) != 0)
    {
      sub_19E3C6C7C(&__p, a3->__r_.__value_.__l.__data_, a3->__r_.__value_.__l.__size_);
    }
    else
    {
      std::string __p = *a3;
    }
  }
LABEL_112:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    sub_19E39369C(&__src, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string __src = __p;
  }
  LODWORD(v63) = a3[1].__r_.__value_.__l.__data_;
  sub_19E371C70((void *)a1, (const UInt8 *)&__src);
  *(_DWORD *)(a1 + 24) = v63;
  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__src.__r_.__value_.__l.__data_);
    if (!v23) {
      goto LABEL_120;
    }
    goto LABEL_119;
  }
  if (v23) {
LABEL_119:
  }
    CFRelease(v23);
LABEL_120:
  if (cf) {
    CFRelease(cf);
  }
  if (SHIBYTE(v58) < 0)
  {
    operator delete(__dst[0]);
    if ((v60 & 0x80000000) == 0)
    {
LABEL_124:
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        return;
      }
LABEL_128:
      operator delete(__p.__r_.__value_.__l.__data_);
      return;
    }
  }
  else if ((v60 & 0x80000000) == 0)
  {
    goto LABEL_124;
  }
  operator delete(v59[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_128;
  }
}

void sub_19E3DB738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, const void *a16, const void *a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *__p,void *a38,int a39,__int16 a40,char a41,char a42)
{
  if (a42 < 0) {
    operator delete(__p);
  }
  sub_19E3DCC24(&a16);
  sub_19E3DCC24(&a17);
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  _Unwind_Resume(a1);
}

char *sub_19E3DB868(void **a1, uint64_t a2)
{
  uint64_t v2 = ((unsigned char *)a1[1] - (unsigned char *)*a1) >> 5;
  unint64_t v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) >> 59) {
    sub_19E37C7C4();
  }
  uint64_t v5 = (unsigned char *)a1[2] - (unsigned char *)*a1;
  if (v5 >> 4 > v3) {
    unint64_t v3 = v5 >> 4;
  }
  BOOL v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFE0;
  unint64_t v7 = 0x7FFFFFFFFFFFFFFLL;
  if (!v6) {
    unint64_t v7 = v3;
  }
  if (v7 >> 59) {
    sub_19E37C2B8();
  }
  uint64_t v9 = 32 * v7;
  int v10 = (char *)operator new(32 * v7);
  size_t v11 = &v10[32 * v2];
  unint64_t v12 = &v10[v9];
  *(_OWORD *)size_t v11 = *(_OWORD *)a2;
  *((void *)v11 + 2) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *((_DWORD *)v11 + 6) = *(_DWORD *)(a2 + 24);
  int64x2_t v13 = v11 + 32;
  uint64_t v14 = (void **)*a1;
  uint64_t v15 = (void **)a1[1];
  if (v15 == *a1)
  {
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
  }
  else
  {
    do
    {
      long long v16 = *((_OWORD *)v15 - 2);
      *((void *)v11 - 2) = *(v15 - 2);
      *((_OWORD *)v11 - 2) = v16;
      *(v15 - 3) = 0;
      *(v15 - 2) = 0;
      *(v15 - 4) = 0;
      *((_DWORD *)v11 - 2) = *((_DWORD *)v15 - 2);
      v11 -= 32;
      v15 -= 4;
    }
    while (v15 != v14);
    uint64_t v15 = (void **)*a1;
    CFStringRef v17 = (void **)a1[1];
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
    while (v17 != v15)
    {
      if (*((char *)v17 - 9) < 0) {
        operator delete(*(v17 - 4));
      }
      v17 -= 4;
    }
  }
  if (v15) {
    operator delete(v15);
  }
  return v13;
}

void sub_19E3DB9A0(uint64_t a1, uint64_t a2, unsigned __int8 *a3, unsigned int *a4, unsigned int *a5)
{
  if (a4 == a5)
  {
    int v8 = 1;
    if (*(unsigned char *)(a2 + 80)) {
      goto LABEL_7;
    }
  }
  else
  {
    if ((char *)a5 - (char *)a4 == 4)
    {
      int v8 = (*(uint64_t (**)(void, void))(**(void **)(a2 + 112) + 104))(*(void *)(a2 + 112), *a4);
      if (!*(unsigned char *)(a2 + 80)) {
        goto LABEL_4;
      }
LABEL_7:
      MEMORY[0x19F3BDBC0](&v46);
      int v10 = (char)a3[23];
      BOOL v11 = v10 < 0;
      if (v10 >= 0) {
        unint64_t v12 = (char *)a3;
      }
      else {
        unint64_t v12 = *(char **)a3;
      }
      uint64_t v13 = a3[23];
      if (v11) {
        uint64_t v13 = *((void *)a3 + 1);
      }
      sub_19E3DCA10(&__p, v12, &v46, &v12[v13]);
      uint64_t v14 = a3[23];
      if ((v14 & 0x80u) == 0) {
        uint64_t v15 = a3[23];
      }
      else {
        uint64_t v15 = *((void *)a3 + 1);
      }
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      int v17 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      if (v15 != size)
      {
        BOOL v9 = 0;
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_36;
        }
        goto LABEL_33;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((v14 & 0x80) != 0)
      {
        BOOL v9 = memcmp(*(const void **)a3, p_p, *((void *)a3 + 1)) == 0;
      }
      else
      {
        if (!a3[23])
        {
          BOOL v9 = 1;
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_36:
            std::locale::~locale(&v46);
            if ((char)a3[23] < 0) {
              goto LABEL_5;
            }
            goto LABEL_37;
          }
LABEL_33:
          operator delete(__p.__r_.__value_.__l.__data_);
          goto LABEL_36;
        }
        uint64_t v19 = v14 - 1;
        long long v20 = a3;
        do
        {
          int v22 = *v20++;
          int v21 = v22;
          int v24 = p_p->__r_.__value_.__s.__data_[0];
          p_p = (std::string *)((char *)p_p + 1);
          int v23 = v24;
          BOOL v26 = v19-- != 0;
          BOOL v9 = v21 == v23;
        }
        while (v21 == v23 && v26);
      }
      if ((v17 & 0x80000000) == 0) {
        goto LABEL_36;
      }
      goto LABEL_33;
    }
    int v8 = 0;
    if (*(unsigned char *)(a2 + 80)) {
      goto LABEL_7;
    }
  }
LABEL_4:
  BOOL v9 = 0;
  if ((char)a3[23] < 0)
  {
LABEL_5:
    sub_19E39369C((unsigned char *)a1, *(void **)a3, *((void *)a3 + 1));
    goto LABEL_38;
  }
LABEL_37:
  *(_OWORD *)a1 = *(_OWORD *)a3;
  *(void *)(a1 + 16) = *((void *)a3 + 2);
LABEL_38:
  *(_DWORD *)(a1 + 24) = *((_DWORD *)a3 + 6);
  if ((v8 & v9) != 1) {
    return;
  }
  signed __int8 v27 = a3[23];
  if (v27 >= 0) {
    uint64_t v28 = a3;
  }
  else {
    uint64_t v28 = *(const UInt8 **)a3;
  }
  if (v28)
  {
    if (v27 >= 0) {
      CFIndex v29 = a3[23];
    }
    else {
      CFIndex v29 = *((void *)a3 + 1);
    }
    CFStringRef v30 = CFStringCreateWithBytes(0, v28, v29, 0x8000100u, 0);
    CFStringRef v44 = v30;
    if (!v30)
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x19F3BD790](exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  else
  {
    CFStringRef v30 = 0;
    CFStringRef v44 = 0;
  }
  uint64_t v32 = *(void *)(a2 + 176);
  uint64_t v33 = *(void *)(v32 + 72);
  long long v34 = *(std::__shared_weak_count **)(v32 + 80);
  if (v34) {
    atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  CFLocaleRef v35 = (const __CFLocale *)(*(uint64_t (**)(uint64_t))(*(void *)v33 + 64))(v33);
  CFIndex Length = CFStringGetLength(v30);
  CFMutableStringRef MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], Length, v30);
  CFStringCapitalize(MutableCopy, v35);
  sub_19E372124(&cf, MutableCopy);
  CFStringRef v38 = (const __CFString *)cf;
  if (!cf)
  {
    std::string::size_type v43 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x19F3BD790](v43, "Could not construct");
    __cxa_throw(v43, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFTypeID TypeID = CFStringGetTypeID();
  if (TypeID == CFGetTypeID(v38))
  {
    sub_19E3C6934(&v46, v38);
  }
  else
  {
    v46.__locale_ = 0;
    char v47 = 0;
  }
  int v48 = *((_DWORD *)a3 + 6);
  sub_19E371C70(&__p, (const UInt8 *)&v46);
  int v40 = v48;
  int v50 = v48;
  if (*(char *)(a1 + 23) < 0)
  {
    operator delete(*(void **)a1);
    int v40 = v50;
  }
  *(std::string *)a1 = __p;
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
  __p.__r_.__value_.__s.__data_[0] = 0;
  *(_DWORD *)(a1 + 24) = v40;
  if ((v47 & 0x80000000) == 0)
  {
    CFTypeRef v41 = cf;
    if (!cf) {
      goto LABEL_62;
    }
    goto LABEL_61;
  }
  operator delete(v46.__locale_);
  CFTypeRef v41 = cf;
  if (cf) {
LABEL_61:
  }
    CFRelease(v41);
LABEL_62:
  if (!v34 || atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    CFStringRef v42 = v44;
    if (!v44) {
      return;
    }
    goto LABEL_65;
  }
  ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
  std::__shared_weak_count::__release_weak(v34);
  CFStringRef v42 = v44;
  if (v44) {
LABEL_65:
  }
    CFRelease(v42);
}

void sub_19E3DBDC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (*(char *)(v21 + 23) < 0) {
    operator delete(*(void **)v21);
  }
  _Unwind_Resume(exception_object);
}

void sub_19E3DBE64(char **a1, uint64_t a2, void *a3)
{
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = *(unsigned __int16 *)(a2 + 16);
  v71[0] = &unk_1EF0BDBE8;
  v71[1] = a2;
  uint64_t v72 = v71;
  int v70 = v4;
  int v68 = sub_19E3FA0C4((uint64_t)(a3 + 16), v4, &v70);
  uint64_t v5 = sub_19E3F996C((uint64_t)(a3 + 21), v4, &v70);
  unint64_t v63 = v4;
  std::string v65 = (void **)(v5 + 3);
  unint64_t v6 = (uint64_t)(v5[4] - v5[3]) >> 3;
  for (uint64_t i = a3[3]; v6 < (a3[4] - i) >> 5; uint64_t i = a3[3])
  {
    if (!v72) {
      sub_19E3ACB9C();
    }
    (*(void (**)(void *, unint64_t, void *))(*v72 + 48))(v72, i + 32 * v6, v68 + 3);
    uint64_t v9 = (uint64_t)(v68[4] - v68[3]) >> 2;
    BOOL v11 = (uint64_t *)v5[4];
    unint64_t v10 = v5[5];
    if ((unint64_t)v11 < v10)
    {
      *BOOL v11 = v9;
      int v8 = v11 + 1;
    }
    else
    {
      unint64_t v12 = (uint64_t *)*v65;
      uint64_t v13 = (char *)v11 - (unsigned char *)*v65;
      uint64_t v14 = v13 >> 3;
      unint64_t v15 = (v13 >> 3) + 1;
      if (v15 >> 61) {
        sub_19E37C7C4();
      }
      uint64_t v16 = v10 - (void)v12;
      if (v16 >> 2 > v15) {
        unint64_t v15 = v16 >> 2;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v15;
      }
      if (v17)
      {
        if (v17 >> 61) {
          sub_19E37C2B8();
        }
        uint64_t v18 = operator new(8 * v17);
      }
      else
      {
        uint64_t v18 = 0;
      }
      uint64_t v19 = (uint64_t *)&v18[8 * v14];
      *uint64_t v19 = v9;
      int v8 = v19 + 1;
      if (v11 != v12)
      {
        unint64_t v20 = (char *)(v11 - 1) - (char *)v12;
        if (v20 < 0x58) {
          goto LABEL_98;
        }
        if ((unint64_t)((char *)v11 - &v18[v13]) < 0x20) {
          goto LABEL_98;
        }
        uint64_t v21 = (v20 >> 3) + 1;
        int v22 = &v18[8 * v14 - 16];
        int v23 = v11 - 2;
        uint64_t v24 = v21 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v25 = *(_OWORD *)v23;
          *(v22 - 1) = *((_OWORD *)v23 - 1);
          *int v22 = v25;
          v22 -= 2;
          v23 -= 4;
          v24 -= 4;
        }
        while (v24);
        v19 -= v21 & 0x3FFFFFFFFFFFFFFCLL;
        v11 -= v21 & 0x3FFFFFFFFFFFFFFCLL;
        if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_98:
          do
          {
            uint64_t v26 = *--v11;
            *--uint64_t v19 = v26;
          }
          while (v11 != v12);
        }
      }
      void v5[3] = v19;
      v5[4] = v8;
      void v5[5] = &v18[8 * v17];
      if (v12) {
        operator delete(v12);
      }
    }
    v5[4] = v8;
    ++v6;
  }
  if (v72 == v71)
  {
    (*(void (**)(void *))(v71[0] + 32))(v71);
    unint64_t v27 = v63;
    int8x8_t v28 = (int8x8_t)a3[17];
    if (!*(void *)&v28)
    {
LABEL_51:
      uint64_t v36 = 0;
      int v37 = 0;
      goto LABEL_52;
    }
  }
  else
  {
    unint64_t v27 = v63;
    if (v72) {
      (*(void (**)(void))(*v72 + 40))();
    }
    int8x8_t v28 = (int8x8_t)a3[17];
    if (!*(void *)&v28) {
      goto LABEL_51;
    }
  }
  uint8x8_t v29 = (uint8x8_t)vcnt_s8(v28);
  v29.i16[0] = vaddlv_u8(v29);
  if (v29.u32[0] > 1uLL)
  {
    unint64_t v30 = v27;
    if (*(void *)&v28 <= v27) {
      unint64_t v30 = v27 % *(void *)&v28;
    }
  }
  else
  {
    unint64_t v30 = (v28.i32[0] - 1) & v27;
  }
  int v31 = *(uint64_t ***)(a3[16] + 8 * v30);
  if (!v31) {
    goto LABEL_51;
  }
  uint64_t v32 = *v31;
  if (!v32) {
    goto LABEL_51;
  }
  if (v29.u32[0] < 2uLL)
  {
    uint64_t v33 = *(void *)&v28 - 1;
    while (1)
    {
      uint64_t v35 = v32[1];
      if (v35 == v27)
      {
        if (*((_DWORD *)v32 + 4) == v27) {
          goto LABEL_90;
        }
      }
      else if ((v35 & v33) != v30)
      {
        goto LABEL_51;
      }
      uint64_t v32 = (uint64_t *)*v32;
      if (!v32) {
        goto LABEL_51;
      }
    }
  }
  while (1)
  {
    unint64_t v34 = v32[1];
    if (v34 == v27) {
      break;
    }
    if (v34 >= *(void *)&v28) {
      v34 %= *(void *)&v28;
    }
    if (v34 != v30) {
      goto LABEL_51;
    }
LABEL_41:
    uint64_t v32 = (uint64_t *)*v32;
    if (!v32) {
      goto LABEL_51;
    }
  }
  if (*((_DWORD *)v32 + 4) != v27) {
    goto LABEL_41;
  }
LABEL_90:
  int v37 = (int *)v32[3];
  uint64_t v36 = (v32[4] - (uint64_t)v37) >> 2;
LABEL_52:
  uint64_t v38 = *(void *)(a2 + 112);
  int v39 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v38 + 64))(v38, 1);
  int v69 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v38 + 64))(v38, 2);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  int v40 = (char *)operator new(4uLL);
  CFTypeRef v41 = v40;
  CFStringRef v42 = a1;
  *a1 = v40;
  *(_DWORD *)int v40 = v39;
  std::string::size_type v43 = v40 + 4;
  a1[2] = v40 + 4;
  a1[1] = v40 + 4;
  int v44 = v69;
  if (v36)
  {
    size_t v45 = v40 + 4;
    std::locale v46 = &v37[v36];
    int v67 = v39;
    while (1)
    {
      int v48 = *v37;
      if (*v37 == v39 || v48 == v44) {
        goto LABEL_56;
      }
      if (v45 >= v43) {
        break;
      }
      *(_DWORD *)size_t v45 = v48;
      char v47 = v45 + 4;
LABEL_55:
      v42[1] = v47;
      size_t v45 = v47;
LABEL_56:
      if (++v37 == v46) {
        return;
      }
    }
    uint64_t v50 = (v45 - v41) >> 2;
    unint64_t v51 = v50 + 1;
    if ((unint64_t)(v50 + 1) >> 62) {
      sub_19E37C7C4();
    }
    if ((v43 - v41) >> 1 > v51) {
      unint64_t v51 = (v43 - v41) >> 1;
    }
    if ((unint64_t)(v43 - v41) >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v52 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v52 = v51;
    }
    if (v52)
    {
      if (v52 >> 62) {
        sub_19E37C2B8();
      }
      size_t v53 = operator new(4 * v52);
      CFStringRef v42 = a1;
    }
    else
    {
      size_t v53 = 0;
    }
    std::string v54 = &v53[4 * v50];
    *(_DWORD *)std::string v54 = v48;
    char v47 = v54 + 4;
    if (v45 == v41) {
      goto LABEL_76;
    }
    unint64_t v55 = v45 - 4 - v41;
    if (v55 < 0xBC)
    {
      uint64_t v56 = v45;
      goto LABEL_75;
    }
    if (&v53[v45 - v41 - 4 - (v55 & 0xFFFFFFFFFFFFFFFCLL)] > &v53[v45 - v41 - 4])
    {
      uint64_t v56 = v45;
    }
    else
    {
      if (&v45[-(v55 & 0xFFFFFFFFFFFFFFFCLL) - 4] <= v45 - 4)
      {
        if ((unint64_t)(v41 - v53) < 0x20)
        {
          uint64_t v56 = v45;
          goto LABEL_75;
        }
        uint64_t v58 = (v55 >> 2) + 1;
        uint64_t v56 = &v45[-4 * (v58 & 0x7FFFFFFFFFFFFFF8)];
        uint64_t v59 = &v53[4 * v50 - 16];
        char v60 = v45 - 16;
        uint64_t v61 = v58 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v62 = *(_OWORD *)v60;
          *(v59 - 1) = *((_OWORD *)v60 - 1);
          _OWORD *v59 = v62;
          v59 -= 2;
          v60 -= 32;
          v61 -= 8;
        }
        while (v61);
        v54 -= 4 * (v58 & 0x7FFFFFFFFFFFFFF8);
        if (v58 != (v58 & 0x7FFFFFFFFFFFFFF8)) {
          goto LABEL_75;
        }
LABEL_76:
        std::string::size_type v43 = &v53[4 * v52];
        char *v42 = v54;
        v42[1] = v47;
        int v42[2] = v43;
        if (v41)
        {
          operator delete(v41);
          CFStringRef v42 = a1;
        }
        CFTypeRef v41 = v54;
        int v39 = v67;
        int v44 = v69;
        goto LABEL_55;
      }
      uint64_t v56 = v45;
    }
    do
    {
LABEL_75:
      int v57 = *((_DWORD *)v56 - 1);
      v56 -= 4;
      *((_DWORD *)v54 - 1) = v57;
      v54 -= 4;
    }
    while (v56 != v41);
    goto LABEL_76;
  }
}

void sub_19E3DC4BC(_Unwind_Exception *exception_object)
{
}

void sub_19E3DC4C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (!v12) {
    _Unwind_Resume(exception_object);
  }
  *(void *)(a12 + 8) = v12;
  operator delete(v12);
  _Unwind_Resume(exception_object);
}

void sub_19E3DC500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_19E3DC5FC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_19E3DC518()
{
  return &unk_1EF0B8218;
}

uint64_t sub_19E3DC524(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZNK17language_modeling2v126ToucanLanguageModelSession31_combinedConditionalProbabilityERKNS0_14Sani"
                     "tizedTokenERKNS0_17LinguisticContextEbRmbE3$_2"
    || ((v3 & (unint64_t)"ZNK17language_modeling2v126ToucanLanguageModelSession31_combinedConditionalProbabilityER"
                                "KNS0_14SanitizedTokenERKNS0_17LinguisticContextEbRmbE3$_2" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZNK17language_modeling2v126ToucanLanguageModelSession31_combinedConditionalProbabilityERKNS0_14SanitizedTokenERKNS0_17LinguisticContextEbRmbE3$_2")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK17language_modeling2v126ToucanLanguageModelSession31_combinedConditionalProbabilityERKNS0_14SanitizedTokenERKNS0_17LinguisticContextEbRmbE3$_2" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

double sub_19E3DC57C()
{
  return 1.0;
}

void sub_19E3DC58C(uint64_t a1, void *a2)
{
  *a2 = &unk_1EF0BDCF0;
}

void *sub_19E3DC5AC()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1EF0BDCF0;
  return result;
}

void sub_19E3DC5E4()
{
}

void *sub_19E3DC5FC(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_19E3DC680()
{
  return &unk_1EF0B81E8;
}

uint64_t sub_19E3DC68C(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZNK17language_modeling2v126ToucanLanguageModelSession12_fragmentIDsERNS0_21LinguisticContextImplEE3$_0"
    || ((v3 & (unint64_t)"ZNK17language_modeling2v126ToucanLanguageModelSession12_fragmentIDsERNS0_21LinguisticContextImplEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZNK17language_modeling2v126ToucanLanguageModelSession12_fragmentIDsERNS0_21LinguisticContextImplEE3$_0")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK17language_modeling2v126ToucanLanguageModelSession12_fragmentIDsERNS0_21LinguisticContextImplEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void sub_19E3DC6E4(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 8);
  sub_19E3DB9A0((uint64_t)&__p, v4, a2, *(unsigned int **)a3, *(unsigned int **)(a3 + 8));
  (*(void (**)(_DWORD **__return_ptr))(**(void **)(v4 + 112) + 16))(&v27);
  uint64_t v5 = v27;
  unint64_t v6 = v28;
  if (v27 != v28)
  {
    unint64_t v7 = *(char **)(a3 + 8);
    while (1)
    {
      int v9 = *v5;
      unint64_t v10 = *(void *)(a3 + 16);
      if ((unint64_t)v7 >= v10) {
        break;
      }
      *(_DWORD *)unint64_t v7 = v9;
      int v8 = v7 + 4;
LABEL_4:
      *(void *)(a3 + 8) = v8;
      ++v5;
      unint64_t v7 = v8;
      if (v5 == v6)
      {
        uint64_t v5 = v27;
        goto LABEL_33;
      }
    }
    BOOL v11 = *(unsigned int **)a3;
    uint64_t v12 = (uint64_t)&v7[-*(void *)a3];
    uint64_t v13 = v12 >> 2;
    unint64_t v14 = (v12 >> 2) + 1;
    if (v14 >> 62) {
      sub_19E37C7C4();
    }
    uint64_t v15 = v10 - (void)v11;
    if (v15 >> 1 > v14) {
      unint64_t v14 = v15 >> 1;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v14;
    }
    if (v16)
    {
      if (v16 >> 62) {
        sub_19E37C2B8();
      }
      unint64_t v17 = operator new(4 * v16);
    }
    else
    {
      unint64_t v17 = 0;
    }
    uint64_t v18 = &v17[4 * v13];
    _DWORD *v18 = v9;
    int v8 = (char *)(v18 + 1);
    if (v7 == (char *)v11) {
      goto LABEL_20;
    }
    unint64_t v19 = v7 - 4 - (char *)v11;
    if (v19 < 0xBC)
    {
      unint64_t v20 = (unsigned int *)v7;
      goto LABEL_19;
    }
    if (&v17[v12 - 4 - (v19 & 0xFFFFFFFFFFFFFFFCLL)] > &v17[v12 - 4])
    {
      unint64_t v20 = (unsigned int *)v7;
    }
    else
    {
      if (&v7[-(v19 & 0xFFFFFFFFFFFFFFFCLL) - 4] <= v7 - 4)
      {
        if ((unint64_t)(v7 - v17 - v12) < 0x20)
        {
          unint64_t v20 = (unsigned int *)v7;
          goto LABEL_19;
        }
        uint64_t v22 = (v19 >> 2) + 1;
        unint64_t v20 = (unsigned int *)&v7[-4 * (v22 & 0x7FFFFFFFFFFFFFF8)];
        int v23 = &v17[4 * v13 - 16];
        uint64_t v24 = v7 - 16;
        uint64_t v25 = v22 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v26 = *(_OWORD *)v24;
          *(v23 - 1) = *((_OWORD *)v24 - 1);
          *int v23 = v26;
          v23 -= 2;
          v24 -= 32;
          v25 -= 8;
        }
        while (v25);
        v18 -= v22 & 0x7FFFFFFFFFFFFFF8;
        if (v22 != (v22 & 0x7FFFFFFFFFFFFFF8)) {
          goto LABEL_19;
        }
LABEL_20:
        *(void *)a3 = v18;
        *(void *)(a3 + 8) = v8;
        *(void *)(a3 + 16) = &v17[4 * v16];
        if (v11) {
          operator delete(v11);
        }
        goto LABEL_4;
      }
      unint64_t v20 = (unsigned int *)v7;
    }
    do
    {
LABEL_19:
      int v21 = *--v20;
      *--uint64_t v18 = v21;
    }
    while (v20 != v11);
    goto LABEL_20;
  }
LABEL_33:
  if (v5)
  {
    int8x8_t v28 = v5;
    operator delete(v5);
  }
  if (v30 < 0) {
    operator delete(__p);
  }
}

void sub_19E3DC934(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if ((a18 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E3DC98C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF0BDBE8;
  a2[1] = v2;
  return result;
}

void *sub_19E3DC9B0(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF0BDBE8;
  result[1] = v3;
  return result;
}

void sub_19E3DC9F8()
{
}

void sub_19E3DCA10(std::string *a1, char *a2, std::locale *this, char *a4)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  if (a2 != a4)
  {
    unint64_t v6 = a2;
    int v8 = (std::locale::id *)MEMORY[0x1E4FBA258];
    do
    {
      char v9 = *v6;
      unint64_t v10 = std::locale::use_facet(this, v8);
      std::string::value_type v11 = ((uint64_t (*)(const std::locale::facet *, void))v10->__vftable[1].__on_zero_shared)(v10, v9);
      std::string::push_back(a1, v11);
      ++v6;
    }
    while (v6 != a4);
  }
}

void sub_19E3DCAB4(void *a1)
{
  __cxa_begin_catch(a1);
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  __cxa_rethrow();
}

void sub_19E3DCAD0(_Unwind_Exception *a1)
{
}

void *sub_19E3DCAE4(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  v5[0] = 0;
  if (!qword_1E9459F50)
  {
    v5[1] = MEMORY[0x1E4F143A8];
    std::string v5[2] = 0x40000000;
    void v5[3] = sub_19E3DCC5C;
    v5[4] = &unk_1E599F2F8;
    void v5[5] = v5;
    long long v6 = xmmword_1E599F2E0;
    uint64_t v7 = 0;
    qword_1E9459F50 = _sl_dlopen();
    uint64_t v3 = (void *)v5[0];
    uint64_t v2 = (void *)qword_1E9459F50;
    if (qword_1E9459F50)
    {
      if (!v5[0]) {
        goto LABEL_5;
      }
    }
    else
    {
      uint64_t v3 = (void *)abort_report_np();
    }
    free(v3);
    goto LABEL_5;
  }
  uint64_t v2 = (void *)qword_1E9459F50;
LABEL_5:
  uint64_t result = dlsym(v2, "NLGazetteerCopyLabel");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  off_1E9459F48 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

const void **sub_19E3DCC24(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  *a1 = 0;
  return a1;
}

uint64_t sub_19E3DCC5C()
{
  uint64_t result = _sl_dlopen();
  qword_1E9459F50 = result;
  return result;
}

void sub_19E3DCCD0(char *__dst, uint64_t a2, int a3, void *a4)
{
  switch(a3)
  {
    case 0:
    case 11:
    case 12:
    case 13:
    case 14:
      goto LABEL_2;
    case 1:
      uint64_t v9 = a4[1];
      if (v9 == *a4) {
        goto LABEL_64;
      }
      unint64_t v10 = (void **)(v9 - 32);
      char v11 = *(unsigned char *)(v9 - 9);
      if (v11 < 0)
      {
        uint64_t v12 = *(int **)(v9 - 32);
        unint64_t v13 = *(void *)(v9 - 24);
      }
      else
      {
        uint64_t v12 = (int *)(v9 - 32);
        unint64_t v13 = *(unsigned __int8 *)(v9 - 9);
      }
      if (v13 < 7) {
        goto LABEL_64;
      }
      int v28 = *v12;
      int v29 = *(int *)((char *)v12 + 3);
      if (v28 != 1314870623 || v29 != 942691406) {
        goto LABEL_64;
      }
      goto LABEL_61;
    case 2:
      uint64_t v14 = a4[1];
      if (v14 != *a4)
      {
        uint64_t v15 = (void **)(v14 - 32);
        char v16 = *(unsigned char *)(v14 - 9);
        if (v16 < 0)
        {
          unint64_t v17 = *(int **)(v14 - 32);
          unint64_t v18 = *(void *)(v14 - 24);
        }
        else
        {
          unint64_t v17 = (int *)(v14 - 32);
          unint64_t v18 = *(unsigned __int8 *)(v14 - 9);
        }
        if (v18 >= 7)
        {
          int v31 = *v17;
          int v32 = *(int *)((char *)v17 + 3);
          if (v31 == 1314870623 && v32 == 942691406)
          {
            if (v16 < 0) {
              operator delete(*v15);
            }
            a4[1] = v15;
          }
        }
      }
      *((unsigned char *)&v43.__r_.__value_.__s + 23) = 7;
      strcpy((char *)&v43, "_U_NT08");
      char v42 = 2;
      strcpy((char *)__p, "'s");
      unint64_t v27 = std::string::append(&v43, (const std::string::value_type *)__p, 2uLL);
      goto LABEL_49;
    case 3:
      uint64_t v19 = a4[1];
      if (v19 == *a4) {
        goto LABEL_2;
      }
      unint64_t v10 = (void **)(v19 - 32);
      char v11 = *(unsigned char *)(v19 - 9);
      if (v11 < 0)
      {
        unint64_t v20 = *(int **)(v19 - 32);
        unint64_t v21 = *(void *)(v19 - 24);
      }
      else
      {
        unint64_t v20 = (int *)(v19 - 32);
        unint64_t v21 = *(unsigned __int8 *)(v19 - 9);
      }
      if (v21 < 7) {
        goto LABEL_2;
      }
      int v35 = *v20;
      int v36 = *(int *)((char *)v20 + 3);
      if (v35 != 1314870623 || v36 != 942691406) {
        goto LABEL_2;
      }
LABEL_61:
      if (v11 < 0) {
        operator delete(*v10);
      }
      a4[1] = v10;
LABEL_64:
      __dst[23] = 7;
      *(_DWORD *)std::string __dst = 1314870623;
      int v8 = 942691406;
      goto LABEL_65;
    case 4:
      uint64_t v22 = a4[1];
      if (v22 == *a4) {
        goto LABEL_2;
      }
      int v23 = (void **)(v22 - 32);
      char v24 = *(unsigned char *)(v22 - 9);
      if (v24 < 0)
      {
        uint64_t v25 = *(int **)(v22 - 32);
        unint64_t v26 = *(void *)(v22 - 24);
      }
      else
      {
        uint64_t v25 = (int *)(v22 - 32);
        unint64_t v26 = *(unsigned __int8 *)(v22 - 9);
      }
      if (v26 >= 7
        && ((int v38 = *v25, v39 = *(int *)((char *)v25 + 3), v38 == 1314870623) ? (v40 = v39 == 942691406) : (v40 = 0), v40))
      {
        if (v24 < 0) {
          operator delete(*v23);
        }
        a4[1] = v23;
        *((unsigned char *)&v43.__r_.__value_.__s + 23) = 7;
        strcpy((char *)&v43, "_U_NT08");
        char v42 = 2;
        strcpy((char *)__p, "'s");
        unint64_t v27 = std::string::append(&v43, (const std::string::value_type *)__p, 2uLL);
LABEL_49:
        long long v34 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
        *((void *)__dst + 2) = *((void *)&v27->__r_.__value_.__l + 2);
        *(_OWORD *)std::string __dst = v34;
        v27->__r_.__value_.__l.__size_ = 0;
        v27->__r_.__value_.__r.__words[2] = 0;
        v27->__r_.__value_.__r.__words[0] = 0;
        if (v42 < 0)
        {
          operator delete(__p[0]);
          if ((SHIBYTE(v43.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            return;
          }
        }
        else if ((SHIBYTE(v43.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          return;
        }
        operator delete(v43.__r_.__value_.__l.__data_);
      }
      else
      {
LABEL_2:
        if (*(char *)(a2 + 23) < 0)
        {
          unint64_t v6 = *(void *)(a2 + 8);
          uint64_t v7 = *(void **)a2;
          sub_19E39369C(__dst, v7, v6);
        }
        else
        {
          *(_OWORD *)std::string __dst = *(_OWORD *)a2;
          *((void *)__dst + 2) = *(void *)(a2 + 16);
        }
      }
      return;
    case 5:
      __dst[23] = 7;
      *(_DWORD *)std::string __dst = 1314870623;
      int v8 = 825578574;
      goto LABEL_65;
    case 6:
      *((unsigned char *)&v43.__r_.__value_.__s + 23) = 7;
      strcpy((char *)&v43, "_U_NT51");
      char v42 = 2;
      strcpy((char *)__p, "'s");
      unint64_t v27 = std::string::append(&v43, (const std::string::value_type *)__p, 2uLL);
      goto LABEL_49;
    case 7:
    case 9:
      __dst[23] = 7;
      *(_DWORD *)std::string __dst = 1314870623;
      int v8 = 842355790;
      goto LABEL_65;
    case 8:
      *((unsigned char *)&v43.__r_.__value_.__s + 23) = 7;
      strcpy((char *)&v43, "_U_NT52");
      char v42 = 2;
      strcpy((char *)__p, "'s");
      unint64_t v27 = std::string::append(&v43, (const std::string::value_type *)__p, 2uLL);
      goto LABEL_49;
    case 10:
      *((unsigned char *)&v43.__r_.__value_.__s + 23) = 7;
      strcpy((char *)&v43, "_U_NT52");
      char v42 = 1;
      LOWORD(__p[0]) = 39;
      unint64_t v27 = std::string::append(&v43, (const std::string::value_type *)__p, 1uLL);
      goto LABEL_49;
    case 15:
      __dst[23] = 7;
      *(_DWORD *)std::string __dst = 1314870623;
      int v8 = 909464654;
      goto LABEL_65;
    case 16:
      *((unsigned char *)&v43.__r_.__value_.__s + 23) = 7;
      strcpy((char *)&v43, "_U_NT56");
      char v42 = 2;
      strcpy((char *)__p, "'s");
      unint64_t v27 = std::string::append(&v43, (const std::string::value_type *)__p, 2uLL);
      goto LABEL_49;
    case 17:
      __dst[23] = 7;
      *(_DWORD *)std::string __dst = 1314870623;
      int v8 = 875910222;
      goto LABEL_65;
    case 18:
      *((unsigned char *)&v43.__r_.__value_.__s + 23) = 7;
      strcpy((char *)&v43, "_U_NT54");
      char v42 = 2;
      strcpy((char *)__p, "'s");
      unint64_t v27 = std::string::append(&v43, (const std::string::value_type *)__p, 2uLL);
      goto LABEL_49;
    case 19:
      __dst[23] = 7;
      *(_DWORD *)std::string __dst = 1314870623;
      int v8 = 892687438;
LABEL_65:
      *(_DWORD *)(__dst + 3) = v8;
      __dst[7] = 0;
      return;
    case 20:
      *((unsigned char *)&v43.__r_.__value_.__s + 23) = 7;
      strcpy((char *)&v43, "_U_NT55");
      char v42 = 1;
      LOWORD(__p[0]) = 39;
      unint64_t v27 = std::string::append(&v43, (const std::string::value_type *)__p, 1uLL);
      goto LABEL_49;
    default:
      __assert_rtn("operator()", "ToucanLanguageModelSession.cpp", 1333, "false");
  }
}

void sub_19E3DD290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((a20 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
LABEL_3:
    _Unwind_Resume(a1);
  }
  operator delete(a15);
  _Unwind_Resume(a1);
}

uint64_t sub_19E3DD344(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF0BDDA0;
  a2[1] = v2;
  return result;
}

void *sub_19E3DD368(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF0BDDA0;
  result[1] = v3;
  return result;
}

void sub_19E3DD3B0()
{
}

void *sub_19E3DD3C8()
{
  return &unk_1EF0B8228;
}

uint64_t sub_19E3DD3D4(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZNK17language_modeling2v126ToucanLanguageModelSession41normalizedNameTokenConditionalProbabilityERK"
                     "NSt3__16vectorINS3_INS0_5TokenENS2_9allocatorIS4_EEEENS5_IS7_EEEERKNS3_INS3_INS0_13TokenMetadataENS"
                     "5_ISC_EEEENS5_ISE_EEEERKNS0_17LinguisticContextEE3$_0"
    || ((v3 & (unint64_t)"ZNK17language_modeling2v126ToucanLanguageModelSession41normalizedNameTokenConditionalPro"
                                "babilityERKNSt3__16vectorINS3_INS0_5TokenENS2_9allocatorIS4_EEEENS5_IS7_EEEERKNS3_INS3_I"
                                "NS0_13TokenMetadataENS5_ISC_EEEENS5_ISE_EEEERKNS0_17LinguisticContextEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZNK17language_modeling2v126ToucanLanguageModelSession41normalizedNameTokenConditionalProbabilityERKNSt3__16vectorINS3_INS0_5TokenENS2_9allocatorIS4_EEEENS5_IS7_EEEERKNS3_INS3_INS0_13TokenMetadataENS5_ISC_EEEENS5_ISE_EEEERKNS0_17LinguisticContextEE3$_0")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK17language_modeling2v126ToucanLanguageModelSession41normalizedNameTokenConditionalProbabilityERKNSt3__16vectorINS3_INS0_5TokenENS2_9allocatorIS4_EEEENS5_IS7_EEEERKNS3_INS3_INS0_13TokenMetadataENS5_ISC_EEEENS5_ISE_EEEERKNS0_17LinguisticContextEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void sub_19E3DD42C(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)unint64_t v3 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  int v5 = *(_DWORD *)(a2 + 24);
  unint64_t v10 = 0;
  char v11 = 0;
  uint64_t v9 = 0;
  __p[4] = &v9;
  char v8 = 0;
  uint64_t v2 = operator new(0x20uLL);
  unint64_t v10 = (char *)(v2 + 8);
  char v11 = (char *)(v2 + 8);
  *(void *)uint64_t v2 = 0;
  v2[4] = v6[0];
  *(_DWORD *)((char *)v2 + 19) = *(_DWORD *)((char *)v6 + 3);
  *((unsigned char *)v2 + 23) = 0;
  *((void *)v2 + 3) = 0;
  uint64_t v9 = v2;
  sub_19E43C554(__p, (uint64_t)v2, (uint64_t)(v2 + 8));
  operator new();
}

void sub_19E3DD784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void **a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27)
{
  language_modeling::v1::CompletionStem::~CompletionStem(v27);
  operator delete(__p);
  language_modeling::v1::CompletionStem::~CompletionStem((void ***)&a26);
  language_modeling::v1::CompletionStem::~CompletionStem(&a21);
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(a1);
}

double sub_19E3DD888(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4, uint64_t a5, int a6)
{
  v36[0] = a2;
  v36[1] = (void *)((a3 - (uint64_t)a2) >> 5);
  sub_19E4DE5C8(&v41, (long long **)v36);
  sub_19E3DDC6C((uint64_t *)&v39, a1, (uint64_t)&v41, a4);
  sub_19E3C36C4((uint64_t)v36, (uint64_t)v39);
  unint64_t v10 = v37;
  long long v34 = 0;
  int v35 = 0;
  uint64_t v33 = 0;
  int64_t v11 = v38 - v37;
  if (v38 != v37)
  {
    if (v11 < 0) {
      sub_19E37C7C4();
    }
    uint64_t v33 = operator new(v38 - v37);
    int v35 = (char *)v33 + 4 * (v11 >> 2);
    memmove(v33, v10, v11);
    long long v34 = v35;
  }
  float v32 = 0.0;
  if (!a6)
  {
    uint64_t v13 = 0x3830544E5F555FLL;
    char v14 = 7;
    goto LABEL_11;
  }
  *((unsigned char *)&v29.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&v29, "_U_NT08");
  char v27 = 2;
  strcpy(__s, "'s");
  uint64_t v12 = std::string::append(&v29, __s, 2uLL);
  uint64_t v13 = v12->__r_.__value_.__r.__words[0];
  char v14 = HIBYTE(v12->__r_.__value_.__r.__words[2]);
  v12->__r_.__value_.__r.__words[0] = 0;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  if (v27 < 0)
  {
    operator delete(*(void **)__s);
    if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_11;
    }
  }
  else if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_11;
  }
  operator delete(v29.__r_.__value_.__l.__data_);
LABEL_11:
  uint64_t v15 = *(void *)(a1 + 112);
  v25[23] = 7;
  strcpy(v25, "_U_NT08");
  sub_19E43C40C(__s, (uint64_t)v25);
  sub_19E371C70(&v29, (const UInt8 *)__s);
  int v30 = v28;
  (*(void (**)(void **__return_ptr, uint64_t, std::string *))(*(void *)v15 + 16))(__p, v15, &v29);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v29.__r_.__value_.__l.__data_);
    if ((v27 & 0x80000000) == 0) {
      goto LABEL_13;
    }
  }
  else if ((v27 & 0x80000000) == 0)
  {
    goto LABEL_13;
  }
  operator delete(*(void **)__s);
LABEL_13:
  (*(void (**)(void, void **, void **, float *, uint64_t))(**(void **)(a1 + 96) + 24))(*(void *)(a1 + 96), __p, &v33, &v32, a5);
  float v16 = v32;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v14 < 0) {
    operator delete((void *)v13);
  }
  if (v33)
  {
    long long v34 = v33;
    operator delete(v33);
  }
  sub_19E3C3D24(v36);
  uint64_t v17 = (uint64_t)v39;
  if (v39)
  {
    unint64_t v18 = v40;
    uint64_t v19 = v39;
    if (v40 != v39)
    {
      do
        unint64_t v18 = sub_19E3C3D24(v18 - 23);
      while (v18 != (void **)v17);
      uint64_t v19 = v39;
    }
    BOOL v40 = (void **)v17;
    operator delete(v19);
  }
  unint64_t v20 = v41;
  if (v41)
  {
    unint64_t v21 = v42;
    uint64_t v22 = v41;
    if (v42 != v41)
    {
      do
      {
        if (*((char *)v21 - 9) < 0) {
          operator delete(*(v21 - 4));
        }
        v21 -= 4;
      }
      while (v21 != v20);
      uint64_t v22 = v41;
    }
    char v42 = v20;
    operator delete(v22);
  }
  float v23 = log10f(v16);
  if (v16 <= 0.0) {
    return -10.0;
  }
  return v23;
}

void sub_19E3DDBAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a31) {
    operator delete(a31);
  }
  sub_19E3C3D24(&a34);
  sub_19E3DEBC8((void **)(v34 - 128));
  sub_19E3C3B0C((void **)(v34 - 104));
  _Unwind_Resume(a1);
}

void sub_19E3DDC6C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (a4[1] == *a4) {
    __assert_rtn("_buildCompletionStems", "ToucanLanguageModelSession.cpp", 455, "stems.size() > 0");
  }
  (*(void (**)(void))(**(void **)(a2 + 112) + 192))(*(void *)(a2 + 112));
  sub_19E43A85C(&v31, *a4, a4[1]);
  uint64_t v8 = *(void *)(a2 + 176);
  uint64_t v9 = *(void (***)(void **))(v8 + 72);
  unint64_t v10 = *(std::__shared_weak_count **)(v8 + 80);
  std::string __dst = v9;
  __dst_8 = v10;
  if (!v10)
  {
    if (!v9[15]) {
      goto LABEL_13;
    }
LABEL_7:
    char v11 = (*(uint64_t (**)(void))(**(void **)(a2 + 112) + 184))(*(void *)(a2 + 112));
    char v12 = v11;
    if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      if ((v12 & 1) == 0) {
        goto LABEL_13;
      }
    }
    else if ((v11 & 1) == 0)
    {
      goto LABEL_13;
    }
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    if (v31 != v32) {
      operator new();
    }
    goto LABEL_14;
  }
  atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  if (v9[15]) {
    goto LABEL_7;
  }
  if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
LABEL_13:
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v13 = (uint64_t *)v31;
  char v14 = v32;
  if (v31 == v32)
  {
LABEL_14:
    uint64_t v15 = 0;
    goto LABEL_15;
  }
  do
  {
    uint64_t v17 = *v13;
    sub_19E4D1E74(*v13, a3);
    unint64_t v18 = a1[1];
    if (v18 >= a1[2])
    {
      uint64_t v15 = sub_19E3DF008(a1, v17);
    }
    else
    {
      sub_19E3C36C4(a1[1], v17);
      uint64_t v15 = v18 + 184;
      a1[1] = v18 + 184;
    }
    a1[1] = v15;
    ++v13;
  }
  while (v13 != v14);
LABEL_15:
  float v16 = (void *)*a1;
  if (*a1 != v15)
  {
    while (1)
    {
      std::string __dst = (void (**)(void **))&unk_1EF0BDC40;
      __dst_8 = (std::__shared_weak_count *)a2;
      p_dst = (void **)&__dst;
      v16[13] = v16[12];
      uint64_t v19 = v16[20];
      if (v16[21] != v19) {
        break;
      }
LABEL_27:
      uint64_t v22 = v16[6];
      if (v16[7] - v22 != 32)
      {
        uint64_t v23 = 0;
        unint64_t v24 = 0;
        while (p_dst)
        {
          (*((void (**)(void **, uint64_t, void *))*p_dst + 6))(p_dst, v22 + v23, v16 + 12);
          ++v24;
          uint64_t v22 = v16[6];
          v23 += 32;
          if (((v16[7] - v22) >> 5) - 1 <= v24) {
            goto LABEL_31;
          }
        }
        goto LABEL_43;
      }
LABEL_31:
      if (p_dst == (void **)&__dst)
      {
        __dst[4]((void **)&__dst);
      }
      else if (p_dst)
      {
        (*((void (**)(void))*p_dst + 5))();
      }
      v16 += 23;
      if (v16 == (void *)v15) {
        goto LABEL_34;
      }
    }
    uint64_t v20 = 0;
    unint64_t v21 = 0;
    while (p_dst)
    {
      (*((void (**)(void **, uint64_t, void *))*p_dst + 6))(p_dst, v19 + v20, v16 + 12);
      ++v21;
      uint64_t v19 = v16[20];
      v20 += 32;
      if (v21 >= (v16[21] - v19) >> 5) {
        goto LABEL_27;
      }
    }
LABEL_43:
    sub_19E3ACB9C();
  }
LABEL_34:
  uint64_t v25 = (uint64_t *)v31;
  if (v31)
  {
    unint64_t v26 = v32;
    char v27 = v31;
    if (v32 != v31)
    {
      do
      {
        std::string v29 = (void **)*--v26;
        int v28 = v29;
        uint64_t *v26 = 0;
        if (v29)
        {
          int v30 = sub_19E3C3D24(v28);
          MEMORY[0x19F3BDCF0](v30, 0x1030C403C62F202);
        }
      }
      while (v26 != v25);
      char v27 = v31;
    }
    float v32 = v25;
    operator delete(v27);
  }
}

void sub_19E3DEA60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,char a33)
{
  sub_19E3D73EC(v33 - 144);
  sub_19E3D34D0(&a13);
  _Unwind_Resume(a1);
}

void **sub_19E3DEBC8(void **a1)
{
  uint64_t v2 = (void **)*a1;
  if (*a1)
  {
    unint64_t v3 = (void **)a1[1];
    uint64_t v4 = v2;
    if (v3 != v2)
    {
      do
        unint64_t v3 = sub_19E3C3D24(v3 - 23);
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void *sub_19E3DEC24()
{
  return &unk_1EF0B81F8;
}

uint64_t sub_19E3DEC30(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZNK17language_modeling2v126ToucanLanguageModelSession21_buildCompletionStemsERNSt3__16vectorINS0_14"
                     "SanitizedTokenENS2_9allocatorIS4_EEEERKNS3_INS0_14CompletionStemENS5_IS9_EEEEE3$_0"
    || ((v3 & (unint64_t)"ZNK17language_modeling2v126ToucanLanguageModelSession21_buildCompletionStemsERNSt3__16ve"
                                "ctorINS0_14SanitizedTokenENS2_9allocatorIS4_EEEERKNS3_INS0_14CompletionStemENS5_IS9_EEEEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZNK17language_modeling2v126ToucanLanguageModelSession21_buildCompletionStemsERNSt3__16vectorINS0_14SanitizedTokenENS2_9allocatorIS4_EEEERKNS3_INS0_14CompletionStemENS5_IS9_EEEEE3$_0")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK17language_modeling2v126ToucanLanguageModelSession21_buildCompletionStemsERNSt3__16vectorINS0_14SanitizedTokenENS2_9allocatorIS4_EEEERKNS3_INS0_14CompletionStemENS5_IS9_EEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void sub_19E3DEC88(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 8);
  sub_19E3DB9A0((uint64_t)&__p, v4, a2, *(unsigned int **)a3, *(unsigned int **)(a3 + 8));
  (*(void (**)(unsigned int **__return_ptr))(**(void **)(v4 + 112) + 16))(&v29);
  int v5 = v29;
  if (v30 == v29)
  {
LABEL_36:
    uint64_t v7 = v29;
  }
  else
  {
    uint64_t v6 = 4 * (v30 - v29);
    do
    {
      if ((*(uint64_t (**)(void, void))(**(void **)(v4 + 112) + 96))(*(void *)(v4 + 112), *v5)) {
        goto LABEL_36;
      }
      ++v5;
      v6 -= 4;
    }
    while (v6);
    uint64_t v7 = v29;
    uint64_t v8 = v30;
    if (v29 != v30)
    {
      uint64_t v9 = *(char **)(a3 + 8);
      while (1)
      {
        unsigned int v11 = *v7;
        unint64_t v12 = *(void *)(a3 + 16);
        if ((unint64_t)v9 >= v12) {
          break;
        }
        *(_DWORD *)uint64_t v9 = v11;
        unint64_t v10 = v9 + 4;
LABEL_8:
        *(void *)(a3 + 8) = v10;
        ++v7;
        uint64_t v9 = v10;
        if (v7 == v8) {
          goto LABEL_36;
        }
      }
      uint64_t v13 = *(unsigned int **)a3;
      uint64_t v14 = (uint64_t)&v9[-*(void *)a3];
      uint64_t v15 = v14 >> 2;
      unint64_t v16 = (v14 >> 2) + 1;
      if (v16 >> 62) {
        sub_19E37C7C4();
      }
      uint64_t v17 = v12 - (void)v13;
      if (v17 >> 1 > v16) {
        unint64_t v16 = v17 >> 1;
      }
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v18 = v16;
      }
      if (v18)
      {
        if (v18 >> 62) {
          sub_19E37C2B8();
        }
        uint64_t v19 = operator new(4 * v18);
      }
      else
      {
        uint64_t v19 = 0;
      }
      uint64_t v20 = (unsigned int *)&v19[4 * v15];
      unsigned int *v20 = v11;
      unint64_t v10 = (char *)(v20 + 1);
      if (v9 == (char *)v13) {
        goto LABEL_24;
      }
      unint64_t v21 = v9 - 4 - (char *)v13;
      if (v21 < 0xBC)
      {
        uint64_t v22 = (unsigned int *)v9;
        goto LABEL_23;
      }
      if (&v19[v14 - 4 - (v21 & 0xFFFFFFFFFFFFFFFCLL)] > &v19[v14 - 4])
      {
        uint64_t v22 = (unsigned int *)v9;
      }
      else
      {
        if (&v9[-(v21 & 0xFFFFFFFFFFFFFFFCLL) - 4] <= v9 - 4)
        {
          if ((unint64_t)(v9 - v19 - v14) < 0x20)
          {
            uint64_t v22 = (unsigned int *)v9;
            goto LABEL_23;
          }
          uint64_t v24 = (v21 >> 2) + 1;
          uint64_t v22 = (unsigned int *)&v9[-4 * (v24 & 0x7FFFFFFFFFFFFFF8)];
          uint64_t v25 = &v19[4 * v15 - 16];
          unint64_t v26 = v9 - 16;
          uint64_t v27 = v24 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v28 = *(_OWORD *)v26;
            *(v25 - 1) = *((_OWORD *)v26 - 1);
            _OWORD *v25 = v28;
            v25 -= 2;
            v26 -= 32;
            v27 -= 8;
          }
          while (v27);
          v20 -= v24 & 0x7FFFFFFFFFFFFFF8;
          if (v24 != (v24 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_23;
          }
LABEL_24:
          *(void *)a3 = v20;
          *(void *)(a3 + 8) = v10;
          *(void *)(a3 + 16) = &v19[4 * v18];
          if (v13) {
            operator delete(v13);
          }
          goto LABEL_8;
        }
        uint64_t v22 = (unsigned int *)v9;
      }
      do
      {
LABEL_23:
        unsigned int v23 = *--v22;
        *--uint64_t v20 = v23;
      }
      while (v22 != v13);
      goto LABEL_24;
    }
  }
  if (v7)
  {
    int v30 = v7;
    operator delete(v7);
  }
  if (v32 < 0) {
    operator delete(__p);
  }
}

void sub_19E3DEF28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if ((a18 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_19E3DEF84(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF0BDC40;
  a2[1] = v2;
  return result;
}

void *sub_19E3DEFA8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF0BDC40;
  result[1] = v3;
  return result;
}

void sub_19E3DEFF0()
{
}

uint64_t sub_19E3DF008(uint64_t *a1, uint64_t a2)
{
  unint64_t v2 = 0xD37A6F4DE9BD37A7 * ((a1[1] - *a1) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x1642C8590B21642) {
    sub_19E37C7C4();
  }
  if (0xA6F4DE9BD37A6F4ELL * ((a1[2] - *a1) >> 3) > v3) {
    unint64_t v3 = 0xA6F4DE9BD37A6F4ELL * ((a1[2] - *a1) >> 3);
  }
  if (0xD37A6F4DE9BD37A7 * ((a1[2] - *a1) >> 3) >= 0xB21642C8590B21) {
    unint64_t v6 = 0x1642C8590B21642;
  }
  else {
    unint64_t v6 = v3;
  }
  if (v6)
  {
    if (v6 > 0x1642C8590B21642) {
      sub_19E37C2B8();
    }
    uint64_t v7 = (char *)operator new(184 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v17 = (uint64_t)&v7[184 * v2];
  unint64_t v18 = &v7[184 * v6];
  sub_19E3C36C4(v17, a2);
  uint64_t v8 = v17 + 184;
  uint64_t v9 = (void **)*a1;
  unint64_t v10 = (void **)a1[1];
  if (v10 == (void **)*a1)
  {
    *a1 = v17;
    a1[1] = v8;
    a1[2] = (uint64_t)v18;
    if (!v10) {
      return v17 + 184;
    }
    goto LABEL_17;
  }
  uint64_t v11 = 0;
  do
  {
    uint64_t v12 = v17 + v11 * 8;
    uint64_t v13 = &v10[v11];
    *(void *)(v12 - 184) = 0;
    *(void *)(v12 - 176) = 0;
    *(void *)(v12 - 168) = 0;
    *(_OWORD *)(v12 - 184) = *(_OWORD *)&v10[v11 - 23];
    *(void *)(v12 - 168) = v10[v11 - 21];
    *(v13 - 23) = 0;
    *(v13 - 22) = 0;
    *(v13 - 21) = 0;
    *(void *)(v12 - 16sub_19E392864(&a9, 0) = 0;
    *(void *)(v12 - 152) = 0;
    *(void *)(v12 - 144) = 0;
    *(_OWORD *)(v12 - 16sub_19E392864(&a9, 0) = *(_OWORD *)&v10[v11 - 20];
    *(void *)(v12 - 144) = v10[v11 - 18];
    *(v13 - 2sub_19E392864(&a9, 0) = 0;
    *(v13 - 19) = 0;
    *(v13 - 18) = 0;
    *(void *)(v12 - 136) = 0;
    *(void *)(v12 - 128) = 0;
    *(void *)(v12 - 12sub_19E392864(&a9, 0) = 0;
    *(_OWORD *)(v12 - 136) = *(_OWORD *)&v10[v11 - 17];
    *(void *)(v12 - 12sub_19E392864(&a9, 0) = v10[v11 - 15];
    *(v13 - 17) = 0;
    *(v13 - 16) = 0;
    *(v13 - 15) = 0;
    *(void *)(v12 - 112) = 0;
    *(void *)(v12 - 104) = 0;
    *(void *)(v12 - 96) = 0;
    *(_OWORD *)(v12 - 112) = *(_OWORD *)&v10[v11 - 14];
    *(void *)(v12 - 96) = v10[v11 - 12];
    *(v13 - 14) = 0;
    *(v13 - 13) = 0;
    *(v13 - 12) = 0;
    *(void *)(v12 - 88) = 0;
    *(void *)(v12 - 8sub_19E392864(&a9, 0) = 0;
    *(void *)(v12 - 72) = 0;
    *(_OWORD *)(v12 - 88) = *(_OWORD *)&v10[v11 - 11];
    *(void *)(v12 - 72) = v10[v11 - 9];
    *(v13 - 1sub_19E392864(&a9, 0) = 0;
    *(v13 - 9) = 0;
    long long v14 = *(_OWORD *)&v10[v11 - 8];
    *(v13 - 11) = 0;
    *(_OWORD *)(v12 - 64) = v14;
    *(void *)(v12 - 4sub_19E392864(&a9, 0) = 0;
    *(void *)(v12 - 32) = 0;
    *(void *)(v12 - 48) = 0;
    *(_OWORD *)(v12 - 48) = *(_OWORD *)&v10[v11 - 6];
    *(void *)(v12 - 32) = v10[v11 - 4];
    *(v13 - 6) = 0;
    *(v13 - 5) = 0;
    *(v13 - 4) = 0;
    *(void *)(v12 - 24) = 0;
    *(void *)(v12 - 16) = 0;
    *(void *)(v12 - 8) = 0;
    *(_OWORD *)(v12 - 24) = *(_OWORD *)&v10[v11 - 3];
    *(void *)(v12 - 8) = v10[v11 - 1];
    *(v13 - 3) = 0;
    *(v13 - 2) = 0;
    *(v13 - 1) = 0;
    v11 -= 23;
  }
  while (&v10[v11] != v9);
  unint64_t v10 = (void **)*a1;
  uint64_t v15 = (void **)a1[1];
  *a1 = v17 + v11 * 8;
  a1[1] = v8;
  for (a1[2] = (uint64_t)v18; v15 != v10; uint64_t v15 = sub_19E3C3D24(v15 - 23))
    ;
  if (v10) {
LABEL_17:
  }
    operator delete(v10);
  return v17 + 184;
}

void sub_19E3DF264(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19E3DF4B0((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_19E3DF278(void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_19E3DF2FC()
{
  return &unk_1EF0B8208;
}

uint64_t sub_19E3DF308(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if ((char *)v3 == "ZNK17language_modeling2v126ToucanLanguageModelSession22_normalizeStemsForBiasERKNSt3__16vectorINS0_"
                     "14CompletionStemENS2_9allocatorIS4_EEEERKNS3_INS0_14SanitizedTokenENS5_ISA_EEEEE3$_0"
    || ((v3 & (unint64_t)"ZNK17language_modeling2v126ToucanLanguageModelSession22_normalizeStemsForBiasERKNSt3__16"
                                "vectorINS0_14CompletionStemENS2_9allocatorIS4_EEEERKNS3_INS0_14SanitizedTokenENS5_ISA_EEEEE3$_0" & 0x8000000000000000) != 0) != __OFSUB__(v3, "ZNK17language_modeling2v126ToucanLanguageModelSession22_normalizeStemsForBiasERKNSt3__16vectorINS0_14CompletionStemENS2_9allocatorIS4_EEEERKNS3_INS0_14SanitizedTokenENS5_ISA_EEEEE3$_0")&& !strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZNK17language_modeling2v126ToucanLanguageModelSession22_normalizeStemsForBiasERKNSt3__16vectorINS0_14CompletionStemENS2_9allocatorIS4_EEEERKNS3_INS0_14SanitizedTokenENS5_ISA_EEEEE3$_0" & 0x7FFFFFFFFFFFFFFFLL)))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void sub_19E3DF360(uint64_t a1@<X0>, std::string *a2@<X1>, const void **a3@<X2>, void **a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = *(void *)(a1 + 8);
  if ((*(unsigned int (**)(void))(**(void **)(v9 + 112) + 176))(*(void *)(v9 + 112)) == 2)
  {
    sub_19E3DAACC(a5, v9, a4, a3, (uint64_t)a2);
  }
  else
  {
    sub_19E3DB07C(a5, v9, a2);
  }
}

uint64_t sub_19E3DF42C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1EF0BDC98;
  a2[1] = v2;
  return result;
}

void *sub_19E3DF450(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1EF0BDC98;
  result[1] = v3;
  return result;
}

void sub_19E3DF498()
{
}

uint64_t sub_19E3DF4B0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 184;
    sub_19E3C3D24((void **)(i - 184));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

__n128 sub_19E3DF50C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1EF0BDD48;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 sub_19E3DF53C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1EF0BDD48;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void sub_19E3DF590()
{
}

BOOL sub_19E3DF5A8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = *(char *)(v2 + 23);
  if (v3 >= 0) {
    size_t v4 = *(unsigned __int8 *)(v2 + 23);
  }
  else {
    size_t v4 = *(void *)(v2 + 8);
  }
  if (v4 == strlen((const char *)language_modeling::v1::kLanguageModelTypeTokenID))
  {
    int v5 = v3 >= 0 ? (const void *)v2 : *(const void **)v2;
    if (!memcmp(v5, (const void *)language_modeling::v1::kLanguageModelTypeTokenID, v4))
    {
      uint64_t v13 = *(void *)(*(void *)(*(void *)(a1 + 176) + 72) + 232);
      if (*(char *)(v13 + 455) < 0)
      {
        sub_19E39369C(&v17, *(void **)(v13 + 432), *(void *)(v13 + 440));
        int v15 = SHIBYTE(v18);
        if ((SHIBYTE(v18) & 0x80000000) == 0) {
          return v15 != 0;
        }
      }
      else
      {
        long long v14 = (long long *)(v13 + 432);
        long long v17 = *v14;
        uint64_t v18 = *((void *)v14 + 2);
        int v15 = SHIBYTE(v18);
        if ((SHIBYTE(v18) & 0x80000000) == 0) {
          return v15 != 0;
        }
      }
      BOOL v12 = *((void *)&v17 + 1) != 0;
      operator delete((void *)v17);
      return v12;
    }
  }
  uint64_t v6 = *(void *)(a1 + 176);
  uint64_t v7 = *(void *)(v6 + 72);
  uint64_t v8 = *(std::__shared_weak_count **)(v6 + 80);
  *(void *)&long long v17 = v7;
  *((void *)&v17 + 1) = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!*(void *)(v7 + 120)
    || !(*(unsigned int (**)(void))(**(void **)(a1 + 112) + 184))(*(void *)(a1 + 112)))
  {
    BOOL v12 = 0;
    if (!v8) {
      return v12;
    }
    goto LABEL_23;
  }
  uint64_t v9 = *(void *)(a1 + 176);
  uint64_t v10 = *(void *)(v9 + 72);
  uint64_t v11 = *(std::__shared_weak_count **)(v9 + 80);
  if (v11)
  {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    BOOL v12 = *(unsigned __int8 *)(*(void *)(v10 + 232) + 429) != 0;
    if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    BOOL v12 = *(unsigned __int8 *)(*(void *)(v10 + 232) + 429) != 0;
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)&v17 + 1);
  if (*((void *)&v17 + 1))
  {
LABEL_23:
    if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return v12;
}

void sub_19E3DF7B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_19E3DF7C4(uint64_t a1)
{
  uint64_t v1 = *(const void ***)(a1 + 8);
  int v2 = *((char *)v1 + 23);
  if (v2 >= 0) {
    size_t v3 = *((unsigned __int8 *)v1 + 23);
  }
  else {
    size_t v3 = (size_t)v1[1];
  }
  if (v3 == strlen((const char *)language_modeling::v1::kLanguageModelTypeToucan))
  {
    size_t v4 = v2 >= 0 ? v1 : (const void **)*v1;
    if (!memcmp(v4, (const void *)language_modeling::v1::kLanguageModelTypeToucan, v3)) {
      return 1;
    }
  }
  if (v3 != strlen((const char *)language_modeling::v1::kLanguageModelTypeToucanCPU)) {
    return 0;
  }
  if (v2 >= 0) {
    int v5 = v1;
  }
  else {
    int v5 = *v1;
  }
  return memcmp(v5, (const void *)language_modeling::v1::kLanguageModelTypeToucanCPU, v3) == 0;
}

uint64_t sub_19E3DF87C()
{
  return 1;
}

void sub_19E3DF884(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_19E3DF88C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 176);
  sub_19E416ABC(*(void *)(v1 + 72));
  *(unsigned char *)(v1 + 88) = 0;
  uint64_t v2 = *(void *)(v1 + 96);
  *(void *)(v1 + 96) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t result = *(void *)(v1 + 112);
  *(void *)(v1 + 112) = 0;
  if (result)
  {
    size_t v4 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v4();
  }
  return result;
}

void *sub_19E3DF930(uint64_t a1)
{
  return sub_19E4164AC(*(void **)(*(void *)(a1 + 176) + 72));
}

uint64_t sub_19E3DF93C(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 176) + 72);
  if (*(unsigned char *)(*(void *)(v1 + 232) + 192))
  {
    uint64_t v2 = *(void *)(v1 + 264);
    if (v2) {
      return (*(uint64_t (**)(void))(**(void **)(v2 + 8) + 168))();
    }
  }
  return result;
}

void sub_19E3DF984(uint64_t a1)
{
}

void sub_19E3DF990(uint64_t a1, const UInt8 *a2)
{
}

void sub_19E3DF998(uint64_t a1, uint64_t *a2)
{
}

void sub_19E3DF9A0(uint64_t a1, long long *a2, uint64_t *a3)
{
}

void sub_19E3DF9A8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

void sub_19E3DF9B0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
}

void sub_19E3DF9B8(uint64_t a1, uint64_t a2, int a3, uint64_t a4, char a5)
{
}

void sub_19E3DF9C0(uint64_t a1, uint64_t *a2, const void *****a3, uint64_t a4, CFDictionaryRef theDict, uint64_t a6)
{
  uint64_t v180 = *MEMORY[0x1E4F143B8];
  if (!CFDictionaryContainsKey(theDict, @"minWordsPerPredictionKey"))
  {
    if (qword_1EC0095B8 != -1) {
      dispatch_once(&qword_1EC0095B8, &unk_1EF0BEC40);
    }
    if (os_log_type_enabled((os_log_t)qword_1EC0095B0, OS_LOG_TYPE_ERROR)) {
      sub_19E4395A0((int)&__dst, @"minWordsPerPredictionKey");
    }
    __assert_rtn("extractWordsPerPrediction", "TokenIDLanguageModelSession.cpp", 622, "false");
  }
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(theDict, @"minWordsPerPredictionKey");
  CFNumberRef v12 = sub_19E547C90(Value);
  if (!((unint64_t)v12 >> 32))
  {
    __cxa_allocate_exception(0x10uLL);
    sub_19E4144D4();
  }
  int v13 = (int)v12;
  if ((int)v12 <= 0)
  {
    if (qword_1EC0095B8 != -1) {
      dispatch_once(&qword_1EC0095B8, &unk_1EF0BEC40);
    }
    if (os_log_type_enabled((os_log_t)qword_1EC0095B0, OS_LOG_TYPE_ERROR)) {
      sub_19E4395A0((int)&__dst, @"minWordsPerPredictionKey");
    }
    __assert_rtn("extractWordsPerPrediction", "TokenIDLanguageModelSession.cpp", 632, "false");
  }
  if (!CFDictionaryContainsKey(theDict, @"maxWordsPerPredictionKey"))
  {
    if (qword_1EC0095B8 != -1) {
      dispatch_once(&qword_1EC0095B8, &unk_1EF0BEC40);
    }
    if (os_log_type_enabled((os_log_t)qword_1EC0095B0, OS_LOG_TYPE_ERROR)) {
      sub_19E4395A0((int)&__dst, @"maxWordsPerPredictionKey");
    }
    __assert_rtn("extractWordsPerPrediction", "TokenIDLanguageModelSession.cpp", 639, "false");
  }
  CFNumberRef v14 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"maxWordsPerPredictionKey");
  CFNumberRef v15 = sub_19E547C90(v14);
  if (!((unint64_t)v15 >> 32))
  {
    __cxa_allocate_exception(0x10uLL);
    sub_19E4144D4();
  }
  int v16 = (int)v15;
  if ((int)v15 <= 0)
  {
    if (qword_1EC0095B8 != -1) {
      dispatch_once(&qword_1EC0095B8, &unk_1EF0BEC40);
    }
    if (os_log_type_enabled((os_log_t)qword_1EC0095B0, OS_LOG_TYPE_ERROR)) {
      sub_19E4395A0((int)&__dst, @"maxWordsPerPredictionKey");
    }
    __assert_rtn("extractWordsPerPrediction", "TokenIDLanguageModelSession.cpp", 649, "false");
  }
  int v17 = CFDictionaryContainsKey(theDict, @"applyProbabilityThreshold");
  uint64_t v18 = (const void **)MEMORY[0x1E4F1CFD0];
  if (v17) {
    byte_1E9459938 = CFDictionaryGetValue(theDict, @"applyProbabilityThreshold") == *v18;
  }
  if (CFDictionaryContainsKey(theDict, @"matchPhraseLexiconAfterBeamSearch")) {
    word_1E945A25A = (CFDictionaryGetValue(theDict, @"matchPhraseLexiconAfterBeamSearch") == *v18) | 0x100;
  }
  if (CFDictionaryContainsKey(theDict, @"usePrefixProbabilityForBeamSearch")) {
    byte_1E9459939 = CFDictionaryGetValue(theDict, @"usePrefixProbabilityForBeamSearch") == *v18;
  }
  memset(&v157, 0, sizeof(v157));
  uint64_t v19 = operator new(0x20uLL);
  *uint64_t v19 = &unk_1EF0B5768;
  v19[1] = &v157;
  std::string v19[2] = a4;
  v19[3] = a1;
  unsigned int v170 = v19;
  int v20 = v13;
  unint64_t v21 = v16;
  int v22 = *(_DWORD *)(a1 + 48);
  long long v159 = 0;
  uint64_t v160 = 0;
  std::string __p = 0;
  uint64_t v162 = 0;
  if (*(void *)(a1 + 144))
  {
    unsigned int v23 = *(std::__shared_weak_count **)(a1 + 152);
    v161[0] = *(void *)(a1 + 144);
    v161[1] = v23;
    if (v23) {
      atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (CFDictionaryContainsKey(theDict, @"multiWordPredictionTypeKey")
      && (CFStringRef v24 = (const __CFString *)CFDictionaryGetValue(theDict, @"multiWordPredictionTypeKey"),
          CFStringCompare(v24, @"multiWordPredictionTypeOpenEnded", 0)))
    {
      if (CFStringCompare(v24, @"multiWordPredictionTypeStaticPhraseLexicon", 0))
      {
        if (qword_1EC0095B8 != -1) {
          dispatch_once(&qword_1EC0095B8, &unk_1EF0BEC40);
        }
        if (os_log_type_enabled((os_log_t)qword_1EC0095B0, OS_LOG_TYPE_ERROR)) {
          sub_19E4395A0((int)&v167, v24);
        }
        __assert_rtn("extractMultiWordPredictionType", "ToucanLanguageModelSession.cpp", 917, "false");
      }
      int v25 = 1;
    }
    else
    {
      int v25 = 0;
    }
    sub_19E3E21C4(&buf, a1, a2, a3, (int)&v162, (uint64_t)v161, v20, v21, v25, &v157, a6);
    int v151 = v22;
    unint64_t v153 = v21;
    int v155 = v20;
    if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
    uint64_t v27 = (const language_modeling::v1::InlineCompletion *)buf;
    uint64_t v28 = *((void *)&buf + 1) - buf;
    if ((uint64_t)(*((void *)&buf + 1) - buf) < 1) {
      goto LABEL_89;
    }
    uint64_t v29 = v28 >> 3;
    int v30 = __p;
    int v31 = v159;
    int64_t v32 = (v159 - (language_modeling::v1::InlineCompletion *)__p) >> 3;
    uint64_t v33 = (language_modeling::v1::InlineCompletion *)((char *)__p
                                                    + ((v159 - (language_modeling::v1::InlineCompletion *)__p) & 0xFFFFFFFFFFFFFFF8));
    if (v28 >> 3 > (v160 - (uint64_t)v159) >> 3)
    {
      unint64_t v34 = v32 + v29;
      if (!((unint64_t)(v32 + v29) >> 61))
      {
        uint64_t v35 = v160 - (void)__p;
        if ((v160 - (uint64_t)__p) >> 2 > v34) {
          unint64_t v34 = v35 >> 2;
        }
        if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v36 = v34;
        }
        if (v36)
        {
          if (v36 >> 61) {
            sub_19E37C2B8();
          }
          int v37 = (char *)operator new(8 * v36);
        }
        else
        {
          int v37 = 0;
        }
        language_modeling::v1::InlineCompletion::InlineCompletion((language_modeling::v1::InlineCompletion *)&v37[8 * v32], v27);
      }
      sub_19E37C7C4();
    }
    uint64_t v39 = (v159 - v33) >> 3;
    if (v39 >= v29)
    {
      uint64_t v40 = buf + 8 * v29;
      CFTypeRef v41 = v159;
    }
    else
    {
      uint64_t v40 = buf + 8 * v39;
      if (v40 != *((void *)&buf + 1)) {
        language_modeling::v1::InlineCompletion::InlineCompletion(v159, (const language_modeling::v1::InlineCompletion *)(buf + 8 * v39));
      }
      CFTypeRef v41 = v159;
      if (v159 - v33 < 1) {
        goto LABEL_89;
      }
    }
    char v42 = (language_modeling::v1::InlineCompletion *)((char *)v33 + 8 * v29);
    std::string v43 = (char *)(v41 - v42);
    int v44 = (language_modeling::v1::InlineCompletion *)((char *)v41 - 8 * v29);
    size_t v45 = v41;
    if (v44 < v159)
    {
      std::locale v46 = &v43[(v159 - (language_modeling::v1::InlineCompletion *)__p) & 0xFFFFFFFFFFFFFFF8];
      char v47 = (char *)__p + (void)v46;
      int v48 = (language_modeling::v1::InlineCompletion *)((char *)__p + (void)v46 + 8);
      if (v159 > v48) {
        int v48 = v159;
      }
      unint64_t v49 = (language_modeling::v1::InlineCompletion *)((char *)v48 + ~(unint64_t)__p)
          - (language_modeling::v1::InlineCompletion *)v46;
      if (v49 >= 0xE8)
      {
        unint64_t v50 = (unint64_t)&v47[(v49 & 0xFFFFFFFFFFFFFFF8) + 8];
        BOOL v51 = v44 >= (language_modeling::v1::InlineCompletion *)((char *)v41 + (v49 & 0xFFFFFFFFFFFFFFF8) + 8)
           || (unint64_t)v41 >= v50;
        size_t v45 = v41;
        if (v51)
        {
          uint64_t v52 = (v49 >> 3) + 1;
          uint64_t v53 = 8 * (v52 & 0x3FFFFFFFFFFFFFFCLL);
          int v44 = (language_modeling::v1::InlineCompletion *)((char *)v44 + v53);
          size_t v45 = (language_modeling::v1::InlineCompletion *)((char *)v41 + v53);
          std::string v54 = (_OWORD *)((char *)v41 + 16);
          unint64_t v55 = &v43[8 * v32 + 16 + (void)__p];
          uint64_t v56 = v52 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v57 = *((_OWORD *)v55 - 1);
            long long v58 = *(_OWORD *)v55;
            *((_OWORD *)v55 - 1) = 0uLL;
            *(_OWORD *)unint64_t v55 = 0uLL;
            *(v54 - 1) = v57;
            _OWORD *v54 = v58;
            v54 += 2;
            v55 += 32;
            v56 -= 4;
          }
          while (v56);
          if (v52 == (v52 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_80;
          }
        }
      }
      else
      {
        size_t v45 = v41;
      }
      do
      {
        uint64_t v59 = *(void *)v44;
        *(void *)int v44 = 0;
        int v44 = (language_modeling::v1::InlineCompletion *)((char *)v44 + 8);
        *(void *)size_t v45 = v59;
        size_t v45 = (language_modeling::v1::InlineCompletion *)((char *)v45 + 8);
      }
      while (v44 < v31);
    }
LABEL_80:
    long long v159 = v45;
    if (v41 != v42)
    {
      char v60 = (uint64_t *)((char *)v41 - 8);
      uint64_t v61 = (uint64_t)v30 + 8 * v32 - 8;
      do
      {
        uint64_t v63 = *(void *)&v43[v61];
        *(void *)&v43[v61] = 0;
        uint64_t v64 = *v60;
        *char v60 = v63;
        if (v64)
        {
          if (*(char *)(v64 + 287) < 0) {
            operator delete(*(void **)(v64 + 264));
          }
          uint64_t v62 = sub_19E37059C(v64);
          MEMORY[0x19F3BDCF0](v62, 0x1032C40D90104AELL);
        }
        --v60;
        v43 -= 8;
      }
      while (v43);
    }
    if ((const language_modeling::v1::InlineCompletion *)v40 != v27) {
      language_modeling::v1::InlineCompletion::operator=();
    }
LABEL_89:
    std::string v65 = (void *)buf;
    unint64_t v21 = v153;
    if ((void)buf)
    {
      uint64_t v66 = (void *)*((void *)&buf + 1);
      int v67 = (void *)buf;
      if (*((void *)&buf + 1) != (void)buf)
      {
        do
        {
          uint64_t v70 = *--v66;
          uint64_t v69 = v70;
          *uint64_t v66 = 0;
          if (v70)
          {
            if (*(char *)(v69 + 287) < 0) {
              operator delete(*(void **)(v69 + 264));
            }
            uint64_t v68 = sub_19E37059C(v69);
            MEMORY[0x19F3BDCF0](v68, 0x1032C40D90104AELL);
          }
        }
        while (v66 != v65);
        int v67 = (void *)buf;
      }
      *((void *)&buf + 1) = v65;
      operator delete(v67);
    }
    int v20 = v155;
    int v22 = v151;
    goto LABEL_100;
  }
  if (qword_1EC0095B8 != -1) {
    dispatch_once(&qword_1EC0095B8, &unk_1EF0BEC40);
  }
  int v38 = qword_1EC0095B0;
  if (os_log_type_enabled((os_log_t)qword_1EC0095B0, OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf) = 0;
    _os_log_error_impl(&dword_19E36B000, v38, OS_LOG_TYPE_ERROR, "A Static MultiWordPredictor does not exist for the current locale or was not enabled.", (uint8_t *)&buf, 2u);
  }
LABEL_100:
  if (*(void *)(a1 + 160)) {
    sub_19E3E5264(a1, *a2, (uint64_t **)a3, (uint64_t)&v162, v21, (uint64_t)&v157, &__p);
  }
  if (!v22 && __p == v159)
  {
    if (CFDictionaryContainsKey(theDict, @"personalizedInlineCompletionsKey"))
    {
      CFStringRef v89 = (const __CFString *)CFDictionaryGetValue(theDict, @"personalizedInlineCompletionsKey");
      if (sub_19E377394(v89, 0))
      {
        uint64_t v90 = *(void *)(a1 + 176);
        std::string v152 = *a3;
        unint64_t v91 = (**a3)[4];
        if ((**a3)[3] == v91)
        {
          HIBYTE(v178) = 0;
          LOBYTE(buf) = 0;
        }
        else
        {
          if (*((char *)v91 - 9) < 0)
          {
            sub_19E39369C(&buf, (void *)*(v91 - 4), (unint64_t)*(v91 - 3));
            uint64_t v93 = *(void *)(a1 + 176);
            goto LABEL_162;
          }
          long long v92 = *((_OWORD *)v91 - 2);
          char v178 = (char *)*(v91 - 2);
          long long buf = v92;
        }
        uint64_t v93 = v90;
LABEL_162:
        uint64_t v94 = *(void *)(v93 + 72);
        unint64_t v95 = *(std::__shared_weak_count **)(v93 + 80);
        *(void *)&long long __dst = v94;
        *((void *)&__dst + 1) = v95;
        if (v95) {
          atomic_fetch_add_explicit(&v95->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        CFLocaleRef v96 = (const __CFLocale *)(*(uint64_t (**)(uint64_t))(*(void *)v94 + 64))(v94);
        BOOL v97 = sub_19E4DE958((uint64_t)&buf, v96);
        if (v95 && !atomic_fetch_add(&v95->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
          std::__shared_weak_count::__release_weak(v95);
        }
        if (SHIBYTE(v178) < 0) {
          operator delete((void *)buf);
        }
        int v154 = v21;
        if (v97) {
          operator new();
        }
        v171[0] = &unk_1EF0B5710;
        v171[1] = &__p;
        unsigned int v172 = v171;
        uint64_t v98 = *a2;
        unsigned int v99 = *(unsigned __int16 *)(v90 + 8);
        int v100 = (uint64_t *)*v152;
        uint64_t v165 = (uint64_t)(*(void *)(*a2 + 8) - *(void *)*a2) >> 5;
        long long v166 = (void *)v98;
        uint64_t v101 = *v100;
        uint64_t v102 = (v100[1] - *v100) >> 5;
        uint64_t v103 = v102 - 1;
        if (v102 != 1)
        {
          do
          {
            sub_19E3F92F4(v98, v101);
            v101 += 32;
            --v103;
          }
          while (v103);
        }
        *(void *)&long long buf = &unk_1EF0B59D0;
        *((void *)&buf + 1) = v90;
        p_long long buf = &buf;
        sub_19E3F9E24(v98, v99, (uint64_t)&buf);
        if (p_buf == &buf)
        {
          (*(void (**)(long long *))(buf + 32))(&buf);
        }
        else if (p_buf)
        {
          (*(void (**)(void))(*(void *)p_buf + 40))();
        }
        sub_19E53B260((int32x2_t **)&__dst, v98, *(void *)(v90 + 72), v99, *(unsigned __int16 *)(v90 + 8));
        long long v163 = 0uLL;
        long long v164 = 0;
        unint64_t v149 = v176;
        char v150 = v175;
        std::string::size_type v104 = 0;
        char v105 = (*v152)[4];
        if ((*v152)[3] == v105)
        {
          HIBYTE(v178) = 0;
          LOBYTE(buf) = 0;
        }
        else if (*((char *)v105 - 9) < 0)
        {
          sub_19E39369C(&buf, (void *)*(v105 - 4), (unint64_t)*(v105 - 3));
        }
        else
        {
          long long v106 = *((_OWORD *)v105 - 2);
          char v178 = (char *)*(v105 - 2);
          long long buf = v106;
        }
        if (SHIBYTE(v178) >= 0) {
          unint64_t v107 = HIBYTE(v178);
        }
        else {
          unint64_t v107 = *((void *)&buf + 1);
        }
        if (SHIBYTE(v178) < 0) {
          operator delete((void *)buf);
        }
        if (v107 >= 2)
        {
          sub_19E548A78(&buf, v90, v150, v149, (uint64_t)v152, v20, v154, &v157, 0);
          std::string::size_type v104 = (char *)buf;
          long long v163 = buf;
          unint64_t v108 = v178;
          long long v164 = (uint64_t *)v178;
          if (*(unsigned char *)(v90 + 88))
          {
            unsigned int v109 = *(unsigned __int16 *)(v90 + 8) | 0x50000;
            uint64_t v110 = (uint64_t)v166;
            *(void *)&long long buf = &unk_1EF0B5A28;
            *((void *)&buf + 1) = v90;
            p_long long buf = &buf;
            sub_19E3F9E24((uint64_t)v166, v109, (uint64_t)&buf);
            if (p_buf == &buf)
            {
              (*(void (**)(long long *))(buf + 32))(&buf);
            }
            else if (p_buf)
            {
              (*(void (**)(void))(*(void *)p_buf + 40))();
            }
            sub_19E53BD30((uint64_t)&buf, v110, *(void *)(v90 + 72), v109, *(unsigned __int16 *)(v90 + 8));
            sub_19E548A78(&v167, v90, v178, (unint64_t)p_buf, (uint64_t)v152, v20, v154, &v157, 1);
            uint64_t v111 = (char *)*((void *)&v163 + 1);
            uint64_t v112 = *((void *)&v163 + 1) - (void)v104;
            uint64_t v113 = (uint64_t)(*((void *)&v163 + 1) - (void)v104) >> 3;
            unint64_t v114 = v113 + (((char *)v168 - (unsigned char *)v167) >> 3);
            if (v114 > (v108 - v104) >> 3)
            {
              if (v114 >> 61) {
                sub_19E37C7C4();
              }
              long long v115 = (char *)operator new(8 * v114);
              unint64_t v116 = (unint64_t)&v115[8 * v113];
              if (v111 == v104)
              {
                *(void *)&long long v163 = &v115[8 * v113];
                *((void *)&v163 + 1) = v163;
                long long v164 = (uint64_t *)&v115[8 * v114];
              }
              else
              {
                unint64_t v117 = v111 - v104 - 8;
                unsigned int v118 = v111;
                int v119 = &v115[8 * v113];
                if (v117 < 0x78) {
                  goto LABEL_263;
                }
                if ((unint64_t)&v111[-(v117 & 0xFFFFFFFFFFFFFFF8) - 8] < v116)
                {
                  unsigned int v118 = v111;
                  int v119 = &v115[8 * v113];
                  if (&v115[v112 - (v117 & 0xFFFFFFFFFFFFFFF8) - 8] < v111) {
                    goto LABEL_263;
                  }
                }
                uint64_t v120 = (v117 >> 3) + 1;
                uint64_t v121 = 8 * (v120 & 0x3FFFFFFFFFFFFFFCLL);
                unsigned int v118 = &v111[-v121];
                int v119 = (char *)(v116 - v121);
                unint64_t v122 = &v115[v112 - 16];
                int v123 = v111 - 16;
                uint64_t v124 = v120 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v126 = *((_OWORD *)v123 - 1);
                  long long v125 = *(_OWORD *)v123;
                  *((_OWORD *)v123 - 1) = 0uLL;
                  *(_OWORD *)int v123 = 0uLL;
                  *((_OWORD *)v122 - 1) = v126;
                  *(_OWORD *)unint64_t v122 = v125;
                  v122 -= 32;
                  v123 -= 32;
                  v124 -= 4;
                }
                while (v124);
                if (v120 != (v120 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_263:
                  do
                  {
                    uint64_t v127 = *((void *)v118 - 1);
                    v118 -= 8;
                    *(void *)unsigned int v118 = 0;
                    *((void *)v119 - 1) = v127;
                    v119 -= 8;
                  }
                  while (v118 != v104);
                }
                *(void *)&long long v163 = v119;
                *((void *)&v163 + 1) = &v115[8 * v113];
                long long v164 = (uint64_t *)&v115[8 * v114];
                do
                {
                  uint64_t v130 = *((void *)v111 - 1);
                  v111 -= 8;
                  uint64_t v129 = v130;
                  *(void *)uint64_t v111 = 0;
                  if (v130)
                  {
                    if (*(char *)(v129 + 287) < 0) {
                      operator delete(*(void **)(v129 + 264));
                    }
                    uint64_t v128 = sub_19E37059C(v129);
                    MEMORY[0x19F3BDCF0](v128, 0x1032C40D90104AELL);
                  }
                }
                while (v111 != v104);
              }
              if (v104) {
                operator delete(v104);
              }
            }
            unsigned int v131 = (uint64_t *)v167;
            long long v132 = v168;
            if (v167 != v168)
            {
              unsigned int v133 = (uint64_t *)*((void *)&v163 + 1);
              do
              {
                if (v133 < v164)
                {
                  uint64_t v134 = *v131;
                  *unsigned int v131 = 0;
                  *v133++ = v134;
                }
                else
                {
                  unsigned int v133 = sub_19E3EAB38(&v163, v131);
                }
                *((void *)&v163 + 1) = v133;
                ++v131;
              }
              while (v131 != v132);
              unsigned int v131 = (uint64_t *)v167;
            }
            if (v131)
            {
              unint64_t v135 = v168;
              unint64_t v136 = v131;
              if (v168 != v131)
              {
                do
                {
                  uint64_t v139 = *--v135;
                  uint64_t v138 = v139;
                  uint64_t *v135 = 0;
                  if (v139)
                  {
                    if (*(char *)(v138 + 287) < 0) {
                      operator delete(*(void **)(v138 + 264));
                    }
                    uint64_t v137 = sub_19E37059C(v138);
                    MEMORY[0x19F3BDCF0](v137, 0x1032C40D90104AELL);
                  }
                }
                while (v135 != v131);
                unint64_t v136 = v167;
              }
              int v168 = v131;
              operator delete(v136);
            }
            std::string::size_type v104 = (char *)v163;
          }
        }
        uint64_t v140 = (char *)*((void *)&v163 + 1);
        if (v104 != *((char **)&v163 + 1))
        {
          do
          {
            if (!v172) {
              sub_19E3ACB9C();
            }
            char v141 = (*(uint64_t (**)(void *, char *))(*v172 + 48))(v172, v104);
            v104 += 8;
            if (v104 == v140) {
              char v142 = 0;
            }
            else {
              char v142 = v141;
            }
          }
          while ((v142 & 1) != 0);
          std::string::size_type v104 = (char *)v163;
        }
        if (v104)
        {
          int v143 = (char *)*((void *)&v163 + 1);
          while (v143 != v104)
          {
            uint64_t v146 = *((void *)v143 - 1);
            v143 -= 8;
            uint64_t v145 = v146;
            *(void *)int v143 = 0;
            if (v146)
            {
              if (*(char *)(v145 + 287) < 0) {
                operator delete(*(void **)(v145 + 264));
              }
              uint64_t v144 = sub_19E37059C(v145);
              MEMORY[0x19F3BDCF0](v144, 0x1032C40D90104AELL);
            }
          }
          *((void *)&v163 + 1) = v104;
          operator delete(v104);
        }
        if ((void)__dst)
        {
          *((void *)&__dst + 1) = __dst;
          operator delete((void *)__dst);
        }
        unint64_t v148 = v165;
        for (uint64_t i = v166; v148 < (uint64_t)(i[1] - *i) >> 5; sub_19E3F96BC(i))
          ;
        if (v172 == v171)
        {
          (*(void (**)(void *))(v171[0] + 32))(v171);
        }
        else if (v172)
        {
          (*(void (**)(void *, uint64_t))(*v172 + 40))(v172, v26);
        }
      }
    }
  }
  uint64_t v71 = (language_modeling::v1::InlineCompletion *)__p;
  uint64_t v72 = v159;
  if (__p == v159)
  {
    if (__p) {
      goto LABEL_133;
    }
    goto LABEL_142;
  }
  do
  {
    while (1)
    {
      uint64_t v73 = *(long long **)v71;
      if (*(char *)(*(void *)v71 + 23) < 0)
      {
        sub_19E39369C(&buf, *(void **)v73, *((void *)v73 + 1));
      }
      else
      {
        long long v74 = *v73;
        char v178 = (char *)*((void *)v73 + 2);
        long long buf = v74;
      }
      if (SHIBYTE(v178) >= 0) {
        unint64_t v75 = HIBYTE(v178);
      }
      else {
        unint64_t v75 = *((void *)&buf + 1);
      }
      std::string::size_type v76 = **a3;
      int v78 = v76[3];
      unint64_t v77 = v76[4];
      if (v78 == v77)
      {
        uint64_t v80 = 0;
        uint64_t v81 = *(void *)(a1 + 184);
        if ((SHIBYTE(v178) & 0x80000000) == 0) {
          goto LABEL_123;
        }
LABEL_122:
        operator delete((void *)buf);
        goto LABEL_123;
      }
      if (*((char *)v77 - 9) < 0)
      {
        sub_19E39369C(&__dst, (void *)*(v77 - 4), (unint64_t)*(v77 - 3));
      }
      else
      {
        long long v79 = *((_OWORD *)v77 - 2);
        uint64_t v174 = (uint64_t)*(v77 - 2);
        long long __dst = v79;
      }
      uint64_t v81 = *(void *)(a1 + 184);
      if ((SHIBYTE(v174) & 0x80000000) == 0)
      {
        uint64_t v80 = HIBYTE(v174);
        if ((SHIBYTE(v178) & 0x80000000) == 0) {
          goto LABEL_123;
        }
        goto LABEL_122;
      }
      uint64_t v80 = *((void *)&__dst + 1);
      operator delete((void *)__dst);
      if (SHIBYTE(v178) < 0) {
        goto LABEL_122;
      }
LABEL_123:
      if (v75 >= v81 + v80) {
        break;
      }
      uint64_t v71 = (language_modeling::v1::InlineCompletion *)((char *)v71 + 8);
      if (v71 == v72) {
        goto LABEL_132;
      }
    }
    if (!v170) {
      sub_19E3ACB9C();
    }
    char v82 = (*(uint64_t (**)(void *, language_modeling::v1::InlineCompletion *))(*v170 + 48))(v170, v71);
    uint64_t v71 = (language_modeling::v1::InlineCompletion *)((char *)v71 + 8);
    if (v71 == v72) {
      char v83 = 0;
    }
    else {
      char v83 = v82;
    }
  }
  while ((v83 & 1) != 0);
LABEL_132:
  uint64_t v71 = (language_modeling::v1::InlineCompletion *)__p;
  if (__p)
  {
LABEL_133:
    uint64_t v84 = v159;
    long long v85 = v71;
    if (v159 != v71)
    {
      do
      {
        uint64_t v88 = *((void *)v84 - 1);
        uint64_t v84 = (language_modeling::v1::InlineCompletion *)((char *)v84 - 8);
        uint64_t v87 = v88;
        *(void *)uint64_t v84 = 0;
        if (v88)
        {
          if (*(char *)(v87 + 287) < 0) {
            operator delete(*(void **)(v87 + 264));
          }
          uint64_t v86 = sub_19E37059C(v87);
          MEMORY[0x19F3BDCF0](v86, 0x1032C40D90104AELL);
        }
      }
      while (v84 != v71);
      long long v85 = __p;
    }
    long long v159 = v71;
    operator delete(v85);
  }
LABEL_142:
  if (v170 == v169)
  {
    (*(void (**)(void *))(v169[0] + 32))(v169);
    if ((SHIBYTE(v157.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      return;
    }
LABEL_148:
    operator delete(v157.__r_.__value_.__l.__data_);
    return;
  }
  if (v170) {
    (*(void (**)(void *, uint64_t))(*v170 + 40))(v170, v26);
  }
  if (SHIBYTE(v157.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_148;
  }
}

void sub_19E3E1DD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,const void *a57,void *a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  (*(void (**)(uint64_t))(*(void *)a14 + 8))(a14);
  uint64_t v74 = sub_19E4AAE74(v72);
  MEMORY[0x19F3BDCF0](v74, 0x10E1C4005265F3FLL);
  sub_19E3D73EC((uint64_t)&a61);
  sub_19E3C6F1C(&a57);
  if (a55 < 0) {
    operator delete(__p);
  }
  sub_19E543DD8(&a58);
  sub_19E3E212C(&a45);
  unint64_t v75 = (void *)STACK[0x230];
  if (STACK[0x230])
  {
    STACK[0x238] = (unint64_t)v75;
    operator delete(v75);
  }
  sub_19E5423FC(&a48);
  sub_19E3D3F00(&STACK[0x210]);
  sub_19E3E212C(&a36);
  sub_19E3D3F00(&a72);
  if (a35 < 0)
  {
    operator delete(a30);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void *sub_19E3E212C(void *a1)
{
  uint64_t v2 = (void *)*a1;
  if (*a1)
  {
    size_t v3 = (void *)a1[1];
    size_t v4 = (void *)*a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v7 = *--v3;
        uint64_t v6 = v7;
        *size_t v3 = 0;
        if (v7)
        {
          if (*(char *)(v6 + 287) < 0) {
            operator delete(*(void **)(v6 + 264));
          }
          uint64_t v5 = sub_19E37059C(v6);
          MEMORY[0x19F3BDCF0](v5, 0x1032C40D90104AELL);
        }
      }
      while (v3 != v2);
      size_t v4 = (void *)*a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_19E3E21C4(void *a1, uint64_t a2, uint64_t *a3, const void *****a4, int a5, uint64_t a6, int a7, int a8, int a9, std::string *a10, uint64_t a11)
{
  v222[23] = *MEMORY[0x1E4F143B8];
  uint64_t v182 = *a3;
  if (qword_1E9459E00 != -1) {
    dispatch_once(&qword_1E9459E00, &unk_1EF0B5D40);
  }
  sub_19E3EA54C(v186, a4);
  int v14 = SHIBYTE(v187);
  CFNumberRef v15 = (void **)v186[0];
  sub_19E3EA00C(&__len, (long long **)v182);
  int v16 = v186;
  if (v14 < 0) {
    int v16 = v15;
  }
  if ((SBYTE7(v208) & 0x80u) == 0) {
    p_leuint64_t n = &__len;
  }
  else {
    p_leuint64_t n = (long long *)__len;
  }
  sub_19E439798("(%zu) inline completions requested for stems={'%s'} with context='%s'", (uint64_t)v212, 8, v16, p_len);
  if (v213 >= 0) {
    uint64_t v18 = v212;
  }
  else {
    uint64_t v18 = (void **)v212[0];
  }
  if (v213 >= 0) {
    std::string::size_type v19 = HIBYTE(v213);
  }
  else {
    std::string::size_type v19 = (std::string::size_type)v212[1];
  }
  std::string::append(a10, (const std::string::value_type *)v18, v19);
  if (SHIBYTE(a10->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type size = a10->__r_.__value_.__l.__size_;
    if (size)
    {
      int v22 = (std::string *)a10->__r_.__value_.__r.__words[0];
      if (!*(unsigned char *)(a10->__r_.__value_.__r.__words[0] + size - 1))
      {
        std::string::size_type v21 = size - 1;
        a10->__r_.__value_.__l.__size_ = v21;
        goto LABEL_21;
      }
    }
  }
  else
  {
    uint64_t v20 = HIBYTE(a10->__r_.__value_.__r.__words[2]);
    if (*((unsigned char *)&a10->__r_.__value_.__s + 23) && !a10->__r_.__value_.__s.__data_[v20 - 1])
    {
      std::string::size_type v21 = v20 - 1;
      *((unsigned char *)&a10->__r_.__value_.__s + 23) = v20 - 1;
      int v22 = a10;
LABEL_21:
      v22->__r_.__value_.__s.__data_[v21] = 0;
    }
  }
  std::string::push_back(a10, 10);
  if ((SHIBYTE(v213) & 0x80000000) == 0)
  {
    if ((SBYTE7(v208) & 0x80000000) == 0) {
      goto LABEL_24;
    }
LABEL_417:
    operator delete((void *)__len);
    if ((SHIBYTE(v187) & 0x80000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_418;
  }
  operator delete(v212[0]);
  if (SBYTE7(v208) < 0) {
    goto LABEL_417;
  }
LABEL_24:
  if ((SHIBYTE(v187) & 0x80000000) == 0) {
    goto LABEL_25;
  }
LABEL_418:
  operator delete(v186[0]);
LABEL_25:
  uint64_t v24 = (uint64_t)(*(void *)(v182 + 32) - *(void *)(v182 + 24)) >> 5;
  v212[0] = *(void **)(v182 + 24);
  v212[1] = (void *)v24;
  sub_19E4DE5C8(&v205, (long long **)v212);
  sub_19E3DDC6C((uint64_t *)&v203, a2, (uint64_t)&v205, (uint64_t *)a4);
  (*(void (**)(void **__return_ptr))(**(void **)a6 + 16))(&v201);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  int v25 = (void **)v201;
  uint64_t v183 = v202;
  if (v201 != v202)
  {
    int v179 = *(void **)(MEMORY[0x1E4FBA418] + 24);
    uint64_t v180 = (void *)*MEMORY[0x1E4FBA418];
    while (1)
    {
      int v184 = v25;
      HIBYTE(v187) = 1;
      LOWORD(v186[0]) = 111;
      HIBYTE(v189) = 6;
      strcpy((char *)&v188, "'clock");
      BYTE7(v191) = 7;
      strcpy((char *)&v190, "o'clock");
      HIBYTE(v213) = 6;
      strcpy((char *)v212, "'clock");
      long long v214 = *(_OWORD *)v186;
      int64_t v215 = v187;
      v186[0] = 0;
      v186[1] = 0;
      int64_t v187 = 0;
      double v217 = v189;
      long long v216 = v188;
      long long v188 = 0uLL;
      double v189 = 0.0;
      uint64_t v219 = v191;
      long long v218 = v190;
      long long v190 = 0uLL;
      *(void *)&long long v191 = 0;
      long long __len = 0u;
      long long v208 = 0u;
      float v209 = 1.0;
      unint64_t v27 = sub_19E37BDA4((uint64_t)v210, (uint64_t *)v212, 6uLL);
      unint64_t v28 = v27;
      unint64_t v29 = *((void *)&__len + 1);
      if (*((void *)&__len + 1))
      {
        uint8x8_t v30 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&__len + 8));
        v30.i16[0] = vaddlv_u8(v30);
        if (v30.u32[0] > 1uLL)
        {
          unint64_t v11 = v27;
          if (v27 >= *((void *)&__len + 1)) {
            unint64_t v11 = v27 % *((void *)&__len + 1);
          }
        }
        else
        {
          unint64_t v11 = (*((void *)&__len + 1) - 1) & v27;
        }
        int v31 = *(uint64_t ***)(__len + 8 * v11);
        if (v31)
        {
          int64_t v32 = *v31;
          if (*v31)
          {
            if (v213 >= 0) {
              uint64_t v33 = (void *)HIBYTE(v213);
            }
            else {
              uint64_t v33 = v212[1];
            }
            if (v213 >= 0) {
              unint64_t v34 = v212;
            }
            else {
              unint64_t v34 = (void **)v212[0];
            }
            if (v30.u32[0] < 2uLL)
            {
              while (1)
              {
                uint64_t v40 = v32[1];
                if (v40 == v28)
                {
                  uint64_t v41 = *((unsigned __int8 *)v32 + 39);
                  if ((v41 & 0x80u) == 0) {
                    char v42 = (void *)*((unsigned __int8 *)v32 + 39);
                  }
                  else {
                    char v42 = (void *)v32[3];
                  }
                  if (v42 == v33)
                  {
                    std::string v43 = (const void **)(v32 + 2);
                    if ((v41 & 0x80) != 0)
                    {
                      if (!memcmp(*v43, v34, v32[3])) {
                        goto LABEL_150;
                      }
                    }
                    else
                    {
                      if (!*((unsigned char *)v32 + 39)) {
                        goto LABEL_150;
                      }
                      int v44 = v34;
                      while (*(unsigned __int8 *)v43 == *(unsigned __int8 *)v44)
                      {
                        std::string v43 = (const void **)((char *)v43 + 1);
                        int v44 = (void **)((char *)v44 + 1);
                        if (!--v41) {
                          goto LABEL_150;
                        }
                      }
                    }
                  }
                }
                else if ((v40 & (v29 - 1)) != v11)
                {
                  goto LABEL_77;
                }
                int64_t v32 = (uint64_t *)*v32;
                if (!v32) {
                  goto LABEL_77;
                }
              }
            }
            do
            {
              unint64_t v35 = v32[1];
              if (v35 == v28)
              {
                uint64_t v36 = *((unsigned __int8 *)v32 + 39);
                if ((v36 & 0x80u) == 0) {
                  int v37 = (void *)*((unsigned __int8 *)v32 + 39);
                }
                else {
                  int v37 = (void *)v32[3];
                }
                if (v37 == v33)
                {
                  int v38 = (const void **)(v32 + 2);
                  if ((v36 & 0x80) != 0)
                  {
                    if (!memcmp(*v38, v34, v32[3])) {
                      goto LABEL_150;
                    }
                  }
                  else
                  {
                    if (!*((unsigned char *)v32 + 39)) {
                      goto LABEL_150;
                    }
                    uint64_t v39 = v34;
                    while (*(unsigned __int8 *)v38 == *(unsigned __int8 *)v39)
                    {
                      int v38 = (const void **)((char *)v38 + 1);
                      uint64_t v39 = (void **)((char *)v39 + 1);
                      if (!--v36) {
                        goto LABEL_150;
                      }
                    }
                  }
                }
              }
              else
              {
                if (v35 >= v29) {
                  v35 %= v29;
                }
                if (v35 != v11) {
                  break;
                }
              }
              int64_t v32 = (uint64_t *)*v32;
            }
            while (v32);
          }
        }
      }
LABEL_77:
      size_t v45 = operator new(0x70uLL);
      std::locale v46 = v45;
      v210[0] = v45;
      v210[1] = &v208;
      LOBYTE(v211) = 0;
      *size_t v45 = 0;
      v45[1] = v28;
      if (SHIBYTE(v213) < 0)
      {
        sub_19E39369C((unsigned char *)v45 + 16, v212[0], (unint64_t)v212[1]);
      }
      else
      {
        *((_OWORD *)v45 + 1) = *(_OWORD *)v212;
        v45[4] = v213;
      }
      if (SHIBYTE(v215) < 0)
      {
        sub_19E39369C((unsigned char *)v46 + 40, (void *)v214, *((unint64_t *)&v214 + 1));
      }
      else
      {
        *(_OWORD *)(v46 + 5) = v214;
        v46[7] = v215;
      }
      if (SHIBYTE(v217) < 0)
      {
        sub_19E39369C((unsigned char *)v46 + 64, (void *)v216, *((unint64_t *)&v216 + 1));
      }
      else
      {
        *((_OWORD *)v46 + 4) = v216;
        *((double *)v46 + 1sub_19E392864(&a9, 0) = v217;
      }
      char v47 = v46 + 11;
      if (SHIBYTE(v219) < 0)
      {
        sub_19E39369C(v47, (void *)v218, *((unint64_t *)&v218 + 1));
      }
      else
      {
        *(_OWORD *)char v47 = v218;
        v46[13] = v219;
      }
      LOBYTE(v211) = 1;
      float v48 = (float)(unint64_t)(*((void *)&v208 + 1) + 1);
      if (!v29 || (float)(v209 * (float)v29) < v48) {
        break;
      }
LABEL_140:
      uint64_t v69 = *(void **)(__len + 8 * v11);
      uint64_t v70 = v210[0];
      if (v69)
      {
        *(void *)v210[0] = *v69;
LABEL_148:
        *uint64_t v69 = v70;
        goto LABEL_149;
      }
      *(void *)v210[0] = v208;
      *(void *)&long long v208 = v70;
      *(void *)(__len + 8 * v11) = &v208;
      if (*(void *)v70)
      {
        unint64_t v71 = *(void *)(*(void *)v70 + 8);
        if ((v29 & (v29 - 1)) != 0)
        {
          if (v71 >= v29) {
            v71 %= v29;
          }
        }
        else
        {
          v71 &= v29 - 1;
        }
        uint64_t v69 = (void *)(__len + 8 * v71);
        goto LABEL_148;
      }
LABEL_149:
      ++*((void *)&v208 + 1);
LABEL_150:
      if (SHIBYTE(v219) < 0) {
        operator delete((void *)v218);
      }
      if (SHIBYTE(v217) < 0)
      {
        operator delete((void *)v216);
        if ((SHIBYTE(v215) & 0x80000000) == 0)
        {
LABEL_154:
          if (SHIBYTE(v213) < 0) {
            goto LABEL_267;
          }
          goto LABEL_155;
        }
      }
      else if ((SHIBYTE(v215) & 0x80000000) == 0)
      {
        goto LABEL_154;
      }
      operator delete((void *)v214);
      if (SHIBYTE(v213) < 0) {
LABEL_267:
      }
        operator delete(v212[0]);
LABEL_155:
      HIBYTE(v187) = 1;
      LOWORD(v186[0]) = 32;
      sub_19E439DAC((uint64_t)v212, v184, (unsigned __int8 *)v186);
      if (SHIBYTE(v187) < 0) {
        operator delete(v186[0]);
      }
      HIBYTE(v187) = 0;
      LOBYTE(v186[0]) = 0;
      int v199 = 0;
      unint64_t v200 = 0;
      std::string __p = 0;
      uint64_t v72 = (void **)v212[0];
      uint64_t v73 = (void **)v212[1];
      if (v212[0] == v212[1])
      {
        if (!v212[0]) {
          goto LABEL_276;
        }
        goto LABEL_269;
      }
      while (2)
      {
        int v76 = *((char *)v72 + 23);
        if (v76 >= 0) {
          unint64_t v77 = (uint64_t *)v72;
        }
        else {
          unint64_t v77 = (uint64_t *)*v72;
        }
        if (v76 >= 0) {
          unint64_t v78 = *((unsigned __int8 *)v72 + 23);
        }
        else {
          unint64_t v78 = (unint64_t)v72[1];
        }
        unint64_t v79 = sub_19E37BDA4((uint64_t)v210, v77, v78);
        unint64_t v80 = *((void *)&__len + 1);
        if (!*((void *)&__len + 1)) {
          goto LABEL_242;
        }
        unint64_t v81 = v79;
        uint8x8_t v82 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&__len + 8));
        v82.i16[0] = vaddlv_u8(v82);
        if (v82.u32[0] > 1uLL)
        {
          unint64_t v83 = v79;
          if (v79 >= *((void *)&__len + 1)) {
            unint64_t v83 = v79 % *((void *)&__len + 1);
          }
        }
        else
        {
          unint64_t v83 = (*((void *)&__len + 1) - 1) & v79;
        }
        uint64_t v84 = *(uint64_t ***)(__len + 8 * v83);
        if (!v84) {
          goto LABEL_242;
        }
        long long v85 = *v84;
        if (!*v84) {
          goto LABEL_242;
        }
        char v86 = *((unsigned char *)v72 + 23);
        if (v86 >= 0) {
          unint64_t v11 = *((unsigned __int8 *)v72 + 23);
        }
        else {
          unint64_t v11 = (unint64_t)v72[1];
        }
        if (v86 >= 0) {
          uint64_t v87 = (unsigned __int8 *)v72;
        }
        else {
          uint64_t v87 = (unsigned __int8 *)*v72;
        }
        if (v82.u32[0] < 2uLL)
        {
          uint64_t v88 = *((void *)&__len + 1) - 1;
          while (1)
          {
            uint64_t v93 = v85[1];
            if (v81 == v93)
            {
              uint64_t v94 = *((unsigned __int8 *)v85 + 39);
              if ((v94 & 0x80u) == 0) {
                uint64_t v95 = *((unsigned __int8 *)v85 + 39);
              }
              else {
                uint64_t v95 = v85[3];
              }
              if (v95 == v11)
              {
                if ((v94 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v85[2], v87, v85[3])) {
                    goto LABEL_222;
                  }
                }
                else
                {
                  if (!*((unsigned char *)v85 + 39)) {
                    goto LABEL_222;
                  }
                  uint64_t v96 = 0;
                  while (*((unsigned __int8 *)v85 + v96 + 16) == v87[v96])
                  {
                    if (v94 == ++v96) {
                      goto LABEL_221;
                    }
                  }
                }
              }
            }
            else if ((v93 & v88) != v83)
            {
              goto LABEL_242;
            }
            long long v85 = (uint64_t *)*v85;
            if (!v85) {
              goto LABEL_242;
            }
          }
        }
        while (1)
        {
          unint64_t v89 = v85[1];
          if (v81 != v89)
          {
            if (v89 >= v80) {
              v89 %= v80;
            }
            if (v89 != v83) {
              goto LABEL_242;
            }
            goto LABEL_190;
          }
          uint64_t v90 = *((unsigned __int8 *)v85 + 39);
          if ((v90 & 0x80u) == 0) {
            uint64_t v91 = *((unsigned __int8 *)v85 + 39);
          }
          else {
            uint64_t v91 = v85[3];
          }
          if (v91 != v11) {
            goto LABEL_190;
          }
          if ((v90 & 0x80) != 0) {
            break;
          }
          if (!*((unsigned char *)v85 + 39)) {
            goto LABEL_222;
          }
          uint64_t v92 = 0;
          while (*((unsigned __int8 *)v85 + v92 + 16) == v87[v92])
          {
            if (v90 == ++v92)
            {
LABEL_221:
              if (!v85) {
                goto LABEL_242;
              }
              goto LABEL_222;
            }
          }
LABEL_190:
          long long v85 = (uint64_t *)*v85;
          if (!v85) {
            goto LABEL_242;
          }
        }
        if (memcmp((const void *)v85[2], v87, v85[3])) {
          goto LABEL_190;
        }
LABEL_222:
        uint64_t v97 = *((unsigned __int8 *)v85 + 63);
        if ((v97 & 0x80u) == 0) {
          uint64_t v98 = (void *)*((unsigned __int8 *)v85 + 63);
        }
        else {
          uint64_t v98 = (void *)v85[6];
        }
        unsigned int v99 = (void *)HIBYTE(v187);
        if (v187 < 0) {
          unsigned int v99 = v186[1];
        }
        if (v98 != v99) {
          goto LABEL_242;
        }
        int v100 = (const void **)(v85 + 5);
        if (v187 >= 0) {
          uint64_t v101 = v186;
        }
        else {
          uint64_t v101 = (void **)v186[0];
        }
        if ((v97 & 0x80) != 0)
        {
          if (memcmp(*v100, v101, v85[6])) {
            goto LABEL_242;
          }
LABEL_237:
          if (__p == v199) {
            goto LABEL_242;
          }
          uint64_t v102 = (void **)(v199 - 24);
          if (v199 - 24 != (char *)(v85 + 11))
          {
            char v103 = *((unsigned char *)v85 + 111);
            if (*(v199 - 1) < 0)
            {
              if (v103 >= 0) {
                uint64_t v110 = v85 + 11;
              }
              else {
                uint64_t v110 = (void *)v85[11];
              }
              if (v103 >= 0) {
                size_t v111 = *((unsigned __int8 *)v85 + 111);
              }
              else {
                size_t v111 = v85[12];
              }
              sub_19E3C6D44(v102, v110, v111);
            }
            else if ((*((unsigned char *)v85 + 111) & 0x80) != 0)
            {
              sub_19E3C6C7C(v102, (void *)v85[11], v85[12]);
            }
            else
            {
              long long v104 = *(_OWORD *)(v85 + 11);
              *((void *)v199 - 1) = v85[13];
              *(_OWORD *)uint64_t v102 = v104;
            }
          }
          goto LABEL_249;
        }
        if (!*((unsigned char *)v85 + 63)) {
          goto LABEL_237;
        }
        while (*(unsigned __int8 *)v100 == *(unsigned __int8 *)v101)
        {
          int v100 = (const void **)((char *)v100 + 1);
          uint64_t v101 = (void **)((char *)v101 + 1);
          if (!--v97) {
            goto LABEL_237;
          }
        }
LABEL_242:
        char v105 = v199;
        if ((unint64_t)v199 >= v200)
        {
          unint64_t v107 = sub_19E3FC244((char **)&__p, (uint64_t)v72);
        }
        else
        {
          if (*((char *)v72 + 23) < 0)
          {
            sub_19E39369C(v199, *v72, (unint64_t)v72[1]);
          }
          else
          {
            long long v106 = *(_OWORD *)v72;
            *((void *)v199 + 2) = v72[2];
            *char v105 = v106;
          }
          unint64_t v107 = (char *)v105 + 24;
        }
        int v199 = v107;
LABEL_249:
        if (v186 != (void **)(v199 - 24))
        {
          char v108 = *(v199 - 1);
          if (SHIBYTE(v187) < 0)
          {
            if (v108 >= 0) {
              uint64_t v74 = v199 - 24;
            }
            else {
              uint64_t v74 = (char *)*((void *)v199 - 3);
            }
            if (v108 >= 0) {
              size_t v75 = *(v199 - 1);
            }
            else {
              size_t v75 = *((void *)v199 - 2);
            }
            sub_19E3C6D44(v186, v74, v75);
          }
          else if (*(v199 - 1) < 0)
          {
            sub_19E3C6C7C(v186, *((void **)v199 - 3), *((void *)v199 - 2));
          }
          else
          {
            long long v109 = *(_OWORD *)(v199 - 24);
            int64_t v187 = *((void *)v199 - 1);
            *(_OWORD *)uint64_t v186 = v109;
          }
        }
        v72 += 3;
        if (v72 != v73) {
          continue;
        }
        break;
      }
      if (SHIBYTE(v187) < 0)
      {
        operator delete(v186[0]);
        uint64_t v72 = (void **)v212[0];
        if (!v212[0]) {
          goto LABEL_276;
        }
      }
      else
      {
        uint64_t v72 = (void **)v212[0];
        if (!v212[0]) {
          goto LABEL_276;
        }
      }
LABEL_269:
      uint64_t v112 = (void **)v212[1];
      uint64_t v113 = v72;
      if (v212[1] != v72)
      {
        do
        {
          if (*((char *)v112 - 1) < 0) {
            operator delete(*(v112 - 3));
          }
          v112 -= 3;
        }
        while (v112 != v72);
        uint64_t v113 = (void **)v212[0];
      }
      v212[1] = v72;
      operator delete(v113);
LABEL_276:
      sub_19E4DEB20((uint64_t)&__len);
      unint64_t v114 = (char *)__p;
      long long v115 = v199;
      if (__p == v199) {
        goto LABEL_408;
      }
      BOOL v116 = 1;
      do
      {
        while (!v116)
        {
          BOOL v116 = 0;
          v114 += 24;
          if (v114 == v115) {
            goto LABEL_407;
          }
        }
        sub_19E5483D0(v212, *(void *)(a2 + 176), (uint64_t)v114, 0);
        int v117 = v214;
        BOOL v116 = (_BYTE)v214 != 0;
        if ((_BYTE)v214 && SHIBYTE(v213) < 0) {
          operator delete(v212[0]);
        }
        v114 += 24;
      }
      while (v114 != v115);
      if (!v117) {
        goto LABEL_407;
      }
      BYTE7(v208) = 1;
      LOWORD(__len) = 32;
      sub_19E37B784((uint64_t)v212);
      unsigned int v118 = (uint64_t *)__p;
      int v119 = (uint64_t *)v199;
      unint64_t v120 = 0xAAAAAAAAAAAAAAABLL * ((v199 - (unsigned char *)__p) >> 3);
      if (v120 == 1)
      {
        int v122 = *((char *)__p + 23);
        if (v122 >= 0) {
          int v123 = (const UInt8 *)__p;
        }
        else {
          int v123 = *(const UInt8 **)__p;
        }
        if (v122 >= 0) {
          uint64_t v124 = *((unsigned __int8 *)__p + 23);
        }
        else {
          uint64_t v124 = *((void *)__p + 1);
        }
        sub_19E37CA70(v212, (uint64_t)v123, v124);
        uint64_t v121 = (uint64_t)v184;
        if ((v221 & 0x10) != 0)
        {
          int64_t v138 = v220;
          uint64_t v139 = (const void **)&v216;
          if (v220 < *((void *)&v216 + 1))
          {
            unint64_t v220 = *((void *)&v216 + 1);
            int64_t v138 = *((void *)&v216 + 1);
            uint64_t v139 = (const void **)&v216;
          }
        }
        else
        {
          if ((v221 & 8) == 0)
          {
            size_t v125 = 0;
            HIBYTE(v197) = 0;
            p_dst = (void **)&__dst;
            goto LABEL_342;
          }
          int64_t v138 = v215;
          uint64_t v139 = (const void **)&v214;
        }
        char v142 = *v139;
        size_t v125 = v138 - (void)*v139;
        if (v125 > 0x7FFFFFFFFFFFFFF7) {
          sub_19E37C958();
        }
        if (v125 >= 0x17)
        {
          uint64_t v143 = (v125 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v125 | 7) != 0x17) {
            uint64_t v143 = v125 | 7;
          }
          uint64_t v144 = v143 + 1;
          p_dst = (void **)operator new(v143 + 1);
          size_t v196 = v125;
          unint64_t v197 = v144 | 0x8000000000000000;
          long long __dst = p_dst;
        }
        else
        {
          HIBYTE(v197) = v138 - *(unsigned char *)v139;
          p_dst = (void **)&__dst;
          if (!v125) {
            goto LABEL_342;
          }
        }
        memmove(p_dst, v142, v125);
LABEL_342:
        *((unsigned char *)p_dst + v125) = 0;
        goto LABEL_370;
      }
      if (!v120)
      {
        long long __dst = 0;
        size_t v196 = 0;
        unint64_t v197 = 0;
        uint64_t v121 = (uint64_t)v184;
        goto LABEL_370;
      }
      if ((SBYTE7(v208) & 0x80u) == 0) {
        uint64_t v127 = (const char *)&__len;
      }
      else {
        uint64_t v127 = (const char *)__len;
      }
      if (__p != v199)
      {
        if (v127)
        {
          do
          {
            int v128 = *((char *)v118 + 23);
            if (v128 >= 0) {
              uint64_t v129 = (uint64_t)v118;
            }
            else {
              uint64_t v129 = *v118;
            }
            if (v128 >= 0) {
              uint64_t v130 = *((unsigned __int8 *)v118 + 23);
            }
            else {
              uint64_t v130 = v118[1];
            }
            sub_19E37CA70(v212, v129, v130);
            size_t v131 = strlen(v127);
            sub_19E37CA70(v212, (uint64_t)v127, v131);
            v118 += 3;
          }
          while (v118 != v119);
        }
        else
        {
          do
          {
            int v132 = *((char *)v118 + 23);
            if (v132 >= 0) {
              uint64_t v133 = (uint64_t)v118;
            }
            else {
              uint64_t v133 = *v118;
            }
            if (v132 >= 0) {
              uint64_t v134 = *((unsigned __int8 *)v118 + 23);
            }
            else {
              uint64_t v134 = v118[1];
            }
            sub_19E37CA70(v212, v133, v134);
            v118 += 3;
          }
          while (v118 != v119);
        }
      }
      if ((v221 & 0x10) != 0)
      {
        int64_t v140 = v220;
        char v141 = (const void **)&v216;
        uint64_t v121 = (uint64_t)v184;
        if (v220 < *((void *)&v216 + 1))
        {
          unint64_t v220 = *((void *)&v216 + 1);
          int64_t v140 = *((void *)&v216 + 1);
          char v141 = (const void **)&v216;
        }
      }
      else
      {
        uint64_t v121 = (uint64_t)v184;
        if ((v221 & 8) == 0)
        {
          size_t v135 = 0;
          HIBYTE(v187) = 0;
          unint64_t v136 = v186;
          goto LABEL_352;
        }
        int64_t v140 = v215;
        char v141 = (const void **)&v214;
      }
      uint64_t v145 = *v141;
      size_t v135 = v140 - (void)*v141;
      if (v135 > 0x7FFFFFFFFFFFFFF7) {
        sub_19E37C958();
      }
      if (v135 >= 0x17)
      {
        uint64_t v146 = (v135 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v135 | 7) != 0x17) {
          uint64_t v146 = v135 | 7;
        }
        uint64_t v147 = v146 + 1;
        unint64_t v136 = operator new(v146 + 1);
        v186[1] = (void *)v135;
        int64_t v187 = v147 | 0x8000000000000000;
        v186[0] = v136;
LABEL_351:
        memmove(v136, v145, v135);
        goto LABEL_352;
      }
      HIBYTE(v187) = v140 - *(unsigned char *)v141;
      unint64_t v136 = v186;
      if (v135) {
        goto LABEL_351;
      }
LABEL_352:
      *((unsigned char *)v136 + v135) = 0;
      unint64_t v148 = (char *)HIBYTE(v187);
      uint64_t v149 = BYTE7(v208);
      if (SBYTE7(v208) < 0) {
        uint64_t v149 = *((void *)&__len + 1);
      }
      if (v187 >= 0)
      {
        char v150 = v186;
      }
      else
      {
        unint64_t v148 = (char *)v186[1];
        char v150 = (void **)v186[0];
      }
      int v151 = &v148[-v149];
      if (v148 >= v151) {
        size_t v152 = (size_t)v151;
      }
      else {
        size_t v152 = (size_t)v148;
      }
      if (v152 > 0x7FFFFFFFFFFFFFF7) {
        sub_19E37C958();
      }
      if (v152 >= 0x17)
      {
        uint64_t v154 = (v152 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v152 | 7) != 0x17) {
          uint64_t v154 = v152 | 7;
        }
        uint64_t v155 = v154 + 1;
        unint64_t v153 = (void **)operator new(v154 + 1);
        size_t v196 = v152;
        unint64_t v197 = v155 | 0x8000000000000000;
        long long __dst = v153;
      }
      else
      {
        HIBYTE(v197) = v152;
        unint64_t v153 = (void **)&__dst;
        if (!v152) {
          goto LABEL_368;
        }
      }
      memmove(v153, v150, v152);
LABEL_368:
      *((unsigned char *)v153 + v152) = 0;
      if (SHIBYTE(v187) < 0) {
        operator delete(v186[0]);
      }
LABEL_370:
      v212[0] = v180;
      *(void **)((char *)v212 + *((void *)v180 - 3)) = v179;
      v212[1] = (void *)(MEMORY[0x1E4FBA470] + 16);
      if (SHIBYTE(v219) < 0) {
        operator delete((void *)v218);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x19F3BDC30](v222);
      if (SBYTE7(v208) < 0) {
        operator delete((void *)__len);
      }
      char v156 = (const UInt8 *)__p;
      if (*((char *)__p + 23) < 0)
      {
        if (*(void *)__p)
        {
          CFIndex v157 = *((void *)__p + 1);
          char v156 = *(const UInt8 **)__p;
          goto LABEL_378;
        }
        CFStringRef v158 = 0;
        v186[0] = 0;
      }
      else
      {
        CFIndex v157 = *((unsigned __int8 *)__p + 23);
LABEL_378:
        CFStringRef v158 = CFStringCreateWithBytes(0, v156, v157, 0x8000100u, 0);
        v186[0] = (void *)v158;
        if (!v158)
        {
          exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x19F3BD790](exception, "Could not construct");
          __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
      }
      sub_19E4D1F64(v212, (void *)(v121 + 32));
      if (v213 >= 0) {
        long long v159 = v212;
      }
      else {
        long long v159 = (void **)v212[0];
      }
      if (v159)
      {
        if (v213 >= 0) {
          CFIndex v160 = HIBYTE(v213);
        }
        else {
          CFIndex v160 = (CFIndex)v212[1];
        }
        CFStringRef v161 = CFStringCreateWithBytes(0, (const UInt8 *)v159, v160, 0x8000100u, 0);
        *(void *)&long long __len = v161;
        if (!v161)
        {
          unsigned int v177 = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x19F3BD790](v177, "Could not construct");
          __cxa_throw(v177, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
      }
      else
      {
        CFStringRef v161 = 0;
        *(void *)&long long __len = 0;
      }
      CFComparisonResult v162 = CFStringCompare(v158, v161, 0x81uLL);
      if (v161) {
        CFRelease(v161);
      }
      if (SHIBYTE(v213) < 0)
      {
        operator delete(v212[0]);
        if (v158) {
          goto LABEL_395;
        }
      }
      else
      {
        if (!v158) {
          goto LABEL_396;
        }
LABEL_395:
        CFRelease(v158);
      }
LABEL_396:
      if (v162 && !sub_19E3EB8D8(v121, (uint64_t)v205, (uint64_t)v206))
      {
        int64_t v187 = 0;
        LOWORD(v188) = 0;
        BYTE8(v188) = 1;
        long long v191 = xmmword_19E572FD0;
        unint64_t v192 = 0xFFEFFFFFFFFFFFFFLL;
        uint64_t v193 = 0;
        uint64_t v194 = 0;
        double v163 = *(float *)(v121 + 24);
        *(void *)&long long v190 = 0x3FF0000000000000;
        double v189 = v163;
        DWORD2(v19sub_19E392864(&a9, 0) = 2;
        *(double *)uint64_t v186 = v163;
        *(double *)&v186[1] = v163;
        uint64_t v164 = *(void *)(v121 + 64);
        if (*(void *)(v121 + 56) == v164)
        {
          HIBYTE(v213) = 0;
          LOBYTE(v212[0]) = 0;
        }
        else if (*(char *)(v164 - 9) < 0)
        {
          sub_19E39369C(v212, *(void **)(v164 - 32), *(void *)(v164 - 24));
        }
        else
        {
          long long v165 = *(_OWORD *)(v164 - 32);
          uint64_t v213 = *(void *)(v164 - 16);
          *(_OWORD *)unsigned int v212 = v165;
        }
        sub_19E3E9B48((uint64_t)&v185, (uint64_t)&__dst, (uint64_t)v184, (uint64_t)v186);
      }
      if (SHIBYTE(v197) < 0) {
        operator delete(__dst);
      }
LABEL_407:
      unint64_t v114 = (char *)__p;
LABEL_408:
      if (v114)
      {
        long long v166 = (void **)v199;
        uint64_t v26 = v114;
        if (v199 != v114)
        {
          do
          {
            if (*((char *)v166 - 1) < 0) {
              operator delete(*(v166 - 3));
            }
            v166 -= 3;
          }
          while (v166 != (void **)v114);
          uint64_t v26 = __p;
        }
        int v199 = v114;
        operator delete(v26);
      }
      int v25 = v184 + 27;
      if (v184 + 27 == v183)
      {
        std::string v167 = (void **)v201;
        if (!v201) {
          goto LABEL_427;
        }
        goto LABEL_420;
      }
    }
    BOOL v49 = v29 < 3 || (v29 & (v29 - 1)) != 0;
    unint64_t v50 = v49 | (2 * v29);
    unint64_t v51 = vcvtps_u32_f32(v48 / v209);
    if (v50 <= v51) {
      size_t prime = v51;
    }
    else {
      size_t prime = v50;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    unint64_t v29 = *((void *)&__len + 1);
    if (prime <= *((void *)&__len + 1))
    {
      if (prime >= *((void *)&__len + 1)) {
        goto LABEL_127;
      }
      unint64_t v63 = vcvtps_u32_f32((float)*((unint64_t *)&v208 + 1) / v209);
      if (*((void *)&__len + 1) < 3uLL
        || (uint8x8_t v64 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&__len + 8)), v64.i16[0] = vaddlv_u8(v64), v64.u32[0] > 1uLL))
      {
        unint64_t v63 = std::__next_prime(v63);
      }
      else
      {
        uint64_t v65 = 1 << -(char)__clz(v63 - 1);
        if (v63 >= 2) {
          unint64_t v63 = v65;
        }
      }
      if (prime <= v63) {
        size_t prime = v63;
      }
      if (prime >= v29)
      {
        unint64_t v29 = *((void *)&__len + 1);
LABEL_127:
        if ((v29 & (v29 - 1)) != 0)
        {
          if (v28 >= v29) {
            unint64_t v11 = v28 % v29;
          }
          else {
            unint64_t v11 = v28;
          }
        }
        else
        {
          unint64_t v11 = (v29 - 1) & v28;
        }
        goto LABEL_140;
      }
      if (!prime)
      {
        uint64_t v137 = (void *)__len;
        *(void *)&long long __len = 0;
        if (v137) {
          operator delete(v137);
        }
        unint64_t v29 = 0;
        *((void *)&__len + 1) = 0;
        goto LABEL_127;
      }
    }
    if (prime >> 61) {
      sub_19E37C2B8();
    }
    uint64_t v53 = operator new(8 * prime);
    std::string v54 = (void *)__len;
    *(void *)&long long __len = v53;
    if (v54) {
      operator delete(v54);
    }
    uint64_t v55 = 0;
    *((void *)&__len + 1) = prime;
    do
      *(void *)(__len + 8 * v55++) = 0;
    while (prime != v55);
    uint64_t v56 = (void **)v208;
    if (!(void)v208)
    {
LABEL_126:
      unint64_t v29 = prime;
      goto LABEL_127;
    }
    size_t v57 = *(void *)(v208 + 8);
    size_t v58 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v59 = v57 & v58;
      *(void *)(__len + 8 * v59) = &v208;
      for (uint64_t i = *v56; *v56; uint64_t i = *v56)
      {
        size_t v61 = i[1] & v58;
        if (v61 == v59)
        {
          uint64_t v56 = (void **)i;
        }
        else if (*(void *)(__len + 8 * v61))
        {
          *uint64_t v56 = (void *)*i;
          uint64_t v62 = 8 * v61;
          void *i = **(void **)(__len + v62);
          **(void **)(__len + v62) = i;
        }
        else
        {
          *(void *)(__len + 8 * v61) = v56;
          uint64_t v56 = (void **)i;
          size_t v59 = v61;
        }
      }
      goto LABEL_126;
    }
    if (v57 >= prime) {
      v57 %= prime;
    }
    *(void *)(__len + 8 * v57) = &v208;
    uint64_t v66 = *v56;
    if (!*v56) {
      goto LABEL_126;
    }
    while (1)
    {
      size_t v68 = v66[1];
      if (v68 >= prime) {
        v68 %= prime;
      }
      if (v68 != v57)
      {
        if (!*(void *)(__len + 8 * v68))
        {
          *(void *)(__len + 8 * v68) = v56;
          goto LABEL_131;
        }
        *uint64_t v56 = (void *)*v66;
        uint64_t v67 = 8 * v68;
        *uint64_t v66 = **(void **)(__len + v67);
        **(void **)(__len + v67) = v66;
        uint64_t v66 = v56;
      }
      size_t v68 = v57;
LABEL_131:
      uint64_t v56 = (void **)v66;
      uint64_t v66 = (void *)*v66;
      size_t v57 = v68;
      if (!v66) {
        goto LABEL_126;
      }
    }
  }
  std::string v167 = (void **)v201;
  if (!v201) {
    goto LABEL_427;
  }
LABEL_420:
  int v168 = v202;
  uint64_t v169 = v167;
  if (v202 != v167)
  {
    do
    {
      sub_19E3C3D24(v168 - 23);
      if (*((char *)v168 - 193) < 0) {
        operator delete(*(v168 - 27));
      }
      v168 -= 27;
    }
    while (v168 != v167);
    uint64_t v169 = v201;
  }
  unsigned int v202 = v167;
  operator delete(v169);
LABEL_427:
  unsigned int v170 = (void **)v203;
  if (v203)
  {
    unsigned int v171 = v204;
    unsigned int v172 = v203;
    if (v204 != v203)
    {
      do
        unsigned int v171 = sub_19E3C3D24(v171 - 23);
      while (v171 != v170);
      unsigned int v172 = v203;
    }
    unsigned int v204 = v170;
    operator delete(v172);
  }
  uint64_t v173 = (void **)v205;
  if (v205)
  {
    uint64_t v174 = v206;
    unsigned int v175 = v205;
    if (v206 != v205)
    {
      do
      {
        if (*((char *)v174 - 9) < 0) {
          operator delete(*(v174 - 4));
        }
        v174 -= 4;
      }
      while (v174 != v173);
      unsigned int v175 = v205;
    }
    uint64_t v206 = v173;
    operator delete(v175);
  }
}

void sub_19E3E4BB0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_19E37B770(a1);
}

void sub_19E3E5264(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4, unint64_t a5, uint64_t a6, void *a7)
{
  if ((char *)a3[1] - (char *)*a3 != 8) {
    __assert_rtn("_embeddingBasedPredictions", "ToucanLanguageModelSession.cpp", 659, "stems.size() == 1");
  }
  uint64_t v10 = *(void *)(a2 + 32);
  __p[0] = *(void **)(a2 + 24);
  __p[1] = (void *)((int64_t)(v10 - (unint64_t)__p[0]) >> 5);
  sub_19E4DE5C8(&v375, (long long **)__p);
  unint64_t v11 = (void **)v375;
  if ((unint64_t)((char *)v376 - (unsigned char *)v375) < 0x80) {
    goto LABEL_270;
  }
  unint64_t v342 = a5;
  LOBYTE(v371) = 0;
  char v374 = 0;
  uint64_t v368 = 0;
  unsigned int v369 = 0;
  unsigned int v370 = 0;
  unsigned int v343 = a3;
  if (v376 != v375)
  {
    CFNumberRef v12 = a7;
    unint64_t v13 = 0;
    while (1)
    {
      if ((*(unsigned int (**)(void))(**(void **)(a1 + 112) + 176))(*(void *)(a1 + 112)) == 2) {
        sub_19E3DAACC((uint64_t)__p, a1, &v368, (const void **)&v371, (uint64_t)&v11[4 * v13]);
      }
      else {
        sub_19E3DB07C((uint64_t)__p, a1, (std::string *)&v11[4 * v13]);
      }
      int v16 = v369;
      if (v369 >= v370) {
        break;
      }
      long long v17 = *(_OWORD *)__p;
      *((void *)v369 + 2) = v353;
      *(_OWORD *)int v16 = v17;
      *((_DWORD *)v16 + 6) = DWORD2(v353);
      uint64_t v18 = v16 + 32;
      unsigned int v369 = v16 + 32;
LABEL_37:
      unint64_t v29 = v375;
      uint8x8_t v30 = (char *)v375 + 32 * v13;
      if (v374)
      {
        if (&v371 != (long long *)v30)
        {
          char v31 = v30[23];
          if (SHIBYTE(v372) < 0)
          {
            if (v31 >= 0) {
              int v14 = (char *)v375 + 32 * v13;
            }
            else {
              int v14 = *(char **)v30;
            }
            if (v31 >= 0) {
              size_t v15 = v30[23];
            }
            else {
              size_t v15 = *((void *)v30 + 1);
            }
            sub_19E3C6D44((void **)&v371, v14, v15);
          }
          else if (v30[23] < 0)
          {
            sub_19E3C6C7C(&v371, *(void **)v30, *((void *)v30 + 1));
          }
          else
          {
            long long v32 = *(_OWORD *)v30;
            uint64_t v372 = *((void *)v30 + 2);
            long long v371 = v32;
          }
        }
        int v373 = v29[8 * v13 + 6];
      }
      else
      {
        if (v30[23] < 0)
        {
          sub_19E39369C(&v371, *(void **)v30, *((void *)v30 + 1));
        }
        else
        {
          long long v33 = *(_OWORD *)v30;
          uint64_t v372 = *((void *)v30 + 2);
          long long v371 = v33;
        }
        int v373 = v29[8 * v13 + 6];
        char v374 = 1;
      }
      ++v13;
      unint64_t v11 = (void **)v375;
      if (v13 >= ((char *)v376 - (unsigned char *)v375) >> 5)
      {
        unint64_t v34 = (unsigned __int8 *)v368;
        a7 = v12;
        goto LABEL_51;
      }
    }
    std::string::size_type v19 = (char *)v368;
    uint64_t v20 = (v369 - (unsigned char *)v368) >> 5;
    unint64_t v21 = v20 + 1;
    if ((unint64_t)(v20 + 1) >> 59) {
      sub_19E37C7C4();
    }
    uint64_t v22 = v370 - (unsigned char *)v368;
    if ((v370 - (unsigned char *)v368) >> 4 > v21) {
      unint64_t v21 = v22 >> 4;
    }
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v23 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v23 = v21;
    }
    if (v23 >> 59) {
      sub_19E37C2B8();
    }
    uint64_t v24 = (char *)operator new(32 * v23);
    int v25 = &v24[32 * v20];
    *(_OWORD *)int v25 = *(_OWORD *)__p;
    *((void *)v25 + 2) = v353;
    __p[1] = 0;
    *(void *)&long long v353 = 0;
    __p[0] = 0;
    *((_DWORD *)v25 + 6) = DWORD2(v353);
    if (v16 == v19)
    {
      uint64_t v368 = v25;
      unsigned int v370 = &v24[32 * v23];
      if (!v16)
      {
LABEL_35:
        uint64_t v18 = v25 + 32;
        unsigned int v369 = v25 + 32;
        if (SBYTE7(v353) < 0) {
          operator delete(__p[0]);
        }
        goto LABEL_37;
      }
    }
    else
    {
      uint64_t v26 = v25;
      unint64_t v27 = v16;
      do
      {
        long long v28 = *((_OWORD *)v27 - 2);
        *((void *)v26 - 2) = *((void *)v27 - 2);
        *((_OWORD *)v26 - 2) = v28;
        *((void *)v27 - 3) = 0;
        *((void *)v27 - 2) = 0;
        *((void *)v27 - 4) = 0;
        *((_DWORD *)v26 - 2) = *((_DWORD *)v27 - 2);
        v26 -= 32;
        v27 -= 32;
      }
      while (v27 != v19);
      uint64_t v368 = v26;
      unsigned int v370 = &v24[32 * v23];
      do
      {
        if (*(v16 - 9) < 0) {
          operator delete(*((void **)v16 - 4));
        }
        v16 -= 32;
      }
      while (v16 != v19);
      int v16 = v19;
      if (!v19) {
        goto LABEL_35;
      }
    }
    operator delete(v16);
    goto LABEL_35;
  }
  unint64_t v34 = 0;
  uint64_t v18 = 0;
LABEL_51:
  if ((unint64_t)(v18 - (char *)v34) < 0x80) {
    goto LABEL_259;
  }
  sub_19E3DB9A0((uint64_t)__p, a1, v34, 0, 0);
  if ((char)v34[23] < 0) {
    operator delete(*(void **)v34);
  }
  long long v35 = *(_OWORD *)__p;
  *((void *)v34 + 2) = v353;
  *(_OWORD *)unint64_t v34 = v35;
  *((_DWORD *)v34 + 6) = DWORD2(v353);
  (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 112) + 16))(&v393);
  sub_19E3DB9A0((uint64_t)__p, a1, v34 + 32, (unsigned int *)v393, *((unsigned int **)&v393 + 1));
  uint64_t v36 = (char *)v368;
  int v37 = (char *)v368 + 32;
  if (*((char *)v368 + 55) < 0) {
    operator delete(*(void **)v37);
  }
  *(_OWORD *)int v37 = *(_OWORD *)__p;
  *((void *)v37 + 2) = v353;
  BYTE7(v353) = 0;
  LOBYTE(__p[0]) = 0;
  *((_DWORD *)v36 + 14) = DWORD2(v353);
  if ((void)v393)
  {
    *((void *)&v393 + 1) = v393;
    operator delete((void *)v393);
  }
  uint64_t v38 = **a3;
  uint64_t v40 = *(void *)(v38 + 24);
  uint64_t v39 = *(void *)(v38 + 32);
  if (v40 == v39)
  {
    HIBYTE(v367) = 0;
    LOBYTE(v366) = 0;
  }
  else if (*(char *)(v39 - 9) < 0)
  {
    sub_19E39369C(&v366, *(void **)(v39 - 32), *(void *)(v39 - 24));
  }
  else
  {
    long long v41 = *(_OWORD *)(v39 - 32);
    uint64_t v367 = *(void *)(v39 - 16);
    long long v366 = v41;
  }
  unsigned int v42 = HIBYTE(v367);
  if (SHIBYTE(v367) < 0)
  {
    uint64_t v43 = *((void *)&v366 + 1);
    if (*((void *)&v366 + 1))
    {
      int v44 = (long long *)v366;
LABEL_68:
      if (*((unsigned char *)v44 + v43 - 1) != 32) {
        goto LABEL_254;
      }
    }
  }
  else if (HIBYTE(v367))
  {
    uint64_t v43 = HIBYTE(v367);
    int v44 = &v366;
    goto LABEL_68;
  }
  size_t v45 = *(void ***)(a1 + 160);
  int64_t v340 = a7;
  uint64_t v341 = v45 + 13;
  if (*((char *)v45 + 127) < 0)
  {
    sub_19E39369C(&v385, v45[13], (unint64_t)v45[14]);
  }
  else
  {
    long long v385 = *(_OWORD *)(v45 + 13);
    unsigned int v386 = v45[15];
  }
  long long __s1 = v385;
  unsigned int v364 = v386;
  unsigned int v386 = 0;
  long long v385 = 0uLL;
  char v365 = 1;
  std::locale v46 = v369;
  uint64_t v47 = v369 - v36;
  if ((unint64_t)(v369 - v36) < 0x80)
  {
    unsigned int v336 = "contextTokens.size() >= kMinContextForEmbeddingBasePredictions";
    int v335 = 76;
    goto LABEL_709;
  }
  unint64_t v48 = (v47 >> 5) - 1;
  unint64_t v49 = (v47 >> 5) - 4;
  if (v49 <= 3) {
    unint64_t v49 = 3;
  }
  if (v48 <= 3) {
    unint64_t v50 = 3;
  }
  else {
    unint64_t v50 = v49;
  }
  unint64_t v346 = (v47 >> 5) - 1;
  if (v48 <= v50)
  {
    unint64_t v61 = (v47 >> 5) - 1;
    goto LABEL_100;
  }
  size_t v51 = *((void *)&__s1 + 1);
  if (SHIBYTE(v364) >= 0) {
    uint64_t v52 = HIBYTE(v364);
  }
  else {
    uint64_t v52 = *((void *)&__s1 + 1);
  }
  if ((HIBYTE(v364) & 0x80) != 0)
  {
    size_t v125 = (const void *)__s1;
    long long v126 = v369 - 64;
    unint64_t v127 = (v47 >> 5) - 1;
    while (1)
    {
      uint64_t v128 = v126[23];
      int v129 = (char)v128;
      if ((v128 & 0x80u) != 0) {
        uint64_t v128 = *((void *)v126 + 1);
      }
      if (v52 == v128)
      {
        uint64_t v130 = v129 >= 0 ? v126 : *(char **)v126;
        if (!memcmp(v125, v130, v51)) {
          break;
        }
      }
      --v127;
      v126 -= 32;
      if (v127 <= v50)
      {
        unint64_t v53 = v346;
        goto LABEL_694;
      }
    }
    unint64_t v61 = v127;
    if (v127 <= v346) {
      goto LABEL_100;
    }
  }
  else if (HIBYTE(v364))
  {
    unint64_t v53 = (v47 >> 5) - 1;
    unint64_t v54 = v53;
    do
    {
      unint64_t v55 = v54 - 1;
      uint64_t v56 = &v36[32 * v54 - 32];
      uint64_t v57 = v56[23];
      int v58 = (char)v57;
      if ((v57 & 0x80u) != 0) {
        uint64_t v57 = *((void *)v56 + 1);
      }
      if (v52 == v57)
      {
        if (v58 < 0) {
          uint64_t v56 = *(char **)v56;
        }
        p_s1 = &__s1;
        uint64_t v60 = HIBYTE(v364);
        while (*(unsigned __int8 *)p_s1 == *v56)
        {
          p_s1 = (long long *)((char *)p_s1 + 1);
          ++v56;
          if (!--v60) {
            goto LABEL_94;
          }
        }
      }
      --v54;
    }
    while (v55 > v50);
LABEL_694:
    unint64_t v61 = v50;
    if (v50 <= v53)
    {
LABEL_100:
      while (1)
      {
        uint64_t v62 = v61 <= 1 ? 1 : v61;
        uint64_t v349 = v62;
        if (v61 <= 2) {
          break;
        }
        unint64_t v390 = 0;
        unsigned int v391 = 0;
        unint64_t v392 = 0;
        unint64_t v63 = (char *)v368 + 32 * v61;
        if (*((_DWORD *)v63 + 6))
        {
          ++v61;
        }
        else
        {
          uint8x8_t v64 = 0;
          unint64_t v65 = v61 - 3;
          unint64_t v345 = v61;
          while (1)
          {
            unsigned int v66 = v63[23];
            unint64_t v67 = *((void *)v63 + 1);
            if ((v66 & 0x80u) == 0 ? v63[23] : *((void *)v63 + 1))
            {
              uint64_t v69 = *(unsigned char **)v63;
              if ((v66 & 0x80u) == 0) {
                uint64_t v69 = v63;
              }
              if (*v69 == 95) {
                break;
              }
            }
            if ((v66 & 0x80) != 0)
            {
              if (v67 >= 5)
              {
                uint64_t v73 = *(int **)v63;
                if (**(_DWORD **)v63 == 1281977941 && *(unsigned char *)(*(void *)v63 + 4) == 77) {
                  break;
                }
                if (v67 >= 6 && *v73 == 1348425055 && *((_WORD *)v73 + 2) == 17746) {
                  break;
                }
                int v76 = *v73;
                int v77 = *((unsigned __int8 *)v73 + 4);
                if (v76 == 1314870623 && v77 == 84) {
                  break;
                }
              }
            }
            else if (v66 >= 5)
            {
              if (*(_DWORD *)v63 == 1281977941 && v63[4] == 77) {
                break;
              }
              if (v66 >= 6 && *(_DWORD *)v63 == 1348425055 && *((_WORD *)v63 + 2) == 17746) {
                break;
              }
              if (*(_DWORD *)v63 == 1314870623 && v63[4] == 84) {
                break;
              }
            }
            unint64_t v79 = sub_19E4B9E40(v45 + 8, (uint64_t)v63);
            uint8x8_t v64 = v391;
            if (!v79)
            {
              if ((unint64_t)v391 >= v392)
              {
                uint8x8_t v64 = sub_19E3FC244(&v390, (uint64_t)v63);
              }
              else
              {
                if (v63[23] < 0)
                {
                  sub_19E39369C(v391, *(void **)v63, *((void *)v63 + 1));
                }
                else
                {
                  long long v80 = *(_OWORD *)v63;
                  *((void *)v391 + 2) = *((void *)v63 + 2);
                  *(_OWORD *)uint8x8_t v64 = v80;
                }
                v64 += 24;
              }
              unsigned int v391 = v64;
              if (--v61 > v65)
              {
                int v81 = *((_DWORD *)v63 - 2);
                v63 -= 32;
                if (!v81) {
                  continue;
                }
              }
            }
            break;
          }
          uint8x8_t v82 = v390;
          if (v390 != v64)
          {
            uint64_t v83 = 0;
            unint64_t v387 = 0;
            unsigned int v388 = 0;
            unsigned int v389 = 0;
            do
            {
              uint64_t v84 = v368;
              long long v85 = (char *)v368 + 32 * v83;
              if (v85[23] < 0)
              {
                sub_19E39369C(__p, *(void **)v85, *((void *)v85 + 1));
              }
              else
              {
                long long v86 = *(_OWORD *)v85;
                *(void *)&long long v353 = *((void *)v85 + 2);
                *(_OWORD *)std::string __p = v86;
              }
              DWORD2(v353) = v84[8 * v83 + 6];
              (*(void (**)(long long *__return_ptr))(*(void *)*v45 + 16))(&v393);
              uint64_t v87 = (unsigned int *)v393;
              if (*((void *)&v393 + 1) == (void)v393)
              {
LABEL_194:
                unint64_t v89 = (int *)v393;
              }
              else
              {
                uint64_t v88 = 4 * ((uint64_t)(*((void *)&v393 + 1) - v393) >> 2);
                do
                {
                  if ((*(uint64_t (**)(void *, void))(*(void *)*v45 + 96))(*v45, *v87)) {
                    goto LABEL_194;
                  }
                  ++v87;
                  v88 -= 4;
                }
                while (v88);
                uint64_t v90 = (int *)*((void *)&v393 + 1);
                unint64_t v89 = (int *)v393;
                if ((void)v393 != *((void *)&v393 + 1))
                {
                  uint64_t v91 = v388;
                  while (1)
                  {
                    int v93 = *v89;
                    if (v91 >= v389) {
                      break;
                    }
                    *(_DWORD *)uint64_t v91 = v93;
                    uint64_t v92 = v91 + 4;
LABEL_166:
                    unsigned int v388 = v92;
                    ++v89;
                    uint64_t v91 = v92;
                    if (v89 == v90) {
                      goto LABEL_194;
                    }
                  }
                  uint64_t v94 = v387;
                  int64_t v95 = v91 - v387;
                  uint64_t v96 = (v91 - v387) >> 2;
                  unint64_t v97 = v96 + 1;
                  if ((unint64_t)(v96 + 1) >> 62) {
                    sub_19E37C7C4();
                  }
                  uint64_t v98 = v389 - v387;
                  if ((v389 - v387) >> 1 > v97) {
                    unint64_t v97 = v98 >> 1;
                  }
                  if ((unint64_t)v98 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v99 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v99 = v97;
                  }
                  if (v99)
                  {
                    if (v99 >> 62) {
                      sub_19E37C2B8();
                    }
                    int v100 = operator new(4 * v99);
                  }
                  else
                  {
                    int v100 = 0;
                  }
                  uint64_t v101 = &v100[4 * v96];
                  *(_DWORD *)uint64_t v101 = v93;
                  uint64_t v92 = v101 + 4;
                  if (v91 != v94)
                  {
                    unint64_t v102 = v91 - 4 - v94;
                    if (v102 < 0xBC)
                    {
                      char v103 = v91;
                      goto LABEL_181;
                    }
                    if (&v100[v95 - 4 - (v102 & 0xFFFFFFFFFFFFFFFCLL)] > &v100[v95 - 4])
                    {
                      char v103 = v91;
                      goto LABEL_181;
                    }
                    if (&v91[-(v102 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v91 - 4)
                    {
                      char v103 = v91;
                      goto LABEL_181;
                    }
                    if ((unint64_t)(v94 - v100) < 0x20)
                    {
                      char v103 = v91;
                      goto LABEL_181;
                    }
                    uint64_t v105 = (v102 >> 2) + 1;
                    char v103 = &v91[-4 * (v105 & 0x7FFFFFFFFFFFFFF8)];
                    long long v106 = &v100[v95 - 16];
                    unint64_t v107 = v91 - 16;
                    uint64_t v108 = v105 & 0x7FFFFFFFFFFFFFF8;
                    do
                    {
                      long long v109 = *(_OWORD *)v107;
                      *(v106 - 1) = *((_OWORD *)v107 - 1);
                      *long long v106 = v109;
                      v106 -= 2;
                      v107 -= 32;
                      v108 -= 8;
                    }
                    while (v108);
                    v101 -= 4 * (v105 & 0x7FFFFFFFFFFFFFF8);
                    if (v105 != (v105 & 0x7FFFFFFFFFFFFFF8))
                    {
                      do
                      {
LABEL_181:
                        int v104 = *((_DWORD *)v103 - 1);
                        v103 -= 4;
                        *((_DWORD *)v101 - 1) = v104;
                        v101 -= 4;
                      }
                      while (v103 != v94);
                    }
                  }
                  unint64_t v387 = v101;
                  unsigned int v388 = v92;
                  unsigned int v389 = &v100[4 * v99];
                  if (v94) {
                    operator delete(v94);
                  }
                  goto LABEL_166;
                }
              }
              if (v89)
              {
                *((void *)&v393 + 1) = v89;
                operator delete(v89);
              }
              if (SBYTE7(v353) < 0) {
                operator delete(__p[0]);
              }
              ++v83;
            }
            while (v83 != v349);
            uint64_t v110 = (*(uint64_t (**)(void *, char **, uint64_t))(*(void *)v45[2] + 56))(v45[2], &v387, a4);
            if (v110)
            {
              size_t v111 = (CFTypeRef *)(*(uint64_t (**)(uint64_t))(*(void *)v110 + 16))(v110);
              uint64_t v112 = (uint64_t)v45[6];
              CFTypeRef v113 = *v111;
              if (*v111) {
                CFRetain(*v111);
              }
              __src[0] = (void *)v113;
              if (!*(unsigned char *)(v112 + 88)) {
                sub_19E4A4664(v112);
              }
              uint64_t v114 = *(void *)(v112 + 96);
              uint64_t v115 = *(void *)v112;
              *(void *)&long long v393 = 0;
              *((void *)&v393 + 1) = &v393;
              uint64_t v394 = 0x2000000000;
              BOOL v116 = off_1E945A208;
              unsigned int v395 = off_1E945A208;
              if (!off_1E945A208)
              {
                __p[0] = (void *)MEMORY[0x1E4F143A8];
                __p[1] = (void *)0x40000000;
                *(void *)&long long v353 = sub_19E4A5334;
                *((void *)&v353 + 1) = &unk_1E59A04B0;
                unsigned int v354 = (void **)&v393;
                sub_19E4A5334((uint64_t)__p);
                BOOL v116 = *(void **)(*((void *)&v393 + 1) + 24);
              }
              _Block_object_dispose(&v393, 8);
              if (!v116) {
                goto LABEL_711;
              }
              int v117 = ((uint64_t (*)(uint64_t, CFTypeRef, void, __CFString *, uint64_t, void))v116)(v114, v113, 0, @"ane_gpt2_transformer_layer_3d_5/attn_v_s", v115, 0);
              if ((v117 & 0x80000000) == 0 && *(void *)(v112 + 8) > (unint64_t)v117)
              {
                unsigned int v118 = (void ***)(*(void *)(v112 + 64) + 24 * v117);
                if (v118 != (void ***)&v390) {
                  sub_19E42104C(v118, (void **)v390, (void **)v391, 0xAAAAAAAAAAAAAAABLL * ((v391 - v390) >> 3));
                }
              }
              if (v113) {
                CFRelease(v113);
              }
            }
            if (v387)
            {
              unsigned int v388 = v387;
              operator delete(v387);
            }
            uint8x8_t v82 = v390;
          }
          unint64_t v61 = v345 + 1;
          if (v82)
          {
            int v119 = v391;
            unint64_t v120 = v82;
            if (v391 != v82)
            {
              do
              {
                if (*(v119 - 1) < 0) {
                  operator delete(*((void **)v119 - 3));
                }
                v119 -= 24;
              }
              while (v119 != v82);
              unint64_t v120 = v390;
            }
            unsigned int v391 = v82;
            operator delete(v120);
          }
        }
        if (v61 > v346)
        {
          std::locale v46 = v369;
          goto LABEL_225;
        }
      }
      int v335 = 96;
      unsigned int v336 = "newTokenIdx >= kMaxOrder";
LABEL_709:
      __assert_rtn("consumeContext", "EmbeddingAugmentedPredictor.cpp", v335, v336);
    }
  }
  else
  {
    v332 = v369 - 56;
    unint64_t v53 = (v47 >> 5) - 1;
    unint64_t v54 = v53;
    while (1)
    {
      uint64_t v333 = v332[15];
      if ((v333 & 0x80u) != 0) {
        uint64_t v333 = *(void *)v332;
      }
      if (v52 == v333) {
        break;
      }
      --v54;
      v332 -= 32;
      if (v54 <= v50) {
        goto LABEL_694;
      }
    }
LABEL_94:
    unint64_t v61 = v54;
    if (v54 <= v53) {
      goto LABEL_100;
    }
  }
LABEL_225:
  if (v341 != (void **)(v46 - 32))
  {
    char v121 = *(v46 - 9);
    if (*((char *)v45 + 127) < 0)
    {
      if (v121 >= 0) {
        int v123 = v46 - 32;
      }
      else {
        int v123 = (char *)*((void *)v46 - 4);
      }
      if (v121 >= 0) {
        size_t v124 = *(v46 - 9);
      }
      else {
        size_t v124 = *((void *)v46 - 3);
      }
      sub_19E3C6D44(v341, v123, v124);
    }
    else if (*(v46 - 9) < 0)
    {
      sub_19E3C6C7C(v341, *((void **)v46 - 4), *((void *)v46 - 3));
    }
    else
    {
      long long v122 = *((_OWORD *)v46 - 2);
      v45[15] = (void *)*((void *)v46 - 2);
      *(_OWORD *)uint64_t v341 = v122;
    }
  }
  if (v365 && SHIBYTE(v364) < 0) {
    operator delete((void *)__s1);
  }
  a7 = v340;
  if (SHIBYTE(v386) < 0) {
    operator delete((void *)v385);
  }
  unsigned int v42 = HIBYTE(v367);
LABEL_254:
  if (*a7 != a7[1]) {
    goto LABEL_255;
  }
  if ((v42 & 0x80) != 0)
  {
    uint64_t v136 = *((void *)&v366 + 1);
    size_t v131 = (long long *)v366;
    uint64_t v135 = a1;
    if (!*((void *)&v366 + 1))
    {
LABEL_257:
      operator delete(v131);
      goto LABEL_258;
    }
  }
  else
  {
    uint64_t v135 = a1;
    if (!v42) {
      goto LABEL_258;
    }
    uint64_t v136 = v42;
    size_t v131 = &v366;
  }
  if (*((unsigned char *)v131 + v136 - 1) == 32) {
    goto LABEL_255;
  }
  uint64_t v137 = *(void **)(v135 + 160);
  unint64_t v387 = 0;
  unsigned int v388 = 0;
  unsigned int v389 = 0;
  int64_t v138 = v368;
  unsigned int v350 = v369;
  if (v369 != v368)
  {
    for (unint64_t i = 0; i < (v350 - (unsigned char *)v368) >> 5; ++i)
    {
      int64_t v140 = (char *)&v138[8 * i];
      if (v140[23] < 0)
      {
        sub_19E39369C(__p, *(void **)v140, *((void *)v140 + 1));
      }
      else
      {
        long long v141 = *(_OWORD *)v140;
        *(void *)&long long v353 = *((void *)v140 + 2);
        *(_OWORD *)std::string __p = v141;
      }
      DWORD2(v353) = v138[8 * i + 6];
      (*(void (**)(long long *__return_ptr))(*(void *)*v137 + 16))(&v393);
      char v142 = (unsigned int *)v393;
      if (*((void *)&v393 + 1) == (void)v393)
      {
LABEL_325:
        uint64_t v144 = (int *)v393;
      }
      else
      {
        uint64_t v143 = 4 * ((uint64_t)(*((void *)&v393 + 1) - v393) >> 2);
        do
        {
          if ((*(uint64_t (**)(void, void))(*(void *)*v137 + 96))(*v137, *v142)) {
            goto LABEL_325;
          }
          ++v142;
          v143 -= 4;
        }
        while (v143);
        uint64_t v145 = (int *)*((void *)&v393 + 1);
        uint64_t v144 = (int *)v393;
        if ((void)v393 != *((void *)&v393 + 1))
        {
          uint64_t v146 = v388;
          while (1)
          {
            int v148 = *v144;
            if (v146 >= v389) {
              break;
            }
            *(_DWORD *)uint64_t v146 = v148;
            uint64_t v147 = v146 + 4;
LABEL_297:
            unsigned int v388 = v147;
            ++v144;
            uint64_t v146 = v147;
            if (v144 == v145) {
              goto LABEL_325;
            }
          }
          uint64_t v149 = v387;
          int64_t v150 = v146 - v387;
          uint64_t v151 = (v146 - v387) >> 2;
          unint64_t v152 = v151 + 1;
          if ((unint64_t)(v151 + 1) >> 62) {
            sub_19E37C7C4();
          }
          uint64_t v153 = v389 - v387;
          if ((v389 - v387) >> 1 > v152) {
            unint64_t v152 = v153 >> 1;
          }
          if ((unint64_t)v153 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v154 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v154 = v152;
          }
          if (v154)
          {
            if (v154 >> 62) {
              sub_19E37C2B8();
            }
            uint64_t v155 = operator new(4 * v154);
          }
          else
          {
            uint64_t v155 = 0;
          }
          char v156 = &v155[4 * v151];
          *(_DWORD *)char v156 = v148;
          uint64_t v147 = v156 + 4;
          if (v146 != v149)
          {
            unint64_t v157 = v146 - 4 - v149;
            if (v157 < 0xBC)
            {
              CFStringRef v158 = v146;
              goto LABEL_312;
            }
            if (&v155[v150 - 4 - (v157 & 0xFFFFFFFFFFFFFFFCLL)] > &v155[v150 - 4])
            {
              CFStringRef v158 = v146;
              goto LABEL_312;
            }
            if (&v146[-(v157 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v146 - 4)
            {
              CFStringRef v158 = v146;
              goto LABEL_312;
            }
            if ((unint64_t)(v149 - v155) < 0x20)
            {
              CFStringRef v158 = v146;
              goto LABEL_312;
            }
            uint64_t v160 = (v157 >> 2) + 1;
            CFStringRef v158 = &v146[-4 * (v160 & 0x7FFFFFFFFFFFFFF8)];
            CFStringRef v161 = &v155[v150 - 16];
            CFComparisonResult v162 = v146 - 16;
            uint64_t v163 = v160 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v164 = *(_OWORD *)v162;
              *(v161 - 1) = *((_OWORD *)v162 - 1);
              *CFStringRef v161 = v164;
              v161 -= 2;
              v162 -= 32;
              v163 -= 8;
            }
            while (v163);
            v156 -= 4 * (v160 & 0x7FFFFFFFFFFFFFF8);
            if (v160 != (v160 & 0x7FFFFFFFFFFFFFF8))
            {
              do
              {
LABEL_312:
                int v159 = *((_DWORD *)v158 - 1);
                v158 -= 4;
                *((_DWORD *)v156 - 1) = v159;
                v156 -= 4;
              }
              while (v158 != v149);
            }
          }
          unint64_t v387 = v156;
          unsigned int v388 = v147;
          unsigned int v389 = &v155[4 * v154];
          if (v149) {
            operator delete(v149);
          }
          goto LABEL_297;
        }
      }
      if (v144)
      {
        *((void *)&v393 + 1) = v144;
        operator delete(v144);
      }
      if (SBYTE7(v353) < 0) {
        operator delete(__p[0]);
      }
      int64_t v138 = v368;
    }
  }
  long long v385 = 0uLL;
  unsigned int v386 = 0;
  HIBYTE(v362) = 0;
  uint64_t v165 = 3;
  if (v342 < 3) {
    uint64_t v165 = v342;
  }
  LOBYTE(v361[0]) = 0;
  uint64_t v348 = v165;
  if (!v165) {
    goto LABEL_682;
  }
  unint64_t v166 = 0;
  while (2)
  {
    uint64_t v167 = (*(uint64_t (**)(void, char **, uint64_t))(*(void *)v137[2] + 56))(v137[2], &v387, a4);
    if (!v167) {
      break;
    }
    int v168 = (CFTypeRef *)(*(uint64_t (**)(uint64_t))(*(void *)v167 + 16))(v167);
    uint64_t v169 = v137[6];
    CFTypeRef v170 = *v168;
    if (*v168) {
      CFRetain(*v168);
    }
    CFTypeRef v382 = v170;
    if (!*(unsigned char *)(v169 + 88))
    {
      sub_19E4A4664(v169);
      goto LABEL_356;
    }
    if (*(void *)(v169 + 16) <= v166 || 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v385 + 1) - v385) >> 3) < v166)
    {
LABEL_356:
      HIBYTE(v384) = 0;
      LOBYTE(__src[0]) = 0;
      if (!v170) {
        goto LABEL_358;
      }
      goto LABEL_357;
    }
    unint64_t v390 = 0;
    unsigned int v391 = 0;
    unint64_t v392 = 0;
    uint64_t v171 = *(void *)(v169 + 96);
    uint64_t v172 = *(void *)v169;
    *(void *)&long long v393 = 0;
    *((void *)&v393 + 1) = &v393;
    uint64_t v394 = 0x2000000000;
    uint64_t v173 = off_1E945A210;
    unsigned int v395 = off_1E945A210;
    if (!off_1E945A210)
    {
      __p[0] = (void *)MEMORY[0x1E4F143A8];
      __p[1] = (void *)0x40000000;
      *(void *)&long long v353 = sub_19E4A5474;
      *((void *)&v353 + 1) = &unk_1E59A04D8;
      unsigned int v354 = (void **)&v393;
      sub_19E4A5474((uint64_t)__p);
      uint64_t v173 = *(void **)(*((void *)&v393 + 1) + 24);
    }
    _Block_object_dispose(&v393, 8);
    if (!v173)
    {
LABEL_711:
      dlerror();
      abort_report_np();
      __break(1u);
      return;
    }
    uint64_t v174 = (char *)((uint64_t (*)(uint64_t, CFTypeRef, void, __CFString *, uint64_t, void))v173)(v171, v170, 0, @"ane_gpt2_transformer_layer_3d_5/attn_v_s", v172, 0);
    if (v174) {
      sub_19E44A444(&v390, v174, &v174[4 * *(void *)(v169 + 8)], *(void *)(v169 + 8));
    }
    unint64_t v175 = HIBYTE(v367);
    if (v367 < 0) {
      unint64_t v175 = *((void *)&v366 + 1);
    }
    int8x8_t v176 = *(int8x8_t *)(v169 + 32);
    unint64_t v177 = 1;
    if (v166) {
      unint64_t v177 = 2;
    }
    if (v175 >= 4) {
      unint64_t v175 = 4;
    }
    if (!*(void *)&v176) {
      goto LABEL_716;
    }
    uint8x8_t v178 = (uint8x8_t)vcnt_s8(v176);
    v178.i16[0] = vaddlv_u8(v178);
    if (v178.u32[0] > 1uLL)
    {
      unint64_t v179 = v177;
      if (v177 >= *(void *)&v176) {
        unint64_t v179 = v177 % *(void *)&v176;
      }
    }
    else
    {
      unint64_t v179 = (*(void *)&v176 + 3) & v177;
    }
    float v209 = *(void **)(*(void *)(v169 + 24) + 8 * v179);
    if (!v209 || (unsigned int v210 = (void *)*v209) == 0) {
LABEL_716:
    }
      sub_19E392294("unordered_map::at: key not found");
    if (v178.u32[0] < 2uLL)
    {
      uint64_t v211 = *(void *)&v176 - 1;
      while (1)
      {
        uint64_t v213 = v210[1];
        if (v177 == v213)
        {
          if (v210[2] == v177) {
            goto LABEL_432;
          }
        }
        else if ((v213 & v211) != v179)
        {
          goto LABEL_716;
        }
        unsigned int v210 = (void *)*v210;
        if (!v210) {
          goto LABEL_716;
        }
      }
    }
    while (1)
    {
      unint64_t v212 = v210[1];
      if (v177 == v212) {
        break;
      }
      if (v212 >= *(void *)&v176) {
        v212 %= *(void *)&v176;
      }
      if (v212 != v179) {
        goto LABEL_716;
      }
LABEL_422:
      unsigned int v210 = (void *)*v210;
      if (!v210) {
        goto LABEL_716;
      }
    }
    if (v210[2] != v177) {
      goto LABEL_422;
    }
LABEL_432:
    int8x8_t v214 = (int8x8_t)v210[4];
    if (!*(void *)&v214) {
      goto LABEL_716;
    }
    uint8x8_t v215 = (uint8x8_t)vcnt_s8(v214);
    v215.i16[0] = vaddlv_u8(v215);
    if (v215.u32[0] > 1uLL)
    {
      unint64_t v216 = v175;
      if (v175 >= *(void *)&v214) {
        unint64_t v216 = v175 % *(void *)&v214;
      }
    }
    else
    {
      unint64_t v216 = (*(void *)&v214 + 7) & v175;
    }
    double v217 = *(float ***)(v210[3] + 8 * v216);
    if (!v217) {
      goto LABEL_716;
    }
    long long v218 = *v217;
    if (!v218) {
      goto LABEL_716;
    }
    if (v215.u32[0] < 2uLL)
    {
      uint64_t v219 = *(void *)&v214 - 1;
      while (1)
      {
        uint64_t v221 = *((void *)v218 + 1);
        if (v175 == v221)
        {
          if (*((void *)v218 + 2) == v175) {
            goto LABEL_452;
          }
        }
        else if ((v221 & v219) != v216)
        {
          goto LABEL_716;
        }
        long long v218 = *(float **)v218;
        if (!v218) {
          goto LABEL_716;
        }
      }
    }
    while (1)
    {
      unint64_t v220 = *((void *)v218 + 1);
      if (v175 == v220) {
        break;
      }
      if (v220 >= *(void *)&v214) {
        v220 %= *(void *)&v214;
      }
      if (v220 != v216) {
        goto LABEL_716;
      }
LABEL_442:
      long long v218 = *(float **)v218;
      if (!v218) {
        goto LABEL_716;
      }
    }
    if (*((void *)v218 + 2) != v175) {
      goto LABEL_442;
    }
LABEL_452:
    uint64_t v222 = v390;
    CFStringRef v223 = v390 + 4;
    BOOL v224 = v390 == v391 || v223 == v391;
    unsigned int v225 = (float *)v390;
    if (!v224)
    {
      float v226 = *(float *)v390;
      unsigned int v225 = (float *)v390;
      unsigned int v227 = v390 + 4;
      do
      {
        float v228 = *(float *)v227;
        v227 += 4;
        BOOL v229 = v226 < v228;
        float v226 = fmaxf(v226, v228);
        if (v229) {
          unsigned int v225 = (float *)v223;
        }
        CFStringRef v223 = v227;
      }
      while (v227 != v391);
    }
    if (*v225 < v218[6])
    {
      HIBYTE(v384) = 0;
      LOBYTE(__src[0]) = 0;
      goto LABEL_678;
    }
    unsigned int v230 = (long long **)(*(void *)(v169 + 64) + 24 * (((char *)v225 - v390) >> 2));
    __p[1] = 0;
    *(void *)&long long v353 = 0;
    __p[0] = 0;
    sub_19E3938C0((char *)__p, *v230, v230[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v230[1] - (char *)*v230) >> 3));
    unsigned int v231 = (void **)__p[0];
    if (0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3) <= v166)
    {
      HIBYTE(v384) = 0;
      LOBYTE(__src[0]) = 0;
      goto LABEL_669;
    }
    if (*((char *)__p[0] + 23) < 0)
    {
      sub_19E39369C(&v393, *(void **)__p[0], *((void *)__p[0] + 1));
    }
    else
    {
      long long v232 = *(_OWORD *)__p[0];
      uint64_t v394 = *((void *)__p[0] + 2);
      long long v393 = v232;
    }
    if (!v166)
    {
      if (v367 >= 0) {
        size_t v313 = HIBYTE(v367);
      }
      else {
        size_t v313 = *((void *)&v366 + 1);
      }
      size_t v314 = HIBYTE(v394);
      if (v394 < 0) {
        size_t v314 = *((void *)&v393 + 1);
      }
      if (v314 < v313) {
        goto LABEL_665;
      }
      uint64_t v315 = v394 >= 0 ? &v393 : (long long *)v393;
      v316 = v367 >= 0 ? &v366 : (long long *)v366;
      if (memcmp(v315, v316, v313)) {
        goto LABEL_665;
      }
LABEL_667:
      *(_OWORD *)std::string __src = v393;
      uint64_t v384 = v394;
      uint64_t v394 = 0;
      long long v393 = 0uLL;
      goto LABEL_668;
    }
    int v301 = (char *)__p[0];
    uint64_t v302 = v385;
    unsigned int v303 = (unsigned __int8 *)__p[0] + 24 * v166;
    uint64_t v304 = 24 * v166 + v385;
    uint64_t v305 = v303[23];
    if ((v305 & 0x80u) == 0) {
      uint64_t v306 = v303[23];
    }
    else {
      uint64_t v306 = *((void *)v303 + 1);
    }
    uint64_t v307 = *(unsigned __int8 *)(v304 - 1);
    int v308 = (char)v307;
    if ((v307 & 0x80u) != 0) {
      uint64_t v307 = *(void *)(v304 - 16);
    }
    if (v306 != v307) {
      goto LABEL_665;
    }
    int v311 = *(unsigned __int8 **)(v304 - 24);
    unsigned int v309 = (unsigned __int8 *)(v304 - 24);
    v310 = v311;
    if (v308 >= 0) {
      unsigned int v312 = v309;
    }
    else {
      unsigned int v312 = v310;
    }
    if ((v305 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v303, v312, *((void *)v303 + 1))) {
        goto LABEL_665;
      }
LABEL_649:
      if (v166 != 1)
      {
        unsigned int v317 = &v301[24 * v166 - 24];
        uint64_t v318 = v302 + 24 * v166;
        uint64_t v319 = v317[23];
        if ((v319 & 0x80u) == 0) {
          uint64_t v320 = v317[23];
        }
        else {
          uint64_t v320 = *((void *)v317 + 1);
        }
        uint64_t v321 = *(unsigned __int8 *)(v318 - 25);
        int v322 = (char)v321;
        if ((v321 & 0x80u) != 0) {
          uint64_t v321 = *(void *)(v318 - 40);
        }
        if (v320 != v321) {
          goto LABEL_665;
        }
        unsigned int v325 = *(unsigned __int8 **)(v318 - 48);
        unint64_t v323 = (unsigned __int8 *)(v318 - 48);
        int v324 = v325;
        if (v322 >= 0) {
          unsigned int v326 = v323;
        }
        else {
          unsigned int v326 = v324;
        }
        if ((v319 & 0x80) != 0)
        {
          if (memcmp(*(const void **)v317, v326, *((void *)v317 + 1))) {
            goto LABEL_665;
          }
        }
        else if (v317[23])
        {
          while (*v317 == *v326)
          {
            ++v317;
            ++v326;
            if (!--v319) {
              goto LABEL_667;
            }
          }
          goto LABEL_665;
        }
      }
      goto LABEL_667;
    }
    if (!v303[23]) {
      goto LABEL_649;
    }
    while (*v303 == *v312)
    {
      ++v303;
      ++v312;
      if (!--v305) {
        goto LABEL_649;
      }
    }
LABEL_665:
    HIBYTE(v384) = 0;
    LOBYTE(__src[0]) = 0;
    if (SHIBYTE(v394) < 0) {
      operator delete((void *)v393);
    }
LABEL_668:
    unsigned int v231 = (void **)__p[0];
LABEL_669:
    if (v231)
    {
      v327 = (void **)__p[1];
      unsigned int v328 = v231;
      if (__p[1] != v231)
      {
        do
        {
          if (*((char *)v327 - 1) < 0) {
            operator delete(*(v327 - 3));
          }
          v327 -= 3;
        }
        while (v327 != v231);
        unsigned int v328 = (void **)__p[0];
      }
      __p[1] = v231;
      operator delete(v328);
    }
    uint64_t v222 = v390;
LABEL_678:
    if (v222)
    {
      unsigned int v391 = v222;
      operator delete(v222);
    }
    CFTypeRef v170 = v382;
    if (v382) {
LABEL_357:
    }
      CFRelease(v170);
LABEL_358:
    if ((SHIBYTE(v384) & 0x80000000) == 0)
    {
      if (HIBYTE(v384))
      {
        uint64_t v180 = (void *)v137[4];
        long long v380 = *(_OWORD *)__src;
        uint64_t v381 = v384;
        goto LABEL_363;
      }
      break;
    }
    if (!__src[1])
    {
      int v208 = 7;
      goto LABEL_475;
    }
    uint64_t v180 = (void *)v137[4];
    sub_19E39369C(&v380, __src[0], (unint64_t)__src[1]);
LABEL_363:
    unsigned __int16 v181 = sub_19E4144E0(v180, (uint64_t)&v380);
    if (SHIBYTE(v381) < 0) {
      operator delete((void *)v380);
    }
    if (v181 >= 0x100u && (_BYTE)v181)
    {
LABEL_473:
      int v208 = 7;
      goto LABEL_474;
    }
    if (SHIBYTE(v384) < 0)
    {
      sub_19E39369C(&bytes, __src[0], (unint64_t)__src[1]);
    }
    else
    {
      long long bytes = *(_OWORD *)__src;
      uint64_t v379 = v384;
    }
    uint64_t v182 = (char *)v368;
    unint64_t v183 = (v369 - (unsigned char *)v368) >> 5;
    if ((unint64_t)(v369 - (unsigned char *)v368) <= 0x140) {
      unint64_t v184 = 0;
    }
    else {
      unint64_t v184 = v183 - 10;
    }
    uint64_t v185 = v137[4];
    uint64_t v186 = *(const void **)(v185 + 176);
    if (!v186)
    {
      __p[0] = 0;
      unsigned __int8 v187 = HIBYTE(v379);
      if (SHIBYTE(v379) < 0) {
        goto LABEL_377;
      }
LABEL_375:
      CFIndex v188 = v187;
      p_long long bytes = (const UInt8 *)&bytes;
LABEL_379:
      CFStringRef v190 = CFStringCreateWithBytes(0, p_bytes, v188, 0x8000100u, 0);
      *(void *)&long long v393 = v190;
      if (!v190)
      {
        exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x19F3BD790](exception, "Could not construct");
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      if (v184 >= v183) {
        goto LABEL_466;
      }
      goto LABEL_381;
    }
    CFRetain(*(CFTypeRef *)(v185 + 176));
    sub_19E40100C(__p, v186);
    unsigned __int8 v187 = HIBYTE(v379);
    if ((SHIBYTE(v379) & 0x80000000) == 0) {
      goto LABEL_375;
    }
LABEL_377:
    p_long long bytes = (const UInt8 *)bytes;
    if ((void)bytes)
    {
      CFIndex v188 = *((void *)&bytes + 1);
      goto LABEL_379;
    }
    CFStringRef v190 = 0;
    *(void *)&long long v393 = 0;
    if (v184 < v183)
    {
LABEL_381:
      unint64_t v351 = v166;
      while (1)
      {
        long long v191 = &v182[32 * v184];
        if ((v191[23] & 0x80000000) == 0) {
          break;
        }
        if (*(void *)v191)
        {
          CFIndex v192 = *((void *)v191 + 1);
          long long v191 = *(char **)v191;
LABEL_387:
          uint64_t v193 = (char *)CFStringCreateWithBytes(0, (const UInt8 *)v191, v192, 0x8000100u, 0);
          unint64_t v390 = v193;
          if (!v193)
          {
            unsigned int v338 = __cxa_allocate_exception(0x10uLL);
            MEMORY[0x19F3BD790](v338, "Could not construct");
            __cxa_throw(v338, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          CFArrayRef v194 = (const __CFArray *)__p[0];
          if (!__p[0]) {
            goto LABEL_408;
          }
          goto LABEL_389;
        }
        uint64_t v193 = 0;
        unint64_t v390 = 0;
        CFArrayRef v194 = (const __CFArray *)__p[0];
        if (!__p[0]) {
          goto LABEL_408;
        }
LABEL_389:
        CFIndex Count = CFArrayGetCount(v194);
        CFIndex v196 = Count;
        CFArrayRef v197 = (const __CFArray *)__p[0];
        if (__p[0])
        {
          CFIndex v198 = CFArrayGetCount((CFArrayRef)__p[0]);
          if (!v196) {
            goto LABEL_408;
          }
        }
        else
        {
          CFIndex v198 = 0;
          if (!Count) {
            goto LABEL_408;
          }
        }
        if (v194 != v197)
        {
          unint64_t v203 = 0;
          while (1)
          {
            if (CFArrayGetCount(v194) <= v203
              || (CFLocaleRef ValueAtIndex = (const __CFLocale *)CFArrayGetValueAtIndex(v194, v203), (v205 = ValueAtIndex) == 0))
            {
LABEL_719:
              unsigned int v337 = __cxa_allocate_exception(0x10uLL);
              MEMORY[0x19F3BD790](v337, "Could not find item");
              __cxa_throw(v337, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            CFRetain(ValueAtIndex);
            CFLocaleRef v396 = v205;
            CFStringRef v190 = (const __CFString *)v393;
            v398.length = CFStringGetLength((CFStringRef)v193);
            v398.locatiouint64_t n = 0;
            CFComparisonResult v206 = CFStringCompareWithOptionsAndLocale((CFStringRef)v193, v190, v398, 1uLL, v205);
            CFRelease(v205);
            if (v206 == kCFCompareEqualTo) {
              break;
            }
            if (v196 == ++v203) {
              goto LABEL_408;
            }
          }
LABEL_410:
          if (v193) {
            CFRelease(v193);
          }
          char v207 = 1;
          unint64_t v166 = v351;
          if (v190) {
            goto LABEL_467;
          }
          goto LABEL_468;
        }
        unint64_t v199 = 0;
        do
        {
          if (v198 == v199) {
            break;
          }
          if (CFArrayGetCount(v194) <= v199) {
            goto LABEL_719;
          }
          CFLocaleRef v200 = (const __CFLocale *)CFArrayGetValueAtIndex(v194, v199);
          CFLocaleRef v201 = v200;
          if (!v200) {
            goto LABEL_719;
          }
          CFRetain(v200);
          CFLocaleRef v396 = v201;
          CFStringRef v190 = (const __CFString *)v393;
          v397.length = CFStringGetLength((CFStringRef)v193);
          v397.locatiouint64_t n = 0;
          CFComparisonResult v202 = CFStringCompareWithOptionsAndLocale((CFStringRef)v193, v190, v397, 1uLL, v201);
          CFRelease(v201);
          if (v202 == kCFCompareEqualTo) {
            goto LABEL_410;
          }
          ++v199;
        }
        while (v196 != v199);
LABEL_408:
        unint64_t v166 = v351;
        if (v193) {
          CFRelease(v193);
        }
        ++v184;
        uint64_t v182 = (char *)v368;
        if (v184 >= (v369 - (unsigned char *)v368) >> 5)
        {
          char v207 = 0;
          CFStringRef v190 = (const __CFString *)v393;
          if ((void)v393) {
            goto LABEL_467;
          }
          goto LABEL_468;
        }
      }
      CFIndex v192 = v191[23];
      goto LABEL_387;
    }
LABEL_466:
    char v207 = 0;
    if (v190) {
LABEL_467:
    }
      CFRelease(v190);
LABEL_468:
    if (__p[0]) {
      CFRelease(__p[0]);
    }
    if (SHIBYTE(v379) < 0) {
      operator delete((void *)bytes);
    }
    if (v207) {
      goto LABEL_473;
    }
    if (v166)
    {
      int v233 = SHIBYTE(v362);
      if (v362 >= 0) {
        size_t v234 = HIBYTE(v362);
      }
      else {
        size_t v234 = (size_t)v361[1];
      }
      unint64_t v235 = v234 + 1;
      if (v234 + 1 >= 0x7FFFFFFFFFFFFFF8) {
        sub_19E37C958();
      }
      if (v235 >= 0x17)
      {
        uint64_t v237 = (v235 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v235 | 7) != 0x17) {
          uint64_t v237 = v235 | 7;
        }
        uint64_t v238 = v237 + 1;
        p_dst = (std::string *)operator new(v237 + 1);
        __dst.__r_.__value_.__l.__size_ = v234 + 1;
        __dst.__r_.__value_.__r.__words[2] = v238 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        memset(&__dst, 0, sizeof(__dst));
        p_dst = &__dst;
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v234 + 1;
        if (!v234) {
          goto LABEL_496;
        }
      }
      if (v233 >= 0) {
        uint64_t v239 = v361;
      }
      else {
        uint64_t v239 = (void **)v361[0];
      }
      memmove(p_dst, v239, v234);
LABEL_496:
      *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v234) = 32;
      if (v384 >= 0) {
        int64_t v240 = __src;
      }
      else {
        int64_t v240 = (void **)__src[0];
      }
      if (v384 >= 0) {
        std::string::size_type v241 = HIBYTE(v384);
      }
      else {
        std::string::size_type v241 = (std::string::size_type)__src[1];
      }
      unsigned int v242 = std::string::append(&__dst, (const std::string::value_type *)v240, v241);
      long long v243 = *(_OWORD *)&v242->__r_.__value_.__l.__data_;
      *(void *)&long long v353 = *((void *)&v242->__r_.__value_.__l + 2);
      *(_OWORD *)std::string __p = v243;
      v242->__r_.__value_.__l.__size_ = 0;
      v242->__r_.__value_.__r.__words[2] = 0;
      v242->__r_.__value_.__r.__words[0] = 0;
    }
    else if (SHIBYTE(v384) < 0)
    {
      sub_19E39369C(__p, __src[0], (unint64_t)__src[1]);
    }
    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)__src;
      *(void *)&long long v353 = v384;
    }
    if (SHIBYTE(v362) < 0) {
      operator delete(v361[0]);
    }
    *(_OWORD *)unsigned int v361 = *(_OWORD *)__p;
    uint64_t v362 = v353;
    BYTE7(v353) = 0;
    LOBYTE(__p[0]) = 0;
    if (v166 && SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
    unint64_t v244 = *((void *)&v385 + 1);
    unint64_t v245 = v385;
    if (*((void *)&v385 + 1) >= (unint64_t)v386)
    {
      unint64_t v253 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v385 + 1) - v385) >> 3) + 1;
      if (v253 > 0xAAAAAAAAAAAAAAALL) {
        sub_19E37C7C4();
      }
      if (0x5555555555555556 * (((uint64_t)v386 - (uint64_t)v385) >> 3) > v253) {
        unint64_t v253 = 0x5555555555555556 * (((uint64_t)v386 - (uint64_t)v385) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v386 - (uint64_t)v385) >> 3) >= 0x555555555555555) {
        unint64_t v254 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v254 = v253;
      }
      unsigned int v354 = &v386;
      if (v254)
      {
        if (v254 > 0xAAAAAAAAAAAAAAALL) {
          sub_19E37C2B8();
        }
        unsigned int v255 = operator new(24 * v254);
        __p[1] = v255;
        *(void *)&long long v353 = v255;
        unsigned int v256 = &v255[3 * v254];
        __p[0] = v255;
      }
      else
      {
        *(_OWORD *)std::string __p = 0u;
        long long v353 = 0u;
        unsigned int v255 = operator new(0x18uLL);
        unsigned int v256 = v255 + 3;
        __p[0] = v255;
        __p[1] = v255;
        *(void *)&long long v353 = v255;
      }
      *((void *)&v353 + 1) = v256;
      if (SHIBYTE(v384) < 0)
      {
        sub_19E39369C(v255, __src[0], (unint64_t)__src[1]);
      }
      else
      {
        *(_OWORD *)unsigned int v255 = *(_OWORD *)__src;
        v255[2] = v384;
      }
      unsigned int v264 = (char *)__p[1];
      uint64_t v263 = v353;
      uint64_t v265 = v385;
      if ((void)v385 == v245)
      {
        unsigned int v267 = (char *)__p[1];
      }
      else
      {
        unint64_t v266 = v245;
        do
        {
          unsigned int v267 = v264 - 24;
          long long v268 = *(_OWORD *)(v266 - 24);
          *((void *)v264 - 1) = *(void *)(v266 - 8);
          *(_OWORD *)(v264 - 24) = v268;
          *(void *)(v266 - 16) = 0;
          *(void *)(v266 - 8) = 0;
          *(void *)(v266 - 24) = 0;
          v264 -= 24;
          v266 -= 24;
        }
        while (v266 != v265);
      }
      uint64_t v269 = v263 + 24;
      uint64_t v270 = *((void *)&v385 + 1);
      if (*((void *)&v385 + 1) != v245)
      {
        do
        {
          long long v271 = *(_OWORD *)v245;
          *(void *)(v269 + 16) = *(void *)(v245 + 16);
          *(_OWORD *)uint64_t v269 = v271;
          v269 += 24;
          *(void *)(v245 + 8) = 0;
          *(void *)(v245 + 16) = 0;
          *(void *)unint64_t v245 = 0;
          v245 += 24;
        }
        while (v245 != v270);
        unint64_t v245 = *((void *)&v385 + 1);
      }
      unint64_t v272 = (void *)v385;
      v273 = v386;
      *(void *)&long long v385 = v267;
      *((void *)&v385 + 1) = v269;
      unsigned int v386 = (void *)*((void *)&v353 + 1);
      *(void *)&long long v353 = v245;
      *((void *)&v353 + 1) = v273;
      __p[0] = v272;
      __p[1] = v272;
      if ((void *)v245 != v272)
      {
        unint64_t v274 = v245 - 24;
        do
        {
          *(void *)&long long v353 = v274;
          if (*(char *)(v274 + 23) < 0) {
            operator delete(*(void **)v274);
          }
          v274 -= 24;
        }
        while ((void *)(v274 + 24) != v272);
        unint64_t v245 = (unint64_t)v272;
      }
      if (v245) {
        operator delete((void *)v245);
      }
    }
    else if ((void)v385 == *((void *)&v385 + 1))
    {
      if (SHIBYTE(v384) < 0)
      {
        sub_19E39369C((unsigned char *)v385, __src[0], (unint64_t)__src[1]);
      }
      else
      {
        long long v262 = *(_OWORD *)__src;
        *(void *)(v385 + 16) = v384;
        *(_OWORD *)unint64_t v245 = v262;
      }
      *((void *)&v385 + 1) = v245 + 24;
    }
    else
    {
      uint64_t v246 = *((void *)&v385 + 1) - 24;
      uint64_t v247 = *((void *)&v385 + 1);
      unint64_t v248 = *((void *)&v385 + 1) - 24;
      if (*((void *)&v385 + 1) >= 0x18uLL)
      {
        do
        {
          long long v249 = *(_OWORD *)v248;
          *(void *)(v247 + 16) = *(void *)(v248 + 16);
          *(_OWORD *)uint64_t v247 = v249;
          v247 += 24;
          *(void *)(v248 + 8) = 0;
          *(void *)(v248 + 16) = 0;
          *(void *)unint64_t v248 = 0;
          v248 += 24;
        }
        while (v248 < v244);
      }
      *((void *)&v385 + 1) = v247;
      if (v244 != v245 + 24)
      {
        unint64_t v250 = v244 - (v245 + 24);
        do
        {
          if (*(char *)(v246 + 23) < 0) {
            operator delete(*(void **)v246);
          }
          unsigned int v251 = (long long *)(v245 + v250 - 24);
          long long v252 = *v251;
          *(void *)(v246 + 16) = *(void *)(v245 + v250 - 8);
          *(_OWORD *)uint64_t v246 = v252;
          v246 -= 24;
          *(unsigned char *)(v245 + v250 - 1) = 0;
          *(unsigned char *)unsigned int v251 = 0;
          v250 -= 24;
        }
        while (v250);
      }
      BOOL v258 = v245 <= (unint64_t)__src && *((void *)&v385 + 1) > (unint64_t)__src;
      unsigned int v259 = &__src[3 * v258];
      if ((void **)v245 != v259)
      {
        char v260 = *((unsigned char *)v259 + 23);
        if (*(char *)(v245 + 23) < 0)
        {
          if (v260 >= 0) {
            unsigned int v275 = v259;
          }
          else {
            unsigned int v275 = (void **)__src[0];
          }
          if (v260 >= 0) {
            size_t v276 = *((unsigned __int8 *)v259 + 23);
          }
          else {
            size_t v276 = (size_t)v259[1];
          }
          sub_19E3C6D44((void **)v245, v275, v276);
        }
        else if ((*((unsigned char *)v259 + 23) & 0x80) != 0)
        {
          sub_19E3C6C7C((void *)v245, __src[0], (size_t)v259[1]);
        }
        else
        {
          long long v261 = *(_OWORD *)v259;
          *(void *)(v245 + 16) = v259[2];
          *(_OWORD *)unint64_t v245 = v261;
        }
      }
    }
    uint64_t v277 = *v137;
    sub_19E43C40C(&v393, (uint64_t)__src);
    sub_19E371C70(__p, (const UInt8 *)&v393);
    DWORD2(v353) = v395;
    (*(void (**)(char **__return_ptr, uint64_t, void **))(*(void *)v277 + 16))(&v390, v277, __p);
    if (SBYTE7(v353) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v394) < 0) {
      operator delete((void *)v393);
    }
    char v278 = v390;
    if (v391 == v390)
    {
      int v208 = 0;
      goto LABEL_613;
    }
    int64_t v279 = 4 * ((v391 - v390) >> 2);
    do
    {
      if ((*(uint64_t (**)(void, void))(*(void *)*v137 + 96))(*v137, *(unsigned int *)v278))
      {
        int v208 = 9;
        goto LABEL_613;
      }
      v278 += 4;
      v279 -= 4;
    }
    while (v279);
    unsigned int v281 = v390;
    v280 = v391;
    if (v390 == v391)
    {
      int v208 = 0;
      if (v390) {
        goto LABEL_614;
      }
      goto LABEL_474;
    }
    unsigned int v282 = v388;
    while (2)
    {
      int v284 = *(_DWORD *)v281;
      if (v282 < v389)
      {
        *(_DWORD *)unsigned int v282 = v284;
        unsigned int v283 = v282 + 4;
      }
      else
      {
        int v285 = v387;
        int64_t v286 = v282 - v387;
        uint64_t v287 = (v282 - v387) >> 2;
        unint64_t v288 = v287 + 1;
        if ((unint64_t)(v287 + 1) >> 62) {
          sub_19E37C7C4();
        }
        uint64_t v289 = v389 - v387;
        if ((v389 - v387) >> 1 > v288) {
          unint64_t v288 = v289 >> 1;
        }
        if ((unint64_t)v289 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v290 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v290 = v288;
        }
        if (v290)
        {
          if (v290 >> 62) {
            sub_19E37C2B8();
          }
          uint64_t v291 = operator new(4 * v290);
        }
        else
        {
          uint64_t v291 = 0;
        }
        v292 = &v291[4 * v287];
        *(_DWORD *)v292 = v284;
        unsigned int v283 = v292 + 4;
        if (v282 != v285)
        {
          unint64_t v293 = v282 - 4 - v285;
          if (v293 < 0xBC)
          {
            unsigned int v294 = v282;
            goto LABEL_597;
          }
          if (&v291[v286 - 4 - (v293 & 0xFFFFFFFFFFFFFFFCLL)] > &v291[v286 - 4])
          {
            unsigned int v294 = v282;
            goto LABEL_597;
          }
          if (&v282[-(v293 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v282 - 4)
          {
            unsigned int v294 = v282;
            goto LABEL_597;
          }
          if ((unint64_t)(v285 - v291) < 0x20)
          {
            unsigned int v294 = v282;
            goto LABEL_597;
          }
          uint64_t v296 = (v293 >> 2) + 1;
          unsigned int v294 = &v282[-4 * (v296 & 0x7FFFFFFFFFFFFFF8)];
          int v297 = &v291[v286 - 16];
          unsigned int v298 = v282 - 16;
          uint64_t v299 = v296 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v300 = *(_OWORD *)v298;
            *(v297 - 1) = *((_OWORD *)v298 - 1);
            *int v297 = v300;
            v297 -= 2;
            v298 -= 32;
            v299 -= 8;
          }
          while (v299);
          v292 -= 4 * (v296 & 0x7FFFFFFFFFFFFFF8);
          if (v296 != (v296 & 0x7FFFFFFFFFFFFFF8))
          {
            do
            {
LABEL_597:
              int v295 = *((_DWORD *)v294 - 1);
              v294 -= 4;
              *((_DWORD *)v292 - 1) = v295;
              v292 -= 4;
            }
            while (v294 != v285);
          }
        }
        unint64_t v387 = v292;
        unsigned int v388 = v283;
        unsigned int v389 = &v291[4 * v290];
        if (v285) {
          operator delete(v285);
        }
      }
      unsigned int v388 = v283;
      v281 += 4;
      unsigned int v282 = v283;
      if (v281 != v280) {
        continue;
      }
      break;
    }
    int v208 = 0;
LABEL_613:
    unsigned int v281 = v390;
    if (v390)
    {
LABEL_614:
      unsigned int v391 = v281;
      operator delete(v281);
    }
LABEL_474:
    if (SHIBYTE(v384) < 0) {
LABEL_475:
    }
      operator delete(__src[0]);
    if ((v208 == 9 || !v208) && ++v166 != v348) {
      continue;
    }
    break;
  }
LABEL_682:
  uint64_t v329 = v385;
  if ((void)v385)
  {
    uint64_t v330 = *((void *)&v385 + 1);
    unsigned int v331 = (void *)v385;
    if (*((void *)&v385 + 1) != (void)v385)
    {
      do
      {
        if (*(char *)(v330 - 1) < 0) {
          operator delete(*(void **)(v330 - 24));
        }
        v330 -= 24;
      }
      while (v330 != v329);
      unsigned int v331 = (void *)v385;
    }
    *((void *)&v385 + 1) = v329;
    operator delete(v331);
  }
  if (v387)
  {
    unsigned int v388 = v387;
    operator delete(v387);
  }
  unsigned int v334 = (void *)HIBYTE(v362);
  if (v362 < 0) {
    unsigned int v334 = v361[1];
  }
  if (v334
    && (sub_19E3E8258((uint64_t)v361, (uint64_t)v375, (uint64_t)v376, *(void *)(**v343 + 24), *(void *)(**v343 + 32)) & 1) == 0)
  {
    *(void *)&long long v353 = 0;
    WORD4(v353) = 0;
    LOBYTE(v354) = 1;
    long long v357 = xmmword_19E572FD0;
    uint64_t v359 = 0;
    uint64_t v360 = 0;
    unint64_t v358 = 0xFFEFFFFFFFFFFFFFLL;
    long long v355 = xmmword_19E573000;
    int v356 = 2;
    *(int64x2_t *)std::string __p = vdupq_n_s64(0xBF847AE147AE147BLL);
    sub_19E3E9B48((uint64_t)&bytes, (uint64_t)v361, (uint64_t)v361, (uint64_t)__p);
  }
  if (SHIBYTE(v362) < 0) {
    operator delete(v361[0]);
  }
  LOBYTE(v42) = HIBYTE(v367);
LABEL_255:
  if ((v42 & 0x80) != 0)
  {
    size_t v131 = (long long *)v366;
    goto LABEL_257;
  }
LABEL_258:
  unint64_t v34 = (unsigned __int8 *)v368;
LABEL_259:
  if (v34)
  {
    for (uint64_t j = (unsigned __int8 *)v369; j != v34; j -= 32)
    {
      if ((char)*(j - 9) < 0) {
        operator delete(*((void **)j - 4));
      }
    }
    unsigned int v369 = (char *)v34;
    operator delete(v34);
  }
  if (v374 && SHIBYTE(v372) < 0) {
    operator delete((void *)v371);
  }
  unint64_t v11 = (void **)v375;
LABEL_270:
  if (v11)
  {
    uint64_t v133 = v376;
    uint64_t v134 = v11;
    if (v376 != v11)
    {
      do
      {
        if (*((char *)v133 - 9) < 0) {
          operator delete(*(v133 - 4));
        }
        v133 -= 4;
      }
      while (v133 != v11);
      uint64_t v134 = v375;
    }
    uint64_t v376 = v11;
    operator delete(v134);
  }
}